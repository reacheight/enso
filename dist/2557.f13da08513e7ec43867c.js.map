{"version":3,"file":"2557.f13da08513e7ec43867c.js","mappings":"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","sources":["webpack://telegram-t/./src/hooks/useImageLoader.ts","webpack://telegram-t/./src/hooks/animations/useTransitionActiveKey.ts","webpack://telegram-t/./src/components/common/PeerChip.tsx","webpack://telegram-t/./src/components/common/PeerChip.module.scss?346e","webpack://telegram-t/./src/hooks/useResizeMessageObserver.ts","webpack://telegram-t/./src/hooks/schedulers/useTimeout.ts","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/util/events/getPointerPosition.ts","webpack://telegram-t/./src/components/common/reactions/ReactionStaticEmoji.tsx","webpack://telegram-t/./src/components/common/PremiumProgress.module.scss?8969","webpack://telegram-t/./src/components/common/PremiumProgress.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/hooks/useSchedule.tsx","webpack://telegram-t/./src/components/common/AvatarList.tsx","webpack://telegram-t/./src/components/common/AvatarList.module.scss?00d4","webpack://telegram-t/./src/components/common/MediaSpoiler.tsx","webpack://telegram-t/./src/components/common/MediaSpoiler.module.scss?4929","webpack://telegram-t/./src/util/resolveTransitionName.ts","webpack://telegram-t/./src/components/common/pickers/PickerStyles.module.scss?c0e4","webpack://telegram-t/./src/components/middle/message/actions/ChannelPhoto.tsx","webpack://telegram-t/./src/components/middle/message/actions/Gift.tsx","webpack://telegram-t/./src/components/middle/message/actions/GiveawayPrize.tsx","webpack://telegram-t/./src/components/middle/message/actions/StarGift.tsx","webpack://telegram-t/./src/components/middle/message/actions/StarGiftUnique.tsx","webpack://telegram-t/./src/components/middle/message/actions/SuggestedPhoto.tsx","webpack://telegram-t/./src/components/middle/message/actions/SuggestedPostApproval.tsx","webpack://telegram-t/./src/components/middle/message/actions/SuggestedPostBalanceTooLow.tsx","webpack://telegram-t/./src/components/middle/message/actions/SuggestedPostRejected.tsx","webpack://telegram-t/./src/components/middle/message/SimilarChannels.module.scss?86cb","webpack://telegram-t/./src/components/middle/message/SimilarChannels.tsx","webpack://telegram-t/./src/hooks/useAverageColor.ts","webpack://telegram-t/./src/components/middle/message/ActionMessage.tsx","webpack://telegram-t/./src/hooks/useHorizontalScroll.ts","webpack://telegram-t/./src/components/common/profile/RadialPatternBackground.tsx","webpack://telegram-t/./src/components/common/profile/RadialPatternBackground.module.scss?0cfb","webpack://telegram-t/./src/util/visibility/isElementInViewport.ts","webpack://telegram-t/./src/components/common/reactions/PaidReactionEmoji.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/components/common/reactions/CustomEmojiEffect.module.scss?b4fe","webpack://telegram-t/./src/components/common/reactions/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/common/reactions/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/hooks/useCanvasBlur.ts","webpack://telegram-t/./src/components/common/pickers/PickerItem.tsx","webpack://telegram-t/./src/components/common/pickers/PickerItem.module.scss?49ce","webpack://telegram-t/./src/components/middle/message/hooks/useFluidBackgroundFilter.tsx","webpack://telegram-t/./src/components/common/helpers/renderMessageText.ts","webpack://telegram-t/./src/hooks/useEnsureMessage.ts","webpack://telegram-t/./src/components/common/pickers/PeerPicker.tsx","webpack://telegram-t/./src/hooks/useRunDebounced.ts","webpack://telegram-t/./src/util/animateHorizontalScroll.ts","webpack://telegram-t/./src/util/objects/customPeer.ts","webpack://telegram-t/./src/components/common/AnimatedIconWithPreview.module.scss?eca8","webpack://telegram-t/./src/components/common/AnimatedIconWithPreview.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/common/helpers/gifts.ts","webpack://telegram-t/./src/components/common/AnimatedCounter.tsx","webpack://telegram-t/./src/components/common/AnimatedCounter.module.scss?3640","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.module.scss?4249","webpack://telegram-t/./src/components/common/CustomUnreadBadge.tsx","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/hooks/useFolderManager.ts","webpack://telegram-t/./src/components/middle/message/reactions/ReactionSelectorReaction.module.scss?c7b9","webpack://telegram-t/./src/components/middle/message/reactions/ReactionSelectorCustomReaction.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionSelector.tsx","webpack://telegram-t/./src/hooks/useInputFocusOnOpen.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/common/AnimatedIconFromSticker.tsx","webpack://telegram-t/./src/components/common/helpers/sortChatIds.ts","webpack://telegram-t/./src/util/parseHtmlAsFormattedText.ts","webpack://telegram-t/./src/util/getMessageIdsForSelectedText.ts","webpack://telegram-t/./src/components/common/BadgeButton.tsx","webpack://telegram-t/./src/components/common/BadgeButton.module.scss?da7b","webpack://telegram-t/./src/util/animateScroll.ts","webpack://telegram-t/./src/components/common/gift/GiftRibbon.module.scss?54c5","webpack://telegram-t/./src/components/common/gift/GiftRibbon.tsx","webpack://telegram-t/./src/components/common/MiniTable.tsx","webpack://telegram-t/./src/components/common/MiniTable.module.scss?145f","webpack://telegram-t/./src/components/modals/prompt/PromptDialog.tsx","webpack://telegram-t/./src/components/modals/prompt/PromptDialog.module.scss?c2fd","webpack://telegram-t/./src/components/middle/message/reactions/SavedTagButton.tsx","webpack://telegram-t/./src/components/common/reactions/ReactionAnimatedEmoji.module.scss?3a3d","webpack://telegram-t/./src/components/left/main/FocusListButton.tsx","webpack://telegram-t/./src/util/focusNoScroll.ts","webpack://telegram-t/./src/components/middle/message/helpers/getSelectionAsFormattedText.ts","webpack://telegram-t/./src/components/common/PinMessageModal.async.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/components/middle/message/TimeMenuItem.module.scss?e6ff","webpack://telegram-t/./src/components/middle/message/LastEditTimeMenuItem.tsx","webpack://telegram-t/./src/components/middle/message/ReadTimeMenuItem.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/helpers/isSelectionRangeInsideMessage.ts"],"sourcesContent":["import { useEffect, useRef } from '../lib/teact/teact';\n\nimport { preloadImage } from '../util/files';\nimport useAsync from './useAsync';\n\nexport type UseImageLoaderResult = {\n  image?: HTMLImageElement;\n};\n\nexport default function useImageLoader(file?: Blob): UseImageLoaderResult {\n  const urlRef = useRef<string | undefined>();\n\n  const { result: image } = useAsync(() => {\n    if (!file) {\n      return Promise.resolve(undefined);\n    }\n\n    if (urlRef.current) {\n      URL.revokeObjectURL(urlRef.current);\n    }\n\n    const url = URL.createObjectURL(file);\n    urlRef.current = url;\n\n    return preloadImage(url);\n  }, [file]);\n\n  useEffect(() => {\n    return () => {\n      if (urlRef.current) {\n        URL.revokeObjectURL(urlRef.current);\n        urlRef.current = undefined;\n      }\n    };\n  }, []);\n\n  return { image };\n}\n","import { useMemo, useRef } from '../../lib/teact/teact';\n\n/**\n * Use this hook to bind `<Transition />` animation to changes in the dependency array.\n * Use optional parameter `noAnimation` if you want to prevent the animation even if the dependency array changes.\n*/\nexport function useTransitionActiveKey(deps: unknown[], noAnimation?: boolean): number {\n  const activeKey = useRef(0);\n\n  useMemo(() => {\n    if (!noAnimation) activeKey.current += 1;\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [...deps]);\n\n  return activeKey.current;\n}\n","import type { TeactNode } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiPeer } from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport { getPeerTitle, isApiPeerChat } from '../../global/helpers/peers';\nimport { selectPeer, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getPeerColorClass } from './helpers/peerColor';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from './Avatar';\nimport FullNameTitle from './FullNameTitle';\nimport Icon from './icons/Icon';\n\nimport styles from './PeerChip.module.scss';\n\ntype OwnProps<T = undefined> = {\n\n  peerId?: string;\n\n  forceShowSelf?: boolean;\n  customPeer?: CustomPeer;\n  mockPeer?: ApiPeer;\n  icon?: IconName;\n  title?: string;\n  isMinimized?: boolean;\n  canClose?: boolean;\n  isCloseNonDestructive?: boolean;\n  className?: string;\n  withPeerColors?: boolean;\n  withEmojiStatus?: boolean;\n  clickArg?: T;\n  onClick?: (arg: T) => void;\n  itemClassName?: string;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  isSavedMessages?: boolean;\n};\n\nconst PeerChip = <T,>({\n  icon,\n  title,\n  isMinimized,\n  canClose,\n  isCloseNonDestructive,\n  clickArg,\n  peer,\n  mockPeer,\n  customPeer,\n  className,\n  isSavedMessages,\n  withPeerColors,\n  withEmojiStatus,\n  onClick,\n  itemClassName,\n}: OwnProps<T> & StateProps) => {\n  const lang = useOldLang();\n\n  const apiPeer = mockPeer || peer;\n  const anyPeer = customPeer || apiPeer;\n\n  const chat = apiPeer && isApiPeerChat(apiPeer) ? apiPeer : undefined;\n\n  let iconElement: TeactNode | undefined;\n  let titleElement: TeactNode | undefined;\n  let titleText: string | undefined;\n\n  if (icon && title) {\n    iconElement = (\n      <div className={styles.iconWrapper}>\n        <Icon name={icon} style={styles.icon} />\n      </div>\n    );\n\n    titleElement = title;\n  } else if (anyPeer) {\n    iconElement = (\n      <Avatar\n        className={styles.avatar}\n        peer={anyPeer}\n        size=\"small\"\n        isSavedMessages={isSavedMessages}\n      />\n    );\n\n    titleText = getPeerTitle(lang, anyPeer) || title;\n    titleElement = title || (\n      <FullNameTitle peer={anyPeer} isSavedMessages={isSavedMessages} withEmojiStatus={withEmojiStatus} />\n    );\n  }\n\n  const fullClassName = buildClassName(\n    styles.root,\n    (chat?.isForum || customPeer?.isAvatarSquare) && styles.squareAvatar,\n    isMinimized && styles.minimized,\n    canClose && styles.closeable,\n    isCloseNonDestructive && styles.nonDestructive,\n    !onClick && styles.notClickable,\n    withPeerColors && getPeerColorClass(customPeer || peer),\n    className,\n  );\n\n  return (\n    <div\n      className={fullClassName}\n      onClick={() => onClick?.(clickArg!)}\n      title={isMinimized ? titleText : undefined}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {iconElement}\n      {!isMinimized && (\n        <div className={buildClassName(styles.name, itemClassName)} dir=\"auto\">\n          {titleElement}\n        </div>\n      )}\n      {canClose && (\n        <div className={styles.remove}>\n          <Icon name=\"close\" />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, forceShowSelf }): Complete<StateProps> => {\n    if (!peerId) {\n      return {\n        peer: undefined,\n        isSavedMessages: undefined,\n      };\n    }\n\n    const peer = selectPeer(global, peerId);\n    const user = selectUser(global, peerId);\n    const isSavedMessages = !forceShowSelf && user && user.isSelf;\n\n    return {\n      peer,\n      isSavedMessages,\n    };\n  },\n)(PeerChip)) as typeof PeerChip;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_Lq6_4e5\",\"minimized\":\"UhOZvxvs\",\"closeable\":\"uvvgSFUJ\",\"remove\":\"xVPG2UTy\",\"nonDestructive\":\"fAk5yEeV\",\"notClickable\":\"P8r3OoaX\",\"avatar\":\"La8BQ9yr\",\"iconWrapper\":\"NtoGLT22\",\"icon\":\"f91Ad80i\",\"name\":\"XPVuH29G\",\"squareAvatar\":\"JIHfTUVn\"};","import type { ElementRef } from '../lib/teact/teact';\nimport { beginHeavyAnimation, useRef } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport { isAnimatingScroll } from '../util/animateScroll';\nimport useLastCallback from './useLastCallback';\nimport useResizeObserver from './useResizeObserver';\nimport useThrottledCallback from './useThrottledCallback';\n\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nfunction useMessageResizeObserver(\n  ref: ElementRef<HTMLElement> | undefined,\n  shouldFocusOnResize = false,\n) {\n  const {\n    focusLastMessage,\n  } = getActions();\n  const messageHeightRef = useRef(0);\n\n  const handleResize = useLastCallback(\n    (entry) => {\n      const lastHeight = messageHeightRef.current;\n\n      const newHeight = entry.contentRect.height;\n      messageHeightRef.current = newHeight;\n\n      if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n      const container = entry.target.closest('.MessageList');\n      if (!container) return;\n\n      beginHeavyAnimation(RESIZE_ANIMATION_DURATION);\n\n      const resizeDiff = newHeight - lastHeight;\n      const { offsetHeight, scrollHeight, scrollTop } = container;\n      const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n      const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n      if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n        focusLastMessage();\n      }\n    },\n  );\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n}\n\nexport default useMessageResizeObserver;\n","import { useEffect } from '../../lib/teact/teact';\n\nimport useLastCallback from '../useLastCallback';\n\nfunction useTimeout(callback: NoneToVoidFunction, delay?: number) {\n  const savedCallback = useLastCallback(callback);\n\n  useEffect(() => {\n    if (typeof delay !== 'number') {\n      return undefined;\n    }\n\n    const id = setTimeout(() => savedCallback(), delay);\n    return () => clearTimeout(id);\n  }, [delay]);\n}\n\nexport default useTimeout;\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Icon from './icons/Icon';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  description?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  shouldShowSubmit?: boolean;\n  shouldResetValue?: boolean;\n  isPasswordVisible?: boolean;\n  noRipple?: boolean;\n  onClearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit?: (password: string) => void;\n};\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder,\n  submitLabel,\n  description,\n  shouldShowSubmit,\n  shouldResetValue,\n  shouldDisablePasswordManager = false,\n  noRipple = false,\n  onClearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  useEffect(() => {\n    if (shouldResetValue) {\n      setPassword('');\n    }\n  }, [shouldResetValue]);\n\n  useTimeout(() => {\n    if (!IS_TOUCH_ENV) {\n      inputRef.current!.focus();\n    }\n  }, focusDelayTimeoutMs);\n\n  useEffect(() => {\n    if (error) {\n      requestMutation(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      onClearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit!(password);\n    }\n  }\n\n  function renderFakeInput() {\n    return (\n      <input\n        type=\"password\"\n        id=\"prevent_autofill\"\n        autoComplete=\"off\"\n        className=\"visually-hidden\"\n        tabIndex={-2}\n      />\n    );\n  }\n\n  return (\n    <form action=\"\" onSubmit={onSubmit ? handleSubmit : stopEvent} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldDisablePasswordManager && renderFakeInput()}\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete={shouldDisablePasswordManager ? 'one-time-code' : 'current-password'}\n          spellCheck={IS_TAURI ? false : undefined}\n          onChange={onPasswordChange}\n          maxLength={256}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder || lang('PasswordFormPlaceholder')}</label>\n        <div\n          className=\"div-button toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title={lang('AriaPasswordToggle')}\n          aria-label={lang('AriaPasswordToggle')}\n        >\n          <Icon name={isPasswordVisible ? 'eye' : 'eye-crossed'} />\n        </div>\n      </div>\n      {description && <p className=\"description\">{description}</p>}\n      {onSubmit && (canSubmit || shouldShowSubmit) && (\n        <Button type=\"submit\" ripple={!noRipple} isLoading={isLoading} disabled={!canSubmit}>\n          {submitLabel || lang('PasswordFormSubmit')}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","export default function getPointerPosition(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  if ('touches' in e) {\n    return {\n      x: e.touches[0].clientX,\n      y: e.touches[0].clientY,\n    };\n  }\n\n  return {\n    x: e.clientX,\n    y: e.clientY,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\n\nimport CustomEmoji from '../CustomEmoji';\nimport Icon from '../icons/Icon';\n\nimport './ReactionStaticEmoji.scss';\n\nimport blankUrl from '../../../assets/blank.png';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  size?: number;\n  withIconHeart?: boolean;\n  observeIntersection?: ObserveFn;\n};\n\nconst ReactionStaticEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  className,\n  size,\n  withIconHeart,\n  observeIntersection,\n}) => {\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const staticIconId = availableReaction?.staticIcon?.id;\n  const mediaHash = staticIconId ? `document${staticIconId}` : undefined;\n  const mediaData = useMedia(mediaHash);\n\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n\n  const shouldApplySizeFix = reaction.type === 'emoji' && reaction.emoticon === '🦄';\n  const shouldReplaceWithHeartIcon = withIconHeart && reaction.type === 'emoji' && reaction.emoticon === '❤';\n\n  if (reaction.type === 'custom') {\n    return (\n      <CustomEmoji\n        documentId={reaction.documentId}\n        className={buildClassName('ReactionStaticEmoji', className)}\n        size={size}\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    );\n  }\n\n  if (shouldReplaceWithHeartIcon) {\n    return (\n      <Icon name=\"heart\" className=\"ReactionStaticEmoji\" style={`font-size: ${size}px; width: ${size}px`} />\n    );\n  }\n\n  return (\n    <img\n      className={buildClassName(\n        'ReactionStaticEmoji',\n        shouldApplySizeFix && 'with-unicorn-fix',\n        transitionClassNames,\n        className,\n      )}\n      style={size ? `width: ${size}px; height: ${size}px` : undefined}\n      src={mediaData || blankUrl}\n      alt={availableReaction?.title}\n      draggable={false}\n    />\n  );\n};\n\nexport default memo(ReactionStaticEmoji);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nY2ggBsF\",\"withBadge\":\"RYtVQAjM\",\"badgeContainer\":\"dhigNjAq\",\"slide-in\":\"YfcP52Ym\",\"slideIn\":\"YfcP52Ym\",\"floating-badge-wrapper\":\"cOpfCGPh\",\"floatingBadgeWrapper\":\"cOpfCGPh\",\"rotate-in\":\"AgMPRKbT\",\"rotateIn\":\"AgMPRKbT\",\"floating-badge\":\"uNwBLNOy\",\"floatingBadge\":\"uNwBLNOy\",\"noTransition\":\"HS9PzRKt\",\"floatingBadgeContent\":\"W4rqGyJl\",\"floating-badge-triangle\":\"qRwO7SZm\",\"floatingBadgeTriangle\":\"qRwO7SZm\",\"floating-badge-icon\":\"MJ7MTmxi\",\"floatingBadgeIcon\":\"MJ7MTmxi\",\"floating-badge-value\":\"MwzZt3Qo\",\"floatingBadgeValue\":\"MwzZt3Qo\",\"left\":\"_b5HgBXr\",\"right\":\"P6mch4bB\",\"progressWrapper\":\"_B4r3D5W\",\"positiveLayer\":\"VmyTBAzN\",\"positiveProgress\":\"MzFvyMb5\",\"negativeLayer\":\"QZwWHVdB\",\"negativeProgress\":\"S6H6hBpP\",\"primary\":\"Zi0w7QJ3\",\"negative\":\"dXs41qvC\",\"transitioning\":\"I7toQztx\",\"hidden\":\"xdKGgbKQ\",\"cycling\":\"SxTCkiyg\",\"show\":\"tkyw4hXo\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { REM } from './helpers/mediaDimensions';\n\nimport { useTransitionActiveKey } from '../../hooks/animations/useTransitionActiveKey';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport Icon from './icons/Icon';\n\nimport styles from './PremiumProgress.module.scss';\n\nexport type AnimationDirection = 'forward' | 'backward' | 'none';\n\ntype OwnProps = {\n  leftText?: string;\n  rightText?: string;\n  floatingBadgeIcon?: IconName;\n  floatingBadgeText?: string;\n  progress?: number;\n  isPrimary?: boolean;\n  isNegative?: boolean;\n  animationDirection?: AnimationDirection;\n  className?: string;\n};\n\nconst PremiumProgress: FC<OwnProps> = ({\n  leftText,\n  rightText,\n  floatingBadgeText,\n  floatingBadgeIcon,\n  progress = 0,\n  isPrimary,\n  isNegative,\n  animationDirection = 'none',\n  className,\n}) => {\n  const lang = useOldLang();\n  const floatingBadgeContentRef = useRef<HTMLDivElement>();\n  const parentContainerRef = useRef<HTMLDivElement>();\n\n  const [shiftX, setShiftX] = useState(0);\n  const [beakPosition, setBeakPosition] = useState(0);\n  const [badgeWidth, setBadgeWidth] = useState(0);\n  const prevBadgeWidth = usePrevious(badgeWidth);\n  const [positiveProgress, setPositiveProgress] = useState(isNegative ? 0 : progress);\n  const [negativeProgress, setNegativeProgress] = useState(isNegative ? progress : 0);\n  const [badgeProgress, setBadgeProgress] = useState(progress);\n\n  const [layerProgress, setLayerProgress] = useState(0);\n  const [showLayer, setShowLayer] = useState(false);\n  const [disableMainProgressTransition, setDisableMainProgressTransition] = useState(false);\n  const [disableLayerProgressTransition, setDisableLayerProgressTransition] = useState(false);\n  const [hideMainLayer, setHideMainLayer] = useState(false);\n  const [isCycling, setIsCycling] = useState(false);\n\n  const badgeActiveKey = useTransitionActiveKey([floatingBadgeText, floatingBadgeIcon]);\n\n  const shouldAnimateCaptionsRef = useRef(false);\n  const prevLeftText = usePrevious(leftText);\n  const prevRightText = usePrevious(rightText);\n  const prevIsNegative = usePrevious(isNegative);\n\n  const BEAK_WIDTH_PX = 28;\n  const PROGRESS_BORDER_RADIUS_PX = REM;\n  const CORNER_BEAK_THRESHOLD = BEAK_WIDTH_PX / 2 + PROGRESS_BORDER_RADIUS_PX;\n  const BADGE_HORIZONTAL_PADDING_PX = 0.75 * 2 * REM;\n\n  const LAYER_PROGRESS_TRANSITION_MS = 400;\n  const FULL_CYCLE_TRANSITION_MS = LAYER_PROGRESS_TRANSITION_MS * 2;\n  const APPLY_TRANSITION_DELAY_MS = 50;\n\n  const updateBadgePosition = () => {\n    if (floatingBadgeContentRef.current && parentContainerRef.current) {\n      const parentWidth = parentContainerRef.current.offsetWidth;\n      const halfBadgeWidth = badgeWidth / 2;\n      const minBadgeShift = halfBadgeWidth;\n      const maxBadgeShift = parentWidth - halfBadgeWidth;\n      const halfBeakWidth = BEAK_WIDTH_PX / 2;\n      const currentShift = isNegative ? (1 - badgeProgress) * parentWidth : badgeProgress * parentWidth;\n\n      let safeShift = Math.max(minBadgeShift, Math.min(currentShift, maxBadgeShift));\n      if (currentShift < CORNER_BEAK_THRESHOLD) {\n        safeShift = currentShift + halfBadgeWidth;\n      }\n      if (currentShift > parentWidth - CORNER_BEAK_THRESHOLD) {\n        safeShift = currentShift - halfBadgeWidth;\n      }\n\n      const beakOffsetFromCenter = currentShift - safeShift;\n      const newBeakPositionPx = halfBadgeWidth + beakOffsetFromCenter - halfBeakWidth;\n\n      setShiftX(safeShift / parentWidth);\n      setBeakPosition(newBeakPositionPx);\n    }\n  };\n\n  useEffect(updateBadgePosition, [badgeProgress, badgeWidth, isNegative, CORNER_BEAK_THRESHOLD]);\n\n  useResizeObserver(parentContainerRef, updateBadgePosition);\n\n  useEffect(() => {\n    const width = floatingBadgeContentRef?.current?.clientWidth || 0;\n    setBadgeWidth(width + BADGE_HORIZONTAL_PADDING_PX);\n  }, [floatingBadgeText, floatingBadgeIcon, BADGE_HORIZONTAL_PADDING_PX]);\n\n  const forceUpdate = useForceUpdate();\n\n  useSyncEffect(() => {\n    let timeoutId: number | undefined;\n\n    const isNegativeTransition = prevIsNegative !== undefined && prevIsNegative !== isNegative;\n    const shouldAnimateCaptions = (prevLeftText || prevRightText) && (isNegativeTransition || isCycling);\n\n    if (shouldAnimateCaptions && !shouldAnimateCaptionsRef.current) {\n      shouldAnimateCaptionsRef.current = true;\n\n      const timeoutMs = isCycling ? LAYER_PROGRESS_TRANSITION_MS * 2 : LAYER_PROGRESS_TRANSITION_MS;\n      timeoutId = window.setTimeout(() => {\n        shouldAnimateCaptionsRef.current = false;\n        forceUpdate();\n      }, timeoutMs);\n    }\n\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        shouldAnimateCaptionsRef.current = false;\n      }\n    };\n  }, [\n    leftText, prevLeftText, rightText, prevRightText,\n    prevIsNegative, isNegative, animationDirection, isCycling,\n  ]);\n\n  const shouldAnimateCaptions = shouldAnimateCaptionsRef.current;\n\n  useEffect(() => {\n    if (isNegative) {\n      setPositiveProgress(0);\n      setNegativeProgress(progress);\n    } else {\n      setNegativeProgress(0);\n      setPositiveProgress(progress);\n    }\n    setBadgeProgress(progress);\n  }, [progress, isNegative]);\n\n  const hasFloatingBadge = Boolean(floatingBadgeIcon || floatingBadgeText);\n\n  const displayLeftText = shouldAnimateCaptions ? prevLeftText : leftText;\n  const displayRightText = shouldAnimateCaptions ? prevRightText : rightText;\n\n  const prevProgress = usePrevious(progress);\n\n  useEffect(() => {\n    const timers: number[] = [];\n\n    if (animationDirection === 'none' || prevProgress === undefined) {\n      return;\n    }\n\n    const targetProgress = progress;\n\n    const setMainProgress = (value: number) => {\n      if (isNegative) {\n        setNegativeProgress(value);\n      } else {\n        setPositiveProgress(value);\n      }\n    };\n\n    if (animationDirection === 'forward' || animationDirection === 'backward') {\n      const isForward = animationDirection === 'forward';\n\n      setIsCycling(true);\n      setMainProgress(isForward ? 1 : 0);\n\n      setDisableLayerProgressTransition(true);\n      setLayerProgress(isForward ? 0 : 1);\n\n      timers.push(window.setTimeout(() => {\n        setDisableLayerProgressTransition(false);\n        setShowLayer(true);\n        setLayerProgress(targetProgress);\n        if (isForward) {\n          setDisableMainProgressTransition(true);\n          setMainProgress(0);\n        }\n      }, LAYER_PROGRESS_TRANSITION_MS));\n\n      timers.push(window.setTimeout(() => {\n        setDisableMainProgressTransition(true);\n        setDisableLayerProgressTransition(true);\n        setHideMainLayer(false);\n        setMainProgress(targetProgress);\n        setShowLayer(false);\n\n        timers.push(window.setTimeout(() => {\n          setDisableMainProgressTransition(false);\n          setDisableLayerProgressTransition(false);\n          setIsCycling(false);\n        }, APPLY_TRANSITION_DELAY_MS));\n      }, FULL_CYCLE_TRANSITION_MS));\n    }\n\n    return () => {\n      timers.forEach(clearTimeout);\n    };\n  }, [\n    progress, animationDirection, isNegative,\n    prevProgress, FULL_CYCLE_TRANSITION_MS,\n  ]);\n\n  const renderProgressLayer = (\n    isPositive: boolean,\n    currentProgress: number,\n    layerClassName?: string,\n    disableTransition?: boolean,\n  ) => {\n    const typeClass = isPositive ? styles.positiveProgress : styles.negativeProgress;\n    const progressVar = '--layer-progress';\n\n    return (\n      <div\n        className={buildClassName(\n          typeClass,\n          layerClassName,\n          disableTransition && styles.noTransition,\n        )}\n        style={`${progressVar}: ${currentProgress}`}\n      >\n        <div className={styles.left}>\n          <span>{displayLeftText}</span>\n        </div>\n        <div className={styles.right}>\n          <span>{displayRightText}</span>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div\n      ref={parentContainerRef}\n      className={buildClassName(\n        styles.root,\n        hasFloatingBadge && styles.withBadge,\n        isPrimary && styles.primary,\n        isNegative && styles.negative,\n        shouldAnimateCaptions && styles.transitioning,\n        isCycling && styles.cycling,\n        className,\n      )}\n      style={buildStyle(\n        `--positive-progress: ${positiveProgress}`,\n        `--negative-progress: ${negativeProgress}`,\n        `--layer-progress: ${layerProgress}`,\n        `--shift-x: ${shiftX}`,\n        `--cycling-animation-badge-position: ${FULL_CYCLE_TRANSITION_MS}ms`,\n        `--cycling-animation-progress: ${LAYER_PROGRESS_TRANSITION_MS}ms`,\n      )}\n    >\n      {hasFloatingBadge && (\n        <div className={styles.badgeContainer}>\n          <div className={styles.floatingBadgeWrapper}>\n            <div\n              className={\n                buildClassName(styles.floatingBadge,\n                  (!prevBadgeWidth || prevBadgeWidth === 0)\n                  && styles.noTransition)\n              }\n              style={`width: ${badgeWidth}px;`}\n            >\n              <Transition\n                activeKey={badgeActiveKey}\n                name=\"fade\"\n                shouldCleanup\n              >\n                <div\n                  ref={floatingBadgeContentRef}\n                  className={styles.floatingBadgeContent}\n                >\n                  {floatingBadgeIcon && <Icon name={floatingBadgeIcon} className={styles.floatingBadgeIcon} />}\n                  {floatingBadgeText && (\n                    <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                      {floatingBadgeText}\n                    </div>\n                  )}\n                </div>\n              </Transition>\n            </div>\n            <div className={styles.floatingBadgeTriangle} style={`left: ${beakPosition}px`}>\n              <svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\">\n                <path d=\"m 28,4 v 9 c 0.0089,7.283278 -3.302215,5.319646 -6.750951,8.589815 l -5.8284,5.82843 c -0.781,0.78105 -2.0474,0.78104 -2.8284,0 L 6.7638083,21.589815 C 2.8288652,17.959047 0.04527024,20.332086 0,13 V 4 C 0,4 0.00150581,0.97697493 3,1 5.3786658,1.018266 22.594519,0.9142007 25,1 c 2.992326,0.1067311 3,3 3,3 z\" fill=\"currentColor\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n      )}\n      <div className={styles.left}>\n        <span>{displayLeftText}</span>\n      </div>\n      <div className={styles.right}>\n        <span>{displayRightText}</span>\n      </div>\n\n      <div className={styles.progressWrapper}>\n        {renderProgressLayer(\n          true,\n          positiveProgress,\n          buildClassName(hideMainLayer && styles.hidden),\n          disableMainProgressTransition,\n        )}\n\n        {renderProgressLayer(\n          false,\n          negativeProgress,\n          buildClassName(hideMainLayer && styles.hidden),\n          disableMainProgressTransition,\n        )}\n\n        {renderProgressLayer(\n          !isNegative,\n          layerProgress,\n          buildClassName(\n            isNegative ? styles.negativeLayer : styles.positiveLayer,\n            showLayer && styles.show,\n          ),\n          disableLayerProgressTransition,\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumProgress);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CalendarModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default CalendarModalAsync;\n","import { useState } from '../lib/teact/teact';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../config';\nimport { getDayStartAt } from '../util/dates/dateFormat';\nimport { getServerTimeOffset } from '../util/serverTime';\nimport useLastCallback from './useLastCallback';\nimport useOldLang from './useOldLang';\n\nimport CalendarModal from '../components/common/CalendarModal.async';\n\ntype OnScheduledCallback = (scheduledAt: number) => void;\n\nconst useSchedule = (\n  canScheduleUntilOnline?: boolean,\n  onCancel?: () => void,\n  openAt?: number,\n  isRemindMe?: boolean,\n) => {\n  const lang = useOldLang();\n  const [onScheduled, setOnScheduled] = useState<OnScheduledCallback | undefined>();\n\n  const handleMessageSchedule = useLastCallback((date: Date, isWhenOnline = false) => {\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : getServerTimeOffset());\n    onScheduled?.(scheduledAt);\n    setOnScheduled(undefined);\n  });\n\n  const handleMessageScheduleUntilOnline = useLastCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  });\n\n  const handleCloseCalendar = useLastCallback(() => {\n    setOnScheduled(undefined);\n    onCancel?.();\n  });\n\n  const requestCalendar = useLastCallback((whenScheduled: OnScheduledCallback) => {\n    setOnScheduled(() => whenScheduled);\n  });\n\n  const scheduledDefaultDate = openAt ? new Date(openAt * 1000) : new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  const calendar = (\n    <CalendarModal\n      isOpen={Boolean(onScheduled)}\n      withTimePicker\n      selectedAt={scheduledDefaultDate.getTime()}\n      maxAt={getDayStartAt(scheduledMaxDate)}\n      isFutureMode\n      secondButtonLabel={canScheduleUntilOnline ? lang('Schedule.SendWhenOnline') : undefined}\n      onClose={handleCloseCalendar}\n      onSubmit={handleMessageSchedule}\n      onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      isRemindMe={isRemindMe}\n    />\n  );\n\n  return [requestCalendar, calendar] as const;\n};\n\nexport default useSchedule;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPeer } from '../../api/types';\nimport type { AvatarSize } from './Avatar';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar, { AVATAR_SIZES } from './Avatar';\n\nimport styles from './AvatarList.module.scss';\n\nconst DEFAULT_LIMIT = 3;\n\ntype OwnProps = {\n  size: AvatarSize;\n  peers?: ApiPeer[];\n  className?: string;\n  limit?: number;\n  badgeText?: string;\n};\n\nconst AvatarList: FC<OwnProps> = ({\n  peers,\n  size,\n  className,\n  limit = DEFAULT_LIMIT,\n  badgeText,\n}) => {\n  const lang = useOldLang();\n\n  const pxSize = typeof size === 'number' ? size : AVATAR_SIZES[size];\n\n  const renderingBadgeText = useMemo(() => {\n    if (badgeText) return badgeText;\n    if (!peers?.length || peers.length <= limit) return undefined;\n    return `+${peers.length - limit}`;\n  }, [badgeText, peers, limit]);\n\n  return (\n    <div\n      className={buildClassName(className, styles.root)}\n      style={`--_size: ${pxSize}px;`}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {peers?.slice(0, limit).map((peer) => <Avatar size={size} peer={peer} className={styles.avatar} />)}\n      {renderingBadgeText && (\n        <div className={styles.badge}>\n          {renderingBadgeText}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(AvatarList);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kXs18Nmi\",\"avatar\":\"XND8fhC1\",\"badge\":\"SHyAyGFO\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\n\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport Icon from './icons/Icon';\n\nimport styles from './MediaSpoiler.module.scss';\n\ntype OwnProps = {\n  isVisible: boolean;\n  withAnimation?: boolean;\n  thumbDataUri?: string;\n  isNsfw?: boolean;\n  width?: number;\n  height?: number;\n  className?: string;\n};\n\nconst BLUR_RADIUS = 25;\nconst ANIMATION_DURATION = 500;\n\nconst MediaSpoiler: FC<OwnProps> = ({\n  isVisible,\n  withAnimation,\n  thumbDataUri,\n  isNsfw,\n  className,\n  width,\n  height,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(\n    isVisible, undefined, true, withAnimation ? false : undefined, undefined, ANIMATION_DURATION,\n  );\n  const canvasRef = useCanvasBlur(thumbDataUri, !shouldRender, undefined, BLUR_RADIUS, width, height);\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!ref.current) return;\n    const el = ref.current;\n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    const shiftX = x - (rect.width / 2);\n    const shiftY = y - (rect.height / 2);\n    requestMutation(() => {\n      el.setAttribute('style', `--click-shift-x: ${shiftX}px; --click-shift-y: ${shiftY}px`);\n    });\n  });\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName(styles.root, transitionClassNames, className, withAnimation && styles.maskAnimation)}\n      ref={ref}\n      onClick={withAnimation ? handleClick : undefined}\n    >\n      <canvas\n        ref={canvasRef}\n        className={styles.canvas}\n        width={width}\n        height={height}\n      />\n      <div className={styles.dots} />\n      {isNsfw && (\n        <span className={styles.nsfw}>\n          <Icon name=\"eye-crossed-outline\" className={styles.nsfwIcon} />\n          {lang('MediaSpoilerSensitive')}\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaSpoiler);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qF2WgYVg\",\"mask-animation\":\"pNM3cgkY\",\"maskAnimation\":\"pNM3cgkY\",\"circle-cut\":\"WiW38HGg\",\"circleCut\":\"WiW38HGg\",\"dots\":\"XBor45hE\",\"canvas\":\"eULqS2yR\",\"nsfw\":\"FJGQoa6s\",\"nsfwIcon\":\"Y7JVRkxJ\",\"opacity-breath\":\"sW9ega1D\",\"opacityBreath\":\"sW9ega1D\",\"dots-animation\":\"mAAEjSPE\",\"dotsAnimation\":\"mAAEjSPE\"};","import type { AnimationLevel } from '../types';\n\nimport { ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN } from '../config.ts';\nimport { IS_ANDROID, IS_IOS } from './browser/windowEnvironment.ts';\n\nexport function resolveTransitionName(\n  name: 'slideOptimized' | 'slide' | 'layers',\n  animationLevel: AnimationLevel,\n  isDisabled = false,\n  isRtl = false,\n) {\n  if (isDisabled || animationLevel === ANIMATION_LEVEL_MIN) return 'none';\n\n  if (animationLevel === ANIMATION_LEVEL_MED) return 'slideFade';\n\n  return name === 'slideOptimized' ? (\n    isRtl ? 'slideOptimizedRtl' : 'slideOptimized'\n  ) : name === 'slide' ? (\n    isRtl ? 'slideRtl' : 'slide'\n  ) : (\n    IS_ANDROID ? 'slideFade' : IS_IOS ? 'slideLayers' : 'pushSlide'\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"YmM5biTv\",\"header\":\"S7WFT2bv\",\"pickerCategoryTitle\":\"YK1300x2\",\"peerChip\":\"gsKPBPoK\",\"pickerList\":\"yLCbiItq\",\"padded\":\"bXzIGw8s\",\"noResults\":\"dXWKD0ve\",\"onlineStatus\":\"d5GDOYh9\"};","import { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMessageActionChatEditPhoto } from '../../../../api/types/messageActions';\n\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport Avatar from '../../../common/Avatar';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionChatEditPhoto;\n  observeIntersection?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\nconst AVATAR_SIZE = 15 * REM;\n\nconst ChannelPhotoAction = ({\n  action,\n  onClick,\n  observeIntersection,\n}: OwnProps) => {\n  return (\n    <Avatar\n      className={styles.channelPhoto}\n      photo={action.photo}\n      loopIndefinitely\n      withVideo\n      observeIntersection={observeIntersection}\n      onClick={onClick}\n      size={AVATAR_SIZE}\n    />\n  );\n};\n\nexport default memo(ChannelPhotoAction);\n","import { memo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type {\n  ApiMessageActionGiftPremium,\n  ApiMessageActionGiftStars,\n  ApiMessageActionGiftTon } from '../../../../api/types/messageActions';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n  selectGiftStickerForStars,\n  selectGiftStickerForTon,\n} from '../../../../global/selectors';\nimport { formatCurrency } from '../../../../util/formatCurrency';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionGiftPremium | ApiMessageActionGiftStars | ApiMessageActionGiftTon;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst STICKER_SIZE = 150;\n\nconst GiftAction = ({\n  action,\n  sticker,\n  canPlayAnimatedEmojis,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n  const message = action.type === 'giftPremium' ? action.message : undefined;\n\n  const renderTonTitle = () => {\n    const { cryptoAmount, cryptoCurrency } = action;\n    const price = cryptoAmount\n      ? formatCurrency(lang, cryptoAmount, cryptoCurrency!, { asFontIcon: true })\n      : undefined;\n\n    return price;\n  };\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={onClick}>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {action.type === 'giftPremium' ? (\n            lang('ActionGiftPremiumTitle', { months: action.months }, { pluralValue: action.months })\n          ) : action.type === 'giftStars' ? (\n            lang('ActionGiftStarsTitle', { amount: action.stars }, { pluralValue: action.stars })\n          ) : renderTonTitle()}\n        </h3>\n        <div>\n          {message && renderTextWithEntities(message)}\n          {!message\n            && (lang(action.type === 'giftTon' ? 'DescriptionAboutTon'\n              : action.type === 'giftPremium'\n                ? 'ActionGiftPremiumText' : 'ActionGiftStarsText'))}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { action }): Complete<StateProps> => {\n    const sticker = action.type === 'giftPremium'\n      ? selectGiftStickerForDuration(global, action.months)\n      : action.type === 'giftStars'\n        ? selectGiftStickerForStars(global, action.stars)\n        : selectGiftStickerForTon(global, action.cryptoAmount);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftAction));\n","import { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiChat, ApiPeer, ApiSticker } from '../../../../api/types';\nimport type { ApiMessageActionGiftCode, ApiMessageActionPrizeStars } from '../../../../api/types/messageActions';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectGiftStickerForDuration,\n  selectGiftStickerForStars,\n} from '../../../../global/selectors';\nimport { renderPeerLink, translateWithYou } from '../helpers/messageActions';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionGiftCode | ApiMessageActionPrizeStars;\n  sender?: ApiPeer;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  channel?: ApiChat;\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst STICKER_SIZE = 150;\n\nconst GiveawayPrizeAction = ({\n  currentUserId,\n  action,\n  sender,\n  sticker,\n  canPlayAnimatedEmojis,\n  channel,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n\n  const channelLink = useMemo(() => {\n    const channelTitle = channel && getPeerTitle(lang, channel);\n    const channelFallbackText = lang('ActionFallbackChannel');\n\n    return renderPeerLink(channel?.id, channelTitle || channelFallbackText);\n  }, [channel, lang]);\n\n  const peerLink = useMemo(() => {\n    const peer = channel || sender;\n    const peerTitle = peer && getPeerTitle(lang, peer);\n    const peerFallbackText = lang('ActionFallbackChat');\n\n    return renderPeerLink(peer?.id, peerTitle || peerFallbackText);\n  }, [channel, sender, lang]);\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={onClick}>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <div>\n        <h3 className={styles.title}>\n          {lang(action.type !== 'giftCode' || action.isViaGiveaway\n            ? 'ActionGiveawayResultTitle' : 'GiftInfoTitle')}\n        </h3>\n        <div>\n          {action.type === 'giftCode' && (\n            action.isViaGiveaway ? lang(\n              'ActionGiveawayResultPremiumText',\n              { channel: channelLink, months: action.months },\n              {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: action.months,\n                renderTextFilters: ['br'],\n              })\n              : translateWithYou(\n                lang,\n                'ActionGiftCodeSubscriptionText',\n                sender?.id === currentUserId,\n                { peer: peerLink, months: action.months },\n                {\n                  pluralValue: action.months,\n                  renderTextFilters: ['br'],\n                })\n          )}\n          {action.type === 'prizeStars' && (\n            lang(\n              'ActionGiveawayResultStarsText',\n              { amount: action.stars, channel: channelLink },\n              {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: action.stars,\n                renderTextFilters: ['br'],\n              },\n            )\n          )}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {lang(action.type === 'giftCode' ? 'ActionOpenGiftButton' : 'ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { action }): Complete<StateProps> => {\n    const currentUserId = global.currentUserId!;\n    const sticker = action.type === 'giftCode'\n      ? selectGiftStickerForDuration(global, action.months)\n      : selectGiftStickerForStars(global, action.stars);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    const channel = action.boostPeerId ? selectChat(global, action.boostPeerId) : undefined;\n\n    return {\n      currentUserId,\n      sticker,\n      canPlayAnimatedEmojis,\n      channel,\n    };\n  },\n)(GiveawayPrizeAction));\n","import { memo, useMemo, useRef } from '@teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionStarGift } from '../../../../api/types/messageActions';\n\nimport { isChatChannel } from '../../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat } from '../../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectPeer,\n  selectSender,\n  selectUser,\n} from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../../util/localization/format';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\nimport { renderPeerLink, translateWithYou } from '../helpers/messageActions';\n\nimport useDynamicColorListener from '../../../../hooks/stickers/useDynamicColorListener';\nimport useFlag from '../../../../hooks/useFlag.ts';\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport GiftRibbon from '../../../common/gift/GiftRibbon';\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionStarGift;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis: boolean;\n  sender?: ApiPeer;\n  recipient?: ApiPeer;\n  starGiftMaxConvertPeriod?: number;\n};\n\nconst STICKER_SIZE = 120;\n\nconst StarGiftAction = ({\n  action,\n  message,\n  canPlayAnimatedEmojis,\n  sender,\n  recipient,\n  starGiftMaxConvertPeriod,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const { isOutgoing } = message;\n\n  const sticker = getStickerFromGift(action.gift)!;\n\n  const peer = isOutgoing ? recipient : sender;\n  const isChannel = peer && isApiPeerChat(peer) && isChatChannel(peer);\n\n  const backgroundColor = useDynamicColorListener(ref, 'background-color', !action.gift.availabilityTotal);\n\n  const fallbackPeerTitle = lang('ActionFallbackSomeone');\n  const peerTitle = peer && getPeerTitle(lang, peer);\n  const isSelf = sender?.id === recipient?.id;\n\n  const giftDescription = useMemo(() => {\n    const peerLink = renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle);\n    const starsAmount = action.starsToConvert !== undefined\n      ? formatStarsAsText(lang, action.starsToConvert) : undefined;\n\n    if (action.isUpgraded) {\n      return lang('ActionStarGiftUpgraded');\n    }\n\n    if (action.alreadyPaidUpgradeStars) {\n      return translateWithYou(\n        lang, 'ActionStarGiftUpgradeText', !isOutgoing || isSelf, { peer: peerLink },\n      );\n    }\n\n    if (action.isConverted) {\n      return translateWithYou(\n        lang, 'ActionStarGiftConvertedText', !isOutgoing || isSelf, { peer: peerLink, amount: starsAmount },\n      );\n    }\n\n    if (starGiftMaxConvertPeriod && getServerTime() < message.date + starGiftMaxConvertPeriod) {\n      return translateWithYou(\n        lang, 'ActionStarGiftConvertText', !isOutgoing || isSelf, { peer: peerLink, amount: starsAmount },\n      );\n    }\n\n    if (isChannel) {\n      return lang(\n        'ActionStarGiftChannelText', { amount: starsAmount }, { withNodes: true },\n      );\n    }\n\n    return translateWithYou(\n      lang, 'ActionStarGiftNoConvertText', !isOutgoing || isSelf, { peer: peerLink },\n    );\n  }, [\n    action, fallbackPeerTitle, isChannel, isOutgoing, lang, message.date, peer?.id, peerTitle, starGiftMaxConvertPeriod,\n    isSelf,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('interactive-gift', styles.contentBox, styles.starGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={onClick}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            shouldLoop={isHover}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      {Boolean(action.gift.availabilityTotal) && (\n        <GiftRibbon\n          color={backgroundColor || 'blue'}\n          text={lang('ActionStarGiftLimitedRibbon', {\n            total: formatIntegerCompact(lang, action.gift.availabilityTotal),\n          })}\n        />\n      )}\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {isSelf ? lang('ActionStarGiftSelf') : lang(\n            isOutgoing ? 'ActionStarGiftTo' : 'ActionStarGiftFrom',\n            {\n              peer: renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle),\n            },\n            {\n              withNodes: true,\n            },\n          )}\n        </h3>\n        <div className={styles.subtitle}>\n          {action.message && renderTextWithEntities(action.message)}\n          {!action.message && giftDescription}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {action.alreadyPaidUpgradeStars && !action.isUpgraded && !isOutgoing\n          ? lang('ActionStarGiftUnpack') : lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, action }): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n    const messageSender = selectSender(global, message);\n    const giftSender = action.fromId ? selectPeer(global, action.fromId) : undefined;\n    const messageRecipient = message.isOutgoing ? selectPeer(global, message.chatId) : currentUser;\n    const giftRecipient = action.peerId ? selectPeer(global, action.peerId) : undefined;\n\n    return {\n      canPlayAnimatedEmojis,\n      sender: giftSender || messageSender,\n      recipient: giftRecipient || messageRecipient,\n      starGiftMaxConvertPeriod: global.appConfig.starGiftMaxConvertPeriod,\n    };\n  },\n)(StarGiftAction));\n","import { memo, useMemo, useRef } from '@teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionStarGiftUnique } from '../../../../api/types/messageActions';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectPeer,\n  selectSender,\n  selectUser,\n} from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../../util/buildClassName';\nimport buildStyle from '../../../../util/buildStyle';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { REM } from '../../../common/helpers/mediaDimensions.ts';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport useFlag from '../../../../hooks/useFlag.ts';\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport GiftRibbon from '../../../common/gift/GiftRibbon';\nimport MiniTable, { type TableEntry } from '../../../common/MiniTable';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionStarGiftUnique;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis: boolean;\n  sender?: ApiPeer;\n  recipient?: ApiPeer;\n};\n\nconst STICKER_SIZE = 120;\n\nconst StarGiftAction = ({\n  action,\n  message,\n  canPlayAnimatedEmojis,\n  sender,\n  recipient,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const { isOutgoing } = message;\n\n  const sticker = getStickerFromGift(action.gift)!;\n  const attributes = getGiftAttributes(action.gift)!;\n  const model = attributes.model!;\n  const pattern = attributes.pattern!;\n  const backdrop = attributes.backdrop!;\n  const backgroundColors = [backdrop.centerColor, backdrop.edgeColor];\n  const adaptedPatternColor = `${backdrop.patternColor.slice(0, 7)}55`;\n\n  const tableData = useMemo((): TableEntry[] => [\n    [lang('ActionStarGiftUniqueModel'), model.name],\n    [lang('ActionStarGiftUniqueBackdrop'), backdrop.name],\n    [lang('ActionStarGiftUniqueSymbol'), pattern.name],\n  ], [lang, model, pattern, backdrop]);\n\n  const shouldShowFrom = !isOutgoing || action.isUpgrade;\n  const peer = shouldShowFrom && !action.isUpgrade ? sender : recipient;\n\n  const fallbackPeerTitle = lang('ActionFallbackSomeone');\n  const peerTitle = peer && getPeerTitle(lang, peer);\n  const isSelf = sender?.id === recipient?.id;\n\n  return (\n    <div\n      className={buildClassName('interactive-gift', styles.contentBox, styles.starGift, styles.uniqueGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={onClick}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      <div className={styles.uniqueBackgroundWrapper}>\n        <RadialPatternBackground\n          className={styles.uniqueBackground}\n          backgroundColors={backgroundColors}\n          patternColor={backdrop.patternColor}\n          patternIcon={pattern.sticker}\n          patternSize={14}\n          yPosition={9.5 * REM}\n          clearBottomSector\n        />\n      </div>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            shouldLoop={isHover}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <GiftRibbon\n        color={adaptedPatternColor}\n        text={lang('ActionStarGiftUniqueRibbon')}\n      />\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {isSelf ? lang('ActionStarGiftSelf') : lang(\n            shouldShowFrom ? 'ActionStarGiftFrom' : 'ActionStarGiftTo',\n            {\n              peer: renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle),\n            },\n            {\n              withNodes: true,\n            },\n          )}\n        </h3>\n        <div className={styles.subtitle} style={`color: ${backdrop.textColor}`}>\n          {lang('GiftUnique', { title: action.gift.title, number: action.gift.number })}\n        </div>\n        <MiniTable data={tableData} style={`color: ${backdrop.textColor}`} valueClassName={styles.uniqueValue} />\n      </div>\n      <div\n        className={styles.actionButton}\n        style={buildStyle(adaptedPatternColor && `background-color: ${adaptedPatternColor}`)}\n      >\n        <Sparkles preset=\"button\" />\n        {lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, action }): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n    const messageSender = selectSender(global, message);\n    const giftSender = action.fromId ? selectPeer(global, action.fromId) : undefined;\n    const messageRecipient = message.isOutgoing ? selectPeer(global, message.chatId) : currentUser;\n    const giftRecipient = action.peerId ? selectPeer(global, action.peerId) : undefined;\n\n    return {\n      canPlayAnimatedEmojis,\n      sender: giftSender || messageSender,\n      recipient: giftRecipient || messageRecipient,\n    };\n  },\n)(StarGiftAction));\n","import { memo, useMemo, useState } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiMessageActionSuggestProfilePhoto } from '../../../../api/types/messageActions';\nimport { type ApiMessage, type ApiPeer, MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../../../types';\n\nimport { getPhotoMediaHash, getVideoProfilePhotoMediaHash } from '../../../../global/helpers';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { fetchBlob } from '../../../../util/files';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Avatar from '../../../common/Avatar';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport CropModal from '../../../ui/CropModal';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionSuggestProfilePhoto;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst SuggestedPhotoAction = ({\n  message,\n  action,\n  peer,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openMediaViewer, uploadProfilePhoto, showNotification } = getActions();\n  const { isOutgoing } = message;\n  const photo = action.photo;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n\n  const suggestedPhotoUrl = useMedia(getPhotoMediaHash(photo, 'full'));\n  const suggestedVideoUrl = useMedia(getVideoProfilePhotoMediaHash(photo));\n  const isVideo = photo.isVideo;\n\n  const text = useMemo(() => {\n    const peerName = (peer && getPeerTitle(lang, peer)) || lang('ActionFallbackUser');\n    const peerLink = renderPeerLink(peer?.id, peerName);\n\n    if (isOutgoing) {\n      return lang('ActionSuggestedPhotoYou', { user: peerLink }, { withNodes: true });\n    }\n\n    return lang('ActionSuggestedPhoto', { user: peerLink }, { withNodes: true });\n  }, [lang, isOutgoing, peer]);\n\n  const showAvatarNotification = useLastCallback(() => {\n    showNotification({\n      title: lang('ActionSuggestedPhotoUpdatedTitle'),\n      message: lang('ActionSuggestedPhotoUpdatedDescription'),\n      action: {\n        action: 'openSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  });\n\n  const handleSetSuggestedAvatar = useLastCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  });\n\n  const handleCloseCropModal = useLastCallback(() => {\n    setCropModalBlob(undefined);\n  });\n\n  const handleSetVideo = useLastCallback(async () => {\n    if (!suggestedVideoUrl) return;\n\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const blob = await fetchBlob(suggestedVideoUrl);\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  });\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetchBlob(suggestedPhotoUrl));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        messageId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        className={styles.suggestedAvatar}\n        photo={action.photo}\n        loopIndefinitely\n        withVideo\n        observeIntersection={observeIntersection}\n        size=\"jumbo\"\n      />\n      <div className={styles.suggestedText}>\n        {text}\n      </div>\n      <div className={styles.actionButton}>\n        {lang('ActionSuggestedPhotoButton')}\n      </div>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('ActionSuggestedVideoTitle')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        text={lang('ActionSuggestedVideoText')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): Complete<StateProps> => {\n    const peer = selectPeer(global, message.chatId);\n\n    return {\n      peer,\n    };\n  },\n)(SuggestedPhotoAction));\n","import { memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionSuggestedPostApproval } from '../../../../api/types/messageActions';\n\nimport { TON_CURRENCY_CODE } from '../../../../config';\nimport { getPeerFullTitle } from '../../../../global/helpers/peers';\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\nimport { selectIsMonoforumAdmin, selectMonoforumChannel,\n  selectReplyMessage,\n  selectSender } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../../../util/formatCurrency';\nimport { formatStarsAsText, formatTonAsText } from '../../../../util/localization/format';\nimport { getServerTime } from '../../../../util/serverTime';\nimport renderText from '../../../common/helpers/renderText';\nimport { renderPeerLink, translateWithYou } from '../helpers/messageActions';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionSuggestedPostApproval;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiPeer;\n  originalSender?: ApiPeer;\n  ageMinSeconds: number;\n  isAdmin: boolean;\n};\n\nconst SuggestedPostApproval = ({\n  message,\n  action,\n  sender,\n  chat,\n  originalSender,\n  ageMinSeconds,\n  isAdmin,\n  onClick,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const { scheduleDate, amount } = action;\n\n  const chatTitle = chat && getPeerFullTitle(lang, chat);\n  const renderChatLink = () => renderPeerLink(chat?.id, chatTitle || lang('ActionFallbackChat'));\n\n  const originalSenderTitle = originalSender && getPeerFullTitle(lang, originalSender);\n  const originalSenderLink = renderPeerLink(originalSender?.id, originalSenderTitle || lang('ActionFallbackUser'));\n\n  const publishDate = scheduleDate\n    ? formatScheduledDateTime(scheduleDate, lang, oldLang)\n    : lang('SuggestMessageAnytime');\n\n  const isPostPublished = scheduleDate ? scheduleDate <= getServerTime() : false;\n\n  const currency = amount?.currency;\n  const amountValue = amount?.amount || 0;\n\n  const formattedAmount = amountValue > 0\n    ? (currency === TON_CURRENCY_CODE\n      ? formatTonAsText(lang, convertTonFromNanos(amountValue))\n      : formatStarsAsText(lang, amountValue))\n    : undefined;\n\n  const duration = formatShortDuration(lang, ageMinSeconds, true);\n\n  return (\n    <div\n      className={buildClassName(styles.contentBox, styles.suggestedPostContentBox)}\n      onClick={onClick}\n    >\n      <div className={styles.suggestedPostApprovalTitle}>\n        {renderText(lang('SuggestedPostAgreementReached'))}\n      </div>\n\n      <div className={styles.suggestedPostApprovalSection}>\n        {translateWithYou(\n          lang,\n          isPostPublished ? 'SuggestedPostPublished' : 'SuggestedPostPublishSchedule',\n          !isAdmin,\n          { peer: renderChatLink(), date: publishDate },\n          { withMarkdown: true },\n        )}\n      </div>\n\n      {formattedAmount && (\n        <div className={styles.suggestedPostApprovalSection}>\n          {translateWithYou(lang,\n            'SuggestedPostCharged',\n            !isAdmin,\n            {\n              user: originalSenderLink,\n              amount: formattedAmount,\n            },\n            { withMarkdown: true },\n          )}\n        </div>\n      )}\n\n      {isPostPublished && formattedAmount && (\n        <>\n          <div className={styles.suggestedPostApprovalSection}>\n            {translateWithYou(lang, 'SuggestedPostReceiveAmount', !isAdmin, {\n              peer: renderChatLink(),\n              duration,\n            }, { withMarkdown: true })}\n          </div>\n\n          <div className={styles.suggestedPostApprovalSection}>\n            {translateWithYou(lang, 'SuggestedPostRefund', !isAdmin, {\n              peer: renderChatLink(),\n              duration,\n            }, { withMarkdown: true })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): Complete<StateProps> => {\n    const sender = selectSender(global, message);\n    const chat = selectMonoforumChannel(global, message.chatId);\n\n    const replyInfo = getMessageReplyInfo(message);\n    let originalSender: ApiPeer | undefined;\n\n    if (replyInfo?.type === 'message' && replyInfo.replyToMsgId) {\n      const replyMessage = selectReplyMessage(global, message);\n      if (replyMessage) {\n        originalSender = selectSender(global, replyMessage);\n      }\n    }\n\n    const { appConfig } = global;\n    const ageMinSeconds = appConfig.starsSuggestedPostAgeMin;\n    const isAdmin = chat ? Boolean(selectIsMonoforumAdmin(global, message.chatId)) : false;\n\n    return {\n      sender,\n      chat,\n      originalSender,\n      ageMinSeconds,\n      isAdmin,\n    };\n  },\n)(SuggestedPostApproval));\n","import { memo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionSuggestedPostApproval } from '../../../../api/types/messageActions';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../../config';\nimport { getPeerFullTitle } from '../../../../global/helpers/peers';\nimport { selectChatMessage, selectSender } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Sparkles from '../../../common/Sparkles';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionSuggestedPostApproval;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  replyMessageSender?: ApiPeer;\n  replyMessage?: ApiMessage;\n};\n\nconst SuggestedPostBalanceTooLow = ({\n  onClick,\n  message,\n  sender,\n  replyMessageSender,\n  replyMessage,\n}: OwnProps & StateProps) => {\n  const { openStarsBalanceModal } = getActions();\n  const lang = useLang();\n\n  const handleGetMoreStars = useLastCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    openStarsBalanceModal({});\n  });\n\n  const targetPeer = replyMessageSender || sender;\n  const peerTitle = targetPeer && getPeerFullTitle(lang, targetPeer);\n  const peerLink = renderPeerLink(targetPeer?.id, peerTitle || lang('ActionFallbackUser'));\n\n  const currency = replyMessage?.suggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE;\n  const currencyName = currency === TON_CURRENCY_CODE ? lang('CurrencyTon') : lang('CurrencyStars');\n  const buyButtonText = currency === TON_CURRENCY_CODE ? lang('ButtonTopUpViaFragment') : lang('ButtonBuyStars');\n\n  return (\n    <div\n      className={buildClassName(styles.contentBox, styles.suggestedPostBalanceTooLowBox)}\n      onClick={onClick}\n    >\n      <div className={styles.suggestedPostBalanceTooLowTitle}>\n        {lang('SuggestedPostBalanceTooLow', {\n          peer: peerLink,\n          currency: currencyName,\n        }, { withNodes: true, withMarkdown: true })}\n      </div>\n\n      {!message.isOutgoing && (\n        <div className={styles.actionButton} onClick={handleGetMoreStars}>\n          <Sparkles preset=\"button\" />\n          {buyButtonText}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): Complete<StateProps> => {\n    const sender = selectSender(global, message);\n\n    const replyMessage = message.replyInfo?.type === 'message' && message.replyInfo.replyToMsgId\n      ? selectChatMessage(global, message.chatId, message.replyInfo.replyToMsgId)\n      : undefined;\n\n    const replyMessageSender = replyMessage ? selectSender(global, replyMessage) : undefined;\n\n    return {\n      sender,\n      replyMessageSender,\n      replyMessage,\n    };\n  },\n)(SuggestedPostBalanceTooLow));\n","import { memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionSuggestedPostApproval } from '../../../../api/types/messageActions';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectSender } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { renderPeerLink, translateWithYou } from '../helpers/messageActions';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionSuggestedPostApproval;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n};\n\nconst SuggestedPostRejected = ({\n  message,\n  action,\n  sender,\n  onClick,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n  const { isOutgoing } = message;\n  const { rejectComment } = action;\n\n  const senderTitle = sender && getPeerTitle(lang, sender);\n  const senderLink = renderPeerLink(sender?.id, senderTitle || lang('ActionFallbackUser'));\n\n  return (\n    <div\n      className={buildClassName(styles.contentBox, styles.suggestedPostRejectedContentBox)}\n      onClick={onClick}\n    >\n      <div className={styles.suggestedPostRejectedTitle}>\n        <Icon className={styles.rejectedIcon} name=\"close\" />\n        {translateWithYou(\n          lang,\n          rejectComment ? 'SuggestedPostRejectedWithReason' : 'SuggestedPostRejected',\n          isOutgoing,\n          { peer: senderLink },\n          { withMarkdown: true },\n        )}\n      </div>\n\n      {rejectComment && (\n        <div className={styles.suggestedPostRejectedComment}>\n          {lang('SuggestedPostRejectedComment', { comment: rejectComment })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): Complete<StateProps> => {\n    const sender = selectSender(global, message);\n\n    return {\n      sender,\n    };\n  },\n)(SuggestedPostRejected));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"V3RHiOJR\",\"notch\":\"tfG_BSDt\",\"notch-path\":\"HVbeGv4t\",\"notchPath\":\"HVbeGv4t\",\"header\":\"s7QOi22Q\",\"title\":\"JstcOhAN\",\"close\":\"meewH7t_\",\"icon\":\"d8axZxyN\",\"skeleton\":\"xKVZv7KE\",\"inner\":\"njAC8dR9\",\"is-appearing\":\"eb8rX09E\",\"isAppearing\":\"eb8rX09E\",\"channels-appear\":\"AL2cLQ4i\",\"channelsAppear\":\"AL2cLQ4i\",\"is-hiding\":\"XR6_qLCc\",\"isHiding\":\"XR6_qLCc\",\"channels-disappear\":\"TwwnoiuD\",\"channelsDisappear\":\"TwwnoiuD\",\"channel-list\":\"h4gWlNen\",\"channelList\":\"h4gWlNen\",\"item\":\"glDpC2av\",\"last-item\":\"MBChXyXk\",\"lastItem\":\"MBChXyXk\",\"avatar\":\"gqCs9fSo\",\"badge\":\"gnYhwnvf\",\"members-count\":\"HWgwnKui\",\"membersCount\":\"HWgwnKui\",\"channel-title\":\"BTNQ4KBH\",\"channelTitle\":\"BTNQ4KBH\",\"fake-avatar\":\"Xl9MVMTn\",\"fakeAvatar\":\"Xl9MVMTn\",\"fake-avatar-inner\":\"Qizai7yv\",\"fakeAvatarInner\":\"Qizai7yv\",\"last-fake-avatar\":\"JxSmtOFi\",\"lastFakeAvatar\":\"JxSmtOFi\"};","import {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserPremium,\n  selectSimilarChannelIds,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAverageColor from '../../../hooks/useAverageColor';\nimport useFlag from '../../../hooks/useFlag';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport styles from './SimilarChannels.module.scss';\n\nconst DEFAULT_BADGE_COLOR = '#3C3C4399';\nconst SHOW_CHANNELS_NUMBER = 10;\nconst ANIMATION_DURATION = 150;\nconst MIN_SKELETON_DELAY = 300;\nconst MAX_SKELETON_DELAY = 2000;\nconst AUTO_EXPAND_TIME = 10; // Seconds from joining\n\ntype OwnProps = {\n  chatId: string;\n};\n\ntype StateProps = {\n  similarChannelIds?: string[];\n  isExpanded?: boolean;\n  count?: number;\n  isCurrentUserPremium: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n};\n\nconst SimilarChannels = ({\n  chatId,\n  similarChannelIds,\n  isExpanded,\n  count,\n  isCurrentUserPremium,\n  channelJoinInfo,\n}: StateProps & OwnProps) => {\n  const { toggleChannelRecommendations, loadChannelRecommendations } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShowing, markShowing, markNotShowing] = useFlag(false);\n  const [isHiding, markHiding, markNotHiding] = useFlag(false);\n\n  const ref = useRef<HTMLDivElement>();\n\n  const ignoreAutoScrollRef = useRef(false);\n  const similarChannels = useMemo(() => {\n    if (!similarChannelIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return similarChannelIds.map((id) => selectChat(global, id)).filter(Boolean);\n  }, [similarChannelIds]);\n  // Show skeleton while loading similar channels\n  const [shouldRenderSkeleton, setShouldRenderSkeleton] = useState(false);\n  const firstSimilarChannels = useMemo(() => similarChannels?.slice(0, SHOW_CHANNELS_NUMBER), [similarChannels]);\n  const areSimilarChannelsPresent = Boolean(firstSimilarChannels?.length);\n\n  const isAnimating = isHiding || isShowing;\n  const shouldRenderChannels = Boolean(\n    !shouldRenderSkeleton\n    && (isExpanded || isAnimating)\n    && areSimilarChannelsPresent,\n  );\n\n  useHorizontalScroll(ref, !shouldRenderChannels, true);\n\n  useEffect(() => {\n    if (!similarChannelIds) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, similarChannelIds]);\n\n  useTimeout(() => setShouldRenderSkeleton(false), MAX_SKELETON_DELAY);\n\n  useEffect(() => {\n    if (shouldRenderSkeleton && similarChannels && isExpanded) {\n      const id = setTimeout(() => {\n        setShouldRenderSkeleton(false);\n      }, MIN_SKELETON_DELAY);\n\n      return () => clearTimeout(id);\n    }\n\n    return undefined;\n  }, [similarChannels, isExpanded, shouldRenderSkeleton]);\n\n  useEffect(() => {\n    if (isExpanded) {\n      markShowing();\n      markNotHiding();\n      setShouldRenderSkeleton(!similarChannelIds);\n      if (!ignoreAutoScrollRef.current) {\n        setTimeout(() => {\n          ref.current?.scrollIntoView({ behavior: 'smooth' });\n        }, ANIMATION_DURATION);\n      }\n    } else {\n      markNotShowing();\n      markHiding();\n    }\n  }, [isExpanded, similarChannelIds]);\n\n  const handleToggle = useLastCallback(() => {\n    toggleChannelRecommendations({ chatId });\n  });\n\n  useEffect(() => {\n    if (!channelJoinInfo?.joinedDate || isExpanded) return;\n    if (getServerTime() - channelJoinInfo.joinedDate <= AUTO_EXPAND_TIME) {\n      handleToggle();\n      ignoreAutoScrollRef.current = true;\n    }\n  }, [channelJoinInfo, isExpanded]);\n\n  if (!shouldRenderChannels && !shouldRenderSkeleton) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root)}>\n      {shouldRenderSkeleton && <Skeleton className={styles.skeleton} />}\n      {shouldRenderChannels && (\n        <div\n          className={buildClassName(\n            isShowing && styles.isAppearing,\n            isHiding && styles.isHiding,\n          )}\n        >\n          <div className={styles.notch}>\n            <svg\n              width=\"19\"\n              height=\"7\"\n              viewBox=\"0 0 19 7\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                className={styles.notchPath}\n                fill-rule=\"evenodd\"\n                clip-rule=\"evenodd\"\n                d=\"M19 7C16.8992 7 13.59 3.88897 11.5003 1.67424C10.7648 0.894688 10.397 0.50491 10.0434 0.385149C9.70568 0.270811 9.4225 0.270474 9.08456 0.38401C8.73059 0.50293 8.36133 0.892443 7.62279 1.67147C5.52303 3.88637 2.18302 7 0 7L19 7Z\"\n                fill=\"white\"\n              />\n            </svg>\n          </div>\n          <div className={styles.inner}>\n            <div className={styles.header}>\n              <span className={styles.title}>{lang('SimilarChannels')}</span>\n              <Button\n                className={styles.close}\n                color=\"translucent\"\n                onClick={handleToggle}\n              >\n                <Icon name=\"close\" />\n              </Button>\n            </div>\n            <div ref={ref} className={buildClassName(styles.channelList, 'no-scrollbar')}>\n              {firstSimilarChannels?.map((channel, i) => {\n                return i === SHOW_CHANNELS_NUMBER - 1 ? (\n                  <MoreChannels\n                    channel={channel}\n                    chatId={chatId}\n                    channelsCount={count! - SHOW_CHANNELS_NUMBER + 1}\n                    isCurrentUserPremium={isCurrentUserPremium}\n                  />\n                ) : (\n                  <SimilarChannel channel={channel} />\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SimilarChannel({ channel }: { channel: ApiChat }) {\n  const { openChat } = getActions();\n  const color = useAverageColor(channel, DEFAULT_BADGE_COLOR);\n  const lang = useLang();\n\n  return (\n    <div className={styles.item} onClick={() => openChat({ id: channel.id })}>\n      <Avatar className={styles.avatar} key={channel.id} size=\"large\" peer={channel} />\n      <div style={`background: ${color}`} className={styles.badge}>\n        <Icon name=\"user-filled\" className={styles.icon} />\n        <span className={styles.membersCount}>\n          {formatIntegerCompact(lang, channel?.membersCount || 0)}\n        </span>\n      </div>\n      <span className={styles.channelTitle}>{channel.title}</span>\n    </div>\n  );\n}\n\nfunction MoreChannels({\n  channel,\n  chatId,\n  channelsCount,\n  isCurrentUserPremium,\n}: {\n  channel: ApiChat;\n  chatId: string;\n  channelsCount: number;\n  isCurrentUserPremium: boolean;\n}) {\n  const { openPremiumModal, openChatWithInfo } = getActions();\n  const lang = useOldLang();\n\n  const handleClickMore = () => {\n    if (isCurrentUserPremium) {\n      openChatWithInfo({\n        id: chatId, shouldReplaceHistory: true, profileTab: 'similarChannels', forceScrollProfileTab: true,\n      });\n    } else {\n      openPremiumModal();\n    }\n  };\n\n  return (\n    <div\n      className={buildClassName(styles.item, styles.lastItem)}\n      onClick={() => handleClickMore()}\n    >\n      <Avatar className={styles.avatar} key={channel.id} size=\"large\" peer={channel} />\n      <div className={styles.fakeAvatar}>\n        <div className={styles.fakeAvatarInner} />\n      </div>\n      <div className={buildClassName(styles.fakeAvatar, styles.lastFakeAvatar)}>\n        <div className={styles.fakeAvatarInner} />\n      </div>\n      <div className={styles.badge}>\n        <span className={styles.membersCount}>{`+${channelsCount}`}</span>\n        {!isCurrentUserPremium && <Icon name=\"lock-badge\" className={styles.icon} />}\n      </div>\n      <span className={styles.channelTitle}>{lang('MoreSimilar')}</span>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { chatId }): Complete<StateProps> => {\n    const { similarChannelIds, isExpanded, count } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n\n    return {\n      similarChannelIds,\n      isExpanded,\n      count,\n      isCurrentUserPremium,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n    };\n  })(SimilarChannels),\n);\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ApiPeer } from '../api/types';\nimport { ApiMediaFormat } from '../api/types';\n\nimport { getChatAvatarHash } from '../global/helpers';\nimport { getAverageColor, rgb2hex } from '../util/colors';\nimport useMedia from './useMedia';\n\nfunction useAverageColor(peer: ApiPeer, fallbackColor = '#00000000') {\n  const [color, setColor] = useState(fallbackColor);\n  const imgBlobUrl = useMedia(getChatAvatarHash(peer), false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    (async () => {\n      if (!imgBlobUrl) {\n        return;\n      }\n\n      const averageColor = await getAverageColor(imgBlobUrl);\n      setColor(`#${rgb2hex(averageColor)}`);\n    })();\n  }, [imgBlobUrl]);\n\n  return color;\n}\n\nexport default useAverageColor;\n","import {\n  memo, useEffect, useMemo, useRef, useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessageAction } from '../../../api/types/messageActions';\nimport type {\n  FocusDirection,\n  ScrollTargetPosition,\n  ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { type ApiMessage, type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { MESSAGE_APPEARANCE_DELAY } from '../../../config';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { getMessageReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectSender,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { IS_ANDROID, IS_FLUID_BACKGROUND_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageResizeObserver from '../../../hooks/useResizeMessageObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { type OnIntersectPinnedMessage } from '../hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './hooks/useFluidBackgroundFilter';\nimport useFocusMessage from './hooks/useFocusMessage';\n\nimport ActionMessageText from './ActionMessageText';\nimport ChannelPhoto from './actions/ChannelPhoto';\nimport Gift from './actions/Gift';\nimport GiveawayPrize from './actions/GiveawayPrize';\nimport StarGift from './actions/StarGift';\nimport StarGiftUnique from './actions/StarGiftUnique';\nimport SuggestedPhoto from './actions/SuggestedPhoto';\nimport SuggestedPostApproval from './actions/SuggestedPostApproval';\nimport SuggestedPostBalanceTooLow from './actions/SuggestedPostBalanceTooLow';\nimport SuggestedPostRejected from './actions/SuggestedPostRejected';\nimport ContextMenuContainer from './ContextMenuContainer';\nimport Reactions from './reactions/Reactions';\nimport SimilarChannels from './SimilarChannels';\n\nimport styles from './ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId: ThreadId;\n  appearanceOrder: number;\n  isJustAdded?: boolean;\n  isLastInList?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n  getIsMessageListReady?: Signal<boolean>;\n  onIntersectPinnedMessage?: OnIntersectPinnedMessage;\n  observeIntersectionForBottom?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  currentUserId?: string;\n  isInsideTopic?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  replyMessage?: ApiMessage;\n  patternColor?: string;\n  isCurrentUserPremium?: boolean;\n  isInSelectMode?: boolean;\n  hasUnreadReaction?: boolean;\n  isResizingContainer?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isAccountFrozen?: boolean;\n};\n\nconst SINGLE_LINE_ACTIONS = new Set<ApiMessageAction['type']>([\n  'pinMessage',\n  'chatEditPhoto',\n  'chatDeletePhoto',\n  'todoCompletions',\n  'todoAppendTasks',\n  'unsupported',\n]);\nconst HIDDEN_TEXT_ACTIONS = new Set<ApiMessageAction['type']>(['giftCode', 'prizeStars',\n  'suggestProfilePhoto', 'suggestedPostApproval']);\n\nconst ActionMessage = ({\n  message,\n  threadId,\n  sender,\n  currentUserId,\n  appearanceOrder,\n  isJustAdded,\n  isLastInList,\n  memoFirstUnreadIdRef,\n  getIsMessageListReady,\n  isInsideTopic,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  replyMessage,\n  patternColor,\n  isCurrentUserPremium,\n  isInSelectMode,\n  hasUnreadReaction,\n  isResizingContainer,\n  scrollTargetPosition,\n  onIntersectPinnedMessage,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isAccountFrozen,\n}: OwnProps & StateProps) => {\n  const {\n    requestConfetti,\n    openMediaViewer,\n    getReceipt,\n    checkGiftCode,\n    openPrizeStarsTransactionFromGiveaway,\n    openPremiumModal,\n    openStarsTransactionFromGift,\n    openGiftInfoModalFromMessage,\n    toggleChannelRecommendations,\n    animateUnreadReaction,\n    markMentionsRead,\n    focusMessage,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const { id, chatId } = message;\n  const action = message.content.action!;\n  const isLocal = isLocalMessageId(id);\n\n  const isTextHidden = HIDDEN_TEXT_ACTIONS.has(action.type);\n  const isSingleLine = SINGLE_LINE_ACTIONS.has(action.type);\n  const isFluidMultiline = IS_FLUID_BACKGROUND_SUPPORTED && !isSingleLine;\n  const isClickableText = action.type === 'suggestedPostSuccess';\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const { replyToMsgId, replyToPeerId } = messageReplyInfo || {};\n\n  const withServiceReactions = Boolean(message.areReactionsPossible && message?.reactions?.results?.length);\n\n  const shouldSkipRender = isInsideTopic && action.type === 'topicCreate';\n\n  const { isTouchScreen } = useAppLayout();\n\n  useOnIntersect(ref, !shouldSkipRender ? observeIntersectionForBottom : undefined);\n\n  useMessageResizeObserver(ref, !shouldSkipRender && isLastInList && action.type !== 'channelJoined');\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    id,\n  );\n  useFocusMessage({\n    elementRef: ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    scrollTargetPosition,\n  });\n\n  useUnmountCleanup(() => {\n    if (message.isPinned) {\n      onIntersectPinnedMessage?.({ viewportPinnedIdsToRemove: [message.id] });\n    }\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    (isTouchScreen && isInSelectMode) || isAccountFrozen,\n    !IS_TAURI,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { ref: refWithTransition } = useShowTransition({\n    isOpen: isShown,\n    noOpenTransition: noAppearanceAnimation,\n    noCloseTransition: true,\n    className: false,\n    ref,\n  });\n\n  useEffect(() => {\n    const bottomMarker = ref.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [id] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ chatId, messageIds: [id] });\n    }\n  }, [hasUnreadReaction, chatId, id, animateUnreadReaction, message.hasUnreadMention]);\n\n  useEffect(() => {\n    if (action.type !== 'giftPremium') return;\n    if ((memoFirstUnreadIdRef?.current && id >= memoFirstUnreadIdRef.current) || isLocal) {\n      requestConfetti({});\n    }\n  }, [action.type, id, isLocal, memoFirstUnreadIdRef]);\n\n  const fluidBackgroundStyle = useFluidBackgroundFilter(isFluidMultiline ? patternColor : undefined);\n\n  const handleClick = useLastCallback(() => {\n    switch (action.type) {\n      case 'paymentSent':\n      case 'paymentRefunded': {\n        getReceipt({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'chatEditPhoto': {\n        openMediaViewer({\n          chatId: message.chatId,\n          messageId: message.id,\n          threadId,\n          origin: MediaViewerOrigin.ChannelAvatar,\n        });\n        break;\n      }\n\n      case 'giftCode': {\n        checkGiftCode({ slug: action.slug, message: { chatId: message.chatId, messageId: message.id } });\n        break;\n      }\n\n      case 'prizeStars': {\n        openPrizeStarsTransactionFromGiveaway({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'giftPremium': {\n        openPremiumModal({\n          isGift: true,\n          fromUserId: sender?.id,\n          toUserId: sender && sender.id === currentUserId ? chatId : currentUserId,\n          monthsAmount: action.months,\n        });\n        break;\n      }\n\n      case 'giftTon':\n      case 'giftStars': {\n        openStarsTransactionFromGift({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'starGift':\n      case 'starGiftUnique': {\n        openGiftInfoModalFromMessage({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'channelJoined': {\n        toggleChannelRecommendations({ chatId });\n        break;\n      }\n\n      case 'suggestedPostApproval': {\n        const replyInfo = getMessageReplyInfo(message);\n        if (replyInfo?.type === 'message' && replyInfo.replyToMsgId) {\n          focusMessage({\n            chatId: message.chatId,\n            threadId,\n            messageId: replyInfo.replyToMsgId,\n          });\n        }\n        break;\n      }\n\n      case 'suggestedPostSuccess': {\n        const replyInfo = getMessageReplyInfo(message);\n        if (replyInfo?.type === 'message' && replyInfo.replyToMsgId) {\n          focusMessage({\n            chatId: message.chatId,\n            threadId,\n            messageId: replyInfo.replyToMsgId,\n          });\n        }\n        break;\n      }\n    }\n  });\n\n  const fullContent = useMemo(() => {\n    switch (action.type) {\n      case 'chatEditPhoto': {\n        if (!action.photo) return undefined;\n        return (\n          <ChannelPhoto\n            action={action}\n            observeIntersection={observeIntersectionForLoading}\n            onClick={handleClick}\n          />\n        );\n      }\n\n      case 'suggestProfilePhoto':\n        return (\n          <SuggestedPhoto\n            message={message}\n            action={action}\n            observeIntersection={observeIntersectionForLoading}\n          />\n        );\n\n      case 'prizeStars':\n      case 'giftCode':\n        return (\n          <GiveawayPrize\n            action={action}\n            sender={sender}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'giftPremium':\n      case 'giftTon':\n      case 'giftStars':\n        return (\n          <Gift\n            action={action}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'starGift':\n        return (\n          <StarGift\n            action={action}\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'starGiftUnique':\n        return (\n          <StarGiftUnique\n            action={action}\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'channelJoined':\n        return (\n          <SimilarChannels\n            chatId={message.chatId}\n          />\n        );\n\n      case 'suggestedPostApproval':\n        if (action.isBalanceTooLow) {\n          return (\n            <SuggestedPostBalanceTooLow\n              message={message}\n              action={action}\n              onClick={handleClick}\n            />\n          );\n        }\n        return action.isRejected ? (\n          <SuggestedPostRejected\n            message={message}\n            action={action}\n            onClick={handleClick}\n          />\n        ) : (\n          <SuggestedPostApproval\n            message={message}\n            action={action}\n            onClick={handleClick}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }, [action, message, observeIntersectionForLoading, sender, observeIntersectionForPlaying]);\n\n  if ((isInsideTopic && action.type === 'topicCreate') || action.type === 'phoneCall') {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={refWithTransition}\n      id={getMessageHtmlId(id)}\n      className={buildClassName(\n        'ActionMessage',\n        'message-list-item',\n        styles.root,\n        isSingleLine && styles.singleLine,\n        isFluidMultiline && styles.fluidMultiline,\n        fullContent && styles.hasFullContent,\n        isFocused && !noFocusHighlight && 'focused',\n        isContextMenuShown && 'has-menu-open',\n        isLastInList && 'last-in-list',\n      )}\n      data-message-id={message.id}\n      data-is-pinned={message.isPinned || undefined}\n      data-has-unread-mention={message.hasUnreadMention || undefined}\n      data-has-unread-reaction={hasUnreadReaction || undefined}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isTextHidden && (\n        <>\n          {isFluidMultiline && (\n            <div className={buildClassName(styles.inlineWrapper, isClickableText && styles.hoverable)}>\n              <span className={styles.fluidBackground} style={fluidBackgroundStyle}>\n                <ActionMessageText message={message} isInsideTopic={isInsideTopic} />\n              </span>\n            </div>\n          )}\n          <div className={buildClassName(styles.inlineWrapper, isClickableText && styles.hoverable)}>\n            <span className={styles.textContent} onClick={handleClick}>\n              <ActionMessageText message={message} isInsideTopic={isInsideTopic} />\n            </span>\n          </div>\n        </>\n      )}\n      {fullContent}\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          message={message}\n          messageListType=\"thread\"\n          className={styles.contextContainer}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      {withServiceReactions && (\n        <Reactions\n          isOutside\n          message={message}\n          threadId={threadId}\n          observeIntersection={observeIntersectionForPlaying}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isAccountFrozen={isAccountFrozen}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, threadId }): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { themes } = global.settings;\n\n    const chat = selectChat(global, message.chatId);\n\n    const sender = selectSender(global, message);\n\n    const isInsideTopic = chat?.isForum && threadId !== MAIN_THREAD_ID;\n\n    const { replyToMsgId, replyToPeerId } = getMessageReplyInfo(message) || {};\n    const replyMessage = replyToMsgId\n      ? selectChatMessage(global, replyToPeerId || message.chatId, replyToMsgId) : undefined;\n\n    const isFocused = threadId ? selectIsMessageFocused(global, message, threadId) : false;\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n      isResizingContainer, scrollTargetPosition,\n    } = (isFocused && tabState.focusedMessage) || {};\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      sender,\n      currentUserId: global.currentUserId,\n      isCurrentUserPremium,\n      isFocused,\n      focusDirection,\n      noFocusHighlight,\n      isInsideTopic,\n      replyMessage,\n      isInSelectMode: selectIsInSelectMode(global),\n      patternColor: themes[selectTheme(global)]?.patternColor,\n      hasUnreadReaction,\n      isResizingContainer,\n      scrollTargetPosition,\n      isAccountFrozen,\n    };\n  },\n)(ActionMessage));\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect } from '../lib/teact/teact';\n\nconst useHorizontalScroll = (\n  containerRef: ElementRef<HTMLDivElement>,\n  isDisabled?: boolean,\n  shouldPreventDefault = false,\n) => {\n  useEffect(() => {\n    if (isDisabled) {\n      return undefined;\n    }\n\n    const container = containerRef.current!;\n\n    function handleScroll(e: WheelEvent) {\n      // Ignore horizontal scroll and let it work natively (e.g. on touchpad)\n      if (!e.deltaX) {\n        container.scrollLeft += e.deltaY / 4;\n        if (shouldPreventDefault) e.preventDefault();\n      }\n    }\n\n    container.addEventListener('wheel', handleScroll, { passive: !shouldPreventDefault });\n\n    return () => {\n      container.removeEventListener('wheel', handleScroll);\n    };\n  }, [containerRef, isDisabled, shouldPreventDefault]);\n};\n\nexport default useHorizontalScroll;\n","import { memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { preloadImage } from '../../../util/files';\nimport { hexToRgb } from '../../../util/switchTheme.ts';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport styles from './RadialPatternBackground.module.scss';\n\ntype OwnProps = {\n  backgroundColors: string[];\n  patternIcon?: ApiSticker;\n  patternColor?: string;\n  patternSize?: number;\n  ringsCount?: number;\n  ovalFactor?: number;\n  withLinearGradient?: boolean;\n  className?: string;\n  clearBottomSector?: boolean;\n  yPosition?: number;\n};\n\nconst BASE_RING_ITEM_COUNT = 8;\nconst RING_INCREMENT = 0.5;\nconst CENTER_EMPTINESS = 0.1;\nconst MAX_RADIUS = 0.42;\nconst MIN_SIZE = 4 * REM;\n\nconst DEFAULT_PATTERN_SIZE = 20;\nconst DEFAULT_RINGS_COUNT = 3;\nconst DEFAULT_OVAL_FACTOR = 1.4;\n\nconst RadialPatternBackground = ({\n  backgroundColors,\n  patternIcon,\n  patternColor,\n  patternSize = DEFAULT_PATTERN_SIZE,\n  ringsCount = DEFAULT_RINGS_COUNT,\n  ovalFactor = DEFAULT_OVAL_FACTOR,\n  withLinearGradient,\n  clearBottomSector,\n  className,\n  yPosition,\n}: OwnProps) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const canvasRef = useRef<HTMLCanvasElement>();\n\n  const [getContainerSize, setContainerSize] = useSignal({ width: 0, height: 0 });\n\n  const dpr = useDevicePixelRatio();\n\n  const [emojiImage, setEmojiImage] = useState<HTMLImageElement | undefined>();\n\n  const previewMediaHash = patternIcon && getStickerMediaHash(patternIcon, 'preview');\n  const previewUrl = useMedia(previewMediaHash);\n\n  useEffect(() => {\n    if (!previewUrl) return;\n    preloadImage(previewUrl).then(setEmojiImage);\n  }, [previewUrl]);\n\n  const patternPositions = useMemo(() => {\n    const coordinates: { x: number; y: number; sizeFactor: number }[] = [];\n    for (let ring = 1; ring <= ringsCount; ring++) {\n      const ringItemCount = Math.floor(BASE_RING_ITEM_COUNT * (1 + (ring - 1) * RING_INCREMENT));\n      const ringProgress = ring / ringsCount;\n      const ringRadius = CENTER_EMPTINESS + (MAX_RADIUS - CENTER_EMPTINESS) * ringProgress;\n      const angleShift = ring % 2 === 0 ? Math.PI / ringItemCount : 0;\n\n      for (let i = 0; i < ringItemCount; i++) {\n        const angle = (i / ringItemCount) * Math.PI * 2 + angleShift;\n\n        if (clearBottomSector && angle > Math.PI * 0.45 && angle < Math.PI * 0.55) {\n          continue;\n        }\n\n        const xOffset = ringRadius * Math.cos(angle) * ovalFactor;\n        const yOffset = ringRadius * Math.sin(angle);\n        const sizeFactor = 1.65 - ringProgress + Math.random() / ringsCount;\n\n        coordinates.push({\n          x: xOffset,\n          y: yOffset,\n          sizeFactor,\n        });\n      }\n    }\n    return coordinates;\n  }, [clearBottomSector, ovalFactor, ringsCount]);\n\n  useResizeObserver(containerRef, (entry) => {\n    setContainerSize({\n      width: entry.contentRect.width,\n      height: entry.contentRect.height,\n    });\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (container) {\n      setContainerSize({\n        width: container.clientWidth,\n        height: container.clientHeight,\n      });\n    }\n  }, [setContainerSize]);\n\n  const draw = useLastCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || !emojiImage) return;\n    const ctx = canvas.getContext('2d')!;\n    const { width, height } = canvas;\n    if (!width || !height) return;\n\n    const centerX = width / 2;\n    const centerY = yPosition !== undefined ? yPosition * dpr : height / 2;\n\n    ctx.clearRect(0, 0, width, height);\n\n    patternPositions.forEach(({\n      x, y, sizeFactor,\n    }) => {\n      const renderX = x * Math.max(width, MIN_SIZE * dpr) + centerX;\n      const renderY = yPosition !== undefined ? y * Math.max(width, MIN_SIZE * dpr) + centerY\n        : y * Math.max(height, MIN_SIZE * dpr) + centerY;\n      const size = patternSize * dpr * sizeFactor;\n\n      ctx.drawImage(emojiImage, renderX - size / 2, renderY - size / 2, size, size);\n    });\n\n    ctx.fillStyle = adjustBrightness(backgroundColors[1] ?? backgroundColors[0], -0.075);\n    ctx.globalCompositeOperation = 'source-in';\n    ctx.fillRect(0, 0, width, height);\n\n    const radialGradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, width / 2);\n    radialGradient.addColorStop(0.75, 'rgb(255 255 255 / 0)');\n    radialGradient.addColorStop(1, 'rgb(255 255 255 / 0.75)');\n\n    // Scale around the gradient center\n    ctx.translate(centerX, centerY);\n    ctx.scale(1, 1 / ovalFactor);\n    ctx.translate(-centerX, -centerY);\n\n    // Alpha mask\n    ctx.globalCompositeOperation = 'destination-out';\n    ctx.fillStyle = radialGradient;\n    // The higher the ovalFactor, the more we need to extend vertically\n    const fillHeight = height * ovalFactor;\n    ctx.fillRect(0, -fillHeight, width, fillHeight * 2);\n  });\n\n  useEffect(() => {\n    draw();\n  }, [emojiImage, patternColor, patternPositions, yPosition, ovalFactor]);\n\n  useLayoutEffect(() => {\n    const { width, height } = getContainerSize();\n    const canvas = canvasRef.current;\n    if (!width || !height || !canvas) {\n      return;\n    }\n\n    requestMutation(() => {\n      canvas.width = width * dpr;\n      canvas.height = height * dpr;\n\n      draw();\n    });\n  }, [getContainerSize, dpr]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, withLinearGradient && styles.withLinearGradient, className)}\n      style={buildStyle(\n        `--_bg-light: ${backgroundColors[0]}`,\n        `--_bg-dark: ${backgroundColors[1] ?? backgroundColors[0]}`,\n        yPosition !== undefined && `--_y-shift: ${yPosition}px`,\n      )}\n    >\n      <canvas\n        ref={canvasRef}\n        className={buildClassName(styles.canvas, emojiImage && styles.showing)}\n        aria-hidden=\"true\"\n      />\n    </div>\n  );\n};\n\nexport default memo(RadialPatternBackground);\n\nfunction adjustBrightness(hex: string, delta: number) {\n  const factor = 1 + delta;\n  const rgba = hexToRgb(hex);\n  const darkenedRgba = [\n    Math.min(255, Math.round(rgba.r * factor)),\n    Math.min(Math.round(rgba.g * factor)),\n    Math.min(Math.round(rgba.b * factor)),\n    rgba.a ?? 1,\n  ] as const;\n\n  return rgbaToHex(...darkenedRgba);\n}\n\nfunction rgbaToHex(r: number, g: number, b: number, a: number) {\n  return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}${Math.round(a * 255).toString(16)}`;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Af3tYFMg\",\"withLinearGradient\":\"NorYkjxC\",\"canvas\":\"GbpiDSS_\",\"showing\":\"Y5FyX1oo\"};","import windowSize from '../windowSize';\n\nexport function isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n","import {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiReaction, ApiReactionPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectPerformanceSettingsValue, selectTabState } from '../../../global/selectors';\nimport { IS_ANDROID, IS_IOS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport AnimatedIcon from '../AnimatedIcon';\nimport StarIcon from '../icons/StarIcon';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  containerId: string;\n  reaction: ApiReactionPaid;\n  className?: string;\n  size?: number;\n  effectSize?: number;\n  localAmount?: number;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  activeReactions?: ApiReaction[];\n  withEffects?: boolean;\n};\n\nconst ICON_SIZE = 1.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\nconst MAX_EFFECT_COUNT = (IS_IOS || IS_ANDROID) ? 2 : 5;\nconst QUALITY = (IS_IOS || IS_ANDROID) ? 2 : 3;\n\nconst PaidReactionEmoji = ({\n  containerId,\n  reaction,\n  className,\n  size = ICON_SIZE,\n  effectSize = EFFECT_SIZE,\n  activeReactions,\n  localAmount,\n  withEffects,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { stopActiveReaction } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const effectRef = useRef<HTMLDivElement>();\n\n  const [effectsIds, setEffectsIds] = useState<number[]>([]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlayEffect = Boolean(\n    withEffects && activeReaction,\n  );\n  const canAddMoreEffects = effectsIds.length < MAX_EFFECT_COUNT;\n\n  useEffectWithPrevDeps(([prevLocalAmount]) => {\n    if (!shouldPlayEffect) {\n      setEffectsIds([]);\n      return;\n    }\n\n    if (!localAmount || localAmount <= (prevLocalAmount || 0)) {\n      return;\n    }\n\n    if (canAddMoreEffects) {\n      setEffectsIds((prev) => [...prev, Date.now()]);\n    }\n  }, [localAmount, canAddMoreEffects, shouldPlayEffect]);\n\n  const {\n    shouldRender: shouldRenderEffect,\n  } = useShowTransition({\n    ref: effectRef,\n    noMountTransition: true,\n    isOpen: shouldPlayEffect,\n    className: 'slow',\n    withShouldRender: true,\n  });\n\n  const handleEnded = useLastCallback(() => {\n    const newEffectsIds = effectsIds.slice(1);\n    setEffectsIds(newEffectsIds);\n    if (!newEffectsIds.length) {\n      stopActiveReaction({ containerId, reaction });\n    }\n  });\n\n  const rootClassName = buildClassName(\n    styles.root,\n    shouldRenderEffect && styles.animating,\n    className,\n  );\n\n  return (\n    <div className={rootClassName} ref={ref} teactFastList>\n      <StarIcon key=\"icon\" type=\"gold\" size=\"adaptive\" style={`width: ${size}px; height: ${size}px`} />\n      {shouldRenderEffect && effectsIds.map((id) => (\n        <AnimatedIcon\n          key={id}\n          ref={effectRef}\n          className={styles.effect}\n          size={effectSize}\n          tgsUrl={LOCAL_TGS_URLS.StarReactionEffect}\n          play={isIntersecting}\n          noLoop\n          forceAlways\n          nonInteractive\n          quality={QUALITY}\n          onEnded={handleEnded}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { containerId }) => {\n    const { activeReactions } = selectTabState(global);\n\n    const withEffects = selectPerformanceSettingsValue(global, 'reactionEffects');\n\n    return {\n      activeReactions: activeReactions?.[containerId],\n      withEffects,\n    };\n  },\n)(PaidReactionEmoji));\n","import type React from '../../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useContextMenuHandlers from '../../../../hooks/useContextMenuHandlers';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useShowTransition from '../../../../hooks/useShowTransition';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport PaidReactionEmoji from '../../../common/reactions/PaidReactionEmoji';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Sparkles from '../../../common/Sparkles';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\nconst MAX_SCALE = 3;\n\ntype OwnProps = {\n  chatId: string;\n  messageId: number;\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  isOutside?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n  onPaidClick?: (count: number) => void;\n};\n\nfunction selectStarsState(global: GlobalState) {\n  return global.stars;\n}\n\nconst ReactionButton = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  chatId,\n  messageId,\n  isOutside,\n  observeIntersection,\n  onClick,\n  onPaidClick,\n}: OwnProps) => {\n  const {\n    openStarsBalanceModal,\n    resetLocalPaidReactions,\n    openPaidReactionModal,\n    requestWave,\n  } = getActions();\n  const ref = useRef<HTMLButtonElement>();\n  const counterRef = useRef<HTMLSpanElement>();\n  const animationRef = useRef<Animation>();\n\n  const lang = useLang();\n\n  const isPaid = reaction.reaction.type === 'paid';\n\n  const starsState = useSelector(selectStarsState);\n  const areStarsLoaded = Boolean(starsState);\n\n  const handlePaidClick = useLastCallback((count = 1) => {\n    onPaidClick?.(count);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (reaction.reaction.type === 'paid') {\n      e.stopPropagation(); // Prevent default message double click behavior\n      handlePaidClick();\n\n      return;\n    }\n\n    onClick?.(reaction.reaction);\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      openPaidReactionModal({\n        chatId,\n        messageId,\n      });\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, handleContextMenuHide, isContextMenuOpen, chatId, messageId]);\n\n  useEffectWithPrevDeps(([prevReaction]) => {\n    const amount = reaction.localAmount;\n    const button = ref.current;\n    if (!amount || !button || amount === prevReaction?.localAmount) return;\n\n    if (areStarsLoaded && amount > starsState.balance.amount) {\n      openStarsBalanceModal({\n        originReaction: {\n          chatId,\n          messageId,\n          amount,\n        },\n      });\n      resetLocalPaidReactions({\n        chatId,\n        messageId,\n      });\n      return;\n    }\n\n    if (reaction.localAmount) {\n      const { left, top } = button.getBoundingClientRect();\n      const startX = left + button.offsetWidth / 2;\n      const startY = top + button.offsetHeight / 2;\n      requestWave({ startX, startY });\n    }\n\n    const currentScale = Number(getComputedStyle(button).scale) || 1;\n    animationRef.current?.cancel();\n    // Animate scaling by 20%, and then returning to 1\n    animationRef.current = button.animate([\n      { scale: currentScale },\n      { scale: Math.min(currentScale * 1.2, MAX_SCALE), offset: 0.2 },\n      { scale: 1 },\n    ], {\n      duration: 500 * currentScale,\n      easing: 'ease-out',\n    });\n  }, [reaction, starsState?.balance, areStarsLoaded, chatId, messageId]);\n\n  const prevAmount = usePrevious(reaction.localAmount);\n\n  const {\n    shouldRender: shouldRenderPaidCounter,\n  } = useShowTransition({\n    isOpen: Boolean(reaction.localAmount),\n    ref: counterRef,\n    className: 'slow',\n    withShouldRender: true,\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isPaid && styles.paid,\n        isOutside && styles.outside,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      ref={ref}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      onClick={handleClick}\n    >\n      {reaction.reaction.type === 'paid' ? (\n        <>\n          <Sparkles preset=\"button\" />\n          <PaidReactionEmoji\n            className={styles.animatedEmoji}\n            containerId={containerId}\n            reaction={reaction.reaction}\n            size={REACTION_SIZE}\n            localAmount={reaction.localAmount}\n            observeIntersection={observeIntersection}\n          />\n          {shouldRenderPaidCounter && (\n            <AnimatedCounter\n              ref={counterRef}\n              text={`+${formatIntegerCompact(lang, reaction.localAmount || prevAmount!)}`}\n              className={styles.paidCounter}\n            />\n          )}\n        </>\n      ) : (\n        <ReactionAnimatedEmoji\n          className={styles.animatedEmoji}\n          containerId={containerId}\n          reaction={reaction.reaction}\n          size={REACTION_SIZE}\n          observeIntersection={observeIntersection}\n        />\n      )}\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter\n          text={formatIntegerCompact(lang, reaction.count + (reaction.localAmount || 0))}\n          className={styles.counter}\n        />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport type { ThreadId } from '../../../../types';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/keys/messageKey';\n\nimport useEffectOnce from '../../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: ThreadId;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\nconst PAID_SEND_DELAY = 5000;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  threadId,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n  isAccountFrozen,\n}) => {\n  const {\n    toggleReaction,\n    addLocalPaidReaction,\n    updateMiddleSearch,\n    performMiddleSearch,\n    openPremiumModal,\n    resetLocalPaidReactions,\n    showNotification,\n    openFrozenAccountModal,\n  } = getActions();\n  const lang = useOldLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n  const withServiceReactions = Boolean(message.areReactionsPossible && message.reactions);\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      updateMiddleSearch({ chatId: message.chatId, threadId, update: { savedTag: reaction } });\n      performMiddleSearch({ chatId: message.chatId, threadId });\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const paidLocalCount = useMemo(() => results.find((r) => r.reaction.type === 'paid')?.localAmount || 0, [results]);\n\n  const handlePaidClick = useLastCallback((count: number) => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n\n    addLocalPaidReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      count,\n    });\n  });\n\n  useEffect(() => {\n    if (!paidLocalCount) return;\n\n    showNotification({\n      localId: getMessageKey(message),\n      title: lang('StarsSentTitle'),\n      message: lang('StarsSentText', paidLocalCount),\n      actionText: lang('StarsSentUndo'),\n      cacheBreaker: paidLocalCount.toString(),\n      action: {\n        action: 'resetLocalPaidReactions',\n        payload: { chatId: message.chatId, messageId: message.id },\n      },\n      dismissAction: {\n        action: 'sendPaidReaction',\n        payload: { chatId: message.chatId, messageId: message.id },\n      },\n      duration: PAID_SEND_DELAY,\n      shouldShowTimer: true,\n      disableClickDismiss: true,\n      icon: 'star',\n    });\n  }, [lang, message, paidLocalCount]);\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  // Reset paid reactions on unmount\n  useEffectOnce(() => () => {\n    resetLocalPaidReactions({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(\n        'Reactions',\n        isOutside && 'is-outside',\n        withServiceReactions && 'is-service',\n      )}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction as ApiReaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            chatId={message.chatId}\n            messageId={message.id}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            isOutside={isOutside}\n            reaction={reaction}\n            onClick={handleClick}\n            onPaidClick={handlePaidClick}\n            observeIntersection={observeIntersection}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aInga6VW\",\"particle\":\"PZAuNVZH\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiEmojiStatusType, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { getStickerHashById } from '../../../global/helpers';\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatusType;\n  className?: string;\n  isLottie?: boolean;\n  particleSize?: number;\n  onEnded?: NoneToVoidFunction;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n  particleSize,\n  onEnded,\n}) => {\n  const stickerHash = getStickerHashById(reaction.documentId, true);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath(particleSize));\n  }, [particleSize]);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={buildStyle(Boolean(particleSize) && `--particle-size: ${particleSize}px`)}\n    >\n      {paths.map((path, i) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n              size={particleSize}\n              onAnimationEnd={i === 0 ? onEnded : undefined}\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n            draggable={false}\n            onAnimationEnd={i === 0 ? onEnded : undefined}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath(particleSize = 20) {\n  const x = (particleSize / 2 + Math.random() * particleSize * 3) * (Math.random() > 0.5 ? 1 : -1);\n  const y = particleSize + Math.random() * particleSize * 4;\n\n  return `M 0 0 C 0 0 ${x} ${-y - particleSize} ${x} ${y}`;\n}\n","import {\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerHashById, isSameReaction } from '../../../global/helpers';\nimport { selectPerformanceSettingsValue, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { roundToNearestEven } from '../../../util/math';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport useCustomEmoji from '../hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../AnimatedSticker';\nimport CustomEmoji from '../CustomEmoji';\nimport CustomEmojiEffect from './CustomEmojiEffect';\nimport ReactionStaticEmoji from './ReactionStaticEmoji';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  containerId: string;\n  reaction: ApiReaction;\n  className?: string;\n  size?: number;\n  effectSize?: number;\n  withEffectOnly?: boolean;\n  shouldPause?: boolean;\n  shouldLoop?: boolean;\n  loopLimit?: number;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  activeReactions?: ApiReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  withEffects?: boolean;\n};\n\nconst ICON_SIZE = 1.5 * REM;\nconst CENTER_ICON_MULTIPLIER = 1.9;\nconst EFFECT_SIZE = 6.5 * REM;\nconst CUSTOM_EMOJI_EFFECT_MULTIPLIER = 0.5;\nconst MIN_PARTICLE_SIZE = REM;\n\nconst ReactionAnimatedEmoji = ({\n  containerId,\n  reaction,\n  className,\n  size = ICON_SIZE,\n  effectSize = EFFECT_SIZE,\n  activeReactions,\n  availableReactions,\n  genericEffects,\n  withEffects,\n  withEffectOnly,\n  shouldPause,\n  shouldLoop,\n  loopLimit,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { stopActiveReaction } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const isCustom = reaction.type === 'custom';\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const { customEmoji } = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && getStickerHashById(centerIconId);\n  const mediaHashEffect = effectId && getStickerHashById(effectId);\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon);\n  const mediaDataEffect = useMedia(mediaHashEffect);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlayEffect = Boolean(\n    withEffects && activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect,\n  );\n  const shouldPlayCenter = isIntersecting && ((shouldPlayEffect && !withEffectOnly) || shouldLoop);\n  const {\n    shouldRender: shouldRenderEffect,\n    transitionClassNames: animationClassNames,\n  } = useShowTransitionDeprecated(shouldPlayEffect, undefined, true, 'slow');\n  const {\n    shouldRender: shouldRenderCenter,\n    transitionClassNames: centerAnimationClassNames,\n  } = useShowTransitionDeprecated(shouldPlayCenter, undefined, true, 'slow');\n\n  const handleEnded = useLastCallback(() => {\n    stopActiveReaction({ containerId, reaction });\n  });\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldShowStatic = !isCustom && (!shouldPlayCenter || !isAnimationLoaded);\n  const {\n    shouldRender: shouldRenderStatic,\n    transitionClassNames: staticClassNames,\n  } = useShowTransitionDeprecated(shouldShowStatic, undefined, true);\n\n  const rootClassName = buildClassName(\n    styles.root,\n    shouldRenderEffect && styles.animating,\n    withEffectOnly && styles.withEffectOnly,\n    className,\n  );\n\n  return (\n    <div className={rootClassName} ref={ref}>\n      {!withEffectOnly && shouldRenderStatic && (\n        <ReactionStaticEmoji\n          className={staticClassNames}\n          reaction={reaction}\n          availableReactions={availableReactions}\n          size={size}\n          observeIntersection={observeIntersection}\n        />\n      )}\n      {!withEffectOnly && isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          size={size}\n          noPlay={shouldPause}\n          noVideoOnMobile\n          loopLimit={loopLimit}\n          observeIntersectionForPlaying={observeIntersection}\n          forceAlways\n        />\n      )}\n      {shouldRenderCenter && !isCustom && (\n        <AnimatedSticker\n          key={`${centerIconId}-${size}`}\n          className={buildClassName(styles.animatedIcon, centerAnimationClassNames)}\n          size={roundToNearestEven(size * CENTER_ICON_MULTIPLIER)}\n          tgsUrl={mediaDataCenterIcon}\n          play={isIntersecting && !shouldPause}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n          onEnded={unmarkAnimationLoaded}\n          forceAlways\n        />\n      )}\n      {shouldRenderEffect && (\n        <>\n          <AnimatedSticker\n            key={`${effectId}-${effectSize}`}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={effectSize}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            onEnded={handleEnded}\n            forceAlways\n          />\n          {isCustom && !assignedEffectId && isIntersecting && (\n            <CustomEmojiEffect\n              reaction={reaction}\n              className={animationClassNames}\n              particleSize={Math.max(size * CUSTOM_EMOJI_EFFECT_MULTIPLIER, MIN_PARTICLE_SIZE)}\n              onEnded={handleEnded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { containerId }) => {\n    const { genericEmojiEffects, reactions } = global;\n    const { activeReactions } = selectTabState(global);\n\n    const withEffects = selectPerformanceSettingsValue(global, 'reactionEffects');\n\n    return {\n      activeReactions: activeReactions?.[containerId],\n      availableReactions: reactions.availableReactions,\n      genericEffects: genericEmojiEffects,\n      withEffects,\n    };\n  },\n)(ReactionAnimatedEmoji));\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { requestMeasure, requestMutation } from '../lib/fasterdom/fasterdom';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../util/browser/windowEnvironment';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useCanvasBlur(\n  dataUri?: string,\n  isDisabled = false,\n  withRaf?: boolean,\n  radius = RADIUS,\n  preferredWidth?: number,\n  preferredHeight?: number,\n) {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const isStarted = useRef();\n\n  useSyncEffect(() => {\n    if (!isDisabled) {\n      isStarted.current = false;\n    }\n  }, [dataUri, isDisabled]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n\n    if (!dataUri || !canvas || isDisabled || isStarted.current) {\n      return;\n    }\n\n    isStarted.current = true;\n\n    const img = new Image();\n\n    const processBlur = () => {\n      const width = preferredWidth || img.width;\n      const height = preferredHeight || img.height;\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${radius}px)`;\n        }\n\n        ctx.drawImage(img, -radius * 2, -radius * 2, width + radius * 4, height + radius * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, radius, ITERATIONS);\n        }\n      });\n    };\n\n    img.onload = () => {\n      if (withRaf) {\n        requestMeasure(processBlur);\n      } else {\n        processBlur();\n      }\n    };\n\n    img.src = dataUri;\n  }, [dataUri, isDisabled, preferredHeight, preferredWidth, radius, withRaf]);\n\n  return canvasRef;\n}\n","import { type TeactNode } from '../../../lib/teact/teact';\n\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport styles from './PickerItem.module.scss';\n\ntype OwnProps = {\n  title: TeactNode;\n  subtitle?: TeactNode;\n  avatarElement?: TeactNode;\n  inputElement?: TeactNode;\n  inputPosition?: 'start' | 'end';\n  disabled?: boolean;\n  inactive?: boolean;\n  ripple?: boolean;\n  className?: string;\n  titleClassName?: string;\n  subtitleClassName?: string;\n  style?: string;\n  onClick?: NoneToVoidFunction;\n  onDisabledClick?: NoneToVoidFunction;\n};\n\nconst PickerItem = ({\n  title,\n  subtitle,\n  avatarElement,\n  inputElement,\n  inputPosition = 'start',\n  disabled,\n  inactive,\n  ripple,\n  className,\n  titleClassName,\n  subtitleClassName,\n  style,\n  onClick,\n  onDisabledClick,\n}: OwnProps) => {\n  const lang = useOldLang();\n\n  const isClickable = !inactive && !disabled;\n  const handleClick = useLastCallback(() => {\n    if (inactive) return;\n\n    if (disabled) {\n      onDisabledClick?.();\n      return;\n    }\n\n    onClick?.();\n  });\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        subtitle && styles.multiline,\n        disabled && styles.disabled,\n        isClickable && styles.clickable,\n        avatarElement && styles.withAvatar,\n        className,\n      )}\n      onClick={handleClick}\n      style={style}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      role={isClickable ? 'button' : undefined}\n      tabIndex={isClickable ? 0 : undefined}\n    >\n      {!disabled && !inactive && ripple && <RippleEffect />}\n      {Boolean(inputElement) && (\n        <div className={buildClassName(\n          styles.input,\n          inputPosition === 'end' ? styles.endInput : styles.startInput,\n        )}\n        >\n          {inputElement}\n        </div>\n      )}\n      {Boolean(avatarElement) && (\n        <div className={styles.avatarElement}>\n          {avatarElement}\n        </div>\n      )}\n      <div className={buildClassName(styles.title, titleClassName)}>\n        {title}\n      </div>\n      {Boolean(subtitle) && (\n        <div className={buildClassName(styles.subtitle, subtitleClassName)}>\n          {subtitle}\n        </div>\n      )}\n      {!inputElement && IS_IOS && (\n        <div className={styles.separator} />\n      )}\n    </div>\n  );\n};\n\nexport default PickerItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OHkx_W75\",\"clickable\":\"VUSwo4t5\",\"separator\":\"P53DrbWA\",\"disabled\":\"tvZeVJPh\",\"title\":\"JSSC0N8V\",\"subtitle\":\"OYmzCSp2\",\"withAvatar\":\"dMT9byM6\",\"multiline\":\"neXqB2_A\",\"input\":\"kmjqObdP\",\"startInput\":\"F0Hv3EQm\",\"endInput\":\"iqGhSQGm\",\"avatarElement\":\"dnAaRPCo\"};","import { useEffect } from '../../../../lib/teact/teact';\n\nimport { SVG_NAMESPACE } from '../../../../config';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../../util/svgController';\n\nconst SVG_MAP = new Map<string, SvgFluidBackgroundFilter>();\n\nclass SvgFluidBackgroundFilter {\n  public filterId: string;\n\n  private referenceCount = 0;\n\n  constructor(public color: string) {\n    this.filterId = `fluid-background-filter-${color.slice(1)}`;\n\n    addSvgDefinition((\n      <filter color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"4\" result=\"blur\" />\n        <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 30 -15\" result=\"goo\" />\n        <feComposite in=\"SourceAlpha\" in2=\"goo\" operator=\"over\" result=\"outline\" />\n        <feFlood flood-color={color} result=\"color\" />\n        <feComposite in=\"color\" in2=\"outline\" operator=\"in\" />\n      </filter>\n    ), this.filterId);\n  }\n\n  public getFilterId() {\n    this.referenceCount += 1;\n    return this.filterId;\n  }\n\n  public removeReference() {\n    this.referenceCount -= 1;\n    if (this.referenceCount === 0) {\n      removeSvgDefinition(this.filterId);\n    }\n  }\n\n  public isUsed() {\n    return this.referenceCount > 0;\n  }\n}\n\nexport default function useFluidBackgroundFilter(color?: string, asValue?: boolean) {\n  useEffect(() => {\n    if (!color) return undefined;\n\n    return () => {\n      const colorFilter = SVG_MAP.get(color);\n      if (colorFilter) {\n        colorFilter.removeReference();\n        if (!colorFilter.isUsed()) {\n          SVG_MAP.delete(colorFilter.color);\n        }\n      }\n    };\n  }, [color]);\n\n  if (!color) return undefined;\n\n  if (SVG_MAP.has(color)) {\n    const svg = SVG_MAP.get(color)!;\n    return prepareStyle(svg.getFilterId(), asValue);\n  }\n\n  const svg = new SvgFluidBackgroundFilter(color);\n  SVG_MAP.set(color, svg);\n\n  return prepareStyle(svg.getFilterId(), asValue);\n}\n\nfunction prepareStyle(filterId: string, asValue?: boolean) {\n  if (asValue) {\n    return `url(#${filterId})`;\n  }\n\n  return `filter: url(#${filterId});`;\n}\n","import { getGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiSponsoredMessage } from '../../../api/types';\nimport type { TextPart, ThreadId } from '../../../types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport {\n  getMessageStatefulContent,\n  getMessageTextWithFallback,\n} from '../../../global/helpers';\nimport {\n  getMessageSummaryDescription,\n  getMessageSummaryEmoji,\n  getMessageSummaryText,\n  TRUNCATED_SUMMARY_LENGTH,\n} from '../../../global/helpers/messageSummary';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type LangFn } from '../../../util/localization';\nimport trimText from '../../../util/trimText';\nimport renderText from './renderText';\nimport { renderTextWithEntities } from './renderTextWithEntities';\n\nexport function renderMessageText({\n  message,\n  highlight,\n  emojiSize,\n  asPreview,\n  truncateLength,\n  isProtected,\n  forcePlayback,\n  shouldRenderAsHtml,\n  isForMediaViewer,\n  threadId,\n  maxTimestamp,\n}: {\n  message: ApiMessage | ApiSponsoredMessage;\n  highlight?: string;\n  emojiSize?: number;\n  asPreview?: boolean;\n  truncateLength?: number;\n  isProtected?: boolean;\n  forcePlayback?: boolean;\n  shouldRenderAsHtml?: boolean;\n  isForMediaViewer?: boolean;\n  threadId?: ThreadId;\n  maxTimestamp?: number;\n}) {\n  const { text, entities } = message.content.text || {};\n\n  if (!text) {\n    const contentNotSupportedText = getMessageTextWithFallback(getTranslationFn(), message)?.text;\n    return contentNotSupportedText ? [trimText(contentNotSupportedText, truncateLength)] : undefined;\n  }\n\n  const messageKey = getMessageKey(message);\n\n  return renderTextWithEntities({\n    text: trimText(text, truncateLength),\n    entities,\n    highlight,\n    emojiSize,\n    shouldRenderAsHtml,\n    containerId: `${isForMediaViewer ? 'mv-' : ''}${messageKey}`,\n    asPreview,\n    isProtected,\n    forcePlayback,\n    messageId: 'id' in message ? message.id : undefined,\n    chatId: message.chatId,\n    threadId,\n    maxTimestamp,\n  });\n}\n\n// TODO Use Message Summary component instead\nexport function renderMessageSummary(\n  lang: LangFn,\n  message: ApiMessage,\n  noEmoji = false,\n  highlight?: string,\n  truncateLength = TRUNCATED_SUMMARY_LENGTH,\n): TextPart[] {\n  const { entities } = message.content.text || {};\n\n  const global = getGlobal();\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const hasSpoilers = entities?.some((e) => e.type === ApiMessageEntityTypes.Spoiler);\n  const hasCustomEmoji = entities?.some((e) => e.type === ApiMessageEntityTypes.CustomEmoji);\n  if (!hasSpoilers && !hasCustomEmoji) {\n    const text = trimText(getMessageSummaryText(lang, message, statefulContent, noEmoji), truncateLength);\n\n    if (highlight) {\n      return renderText(text, ['emoji', 'highlight'], { highlight });\n    } else {\n      return renderText(text);\n    }\n  }\n\n  const emoji = !noEmoji && getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n\n  const text = renderMessageText({\n    message, highlight, asPreview: true, truncateLength,\n  });\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text);\n\n  return [\n    ...renderText(emojiWithSpace),\n    ...(Array.isArray(description) ? description : [description]),\n  ].filter(Boolean);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ApiMessage } from '../api/types';\n\nexport default function useEnsureMessage(\n  chatId: string,\n  messageId?: number,\n  message?: ApiMessage,\n  replyOriginForId?: number,\n  isDisabled?: boolean,\n) {\n  const { loadMessage } = getActions();\n\n  useEffect(() => {\n    if (isDisabled) return;\n    if (messageId && !message) {\n      loadMessage({ chatId, messageId, replyOriginForId: replyOriginForId! });\n    }\n  }, [isDisabled, chatId, message, messageId, replyOriginForId]);\n}\n","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { CustomPeerType, UniqueCustomPeer } from '../../../types';\n\nimport { DEBUG } from '../../../config';\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { getGroupStatus, getMainUsername, getUserStatus, isUserOnline } from '../../../global/helpers';\nimport { getPeerTypeKey, isApiPeerChat } from '../../../global/helpers/peers';\nimport { selectPeer, selectUserStatus } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport focusNoScroll from '../../../util/focusNoScroll';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Radio from '../../ui/Radio';\nimport Avatar from '../Avatar';\nimport FullNameTitle from '../FullNameTitle';\nimport Icon from '../icons/Icon';\nimport PeerChip from '../PeerChip';\nimport PickerItem from './PickerItem';\n\nimport styles from './PickerStyles.module.scss';\n\ntype SingleModeProps<CategoryType extends string> = {\n  allowMultiple?: false;\n  itemInputType?: 'radio';\n  selectedId?: string;\n  selectedIds?: never; // Help TS to throw an error if this is passed\n  selectedCategory?: CategoryType;\n  selectedCategories?: never;\n  onSelectedCategoryChange?: (category: CategoryType) => void;\n  onSelectedIdChange?: (id: string) => void;\n};\n\ntype MultipleModeProps<CategoryType extends string> = {\n  allowMultiple: true;\n  itemInputType: 'checkbox';\n  selectedId?: never;\n  selectedIds: string[];\n  lockedSelectedIds?: string[];\n  lockedUnselectedIds?: string[];\n  selectedCategory?: never;\n  selectedCategories?: CategoryType[];\n  onSelectedCategoriesChange?: (categories: CategoryType[]) => void;\n  onSelectedIdsChange?: (Ids: string[]) => void;\n};\n\ntype OwnProps<CategoryType extends string> = {\n  className?: string;\n  categories?: UniqueCustomPeer<CategoryType>[];\n  itemIds: string[];\n  lockedUnselectedSubtitle?: string;\n  filterValue?: string;\n  filterPlaceholder?: string;\n  categoryPlaceholderKey?: string;\n  notFoundText?: string;\n  searchInputId?: string;\n  itemClassName?: string;\n  isLoading?: boolean;\n  noScrollRestore?: boolean;\n  isSearchable?: boolean;\n  forceShowSelf?: boolean;\n  isViewOnly?: boolean;\n  withStatus?: boolean;\n  withPeerTypes?: boolean;\n  withPeerUsernames?: boolean;\n  withDefaultPadding?: boolean;\n  onFilterChange?: (value: string) => void;\n  onDisabledClick?: (id: string, isSelected: boolean) => void;\n  onLoadMore?: () => void;\n} & (SingleModeProps<CategoryType> | MultipleModeProps<CategoryType>);\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst ITEM_CLASS_NAME = 'PeerPickerItem';\n\nconst PeerPicker = <CategoryType extends string = CustomPeerType>({\n  className,\n  categories,\n  itemIds,\n  categoryPlaceholderKey,\n  filterValue,\n  filterPlaceholder,\n  notFoundText,\n  searchInputId,\n  itemClassName,\n  isLoading,\n  noScrollRestore,\n  isSearchable,\n  lockedUnselectedSubtitle,\n  forceShowSelf,\n  isViewOnly,\n  itemInputType,\n  withStatus,\n  withPeerTypes,\n  withPeerUsernames,\n  withDefaultPadding,\n  onFilterChange,\n  onDisabledClick,\n  onLoadMore,\n  ...optionalProps\n}: OwnProps<CategoryType>) => {\n  const lang = useOldLang();\n\n  const allowMultiple = optionalProps.allowMultiple;\n  const lockedSelectedIds = allowMultiple ? optionalProps.lockedSelectedIds : undefined;\n  const lockedUnselectedIds = allowMultiple ? optionalProps.lockedUnselectedIds : undefined;\n  const selectedCategories = useMemo(() => {\n    if (allowMultiple) {\n      return optionalProps.selectedCategories;\n    }\n\n    return optionalProps.selectedCategory ? [optionalProps.selectedCategory] : MEMO_EMPTY_ARRAY;\n  }, [allowMultiple, optionalProps.selectedCategory, optionalProps.selectedCategories]);\n\n  const selectedIds = useMemo(() => {\n    if (allowMultiple) {\n      return optionalProps.selectedIds;\n    }\n\n    return optionalProps.selectedId ? [optionalProps.selectedId] : MEMO_EMPTY_ARRAY;\n  }, [allowMultiple, optionalProps.selectedId, optionalProps.selectedIds]);\n\n  const inputRef = useRef<HTMLInputElement>();\n  const shouldMinimize = selectedIds.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    if (!isSearchable) return undefined;\n    requestMeasure(() => {\n      focusNoScroll(inputRef.current);\n    });\n  }, [isSearchable]);\n\n  const lockedSelectedIdsSet = useMemo(() => new Set(lockedSelectedIds), [lockedSelectedIds]);\n  const lockedUnselectedIdsSet = useMemo(() => new Set(lockedUnselectedIds), [lockedUnselectedIds]);\n\n  const unlockedSelectedIds = useMemo(() => {\n    return selectedIds.filter((id) => !lockedSelectedIdsSet.has(id));\n  }, [lockedSelectedIdsSet, selectedIds]);\n\n  const categoriesByType = useMemo(() => {\n    if (!categories) return {};\n    return buildCollectionByKey(categories, 'type');\n  }, [categories]);\n\n  const sortedItemIds = useMemo(() => {\n    if (filterValue) {\n      return itemIds;\n    }\n\n    const lockedSelectedBucket: string[] = [];\n    const unlockedBucket: string[] = [];\n    const lockedUnselectableBucket: string[] = [];\n\n    itemIds.forEach((id) => {\n      if (lockedSelectedIdsSet.has(id)) {\n        lockedSelectedBucket.push(id);\n      } else if (lockedUnselectedIdsSet.has(id)) {\n        lockedUnselectableBucket.push(id);\n      } else {\n        unlockedBucket.push(id);\n      }\n    });\n\n    return lockedSelectedBucket.concat(unlockedBucket, lockedUnselectableBucket);\n  }, [filterValue, itemIds, lockedSelectedIdsSet, lockedUnselectedIdsSet]);\n\n  const handleItemClick = useLastCallback((id: string) => {\n    if (lockedSelectedIdsSet.has(id)) {\n      onDisabledClick?.(id, true);\n      return;\n    }\n\n    if (lockedUnselectedIdsSet.has(id)) {\n      onDisabledClick?.(id, false);\n      return;\n    }\n\n    if (allowMultiple && categoriesByType[id]) {\n      const categoryType = categoriesByType[id].type;\n      const newSelectedCategories = selectedCategories?.slice() || [];\n      if (newSelectedCategories.includes(categoryType)) {\n        newSelectedCategories.splice(newSelectedCategories.indexOf(categoryType), 1);\n      } else {\n        newSelectedCategories.push(categoryType);\n      }\n      optionalProps.onSelectedCategoriesChange?.(newSelectedCategories);\n\n      return;\n    }\n\n    if (allowMultiple) {\n      const newSelectedIds = selectedIds.slice();\n      if (newSelectedIds.includes(id)) {\n        newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n      } else {\n        newSelectedIds.push(id);\n      }\n      optionalProps.onSelectedIdsChange?.(newSelectedIds);\n\n      return;\n    }\n\n    if (categoriesByType[id]) {\n      optionalProps.onSelectedCategoryChange?.(categoriesByType[id].type);\n      return;\n    }\n\n    optionalProps.onSelectedIdChange?.(id);\n  });\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange?.(value);\n  });\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    onLoadMore, sortedItemIds, Boolean(filterValue),\n  );\n\n  const renderItem = useCallback((id: string, isCategory?: boolean) => {\n    const global = getGlobal();\n    const category = isCategory ? categoriesByType[id] : undefined;\n    const peer = !isCategory ? selectPeer(global, id) : undefined;\n\n    const peerOrCategory = peer || category;\n    if (!peerOrCategory) {\n      if (DEBUG) {\n        return (\n          <div key={id}>\n            No peer or category with ID\n            {id}\n          </div>\n        );\n      }\n      return undefined;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? (peer.isSelf && !forceShowSelf) : undefined;\n\n    const isAlwaysUnselected = lockedUnselectedIdsSet.has(id);\n    const isAlwaysSelected = lockedSelectedIdsSet.has(id);\n    const isLocked = isAlwaysUnselected || isAlwaysSelected;\n    const isChecked = category ? selectedCategories?.includes(category.type) : selectedIds.includes(id);\n\n    function getInputElement() {\n      if (isLocked) return <Icon name=\"lock-badge\" />;\n      if (itemInputType === 'radio') {\n        return <Radio checked={isChecked} disabled={isLocked} onlyInput />;\n      }\n      if (itemInputType === 'checkbox') {\n        return <Checkbox checked={isChecked} disabled={isLocked} onlyInput />;\n      }\n      return undefined;\n    }\n\n    function getSubtitle() {\n      if (isAlwaysUnselected) return [lockedUnselectedSubtitle];\n      if (!peer) return undefined;\n\n      if (withPeerUsernames) {\n        const username = getMainUsername(peer);\n        if (username) {\n          return [`@${username}`];\n        }\n      }\n\n      if (withStatus) {\n        if (isApiPeerChat(peer)) {\n          return [getGroupStatus(lang, peer)];\n        }\n\n        const userStatus = selectUserStatus(global, peer.id);\n        return [\n          getUserStatus(lang, peer, userStatus),\n          buildClassName(isUserOnline(peer, userStatus, true) && styles.onlineStatus),\n        ];\n      }\n\n      if (withPeerTypes) {\n        const langKey = getPeerTypeKey(peer);\n        return langKey && [lang(langKey)];\n      }\n\n      return undefined;\n    }\n\n    const [subtitle, subtitleClassName] = getSubtitle() || [];\n\n    return (\n      <PickerItem\n        key={id}\n        className={buildClassName(ITEM_CLASS_NAME, itemClassName)}\n        title={<FullNameTitle peer={peerOrCategory} />}\n        avatarElement={(\n          <Avatar\n            peer={peer || category}\n            isSavedMessages={isSelf}\n            size=\"medium\"\n          />\n        )}\n        subtitle={subtitle}\n        subtitleClassName={subtitleClassName}\n        disabled={isLocked}\n        inactive={isViewOnly}\n        ripple\n        inputElement={getInputElement()}\n        inputPosition=\"end\"\n\n        onClick={() => handleItemClick(id)}\n\n        onDisabledClick={onDisabledClick && (() => onDisabledClick(id, isAlwaysSelected))}\n      />\n    );\n  }, [\n    categoriesByType, forceShowSelf, isViewOnly, itemClassName, itemInputType, lang, lockedSelectedIdsSet,\n    lockedUnselectedIdsSet, lockedUnselectedSubtitle, onDisabledClick, selectedCategories, selectedIds,\n    withPeerTypes, withStatus, withPeerUsernames,\n  ]);\n\n  const beforeChildren = useMemo(() => {\n    if (!categories?.length) return undefined;\n    return (\n      <div key=\"categories\">\n        {categoryPlaceholderKey && <div className={styles.pickerCategoryTitle}>{lang(categoryPlaceholderKey)}</div>}\n        {categories?.map((category) => renderItem(category.type, true))}\n        <div className={styles.pickerCategoryTitle}>{lang('FilterChats')}</div>\n      </div>\n    );\n  }, [categories, categoryPlaceholderKey, lang, renderItem]);\n\n  return (\n    <div className={buildClassName(styles.container, className)}>\n      {isSearchable && (\n        <div className={buildClassName(styles.header, 'custom-scroll')} dir={lang.isRtl ? 'rtl' : undefined}>\n          {selectedCategories?.map((category) => (\n            <PeerChip\n              className={styles.peerChip}\n              customPeer={categoriesByType[category]}\n              onClick={handleItemClick}\n              clickArg={category}\n              canClose\n            />\n          ))}\n          {lockedSelectedIds?.map((id, i) => (\n            <PeerChip\n              className={styles.peerChip}\n              peerId={id}\n              isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n              forceShowSelf={forceShowSelf}\n              onClick={handleItemClick}\n              clickArg={id}\n            />\n          ))}\n          {unlockedSelectedIds.map((id, i) => (\n            <PeerChip\n              className={styles.peerChip}\n              peerId={id}\n              isMinimized={\n                shouldMinimize && i + (lockedSelectedIds?.length || 0) < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT\n              }\n              canClose\n              onClick={handleItemClick}\n              clickArg={id}\n            />\n          ))}\n          <InputText\n            id={searchInputId}\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={filterPlaceholder || lang('SelectChat')}\n          />\n        </div>\n      )}\n\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          className={buildClassName(styles.pickerList, withDefaultPadding && styles.padded, 'custom-scroll')}\n          items={viewportIds}\n          itemSelector={`.${ITEM_CLASS_NAME}`}\n          beforeChildren={beforeChildren}\n          onLoadMore={getMore}\n          noScrollRestore={noScrollRestore}\n        >\n          {viewportIds.map((id) => renderItem(id))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportIds && !viewportIds.length ? (\n        <p className={styles.noResults}>{notFoundText || 'Sorry, nothing found.'}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PeerPicker);\n","import useDebouncedCallback from './useDebouncedCallback';\n\nexport default function useRunDebounced(ms: number, noFirst?: boolean, noLast?: boolean, deps: any = []) {\n  return useDebouncedCallback((cb: NoneToVoidFunction) => {\n    cb();\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, deps, ms, noFirst, noLast);\n}\n","import { getGlobal } from '../global';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport { selectCanAnimateInterface } from '../global/selectors';\nimport { animate } from './animation';\n\nconst DEFAULT_DURATION = 300;\n\nconst stopById = new Map<string, VoidFunction>();\n\nexport default function animateHorizontalScroll(container: HTMLElement, left: number, duration = DEFAULT_DURATION) {\n  if (!selectCanAnimateInterface(getGlobal())) {\n    duration = 0;\n  }\n\n  const isRtl = container.getAttribute('dir') === 'rtl';\n  const {\n    scrollLeft, offsetWidth: containerWidth, scrollWidth, dataset: { scrollId },\n  } = container;\n\n  let path = left - scrollLeft;\n\n  if (path < 0) {\n    const remainingPath = -scrollLeft * (isRtl ? -1 : 1);\n    path = Math.max(path, remainingPath);\n  } else if (path > 0) {\n    const remainingPath = scrollWidth - (scrollLeft + containerWidth);\n    path = Math.min(path, remainingPath);\n  }\n\n  if (path === 0) {\n    return Promise.resolve();\n  }\n\n  if (scrollId && stopById.has(scrollId)) {\n    stopById.get(scrollId)!();\n  }\n\n  const target = scrollLeft + path;\n\n  return new Promise<void>((resolve) => {\n    requestMutation(() => {\n      if (duration === 0) {\n        container.scrollLeft = target;\n        resolve();\n        return;\n      }\n\n      let isStopped = false;\n      const id = Math.random().toString();\n      container.dataset.scrollId = id;\n      stopById.set(id, () => {\n        isStopped = true;\n      });\n\n      container.style.scrollSnapType = 'none';\n\n      const startAt = Date.now();\n\n      function cleanup() {\n        container.style.scrollSnapType = '';\n        delete container.dataset.scrollId;\n        stopById.delete(id);\n      }\n\n      animate(() => {\n        if (isStopped) {\n          cleanup();\n          return false;\n        }\n\n        const t = Math.min((Date.now() - startAt) / duration, 1);\n\n        const currentPath = path * (1 - transition(t));\n        container.scrollLeft = Math.round(target - currentPath);\n\n        if (t >= 1) {\n          cleanup();\n          resolve();\n        }\n\n        return t < 1;\n      }, requestMutation);\n    });\n  });\n}\n\nfunction transition(t: number) {\n  return 1 - ((1 - t) ** 3.5);\n}\n","import type { UniqueCustomPeer } from '../../types';\n\nexport const CUSTOM_PEER_PREMIUM: UniqueCustomPeer = {\n  isCustomPeer: true,\n  type: 'premium',\n  titleKey: 'PrivacyPremium',\n  subtitleKey: 'PrivacyPremiumText',\n  avatarIcon: 'star',\n  isAvatarSquare: true,\n  withPremiumGradient: true,\n};\n\nexport const CUSTOM_PEER_INCLUDED_CHAT_TYPES: UniqueCustomPeer[] = [\n  {\n    isCustomPeer: true,\n    type: 'contacts',\n    titleKey: 'FilterContacts',\n    avatarIcon: 'user',\n    isAvatarSquare: true,\n    peerColorId: 5,\n  },\n  {\n    isCustomPeer: true,\n    type: 'nonContacts',\n    titleKey: 'FilterNonContacts',\n    avatarIcon: 'non-contacts',\n    isAvatarSquare: true,\n    peerColorId: 4,\n  },\n  {\n    isCustomPeer: true,\n    type: 'groups',\n    titleKey: 'FilterGroups',\n    avatarIcon: 'group',\n    isAvatarSquare: true,\n    peerColorId: 3,\n  },\n  {\n    isCustomPeer: true,\n    type: 'channels',\n    titleKey: 'FilterChannels',\n    avatarIcon: 'channel',\n    isAvatarSquare: true,\n    peerColorId: 1,\n  },\n  {\n    isCustomPeer: true,\n    type: 'bots',\n    titleKey: 'FilterBots',\n    avatarIcon: 'bots',\n    isAvatarSquare: true,\n    peerColorId: 6,\n  },\n];\n\nexport const CUSTOM_PEER_EXCLUDED_CHAT_TYPES: UniqueCustomPeer[] = [\n  {\n    isCustomPeer: true,\n    type: 'excludeMuted',\n    titleKey: 'FilterMuted',\n    avatarIcon: 'mute',\n    isAvatarSquare: true,\n    peerColorId: 6,\n  },\n  {\n    isCustomPeer: true,\n    type: 'excludeRead',\n    titleKey: 'FilterRead',\n    avatarIcon: 'readchats',\n    isAvatarSquare: true,\n    peerColorId: 4,\n  },\n  {\n    isCustomPeer: true,\n    type: 'excludeArchived',\n    titleKey: 'FilterArchived',\n    avatarIcon: 'archive',\n    isAvatarSquare: true,\n    peerColorId: 5,\n  },\n];\n\nexport const CUSTOM_PEER_HIDDEN: UniqueCustomPeer<'hidden'> = {\n  isCustomPeer: true,\n  type: 'hidden',\n  titleKey: 'StarsTransactionHidden',\n  avatarIcon: 'author-hidden',\n  peerColorId: 4,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xCi2f0YH\",\"preview\":\"lM2usrZU\"};","import { memo } from '../../lib/teact/teact';\n\nimport type { OwnProps as AnimatedIconProps } from './AnimatedIcon';\n\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport AnimatedIcon from './AnimatedIcon';\n\nimport styles from './AnimatedIconWithPreview.module.scss';\n\ntype OwnProps =\n  Partial<AnimatedIconProps>\n  & { previewUrl?: string; thumbDataUri?: string; noPreviewTransition?: boolean };\n\nconst ANIMATION_DURATION = 300;\n\nconst loadedPreviewUrls = new Set();\n\nfunction AnimatedIconWithPreview(props: OwnProps) {\n  const {\n    previewUrl, thumbDataUri, className, ...otherProps\n  } = props;\n\n  const [isThumbOpen, , unmarkThumbOpen] = useFlag(Boolean(thumbDataUri));\n  const thumbClassNames = useMediaTransitionDeprecated(isThumbOpen);\n\n  const [isPreviewOpen, markPreviewOpen, unmarkPreviewOpen] = useFlag(loadedPreviewUrls.has(previewUrl));\n  const previewClassNames = useMediaTransitionDeprecated(isPreviewOpen);\n\n  const [isAnimationReady, markAnimationReady] = useFlag(false);\n\n  const handlePreviewLoad = useLastCallback(() => {\n    markPreviewOpen();\n    loadedPreviewUrls.add(previewUrl);\n  });\n\n  const handleAnimationReady = useLastCallback(() => {\n    unmarkThumbOpen();\n    unmarkPreviewOpen();\n    setTimeout(markAnimationReady, ANIMATION_DURATION);\n  });\n\n  const { size } = props;\n\n  return (\n    <div\n      className={buildClassName(className, styles.root)}\n      style={buildStyle(size !== undefined && `width: ${size}px; height: ${size}px;`)}\n    >\n      {thumbDataUri && !isAnimationReady && (\n        // eslint-disable-next-line jsx-a11y/alt-text\n        <img src={thumbDataUri} className={buildClassName(styles.preview, thumbClassNames)} draggable={false} />\n      )}\n      {previewUrl && !isAnimationReady && (\n        // eslint-disable-next-line jsx-a11y/alt-text\n        <img\n          src={previewUrl}\n          className={buildClassName(styles.preview, previewClassNames)}\n          draggable={false}\n          onLoad={handlePreviewLoad}\n        />\n      )}\n      <AnimatedIcon {...otherProps} onLoad={handleAnimationReady} />\n    </div>\n  );\n}\n\nexport default memo(AnimatedIconWithPreview);\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","import type {\n  ApiFormattedText,\n  ApiStarGift,\n  ApiStarGiftAttribute,\n  ApiStarGiftAttributeBackdrop,\n  ApiStarGiftAttributeModel,\n  ApiStarGiftAttributeOriginalDetails,\n  ApiStarGiftAttributePattern,\n  ApiSticker,\n} from '../../../api/types';\n\nexport type GiftAttributes = {\n  model?: ApiStarGiftAttributeModel;\n  originalDetails?: ApiStarGiftAttributeOriginalDetails;\n  pattern?: ApiStarGiftAttributePattern;\n  backdrop?: ApiStarGiftAttributeBackdrop;\n};\n\nexport function getStickerFromGift(gift: ApiStarGift): ApiSticker | undefined {\n  if (gift.type === 'starGift') {\n    return gift.sticker;\n  }\n\n  return gift.attributes.find((attr): attr is ApiStarGiftAttributeModel => attr.type === 'model')?.sticker;\n}\n\nexport function getTotalGiftAvailability(gift: ApiStarGift): number | undefined {\n  if (gift.type === 'starGift') {\n    return gift.availabilityTotal;\n  }\n\n  return gift.totalCount;\n}\n\nexport function getGiftMessage(gift: ApiStarGift): ApiFormattedText | undefined {\n  if (gift.type !== 'starGiftUnique') return undefined;\n\n  return gift.attributes.find((attr): attr is ApiStarGiftAttributeOriginalDetails => attr.type === 'model')?.message;\n}\n\nexport function getGiftAttributes(gift: ApiStarGift): GiftAttributes | undefined {\n  if (gift.type !== 'starGiftUnique') return undefined;\n\n  return getGiftAttributesFromList(gift.attributes);\n}\n\nexport function getGiftAttributesFromList(attributes: ApiStarGiftAttribute[]) {\n  const model = attributes.find((attr): attr is ApiStarGiftAttributeModel => attr.type === 'model');\n  const backdrop = attributes.find((attr): attr is ApiStarGiftAttributeBackdrop => attr.type === 'backdrop');\n  const pattern = attributes.find((attr): attr is ApiStarGiftAttributePattern => attr.type === 'pattern');\n  const originalDetails = attributes.find((attr): attr is ApiStarGiftAttributeOriginalDetails => (\n    attr.type === 'originalDetails'\n  ));\n\n  return {\n    model,\n    originalDetails,\n    pattern,\n    backdrop,\n  };\n}\n","import type { ElementRef, FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getGlobal } from '../../global';\n\nimport { selectCanAnimateInterface } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { throttleWithTickEnd } from '../../util/schedulers';\n\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport styles from './AnimatedCounter.module.scss';\n\ntype OwnProps = {\n  text: string;\n  className?: string;\n  isDisabled?: boolean;\n  ref?: ElementRef<HTMLSpanElement>;\n};\n\nconst ANIMATION_TIME = 200;\nconst MAX_SIMULTANEOUS_ANIMATIONS = 10;\n\nlet scheduledAnimationsCounter = 0;\n\nconst resetCounterOnTickEnd = throttleWithTickEnd(() => {\n  scheduledAnimationsCounter = 0;\n});\n\nconst AnimatedCounter: FC<OwnProps> = ({\n  text,\n  className,\n  isDisabled,\n  ref,\n}) => {\n  const { isRtl } = useLang();\n\n  const prevText = usePreviousDeprecated(text);\n  const forceUpdate = useForceUpdate();\n\n  const shouldAnimate = scheduleAnimation(\n    !isDisabled && selectCanAnimateInterface(getGlobal()) && prevText !== undefined && prevText !== text,\n  );\n\n  const characters = useMemo(() => {\n    return shouldAnimate ? renderAnimatedCharacters(text, prevText) : text;\n  }, [shouldAnimate, prevText, text]);\n\n  useEffect(() => {\n    if (!shouldAnimate) return undefined;\n\n    const timeoutId = window.setTimeout(() => {\n      forceUpdate();\n    }, ANIMATION_TIME);\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [shouldAnimate, text]);\n\n  return (\n    <span ref={ref} className={buildClassName(className, !isDisabled && styles.root)} dir={isRtl ? 'rtl' : undefined}>\n      {characters}\n    </span>\n  );\n};\n\nexport default memo(AnimatedCounter);\n\nfunction scheduleAnimation(condition: boolean) {\n  if (!condition || scheduledAnimationsCounter >= MAX_SIMULTANEOUS_ANIMATIONS) return false;\n\n  if (scheduledAnimationsCounter === 0) {\n    resetCounterOnTickEnd();\n  }\n\n  scheduledAnimationsCounter++;\n\n  return true;\n}\n\nfunction renderAnimatedCharacters(text: string, prevText?: string) {\n  const elements: React.ReactNode[] = [];\n  const textLength = text.length;\n  const prevTextLength = prevText?.length ?? 0;\n\n  for (let i = 0; i <= textLength; i++) {\n    const charIndex = textLength - i;\n    const prevTextCharIndex = prevTextLength - i;\n\n    if (prevText && prevTextCharIndex >= 0 && text[charIndex] !== prevText[prevTextCharIndex]) {\n      elements.unshift(\n        <div className={styles.characterContainer}>\n          <div className={styles.character}>{text[charIndex] ?? ''}</div>\n          <div className={styles.characterOld}>{prevText[prevTextCharIndex]}</div>\n          <div className={styles.characterNew}>{text[charIndex] ?? ''}</div>\n        </div>,\n      );\n    } else {\n      elements.unshift(<span>{text[charIndex] ?? ''}</span>);\n    }\n  }\n\n  return elements;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tgKbsVmz\",\"character-container\":\"IYTzbS8o\",\"characterContainer\":\"IYTzbS8o\",\"character\":\"Jw1oQFdk\",\"character-old\":\"TZfEz3sc\",\"characterOld\":\"TZfEz3sc\",\"character-disappear\":\"ORlhAlOv\",\"characterDisappear\":\"ORlhAlOv\",\"character-new\":\"Y9ied8_t\",\"characterNew\":\"Y9ied8_t\",\"character-appear\":\"s_g6bwRZ\",\"characterAppear\":\"s_g6bwRZ\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gXO57D98\",\"chosen\":\"VXSJn0Sm\",\"paid\":\"N3lcrsh8\",\"outside\":\"Hqw10FGl\",\"animated-emoji\":\"lFjoRm_p\",\"animatedEmoji\":\"lFjoRm_p\",\"tag\":\"Dr889Kzc\",\"tail\":\"cUfY1b26\",\"is-safari\":\"rxxUijuG\",\"isSafari\":\"rxxUijuG\",\"tail-fill\":\"y591o4fN\",\"tailFill\":\"y591o4fN\",\"tag-text\":\"ly7cruxF\",\"tagText\":\"ly7cruxF\",\"counter\":\"P2FqNJAi\",\"disabled\":\"NRtGofbf\",\"paidCounter\":\"CW4UO1n3\"};","import type { FC } from '../../lib/teact/teact';\r\nimport React, { memo } from '../../lib/teact/teact';\r\nimport buildClassName from '../../util/buildClassName';\r\n\r\nimport './CustomUnreadBadge.scss';\r\n\r\ntype OwnProps = {\r\n  count: number;\r\n  className?: string;\r\n  maxCount?: number;\r\n  isInactive?: boolean;\r\n};\r\n\r\nconst UnreadBadge: FC<OwnProps> = ({ count, className, maxCount = 99, isInactive = false }) => {\r\n  if (count === 0) return null;\r\n\r\n  const displayCount = count > maxCount ? `${maxCount}+` : count.toString();\r\n\r\n  return (\r\n    <span className={buildClassName('UnreadBadge', isInactive && 'inactive', className)}>\r\n      {displayCount}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default memo(UnreadBadge);\r\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n\n  return enableScrolling;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import { useEffect } from '../lib/teact/teact';\n\nimport {\n  addChatsCountCallback,\n  addOrderedIdsCallback, addUnreadChatsByFolderIdCallback,\n  addUnreadCountersCallback,\n  getChatsCount,\n  getOrderedIds, getUnreadChatsByFolderId,\n  getUnreadCounters,\n  getAdjustedUnreadCounters,\n} from '../util/folderManager';\nimport useForceUpdate from './useForceUpdate';\n\nexport function useFolderManagerForOrderedIds(folderId: number) {\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => addOrderedIdsCallback(folderId, forceUpdate), [folderId, forceUpdate]);\n\n  return getOrderedIds(folderId);\n}\n\nexport function useFolderManagerForUnreadCounters() {\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => addUnreadCountersCallback(forceUpdate), [forceUpdate]);\n\n  return getUnreadCounters();\n}\n\nexport function useAdjustedUnreadCounters(\n  excludeOtherWorkspaces: boolean,\n  allWorkspaces: Array<{ foldersIds: number[] }>,\n) {\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => addUnreadCountersCallback(forceUpdate), [forceUpdate]);\n\n  return getAdjustedUnreadCounters(excludeOtherWorkspaces, allWorkspaces);\n}\n\nexport function useFolderManagerForChatsCount() {\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => addChatsCountCallback(forceUpdate), [forceUpdate]);\n\n  return getChatsCount();\n}\n\nexport function useFolderManagerForUnreadChatsByFolder() {\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => addUnreadChatsByFolderIdCallback(forceUpdate), [forceUpdate]);\n\n  return getUnreadChatsByFolderId();\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"uGUjDZKl\",\"custom\":\"oc1hpMwv\",\"visible\":\"kqcWe4tf\",\"custom-animated\":\"sx6RTuAU\",\"customAnimated\":\"sx6RTuAU\",\"custom-fade-in\":\"_p445E1b\",\"customFadeIn\":\"_p445E1b\",\"chosen\":\"M62HGuIV\",\"static-icon\":\"MZ2tH980\",\"staticIcon\":\"MZ2tH980\",\"lock\":\"WMpEr5XQ\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../../lib/teact/teact';\n\nimport type { ApiReaction, ApiReactionCustomEmoji, ApiReactionPaid } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useContextMenuHandlers from '../../../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport CustomEmoji from '../../../common/CustomEmoji';\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from './ReactionSelectorReaction.module.scss';\n\nconst REACTION_SIZE = 2 * REM;\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiReactionPaid;\n  chosen?: boolean;\n  isReady?: boolean;\n  noAppearAnimation?: boolean;\n  style?: string;\n  isLocked?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  onSendPaidReaction?: NoneToVoidFunction;\n  onShowPaidReactionModal?: NoneToVoidFunction;\n};\n\nconst ReactionSelectorCustomReaction: FC<OwnProps> = ({\n  reaction,\n  chosen,\n  isReady,\n  noAppearAnimation,\n  style,\n  isLocked,\n  onToggleReaction,\n  onSendPaidReaction,\n  onShowPaidReactionModal,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const handleClick = useLastCallback(() => {\n    if (reaction.type === 'paid') {\n      onSendPaidReaction?.();\n      return;\n    }\n\n    onToggleReaction(reaction);\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onShowPaidReactionModal?.();\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, onShowPaidReactionModal, handleContextMenuHide, isContextMenuOpen]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        styles.custom,\n        chosen && reaction.type !== 'paid' && styles.chosen,\n        !noAppearAnimation && isReady && styles.customAnimated,\n        noAppearAnimation && styles.visible,\n      )}\n      ref={ref}\n      style={style}\n      onClick={handleClick}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      {reaction.type === 'paid' ? (\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.StarReaction}\n          size={REACTION_SIZE}\n          noLoop={false}\n        />\n      ) : (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          size={REACTION_SIZE}\n        />\n      )}\n      {isLocked && (\n        <Icon className={styles.lock} name=\"lock-badge\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorCustomReaction);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReaction } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from './ReactionSelectorReaction.module.scss';\n\nconst REACTION_SIZE = 2 * REM;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  isReady?: boolean;\n  chosen?: boolean;\n  noAppearAnimation?: boolean;\n  isLocked?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n};\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction,\n  isReady,\n  noAppearAnimation,\n  chosen,\n  isLocked,\n  onToggleReaction,\n}) => {\n  const mediaAppearData = useMedia(`sticker${reaction.appearAnimation?.id}`, !isReady || noAppearAnimation);\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady || noAppearAnimation);\n  const staticIconData = useMedia(`document${reaction.staticIcon?.id}`, !noAppearAnimation);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const [isFirstPlay, , unmarkIsFirstPlay] = useFlag(true);\n  const [isActivated, activate, deactivate] = useFlag();\n\n  function handleClick() {\n    onToggleReaction(reaction.reaction);\n  }\n\n  return (\n    <div\n      className={buildClassName(styles.root, chosen && styles.chosen)}\n      onClick={handleClick}\n      onMouseEnter={isReady && !isFirstPlay ? activate : undefined}\n    >\n      {noAppearAnimation && (\n        <img\n          className={styles.staticIcon}\n          src={staticIconData}\n          alt={reaction.reaction.emoticon}\n          draggable={false}\n        />\n      )}\n      {!isAnimationLoaded && !noAppearAnimation && (\n        <AnimatedSticker\n          key={reaction.appearAnimation?.id}\n          tgsUrl={mediaAppearData}\n          play={isFirstPlay}\n          noLoop\n          size={REACTION_SIZE}\n          onEnded={unmarkIsFirstPlay}\n          forceAlways\n        />\n      )}\n      {!isFirstPlay && !noAppearAnimation && (\n        <AnimatedSticker\n          key={reaction.selectAnimation?.id}\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n          forceAlways\n        />\n      )}\n      {isLocked && (\n        <Icon className={styles.lock} name=\"lock-badge\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChatReactions,\n  ApiReaction,\n  ApiReactionCount,\n  ApiReactionCustomEmoji,\n  ApiReactionPaid,\n} from '../../../../api/types';\nimport type { IAnchorPosition } from '../../../../types';\n\nimport {\n  canSendReaction, getReactionKey, isSameReaction, sortReactions,\n} from '../../../../global/helpers';\nimport buildClassName, { createClassNameBuilder } from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Link from '../../../ui/Link';\nimport ReactionSelectorCustomReaction from './ReactionSelectorCustomReaction';\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype RenderableReactions = (ApiAvailableReaction | ApiReactionCustomEmoji | ApiReactionPaid)[];\n\ntype OwnProps = {\n  enabledReactions?: ApiChatReactions;\n  isPrivate?: boolean;\n  topReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  effectReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  currentReactions?: ApiReactionCount[];\n  reactionsLimit?: number;\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n  className?: string;\n  isInSavedMessages?: boolean;\n  isInStoryViewer?: boolean;\n  isForEffects?: boolean;\n  isWithPaidReaction?: boolean;\n  onClose?: NoneToVoidFunction;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  onSendPaidReaction?: NoneToVoidFunction;\n  onShowPaidReactionModal?: NoneToVoidFunction;\n  onShowMore: (position: IAnchorPosition) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\nconst REACTIONS_AMOUNT = 7;\nconst FADE_IN_DELAY = 20;\n\nconst ReactionSelector: FC<OwnProps> = ({\n  allAvailableReactions,\n  topReactions,\n  defaultTagReactions,\n  enabledReactions,\n  currentReactions,\n  reactionsLimit,\n  isPrivate,\n  isReady,\n  canPlayAnimatedEmojis,\n  className,\n  isCurrentUserPremium,\n  isInSavedMessages,\n  isInStoryViewer,\n  isForEffects,\n  effectReactions,\n  isWithPaidReaction,\n  onClose,\n  onToggleReaction,\n  onSendPaidReaction,\n  onShowPaidReactionModal,\n  onShowMore,\n}) => {\n  const { openPremiumModal } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n\n  const areReactionsLocked = isInSavedMessages && !isCurrentUserPremium && !isInStoryViewer;\n\n  const shouldUseCurrentReactions = Boolean(reactionsLimit\n    && currentReactions && currentReactions.length >= reactionsLimit);\n\n  const availableReactions = useMemo(() => {\n    const reactions = (() => {\n      if (shouldUseCurrentReactions) return currentReactions?.map((reaction) => reaction.reaction);\n      if (isForEffects) return effectReactions;\n      if (isInSavedMessages) return defaultTagReactions;\n      if (enabledReactions?.type === 'some') return enabledReactions.allowed;\n      return allAvailableReactions?.map((reaction) => reaction.reaction);\n    })();\n\n    const filteredReactions: RenderableReactions = reactions?.map((reaction) => {\n      const isCustomReaction = reaction.type === 'custom';\n      const availableReaction = allAvailableReactions?.find((r) => isSameReaction(r.reaction, reaction));\n\n      if (isForEffects) return availableReaction;\n\n      if ((!isCustomReaction && !availableReaction) || availableReaction?.isInactive) return undefined;\n\n      if (!isPrivate && !shouldUseCurrentReactions\n        && (!enabledReactions || !canSendReaction(reaction, enabledReactions))) {\n        return undefined;\n      }\n\n      return isCustomReaction ? reaction : availableReaction;\n    }).filter(Boolean) || [];\n\n    const sortedReactions = sortReactions(filteredReactions, topReactions);\n    if (isWithPaidReaction) {\n      sortedReactions.unshift({ type: 'paid' });\n    }\n    return sortedReactions;\n  }, [\n    allAvailableReactions, currentReactions, defaultTagReactions, enabledReactions, isInSavedMessages, isPrivate,\n    topReactions, isForEffects, effectReactions, shouldUseCurrentReactions, isWithPaidReaction,\n  ]);\n\n  const reactionsToRender = useMemo(() => {\n    // Component can fit one more if we do not need show more button\n    return availableReactions.length === REACTIONS_AMOUNT + 1\n      ? availableReactions\n      : availableReactions.slice(0, REACTIONS_AMOUNT);\n  }, [availableReactions]);\n  const withMoreButton = reactionsToRender.length < availableReactions.length;\n\n  const userReactionIndexes = useMemo(() => {\n    const chosenReactions = currentReactions?.filter(({ chosenOrder }) => chosenOrder !== undefined) || [];\n    return new Set(chosenReactions.map(({ reaction }) => (\n      reactionsToRender.findIndex((r) => r && isSameReaction('reaction' in r ? r.reaction : r, reaction))\n    )));\n  }, [currentReactions, reactionsToRender]);\n\n  const handleShowMoreClick = useLastCallback(() => {\n    const bound = ref.current?.getBoundingClientRect() || { x: 0, y: 0 };\n    onShowMore({\n      x: bound.x,\n      y: bound.y,\n    });\n  });\n\n  const handleOpenPremiumModal = useLastCallback(() => {\n    onClose?.();\n    openPremiumModal({\n      initialSection: 'saved_tags',\n    });\n  });\n\n  const hintText = useMemo(() => {\n    if (isInSavedMessages) {\n      if (!isCurrentUserPremium) {\n        const text = lang('lng_subscribe_tag_about');\n        const parts = text.split('{link}');\n        return (\n          <span>\n            {parts[0]}\n            <Link isPrimary onClick={handleOpenPremiumModal}>\n              {lang('lng_subscribe_tag_link')}\n            </Link>\n            {parts[1]}\n          </span>\n        );\n      }\n\n      return lang('SavedTagReactionsHint2');\n    }\n\n    if (isInStoryViewer) {\n      return lang('StoryReactionsHint');\n    }\n\n    if (isForEffects) {\n      return lang('AddEffectMessageHint');\n    }\n\n    return undefined;\n  }, [isCurrentUserPremium, isInSavedMessages, isInStoryViewer, lang, isForEffects]);\n\n  if (!reactionsToRender.length) return undefined;\n\n  return (\n    <div className={buildClassName(cn('&'), className)} ref={ref}>\n      <div className={cn('bubble-small', lang.isRtl && 'isRtl')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('bubble-big', lang.isRtl && 'isRtl')} />\n        <div className={cn('items')}>\n          {hintText && <div className={cn('hint')}>{hintText}</div>}\n          <div className={cn('reactions')} dir={lang.isRtl ? 'rtl' : undefined}>\n            {reactionsToRender.map((reaction, i) => (\n              'reaction' in reaction ? (\n                <ReactionSelectorReaction\n                  key={getReactionKey(reaction.reaction)}\n                  isReady={isReady}\n                  onToggleReaction={onToggleReaction}\n                  reaction={reaction}\n                  noAppearAnimation={!canPlayAnimatedEmojis}\n                  chosen={userReactionIndexes.has(i)}\n                  isLocked={areReactionsLocked}\n                />\n              ) : (\n                <ReactionSelectorCustomReaction\n                  key={getReactionKey(reaction)}\n                  isReady={isReady}\n                  onToggleReaction={onToggleReaction}\n                  onSendPaidReaction={onSendPaidReaction}\n                  onShowPaidReactionModal={onShowPaidReactionModal}\n                  reaction={reaction}\n                  noAppearAnimation={!canPlayAnimatedEmojis}\n                  chosen={userReactionIndexes.has(i)}\n                  isLocked={areReactionsLocked}\n                  style={`--_animation-delay: ${(REACTIONS_AMOUNT - i) * FADE_IN_DELAY}ms`}\n                />\n              )\n            ))}\n            {withMoreButton && (\n              <Button\n                color=\"translucent\"\n                className={cn('show-more')}\n                onClick={handleShowMoreClick}\n              >\n                <Icon name=\"down\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\nimport focusNoScroll from '../util/focusNoScroll';\n\nconst MODAL_HIDE_DELAY_MS = 300;\n\nexport default function useInputFocusOnOpen(\n  inputRef: ElementRef<HTMLInputElement | HTMLTextAreaElement>,\n  isOpen?: boolean,\n  onClose?: NoneToVoidFunction,\n) {\n  useEffect(() => {\n    if (isOpen) {\n      if (!IS_TOUCH_ENV && inputRef.current?.isConnected) {\n        requestMeasure(() => {\n          focusNoScroll(inputRef.current);\n        });\n      }\n    } else {\n      if (inputRef.current?.isConnected) {\n        inputRef.current.blur();\n      }\n\n      if (onClose) {\n        setTimeout(onClose, MODAL_HIDE_DELAY_MS);\n      }\n    }\n  }, [inputRef, isOpen, onClose]);\n}\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { addExtraClass } from '../../../../lib/teact/teact-dom';\n\nimport type { FocusDirection, ScrollTargetPosition } from '../../../../types';\n\nimport { SCROLL_MAX_DISTANCE } from '../../../../config';\nimport {\n  requestForcedReflow, requestMeasure, requestMutation,\n} from '../../../../lib/fasterdom/fasterdom';\nimport animateScroll from '../../../../util/animateScroll';\n\n// This is used when the viewport was replaced.\nconst BOTTOM_FOCUS_OFFSET = 500;\nconst RELOCATED_FOCUS_OFFSET = SCROLL_MAX_DISTANCE;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage({\n  elementRef,\n  chatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isJustAdded,\n  isQuote,\n  scrollTargetPosition,\n  isInFocusList,\n}: {\n  elementRef: ElementRef<HTMLDivElement>;\n  chatId: string;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isJustAdded?: boolean;\n  isQuote?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isInFocusList?: boolean;\n}) {\n  const isRelocatedRef = useRef(!isJustAdded);\n\n  useLayoutEffect(() => {\n    const isRelocated = isRelocatedRef.current;\n    isRelocatedRef.current = false;\n\n    if (isFocused && elementRef.current && !isInFocusList) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n      // `noFocusHighlight` is always called with “scroll-to-bottom” buttons\n      const isToBottom = noFocusHighlight;\n      const scrollPosition = scrollTargetPosition || isToBottom ? 'end' : 'centerOrTop';\n\n      const exec = () => {\n        const maxDistance = focusDirection !== undefined\n          ? (isToBottom ? BOTTOM_FOCUS_OFFSET : RELOCATED_FOCUS_OFFSET) : undefined;\n\n        const result = animateScroll({\n          container: messagesContainer,\n          element: elementRef.current!,\n          position: scrollPosition,\n          margin: FOCUS_MARGIN,\n          maxDistance,\n          forceDirection: focusDirection,\n          forceNormalContainerHeight: isResizingContainer,\n          shouldReturnMutationFn: true,\n        });\n\n        if (isQuote) {\n          const firstQuote = elementRef.current!.querySelector<HTMLSpanElement>('.is-quote');\n          if (firstQuote) {\n            requestMutation(() => {\n              addExtraClass(firstQuote, 'animate');\n            });\n          }\n        }\n\n        return result;\n      };\n\n      if (isRelocated) {\n        // We need this to override scroll setting from Message List layout effect\n        requestForcedReflow(exec);\n      } else {\n        requestMeasure(() => {\n          requestMutation(exec()!);\n        });\n      }\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isQuote, scrollTargetPosition,\n    isInFocusList,\n  ]);\n}\n","import { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../api/types';\nimport type { OwnProps as AnimatedIconProps } from './AnimatedIcon';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { getStickerMediaHash } from '../../global/helpers';\n\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\n\ntype OwnProps =\n  Partial<AnimatedIconProps>\n  & { sticker?: ApiSticker; noLoad?: boolean; forcePreview?: boolean };\n\nfunction AnimatedIconFromSticker(props: OwnProps) {\n  const {\n    sticker, noLoad, forcePreview, ...otherProps\n  } = props;\n\n  const thumbDataUri = sticker?.thumbnail?.dataUri;\n  const localMediaHash = sticker && getStickerMediaHash(sticker, 'full');\n  const previewBlobUrl = useMedia(\n    sticker ? getStickerMediaHash(sticker, 'preview') : undefined,\n    noLoad && !forcePreview,\n    ApiMediaFormat.BlobUrl,\n  );\n  const tgsUrl = useMedia(localMediaHash, noLoad);\n\n  return (\n    <AnimatedIconWithPreview\n      tgsUrl={tgsUrl}\n      previewUrl={previewBlobUrl}\n      thumbDataUri={thumbDataUri}\n\n      {...otherProps}\n    />\n  );\n}\n\nexport default memo(AnimatedIconFromSticker);\n","import { getGlobal } from '../../../global';\n\nimport { selectChat, selectChatLastMessage } from '../../../global/selectors';\nimport { orderBy } from '../../../util/iteratees';\n\nconst VERIFIED_PRIORITY_BASE = 3e9;\nconst PINNED_PRIORITY_BASE = 3e8;\n\nexport default function sortChatIds(\n  chatIds: string[],\n  shouldPrioritizeVerified = false,\n  priorityIds?: string[],\n  currentUserId?: string,\n) {\n  // Avoid calling sort on every global change\n  const global = getGlobal();\n\n  return orderBy(chatIds, (id) => {\n    if (id === currentUserId) {\n      return Infinity;\n    }\n\n    const chat = selectChat(global, id);\n    if (!chat) {\n      return 0;\n    }\n\n    let priority = 0;\n\n    const lastMessage = selectChatLastMessage(global, id);\n    if (lastMessage) {\n      priority += lastMessage.date;\n    }\n\n    if (shouldPrioritizeVerified && chat.isVerified) {\n      priority += VERIFIED_PRIORITY_BASE; // ~100 years in seconds\n    }\n\n    if (priorityIds && priorityIds.includes(id)) {\n      priority = Date.now() + PINNED_PRIORITY_BASE + (priorityIds.length - priorityIds.indexOf(id));\n    }\n\n    return priority;\n  }, 'desc');\n}\n","import type { ApiFormattedText, ApiMessageEntity } from '../api/types';\nimport { ApiMessageEntityTypes } from '../api/types';\n\nimport { RE_LINK_TEMPLATE } from '../config';\nimport { IS_EMOJI_SUPPORTED } from './browser/windowEnvironment';\n\nexport const ENTITY_CLASS_BY_NODE_NAME: Record<string, ApiMessageEntityTypes> = {\n  B: ApiMessageEntityTypes.Bold,\n  STRONG: ApiMessageEntityTypes.Bold,\n  I: ApiMessageEntityTypes.Italic,\n  EM: ApiMessageEntityTypes.Italic,\n  INS: ApiMessageEntityTypes.Underline,\n  U: ApiMessageEntityTypes.Underline,\n  S: ApiMessageEntityTypes.Strike,\n  STRIKE: ApiMessageEntityTypes.Strike,\n  DEL: ApiMessageEntityTypes.Strike,\n  CODE: ApiMessageEntityTypes.Code,\n  PRE: ApiMessageEntityTypes.Pre,\n  BLOCKQUOTE: ApiMessageEntityTypes.Blockquote,\n};\n\nconst MAX_TAG_DEEPNESS = 3;\n\nexport default function parseHtmlAsFormattedText(\n  html: string, withMarkdownLinks = false, skipMarkdown = false,\n): ApiFormattedText {\n  const fragment = document.createElement('div');\n  fragment.innerHTML = skipMarkdown ? html\n    : withMarkdownLinks ? parseMarkdown(parseMarkdownLinks(html)) : parseMarkdown(html);\n  fixImageContent(fragment);\n  const text = fragment.innerText.trim().replace(/\\u200b+/g, '');\n  const trimShift = fragment.innerText.indexOf(text[0]);\n  let textIndex = -trimShift;\n  let recursionDeepness = 0;\n  const entities: ApiMessageEntity[] = [];\n\n  function addEntity(node: ChildNode) {\n    if (node.nodeType === Node.COMMENT_NODE) return;\n    const { index, entity } = getEntityDataFromNode(node, text, textIndex);\n\n    if (entity) {\n      textIndex = index;\n      entities.push(entity);\n    } else if (node.textContent) {\n      // Skip newlines on the beginning\n      if (index === 0 && node.textContent.trim() === '') {\n        return;\n      }\n      textIndex += node.textContent.length;\n    }\n\n    if (node.hasChildNodes() && recursionDeepness <= MAX_TAG_DEEPNESS) {\n      recursionDeepness += 1;\n      Array.from(node.childNodes).forEach(addEntity);\n    }\n  }\n\n  Array.from(fragment.childNodes).forEach((node) => {\n    recursionDeepness = 1;\n    addEntity(node);\n  });\n\n  return {\n    text,\n    entities: entities.length ? entities : undefined,\n  };\n}\n\nexport function fixImageContent(fragment: HTMLDivElement) {\n  fragment.querySelectorAll('img').forEach((node) => {\n    if (node.dataset.documentId) { // Custom Emoji\n      node.textContent = (node).alt || '';\n    } else { // Regular emoji with image fallback\n      node.replaceWith(node.alt || '');\n    }\n  });\n}\n\nfunction parseMarkdown(html: string) {\n  let parsedHtml = html.slice(0);\n\n  // Strip redundant nbsp's\n  parsedHtml = parsedHtml.replace(/&nbsp;/g, ' ');\n\n  // Replace <div><br></div> with newline (new line in Safari)\n  parsedHtml = parsedHtml.replace(/<div><br([^>]*)?><\\/div>/g, '\\n');\n  // Replace <br> with newline\n  parsedHtml = parsedHtml.replace(/<br([^>]*)?>/g, '\\n');\n\n  // Strip redundant <div> tags\n  parsedHtml = parsedHtml.replace(/<\\/div>(\\s*)<div>/g, '\\n');\n  parsedHtml = parsedHtml.replace(/<div>/g, '\\n');\n  parsedHtml = parsedHtml.replace(/<\\/div>/g, '');\n\n  // Pre\n  parsedHtml = parsedHtml.replace(/^`{3}(.*?)[\\n\\r](.*?[\\n\\r]?)`{3}/gms, '<pre data-language=\"$1\">$2</pre>');\n  parsedHtml = parsedHtml.replace(/^`{3}[\\n\\r]?(.*?)[\\n\\r]?`{3}/gms, '<pre>$1</pre>');\n  parsedHtml = parsedHtml.replace(/[`]{3}([^`]+)[`]{3}/g, '<pre>$1</pre>');\n\n  // Code\n  parsedHtml = parsedHtml.replace(\n    /(?!<(code|pre)[^<]*|<\\/)[`]{1}([^`\\n]+)[`]{1}(?![^<]*<\\/(code|pre)>)/g,\n    '<code>$2</code>',\n  );\n\n  // Custom Emoji markdown tag\n  if (!IS_EMOJI_SUPPORTED) {\n    // Prepare alt text for custom emoji\n    parsedHtml = parsedHtml.replace(/\\[<img[^>]+alt=\"([^\"]+)\"[^>]*>]/gm, '[$1]');\n  }\n  parsedHtml = parsedHtml.replace(\n    /(?!<(?:code|pre)[^<]*|<\\/)\\[([^\\]\\n]+)\\]\\(customEmoji:(\\d+)\\)(?![^<]*<\\/(?:code|pre)>)/g,\n    '<img alt=\"$1\" data-document-id=\"$2\">',\n  );\n\n  // Other simple markdown\n  parsedHtml = parsedHtml.replace(\n    /(?!<(code|pre)[^<]*|<\\/)[*]{2}([^*\\n]+)[*]{2}(?![^<]*<\\/(code|pre)>)/g,\n    '<b>$2</b>',\n  );\n  parsedHtml = parsedHtml.replace(\n    /(?!<(code|pre)[^<]*|<\\/)[_]{2}([^_\\n]+)[_]{2}(?![^<]*<\\/(code|pre)>)/g,\n    '<i>$2</i>',\n  );\n  parsedHtml = parsedHtml.replace(\n    /(?!<(code|pre)[^<]*|<\\/)[~]{2}([^~\\n]+)[~]{2}(?![^<]*<\\/(code|pre)>)/g,\n    '<s>$2</s>',\n  );\n  parsedHtml = parsedHtml.replace(\n    /(?!<(code|pre)[^<]*|<\\/)[|]{2}([^|\\n]+)[|]{2}(?![^<]*<\\/(code|pre)>)/g,\n    `<span data-entity-type=\"${ApiMessageEntityTypes.Spoiler}\">$2</span>`,\n  );\n\n  return parsedHtml;\n}\n\nfunction parseMarkdownLinks(html: string) {\n  return html.replace(new RegExp(`\\\\[([^\\\\]]+?)]\\\\((${RE_LINK_TEMPLATE}+?)\\\\)`, 'g'), (_, text, link) => {\n    const url = link.includes('://') ? link : link.includes('@') ? `mailto:${link}` : `https://${link}`;\n    return `<a href=\"${url}\">${text}</a>`;\n  });\n}\n\nfunction getEntityDataFromNode(\n  node: ChildNode,\n  rawText: string,\n  textIndex: number,\n): { index: number; entity?: ApiMessageEntity } {\n  const type = getEntityTypeFromNode(node);\n\n  if (!type || !node.textContent) {\n    return {\n      index: textIndex,\n      entity: undefined,\n    };\n  }\n\n  const rawIndex = rawText.indexOf(node.textContent, textIndex);\n  // In some cases, last text entity ends with a newline (which gets trimmed from `rawText`).\n  // In this case, `rawIndex` would return `-1`, so we use `textIndex` instead.\n  const index = rawIndex >= 0 ? rawIndex : textIndex;\n  const offset = rawText.substring(0, index).length;\n  const { length } = rawText.substring(index, index + node.textContent.length);\n\n  if (type === ApiMessageEntityTypes.TextUrl) {\n    return {\n      index,\n      entity: {\n        type,\n        offset,\n        length,\n        url: (node as HTMLAnchorElement).href,\n      },\n    };\n  }\n  if (type === ApiMessageEntityTypes.MentionName) {\n    return {\n      index,\n      entity: {\n        type,\n        offset,\n        length,\n        userId: (node as HTMLAnchorElement).dataset.userId!,\n      },\n    };\n  }\n\n  if (type === ApiMessageEntityTypes.Pre) {\n    return {\n      index,\n      entity: {\n        type,\n        offset,\n        length,\n        language: (node as HTMLPreElement).dataset.language,\n      },\n    };\n  }\n\n  if (type === ApiMessageEntityTypes.CustomEmoji) {\n    return {\n      index,\n      entity: {\n        type,\n        offset,\n        length,\n        documentId: (node as HTMLImageElement).dataset.documentId!,\n      },\n    };\n  }\n\n  if (type === ApiMessageEntityTypes.Timestamp) {\n    const timestamp = Number((node as HTMLElement).dataset.timestamp);\n    if (Number.isNaN(timestamp)) {\n      return {\n        index,\n        entity: undefined,\n      };\n    }\n\n    return {\n      index,\n      entity: {\n        type,\n        offset,\n        length,\n        timestamp,\n      },\n    };\n  }\n\n  return {\n    index,\n    entity: {\n      type,\n      offset,\n      length,\n    },\n  };\n}\n\nfunction getEntityTypeFromNode(node: ChildNode): ApiMessageEntityTypes | undefined {\n  if (node instanceof HTMLElement && node.dataset.entityType) {\n    return node.dataset.entityType as ApiMessageEntityTypes;\n  }\n\n  if (ENTITY_CLASS_BY_NODE_NAME[node.nodeName]) {\n    return ENTITY_CLASS_BY_NODE_NAME[node.nodeName];\n  }\n\n  if (node.nodeName === 'A') {\n    const anchor = node as HTMLAnchorElement;\n    if (anchor.dataset.entityType === ApiMessageEntityTypes.MentionName) {\n      return ApiMessageEntityTypes.MentionName;\n    }\n    if (anchor.dataset.entityType === ApiMessageEntityTypes.Url) {\n      return ApiMessageEntityTypes.Url;\n    }\n    if (anchor.href.startsWith('mailto:')) {\n      return ApiMessageEntityTypes.Email;\n    }\n    if (anchor.href.startsWith('tel:')) {\n      return ApiMessageEntityTypes.Phone;\n    }\n    if (anchor.href !== anchor.textContent) {\n      return ApiMessageEntityTypes.TextUrl;\n    }\n\n    return ApiMessageEntityTypes.Url;\n  }\n\n  if (node.nodeName === 'SPAN') {\n    return (node as HTMLElement).dataset.entityType as any;\n  }\n\n  if (node.nodeName === 'IMG') {\n    if ((node as HTMLImageElement).dataset.documentId) {\n      return ApiMessageEntityTypes.CustomEmoji;\n    }\n  }\n\n  return undefined;\n}\n","import { MESSAGE_CONTENT_CLASS_NAME } from '../config';\n\nconst ELEMENT_NODE = 1;\n\nexport default function getMessageIdsForSelectedText() {\n  const selection = window.getSelection();\n  let selectedFragments = selection?.rangeCount ? selection.getRangeAt(0).cloneContents() : undefined;\n\n  const shouldIncludeLastMessage = selection?.focusNode && selection.focusOffset > 0\n    && hasParentWithClassName(selection.focusNode, MESSAGE_CONTENT_CLASS_NAME);\n  if (!selectedFragments || selectedFragments.childElementCount === 0) {\n    return undefined;\n  }\n\n  const messageIds = Array.from(selectedFragments.children)\n    .reduce((result, node) => {\n      if (node.nodeType === ELEMENT_NODE && node.classList.contains('message-date-group')) {\n        return Array.from(node.querySelectorAll('.Message'))\n          .reduce((acc, messageEl) => acc.concat(Number((messageEl as HTMLElement).dataset.messageId)), result);\n      } else if (node.nodeType === ELEMENT_NODE && node.classList.contains('Message')) {\n        return result.concat(Number((node as HTMLElement).dataset.messageId));\n      }\n\n      return result;\n    }, [] as number[]);\n\n  // Cleanup a document fragment because it is playing media content in the background\n  while (selectedFragments.firstChild) {\n    selectedFragments.removeChild(selectedFragments.firstChild);\n  }\n  selectedFragments = undefined;\n\n  if (!shouldIncludeLastMessage) {\n    messageIds.pop();\n  }\n\n  return messageIds;\n}\n\nfunction hasParentWithClassName(element: Node, className: string): boolean {\n  if (element.nodeType === ELEMENT_NODE && (element as HTMLElement).classList.contains(className)) {\n    return true;\n  }\n\n  return element.parentNode ? hasParentWithClassName(element.parentNode, className) : false;\n}\n","import type React from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './BadgeButton.module.scss';\n\ntype OwnProps = {\n  children: React.ReactNode;\n  className?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onMouseDown?: (e: React.MouseEvent<HTMLDivElement>) => void;\n};\n\nconst BadgeButton = ({\n  children,\n  className,\n  onClick,\n  onMouseDown,\n}: OwnProps) => {\n  return (\n    <div\n      className={buildClassName(styles.root, onClick && styles.clickable, className)}\n      onClick={onClick}\n      onMouseDown={onMouseDown}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default BadgeButton;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hJUqHi4B\",\"clickable\":\"hjDEmFaT\"};","import { beginHeavyAnimation } from '../lib/teact/teact';\nimport { getGlobal } from '../global';\n\nimport type { ScrollTargetPosition } from '../types';\nimport { FocusDirection } from '../types';\n\nimport {\n  SCROLL_MAX_DISTANCE,\n  SCROLL_MAX_DURATION,\n  SCROLL_MIN_DURATION,\n  SCROLL_SHORT_TRANSITION_MAX_DISTANCE,\n} from '../config';\nimport { requestMeasure, requestMutation } from '../lib/fasterdom/fasterdom';\nimport { selectCanAnimateInterface } from '../global/selectors';\nimport { IS_ANDROID } from './browser/windowEnvironment';\nimport getOffsetToContainer from './visibility/getOffsetToContainer';\nimport { animateSingle, cancelSingleAnimation } from './animation';\n\nexport type AnimateScrollArgs = {\n  container: HTMLElement;\n  element: HTMLElement;\n  position: ScrollTargetPosition;\n  margin?: number;\n  maxDistance?: number;\n  forceDirection?: FocusDirection;\n  forceDuration?: number;\n  forceNormalContainerHeight?: boolean;\n  shouldReturnMutationFn?: boolean;\n};\n\nlet isAnimating = false;\nlet currentArgs: AnimateScrollArgs | undefined;\nlet onHeavyAnimationEnd: NoneToVoidFunction | undefined;\n\nexport default function animateScroll(args: AnimateScrollArgs) {\n  currentArgs = args;\n  const mutate = createMutateFunction(args);\n\n  if (args.shouldReturnMutationFn) {\n    return mutate;\n  }\n\n  requestMutation(mutate);\n  return undefined;\n}\n\nexport function restartCurrentScrollAnimation() {\n  if (!isAnimating) {\n    return;\n  }\n\n  cancelSingleAnimation();\n\n  requestMeasure(() => {\n    requestMutation(createMutateFunction(currentArgs!));\n  });\n}\n\nfunction createMutateFunction(args: AnimateScrollArgs) {\n  const {\n    container,\n    element,\n    position,\n    margin = 0,\n    maxDistance = SCROLL_MAX_DISTANCE,\n    forceDirection,\n    forceNormalContainerHeight,\n  } = args;\n\n  let forceDuration = args.forceDuration;\n\n  if (\n    forceDirection === FocusDirection.Static\n    || !selectCanAnimateInterface(getGlobal())\n  ) {\n    forceDuration = 0;\n  }\n\n  const { offsetHeight: elementHeight } = element;\n  const { scrollTop: currentScrollTop, clientHeight: containerHeight, scrollHeight } = container;\n  const elementTop = getOffsetToContainer(element, container).top;\n\n  const targetContainerHeight = forceNormalContainerHeight && container.dataset.normalHeight\n    ? Number(container.dataset.normalHeight)\n    : containerHeight;\n\n  let scrollTo!: number;\n  switch (position) {\n    case 'start':\n      scrollTo = (elementTop - margin) + (IS_ANDROID ? 1 : 0);\n      break;\n    case 'end':\n      scrollTo = (elementTop + elementHeight + margin) - targetContainerHeight;\n      break;\n    // 'nearest' is not supported yet\n    case 'nearest':\n    case 'center':\n    case 'centerOrTop':\n      scrollTo = elementHeight < targetContainerHeight\n        ? (elementTop + elementHeight / 2 - targetContainerHeight / 2)\n        : (elementTop - margin);\n      break;\n  }\n\n  const scrollFrom = calculateScrollFrom(container, scrollTo, maxDistance, forceDirection);\n\n  let path = scrollTo - scrollFrom;\n  if (path < 0) {\n    const remainingPath = -scrollFrom;\n    path = Math.max(path, remainingPath);\n  } else if (path > 0) {\n    const remainingPath = scrollHeight - (scrollFrom + targetContainerHeight);\n    path = Math.min(path, remainingPath);\n  }\n\n  const absPath = Math.abs(path);\n\n  return () => {\n    if (absPath < 1) {\n      if (currentScrollTop !== scrollFrom) {\n        container.scrollTop = scrollFrom;\n      }\n\n      return;\n    }\n\n    const target = scrollFrom + path;\n\n    if (forceDuration === 0) {\n      container.scrollTop = target;\n      return;\n    }\n\n    const transition = absPath <= SCROLL_SHORT_TRANSITION_MAX_DISTANCE ? shortTransition : longTransition;\n    const duration = forceDuration || (\n      SCROLL_MIN_DURATION\n      + (absPath / SCROLL_MAX_DISTANCE) * (SCROLL_MAX_DURATION - SCROLL_MIN_DURATION)\n    );\n    const startAt = Date.now();\n\n    isAnimating = true;\n\n    const prevOnHeavyAnimationEnd = onHeavyAnimationEnd;\n    onHeavyAnimationEnd = beginHeavyAnimation(undefined, true);\n    prevOnHeavyAnimationEnd?.();\n\n    animateSingle(() => {\n      const t = Math.min((Date.now() - startAt) / duration, 1);\n      const currentPath = path * (1 - transition(t));\n      const newScrollTop = Math.round(target - currentPath);\n\n      container.scrollTop = newScrollTop;\n\n      isAnimating = t < 1 && newScrollTop !== target;\n\n      if (!isAnimating) {\n        currentArgs = undefined;\n\n        onHeavyAnimationEnd?.();\n        onHeavyAnimationEnd = undefined;\n      }\n\n      return isAnimating;\n    }, requestMutation);\n  };\n}\n\nexport function isAnimatingScroll() {\n  return isAnimating;\n}\n\nexport function cancelScrollBlockingAnimation() {\n  onHeavyAnimationEnd!();\n  onHeavyAnimationEnd = undefined;\n}\n\nfunction calculateScrollFrom(\n  container: HTMLElement,\n  scrollTo: number,\n  maxDistance = SCROLL_MAX_DISTANCE,\n  forceDirection?: FocusDirection,\n) {\n  const { scrollTop } = container;\n\n  if (forceDirection === undefined) {\n    const offset = scrollTo - scrollTop;\n\n    if (offset < -maxDistance) {\n      return scrollTop + (offset + maxDistance);\n    } else if (offset > maxDistance) {\n      return scrollTop + (offset - maxDistance);\n    }\n  } else if (forceDirection === FocusDirection.Up) {\n    return scrollTo + maxDistance;\n  } else if (forceDirection === FocusDirection.Down) {\n    return Math.max(0, scrollTo - maxDistance);\n  }\n\n  return scrollTop;\n}\n\nfunction shortTransition(t: number) {\n  return 1 - ((1 - t) ** 3.5);\n}\n\nfunction longTransition(t: number) {\n  return 1 - ((1 - t) ** 6);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AmQSvxpZ\",\"text\":\"pQW7dcwr\"};","import { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useUniqueId from '../../../hooks/useUniqueId';\n\nimport styles from './GiftRibbon.module.scss';\n\nconst COLORS = {\n  red: [['#FF5B54', '#ED1C26'], ['#653633', '#532224']],\n  blue: [['#6ED2FF', '#34A4FC'], ['#344F5A', '#152E42']],\n  purple: [['#E367D7', '#757BF6'], ['#E367D7', '#757BF6']],\n  green: [['#52D553', '#4BB121'], ['#52D553', '#4BB121']],\n  orange: [['#D48F23', '#BE7E15'], ['#D48F23', '#BE7E15']],\n} as const;\ntype ColorKey = keyof typeof COLORS;\n\nconst COLOR_KEYS = new Set(Object.keys(COLORS) as ColorKey[]);\ntype GradientColor = readonly [string, string];\n\ntype OwnProps = {\n  color: ColorKey | GradientColor | (string & {});\n  text: string;\n  className?: string;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n};\n\nconst GiftRibbon = ({\n  text, color, className, theme,\n}: OwnProps & StateProps) => {\n  const randomId = useUniqueId();\n  const validSvgRandomId = `svg-${randomId}`; // ID must start with a letter\n\n  const colorKey = COLOR_KEYS.has(color as ColorKey) ? color as ColorKey : undefined;\n\n  const isDarkTheme = theme === 'dark';\n\n  const gradientColor: GradientColor | undefined\n  = Array.isArray(color)\n    ? color as GradientColor\n    : colorKey\n      ? COLORS[colorKey][isDarkTheme ? 1 : 0]\n      : undefined;\n\n  const startColor = gradientColor ? gradientColor[0] : color;\n  const endColor = gradientColor ? gradientColor[1] : color;\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      <svg className={styles.ribbon} width=\"56\" height=\"56\" viewBox=\"0 0 56 56\" fill=\"none\">\n        <path d=\"M52.4851 26.4853L29.5145 3.51472C27.2641 1.26428 24.2119 0 21.0293 0H2.82824C1.04643 0 0.154103 2.15429 1.41403 3.41422L52.5856 54.5858C53.8455 55.8457 55.9998 54.9534 55.9998 53.1716V34.9706C55.9998 31.788 54.7355 28.7357 52.4851 26.4853Z\" fill={`url(#${validSvgRandomId})`} />\n        <defs>\n          <linearGradient id={validSvgRandomId} x1=\"27.9998\" y1=\"1\" x2=\"27.9998\" y2=\"55\" gradientUnits=\"userSpaceOnUse\">\n            <stop stop-color={startColor} />\n            <stop offset=\"1\" stop-color={endColor} />\n          </linearGradient>\n        </defs>\n      </svg>\n      <div className={styles.text}>{text}</div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      theme: selectTheme(global),\n    };\n  },\n)(GiftRibbon));\n","import { memo, type TeactNode } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './MiniTable.module.scss';\n\nexport type TableEntry = [TeactNode, TeactNode];\n\ntype OwnProps = {\n  data: TableEntry[];\n  className?: string;\n  style?: string;\n  valueClassName?: string;\n  keyClassName?: string;\n};\n\nconst MiniTable = ({\n  data,\n  style,\n  className,\n  valueClassName,\n  keyClassName,\n}: OwnProps) => {\n  return (\n    <div className={buildClassName(styles.root, className)} style={style}>\n      {data.map(([key, value]) => (\n        <>\n          <div className={buildClassName(styles.key, keyClassName)}>{key}</div>\n          <div className={buildClassName(styles.value, valueClassName)}>{value}</div>\n        </>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MiniTable);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"cKr8J5k_\",\"key\":\"c9RLLvfs\",\"value\":\"QEuGpzIc\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useState } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PromptDialog.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  title: string;\n  subtitle?: React.ReactNode;\n  placeholder: string;\n  submitText?: string;\n  maxLength?: number;\n  initialValue?: string;\n  onClose: NoneToVoidFunction;\n  onSubmit: (text: string) => void;\n};\n\nconst PromptDialog = ({\n  isOpen,\n  title,\n  subtitle,\n  placeholder,\n  submitText,\n  maxLength,\n  initialValue = '',\n  onClose,\n  onSubmit,\n}: OwnProps) => {\n  const lang = useOldLang();\n\n  const [text, setText] = useState(initialValue);\n\n  const handleTextChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setText(e.target.value);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    onSubmit(text);\n  });\n\n  return (\n    <Modal\n      className=\"narrow\"\n      title={title}\n      isOpen={isOpen}\n      onClose={onClose}\n      isSlim\n    >\n      {Boolean(subtitle) && (\n        <div className={styles.subtitle}>\n          {subtitle}\n        </div>\n      )}\n      <InputText\n        placeholder={placeholder}\n        value={text}\n        onChange={handleTextChange}\n        maxLength={maxLength}\n        teactExperimentControlled\n      />\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" onClick={handleSubmit}>\n          {submitText || lang('Save')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PromptDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"subtitle\":\"cGrbcqD_\"};","import { memo, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiReaction,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useContextMenuHandlers from '../../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport PromptDialog from '../../../modals/prompt/PromptDialog';\nimport Button from '../../../ui/Button';\nimport Menu from '../../../ui/Menu';\nimport MenuItem from '../../../ui/MenuItem';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\nconst TITLE_MAX_LENGTH = 15;\nconst LOOP_LIMIT = 1;\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  tag?: ApiSavedReactionTag;\n  containerId: string;\n  isChosen?: boolean;\n  isOwnMessage?: boolean;\n  withCount?: boolean;\n  className?: string;\n  chosenClassName?: string;\n  isDisabled?: boolean;\n  withContextMenu?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n  onRemove?: (reaction: ApiReaction) => void;\n};\n\nconst SavedTagButton = ({\n  reaction,\n  tag,\n  containerId,\n  isChosen,\n  isOwnMessage,\n  className,\n  chosenClassName,\n  withCount,\n  isDisabled,\n  withContextMenu,\n  observeIntersection,\n  onClick,\n  onRemove,\n}: OwnProps) => {\n  const { editSavedReactionTag } = getActions();\n  const ref = useRef<HTMLButtonElement>();\n  const menuRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n  const [isRenamePromptOpen, openRenamePrompt, closeRenamePrompt] = useFlag();\n\n  const { title, count } = tag || {};\n  const hasText = Boolean(title || (withCount && count));\n\n  const handleClick = useLastCallback(() => {\n    onClick?.(reaction);\n  });\n\n  const handleRemoveClick = useLastCallback(() => {\n    onRemove?.(reaction);\n  });\n\n  const handleRenameTag = useLastCallback((newTitle: string) => {\n    editSavedReactionTag({\n      reaction,\n      title: newTitle,\n    });\n    closeRenamePrompt();\n  });\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !withContextMenu, undefined, undefined, undefined, true);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({ withPortal: true, shouldAvoidNegativePosition: true }));\n\n  if (withCount && count === 0) {\n    return undefined;\n  }\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        styles.tag,\n        isOwnMessage && styles.own,\n        isChosen && styles.chosen,\n        isChosen && chosenClassName,\n        isDisabled && styles.disabled,\n        className,\n      )}\n      size=\"tiny\"\n      onClick={handleClick}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      ref={ref}\n    >\n      <ReactionAnimatedEmoji\n        className={styles.animatedEmoji}\n        containerId={containerId}\n        reaction={reaction}\n        loopLimit={LOOP_LIMIT}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {hasText && (\n        <span className={styles.tagText}>\n          {title && <span>{title}</span>}\n          {withCount && <span>{count}</span>}\n        </span>\n      )}\n      <svg\n        className={styles.tail}\n        width=\"15\"\n        height=\"30\"\n        viewBox=\"0 0 15 30\"\n      >\n        <path className={styles.tailFill} d=\"m 0,30 c 3.1855,0 6.1803,-1.5176 8.0641,-4.0864 l 5.835,-7.9568 c 1.2906,-1.7599 1.2906,-4.1537 0,-5.9136 L 8.0641,4.08636 C 6.1803,1.51761 3.1855,0 0,0\" />\n      </svg>\n      {withContextMenu && (\n        <PromptDialog\n          isOpen={isRenamePromptOpen}\n          maxLength={TITLE_MAX_LENGTH}\n          title={lang(tag?.title ? 'SavedTagRenameTag' : 'SavedTagLabelTag')}\n          subtitle={lang('SavedTagLabelTagText')}\n          placeholder={lang('SavedTagLabelPlaceholder')}\n          initialValue={tag?.title}\n          onClose={closeRenamePrompt}\n          onSubmit={handleRenameTag}\n        />\n      )}\n      {withContextMenu && contextMenuAnchor && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          autoClose\n          withPortal\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <MenuItem icon=\"tag-filter\" onClick={handleClick}>\n            {lang('SavedTagFilterByTag')}\n          </MenuItem>\n          <MenuItem icon=\"tag-name\" onClick={openRenamePrompt}>\n            {lang(tag?.title ? 'SavedTagRenameTag' : 'SavedTagLabelTag')}\n          </MenuItem>\n          <MenuItem icon=\"tag-crossed\" destructive onClick={handleRemoveClick}>\n            {lang('SavedTagRemoveTag')}\n          </MenuItem>\n        </Menu>\n      )}\n    </Button>\n  );\n};\n\nexport default memo(SavedTagButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O9uCTt5C\",\"animated-icon\":\"HiI6SMxF\",\"animatedIcon\":\"HiI6SMxF\",\"effect\":\"NhFcTGja\",\"animating\":\"ikfZ6Igz\",\"withEffectOnly\":\"jjRJmHCg\"};","import { getActions, withGlobal } from '../../../global';\nimport { selectFocusListCount, selectTabState } from '../../../global/selectors';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport buildClassName from '../../../util/buildClassName';\nimport UnreadBadge from '../../common/CustomUnreadBadge';\n\nexport const TargetIcon: FC = () => (\n  <span className=\"icon\">\n    <svg\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <circle cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"2.3\"/>\n      <circle cx=\"12\" cy=\"12\" r=\"5\" stroke=\"currentColor\" stroke-width=\"2.3\"/>\n      <circle cx=\"12\" cy=\"12\" r=\"1.5\" fill=\"currentColor\"/>\n    </svg>\n  </span>\n);\n\nimport './FocusListButton.scss';\n\ntype StateProps = {\n  isActive?: boolean;\n  count?: number;\n}\n\nconst FocusListButton: FC<StateProps> = ({ isActive, count }) => {\n  const { toggleFocusList } = getActions();\n\n  return (\n    <div\n      onClick={() => toggleFocusList()}\n      className={buildClassName('FocusListButton-trigger', isActive && 'active')}\n    >\n      <TargetIcon />  \n      Priority\n      {count !== undefined && count !== 0 && (\n        <UnreadBadge count={count} isInactive={true} className=\"FocusListButton-count\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<StateProps>(\n  (global): StateProps => {\n    const { isFocusListShown } = selectTabState(global);\n\n    return {\n      isActive: isFocusListShown,\n      count: selectFocusListCount(global),\n    }\n  }\n)(FocusListButton));\n","export default function focusNoScroll(element?: HTMLElement) {\n  if (!element) return;\n\n  element.focus({ preventScroll: true });\n}\n","import type { ApiFormattedText } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\nconst ALLOWED_QUOTE_ENTITIES = new Set([\n  ApiMessageEntityTypes.Bold,\n  ApiMessageEntityTypes.Italic,\n  ApiMessageEntityTypes.Underline,\n  ApiMessageEntityTypes.Strike,\n  ApiMessageEntityTypes.Spoiler,\n  ApiMessageEntityTypes.CustomEmoji,\n]);\n\nexport function getSelectionAsFormattedText(range: Range) {\n  const html = getSelectionAsHtml(range);\n  const formattedText = parseHtmlAsFormattedText(html, false, true);\n\n  return stripEntitiesForQuote(formattedText);\n}\n\nfunction getSelectionAsHtml(range: Range) {\n  const clonedSelection = range.cloneContents();\n  div.appendChild(clonedSelection);\n\n  const html = wrapHtmlWithMarkupTags(range, div.innerHTML);\n  div.innerHTML = '';\n\n  return html\n    .replace(/<br\\s*\\/?>/gi, '\\n')\n    .replace(/&nbsp;/gi, ' ') // Convert nbsp's to spaces\n    .replace(/\\u00a0/gi, ' ');\n}\n\nfunction stripEntitiesForQuote(text: ApiFormattedText): ApiFormattedText {\n  if (!text.entities) return text;\n\n  const entities = text.entities.filter((entity) => ALLOWED_QUOTE_ENTITIES.has(entity.type as ApiMessageEntityTypes));\n  return { ...text, entities: entities.length ? entities : undefined };\n}\n\nfunction wrapHtmlWithMarkupTags(range: Range, html: string) {\n  const container = range.commonAncestorContainer;\n  if (container.nodeType === Node.ELEMENT_NODE && (container as Element).classList.contains('text-content')) {\n    return html;\n  }\n  let currentElement = range.commonAncestorContainer.parentElement;\n  while (currentElement && !currentElement.classList.contains('text-content')) {\n    const tag = currentElement.tagName.toLowerCase();\n    const entityType = currentElement.dataset.entityType;\n    html = `<${tag} ${entityType ? `data-entity-type=\"${entityType}\"` : ''}>${html}</${tag}>`;\n    currentElement = currentElement.parentElement;\n  }\n\n  return html;\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PinMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PinMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PinMessageModal = useModuleLoader(Bundles.Extra, 'PinMessageModal', !isOpen);\n\n  return PinMessageModal ? <PinMessageModal {...props} /> : undefined;\n};\n\nexport default PinMessageModalAsync;\n","import type { ApiMessage, StatefulMediaContent } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport {\n  getMessageContact,\n  getMessageHtmlId,\n  getMessagePhoto,\n  getMessageText,\n  getPhotoMediaHash,\n  getWebPagePhoto,\n  getWebPageVideo,\n  hasMediaLocalBlobUrl,\n} from '../../../../global/helpers';\nimport { getMessageTextWithSpoilers } from '../../../../global/helpers/messageSummary';\nimport { IS_SAFARI } from '../../../../util/browser/windowEnvironment';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n  copyTextToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { getTranslationFn } from '../../../../util/localization';\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: IconName;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  statefulContent: StatefulMediaContent | undefined,\n  href?: string,\n  canCopy?: boolean,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const { webPage } = statefulContent || {};\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getWebPageVideo(webPage) ? getWebPagePhoto(webPage) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = photo ? getPhotoMediaHash(photo, 'full') : undefined;\n  const canImageBeCopied = canCopy && photo && (mediaHash || hasMediaLocalBlobUrl(photo))\n    && CLIPBOARD_ITEM_SUPPORTED && !IS_SAFARI;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (canCopy && href) {\n    options.push({\n      label: 'lng_context_copy_link',\n      icon: 'copy',\n      handler: () => {\n        copyTextToClipboard(href);\n\n        afterEffect?.();\n      },\n    });\n  } else if (canCopy && text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n      && checkMessageHasSelection(message)\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            { message, shouldRenderAsHtml: true },\n          ) as string[];\n          if (clipboardText) {\n            copyHtmlToClipboard(\n              clipboardText.join(''),\n              getMessageTextWithSpoilers(getTranslationFn(), message, statefulContent)!,\n            );\n          }\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: onCopyLink,\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\nfunction checkMessageHasSelection(message: ApiMessage): boolean {\n  const selection = window.getSelection();\n  const selectionParentNode = selection?.anchorNode?.parentNode as HTMLElement;\n  const selectedMessageElement = selectionParentNode?.closest<HTMLDivElement>('.Message.message-list-item');\n  return getMessageHtmlId(message.id) === selectedMessageElement?.id;\n}\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"C3LVl_JT\",\"get\":\"bmxij_dk\",\"skeleton\":\"cd1ZZeSy\",\"transition\":\"mg4sBQ9n\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MenuItem from '../../ui/MenuItem';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport styles from './TimeMenuItem.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nfunction LastEditTimeMenuItem({\n  message,\n}: OwnProps) {\n  const lang = useOldLang();\n  const { editDate } = message;\n  const shouldRenderSkeleton = !editDate;\n\n  return (\n    <MenuItem icon=\"clock-edit\" className={styles.item}>\n      {shouldRenderSkeleton ? <Skeleton className={styles.skeleton} /> : Boolean(editDate)\n        && lang('Chat.PrivateMessageEditTimestamp.Date', formatDateAtTime(lang, editDate * 1000))}\n    </MenuItem>\n  );\n}\n\nexport default memo(LastEditTimeMenuItem);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MenuItem from '../../ui/MenuItem';\nimport Skeleton from '../../ui/placeholder/Skeleton';\nimport Transition from '../../ui/Transition';\n\nimport styles from './TimeMenuItem.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldRenderShowWhen?: boolean;\n  canLoadReadDate?: boolean;\n  closeContextMenu: NoneToVoidFunction;\n};\n\nfunction ReadTimeMenuItem({\n  message, shouldRenderShowWhen, canLoadReadDate, closeContextMenu,\n}: OwnProps) {\n  const { openPrivacySettingsNoticeModal } = getActions();\n  const lang = useOldLang();\n  const { readDate } = message;\n  const shouldRenderSkeleton = canLoadReadDate && !readDate && !shouldRenderShowWhen;\n\n  const handleOpenModal = () => {\n    closeContextMenu();\n    openPrivacySettingsNoticeModal({ chatId: message.chatId, isReadDate: true });\n  };\n\n  return (\n    <MenuItem icon=\"message-read\" className={styles.item}>\n      <Transition name=\"fade\" activeKey={shouldRenderSkeleton ? 1 : 2} className={styles.transition}>\n        {shouldRenderSkeleton ? <Skeleton className={styles.skeleton} /> : (\n          <>\n            {Boolean(readDate) && lang('PmReadAt', formatDateAtTime(lang, readDate * 1000))}\n            {!readDate && shouldRenderShowWhen && (\n              <div>\n                {lang('PmRead')}\n                <span className={styles.get} onClick={handleOpenModal}>\n                  {lang('PmReadShowWhen')}\n                </span>\n              </div>\n            )}\n          </>\n        )}\n      </Transition>\n    </MenuItem>\n  );\n}\n\nexport default memo(ReadTimeMenuItem);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatReactions,\n  ApiMessage,\n  ApiPeer,\n  ApiPoll,\n  ApiReaction,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiTypeStory,\n  ApiUser,\n  ApiWebPage,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport {\n  getUserFullName,\n  groupStatefulContent,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { disableScrolling } from '../../../util/scrollLock';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { getMessageCopyOptions } from './helpers/copyOptions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { TargetIcon } from '../../left/main/FocusListButton';\n\nimport AvatarList from '../../common/AvatarList';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/placeholder/Skeleton';\nimport LastEditTimeMenuItem from './LastEditTimeMenuItem';\nimport ReactionSelector from './reactions/ReactionSelector';\nimport ReadTimeMenuItem from './ReadTimeMenuItem';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isReactionPickerOpen?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  message: ApiMessage;\n  poll?: ApiPoll;\n  webPage?: ApiWebPage;\n  story?: ApiTypeStory;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  isWithPaidReaction?: boolean;\n  reactionsLimit?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canQuote?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canAppendTodoList?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentPeers?: ApiPeer[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n  isInSavedMessages?: boolean;\n  shouldRenderShowWhen?: boolean;\n  canLoadReadDate?: boolean;\n  onReply?: NoneToVoidFunction;\n  onOpenThread?: VoidFunction;\n  onEdit?: NoneToVoidFunction;\n  onAppendTodoList?: NoneToVoidFunction;\n  onPin?: NoneToVoidFunction;\n  onUnpin?: NoneToVoidFunction;\n  onForward?: NoneToVoidFunction;\n  onDelete?: NoneToVoidFunction;\n  onFaveSticker?: NoneToVoidFunction;\n  onReport?: NoneToVoidFunction;\n  onUnfaveSticker?: NoneToVoidFunction;\n  onSelect?: NoneToVoidFunction;\n  onSend?: NoneToVoidFunction;\n  onReschedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  onCopyLink?: NoneToVoidFunction;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: NoneToVoidFunction;\n  onDownload?: NoneToVoidFunction;\n  onSaveGif?: NoneToVoidFunction;\n  onCancelVote?: NoneToVoidFunction;\n  onClosePoll?: NoneToVoidFunction;\n  onShowSeenBy?: NoneToVoidFunction;\n  onShowReactors?: NoneToVoidFunction;\n  onTranslate?: NoneToVoidFunction;\n  onShowOriginal?: NoneToVoidFunction;\n  onSelectLanguage?: NoneToVoidFunction;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  onSendPaidReaction?: NoneToVoidFunction;\n  onShowPaidReactionModal?: NoneToVoidFunction;\n  onReactionPickerOpen?: (position: IAnchorPosition) => void;\n  onMoveToBottom?: NoneToVoidFunction;\n  onAddToFocus?: NoneToVoidFunction;\n  onRemoveFromFocus?: NoneToVoidFunction;\n  onRemindMe?: NoneToVoidFunction;\n  userFullName?: string;\n  canGift?: boolean;\n  isInFocusList?: boolean;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_SELECTOR_WIDTH_REM = 19.25;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isReactionPickerOpen,\n  availableReactions,\n  topReactions,\n  defaultTagReactions,\n  isOpen,\n  message,\n  poll,\n  webPage,\n  story,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  isWithPaidReaction,\n  reactionsLimit,\n  anchor,\n  targetHref,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canQuote,\n  canEdit,\n  canAppendTodoList,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canForward,\n  canReport,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentPeers,\n  hasCustomEmoji,\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  isInSavedMessages,\n  shouldRenderShowWhen,\n  canLoadReadDate,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onAppendTodoList,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onFaveSticker,\n  onReport,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onSendPaidReaction,\n  onShowPaidReactionModal,\n  onCopyMessages,\n  onReactionPickerOpen,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n  onMoveToBottom,\n  onAddToFocus,\n  onRemoveFromFocus,\n  onRemindMe,\n  userFullName,\n  canGift,\n  isInFocusList,\n}) => {\n  const {\n    showNotification, openStickerSet, openCustomEmojiSets, loadStickers, openGiftModal,\n  } = getActions();\n  const menuRef = useRef<HTMLDivElement>();\n  const scrollableRef = useRef<HTMLDivElement>();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const areReactionsPossible = message.areReactionsPossible;\n  const withReactions = (canShowReactionList && !noReactions) || areReactionsPossible;\n  const isEdited = ('isEdited' in message) && message.isEdited;\n  const seenByDates = message.seenByDates;\n  const isPremiumGift = message.content.action?.type === 'giftPremium';\n  const isGiftCode = message.content.action?.type === 'giftCode';\n  const isStarGift = message.content.action?.type === 'starGift';\n  const isStarGiftUnique = message.content.action?.type === 'starGiftUnique';\n  const shouldShowGiftButton = isUserId(message.chatId)\n    && canGift && (isPremiumGift || isGiftCode || isStarGift || isStarGiftUnique);\n\n  const canAddOrRemoveFromFocus = !canSendNow;\n  const canRemindMe = canForward;\n  const canMoveToBottom = isInSavedMessages && canForward;\n\n  const showEnsoActions = canAddOrRemoveFromFocus || canRemindMe || canMoveToBottom;\n\n  const [areItemsHidden, hideItems] = useFlag();\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile, isDesktop } = useAppLayout();\n  const seenByDatesCount = useMemo(() => (seenByDates ? Object.keys(seenByDates).length : 0), [seenByDates]);\n\n  const handleAfterCopy = useLastCallback(() => {\n    showNotification({\n      message: oldLang('Share.Link.Copied'),\n    });\n    onClose();\n  });\n\n  const handleGiftClick = useLastCallback(() => {\n    openGiftModal({ forUserId: message.chatId });\n    onClose();\n  });\n\n  useEffect(() => {\n    if (isOpen && areItemsHidden && !isReactionPickerOpen) {\n      onClose();\n    }\n  }, [onClose, isOpen, isReactionPickerOpen, areItemsHidden]);\n\n  useEffect(() => {\n    if (customEmojiSets?.length) {\n      customEmojiSets.map((customEmojiSet) => {\n        return loadStickers({\n          stickerSetInfo: {\n            id: customEmojiSet.id,\n            accessHash: customEmojiSet.accessHash,\n          },\n        });\n      });\n    }\n  }, [customEmojiSets, openCustomEmojiSets]);\n\n  const handleOpenCustomEmojiSets = useLastCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  });\n\n  const copyOptions = getMessageCopyOptions(\n    message,\n    groupStatefulContent({ poll, webPage, story }),\n    targetHref,\n    canCopy,\n    handleAfterCopy,\n    canCopyLink ? onCopyLink : undefined,\n    onCopyMessages,\n    onCopyNumber,\n  );\n\n  const getTriggerElement = useLastCallback(() => {\n    return document.querySelector(`.Transition_slide-active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  });\n\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n\n  const getMenuElement = useLastCallback(() => document.querySelector('.MessageContextMenu .bubble'));\n\n  const getLayout = useLastCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const middleColumn = document.getElementById('MiddleColumn')!;\n    const middleColumnComputedStyle = getComputedStyle(middleColumn);\n    const headerToolsHeight = parseFloat(middleColumnComputedStyle.getPropertyValue('--middle-header-panes-height'));\n    const extraHeightPinned = headerToolsHeight || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n      shouldAvoidNegativePosition: !isDesktop,\n      menuElMinWidth: withReactions && isMobile ? REACTION_SELECTOR_WIDTH_REM * REM : undefined,\n    };\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  useEffect(() => {\n    return disableScrolling(scrollableRef.current, '.ReactionPicker');\n  }, [isOpen]);\n\n  const handleOpenMessageReactionPicker = useLastCallback((position: IAnchorPosition) => {\n    onReactionPickerOpen!(position);\n    hideItems();\n  });\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      anchor={anchor}\n      getTriggerElement={getTriggerElement}\n      getRootElement={getRootElement}\n      getMenuElement={getMenuElement}\n      getLayout={getLayout}\n      withMaxHeight\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          topReactions={topReactions}\n          allAvailableReactions={availableReactions}\n          defaultTagReactions={defaultTagReactions}\n          currentReactions={message.reactions?.results}\n          reactionsLimit={reactionsLimit}\n          onToggleReaction={onToggleReaction!}\n          onSendPaidReaction={onSendPaidReaction}\n          onShowPaidReactionModal={onShowPaidReactionModal}\n          isWithPaidReaction={isWithPaidReaction}\n          isPrivate={isPrivate}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isInSavedMessages}\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageReactionPicker}\n          onClose={onClose}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        ref={scrollableRef}\n        className={buildClassName(\n          'MessageContextMenu_items scrollable-content custom-scroll',\n          areItemsHidden && 'MessageContextMenu_items-hidden',\n        )}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {showEnsoActions && (\n          <>\n            {canAddOrRemoveFromFocus && (\n              <MenuItem \n                icon={isInFocusList ? \"check\" : undefined}\n                customIcon={!isInFocusList ? <TargetIcon /> : undefined}\n                onClick={isInFocusList ? onRemoveFromFocus : onAddToFocus}\n              >\n                {isInFocusList ? 'Remove from Priority' : 'Add to Priority'}\n              </MenuItem>\n            )}\n            {canRemindMe && (\n              <MenuItem icon='schedule' onClick={onRemindMe}>\n                Remind me\n              </MenuItem>\n            )}\n            {canMoveToBottom && (\n              <>\n                <MenuItem icon=\"arrow-down\" onClick={onMoveToBottom}>\n                  Move to bottom\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n          </>\n        )}\n\n        {shouldShowGiftButton\n          && (\n            <MenuItem icon=\"gift\" onClick={handleGiftClick}>\n              {message?.isOutgoing ? oldLang('SendAnotherGift')\n                : oldLang('Conversation.ContextMenuSendGiftTo', userFullName)}\n            </MenuItem>\n          )}\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{oldLang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{oldLang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && (\n          <MenuItem icon=\"reply\" onClick={onReply}>\n            {oldLang(canQuote ? 'lng_context_quote_and_reply' : 'Reply')}\n          </MenuItem>\n        )}\n        {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n          <MenuItem icon=\"replies\" onClick={onOpenThread}>\n            {oldLang('Conversation.ContextViewReplies', repliesThreadInfo.messagesCount, 'i')}\n          </MenuItem>\n        )}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{oldLang('Edit')}</MenuItem>}\n        {canAppendTodoList && (\n          <MenuItem icon=\"add\" onClick={onAppendTodoList}>\n            {lang('MenuButtonAppendTodoList')}\n          </MenuItem>\n        )}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{oldLang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{oldLang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{oldLang('TranslateMessage')}</MenuItem>}\n        {canShowOriginal && (\n          <MenuItem icon=\"language\" onClick={onShowOriginal}>\n            {oldLang('ShowOriginalButton')}\n          </MenuItem>\n        )}\n        {canSelectLanguage && (\n          <MenuItem icon=\"web\" onClick={onSelectLanguage}>{oldLang('lng_settings_change_lang')}</MenuItem>\n        )}\n        {copyOptions.map((option) => (\n          <MenuItem\n            key={option.label}\n            icon={option.icon}\n            onClick={option.handler}\n            withPreventDefaultOnMouseDown\n          >\n            {oldLang(option.label)}\n          </MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{oldLang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{oldLang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{oldLang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{oldLang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{oldLang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? oldLang('lng_context_cancel_download') : oldLang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{oldLang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{oldLang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{oldLang('lng_context_report_msg')}</MenuItem>}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{oldLang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator size=\"thick\" />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(\n                  oldLang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'],\n                )}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(oldLang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {(canShowSeenBy || canShowReactionsCount) && (\n          <>\n            <MenuSeparator size={hasCustomEmoji ? 'thin' : 'thick'} />\n            <MenuItem\n              icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n              onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n              disabled={!canShowReactionsCount && !seenByDatesCount}\n            >\n              <span className=\"MessageContextMenu--seen-by-label-wrapper\">\n                <span className=\"MessageContextMenu--seen-by-label\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                  {canShowReactionsCount && message.reactors?.count ? (\n                    canShowSeenBy && seenByDatesCount\n                      ? oldLang(\n                        'Chat.OutgoingContextMixedReactionCount',\n                        [message.reactors.count, seenByDatesCount],\n                      )\n                      : oldLang('Chat.ContextReactionCount', message.reactors.count, 'i')\n                  ) : (\n                    seenByDatesCount === 1 && seenByRecentPeers\n                      ? renderText(\n                        isUserId(seenByRecentPeers[0].id)\n                          ? getUserFullName(seenByRecentPeers[0] as ApiUser)!\n                          : (seenByRecentPeers[0] as ApiChat).title,\n                      ) : (\n                        seenByDatesCount\n                          ? oldLang('Conversation.ContextMenuSeen', seenByDatesCount, 'i')\n                          : oldLang('Conversation.ContextMenuNoViews')\n                      )\n                  )}\n                </span>\n              </span>\n              <AvatarList className=\"avatars\" size=\"micro\" peers={seenByRecentPeers} />\n            </MenuItem>\n          </>\n        )}\n        {(canLoadReadDate || shouldRenderShowWhen || isEdited) && (\n          <MenuSeparator size={hasCustomEmoji ? 'thin' : 'thick'} />\n        )}\n        {(canLoadReadDate || shouldRenderShowWhen) && (\n          <ReadTimeMenuItem\n            canLoadReadDate={canLoadReadDate}\n            shouldRenderShowWhen={shouldRenderShowWhen}\n            message={message}\n            closeContextMenu={onClose}\n          />\n        )}\n        {isEdited && (\n          <LastEditTimeMenuItem\n            message={message}\n          />\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatReactions,\n  ApiMessage,\n  ApiPoll,\n  ApiReaction,\n  ApiStickerSet,\n  ApiStickerSetInfo,\n  ApiThreadInfo,\n  ApiTypeStory,\n  ApiWebPage,\n} from '../../../api/types';\nimport type {\n  ActiveDownloads,\n  IAlbum,\n  IAnchorPosition,\n  MessageListType,\n  ThreadId,\n} from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { PREVIEW_AVATAR_COUNT, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getCanPostInChat,\n  getIsDownloading,\n  getMessageVideo,\n  getUserFullName,\n  hasMessageTtl,\n  isActionMessage,\n  isChatChannel,\n  isChatGroup,\n  isMessageLocal,\n  isOwnMessage,\n  isUserRightBanned,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActionsSlow,\n  selectBot,\n  selectCanForwardMessage,\n  selectCanGift,\n  selectCanPlayAnimatedEmojis,\n  selectCanScheduleUntilOnline,\n  selectCanTranslateMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsMessageUnread,\n  selectIsPremiumPurchaseBlocked,\n  selectIsReactionPickerOpen,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectIsMessageInFocusList,\n  selectPeerStory,\n  selectPollFromMessage,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSavedDialogIdFromMessage,\n  selectStickerSet,\n  selectThreadInfo,\n  selectTopic,\n  selectUser,\n  selectUserStatus,\n  selectWebPageFromMessage,\n} from '../../../global/selectors';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getSelectionAsFormattedText } from './helpers/getSelectionAsFormattedText';\nimport { isSelectionRangeInsideMessage } from './helpers/isSelectionRangeInsideMessage';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport PinMessageModal from '../../common/PinMessageModal.async';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  repliesThreadInfo?: ApiThreadInfo;\n  className?: string;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  threadId?: ThreadId;\n  poll?: ApiPoll;\n  webPage?: ApiWebPage;\n  story?: ApiTypeStory;\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canAppendTodoList?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  isMessageTranslated?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  canLoadReadDate?: boolean;\n  shouldRenderShowWhen?: boolean;\n  activeDownloads: ActiveDownloads;\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  reactionsLimit?: number;\n  canPlayAnimatedEmojis?: boolean;\n  isReactionPickerOpen?: boolean;\n  isInSavedMessages?: boolean;\n  isChannel?: boolean;\n  canReplyInChat?: boolean;\n  isWithPaidReaction?: boolean;\n  userFullName?: string;\n  canGift?: boolean;\n  savedDialogId?: string;\n  isInFocusList?: boolean;\n};\n\nconst selection = window.getSelection();\nconst UNQUOTABLE_OFFSET = -1;\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  threadId,\n  availableReactions,\n  topReactions,\n  defaultTagReactions,\n  isOpen,\n  messageListType,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  poll,\n  webPage,\n  story,\n  anchor,\n  targetHref,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canShowReactionsCount,\n  chat,\n  canReport,\n  canShowReactionList,\n  canEdit,\n  canAppendTodoList,\n  enabledReactions,\n  reactionsLimit,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canPlayAnimatedEmojis,\n  canLoadReadDate,\n  shouldRenderShowWhen,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  isMessageTranslated,\n  canShowOriginal,\n  canSelectLanguage,\n  isReactionPickerOpen,\n  isInSavedMessages,\n  canReplyInChat,\n  isWithPaidReaction,\n  userFullName,\n  canGift,\n  className,\n  savedDialogId,\n  isInFocusList,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    openThread,\n    updateDraftReplyInfo,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    openReplyMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMedia,\n    cancelMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openChatLanguageModal,\n    openMessageReactionPicker,\n    openPremiumModal,\n    loadOutboxReadDate,\n    copyMessageLink,\n    openDeleteMessageModal,\n    addLocalPaidReaction,\n    openPaidReactionModal,\n    reportMessages,\n    openTodoListModal,\n    showNotification,\n    forwardToSavedMessages,\n    deleteMessages,\n    addToFocusList,\n    removeFromFocusList,\n    toggleFocusList,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { ref: containerRef } = useShowTransition({\n    isOpen,\n    onCloseAnimationEnd,\n    className: false,\n  });\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n  const [selectionQuoteOffset, setSelectionQuoteOffset] = useState(UNQUOTABLE_OFFSET);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n  const [requestRemindMeCalendar, remindMeCalendar] = useSchedule(false, onClose, message.date, true);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canLoadReadDate && isOpen) {\n      loadOutboxReadDate({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canLoadReadDate, isOpen, message.chatId, message.id, message.readDate]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentPeers = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    if (message.reactions?.recentReactions?.length) {\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(\n        ({ peerId }) => usersById[peerId] || chatsById[peerId],\n      ));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, PREVIEW_AVATAR_COUNT);\n    }\n\n    if (!message.seenByDates) {\n      return undefined;\n    }\n\n    return Object.keys(message.seenByDates).slice(0, PREVIEW_AVATAR_COUNT)\n      .map((id) => usersById[id] || chatsById[id])\n      .filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByDates]);\n\n  const isDownloading = useMemo(() => {\n    const global = getGlobal();\n    if (album) {\n      return album.messages.some((msg) => {\n        const downloadableMedia = selectMessageDownloadableMedia(global, msg);\n        if (!downloadableMedia) return false;\n        return getIsDownloading(activeDownloads, downloadableMedia);\n      });\n    }\n\n    const downloadableMedia = selectMessageDownloadableMedia(global, message);\n    if (!downloadableMedia) return false;\n    return getIsDownloading(activeDownloads, downloadableMedia);\n  }, [activeDownloads, album, message]);\n\n  const selectionRange = canReply && selection?.rangeCount ? selection.getRangeAt(0) : undefined;\n\n  useEffect(() => {\n    if (isMessageTranslated) {\n      setSelectionQuoteOffset(UNQUOTABLE_OFFSET);\n      return;\n    }\n\n    const isMessageTextSelected = selectionRange\n      && !selectionRange.collapsed\n      && Boolean(message.content.text?.text)\n      && isSelectionRangeInsideMessage(selectionRange);\n\n    if (!isMessageTextSelected) {\n      setSelectionQuoteOffset(UNQUOTABLE_OFFSET);\n      return;\n    }\n\n    const selectionText = getSelectionAsFormattedText(selectionRange);\n\n    const messageText = message.content.text!.text.replace(/\\u00A0/g, ' ');\n\n    const canQuote = selectionText.text.trim().length > 0\n      && messageText.includes(selectionText.text);\n    if (!canQuote) {\n      setSelectionQuoteOffset(UNQUOTABLE_OFFSET);\n      return;\n    }\n\n    setSelectionQuoteOffset(selectionRange.startOffset);\n  }, [\n    selectionRange, selectionRange?.collapsed, selectionRange?.startOffset, selectionRange?.endOffset,\n    isMessageTranslated, message.content.text,\n  ]);\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    closeMenu();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    openDeleteMessageModal({\n      chatId: message.chatId,\n      messageIds,\n      isSchedule: messageListType === 'scheduled',\n    });\n  });\n\n  const handleAddToFocus = useLastCallback(() => {\n    closeMenu();\n    addToFocusList({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n    toggleFocusList({ force: true });\n  });\n\n  const handleRemoveFromFocus = useLastCallback(() => {\n    closeMenu();\n    removeFromFocusList({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  const closePinModal = useLastCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  });\n\n  const handleReply = useLastCallback(() => {\n    const quoteText = selectionQuoteOffset !== UNQUOTABLE_OFFSET && selectionRange\n      ? getSelectionAsFormattedText(selectionRange) : undefined;\n    if (!canReplyInChat) {\n      openReplyMenu({\n        fromChatId: message.chatId, messageId: message.id, quoteText, quoteOffset: selectionQuoteOffset,\n      });\n    } else {\n      updateDraftReplyInfo({\n        replyToMsgId: message.id,\n        quoteText,\n        quoteOffset: selectionQuoteOffset,\n        monoforumPeerId: savedDialogId,\n        replyToPeerId: undefined,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleEdit = useLastCallback(() => {\n    if (message.content.todo) {\n      openTodoListModal({\n        chatId: message.chatId,\n        messageId: message.id,\n      });\n    } else {\n      setEditingId({ messageId: message.id });\n    }\n    closeMenu();\n  });\n\n  const handleAppendTodoList = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('SubscribeToTelegramPremiumForAppendToDo'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'todo' },\n        },\n        actionText: oldLang('PremiumMore'),\n      });\n    } else {\n      openTodoListModal({\n        chatId: message.chatId,\n        messageId: message.id,\n        forNewTask: true,\n      });\n    }\n    closeMenu();\n  });\n\n  const handlePin = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  });\n\n  const handleUnpin = useLastCallback(() => {\n    pinMessage({ chatId: message.chatId, messageId: message.id, isUnpin: true });\n    closeMenu();\n  });\n\n  const handleMoveToBottom = useLastCallback(() => {\n    closeMenu();\n    const messageIds = album?.messages ? album.messages.map(({ id }) => id) : [message.id];\n    \n    openForwardMenu({ fromChatId: message.chatId, messageIds });\n    forwardToSavedMessages();\n    \n    setTimeout(() => {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }, 100);\n  });\n\n  const handleForward = useLastCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  });\n\n  const handleFaveSticker = useLastCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleUnfaveSticker = useLastCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleCancelVote = useLastCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handlePollClose = useLastCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleSelectMessage = useLastCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  });\n\n  const handleScheduledMessageSend = useLastCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  });\n\n  const handleRescheduleMessage = useLastCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  });\n\n  const handleOpenCalendar = useLastCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  });\n\n  const handleRemindScheduleMessage = useLastCallback((scheduledAt: number) => {\n    forwardToSavedMessages({ scheduledAt });\n    onClose();\n  });\n\n  const handleRemindMe = useLastCallback(() => {\n    const messageIds = album?.messages ? album.messages.map(({ id }) => id) : [message.id];\n    openForwardMenu({ fromChatId: message.chatId, messageIds, isRemindMe: true });\n    setIsMenuOpen(false);\n\n    requestRemindMeCalendar(handleRemindScheduleMessage);\n  });\n\n  const handleOpenSeenByModal = useLastCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleOpenReactorListModal = useLastCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleCopyMessages = useLastCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    copyMessageLink({\n      chatId: message.chatId,\n      messageId: message.id,\n      shouldIncludeThread: threadId !== MAIN_THREAD_ID,\n      shouldIncludeGrouped: true, // TODO: Provide correct value when ability to target specific message is added\n    });\n    closeMenu();\n  });\n\n  const handleCopyNumber = useLastCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  });\n\n  const handleDownloadClick = useLastCallback(() => {\n    const global = getGlobal();\n    (album?.messages || [message]).forEach((msg) => {\n      const downloadableMedia = selectMessageDownloadableMedia(global, msg);\n      if (!downloadableMedia) return;\n\n      if (isDownloading) {\n        cancelMediaDownload({ media: downloadableMedia });\n      } else {\n        downloadMedia({ media: downloadableMedia, originMessage: msg });\n      }\n    });\n    closeMenu();\n  });\n\n  const handleSaveGif = useLastCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    if (isInSavedMessages && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n    } else {\n      toggleReaction({\n        chatId: message.chatId, messageId: message.id, reaction, shouldAddToRecent: true,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleSendPaidReaction = useLastCallback(() => {\n    addLocalPaidReaction({\n      chatId: message.chatId, messageId: message.id, count: 1,\n    });\n    closeMenu();\n  });\n\n  const handlePaidReactionModalOpen = useLastCallback(() => {\n    openPaidReactionModal({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n\n    closeMenu();\n  });\n\n  const handleReactionPickerOpen = useLastCallback((position: IAnchorPosition) => {\n    openMessageReactionPicker({ chatId: message.chatId, messageId: message.id, position });\n  });\n\n  const handleTranslate = useLastCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleShowOriginal = useLastCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleSelectLanguage = useLastCallback(() => {\n    openChatLanguageModal({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n    closeMenu();\n  });\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  const handleReport = useLastCallback(() => {\n    if (!chat) return;\n    setIsMenuOpen(false);\n    onClose();\n    reportMessages({\n      chatId: chat.id, messageIds: reportMessageIds,\n    });\n  });\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div ref={containerRef} className={buildClassName('ContextMenuContainer', className)}>\n      <MessageContextMenu\n        isReactionPickerOpen={isReactionPickerOpen}\n        availableReactions={availableReactions}\n        topReactions={topReactions}\n        defaultTagReactions={defaultTagReactions}\n        isWithPaidReaction={isWithPaidReaction}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        reactionsLimit={reactionsLimit}\n        anchor={anchor}\n        targetHref={targetHref}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canQuote={selectionQuoteOffset !== UNQUOTABLE_OFFSET}\n        canDelete={canDelete}\n        canPin={canPin}\n        canReport={canReport}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canAppendTodoList={canAppendTodoList}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n        shouldRenderShowWhen={shouldRenderShowWhen}\n        canLoadReadDate={canLoadReadDate}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentPeers={seenByRecentPeers}\n        isInSavedMessages={isInSavedMessages}\n        noReplies={noReplies}\n        poll={poll}\n        webPage={webPage}\n        story={story}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onAppendTodoList={handleAppendTodoList}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onSendPaidReaction={handleSendPaidReaction}\n        onShowPaidReactionModal={handlePaidReactionModalOpen}\n        onShowReactors={handleOpenReactorListModal}\n        onReactionPickerOpen={handleReactionPickerOpen}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n        onMoveToBottom={handleMoveToBottom}\n        onAddToFocus={handleAddToFocus}\n        onRemoveFromFocus={handleRemoveFromFocus}\n        userFullName={userFullName}\n        canGift={canGift}\n        isInFocusList={isInFocusList}\n        onRemindMe={handleRemindMe}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={oldLang('lng_polls_stop_warning')}\n        confirmLabel={oldLang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n      {canForward && remindMeCalendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): Complete<StateProps> => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n\n    const { defaultTags, topReactions, availableReactions } = global.reactions;\n\n    const activeDownloads = selectActiveDownloads(global);\n    const chat = selectChat(global, message.chatId);\n    const isPrivate = chat && isUserId(chat.id);\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, message.chatId) : undefined;\n    const user = selectUser(global, message.chatId);\n    const userFullName = user && getUserFullName(user);\n\n    const {\n      seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions, readDateExpiresAt,\n    } = global.appConfig;\n\n    const reactionsLimit = chatFullInfo?.reactionsLimit || maxUniqueReactions;\n\n    const {\n      noOptions,\n      canReplyGlobally,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActionsSlow(global, message, threadId)) || {};\n    const canForward = selectCanForwardMessage(global, message);\n\n    const userStatus = isPrivate ? selectUserStatus(global, chat.id) : undefined;\n    const isOwn = isOwnMessage(message);\n    const chatBot = chat && selectBot(global, chat.id);\n    const isBot = Boolean(chatBot);\n    const isMessageUnread = selectIsMessageUnread(global, message);\n    const canLoadReadDate = Boolean(\n      isPrivate\n      && isOwn\n      && !isBot\n      && !isMessageUnread\n      && readDateExpiresAt\n      && message.date > Date.now() / 1000 - readDateExpiresAt\n      && !userStatus?.isReadDateRestricted\n      && messageListType !== 'scheduled',\n    );\n    const shouldRenderShowWhen = Boolean(\n      canLoadReadDate && isPrivate && selectUserStatus(global, chat.id)?.isReadDateRestrictedByMe,\n    );\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n\n    const threadInfo = threadId && selectThreadInfo(global, message.chatId, threadId);\n    const isMessageThread = Boolean(threadInfo && !threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = threadId ? selectTopic(global, message.chatId, threadId) : undefined;\n\n    const canSendText = chat && !isUserRightBanned(chat, 'sendPlain', chatFullInfo);\n\n    const canReplyInChat = chat && threadId ? getCanPostInChat(chat, topic, isMessageThread, chatFullInfo)\n      && canSendText : false;\n\n    const isLocal = isMessageLocal(message);\n    const hasTtl = hasMessageTtl(message);\n    const canShowSeenBy = Boolean(!isLocal\n      && chat\n      && !chat.isMonoforum\n      && !isMessageUnread\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedMessageTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n    const canTranslate = !hasTranslation && selectCanTranslateMessage(global, message, detectedLanguage);\n    const isChatTranslated = selectRequestedChatTranslationLanguage(global, message.chatId);\n\n    const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n\n    const poll = selectPollFromMessage(global, message);\n    const webPage = selectWebPageFromMessage(global, message);\n    const storyData = message.content.storyData;\n    const story = storyData ? selectPeerStory(global, storyData.peerId, storyData.id) : undefined;\n\n    const canGift = selectCanGift(global, message.chatId);\n\n    const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n    const todoItemsMax = global.appConfig.todoItemsMax;\n    const canAppendTodoList = message.content.todo?.todo.othersCanAppend\n      && message.content.todo?.todo.items?.length < todoItemsMax;\n\n    return {\n      threadId,\n      chat,\n      availableReactions,\n      topReactions,\n      defaultTagReactions: defaultTags,\n      noOptions,\n      canReport,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReplyGlobally,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canEdit: !isPinned && canEdit,\n      canAppendTodoList,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: (canCopyNumber || (!isProtected && canCopy)),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      canLoadReadDate,\n      shouldRenderShowWhen,\n      enabledReactions: chat?.isForbidden ? undefined : chatFullInfo?.enabledReactions,\n      reactionsLimit,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chatFullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction\n        && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID && !hasTtl,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      canTranslate,\n      canShowOriginal: hasTranslation && !isChatTranslated,\n      canSelectLanguage: hasTranslation && !isChatTranslated,\n      isMessageTranslated: hasTranslation,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      isInSavedMessages,\n      isChannel,\n      canReplyInChat,\n      isWithPaidReaction: chatFullInfo?.isPaidReactionAvailable,\n      poll,\n      story,\n      userFullName,\n      canGift,\n      savedDialogId,\n      webPage,\n      isInFocusList: selectIsMessageInFocusList(global, message.chatId, message.id),\n    };\n  },\n)(ContextMenuContainer));\n","export function isSelectionRangeInsideMessage(range: Range) {\n  const ancestor = range.commonAncestorContainer;\n  const el = ancestor.nodeType === Node.TEXT_NODE\n    ? ancestor.parentNode! as Element\n    : ancestor as Element;\n\n  return Boolean(el.closest('.message-content-wrapper .text-content'))\n    && !(Boolean(el.closest('.EmbeddedMessage')) || Boolean(el.closest('.WebPage')));\n}\n"],"names":["useImageLoader","file","urlRef","useRef","result","image","useAsync","Promise","resolve","undefined","current","URL","revokeObjectURL","url","createObjectURL","preloadImage","useEffect","useTransitionActiveKey","deps","noAnimation","activeKey","useMemo","memo","withGlobal","global","peerId","forceShowSelf","peer","isSavedMessages","selectPeer","user","selectUser","isSelf","PeerChip","icon","title","isMinimized","canClose","isCloseNonDestructive","clickArg","mockPeer","customPeer","className","withPeerColors","withEmojiStatus","onClick","itemClassName","lang","useOldLang","apiPeer","anyPeer","chat","isApiPeerChat","iconElement","titleElement","titleText","_jsx","children","Icon","name","style","Avatar","size","getPeerTitle","FullNameTitle","fullClassName","buildClassName","isForum","isAvatarSquare","getPeerColorClass","_jsxs","dir","isRtl","ref","shouldFocusOnResize","focusLastMessage","getActions","messageHeightRef","handleResize","useLastCallback","entry","lastHeight","newHeight","contentRect","height","isAnimatingScroll","container","target","closest","beginHeavyAnimation","resizeDiff","offsetHeight","scrollHeight","scrollTop","Math","round","throttledResize","useThrottledCallback","useResizeObserver","callback","delay","savedCallback","id","setTimeout","clearTimeout","PasswordForm","isLoading","isPasswordVisible","error","hint","placeholder","submitLabel","description","shouldShowSubmit","shouldResetValue","shouldDisablePasswordManager","noRipple","onClearError","onChangePasswordVisibility","onInputChange","onSubmit","inputRef","useLang","isMobile","useAppLayout","password","setPassword","useState","canSubmit","setCanSubmit","focusDelayTimeoutMs","useTimeout","IS_TOUCH_ENV","focus","requestMutation","select","action","event","preventDefault","stopEvent","autoComplete","type","tabIndex","value","spellCheck","IS_TAURI","onChange","e","length","MIN_PASSWORD_LENGTH","maxLength","role","Button","ripple","disabled","getPointerPosition","x","touches","clientX","y","clientY","ReactionStaticEmoji","reaction","availableReactions","withIconHeart","observeIntersection","availableReaction","find","available","isSameReaction","staticIconId","staticIcon","mediaHash","mediaData","useMedia","transitionClassNames","useMediaTransitionDeprecated","shouldApplySizeFix","emoticon","shouldReplaceWithHeartIcon","CustomEmoji","documentId","observeIntersectionForPlaying","src","blankUrl","alt","draggable","PremiumProgress","leftText","rightText","floatingBadgeText","floatingBadgeIcon","progress","isPrimary","isNegative","animationDirection","floatingBadgeContentRef","parentContainerRef","shiftX","setShiftX","beakPosition","setBeakPosition","badgeWidth","setBadgeWidth","prevBadgeWidth","usePrevious","positiveProgress","setPositiveProgress","negativeProgress","setNegativeProgress","badgeProgress","setBadgeProgress","layerProgress","setLayerProgress","showLayer","setShowLayer","disableMainProgressTransition","setDisableMainProgressTransition","disableLayerProgressTransition","setDisableLayerProgressTransition","hideMainLayer","setHideMainLayer","isCycling","setIsCycling","badgeActiveKey","shouldAnimateCaptionsRef","prevLeftText","prevRightText","prevIsNegative","CORNER_BEAK_THRESHOLD","BEAK_WIDTH_PX","REM","BADGE_HORIZONTAL_PADDING_PX","updateBadgePosition","parentWidth","offsetWidth","halfBadgeWidth","minBadgeShift","maxBadgeShift","halfBeakWidth","currentShift","safeShift","max","min","newBeakPositionPx","clientWidth","forceUpdate","useForceUpdate","useSyncEffect","timeoutId","timeoutMs","LAYER_PROGRESS_TRANSITION_MS","window","shouldAnimateCaptions","hasFloatingBadge","Boolean","displayLeftText","displayRightText","prevProgress","timers","targetProgress","setMainProgress","isForward","push","forEach","renderProgressLayer","isPositive","currentProgress","layerClassName","disableTransition","typeClass","styles","buildStyle","Transition","shouldCleanup","width","viewBox","fill","d","props","isOpen","CalendarModal","useModuleLoader","Bundles","Extra","useSchedule","canScheduleUntilOnline","onCancel","openAt","isRemindMe","onScheduled","setOnScheduled","handleMessageSchedule","date","isWhenOnline","scheduledAt","getTime","Date","now","getServerTimeOffset","handleMessageScheduleUntilOnline","SCHEDULED_WHEN_ONLINE","handleCloseCalendar","requestCalendar","whenScheduled","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","withTimePicker","selectedAt","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onClose","onSecondButtonClick","AvatarList","peers","limit","badgeText","pxSize","AVATAR_SIZES","renderingBadgeText","slice","map","MediaSpoiler","isVisible","withAnimation","thumbDataUri","isNsfw","shouldRender","useShowTransitionDeprecated","canvasRef","useCanvasBlur","handleClick","el","rect","currentTarget","getBoundingClientRect","left","top","shiftY","setAttribute","resolveTransitionName","animationLevel","isDisabled","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MED","IS_ANDROID","IS_IOS","AVATAR_SIZE","ChannelPhotoAction","channelPhoto","photo","loopIndefinitely","withVideo","sticker","selectGiftStickerForDuration","months","selectGiftStickerForStars","stars","selectGiftStickerForTon","cryptoAmount","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","GiftAction","observeIntersectionForLoading","stickerRef","message","contentBox","stickerWrapper","StickerView","containerRef","noLoad","info","pluralValue","amount","renderTonTitle","cryptoCurrency","formatCurrency","asFontIcon","renderTextWithEntities","actionButton","Sparkles","preset","currentUserId","channel","boostPeerId","selectChat","GiveawayPrizeAction","sender","channelLink","channelTitle","channelFallbackText","renderPeerLink","peerLink","peerTitle","peerFallbackText","isViaGiveaway","withNodes","withMarkdown","renderTextFilters","translateWithYou","currentUser","messageSender","selectSender","giftSender","fromId","messageRecipient","isOutgoing","chatId","recipient","starGiftMaxConvertPeriod","appConfig","StarGiftAction","isHover","markHover","unmarkHover","useFlag","getStickerFromGift","gift","isChannel","isChatChannel","backgroundColor","useDynamicColorListener","availabilityTotal","fallbackPeerTitle","giftDescription","starsAmount","starsToConvert","formatStarsAsText","isUpgraded","alreadyPaidUpgradeStars","isConverted","getServerTime","starGift","onMouseEnter","onMouseLeave","shouldLoop","GiftRibbon","color","text","total","formatIntegerCompact","subtitle","attributes","getGiftAttributes","model","pattern","backdrop","backgroundColors","centerColor","edgeColor","adaptedPatternColor","patternColor","tableData","shouldShowFrom","isUpgrade","uniqueGift","uniqueBackgroundWrapper","RadialPatternBackground","uniqueBackground","patternIcon","patternSize","yPosition","clearBottomSector","textColor","number","MiniTable","data","valueClassName","uniqueValue","SuggestedPhotoAction","openMediaViewer","uploadProfilePhoto","showNotification","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","getPhotoMediaHash","suggestedVideoUrl","getVideoProfilePhotoMediaHash","isVideo","peerName","showAvatarNotification","payload","screen","SettingsScreens","Main","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","async","blob","fetchBlob","File","videoTs","videoSizes","l","videoStartTs","messageId","threadId","MAIN_THREAD_ID","origin","MediaViewerOrigin","SuggestedAvatar","suggestedAvatar","suggestedText","CropModal","ConfirmDialog","confirmHandler","selectMonoforumChannel","replyInfo","getMessageReplyInfo","originalSender","replyToMsgId","replyMessage","selectReplyMessage","ageMinSeconds","starsSuggestedPostAgeMin","isAdmin","selectIsMonoforumAdmin","SuggestedPostApproval","oldLang","scheduleDate","chatTitle","getPeerFullTitle","renderChatLink","originalSenderTitle","originalSenderLink","publishDate","formatScheduledDateTime","isPostPublished","currency","amountValue","formattedAmount","TON_CURRENCY_CODE","formatTonAsText","convertTonFromNanos","duration","formatShortDuration","suggestedPostContentBox","suggestedPostApprovalTitle","renderText","suggestedPostApprovalSection","_Fragment","selectChatMessage","replyMessageSender","SuggestedPostBalanceTooLow","openStarsBalanceModal","handleGetMoreStars","stopPropagation","targetPeer","suggestedPostInfo","price","STARS_CURRENCY_CODE","currencyName","buyButtonText","suggestedPostBalanceTooLowBox","suggestedPostBalanceTooLowTitle","SuggestedPostRejected","rejectComment","senderTitle","senderLink","suggestedPostRejectedContentBox","suggestedPostRejectedTitle","rejectedIcon","suggestedPostRejectedComment","comment","SimilarChannel","openChat","fallbackColor","setColor","imgBlobUrl","getChatAvatarHash","ApiMediaFormat","BlobUrl","averageColor","getAverageColor","rgb2hex","useAverageColor","membersCount","MoreChannels","channelsCount","isCurrentUserPremium","openPremiumModal","openChatWithInfo","shouldReplaceHistory","profileTab","forceScrollProfileTab","similarChannelIds","isExpanded","count","selectSimilarChannelIds","selectIsCurrentUserPremium","chatFullInfo","selectChatFullInfo","channelJoinInfo","joinInfo","SimilarChannels","toggleChannelRecommendations","loadChannelRecommendations","isShowing","markShowing","markNotShowing","isHiding","markHiding","markNotHiding","ignoreAutoScrollRef","similarChannels","getGlobal","filter","shouldRenderSkeleton","setShouldRenderSkeleton","firstSimilarChannels","areSimilarChannelsPresent","shouldRenderChannels","useHorizontalScroll","scrollIntoView","behavior","handleToggle","joinedDate","Skeleton","xmlns","i","SHOW_CHANNELS_NUMBER","SINGLE_LINE_ACTIONS","Set","HIDDEN_TEXT_ACTIONS","tabState","selectTabState","themes","settings","isInsideTopic","replyToPeerId","isFocused","selectIsMessageFocused","direction","focusDirection","noHighlight","noFocusHighlight","isResizingContainer","scrollTargetPosition","focusedMessage","hasUnreadReaction","unreadReactions","includes","isAccountFrozen","selectIsCurrentUserFrozen","isInSelectMode","selectIsInSelectMode","selectTheme","ActionMessage","appearanceOrder","isJustAdded","isLastInList","memoFirstUnreadIdRef","getIsMessageListReady","onIntersectPinnedMessage","observeIntersectionForBottom","requestConfetti","getReceipt","checkGiftCode","openPrizeStarsTransactionFromGiveaway","openStarsTransactionFromGift","openGiftInfoModalFromMessage","animateUnreadReaction","markMentionsRead","focusMessage","content","isLocal","isLocalMessageId","isTextHidden","has","isSingleLine","isFluidMultiline","IS_FLUID_BACKGROUND_SUPPORTED","isClickableText","messageReplyInfo","withServiceReactions","areReactionsPossible","reactions","results","shouldSkipRender","isTouchScreen","useOnIntersect","useMessageResizeObserver","useEnsureMessage","useFocusMessage","elementRef","useUnmountCleanup","isPinned","viewportPinnedIdsToRemove","isContextMenuOpen","contextMenuAnchor","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","noAppearanceAnimation","isShown","markShown","MESSAGE_APPEARANCE_DELAY","refWithTransition","useShowTransition","noOpenTransition","noCloseTransition","bottomMarker","isElementInViewport","messageIds","hasUnreadMention","fluidBackgroundStyle","useFluidBackgroundFilter","ChannelAvatar","slug","isGift","fromUserId","toUserId","monthsAmount","fullContent","ChannelPhoto","SuggestedPhoto","GiveawayPrize","Gift","StarGift","StarGiftUnique","isBalanceTooLow","isRejected","getMessageHtmlId","root","singleLine","fluidMultiline","hasFullContent","onMouseDown","preventMessageInputBlur","onContextMenu","inlineWrapper","hoverable","fluidBackground","ActionMessageText","textContent","ContextMenuContainer","anchor","messageListType","contextContainer","onCloseAnimationEnd","Reactions","isOutside","shouldPreventDefault","handleScroll","deltaX","scrollLeft","deltaY","addEventListener","passive","removeEventListener","MIN_SIZE","ringsCount","ovalFactor","withLinearGradient","getContainerSize","setContainerSize","useSignal","dpr","useDevicePixelRatio","emojiImage","setEmojiImage","previewMediaHash","getStickerMediaHash","previewUrl","then","patternPositions","coordinates","ring","ringItemCount","floor","ringProgress","ringRadius","angleShift","PI","angle","xOffset","cos","yOffset","sin","sizeFactor","random","clientHeight","draw","canvas","ctx","getContext","centerX","centerY","clearRect","renderX","renderY","drawImage","fillStyle","hex","factor","rgba","hexToRgb","r","g","b","a","toString","adjustBrightness","globalCompositeOperation","fillRect","radialGradient","createRadialGradient","addColorStop","translate","scale","fillHeight","useLayoutEffect","display","windowHeight","windowSize","get","ICON_SIZE","EFFECT_SIZE","MAX_EFFECT_COUNT","QUALITY","containerId","activeReactions","withEffects","selectPerformanceSettingsValue","PaidReactionEmoji","effectSize","localAmount","stopActiveReaction","effectRef","effectsIds","setEffectsIds","isIntersecting","useIsIntersecting","activeReaction","active","shouldPlayEffect","canAddMoreEffects","useEffectWithPrevDeps","prevLocalAmount","prev","shouldRenderEffect","noMountTransition","withShouldRender","handleEnded","newEffectsIds","rootClassName","animating","teactFastList","StarIcon","AnimatedIcon","effect","tgsUrl","LOCAL_TGS_URLS","StarReactionEffect","play","noLoop","forceAlways","nonInteractive","quality","onEnded","REACTION_SIZE","selectStarsState","ReactionButton","isOwnMessage","recentReactors","chosenClassName","onPaidClick","resetLocalPaidReactions","openPaidReactionModal","requestWave","counterRef","animationRef","isPaid","starsState","useSelector","areStarsLoaded","handlePaidClick","prevReaction","button","balance","originReaction","startX","startY","currentScale","Number","getComputedStyle","cancel","animate","offset","easing","prevAmount","shouldRenderPaidCounter","own","paid","outside","isReactionChosen","chosen","animatedEmoji","AnimatedCounter","paidCounter","ReactionAnimatedEmoji","counter","maxWidth","metaChildren","noRecentReactors","tags","toggleReaction","addLocalPaidReaction","updateMiddleSearch","performMiddleSearch","openFrozenAccountModal","areTags","recentReactions","totalCount","reduce","acc","recentReactorsByReactionKey","recentReaction","key","getReactionKey","messageKey","getMessageKey","reactionKey","shouldHideRecentReactors","tag","isChosen","update","savedTag","initialSection","paidLocalCount","localId","cacheBreaker","dismissAction","shouldShowTimer","disableClickDismiss","handleRemoveReaction","useEffectOnce","SavedTagButton","withContextMenu","onRemove","CustomEmojiEffect","isLottie","particleSize","stickerHash","getStickerHashById","previewMediaData","paths","IS_OFFSET_PATH_SUPPORTED","Array","from","generateRandomDropPath","path","withSharedAnimation","onAnimationEnd","MIN_PARTICLE_SIZE","genericEmojiEffects","genericEffects","withEffectOnly","shouldPause","loopLimit","isCustom","centerIconId","centerIcon","customEmoji","useCustomEmoji","assignedEffectId","aroundAnimation","assignedId","emoji","effectId","stickers","mediaHashCenterIcon","mediaHashEffect","mediaDataCenterIcon","mediaDataEffect","shouldPlayCenter","animationClassNames","shouldRenderCenter","centerAnimationClassNames","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldShowStatic","shouldRenderStatic","staticClassNames","noPlay","noVideoOnMobile","AnimatedSticker","animatedIcon","roundToNearestEven","onLoad","RADIUS","ITERATIONS","dataUri","withRaf","radius","preferredWidth","preferredHeight","isStarted","img","Image","processBlur","alpha","IS_CANVAS_FILTER_SUPPORTED","fastBlur","onload","requestMeasure","PickerItem","avatarElement","inputElement","inputPosition","inactive","titleClassName","subtitleClassName","onDisabledClick","isClickable","RippleEffect","SVG_MAP","Map","SvgFluidBackgroundFilter","referenceCount","constructor","this","filterId","addSvgDefinition","SVG_NAMESPACE","in","stdDeviation","mode","values","in2","operator","getFilterId","removeReference","removeSvgDefinition","isUsed","asValue","colorFilter","delete","prepareStyle","svg","set","renderMessageText","highlight","emojiSize","asPreview","truncateLength","isProtected","forcePlayback","shouldRenderAsHtml","isForMediaViewer","maxTimestamp","entities","contentNotSupportedText","getMessageTextWithFallback","getTranslationFn","trimText","renderMessageSummary","noEmoji","TRUNCATED_SUMMARY_LENGTH","statefulContent","getMessageStatefulContent","hasSpoilers","some","ApiMessageEntityTypes","Spoiler","hasCustomEmoji","getMessageSummaryText","getMessageSummaryEmoji","emojiWithSpace","getMessageSummaryDescription","isArray","replyOriginForId","loadMessage","ITEM_CLASS_NAME","PeerPicker","categories","itemIds","categoryPlaceholderKey","filterValue","filterPlaceholder","notFoundText","searchInputId","noScrollRestore","isSearchable","lockedUnselectedSubtitle","isViewOnly","itemInputType","withStatus","withPeerTypes","withPeerUsernames","withDefaultPadding","onFilterChange","onLoadMore","optionalProps","allowMultiple","lockedSelectedIds","lockedUnselectedIds","selectedCategories","selectedCategory","MEMO_EMPTY_ARRAY","selectedIds","selectedId","shouldMinimize","focusNoScroll","lockedSelectedIdsSet","lockedUnselectedIdsSet","unlockedSelectedIds","categoriesByType","buildCollectionByKey","sortedItemIds","lockedSelectedBucket","unlockedBucket","lockedUnselectableBucket","concat","handleItemClick","categoryType","newSelectedCategories","splice","indexOf","onSelectedCategoriesChange","newSelectedIds","onSelectedIdsChange","onSelectedCategoryChange","onSelectedIdChange","handleFilterChange","viewportIds","getMore","useInfiniteScroll","renderItem","useCallback","isCategory","category","peerOrCategory","DEBUG","isAlwaysUnselected","isAlwaysSelected","isLocked","isChecked","username","getMainUsername","getGroupStatus","userStatus","selectUserStatus","getUserStatus","isUserOnline","onlineStatus","langKey","getPeerTypeKey","getSubtitle","Radio","checked","onlyInput","Checkbox","beforeChildren","pickerCategoryTitle","header","peerChip","InputText","InfiniteScroll","pickerList","padded","items","itemSelector","Loading","noResults","useRunDebounced","ms","noFirst","noLast","useDebouncedCallback","cb","DEFAULT_DURATION","stopById","animateHorizontalScroll","selectCanAnimateInterface","getAttribute","containerWidth","scrollWidth","dataset","scrollId","remainingPath","isStopped","scrollSnapType","startAt","cleanup","t","currentPath","transition","CUSTOM_PEER_PREMIUM","isCustomPeer","titleKey","subtitleKey","avatarIcon","withPremiumGradient","CUSTOM_PEER_INCLUDED_CHAT_TYPES","peerColorId","CUSTOM_PEER_EXCLUDED_CHAT_TYPES","CUSTOM_PEER_HIDDEN","loadedPreviewUrls","otherProps","isThumbOpen","unmarkThumbOpen","thumbClassNames","isPreviewOpen","markPreviewOpen","unmarkPreviewOpen","previewClassNames","isAnimationReady","markAnimationReady","handlePreviewLoad","add","handleAnimationReady","useCustomBackground","theme","settingValue","setThemeSettings","setValue","startsWith","cacheApi","CUSTOM_BG_CACHE_NAME","Blob","catch","background","isBlurred","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","attr","getTotalGiftAvailability","originalDetails","getGiftAttributesFromList","scheduledAnimationsCounter","resetCounterOnTickEnd","throttleWithTickEnd","prevText","usePreviousDeprecated","shouldAnimate","characters","elements","textLength","prevTextLength","charIndex","prevTextCharIndex","unshift","renderAnimatedCharacters","UnreadBadge","maxCount","isInactive","displayCount","scrollLockEl","excludedClosestSelector","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","changedTouches","getTouchY","contains","preventDefaultForScrollKeys","HTMLElement","element","tagName","toLowerCase","isTextBox","disableScrolling","_excludedClosestSelector","document","onkeydown","enableScrolling","useFolderManagerForOrderedIds","folderId","addOrderedIdsCallback","getOrderedIds","useFolderManagerForUnreadCounters","addUnreadCountersCallback","getUnreadCounters","useAdjustedUnreadCounters","excludeOtherWorkspaces","allWorkspaces","getAdjustedUnreadCounters","useFolderManagerForChatsCount","addChatsCountCallback","getChatsCount","useFolderManagerForUnreadChatsByFolder","addUnreadChatsByFolderIdCallback","getUnreadChatsByFolderId","ReactionSelectorCustomReaction","isReady","noAppearAnimation","onToggleReaction","onSendPaidReaction","onShowPaidReactionModal","StarReaction","ReactionSelectorReaction","mediaAppearData","appearAnimation","selectAnimation","staticIconData","isFirstPlay","unmarkIsFirstPlay","isActivated","activate","deactivate","cn","createClassNameBuilder","ReactionSelector","allAvailableReactions","topReactions","defaultTagReactions","enabledReactions","currentReactions","reactionsLimit","isPrivate","isInSavedMessages","isInStoryViewer","isForEffects","effectReactions","isWithPaidReaction","onShowMore","areReactionsLocked","shouldUseCurrentReactions","allowed","filteredReactions","isCustomReaction","canSendReaction","sortedReactions","sortReactions","reactionsToRender","REACTIONS_AMOUNT","withMoreButton","userReactionIndexes","chosenReactions","chosenOrder","findIndex","handleShowMoreClick","bound","handleOpenPremiumModal","hintText","parts","split","Link","MODAL_HIDE_DELAY_MS","useInputFocusOnOpen","isConnected","blur","BOTTOM_FOCUS_OFFSET","RELOCATED_FOCUS_OFFSET","SCROLL_MAX_DISTANCE","FOCUS_MARGIN","isQuote","isInFocusList","isRelocatedRef","isRelocated","messagesContainer","isToBottom","scrollPosition","exec","maxDistance","animateScroll","position","margin","forceDirection","forceNormalContainerHeight","shouldReturnMutationFn","firstQuote","querySelector","addExtraClass","requestForcedReflow","forcePreview","thumbnail","localMediaHash","previewBlobUrl","AnimatedIconWithPreview","VERIFIED_PRIORITY_BASE","PINNED_PRIORITY_BASE","sortChatIds","chatIds","shouldPrioritizeVerified","priorityIds","orderBy","Infinity","priority","lastMessage","selectChatLastMessage","isVerified","ENTITY_CLASS_BY_NODE_NAME","B","Bold","STRONG","I","Italic","EM","INS","Underline","U","S","Strike","STRIKE","DEL","CODE","Code","PRE","Pre","BLOCKQUOTE","Blockquote","MAX_TAG_DEEPNESS","parseHtmlAsFormattedText","html","withMarkdownLinks","skipMarkdown","fragment","createElement","innerHTML","parsedHtml","replace","IS_EMOJI_SUPPORTED","parseMarkdown","RegExp","RE_LINK_TEMPLATE","_","link","parseMarkdownLinks","fixImageContent","innerText","trim","textIndex","recursionDeepness","addEntity","node","nodeType","Node","COMMENT_NODE","index","entity","rawText","entityType","nodeName","MentionName","Url","href","Email","Phone","TextUrl","getEntityTypeFromNode","rawIndex","substring","userId","language","Timestamp","timestamp","isNaN","getEntityDataFromNode","hasChildNodes","childNodes","querySelectorAll","replaceWith","ELEMENT_NODE","getMessageIdsForSelectedText","selection","getSelection","selectedFragments","rangeCount","getRangeAt","cloneContents","shouldIncludeLastMessage","focusNode","focusOffset","hasParentWithClassName","MESSAGE_CONTENT_CLASS_NAME","childElementCount","classList","messageEl","firstChild","removeChild","pop","parentNode","BadgeButton","currentArgs","onHeavyAnimationEnd","isAnimating","args","mutate","createMutateFunction","restartCurrentScrollAnimation","cancelSingleAnimation","forceDuration","FocusDirection","Static","elementHeight","currentScrollTop","containerHeight","elementTop","getOffsetToContainer","targetContainerHeight","normalHeight","scrollTo","scrollFrom","calculateScrollFrom","absPath","abs","SCROLL_SHORT_TRANSITION_MAX_DISTANCE","shortTransition","longTransition","SCROLL_MIN_DURATION","SCROLL_MAX_DURATION","prevOnHeavyAnimationEnd","animateSingle","newScrollTop","cancelScrollBlockingAnimation","COLORS","red","blue","purple","green","orange","COLOR_KEYS","Object","keys","validSvgRandomId","useUniqueId","colorKey","isDarkTheme","gradientColor","startColor","endColor","ribbon","x1","y1","x2","y2","gradientUnits","keyClassName","PromptDialog","submitText","initialValue","setText","handleTextChange","handleSubmit","Modal","isSlim","teactExperimentControlled","isText","withCount","editSavedReactionTag","menuRef","isRenamePromptOpen","openRenamePrompt","closeRenamePrompt","hasText","handleRemoveClick","handleRenameTag","newTitle","getTriggerElement","getRootElement","body","getMenuElement","getLayout","withPortal","shouldAvoidNegativePosition","tagText","tail","tailFill","Menu","autoClose","MenuItem","destructive","TargetIcon","cx","cy","stroke","isFocusListShown","isActive","selectFocusListCount","FocusListButton","toggleFocusList","preventScroll","div","ALLOWED_QUOTE_ENTITIES","getSelectionAsFormattedText","range","clonedSelection","appendChild","commonAncestorContainer","currentElement","parentElement","wrapHtmlWithMarkupTags","getSelectionAsHtml","stripEntitiesForQuote","PinMessageModal","getCopyLabel","hasSelection","editDate","formatDateAtTime","shouldRenderShowWhen","canLoadReadDate","closeContextMenu","openPrivacySettingsNoticeModal","readDate","handleOpenModal","isReadDate","MessageContextMenu","isReactionPickerOpen","poll","webPage","story","targetHref","canSendNow","canReschedule","canBuyPremium","canReply","canQuote","canEdit","canAppendTodoList","noReplies","canPin","canUnpin","canDelete","canForward","canReport","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canDownload","canSaveGif","canRevote","canClosePoll","canTranslate","canShowOriginal","canSelectLanguage","isDownloading","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentPeers","customEmojiSets","onReply","onOpenThread","onEdit","onAppendTodoList","onPin","onUnpin","onForward","onDelete","onFaveSticker","onReport","onUnfaveSticker","onSelect","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onReactionPickerOpen","onTranslate","onShowOriginal","onSelectLanguage","onMoveToBottom","onAddToFocus","onRemoveFromFocus","onRemindMe","userFullName","canGift","openStickerSet","openCustomEmojiSets","loadStickers","openGiftModal","scrollableRef","noReactions","withReactions","isEdited","seenByDates","isPremiumGift","isGiftCode","isStarGift","isStarGiftUnique","shouldShowGiftButton","isUserId","canAddOrRemoveFromFocus","canRemindMe","canMoveToBottom","showEnsoActions","areItemsHidden","hideItems","markIsReady","unmarkIsReady","isDesktop","seenByDatesCount","handleAfterCopy","handleGiftClick","forUserId","customEmojiSet","stickerSetInfo","accessHash","handleOpenCustomEmojiSets","shortName","setIds","copyOptions","afterEffect","options","getMessageText","getMessagePhoto","getWebPageVideo","getWebPagePhoto","contact","getMessageContact","canImageBeCopied","hasMediaLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","IS_SAFARI","label","handler","mediaLoader","blobUrl","copyImageToClipboard","copyTextToClipboard","anchorNode","selectionParentNode","selectedMessageElement","checkMessageHasSelection","execCommand","clipboardText","copyHtmlToClipboard","join","getMessageTextWithSpoilers","getMessageCopyOptions","groupStatefulContent","extraHeightAudioPlayer","middleColumn","getElementById","middleColumnComputedStyle","extraHeightPinned","parseFloat","getPropertyValue","extraPaddingX","extraTopPadding","extraMarginTop","menuElMinWidth","handleOpenMessageReactionPicker","withMaxHeight","customIcon","MenuSeparator","messagesCount","option","withPreventDefaultOnMouseDown","inline","withWrap","reactors","getUserFullName","ReadTimeMenuItem","LastEditTimeMenuItem","UNQUOTABLE_OFFSET","detectedLanguage","selectCurrentMessageList","defaultTags","activeDownloads","selectActiveDownloads","seenByExpiresAt","seenByMaxChatMembers","maxUniqueReactions","readDateExpiresAt","noOptions","canReplyGlobally","selectAllowedMessageActionsSlow","selectCanForwardMessage","isOwn","chatBot","selectBot","isBot","isMessageUnread","selectIsMessageUnread","isReadDateRestricted","isReadDateRestrictedByMe","isScheduled","threadInfo","selectThreadInfo","isMessageThread","isCommentsInfo","fromChannelId","topic","selectTopic","canSendText","isUserRightBanned","canReplyInChat","getCanPostInChat","isMessageLocal","hasTtl","hasMessageTtl","isMonoforum","isChatGroup","isAction","isActionMessage","areReactionsEmpty","canSeeList","selectIsMessageProtected","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","selectStickerSet","every","translationRequestLanguage","selectRequestedMessageTranslationLanguage","hasTranslation","selectMessageTranslations","selectCanTranslateMessage","isChatTranslated","selectRequestedChatTranslationLanguage","selectIsChatWithSelf","selectPollFromMessage","selectWebPageFromMessage","storyData","selectPeerStory","selectCanGift","savedDialogId","selectSavedDialogIdFromMessage","todoItemsMax","todo","othersCanAppend","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","selectIsPremiumPurchaseBlocked","selectCanScheduleUntilOnline","isMessageTranslated","selectIsReactionPickerOpen","isPaidReactionAvailable","selectIsMessageInFocusList","album","openThread","updateDraftReplyInfo","setEditingId","pinMessage","openForwardMenu","openReplyMenu","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","downloadMedia","cancelMediaDownload","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","loadReactors","copyMessagesByIds","saveGif","cancelPollVote","closePoll","requestMessageTranslation","showOriginalMessage","openChatLanguageModal","openMessageReactionPicker","loadOutboxReadDate","copyMessageLink","openDeleteMessageModal","reportMessages","openTodoListModal","forwardToSavedMessages","deleteMessages","addToFocusList","removeFromFocusList","isMenuOpen","setIsMenuOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","selectionQuoteOffset","setSelectionQuoteOffset","calendar","requestRemindMeCalendar","remindMeCalendar","chatsById","chats","byId","usersById","users","uniqueReactors","PREVIEW_AVATAR_COUNT","messages","msg","downloadableMedia","selectMessageDownloadableMedia","getIsDownloading","selectionRange","collapsed","ancestor","TEXT_NODE","isSelectionRangeInsideMessage","selectionText","messageText","startOffset","endOffset","closeMenu","handleDelete","isSchedule","handleAddToFocus","force","handleRemoveFromFocus","closePinModal","handleReply","quoteText","quoteOffset","monoforumPeerId","fromChatId","handleOpenThread","handleEdit","handleAppendTodoList","forNewTask","handlePin","handleUnpin","isUnpin","handleMoveToBottom","shouldDeleteForAll","handleForward","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","handleOpenCalendar","handleRemindScheduleMessage","handleRemindMe","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","shouldIncludeThread","shouldIncludeGrouped","handleCopyNumber","phoneNumber","handleDownloadClick","media","originMessage","handleSaveGif","video","getMessageVideo","gif","handleToggleReaction","shouldAddToRecent","handleSendPaidReaction","handlePaidReactionModalOpen","handleReactionPickerOpen","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","handleReport","confirmLabel"],"sourceRoot":""}
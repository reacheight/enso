{"version":3,"file":"5824.7294b08dfe3534059566.js","mappings":"uKAcKA,EAAI,SAAJA,GAAI,OAAJA,EAAAA,EAAI,mBAAJA,EAAAA,EAAI,qBAAJA,EAAAA,EAAI,yBAAJA,EAAAA,EAAI,eAAJA,CAAI,EAAJA,GAAI,IAIT,MAcA,GAAeC,EAAAA,EAAAA,IAd6BC,EAAGC,aAE3CC,EAAAA,EAAAA,GAAA,OAAKC,UAAU,wBAAuBC,UACpCF,EAAAA,EAAAA,GAACG,EAAAA,GAAU,CAACC,KAAK,SAASC,UAAWT,EAAKG,GAAQG,SACpC,WAAXH,GACCC,EAAAA,EAAAA,GAAA,OAAKC,UAAU,gCAA+BC,UAC5CF,EAAAA,EAAAA,GAACM,EAAAA,EAAI,CAACF,KAAK,sBAEXJ,EAAAA,EAAAA,GAACM,EAAAA,EAAI,CAACF,KAAM,WAAWL,U,4HCDnC,MAiCA,GAAeF,EAAAA,EAAAA,KAAKU,EAAAA,EAAAA,IAClB,CAACC,GAAUC,aACT,MAAMC,GAAOC,EAAAA,EAAAA,KAAkBH,GACzBI,EAAOH,IAAUI,EAAAA,EAAAA,KAAWL,EAAQC,GAG1C,MAAO,CACLC,OACAI,YAJkBF,GAAOG,EAAAA,EAAAA,IAAuBH,QAAQI,IAJ1CT,CAjCiCU,EACnDC,SACAR,OACAD,SACAK,cACAK,cAEA,MAAM,iBAAEC,IAAqBC,EAAAA,EAAAA,MAEvBC,GAAOC,EAAAA,EAAAA,KAEPC,GAAyBC,EAAAA,EAAAA,IAAY,KACzCL,EAAiB,CAAEM,OAAQhB,EAAMiB,GAAIlB,OAAQA,IAC7CU,KACC,CAACT,EAAMU,EAAkBD,EAASV,IAErC,GAAKC,GAASD,EAId,OACET,EAAAA,EAAAA,GAAC4B,EAAAA,EAAa,CACZV,OAAQA,EACRC,QAASA,EACTU,MAAOP,EAAK,uBACZQ,WAAWC,EAAAA,EAAAA,GAAWT,EAAK,8BAA+BR,IAC1DkB,aAAcV,EAAK,kBACnBW,eAAgBT,EAChBU,sBAAoB,M,4DChD1B,MAAMC,EAAc,IAAIC,IAAI,CAAC,QAAS,WAAY,WAE5CC,GAAWC,EAAAA,EAAAA,KAGV,SAASC,EAAWC,IACzBC,EAAAA,EAAAA,IAAU,KACR,IAAKD,EACH,OAGF,MAAME,EAAUC,OAAOD,QAAQF,GAc/B,OAAOH,EAASO,YAZhB,SAAuBC,IAgB3B,SAAyBA,GACvB,QAAIA,EAAEC,kBAAkBC,eACdZ,EAAYa,IAAIH,EAAEC,OAAOG,QAIrC,EArBWC,CAAgBL,IAIrBH,EAAQS,QAAQ,EAAEC,EAAQC,OCmDzB,SAA0BD,GAC/B,OAAQE,GAlCV,SAAuBF,EAAgBE,GACrC,MAAM,IACJC,EAAG,KAAEC,EAAI,KAAEC,EAAI,IAAEC,EAAG,MAAEC,EAAK,IAAEC,GAC3BR,GACE,OACJS,EAAM,QAAEC,EAAO,QAAEC,EAAO,SAAEC,EAAUJ,IAAKK,GACvCX,EAEJ,GAAIC,IAAQM,EACV,OAAO,EAGT,GAAIH,GACF,IAAKI,IAAYC,EACf,OAAO,MAEJ,CACL,GAAIP,IAASM,EACX,OAAO,EAET,GAAIL,IAASM,EACX,OAAO,CAEX,CACA,OAAIJ,IAAUK,GAIPE,QAAQN,IACTK,EAAWE,gBAAkBP,EAAIO,eAChCb,EAAMc,KAAKC,QAAQ,MAAO,IAAIF,gBAAkBP,EAAIO,eAC7D,CAGoBG,CA1Db,SAAqBlB,GAC1B,MAAMmB,EAAOnB,EACVe,cACAK,MAAM,KACNC,IAAKC,GAASA,EAAKC,QAEhBC,EAA+B,CACnCrB,IAAKgB,EAAKM,SAAS,OACnBrB,KAAMe,EAAKM,SAAS,QACpBpB,KAAMc,EAAKM,SAAS,QACpBnB,IAAKa,EAAKM,SAAS,OACnBlB,MAAOY,EAAKM,SAAS,UAGjBC,EAAe,CAAC,MAAO,OAAQ,OAAQ,QAAS,OAItD,MAAO,IACFF,EACHhB,IAJcW,EAAKQ,KAAMnB,IAASkB,EAAaD,SAASjB,IAM5D,CAoCkCoB,CAAY5B,GAASE,EACvD,EDpDY2B,CAAiB7B,EAAjB6B,CAAyBpC,IAC3BQ,EAAQR,IAGd,IAGC,CAACL,GACN,CAxBA0C,SAASC,gBAAgBC,iBAAiB,UAAW/C,EAASgD,a,gMEa9D,MAAMC,EAAW,IACXC,EAAmB,IAAIC,OAAO,IAAIC,EAAAA,EAAaC,WAAY,KAC3DC,EAAuB,IAAIH,OAAO,GAAGI,EAAAA,IAAgBF,UAAW,KAEvD,SAASG,EACtBC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,MAAM,wBAAEC,EAAuB,yBAAEC,IAA6BhF,EAAAA,EAAAA,OAEvDiF,EAAkBC,EAAoBC,IAAwBC,EAAAA,EAAAA,IAAQ,GAEvEC,GAA4BC,EAAAA,EAAAA,IAAqB,KACrD,MAAMC,EAAOb,IACb,IAAKD,IAAcc,IAASX,KAAqBY,UAAW,OAG5D,IADiBD,EAAKE,MAAMC,EAAAA,GAAqBtB,EAAAA,EAAeG,EAAAA,KACjD,OAEf,MAAMoB,GAAsBC,EAAAA,EAAAA,IAAuBf,EAASgB,SAE5D,OAAOF,EAAoBF,MAAMC,EAAAA,GAAqBxB,EAAmBI,KAAwB,IAChG,CAACI,EAASE,EAAmBC,EAAUJ,GAAYR,GAEhD6B,GAAeC,EAAAA,EAAAA,GACnBV,EAA2B,CAACA,EAA2BX,EAASE,IAAoB,GAGhFoB,GAAWC,EAAAA,EAAAA,GAAgB,IAAMpD,QAAQiD,KAAiB,CAACA,IAC3DI,EAAkBrD,QAAQiC,GAAcqB,SAE9C/E,EAAAA,EAAAA,IAAU,KACR,IAAKqD,IAAcuB,EAAU,OAE7B,MAAMI,EAAYN,IAClB,GAAIM,GACF,IAAKF,EAAiB,CACpB,MAAMG,EAAQX,EAAAA,GAAqBU,EAAYA,EAAUX,MAAM,kBAAkB,GAC7EY,GACFtB,EAAwB,CACtBsB,SAGN,OAEArB,KAED,CAACP,EAAWuB,EAAUF,EAAcI,EAAiBlB,EAA0BD,IAElF,MAAMuB,GAAoBC,EAAAA,EAAAA,GAAiBF,IACzC,MAAMD,EAAYN,IAClB,IAAKrB,IAAc2B,EAAW,OAE9B,MAAMI,EAAU3B,EAASgB,QACnBF,GAAsBC,EAAAA,EAAAA,IAAuBY,GAC7CC,EAAYf,EAAAA,GACdU,EAEAA,EAAUpD,QAAQ,wBAAyB,QACzC0D,EAAQ,IAAIvC,OAAO,IAAIsC,UAAmB,IAE1CE,EADUhB,EAAoBF,MAAMiB,GAAQ,GAC5BP,OAASC,EAAUD,OACnCS,EAAUjB,EAAoB3C,QAAQ0D,GAAOG,EAAAA,EAAAA,IAAqBR,GAAOS,OAAOH,IAChFI,EAAqBP,EAAQQ,UAAUC,UAAUtB,EAAoBQ,QAE3ExB,EAAQ,GAAGiC,IAAUG,MAErBG,EAAAA,EAAAA,IAAoB,MAClBC,EAAAA,EAAAA,GAAqBX,GAAS,GAAM,OAMxC,OAFApF,EAAAA,EAAAA,IAAU+D,EAAsB,CAACA,EAAsBT,IAEhD,CACL0C,yBAA0BvE,QAAQmD,GAAYE,IAAoBjB,GAClEoC,wBAAyBnC,EACzBoB,oBAEJ,C,4DCFA,MAAMgB,EACIC,cAAgB,IAAIC,IAEpBC,wBAA0B,IAAID,IAE9BE,gBAAmC,GAEnCC,qBAAuC,GAE/CC,WAAAA,CACSnG,EACCoG,EACAC,GACR,KAHOrG,OAAAA,EAAc,KACboG,SAAAA,EAAsC,KACtCC,QAAAA,CAEV,CAEOC,OAAAA,GACP,CAEAC,IAAAA,IAAQC,GACNC,KAAKC,qBAAqB,CACxBC,KAAM,OACNH,QAEJ,CAEAI,OAAAA,CAAQC,GACN,MAAM,cAAEf,EAAa,wBAAEE,GAA4BS,MAC7C,cAAEK,KAAkBC,GAAoBF,EAExCG,GAAYC,EAAAA,EAAAA,KACZC,EAA6B,CACjCP,KAAM,aACNK,eACGD,GAGCI,EAAe,CAAEH,aAGjBI,EAAU,IAAIC,QAAa,CAACC,EAASC,KACzC1H,OAAO2H,OAAOL,EAAc,CAAEG,UAASC,aAGzC,GAAqD,mBAA1CL,EAAQV,KAAKU,EAAQV,KAAK9B,OAAS,GAAmB,CAC/DwC,EAAQO,cAAe,EAEvB,MAAMC,EAAWR,EAAQV,KAAKmB,MAC9BR,EAAaO,SAAWA,EACxB1B,EAAwB4B,IAAIF,EAAUP,EACxC,CAeA,OAbArB,EAAc8B,IAAIZ,EAAWG,GAC7BC,EACGS,MAAM,QACNC,QAAQ,KACPhC,EAAciC,OAAOf,GAEjBG,EAAaO,UACf1B,EAAwB+B,OAAOZ,EAAaO,YAIlDjB,KAAKC,qBAAqBQ,EAASJ,GAE5BM,CACT,CAEAY,cAAAA,CAAeC,GACbA,EAAiBC,YAAa,EAE9B,MAAM,UAAElB,GAAcP,KAAKT,wBAAwBmC,IAAIF,IAAqB,CAAC,EACxEjB,GAILP,KAAKC,qBAAqB,CACxBC,KAAM,iBACNK,aAEJ,CAEAoB,SAAAA,CAAUC,GACR,MAAM,cAAEvC,EAAa,QAAEO,GAAYI,KAC/B4B,EAAKhC,UAAYA,GAIrBgC,EAAKC,SAASjI,QAAS6G,IAIrB,GAHqB,WAAjBA,EAAQP,MAAqBF,KAAKL,UACpCK,KAAKL,SAASc,EAAQqB,QAEH,mBAAjBrB,EAAQP,KAA2B,CACrC,MAAMQ,EAAerB,EAAcqC,IAAIjB,EAAQF,WAC3CG,IACED,EAAQsB,MACVrB,EAAaI,OAAOL,EAAQsB,OAE5BrB,EAAaG,QAAQJ,EAAQuB,UAGnC,MAAO,GAAqB,mBAAjBvB,EAAQP,KAA2B,CAC5C,MAAMQ,EAAerB,EAAcqC,IAAIjB,EAAQF,WAC/CG,GAAcO,cAAcR,EAAQwB,aACtC,MAAO,GAAqB,mBAAjBxB,EAAQP,KACjB,MAAM,IAAIgC,MAAMzB,EAAQsB,OAAOI,UAGrC,CAEQlC,oBAAAA,CAAqBQ,EAAwBJ,GACnDL,KAAKR,gBAAgB4C,KAAK3B,GAEtBJ,GACFL,KAAKP,qBAAqB2C,QAAQ/B,GAGpCL,KAAKqC,uBACP,CAEQA,uBAAwBC,EAAAA,EAAAA,IAAoB,KAClD,MAAM,QAAE1C,GAAYI,KACd6B,EAAW7B,KAAKR,gBAChBa,EAAgBL,KAAKP,qBAE3BO,KAAKR,gBAAkB,GACvBQ,KAAKP,qBAAuB,GAE5BO,KAAKzG,OAAOgJ,YAAY,CAAE3C,UAASiC,YAAYxB,KAI5C,SAASmC,EACdC,EACA9C,EACAC,GAEA,MAAM8C,EAAY,IAAItD,EAAkBqD,EAAQ9C,EAAUC,GAE1D,SAAS+C,GAAc,KAAEf,IACvBc,EAAUf,UAAUC,EACtB,CAQA,OANAa,EAAO5G,iBAAiB,UAAW8G,GAEnCD,EAAU7C,QAAU,KAClB4C,EAAOG,oBAAoB,UAAWD,IAGjCD,CACT,C,uECpPA,MAOA,EAP2CG,IACzC,MAAM,OAAElL,GAAWkL,EACbC,GAAaC,EAAAA,EAAAA,GAAgBC,EAAAA,GAAQC,MAAO,kBAAmBtL,GAErE,OAAOmL,GAAarM,EAAAA,EAAAA,GAACqM,EAAU,IAAKD,SAAYpL,E,2MCUlD,MAAMsE,EAAW,IAEjB,IAAImH,EACJ,IACEA,EAAqB,iCACvB,CAAE,MAAO5J,GAEP4J,EAAqB,6BACvB,CAEe,SAASC,EACtB5G,EACAC,EACAC,EACAC,EACAC,EACAyG,EACAC,EACAC,GAEA,MAAMvL,GAAOwL,EAAAA,EAAAA,MACNC,EAAeC,IAAoBC,EAAAA,EAAAA,OACnC3G,EAAkBC,EAAoBC,IAAwBC,EAAAA,EAAAA,IAAQ,GAEvEyG,GAA8BvG,EAAAA,EAAAA,IAAqB,KACvD,MAAMC,EAAOb,IACb,IAAKD,IAAcG,KAAqBY,YAAcD,EAAK/B,SAAS,KAAM,OAE1E,MAAMmC,GAAsBC,EAAAA,EAAAA,IAAuBf,EAASgB,SAE5D,OAAOiG,EAAAA,EAAAA,GAAiBnG,GAAqBF,MAAM2F,KAAsB,GAAG9H,QAC3E,CAACmB,EAAWC,EAASE,EAAmBC,GAAWZ,GAEhD8H,GAAiBhG,EAAAA,EAAAA,GACrB8F,EAA6B,CAACA,EAA6BnH,EAASE,IAAoB,GAGpFoH,GAAoBjG,EAAAA,EAAAA,GAAiB,IAClCtB,GAAaC,IAAUuH,WAAW,KACxC,CAACvH,EAASD,KAEbrD,EAAAA,EAAAA,IAAU,KACR,MAAM8K,EAAcH,IAEpB,IAAKG,IAAiBZ,IAAoBC,EAExC,YADAI,OAAiBhM,GAKnB,MAAMwM,GAAYC,EAAAA,EAAAA,MAAYC,MAAMC,KACpC,IAAKH,EAEH,YADAR,OAAiBhM,GAInB,MAAM4M,EAAYjB,GAAkBkB,OAAO,CAACC,EAAeC,KACrDA,EAAOtN,SAAWoM,GACpBiB,EAAInC,KAAKoC,EAAOtN,QAGXqN,GACN,IAEGE,EAAST,EAAYjF,UAAU,GAC/B2F,GAAcC,EAAAA,EAAAA,IAAmB,CACrCC,KAAKC,EAAAA,EAAAA,IAAO,IACLf,KAAuBT,GAAoB,MAC5CgB,GAAa,KAEnBS,MAAOL,EACPvE,KAAM,SAGRuD,EAAiBrK,OAAO2L,QAAOC,EAAAA,EAAAA,IAAWf,EAAWS,MACpD,CAACpB,EAAeF,EAAkBC,EAAiBQ,EAAgBC,IAEtE,MAAMmB,GAAgB5G,EAAAA,EAAAA,GAAgB,CACpC6G,EACAC,GAAa,EACbC,GAAc,KAEd,IAAKF,EAAKG,eAAgBC,EAAAA,EAAAA,IAAavN,EAAMmN,GAC3C,OAGF,MAAMK,GAAeC,EAAAA,EAAAA,IAAgBN,GAC/BO,GAAsBH,EAAAA,EAAAA,IAAavN,EAAMmN,IAAS,GAClDQ,EAAeH,EACjB,IAAIA,IACJ,uEAEsBI,EAAAA,GAAsBC,yCAC1BV,EAAK9M,0EAGpBqN,QAEDnH,EAAU3B,EAASgB,QAEnBkI,EAA2BC,GADLpI,EAAAA,EAAAA,IAAuBY,IAE7CyH,EAAUX,EAAcS,EAAyB5H,OACnD4H,EAAyBG,YAAY,KACnCC,GAAsBV,EAAeA,EAAatH,OAAS,EAAIwH,EAAoBxH,SACpF4H,EAAyB5H,OAAS8H,GAEvC,IAAiB,IAAbA,EAAgB,CAClB,MAAMrH,EAAU,GAAGmH,EAAyBK,OAAO,EAAGH,KAAWL,UAC3D7G,EAAqBiH,EAAoBxH,EAAQQ,WAAWC,UAAU8G,EAAyB5H,QAC/FkI,GAAgBC,EAAAA,EAAAA,IAAiB9H,GACvC7B,EAAQ,GAAGiC,IAAUG,MAErBG,EAAAA,EAAAA,IAAoB,KAClB,MAAMqH,EAAmBF,EAAgBF,EAAqB,GAC9DhH,EAAAA,EAAAA,GAAqBX,EAAS6G,GAC1BkB,GAAoB,IACtBC,EAAAA,EAAAA,IAAiBhI,EAAS+H,IAGhC,CAEA5C,OAAiBhM,KAKnB,OAFAyB,EAAAA,EAAAA,IAAU+D,EAAsB,CAACA,EAAsBT,IAEhD,CACL+J,qBAAsB5L,QAAQ6I,GAAevF,SAAWlB,GACxDyJ,oBAAqBxJ,EACrBiI,gBACAwB,qBAAsBjD,EAE1B,CAIA,SAASsC,EAAoBzI,GAC3B,OAAOA,EAAKvC,QAAQ,kCAAmC,OACzD,C,kFCzJe,SAAS4L,EAAaC,EAA6CtM,GAChF,MAAMuM,GAAYC,EAAAA,EAAAA,IAAQ,KACxB,GAAKF,EAIL,OAAOA,EAAWrC,OAAO,CAACC,EAAKnM,EAAI0O,KACjCvC,EAAInM,GAAM0O,EACHvC,GACN,CAAC,IACH,CAACoC,IAEEI,GAAgBC,EAAAA,EAAAA,GAAsBJ,GACtCK,GAAaD,EAAAA,EAAAA,GAAsB3M,GAEnC6M,GAAgBL,EAAAA,EAAAA,IAAQ,IACvBD,GAAcG,GAAiB1M,IAAQ4M,GAIrCE,EAAAA,EAAAA,IAAUP,EAAW,CAACQ,EAAOhP,SACLX,IAAtBsP,EAAc3O,GAAoBgP,EAAQL,EAAc3O,IAAM,KAJ9D,CAAC,EAMT,CAACiC,EAAKuM,EAAWK,EAAYF,IAIhC,MAAO,CACLG,gBACAG,kBAJuBC,EAAAA,EAAAA,GAAqBJ,GAMhD,C,mFC9BA,MAAMK,EAAWC,EAAAA,EAEF,SAASC,GAAmB,UACzCC,EAAS,WACTC,EAAU,WACVC,EAAU,mBACVC,EAAkB,WAClBC,EAAU,GACV1P,IASA,MAAM2P,GAAiB1J,EAAAA,EAAAA,GAAgB,KACrC,MAAM2J,EAAUL,EAAWhK,QACrBsK,EAASP,EAAU/J,QACzB,IAAKqK,IAAYC,EACf,OAGF,MAAMC,EAAaD,EAAOE,wBACpBC,EAAcJ,EAAQG,wBACtBE,EAAcC,OAAOC,YAE3BC,EAAAA,EAAAA,IAAgB,KACd,MAAMC,EAAgBP,EAAWQ,IAAMR,EAAWS,OAAS,EACrDC,EAAgBV,EAAWW,OAC3BC,EAAIjB,EAAqBe,EAAgBH,EAC/CT,EAAQe,MAAML,IAASI,EAAIV,EAAYO,OAAS,EAA5B,KAEhBf,EACFI,EAAQe,MAAMC,KAAUd,EAAWc,KAAOzB,EAArB,KAErBS,EAAQe,MAAME,MAAWZ,EAAcH,EAAWe,MAAQ1B,EAApC,SAuB5B,OAlBArO,EAAAA,EAAAA,IAAU,KACJ4O,GACJC,KACC,CAACD,EAAY1P,KAEhBc,EAAAA,EAAAA,IAAU,KACR,GAAI4O,EAAY,OAEhB,MAAMoB,EAAoBxB,EAAU/J,QAASwL,QAAwB,gBACrE,OAAKD,GAELA,EAAkBrN,iBAAiB,SAAUkM,EAAgB,CAAEqB,SAAS,IAEjE,KACLF,EAAkBtG,oBAAoB,SAAUmF,UALlD,GAOC,CAACD,EAAYJ,IAETK,CACT,C,mCCrEA,MAAMsB,EAAsB,EAErB,SAASC,EAAuBC,EAAuBC,GAC5D,MAAM,wBAAEC,GAA4BF,EACpC,IAAIG,EAAiCD,EACjCE,EAAa,EACjB,KAAOD,GAAcA,EAAWtR,KAAOoR,GAAWG,EAAaN,GAC7DK,EAAaA,EAAWE,cACxBD,IAGF,OAAOhP,QAAQ+O,GAAcA,EAAWtR,KAAOoR,EACjD,C,mFCNe,SAASK,EAAoBC,GAAmB,GAC7D,MAAMC,GAA4BC,EAAAA,EAAAA,IAAOF,GACnCG,GAAwBD,EAAAA,EAAAA,KAAO,GAC/BE,GAAcC,EAAAA,EAAAA,MAEpBC,EAAAA,EAAAA,GAAc,KACRN,IACFC,EAA0BpM,SAAU,IAErC,CAACmM,IAEJ,MAAMO,GAA+BhM,EAAAA,EAAAA,GAAgB,KACnD0L,EAA0BpM,SAAU,EACpCsM,EAAsBtM,SAAU,EAChCuM,MAGII,GAAiCjM,EAAAA,EAAAA,GAAgB,KACrD4L,EAAsBtM,SAAU,EAChCuM,MAGF,MAAO,CACLK,uBAAwBR,EAA0BpM,QAClD6M,mBAAoBP,EAAsBtM,QAC1C0M,+BACAC,iCAEJ,C,wHCVA,MA6BA,GAAehU,EAAAA,EAAAA,KAAKU,EAAAA,EAAAA,IAAsBC,IAIjC,CACLwT,aAJgBxT,EAAOyT,UACMD,cAGCE,EAAAA,MALd3T,CA7BiB4T,EACnCjT,SACAC,UACAiT,mBACAC,sBACApS,iBACA+R,mBAEA,MAAM1S,GAAOwL,EAAAA,EAAAA,KAEb,OACEwH,EAAAA,EAAAA,IAAC1S,EAAAA,EAAa,CACZC,MAAOP,EAAK,sBAAuB,CAAEiT,MAAOP,IAC5ChS,aAAcV,EAAK,uBACnBJ,OAAQA,EACRC,QAASA,EACTc,eAAgBA,EAAe/B,SAAA,CAE9BoB,EAAK,uBACNtB,EAAAA,EAAAA,GAACwU,EAAAA,EAAQ,CACPvU,UC3CmB,WD4CnBwU,MAAOnT,EAAK,wBAAyB,CAAEiT,MAAOP,IAC9CU,QAASN,EACTO,QAASN,S,gHE9CjB,SAAgB,KAAO,WAAW,MAAQ,WAAW,MAAQ,WAAW,iBAAmB,Y,eCS3F,MAAMO,EAAmB,GACnBC,EAAW,IAQjB,GAAehV,EAAAA,EAAAA,IANaiV,KAExB9U,EAAAA,EAAAA,GAAA,OAAKC,UAAW8U,EAAOC,KAAMrT,GAAIsT,EAAAA,OAM9B,SAASC,EAAY3D,GAC1B,MAAM/Q,GAASiN,EAAAA,EAAAA,MAEf,KADsB0H,EAAAA,EAAAA,KAA2B3U,GAC7B,OAAO,EAE3B,MAAM4U,EAAO7D,EAAQG,wBACf2D,EAAID,EAAK7C,KAAOV,OAAOyD,QACvBjD,EAAI+C,EAAKnD,IAAMJ,OAAO0D,QACtBC,EAAQJ,EAAKI,MACbtD,EAASkD,EAAKlD,OAGpB,GAAImD,EAAIG,EAAQZ,EAAmB,GAAKS,EAAIT,EAAmB/C,OAAOC,YACjEO,EAAIH,EAAS0C,EAAmB,GAAKvC,EAAIuC,EAAmB/C,OAAO4D,YACtE,OAAO,EAGT,MAAMC,EAAOC,KAAKC,MAAMC,KAAKC,MAAQ,KAC/BC,EAAW,GAAGC,EAAAA,QAAkBjM,EAAAA,EAAAA,OAEhCkM,GACJ3B,EAAAA,EAAAA,IAAA,OACErU,UAAW8U,EAAOmB,MAClBV,MAAOA,EACPtD,OAAQA,EACRI,MAAO,SAAS+C,aAAahD,OAC7B8D,QAAS,OAAOX,KAAStD,IAAShS,SAAA,EAElCF,EAAAA,EAAAA,GAAA,QAAAE,SACGkW,EAAaL,EAAUJ,KAAKU,IAAIb,EAAOtD,GAASwD,MAEnD1V,EAAAA,EAAAA,GAAA,KAAGgO,OAAQ,QAAQ+H,KAAY7V,UAC7BF,EAAAA,EAAAA,GAAA,iBAAeC,UAAW8U,EAAOuB,iBAAkBd,MAAOA,EAAOtD,OAAQA,SAKzEqE,GAAMC,EAAAA,EAAAA,GAAUP,GAAW,GAC3BQ,EAAgBF,EAAIG,cAAc,iBAElCC,EAAgB9E,OAAO+E,iBAAiBrF,GACxCsF,EAAQtF,EAAQuF,WAAU,GAChCC,MAAMC,KAAKL,GAAexT,QAASS,GACjCiT,EAAMvE,MAAM2E,YAAYrT,EAAK+S,EAAcO,iBAAiBtT,GAAM,cAGpE6S,EAAcU,YAAYN,GAE1B,MAAMO,EAAgBlS,SAASmS,eAAepC,EAAAA,KAS9C,OARAmC,EAAcD,YAAYZ,GAE1BA,EAAInR,iBAAiB,eAAgB,KACnCgS,EAAcE,YAAYf,IACzB,CACDgB,MAAM,KAGD,CACT,CAEA,SAASnB,EAAazU,EAAY6V,EAAsBC,EAAmB,IACzE,OACEnD,EAAAA,EAAAA,IAAA,UACEoD,MAAOC,EAAAA,IACPhW,GAAIA,EACJ0T,EAAE,QACFhD,EAAE,QACFmD,MAAM,OACNtD,OAAO,OACP,8BAA4B,OAAMhS,SAAA,EAElCF,EAAAA,EAAAA,GAAA,gBAAcyJ,KAAK,eAAemO,cAAc,MAAMC,WAAW,IAAIC,OAAO,YAAYpC,KAAM+B,KAC9FzX,EAAAA,EAAAA,GAAA,uBAAqB+X,GAAG,YAAYD,OAAO,gBAAe5X,UACxDF,EAAAA,EAAAA,GAAA,WAASyJ,KAAK,SAASuO,MAAM,IAAIC,UAAU,IAAG/X,UAC5CF,EAAAA,EAAAA,GAAA,WAASkY,cAAc,QAAQ5J,OAAO,aAAa6J,IAAK,GAAGtD,MAAcuD,KAAK,gBAGlFpY,EAAAA,EAAAA,GAAA,eAAa+X,GAAG,gBAAgBM,IAAI,gBAAgBC,SAAS,KAAKR,OAAO,iBACzE9X,EAAAA,EAAAA,GAAA,gBACEyJ,KAAK,eACLmO,cAAc,QACdC,WAAW,IACXC,OAAO,qBACPpC,KAAM+B,EAAW,KAEnBzX,EAAAA,EAAAA,GAAA,gBACEyJ,KAAK,eACLmO,cAAc,IACdC,WAAW,IACXC,OAAO,qBACPpC,KAAM+B,EAAW,KAEnBnD,EAAAA,EAAAA,IAAA,WAASwD,OAAO,gBAAe5X,SAAA,EAC7BF,EAAAA,EAAAA,GAAA,eAAa+X,GAAG,wBAChB/X,EAAAA,EAAAA,GAAA,eAAa+X,GAAG,2BAElB/X,EAAAA,EAAAA,GAAA,qBAAmB+X,GAAG,cAAcM,IAAI,gBAAgBE,MAAM,IAAIC,iBAAiB,IAAIC,iBAAiB,IAAGvY,UACzGF,EAAAA,EAAAA,GAAA,WAASkY,cAAc,QAAQ5J,OAAQ,MAAqB,EAAfkJ,EAAoBW,IAAK,GAAGtD,MAAcuD,KAAK,eAIpG,C,iOCtDA,MA4LA,GAAevY,EAAAA,EAAAA,KAAKU,EAAAA,EAAAA,IAClB,CAACC,GAAUC,SAAQiY,oBACjB,MAAM,SAAEC,GAAanY,EACfI,EAAOH,GAASI,EAAAA,EAAAA,KAAWL,EAAQC,QAAUO,EAC7C4X,EAAanY,GAASoY,EAAAA,EAAAA,KAAiBrY,EAAQC,QAAUO,EACzD8X,GAAmBJ,GAAiB9X,GAAQA,EAAKmY,OACjDC,EAAOF,EAAkBlY,GAAOC,EAAAA,EAAAA,KAAWL,EAAQA,EAAOqM,eAGhE,MAAO,CACLjM,OACAgY,aACAE,kBACAG,kBANwB/U,QAAQzD,IAAUyY,EAAAA,EAAAA,KAAmB1Y,EAAQC,IAOrEuY,OACAL,aAfcpY,CA1L+B4Y,EACjDC,aACAC,eACAC,aAAa,SACbvZ,SACAwZ,aACAC,WACAC,kBACAC,eACAC,eACAC,qBACAC,kBACAC,mBACAC,gBACAC,SACAC,aACAC,QACAtZ,OACAgY,aACAI,OACAF,kBACAqB,gBACAlB,oBACAmB,cACAC,SACApa,YACA0Y,WACA2B,qBACAC,cACAC,mBAEA,MAAM,aACJC,EAAY,gBACZC,EAAe,sBACfC,IACEtZ,EAAAA,EAAAA,MAEEC,GAAOC,EAAAA,EAAAA,MAELI,GAAIlB,GAAWG,GAAQ,CAAC,EAE1Bga,EAAuBnB,IAAoBX,GAEjDrW,EAAAA,EAAAA,IAAU,KACJhC,IACEkZ,GAAgBhB,GAAU8B,EAAa,CAAEha,WACzCgZ,GAAiBkB,EAAsB,CAAEE,OAAQpa,EAAQqa,WAAW,MAEzE,CAACra,EAAQkZ,EAAcF,EAAiBd,KAE3CoC,EAAAA,EAAAA,GApDsB,KAsDtB,MAAMC,GAAyBpT,EAAAA,EAAAA,GAC7B,CAAC/E,EAAiDoY,KAC5Cra,GAAQqa,IACVpY,EAAEqY,kBACFR,EAAgB,CACdS,cAAc,EACdzZ,OAAQd,EAAKe,GACbyZ,WAAY,EACZC,OAAuB,UAAf/B,EAAyBgC,EAAAA,GAAkBC,cAAgBD,EAAAA,GAAkBE,wBAMvF1M,GAAesB,EAAAA,EAAAA,IAAQ,IAAMxP,GAAQ8Y,IAAgB3K,EAAAA,EAAAA,IAAgBnO,GAAO,CAACA,EAAM8Y,IAEzF,IAAK9Y,IAASwY,EACZ,OAmDF,MAAMqC,EAAcrB,EAChBA,EAAYqB,aAAena,EAAK8Y,EAAYsB,QAAU,uBAAyB,6BAC/E1a,EAkCJ,OACEsT,EAAAA,EAAAA,IAAA,OAAKrU,WAAW0b,EAAAA,EAAAA,GAAe,WAAY1b,GAAY2b,KAAM1B,GAAS5Y,EAAKua,MAAQ,WAAQ7a,EAAUd,SAAA,CAClGia,GAAiBnB,IAChBhZ,EAAAA,EAAAA,GAAC8b,EAAAA,EAAM,CAELC,KAAMzC,EACN7K,KAAMuK,EACNF,iBAAe,EACf7Y,UAAU,uBAJN,mBAORD,EAAAA,EAAAA,GAAC8b,EAAAA,EAAM,CAELC,KAAMzC,EACN7K,KAAM2K,GAAcxY,EACpBX,WAAW0b,EAAAA,EAAAA,GAAexB,GAAiB,kBAC3CrB,gBAAiBA,EACjBqB,cAAeA,EACf6B,QAASpB,EAAuBI,OAAyBha,GANpDJ,GAAMe,KAQb2S,EAAAA,EAAAA,IAAA,OAAKrU,UAAU,OAAMC,SAAA,CAnDnBub,GAEAnH,EAAAA,EAAAA,IAAA,OAAKrU,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,GAACic,EAAAA,EAAa,CACZxN,KAAM7N,EACNsb,iBAAkBnC,EAClBF,gBAAiBA,EACjBf,gBAAiBA,EACjBqB,cAAeA,EACfG,mBAAoBA,IAErBmB,IAAezb,EAAAA,EAAAA,GAAA,QAAMC,UAAU,eAAcC,SAAEub,QAMpDzb,EAAAA,EAAAA,GAACic,EAAAA,EAAa,CACZxN,KAAM2K,GAAcxY,EACpBoZ,OAAQA,EACRC,WAAYA,EACZiC,iBAAkBnC,EAClBF,gBAAiBA,EACjBf,gBAAiBA,EACjBqB,cAAeA,EACfG,mBAAoBA,EACpBC,YAAaA,KA2BXxa,IAAY+Y,IAAoBgB,IA1GxC,WACE,GAAI/Z,EACF,OAAOyZ,GACLxZ,EAAAA,EAAAA,GAACmc,EAAAA,EAAY,CAAClc,UAAU,SAASmc,QAASrc,KAE1CuU,EAAAA,EAAAA,IAAA,QAAMrU,UAAU,SAAS2b,IAAI,OAAM1b,SAAA,CAChCqZ,IAAcvZ,EAAAA,EAAAA,GAACM,EAAAA,EAAI,CAACL,UAAU,cAAcG,KAAMmZ,KAClDxX,EAAAA,EAAAA,GAAWhC,MAKlB,GAAI6Z,IAAuBX,EACzB,OACEjZ,EAAAA,EAAAA,GAACmc,EAAAA,EAAY,CAAClc,UAAU,SAASmc,QAAS9a,EAAK,cAInD,GAAI8X,GAAYiD,YACd,OACErc,EAAAA,EAAAA,GAAA,QAAMC,UAAU,SAAS2b,IAAI,OAAM1b,UACjCF,EAAAA,EAAAA,GAAA,QAAMC,UAAU,cAAc2b,IAAI,OAAM1b,SAAEoB,EAAK8X,EAAWiD,iBAKhE,IAAKzb,EACH,OAGF,GAAIyY,EACF,OAAOrZ,EAAAA,EAAAA,GAACsc,EAAAA,EAAY,CAACjD,aAAcA,IAGrC,IAAIkD,EAAAA,EAAAA,IAAY3b,EAAKe,IACnB,OAGF,MAAM6a,GAAmBC,EAAAA,EAAAA,IAAcnb,EAAMV,EAAMgY,GAC7C8D,GAAwBf,EAAAA,EAAAA,GAAe,SAAUa,GAAoB,cAC3E,OACElI,EAAAA,EAAAA,IAAA,QAAMrU,WAAW0b,EAAAA,EAAAA,GAAe,UAAUgB,EAAAA,EAAAA,IAAa/b,EAAMgY,GAAY,IAAS,UAAU1Y,SAAA,CACzF4O,IAAgB9O,EAAAA,EAAAA,GAAA,QAAMC,UAAWyc,EAAsBxc,SAAE4O,IACzD0N,IAAoBxc,EAAAA,EAAAA,GAAA,QAAMC,UAAU,cAAc2b,IAAI,OAAM1b,SAAEsc,MAGrE,CA4D8DI,MAEzDvC,IAAUra,EAAAA,EAAAA,GAAC6c,EAAAA,EAAY,IACvBrC,O,mCC3PP,MAAMsC,EAAQ,oBACRC,EAAW,mBACXC,EAAgB,oBAChBC,EAAoB,OAEnB,SAAS9P,EAAiBvG,GAC/B,OAAOA,EACJvC,QAAQ0Y,EAAU,KAClB1Y,QAAQyY,EAAO,MACfzY,QAAQ2Y,EAAe,IACvB3Y,QAAQ4Y,EAAmB,GAChC,C,0XCVA,QAA0E,W,eCY1E,MAqBA,GAAepd,EAAAA,EAAAA,IArBsBqd,EACnCC,aACA9V,WACA+V,eAGEpd,EAAAA,EAAAA,GAAA,OAAKC,WAAW0b,EAAAA,EAAAA,GDlBG,WCoBjBtU,GDpB8G,WCqB9G8V,IAAeC,GDrB2E,YCsB1Fld,UAEAoU,EAAAA,EAAAA,IAAA,OAAKrU,UDxBmC,WCwBPC,SAAA,EAC/BF,EAAAA,EAAAA,GAAA,OAAKC,UAAW8U,KAChB/U,EAAAA,EAAAA,GAAA,OAAKC,UAAW8U,KAChB/U,EAAAA,EAAAA,GAAA,OAAKC,UAAW8U,U,0BC3BxB,QAA2C,WC2D3C,GAAelV,EAAAA,EAAAA,IA3CEwd,EACfC,mBACAC,sBAEA,IAAKD,EACH,OAGF,MAAME,EAAmBF,EAAiBG,MAAM,EAfzB,GAgBjBC,EAAiBJ,EAAiB9V,OAASgW,EAAiBhW,OAElE,OACE8M,EAAAA,EAAAA,IAAA,OAAKrU,UD5BiB,WC4BSC,SAAA,CAC5Bsd,EAAiB/Y,IAAKkZ,IACrB,MAAMC,EAASL,IAAkBI,GACjC,OAAOC,IACL5d,EAAAA,EAAAA,GAAA,OAEEC,WAAW0b,EAAAA,EAAAA,GACT,WACA5G,GACA8I,EAAAA,EAAAA,GAAqB,CAAEC,MAAOF,EAAOE,SACrC5d,UAED6d,EAAAA,EAAAA,IAAuB,CACtBC,KAAMJ,EAAO/b,MAAMmc,KACnBC,SAAUL,EAAO/b,MAAMoc,SACvBC,sBAAuBN,EAAOO,kBAC9BC,UAAW,MAXRR,EAAOjc,MAgBjB+b,EAAiB,IAChBpJ,EAAAA,EAAAA,IAAA,OAAKrU,UAAW,YAAY8U,aAAoC7U,SAAA,CAAC,IAE9Dwd,UCqcX,GAAe7d,EAAAA,EAAAA,KAAKU,EAAAA,EAAAA,IAClB,CAACC,GACCkB,SAAQyY,gBAAekE,YAAWC,uBAElC,MAAM5d,GAAO6d,EAAAA,EAAAA,KAAW/d,EAAQkB,GAC1Bd,GAAOC,EAAAA,EAAAA,KAAWL,EAAQkB,GAChC,IAAKhB,EACH,MAAO,CACLmM,cAAerM,EAAOqM,eAI1B,MAAM2R,GAAgBC,EAAAA,EAAAA,GAAiB/c,IACjC,eAAEgd,GAAmBle,EAAOme,YAC5BC,GAAYC,EAAAA,EAAAA,KAA2Bre,GAEvCse,EAAgBR,IAAoBS,EAAAA,EAAAA,KAAwBve,EAAQkB,EAAQyY,EAAgB,QAAU,OACtG6E,EAAcV,GAChBW,EAAAA,EAAAA,KAAkBze,EAAQkB,EAAQ4c,IAClCY,EAAAA,EAAAA,KAAsB1e,EAAQkB,EAAQyY,EAAgB,QAAU,QAC9D,WAAEgF,EAAU,YAAEC,GAAgBJ,GAAe,CAAC,EAC9CK,EAAoBlF,GAAiBiF,GAAaE,QAASC,EAAAA,EAAAA,KAAW/e,EAAQ4e,EAAYE,aAAUte,EACpGwe,EAAgBR,GAAcS,EAAAA,EAAAA,KAAajf,EAAQwe,QAAehe,EAClE0e,EAAoBL,GAAqBG,GAG7C9d,OAAQie,EACRC,SAAUC,EACVpW,KAAMqW,IACJC,EAAAA,EAAAA,KAAyBvf,IAAW,CAAC,EACnC2c,GAAckB,GAAa3c,IAAWie,IAAkBxF,EAC1DzY,IAAWme,EAAkBA,IAAoBG,EAAAA,IAC/CC,EAAmBvf,EAAKwf,SAAWxe,IAAWie,GAC/Cje,KAAWye,EAAAA,EAAAA,KAAe3f,GAAQ4f,iBAEjCxH,GAAaC,EAAAA,EAAAA,KAAiBrY,EAAQkB,GACtC2e,EAAmBrB,IAAesB,EAAAA,EAAAA,KAAuB9f,EAAQwe,GAEjE3F,GAAekH,EAAAA,EAAAA,KAAkB/f,EAAQkB,EAAQse,EAAAA,GAAgB,gBAEjEQ,GAAaC,EAAAA,EAAAA,KAAiBjgB,EAAQkB,GAEtCgf,GAAkBC,EAAAA,EAAAA,KAA0BngB,GAE5CogB,GAAmBC,EAAAA,EAAAA,KAAuBrgB,EAAQkB,GAExD,MAAO,CACLhB,OACAogB,SAASC,EAAAA,EAAAA,IAAergB,GAAMsgB,EAAAA,EAAAA,KAAqBxgB,IAASygB,EAAAA,EAAAA,KAAsBzgB,EAAQE,EAAKiB,KAC/F+d,oBACAwB,OAAOC,EAAAA,EAAAA,KAAY3gB,EAAQkB,EAAQse,EAAAA,IACnC7C,aACA8C,kBACA5M,kBAAkB+N,EAAAA,EAAAA,KAAuB5gB,GACzC6gB,cAAelE,GAAkC,WAApB2C,EAC7BwB,iBAAkB9gB,EAAOme,YAAYzO,YAAY1I,QAAU,GAAK,EAChE+Z,0BAA2BpC,GAAcH,GAAcwC,EAAAA,EAAAA,KAAqBhhB,EAAQwe,QAAehe,EACnGJ,OACAgY,aACAyH,mBACAhH,eACAoI,yBAAyBC,EAAAA,EAAAA,KAA0BlhB,GACnDwe,cACAF,gBACAjS,cAAerM,EAAOqM,cACtB8U,eAAgBnB,GAAYmB,eAC5BC,OAAQpB,GAAYqB,WACpBlJ,SAAUnY,EAAOmY,SACjB+H,kBACAE,mBACApC,gBACAlB,iBAAkB9c,EAAOme,YAAYzO,WACrCqN,gBAAiB/c,EAAOme,YAAYhR,KACpC+Q,eAAgBA,GAAkBE,IAzEpBre,CA1XoBuhB,EACtCpgB,SACAic,WACAoE,YACAC,gBACAC,WACAN,iBACAC,SACAM,sBACAxhB,OACAkgB,mBACAE,UACAlgB,OACAgY,aACA8G,oBACA6B,4BACAY,YACAjB,QACAO,0BACAtE,aACA8C,kBACA5M,mBACAgO,gBACAC,mBACAjB,oBACAhH,gBACAyF,iBACAE,eACA7E,iBACAtN,iBACAwR,aACAC,oBACAre,aACA0Y,YACAyJ,eACA1B,mBACAlC,iBACAlB,oBACAC,mBACAmB,kBACA2D,gBAEA,MAAM,SACJC,GAAQ,gBACRC,GAAe,eACfC,GAAc,iBACdC,GAAgB,aAChBC,GAAY,WACZC,GAAU,eACVC,GAAc,gBACdC,GAAe,0BACfC,GAAyB,eACzBC,GAAc,uBACdC,GAAsB,qBACtBC,GAAoB,iBACpBC,KACE7hB,EAAAA,EAAAA,OAEE,SAAE+b,KAAa+F,EAAAA,EAAAA,OACdC,GAAmBC,GAAiBC,KAAoB7c,EAAAA,EAAAA,MACxD8c,GAAiBC,GAAeC,KAAkBhd,EAAAA,EAAAA,MAClDid,GAAuBC,GAAqBC,KAAwBnd,EAAAA,EAAAA,MACpEod,GAAyBC,GAAuBC,KAA2Btd,EAAAA,EAAAA,MAC3Eud,GAAuBC,GAAqBC,KAAyBzd,EAAAA,EAAAA,MACrE0d,GAA6BC,GAA2BC,KAA+B5d,EAAAA,EAAAA,MAExF,QAAEyZ,GAAO,kBAAEoE,GAAiB,YAAEC,IAAgB7jB,GAAQ,CAAC,GAE7D8jB,EAAAA,EAAAA,GAAiBrK,GAAgBtN,GAAgBnL,EAAQod,GAAeE,IAExE,MAAMyF,IAAerU,EAAAA,EAAAA,IAAQ,KAC3B,MAAMsU,EAAmB,IAAItiB,IAAIoc,IAEjC,OAAOlB,IAAkBtP,OAAQrM,IAC/B,IAAK+iB,EAAiB1hB,IAAIrB,GAAK,OAE/B,MAAM0F,EAAW1F,IAAOgc,EAClBgH,EAAQhjB,IAAOijB,EAAAA,IAEfhH,EAASL,KAAkB5b,GAC3BkjB,OAA6B7jB,IAAlB4c,GAAQE,QAAyC,IAAlBF,EAAOE,MAEvD,OAAQzW,IAAasd,GAASE,KAE/B,CAACvH,GAAkBK,EAAUJ,GAAiBiB,KAE3CsG,GAAmBpG,IAAkB2D,IAAYne,QAAQugB,IAAcjd,SAEvE,eAAEud,GAAc,IAAEC,KAAQC,EAAAA,EAAAA,GAAiB,CAC/CvkB,OACAgB,SACAsd,eACA3F,gBACA6H,QACAgE,sBAAsBC,EAAAA,EAAAA,IAAqB,CAAC,GAC5C9E,oBACAX,oBACAwC,sBACAF,gBACAP,0BACAM,YACA5H,iBACAkE,aACAuD,SACAwD,aAAcN,KAGVO,IAAwBC,EAAAA,EAAAA,GAAkBC,EAAAA,KAE1CC,IAAc5d,EAAAA,EAAAA,GAAiB/E,IACnC,GAAIA,EAAEgB,SAAWsW,KAAkB+F,KAAY7B,GAG7C,OAFAxb,EAAE4iB,sBACFvC,GAAiB,CAAEvhB,GAAID,IAIzB,MAAMgkB,EAAoBtI,IAAYkH,GAMtC,GAJIlH,IACF0F,GAA0B,CAAE6C,OAAO,IAGjCtH,GACFqE,GAAa,CACXhhB,SACAoI,UAAWwU,SAHf,CAQA,GAAInE,GAMF,OALAoI,GAAgB,CAAE7gB,SAAQgkB,mBAAmB,GAAQ,CAAEE,uBAAuB,SAE1ExI,IACFoF,GAAe,CAAEqD,OAAO,KAK5B,GAAI3F,GAAS,CACX,GAAI7M,EAGF,YAFAwP,QAAgB7hB,EAAW,CAAE4kB,uBAAuB,IAQpD,GAJKF,GACH9C,GAAe,CAAElhB,UAAU,CAAEkkB,uBAAuB,KAGjDtB,GAAmB,MAE5B,CAEAhC,GAAS,CAAE3gB,GAAID,EAAQgkB,oBAAmBI,sBAAsB,GAAQ,CAAEF,uBAAuB,IAE7FzI,GAAckE,GAChBoB,IA5BF,IAgCIsD,IAAkBne,EAAAA,EAAAA,GAAiB/E,IACvCA,EAAE4iB,iBACFrD,KAAc1gB,KAGVskB,IAAepe,EAAAA,EAAAA,GAAgB,KAC/B8Y,GACFsC,MAIFc,KACAT,QAGI4C,IAAare,EAAAA,EAAAA,GAAgB,KAC7B8Y,GACFsC,MAIFiB,KACAT,QAGI0C,IAAete,EAAAA,EAAAA,GAAgB,KAC/B8Y,GACFsC,KAIFC,GAAqB,CAAEvhB,SAAQykB,WAAYC,EAAAA,QAGvCC,IAAyBze,EAAAA,EAAAA,GAAgB,KAC7Cwc,KACAT,OAGI2C,IAAe1e,EAAAA,EAAAA,GAAgB,KAC/B8Y,GACFsC,KAIGtiB,GACLqiB,GAAe,CAAErhB,OAAQhB,EAAKiB,GAAI4kB,WAAY,OAG1CC,IAAiBC,EAAAA,EAAAA,GAAsB,CAC3C/lB,OACAE,OACAolB,gBACAC,cACAC,gBACAG,0BACAC,gBACA3I,WACAsE,WACAnB,UACAQ,mBACAnH,iBACAtN,iBACAwR,aACAuD,WAGI8E,IAAiBC,EAAAA,EAAAA,IAAkB3B,GAAKtkB,EAAOwhB,OAAsBlhB,IAG3EyB,EAAAA,EAAAA,IAAU,KACJikB,IAAkBxG,IAAWvH,SAA+B3X,IAAnB2gB,GAC3CgB,GAAW,CAAEjhB,YAEd,CAACA,EAAQigB,EAAgBhJ,GAAUuH,GAASwG,KAE/C,MAAME,GAAWhmB,GAAQgY,IAAc+D,EAAAA,EAAAA,IAAa/b,EAAMgY,IAClDiO,cAAeC,KAAwBC,EAAAA,EAAAA,GAA4BH,IAErEI,IAAO5W,EAAAA,EAAAA,IAAQ,KACnB,GAAK6W,EAAAA,GAEL,OAAI9M,GACK,KAAI+M,EAAAA,EAAAA,IAAmBra,GAAe,SAAUnL,KAGlD,KAAIwlB,EAAAA,EAAAA,IAAmBxlB,EAAQ,SAAUse,EAAAA,OAC/C,CAACte,EAAQmL,GAAesN,KAE3B,IAAKzZ,EACH,OAGF,MAAM+N,GAAO7N,GAAQF,EAEfymB,IAAgBxL,EAAAA,EAAAA,GACpB,4BACAyL,EAAAA,EAAAA,IAAS1lB,GAAU,UAAY,QAC/Bwe,IAAW,QACX/C,GAAc,WACd8C,GAAmB,iBACnB5B,IAAa,aACbK,IAAkB2D,IAAY,sBAC9BpiB,IAGF,OACEqU,EAAAA,EAAAA,IAAC+S,EAAAA,EAAQ,CACPrC,IAAKA,GACL/kB,UAAWknB,GACXH,KAAMA,GACN1U,MAAO,QAAQ6P,MACf9H,QAAS6F,KAAY9C,GACrBoJ,eAAgBA,GAChBxK,QAASwJ,GACTpD,YAAa2D,GACbuB,mBAAiB,EAAApnB,SAAA,EAEjBoU,EAAAA,EAAAA,IAAA,OAAKrU,WAAW0b,EAAAA,EAAAA,GAAe,SAAU,oBAAoBzb,SAAA,EAC3DF,EAAAA,EAAAA,GAAC8b,EAAAA,EAAM,CACLrN,KAAM8V,GAAc3D,EAAmBnS,GACvCqK,gBAAiBlY,GAAMmY,OACvBoB,cAAeA,GACf4B,KAAMsC,GAAY,SAAW,QAC7BkJ,gBAAiBhD,MAEnBjQ,EAAAA,EAAAA,IAAA,OAAKrU,UAAU,uBAAsBC,SAAA,EACnCF,EAAAA,EAAAA,GAAA,OACEC,WAAW0b,EAAAA,EAAAA,GAAe,gBAAiB,eAAgBmL,IAAuB,0BAElFA,IAAuB5iB,QAAQxD,EAAK8mB,qBACpCxnB,EAAAA,EAAAA,GAACynB,EAAAA,EAAQ,CAAChe,KAAK,OAAOxJ,UAAU,mCAAmC8b,KAAK,cAE1E/b,EAAAA,EAAAA,GAAC0nB,EAAAA,EAAS,CACRhnB,KAAMA,EACNogB,QAASA,EACT6G,6BAA2B,EAC3BC,YAAavC,GACbzD,OAAQA,EACRzE,WAAYA,OAGfzc,EAAKmnB,cAAgBnnB,EAAKonB,iBACzB9nB,EAAAA,EAAAA,GAACkd,EAAc,CAACE,SAAUA,GAAUD,WAAYA,EAAY9V,SAAUoa,QAG1EnN,EAAAA,EAAAA,IAAA,OAAKrU,WAAW0b,EAAAA,EAAAA,GAAe,OAAQ+C,IAAkB2D,IAAY,YAAYniB,SAAA,EAC/EoU,EAAAA,EAAAA,IAAA,OAAKrU,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,GAACic,EAAAA,EAAa,CACZxN,KAAM8V,GAAc3D,EAAoBnS,GACxC8V,YAAaA,GACbwD,wBAAwB,kBACxB7L,iBAAe,EACfpD,gBAAiBpX,IAAWd,GAAMe,IAAMf,GAAMmY,OAC9CoB,cAAeA,GACf+H,oBAAqBA,EACrB8F,oBAAqB7K,IAEtB2D,IAAY3G,KAAiBna,EAAAA,EAAAA,GAACM,EAAAA,EAAI,CAACF,KAAK,WACzCJ,EAAAA,EAAAA,GAAA,OAAKC,UAAU,cACd+e,KACChf,EAAAA,EAAAA,GAACioB,EAAAA,EAAe,CACdvc,QAASsT,GACTkJ,eAAiB/N,QAA4CnZ,EAA5BugB,EACjC4G,UAAWjH,GAAOkH,WAIxB9T,EAAAA,EAAAA,IAAA,OAAKrU,UAAU,WAAUC,SAAA,CACtB6kB,MACC1G,KACAre,EAAAA,EAAAA,GAAC0nB,EAAAA,EAAS,CACRhnB,KAAMA,EACNuhB,SAAUA,EACVnB,QAASA,EACT3G,cAAeA,GACfkO,WAAYznB,GAAM0nB,eAClB1G,OAAQA,EACRzE,WAAYA,OAIjB2H,KACC9kB,EAAAA,EAAAA,GAACqd,EAAQ,CACPC,iBAAkBmH,GAClBlH,gBAAiBA,QAItBsG,KACC7jB,EAAAA,EAAAA,GAACuoB,EAAAA,EAAe,CACdrnB,OAAQkiB,GACRjiB,QAASmiB,GACTkF,oBAAqBzE,GACrBrjB,KAAMA,EACNyZ,cAAeA,KAGlB6J,KACChkB,EAAAA,EAAAA,GAACyoB,EAAAA,EAAa,CACZvnB,OAAQqiB,GACRpiB,QAASsiB,GACT+E,oBAAqBtE,GACrBxiB,OAAQA,IAGXyiB,KACCnkB,EAAAA,EAAAA,GAAC0oB,EAAAA,EAAe,CACdxnB,OAAQwiB,GACRviB,QAASyiB,GACT4E,oBAAqBnE,GACrB3iB,OAAQA,S,mFC5eH,SAASinB,EACtBC,EACAC,EACAC,GAEA,MAAM,6BACJC,IACEtb,EAAAA,EAAAA,MAAYub,SAASC,OAElBC,EACLC,IAAkBlc,EAAAA,EAAAA,IAAS/I,QAAQ6kB,KAC9BK,EAAqBC,IAA0Bpc,EAAAA,EAAAA,KAAS,GACzDqc,GAA2B/V,EAAAA,EAAAA,SAAuCvS,GAElEuoB,GAAqB3hB,EAAAA,EAAAA,GAAgB,MACzCvG,EAAAA,EAAAA,MAAamoB,0CAGf/mB,EAAAA,EAAAA,IAAU,KACJ2mB,IAAwBP,IAC1BQ,GAAuB,GAEnBP,EAAeF,GACjBU,GAA0BpiB,cAG7B,CAACkiB,EAAqBP,EAAwBC,EAAcF,IAE/D,MAAMa,GAAmB7hB,EAAAA,EAAAA,GAAgB,MACvCvG,EAAAA,EAAAA,MAAaqoB,sBAAsB,CACjCC,MAAO,CACLC,cAAehB,EACfiB,QAASC,EAAAA,OAGbT,GAAuB,KAiCzB,MAAO,CACLE,qBACAQ,uBAtB6BA,CAC7B1mB,KACGiG,KAEH,GAAIsf,EAAqB,CAEvB,GADAU,EAAyBpiB,QAAU,IAAM7D,KAAWiG,IAC/Cyf,EAEH,YADA1nB,EAAAA,EAAAA,MAAa2oB,sCAIf,GAAIpB,EAAsBE,EAExB,YADAW,GAGJ,CAEApmB,KAAWiG,IAMX2gB,eAjCoBriB,EAAAA,EAAAA,GAAgB,KAChCghB,EAAsBE,EACxBW,IAEAH,GAA0BpiB,aAE5B7F,EAAAA,EAAAA,MAAamoB,uCACTN,IAAmB7nB,EAAAA,EAAAA,MAAa6oB,8BA2BpChB,oBACAC,iBAEJ,C,wECnDA,QAtBA,SACEtO,EACAsP,EACAC,GAEA,MAAM,qBAAEC,IAAyBhpB,EAAAA,EAAAA,MAE3BipB,GAAqBla,EAAAA,EAAAA,IAAQ,KACjC,MAAMma,GAAYC,EAAAA,EAAAA,IAASH,EAVD,KAU8C,GACxE,MAAO,KACLE,EAAU,CAAE1P,OAAQA,EAAS4P,SAAU,CAACN,OAEzC,CAACA,EAAStP,KAEbpY,EAAAA,EAAAA,IAAU,KAEJoY,GAAUsP,KADWC,KAAW,YAAaA,MAAS,cAAeA,KAEvEE,KAED,CAACA,EAAoBF,EAAOD,EAAStP,GAC1C,C,sUC3BA,IAAI6P,EASW,SAASC,EAA8B9iB,GACpD6iB,EAAWE,QACX/iB,EAAQ+iB,OACV,CAVIC,EAAAA,KACFH,EAAaxlB,SAAS4lB,cAAc,SACpCJ,EAAWK,UAAUC,IAAI,kCACzB9lB,SAAS+lB,KAAK9T,YAAYuT,I,oSCI5B,MAAMQ,GAAa,sB,gBCPnB,MAAMC,GAA0B,0BAsB1BC,GAAU,CACd,KACA,KACA,KACA,KACA,KACA,MAGF,SAASC,GAAUzkB,GAIjB,OAHe,IAAI0kB,WACAC,gBAAgB3kB,EAAM,aAE9BqkB,IACb,CAEA,SAASO,GAAeC,EAAYzE,GAClC,MAAMxV,EAAStM,SAAS4lB,cA3BhB,KA+BR,OAHAtZ,EAAOwV,KAAOA,EACdxV,EAAO2F,YAAYsU,EAAK3U,WAAU,IAE3BtF,CACT,CAEA,SAASka,GAAeD,EAAYnZ,GAClC,MAAMqZ,EAAKzmB,SAAS4lB,cAAcxY,GAGlC,OAFAqZ,EAAGxU,YAAYsU,EAAK3U,WAAU,IAEvB6U,CACT,CAEA,SAASC,GAASC,EAAoB/T,GACpC,IAAIgU,EAAUhU,EAAOhB,WAAU,GAC/B,OAAK+U,GAGDA,EAAMvZ,OAvDJ,QAuDauZ,EAAMvZ,MAAMyZ,aAC7BD,EAAUJ,GAAeI,EA9CrB,WAgDFD,EAAMvZ,OAzDF,WAyDWuZ,EAAMvZ,MAAM0Z,YAC7BF,EAAUJ,GAAeI,EAhDnB,OAkDJD,EAAMvZ,OA3DC,cA2DQuZ,EAAMvZ,MAAM2Z,iBAC7BH,EAAUJ,GAAeI,EAlDhB,MAoDPD,EAAMvZ,OA7DK,iBA6DIuZ,EAAMvZ,MAAM2Z,iBAC7BH,EAAUJ,GAAeI,EAnDZ,QAqDXD,EAAMvZ,OA/DG,UA+DMuZ,EAAMvZ,MAAM4Z,gBAC7BJ,EAAUJ,GAAeI,EArDd,QAuDTD,EAAMvZ,OAjEC,QAiEQuZ,EAAMvZ,MAAM4Z,gBAC7BJ,EAAUJ,GAAeI,EAvDhB,QA0DJA,GArBEA,CAsBX,CAiBA,SAASK,GAAkBC,GACzB,MAAMX,EAAOW,EAAMtV,WAAU,GAC7B,IAAIgV,EAAU5mB,SAASmnB,eAAeZ,EAAKa,aAAe,IACtDC,EAAad,EAQjB,MAPsB,MAAlBA,EAAKe,WACPV,EAAUN,GAAeM,EAAUL,EAA2BzE,MAC1D,UAAWyE,EAAKgB,WAAW,IAAMvoB,QAAQunB,EAAKgB,WAAW,GAAGna,SAC9Dia,EAAad,EAAKgB,WAAW,KAGjCX,EAAUF,GAASW,EAA2BT,GACvCA,CACT,CAEA,SAASY,GAAajB,GACpB,GAAIA,EAAKgB,aAAehB,EAAKgB,WAAWjlB,QAAU,GAAuB,OAAlBikB,EAAKe,UAAuC,OAAlBf,EAAKe,UAAoB,CACxG,IAAIG,EACAb,EAAU5mB,SAASmnB,eAAeZ,EAAKa,aAAe,IAC1D,GAAsB,OAAlBb,EAAKe,UAAuC,OAAlBf,EAAKe,UAAuC,OAAlBf,EAAKe,SAAmB,CAC9EG,EAAaznB,SAAS4lB,cAAcW,EAAKe,UACzCV,EAAU5mB,SAAS0nB,yBACnB,MAAMC,EAAQ,GACd,IAAK,IAAIxc,EAAI,EAAGA,EAAIob,EAAKgB,WAAWjlB,OAAQ6I,IAC1Cwc,EAAMlhB,QAAQ+gB,GAAajB,EAAKgB,WAAWpc,KAE7Cwc,EAAMpoB,IAAK4L,GAAkByb,EAAQ3U,YAAY9G,GACnD,MAA+C,IAApC+a,GAAQ0B,QAAQrB,EAAKe,WAC9BG,EAAaznB,SAAS4lB,cAAcW,EAAKe,UACzCV,EAAUK,GAAkBV,EAAKgB,WAAW,KACjB,MAAlBhB,EAAKe,UACdG,EAAaznB,SAAS4lB,cAAc,KACpCgB,EA9CN,SAA0BM,GACxB,MAAMX,EAAOW,EAAMtV,WAAU,GAC7B,IAAIgV,EAAU5mB,SAASmnB,eAAeZ,EAAKa,aAAe,IACtDC,EAAarnB,SAASmnB,eAAe,IASzC,MARI,UAAWZ,EAAKgB,WAAW,IAAMvoB,QAAQunB,EAAKgB,WAAW,GAAGna,SAC9Dia,EAAad,EAAKgB,WAAW,IAE3BhB,EAAKgB,WAAW,IAAsC,MAAhChB,EAAKgB,WAAW,GAAGD,WAC3CV,EAAUN,GAAeM,EAAQhV,WAAU,GAAQ2U,EAAKgB,WAAW,GAAyBzF,MAC5FuF,EAAad,EAAKgB,WAAW,GAAGA,WAAW,IAE7CX,EAAUF,GAASW,EAA2BT,GACvCA,CACT,CAiCgBiB,CAAiBtB,IACA,OAAlBA,EAAKe,SACdV,EAAUL,GAEVkB,EAAaznB,SAAS4lB,cAAc,QACpCgB,EAAUK,GAAkBV,IAE9B,OAAIkB,GACFA,EAAWxV,YAAY2U,GAChB,CAACa,IAGH,CAAClB,EAAK3U,WAAU,GACzB,CAEA,GAAI2U,EAAKgB,WAAY,CACnB,MAAMO,EAAQ,GACd,IAAK,IAAI3c,EAAI,EAAGA,EAAIob,EAAKgB,WAAWjlB,OAAQ6I,IAC1C2c,EAAMrhB,QAAQ+gB,GAAajB,EAAKgB,WAAWpc,KAE7C,OAAO2c,CACT,CAEA,MAAO,CAACvB,EACV,CAEA,SAASwB,GAAWxB,GAClB,OAAyB,IAAlBA,EAAKyB,QACd,CCxJA,MAAMC,GAAkB,0B,gBCYxB,MAIMC,GAAmB,IAAIhrB,IAAI,CAACirB,EAAAA,IAAmBC,EAAAA,IAAyBC,EAAAA,MAuI9E,GApI0BC,CACxBnmB,EACAomB,EACAC,EACAC,EACAC,EACAC,EACAC,KAEA,MAAM,iBACJC,EAAgB,uCAChBC,EAAsC,mCACtCC,IAAuC5sB,EAAAA,EAAAA,MACnCC,GAAOwL,EAAAA,EAAAA,MAEbrK,EAAAA,EAAAA,IAAU,KACR,GAAK4E,EA2GL,OAFAnC,SAASE,iBAAiB,QAAS8oB,GAAa,GAEzC,KACLhpB,SAASiH,oBAAoB,QAAS+hB,GAAa,IAxGrDC,eAAeD,EAAYrrB,GACzB,IAAKA,EAAEurB,cACL,OAGF,MAAMC,EAASxrB,EAAEC,QAAwB4P,QA3BL,wBA4BpC,IAAK2b,IAAUjB,GAAiBpqB,IAAIqrB,EAAM1sB,IACxC,OAMF,GAHAkB,EAAE4iB,iBAGEvgB,SAASopB,gBAAkBD,EAC7B,OAGF,MAAME,EAAa1rB,EAAEurB,cAAcI,QAAQ,QACrC5nB,EAAO/D,EAAEurB,cAAcI,QAAQ,aAErC,IAAIC,EAAsB7nB,GAAO8nB,EAAAA,EAAAA,IDzDhC,SAA2B9nB,GAChC,IAAI+nB,EAAWzpB,SAAS4lB,cAAc,OACtC,IACElkB,GDsKkCgoB,ECtKbhoB,GDuKDE,MAAMqkB,IAlB9B,SAA0BiB,GACxB,MAAMnB,EAAO/lB,SAAS4lB,cAAc,QAC9BkC,EAAQZ,EAAMK,WACdoC,EAAgB9X,MAAMC,KAAKgW,GAAOhf,OAAOif,IACzC6B,EAAa,GAEnB,IAAK,MAAMrD,KAAQoD,EACjBC,EAAWnjB,QAAQ+gB,GAAajB,IAGlC,IAAK,IAAIpb,EAAI,EAAGA,EAAIye,EAAWtnB,OAAQ6I,IACrC4a,EAAK9T,YAAY2X,EAAWze,GAAGyG,WAAU,IAG3C,OAAOmU,CACT,CAOS8D,CAAiB1D,GAAUuD,EAAiBvqB,QAAQ,eAAgB,MAAMgE,UAHxEgjB,GAAUuD,EAAiBvqB,QAAQ,eAAgB,KAAKgE,SCvKjE,CAAE,MAAO2mB,GACHC,EAAAA,KAEFC,QAAQ5jB,MAAM0jB,EAElB,CDgKa,IAAuBJ,EC/JpCD,EAAStmB,UAAYzB,EAAKvC,QAAQ,UAAW,KAAKA,QAAQ8oB,GAAiB,IAE3E,MAAMgC,EAAeR,EAASS,iBAAiC,iBAoC/D,OAnCID,EAAa3nB,SACfmnB,EAAWQ,EAAaA,EAAa3nB,OAAS,IAGhDuP,MAAMC,KAAK2X,EAASU,qBAAqB,MAAMlsB,QAASsoB,IACtD,GAAMA,aAAgB1oB,YAoBtB,OAhBA0oB,EAAK6D,gBAAgB,SAGA,OAAjB7D,EAAKxoB,SAAkBwoB,EAAK8D,YAAY,MACvB,MAAjB9D,EAAKxoB,SAAiBwoB,EAAKtU,YAAYjS,SAASmnB,eAAe,OAC9C,QAAjBZ,EAAKxoB,SAAsBwoB,EAAK+D,QAAQC,YAAYhE,EAAK8D,YAAY9D,EAAKiE,aAAa,QAAU,IAEjGjE,EAAK+D,QAAQG,eAAelE,EAAKmE,SAEjCC,EAAAA,GAA0BpE,EAAKxoB,UACjCwoB,EAAKqE,aAAa,mBAAoBD,EAAAA,GAA0BpE,EAAKxoB,UAGlEwoB,EAAK+D,QAAQC,YAAchE,EAAKa,cAAgBb,EAAKsE,WAAWtE,EAAK8D,YAAY9D,EAAKa,aAEvFb,EAAK+D,QAAQjsB,KAAKkoB,EAAKqE,aAAa,MAAOrE,EAAK+D,QAAQjsB,KACpDkoB,EAAK+D,QAAQC,YACnB,KAAKvgB,EAAAA,GAAsBC,YACzBsc,EAAK8D,YAAY9D,EAAKa,aAAe,IACrC,MACF,KAAKpd,EAAAA,GAAsB8gB,YACzBvE,EAAKa,YAAcb,EAAK+D,QAAQjsB,KAAO,QAxBzCkoB,EAAKmE,WA6BFjB,EAAStmB,UAAU4nB,SAC5B,CCSQC,CAAkBtpB,QAAO5F,GAAW,QAClCA,EAEAytB,IAAuB0B,EAAAA,GAAAA,IAAoB1B,IAAwBZ,IACrEY,GAAsB2B,EAAAA,GAAAA,IAAiB3B,GACvCX,OAGF,MAAM,MAAEjB,GAAUhqB,EAAEurB,cACpB,IAAIiC,EAA4B,GAShC,GAPIxD,EAAMrlB,OAAS,IACjB6oB,QAAcC,EAAAA,GAAAA,GAA8BzD,GACxCe,IACFyC,EAAQA,GAAO5S,MAAM,EAAG,MAIvB4S,GAAO7oB,SAAW+mB,EACrB,OAGF,MAAMgC,EAAc9B,GAAqBxQ,UAAUzW,OAASinB,EAAsB,CAAEzQ,KAAMuQ,GAE1F,IAAIiC,GAAiB,EACrB,IAGEA,EA3EmB,2CAyEJ,IAAIlF,WACWC,gBAAgB3kB,EA3EpC,aA4EsBzB,gBAC7BuqB,aA3EmB,UA4ExB,CAAE,MAAOV,GACP,CAGF,MAAMyB,EAAUF,GAAeA,EAAYvS,KAC3C,IAAI0S,EAAuBL,GAAO7oB,SAAWgpB,EAE7C,MAAMG,EAAiBN,QAAclmB,QAAQymB,IAAIP,EAAM5rB,IAAKosB,IAASC,EAAAA,EAAAA,GAAgBD,EAAKzwB,KAAMywB,KAAU,GACpGE,EAAcnD,GAAiB+C,GAAgBnpB,SAChDwpB,EAAAA,EAAAA,IAAuBpD,EAAe+C,EAAe,KAAQzsB,QAAQusB,GACpEQ,GAA6BC,EAAAA,EAAAA,IAAuBP,EAAe,IACnEQ,EAAYvD,GAAiBA,GAAewD,UAE9CxD,GAAiB+C,GAAgBnpB,OAAS,EAC5CumB,EAAiB,CACfriB,QAASpK,EAAK,gCAA4BN,EAAW,CAAEqwB,YAAaV,EAAenpB,WAKnFomB,GAAiBqD,EACnBlD,EAAiB,CAAEriB,QAASpK,EAAK,gCAA4BN,EAAW,CAAEqwB,YAAa,OAIrFF,IACFT,EAAuBK,EAClBL,IAQHA,IACF1C,EAAuC,CAAEsD,YAAY,IACrDrD,IACAP,EAAeE,EAAgB+C,EAAkBY,GAAgBA,EAAYC,OAAOb,KAGlFF,IACEC,EACF/C,EAAY4C,GAEZ9C,EAA0B8C,EAAalC,GAAO1sB,MAjB9CosB,EAAiB,CACfriB,QAASpK,EAAK,gCAA4BN,EAAW,CAAEqwB,YAAaV,EAAenpB,UAmB3F,GAOC,CACDimB,EAA2BG,EAAeF,EAAgBrmB,EAAUwmB,EACpEC,EAAuBH,EAAarsB,K,+DClIxC,IAAImwB,IAAW,EAUf,MCXMC,GAAe,IAAItvB,IAAY,CAAC8M,EAAAA,GAAsByiB,QAASziB,EAAAA,GAAsB0iB,M,4BCR3F,MACMC,GAA0B,2CAC1BC,GAAe,4CACfC,GAAiB,CACrBC,SAAU,GACV3jB,MAAO,GACP4jB,aAAa,EACbC,gBAAiB,IAGbC,GAASjtB,SAAS4lB,cAAc,OA2EtC,MAAMsH,IAAsBC,EAAAA,GAAAA,GAAS,CAACL,EAAkB3jB,EAAe4jB,KAAyB,CAC9FD,WACA3jB,QACA4jB,cACAC,gBAAiBF,EAAS7tB,iBCpFtBmuB,GAAU,IAAI9sB,OAAO+sB,EAAAA,IAAkB,K,mDCH7C,MACMC,GAAiC,IAAIhtB,OAAO,IAAII,EAAAA,IAAgBF,UAAW,K,gBCXjF,MAEM+sB,GAAmB,CAAEC,YAFP,IAAIC,IAAI,cAAyD3L,KAE7C4L,aAAa,GAC/CC,GAAc,CAAEppB,KAAM,aAI5B,IAAIqpB,GACAC,GACAC,GAEG7E,eAAe9kB,KAQpB,OANKypB,KACHA,GAAsB,qCACtBC,UAAsBD,IAAqBG,QAC3CD,GAAgB,IAAID,GAAaN,KAG5BK,EACT,CAEO3E,eAAe+E,GAAMC,SA6C5BhF,uBACQ9kB,WACA2pB,GAAcE,OACtB,CA/CQE,GAEN,MAAMC,EAAYxd,KAAKC,MACvB,IAAIwd,EACJ,MAAMC,EAAuB,GACvBC,EAAqB,GAE3BR,GAAcS,gBAAmBC,IAC/BH,EAAO5nB,KAAK+nB,IAGd,MAAMC,EAsCR,SAA6BC,GAC3B,MAAMluB,EAASkuB,EAASC,WAClBC,EAAWpuB,EAAOquB,QAAQC,iBAChCF,EAASG,QAvEM,GAwEfvuB,EAAOwuB,QAAQJ,GAEf,MAAMK,EAAaL,EAASM,kBACtBC,EAAY,IAAIC,WAAWH,GACjC,IAAII,GAAc,EAoBlB,OAlBA,SAASC,IACP,GAAID,EACF,OAGFT,EAASW,qBAAqBJ,GAE9B,MAEMK,EAFML,EAAUxmB,OAAO,CAACC,EAAK5G,IAAY4G,EAAM5G,EAAS,GAC1CitB,EACE,IAzDoCO,KAC1DlB,EAAS7nB,KAAc,IAAT+oB,GACdvB,EAAiBuB,IAyDjBC,CAAGD,EAxFY,GAwFU,EAAIA,IAE7BE,EAAAA,EAAAA,IAAeJ,EACjB,CAEAA,GAEO,KACLD,GAAc,EAElB,CArE0BM,CAAoB7B,IAK5C,MAAO,CACL8B,KAAMA,IAAM,IAAI3qB,QAAgB,CAACC,EAASC,KACxC2oB,GAAc+B,OAAS,KACrB3qB,EAAQ,CACN4qB,KAAM,IAAIC,KAAK1B,EAAQV,IACvBqC,SAAUvf,KAAKwf,QAAQ7B,GAAYzd,KAAKC,OAASud,GAAa,KAC9DG,cAGJR,GAAcoC,QAAU/qB,EAExB,MAAMgrB,EAAY1f,KAAK2f,IAAI,EAAGjC,EAjDT,IAiD0Cxd,KAAKC,OACpEyf,WAAW,KACTvC,GAAc8B,OACdnB,KACC0B,KAELG,MAAOA,KACL,MAAMH,EAAY1f,KAAK2f,IAAI,EAAGjC,EAxDT,IAwD0Cxd,KAAKC,OACpEyf,WAAW,KACTvC,GAAcwC,QACdlC,EAAWzd,KAAKC,MAChB6d,KACC0B,IAGT,C,wCC/DA,MAOA,GAP4CjpB,IAC1C,MAAM,YAAEmlB,GAAgBnlB,EAClBqpB,GAAkBnpB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,mBAAoB+kB,EAAY/pB,QAEvF,OAAOiuB,GAAkBz1B,EAAAA,GAAAA,GAACy1B,EAAe,IAAKrpB,SAAYpL,G,gHCuD5D,MA0NA,IAAenB,EAAAA,EAAAA,IA1NI61B,EACjBh0B,SACAke,WACA+V,kBACAC,iBACAC,iBACAC,qBACAC,gBACAC,gBACAC,mBACAC,gBACAC,aACAC,WACAC,cACAC,QACAC,yBACAC,eACAC,iBACA3W,kBACA4W,oBACAC,eACAC,aACAC,cACAC,eACAC,uBAEA,MAAM,yBACJC,IACE31B,EAAAA,EAAAA,OACG41B,EAAkBC,EAAgBC,IAAmB1wB,EAAAA,EAAAA,MACrD2wB,EAAkBC,EAAkBC,IAAmBC,EAAAA,GAAAA,GAAeN,EAAkBE,GAEzFK,EAAuBzB,GAAiBC,EACxCyB,EAAsB1B,GAAiBC,GAEtC0B,EAAyBC,EAA2BC,IAA+BnxB,EAAAA,EAAAA,KACpFoxB,EAAaZ,GAAoBS,EAEjCI,EAAiBrB,GAAkBA,GAAgBrF,WACpDltB,SAAQ6zB,EAAAA,EAAAA,IAAgBtB,IACtBvyB,SAAQ8zB,EAAAA,EAAAA,IAAgBvB,KACzBwB,EAASxB,GAAkBA,GAAgBrF,WAAaltB,SAAQg0B,EAAAA,EAAAA,IAAgBzB,KACjF0B,EAAAA,EAAAA,IAAgB1B,KAAmB2B,EAAAA,EAAAA,IAAmB3B,KAE3Dh0B,EAAAA,EAAAA,IAAU,KACJw0B,GACFK,KAED,CAACL,EAAkBK,KAEtB70B,EAAAA,EAAAA,IAAU,KACJo1B,EACFjB,IAEAC,KAED,CAACgB,EAAYhB,EAAaD,IAE7B,MAAMyB,GAAyBzwB,EAAAA,EAAAA,GAAgB,KACzCqvB,EACFE,IAEAD,MAIEoB,GAAmB1wB,EAAAA,EAAAA,GAAiB/E,IACxC,MAAM,MAAEwtB,GAAUxtB,EAAEC,OACdy1B,GAAiBC,EAAAA,GAAAA,IAAcnI,GAEjCkI,GAAgB/wB,QAClBmvB,EAAa4B,KAIXE,GAAoB7wB,EAAAA,EAAAA,GAAgB,KACxCovB,EAAyB,CAAE0B,gBAAgB,KAC3CC,EAAAA,GAAAA,GACE5hB,MAAMC,KAAKwgB,EAAuBoB,EAAAA,IAChC7C,EAAgB8C,EAAAA,IAAgCC,EAAAA,KAC/CC,KAAK,KACPl2B,GAAMy1B,EAAiBz1B,MAItBm2B,GAAuBpxB,EAAAA,EAAAA,GAAgB,KAC3CovB,EAAyB,CAAE0B,gBAAgB,KAC3CC,EAAAA,GAAAA,IAAuB1C,GAAoBC,EACvCnf,MAAMC,KAAKiiB,EAAAA,KAA+BF,KAAK,KAC/C,IACEl2B,GAAMy1B,EAAiBz1B,MAGzBq2B,GAAiBtxB,EAAAA,EAAAA,GAAgB,KACrC,MAAMipB,EAAO,IAAIsI,KAAK,EAACC,EAAAA,GAAAA,OAAiBC,EAAAA,IAAoB,CAAE5vB,KAAM,eACpEktB,EAAa,CAAC9F,MAGVyI,IAAOlpB,EAAAA,EAAAA,IAAQ,IACZ+lB,EACHxzB,OAAO2L,OAAO6nB,GAAYnoB,OAAQurB,MAC7BnD,IAAamD,EAAIC,qBACL,SAAbpD,GAAuBmD,EAAI53B,KAAOD,IACjC63B,EAAIE,sBAAuBF,EAAIE,oBAAoB50B,SAAS,UAG1D00B,EAAIE,oBAAqB50B,SAASuxB,UAEzCp1B,EACH,CAACm1B,EAAYz0B,EAAQ00B,IAElBsD,IAAUn4B,EAAAA,EAAAA,KACVD,IAAOwL,EAAAA,EAAAA,KAEb,GAAK6oB,EAIL,OACErhB,EAAAA,GAAAA,IAAA,OAAKrU,UAAU,aAAYC,SAAA,CAEvBu2B,GAAkBD,GAChBx2B,EAAAA,GAAAA,GAAC25B,GAAAA,EAAqB,CACpBh4B,GAAG,sBACH1B,WAAW0b,EAAAA,EAAAA,GAAe,4CAA6Csb,GAAoB,aAC3F9B,OAAK,EACLrX,MAAM,cACN8b,WAAYvB,EACZwB,UAAU,wBACVC,aAAa,wBACbC,UAAQ,EAAA75B,UAERF,EAAAA,GAAAA,GAACM,GAAAA,EAAI,CAACF,KAAK,eAGbJ,EAAAA,GAAAA,GAAC25B,GAAAA,EAAqB,CACpBh4B,GAAG,qBACHq4B,SAAU91B,QAAQuyB,GAClBx2B,WAAW0b,EAAAA,EAAAA,GAAe,4CAA6Csb,GAAoB,aAC3F9B,OAAK,EACLrX,MAAM,cACN8b,WAAYvB,EACZwB,UAAU,oBACVC,aAAa,uBACbC,UAAQ,EAAA75B,UAERF,EAAAA,GAAAA,GAACM,GAAAA,EAAI,CAACF,KAAK,cAIjBkU,EAAAA,GAAAA,IAAC2lB,GAAAA,EAAI,CACHt4B,GAAG,uBACHT,OAAQ22B,EACRqC,WAAS,EACTC,UAAU,QACVC,UAAU,SACVj5B,QAASg2B,EACTl3B,UAAU,yBACVuoB,oBAAqB2O,EACrBkD,aAAeC,EAAAA,QAAkCt5B,EAAnBo2B,EAC9BmD,aAAeD,EAAAA,QAAkCt5B,EAAnBq2B,EAC9BmD,mBAAoBF,EAAAA,GACpBG,eAAe,qBAAoBv6B,SAAA,EAMjC01B,IACA51B,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CAACz6B,UAAU,iBAAiB+5B,UAAQ,EAAA95B,SAC1CoB,GAAyB,cAApBwe,GAAmC4W,EACrC,0CACA,gCAGPd,IACCthB,EAAAA,GAAAA,IAAAqmB,GAAAA,GAAA,CAAAz6B,SAAA,CACGu3B,IAAwBQ,IACvBj4B,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CAACE,KAAK,QAAQ5e,QAASyc,EAAkBv4B,SAC/Cw5B,GAAQlC,EAAuB,8BAC3BzB,EAAgB,4BAA8B,gCAGpDE,GAAoBC,KAAmB4B,IAEtC93B,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CAACE,KAAK,WAAW5e,QAASgd,EAAqB94B,SACrDw5B,IAASzD,GAAoBC,EAAgB,4BAA8B,oBAGjFD,GAAoBM,IACnBv2B,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CAACE,KAAK,MAAM5e,QAASkd,EAAeh5B,SAC1Cw5B,GAAQ,sBAKhB7D,IAAmBY,IAClBz2B,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CAACE,KAAK,OAAO5e,QAAS8a,EAAa52B,SAAEw5B,GAAQ,UAEvD5D,IAAuBW,IACtBz2B,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CAACE,KAAK,SAAS5e,QAAS+a,EAAiB72B,SAAEoB,GAAK,oBAGzDm1B,IAAmBD,IAAiBH,GAAeiD,IAAM70B,IAAK80B,IAC9Dv5B,EAAAA,GAAAA,GAAC66B,GAAAA,EAAa,CACZtB,IAAKA,EACL73B,OAAQA,EACRke,SAAUA,EACV0W,MAAOA,EACPwE,aAAcnD,EACdoD,aAAcnD,aCtQ1B,GAP2CxrB,IACzC,MAAM,OAAElL,GAAWkL,EACb4uB,GAAiB1uB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,kBAAmBtL,GAEzE,OAAO85B,GAAiBh7B,EAAAA,GAAAA,GAACg7B,EAAc,IAAK5uB,SAAYpL,G,4BCkB1D,MA0DA,IAAenB,EAAAA,EAAAA,KAAKU,EAAAA,EAAAA,IAClB,CAACC,GAAUsJ,gBACT,MAAM,OAAEpI,IAAWqe,EAAAA,EAAAA,KAAyBvf,IAAW,CAAC,EAGxD,MAAO,CACLkL,QAFchK,GAASud,EAAAA,EAAAA,KAAkBze,EAAQkB,EAAQoI,QAAa9I,IAJxDT,CA1D+B06B,EACjD/5B,SAAQ0e,WAAUlU,UAASvK,cAE3B,MAAM,qBAAE+5B,IAAyB75B,EAAAA,EAAAA,MAE3BC,GAAOC,EAAAA,EAAAA,MAEN61B,EAAkBC,IAAoBE,EAAAA,GAAAA,GAAer2B,EAAQC,IAC9D,oBAAEg6B,GAAwBzvB,GAAW,CAAC,EAEtC0vB,GAAchrB,EAAAA,EAAAA,IAAQ,KAC1B,MAAMirB,EAAuB,GAK7B,OAJA3vB,GAAS4vB,gBAAiBn4B,QAASo4B,IACjCF,EAAM1vB,KAAK4vB,EAAI92B,IAAK+2B,IAAWC,EAAAA,GAAAA,GAAyBn6B,EAAMk6B,OAGzDH,GACN,CAAC/5B,EAAMoK,GAAS4vB,kBAEnB,GAAK5vB,GAAYA,EAAQ4vB,gBAIzB,OACEt7B,EAAAA,GAAAA,GAACi6B,GAAAA,EAAI,CACH/4B,OAAQA,EACRg5B,UAAWiB,EACXhB,UAAU,QACVC,UAAU,SACVj5B,QAASA,EACTlB,UAAU,kBACVuoB,oBAAqBrnB,EACrBk5B,aAAeC,EAAAA,QAAkCt5B,EAAnBo2B,EAC9BmD,aAAeD,EAAAA,QAAkCt5B,EAAnBq2B,EAC9BqE,WAAS,EAAAx7B,UAETF,EAAAA,GAAAA,GAAA,OAAKC,UAAU,wBAAuBC,SACnCwL,EAAQ4vB,gBAAgB72B,IAAI,CAAC82B,EAAKlrB,KACjCrQ,EAAAA,GAAAA,GAAA,OAAKC,UAAU,MAAKC,SACjBq7B,EAAI92B,IAAI,CAAC+2B,EAAQG,KAChB37B,EAAAA,GAAAA,GAAC47B,GAAAA,EAAM,CACLvhB,QAAM,EACN2f,SAA0B,gBAAhBwB,EAAO/xB,KAEjBuS,QAASA,IAAMkf,EAAqB,CAClCx5B,OAAQgK,EAAQhK,OAAQoI,UAAW4B,EAAQ/J,GAAIie,WAAU4b,WACxDt7B,SAEFk7B,IAAc/qB,GAAGsrB,gBClBlC,IAAe97B,EAAAA,EAAAA,IA5CqBg8B,EAClC36B,SACA8a,UACAgC,OACA3M,iBAEA,MAAMyqB,GAAUvoB,EAAAA,EAAAA,MAuBhB,OArBA9Q,EAAAA,EAAAA,IAAU,KACR,MAAMs5B,EAASD,EAAQ50B,QACvB,IAAK60B,EAAQ,OAEb,MAAMvmB,EAAQumB,EAAOC,YAAc,EAEhBD,EAAOrpB,QAAQ,aACvBJ,MAAM2E,YAAY,wBAAyB,GAAGzB,QACxD,CAACtU,EAAQ8c,KAEZvb,EAAAA,EAAAA,IAAU,KACR,MAAMs5B,EAASD,EAAQ50B,QACvB,IAAK60B,EAAQ,OAEb,MAAME,EAAaF,EAAOrpB,QAAQ,aAElC,MAAO,KACLupB,EAAW3pB,MAAM4pB,eAAe,2BAEjC,KAGD5nB,EAAAA,GAAAA,IAACsnB,GAAAA,EAAM,CACL37B,WAAW0b,EAAAA,EAAAA,GAAe,kCAAmCza,GAAU,QACvEi0B,OAAK,EACLrX,MAAM,cACNkc,SAAU3oB,EACV2K,QAASA,EACT6d,UAAU,4BAA2B35B,SAAA,EAErCF,EAAAA,GAAAA,GAACM,GAAAA,EAAI,CAACF,KAAK,SAASH,WAAW0b,EAAAA,EAAAA,GAAe,gBAAiBza,GAAU,WACzElB,EAAAA,GAAAA,GAAA,QAAMglB,IAAK8W,EAAS77B,UAAU,gBAAeC,UAAE6B,EAAAA,EAAAA,GAAWic,UCxChE,GAP+C5R,IAC7C,MAAM,OAAElL,GAAWkL,EACb+vB,GAAqB7vB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,sBAAuBtL,GAEjF,OAAOi7B,GAAqBn8B,EAAAA,GAAAA,GAACm8B,EAAkB,IAAK/vB,SAAYpL,G,6DCqElE,MA2VA,IAAenB,EAAAA,EAAAA,KAAKU,EAAAA,EAAAA,IAClB,CAACC,GACC47B,yBAAwB16B,SAAQke,WAAUE,sBAE1C,MACEuc,iBAAiB,WACfC,EAAU,SAAEC,EAAUhW,WAAYiW,EAAiB,UAAEC,EAAS,WAAEC,GAElEC,yBAA0BC,EAAY,+BACtCC,IACE1c,EAAAA,EAAAA,KAAe3f,GAEbs8B,EAAgC,cAApBhd,GACdid,EAAAA,EAAAA,KAAyBv8B,EAAQkB,IACjCs7B,EAAAA,EAAAA,KAAgBx8B,EAAQkB,EAAQke,GAC9Bqd,GAAgBvb,EAAAA,EAAAA,KAA0BlhB,KAAYq8B,EACtDK,EAAeX,IAAa76B,EAC5By7B,EAAoBX,GAAmB/3B,IAAK9C,IAAOsd,EAAAA,EAAAA,KAAkBze,EAAQ87B,EAAa36B,IAE1Fuf,GAAQC,EAAAA,EAAAA,KAAY3gB,EAAQkB,EAAQke,GACpCwd,EAAYlc,GAAOkc,UACnBC,EAAoBnc,GAAOmc,kBAC3BC,EAAgBF,GAAWE,cAC3BC,EAAaD,GAAgB/e,EAAAA,EAAAA,KAAW/d,EAAQ88B,QAAiBt8B,EAEvE,IAAI0K,EASA8xB,EAUJ,GAlBIV,EACFpxB,GAAU+xB,EAAAA,EAAAA,KAAqBj9B,EAAQkB,EAAQke,EAAUE,GAChDod,GAA8C,IAA9BV,EAAmBh1B,OAC5CkE,EAAUyxB,IAAoB,GACrBC,IAAchB,IACvB1wB,GAAUuT,EAAAA,EAAAA,KAAkBze,EAAQ48B,EAAUE,eAAiB57B,EAAQ07B,EAAUM,eAa/EZ,GAAapxB,EACf8xB,GAAS/d,EAAAA,EAAAA,KAAajf,EAAQkL,QACzB,GAAIwxB,EAAc,CACvB,IAAIS,EAAiBR,GAAmB14B,IAAKm5B,IAAMC,OAXXC,EAW4CF,EAVpFJ,GAASO,EAAAA,EAAAA,KAAsBv9B,EAAQs9B,GAClCN,IACHA,GAAS/d,EAAAA,EAAAA,KAAajf,EAAQs9B,IAEzBN,EALiCM,QAWgD9vB,OAAO9J,SAC/Fy5B,EAAiBA,GAAiBvvB,EAAAA,GAAAA,IAAOuvB,QAAkB38B,EAC3Dw8B,EAAoC,IAA3BG,GAAgBn2B,OAAem2B,IAAiB,QAAK38B,CAChE,MAAO,GAAIo8B,GAAa1xB,IAAY0wB,EAAwB,CAC1D,MAAM,YAAEhd,GAAgB1T,EAClBsyB,GAAiBC,EAAAA,EAAAA,KAAqBz9B,EAAQkB,GAChD0d,IAAgBA,EAAY8e,eAAiBF,KAC/CR,GAASO,EAAAA,EAAAA,KAAsBv9B,EAAQkL,IAGpC8xB,GAAYpe,GAAa+e,iBAAkBj6B,QAAQk5B,EAAUgB,aAChEZ,GAAS/d,EAAAA,EAAAA,KAAajf,EAAQkL,GAElC,CAEA,MAAMhL,EAAO88B,IAAUjf,EAAAA,EAAAA,KAAW/d,EAAQg9B,EAAO77B,IAC3C08B,EAAkB39B,IAAQ49B,EAAAA,EAAAA,IAAc59B,GAExC69B,EAAuBpB,GAAmBqB,KAAMC,GACpDA,GAASriB,QAAQ4B,MAAQrb,OAAO4B,KAAKk6B,EAAQriB,SAAS5U,OAAS,GAG3Dk3B,EAAwBxB,GAA8C,IAA9BV,EAAmBh1B,QAC5DtD,QAAQwH,GAAS0Q,QAAQuiB,WAExBC,EAAsBxB,GAAWM,eAAiB9d,IAAawd,EAAUE,cAEzEuB,EAAcnzB,IAAWozB,EAAAA,GAAAA,IAAkBt+B,EAAQkL,GAEzD,MAAO,CACL0xB,YACAC,oBACAP,YACApxB,UACA8xB,SACAP,gBACA8B,uBAAwB7B,EAAeV,EAAmBh1B,YAASxG,EACnEy7B,YACAC,aACA6B,uBACAS,sBAAsBngB,EAAAA,EAAAA,KAA2Bre,GACjDk+B,wBACAE,sBACAK,0BAA2BrC,EAC3BC,iCACAU,aACA1wB,cAAerM,EAAOqM,cACtBwxB,kBACA7B,oBACAF,aACAuC,gBAjGct+B,CAzVuC2+B,EACzD9B,YACAC,oBACAP,YACApxB,UACA8xB,SACAP,gBACA8B,yBACAtC,YACAC,aACA6B,uBACAnC,yBACA4C,uBACAN,wBACAE,sBACAK,4BACApC,iCACAU,aACA77B,SACAmL,gBACAwxB,kBACA7B,oBACAF,aACAuC,cACAM,cAEA,MAAM,oBACJC,EAAmB,4BACnBC,EAA2B,qBAC3BC,EAAoB,aACpBC,EAAY,aACZ7c,EAAY,gBACZ8c,EAAe,gCACfC,EAA+B,oBAC/BC,EAAmB,qBACnBC,EAAoB,gBACpBC,EAAe,kCACfC,EAAiC,wBACjCC,IACEz+B,EAAAA,EAAAA,MACE2jB,GAAMzR,EAAAA,EAAAA,MACNmmB,GAAUn4B,EAAAA,EAAAA,KACVD,GAAOwL,EAAAA,EAAAA,KAEPizB,EAAwD,gBAAlCr0B,GAAS0Q,QAAQ4jB,QAAQv2B,KAC/Cw2B,EAAiB7C,IAAchB,EAC/B8D,EAAmBh8B,QAAQk5B,GAAWgB,WACtC+B,EAAyBj8B,QAAQm5B,KAAuBjB,EAExDc,GAAeh5B,QAAQ66B,GAEvBlB,IAAmCj2B,EAAAA,EAAAA,GAAiBk2B,IACxD,MAAMt9B,GAASiN,EAAAA,EAAAA,MAKf,OAJA+vB,GAASO,EAAAA,EAAAA,KAAsBv9B,EAAQs9B,MAErCN,GAAS/d,EAAAA,EAAAA,KAAajf,EAAQs9B,IAEzBN,IAGHG,IAAiBvtB,EAAAA,EAAAA,IAAQ,KAC7B,IAAK8sB,GAAc,OACnB,MAAMC,EAAoBX,GAAmB/3B,IAAK9C,IAAOsd,EAAAA,EAAAA,MAAkBxR,EAAAA,EAAAA,MAAa6uB,EAAa36B,IAClGqM,OAAO9J,SACJk8B,EAAUjD,GAAmB14B,IAAKm5B,GAAMC,GAAiCD,IAAI5vB,OAAO9J,SAC1F,OAAOk8B,GAAUhyB,EAAAA,GAAAA,IAAOgyB,QAAWp/B,GAClC,CAACk8B,GAAcV,EAAmBF,IAE/B+D,KACApB,KACAvzB,IAAY0xB,IAAaN,MACzBa,KAAkBT,MAClBiD,IAIA,aACJG,GAAY,qBAAEC,KACZxZ,EAAAA,EAAAA,GACFsZ,KAAYN,IAAwBnB,OACpC59B,GACCi8B,OACDj8B,GACCi8B,EArFkB,KAuFlBA,IAEHx6B,EAAAA,EAAAA,IAAU,KACJo6B,GACFgD,EAAkC,CAAEhD,gCAAgC,MAIxE,MAAM2D,IAAgB54B,EAAAA,EAAAA,GAAgB,KAChCk1B,EACFyC,EAAa,CAAEz1B,eAAW9I,IACjB+9B,EACTa,IACSO,GACTd,IACAD,KACShC,IAAchB,GACvBgD,IAEFD,SAGF18B,EAAAA,EAAAA,IAAU,IAAO49B,IAAUI,EAAAA,GAAAA,GAAsBD,SAAiBx/B,EAAY,CAACq/B,GAASG,KAExF,MAAM,kBACJE,GAAiB,kBAAEC,GAAiB,kBAAEC,GAAiB,uBACvDC,GAAsB,sBAAEC,KACtBC,EAAAA,EAAAA,GAAuB/b,GAKrBgc,IAAqBp5B,EAAAA,EAAAA,GAAiB/E,IACtCw6B,EACFyC,EAAwB,CAAEp+B,WAG5Bk/B,GAAkB/9B,KAGdo+B,IAAmBr5B,EAAAA,EAAAA,GAAiB/E,IACxCA,EAAEqY,kBACFslB,KACAM,OAEII,GAAiClB,GAC9B,KACLa,KACAb,KAGEmB,IAAkCv5B,EAAAA,EAAAA,GAAgBs5B,GAA8B1B,IAChF4B,IAAyBx5B,EAAAA,EAAAA,GAAgBs5B,GAvBjBG,KAC5B3e,EAAa,CAAEhhB,OAAQgK,EAAShK,OAAQoI,UAAW4B,EAAS/J,GAAI+jB,mBAAmB,OAuB/E4b,IAAyB15B,EAAAA,EAAAA,GAAgBs5B,GAC7C,IAAM5B,EAAqB,CAAElB,eAAWp9B,MAEpCugC,IAAkC35B,EAAAA,EAAAA,GAAgBs5B,GAA8B1B,IAChFgC,IAA0B55B,EAAAA,EAAAA,GAAgB,KAC9Ci5B,KACKrD,GACLiC,EAAgC,CAAE/9B,OAAQ87B,EAAO77B,OAE7C8/B,IAAwB75B,EAAAA,EAAAA,GAAgBs5B,GAA8BV,KAEtEkB,IAAoB95B,EAAAA,EAAAA,GAAgB,IAAMod,EAAI9d,SAC9Cy6B,IAAiB/5B,EAAAA,EAAAA,GAAgB,IAAMod,EAAI9d,SAC3C06B,IAAiBh6B,EAAAA,EAAAA,GAAgB,IAAMod,EAAI9d,QAASwP,cAAc,mCAExEjU,EAAAA,EAAAA,IAAU,KACH69B,KACHO,KACAC,OAED,CAACD,GAAwBC,GAAuBR,KAEnD,MAAMrgC,IAAY0b,EAAAA,EAAAA,GAAe,0BAA2B4kB,IACtDsB,IAAkBC,EAAAA,GAAAA,GAAiBtE,GAAQ,GAC3CuE,IAAiBpmB,EAAAA,EAAAA,GACrB,iCACAqmB,EAAAA,EAAAA,GAAkBH,KAGdI,IAAW7xB,EAAAA,EAAAA,IAAQ,IACnB0sB,EACK,OAELqD,EACK,cAELjD,GACK,UAEL+C,EACK,aADT,EAKC,CAACnD,EAAWI,GAAc+C,EAAgBE,IAEvC+B,GAAanD,GAA0BA,EAAyB,EAClErF,EAAQ,wBAAyBqF,QACjC/9B,EAEEmhC,IAAkB/xB,EAAAA,EAAAA,IAAQ,KAC9B,IAAK1E,IAAYwxB,KAAiBxxB,EAAQ0Q,QAAQ4B,OAASye,GAAauC,EAAsB,OAAOtzB,EAErG,MAAM02B,GAAehS,EAAAA,EAAAA,IAAiB1kB,EAAQ0Q,QAAQ4B,MACtD,MAAO,IACFtS,EACH0Q,QAAS,IACJ1Q,EAAQ0Q,QACX4B,KAAMokB,KAGT,CAACpD,EAAsB9B,GAAcxxB,EAAS+wB,IAE3C4F,IAAoBP,EAAAA,GAAAA,GAAiBG,IAAU,GAErD,IAAK3B,GACH,OAGF,MAAMgC,GAAuB9E,IAAWa,GAAmB38B,IAAW87B,EAAO77B,IAAM67B,EAAO77B,KAAOkL,EAEjG,OACE7M,EAAAA,GAAAA,GAAA,OAAKC,UAAWA,GAAW+kB,IAAKA,EAAKud,cAAe3B,GAAkB1gC,UACpEoU,EAAAA,GAAAA,IAAA,OAAKrU,UAAW8hC,GAAe7hC,SAAA,EAC7BoU,EAAAA,GAAAA,IAAA,OAAKrU,UAAU,qBAAqB+b,QAAS4kB,GAAkB1gC,SAAA,CAC5DmiC,KAAqBriC,EAAAA,GAAAA,GAACM,GAAAA,EAAI,CAACF,KAAMiiC,KACjCn+B,QAAQk5B,GAAWgB,aAClBp+B,EAAAA,GAAAA,GAACM,GAAAA,EAAI,CAACF,KAAK,QAAQH,UAAU,oBAGjCD,EAAAA,GAAAA,GAACwiC,GAAAA,EAAuB,CACtBthC,OAAQm/B,GACRpgC,UAAU,eACVm9B,UAAWA,EACXC,kBAAmBA,EACnBwB,YAAaA,EACb4D,cAAY,EACZ/2B,QAASy2B,GACT3E,OAASf,OAAqBz7B,EAATw8B,EACrBkF,uBAAwB/E,GACxBuE,WAAYA,GACZxF,WAAYA,EACZ76B,MAAQi7B,IAAcmD,EAAkBvG,EAAQ,eAC5C+C,EAAY/C,EAAQ,qCAAkC14B,EAC1Dgb,QAASglB,GACTzD,WAAYA,KAEdv9B,EAAAA,GAAAA,GAAC47B,GAAAA,EAAM,CACL37B,UAAU,kBACVk1B,OAAK,EACLwN,OAAK,EACL7kB,MAAM,cACN+b,UAAWH,EAAQ,UACnB1d,QAASilB,GAAiB/gC,UAE1BF,EAAAA,GAAAA,GAACM,GAAAA,EAAI,CAACF,KAAK,aAEX6/B,GAAkB/C,MAAkBwB,IACpCpqB,EAAAA,GAAAA,IAAC2lB,GAAAA,EAAI,CACH/4B,OAAQw/B,GACRlvB,OAAQmvB,GACRe,kBAAmBA,GACnBC,eAAgBA,GAChBC,eAAgBA,GAChB3hC,UAAU,uBACVkB,QAAS0/B,GACTrY,oBAAqBsY,GAAsB5gC,SAAA,CAE1Cg9B,KACC5oB,EAAAA,GAAAA,IAAAqmB,GAAAA,GAAA,CAAAz6B,SAAA,EACEF,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CACPE,KAAO6B,OAAkCz7B,EAAtB,oBACnB4hC,WAAYnG,GAAYz8B,EAAAA,GAAAA,GAACM,GAAAA,EAAI,CAACF,KAAK,qBAAmBY,EAEtDgb,QAASA,IAAM0jB,EAAoB,CACjCjD,WAAW,IACVv8B,SAEFw5B,EAAQqF,EAAyB,EAAI,kBAAoB,sBAE5D/+B,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CACPE,KAAM6B,EAAY,yBAAsBz7B,EACxC4hC,WAAanG,OAA0Cz7B,GAA9BhB,EAAAA,GAAAA,GAACM,GAAAA,EAAI,CAACF,KAAK,gBAEpC4b,QAASA,IAAM0jB,EAAoB,CACjCjD,WAAW,IACVv8B,SAEFw5B,EAAQqF,EAAyB,EAAI,kBAAoB,qBAE3DR,IACCjqB,EAAAA,GAAAA,IAAAqmB,GAAAA,GAAA,CAAAz6B,SAAA,EACEF,EAAAA,GAAAA,GAAC6iC,GAAAA,EAAa,KACd7iC,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CACPE,KAAO8B,OAAmC17B,EAAtB,oBACpB4hC,WAAYlG,GAAa18B,EAAAA,GAAAA,GAACM,GAAAA,EAAI,CAACF,KAAK,qBAAmBY,EAEvDgb,QAASA,IAAM2jB,EAAqB,CAClCjD,YAAY,IACXx8B,SAEFw5B,EAAQqF,EAAyB,EAAI,0CAA4C,kBAEpF/+B,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CACPE,KAAM8B,EAAa,yBAAsB17B,EACzC4hC,WAAalG,OAA2C17B,GAA9BhB,EAAAA,GAAAA,GAACM,GAAAA,EAAI,CAACF,KAAK,gBAErC4b,QAASA,IAAM2jB,EAAqB,CAClCjD,YAAY,IACXx8B,SAEFw5B,EAAQqF,EAAyB,EAAI,0CAA4C,qBAIxF/+B,EAAAA,GAAAA,GAAC6iC,GAAAA,EAAa,KACd7iC,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CAACE,KAAK,UAAU5e,QAASmlB,GAAgCjhC,SAC/Dw5B,EAAQ,2BAIduG,IACC3rB,EAAAA,GAAAA,IAAAqmB,GAAAA,GAAA,CAAAz6B,SAAA,EACEF,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CACPE,KAAK,eACL5e,QAASolB,GAAuBlhC,SAE/Bw5B,EAAQ,0BAEVwG,IACClgC,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CACPE,KAAK,eACL5e,QAASslB,GAAuBphC,SAE/Bw5B,EAAQ,iBAGZ4I,KACCtiC,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CAACE,KAAK,OAAO5e,QAASwlB,GAAwBthC,SACpDoB,EAAK,4BAGVtB,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CAACE,KAAK,UAAU5e,QAASulB,GAAgCrhC,SAC/Dw5B,EAAQ,yBAEX15B,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CAACE,KAAK,SAAS5e,QAASylB,GAAsBvhC,SACpDw5B,EAAQ,8B,uCCzZ3B,MAOA,GAPqCttB,IACnC,MAAM,OAAElL,GAAWkL,EACb02B,GAAWx2B,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,YAAatL,GAE7D,OAAO4hC,GAAW9iC,EAAAA,GAAAA,GAAC8iC,EAAQ,IAAK12B,SAAYpL,G,gBCJ9C,MAOA,GAP6CoL,IAC3C,MAAM,OAAElL,GAAWkL,EACb22B,GAAmBz2B,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,oBAAqBtL,GAE7E,OAAO6hC,GAAmB/iC,EAAAA,GAAAA,GAAC+iC,EAAgB,IAAK32B,SAAYpL,GCG9D,GAP2CoL,IACzC,MAAM,OAAElL,GAAWkL,EACb42B,GAAiB12B,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,kBAAmBtL,GAEzE,OAAO8hC,GAAiBhjC,EAAAA,GAAAA,GAACgjC,EAAc,IAAK52B,SAAYpL,G,gBCJ1D,MAOA,GAPsCoL,IACpC,MAAM,OAAElL,GAAWkL,EACb62B,GAAY32B,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,aAActL,GAE/D,OAAO+hC,GAAYjjC,EAAAA,GAAAA,GAACijC,EAAS,IAAK72B,SAAYpL,GCGhD,GAPuCoL,IACrC,MAAM,OAAElL,GAAWkL,EACb82B,GAAa52B,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,cAAetL,GAEjE,OAAOgiC,GAAaljC,EAAAA,GAAAA,GAACkjC,EAAU,IAAK92B,SAAYpL,GCGlD,GAP2CoL,IACzC,MAAM,OAAElL,GAAWkL,EACb+2B,GAAiB72B,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,kBAAmBtL,GAEzE,OAAOiiC,GAAiBnjC,EAAAA,GAAAA,GAACmjC,EAAc,IAAK/2B,SAAYpL,G,gBCJ1D,MAOA,GAP0CoL,IACxC,MAAM,MAAEg3B,GAAUh3B,EACZi3B,GAAgB/2B,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,iBAAkB42B,GAEvE,OAAOC,GAAgBrjC,EAAAA,GAAAA,GAACqjC,EAAa,IAAKj3B,SAAYpL,G,mDCXxD,SAAka,WAAla,GAA6kB,WC+P7kB,UAAenB,EAAAA,EAAAA,KAAKU,EAAAA,EAAAA,IAClB,CAACC,GAAUkB,SAAQke,eACjB,MAAM0jB,GAAWnjB,EAAAA,EAAAA,KAAe3f,GAC1B+iC,GAAYC,EAAAA,EAAAA,KAAgBhjC,EAAQkB,EAAQke,IAC5C,mBACJ6jB,GACEjjC,EAEEkjC,EAAiBJ,EAASK,kBAAmBC,EAAAA,EAAAA,KAAcpjC,EAAQ8iC,EAASK,uBAAoB3iC,EAEtG,MAAO,CACL0iC,eAAgD,UAAhCA,GAAgBG,iBAA0B7iC,EAAY0iC,EACtEH,YACAE,uBAbcljC,CA9MGujC,EACrBpiC,SACAke,WACAvO,aACAqyB,iBACAH,YACAE,qBACAM,gBAEA,MAAM,qBACJC,EAAoB,yBACpBhN,IACE31B,EAAAA,EAAAA,MAEEC,GAAOwL,EAAAA,EAAAA,KAEPkY,GAAMzR,EAAAA,EAAAA,MAEN0wB,EAAkBR,EAAmBQ,gBACrCC,EAAyD,UAAxCT,EAAmBU,iBAEpC9D,GAAU/4B,EAAAA,EAAAA,GAAgB,IACvBpD,QAAQw/B,IAAmBH,IAAclyB,GAC/C,CAACA,EAAYkyB,EAAWG,KACrB,aAAEpD,IAAiB8D,EAAAA,GAAAA,GAAkB,CAAEljC,OAAQm/B,EAASrb,MAAKqf,kBAAkB,IAE/EC,EAAsD,SAAhCZ,GAAgBG,aAA0BH,EAAea,cAE/EC,GAAiBjxB,EAAAA,EAAAA,IAA+BmwB,GAElDA,GAAkBA,IAAmBc,EAAet9B,UACtDs9B,EAAet9B,QAAUw8B,GAG3B,MAAMe,EAAmBf,GAAkBc,EAAet9B,QAEpDw9B,EAAkD,SAAlCD,GAAkBZ,YAElCc,GAAeC,EAAAA,GAAAA,GAAaF,EAAgB,CAAEtoB,QAASqoB,QAAqBzjC,GAC5E6jC,GAAeC,EAAAA,EAAAA,IAAgBL,KAAqBM,EAAAA,EAAAA,IAAgBN,KACrEO,EAAAA,EAAAA,IAAgBP,KAAqBQ,EAAAA,EAAAA,IAAmBR,GACvDS,EAAmBL,IAAgBM,EAAAA,EAAAA,IAAaN,EAAc,aAC9DO,GAAkBC,EAAAA,GAAAA,GAASH,IAEzB5E,aAAcgF,EAA0BtgB,IAAKugB,IAAoBnB,EAAAA,GAAAA,GAAoC,CAC3GljC,OAAQgD,QAAQkhC,GAChBf,kBAAkB,EAClBmB,mBAAmB,IAGfC,EAAkBvhC,QAAQkhC,GAAmBE,GAE7CI,GAA4B99B,EAAAA,EAAAA,GAAgB,KAChDo8B,EAAqB,CAAEtiC,SAAQke,WAAU2jB,WAAW,OAGhD,kBACJ7C,EAAiB,kBAAEC,EAAiB,kBAAEC,EAAiB,uBACvDC,EAAsB,sBAAEC,EAAqB,wBAAE6E,IAC7C5E,EAAAA,EAAAA,GAAuB/b,EAAK+e,GAAW,GAErCrC,GAAoB95B,EAAAA,EAAAA,GAAgB,IAAMod,EAAI9d,SAC9Cy6B,GAAiB/5B,EAAAA,EAAAA,GAAgB,IAAMod,EAAI9d,SAC3C06B,GAAiBh6B,EAAAA,EAAAA,GACrB,IAAMod,EAAI9d,QAASwP,cAAc,IAAI3B,eAGjC6wB,GAAqBh+B,EAAAA,EAAAA,GAAiB/E,IAC1C+9B,EAAkB/9B,KAUpB,SAASgjC,EAAsBlgB,GAC7BqR,EAAyB,CAAEiN,gBAAiBte,GAC9C,CAEA,SAASmgB,EAAoBngB,GAC3BqR,EAAyB,CAAEmN,iBAAkBxe,GAC/C,CAEA,IAfAljB,EAAAA,EAAAA,IAAU,KACH69B,GAAiBmE,IACpB5D,IACAC,MAED,CAACD,EAAwBC,EAAuBR,EAAcmE,IAU5DnE,GAAiBmE,EAmDtB,OACEzkC,EAAAA,GAAAA,GAAA,OACEC,WAAW0b,EAAAA,EAAAA,GD5LM,YC8LdooB,GD9LgpB,YCgMnpB/e,IAAKA,EAAI9kB,UAEToU,EAAAA,GAAAA,IAAA,OAAKrU,UDlM8X,WCkMtWC,SAAA,EAC3BF,EAAAA,GAAAA,GAAA,OAAKC,UDnMqd,WCmMzb+b,QAAS4pB,EAAmB1lC,UAC3DF,EAAAA,GAAAA,GAACM,GAAAA,EAAI,CAACF,KAAK,WAEZqkC,GAAqD,UAAjCA,EAAiBZ,cACpCvvB,EAAAA,GAAAA,IAACyxB,GAAAA,EAAgB,CACfC,cAAY,EACZ/lC,UDzM2e,WC0M3esiC,cAAe3B,EACfqF,YAAaN,EACb3pB,QAAS4pB,EAAmB1lC,SAAA,CAE3BulC,IACCnxB,EAAAA,GAAAA,IAAA,OAAKrU,UD/MgiB,WC+MxfC,SAAA,CAC1CykC,IACC3kC,EAAAA,GAAAA,GAAA,OAAKkmC,IAAKvB,EAAcphC,IAAI,GAAGtD,UAAW8U,KAE3CuwB,IACCtlC,EAAAA,GAAAA,GAAA,OAAKglB,IAAKugB,EAAiBW,IAAKd,EAAiB7hC,IAAI,GAAGtD,UAAW8U,SAIzET,EAAAA,GAAAA,IAAA,OAAKrU,UDxN+f,WCwNjeC,SAAA,EACjCF,EAAAA,GAAAA,GAAA,QAAMC,UDzN+kB,WCyNpjBC,SAC9BwkC,EACID,EAAiB0B,UAAY1B,EAAiB2B,IAC/C9kC,EAAK,cAEXtB,EAAAA,GAAAA,GAAA,QAAMC,UD9N4mB,WC8N1kBC,SACrCwkC,EACID,EAAiB4B,aAAe/kC,GAsB5BglC,EAtBiD7B,EAuBpE6B,EAAQC,MAAc,cACtBD,EAAQE,MAAc,cACtBF,EAAQG,MAAc,cACtBH,EAAQphC,SAAiB,iBACzBohC,EAAQlc,MAAc,cACnB,gBA3BWqa,EAAiB2B,aAK7BpmC,EAAAA,GAAAA,GAAC47B,GAAAA,EAAM,CACL37B,UDvO2a,WCwO3ak1B,OAAK,EACLwN,OAAK,EACL7kB,MAAM,cACN+b,UAAWv4B,EAAK,wBAChB0a,QAAS0pB,EAA0BxlC,UAEnCF,EAAAA,GAAAA,GAACM,GAAAA,EAAI,CAACF,KAAK,aAEX2jC,IAnGJ/jC,EAAAA,GAAAA,GAACi6B,GAAAA,EAAI,CACH/4B,OAAQw/B,EACRlvB,OAAQmvB,EACRe,kBAAmBA,EACnBC,eAAgBA,EAChBC,eAAgBA,EAChB3hC,UAAW8U,GACX5T,QAAS0/B,EACTrY,oBAAqBsY,EACrB5G,WAAS,EAAAh6B,UAEToU,EAAAA,GAAAA,IAAAqmB,GAAAA,GAAA,CAAAz6B,SAAA,CAEI+jC,GACEjkC,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CAACE,KAAK,kBAAkB5e,QAASA,IAAM6pB,OAAsB7kC,GAAWd,SAC9EoB,EAAK,wBAGRtB,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CAACE,KAAK,oBAAoB5e,QAASA,IAAM6pB,GAAsB,GAAM3lC,SAC3EoB,EAAK,yBAIXgjC,IACCJ,GACElkC,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CAACE,KAAK,SAAS5e,QAASA,IAAM8pB,EAAoB,SAAS5lC,SACjEoB,EAAK,6BAGRtB,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CAACE,KAAK,WAAW5e,QAASA,IAAM8pB,EAAoB,SAAS5lC,SACnEoB,EAAK,+BAIZtB,EAAAA,GAAAA,GAAC06B,GAAAA,EAAQ,CACPE,KAAK,SACL5e,QAAS0pB,EAA0BxlC,SAElCoB,EAAK,wCAmElB,IAAyBglC,K,oGCgEpBI,GAAe,SAAfA,GAAe,OAAfA,EAAe,YAAfA,EAAe,gBAAfA,EAAe,YAAfA,EAAe,oBAAfA,EAAe,kBAAfA,EAAe,0BAAfA,CAAe,EAAfA,IAAe,IAapB,MAgnEA,IAAe7mC,EAAAA,EAAAA,KAAKU,EAAAA,EAAAA,IAClB,CAACC,GACCkB,SAAQke,WAAUuK,UAASrK,kBAAiB1C,WAAU3T,WAEtD,MAAMwK,EAAYzT,EAAOyT,UACnBvT,GAAO6d,EAAAA,EAAAA,KAAW/d,EAAQkB,GAC1BilC,GAAWpqB,EAAAA,EAAAA,IAAY7a,QAAsCV,GAA5B4lC,EAAAA,EAAAA,KAAUpmC,EAAQkB,GACnDmlC,EAAgB3iC,QAAQyiC,GACxB3I,GAAiBC,EAAAA,EAAAA,KAAqBz9B,EAAQkB,GAC9ColC,GAAiB1f,EAAAA,EAAAA,IAAS1lB,GAC1BqlC,EAAeD,GAAiBE,EAAAA,EAAAA,KAAmBxmC,EAAQkB,QAAUV,EACrE01B,GAAoBuQ,EAAAA,EAAAA,KAA4BzmC,EAAQkB,GAExDwlC,EAAgBJ,OAAsD9lC,GAArCmmC,EAAAA,EAAAA,KAAmB3mC,EAAQkB,GAC5D0lC,GAAgCP,IAAkBC,KACnDO,EAAAA,EAAAA,KAA0C7mC,EAAQkB,EAAQke,IACzD,sBACJ0nB,EAAqB,yBAAEC,EAAwB,4BAAEC,EAA2B,6BAAEze,GAC5EvoB,EAAOwoB,SAASC,OACd,SAAEwe,EAAQ,uBAAElR,IAA2BmR,EAAAA,EAAAA,GAAqBlnC,IAEhE67B,iBAAmB9V,WAAYiW,KAC7Brc,EAAAA,EAAAA,KAAe3f,GACbmnC,EAAoBnnC,EAAOonC,cAAcC,EAAAA,KACzCD,EAAgBH,IAAaI,EAAAA,IAA0BrnC,EAAOonC,cAAcH,QAAYzmC,EACxF8mC,EAAuBV,EAA+BA,EAA6BzlC,QAAKX,EACxF+mC,EAAkBD,GAAuB7oB,EAAAA,EAAAA,KAAkBze,EAAQkB,EAAQomC,QAAwB9mC,GACnG,cAAE6L,GAAkBrM,EACpBwnC,GAAcnnC,EAAAA,EAAAA,KAAWL,EAAQqM,GAEjCo7B,EADkBf,EAAeA,GAAce,UAAYp7B,OAAgB7L,EAE3EknC,EAAaD,GAAW1oB,EAAAA,EAAAA,KAAW/e,EAAQynC,QAAYjnC,EACvDmnC,GAAiBC,EAAAA,EAAAA,KAAqB5nC,EAAQkB,GAC9C2mC,GAAsBC,EAAAA,EAAAA,KAA0B9nC,EAAQkB,GAExD4hC,GAAWnjB,EAAAA,EAAAA,KAAe3f,GAC1B+nC,EAAoBrkC,QAAQo/B,EAASkF,YAAYre,SAEjDse,GAAqB1oB,EAAAA,EAAAA,KAAyBvf,GAC9CkoC,EAA0BhnC,IAAW+mC,GAAoB/mC,QAC1Dke,IAAa6oB,GAAoB7oB,UACjCE,IAAoB2oB,GAAoBh/B,OACvC8+B,EAEAI,IADO9nC,EAAAA,EAAAA,KAAWL,EAAQkB,KACQqlC,GAAc6B,mBAAoB,EACpEC,EAAW3B,GAAc2B,SACzB7J,GAAuBngB,EAAAA,EAAAA,KAA2Bre,GAElDsoC,EAAmC,cAApBhpB,GACjBipB,EAAAA,EAAAA,KAA4BvoC,EAAQkB,IACpCsnC,EAAAA,EAAAA,KAAmBxoC,EAAQkB,EAAQke,GAEjCwK,EAAQD,IAAW8e,EAAAA,EAAAA,KAAgBzoC,EAAQkB,EAAQyoB,GACnD+e,EAAoB9e,GAAS,iBAAkBA,EAAQA,EAAM+e,kBAAenoC,EAC5EkgB,GAAQC,EAAAA,EAAAA,KAAY3gB,EAAQkB,EAAQke,GACpCwpB,GAAiBloB,GAAOkc,WAC1Bne,EAAAA,EAAAA,KAAkBze,EAAQkB,EAAQwf,EAAMkc,UAAUM,mBAClD18B,EACEqoC,GAAe3oC,GAAMwf,SAAWxf,EAAK4jB,mBAAqB1E,IAAaI,EAAAA,IAAkBopB,IAC3F9oB,EAAAA,EAAAA,KAAuB9f,EAAQ4oC,SAC/BpoC,EACEsoC,GAAwC,cAApBxpB,EAEpBypB,GAAsBzC,IAAmBD,IAAkByC,KAAsBtL,EAEjFuF,IAAYC,EAAAA,EAAAA,KAAgBhjC,EAAQkB,EAAQke,GAC5C4pB,GAAkB9oC,IAAQ+oC,EAAAA,EAAAA,IAC9B/oC,GACAsgB,EAAAA,EAAAA,KAAqBxgB,IACrBygB,EAAAA,EAAAA,KAAsBzgB,EAAQkB,KAC7B8nC,gBAEGE,GAAsB5C,IAAmBD,IACzCyC,KAAsBtL,GAA2B,UAATv0B,GAAoB/H,IAAWioC,EAAAA,IACvEC,IAAgBC,EAAAA,EAAAA,KAA+BrpC,EAAQ,kBACvDspC,GAAmBxG,EAASyG,2BAC5BC,GAAWN,IAAuBxoB,GAAO8oB,SACzCC,GAASD,GAAWxpC,EAAO0pC,oBAAoBF,SAAYhpC,EAC3DmpC,GAAkB3pC,EAAO4pC,UAAUD,gBAEnCE,GAAmB7pC,EAAO8pC,QAAQD,kBAAoBE,EAAAA,GACtDrN,GAAex7B,IAAW4hC,EAASjH,gBAAgBE,SACnDiO,GAAatmC,QAAQgd,GAAOkc,WAC5BqN,GAAmBvmC,QAAQgd,GAAOmc,mBAClCvU,GAAetoB,EAAOkqC,OAAOC,QAAQC,QAAU,EAC/CC,GAA0B3mC,QAAQo/B,EAASwH,mBAC3CpqB,IAAkBC,EAAAA,EAAAA,KAA0BngB,GAC5CuqC,GAAoBvqC,EAAOuqC,kBAC3BC,GAAyB1H,EAAS0H,uBAElCtH,GAAiBJ,EAASK,kBAAmBC,EAAAA,EAAAA,KAAcpjC,EAAQ8iC,EAASK,uBAAoB3iC,EAEtG,MAAO,CACLiqC,mBAAoBzqC,EAAO4pC,UAAUa,mBACrCC,aAAuB,UAATzhC,EAAmBjJ,EAAO4pC,UAAUc,kBAAelqC,EACjEmqC,eAAgB7H,EAAS8H,UACzB3U,gBAAgBgH,EAAAA,EAAAA,KAAqBj9B,EAAQkB,EAAQke,EAAUE,GAC/DoB,QACAxgB,OACAmmC,gBACA7I,iBACA0K,0BACA2C,wBAAwBC,EAAAA,EAAAA,KAA6B9qC,EAAQkB,GAC7D6pC,UAAW7qC,GAAO49B,EAAAA,EAAAA,IAAc59B,QAAQM,EACxCwqC,oBAAoBC,EAAAA,EAAAA,KAAyBjrC,EAAQ4c,GACrDsuB,oBAAoBC,EAAAA,EAAAA,KAAqBnrC,GACzCorC,oBACsB,WAApB9rB,IACIinB,GAAgBG,IAAe2E,qBAErCvC,qBACAxB,uBACAgE,uBAAwB/D,GAAiBgE,oBACzC7O,gBACAsN,cACAC,oBACA1L,uBAAwB7B,GAAeV,EAAmBh1B,YAASxG,EACnEgrC,UAAW1I,EAAS0I,UACpBC,cAAe3I,EAAS2I,cACxBC,iBAAkB1rC,EAAO2rC,SAASC,SAASD,SAC3CE,oBAAqB7rC,EAAO2F,aAAaimC,SAASD,SAClDjF,eACAt6B,gBAAiBpM,EAAO8rC,eAAeC,QACvC1/B,gBACAm7B,cACAwE,qBAAsBlJ,EAASkJ,qBAC/BlF,wBACAC,2BACAC,8BACAiF,aAAcjsC,EAAOisC,aACrB9E,kBAAmBA,GAAmB+E,SACtC9E,cAAeA,GAAe8E,SAC9BC,WAAYrJ,EAASqJ,WAAWC,WAChCC,mBAAoBvJ,EAASqJ,WAAWG,UACxCC,YAAahG,EAAgBA,EAAaiG,SAASC,WAAY,OAASjsC,EACxEksC,cAAenG,GAAciG,SAASG,WACtCjF,aACAD,WACAa,eACAX,iBACAE,sBACAlS,WAAY31B,EAAO4sC,WAAW9T,KAC9B+T,oBAAoBC,EAAAA,EAAAA,KAAe9sC,EAAQkB,GAC3C40B,OAAOiX,EAAAA,EAAAA,KAAY/sC,GACnBgtC,eAAeC,EAAAA,EAAAA,GAAmBjtC,EAAQ,sBAAwBktC,EAAAA,IAClEC,cAAcF,EAAAA,EAAAA,GAAmBjtC,EAAQ,iBACzCw+B,uBACA2J,wBACAlF,mBAAoBjjC,EAAOijC,mBAC3BoF,WACAJ,qBACAmF,sBAAsBC,EAAAA,EAAAA,KAA2BrtC,GACjDstC,eAAgB9O,KAAyB+O,EAAAA,EAAAA,KAA+BvtC,GACxEwtC,uBAAuBC,EAAAA,EAAAA,KAA4BztC,GACnD0tC,qBAAsBlQ,GAAkB8I,IAAmBD,IAAkByC,GAC7E/S,yBACA2S,oBACAiF,YAAa3tC,EAAO4tC,QAAQD,YAC5B9E,gBACAgF,mBAAoB7tC,EAAO8tC,aAAaC,aACxCD,aAAc9tC,EAAO8tC,aAAa3gC,KAClC47B,uBACAhG,aACAG,kBACA8K,wBAAyBzH,GAAcyH,wBACvCvE,UACAE,mBACAT,uBACAE,iBACAE,oBACAO,oBACA3T,oBACA3N,+BACAygB,mBACAiF,kCAAmCnL,EAASmL,kCAC5C3lB,gBACA+hB,2BACA6D,yBAA0B3H,GAAc2H,yBACxCC,gBAAiB5H,GAAc4H,gBAC/BjuB,mBACAqqB,qBACAC,0BACA4D,eAAgB36B,EAAU26B,iBAtLZruC,CAvmEwBsuC,EAC1CplC,OACA0hC,gBACA2D,gBACAxF,oBACA+B,yBACA0D,UACA3xB,WACAqZ,iBACA/0B,SACAke,YACAuK,WACAse,sBACA3oB,mBACAoB,SACAxgB,QACAwmC,gBACAmC,gBACAX,2BACA1J,wBACA2J,yBACA9B,iBACA7I,kBACAuN,aACAiC,iBACAhC,sBACAE,sBACAkC,wBACAc,4BACAxR,gBACAsN,cACAC,oBACA1L,0BACAiN,aACAC,iBACAnE,wBACAgE,0BACAkD,oBACApD,uBACAM,oBACAG,uBACAz/B,mBACAC,iBACAm7B,eACA2F,gBACAnB,wBACAlF,yBACAC,4BACAI,qBACAC,iBACA6E,gBACAE,cACAE,sBACAE,eACA7E,cACAD,YACAa,gBACAX,kBACAE,uBACA6E,iBACA/W,cACAkX,sBACA5J,sBACAnN,SACAuS,YACArB,+BACAyH,4BACAC,mBACAn8B,WACA9S,aACAgrC,sBACAC,gBACA4C,iBACAE,yBACAzX,0BACA2S,qBACAiF,eACAD,uBACAG,sBACAC,gBACA/E,uBACA7F,kBACAH,aACAiL,2BACA9X,qBACAuT,UACAE,mBACAT,uBACAE,iBACAE,oBACAO,oBACAb,mBACAiF,qCACA3lB,gBACA+hB,2BACA8D,mBACAjuB,mBACAqqB,qBACAC,0BACA4D,kBACAO,cACAC,WACAC,UACAC,iBAEA,MAAM,YACJC,GAAW,WACXC,GAAU,WACVC,GAAU,cACVC,GAAa,eACbC,GAAc,kBACdC,GAAiB,mBACjBC,GAAkB,qBAClBC,GAAoB,WACpBC,GAAU,eACVC,GAAc,oBACdC,GAAmB,WACnBC,GAAU,uBACVC,GAAsB,cACtBC,GAAa,qBACbC,GAAoB,iBACpBtiB,GAAgB,oCAChBuiB,GAAmC,wBACnCC,GAAuB,cACvBC,GAAa,oBACbC,GAAmB,kBACnBC,GAAiB,YACjBC,GAAW,yBACX3Z,GAAwB,kBACxB4Z,GAAiB,kBACjBC,GAAiB,qBACjBC,GAAoB,wBACpBC,GAAuB,6BACvBC,GAA4B,6BAC5BC,GAA4B,uCAC5BjjB,GAAsC,mCACtCC,KACE5sB,EAAAA,EAAAA,MAEEq4B,IAAUn4B,EAAAA,EAAAA,KACVD,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","sources":["webpack://telegram-t/./src/components/common/MessageOutgoingStatus.tsx","webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/hooks/useHotkeys.ts","webpack://telegram-t/./src/util/parseHotkey.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useCustomEmojiTooltip.ts","webpack://telegram-t/./src/util/PostMessageConnector.ts","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useMentionTooltip.ts","webpack://telegram-t/./src/components/left/main/hooks/useOrderDiff.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOverlayPosition.ts","webpack://telegram-t/./src/components/middle/composer/helpers/selection.ts","webpack://telegram-t/./src/hooks/useForumPanelRender.ts","webpack://telegram-t/./src/components/common/SensitiveContentConfirmModal.tsx","webpack://telegram-t/./src/components/common/SensitiveContentConfirmModal.module.scss?c6aa","webpack://telegram-t/./src/components/main/visualEffects/SnapEffectContainer.module.scss?fa7b","webpack://telegram-t/./src/components/main/visualEffects/SnapEffectContainer.tsx","webpack://telegram-t/./src/components/common/PrivateChatInfo.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/prepareForRegExp.ts","webpack://telegram-t/./src/components/left/main/ChatCallStatus.module.scss?f06e","webpack://telegram-t/./src/components/left/main/ChatCallStatus.tsx","webpack://telegram-t/./src/components/left/main/ChatTags.module.scss?bf8a","webpack://telegram-t/./src/components/left/main/ChatTags.tsx","webpack://telegram-t/./src/components/left/main/Chat.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/usePaidMessageConfirmation.ts","webpack://telegram-t/./src/hooks/useEnsureStory.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useChatCommandTooltip.ts","webpack://telegram-t/./src/lib/cleanDocsHtml.ts","webpack://telegram-t/./src/components/middle/composer/helpers/cleanHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useLoadLinkPreview.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/ToDoListModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.module.scss?90e3","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/common/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/hooks/polling/usePeerStoriesPolling.ts","webpack://telegram-t/./src/hooks/usePrevDuringAnimation.ts","webpack://telegram-t/./src/components/left/main/ChatBadge.tsx","webpack://telegram-t/./src/components/common/helpers/formatUsername.ts","webpack://telegram-t/./src/components/left/main/hooks/useLeftHeaderButtonRtlForumTransition.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useEmojiTooltip.ts","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuButton.tsx","webpack://telegram-t/./src/hooks/reducers/useFoldersReducer.ts","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/hooks/media/useMessageMediaHash.ts","webpack://telegram-t/./src/hooks/useStorage.ts","webpack://telegram-t/./src/util/focusEditableElement.ts","webpack://telegram-t/./src/hooks/useMouseInside.ts","webpack://telegram-t/./src/components/common/WebLink.tsx","webpack://telegram-t/./src/util/memoized.ts","webpack://telegram-t/./src/components/common/TopicIcon.tsx","webpack://telegram-t/./src/hooks/useLongPress.ts","webpack://telegram-t/./src/styles/_patternBackground.module.scss?c0b7","webpack://telegram-t/./src/util/selection.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/util/launchMediaWorkers.ts","webpack://telegram-t/./src/hooks/useGetSelectionRange.ts","webpack://telegram-t/./src/hooks/animations/useVtn.ts","webpack://telegram-t/./src/components/middle/composer/DropTarget.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.tsx","webpack://telegram-t/./src/hooks/useReducer.ts","webpack://telegram-t/./src/components/common/NothingFound.tsx","webpack://telegram-t/./src/util/dates/workHours.ts","webpack://telegram-t/./src/components/common/profile/BusinessHours.module.scss?06fd","webpack://telegram-t/./src/components/common/profile/BusinessHours.tsx","webpack://telegram-t/./src/components/common/profile/UserBirthday.module.scss?dc99","webpack://telegram-t/./src/components/common/profile/UserBirthday.tsx","webpack://telegram-t/./src/components/common/profile/ChatExtra.module.scss?9412","webpack://telegram-t/./src/components/common/profile/ChatExtra.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/getFilesFromDataTransferItems.ts","webpack://telegram-t/./src/components/common/LinkField.tsx","webpack://telegram-t/./src/components/common/LinkField.module.scss?fa18","webpack://telegram-t/./src/hooks/useChatContextActions.ts","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/common/PaymentMessageConfirmDialog.tsx","webpack://telegram-t/./src/components/common/PaymentMessageConfirmDialog.module.scss?1d52","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/components/middle/hooks/useHeaderPane.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.async.tsx","webpack://telegram-t/./src/util/mediaSession.ts","webpack://telegram-t/./src/components/left/main/Archive.module.scss?6d2a","webpack://telegram-t/./src/components/left/main/Archive.tsx","webpack://telegram-t/./src/components/left/main/EmptyFolder.module.scss?0952","webpack://telegram-t/./src/components/left/main/EmptyFolder.tsx","webpack://telegram-t/./src/components/left/main/FrozenAccountNotification.tsx","webpack://telegram-t/./src/components/left/main/FrozenAccountNotification.module.scss?c59a","webpack://telegram-t/./src/components/left/main/UnconfirmedSession.module.scss?bd2b","webpack://telegram-t/./src/components/left/main/UnconfirmedSession.tsx","webpack://telegram-t/./src/components/left/main/ChatList.tsx","webpack://telegram-t/./src/components/common/GroupChatInfo.tsx","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/util/systemFilesDialog.ts","webpack://telegram-t/./src/components/common/File.tsx","webpack://telegram-t/./src/components/common/ChatForumLastMessage.module.scss?cb0b","webpack://telegram-t/./src/components/common/ChatForumLastMessage.tsx","webpack://telegram-t/./src/components/left/main/hooks/useChatListEntry.tsx","webpack://telegram-t/./src/util/audioPlayer.ts","webpack://telegram-t/./src/components/common/DeleteChatModal.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/hooks/schedulers/useIntervalForceUpdate.ts","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/common/helpers/boostInfo.ts","webpack://telegram-t/./src/components/left/search/helpers/getSenderName.ts","webpack://telegram-t/./src/components/common/helpers/preloadDocumentMedia.ts","webpack://telegram-t/./src/components/common/Document.tsx","webpack://telegram-t/./src/components/story/mediaArea/MediaArea.module.scss?fe60","webpack://telegram-t/./src/components/story/mediaArea/MediaAreaSuggestedReaction.tsx","webpack://telegram-t/./src/util/formatTemperature.ts","webpack://telegram-t/./src/components/story/mediaArea/MediaAreaWeather.tsx","webpack://telegram-t/./src/components/story/mediaArea/MediaAreaOverlay.tsx","webpack://telegram-t/./src/hooks/window/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/useScrollNotch.ts","webpack://telegram-t/./src/hooks/useOffscreenCanvasBlur.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/hooks/useAsyncResolvers.ts","webpack://telegram-t/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://telegram-t/./src/components/common/Audio.tsx","webpack://telegram-t/./src/components/common/helpers/waveform.ts","webpack://telegram-t/./src/util/waveform.ts","webpack://telegram-t/./src/util/cycleRestrict.ts","webpack://telegram-t/./src/hooks/useMediaWithLoadProgress.ts","webpack://telegram-t/./src/global/selectors/calls.ts","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.module.scss?5334","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/hooks/useSendMessageAction.ts","webpack://telegram-t/./src/components/right/statistics/helpers/isGraph.ts","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/util/AbsoluteVideo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInputCustomEmojis.ts","webpack://telegram-t/./src/components/middle/composer/TextFormatter.async.tsx","webpack://telegram-t/./src/components/middle/composer/MessageInput.tsx","webpack://telegram-t/./src/components/left/main/hooks/useChatAnimationType.ts","webpack://telegram-t/./src/components/common/TypingStatus.tsx","webpack://telegram-t/./src/components/common/DotAnimation.tsx","webpack://telegram-t/./src/components/common/Media.tsx","webpack://telegram-t/./src/components/common/LastMessageMeta.tsx","webpack://telegram-t/./src/hooks/media/useUnsupportedMedia.ts","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/renderKeyboardButtonText.tsx","webpack://telegram-t/./src/components/common/profile/ProfilePhoto.tsx","webpack://telegram-t/./src/components/common/profile/ProfilePinnedGifts.module.scss?70d3","webpack://telegram-t/./src/components/common/profile/ProfilePinnedGifts.tsx","webpack://telegram-t/./src/components/common/profile/ProfileInfo.module.scss?af06","webpack://telegram-t/./src/components/common/profile/ProfileInfo.tsx","webpack://telegram-t/./src/components/common/hooks/usePhotosPreload.ts","webpack://telegram-t/./src/hooks/useAudioPlayer.ts","webpack://telegram-t/./src/components/middle/message/SponsoredContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredContextMenuContainer.tsx","webpack://telegram-t/./src/components/left/main/EmptyForum.module.scss?0a02","webpack://telegram-t/./src/components/left/main/EmptyForum.tsx","webpack://telegram-t/./src/components/left/main/Topic.module.scss?d97e","webpack://telegram-t/./src/components/left/main/Topic.tsx","webpack://telegram-t/./src/components/left/main/hooks/useTopicContextActions.ts","webpack://telegram-t/./src/components/left/main/ForumPanel.tsx","webpack://telegram-t/./src/components/left/main/ForumPanel.module.scss?d1a9","webpack://telegram-t/./src/hooks/window/useFullscreen.ts","webpack://telegram-t/./src/components/middle/message/helpers/getSingularPaidMedia.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/FactCheck.module.scss?3842","webpack://telegram-t/./src/components/middle/message/FactCheck.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.module.scss?e3d6","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.module.scss?30d0","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/BaseStory.module.scss?d118","webpack://telegram-t/./src/components/middle/message/BaseStory.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/TodoList.tsx","webpack://telegram-t/./src/components/middle/message/WebPageUniqueGift.module.scss?8703","webpack://telegram-t/./src/components/middle/message/WebPageUniqueGift.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/helpers/webpageType.ts","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedMessage.tsx","webpack://telegram-t/./src/hooks/useWorkspaceStorage.ts","webpack://telegram-t/./src/components/right/hooks/useAsyncRendering.ts","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/left/MuteChatModal.async.tsx","webpack://telegram-t/./src/components/middle/message/MessageEffect.tsx","webpack://telegram-t/./src/components/middle/message/MessageEffect.module.scss?d23f","webpack://telegram-t/./src/components/left/ChatFolderModal.async.tsx"],"sourcesContent":["import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiMessageOutgoingStatus } from '../../api/types';\n\nimport Transition from '../ui/Transition';\nimport Icon from './icons/Icon';\n\nimport './MessageOutgoingStatus.scss';\n\ntype OwnProps = {\n  status: ApiMessageOutgoingStatus;\n};\n\nenum Keys {\n  failed, pending, succeeded, read,\n}\n\nconst MessageOutgoingStatus: FC<OwnProps> = ({ status }) => {\n  return (\n    <div className=\"MessageOutgoingStatus\">\n      <Transition name=\"reveal\" activeKey={Keys[status]}>\n        {status === 'failed' ? (\n          <div className=\"MessageOutgoingStatus--failed\">\n            <Icon name=\"message-failed\" />\n          </div>\n        ) : <Icon name={`message-${status}`} />}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(MessageOutgoingStatus);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectCurrentChat, selectUser } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\nconst DeleteMemberModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n}) => {\n  const { deleteChatMember } = getActions();\n\n  const lang = useOldLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId: userId! });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('GroupRemoved.Remove')}\n      textParts={renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}\n      confirmLabel={lang('lng_box_remove')}\n      confirmHandler={handleDeleteChatMember}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n)(DeleteMemberModal));\n","import { useEffect } from '../lib/teact/teact';\n\nimport { createCallbackManager } from '../util/callbacks';\nimport { getHotkeyMatcher } from '../util/parseHotkey';\n\nconst IGNORE_TAGS = new Set(['INPUT', 'TEXTAREA', 'SELECT']);\n\nconst handlers = createCallbackManager();\ndocument.documentElement.addEventListener('keydown', handlers.runCallbacks);\n\nexport function useHotkeys(hotkeys?: Record<string, (e: KeyboardEvent) => void>) {\n  useEffect(() => {\n    if (!hotkeys) {\n      return undefined;\n    }\n\n    const entries = Object.entries(hotkeys);\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (!shouldFireEvent(e)) {\n        return;\n      }\n\n      entries.forEach(([hotkey, handler]) => {\n        if (getHotkeyMatcher(hotkey)(e)) {\n          handler(e);\n        }\n      });\n    }\n\n    return handlers.addCallback(handleKeyDown);\n  }, [hotkeys]);\n}\n\nfunction shouldFireEvent(e: KeyboardEvent) {\n  if (e.target instanceof HTMLElement) {\n    return !IGNORE_TAGS.has(e.target.tagName);\n  }\n\n  return true;\n}\n","// Original source from Mantine\n// https://github.com/mantinedev/mantine/blob/master/src/mantine-hooks/src/use-hotkeys/parse-hotkey.ts\n\nexport type KeyboardModifiers = {\n  alt: boolean;\n  ctrl: boolean;\n  meta: boolean;\n  mod: boolean;\n  shift: boolean;\n};\n\nexport type Hotkey = KeyboardModifiers & {\n  key?: string;\n};\n\ntype CheckHotkeyMatch = (event: KeyboardEvent) => boolean;\n\nexport function parseHotkey(hotkey: string): Hotkey {\n  const keys = hotkey\n    .toLowerCase()\n    .split('+')\n    .map((part) => part.trim());\n\n  const modifiers: KeyboardModifiers = {\n    alt: keys.includes('alt'),\n    ctrl: keys.includes('ctrl'),\n    meta: keys.includes('meta'),\n    mod: keys.includes('mod'),\n    shift: keys.includes('shift'),\n  };\n\n  const reservedKeys = ['alt', 'ctrl', 'meta', 'shift', 'mod'];\n\n  const freeKey = keys.find((key) => !reservedKeys.includes(key));\n\n  return {\n    ...modifiers,\n    key: freeKey,\n  };\n}\n\nfunction isExactHotkey(hotkey: Hotkey, event: KeyboardEvent): boolean {\n  const {\n    alt, ctrl, meta, mod, shift, key,\n  } = hotkey;\n  const {\n    altKey, ctrlKey, metaKey, shiftKey, key: pressedKey,\n  } = event;\n\n  if (alt !== altKey) {\n    return false;\n  }\n\n  if (mod) {\n    if (!ctrlKey && !metaKey) {\n      return false;\n    }\n  } else {\n    if (ctrl !== ctrlKey) {\n      return false;\n    }\n    if (meta !== metaKey) {\n      return false;\n    }\n  }\n  if (shift !== shiftKey) {\n    return false;\n  }\n\n  return Boolean(key\n    && (pressedKey.toLowerCase() === key.toLowerCase()\n      || event.code.replace('Key', '').toLowerCase() === key.toLowerCase()));\n}\n\nexport function getHotkeyMatcher(hotkey: string): CheckHotkeyMatch {\n  return (event) => isExactHotkey(parseHotkey(hotkey), event);\n}\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/browser/windowEnvironment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { getHtmlBeforeSelection } from '../../../../util/selection';\nimport { buildCustomEmojiHtml } from '../helpers/customEmoji';\n\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nconst THROTTLE = 300;\nconst RE_ENDS_ON_EMOJI = new RegExp(`(${twemojiRegex.source})$`, 'g');\nconst RE_ENDS_ON_EMOJI_IMG = new RegExp(`${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useCustomEmojiTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  getSelectionRange: Signal<Range | undefined>,\n  inputRef: ElementRef<HTMLDivElement>,\n  customEmojis?: ApiSticker[],\n) {\n  const { loadCustomEmojiForEmoji, clearCustomEmojiForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractLastEmojiThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || !getSelectionRange()?.collapsed) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const htmlBeforeSelection = getHtmlBeforeSelection(inputRef.current);\n\n    return htmlBeforeSelection.match(IS_EMOJI_SUPPORTED ? RE_ENDS_ON_EMOJI : RE_ENDS_ON_EMOJI_IMG)?.[0];\n  }, [getHtml, getSelectionRange, inputRef, isEnabled], THROTTLE);\n\n  const getLastEmoji = useDerivedSignal(\n    extractLastEmojiThrottled, [extractLastEmojiThrottled, getHtml, getSelectionRange], true,\n  );\n\n  const isActive = useDerivedState(() => Boolean(getLastEmoji()), [getLastEmoji]);\n  const hasCustomEmojis = Boolean(customEmojis?.length);\n\n  useEffect(() => {\n    if (!isEnabled || !isActive) return;\n\n    const lastEmoji = getLastEmoji();\n    if (lastEmoji) {\n      if (!hasCustomEmojis) {\n        const emoji = IS_EMOJI_SUPPORTED ? lastEmoji : lastEmoji.match(/.+alt=\"(.+)\"/)?.[1];\n        if (emoji) {\n          loadCustomEmojiForEmoji({\n            emoji,\n          });\n        }\n      }\n    } else {\n      clearCustomEmojiForEmoji();\n    }\n  }, [isEnabled, isActive, getLastEmoji, hasCustomEmojis, clearCustomEmojiForEmoji, loadCustomEmojiForEmoji]);\n\n  const insertCustomEmoji = useLastCallback((emoji: ApiSticker) => {\n    const lastEmoji = getLastEmoji();\n    if (!isEnabled || !lastEmoji) return;\n\n    const inputEl = inputRef.current!;\n    const htmlBeforeSelection = getHtmlBeforeSelection(inputEl);\n    const regexText = IS_EMOJI_SUPPORTED\n      ? lastEmoji\n      // Escape regexp special chars\n      : lastEmoji.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    const regex = new RegExp(`(${regexText})\\\\1*$`, '');\n    const matched = htmlBeforeSelection.match(regex)![0];\n    const count = matched.length / lastEmoji.length;\n    const newHtml = htmlBeforeSelection.replace(regex, buildCustomEmojiHtml(emoji).repeat(count));\n    const htmlAfterSelection = inputEl.innerHTML.substring(htmlBeforeSelection.length);\n\n    setHtml(`${newHtml}${htmlAfterSelection}`);\n\n    requestNextMutation(() => {\n      focusEditableElement(inputEl, true, true);\n    });\n  });\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isCustomEmojiTooltipOpen: Boolean(isActive && hasCustomEmojis && !isManuallyClosed),\n    closeCustomEmojiTooltip: markManuallyClosed,\n    insertCustomEmoji,\n  };\n}\n","import generateUniqueId from './generateUniqueId';\nimport { throttleWithTickEnd } from './schedulers';\n\nexport interface CancellableCallback {\n  (\n    ...args: any[]\n  ): void;\n\n  isCanceled?: boolean;\n}\n\ntype InitPayload = {\n  type: 'init';\n  messageId?: string;\n  args: any;\n};\n\ntype CallMethodPayload = {\n  type: 'callMethod';\n  messageId?: string;\n  name: string;\n  args: any;\n  withCallback?: boolean;\n};\n\ntype CancelProgressPayload = {\n  type: 'cancelProgress';\n  messageId: string;\n};\n\nexport type OriginPayload =\n  InitPayload\n  | CallMethodPayload\n  | CancelProgressPayload;\n\nexport type OriginMessageData = {\n  channel?: string;\n  payloads: OriginPayload[];\n};\n\nexport interface OriginMessageEvent {\n  data: OriginMessageData;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport type ApiUpdate = { type: string } & any;\n\nexport type WorkerPayload =\n  {\n    channel?: string;\n    type: 'update';\n    update: ApiUpdate;\n  }\n  |\n  {\n    channel?: string;\n    type: 'methodResponse';\n    messageId: string;\n    response?: any;\n    error?: { message: string };\n  }\n  |\n  {\n    channel?: string;\n    type: 'methodCallback';\n    messageId: string;\n    callbackArgs: any[];\n  }\n  |\n  {\n    channel?: string;\n    type: 'unhandledError';\n    error?: { message: string };\n  };\n\nexport type WorkerMessageData = {\n  channel?: string;\n  payloads: WorkerPayload[];\n};\n\nexport interface WorkerMessageEvent {\n  data: WorkerMessageData;\n}\n\ninterface RequestState {\n  messageId: string;\n  resolve: AnyToVoidFunction;\n  reject: AnyToVoidFunction;\n  callback: AnyToVoidFunction;\n}\n\ntype InputRequestTypes = Record<string, AnyFunction>;\n\ntype Values<T> = T[keyof T];\nexport type RequestTypes<T extends InputRequestTypes> = Values<{\n  [Name in keyof (T)]: {\n    name: Name & string;\n    args: Parameters<T[Name]>;\n    transferables?: Transferable[];\n  }\n}>;\n\nclass ConnectorClass<T extends InputRequestTypes> {\n  private requestStates = new Map<string, RequestState>();\n\n  private requestStatesByCallback = new Map<AnyToVoidFunction, RequestState>();\n\n  private pendingPayloads: OriginPayload[] = [];\n\n  private pendingTransferables: Transferable[] = [];\n\n  constructor(\n    public target: Worker,\n    private onUpdate?: (update: ApiUpdate) => void,\n    private channel?: string,\n  ) {\n  }\n\n  public destroy() {\n  }\n\n  init(...args: any[]) {\n    this.postMessageOnTickEnd({\n      type: 'init',\n      args,\n    });\n  }\n\n  request(messageData: RequestTypes<T>) {\n    const { requestStates, requestStatesByCallback } = this;\n    const { transferables, ...restMessageData } = messageData;\n\n    const messageId = generateUniqueId();\n    const payload: CallMethodPayload = {\n      type: 'callMethod',\n      messageId,\n      ...restMessageData,\n    };\n\n    const requestState = { messageId } as RequestState;\n\n    // Re-wrap type because of `postMessage`\n    const promise = new Promise<any>((resolve, reject) => {\n      Object.assign(requestState, { resolve, reject });\n    });\n\n    if (typeof payload.args[payload.args.length - 1] === 'function') {\n      payload.withCallback = true;\n\n      const callback = payload.args.pop() as AnyToVoidFunction;\n      requestState.callback = callback;\n      requestStatesByCallback.set(callback, requestState);\n    }\n\n    requestStates.set(messageId, requestState);\n    promise\n      .catch(() => undefined)\n      .finally(() => {\n        requestStates.delete(messageId);\n\n        if (requestState.callback) {\n          requestStatesByCallback.delete(requestState.callback);\n        }\n      });\n\n    this.postMessageOnTickEnd(payload, transferables);\n\n    return promise;\n  }\n\n  cancelCallback(progressCallback: CancellableCallback) {\n    progressCallback.isCanceled = true;\n\n    const { messageId } = this.requestStatesByCallback.get(progressCallback) || {};\n    if (!messageId) {\n      return;\n    }\n\n    this.postMessageOnTickEnd({\n      type: 'cancelProgress',\n      messageId,\n    });\n  }\n\n  onMessage(data: WorkerMessageData) {\n    const { requestStates, channel } = this;\n    if (data.channel !== channel) {\n      return;\n    }\n\n    data.payloads.forEach((payload) => {\n      if (payload.type === 'update' && this.onUpdate) {\n        this.onUpdate(payload.update);\n      }\n      if (payload.type === 'methodResponse') {\n        const requestState = requestStates.get(payload.messageId);\n        if (requestState) {\n          if (payload.error) {\n            requestState.reject(payload.error);\n          } else {\n            requestState.resolve(payload.response);\n          }\n        }\n      } else if (payload.type === 'methodCallback') {\n        const requestState = requestStates.get(payload.messageId);\n        requestState?.callback?.(...payload.callbackArgs);\n      } else if (payload.type === 'unhandledError') {\n        throw new Error(payload.error?.message);\n      }\n    });\n  }\n\n  private postMessageOnTickEnd(payload: OriginPayload, transferables?: Transferable[]) {\n    this.pendingPayloads.push(payload);\n\n    if (transferables) {\n      this.pendingTransferables.push(...transferables);\n    }\n\n    this.postMessagesOnTickEnd();\n  }\n\n  private postMessagesOnTickEnd = throttleWithTickEnd(() => {\n    const { channel } = this;\n    const payloads = this.pendingPayloads;\n    const transferables = this.pendingTransferables;\n\n    this.pendingPayloads = [];\n    this.pendingTransferables = [];\n\n    this.target.postMessage({ channel, payloads }, transferables);\n  });\n}\n\nexport function createConnector<T extends InputRequestTypes>(\n  worker: Worker,\n  onUpdate?: (update: ApiUpdate) => void,\n  channel?: string,\n) {\n  const connector = new ConnectorClass<T>(worker, onUpdate, channel);\n\n  function handleMessage({ data }: WorkerMessageEvent) {\n    connector.onMessage(data);\n  }\n\n  worker.addEventListener('message', handleMessage);\n\n  connector.destroy = () => {\n    worker.removeEventListener('message', handleMessage);\n  };\n\n  return connector;\n}\n\nexport type Connector<T extends InputRequestTypes = InputRequestTypes> = ReturnType<typeof createConnector<T>>;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomSendMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default CustomSendMenuAsync;\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useEffect, useState } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport type { ApiChatMember, ApiPeer, ApiUser } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getMainUsername } from '../../../../global/helpers';\nimport { filterPeersByQuery, getPeerTitle } from '../../../../global/helpers/peers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { pickTruthy, unique } from '../../../../util/iteratees';\nimport { getCaretPosition, getHtmlBeforeSelection, setCaretPosition } from '../../../../util/selection';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nconst THROTTLE = 300;\n\nlet RE_USERNAME_SEARCH: RegExp;\ntry {\n  RE_USERNAME_SEARCH = /(^|\\s)@[-_\\p{L}\\p{M}\\p{N}]*$/gui;\n} catch (e) {\n  // Support for older versions of Firefox\n  RE_USERNAME_SEARCH = /(^|\\s)@[-_\\d\\wа-яёґєії]*$/gi;\n}\n\nexport default function useMentionTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  getSelectionRange: Signal<Range | undefined>,\n  inputRef: ElementRef<HTMLDivElement>,\n  groupChatMembers?: ApiChatMember[],\n  topInlineBotIds?: string[],\n  currentUserId?: string,\n) {\n  const lang = useLang();\n  const [filteredUsers, setFilteredUsers] = useState<ApiUser[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractUsernameTagThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    if (!isEnabled || !getSelectionRange()?.collapsed || !html.includes('@')) return undefined;\n\n    const htmlBeforeSelection = getHtmlBeforeSelection(inputRef.current);\n\n    return prepareForRegExp(htmlBeforeSelection).match(RE_USERNAME_SEARCH)?.[0].trim();\n  }, [isEnabled, getHtml, getSelectionRange, inputRef], THROTTLE);\n\n  const getUsernameTag = useDerivedSignal(\n    extractUsernameTagThrottled, [extractUsernameTagThrottled, getHtml, getSelectionRange], true,\n  );\n\n  const getWithInlineBots = useDerivedSignal(() => {\n    return isEnabled && getHtml().startsWith('@');\n  }, [getHtml, isEnabled]);\n\n  useEffect(() => {\n    const usernameTag = getUsernameTag();\n\n    if (!usernameTag || !(groupChatMembers || topInlineBotIds)) {\n      setFilteredUsers(undefined);\n      return;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!usersById) {\n      setFilteredUsers(undefined);\n      return;\n    }\n\n    const memberIds = groupChatMembers?.reduce((acc: string[], member) => {\n      if (member.userId !== currentUserId) {\n        acc.push(member.userId);\n      }\n\n      return acc;\n    }, []);\n\n    const filter = usernameTag.substring(1);\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...((getWithInlineBots() && topInlineBotIds) || []),\n        ...(memberIds || []),\n      ]),\n      query: filter,\n      type: 'user',\n    });\n\n    setFilteredUsers(Object.values(pickTruthy(usersById, filteredIds)));\n  }, [currentUserId, groupChatMembers, topInlineBotIds, getUsernameTag, getWithInlineBots]);\n\n  const insertMention = useLastCallback((\n    peer: ApiPeer,\n    forceFocus = false,\n    insertAtEnd = false,\n  ) => {\n    if (!peer.hasUsername && !getPeerTitle(lang, peer)) {\n      return;\n    }\n\n    const mainUsername = getMainUsername(peer);\n    const userFirstOrLastName = getPeerTitle(lang, peer) || '';\n    const htmlToInsert = mainUsername\n      ? `@${mainUsername}`\n      : `<a\n          class=\"text-entity-link\"\n          data-entity-type=\"${ApiMessageEntityTypes.MentionName}\"\n          data-user-id=\"${peer.id}\"\n          contenteditable=\"false\"\n          dir=\"auto\"\n        >${userFirstOrLastName}</a>`;\n\n    const inputEl = inputRef.current!;\n    const htmlBeforeSelection = getHtmlBeforeSelection(inputEl);\n    const fixedHtmlBeforeSelection = cleanWebkitNewLines(htmlBeforeSelection);\n    const atIndex = insertAtEnd ? fixedHtmlBeforeSelection.length\n      : fixedHtmlBeforeSelection.lastIndexOf('@');\n    const shiftCaretPosition = (mainUsername ? mainUsername.length + 1 : userFirstOrLastName.length)\n      - (fixedHtmlBeforeSelection.length - atIndex);\n\n    if (atIndex !== -1) {\n      const newHtml = `${fixedHtmlBeforeSelection.substr(0, atIndex)}${htmlToInsert}&nbsp;`;\n      const htmlAfterSelection = cleanWebkitNewLines(inputEl.innerHTML).substring(fixedHtmlBeforeSelection.length);\n      const caretPosition = getCaretPosition(inputEl);\n      setHtml(`${newHtml}${htmlAfterSelection}`);\n\n      requestNextMutation(() => {\n        const newCaretPosition = caretPosition + shiftCaretPosition + 1;\n        focusEditableElement(inputEl, forceFocus);\n        if (newCaretPosition >= 0) {\n          setCaretPosition(inputEl, newCaretPosition);\n        }\n      });\n    }\n\n    setFilteredUsers(undefined);\n  });\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isMentionTooltipOpen: Boolean(filteredUsers?.length && !isManuallyClosed),\n    closeMentionTooltip: markManuallyClosed,\n    insertMention,\n    mentionFilteredUsers: filteredUsers,\n  };\n}\n\n// Webkit replaces the line break with the `<div><br /></div>` or `<div></div>` code.\n// It is necessary to clean the html to a single form before processing.\nfunction cleanWebkitNewLines(html: string) {\n  return html.replace(/<div>(<br>|<br\\s?\\/>)?<\\/div>/gi, '<br>');\n}\n","import { useMemo } from '../../../../lib/teact/teact';\n\nimport { mapValues } from '../../../../util/iteratees';\nimport { useChatAnimationType } from './useChatAnimationType';\n\nimport usePreviousDeprecated from '../../../../hooks/usePreviousDeprecated';\n\nexport default function useOrderDiff(orderedIds: (string | number)[] | undefined, key?: string) {\n  const orderById = useMemo(() => {\n    if (!orderedIds) {\n      return undefined;\n    }\n\n    return orderedIds.reduce((acc, id, i) => {\n      acc[id] = i;\n      return acc;\n    }, {} as Record<string, number>);\n  }, [orderedIds]);\n\n  const prevOrderById = usePreviousDeprecated(orderById);\n  const prevChatId = usePreviousDeprecated(key);\n\n  const orderDiffById = useMemo(() => {\n    if (!orderById || !prevOrderById || key !== prevChatId) {\n      return {};\n    }\n\n    return mapValues(orderById, (order, id) => {\n      return prevOrderById[id] !== undefined ? order - prevOrderById[id] : -Infinity;\n    });\n  }, [key, orderById, prevChatId, prevOrderById]);\n\n  const getAnimationType = useChatAnimationType(orderDiffById);\n\n  return {\n    orderDiffById,\n    getAnimationType,\n  };\n}\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nconst OFFSET_X = REM;\n\nexport default function useOverlayPosition({\n  anchorRef,\n  overlayRef,\n  isMirrored,\n  isForMessageEffect,\n  isDisabled,\n  id,\n}: {\n  anchorRef: ElementRef<HTMLDivElement>;\n  overlayRef: ElementRef<HTMLDivElement>;\n  isMirrored?: boolean;\n  isForMessageEffect?: boolean;\n  isDisabled?: boolean;\n  id?: string;\n}) {\n  const updatePosition = useLastCallback(() => {\n    const element = overlayRef.current;\n    const anchor = anchorRef.current;\n    if (!element || !anchor) {\n      return;\n    }\n\n    const anchorRect = anchor.getBoundingClientRect();\n    const elementRect = element.getBoundingClientRect();\n    const windowWidth = window.innerWidth;\n\n    requestMutation(() => {\n      const anchorCenterY = anchorRect.top + anchorRect.height / 2;\n      const anchorBottomY = anchorRect.bottom;\n      const y = isForMessageEffect ? anchorBottomY : anchorCenterY;\n      element.style.top = `${y - elementRect.height / 2}px`;\n\n      if (isMirrored) {\n        element.style.left = `${anchorRect.left - OFFSET_X}px`;\n      } else {\n        element.style.right = `${windowWidth - anchorRect.right - OFFSET_X}px`;\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (isDisabled) return;\n    updatePosition();\n  }, [isDisabled, id]);\n\n  useEffect(() => {\n    if (isDisabled) return undefined;\n\n    const messagesContainer = anchorRef.current!.closest<HTMLDivElement>('.MessageList')!;\n    if (!messagesContainer) return undefined;\n\n    messagesContainer.addEventListener('scroll', updatePosition, { passive: true });\n\n    return () => {\n      messagesContainer.removeEventListener('scroll', updatePosition);\n    };\n  }, [isDisabled, anchorRef]);\n\n  return updatePosition;\n}\n","const MAX_NESTING_PARENTS = 5;\n\nexport function isSelectionInsideInput(selectionRange: Range, inputId: string) {\n  const { commonAncestorContainer } = selectionRange;\n  let parentNode: HTMLElement | null = commonAncestorContainer as HTMLElement;\n  let iterations = 1;\n  while (parentNode && parentNode.id !== inputId && iterations < MAX_NESTING_PARENTS) {\n    parentNode = parentNode.parentElement;\n    iterations++;\n  }\n\n  return Boolean(parentNode && parentNode.id === inputId);\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport useForceUpdate from './useForceUpdate';\nimport useLastCallback from './useLastCallback';\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useForumPanelRender(isForumPanelOpen = false) {\n  const shouldRenderForumPanelRef = useRef(isForumPanelOpen);\n  const isAnimationStartedRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  useSyncEffect(() => {\n    if (isForumPanelOpen) {\n      shouldRenderForumPanelRef.current = true;\n    }\n  }, [isForumPanelOpen]);\n\n  const handleForumPanelAnimationEnd = useLastCallback(() => {\n    shouldRenderForumPanelRef.current = false;\n    isAnimationStartedRef.current = false;\n    forceUpdate();\n  });\n\n  const handleForumPanelAnimationStart = useLastCallback(() => {\n    isAnimationStartedRef.current = true;\n    forceUpdate();\n  });\n\n  return {\n    shouldRenderForumPanel: shouldRenderForumPanelRef.current,\n    isAnimationStarted: isAnimationStartedRef.current,\n    handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart,\n  };\n}\n","import { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport { VERIFY_AGE_MIN_DEFAULT } from '../../config';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './SensitiveContentConfirmModal.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n  shouldAlwaysShow: boolean;\n  onAlwaysShowChanged: (value: boolean) => void;\n  confirmHandler: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  verifyAgeMin: number;\n};\n\nconst SensitiveContentConfirmModal = ({\n  isOpen,\n  onClose,\n  shouldAlwaysShow,\n  onAlwaysShowChanged,\n  confirmHandler,\n  verifyAgeMin,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n\n  return (\n    <ConfirmDialog\n      title={lang('TitleSensitiveModal', { years: verifyAgeMin })}\n      confirmLabel={lang('ButtonSensitiveView')}\n      isOpen={isOpen}\n      onClose={onClose}\n      confirmHandler={confirmHandler}\n    >\n      {lang('TextSensitiveModal')}\n      <Checkbox\n        className={styles.checkBox}\n        label={lang('ButtonSensitiveAlways', { years: verifyAgeMin })}\n        checked={shouldAlwaysShow}\n        onCheck={onAlwaysShowChanged}\n      />\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const appConfig = global.appConfig;\n  const verifyAgeMin = appConfig.verifyAgeMin;\n\n  return {\n    verifyAgeMin: verifyAgeMin || VERIFY_AGE_MIN_DEFAULT,\n  };\n})(SensitiveContentConfirmModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"checkBox\":\"mYXi2mIC\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AN8wkEiR\",\"ghost\":\"ANWk2pWP\",\"scale\":\"kMHxyoSt\",\"elementContainer\":\"UDCMfXxs\"};","import { memo } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport { SNAP_EFFECT_CONTAINER_ID, SNAP_EFFECT_ID, SVG_NAMESPACE } from '../../../config';\nimport { selectCanAnimateSnapEffect } from '../../../global/selectors';\nimport jsxToHtml from '../../../util/element/jsxToHtml';\nimport generateUniqueId from '../../../util/generateUniqueId';\n\nimport styles from './SnapEffectContainer.module.scss';\n\nconst VISIBLITY_MARGIN = 50;\nconst DURATION = 1000;\n\nconst SnapEffectContainer = () => {\n  return (\n    <div className={styles.root} id={SNAP_EFFECT_CONTAINER_ID} />\n  );\n};\n\nexport default memo(SnapEffectContainer);\n\nexport function animateSnap(element: HTMLElement) {\n  const global = getGlobal();\n  const canPlayEffect = selectCanAnimateSnapEffect(global);\n  if (!canPlayEffect) return false;\n  // Get element current fixed position on screen\n  const rect = element.getBoundingClientRect();\n  const x = rect.left + window.scrollX;\n  const y = rect.top + window.scrollY;\n  const width = rect.width;\n  const height = rect.height;\n\n  // Check for visibility\n  if (x + width + VISIBLITY_MARGIN < 0 || x - VISIBLITY_MARGIN > window.innerWidth\n    || y + height + VISIBLITY_MARGIN < 0 || y - VISIBLITY_MARGIN > window.innerHeight) {\n    return false;\n  }\n\n  const seed = Math.floor(Date.now() / 1000);\n  const filterId = `${SNAP_EFFECT_ID}-${generateUniqueId()}`;\n\n  const component = (\n    <svg\n      className={styles.ghost}\n      width={width}\n      height={height}\n      style={`left: ${x}px; top: ${y}px;`}\n      viewBox={`0 0 ${width} ${height}`}\n    >\n      <defs>\n        {createFilter(filterId, Math.min(width, height), seed)}\n      </defs>\n      <g filter={`url(#${filterId})`}>\n        <foreignObject className={styles.elementContainer} width={width} height={height} />\n      </g>\n    </svg>\n  );\n\n  const svg = jsxToHtml(component)[0] as HTMLElement;\n  const foreignObject = svg.querySelector('foreignObject')!;\n\n  const computedStyle = window.getComputedStyle(element);\n  const clone = element.cloneNode(true) as HTMLElement;\n  Array.from(computedStyle).forEach((key) => (\n    clone.style.setProperty(key, computedStyle.getPropertyValue(key), 'important')\n  ));\n\n  foreignObject.appendChild(clone);\n\n  const snapContainer = document.getElementById(SNAP_EFFECT_CONTAINER_ID)!;\n  snapContainer.appendChild(svg);\n\n  svg.addEventListener('animationend', () => {\n    snapContainer.removeChild(svg);\n  }, {\n    once: true,\n  });\n\n  return true;\n}\n\nfunction createFilter(id: string, smallestSide: number, baseSeed: number = 42) {\n  return (\n    <filter\n      xmlns={SVG_NAMESPACE}\n      id={id}\n      x=\"-150%\"\n      y=\"-150%\"\n      width=\"400%\"\n      height=\"400%\"\n      color-interpolation-filters=\"sRGB\"\n    >\n      <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.5\" numOctaves=\"1\" result=\"dustNoise\" seed={baseSeed} />\n      <feComponentTransfer in=\"dustNoise\" result=\"dustNoiseMask\">\n        <feFuncA type=\"linear\" slope=\"5\" intercept=\"0\">\n          <animate attributeName=\"slope\" values=\"5; 2; 1; 0\" dur={`${DURATION}ms`} fill=\"freeze\" />\n        </feFuncA>\n      </feComponentTransfer>\n      <feComposite in=\"SourceGraphic\" in2=\"dustNoiseMask\" operator=\"in\" result=\"dustySource\" />\n      <feTurbulence\n        type=\"fractalNoise\"\n        baseFrequency=\"0.015\"\n        numOctaves=\"1\"\n        result=\"displacementNoise1\"\n        seed={baseSeed + 1}\n      />\n      <feTurbulence\n        type=\"fractalNoise\"\n        baseFrequency=\"1\"\n        numOctaves=\"2\"\n        result=\"displacementNoise2\"\n        seed={baseSeed + 2}\n      />\n      <feMerge result=\"combinedNoise\">\n        <feMergeNode in=\"displacementNoise1\" />\n        <feMergeNode in=\"displacementNoise2\" />\n      </feMerge>\n      <feDisplacementMap in=\"dustySource\" in2=\"combinedNoise\" scale=\"0\" xChannelSelector=\"R\" yChannelSelector=\"G\">\n        <animate attributeName=\"scale\" values={`0; ${smallestSide * 3}`} dur={`${DURATION}ms`} fill=\"freeze\" />\n      </feDisplacementMap>\n    </filter>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember, ApiTypingStatus, ApiUser, ApiUserStatus,\n} from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MediaViewerOrigin } from '../../types';\n\nimport {\n  getMainUsername, getUserStatus, isSystemBot, isUserOnline,\n} from '../../global/helpers';\nimport { selectChatMessages, selectUser, selectUserStatus } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useIntervalForceUpdate from '../../hooks/schedulers/useIntervalForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Avatar from './Avatar';\nimport DotAnimation from './DotAnimation';\nimport FullNameTitle from './FullNameTitle';\nimport Icon from './icons/Icon';\nimport TypingStatus from './TypingStatus';\n\ntype OwnProps = {\n  userId?: string;\n  customPeer?: CustomPeer;\n  typingStatus?: ApiTypingStatus;\n  avatarSize?: 'tiny' | 'small' | 'medium' | 'large' | 'jumbo';\n  forceShowSelf?: boolean;\n  status?: string;\n  statusIcon?: IconName;\n  ripple?: boolean;\n  withDots?: boolean;\n  withMediaViewer?: boolean;\n  withUsername?: boolean;\n  withFullInfo?: boolean;\n  withUpdatingStatus?: boolean;\n  noEmojiStatus?: boolean;\n  noFake?: boolean;\n  noVerified?: boolean;\n  emojiStatusSize?: number;\n  noStatusOrTyping?: boolean;\n  noRtl?: boolean;\n  adminMember?: ApiChatMember;\n  isSavedDialog?: boolean;\n  className?: string;\n  onEmojiStatusClick?: NoneToVoidFunction;\n  iconElement?: React.ReactNode;\n  rightElement?: React.ReactNode;\n};\n\ntype StateProps =\n  {\n    user?: ApiUser;\n    userStatus?: ApiUserStatus;\n    self?: ApiUser;\n    isSavedMessages?: boolean;\n    areMessagesLoaded: boolean;\n    isSynced?: boolean;\n  };\n\nconst UPDATE_INTERVAL = 1000 * 60; // 1 min\n\nconst PrivateChatInfo: FC<OwnProps & StateProps> = ({\n  customPeer,\n  typingStatus,\n  avatarSize = 'medium',\n  status,\n  statusIcon,\n  withDots,\n  withMediaViewer,\n  withUsername,\n  withFullInfo,\n  withUpdatingStatus,\n  emojiStatusSize,\n  noStatusOrTyping,\n  noEmojiStatus,\n  noFake,\n  noVerified,\n  noRtl,\n  user,\n  userStatus,\n  self,\n  isSavedMessages,\n  isSavedDialog,\n  areMessagesLoaded,\n  adminMember,\n  ripple,\n  className,\n  isSynced,\n  onEmojiStatusClick,\n  iconElement,\n  rightElement,\n}) => {\n  const {\n    loadFullUser,\n    openMediaViewer,\n    loadMoreProfilePhotos,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { id: userId } = user || {};\n\n  const hasAvatarMediaViewer = withMediaViewer && !isSavedMessages;\n\n  useEffect(() => {\n    if (userId) {\n      if (withFullInfo && isSynced) loadFullUser({ userId });\n      if (withMediaViewer) loadMoreProfilePhotos({ peerId: userId, isPreload: true });\n    }\n  }, [userId, withFullInfo, withMediaViewer, isSynced]);\n\n  useIntervalForceUpdate(UPDATE_INTERVAL);\n\n  const handleAvatarViewerOpen = useLastCallback(\n    (e: React.MouseEvent<HTMLDivElement, MouseEvent>, hasMedia: boolean) => {\n      if (user && hasMedia) {\n        e.stopPropagation();\n        openMediaViewer({\n          isAvatarView: true,\n          chatId: user.id,\n          mediaIndex: 0,\n          origin: avatarSize === 'jumbo' ? MediaViewerOrigin.ProfileAvatar : MediaViewerOrigin.MiddleHeaderAvatar,\n        });\n      }\n    },\n  );\n\n  const mainUsername = useMemo(() => user && withUsername && getMainUsername(user), [user, withUsername]);\n\n  if (!user && !customPeer) {\n    return undefined;\n  }\n\n  function renderStatusOrTyping() {\n    if (status) {\n      return withDots ? (\n        <DotAnimation className=\"status\" content={status} />\n      ) : (\n        <span className=\"status\" dir=\"auto\">\n          {statusIcon && <Icon className=\"status-icon\" name={statusIcon} />}\n          {renderText(status)}\n        </span>\n      );\n    }\n\n    if (withUpdatingStatus && !areMessagesLoaded) {\n      return (\n        <DotAnimation className=\"status\" content={lang('Updating')} />\n      );\n    }\n\n    if (customPeer?.subtitleKey) {\n      return (\n        <span className=\"status\" dir=\"auto\">\n          <span className=\"user-status\" dir=\"auto\">{lang(customPeer.subtitleKey)}</span>\n        </span>\n      );\n    }\n\n    if (!user) {\n      return undefined;\n    }\n\n    if (typingStatus) {\n      return <TypingStatus typingStatus={typingStatus} />;\n    }\n\n    if (isSystemBot(user.id)) {\n      return undefined;\n    }\n\n    const translatedStatus = getUserStatus(lang, user, userStatus);\n    const mainUserNameClassName = buildClassName('handle', translatedStatus && 'withStatus');\n    return (\n      <span className={buildClassName('status', isUserOnline(user, userStatus, true) && 'online')}>\n        {mainUsername && <span className={mainUserNameClassName}>{mainUsername}</span>}\n        {translatedStatus && <span className=\"user-status\" dir=\"auto\">{translatedStatus}</span>}\n      </span>\n    );\n  }\n\n  const customTitle = adminMember\n    ? adminMember.customTitle || lang(adminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin')\n    : undefined;\n\n  function renderNameTitle() {\n    if (customTitle) {\n      return (\n        <div className=\"info-name-title\">\n          <FullNameTitle\n            peer={user!}\n            withEmojiStatus={!noEmojiStatus}\n            emojiStatusSize={emojiStatusSize}\n            isSavedMessages={isSavedMessages}\n            isSavedDialog={isSavedDialog}\n            onEmojiStatusClick={onEmojiStatusClick}\n          />\n          {customTitle && <span className=\"custom-title\">{customTitle}</span>}\n        </div>\n      );\n    }\n\n    return (\n      <FullNameTitle\n        peer={customPeer || user!}\n        noFake={noFake}\n        noVerified={noVerified}\n        withEmojiStatus={!noEmojiStatus}\n        emojiStatusSize={emojiStatusSize}\n        isSavedMessages={isSavedMessages}\n        isSavedDialog={isSavedDialog}\n        onEmojiStatusClick={onEmojiStatusClick}\n        iconElement={iconElement}\n      />\n    );\n  }\n\n  return (\n    <div className={buildClassName('ChatInfo', className)} dir={!noRtl && lang.isRtl ? 'rtl' : undefined}>\n      {isSavedDialog && self && (\n        <Avatar\n          key=\"saved-messages\"\n          size={avatarSize}\n          peer={self}\n          isSavedMessages\n          className=\"saved-dialog-avatar\"\n        />\n      )}\n      <Avatar\n        key={user?.id}\n        size={avatarSize}\n        peer={customPeer || user}\n        className={buildClassName(isSavedDialog && 'overlay-avatar')}\n        isSavedMessages={isSavedMessages}\n        isSavedDialog={isSavedDialog}\n        onClick={hasAvatarMediaViewer ? handleAvatarViewerOpen : undefined}\n      />\n      <div className=\"info\">\n        {renderNameTitle()}\n        {(status || (!isSavedMessages && !noStatusOrTyping)) && renderStatusOrTyping()}\n      </div>\n      {ripple && <RippleEffect />}\n      {rightElement}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId, forceShowSelf }): Complete<StateProps> => {\n    const { isSynced } = global;\n    const user = userId ? selectUser(global, userId) : undefined;\n    const userStatus = userId ? selectUserStatus(global, userId) : undefined;\n    const isSavedMessages = !forceShowSelf && user && user.isSelf;\n    const self = isSavedMessages ? user : selectUser(global, global.currentUserId!);\n    const areMessagesLoaded = Boolean(userId && selectChatMessages(global, userId));\n\n    return {\n      user,\n      userStatus,\n      isSavedMessages,\n      areMessagesLoaded,\n      self,\n      isSynced,\n    };\n  },\n)(PrivateChatInfo));\n","const RE_BR = /(<br>|<br\\s?\\/>)/g;\nconst RE_SPACE = /(&nbsp;|\\u00A0)/g;\nconst RE_CLEAN_HTML = /(<div>|<\\/div>)/gi;\nconst RE_EXTRA_NEW_LINE = /\\n$/i;\n\nexport function prepareForRegExp(html: string) {\n  return html\n    .replace(RE_SPACE, ' ')\n    .replace(RE_BR, '\\n')\n    .replace(RE_CLEAN_HTML, '')\n    .replace(RE_EXTRA_NEW_LINE, '');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"byPckqUT\",\"indicator\":\"nl36F75B\",\"indicatorInner\":\"AA5s1Pu4\",\"selected\":\"qy2i51dM\",\"active\":\"IsUWP16T\",\"bar-animation-transform-2\":\"p_1Kbke9\",\"barAnimationTransform2\":\"p_1Kbke9\",\"bar-animation-transform-1\":\"gOCprMbJ\",\"barAnimationTransform1\":\"gOCprMbJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './ChatCallStatus.module.scss';\n\ntype OwnProps = {\n  isSelected?: boolean;\n  isActive?: boolean;\n  isMobile?: boolean;\n};\n\nconst ChatCallStatus: FC<OwnProps> = ({\n  isSelected,\n  isActive,\n  isMobile,\n}) => {\n  return (\n    <div className={buildClassName(\n      styles.root,\n      isActive && styles.active,\n      isSelected && !isMobile && styles.selected,\n    )}\n    >\n      <div className={styles.indicator}>\n        <div className={styles.indicatorInner} />\n        <div className={styles.indicatorInner} />\n        <div className={styles.indicatorInner} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ChatCallStatus);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"cgAMX02q\",\"tag\":\"oIgI9O0L\",\"tagColorMore\":\"hZDqIz3W\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport styles from './ChatTags.module.scss';\n\nconst MAX_VISIBLE_TAGS = 3;\n\ntype OwnProps = {\n  orderedFolderIds?: number[];\n  chatFoldersById?: Record<number, ApiChatFolder>;\n};\n\nconst ChatTags = ({\n  orderedFolderIds,\n  chatFoldersById,\n}: OwnProps) => {\n  if (!orderedFolderIds) {\n    return undefined;\n  }\n\n  const visibleFolderIds = orderedFolderIds.slice(0, MAX_VISIBLE_TAGS);\n  const remainingCount = orderedFolderIds.length - visibleFolderIds.length;\n\n  return (\n    <div className={styles.wrapper}>\n      {visibleFolderIds.map((folderId) => {\n        const folder = chatFoldersById?.[folderId];\n        return folder && (\n          <div\n            key={folder.id}\n            className={buildClassName(\n              'ChatTags',\n              styles.tag,\n              getApiPeerColorClass({ color: folder.color }),\n            )}\n          >\n            {renderTextWithEntities({\n              text: folder.title.text,\n              entities: folder.title.entities,\n              noCustomEmojiPlayback: folder.noTitleAnimations,\n              emojiSize: 12,\n            })}\n          </div>\n        );\n      })}\n      {remainingCount > 0 && (\n        <div className={`ChatTags ${styles.tag} ${styles.tagColorMore}`}>\n          +\n          {remainingCount}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ChatTags);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiChatFolder,\n  ApiDraft,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiTopic,\n  ApiTypingStatus,\n  ApiUser,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ChatAnimationTypes } from './hooks';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ALL_FOLDER_ID, UNMUTE_TIMESTAMP } from '../../../config';\nimport {\n  groupStatefulContent,\n  isUserOnline,\n} from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatLastMessage,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForumPanelClosed,\n  selectIsForumPanelOpen,\n  selectMonoforumChannel,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectOutgoingStatus,\n  selectPeer,\n  selectSender,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n  selectTopicsInfo,\n  selectUser,\n  selectUserStatus,\n} from '../../../global/selectors';\nimport { IS_OPEN_IN_NEW_TAB_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getChatFolderIds } from '../../../util/folderManager';\nimport { createLocationHash } from '../../../util/routing';\n\nimport useSelectorSignal from '../../../hooks/data/useSelectorSignal';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport useChatListEntry from './hooks/useChatListEntry';\n\nimport Avatar from '../../common/Avatar';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport LastMessageMeta from '../../common/LastMessageMeta';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\nimport ChatBadge from './ChatBadge';\nimport ChatCallStatus from './ChatCallStatus';\nimport ChatTags from './ChatTags';\n\nimport './Chat.scss';\n\ntype OwnProps = {\n  chatId: string;\n  folderId?: number;\n  orderDiff: number;\n  animationType: ChatAnimationTypes;\n  isPinned?: boolean;\n  offsetTop?: number;\n  isSavedDialog?: boolean;\n  isPreview?: boolean;\n  previewMessageId?: number;\n  className?: string;\n  observeIntersection?: ObserveFn;\n  onDragEnter?: (chatId: string) => void;\n  withTags?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  monoforumChannel?: ApiChat;\n  listedTopicIds?: number[];\n  topics?: Record<number, ApiTopic>;\n  isMuted?: boolean;\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  lastMessageSender?: ApiPeer;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  draft?: ApiDraft;\n  isSelected?: boolean;\n  isSelectedForum?: boolean;\n  isForumPanelOpen?: boolean;\n  canScrollDown?: boolean;\n  canChangeFolder?: boolean;\n  lastMessageTopic?: ApiTopic;\n  typingStatus?: ApiTypingStatus;\n  withInterfaceAnimations?: boolean;\n  lastMessageId?: number;\n  lastMessage?: ApiMessage;\n  currentUserId: string;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  chatFolderIds?: number[];\n  orderedFolderIds?: number[];\n  chatFoldersById?: Record<number, ApiChatFolder>;\n  areTagsEnabled?: boolean;\n};\n\nconst Chat: FC<OwnProps & StateProps> = ({\n  chatId,\n  folderId,\n  orderDiff,\n  animationType,\n  isPinned,\n  listedTopicIds,\n  topics,\n  observeIntersection,\n  chat,\n  monoforumChannel,\n  isMuted,\n  user,\n  userStatus,\n  lastMessageSender,\n  lastMessageOutgoingStatus,\n  offsetTop,\n  draft,\n  withInterfaceAnimations,\n  isSelected,\n  isSelectedForum,\n  isForumPanelOpen,\n  canScrollDown,\n  canChangeFolder,\n  lastMessageTopic,\n  typingStatus,\n  lastMessageId,\n  lastMessage,\n  isSavedDialog,\n  currentUserId,\n  isPreview,\n  previewMessageId,\n  className,\n  isSynced,\n  onDragEnter,\n  isAccountFrozen,\n  chatFolderIds,\n  orderedFolderIds,\n  chatFoldersById,\n  areTagsEnabled,\n  withTags,\n}) => {\n  const {\n    openChat,\n    openSavedDialog,\n    toggleChatInfo,\n    focusLastMessage,\n    focusMessage,\n    loadTopics,\n    openForumPanel,\n    closeForumPanel,\n    setShouldCloseRightColumn,\n    reportMessages,\n    openFrozenAccountModal,\n    updateChatMutedState,\n    openQuickPreview,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderDeleteModal, markRenderDeleteModal, unmarkRenderDeleteModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n\n  const { isForum, isForumAsMessages, isMonoforum } = chat || {};\n\n  useEnsureMessage(isSavedDialog ? currentUserId : chatId, lastMessageId, lastMessage);\n\n  const tagFolderIds = useMemo(() => {\n    const chatFolderIdsSet = new Set(chatFolderIds);\n\n    return orderedFolderIds?.filter((id) => {\n      if (!chatFolderIdsSet.has(id)) return undefined;\n\n      const isActive = id === folderId;\n      const isAll = id === ALL_FOLDER_ID;\n\n      const folder = chatFoldersById?.[id];\n      const hasColor = folder?.color !== undefined && folder.color !== -1;\n\n      return !isActive && !isAll && hasColor;\n    });\n  }, [orderedFolderIds, folderId, chatFoldersById, chatFolderIds]);\n\n  const shouldRenderTags = areTagsEnabled && withTags && Boolean(tagFolderIds?.length);\n\n  const { renderSubtitle, ref } = useChatListEntry({\n    chat,\n    chatId,\n    lastMessage,\n    typingStatus,\n    draft,\n    statefulMediaContent: groupStatefulContent({}),\n    lastMessageTopic,\n    lastMessageSender,\n    observeIntersection,\n    animationType,\n    withInterfaceAnimations,\n    orderDiff,\n    isSavedDialog,\n    isPreview,\n    topics,\n    noForumTitle: shouldRenderTags,\n  });\n\n  const getIsForumPanelClosed = useSelectorSignal(selectIsForumPanelClosed);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    if (e.altKey && !isSavedDialog && !isForum && !isPreview) {\n      e.preventDefault();\n      openQuickPreview({ id: chatId });\n      return;\n    }\n\n    const noForumTopicPanel = isMobile && isForumAsMessages;\n\n    if (isMobile) {\n      setShouldCloseRightColumn({ value: true });\n    }\n\n    if (isPreview) {\n      focusMessage({\n        chatId,\n        messageId: previewMessageId!,\n      });\n      return;\n    }\n\n    if (isSavedDialog) {\n      openSavedDialog({ chatId, noForumTopicPanel: true }, { forceOnHeavyAnimation: true });\n\n      if (isMobile) {\n        toggleChatInfo({ force: false });\n      }\n      return;\n    }\n\n    if (isForum) {\n      if (isForumPanelOpen) {\n        closeForumPanel(undefined, { forceOnHeavyAnimation: true });\n\n        return;\n      } else {\n        if (!noForumTopicPanel) {\n          openForumPanel({ chatId }, { forceOnHeavyAnimation: true });\n        }\n\n        if (!isForumAsMessages) return;\n      }\n    }\n\n    openChat({ id: chatId, noForumTopicPanel, shouldReplaceHistory: true }, { forceOnHeavyAnimation: true });\n\n    if (isSelected && canScrollDown) {\n      focusLastMessage();\n    }\n  });\n\n  const handleDragEnter = useLastCallback((e) => {\n    e.preventDefault();\n    onDragEnter?.(chatId);\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n\n    markRenderDeleteModal();\n    openDeleteModal();\n  });\n\n  const handleMute = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n\n    markRenderMuteModal();\n    openMuteModal();\n  });\n\n  const handleUnmute = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n\n    updateChatMutedState({ chatId, mutedUntil: UNMUTE_TIMESTAMP });\n  });\n\n  const handleChatFolderChange = useLastCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  });\n\n  const handleReport = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n\n    if (!chat) return;\n    reportMessages({ chatId: chat.id, messageIds: [] });\n  });\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    handleDelete,\n    handleMute,\n    handleUnmute,\n    handleChatFolderChange,\n    handleReport,\n    folderId,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    isSavedDialog,\n    currentUserId,\n    isPreview,\n    topics,\n  });\n\n  const isIntersecting = useIsIntersecting(ref, chat ? observeIntersection : undefined);\n\n  // Load the forum topics to display unread count badge\n  useEffect(() => {\n    if (isIntersecting && isForum && isSynced && listedTopicIds === undefined) {\n      loadTopics({ chatId });\n    }\n  }, [chatId, listedTopicIds, isSynced, isForum, isIntersecting]);\n\n  const isOnline = user && userStatus && isUserOnline(user, userStatus);\n  const { hasShownClass: isAvatarOnlineShown } = useShowTransitionDeprecated(isOnline);\n\n  const href = useMemo(() => {\n    if (!IS_OPEN_IN_NEW_TAB_SUPPORTED) return undefined;\n\n    if (isSavedDialog) {\n      return `#${createLocationHash(currentUserId, 'thread', chatId)}`;\n    }\n\n    return `#${createLocationHash(chatId, 'thread', MAIN_THREAD_ID)}`;\n  }, [chatId, currentUserId, isSavedDialog]);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = user || chat;\n\n  const chatClassName = buildClassName(\n    'Chat chat-item-clickable',\n    isUserId(chatId) ? 'private' : 'group',\n    isForum && 'forum',\n    isSelected && 'selected',\n    isSelectedForum && 'selected-forum',\n    isPreview && 'standalone',\n    areTagsEnabled && withTags && 'chat-item-with-tags',\n    className,\n  );\n\n  return (\n    <ListItem\n      ref={ref}\n      className={chatClassName}\n      href={href}\n      style={`top: ${offsetTop}px`}\n      ripple={!isForum && !isMobile}\n      contextActions={contextActions}\n      onClick={handleClick}\n      onDragEnter={handleDragEnter}\n      withPortalForMenu\n    >\n      <div className={buildClassName('status', 'status-clickable')}>\n        <Avatar\n          peer={isMonoforum ? monoforumChannel : peer}\n          isSavedMessages={user?.isSelf}\n          isSavedDialog={isSavedDialog}\n          size={isPreview ? 'medium' : 'large'}\n          asMessageBubble={isMonoforum}\n        />\n        <div className=\"avatar-badge-wrapper\">\n          <div\n            className={buildClassName('avatar-online', 'avatar-badge', isAvatarOnlineShown && 'avatar-online-shown')}\n          />\n          {!isAvatarOnlineShown && Boolean(chat.subscriptionUntil) && (\n            <StarIcon type=\"gold\" className=\"avatar-badge avatar-subscription\" size=\"adaptive\" />\n          )}\n          <ChatBadge\n            chat={chat}\n            isMuted={isMuted}\n            shouldShowOnlyMostImportant\n            forceHidden={getIsForumPanelClosed}\n            topics={topics}\n            isSelected={isSelected}\n          />\n        </div>\n        {chat.isCallActive && chat.isCallNotEmpty && (\n          <ChatCallStatus isMobile={isMobile} isSelected={isSelected} isActive={withInterfaceAnimations} />\n        )}\n      </div>\n      <div className={buildClassName('info', areTagsEnabled && withTags && 'has-tags')}>\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={isMonoforum ? monoforumChannel! : peer}\n            isMonoforum={isMonoforum}\n            monoforumBadgeClassName=\"monoforum-badge\"\n            withEmojiStatus\n            isSavedMessages={chatId === user?.id && user?.isSelf}\n            isSavedDialog={isSavedDialog}\n            observeIntersection={observeIntersection}\n            withStatusTextColor={isSelected}\n          />\n          {isMuted && !isSavedDialog && <Icon name=\"muted\" />}\n          <div className=\"separator\" />\n          {lastMessage && (\n            <LastMessageMeta\n              message={lastMessage}\n              outgoingStatus={!isSavedDialog ? lastMessageOutgoingStatus : undefined}\n              draftDate={draft?.date}\n            />\n          )}\n        </div>\n        <div className=\"subtitle\">\n          {renderSubtitle()}\n          {!isPreview && (\n            <ChatBadge\n              chat={chat}\n              isPinned={isPinned}\n              isMuted={isMuted}\n              isSavedDialog={isSavedDialog}\n              hasMiniApp={user?.hasMainMiniApp}\n              topics={topics}\n              isSelected={isSelected}\n            />\n          )}\n        </div>\n        {shouldRenderTags && (\n          <ChatTags\n            orderedFolderIds={tagFolderIds}\n            chatFoldersById={chatFoldersById}\n          />\n        )}\n      </div>\n      {shouldRenderDeleteModal && (\n        <DeleteChatModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onCloseAnimationEnd={unmarkRenderDeleteModal}\n          chat={chat}\n          isSavedDialog={isSavedDialog}\n        />\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isSavedDialog, isPreview, previewMessageId,\n  }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, chatId);\n    if (!chat) {\n      return {\n        currentUserId: global.currentUserId!,\n      } as Complete<StateProps>;\n    }\n\n    const chatFolderIds = getChatFolderIds(chatId);\n    const { areTagsEnabled } = global.chatFolders;\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    const lastMessageId = previewMessageId || selectChatLastMessageId(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const lastMessage = previewMessageId\n      ? selectChatMessage(global, chatId, previewMessageId)\n      : selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const { isOutgoing, forwardInfo } = lastMessage || {};\n    const savedDialogSender = isSavedDialog && forwardInfo?.fromId ? selectPeer(global, forwardInfo.fromId) : undefined;\n    const messageSender = lastMessage ? selectSender(global, lastMessage) : undefined;\n    const lastMessageSender = savedDialogSender || messageSender;\n\n    const {\n      chatId: currentChatId,\n      threadId: currentThreadId,\n      type: messageListType,\n    } = selectCurrentMessageList(global) || {};\n    const isSelected = !isPreview && chatId === currentChatId && (isSavedDialog\n      ? chatId === currentThreadId : currentThreadId === MAIN_THREAD_ID);\n    const isSelectedForum = (chat.isForum && chatId === currentChatId)\n      || chatId === selectTabState(global).forumPanelChatId;\n\n    const userStatus = selectUserStatus(global, chatId);\n    const lastMessageTopic = lastMessage && selectTopicFromMessage(global, lastMessage);\n\n    const typingStatus = selectThreadParam(global, chatId, MAIN_THREAD_ID, 'typingStatus');\n\n    const topicsInfo = selectTopicsInfo(global, chatId);\n\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const monoforumChannel = selectMonoforumChannel(global, chatId);\n\n    return {\n      chat,\n      isMuted: getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id)),\n      lastMessageSender,\n      draft: selectDraft(global, chatId, MAIN_THREAD_ID),\n      isSelected,\n      isSelectedForum,\n      isForumPanelOpen: selectIsForumPanelOpen(global),\n      canScrollDown: isSelected && messageListType === 'thread',\n      canChangeFolder: (global.chatFolders.orderedIds?.length || 0) > 1,\n      lastMessageOutgoingStatus: isOutgoing && lastMessage ? selectOutgoingStatus(global, lastMessage) : undefined,\n      user,\n      userStatus,\n      lastMessageTopic,\n      typingStatus,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      lastMessage,\n      lastMessageId,\n      currentUserId: global.currentUserId!,\n      listedTopicIds: topicsInfo?.listedTopicIds,\n      topics: topicsInfo?.topicsById,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      monoforumChannel,\n      chatFolderIds,\n      orderedFolderIds: global.chatFolders.orderedIds,\n      chatFoldersById: global.chatFolders.byId,\n      areTagsEnabled: areTagsEnabled && isPremium,\n    };\n  },\n)(Chat));\n","import { useEffect, useRef, useState } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport { PAID_MESSAGES_PURPOSE } from '../../../../config';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePaidMessageConfirmation(\n  starsForAllMessages: number,\n  isStarsBalanceModeOpen: boolean,\n  starsBalance: number,\n) {\n  const {\n    shouldPaidMessageAutoApprove,\n  } = getGlobal().settings.byKey;\n\n  const [shouldAutoApprove,\n    setAutoApprove] = useState(Boolean(shouldPaidMessageAutoApprove));\n  const [isWaitingStarsTopup, setIsWaitingStarsTopup] = useState(false);\n  const confirmPaymentHandlerRef = useRef<NoneToVoidFunction | undefined>(undefined);\n\n  const closeConfirmDialog = useLastCallback(() => {\n    getActions().closePaymentMessageConfirmDialogOpen();\n  });\n\n  useEffect(() => {\n    if (isWaitingStarsTopup && !isStarsBalanceModeOpen) {\n      setIsWaitingStarsTopup(false);\n\n      if (starsBalance > starsForAllMessages) {\n        confirmPaymentHandlerRef?.current?.();\n      }\n    }\n  }, [isWaitingStarsTopup, isStarsBalanceModeOpen, starsBalance, starsForAllMessages]);\n\n  const handleStarsTopup = useLastCallback(() => {\n    getActions().openStarsBalanceModal({\n      topup: {\n        balanceNeeded: starsForAllMessages,\n        purpose: PAID_MESSAGES_PURPOSE,\n      },\n    });\n    setIsWaitingStarsTopup(true);\n  });\n\n  const dialogHandler = useLastCallback(() => {\n    if (starsForAllMessages > starsBalance) {\n      handleStarsTopup();\n    } else {\n      confirmPaymentHandlerRef?.current?.();\n    }\n    getActions().closePaymentMessageConfirmDialogOpen();\n    if (shouldAutoApprove) getActions().setPaidMessageAutoApprove();\n  });\n\n  const handleWithConfirmation = <T extends (...args: any[]) => void>(\n    handler: T,\n    ...args: Parameters<T>\n  ) => {\n    if (starsForAllMessages) {\n      confirmPaymentHandlerRef.current = () => handler(...args);\n      if (!shouldPaidMessageAutoApprove) {\n        getActions().openPaymentMessageConfirmDialogOpen();\n        return;\n      }\n\n      if (starsForAllMessages > starsBalance) {\n        handleStarsTopup();\n        return;\n      }\n    }\n\n    handler(...args);\n  };\n\n  return {\n    closeConfirmDialog,\n    handleWithConfirmation,\n    dialogHandler,\n    shouldAutoApprove,\n    setAutoApprove,\n  };\n}\n","import { useEffect, useMemo } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ApiTypeStory } from '../api/types';\n\nimport { throttle } from '../util/schedulers';\n\nconst THROTTLE_THRESHOLD_MS = 200;\n\nfunction useEnsureStory(\n  peerId?: string,\n  storyId?: number,\n  story?: ApiTypeStory,\n) {\n  const { loadPeerStoriesByIds } = getActions();\n\n  const loadStoryThrottled = useMemo(() => {\n    const throttled = throttle(loadPeerStoriesByIds, THROTTLE_THRESHOLD_MS, true);\n    return () => {\n      throttled({ peerId: peerId!, storyIds: [storyId!] });\n    };\n  }, [storyId, peerId]);\n\n  useEffect(() => {\n    const shouldLoadStory = !story || !('content' in story || 'isDeleted' in story);\n    if (peerId && storyId && shouldLoadStory) {\n      loadStoryThrottled();\n    }\n  }, [loadStoryThrottled, story, storyId, peerId]);\n}\n\nexport default useEnsureStory;\n","import { IS_IOS } from '../../../../util/browser/windowEnvironment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiQuickReply } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useChatCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n  quickReplies?: Record<number, ApiQuickReply>,\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [filteredQuickReplies, setFilteredQuickReplies] = useState<ApiQuickReply[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || (!commands && !quickReplies)) {\n      setFilteredBotCommands(undefined);\n      setFilteredQuickReplies(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands?.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n\n    const newFilteredQuickReplies = Object.values(quickReplies || {}).filter((quickReply) => (\n      !filter || quickReply.shortcut.startsWith(filter)\n    ));\n\n    setFilteredQuickReplies(\n      newFilteredQuickReplies?.length ? newFilteredQuickReplies : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands, quickReplies]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean((filteredBotCommands?.length || filteredQuickReplies?.length) && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n    filteredQuickReplies,\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  BLOCKQUOTE: 'blockquote',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { DEBUG } from '../../../../config';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseHtmlAsFormattedText';\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nexport function preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) {\n      node.remove();\n      return;\n    }\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nexport function escapeHtml(html: string) {\n  const fragment = document.createElement('div');\n  const text = document.createTextNode(html);\n  fragment.appendChild(text);\n  return fragment.innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport {\n  EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID, EDITABLE_STORY_INPUT_ID,\n} from '../../../../config';\nimport { canReplaceMessageMedia, isUploadingFileSticker } from '../../../../global/helpers';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport buildAttachment from '../helpers/buildAttachment';\nimport { preparePastedHtml } from '../helpers/cleanHtml';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\n\nimport useLang from '../../../../hooks/useLang';\n\nconst TYPE_HTML = 'text/html';\nconst DOCUMENT_TYPE_WORD = 'urn:schemas-microsoft-com:office:word';\nconst NAMESPACE_PREFIX_WORD = 'xmlns:w';\n\nconst VALID_TARGET_IDS = new Set([EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID, EDITABLE_STORY_INPUT_ID]);\nconst CLOSEST_CONTENT_EDITABLE_SELECTOR = 'div[contenteditable]';\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  setNextText: StateHookSetter<ApiFormattedText | undefined>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  const {\n    showNotification,\n    updateShouldSaveAttachmentsCompression,\n    applyDefaultAttachmentsCompression } = getActions();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = (e.target as HTMLElement)?.closest(CLOSEST_CONTENT_EDITABLE_SELECTOR);\n      if (!input || !VALID_TARGET_IDS.has(input.id)) {\n        return;\n      }\n\n      e.preventDefault();\n\n      // Some extensions can trigger paste into their panels without focus\n      if (document.activeElement !== input) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text');\n      const html = e.clipboardData.getData('text/html');\n\n      let pastedFormattedText = html ? parseHtmlAsFormattedText(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n        if (editedMessage) {\n          files = files?.slice(0, 1);\n        }\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      let isWordDocument = false;\n      try {\n        const parser = new DOMParser();\n        const parsedDocument = parser.parseFromString(html, TYPE_HTML);\n        isWordDocument = parsedDocument.documentElement\n          .getAttribute(NAMESPACE_PREFIX_WORD) === DOCUMENT_TYPE_WORD;\n      } catch (err: any) {\n        // Ignore\n      }\n\n      const hasText = textToPaste && textToPaste.text;\n      let shouldSetAttachments = files?.length && !isWordDocument;\n\n      const newAttachments = files ? await Promise.all(files.map((file) => buildAttachment(file.name, file))) : [];\n      const canReplace = (editedMessage && newAttachments?.length\n        && canReplaceMessageMedia(editedMessage, newAttachments[0])) || Boolean(hasText);\n      const isUploadingDocumentSticker = isUploadingFileSticker(newAttachments[0]);\n      const isInAlbum = editedMessage && editedMessage?.groupedId;\n\n      if (editedMessage && newAttachments?.length > 1) {\n        showNotification({\n          message: lang('MediaReplaceInvalidError', undefined, { pluralValue: newAttachments.length }),\n        });\n        return;\n      }\n\n      if (editedMessage && isUploadingDocumentSticker) {\n        showNotification({ message: lang('MediaReplaceInvalidError', undefined, { pluralValue: 1 }) });\n        return;\n      }\n\n      if (isInAlbum) {\n        shouldSetAttachments = canReplace;\n        if (!shouldSetAttachments) {\n          showNotification({\n            message: lang('MediaReplaceInvalidError', undefined, { pluralValue: newAttachments.length }),\n          });\n          return;\n        }\n      }\n\n      if (shouldSetAttachments) {\n        updateShouldSaveAttachmentsCompression({ shouldSave: true });\n        applyDefaultAttachmentsCompression();\n        setAttachments(editedMessage ? newAttachments : (attachments) => attachments.concat(newAttachments));\n      }\n\n      if (hasText) {\n        if (shouldSetAttachments) {\n          setNextText(textToPaste);\n        } else {\n          insertTextAndUpdateCursor(textToPaste, input?.id);\n        }\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji,\n    onCustomEmojiStripped, setNextText, lang,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useEffect, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft, ApiMessage } from '../../../../api/types';\nimport type { ThreadId } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport {\n  requestMeasure, requestNextMutation,\n} from '../../../../lib/fasterdom/fasterdom';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../../../hooks/useLayoutEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useBackgroundMode from '../../../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/window/useBeforeUnload';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n\n  requestMeasure(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = ({\n  draft,\n  chatId,\n  threadId,\n  getHtml,\n  setHtml,\n  editedMessage,\n  isDisabled,\n}: {\n  draft?: ApiDraft;\n  chatId: string;\n  threadId: ThreadId;\n  getHtml: Signal<string>;\n  setHtml: (html: string) => void;\n  editedMessage?: ApiMessage;\n  isDisabled?: boolean;\n}) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isTouchedRef = useRef(false);\n\n  useEffect(() => {\n    const html = getHtml();\n    const isLocalDraft = draft?.isLocal !== undefined;\n    if (getTextWithEntitiesAsHtml(draft?.text) === html && !isLocalDraft) {\n      isTouchedRef.current = false;\n    } else {\n      isTouchedRef.current = true;\n    }\n  }, [draft, getHtml]);\n  useEffect(() => {\n    isTouchedRef.current = false;\n  }, [chatId, threadId]);\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useLastCallback((prevState: { chatId?: string; threadId?: ThreadId } = {}) => {\n    if (isDisabled || isEditing || !isTouchedRef.current) return;\n\n    const html = getHtml();\n\n    if (html) {\n      requestMeasure(() => {\n        saveDraft({\n          chatId: prevState.chatId ?? chatId,\n          threadId: prevState.threadId ?? threadId,\n          text: parseHtmlAsFormattedText(html),\n        });\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldKeepReply: true,\n        shouldKeepSuggestedPost: true,\n      });\n    }\n  });\n\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (isDisabled) {\n      return;\n    }\n    const isTouched = isTouchedRef.current;\n    const shouldUpdateSuggestedPost = draft?.suggestedPostInfo && !prevDraft?.suggestedPostInfo;\n\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (isTouched && !draft) return; // Prevent reset from other client if we have local edits\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (isTouched && !shouldUpdateSuggestedPost) return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft.text));\n    if (shouldUpdateSuggestedPost) {\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n\n    const customEmojiIds = draft.text?.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n  }, [chatId, threadId, draft, getHtml, setHtml, editedMessage, isDisabled]);\n\n  // Save draft on chat change. Should be layout effect to read correct html on cleanup\n  useLayoutEffect(() => {\n    if (isDisabled) {\n      return undefined;\n    }\n\n    return () => {\n      if (!isEditing) {\n        updateDraft({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraft, isDisabled]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isDisabled || isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraft();\n\n      return;\n    }\n\n    const scopedСhatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedСhatId && threadIdRef.current === scopedThreadId) {\n        updateDraft();\n      }\n    });\n  }, [chatIdRef, getHtml, isDisabled, runDebouncedForSaveDraft, threadIdRef, updateDraft]);\n\n  useBackgroundMode(updateDraft);\n  useBeforeUnload(updateDraft);\n};\n\nexport default useDraft;\n","import { useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\nimport { useDebouncedResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useBackgroundMode from '../../../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/window/useBeforeUnload';\n\nconst URL_ENTITIES = new Set<string>([ApiMessageEntityTypes.TextUrl, ApiMessageEntityTypes.Url]);\nconst DEBOUNCE_MS = 300;\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  chatId: string,\n  threadId: ThreadId,\n  type: MessageListType,\n  draft?: ApiDraft,\n  editingDraft?: ApiFormattedText,\n): [VoidFunction, VoidFunction, boolean] => {\n  const {\n    editMessage, setEditingDraft, toggleMessageWebPage, openDeleteMessageModal,\n  } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState(false);\n\n  const replyingToId = draft?.replyInfo?.replyToMsgId;\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n\n    requestNextMutation(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, replyingToId, editingDraft, setHtml]);\n\n  useEffect(() => {\n    if (!editedMessage) {\n      return;\n    }\n\n    const shouldSetNoWebPage = !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type));\n\n    toggleMessageWebPage({\n      chatId,\n      threadId,\n      noWebPage: shouldSetNoWebPage,\n    });\n  }, [chatId, threadId, editedMessage]);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseHtmlAsFormattedText(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    if (!editedMessage) return false;\n\n    const edited = parseHtmlAsFormattedText(getHtml());\n    return !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type))\n      && !(edited.entities?.some((entity) => URL_ENTITIES.has(entity.type)));\n  }, [editedMessage, getHtml], DEBOUNCE_MS, true);\n\n  const getShouldResetNoWebPageDebounced = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage || prevEditedMessage?.id !== editedMessage.id) {\n      return;\n    }\n\n    if (getShouldResetNoWebPageDebounced()) {\n      toggleMessageWebPage({\n        chatId,\n        threadId,\n        noWebPage: false,\n      });\n    }\n  }, [editedMessage, chatId, getHtml, threadId, getShouldResetNoWebPageDebounced]);\n\n  const restoreNewDraftAfterEditing = useLastCallback(() => {\n    if (!draft) return;\n\n    // Run one frame after editing draft reset\n    requestMeasure(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft.text));\n\n      // Wait one more frame until new HTML is rendered\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    });\n  });\n\n  const handleEditCancel = useLastCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  });\n\n  const handleEditComplete = useLastCallback(() => {\n    const { text, entities } = parseHtmlAsFormattedText(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteMessageModal({\n        chatId,\n        messageIds: [editedMessage.id],\n        isSchedule: type === 'scheduled',\n      });\n      return;\n    }\n\n    editMessage({\n      messageList: { chatId, threadId, type },\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  });\n\n  const handleBlur = useLastCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseHtmlAsFormattedText(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  });\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport memoized from '../../../../util/memoized';\n\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/is;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n  }, [username, resetInlineBot]);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    switchWebview,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm || switchWebview) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useLastCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  });\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    switchWebview,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useRef } from '@teact';\nimport { getActions } from '../../../../global';\n\nimport type { ThreadId } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\nimport {\n  type ApiFormattedText,\n  type ApiMessageEntityTextUrl,\n  ApiMessageEntityTypes,\n} from '../../../../api/types';\n\nimport { RE_LINK_TEMPLATE } from '../../../../config';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\n\nimport { useDebouncedResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nexport default function useLoadLinkPreview({\n  getHtml,\n  chatId,\n  threadId,\n}: {\n  chatId: string;\n  threadId: ThreadId;\n  getHtml: Signal<string>;\n}) {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const formattedTextWithLinkRef = useRef<ApiFormattedText>();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const formattedText = parseHtmlAsFormattedText(getHtml());\n    const linkEntity = formattedText.entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    formattedTextWithLinkRef.current = formattedText;\n\n    return linkEntity?.url || formattedText.text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n    const formattedText = formattedTextWithLinkRef.current;\n\n    if (link) {\n      loadWebPagePreview({ text: formattedText! });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/browser/windowEnvironment';\nimport parseEmojiOnlyString from '../../../../util/emoji/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1])\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled || !isActive) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, isActive, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: (volume: number) => void) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: (volume: number) => void) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestMeasure(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachmentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default AttachmentModalAsync;\n","import {\n  memo, useEffect,\n  useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiAttachMenuPeerType, ApiMessage } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MessageListType, ThemeKey, ThreadId } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, DEBUG_LOG_FILENAME, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport {\n  getMessageAudio, getMessageDocument,\n  getMessagePhoto,\n  getMessageVideo, getMessageVoice,\n} from '../../../global/helpers';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canAttachToDoLists: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots?: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  shouldCollectDebugLogs?: boolean;\n  theme: ThemeKey;\n  canEditMedia?: boolean;\n  editingMessage?: ApiMessage;\n  messageListType?: MessageListType;\n  paidMessagesStars?: number;\n  onFileSelect: (files: File[]) => void;\n  onPollCreate: NoneToVoidFunction;\n  onTodoListCreate: NoneToVoidFunction;\n  onMenuOpen: NoneToVoidFunction;\n  onMenuClose: NoneToVoidFunction;\n};\n\nconst AttachMenu = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canAttachToDoLists,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  theme,\n  shouldCollectDebugLogs,\n  canEditMedia,\n  editingMessage,\n  messageListType,\n  paidMessagesStars,\n  onFileSelect,\n  onMenuOpen,\n  onMenuClose,\n  onPollCreate,\n  onTodoListCreate,\n}: OwnProps) => {\n  const {\n    updateAttachmentSettings,\n  } = getActions();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  const isMenuOpen = isAttachMenuOpen || isAttachmentBotMenuOpen;\n\n  const isPhotoOrVideo = editingMessage && editingMessage?.groupedId\n    && Boolean(getMessagePhoto(editingMessage)\n      || Boolean(getMessageVideo(editingMessage)));\n  const isFile = editingMessage && editingMessage?.groupedId && Boolean(getMessageAudio(editingMessage)\n    || getMessageVoice(editingMessage) || getMessageDocument(editingMessage));\n\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  useEffect(() => {\n    if (isMenuOpen) {\n      onMenuOpen();\n    } else {\n      onMenuClose();\n    }\n  }, [isMenuOpen, onMenuClose, onMenuOpen]);\n\n  const handleToggleAttachMenu = useLastCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  });\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles);\n    }\n  });\n\n  const handleQuickSelect = useLastCallback(() => {\n    updateAttachmentSettings({ shouldCompress: true });\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_PHOTO_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e),\n    );\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    updateAttachmentSettings({ shouldCompress: false });\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e));\n  });\n\n  const handleSendLogs = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    onFileSelect([file]);\n  });\n\n  const bots = useMemo(() => {\n    return attachBots\n      ? Object.values(attachBots).filter((bot) => {\n        if (!peerType || !bot.isForAttachMenu) return false;\n        if (peerType === 'bots' && bot.id === chatId\n          && bot.attachMenuPeerTypes && bot.attachMenuPeerTypes.includes('self')) {\n          return true;\n        }\n        return bot.attachMenuPeerTypes!.includes(peerType);\n      })\n      : undefined;\n  }, [attachBots, chatId, peerType]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      {\n        editingMessage && canEditMedia ? (\n          <ResponsiveHoverButton\n            id=\"replace-menu-button\"\n            className={buildClassName('AttachMenu--button composer-action-button', isAttachMenuOpen && 'activated')}\n            round\n            color=\"translucent\"\n            onActivate={handleToggleAttachMenu}\n            ariaLabel=\"Replace an attachment\"\n            ariaControls=\"replace-menu-controls\"\n            hasPopup\n          >\n            <Icon name=\"replace\" />\n          </ResponsiveHoverButton>\n        ) : (\n          <ResponsiveHoverButton\n            id=\"attach-menu-button\"\n            disabled={Boolean(editingMessage)}\n            className={buildClassName('AttachMenu--button composer-action-button', isAttachMenuOpen && 'activated')}\n            round\n            color=\"translucent\"\n            onActivate={handleToggleAttachMenu}\n            ariaLabel=\"Add an attachment\"\n            ariaControls=\"attach-menu-controls\"\n            hasPopup\n          >\n            <Icon name=\"attach\" />\n          </ResponsiveHoverButton>\n        )\n      }\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>\n            {lang(messageListType === 'scheduled' && paidMessagesStars\n              ? 'DescriptionScheduledPaidMediaNotAllowed'\n              : 'DescriptionRestrictedMedia')}\n          </MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && !isFile && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {oldLang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {((canSendDocuments || canSendAudios) && !isPhotoOrVideo)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {oldLang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n            {canSendDocuments && shouldCollectDebugLogs && (\n              <MenuItem icon=\"bug\" onClick={handleSendLogs}>\n                {oldLang('DebugSendLogs')}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {canAttachPolls && !editingMessage && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{oldLang('Poll')}</MenuItem>\n        )}\n        {canAttachToDoLists && !editingMessage && (\n          <MenuItem icon=\"select\" onClick={onTodoListCreate}>{lang('TitleToDoList')}</MenuItem>\n        )}\n\n        {!editingMessage && !canEditMedia && !isScheduled && bots?.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BotCommandMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default BotCommandMenuAsync;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport renderKeyboardButtonText from './helpers/renderKeyboardButtonText';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  threadId?: ThreadId;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, threadId, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const lang = useOldLang();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  const buttonTexts = useMemo(() => {\n    const texts: TeactNode[][] = [];\n    message?.keyboardButtons!.forEach((row) => {\n      texts.push(row.map((button) => renderKeyboardButtonText(lang, button)));\n    });\n\n    return texts;\n  }, [lang, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content custom-scroll\">\n        {message.keyboardButtons.map((row, i) => (\n          <div className=\"row\">\n            {row.map((button, j) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n\n                onClick={() => clickBotInlineButton({\n                  chatId: message.chatId, messageId: message.id, threadId, button,\n                })}\n              >\n                {buttonTexts?.[i][j]}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): Complete<StateProps> => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n\n    const message = chatId ? selectChatMessage(global, chatId, messageId) : undefined;\n    return {\n      message,\n    };\n  },\n)(BotKeyboardMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  const textRef = useRef<HTMLSpanElement>();\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('composer-action-button bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <Icon name=\"webapp\" className={buildClassName('bot-menu-icon', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{renderText(text)}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatCommandTooltip';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatCommandTooltip = useModuleLoader(Bundles.Extra, 'ChatCommandTooltip', !isOpen);\n\n  return ChatCommandTooltip ? <ChatCommandTooltip {...props} /> : undefined;\n};\n\nexport default ChatCommandTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiInputMessageReplyInfo, ApiInputSuggestedPostInfo, ApiMessage, ApiPeer,\n} from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types/index';\n\nimport { isChatChannel, stripCustomEmoji } from '../../../global/helpers';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectSender,\n  selectTabState,\n} from '../../../global/selectors';\nimport { selectIsMediaNsfw } from '../../../global/selectors/media';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { unique } from '../../../util/iteratees';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport { ClosableEmbeddedMessage } from '../../common/embedded/EmbeddedMessage';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyInfo?: ApiInputMessageReplyInfo;\n  suggestedPostInfo?: ApiInputSuggestedPostInfo;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n  isContextMenuDisabled?: boolean;\n  isReplyToDiscussion?: boolean;\n  isInChangingRecipientMode?: boolean;\n  shouldPreventComposerAnimation?: boolean;\n  senderChat?: ApiChat;\n  isSenderChannel?: boolean;\n  currentUserId?: string;\n  forwardMessageIds?: number[];\n  fromChatId?: string;\n  isMediaNsfw?: boolean;\n};\n\ntype OwnProps = {\n  shouldForceShowEditing?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  onClear?: () => void;\n};\n\nconst CLOSE_DURATION = 350;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyInfo,\n  suggestedPostInfo,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  isContextMenuDisabled,\n  isReplyToDiscussion,\n  isInChangingRecipientMode,\n  shouldPreventComposerAnimation,\n  senderChat,\n  chatId,\n  currentUserId,\n  isSenderChannel,\n  forwardMessageIds,\n  fromChatId,\n  isMediaNsfw,\n  onClear,\n}) => {\n  const {\n    resetDraftReplyInfo,\n    resetDraftSuggestedPostInfo,\n    updateDraftReplyInfo,\n    setEditingId,\n    focusMessage,\n    changeRecipient,\n    openChatOrTopicWithReplyInDraft,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n    setShouldPreventComposerAnimation,\n    openSuggestMessageModal,\n  } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const isReplyToTopicStart = message?.content.action?.type === 'topicCreate';\n  const isShowingReply = replyInfo && !shouldForceShowEditing;\n  const isReplyWithQuote = Boolean(replyInfo?.quoteText);\n  const isShowingSuggestedPost = Boolean(suggestedPostInfo) && !shouldForceShowEditing;\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n\n  const selectSenderFromForwardedMessage = useLastCallback((forwardedMessage: ApiMessage) => {\n    const global = getGlobal();\n    sender = selectForwardedSender(global, forwardedMessage);\n    if (!sender) {\n      sender = selectSender(global, forwardedMessage);\n    }\n    return sender;\n  });\n\n  const forwardSenders = useMemo(() => {\n    if (!isForwarding) return undefined;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(getGlobal(), fromChatId!, id))\n      .filter(Boolean);\n    const senders = forwardedMessages?.map((m) => selectSenderFromForwardedMessage(m)).filter(Boolean);\n    return senders ? unique(senders) : undefined;\n  }, [isForwarding, forwardMessageIds, fromChatId]);\n\n  const isShown = (() => {\n    if (isInChangingRecipientMode) return false;\n    if (message && (replyInfo || editingId)) return true;\n    if (forwardSenders && isForwarding) return true;\n    if (isShowingSuggestedPost) return true;\n    return false;\n  })();\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransitionDeprecated(\n    isShown && !isReplyToTopicStart && !isReplyToDiscussion,\n    undefined,\n    !shouldAnimate,\n    undefined,\n    !shouldAnimate,\n    CLOSE_DURATION,\n    !shouldAnimate,\n  );\n  useEffect(() => {\n    if (shouldPreventComposerAnimation) {\n      setShouldPreventComposerAnimation({ shouldPreventComposerAnimation: false });\n    }\n  });\n\n  const clearEmbedded = useLastCallback(() => {\n    if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    } else if (isShowingSuggestedPost) {\n      resetDraftSuggestedPostInfo();\n      resetDraftReplyInfo();\n    } else if (replyInfo && !shouldForceShowEditing) {\n      resetDraftReplyInfo();\n    }\n    onClear?.();\n  });\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const focusMessageFromDraft = () => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  };\n  const handleMessageClick = useLastCallback((e: React.MouseEvent): void => {\n    if (suggestedPostInfo) {\n      openSuggestMessageModal({ chatId });\n      return;\n    }\n    handleContextMenu(e);\n  });\n\n  const handleClearClick = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n    handleContextMenuHide();\n  });\n  const buildAutoCloseMenuItemHandler = (action: NoneToVoidFunction) => {\n    return () => {\n      handleContextMenuClose();\n      action();\n    };\n  };\n  const handleForwardToAnotherChatClick = useLastCallback(buildAutoCloseMenuItemHandler(changeRecipient));\n  const handleShowMessageClick = useLastCallback(buildAutoCloseMenuItemHandler(focusMessageFromDraft));\n  const handleRemoveQuoteClick = useLastCallback(buildAutoCloseMenuItemHandler(\n    () => updateDraftReplyInfo({ quoteText: undefined }),\n  ));\n  const handleChangeReplyRecipientClick = useLastCallback(buildAutoCloseMenuItemHandler(changeRecipient));\n  const handleReplyInSenderChat = useLastCallback(() => {\n    handleContextMenuClose();\n    if (!sender) return;\n    openChatOrTopicWithReplyInDraft({ chatId: sender.id });\n  });\n  const handleDoNotReplyClick = useLastCallback(buildAutoCloseMenuItemHandler(clearEmbedded));\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'));\n\n  useEffect(() => {\n    if (!shouldRender) {\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, handleContextMenuHide, shouldRender]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n  const renderingSender = useCurrentOrPrev(sender, true);\n  const innerClassName = buildClassName(\n    'ComposerEmbeddedMessage_inner',\n    getPeerColorClass(renderingSender),\n  );\n\n  const leftIcon = useMemo(() => {\n    if (editingId) {\n      return 'edit';\n    }\n    if (isShowingSuggestedPost) {\n      return 'cash-circle';\n    }\n    if (isForwarding) {\n      return 'forward';\n    }\n    if (isShowingReply) {\n      return 'reply';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, isShowingReply, isShowingSuggestedPost]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? oldLang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  const renderingLeftIcon = useCurrentOrPrev(leftIcon, true);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const canReplyInSenderChat = sender && !isSenderChannel && chatId !== sender.id && sender.id !== currentUserId;\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu}>\n      <div className={innerClassName}>\n        <div className=\"embedded-left-icon\" onClick={handleContextMenu}>\n          {renderingLeftIcon && <Icon name={renderingLeftIcon} />}\n          {Boolean(replyInfo?.quoteText) && (\n            <Icon name=\"quote\" className=\"quote-reply\" />\n          )}\n        </div>\n        <ClosableEmbeddedMessage\n          isOpen={isShown}\n          className=\"inside-input\"\n          replyInfo={replyInfo}\n          suggestedPostInfo={suggestedPostInfo}\n          isMediaNsfw={isMediaNsfw}\n          isInComposer\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          composerForwardSenders={forwardSenders}\n          customText={customText}\n          noCaptions={noCaptions}\n          title={(editingId && !isShowingReply) ? oldLang('EditMessage')\n            : noAuthors ? oldLang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          senderChat={senderChat}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={oldLang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        {(isShowingReply || isForwarding) && !isContextMenuDisabled && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            anchor={contextMenuAnchor}\n            getTriggerElement={getTriggerElement}\n            getRootElement={getRootElement}\n            getMenuElement={getMenuElement}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            {isForwarding && (\n              <>\n                <MenuItem\n                  icon={!noAuthors ? 'message-succeeded' : undefined}\n                  customIcon={noAuthors ? <Icon name=\"placeholder\" /> : undefined}\n\n                  onClick={() => setForwardNoAuthors({\n                    noAuthors: false,\n                  })}\n                >\n                  {oldLang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n                </MenuItem>\n                <MenuItem\n                  icon={noAuthors ? 'message-succeeded' : undefined}\n                  customIcon={!noAuthors ? <Icon name=\"placeholder\" /> : undefined}\n\n                  onClick={() => setForwardNoAuthors({\n                    noAuthors: true,\n                  })}\n                >\n                  {oldLang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n                </MenuItem>\n                {forwardsHaveCaptions && (\n                  <>\n                    <MenuSeparator />\n                    <MenuItem\n                      icon={!noCaptions ? 'message-succeeded' : undefined}\n                      customIcon={noCaptions ? <Icon name=\"placeholder\" /> : undefined}\n\n                      onClick={() => setForwardNoCaptions({\n                        noCaptions: false,\n                      })}\n                    >\n                      {oldLang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                    </MenuItem>\n                    <MenuItem\n                      icon={noCaptions ? 'message-succeeded' : undefined}\n                      customIcon={!noCaptions ? <Icon name=\"placeholder\" /> : undefined}\n\n                      onClick={() => setForwardNoCaptions({\n                        noCaptions: true,\n                      })}\n                    >\n                      {oldLang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                    </MenuItem>\n                  </>\n                )}\n                <MenuSeparator />\n                <MenuItem icon=\"replace\" onClick={handleForwardToAnotherChatClick}>\n                  {oldLang('ForwardAnotherChat')}\n                </MenuItem>\n              </>\n            )}\n            {isShowingReply && (\n              <>\n                <MenuItem\n                  icon=\"show-message\"\n                  onClick={handleShowMessageClick}\n                >\n                  {oldLang('Message.Context.Goto')}\n                </MenuItem>\n                {isReplyWithQuote && (\n                  <MenuItem\n                    icon=\"remove-quote\"\n                    onClick={handleRemoveQuoteClick}\n                  >\n                    {oldLang('RemoveQuote')}\n                  </MenuItem>\n                )}\n                {canReplyInSenderChat && (\n                  <MenuItem icon=\"user\" onClick={handleReplyInSenderChat}>\n                    {lang('ReplyInPrivateMessage')}\n                  </MenuItem>\n                )}\n                <MenuItem icon=\"replace\" onClick={handleChangeReplyRecipientClick}>\n                  {oldLang('ReplyToAnotherChat')}\n                </MenuItem>\n                <MenuItem icon=\"delete\" onClick={handleDoNotReplyClick}>\n                  {oldLang('DoNotReply')}\n                </MenuItem>\n              </>\n            )}\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    shouldForceShowEditing, chatId, threadId, messageListType,\n  }): Complete<StateProps> => {\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n      isShareMessageModalShown: isModalShown,\n      shouldPreventComposerAnimation,\n    } = selectTabState(global);\n\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = selectCanAnimateInterface(global) && !shouldPreventComposerAnimation;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    const draft = selectDraft(global, chatId, threadId);\n    const replyInfo = draft?.replyInfo;\n    const suggestedPostInfo = draft?.suggestedPostInfo;\n    const replyToPeerId = replyInfo?.replyToPeerId;\n    const senderChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n\n    let message: ApiMessage | undefined;\n    if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    } else if (replyInfo && !shouldForceShowEditing) {\n      message = selectChatMessage(global, replyInfo.replyToPeerId || chatId, replyInfo.replyToMsgId);\n    }\n\n    let sender: ApiPeer | undefined;\n\n    const selectSenderFromForwardedMessage = (forwardedMessage: ApiMessage) => {\n      sender = selectForwardedSender(global, forwardedMessage);\n      if (!sender) {\n        sender = selectSender(global, forwardedMessage);\n      }\n      return sender;\n    };\n\n    if (editingId && message) {\n      sender = selectSender(global, message);\n    } else if (isForwarding) {\n      let forwardSenders = forwardedMessages?.map((m) => selectSenderFromForwardedMessage(m)).filter(Boolean);\n      forwardSenders = forwardSenders ? unique(forwardSenders) : undefined;\n      sender = forwardSenders?.length === 1 ? forwardSenders?.[0] : undefined;\n    } else if (replyInfo && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && (!forwardInfo?.hiddenUserName || Boolean(replyInfo.quoteText))) {\n        sender = selectSender(global, message);\n      }\n    }\n\n    const chat = sender && selectChat(global, sender.id);\n    const isSenderChannel = chat && isChatChannel(chat);\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    const isContextMenuDisabled = isForwarding && forwardMessageIds!.length === 1\n      && Boolean(message?.content.storyData);\n\n    const isReplyToDiscussion = replyInfo?.replyToMsgId === threadId && !replyInfo.replyToPeerId;\n\n    const isMediaNsfw = message && selectIsMediaNsfw(global, message);\n\n    return {\n      replyInfo,\n      suggestedPostInfo,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isContextMenuDisabled,\n      isReplyToDiscussion,\n      isInChangingRecipientMode: isModalShown,\n      shouldPreventComposerAnimation,\n      senderChat,\n      currentUserId: global.currentUserId,\n      isSenderChannel,\n      forwardMessageIds,\n      fromChatId,\n      isMediaNsfw,\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './DropArea';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default DropAreaAsync;\nexport { DropAreaState } from './DropArea';\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InlineBotTooltip';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default InlineBotTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MentionTooltip';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default MentionTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PollModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default PollModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SendAsMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default SendAsMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerTooltip';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ToDoListModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ToDoListModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ToDoListModal = useModuleLoader(Bundles.Extra, 'ToDoListModal', !modal);\n\n  return ToDoListModal ? <ToDoListModal {...props} /> : undefined;\n};\n\nexport default ToDoListModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O3di3ULC\",\"no-page-transitions\":\"UDdgVrUQ\",\"noPageTransitions\":\"UDdgVrUQ\",\"select-mode-active\":\"Y5TInySi\",\"selectModeActive\":\"Y5TInySi\",\"middle-column-footer\":\"XlGyc4tC\",\"middleColumnFooter\":\"XlGyc4tC\",\"no-message-composer-animations\":\"eDMArdYq\",\"noMessageComposerAnimations\":\"eDMArdYq\",\"ComposerEmbeddedMessage\":\"z4RvByc2\",\"composerEmbeddedMessage\":\"z4RvByc2\",\"inner\":\"m3DBx9f5\",\"contextMenu\":\"zqTOc7LU\",\"clear\":\"yhxytYkd\",\"left-icon\":\"vFWsMwfP\",\"leftIcon\":\"vFWsMwfP\",\"preview\":\"otSxF62k\",\"previewText\":\"itmZe2qi\",\"previewImageContainer\":\"VvwZOug9\",\"previewImage\":\"b0A9Zfoa\",\"siteName\":\"ER149gdz\",\"siteDescription\":\"FSYSqC60\",\"interactive\":\"G5_7x_Hn\"};","import { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiWebPage,\n  ApiWebPageFull,\n  ApiWebPagePending,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ThreadId, WebPageMediaSize } from '../../../types';\n\nimport {\n  getMediaHash,\n  getWebPageAudio,\n  getWebPageDocument,\n  getWebPagePhoto,\n  getWebPageVideo,\n} from '../../../global/helpers';\nimport { selectNoWebPage, selectTabState, selectWebPage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport styles from './WebPagePreview.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  isEditing: boolean;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPageFull | ApiWebPagePending;\n  noWebPage?: boolean;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst WebPagePreview = ({\n  chatId,\n  threadId,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  attachmentSettings,\n  isEditing,\n}: OwnProps & StateProps) => {\n  const {\n    toggleMessageWebPage,\n    updateAttachmentSettings,\n  } = getActions();\n\n  const lang = useLang();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const isInvertedMedia = attachmentSettings.isInvertedMedia;\n  const isSmallerMedia = attachmentSettings.webPageMediaSize === 'small';\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && !noWebPage && !isDisabled);\n  }, [isDisabled, noWebPage, webPagePreview]);\n  const { shouldRender } = useShowTransition({ isOpen: isShown, ref, withShouldRender: true });\n\n  const hasMediaSizeOptions = webPagePreview?.webpageType === 'full' && webPagePreview.hasLargeMedia;\n\n  const prevWebPageRef = useRef<ApiWebPage | undefined>(webPagePreview);\n\n  if (webPagePreview && webPagePreview !== prevWebPageRef.current) {\n    prevWebPageRef.current = webPagePreview;\n  }\n\n  const renderingWebPage = webPagePreview || prevWebPageRef.current;\n\n  const isFullWebPage = renderingWebPage?.webpageType === 'full';\n\n  const thumbnailUrl = useThumbnail(isFullWebPage ? { content: renderingWebPage } : undefined);\n  const previewMedia = getWebPagePhoto(renderingWebPage) || getWebPageVideo(renderingWebPage)\n    || getWebPageAudio(renderingWebPage) || getWebPageDocument(renderingWebPage);\n  const previewMediaHash = previewMedia && getMediaHash(previewMedia, 'pictogram');\n  const previewMediaUrl = useMedia(previewMediaHash);\n\n  const { shouldRender: shouldRenderPreviewMedia, ref: previewMediaRef } = useShowTransition<HTMLImageElement>({\n    isOpen: Boolean(previewMediaUrl),\n    withShouldRender: true,\n    noCloseTransition: true,\n  });\n\n  const hasPreviewMedia = Boolean(previewMediaUrl || shouldRenderPreviewMedia);\n\n  const handleClearWebpagePreview = useLastCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide, handleBeforeContextMenu,\n  } = useContextMenuHandlers(ref, isEditing, true);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(\n    () => ref.current!.querySelector(`.${styles.contextMenu} .bubble`),\n  );\n\n  const handlePreviewClick = useLastCallback((e: React.MouseEvent): void => {\n    handleContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (!shouldRender || !renderingWebPage) {\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, handleContextMenuHide, shouldRender, renderingWebPage]);\n\n  function updateIsInvertedMedia(value?: true) {\n    updateAttachmentSettings({ isInvertedMedia: value });\n  }\n\n  function updateIsLargerMedia(value?: WebPageMediaSize) {\n    updateAttachmentSettings({ webPageMediaSize: value });\n  }\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getMenuElement={getMenuElement}\n        className={styles.contextMenu}\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        autoClose\n      >\n        <>\n          {\n            isInvertedMedia ? (\n              <MenuItem icon=\"move-caption-up\" onClick={() => updateIsInvertedMedia(undefined)}>\n                {lang('ContextMoveTextUp')}\n              </MenuItem>\n            ) : (\n              <MenuItem icon=\"move-caption-down\" onClick={() => updateIsInvertedMedia(true)}>\n                {lang('ContextMoveTextDown')}\n              </MenuItem>\n            )\n          }\n          {hasMediaSizeOptions && (\n            isSmallerMedia ? (\n              <MenuItem icon=\"expand\" onClick={() => updateIsLargerMedia('large')}>\n                {lang('ContextLinkLargerMedia')}\n              </MenuItem>\n            ) : (\n              <MenuItem icon=\"collapse\" onClick={() => updateIsLargerMedia('small')}>\n                {lang('ContextLinkSmallerMedia')}\n              </MenuItem>\n            )\n          )}\n          <MenuItem\n            icon=\"delete\"\n            onClick={handleClearWebpagePreview}\n          >\n            {lang('ContextLinkRemovePreview')}\n          </MenuItem>\n        </>\n      </Menu>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        !isEditing && styles.interactive,\n      )}\n      ref={ref}\n    >\n      <div className={styles.inner}>\n        <div className={styles.leftIcon} onClick={handlePreviewClick}>\n          <Icon name=\"link\" />\n        </div>\n        {renderingWebPage && renderingWebPage.webpageType !== 'empty' && (\n          <PeerColorWrapper\n            noUserColors\n            className={styles.preview}\n            onContextMenu={handleContextMenu}\n            onMouseDown={handleBeforeContextMenu}\n            onClick={handlePreviewClick}\n          >\n            {hasPreviewMedia && (\n              <div className={styles.previewImageContainer}>\n                {thumbnailUrl && (\n                  <img src={thumbnailUrl} alt=\"\" className={styles.previewImage} />\n                )}\n                {shouldRenderPreviewMedia && (\n                  <img ref={previewMediaRef} src={previewMediaUrl} alt=\"\" className={styles.previewImage} />\n                )}\n              </div>\n            )}\n            <div className={styles.previewText}>\n              <span className={styles.siteName}>\n                {isFullWebPage\n                  ? (renderingWebPage.siteName || renderingWebPage.url)\n                  : lang('Loading')}\n              </span>\n              <span className={styles.siteDescription}>\n                {isFullWebPage\n                  ? (renderingWebPage.description || lang(getMediaTypeKey(renderingWebPage)))\n                  : renderingWebPage.url}\n              </span>\n            </div>\n          </PeerColorWrapper>\n        )}\n        <Button\n          className={styles.clear}\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('AccLinkRemovePreview')}\n          onClick={handleClearWebpagePreview}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        {!isEditing && renderContextMenu()}\n      </div>\n    </div>\n  );\n};\n\nfunction getMediaTypeKey(webPage: ApiWebPageFull) {\n  if (webPage.photo) return 'AttachPhoto';\n  if (webPage.video) return 'AttachVideo';\n  if (webPage.audio) return 'AttachMusic';\n  if (webPage.document) return 'AttachDocument';\n  if (webPage.story) return 'AttachStory';\n  return 'LinkPreview';\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    const {\n      attachmentSettings,\n    } = global;\n\n    const webPagePreview = tabState.webPagePreviewId ? selectWebPage(global, tabState.webPagePreviewId) : undefined;\n\n    return {\n      webPagePreview: webPagePreview?.webpageType === 'empty' ? undefined : webPagePreview,\n      noWebPage,\n      attachmentSettings,\n    };\n  },\n)(WebPagePreview));\n","import type { FC, TeactNode } from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useSignal, useState } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAttachment,\n  ApiAttachMenuPeerType,\n  ApiAvailableEffect,\n  ApiAvailableReaction,\n  ApiBotCommand,\n  ApiBotInlineMediaResult,\n  ApiBotInlineResult,\n  ApiBotMenuButton,\n  ApiChat,\n  ApiChatFullInfo,\n  ApiDisallowedGifts,\n  ApiDraft,\n  ApiFormattedText,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewMediaTodo,\n  ApiNewPoll,\n  ApiPeer,\n  ApiQuickReply,\n  ApiReaction,\n  ApiStealthMode,\n  ApiSticker,\n  ApiTopic,\n  ApiUser,\n  ApiVideo,\n  ApiWebPage,\n} from '../../api/types';\nimport type { GlobalState, TabState } from '../../global/types';\nimport type {\n  IAnchorPosition,\n  InlineBotSettings,\n  MessageList,\n  MessageListType,\n  ThemeKey,\n  ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  HEART_REACTION,\n  MAX_UPLOAD_FILEPART_SIZE,\n  ONE_TIME_MEDIA_TTL_SECONDS,\n  SCHEDULED_WHEN_ONLINE,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  STARS_CURRENCY_CODE,\n} from '../../config';\nimport { requestMeasure, requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  canEditMedia,\n  getAllowedAttachmentOptions,\n  getReactionKey,\n  getStoryKey,\n  isChatAdmin,\n  isChatChannel,\n  isChatPublic,\n  isChatSuperGroup,\n  isSameReaction,\n  isSystemBot,\n} from '../../global/helpers';\nimport { getChatNotifySettings } from '../../global/helpers/notifications';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectBot,\n  selectCanPlayAnimatedEmojis,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatType,\n  selectCurrentMessageList,\n  selectCustomEmoji,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingMessage,\n  selectEditingScheduledDraft,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsPremiumPurchaseBlocked,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectNoWebPage,\n  selectPeer,\n  selectPeerPaidMessagesStars,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectRequestedDraft,\n  selectRequestedDraftFiles,\n  selectTabState,\n  selectTheme,\n  selectTopicFromMessage,\n  selectUser,\n  selectUserFullInfo,\n  selectWebPage,\n} from '../../global/selectors';\nimport { selectCurrentLimit } from '../../global/selectors/limits';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_IOS, IS_VOICE_RECORDING_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../util/dates/dateFormat';\nimport { processDeepLink } from '../../util/deeplink';\nimport { tryParseDeepLink } from '../../util/deepLinkParser';\nimport deleteLastCharacterOutsideSelection from '../../util/deleteLastCharacterOutsideSelection';\nimport { processMessageInputForCustomEmoji } from '../../util/emoji/customEmojiManager';\nimport { isUserId } from '../../util/entities/ids';\nimport focusEditableElement from '../../util/focusEditableElement';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport parseHtmlAsFormattedText from '../../util/parseHtmlAsFormattedText';\nimport { insertHtmlInSelection } from '../../util/selection';\nimport { getServerTime } from '../../util/serverTime';\nimport windowSize from '../../util/windowSize';\nimport { DEFAULT_MAX_MESSAGE_LENGTH } from '../../limits';\nimport applyIosAutoCapitalizationFix from '../middle/composer/helpers/applyIosAutoCapitalizationFix';\nimport buildAttachment, { prepareAttachmentsToSend } from '../middle/composer/helpers/buildAttachment';\nimport { buildCustomEmojiHtml } from '../middle/composer/helpers/customEmoji';\nimport { isSelectionInsideInput } from '../middle/composer/helpers/selection';\nimport { getPeerColorClass } from './helpers/peerColor';\nimport renderText from './helpers/renderText';\nimport { getTextWithEntitiesAsHtml } from './helpers/renderTextWithEntities';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useGetSelectionRange from '../../hooks/useGetSelectionRange';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useSchedule from '../../hooks/useSchedule';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAttachmentModal from '../middle/composer/hooks/useAttachmentModal';\nimport useChatCommandTooltip from '../middle/composer/hooks/useChatCommandTooltip';\nimport useClipboardPaste from '../middle/composer/hooks/useClipboardPaste';\nimport useCustomEmojiTooltip from '../middle/composer/hooks/useCustomEmojiTooltip';\nimport useDraft from '../middle/composer/hooks/useDraft';\nimport useEditing from '../middle/composer/hooks/useEditing';\nimport useEmojiTooltip from '../middle/composer/hooks/useEmojiTooltip';\nimport useInlineBotTooltip from '../middle/composer/hooks/useInlineBotTooltip';\nimport useLoadLinkPreview from '../middle/composer/hooks/useLoadLinkPreview';\nimport useMentionTooltip from '../middle/composer/hooks/useMentionTooltip';\nimport usePaidMessageConfirmation from '../middle/composer/hooks/usePaidMessageConfirmation';\nimport useStickerTooltip from '../middle/composer/hooks/useStickerTooltip';\nimport useVoiceRecording from '../middle/composer/hooks/useVoiceRecording';\n\nimport AttachmentModal from '../middle/composer/AttachmentModal.async';\nimport AttachMenu from '../middle/composer/AttachMenu';\nimport BotCommandMenu from '../middle/composer/BotCommandMenu.async';\nimport BotKeyboardMenu from '../middle/composer/BotKeyboardMenu';\nimport BotMenuButton from '../middle/composer/BotMenuButton';\nimport ChatCommandTooltip from '../middle/composer/ChatCommandTooltip.async';\nimport ComposerEmbeddedMessage from '../middle/composer/ComposerEmbeddedMessage';\nimport CustomEmojiTooltip from '../middle/composer/CustomEmojiTooltip.async';\nimport CustomSendMenu from '../middle/composer/CustomSendMenu.async';\nimport DropArea, { DropAreaState } from '../middle/composer/DropArea.async';\nimport EmojiTooltip from '../middle/composer/EmojiTooltip.async';\nimport InlineBotTooltip from '../middle/composer/InlineBotTooltip.async';\nimport MentionTooltip from '../middle/composer/MentionTooltip.async';\nimport MessageInput from '../middle/composer/MessageInput';\nimport PollModal from '../middle/composer/PollModal.async';\nimport SendAsMenu from '../middle/composer/SendAsMenu.async';\nimport StickerTooltip from '../middle/composer/StickerTooltip.async';\nimport SymbolMenuButton from '../middle/composer/SymbolMenuButton';\nimport ToDoListModal from '../middle/composer/ToDoListModal.async';\nimport WebPagePreview from '../middle/composer/WebPagePreview';\nimport MessageEffect from '../middle/message/MessageEffect';\nimport ReactionSelector from '../middle/message/reactions/ReactionSelector';\nimport Button from '../ui/Button';\nimport ResponsiveHoverButton from '../ui/ResponsiveHoverButton';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport AnimatedCounter from './AnimatedCounter';\nimport Avatar from './Avatar';\nimport Icon from './icons/Icon';\nimport PaymentMessageConfirmDialog from './PaymentMessageConfirmDialog';\nimport ReactionAnimatedEmoji from './reactions/ReactionAnimatedEmoji';\n\nimport './Composer.scss';\n\ntype ComposerType = 'messageList' | 'story';\n\ntype OwnProps = {\n  type: ComposerType;\n  chatId: string;\n  threadId: ThreadId;\n  storyId?: number;\n  messageListType: MessageListType;\n  dropAreaState?: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  inputId: string;\n  editableInputCssSelector: string;\n  editableInputId: string;\n  className?: string;\n  inputPlaceholder?: TeactNode | string;\n  onDropHide?: NoneToVoidFunction;\n  onForward?: NoneToVoidFunction;\n  onFocus?: NoneToVoidFunction;\n  onBlur?: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    isOnActiveTab: boolean;\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    chatFullInfo?: ApiChatFullInfo;\n    draft?: ApiDraft;\n    replyToTopic?: ApiTopic;\n    currentMessageList?: MessageList;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isReactionPickerOpen?: boolean;\n    shouldDisplayGiftsButton?: boolean;\n    isForwarding?: boolean;\n    isReplying?: boolean;\n    hasSuggestedPost?: boolean;\n    forwardedMessagesCount?: number;\n    pollModal: TabState['pollModal'];\n    todoListModal: TabState['todoListModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    isInScheduledList?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    currentUserId?: string;\n    currentUser?: ApiUser;\n    recentEmojis: string[];\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    sendAsPeer?: ApiPeer;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraft?: ApiFormattedText;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ThemeKey;\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n    slowMode?: ApiChatFullInfo['slowMode'];\n    shouldUpdateStickerSetOrder?: boolean;\n    availableReactions?: ApiAvailableReaction[];\n    topReactions?: ApiReaction[];\n    canPlayAnimatedEmojis?: boolean;\n    canBuyPremium?: boolean;\n    shouldCollectDebugLogs?: boolean;\n    sentStoryReaction?: ApiReaction;\n    stealthMode?: ApiStealthMode;\n    canSendOneTimeMedia?: boolean;\n    quickReplyMessages?: Record<number, ApiMessage>;\n    quickReplies?: Record<number, ApiQuickReply>;\n    canSendQuickReplies?: boolean;\n    webPagePreview?: ApiWebPage;\n    noWebPage?: boolean;\n    isContactRequirePremium?: boolean;\n    paidMessagesStars?: number;\n    effect?: ApiAvailableEffect;\n    effectReactions?: ApiReaction[];\n    areEffectsSupported?: boolean;\n    canPlayEffect?: boolean;\n    shouldPlayEffect?: boolean;\n    maxMessageLength: number;\n    shouldPaidMessageAutoApprove?: boolean;\n    isSilentPosting?: boolean;\n    isPaymentMessageConfirmDialogOpen: boolean;\n    starsBalance: number;\n    isStarsBalanceModalOpen: boolean;\n    disallowedGifts?: ApiDisallowedGifts;\n    isAccountFrozen?: boolean;\n    isAppConfigLoaded?: boolean;\n    insertingPeerIdMention?: string;\n    pollMaxAnswers?: number;\n  };\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n  Forward = 'forward',\n  SendOneTime = 'sendOneTime',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst SENDING_ANIMATION_DURATION = 350;\nconst MOUNT_ANIMATION_DURATION = 430;\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  type,\n  isOnActiveTab,\n  dropAreaState,\n  isInScheduledList,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  editingMessage,\n  chatId,\n  threadId,\n  storyId,\n  currentMessageList,\n  messageListType,\n  draft,\n  chat,\n  chatFullInfo,\n  replyToTopic,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isReactionPickerOpen,\n  shouldDisplayGiftsButton,\n  isForwarding,\n  isReplying,\n  hasSuggestedPost,\n  forwardedMessagesCount,\n  pollModal,\n  todoListModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  inputPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  topInlineBotIds,\n  currentUserId,\n  currentUser,\n  captionLimit,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  sendAsPeer,\n  sendAsId,\n  editingDraft,\n  requestedDraft,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n  slowMode,\n  shouldUpdateStickerSetOrder,\n  editableInputCssSelector,\n  editableInputId,\n  inputId,\n  className,\n  availableReactions,\n  topReactions,\n  canBuyPremium,\n  canPlayAnimatedEmojis,\n  shouldCollectDebugLogs,\n  sentStoryReaction,\n  stealthMode,\n  canSendOneTimeMedia,\n  quickReplyMessages,\n  quickReplies,\n  canSendQuickReplies,\n  webPagePreview,\n  noWebPage,\n  isContactRequirePremium,\n  paidMessagesStars,\n  effect,\n  effectReactions,\n  areEffectsSupported,\n  canPlayEffect,\n  shouldPlayEffect,\n  maxMessageLength,\n  isSilentPosting,\n  isPaymentMessageConfirmDialogOpen,\n  starsBalance,\n  isStarsBalanceModalOpen,\n  disallowedGifts,\n  isAccountFrozen,\n  isAppConfigLoaded,\n  insertingPeerIdMention,\n  pollMaxAnswers,\n  onDropHide,\n  onFocus,\n  onBlur,\n  onForward,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    openPollModal,\n    closePollModal,\n    openTodoListModal,\n    closeTodoListModal,\n    loadScheduledHistory,\n    openThread,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n    openStoryReactionPicker,\n    openGiftModal,\n    closeReactionPicker,\n    sendStoryReaction,\n    editMessage,\n    updateAttachmentSettings,\n    saveEffectInDraft,\n    setReactionEffect,\n    hideEffectInComposer,\n    updateChatSilentPosting,\n    updateInsertingPeerIdMention,\n    updateDraftSuggestedPostInfo,\n    updateShouldSaveAttachmentsCompression,\n    applyDefaultAttachmentsCompression,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const inputRef = useRef<HTMLDivElement>();\n  const counterRef = useRef<HTMLSpanElement>();\n\n  const storyReactionRef = useRef<HTMLButtonElement>();\n\n  const [getHtml, setHtml] = useSignal('');\n  const [isMounted, setIsMounted] = useState(false);\n  const getSelectionRange = useGetSelectionRange(editableInputCssSelector);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePreviousDeprecated(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n\n  const isInMessageList = type === 'messageList';\n  const isInStoryViewer = type === 'story';\n  const sendAsPeerIds = isInMessageList ? chat?.sendAsPeerIds : undefined;\n  const canShowSendAs = Boolean(sendAsPeerIds?.length);\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n  const [isInputHasFocus, markInputHasFocus, unmarkInputHasFocus] = useFlag();\n  const [isAttachMenuOpen, onAttachMenuOpen, onAttachMenuClose] = useFlag();\n\n  const canMediaBeReplaced = editingMessage && canEditMedia(editingMessage);\n\n  const isMonoforum = chat?.isMonoforum;\n  const { emojiSet, members: groupChatMembers, botCommands: chatBotCommands } = chatFullInfo || {};\n  const chatEmojiSetId = emojiSet?.id;\n\n  const canSchedule = !paidMessagesStars && !isMonoforum;\n\n  const isSentStoryReactionHeart = sentStoryReaction && isSameReaction(sentStoryReaction, HEART_REACTION);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const [requestCalendar, calendar] = useSchedule(\n    isInMessageList && canScheduleUntilOnline,\n    cancelForceShowSymbolMenu,\n  );\n\n  useTimeout(() => {\n    setIsMounted(true);\n  }, MOUNT_ANIMATION_DURATION);\n\n  useEffect(() => {\n    if (isInMessageList) return;\n\n    closeReactionPicker();\n  }, [isInMessageList, storyId]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (isAppConfigLoaded && chatId && isReady && !isInStoryViewer && !isMonoforum) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, threadId, isInStoryViewer, isAppConfigLoaded, isMonoforum]);\n\n  useEffect(() => {\n    const isChannelWithProfiles = isChannel && chat?.areProfilesShown;\n    const isChatWithSendAs = chat && isChatSuperGroup(chat)\n      && Boolean(isChatPublic(chat) || chat.isLinkedInDiscussion || chat.hasGeo);\n    if (!sendAsPeerIds && isReady && (isChatWithSendAs || isChannelWithProfiles)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isChannel, isReady, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n  const [nextText, setNextText] = useState<ApiFormattedText | undefined>(undefined);\n\n  useEffect(() => {\n    if (!attachments.length || !attachments) {\n      updateShouldSaveAttachmentsCompression({ shouldSave: false });\n    }\n  }, [attachments]);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks, canAttachToDoLists,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(\n    () => getAllowedAttachmentOptions(\n      chat,\n      chatFullInfo,\n      isChatWithBot,\n      isChatWithSelf,\n      isInStoryViewer,\n      paidMessagesStars,\n      isInScheduledList,\n    ),\n    [chat, chatFullInfo, isChatWithBot, isChatWithSelf, isInStoryViewer, paidMessagesStars, isInScheduledList],\n  );\n\n  const isNeedPremium = isContactRequirePremium && isInStoryViewer;\n  const isSendTextBlocked = isNeedPremium || !canSendPlainText;\n\n  const messagesCount = useDerivedState(() => {\n    if (hasAttachments) return attachments.length;\n    const messagesInInput = (getHtml() || hasAttachments) ? 1 : 0;\n    if (!isForwarding || !forwardedMessagesCount) return messagesInInput || 1;\n    return forwardedMessagesCount + messagesInInput;\n  }, [getHtml, hasAttachments, attachments, isForwarding, forwardedMessagesCount]);\n  const starsForAllMessages = paidMessagesStars ? messagesCount * paidMessagesStars : 0;\n\n  const {\n    closeConfirmDialog: closeConfirmModalPayForMessage,\n    dialogHandler: paymentMessageConfirmDialogHandler,\n    shouldAutoApprove: shouldPaidMessageAutoApprove,\n    setAutoApprove: setShouldPaidMessageAutoApprove,\n    handleWithConfirmation: handleActionWithPaymentConfirmation,\n  } = usePaidMessageConfirmation(starsForAllMessages, isStarsBalanceModalOpen, starsBalance);\n\n  const hasWebPagePreview = !hasAttachments && canAttachEmbedLinks && !noWebPage && Boolean(webPagePreview);\n  const isComposerBlocked = isSendTextBlocked && !editingMessage;\n\n  useEffect(() => {\n    if (!hasWebPagePreview) {\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [hasWebPagePreview]);\n\n  const insertHtmlAndUpdateCursor = useLastCallback((\n    newHtml: string, inInputId: string = editableInputId, shouldPrepend = false,\n  ) => {\n    if (inInputId === editableInputId && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inInputId === editableInputId) {\n      messageInput = document.querySelector<HTMLDivElement>(editableInputCssSelector)!;\n    } else {\n      messageInput = document.getElementById(inInputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount && !shouldPrepend) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inInputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    if (shouldPrepend) {\n      const newFirstWord = newHtml.split(' ')[0];\n      const shouldReplace = getHtml().startsWith(newFirstWord);\n\n      setHtml(shouldReplace ? newHtml : `${newHtml}${getHtml()}`);\n    } else {\n      setHtml(`${getHtml()}${newHtml}`);\n    }\n\n    // If selection is outside of input, set cursor at the end of input\n    requestNextMutation(() => {\n      focusEditableElement(messageInput);\n    });\n  });\n\n  const insertTextAndUpdateCursor = useLastCallback((\n    text: string, inInputId: string = editableInputId,\n  ) => {\n    const newHtml = (renderText(text, ['escape_html', 'emoji_html', 'br_html']) as string[])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inInputId);\n  });\n\n  const insertFormattedTextAndUpdateCursor = useLastCallback((\n    text: ApiFormattedText, inInputId: string = editableInputId, shouldPrepend = false,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inInputId, shouldPrepend);\n  });\n\n  const insertCustomEmojiAndUpdateCursor = useLastCallback((emoji: ApiSticker, inInputId: string = editableInputId) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inInputId);\n  });\n\n  const insertNextText = useLastCallback(() => {\n    if (!nextText) return;\n    insertFormattedTextAndUpdateCursor(nextText, editableInputId);\n    setNextText(undefined);\n  });\n\n  const {\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n    insertNextText,\n    editedMessage: editingMessage,\n    shouldSendInHighQuality: attachmentSettings.shouldSendInHighQuality,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n    isViewOnceEnabled,\n    setIsViewOnceEnabled,\n    toogleViewOnceEnabled,\n  } = useVoiceRecording();\n\n  const shouldSendRecordingStatus = isForCurrentMessageList && !isInStoryViewer;\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, shouldSendRecordingStatus ? activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL : undefined);\n\n  useEffect(() => {\n    if (!isForCurrentMessageList || isInStoryViewer) return;\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, isForCurrentMessageList, isInStoryViewer, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (!isForCurrentMessageList || isInStoryViewer) return;\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, isForCurrentMessageList, isInStoryViewer, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && (isInStoryViewer || isForCurrentMessageList)\n      && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && (isInStoryViewer || isForCurrentMessageList)\n      && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady\n      && isOnActiveTab\n      && (isInStoryViewer || isForCurrentMessageList)\n      && shouldSuggestStickers\n      && canSendStickers\n      && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isInMessageList && isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  useEffect(() => {\n    if (!insertingPeerIdMention) return;\n    const peer = selectPeer(getGlobal(), insertingPeerIdMention);\n    if (peer) {\n      insertMention(peer, true, true);\n    }\n    updateInsertingPeerIdMention({ peerId: undefined });\n  }, [insertingPeerIdMention, insertMention]);\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    switchWebview: inlineBotSwitchWebview,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isInMessageList && isReady && isForCurrentMessageList && !hasAttachments),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const hasQuickReplies = Boolean(quickReplies && Object.keys(quickReplies).length);\n\n  const {\n    isOpen: isChatCommandTooltipOpen,\n    close: closeChatCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n    filteredQuickReplies: quickReplyCommands,\n  } = useChatCommandTooltip(\n    Boolean(isInMessageList\n      && isReady\n      && isForCurrentMessageList\n      && ((botCommands && botCommands?.length) || chatBotCommands?.length || (hasQuickReplies && canSendQuickReplies))),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n    canSendQuickReplies ? quickReplies : undefined,\n  );\n\n  useDraft({\n    draft,\n    chatId,\n    threadId,\n    getHtml,\n    setHtml,\n    editedMessage: editingMessage,\n    isDisabled: isInStoryViewer || Boolean(requestedDraft) || (!hasSuggestedPost && isMonoforum),\n  });\n\n  useLoadLinkPreview({\n    chatId,\n    threadId,\n    getHtml,\n  });\n\n  const resetComposer = useLastCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n    setNextText(undefined);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  });\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    return Object.values(disallowedGifts).every(Boolean);\n  }, [disallowedGifts]);\n\n  const shouldShowGiftButton = Boolean(!isChatWithSelf && shouldDisplayGiftsButton && !areAllGiftsDisallowed);\n  const shouldShowSuggestedPostButton = isMonoforum && !editingMessage\n    && !isForwarding && !isReplying && !draft?.suggestedPostInfo;\n\n  const showCustomEmojiPremiumNotification = useLastCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: oldLang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: oldLang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: oldLang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: oldLang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  });\n\n  const mainButtonState = useDerivedState(() => {\n    if (!isInputHasFocus && onForward && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Forward;\n    }\n\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (isInScheduledList) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, editingMessage, getHtml, hasAttachments, isForwarding, isInputHasFocus, onForward,\n    shouldForceShowEditing, isInScheduledList,\n  ]);\n  const canShowCustomSendMenu = !isInScheduledList;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    contextMenuAnchor: storyReactionPickerAnchor,\n    handleContextMenu: handleStoryPickerContextMenu,\n    handleBeforeContextMenu: handleBeforeStoryPickerContextMenu,\n    handleContextMenuHide: handleStoryPickerContextMenuHide,\n  } = useContextMenuHandlers(storyReactionRef, !isInStoryViewer);\n\n  useEffect(() => {\n    if (isReactionPickerOpen) return;\n\n    if (storyReactionPickerAnchor) {\n      openStoryReactionPicker({\n        peerId: chatId,\n        storyId: storyId!,\n        position: storyReactionPickerAnchor,\n      });\n      handleStoryPickerContextMenuHide();\n    }\n  }, [chatId, handleStoryPickerContextMenuHide, isReactionPickerOpen, storyId, storyReactionPickerAnchor]);\n\n  useClipboardPaste(\n    isForCurrentMessageList || isInStoryViewer,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    setNextText,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useLastCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  });\n\n  const validateTextLength = useLastCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : maxMessageLength;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  });\n\n  const checkSlowMode = useLastCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(editableInputCssSelector);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: oldLang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  });\n\n  const canSendAttachments = (attachmentsToSend: ApiAttachment[]): boolean => {\n    if (!currentMessageList && !storyId) {\n      return false;\n    }\n\n    const { text } = parseHtmlAsFormattedText(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return false;\n    }\n    if (!validateTextLength(text, true)) return false;\n    if (!checkSlowMode()) return false;\n\n    return true;\n  };\n\n  const sendAttachments = useLastCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n    isInvertedMedia,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n    isInvertedMedia?: true;\n  }) => {\n    if (!currentMessageList && !storyId) {\n      return;\n    }\n    isSilent = isSilent || isSilentPosting;\n\n    const { text, entities } = parseHtmlAsFormattedText(getHtml());\n\n    isInvertedMedia = text && sendCompressed && sendGrouped ? isInvertedMedia : undefined;\n\n    if (editingMessage) {\n      editMessage({\n        messageList: currentMessageList,\n        text,\n        entities,\n        attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetOrder,\n        attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n        shouldGroupMessages: sendGrouped,\n        isInvertedMedia,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, threadId, isLocalOnly: true });\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleSendAttachmentsFromModal = useLastCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isInvertedMedia?: true,\n  ) => {\n    if (canSendAttachments(attachments)) {\n      if (editingMessage) {\n        sendAttachments({\n          attachments,\n          sendCompressed,\n          sendGrouped,\n          isInvertedMedia,\n        });\n        return;\n      }\n\n      handleActionWithPaymentConfirmation(sendAttachments, {\n        attachments,\n        sendCompressed,\n        sendGrouped,\n        isInvertedMedia,\n      });\n    }\n  });\n\n  const handleSendAttachments = useLastCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n    isInvertedMedia?: true,\n  ) => {\n    if (canSendAttachments(attachments)) {\n      sendAttachments({\n        attachments,\n        sendCompressed,\n        sendGrouped,\n        isSilent,\n        scheduledAt,\n        isInvertedMedia,\n      });\n    }\n  });\n\n  const handleSendCore = useLastCallback(\n    (currentAttachments: ApiAttachment[], isSilent = false, scheduledAt?: number) => {\n      const { text, entities } = parseHtmlAsFormattedText(getHtml());\n\n      if (currentAttachments.length) {\n        if (canSendAttachments(currentAttachments)) {\n          sendAttachments({\n            attachments: currentAttachments,\n            scheduledAt,\n            isSilent,\n          });\n        }\n        return;\n      }\n\n      if (!text && !isForwarding) {\n        return;\n      }\n\n      if (!validateTextLength(text)) return;\n\n      const messageInput = document.querySelector<HTMLDivElement>(editableInputCssSelector);\n\n      const effectId = effect?.id;\n\n      if (text || isForwarding) {\n        if (!checkSlowMode()) return;\n\n        const isInvertedMedia = hasWebPagePreview ? attachmentSettings.isInvertedMedia : undefined;\n\n        if (areEffectsSupported) saveEffectInDraft({ chatId, threadId, effectId: undefined });\n\n        sendMessage({\n          messageList: currentMessageList,\n          text,\n          entities,\n          scheduledAt,\n          isSilent,\n          shouldUpdateStickerSetOrder,\n          isInvertedMedia,\n          effectId,\n          webPageMediaSize: attachmentSettings.webPageMediaSize,\n          webPageUrl: hasWebPagePreview ? webPagePreview.url : undefined,\n          isForwarding,\n        });\n      }\n\n      lastMessageSendTimeSeconds.current = getServerTime();\n      clearDraft({\n        chatId, threadId, isLocalOnly: true, shouldKeepReply: isForwarding,\n      });\n\n      if (IS_IOS && messageInput && messageInput === document.activeElement) {\n        applyIosAutoCapitalizationFix(messageInput);\n      }\n\n      // Wait until message animation starts\n      requestMeasure(() => {\n        resetComposer();\n      });\n    },\n  );\n\n  const handleSend = useLastCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (!currentMessageList && !storyId) {\n      return;\n    }\n\n    isSilent = isSilent || isSilentPosting;\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      const ttlSeconds = isViewOnceEnabled ? ONE_TIME_MEDIA_TTL_SECONDS : undefined;\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform }, ttlSeconds },\n        )];\n      }\n    }\n\n    handleSendCore(currentAttachments, isSilent, scheduledAt);\n  });\n\n  const handleSendWithConfirmation = useLastCallback((isSilent = false, scheduledAt?: number) => {\n    handleActionWithPaymentConfirmation(handleSend, isSilent, scheduledAt);\n  });\n\n  const handleTodoListCreate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('SubscribeToTelegramPremiumForCreateToDo'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'todo' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n      return;\n    }\n\n    openTodoListModal({ chatId });\n  });\n\n  const handleClickBotMenu = useLastCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    const parsedLink = tryParseDeepLink(botMenuButton.url);\n\n    if (parsedLink?.type === 'publicUsernameOrBotLink' && parsedLink.appName) {\n      processDeepLink(botMenuButton.url);\n    } else {\n      callAttachBot({\n        chatId, url: botMenuButton.url, threadId,\n      });\n    }\n  });\n\n  const handleActivateBotCommandMenu = useLastCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  });\n\n  const handleMessageSchedule = useLastCallback((\n    args: ScheduledMessageArgs, scheduledAt: number, messageList: MessageList, effectId?: string,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        chatId,\n        threadId,\n        queryId,\n        scheduledAt,\n        isSilent: isSilent || isSilentPosting,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false, isInvertedMedia } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt, isInvertedMedia);\n    } else {\n      sendMessage({\n        ...args,\n        messageList,\n        scheduledAt,\n        effectId,\n      });\n    }\n  });\n\n  useEffectWithPrevDeps(([prevContentToBeScheduled]) => {\n    if (currentMessageList && contentToBeScheduled && contentToBeScheduled !== prevContentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt, currentMessageList);\n      });\n    }\n  }, [contentToBeScheduled, currentMessageList, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraft) {\n      insertFormattedTextAndUpdateCursor(requestedDraft, undefined, true);\n      resetOpenChatWithDraft();\n\n      requestNextMutation(() => {\n        const messageInput = document.getElementById(editableInputId)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [editableInputId, requestedDraft, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      void handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      updateShouldSaveAttachmentsCompression({ shouldSave: true });\n      applyDefaultAttachmentsCompression();\n    } else {\n      updateShouldSaveAttachmentsCompression({ shouldSave: false });\n    }\n  }, [requestedDraftFiles, updateShouldSaveAttachmentsCompression, applyDefaultAttachmentsCompression]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker, inInputId?: string) => {\n    const emojiSetId = 'id' in emoji.stickerSetInfo && emoji.stickerSetInfo.id;\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf && emojiSetId !== chatEmojiSetId) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inInputId);\n  });\n\n  const handleCustomEmojiSelectAttachmentModal = useLastCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const handleGifSelect = useLastCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList && !storyId) {\n      return;\n    }\n\n    isSilent = isSilent || isSilentPosting;\n\n    if (isInScheduledList || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleActionWithPaymentConfirmation(handleMessageSchedule, { gif, isSilent }, scheduledAt, currentMessageList!);\n        requestMeasure(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      handleActionWithPaymentConfirmation(sendMessage, { messageList: currentMessageList, gif, isSilent });\n      requestMeasure(() => {\n        resetComposer(true);\n      });\n    }\n\n    clearDraft({ chatId, threadId, isLocalOnly: true });\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    if (!currentMessageList && !storyId) {\n      return;\n    }\n\n    isSilent = isSilent || isSilentPosting;\n\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (isInScheduledList || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleActionWithPaymentConfirmation(\n          handleMessageSchedule, { sticker, isSilent }, scheduledAt, currentMessageList!,\n        );\n        requestMeasure(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      handleActionWithPaymentConfirmation(\n        sendMessage,\n        {\n          messageList: currentMessageList,\n          sticker,\n          isSilent,\n          shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && canUpdateStickerSetsOrder,\n        },\n      );\n      clearDraft({ chatId, threadId, isLocalOnly: true });\n\n      requestMeasure(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  });\n\n  const handleInlineBotSelect = useLastCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (!currentMessageList && !storyId) {\n      return;\n    }\n\n    isSilent = isSilent || isSilentPosting;\n\n    if (isInScheduledList || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleActionWithPaymentConfirmation(\n          handleMessageSchedule,\n          {\n            id: inlineResult.id,\n            queryId: inlineResult.queryId,\n            isSilent,\n          },\n          scheduledAt,\n          currentMessageList!,\n        );\n      });\n    } else {\n      handleActionWithPaymentConfirmation(\n        sendInlineBotResult,\n        {\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          threadId,\n          chatId,\n          isSilent,\n        },\n      );\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(editableInputCssSelector);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, threadId, isLocalOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleBotCommandSelect = useLastCallback(() => {\n    clearDraft({ chatId, threadId, isLocalOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handlePollSend = useLastCallback((poll: ApiNewPoll) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (isInScheduledList) {\n      requestCalendar((scheduledAt) => {\n        handleActionWithPaymentConfirmation(\n          handleMessageSchedule,\n          { poll },\n          scheduledAt,\n          currentMessageList,\n        );\n      });\n      closePollModal();\n    } else {\n      handleActionWithPaymentConfirmation(\n        sendMessage,\n        { messageList: currentMessageList, poll, isSilent: isSilentPosting },\n      );\n      closePollModal();\n    }\n  });\n\n  const handleToDoListSend = useLastCallback((todo: ApiNewMediaTodo) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (isInScheduledList) {\n      requestCalendar((scheduledAt) => {\n        handleActionWithPaymentConfirmation(\n          handleMessageSchedule,\n          { todo },\n          scheduledAt,\n          currentMessageList,\n        );\n      });\n    } else {\n      handleActionWithPaymentConfirmation(\n        sendMessage,\n        { messageList: currentMessageList, todo, isSilent: isSilentPosting },\n      );\n    }\n  });\n\n  const sendSilent = useLastCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (isInScheduledList) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt, currentMessageList!);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false, isInvertedMedia } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true, undefined, isInvertedMedia);\n    } else {\n      void handleSend(true);\n    }\n  });\n\n  const handleSendAsMenuOpen = useLastCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(editableInputCssSelector);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  });\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useLastCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const removeSymbol = useLastCallback((inInputId = editableInputId) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inInputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  });\n\n  const removeSymbolAttachmentModal = useLastCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const handleAllScheduledClick = useLastCallback(() => {\n    openThread({\n      chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  });\n\n  const handleGiftClick = useLastCallback(() => {\n    openGiftModal({ forUserId: chatId });\n  });\n  const handleSuggestPostClick = useLastCallback(() => {\n    updateDraftSuggestedPostInfo({\n      price: { currency: STARS_CURRENCY_CODE, amount: 0, nanos: 0 },\n    });\n  });\n\n  const handleToggleSilentPosting = useLastCallback(() => {\n    const newValue = !isSilentPosting;\n    updateChatSilentPosting({ chatId, isEnabled: newValue });\n\n    showNotification({\n      localId: 'silentPosting',\n      icon: newValue ? 'mute' : 'unmute',\n      message: lang(`ComposerSilentPosting${newValue ? 'Enabled' : 'Disabled'}Tootlip`),\n    });\n  });\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const hasText = useDerivedState(() => Boolean(getHtml()), [getHtml]);\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage\n    && messageListType === 'thread';\n  const isBotMenuButtonOpen = withBotMenuButton && !hasText && !activeVoiceRecording;\n\n  const [timedPlaceholderLangKey, timedPlaceholderDate] = useMemo(() => {\n    if (slowMode?.nextSendDate) {\n      return ['SlowModeWait', slowMode.nextSendDate];\n    }\n\n    if (stealthMode?.activeUntil && isInStoryViewer) {\n      return ['StealthModeActiveHint', stealthMode.activeUntil];\n    }\n\n    return [];\n  }, [isInStoryViewer, slowMode?.nextSendDate, stealthMode?.activeUntil]);\n\n  const isComposerHasFocus = isBotKeyboardOpen || isSymbolMenuOpen || isEmojiTooltipOpen || isSendAsMenuOpen\n    || isMentionTooltipOpen || isInlineBotTooltipOpen || isBotCommandMenuOpen || isAttachMenuOpen\n    || isStickerTooltipOpen || isChatCommandTooltipOpen || isCustomEmojiTooltipOpen || isBotMenuButtonOpen\n    || isCustomSendMenuOpen || Boolean(activeVoiceRecording) || attachments.length > 0 || isInputHasFocus;\n  const isReactionSelectorOpen = isComposerHasFocus && !isReactionPickerOpen && isInStoryViewer && !isAttachMenuOpen\n    && !isSymbolMenuOpen;\n\n  const placeholder = useMemo(() => {\n    if (activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER) {\n      return '';\n    }\n\n    if (!isComposerBlocked) {\n      if (botKeyboardPlaceholder) return botKeyboardPlaceholder;\n      if (inputPlaceholder) return inputPlaceholder;\n      if (paidMessagesStars) {\n        return lang('ComposerPlaceholderPaidMessage', {\n          amount: formatStarsAsIcon(lang, paidMessagesStars, { asFont: true, className: 'placeholder-star-icon' }),\n        }, {\n          withNodes: true,\n        });\n      }\n\n      if (isReplying && hasSuggestedPost) {\n        return lang('ComposerPlaceholderCaption');\n      }\n\n      if (chat?.adminRights?.anonymous) {\n        return lang('ComposerPlaceholderAnonymous');\n      }\n\n      if (chat?.isForum && chat?.isForumAsMessages && threadId === MAIN_THREAD_ID) {\n        return replyToTopic\n          ? lang('ComposerPlaceholderTopic', { topic: replyToTopic.title })\n          : lang('ComposerPlaceholderTopicGeneral');\n      }\n      if (isChannel) {\n        return lang(isSilentPosting ? 'ComposerPlaceholderBroadcastSilent' : 'ComposerPlaceholderBroadcast');\n      }\n      return lang('ComposerPlaceholder');\n    }\n\n    if (isInStoryViewer) return lang('ComposerStoryPlaceholderLocked');\n\n    return lang('ComposerPlaceholderNoText');\n  }, [\n    activeVoiceRecording, botKeyboardPlaceholder, chat, inputPlaceholder, isChannel, isComposerBlocked,\n    isInStoryViewer, isSilentPosting, lang, replyToTopic, isReplying, threadId, windowWidth, paidMessagesStars,\n    hasSuggestedPost,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus) {\n      onFocus?.();\n    } else {\n      onBlur?.();\n    }\n  }, [isComposerHasFocus, onBlur, onFocus]);\n\n  const {\n    shouldRender: shouldRenderReactionSelector,\n    transitionClassNames: reactionSelectorTransitonClassNames,\n  } = useShowTransitionDeprecated(isReactionSelectorOpen);\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useLastCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Forward:\n        onForward?.();\n        break;\n      case MainButtonState.Send:\n        handleSendWithConfirmation();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: oldLang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId, messageListType });\n          }\n        } else {\n          setIsViewOnceEnabled(false);\n          void startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        if (!currentMessageList) {\n          return;\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt, currentMessageList, effect?.id);\n        });\n        break;\n      default:\n        break;\n    }\n  });\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Forward:\n      sendButtonAriaLabel = 'Forward';\n      break;\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const fullClassName = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n    isMounted && 'mounted',\n    className,\n  );\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if (reaction.type === 'emoji') {\n      text = reaction.emoticon;\n    }\n\n    if (reaction.type === 'custom') {\n      const sticker = selectCustomEmoji(getGlobal(), reaction.documentId);\n      if (!sticker) {\n        return;\n      }\n\n      if (!sticker.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n        showCustomEmojiPremiumNotification();\n        return;\n      }\n      const customEmojiMessage = parseHtmlAsFormattedText(buildCustomEmojiHtml(sticker));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    handleActionWithPaymentConfirmation(sendMessage, { text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const handleToggleEffectReaction = useLastCallback((reaction: ApiReaction) => {\n    setReactionEffect({ chatId, threadId, reaction });\n\n    closeReactionPicker();\n  });\n\n  const handleReactionPickerOpen = useLastCallback((position: IAnchorPosition) => {\n    openStoryReactionPicker({\n      peerId: chatId,\n      storyId: storyId!,\n      position,\n      sendAsMessage: true,\n    });\n  });\n\n  const handleLikeStory = useLastCallback(() => {\n    const reaction = sentStoryReaction ? undefined : HEART_REACTION;\n    sendStoryReaction({\n      peerId: chatId,\n      storyId: storyId!,\n      containerId: getStoryKey(chatId, storyId!),\n      reaction,\n    });\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt, currentMessageList!);\n    });\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    handleActionWithPaymentConfirmation(sendSilent);\n  });\n\n  const handleSendWhenOnline = useLastCallback(() => {\n    handleActionWithPaymentConfirmation(\n      handleMessageSchedule, {}, SCHEDULED_WHEN_ONLINE, currentMessageList!, effect?.id,\n    );\n  });\n\n  const handleSendScheduledAttachments = useLastCallback(\n    (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => {\n      requestCalendar((scheduledAt) => {\n        handleActionWithPaymentConfirmation(\n          handleMessageSchedule,\n          { sendCompressed, sendGrouped, isInvertedMedia },\n          scheduledAt,\n          currentMessageList!,\n        );\n      });\n    },\n  );\n\n  const handleSendSilentAttachments = useLastCallback(\n    (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => {\n      handleActionWithPaymentConfirmation(sendSilent, { sendCompressed, sendGrouped, isInvertedMedia });\n    },\n  );\n\n  const handleRemoveEffect = useLastCallback(() => {\n    saveEffectInDraft({ chatId, threadId, effectId: undefined });\n  });\n\n  const handleStopEffect = useLastCallback(() => {\n    hideEffectInComposer({});\n  });\n\n  const onSend = useMemo(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Edit:\n        return handleEditComplete;\n      case MainButtonState.Schedule:\n        return handleSendScheduled;\n      default:\n        return handleSendWithConfirmation;\n    }\n  }, [mainButtonState, handleEditComplete, handleSendWithConfirmation]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n\n  const effectEmoji = areEffectsSupported && effect?.emoticon;\n\n  const shouldRenderPaidBadge = Boolean(paidMessagesStars && mainButtonState === MainButtonState.Send);\n  const prevShouldRenderPaidBadge = usePrevious(shouldRenderPaidBadge);\n\n  return (\n    <div className={fullClassName}>\n      {isInMessageList && canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide!}\n          onFileSelect={handleFileSelect}\n          editingMessage={editingMessage}\n        />\n      )}\n      {shouldRenderReactionSelector && !isNeedPremium && (\n        <ReactionSelector\n          topReactions={topReactions}\n          allAvailableReactions={availableReactions}\n          onToggleReaction={handleToggleReaction}\n          isPrivate\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isChatWithSelf}\n          isInStoryViewer={isInStoryViewer}\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleReactionPickerOpen}\n          className={reactionSelectorTransitonClassNames}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        isForMessage={isInMessageList}\n        shouldSchedule={canSchedule && isInScheduledList}\n        canSchedule={canSchedule}\n        forceDarkTheme={isInStoryViewer}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachmentsFromModal}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n        editingMessage={editingMessage}\n        onSendWhenOnline={handleSendWhenOnline}\n        canScheduleUntilOnline={canScheduleUntilOnline && !isViewOnceEnabled}\n        paidMessagesStars={paidMessagesStars}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        maxOptionsCount={pollMaxAnswers}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      <ToDoListModal\n        modal={todoListModal}\n        onClear={closeTodoListModal}\n        onSend={handleToDoListSend}\n      />\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <ChatCommandTooltip\n        isOpen={isChatCommandTooltipOpen}\n        chatId={chatId}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        quickReplies={quickReplyCommands}\n        getHtml={getHtml}\n        self={currentUser!}\n        quickReplyMessages={quickReplyMessages}\n        onClick={handleBotCommandSelect}\n        onClose={closeChatCommandTooltip}\n      />\n      <div className={\n        buildClassName('composer-wrapper', isInStoryViewer && 'with-story-tweaks', isNeedPremium && 'is-need-premium')\n      }\n      >\n        {!isNeedPremium && (\n          <svg className=\"svg-appendix\" width=\"9\" height=\"20\">\n            <defs>\n              <filter\n                x=\"-50%\"\n                y=\"-14.7%\"\n                width=\"200%\"\n                height=\"141.2%\"\n                filterUnits=\"objectBoundingBox\"\n                id=\"composerAppendix\"\n              >\n                <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n                <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n                <feColorMatrix\n                  values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n                  in=\"shadowBlurOuter1\"\n                />\n              </filter>\n            </defs>\n            <g fill=\"none\" fill-rule=\"evenodd\">\n              <path\n                d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\"\n                fill=\"#000\"\n                filter=\"url(#composerAppendix)\"\n              />\n              <path\n                d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\"\n                fill=\"#FFF\"\n                className=\"corner\"\n              />\n            </g>\n          </svg>\n        )}\n        {isInMessageList && (\n          <>\n            <InlineBotTooltip\n              isOpen={isInlineBotTooltipOpen}\n              botId={inlineBotId}\n              isGallery={isInlineBotTooltipGallery}\n              inlineBotResults={inlineBotResults}\n              switchPm={inlineBotSwitchPm}\n              switchWebview={inlineBotSwitchWebview}\n              loadMore={loadMoreForInlineBot}\n              isSavedMessages={isChatWithSelf}\n              canSendGifs={canSendGifs}\n              isCurrentUserPremium={isCurrentUserPremium}\n              onSelectResult={handleInlineBotSelect}\n              onClose={closeInlineBotTooltip}\n            />\n            <ComposerEmbeddedMessage\n              onClear={handleEmbeddedClear}\n              shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n              chatId={chatId}\n              threadId={threadId}\n              messageListType={messageListType}\n            />\n            <WebPagePreview\n              chatId={chatId}\n              threadId={threadId}\n              isDisabled={!canAttachEmbedLinks || hasAttachments || !hasText}\n              isEditing={Boolean(editingMessage)}\n            />\n          </>\n        )}\n        <div className={buildClassName('message-input-wrapper', getPeerColorClass(currentUser))}>\n          {isInMessageList && (\n            <>\n              {withBotMenuButton && (\n                <BotMenuButton\n                  isOpen={isBotMenuButtonOpen}\n                  text={botMenuButton.text}\n                  isDisabled={Boolean(activeVoiceRecording)}\n                  onClick={handleClickBotMenu}\n                />\n              )}\n              {withBotCommands && (\n                <ResponsiveHoverButton\n                  className={buildClassName(\n                    'bot-commands', 'composer-action-button',\n                  )}\n                  round\n                  disabled={botCommands === undefined}\n                  color=\"translucent\"\n                  onActivate={handleActivateBotCommandMenu}\n                  ariaLabel=\"Open bot command keyboard\"\n                >\n                  <Icon name=\"bot-commands-filled\" />\n                </ResponsiveHoverButton>\n              )}\n              {canShowSendAs && sendAsPeer && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n                  ariaLabel={oldLang('SendMessageAsTitle')}\n                  className={buildClassName(\n                    'send-as-button',\n                    'composer-action-button',\n                    shouldAnimateSendAsButtonRef.current && 'appear-animation',\n                  )}\n                >\n                  <Avatar\n                    peer={sendAsPeer}\n                    size=\"tiny\"\n                  />\n                </Button>\n              )}\n            </>\n          )}\n          {((!isComposerBlocked || canSendGifs || canSendStickers) && !isNeedPremium && !isAccountFrozen) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              isMessageComposer={isInMessageList}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n              inputCssSelector={editableInputCssSelector}\n              idPrefix={type}\n              forceDarkTheme={isInStoryViewer}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id={inputId}\n            editableInputId={editableInputId}\n            customEmojiPrefix={type}\n            isStoryInput={isInStoryViewer}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isReady={isReady}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={placeholder}\n            timedPlaceholderDate={timedPlaceholderDate}\n            timedPlaceholderLangKey={timedPlaceholderLangKey}\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments && isInMessageList}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n            onFocus={markInputHasFocus}\n            onBlur={unmarkInputHasFocus}\n            isNeedPremium={isNeedPremium}\n            messageListType={messageListType}\n          />\n          {isInMessageList && (\n            <>\n              {isInlineBotLoading && Boolean(inlineBotId) && (\n                <Spinner color=\"gray\" />\n              )}\n              <Transition\n                className=\"composer-action-buttons-container\"\n                slideClassName=\"composer-action-buttons\"\n                activeKey={Number(hasText)}\n                direction=\"inverse\"\n                name=\"slideFadeAndroid\"\n              >\n                {!hasText && (\n                  <>\n                    {isChannel && (\n                      <Transition className=\"composer-action-button\" name=\"reveal\" activeKey={Number(isSilentPosting)}>\n                        <Button\n                          round\n                          faded\n                          className=\"composer-action-button\"\n                          color=\"translucent\"\n                          onClick={handleToggleSilentPosting}\n                          ariaLabel={lang(\n                            isSilentPosting ? 'AriaComposerSilentPostingDisable' : 'AriaComposerSilentPostingEnable',\n                          )}\n                        >\n                          <Icon name={isSilentPosting ? 'mute' : 'unmute'} />\n                        </Button>\n                      </Transition>\n                    )}\n                    {withScheduledButton && (\n                      <Button\n                        round\n                        faded\n                        className=\"composer-action-button scheduled-button\"\n                        color=\"translucent\"\n                        onClick={handleAllScheduledClick}\n                        ariaLabel={lang('AriaComposerOpenScheduled')}\n                      >\n                        <Icon name=\"scheduled\" />\n                      </Button>\n                    )}\n                    {shouldShowGiftButton && (\n                      <Button\n                        round\n                        faded\n                        className=\"composer-action-button\"\n                        color=\"translucent\"\n                        onClick={handleGiftClick}\n                      >\n                        <Icon name=\"gift\" />\n                      </Button>\n                    )}\n                    {shouldShowSuggestedPostButton && (\n                      <Button\n                        round\n                        faded\n                        className=\"composer-action-button\"\n                        color=\"translucent\"\n                        onClick={handleSuggestPostClick}\n                      >\n                        <Icon name=\"cash-circle\" />\n                      </Button>\n                    )}\n                    {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n                      <ResponsiveHoverButton\n                        className={buildClassName('composer-action-button', isBotKeyboardOpen && 'activated')}\n                        round\n                        color=\"translucent\"\n                        onActivate={openBotKeyboard}\n                        ariaLabel={lang('AriaComposerBotKeyboard')}\n                      >\n                        <Icon name=\"bot-command\" />\n                      </ResponsiveHoverButton>\n                    )}\n                  </>\n                )}\n              </Transition>\n            </>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          {!isNeedPremium && (\n            <AttachMenu\n              chatId={chatId}\n              threadId={threadId}\n              editingMessage={editingMessage}\n              canEditMedia={canMediaBeReplaced}\n              isButtonVisible={!activeVoiceRecording}\n              canAttachMedia={canAttachMedia}\n              canAttachPolls={canAttachPolls}\n              canAttachToDoLists={canAttachToDoLists}\n              canSendPhotos={canSendPhotos}\n              canSendVideos={canSendVideos}\n              canSendDocuments={canSendDocuments}\n              canSendAudios={canSendAudios}\n              onFileSelect={handleFileSelect}\n              onPollCreate={openPollModal}\n              onTodoListCreate={handleTodoListCreate}\n              isScheduled={isInScheduledList}\n              attachBots={isInMessageList ? attachBots : undefined}\n              peerType={attachMenuPeerType}\n              shouldCollectDebugLogs={shouldCollectDebugLogs}\n              theme={theme}\n              onMenuOpen={onAttachMenuOpen}\n              onMenuClose={onAttachMenuClose}\n              messageListType={messageListType}\n              paidMessagesStars={paidMessagesStars}\n            />\n          )}\n          {isInMessageList && Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              threadId={threadId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {isInMessageList && botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            key={`custom-emoji-tooltip-${editableInputId}`}\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            key={`sticker-tooltip-${editableInputId}`}\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            key={`emoji-tooltip-${editableInputId}`}\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {canSendOneTimeMedia && activeVoiceRecording && (\n        <Button\n          className={buildClassName('view-once', isViewOnceEnabled && 'active')}\n          round\n          color=\"secondary\"\n          ariaLabel={oldLang('Chat.PlayOnceVoiceMessageTooltip')}\n          onClick={toogleViewOnceEnabled}\n        >\n          <Icon name=\"view-once\" />\n          <Icon name=\"one-filled\" />\n        </Button>\n      )}\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <Icon name=\"delete\" />\n        </Button>\n      )}\n      {isInStoryViewer && !activeVoiceRecording && (\n        <Button\n          round\n          className=\"story-reaction-button\"\n          color=\"secondary\"\n          onClick={handleLikeStory}\n          onContextMenu={handleStoryPickerContextMenu}\n          onMouseDown={handleBeforeStoryPickerContextMenu}\n          ariaLabel={oldLang('AccDescrLike')}\n          ref={storyReactionRef}\n        >\n          {sentStoryReaction && (\n            <ReactionAnimatedEmoji\n              key={getReactionKey(sentStoryReaction)}\n              containerId={getStoryKey(chatId, storyId!)}\n              reaction={sentStoryReaction}\n              withEffectOnly={isSentStoryReactionHeart}\n            />\n          )}\n          {(!sentStoryReaction || isSentStoryReactionHeart) && (\n            <Icon name=\"heart\" className={buildClassName(isSentStoryReactionHeart && 'story-reaction-heart')} />\n          )}\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(\n          mainButtonState,\n          'main-button',\n          !isReady && 'not-ready',\n          activeVoiceRecording && 'recording',\n        )}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        noFastClick\n        ariaLabel={oldLang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <Icon name=\"send\" />\n        <Icon name=\"microphone-alt\" />\n        {onForward && <Icon name=\"forward\" />}\n        {isInMessageList && <Icon name=\"schedule\" />}\n        {isInMessageList && <Icon name=\"check\" />}\n        <Button\n          className={buildClassName(\n            'paidStarsBadge',\n            shouldRenderPaidBadge && 'visible',\n            prevShouldRenderPaidBadge && !shouldRenderPaidBadge && 'hiding',\n            !prevShouldRenderPaidBadge && !shouldRenderPaidBadge && 'hidden',\n          )}\n          nonInteractive\n          size=\"tiny\"\n          color=\"stars\"\n          pill\n          fluid\n        >\n          <div className=\"paidStarsBadgeText\">\n            <Icon name=\"star\" className={buildClassName('star-amount-icon', className)} />\n            <AnimatedCounter\n              ref={counterRef}\n              text={lang.number(starsForAllMessages)}\n            />\n          </div>\n        </Button>\n      </Button>\n      {effectEmoji && (\n        <span className=\"effect-icon\" onClick={handleRemoveEffect}>\n          {renderText(effectEmoji)}\n        </span>\n      )}\n      {effect && canPlayEffect && (\n        <MessageEffect\n          shouldPlay={shouldPlayEffect}\n          effect={effect}\n          onStop={handleStopEffect}\n        />\n      )}\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          canSchedule={canSchedule && isInMessageList && !isViewOnceEnabled}\n          canScheduleUntilOnline={canScheduleUntilOnline && !isViewOnceEnabled}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!isInScheduledList ? handleSendScheduled : undefined}\n          onSendWhenOnline={handleSendWhenOnline}\n          onRemoveEffect={handleRemoveEffect}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n          chatId={chatId}\n          withEffects={areEffectsSupported}\n          hasCurrentEffect={Boolean(effect)}\n          effectReactions={effectReactions}\n          allAvailableReactions={availableReactions}\n          onToggleReaction={handleToggleEffectReaction}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isChatWithSelf}\n          isInStoryViewer={isInStoryViewer}\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n        />\n      )}\n      {calendar}\n      <PaymentMessageConfirmDialog\n        isOpen={isPaymentMessageConfirmDialogOpen}\n        onClose={closeConfirmModalPayForMessage}\n        userName={chat ? getPeerTitle(lang, chat) : undefined}\n        messagePriceInStars={paidMessagesStars || 0}\n        messagesCount={messagesCount}\n        shouldAutoApprove={shouldPaidMessageAutoApprove}\n        setAutoApprove={setShouldPaidMessageAutoApprove}\n        confirmHandler={paymentMessageConfirmDialogHandler}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, storyId, messageListType, isMobile, type,\n  }): Complete<StateProps> => {\n    const appConfig = global.appConfig;\n    const chat = selectChat(global, chatId);\n    const chatBot = !isSystemBot(chatId) ? selectBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const userFullInfo = isChatWithUser ? selectUserFullInfo(global, chatId) : undefined;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n    const chatFullInfo = !isChatWithUser ? selectChatFullInfo(global, chatId) : undefined;\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const {\n      shouldSuggestStickers, shouldSuggestCustomEmoji, shouldUpdateStickerSetOrder, shouldPaidMessageAutoApprove,\n    } = global.settings.byKey;\n    const { language, shouldCollectDebugLogs } = selectSharedSettings(global);\n    const {\n      forwardMessages: { messageIds: forwardMessageIds },\n    } = selectTabState(global);\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const currentUser = selectUser(global, currentUserId!)!;\n    const defaultSendAsId = chatFullInfo ? chatFullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = defaultSendAsId;\n    const sendAsPeer = sendAsId ? selectPeer(global, sendAsId) : undefined;\n    const requestedDraft = selectRequestedDraft(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n\n    const tabState = selectTabState(global);\n    const isStoryViewerOpen = Boolean(tabState.storyViewer.storyId);\n\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type\n      && !isStoryViewerOpen;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !userFullInfo?.noVoiceMessages) ?? true;\n    const slowMode = chatFullInfo?.slowMode;\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const story = storyId && selectPeerStory(global, chatId, storyId);\n    const sentStoryReaction = story && 'sentReaction' in story ? story.sentReaction : undefined;\n    const draft = selectDraft(global, chatId, threadId);\n    const replyToMessage = draft?.replyInfo\n      ? selectChatMessage(global, chatId, draft.replyInfo.replyToMsgId)\n      : undefined;\n    const replyToTopic = chat?.isForum && chat.isForumAsMessages && threadId === MAIN_THREAD_ID && replyToMessage\n      ? selectTopicFromMessage(global, replyToMessage)\n      : undefined;\n    const isInScheduledList = messageListType === 'scheduled';\n\n    const canSendQuickReplies = isChatWithUser && !isChatWithBot && !isInScheduledList && !isChatWithSelf;\n\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    const isSilentPosting = chat && getChatNotifySettings(\n      chat,\n      selectNotifyDefaults(global),\n      selectNotifyException(global, chatId),\n    )?.isSilentPosting;\n\n    const areEffectsSupported = isChatWithUser && !isChatWithBot\n      && !isInScheduledList && !isChatWithSelf && type !== 'story' && chatId !== SERVICE_NOTIFICATIONS_USER_ID;\n    const canPlayEffect = selectPerformanceSettingsValue(global, 'stickerEffects');\n    const shouldPlayEffect = tabState.shouldPlayEffectInComposer;\n    const effectId = areEffectsSupported && draft?.effectId;\n    const effect = effectId ? global.availableEffectById[effectId] : undefined;\n    const effectReactions = global.reactions.effectReactions;\n\n    const maxMessageLength = global.config?.maxMessageLength || DEFAULT_MAX_MESSAGE_LENGTH;\n    const isForwarding = chatId === tabState.forwardMessages.toChatId;\n    const isReplying = Boolean(draft?.replyInfo);\n    const hasSuggestedPost = Boolean(draft?.suggestedPostInfo);\n    const starsBalance = global.stars?.balance.amount || 0;\n    const isStarsBalanceModalOpen = Boolean(tabState.starsBalanceModal);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n    const insertingPeerIdMention = tabState.insertingPeerIdMention;\n\n    const webPagePreview = tabState.webPagePreviewId ? selectWebPage(global, tabState.webPagePreviewId) : undefined;\n\n    return {\n      availableReactions: global.reactions.availableReactions,\n      topReactions: type === 'story' ? global.reactions.topReactions : undefined,\n      isOnActiveTab: !tabState.isBlurred,\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      draft,\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && (userFullInfo || chatFullInfo)?.hasScheduledMessages\n      ),\n      isInScheduledList,\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding,\n      isReplying,\n      hasSuggestedPost,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      pollModal: tabState.pollModal,\n      todoListModal: tabState.todoListModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      chatFullInfo,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      currentUser,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      shouldUpdateStickerSetOrder,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      botCommands: userFullInfo ? (userFullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: userFullInfo?.botInfo?.menuButton,\n      sendAsPeer,\n      sendAsId,\n      editingDraft,\n      requestedDraft,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium,\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n      slowMode,\n      currentMessageList,\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      canSendOneTimeMedia: !isChatWithSelf && isChatWithUser && !isChatWithBot && !isInScheduledList,\n      shouldCollectDebugLogs,\n      sentStoryReaction,\n      stealthMode: global.stories.stealthMode,\n      replyToTopic,\n      quickReplyMessages: global.quickReplies.messagesById,\n      quickReplies: global.quickReplies.byId,\n      canSendQuickReplies,\n      noWebPage,\n      webPagePreview,\n      isContactRequirePremium: userFullInfo?.isContactRequirePremium,\n      effect,\n      effectReactions,\n      areEffectsSupported,\n      canPlayEffect,\n      shouldPlayEffect,\n      maxMessageLength,\n      paidMessagesStars,\n      shouldPaidMessageAutoApprove,\n      isSilentPosting,\n      isPaymentMessageConfirmDialogOpen: tabState.isPaymentMessageConfirmDialogOpen,\n      starsBalance,\n      isStarsBalanceModalOpen,\n      shouldDisplayGiftsButton: userFullInfo?.shouldDisplayGiftsButton,\n      disallowedGifts: userFullInfo?.disallowedGifts,\n      isAccountFrozen,\n      isAppConfigLoaded,\n      insertingPeerIdMention,\n      pollMaxAnswers: appConfig.pollMaxAnswers,\n    };\n  },\n)(Composer));\n","import { useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport { canReplaceMessageMedia, getAttachmentMediaType } from '../../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport buildAttachment from '../helpers/buildAttachment';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n  insertNextText,\n  editedMessage,\n  shouldSendInHighQuality,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n  insertNextText: VoidFunction;\n  editedMessage: ApiMessage | undefined;\n  shouldSendInHighQuality?: boolean;\n}) {\n  const lang = useLang();\n  const { openLimitReachedModal, showAllowedMessageTypesNotification, showNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n\n  const handleClearAttachments = useLastCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n    insertNextText();\n  });\n\n  const handleSetAttachments = useLastCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentMediaType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'photo' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentMediaType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'photo' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    },\n  );\n\n  const handleAppendFiles = useLastCallback(async (files: File[], isSpoiler?: boolean) => {\n    if (editedMessage) {\n      const newAttachment = await buildAttachment(files[0].name, files[0]);\n      const canReplace = editedMessage && canReplaceMessageMedia(editedMessage, newAttachment);\n\n      if (editedMessage?.groupedId) {\n        if (canReplace) {\n          handleSetAttachments([newAttachment]);\n        } else {\n          showNotification({ message: lang('MediaReplaceInvalidError', undefined, { pluralValue: files.length }) });\n        }\n      } else {\n        handleSetAttachments([newAttachment]);\n      }\n    } else {\n      const newAttachments = await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file,\n          { shouldSendAsSpoiler: isSpoiler || undefined, shouldSendInHighQuality })\n      )));\n      handleSetAttachments([...attachments, ...newAttachments]);\n    }\n  });\n\n  const handleFileSelect = useLastCallback(async (files: File[]) => {\n    if (editedMessage) {\n      const newAttachment = await buildAttachment(files[0].name, files[0]);\n      const canReplace = editedMessage && canReplaceMessageMedia(editedMessage, newAttachment);\n\n      if (editedMessage?.groupedId) {\n        if (canReplace) {\n          handleSetAttachments([newAttachment]);\n        } else {\n          showNotification({ message: lang('MediaReplaceInvalidError', undefined, { pluralValue: files.length }) });\n        }\n      } else {\n        handleSetAttachments([newAttachment]);\n      }\n    } else {\n      const newAttachments = await Promise.all(files.map((file) =>\n        buildAttachment(file.name, file, { shouldSendInHighQuality })));\n      handleSetAttachments(newAttachments);\n    }\n  });\n\n  const handleUpdateAttachmentsQuality = useLastCallback(async () => {\n    const newAttachments = await Promise.all(attachments.map((attachment) =>\n      buildAttachment(attachment.filename, attachment.blob, { shouldSendInHighQuality })));\n    handleSetAttachments(newAttachments);\n  });\n\n  useEffect(() => {\n    handleUpdateAttachmentsQuality();\n  }, [shouldSendInHighQuality]);\n\n  return {\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n","import { useEffect, useRef, useState } from '../../../../lib/teact/teact';\n\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\nimport * as voiceRecording from '../../../../util/voiceRecording';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype ActiveVoiceRecording =\n  { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction }\n  | undefined;\n\nconst useVoiceRecording = () => {\n  const recordButtonRef = useRef<HTMLButtonElement>();\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n  const [isViewOnceEnabled, setIsViewOnceEnabled] = useState(false);\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useLastCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            requestMutation(() => {\n              if (!recordButtonRef.current) return;\n              recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n            });\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  });\n\n  const pauseRecordingVoice = useLastCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  });\n\n  const stopRecordingVoice = useLastCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  });\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  const toogleViewOnceEnabled = useLastCallback(() => {\n    setIsViewOnceEnabled(!isViewOnceEnabled);\n  });\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n    isViewOnceEnabled,\n    setIsViewOnceEnabled,\n    toogleViewOnceEnabled,\n  };\n};\n\nexport default useVoiceRecording;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  tempInput.className = 'allow-selection'; // Patch for Safari\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiChat, ApiUser } from '../../api/types';\n\nimport { isChatChannel, isUserBot } from '../../global/helpers';\nimport { selectIsChatRestricted, selectPeer, selectUserStatus } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { throttle } from '../../util/schedulers';\n\nconst POLLING_INTERVAL = 60 * 60 * 1000;\nconst PEER_LAST_POLLING_TIME = new Map<string, number>();\nlet PEER_ID_QUEUE = new Set<string>();\nconst LIMIT_PER_REQUEST = 100;\nconst REQUEST_THROTTLE = 500;\n\nconst loadFromQueue = throttle(() => {\n  const queue = Array.from(PEER_ID_QUEUE);\n  const queueToLoad = queue.slice(0, LIMIT_PER_REQUEST);\n  const otherQueue = queue.slice(LIMIT_PER_REQUEST);\n\n  getActions().loadStoriesMaxIds({\n    peerIds: queueToLoad,\n  });\n\n  queueToLoad.forEach((id) => PEER_LAST_POLLING_TIME.set(id, Date.now()));\n\n  PEER_ID_QUEUE = new Set(otherQueue);\n\n  // Schedule next load\n  if (PEER_ID_QUEUE.size) {\n    loadFromQueue();\n  }\n}, REQUEST_THROTTLE);\n\nexport default function usePeerStoriesPolling(ids?: string[]) {\n  const peers = useMemo(() => {\n    const global = getGlobal();\n    return ids?.map((id) => selectPeer(global, id)).filter(Boolean);\n  }, [ids]);\n\n  const pollablePeerIds = useMemo(() => {\n    const global = getGlobal();\n    return peers?.filter((peer) => {\n      const lastPollingTime = PEER_LAST_POLLING_TIME.get(peer.id) || 0;\n      if (Date.now() - lastPollingTime < POLLING_INTERVAL) {\n        return false;\n      }\n\n      if (isUserId(peer.id)) {\n        const user = peer as ApiUser;\n        const status = selectUserStatus(global, user.id);\n        const isStatusAvailable = status && status.type !== 'userStatusEmpty';\n        return !user.isContact && !user.isSelf && !isUserBot(user) && !peer.isSupport && isStatusAvailable;\n      } else {\n        const chat = peer as ApiChat;\n        const isRestricted = selectIsChatRestricted(global, chat.id);\n        return isChatChannel(chat) && !isRestricted;\n      }\n    }).map((user) => user.id);\n  }, [peers]);\n\n  useEffect(() => {\n    if (pollablePeerIds?.length) {\n      pollablePeerIds.forEach((id) => PEER_ID_QUEUE.add(id));\n      loadFromQueue();\n    }\n  }, [pollablePeerIds]);\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport useForceUpdate from './useForceUpdate';\nimport usePreviousDeprecated from './usePreviousDeprecated';\nimport useSyncEffect from './useSyncEffect';\n\nexport default function usePrevDuringAnimation<T>(current: T, duration?: number): T {\n  const prev = usePreviousDeprecated(current, true);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n  // eslint-disable-next-line no-null/no-null\n  const isCurrentPresent = current !== undefined && current !== null;\n  // eslint-disable-next-line no-null/no-null\n  const isPrevPresent = prev !== undefined && prev !== null;\n\n  if (isCurrentPresent && timeoutRef.current) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useSyncEffect(() => {\n    // When `current` becomes empty\n    if (duration && !isCurrentPresent && isPrevPresent && !timeoutRef.current) {\n      timeoutRef.current = window.setTimeout(() => {\n        timeoutRef.current = undefined;\n        forceUpdate();\n      }, duration);\n    }\n  }, [duration, forceUpdate, isCurrentPresent, isPrevPresent]);\n\n  return (!timeoutRef.current || !duration || isCurrentPresent ? current : prev)!;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChat, ApiTopic } from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isSignal } from '../../../util/signals';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ShowTransition from '../../ui/ShowTransition';\n\nimport './ChatBadge.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  topic?: ApiTopic;\n  wasTopicOpened?: boolean;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  isSavedDialog?: boolean;\n  shouldShowOnlyMostImportant?: boolean;\n  hasMiniApp?: boolean;\n  forceHidden?: boolean | Signal<boolean>;\n  topics?: Record<number, ApiTopic>;\n  isSelected?: boolean;\n};\n\nconst ChatBadge: FC<OwnProps> = ({\n  topic,\n  topics,\n  chat,\n  isPinned,\n  isMuted,\n  shouldShowOnlyMostImportant,\n  wasTopicOpened,\n  forceHidden,\n  isSavedDialog,\n  hasMiniApp,\n  isSelected,\n}) => {\n  const { requestMainWebView } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    unreadMentionsCount = 0, unreadReactionsCount = 0,\n  } = !chat.isForum ? chat : {}; // TODO[forums] Unread mentions and reactions temporarily disabled for forums\n\n  const isTopicUnopened = !isPinned && topic && !wasTopicOpened;\n  const isForum = chat.isForum && !topic;\n  const topicsWithUnread = useMemo(() => (\n    isForum && topics ? Object.values(topics).filter(({ unreadCount }) => unreadCount) : undefined\n  ), [topics, isForum]);\n\n  const unreadCount = useMemo(() => {\n    if (!isForum) {\n      return (topic || chat).unreadCount;\n    }\n\n    return topicsWithUnread?.length;\n  }, [chat, topic, topicsWithUnread, isForum]);\n\n  const shouldBeUnMuted = useMemo(() => {\n    if (!isForum) {\n      return !isMuted || topic?.notifySettings.mutedUntil === 0;\n    }\n\n    if (isMuted) {\n      return topicsWithUnread?.some((acc) => acc.notifySettings.mutedUntil === 0);\n    }\n\n    const isEveryUnreadMuted = topicsWithUnread?.every((acc) => (\n      acc.notifySettings.mutedUntil && acc.notifySettings.mutedUntil > getServerTime()\n    ));\n\n    return !isEveryUnreadMuted;\n  }, [isForum, isMuted, topicsWithUnread, topic?.notifySettings.mutedUntil]);\n\n  const hasUnreadMark = topic ? false : chat.hasUnreadMark;\n\n  const resolvedForceHidden = useDerivedState(\n    () => (isSignal(forceHidden) ? forceHidden() : forceHidden),\n    [forceHidden],\n  );\n  const isShown = !resolvedForceHidden && Boolean(\n    unreadCount || unreadMentionsCount || hasUnreadMark || isPinned || unreadReactionsCount\n    || isTopicUnopened || hasMiniApp,\n  );\n\n  const isUnread = Boolean((unreadCount || hasUnreadMark) && !isSavedDialog);\n  const className = buildClassName(\n    'ChatBadge',\n    !shouldBeUnMuted && 'muted',\n    !isUnread && isPinned && 'pinned',\n    isUnread && 'unread',\n  );\n\n  const handleOpenApp = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId: chat.id,\n      peerId: chat.id,\n      theme,\n    });\n  });\n\n  function renderContent() {\n    const unreadReactionsElement = unreadReactionsCount && (\n      <div className={buildClassName('ChatBadge reaction', !shouldBeUnMuted && 'muted')}>\n        <Icon name=\"heart\" />\n      </div>\n    );\n\n    const unreadMentionsElement = unreadMentionsCount && (\n      <div className=\"ChatBadge mention\">\n        <Icon name=\"mention\" />\n      </div>\n    );\n\n    const unopenedTopicElement = isTopicUnopened && (\n      <div className={buildClassName('ChatBadge unopened', !shouldBeUnMuted && 'muted')} />\n    );\n\n    const unreadCountElement = (hasUnreadMark || unreadCount) ? (\n      <div className={className}>\n        {!hasUnreadMark && <AnimatedCounter text={formatIntegerCompact(lang, unreadCount!)} />}\n      </div>\n    ) : undefined;\n\n    const pinnedElement = isPinned && (\n      <div className={className}>\n        <Icon name=\"pinned-chat\" />\n      </div>\n    );\n\n    const miniAppButton = hasMiniApp && (\n      <Button\n        color={isSelected ? 'secondary' : 'primary'}\n        className=\"ChatBadge miniapp\"\n        pill\n        size=\"tiny\"\n        onClick={handleOpenApp}\n      >\n        {oldLang('BotOpen')}\n      </Button>\n    );\n\n    const visiblePinnedElement = !unreadCountElement && !unreadMentionsElement && !unreadReactionsElement\n      && pinnedElement;\n\n    const elements = [\n      unopenedTopicElement, unreadReactionsElement, unreadMentionsElement, unreadCountElement, visiblePinnedElement,\n    ].filter(Boolean);\n\n    if (isSavedDialog) return pinnedElement;\n\n    // Show only if empty or have pinned icon\n    if (hasMiniApp && (elements.length === 0 || visiblePinnedElement)) return miniAppButton;\n\n    if (elements.length === 0) return undefined;\n\n    if (elements.length === 1) return elements[0];\n\n    if (shouldShowOnlyMostImportant) {\n      const importanceOrderedElements = [\n        unreadMentionsElement, unreadCountElement, unreadReactionsElement, pinnedElement,\n      ].filter(Boolean);\n      return importanceOrderedElements[0];\n    }\n\n    return (\n      <div className=\"ChatBadge-wrapper\">\n        {elements}\n      </div>\n    );\n  }\n\n  return (\n    <ShowTransition isCustom className=\"ChatBadge-transition\" isOpen={isShown}>\n      {renderContent()}\n    </ShowTransition>\n  );\n};\n\nexport default memo(ChatBadge);\n","import { TME_LINK_PREFIX } from '../../../config';\n\nexport default function formatUsername(username: string, asAbsoluteLink?: boolean) {\n  return asAbsoluteLink ? `${TME_LINK_PREFIX}${username}` : `@${username}`;\n}\n","import { useRef } from '../../../../lib/teact/teact';\n\nimport useForceUpdate from '../../../../hooks/useForceUpdate';\nimport usePreviousDeprecated from '../../../../hooks/usePreviousDeprecated';\n\nexport default function useLeftHeaderButtonRtlForumTransition(shouldHideSearch?: boolean) {\n  const forceUpdate = useForceUpdate();\n  const shouldDisableDropdownMenuTransitionRef = useRef(shouldHideSearch);\n  const prevShouldHideSearch = usePreviousDeprecated(shouldHideSearch);\n\n  function handleDropdownMenuTransitionEnd() {\n    shouldDisableDropdownMenuTransitionRef.current = Boolean(shouldHideSearch);\n    forceUpdate();\n  }\n\n  if (shouldHideSearch === false && prevShouldHideSearch !== shouldHideSearch) {\n    shouldDisableDropdownMenuTransitionRef.current = false;\n  }\n\n  return { shouldDisableDropdownMenuTransitionRef, handleDropdownMenuTransitionEnd };\n}\n","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMediaExtendedPreview, ApiVideo } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMediaFormat, getMediaThumbUri, getMediaTransferState, getVideoMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { calculateExtendedPreviewDimensions, calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport { MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\n\nimport useUnsupportedMedia from '../../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport SensitiveContentConfirmModal from '../../common/SensitiveContentConfirmModal';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps<T> = {\n  id?: string;\n  video: ApiVideo | ApiMediaExtendedPreview;\n  lastPlaybackTimestamp?: number;\n  isOwn?: boolean;\n  isInWebPage?: boolean;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  className?: string;\n  clickArg?: T;\n  isMediaNsfw?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: (arg: T, e: React.MouseEvent<HTMLElement>) => void;\n  onCancelUpload?: (arg: T) => void;\n};\n\ntype StateProps = {\n  needsAgeVerification?: boolean;\n};\n\nconst Video = <T,>({\n  id,\n  video,\n  isOwn,\n  isInWebPage,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  forcedWidth,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  className,\n  lastPlaybackTimestamp,\n  clickArg,\n  isMediaNsfw,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n  onCancelUpload,\n  needsAgeVerification,\n}: OwnProps<T> & StateProps) => {\n  const { cancelMediaDownload, updateContentSettings, openAgeVerificationModal } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const videoRef = useRef<HTMLVideoElement>();\n  const [isNsfwModalOpen, openNsfwModal, closeNsfwModal] = useFlag();\n  const [shouldAlwaysShowNsfw, setShouldAlwaysShowNsfw] = useState(false);\n\n  const isPaidPreview = video.mediaType === 'extendedMediaPreview';\n\n  const localBlobUrl = !isPaidPreview ? video.blobUrl : undefined;\n\n  const shouldShowSpoiler = isPaidPreview || video.isSpoiler || isMediaNsfw;\n  const [isSpoilerShown, showSpoiler, hideSpoiler] = useFlag(shouldShowSpoiler);\n\n  useEffect(() => {\n    if (shouldShowSpoiler) {\n      showSpoiler();\n    } else {\n      hideSpoiler();\n    }\n  }, [shouldShowSpoiler]);\n\n  const handleNsfwConfirm = useLastCallback(() => {\n    closeNsfwModal();\n    hideSpoiler();\n\n    if (shouldAlwaysShowNsfw) {\n      updateContentSettings({ isSensitiveEnabled: true });\n    }\n  });\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && !isPaidPreview);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(Boolean(canAutoPlay && !isSpoilerShown));\n\n  const fullMediaHash = !isPaidPreview ? getVideoMediaHash(video, 'inline') : undefined;\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash,\n    !shouldLoad,\n    !isPaidPreview ? getMediaFormat(video, 'inline') : undefined,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMediaThumbUri(video);\n  const hasThumb = Boolean(thumbDataUri);\n  const withBlurredBackground = Boolean(forcedWidth);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const isUnsupported = useUnsupportedMedia(videoRef, true, !isInline);\n\n  const previewMediaHash = !isPaidPreview ? getVideoMediaHash(video, 'preview') : undefined;\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview);\n  const shouldHidePreview = isPlayerReady && !isUnsupported;\n  const { ref: previewRef } = useMediaTransition<HTMLImageElement>({\n    hasMediaData: Boolean((hasThumb || previewBlobUrl) && !shouldHidePreview),\n  });\n\n  const noThumb = Boolean(!hasThumb || previewBlobUrl || isPlayerReady);\n  const thumbRef = useBlurredMediaThumbRef(video, noThumb);\n  useMediaTransition({ ref: thumbRef, hasMediaData: !noThumb });\n  const blurredBackgroundRef = useBlurredMediaThumbRef(video, !withBlurredBackground);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    !isPaidPreview ? getVideoMediaHash(video, 'download') : undefined,\n    !isDownloading,\n    !isPaidPreview ? getMediaFormat(video, 'download') : undefined,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n    uploadProgress !== undefined,\n  );\n\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n  const {\n    ref: spinnerRef,\n    shouldRender: shouldRenderSpinner,\n  } = useShowTransition({\n    isOpen: isTransferring && !isUnsupported,\n    noMountTransition: wasLoadDisabled,\n    withShouldRender: true,\n  });\n  const {\n    ref: playButtonRef,\n  } = useShowTransition({\n    isOpen: Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner),\n  });\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  });\n\n  const duration = (Number.isFinite(videoRef.current?.duration) && !isUnsupported\n    ? videoRef.current?.duration : video.duration) || 0;\n\n  const {\n    width, height,\n  } = dimensions || (\n    isPaidPreview\n      ? calculateExtendedPreviewDimensions(video, Boolean(isOwn), asForwarded, isInWebPage, noAvatars, isMobile)\n      : calculateVideoDimensions(video, Boolean(isOwn), asForwarded, isInWebPage, noAvatars, isMobile)\n  );\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>, isFromSpinner?: boolean) => {\n    if (isUploading) {\n      onCancelUpload?.(clickArg!);\n      return;\n    }\n\n    if (!isPaidPreview && isDownloading) {\n      cancelMediaDownload({ media: video });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      if (isMediaNsfw) {\n        if (needsAgeVerification) {\n          openAgeVerificationModal();\n          return;\n        }\n        openNsfwModal();\n        return;\n      }\n      hideSpoiler();\n      return;\n    }\n\n    if (isFromSpinner && shouldLoad && !isPlayerReady && !isFullMediaPreloaded) {\n      setIsLoadAllowed(false);\n      e.stopPropagation();\n      return;\n    }\n\n    onClick?.(clickArg!, e);\n  });\n\n  const handleClickOnSpinner = useLastCallback(\n    (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      handleClick(e, true);\n    },\n  );\n\n  const componentClassName = buildClassName(\n    'media-inner dark',\n    !isUploading && 'interactive',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n    className,\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={componentClassName}\n      style={style}\n      onClick={isUploading ? undefined : (e) => handleClick(e)}\n    >\n      {withBlurredBackground && (\n        <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />\n      )}\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n          canPlay={isPlayAllowed && isIntersectingForPlaying && !isUnsupported}\n          defaultMuted\n          muted\n          loop\n          playsInline\n          disablePictureInPicture\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n          style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        />\n      )}\n      <img\n        ref={previewRef}\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px;` : undefined}\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas ref={thumbRef} className=\"thumbnail\" />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <Icon ref={playButtonRef} name=\"large-play\" />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        isNsfw={isMediaNsfw}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div ref={spinnerRef} className=\"media-loading\">\n          <ProgressSpinner\n            progress={transferProgress}\n            onClick={handleClickOnSpinner}\n          />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <Icon name=\"download\" />\n      )}\n      {isTransferring && (!isUnsupported || isDownloading) ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {!isPaidPreview && video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n          {isUnsupported && <Icon name=\"message-failed\" className=\"playback-failed\" />}\n        </div>\n      )}\n      {Boolean(lastPlaybackTimestamp) && (\n        <div\n          className=\"message-media-last-progress\"\n          style={`--_progress: ${Math.floor((lastPlaybackTimestamp / duration) * 100)}%`}\n        />\n      )}\n      <SensitiveContentConfirmModal\n        isOpen={isNsfwModalOpen}\n        onClose={closeNsfwModal}\n        shouldAlwaysShow={shouldAlwaysShowNsfw}\n        onAlwaysShowChanged={setShouldAlwaysShowNsfw}\n        confirmHandler={handleNsfwConfirm}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const appConfig = global.appConfig;\n  const needsAgeVerification = appConfig.needAgeVideoVerification;\n\n  return {\n    needsAgeVerification,\n  };\n})(Video));\n","import { useEffect, useState } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { EmojiData, EmojiModule, EmojiRawData } from '../../../../util/emoji/emoji';\nimport type { Signal } from '../../../../util/signals';\n\nimport { EDITABLE_INPUT_CSS_SELECTOR, EDITABLE_INPUT_ID } from '../../../../config';\nimport { requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { selectCustomEmojiForEmojis } from '../../../../global/selectors';\nimport { uncompressEmoji } from '../../../../util/emoji/emoji';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport {\n  buildCollectionByKey, mapValues, pickTruthy, unique, uniqueByField,\n} from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport memoized from '../../../../util/memoized';\nimport renderText from '../../../common/helpers/renderText';\nimport { buildCustomEmojiHtml } from '../helpers/customEmoji';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ninterface Library {\n  keywords: string[];\n  byKeyword: Record<string, Emoji[]>;\n  names: string[];\n  byName: Record<string, Emoji[]>;\n  maxKeyLength: number;\n}\n\nlet emojiDataPromise: Promise<EmojiModule> | undefined;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nlet RE_EMOJI_SEARCH: RegExp;\nlet RE_LOWERCASE_TEST: RegExp;\nconst EMOJIS_LIMIT = 36;\nconst FILTER_MIN_LENGTH = 2;\n\nconst THROTTLE = 300;\n\nconst prepareRecentEmojisMemo = memoized(prepareRecentEmojis);\nconst prepareLibraryMemo = memoized(prepareLibrary);\nconst searchInLibraryMemo = memoized(searchInLibrary);\n\ntry {\n  RE_EMOJI_SEARCH = /(^|\\s):(?!\\s)[-+_:'\\s\\p{L}\\p{N}]*$/gui;\n  RE_LOWERCASE_TEST = /\\p{Ll}/u;\n} catch (e) {\n  // Support for older versions of firefox\n  RE_EMOJI_SEARCH = /(^|\\s):(?!\\s)[-+_:'\\s\\d\\wа-яёґєії]*$/gi;\n  RE_LOWERCASE_TEST = /[a-zяёґєії]/;\n}\n\nexport default function useEmojiTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  inputId = EDITABLE_INPUT_ID,\n  recentEmojiIds: string[],\n  baseEmojiKeywords?: Record<string, string[]>,\n  emojiKeywords?: Record<string, string[]>,\n) {\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const [byId, setById] = useState<Record<string, Emoji> | undefined>();\n  const [filteredEmojis, setFilteredEmojis] = useState<Emoji[]>(MEMO_EMPTY_ARRAY);\n  const [filteredCustomEmojis, setFilteredCustomEmojis] = useState<ApiSticker[]>(MEMO_EMPTY_ARRAY);\n\n  // Initialize data on first render\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    function exec() {\n      setById(emojiData.emojis);\n    }\n\n    if (emojiData) {\n      exec();\n    } else {\n      ensureEmojiData().then(exec);\n    }\n  }, [isEnabled]);\n\n  const detectEmojiCodeThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.includes(':') ? prepareForRegExp(html).match(RE_EMOJI_SEARCH)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getEmojiCode = useDerivedSignal(\n    detectEmojiCodeThrottled, [detectEmojiCodeThrottled, getHtml], true,\n  );\n\n  const updateFiltered = useLastCallback((emojis: Emoji[]) => {\n    setFilteredEmojis(emojis);\n\n    if (emojis === MEMO_EMPTY_ARRAY) {\n      setFilteredCustomEmojis(MEMO_EMPTY_ARRAY);\n      return;\n    }\n\n    const nativeEmojis = emojis.map((emoji) => emoji.native);\n    const customEmojis = uniqueByField(\n      selectCustomEmojiForEmojis(getGlobal(), nativeEmojis),\n      'id',\n    );\n    setFilteredCustomEmojis(customEmojis);\n  });\n\n  const insertEmoji = useLastCallback((emoji: string | ApiSticker, isForce = false) => {\n    const html = getHtml();\n    if (!html) return;\n\n    const atIndex = html.lastIndexOf(':', isForce ? html.lastIndexOf(':') - 1 : undefined);\n\n    if (atIndex !== -1) {\n      const emojiHtml = typeof emoji === 'string'\n        ? renderText(emoji, ['emoji_html'])[0] as string\n        : buildCustomEmojiHtml(emoji);\n      setHtml(`${html.substring(0, atIndex)}${emojiHtml}`);\n\n      const messageInput = inputId === EDITABLE_INPUT_ID\n        ? document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!\n        : document.getElementById(inputId) as HTMLDivElement;\n\n      requestNextMutation(() => {\n        focusEditableElement(messageInput, true, true);\n      });\n    }\n\n    updateFiltered(MEMO_EMPTY_ARRAY);\n  });\n\n  useEffect(() => {\n    const emojiCode = getEmojiCode();\n    if (!emojiCode || !byId) {\n      updateFiltered(MEMO_EMPTY_ARRAY);\n      return;\n    }\n\n    const newShouldAutoInsert = emojiCode.length > 2 && emojiCode.endsWith(':');\n\n    const filter = emojiCode.substring(1, newShouldAutoInsert ? 1 + emojiCode.length - 2 : undefined);\n    let matched: Emoji[] = MEMO_EMPTY_ARRAY;\n\n    if (!filter) {\n      matched = prepareRecentEmojisMemo(byId, recentEmojiIds, EMOJIS_LIMIT);\n    } else if ((filter.length === 1 && RE_LOWERCASE_TEST.test(filter)) || filter.length >= FILTER_MIN_LENGTH) {\n      const library = prepareLibraryMemo(byId, baseEmojiKeywords, emojiKeywords);\n      matched = searchInLibraryMemo(library, filter.toLowerCase(), EMOJIS_LIMIT);\n    }\n\n    if (!matched.length) {\n      updateFiltered(MEMO_EMPTY_ARRAY);\n      return;\n    }\n\n    if (newShouldAutoInsert) {\n      insertEmoji(matched[0].native, true);\n    } else {\n      updateFiltered(matched);\n    }\n  }, [\n    baseEmojiKeywords, byId, getEmojiCode, emojiKeywords, insertEmoji, recentEmojiIds, updateFiltered,\n  ]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isEmojiTooltipOpen: Boolean(filteredEmojis.length || filteredCustomEmojis.length) && !isManuallyClosed,\n    closeEmojiTooltip: markManuallyClosed,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  };\n}\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nfunction prepareRecentEmojis(byId: Record<string, Emoji>, recentEmojiIds: string[], limit: number) {\n  if (!byId || !recentEmojiIds.length) {\n    return MEMO_EMPTY_ARRAY;\n  }\n\n  return Object.values(pickTruthy(byId, recentEmojiIds)).slice(0, limit);\n}\n\nfunction prepareLibrary(\n  byId: Record<string, Emoji>,\n  baseEmojiKeywords?: Record<string, string[]>,\n  emojiKeywords?: Record<string, string[]>,\n): Library {\n  const emojis = Object.values(byId);\n\n  const byNative = buildCollectionByKey<Emoji>(emojis, 'native');\n  const baseEmojisByKeyword = baseEmojiKeywords\n    ? mapValues(baseEmojiKeywords, (natives) => {\n      return Object.values(pickTruthy(byNative, natives));\n    })\n    : {};\n  const emojisByKeyword = emojiKeywords\n    ? mapValues(emojiKeywords, (natives) => {\n      return Object.values(pickTruthy(byNative, natives));\n    })\n    : {};\n\n  const byKeyword = { ...baseEmojisByKeyword, ...emojisByKeyword };\n  const keywords = ([] as string[]).concat(Object.keys(baseEmojisByKeyword), Object.keys(emojisByKeyword));\n\n  const byName = emojis.reduce((result, emoji) => {\n    emoji.names.forEach((name) => {\n      if (!result[name]) {\n        result[name] = [];\n      }\n\n      result[name].push(emoji);\n    });\n\n    return result;\n  }, {} as Record<string, Emoji[]>);\n\n  const names = Object.keys(byName);\n  const maxKeyLength = keywords.reduce((max, keyword) => Math.max(max, keyword.length), 0);\n\n  return {\n    byKeyword,\n    keywords,\n    byName,\n    names,\n    maxKeyLength,\n  };\n}\n\nfunction searchInLibrary(library: Library, filter: string, limit: number) {\n  const {\n    byKeyword, keywords, byName, names, maxKeyLength,\n  } = library;\n\n  let matched: Emoji[] = [];\n\n  if (filter.length > maxKeyLength) {\n    return MEMO_EMPTY_ARRAY;\n  }\n\n  const matchedKeywords = keywords.filter((keyword) => keyword.startsWith(filter)).sort();\n  matched = matched.concat(Object.values(pickTruthy(byKeyword, matchedKeywords)).flat());\n\n  // Also search by names, which is useful for non-English languages\n  const matchedNames = names.filter((name) => name.startsWith(filter));\n  matched = matched.concat(Object.values(pickTruthy(byName, matchedNames)).flat());\n\n  matched = unique(matched);\n\n  if (!matched.length) {\n    return MEMO_EMPTY_ARRAY;\n  }\n\n  return matched.slice(0, limit);\n}\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiTooltip';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomEmojiTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomEmojiTooltip = useModuleLoader(Bundles.Extra, 'CustomEmojiTooltip', !isOpen);\n\n  return CustomEmojiTooltip ? <CustomEmojiTooltip {...props} /> : undefined;\n};\n\nexport default CustomEmojiTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SymbolMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default SymbolMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { IAnchorPosition, ThreadId } from '../../../types';\n\nimport { EDITABLE_INPUT_CSS_SELECTOR, EDITABLE_INPUT_MODAL_CSS_SELECTOR } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport SymbolMenu from './SymbolMenu.async';\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isMobile?: boolean;\n  isReady?: boolean;\n  isSymbolMenuOpen?: boolean;\n  canSendGifs?: boolean;\n  canSendStickers?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  forceDarkTheme?: boolean;\n  openSymbolMenu: VoidFunction;\n  closeSymbolMenu: VoidFunction;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n  closeBotCommandMenu?: VoidFunction;\n  closeSendAsMenu?: VoidFunction;\n  isSymbolMenuForced?: boolean;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  className?: string;\n  inputCssSelector?: string;\n};\n\nconst SymbolMenuButton: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isMobile,\n  canSendGifs,\n  canSendStickers,\n  isMessageComposer,\n  isReady,\n  isSymbolMenuOpen,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  isSymbolMenuForced,\n  className,\n  forceDarkTheme,\n  inputCssSelector = EDITABLE_INPUT_CSS_SELECTOR,\n  openSymbolMenu,\n  closeSymbolMenu,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n  closeBotCommandMenu,\n  closeSendAsMenu,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    addRecentEmoji,\n    addRecentCustomEmoji,\n  } = getActions();\n\n  const triggerRef = useRef<HTMLDivElement>();\n\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [contextMenuAnchor, setContextMenuAnchor] = useState<IAnchorPosition | undefined>(undefined);\n\n  const symbolMenuButtonClassName = buildClassName(\n    'composer-action-button mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleActivateSymbolMenu = useLastCallback(() => {\n    closeBotCommandMenu?.();\n    closeSendAsMenu?.();\n    openSymbolMenu();\n    const triggerEl = triggerRef.current;\n    if (!triggerEl) return;\n    const { x, y } = triggerEl.getBoundingClientRect();\n    setContextMenuAnchor({ x, y });\n  });\n\n  const handleSearchOpen = useLastCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  });\n\n  const handleSymbolMenuOpen = useLastCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(\n      isAttachmentModal ? EDITABLE_INPUT_MODAL_CSS_SELECTOR : inputCssSelector,\n    );\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu?.();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  });\n\n  const getTriggerElement = useLastCallback(() => triggerRef.current);\n  const getRootElement = useLastCallback(() => triggerRef.current?.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .SymbolMenu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  return (\n    <>\n      {isMobile ? (\n        <Button\n          className={symbolMenuButtonClassName}\n          round\n          color=\"translucent\"\n          onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n          ariaLabel=\"Choose emoji, sticker or GIF\"\n        >\n          <Icon name=\"smile\" />\n          <Icon name=\"keyboard\" />\n          {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n        </Button>\n      ) : (\n        <ResponsiveHoverButton\n          className={buildClassName('composer-action-button symbol-menu-button', isSymbolMenuOpen && 'activated')}\n          round\n          color=\"translucent\"\n          onActivate={handleActivateSymbolMenu}\n          ariaLabel=\"Choose emoji, sticker or GIF\"\n        >\n          <div ref={triggerRef} className=\"symbol-menu-trigger\" />\n          <Icon name=\"smile\" />\n        </ResponsiveHoverButton>\n      )}\n\n      <SymbolMenu\n        chatId={chatId}\n        threadId={threadId}\n        isOpen={isSymbolMenuOpen || Boolean(isSymbolMenuForced)}\n        canSendGifs={canSendGifs}\n        canSendStickers={canSendStickers}\n        isMessageComposer={isMessageComposer}\n        idPrefix={idPrefix}\n        onLoad={onSymbolMenuLoadingComplete}\n        onClose={closeSymbolMenu}\n        onEmojiSelect={onEmojiSelect}\n        onStickerSelect={onStickerSelect}\n        onCustomEmojiSelect={onCustomEmojiSelect}\n        onGifSelect={onGifSelect}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearchOpen}\n        addRecentEmoji={addRecentEmoji}\n        addRecentCustomEmoji={addRecentCustomEmoji}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n        className={buildClassName(className, forceDarkTheme && 'component-theme-dark')}\n        anchor={isAttachmentModal ? contextMenuAnchor : undefined}\n        getTriggerElement={isAttachmentModal ? getTriggerElement : undefined}\n        getRootElement={isAttachmentModal ? getRootElement : undefined}\n        getMenuElement={isAttachmentModal ? getMenuElement : undefined}\n        getLayout={isAttachmentModal ? getLayout : undefined}\n      />\n    </>\n  );\n};\n\nexport default memo(SymbolMenuButton);\n","import { getGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\nimport type { IconName } from '../../types/icons';\nimport type { Dispatch, StateReducer } from '../useReducer';\n\nimport { selectChat } from '../../global/selectors';\nimport { omit, pick } from '../../util/iteratees';\nimport useReducer from '../useReducer';\n\nexport type FolderChatType = {\n  icon: IconName;\n  title: string;\n  key: keyof Pick<ApiChatFolder, (\n    'contacts' | 'nonContacts' | 'groups' | 'channels' | 'bots' |\n    'excludeMuted' | 'excludeArchived' | 'excludeRead'\n  )>;\n};\n\nconst INCLUDE_FILTER_FIELDS: Array<keyof FolderIncludeFilters> = [\n  'includedChatIds', 'bots', 'channels', 'groups', 'contacts', 'nonContacts',\n];\nconst EXCLUDE_FILTER_FIELDS: Array<keyof FolderExcludeFilters> = [\n  'excludedChatIds', 'excludeArchived', 'excludeMuted', 'excludeRead',\n];\n\nexport function selectChatFilters(state: FoldersState, mode: 'included' | 'excluded', selectTemp?: boolean) {\n  let selectedChatIds: string[] = [];\n  let selectedChatTypes: FolderChatType['key'][] = [];\n\n  if (mode === 'included') {\n    const {\n      includedChatIds,\n      ...includeFilters\n    } = selectTemp\n      ? state.includeFilters || {}\n      : pick(\n        state.folder,\n        INCLUDE_FILTER_FIELDS,\n      );\n\n    selectedChatIds = includedChatIds || [];\n    selectedChatTypes = (Object.keys(includeFilters) as Array<keyof typeof includeFilters>)\n      .filter((key) => Boolean(includeFilters[key]));\n  } else {\n    const {\n      excludedChatIds,\n      ...excludeFilters\n    } = selectTemp\n      ? state.excludeFilters || {}\n      : pick(\n        state.folder,\n        EXCLUDE_FILTER_FIELDS,\n      );\n\n    selectedChatIds = excludedChatIds || [];\n    selectedChatTypes = (Object.keys(excludeFilters) as Array<keyof typeof excludeFilters>)\n      .filter((key) => Boolean(excludeFilters[key]));\n  }\n\n  const global = getGlobal();\n  const existingSelectedChatIds = selectedChatIds.filter((id) => selectChat(global, id));\n\n  return {\n    selectedChatIds: existingSelectedChatIds,\n    selectedChatTypes,\n  };\n}\n\nfunction getSuggestedFolderName(includeFilters?: FolderIncludeFilters) {\n  if (includeFilters) {\n    const {\n      includedChatIds,\n      ...filters\n    } = includeFilters;\n\n    if (\n      Object.values(filters).filter(Boolean).length > 1\n      || (includedChatIds?.length)\n    ) {\n      return '';\n    }\n\n    if (filters.bots) {\n      return 'Bots';\n    } else if (filters.groups) {\n      return 'Groups';\n    } else if (filters.channels) {\n      return 'Channels';\n    } else if (filters.contacts) {\n      return 'Contacts';\n    } else if (filters.nonContacts) {\n      return 'Non-Contacts';\n    }\n  }\n\n  return '';\n}\n\ntype FolderIncludeFilters = Pick<ApiChatFolder, (\n  'includedChatIds' | 'bots' | 'channels' | 'groups' | 'contacts' | 'nonContacts'\n)>;\ntype FolderExcludeFilters = Pick<ApiChatFolder, 'excludedChatIds' | 'excludeArchived' | 'excludeMuted' | 'excludeRead'>;\n\nexport type FoldersState = {\n  mode: 'create' | 'edit';\n  isLoading?: boolean;\n  isTouched?: boolean;\n  error?: string;\n  folderId?: number;\n  chatFilter: string;\n  folder: Omit<ApiChatFolder, 'id' | 'description' | 'emoticon'>;\n  includeFilters?: FolderIncludeFilters;\n  excludeFilters?: FolderExcludeFilters;\n};\nexport type FoldersActions = (\n  'setTitle' | 'saveFilters' | 'editFolder' | 'reset' | 'setChatFilter' | 'setIsLoading' | 'setError' |\n  'editIncludeFilters' | 'editExcludeFilters' | 'setIncludeFilters' | 'setExcludeFilters' | 'setIsTouched' |\n  'setFolderId' | 'setIsChatlist' | 'setColor'\n  );\nexport type FolderEditDispatch = Dispatch<FoldersState, FoldersActions>;\n\nconst INITIAL_STATE: FoldersState = {\n  mode: 'create',\n  chatFilter: '',\n  folder: {\n    title: { text: '' },\n    includedChatIds: [],\n    excludedChatIds: [],\n  },\n};\n\nconst foldersReducer: StateReducer<FoldersState, FoldersActions> = (\n  state,\n  action,\n): FoldersState => {\n  switch (action.type) {\n    case 'setTitle':\n      return {\n        ...state,\n        folder: {\n          ...state.folder,\n          title: { text: action.payload },\n        },\n        isTouched: true,\n      };\n    case 'setFolderId':\n      return {\n        ...state,\n        folderId: action.payload,\n        mode: 'edit',\n      };\n    case 'editIncludeFilters':\n      return {\n        ...state,\n        includeFilters: pick(\n          state.folder,\n          INCLUDE_FILTER_FIELDS,\n        ),\n      };\n    case 'editExcludeFilters':\n      return {\n        ...state,\n        excludeFilters: pick(\n          state.folder,\n          EXCLUDE_FILTER_FIELDS,\n        ),\n      };\n    case 'setIncludeFilters':\n      return {\n        ...state,\n        includeFilters: action.payload,\n        chatFilter: '',\n      };\n    case 'setExcludeFilters':\n      return {\n        ...state,\n        excludeFilters: action.payload,\n        chatFilter: '',\n      };\n    case 'saveFilters':\n      if (state.includeFilters) {\n        return {\n          ...state,\n          folder: {\n            ...omit(state.folder, INCLUDE_FILTER_FIELDS),\n            title: state.folder.title ? state.folder.title : { text: getSuggestedFolderName(state.includeFilters) },\n            ...state.includeFilters,\n          },\n          includeFilters: undefined,\n          chatFilter: '',\n          isTouched: true,\n        };\n      } else if (state.excludeFilters) {\n        return {\n          ...state,\n          folder: {\n            ...omit(state.folder, EXCLUDE_FILTER_FIELDS),\n            ...state.excludeFilters,\n          },\n          excludeFilters: undefined,\n          chatFilter: '',\n          isTouched: true,\n        };\n      } else {\n        return state;\n      }\n    case 'editFolder': {\n      const { id: folderId, ...folder } = action.payload;\n\n      return {\n        mode: 'edit',\n        folderId,\n        folder,\n        chatFilter: '',\n      };\n    }\n    case 'setChatFilter': {\n      return {\n        ...state,\n        chatFilter: action.payload,\n      };\n    }\n    case 'setIsTouched': {\n      return {\n        ...state,\n        isTouched: action.payload,\n      };\n    }\n    case 'setIsLoading': {\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    }\n    case 'setError': {\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload,\n      };\n    }\n    case 'setIsChatlist':\n      return {\n        ...state,\n        folder: {\n          ...state.folder,\n          isChatList: action.payload,\n        },\n      };\n    case 'setColor':\n      return {\n        ...state,\n        folder: {\n          ...state.folder,\n          color: action.payload,\n        },\n        isTouched: true,\n      };\n    case 'reset':\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n\nconst useFoldersReducer = () => {\n  return useReducer(foldersReducer, INITIAL_STATE);\n};\n\nexport default useFoldersReducer;\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || (nextMessage.suggestedPostInfo)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n            && nextMessage.id !== topMessageId)\n          || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {} as Complete<StateProps>;\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasMessages?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n  hasMessages,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>\n        {lang('UserUpdatedName', {\n          user: chat.title,\n          time: formatPastDatetime(lang, nameChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>\n        {lang('UserUpdatedPhoto', {\n          user: chat.title,\n          time: formatPastDatetime(lang, photoChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && !hasMessages && (\n        <span>{oldLang('NoMessages')}</span>\n      )}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage | undefined,\n  chatId: string,\n  isQuickPreview?: boolean,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (!isQuickPreview) {\n      if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n        markMessageListRead({ maxId });\n      }\n\n      if (mentionIds.length) {\n        markMentionsRead({ chatId, messageIds: mentionIds });\n      }\n\n      if (scheduledToUpdateViews.length) {\n        scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n      }\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage?.({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, getMinMediaWidthWithText } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: ElementRef<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const contentRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const content = message && getMessageContent(message);\n  const {\n    photo, video, text,\n  } = content || {};\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < getMinMediaWidthWithText(isMobile)) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMobile), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile, text?.text]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? selectMessageDownloadableMedia(global, message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { ElementRef, FC } from '../../lib/teact/teact';\nimport { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  getSuggestedChangesActionText,\n  getSuggestedChangesInfo,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectChatMessage, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate, formatScheduledDateTime } from '../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../util/formatCurrency';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText, formatTonAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport { renderPeerLink } from './message/helpers/messageActions';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\nimport actionMessageStyles from './message/ActionMessage.module.scss';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isChatMonoforum?: boolean;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: ElementRef<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  isQuickPreview?: boolean;\n  onScrollDownToggle?: BooleanToVoidFunction;\n  onNotchToggle?: AnyToVoidFunction;\n  onIntersectPinnedMessage?: OnIntersectPinnedMessage;\n  canPost?: boolean;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  isChatMonoforum,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  isQuickPreview,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n  canPost,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId, isQuickPreview);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>\n            {\n              message.isOutgoing\n                ? lang('ActionPaidOneMessageOutgoing', {\n                  amount: formatStarsAsText(lang, amount),\n                })\n                : (() => {\n                  const sender = selectSender(getGlobal(), message);\n                  const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                  return lang('ActionPaidOneMessageIncoming', {\n                    user: userTitle,\n                    amount: formatStarsAsText(lang, amount),\n                  });\n                })()\n            }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const renderSuggestedPostInfoAction = (message: ApiMessage) => {\n    if (message.suggestedPostInfo) {\n      const { price, scheduleDate } = message.suggestedPostInfo;\n      const sender = selectSender(getGlobal(), message);\n      const userTitle = sender ? getPeerTitle(lang, sender) : '';\n      const userLink = renderPeerLink(sender?.id, userTitle || lang('ActionFallbackUser'));\n\n      const originalMessage = message.replyInfo?.type === 'message' && message.replyInfo.replyToMsgId\n        ? selectChatMessage(getGlobal(), message.chatId, message.replyInfo.replyToMsgId)\n        : undefined;\n      const changesInfo = getSuggestedChangesInfo(message, originalMessage);\n\n      const titleText = changesInfo\n        ? getSuggestedChangesActionText(lang, message, originalMessage, message.isOutgoing, userLink)\n        : message.isOutgoing\n          ? lang('ActionSuggestedPostOutgoing', undefined, { withNodes: true, withMarkdown: true })\n          : lang('ActionSuggestedPostIncoming', { user: userLink }, { withNodes: true, withMarkdown: true });\n\n      const tableData: TableEntry[] = compact([\n        [lang('TitlePrice'), price ? (price.currency === 'TON'\n          ? formatTonAsText(lang, convertTonFromNanos(price.amount))\n          : formatStarsAsText(lang, price.amount)) : lang('SuggestMessageNoPrice')],\n        [lang('TitleTime'),\n          scheduleDate\n            ? formatScheduledDateTime(scheduleDate, lang, oldLang)\n            : lang('SuggestMessageAnytime'),\n        ],\n      ]);\n\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`suggested-post-action-${message.id}`}\n        >\n          <span className={actionMessageStyles.suggestedPostContainer}>\n            <div\n              className={actionMessageStyles.suggestedPostTitle}\n            >\n              {titleText}\n            </div>\n            {Boolean(tableData.length) && (\n              <MiniTable\n                className={actionMessageStyles.suggestedPostInfo}\n                data={tableData}\n              />\n            )}\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat || Boolean(isChatMonoforum);\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          message.suggestedPostInfo && renderSuggestedPostInfoAction(message),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            // eslint-disable-next-line react-x/no-duplicate-key\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>\n                {oldLang(isEmptyThread\n                  ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n          canPost={canPost}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n        && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} hasMessages />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction | undefined,\n  onNotchToggle: AnyToVoidFunction | undefined,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const backwardsTriggerRef = useRef<HTMLDivElement>();\n  const forwardsTriggerRef = useRef<HTMLDivElement>();\n  const fabTriggerRef = useRef<HTMLDivElement>();\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle?.(false);\n      onNotchToggle?.(false);\n\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle?.(true);\n      onNotchToggle?.(true);\n\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle?.(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle?.(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPeer } from '../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../global/helpers/peers';\nimport { selectPeer, selectTheme, selectThemeValues } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  peer?: ApiPeer;\n};\n\nfunction RequirementToContactMessage({\n  patternColor, peer, paidMessagesStars,\n}: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  if (!peer) return undefined;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang(isApiPeerUser(peer) ? 'MessagesPlaceholderPaidUser' : 'MessagesPlaceholderPaidChannel', {\n                peer: getPeerTitle(lang, peer),\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', getPeerTitle(lang, peer)), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { peerId: userId }): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, userId);\n\n    return {\n      patternColor,\n      peer,\n    };\n  })(RequirementToContactMessage),\n);\n","import type { FC } from '@teact';\nimport { beginHeavyAnimation, memo, useEffect, useMemo, useRef } from '@teact';\nimport { addExtraClass, removeExtraClass } from '@teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic } from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatMonoforum,\n  isSystemBot,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectMonoforumChannel,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectIsChatRestricted } from '../../global/selectors/chats';\nimport { selectActiveRestrictionReasons, selectCurrentMessageList } from '../../global/selectors/messages';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport Transition from '../ui/Transition.tsx';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n  isQuickPreview?: boolean;\n  onScrollDownToggle?: BooleanToVoidFunction;\n  onNotchToggle?: AnyToVoidFunction;\n  onIntersectPinnedMessage?: OnIntersectPinnedMessage;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatMonoforum?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReasons?: ApiRestrictionReason[];\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n  monoforumChannelId?: string;\n  canTranslate?: boolean;\n  translationLanguage?: string;\n  shouldAutoTranslate?: boolean;\n  isActive?: boolean;\n};\n\nenum Content {\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Loading,\n  Restricted,\n  StarsRequired,\n  PremiumRequired,\n  AccountInfo,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  ContactGreeting,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  NoMessages,\n  MessageList,\n}\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isActive,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  isChatMonoforum,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReasons,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  isAccountFrozen,\n  hasCustomGreeting,\n  monoforumChannelId,\n  isAppConfigLoaded,\n  canTranslate,\n  translationLanguage,\n  shouldAutoTranslate,\n  isQuickPreview,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks, requestChatTranslation,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  // Enable auto translation for the chat if it's available\n  useEffect(() => {\n    if (!shouldAutoTranslate || !canTranslate) return;\n    requestChatTranslation({ chatId, toLanguageCode: translationLanguage });\n  }, [shouldAutoTranslate, canTranslate, translationLanguage, chatId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen || !isActive) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || !isActive) {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled' || !isActive) {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled' || !isActive) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(\n      () => loadViewportMessages({ direction: LoadMoreDirection.Around, chatId, threadId }),\n      1000,\n      true,\n      false,\n    );\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage?.({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread' && !isQuickPreview) {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement : firstUnreadElement,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = Boolean((messageIds && messageGroups) || lastMessage);\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle?.(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  const activeKey = isRestricted ? (\n    Content.Restricted\n  ) : paidMessagesStars && !hasMessages && !hasCustomGreeting ? (\n    Content.StarsRequired\n  ) : isContactRequirePremium && !hasMessages ? (\n    Content.PremiumRequired\n  ) : (isBot || isNonContact) && !hasMessages ? (\n    Content.AccountInfo\n  ) : shouldRenderGreeting ? (\n    Content.ContactGreeting\n  ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n    Content.NoMessages\n  ) : hasMessages ? (\n    Content.MessageList\n  ) : (\n    Content.Loading\n  );\n\n  function renderContent() {\n    return activeKey === Content.Restricted ? (\n      <div className=\"empty\">\n        <span>\n          {restrictionReasons?.[0]?.text || `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n        </span>\n      </div>\n    ) : activeKey === Content.StarsRequired ? (\n      <RequirementToContactMessage paidMessagesStars={paidMessagesStars} peerId={monoforumChannelId || chatId} />\n    ) : activeKey === Content.PremiumRequired ? (\n      <RequirementToContactMessage peerId={chatId} />\n    ) : activeKey === Content.AccountInfo ? (\n      <MessageListAccountInfo chatId={chatId} hasMessages={hasMessages} />\n    ) : activeKey === Content.ContactGreeting ? (\n      <ContactGreeting key={chatId} userId={chatId} />\n    ) : activeKey === Content.NoMessages ? (\n      <NoMessages\n        chatId={chatId}\n        topic={topic}\n        type={type}\n        isChatWithSelf={isChatWithSelf}\n        isGroupChatJustCreated={isGroupChatJustCreated}\n      />\n    ) : activeKey === Content.MessageList ? (\n      <MessageListContent\n        canShowAds={areAdsEnabled && isChannelChat}\n        chatId={chatId}\n        isComments={isComments}\n        isChannelChat={isChannelChat}\n        isChatMonoforum={isChatMonoforum}\n        isSavedDialog={isSavedDialog}\n        messageIds={messageIds || [lastMessage!.id]}\n        messageGroups={messageGroups || groupMessages([lastMessage!])}\n        getContainerHeight={getContainerHeight}\n        isViewportNewest={Boolean(isViewportNewest)}\n        isUnread={Boolean(firstUnreadId)}\n        isEmptyThread={isEmptyThread}\n        withUsers={withUsers}\n        noAvatars={noAvatars}\n        containerRef={containerRef}\n        anchorIdRef={anchorIdRef}\n        memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n        memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n        threadId={threadId}\n        type={type}\n        isReady={isReady}\n        hasLinkedChat={hasLinkedChat}\n        isSchedule={messageGroups ? type === 'scheduled' : false}\n        shouldRenderAccountInfo={isBot || isNonContact}\n        nameChangeDate={nameChangeDate}\n        photoChangeDate={photoChangeDate}\n        noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n        isQuickPreview={isQuickPreview}\n        onScrollDownToggle={onScrollDownToggle}\n        onNotchToggle={onNotchToggle}\n        onIntersectPinnedMessage={onIntersectPinnedMessage}\n        canPost={canPost}\n      />\n    ) : (\n      <Loading color=\"white\" backgroundColor=\"dark\" />\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      className={className}\n      name=\"fade\"\n      activeKey={activeKey}\n      shouldCleanup\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {renderContent()}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): Complete<StateProps> => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId } as Complete<StateProps>;\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId } as Complete<StateProps>;\n    }\n\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    const restrictionReasons = selectActiveRestrictionReasons(global, chat?.restrictionReasons);\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    const monoforumChannelId = selectMonoforumChannel(global, chatId)?.id;\n    const canTranslate = selectCanTranslateChat(global, chatId) && !chatFullInfo?.isTranslationDisabled;\n    const shouldAutoTranslate = chat?.hasAutoTranslation;\n    const translationLanguage = selectTranslationLanguage(global);\n\n    const currentMessageList = selectCurrentMessageList(global);\n    const isActive = currentMessageList && currentMessageList.chatId === chatId\n      && currentMessageList.threadId === threadId && currentMessageList.type === type;\n\n    return {\n      isActive,\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReasons,\n      isChannelChat: isChatChannel(chat),\n      isChatMonoforum: isChatMonoforum(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      lastMessage: withLastMessageWhenPreloading ? lastMessage : undefined,\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n      monoforumChannelId,\n      canTranslate,\n      translationLanguage,\n      shouldAutoTranslate,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: ElementRef<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\",\"contextMenu\":\"FHxnbOg6\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MESSAGE_APPEARANCE_DELAY,\n} from '../../../config';\nimport {\n  getMainUsername,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n    canPost?: boolean;\n    isInFocusList?: boolean;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  canPost,\n  isInFocusList,\n}) => {\n  const { openChat, updateInsertingPeerIdMention } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const isAvatarPeerUser = avatarPeer && isApiPeerUser(avatarPeer);\n\n  const handleOpenChat = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleMention = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (messageInput) {\n      updateInsertingPeerIdMention({ peerId: avatarPeer.id });\n    }\n  });\n\n  const handleAvatarClick = useLastCallback(() => {\n    handleOpenChat();\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    noMountTransition: isShown,\n    withShouldRender: true,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(avatarRef);\n\n  const getTriggerElement = useLastCallback(() => avatarRef.current);\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n  const getMenuElement = useLastCallback(\n    () => avatarRef?.current?.querySelector(`.${styles.contextMenu} .bubble`),\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const canMention = canPost && avatarPeer && (isAvatarPeerUser || Boolean(getMainUsername(avatarPeer)));\n  const shouldRenderContextMenu = Boolean(contextMenuAnchor) && (isAvatarPeerUser || canMention) && !isInFocusList;\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n        getMenuElement={getMenuElement}\n        className={styles.contextMenu}\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        withPortal\n        autoClose\n      >\n        <>\n          {isAvatarPeerUser && (\n            <MenuItem\n              icon=\"comments\"\n              onClick={handleOpenChat}\n            >\n              {lang('SendMessage')}\n            </MenuItem>\n          )}\n          {canMention && (\n            <MenuItem\n              icon=\"mention\"\n              onClick={handleMention}\n            >\n              {lang('ContextMenuItemMention')}\n            </MenuItem>\n          )}\n        </>\n      </Menu>\n    );\n  }\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n        onContextMenu={handleContextMenu}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {renderAvatar()}\n          {shouldRenderContextMenu && renderContextMenu()}\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): Complete<StateProps> => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { ApiMediaExtendedPreview, ApiPhoto, ApiVideo } from '../../../../api/types';\n\nimport {\n  calculateExtendedPreviewDimensions,\n  calculateInlineImageDimensions,\n  calculateVideoDimensions,\n  REM,\n} from '../../../common/helpers/mediaDimensions';\n\nconst SMALL_IMAGE_THRESHOLD = 12;\nconst MIN_MESSAGE_LENGTH_FOR_BLUR = 40;\nconst MIN_MEDIA_WIDTH = SMALL_IMAGE_THRESHOLD * REM;\nexport const MIN_MEDIA_HEIGHT = 5 * REM;\n\nexport function getMinMediaWidthWithText(isMobile: boolean) {\n  return (isMobile ? 14 : 20) * REM;\n}\n\nexport function getMinMediaWidth(text: string = '', isMobile: boolean, hasCommentButton?: boolean) {\n  return text.length > MIN_MESSAGE_LENGTH_FOR_BLUR || hasCommentButton\n    ? getMinMediaWidthWithText(isMobile)\n    : MIN_MEDIA_WIDTH;\n}\n\nexport function calculateMediaDimensions({\n  media,\n  messageText,\n  isOwn,\n  isInWebPage,\n  asForwarded,\n  noAvatars,\n  isMobile,\n}: {\n  media: ApiPhoto | ApiVideo | ApiMediaExtendedPreview;\n  messageText?: string;\n  isOwn?: boolean;\n  isInWebPage?: boolean;\n  asForwarded?: boolean;\n  noAvatars?: boolean;\n  isMobile: boolean;\n}) {\n  const isPhoto = media.mediaType === 'photo';\n  const isVideo = media.mediaType === 'video';\n  const isWebPagePhoto = isPhoto && isInWebPage;\n  const isWebPageVideo = isVideo && isInWebPage;\n  const { width, height } = isPhoto\n    ? calculateInlineImageDimensions(media, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile)\n    : isVideo ? calculateVideoDimensions(media, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile)\n      : calculateExtendedPreviewDimensions(media, isOwn, asForwarded, isInWebPage, noAvatars, isMobile);\n\n  const minMediaWidth = getMinMediaWidth(messageText, isMobile);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","import type { MediaContainer, SizeTarget } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport { getMessageMediaHash } from '../../global/helpers/messageMedia';\nimport useSelector from '../data/useSelector';\n\nfunction selectWebPagesById(global: GlobalState) {\n  return global.messages.webPageById;\n}\n\nexport default function useMessageMediaHash(message: MediaContainer | undefined, target: SizeTarget) {\n  const webPagesById = useSelector(selectWebPagesById);\n  if (!message) return undefined;\n\n  const webPageId = message.content.webPage?.id;\n  const webPage = webPageId ? webPagesById[webPageId] : undefined;\n\n  return getMessageMediaHash(message, { webPage }, target);\n}\n","import { useCallback, useEffect, useState } from '../lib/teact/teact';\n\ntype UseLocalStorageProps<T> = {\n  key: string;\n  initValue: T;\n};\n\nexport function useLocalStorage<T>({ key, initValue }: UseLocalStorageProps<T>):\n[value: T, setValue: (val: T) => void] {\n  const eventName = `update_storage_${key}`;\n\n  const getStoredValue: () => (T | undefined) = useCallback(() => {\n    const value = localStorage.getItem(key);\n    if (value !== null) {\n      try {\n        return JSON.parse(value);\n      } catch (e) {\n        console.error((e as Error).message);\n      }\n    }\n    return undefined;\n  }, [key]);\n\n  const writeValue: (value: T) => void = useCallback((value) => {\n    const stringifiedValue = JSON.stringify(value);\n    if (localStorage.getItem(key) !== stringifiedValue) {\n      localStorage.setItem(key, stringifiedValue);\n      window.dispatchEvent(new Event(eventName));\n    }\n  }, [eventName, key]);\n\n  const restoreValue: () => T = useCallback(() => {\n    const storedValue = getStoredValue();\n    if (storedValue !== undefined) {\n      return storedValue;\n    } else {\n      writeValue(initValue);\n      return initValue;\n    }\n  }, [getStoredValue, writeValue, initValue]);\n\n  const [state, setState] = useState<T>(restoreValue());\n\n  useEffect(() => {\n    const listenStorageChange = () => {\n      setState(restoreValue());\n    };\n    window.addEventListener(eventName, listenStorageChange);\n    return () => window.removeEventListener(eventName, listenStorageChange);\n  }, [eventName, restoreValue]);\n\n  const setStateSafe = (value: T) => {\n    try {\n      writeValue(value);\n    } catch (e) {\n      console.error((e as Error).message);\n    }\n  };\n\n  return [state, setStateSafe];\n}\n","import { IS_TOUCH_ENV } from './browser/windowEnvironment';\n\nexport default function focusEditableElement(element: HTMLElement, force?: boolean, forcePlaceCaretAtEnd?: boolean) {\n  if (!force && element === document.activeElement) {\n    return;\n  }\n\n  const selection = window.getSelection()!;\n  const range = document.createRange();\n  const lastChild = element.lastChild || element;\n\n  if (!IS_TOUCH_ENV && !forcePlaceCaretAtEnd && (!lastChild || !lastChild.nodeValue)) {\n    element.focus();\n    return;\n  }\n\n  range.selectNodeContents(forcePlaceCaretAtEnd ? element : lastChild);\n  // `false` means collapse to the end rather than the start\n  range.collapse(false);\n  selection.removeAllRanges();\n  selection.addRange(range);\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\nimport useLastCallback from './useLastCallback';\n\nconst MENU_CLOSE_TIMEOUT = 250;\nlet closeTimeout: number | undefined;\n\nexport default function useMouseInside(\n  isOpen: boolean, onClose: NoneToVoidFunction, menuCloseTimeout = MENU_CLOSE_TIMEOUT, isDisabled = false,\n) {\n  const isMouseInside = useRef(false);\n\n  const markMouseInside = useLastCallback(() => {\n    isMouseInside.current = true;\n  });\n\n  useEffect(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    if (isOpen && !IS_TOUCH_ENV && !isDisabled) {\n      closeTimeout = window.setTimeout(() => {\n        if (!isMouseInside.current) {\n          onClose();\n        }\n      }, menuCloseTimeout * 2);\n    }\n  }, [isDisabled, isOpen, menuCloseTimeout, onClose]);\n\n  const handleMouseEnter = useLastCallback(() => {\n    isMouseInside.current = true;\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        onClose();\n      }\n    }, menuCloseTimeout);\n  });\n\n  return [handleMouseEnter, handleMouseLeave, markMouseInside];\n}\n","import { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiWebPage } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { TextPart } from '../../types';\n\nimport {\n  getFirstLinkInMessage,\n  getMessageTextWithFallback,\n} from '../../global/helpers';\nimport { selectWebPageFromMessage } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatPastTimeShort } from '../../util/dates/dateFormat';\nimport trimText from '../../util/trimText';\nimport { renderMessageSummary } from './helpers/renderMessageText';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\nimport Media from './Media';\nimport SafeLink from './SafeLink';\n\nimport './WebLink.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype ApiWebPageWithFormatted =\n  ApiWebPage\n  & { formattedDescription?: TextPart[] };\n\ntype OwnProps = {\n  message: ApiMessage;\n  senderTitle?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onMessageClick: (message: ApiMessage) => void;\n};\n\ntype StateProps = {\n  webPage?: ApiWebPage;\n};\n\nconst WebLink = ({\n  message, webPage, senderTitle, isProtected, observeIntersection, onMessageClick,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  let linkData: ApiWebPageWithFormatted | undefined = webPage;\n\n  if (!linkData) {\n    const link = getFirstLinkInMessage(message);\n    if (link) {\n      const { url, domain } = link;\n\n      linkData = {\n        siteName: domain.replace(/^www./, ''),\n        url: url.includes('://') ? url : url.includes('@') ? `mailto:${url}` : `http://${url}`,\n        formattedDescription: getMessageTextWithFallback(lang, message)?.text !== url\n          ? renderMessageSummary(lang, message, undefined, undefined, MAX_TEXT_LENGTH)\n          : undefined,\n      } as ApiWebPageWithFormatted;\n    }\n  }\n\n  const handleMessageClick = useLastCallback(() => {\n    onMessageClick(message);\n  });\n\n  if (linkData?.webpageType !== 'full') {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    formattedDescription,\n    photo,\n    video,\n  } = linkData;\n\n  const truncatedDescription = !senderTitle && description && trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebLink scroll-item',\n    (!photo && !video) && 'without-media',\n  );\n\n  const safeLinkContent = url.replace('mailto:', '') || displayUrl;\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {photo && (\n        <Media message={message} isProtected={isProtected} observeIntersection={observeIntersection} />\n      )}\n      <div className=\"content\">\n        <Link isRtl={lang.isRtl} className=\"site-title\" onClick={handleMessageClick}>\n          {renderText(title || siteName || displayUrl)}\n        </Link>\n        {(truncatedDescription || formattedDescription) && (\n          <Link isRtl={lang.isRtl} className=\"site-description\" onClick={handleMessageClick}>\n            {formattedDescription || (truncatedDescription && renderText(truncatedDescription))}\n          </Link>\n        )}\n        <SafeLink\n          url={url}\n          className=\"site-name\"\n          text={safeLinkContent}\n          isRtl={lang.isRtl}\n        />\n        {senderTitle && <div className=\"sender-name\">{renderText(senderTitle)}</div>}\n      </div>\n      {senderTitle && (\n        <div className=\"message-date\">\n          <Link\n            className=\"date\"\n            onClick={handleMessageClick}\n            isRtl={lang.isRtl}\n          >\n            {formatPastTimeShort(oldLang, message.date * 1000)}\n          </Link>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message,\n  }): Complete<StateProps> => {\n    const webPage = selectWebPageFromMessage(global, message);\n\n    return {\n      webPage,\n    };\n  },\n)(WebLink));\n","import { areSortedArraysEqual } from './iteratees';\n\nconst cache = new WeakMap<AnyFunction, {\n  lastArgs: any[];\n  lastResult: any;\n}>();\n\nexport default function memoized<T extends AnyFunction>(fn: T) {\n  return (...args: Parameters<T>): ReturnType<T> => {\n    const cached = cache.get(fn);\n    if (cached && areSortedArraysEqual(cached.lastArgs, args)) {\n      return cached.lastResult;\n    }\n\n    const result = fn(...args);\n    cache.set(fn, { lastArgs: args, lastResult: result });\n    return result;\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport CustomEmoji from './CustomEmoji';\nimport TopicDefaultIcon from './TopicDefaultIcon';\n\ntype OwnProps = {\n  topic: Pick<ApiTopic, 'iconEmojiId' | 'iconColor' | 'title' | 'id'>;\n  className?: string;\n  letterClassName?: string;\n  size?: number;\n  noLoopLimit?: true;\n  observeIntersection?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\nconst LOOP_LIMIT = 2;\nconst DEFAULT_ICON_ID = '0';\n\nconst TopicIcon: FC<OwnProps> = ({\n  topic,\n  className,\n  letterClassName,\n  size,\n  noLoopLimit,\n  observeIntersection,\n  onClick,\n}) => {\n  if (topic.iconEmojiId && topic.iconEmojiId !== DEFAULT_ICON_ID) {\n    return (\n      <CustomEmoji\n        documentId={topic.iconEmojiId}\n        className={className}\n        size={size}\n        observeIntersectionForPlaying={observeIntersection}\n        loopLimit={!noLoopLimit ? LOOP_LIMIT : undefined}\n        onClick={onClick}\n      />\n    );\n  }\n\n  return (\n    <TopicDefaultIcon\n      iconColor={topic.iconColor}\n      title={topic.title}\n      topicId={topic.id}\n      className={className}\n      letterClassName={letterClassName}\n      onClick={onClick}\n    />\n  );\n};\n\nexport default memo(TopicIcon);\n","import { useRef, useUnmountCleanup } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst DEFAULT_THRESHOLD = 250;\n\nfunction useLongPress({\n  onClick, onStart, onEnd, threshold = DEFAULT_THRESHOLD,\n}: {\n  onStart?: NoneToVoidFunction;\n  onClick?: (event: React.MouseEvent | React.TouchEvent) => void;\n  onEnd?: NoneToVoidFunction;\n  threshold?: number;\n}) {\n  const isLongPressActive = useRef(false);\n  const isPressed = useRef(false);\n  const timerId = useRef<number | undefined>(undefined);\n\n  const start = useLastCallback((e: React.MouseEvent | React.TouchEvent) => {\n    const canProcessEvent = ('button' in e && e.button === 0) || ('touches' in e && e.touches.length > 0);\n    if (isPressed.current || !canProcessEvent) {\n      return;\n    }\n\n    isPressed.current = true;\n    timerId.current = window.setTimeout(() => {\n      onStart?.();\n      isLongPressActive.current = true;\n    }, threshold);\n  });\n\n  const end = useLastCallback((e: React.MouseEvent | React.TouchEvent) => {\n    if (!isPressed.current) return;\n\n    if (isLongPressActive.current) {\n      onEnd?.();\n    } else {\n      onClick?.(e);\n    }\n\n    cancel();\n  });\n\n  const cancel = useLastCallback(() => {\n    isLongPressActive.current = false;\n    isPressed.current = false;\n    window.clearTimeout(timerId.current);\n  });\n\n  useUnmountCleanup(() => {\n    window.clearTimeout(timerId.current);\n  });\n\n  return {\n    onMouseDown: start,\n    onMouseUp: end,\n    onMouseLeave: end,\n    onTouchStart: start,\n    onTouchEnd: end,\n  };\n}\n\nexport default useLongPress;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"LzylDSXD\",\"customBgImage\":\"iBGWkDsW\",\"customBgColor\":\"HnpqkkHj\",\"withTransition\":\"V96TOnoY\",\"blurred\":\"K_W7XNrk\",\"withRightColumn\":\"EiMC9Ymb\"};","const extractorEl = document.createElement('div');\n\nexport function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n\nexport function getHtmlBeforeSelection(container?: HTMLElement, useCommonAncestor?: boolean) {\n  if (!container) {\n    return '';\n  }\n\n  const sel = window.getSelection();\n  if (!sel || !sel.rangeCount) {\n    return container.innerHTML;\n  }\n\n  const range = sel.getRangeAt(0).cloneRange();\n  if (!range.intersectsNode(container)) {\n    return container.innerHTML;\n  }\n\n  if (!useCommonAncestor && !container.contains(range.commonAncestorContainer)) {\n    return '';\n  }\n\n  range.collapse(true);\n  range.setStart(container, 0);\n\n  extractorEl.innerHTML = '';\n  extractorEl.appendChild(range.cloneContents());\n\n  return extractorEl.innerHTML;\n}\n\n// https://stackoverflow.com/a/3976125\nexport function getCaretPosition(element: HTMLElement) {\n  let caretPosition = 0;\n  const selection = window.getSelection();\n  if (!selection || selection.rangeCount === 0) {\n    return caretPosition;\n  }\n\n  const range = selection.getRangeAt(0);\n  const caretRange = range.cloneRange();\n  caretRange.selectNodeContents(element);\n  caretRange.setEnd(range.endContainer, range.endOffset);\n  caretPosition = caretRange.toString().length;\n\n  return caretPosition;\n}\n\n// https://stackoverflow.com/a/36953852\nexport function setCaretPosition(element: Node, position: number) {\n  for (const node of element.childNodes) {\n    if (node.nodeType === Node.TEXT_NODE) {\n      if ((node as Text).length >= position) {\n        const range = document.createRange();\n        const selection = window.getSelection()!;\n        range.setStart(node, position);\n        range.collapse(true);\n        selection.removeAllRanges();\n        selection.addRange(range);\n\n        return -1;\n      } else {\n        position -= 'length' in node ? node.length as number : 0;\n      }\n    } else {\n      position = setCaretPosition(node, position);\n      if (position === -1) {\n        return -1;\n      }\n    }\n  }\n\n  return position;\n}\n\nexport function removeAllSelections() {\n  const selection = window.getSelection();\n  selection?.removeAllRanges();\n}\n","import type { ThemeKey } from '../../../../types';\n\nimport { MAX_WORKERS, requestMediaWorker } from '../../../../util/launchMediaWorkers';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, id: number, isSelected?: boolean, theme?: ThemeKey,\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n\n  return requestMediaWorker({\n    name: 'offscreen-canvas:getAppendixColorFromImage',\n    args: [src, isOwn],\n  }, Math.round(id) % MAX_WORKERS);\n}\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TEST } from '../config';\n\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (IS_TEST) return [];\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker, undefined, 'media');\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n\nexport function requestMediaWorker(payload: Parameters<Connector<MediaWorkerApi>['request']>[0], index: number) {\n  return launchMediaWorkers()[index].connector.request(payload);\n}\n","import { useEffect, useSignal } from '../lib/teact/teact';\n\nexport default function useGetSelectionRange(inputSelector: string) {\n  const [getRange, setRange] = useSignal<Range | undefined>();\n\n  useEffect(() => {\n    function onSelectionChange() {\n      const selection = window.getSelection();\n      if (!selection?.rangeCount) return;\n\n      const range = selection.getRangeAt(0);\n      if (!range) {\n        return;\n      }\n\n      const inputEl = document.querySelector(inputSelector);\n      if (!inputEl) {\n        return;\n      }\n\n      const { commonAncestorContainer } = range;\n      const element = commonAncestorContainer instanceof Element\n        ? commonAncestorContainer\n        : commonAncestorContainer.parentElement!;\n      if (element.closest(inputSelector)) {\n        setRange(range);\n      }\n    }\n\n    document.addEventListener('selectionchange', onSelectionChange);\n\n    return () => document.removeEventListener('selectionchange', onSelectionChange);\n  }, [inputSelector, setRange]);\n\n  return getRange;\n}\n","import buildStyle from '../../util/buildStyle';\nimport useLastCallback from '../useLastCallback';\nimport useUniqueId from '../useUniqueId';\n\nconst VTN_PROPERTY_NAME = '--_vtn';\n\nCSS.registerProperty?.({\n  name: VTN_PROPERTY_NAME,\n  syntax: '*',\n  inherits: false,\n});\n\nexport function useVtn(uniqueId?: string) {\n  const fallbackId = useUniqueId();\n\n  // Pass `true` to use the same class name as the name parameter\n  const createVtnStyle = useLastCallback((name: string, vtClass?: string | boolean) => {\n    const vtClassString = vtClass === true ? name : (vtClass || undefined);\n    return buildStyle(\n      `${VTN_PROPERTY_NAME}: vtn-${name}-${uniqueId || fallbackId}`,\n      vtClassString && `view-transition-class: ${vtClassString}`,\n    );\n  });\n\n  return {\n    createVtnStyle,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './DropTarget.scss';\n\nexport type OwnProps = {\n  isQuick?: boolean;\n  isGeneric?: boolean;\n  onFileSelect: (e: React.DragEvent<HTMLDivElement>) => void;\n};\n\nconst DropTarget: FC<OwnProps> = ({ isQuick, isGeneric, onFileSelect }) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  const handleDragLeave = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { relatedTarget: toTarget } = e;\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  });\n\n  const className = buildClassName(\n    'DropTarget',\n    isHovered && 'hovered',\n  );\n\n  return (\n    <div\n      className={className}\n      ref={ref}\n      onDrop={onFileSelect}\n      onDragEnter={markHovered}\n      onDragLeave={handleDragLeave}\n      data-dropzone\n    >\n      <svg className=\"target-outline-container\">\n        <rect className=\"target-outline\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" rx=\"8\" />\n      </svg>\n      <div className=\"target-content\">\n        <Icon name={isQuick ? 'photo' : 'document'} />\n        <div className=\"title\">{lang('FileDropZoneTitle')}</div>\n        {!isGeneric && (\n          <div className=\"description\">\n            {isQuick ? lang('FileDropZoneQuick') : lang('FileDropZoneNoCompression')}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(DropTarget);\n","import { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { canReplaceMessageMedia } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildAttachment from './helpers/buildAttachment';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Portal from '../../ui/Portal';\nimport DropTarget from './DropTarget';\n\nimport './DropArea.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withQuick?: boolean;\n  editingMessage?: ApiMessage | undefined;\n  onHide: NoneToVoidFunction;\n  onFileSelect: (files: File[]) => void;\n};\n\nexport enum DropAreaState {\n  None = 'none',\n  Document = 'document',\n  QuickFile = 'quick_file',\n}\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst DropArea = ({\n  isOpen, withQuick, editingMessage, onHide, onFileSelect,\n}: OwnProps) => {\n  const lang = useLang();\n  const { showNotification, updateAttachmentSettings } = getActions();\n  const hideTimeoutRef = useRef<number>();\n  const prevWithQuick = usePreviousDeprecated(withQuick);\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onHide) : undefined), [isOpen, onHide]);\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    const { dataTransfer: dt } = e;\n    let files: File[] = [];\n\n    if (dt.files && dt.files.length > 0 && (!dt.items || !dt.items.length)) {\n      files = files.concat(Array.from(dt.files));\n    } else if (dt.items && dt.items.length > 0) {\n      const folderFiles = await getFilesFromDataTransferItems(dt.items);\n      if (folderFiles?.length) {\n        files = files.concat(folderFiles);\n      }\n    }\n\n    if (editingMessage) {\n      if (files.length > 1) {\n        showNotification({ message: lang('MediaReplaceInvalidError', undefined, { pluralValue: files.length }) });\n        return;\n      }\n\n      if (files.length === 1) {\n        const newAttachment = await buildAttachment(files[0].name, files[0]);\n        const canReplace = editingMessage && newAttachment && canReplaceMessageMedia(editingMessage, newAttachment);\n        if (!canReplace) {\n          showNotification({ message: lang('MediaReplaceInvalidError', undefined, { pluralValue: files.length }) });\n          return;\n        }\n      }\n    }\n\n    onHide();\n    updateAttachmentSettings({ shouldCompress: withQuick ? false : undefined });\n    onFileSelect(files);\n  });\n\n  const handleQuickFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    const { dataTransfer: dt } = e;\n\n    if (dt.files && dt.files.length > 0) {\n      const files = Array.from(dt.files);\n      if (editingMessage) {\n        if (files.length > 1) {\n          showNotification({ message: lang('MediaReplaceInvalidError', undefined, { pluralValue: files.length }) });\n          return;\n        }\n        if (files.length === 1) {\n          const newAttachment = await buildAttachment(files[0].name, files[0]);\n          const canReplace = editingMessage && newAttachment && canReplaceMessageMedia(editingMessage, newAttachment);\n          if (!canReplace) {\n            showNotification({ message: lang('MediaReplaceInvalidError', undefined, { pluralValue: files.length }) });\n            return;\n          }\n        }\n      }\n\n      onHide();\n      updateAttachmentSettings({ shouldCompress: true });\n      onFileSelect(files);\n    }\n  });\n\n  const handleDragLeave = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    const { target: fromTarget, relatedTarget: toTarget } = e;\n\n    // Esc button pressed during drag event\n    if (\n      (fromTarget as HTMLDivElement).matches('.DropTarget, .DropArea') && (\n        !toTarget || !(toTarget as HTMLDivElement).matches('.DropTarget, .DropArea')\n      )\n    ) {\n      hideTimeoutRef.current = window.setTimeout(() => {\n        onHide();\n      }, DROP_LEAVE_TIMEOUT_MS);\n    }\n  });\n\n  const handleDragOver = () => {\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n    }\n  };\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const shouldRenderQuick = withQuick || prevWithQuick;\n\n  const className = buildClassName(\n    'DropArea',\n    transitionClassNames,\n  );\n\n  return (\n    <Portal containerSelector=\"#middle-column-portals\">\n      <div\n        className={className}\n        onDragLeave={handleDragLeave}\n        onDragOver={handleDragOver}\n        onDrop={onHide}\n        onClick={onHide}\n      >\n        <DropTarget onFileSelect={handleFilesDrop} isGeneric={!shouldRenderQuick} />\n        {shouldRenderQuick && <DropTarget onFileSelect={handleQuickFilesDrop} isQuick />}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(DropArea);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nimport useForceUpdate from './useForceUpdate';\n\nexport type ReducerAction<Actions> = { type: Actions; payload?: any };\nexport type StateReducer<State, Actions> = (state: State, action: ReducerAction<Actions>) => State;\nexport type Dispatch<State, Actions> = (action: ReducerAction<Actions>) => State;\n\nexport default function useReducer<State, Actions>(\n  reducer: StateReducer<State, Actions>,\n  initialState: State,\n) {\n  const forceUpdate = useForceUpdate();\n  const reducerRef = useRef(reducer);\n  const state = useRef(initialState);\n\n  const dispatch = useCallback((action: ReducerAction<Actions>) => {\n    state.current = reducerRef.current(state.current, action);\n    forceUpdate();\n    return state.current;\n  }, []);\n\n  return [\n    state.current,\n    dispatch,\n  ] as [State, Dispatch<State, Actions>];\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { LOCAL_TGS_PREVIEW_URLS, LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\n\nimport './NothingFound.scss';\n\ninterface OwnProps {\n  text?: string;\n  description?: string;\n  withSticker?: boolean;\n}\n\nconst DEFAULT_TEXT = 'Nothing found.';\n\nconst NothingFound: FC<OwnProps> = ({ text = DEFAULT_TEXT, description, withSticker }) => {\n  const lang = useOldLang();\n  const { transitionClassNames } = useShowTransitionDeprecated(true);\n\n  return (\n    <div className={buildClassName(\n      'NothingFound',\n      transitionClassNames,\n      description && 'with-description',\n      withSticker && 'with-sticker')}\n    >\n      {withSticker && (\n        <AnimatedIconWithPreview\n          className=\"sticker\"\n          size={120}\n          tgsUrl={LOCAL_TGS_URLS.DuckNothingFound}\n          previewUrl={LOCAL_TGS_PREVIEW_URLS.DuckNothingFound}\n          nonInteractive\n          noLoop={false}\n        />\n      )}\n      {text}\n      {description && <p className=\"description\">{renderText(lang(description), ['br'])}</p>}\n    </div>\n  );\n};\n\nexport default memo(NothingFound);\n","import type { ApiBusinessTimetableSegment } from '../../api/types';\n\nconst DAY_MINUTES = 1440;\nconst WEEK_MINUTES = 10080;\n\n/**\n * @returns Monday 00:00 of the current week for the local timezone\n */\nexport function getWeekStart(): number {\n  const now = new Date();\n  now.setHours(0, 0, 0, 0);\n  const day = now.getDay();\n  const diff = now.getDate() - day + (day === 0 ? -6 : 1);\n  return new Date(now.setDate(diff)).getTime();\n}\n\n/**\n * @returns UTC offset in seconds\n */\nexport function getUtcOffset() {\n  return new Date().getTimezoneOffset() * -60;\n}\n\nexport function shiftTimeRanges(ranges: ApiBusinessTimetableSegment[], shift: number): ApiBusinessTimetableSegment[] {\n  if (shift === 0) return ranges;\n\n  const shiftedRanges: ApiBusinessTimetableSegment[] = [];\n\n  for (const range of ranges) {\n    let start = (range.startMinute + shift) % WEEK_MINUTES;\n    let end = (range.endMinute + shift) % WEEK_MINUTES;\n\n    if (start < 0) start += WEEK_MINUTES;\n    if (end <= 0) end += WEEK_MINUTES;\n\n    if (start > end) {\n      shiftedRanges.push({ startMinute: start, endMinute: WEEK_MINUTES - 1 });\n      shiftedRanges.push({ startMinute: 0, endMinute: end });\n    } else {\n      shiftedRanges.push({ startMinute: start, endMinute: end });\n    }\n  }\n\n  shiftedRanges.sort((a, b) => a.startMinute - b.startMinute);\n\n  // Combine overlapping ranges\n  return shiftedRanges.reduce<ApiBusinessTimetableSegment[]>((acc, range) => {\n    const last = acc[acc.length - 1];\n    if (last && last.endMinute >= range.startMinute) {\n      last.endMinute = Math.max(last.endMinute, range.endMinute);\n    } else {\n      acc.push(range);\n    }\n    return acc;\n  }, []);\n}\n\nexport function splitDays(ranges: ApiBusinessTimetableSegment[]): Record<number, ApiBusinessTimetableSegment[]> {\n  const days: Record<number, ApiBusinessTimetableSegment[]> = {};\n\n  for (const range of ranges) {\n    const start = range.startMinute;\n    const end = range.endMinute;\n\n    const dayStart = Math.floor(start / DAY_MINUTES);\n    const dayEnd = Math.floor((end - 1) / DAY_MINUTES); // 00:00 is counted as same day\n\n    for (let day = dayStart; day <= dayEnd; day++) {\n      if (!days[day]) {\n        days[day] = [];\n      }\n\n      days[day].push({\n        startMinute: Math.max(0, start - day * DAY_MINUTES),\n        endMinute: Math.min(DAY_MINUTES, end - day * DAY_MINUTES),\n      });\n    }\n  }\n\n  return days;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ef_0p5Qm\",\"top\":\"nHSmCUNs\",\"icon\":\"rlM4Mbnn\",\"left\":\"JTZ8UnnP\",\"bottom\":\"lp9VIV1o\",\"status\":\"JVL7ZnnJ\",\"status-open\":\"segAfYXs\",\"statusOpen\":\"segAfYXs\",\"arrow\":\"dYxw2cFn\",\"offset-trigger\":\"gVwflFhz\",\"offsetTrigger\":\"gVwflFhz\",\"transition\":\"WKgL_XiP\",\"timetable\":\"MPBKHdZL\",\"schedule\":\"Rs0VPgpq\",\"weekday\":\"cmxPqAof\",\"current-day\":\"YZVvP_56\",\"currentDay\":\"YZVvP_56\"};","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiBusinessWorkHours } from '../../../api/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatWeekday } from '../../../util/dates/dateFormat';\nimport {\n  getUtcOffset, getWeekStart, shiftTimeRanges, splitDays,\n} from '../../../util/dates/workHours';\n\nimport useSelectorSignal from '../../../hooks/data/useSelectorSignal';\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\nimport Icon from '../icons/Icon';\n\nimport styles from './BusinessHours.module.scss';\n\nconst DAYS = Array.from({ length: 7 }, (_, i) => i);\n\ntype OwnProps = {\n  businessHours: ApiBusinessWorkHours;\n};\n\nconst BusinessHours = ({\n  businessHours,\n}: OwnProps) => {\n  const transitionRef = useRef<HTMLDivElement>();\n  const [isExpanded, expand, collapse] = useFlag(false);\n  const [isMyTime, showInMyTime, showInLocalTime] = useFlag(false);\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  useInterval(forceUpdate, 60 * 1000);\n\n  const timezoneSignal = useSelectorSignal((global) => global.timezones?.byId);\n  const timezones = useDerivedState(timezoneSignal, [timezoneSignal]);\n  const timezoneMinuteDifference = useMemo(() => {\n    if (!timezones) return 0;\n    const timezone = timezones[businessHours.timezoneId];\n    const myOffset = getUtcOffset();\n    return (myOffset - timezone.utcOffset) / 60;\n  }, [businessHours.timezoneId, timezones]);\n\n  const workHours = useMemo(() => {\n    const weekStart = getWeekStart();\n    const shiftedHours = shiftTimeRanges(businessHours.workHours, isMyTime ? timezoneMinuteDifference : 0);\n    const days = splitDays(shiftedHours);\n    const result: Record<number, string[]> = {};\n\n    DAYS.forEach((day) => {\n      const segments = days[day];\n      if (!segments) {\n        result[day] = [lang('BusinessHoursDayClosed')];\n        return;\n      }\n\n      result[day] = segments.map(({ startMinute, endMinute }) => {\n        if (endMinute - startMinute === 24 * 60) return lang('BusinessHoursDayFullOpened');\n        const start = formatTime(lang, weekStart + startMinute * 60 * 1000);\n        const end = formatTime(lang, weekStart + endMinute * 60 * 1000);\n        return `${start} – ${end}`;\n      });\n    });\n\n    return result;\n  }, [businessHours.workHours, isMyTime, lang, timezoneMinuteDifference]);\n\n  const isBusinessOpen = useMemo(() => {\n    const localTimeHours = shiftTimeRanges(businessHours.workHours, timezoneMinuteDifference);\n\n    const weekStart = getWeekStart();\n    const now = new Date().getTime();\n    const minutesSinceWeekStart = (now - weekStart) / 1000 / 60;\n\n    return localTimeHours.some(({ startMinute, endMinute }) => (\n      startMinute <= minutesSinceWeekStart && minutesSinceWeekStart <= endMinute\n    ));\n  }, [businessHours.workHours, timezoneMinuteDifference]);\n\n  const currentDay = useMemo(() => {\n    const now = new Date(Date.now() - (isMyTime ? 0 : timezoneMinuteDifference * 60 * 1000));\n    return (now.getDay() + 6) % 7;\n  }, [isMyTime, timezoneMinuteDifference]);\n\n  const handleClick = useLastCallback(() => {\n    if (isExpanded) {\n      collapse();\n    } else {\n      expand();\n    }\n  });\n\n  const handleTriggerOffset = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    if (isMyTime) {\n      showInLocalTime();\n    } else {\n      showInMyTime();\n    }\n  });\n\n  useEffect(() => {\n    if (!isExpanded) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.timetable}`);\n    if (!slide) return;\n\n    const height = slide.offsetHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height}px`;\n    });\n  }, [isExpanded]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.timetable}`)!;\n\n    requestMeasure(() => {\n      const height = slide.offsetHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height}px`;\n      });\n    });\n  });\n\n  return (\n    <ListItem\n      icon=\"clock\"\n      iconClassName={styles.icon}\n      multiline\n      className={styles.root}\n      isStatic={isExpanded}\n      ripple\n      narrow\n      withColorTransition\n      onClick={handleClick}\n    >\n      <div className={styles.top}>\n        <div className={styles.left}>\n          <div>{lang('BusinessHoursProfile')}</div>\n          <div className={buildClassName(styles.status, isBusinessOpen && styles.statusOpen)}>\n            {isBusinessOpen ? lang('BusinessHoursProfileNowOpen') : lang('BusinessHoursProfileNowClosed')}\n          </div>\n        </div>\n        <Icon className={styles.arrow} name={isExpanded ? 'up' : 'down'} />\n      </div>\n      {isExpanded && (\n        <div className={styles.bottom}>\n          {Boolean(timezoneMinuteDifference) && (\n            <div\n              className={styles.offsetTrigger}\n              role=\"button\"\n              tabIndex={0}\n              onMouseDown={!IS_TOUCH_ENV ? handleTriggerOffset : undefined}\n              onClick={IS_TOUCH_ENV ? handleTriggerOffset : undefined}\n            >\n              {lang(isMyTime ? 'BusinessHoursProfileSwitchMy' : 'BusinessHoursProfileSwitchLocal')}\n            </div>\n          )}\n          <Transition\n            className={styles.transition}\n            ref={transitionRef}\n            name=\"fade\"\n            activeKey={Number(isMyTime)}\n            onStart={handleAnimationStart}\n          >\n            <dl className={styles.timetable}>\n              {DAYS.map((day) => (\n                <>\n                  <dt className={buildClassName(styles.weekday, day === currentDay && styles.currentDay)}>\n                    {formatWeekday(lang, day === 6 ? 0 : day + 1)}\n                  </dt>\n                  <dd className={styles.schedule}>\n                    {workHours[day].map((segment) => (\n                      <div>{segment}</div>\n                    ))}\n                  </dd>\n                </>\n              ))}\n            </dl>\n          </Transition>\n        </div>\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(BusinessHours);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wCp6TBYF\",\"number\":\"lQeU96Fj\",\"float\":\"nKt3QDc_\",\"show-up\":\"ZaSLCV2k\",\"showUp\":\"ZaSLCV2k\",\"dissapear\":\"jA50ot3v\",\"shiftOrigin\":\"e1ezfWJb\",\"effect\":\"cFEXGUih\",\"giftIcon\":\"c4HDQNGJ\"};","import {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  type ApiBirthday, ApiMediaFormat, type ApiStickerSet, type ApiUser,\n} from '../../../api/types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport { selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport renderText from '../helpers/renderText';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport StickerView from '../StickerView';\n\nimport styles from './UserBirthday.module.scss';\n\nconst NUMBER_EMOJI_SUFFIX = '\\uFE0F\\u20E3';\nconst NUMBER_STICKER_SIZE = 128;\nconst EFFECT_EMOJIS = ['🎉', '🎆', '🎈'];\nconst EFFECT_SIZE = 288;\nconst ANIMATION_DURATION = 3000;\n\ntype OwnProps = {\n  user: ApiUser;\n  birthday: ApiBirthday;\n  isInSettings?: boolean;\n};\n\ntype StateProps = {\n  isPremiumPurchaseBlocked?: boolean;\n  birthdayNumbers?: ApiStickerSet;\n  animatedEmojiEffects?: ApiStickerSet;\n};\n\nconst UserBirthday = ({\n  user,\n  birthday,\n  isPremiumPurchaseBlocked,\n  birthdayNumbers,\n  animatedEmojiEffects,\n  isInSettings,\n}: OwnProps & StateProps) => {\n  const { openGiftModal, requestConfetti } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const animationPlayedRef = useRef(false);\n  const [isPlayingAnimation, playAnimation, stopAnimation] = useFlag();\n\n  const lang = useLang();\n\n  const {\n    formattedDate,\n    isToday,\n    age,\n  } = useMemo(() => {\n    const today = new Date();\n    const date = new Date();\n    if (birthday.year) {\n      date.setFullYear(birthday.year);\n    }\n    date.setMonth(birthday.month - 1);\n    date.setDate(birthday.day);\n    date.setHours(0, 0, 0, 0);\n\n    const formatted = formatDateToString(date, lang.code, true, 'long');\n    const isBirthdayToday = date.getDate() === today.getDate() && date.getMonth() === today.getMonth();\n    return {\n      formattedDate: formatted,\n      isToday: isBirthdayToday,\n      age: birthday.year && getAge(date),\n    };\n  }, [birthday, lang]);\n\n  const numbersForAge = useMemo(() => {\n    if (!age || !isToday) return undefined;\n    const numbers = birthdayNumbers?.stickers?.filter(({ emoji }) => emoji?.endsWith(NUMBER_EMOJI_SUFFIX));\n    if (!numbers) return undefined;\n    const byEmoji = buildCollectionByKey(numbers, 'emoji');\n\n    const ageDigits = age.toString().split('');\n    return ageDigits.map((digit) => byEmoji[digit + NUMBER_EMOJI_SUFFIX]);\n  }, [age, birthdayNumbers?.stickers, isToday]);\n\n  const effectSticker = useMemo(() => {\n    if (!isToday) return undefined;\n    const randomEffect = EFFECT_EMOJIS[Math.floor(Math.random() * EFFECT_EMOJIS.length)];\n    return animatedEmojiEffects?.stickers?.find(({ emoji }) => emoji === randomEffect);\n  }, [animatedEmojiEffects?.stickers, isToday]);\n\n  // Preload stickers\n  useEffect(() => {\n    if (!isToday || !numbersForAge) return;\n\n    numbersForAge.forEach((sticker) => {\n      const hash = getStickerMediaHash(sticker, 'preview');\n      mediaLoader.fetch(hash, ApiMediaFormat.BlobUrl);\n    });\n\n    if (effectSticker) {\n      const effectHash = getStickerMediaHash(effectSticker, 'preview');\n      mediaLoader.fetch(effectHash, ApiMediaFormat.BlobUrl);\n    }\n  }, [effectSticker, isToday, numbersForAge]);\n\n  useTimeout(stopAnimation, isPlayingAnimation ? ANIMATION_DURATION : undefined);\n\n  useEffect(() => {\n    if (isPlayingAnimation) {\n      animationPlayedRef.current = true;\n\n      const column = document.getElementById(isInSettings ? 'LeftColumn' : 'RightColumn');\n      if (!column) return;\n\n      requestMeasure(() => {\n        const {\n          top, left, width, height,\n        } = column.getBoundingClientRect();\n\n        requestConfetti({\n          top,\n          left,\n          width,\n          height,\n          style: 'top-down',\n        });\n      });\n    }\n  }, [isInSettings, isPlayingAnimation]);\n\n  const value = useMemo(() => {\n    if (age) {\n      return lang(\n        `ProfileBirthday${isToday ? 'Today' : ''}ValueYear`,\n        { date: formattedDate, age },\n        { pluralValue: age },\n      );\n    }\n\n    return lang(`ProfileBirthday${isToday ? 'Today' : ''}Value`, { date: formattedDate });\n  }, [age, formattedDate, isToday, lang]);\n\n  const canGiftPremium = isToday && !user.isPremium && !user.isSelf && !isPremiumPurchaseBlocked;\n\n  const handleOpenGiftModal = useLastCallback(() => {\n    openGiftModal({ forUserId: user.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!isToday) return;\n\n    if (canGiftPremium && animationPlayedRef.current) {\n      handleOpenGiftModal();\n      return;\n    }\n\n    playAnimation();\n  });\n\n  const isStatic = !isToday && !canGiftPremium;\n\n  return (\n    <div className={styles.root}>\n      <ListItem\n        icon=\"calendar\"\n        secondaryIcon={canGiftPremium ? 'gift' : undefined}\n        secondaryIconClassName={styles.giftIcon}\n        multiline\n        narrow\n        ref={ref}\n        ripple={!isStatic}\n        onClick={handleClick}\n        isStatic={isStatic}\n        onSecondaryIconClick={handleOpenGiftModal}\n      >\n        <div className=\"title\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {renderText(value)}\n        </div>\n        <span className=\"subtitle\">{lang(isToday ? 'ProfileBirthdayToday' : 'ProfileBirthday')}</span>\n      </ListItem>\n      {isPlayingAnimation && IS_OFFSET_PATH_SUPPORTED && numbersForAge?.map((sticker, index) => (\n        <div\n          className={buildClassName(styles.number, index > 0 && styles.shiftOrigin)}\n          style={`--digit-offset: ${index}`}\n        >\n          <StickerView\n            containerRef={ref}\n            sticker={sticker}\n            size={NUMBER_STICKER_SIZE}\n            forceAlways\n          />\n        </div>\n      ))}\n      {isPlayingAnimation && effectSticker && (\n        <div className={styles.effect}>\n          <StickerView\n            containerRef={ref}\n            sticker={effectSticker}\n            size={EFFECT_SIZE}\n            shouldLoop\n            forceAlways\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { birthdayNumbers, animatedEmojiEffects } = global;\n    return {\n      birthdayNumbers,\n      animatedEmojiEffects,\n      isPremiumPurchaseBlocked: selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(UserBirthday));\n\n// https://stackoverflow.com/a/7091965\nfunction getAge(birthdate: Date) {\n  const today = new Date();\n  let age = today.getFullYear() - birthdate.getFullYear();\n  const m = today.getMonth() - birthdate.getMonth();\n  if (m < 0 || (m === 0 && today.getDate() < birthdate.getDate())) {\n    age--;\n  }\n\n  return age;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"businessLocation\":\"UZbkeFDB\",\"personalChannel\":\"HP5EJx7s\",\"personalChannelTitle\":\"cHyTGri2\",\"botVerificationSection\":\"RWFu5ENh\",\"sectionInfo\":\"IrqRJFxm\",\"botVerificationIcon\":\"b32hsSPS\",\"personalChannelSubscribers\":\"kYd2GrmU\",\"personalChannelItem\":\"qOJwhXMC\",\"openAppButton\":\"x925YeS3\"};","import {\n  memo, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiBotVerification,\n  ApiChat,\n  ApiCountryCode,\n  ApiUser,\n  ApiUserFullInfo,\n  ApiUsername,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type BotAppPermissions, ManagementScreens } from '../../../types';\n\nimport {\n  FRAGMENT_PHONE_CODE, FRAGMENT_PHONE_LENGTH, MUTE_INDEFINITE_TIMESTAMP, UNMUTE_TIMESTAMP,\n} from '../../../config';\nimport {\n  buildStaticMapHash,\n  getChatLink,\n  getHasAdminRight,\n  isChatAdmin,\n  isChatChannel,\n  isUserRightBanned,\n} from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectBotAppPermissions,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatRestricted,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTopicLink,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport stopEvent from '../../../util/stopEvent';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { ChatAnimationTypes } from '../../left/main/hooks';\nimport formatUsername from '../helpers/formatUsername';\nimport renderText from '../helpers/renderText';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Chat from '../../left/main/Chat';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Skeleton from '../../ui/placeholder/Skeleton';\nimport Switcher from '../../ui/Switcher';\nimport CustomEmoji from '../CustomEmoji';\nimport SafeLink from '../SafeLink';\nimport BusinessHours from './BusinessHours';\nimport UserBirthday from './UserBirthday';\n\nimport styles from './ChatExtra.module.scss';\n\ntype OwnProps = {\n  chatOrUserId: string;\n  isOwnProfile?: boolean;\n  isSavedDialog?: boolean;\n  isInSettings?: boolean;\n  className?: string;\n  style?: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  canInviteUsers?: boolean;\n  isMuted?: boolean;\n  phoneCodeList: ApiCountryCode[];\n  topicId?: number;\n  description?: string;\n  chatInviteLink?: string;\n  topicLink?: string;\n  hasSavedMessages?: boolean;\n  personalChannel?: ApiChat;\n  hasMainMiniApp?: boolean;\n  isBotCanManageEmojiStatus?: boolean;\n  botAppPermissions?: BotAppPermissions;\n  botVerification?: ApiBotVerification;\n  canViewSubscribers?: boolean;\n};\n\nconst DEFAULT_MAP_CONFIG = {\n  width: 64,\n  height: 64,\n  zoom: 15,\n};\n\nconst BOT_VERIFICATION_ICON_SIZE = 16;\n\nconst ChatExtra = ({\n  chatOrUserId,\n  user,\n  chat,\n  userFullInfo,\n  isOwnProfile,\n  canInviteUsers,\n  isMuted,\n  phoneCodeList,\n  topicId,\n  description,\n  chatInviteLink,\n  topicLink,\n  hasSavedMessages,\n  personalChannel,\n  hasMainMiniApp,\n  isBotCanManageEmojiStatus,\n  botAppPermissions,\n  botVerification,\n  className,\n  style,\n  isInSettings,\n  canViewSubscribers,\n}: OwnProps & StateProps) => {\n  const {\n    showNotification,\n    updateChatMutedState,\n    updateTopicMutedState,\n    loadPeerStories,\n    openSavedDialog,\n    openMapModal,\n    requestCollectibleInfo,\n    requestMainWebView,\n    toggleUserEmojiStatusPermission,\n    toggleUserLocationPermission,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const {\n    id: userId,\n    usernames,\n    phoneNumber,\n    isSelf,\n  } = user || {};\n  const { id: chatId, usernames: chatUsernames } = chat || {};\n  const peerId = userId || chatId;\n  const {\n    businessLocation,\n    businessWorkHours,\n    personalChannelMessageId,\n    birthday,\n  } = userFullInfo || {};\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffectWithPrevDeps(([prevPeerId]) => {\n    if (!peerId || prevPeerId === peerId) return;\n    if (user || (chat && isChatChannel(chat))) {\n      loadPeerStories({ peerId });\n    }\n  }, [peerId, chat, user]);\n\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n  const locationMediaHash = businessLocation?.geo\n    && buildStaticMapHash(businessLocation.geo, width, height, zoom, dpr);\n  const locationBlobUrl = useMedia(locationMediaHash);\n\n  const locationRightComponent = useMemo(() => {\n    if (!businessLocation?.geo) return undefined;\n    if (locationBlobUrl) {\n      return <img src={locationBlobUrl} alt=\"\" className={styles.businessLocation} />;\n    }\n\n    return <Skeleton className={styles.businessLocation} />;\n  }, [businessLocation, locationBlobUrl]);\n\n  const isTopicInfo = Boolean(topicId && topicId !== MAIN_THREAD_ID);\n  const shouldRenderAllLinks = (chat && isChatChannel(chat)) || user?.isPremium;\n\n  const activeUsernames = useMemo(() => {\n    const result = usernames?.filter((u) => u.isActive);\n\n    return result?.length ? result : undefined;\n  }, [usernames]);\n\n  const activeChatUsernames = useMemo(() => {\n    const result = !user ? chatUsernames?.filter((u) => u.isActive) : undefined;\n\n    return result?.length ? result : undefined;\n  }, [chatUsernames, user]);\n\n  const link = useMemo(() => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return isTopicInfo ? topicLink! : getChatLink(chat) || chatInviteLink;\n  }, [chat, isTopicInfo, topicLink, chatInviteLink]);\n\n  const handleClickLocation = useLastCallback(() => {\n    const { address, geo } = businessLocation!;\n    if (!geo) {\n      copyTextToClipboard(address);\n      showNotification({ message: oldLang('BusinessLocationCopied') });\n      return;\n    }\n\n    openMapModal({ geoPoint: geo, zoom });\n  });\n\n  const handleToggleNotifications = useLastCallback(() => {\n    const mutedUntil = isMuted ? UNMUTE_TIMESTAMP : MUTE_INDEFINITE_TIMESTAMP;\n    if (isTopicInfo) {\n      updateTopicMutedState({\n        chatId: chatId!,\n        topicId: topicId!,\n        mutedUntil,\n      });\n    } else {\n      updateChatMutedState({ chatId: chatId!, mutedUntil });\n    }\n  });\n\n  const manageEmojiStatusChange = useLastCallback(() => {\n    if (!user) return;\n    toggleUserEmojiStatusPermission({ botId: user.id, isEnabled: !isBotCanManageEmojiStatus });\n  });\n\n  const handleLocationPermissionChange = useLastCallback(() => {\n    if (!user) return;\n    toggleUserLocationPermission({ botId: user.id, isAccessGranted: !botAppPermissions?.geolocation });\n  });\n\n  const handleOpenSavedDialog = useLastCallback(() => {\n    openSavedDialog({ chatId: chatOrUserId });\n  });\n\n  function copy(text: string, entity: string) {\n    copyTextToClipboard(text);\n    showNotification({ message: `${entity} was copied` });\n  }\n\n  const formattedNumber = phoneNumber && formatPhoneNumberWithCode(phoneCodeList, phoneNumber);\n\n  const handlePhoneClick = useLastCallback(() => {\n    if (phoneNumber?.length === FRAGMENT_PHONE_LENGTH && phoneNumber.startsWith(FRAGMENT_PHONE_CODE)) {\n      requestCollectibleInfo({ collectible: phoneNumber, peerId: peerId!, type: 'phone' });\n      return;\n    }\n    copy(formattedNumber!, oldLang('Phone'));\n  });\n\n  const handleUsernameClick = useLastCallback((username: ApiUsername, isChat?: boolean) => {\n    if (!username.isEditable) {\n      requestCollectibleInfo({ collectible: username.username, peerId: peerId!, type: 'username' });\n      return;\n    }\n    copy(formatUsername(username.username, isChat), oldLang(isChat ? 'Link' : 'Username'));\n  });\n\n  const handleOpenSubscribers = useLastCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.ChannelSubscribers });\n  });\n\n  const handleOpenApp = useLastCallback(() => {\n    const botId = user?.id;\n    if (!botId) {\n      return;\n    }\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId,\n      peerId: botId,\n      theme,\n      shouldMarkBotTrusted: true,\n    });\n  });\n\n  const appTermsInfo = lang('ProfileOpenAppAbout', {\n    terms: (\n      <SafeLink\n        text={lang('ProfileOpenAppTerms')}\n        url={lang('ProfileBotOpenAppInfoLink')}\n      />\n    ),\n  }, { withNodes: true });\n\n  const isRestricted = chatId ? selectIsChatRestricted(getGlobal(), chatId) : false;\n  if (isRestricted || (isSelf && !isOwnProfile && !isInSettings)) {\n    return undefined;\n  }\n\n  function renderUsernames(usernameList: ApiUsername[], isChat?: boolean) {\n    const [mainUsername, ...otherUsernames] = usernameList;\n\n    const usernameLinks = otherUsernames.length\n      ? (oldLang('UsernameAlso', '%USERNAMES%'))\n        .split('%')\n        .map((s) => {\n          return (s === 'USERNAMES' ? (\n            <>\n              {otherUsernames.map((username, idx) => {\n                return (\n                  <>\n                    {idx > 0 ? ', ' : ''}\n                    <a\n                      key={username.username}\n                      href={formatUsername(username.username, true)}\n                      onMouseDown={stopEvent}\n                      onClick={(e) => {\n                        stopEvent(e);\n                        handleUsernameClick(username, isChat);\n                      }}\n                      className=\"text-entity-link username-link\"\n                    >\n                      {formatUsername(username.username)}\n                    </a>\n                  </>\n                );\n              })}\n            </>\n          ) : s);\n        })\n      : undefined;\n\n    return (\n      <ListItem\n        icon={isChat ? 'link' : 'mention'}\n        multiline\n        narrow\n        ripple\n\n        onClick={() => {\n          handleUsernameClick(mainUsername, isChat);\n        }}\n      >\n        <span className=\"title\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {formatUsername(mainUsername.username, isChat)}\n        </span>\n        <span className=\"subtitle\">\n          {usernameLinks && <span className=\"other-usernames\">{usernameLinks}</span>}\n          {oldLang(isChat ? 'Link' : 'Username')}\n        </span>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className={buildClassName('ChatExtra', className)} style={style}>\n      {personalChannel && (\n        <div className={styles.personalChannel}>\n          <h3 className={styles.personalChannelTitle}>{oldLang('ProfileChannel')}</h3>\n          <span className={styles.personalChannelSubscribers}>\n            {oldLang('Subscribers', personalChannel.membersCount, 'i')}\n          </span>\n          <Chat\n            chatId={personalChannel.id}\n            orderDiff={0}\n            animationType={ChatAnimationTypes.None}\n            isPreview\n            previewMessageId={personalChannelMessageId}\n            className={styles.personalChannelItem}\n          />\n        </div>\n      )}\n      {Boolean(formattedNumber?.length) && (\n\n        <ListItem icon=\"phone\" multiline narrow ripple onClick={handlePhoneClick}>\n          <span className=\"title\" dir={lang.isRtl ? 'rtl' : undefined}>{formattedNumber}</span>\n          <span className=\"subtitle\">{oldLang('Phone')}</span>\n        </ListItem>\n      )}\n      {activeUsernames && renderUsernames(activeUsernames)}\n      {description && Boolean(description.length) && (\n        <ListItem\n          icon=\"info\"\n          multiline\n          narrow\n          isStatic\n          allowSelection\n        >\n          <span className=\"title word-break allow-selection\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {\n              renderText(description, [\n                'br',\n                shouldRenderAllLinks ? 'links' : 'tg_links',\n                'emoji',\n              ])\n            }\n          </span>\n          <span className=\"subtitle\">{oldLang(userId ? 'UserBio' : 'Info')}</span>\n        </ListItem>\n      )}\n      {activeChatUsernames && !isTopicInfo && renderUsernames(activeChatUsernames, true)}\n      {((!activeChatUsernames && canInviteUsers) || isTopicInfo) && link && (\n        <ListItem\n          icon=\"link\"\n          multiline\n          narrow\n          ripple\n\n          onClick={() => copy(link, oldLang('SetUrlPlaceholder'))}\n        >\n          <div className=\"title\">{link}</div>\n          <span className=\"subtitle\">{oldLang('SetUrlPlaceholder')}</span>\n        </ListItem>\n      )}\n      {birthday && (\n        <UserBirthday key={peerId} birthday={birthday} user={user!} isInSettings={isInSettings} />\n      )}\n      {hasMainMiniApp && (\n        <ListItem\n          multiline\n          isStatic\n          narrow\n        >\n          <Button\n            className={styles.openAppButton}\n            onClick={handleOpenApp}\n          >\n            {oldLang('ProfileBotOpenApp')}\n          </Button>\n          <div className={styles.sectionInfo}>\n            {appTermsInfo}\n          </div>\n        </ListItem>\n      )}\n      {!isOwnProfile && !isInSettings && (\n        <ListItem icon={isMuted ? 'mute' : 'unmute'} narrow ripple onClick={handleToggleNotifications}>\n          <span>{lang('Notifications')}</span>\n          <Switcher\n            id=\"group-notifications\"\n            label={lang(userId ? 'AriaToggleUserNotifications' : 'AriaToggleChatNotifications')}\n            checked={!isMuted}\n            inactive\n          />\n        </ListItem>\n      )}\n      {businessWorkHours && (\n        <BusinessHours businessHours={businessWorkHours} />\n      )}\n      {businessLocation && (\n        <ListItem\n          icon=\"location\"\n          ripple\n          multiline\n          narrow\n          rightElement={locationRightComponent}\n          onClick={handleClickLocation}\n        >\n          <div className=\"title\">{businessLocation.address}</div>\n          <span className=\"subtitle\">{oldLang('BusinessProfileLocation')}</span>\n        </ListItem>\n      )}\n      {hasSavedMessages && !isOwnProfile && !isInSettings && (\n        <ListItem icon=\"saved-messages\" narrow ripple onClick={handleOpenSavedDialog}>\n          <span>{oldLang('SavedMessagesTab')}</span>\n        </ListItem>\n      )}\n      {userFullInfo && 'isBotAccessEmojiGranted' in userFullInfo && (\n        <ListItem icon=\"user\" narrow ripple onClick={manageEmojiStatusChange}>\n          <span>{oldLang('BotProfilePermissionEmojiStatus')}</span>\n          <Switcher\n            label={oldLang('BotProfilePermissionEmojiStatus')}\n            checked={isBotCanManageEmojiStatus}\n            inactive\n          />\n        </ListItem>\n      )}\n      {botAppPermissions?.geolocation !== undefined && (\n        <ListItem icon=\"location\" narrow ripple onClick={handleLocationPermissionChange}>\n          <span>{oldLang('BotProfilePermissionLocation')}</span>\n          <Switcher\n            label={oldLang('BotProfilePermissionLocation')}\n            checked={botAppPermissions?.geolocation}\n            inactive\n          />\n        </ListItem>\n      )}\n      {canViewSubscribers && (\n        <ListItem icon=\"group\" narrow multiline ripple onClick={handleOpenSubscribers}>\n          <div className=\"title\">{lang('ProfileItemSubscribers')}</div>\n          <span className=\"subtitle\">{lang.number(chat?.membersCount || 0)}</span>\n        </ListItem>\n      )}\n      {botVerification && (\n        <div className={styles.botVerificationSection}>\n          <CustomEmoji\n            className={styles.botVerificationIcon}\n            documentId={botVerification.iconId}\n            size={BOT_VERIFICATION_ICON_SIZE}\n          />\n          {botVerification.description}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatOrUserId, isSavedDialog }): Complete<StateProps> => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n\n    const chat = chatOrUserId ? selectChat(global, chatOrUserId) : undefined;\n    const user = chatOrUserId ? selectUser(global, chatOrUserId) : undefined;\n    const botAppPermissions = chatOrUserId ? selectBotAppPermissions(global, chatOrUserId) : undefined;\n    const isForum = chat?.isForum;\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const topicId = isForum && threadId ? Number(threadId) : undefined;\n\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const userFullInfo = user && selectUserFullInfo(global, user.id);\n\n    const botVerification = userFullInfo?.botVerification || chatFullInfo?.botVerification;\n\n    const chatInviteLink = chatFullInfo?.inviteLink;\n    const description = userFullInfo?.bio || chatFullInfo?.about;\n\n    const canViewSubscribers = chat && isChatChannel(chat) && isChatAdmin(chat);\n    const canInviteUsers = chat && !user && (\n      (!isChatChannel(chat) && !isUserRightBanned(chat, 'inviteUsers'))\n      || getHasAdminRight(chat, 'inviteUsers')\n    );\n\n    const topicLink = topicId ? selectTopicLink(global, chatOrUserId, topicId) : undefined;\n\n    const hasSavedMessages = !isSavedDialog && global.chats.listIds.saved?.includes(chatOrUserId);\n\n    const personalChannel = userFullInfo?.personalChannelId\n      ? selectChat(global, userFullInfo.personalChannelId)\n      : undefined;\n\n    const hasMainMiniApp = user?.hasMainMiniApp;\n\n    return {\n      phoneCodeList,\n      chat,\n      user,\n      userFullInfo,\n      canInviteUsers,\n      botAppPermissions,\n      isMuted,\n      topicId,\n      chatInviteLink,\n      description,\n      topicLink,\n      hasSavedMessages,\n      personalChannel,\n      hasMainMiniApp,\n      isBotCanManageEmojiStatus: userFullInfo?.isBotCanManageEmojiStatus,\n      botVerification,\n      canViewSubscribers,\n    };\n  },\n)(ChatExtra));\n","import { validateFiles } from '../../../../util/files';\n\nexport default async function getFilesFromDataTransferItems(dataTransferItems: DataTransferItemList) {\n  const files: File[] = [];\n\n  function traverseFileTreePromise(entry: FileSystemEntry | File, item: DataTransferItem) {\n    return new Promise((resolve) => {\n      if (entry instanceof File) {\n        files.push(entry);\n        resolve(entry);\n      } else if (entry.isFile) {\n        const itemFile = item.getAsFile();\n        (entry as FileSystemFileEntry).file((file) => {\n          files.push(file);\n          resolve(file);\n        }, () => {\n          // iOS Safari throws an error \"NotFoundError: Path does not exist\" for files from the clipboard\n          // https://stackoverflow.com/a/50059309\n          if (itemFile) {\n            files.push(itemFile);\n          }\n          resolve(itemFile);\n        });\n      } else if (entry.isDirectory) {\n        const dirReader = (entry as FileSystemDirectoryEntry).createReader();\n        dirReader.readEntries((entries) => {\n          const entriesPromises = [];\n          for (let i = 0; i < entries.length; i++) {\n            entriesPromises.push(traverseFileTreePromise(entries[i], item));\n          }\n          resolve(Promise.all(entriesPromises));\n        });\n      }\n    });\n  }\n\n  const entriesPromises = [];\n  for (let i = 0; i < dataTransferItems.length; i++) {\n    const item = dataTransferItems[i];\n    if (item.kind === 'file') {\n      const entry = item.webkitGetAsEntry() || item.getAsFile();\n      if (entry) {\n        entriesPromises.push(traverseFileTreePromise(entry, item));\n      }\n    }\n  }\n\n  await Promise.all(entriesPromises);\n\n  return validateFiles(files);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Icon from './icons/Icon';\n\nimport styles from './LinkField.module.scss';\n\ntype OwnProps = {\n  title?: string;\n  link: string;\n  isDisabled?: boolean;\n  className?: string;\n  withShare?: boolean;\n  onRevoke?: VoidFunction;\n};\n\nconst InviteLink: FC<OwnProps> = ({\n  title,\n  link,\n  isDisabled,\n  className,\n  withShare,\n  onRevoke,\n}) => {\n  const lang = useOldLang();\n  const { showNotification, openChatWithDraft } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const isOnlyCopy = !onRevoke;\n\n  const copyLink = useLastCallback(() => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: {\n        key: 'LinkCopied',\n      },\n    });\n  });\n\n  const handleCopyClick = useLastCallback(() => {\n    if (isDisabled) return;\n    copyLink();\n  });\n\n  const handleShare = useLastCallback(() => {\n    openChatWithDraft({ text: { text: link } });\n  });\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  return (\n    <div className={className}>\n      <p className={styles.title}>\n        {lang(title || 'InviteLink.InviteLink')}\n      </p>\n      <div className={styles.primaryLink}>\n        <input\n          className={buildClassName('form-control', styles.input)}\n          value={link}\n          readOnly\n          onClick={handleCopyClick}\n        />\n        {isOnlyCopy ? (\n          <Button\n            color=\"translucent\"\n            className={styles.copy}\n            size=\"smaller\"\n            round\n            disabled={isDisabled}\n            onClick={handleCopyClick}\n          >\n            <Icon name=\"copy\" />\n          </Button>\n        ) : (\n          <DropdownMenu\n            className={styles.moreMenu}\n            trigger={PrimaryLinkMenuButton}\n            positionX=\"right\"\n          >\n            <MenuItem icon=\"copy\" onClick={handleCopyClick} disabled={isDisabled}>{lang('Copy')}</MenuItem>\n            {onRevoke && (\n              <MenuItem icon=\"delete\" onClick={onRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n            )}\n          </DropdownMenu>\n        )}\n      </div>\n      {withShare && (\n        <Button\n          disabled={isDisabled}\n          onClick={handleShare}\n          className={styles.share}\n        >\n          {lang('FolderLinkScreen.LinkActionShare')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(InviteLink);\n","// extracted by mini-css-extract-plugin\nexport default {\"primaryLink\":\"xNjJHI7j\",\"input\":\"Ag6k_p7b\",\"moreMenu\":\"p7t3macG\",\"copy\":\"obuPXobw\",\"title\":\"vCMpiQTJ\",\"share\":\"Sbagy_Tm\"};","import { useMemo } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ApiChat, ApiTopic, ApiUser } from '../api/types';\nimport type { MenuItemContextAction } from '../components/ui/ListItem';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../config';\nimport { getCanDeleteChat, isChatArchived, isChatChannel, isChatGroup } from '../global/helpers';\nimport { IS_TAURI } from '../util/browser/globalEnvironment';\nimport { IS_OPEN_IN_NEW_TAB_SUPPORTED } from '../util/browser/windowEnvironment';\nimport { isUserId } from '../util/entities/ids';\nimport { compact } from '../util/iteratees';\nimport useLang from './useLang';\n\nconst useChatContextActions = ({\n  chat,\n  user,\n  folderId,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n  isSavedDialog,\n  currentUserId,\n  isPreview,\n  topics,\n  handleDelete,\n  handleMute,\n  handleUnmute,\n  handleChatFolderChange,\n  handleReport,\n}: {\n  chat: ApiChat | undefined;\n  user: ApiUser | undefined;\n  folderId?: number;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n  isSavedDialog?: boolean;\n  currentUserId?: string;\n  isPreview?: boolean;\n  topics?: Record<number, ApiTopic>;\n  handleDelete?: NoneToVoidFunction;\n  handleMute?: NoneToVoidFunction;\n  handleUnmute?: NoneToVoidFunction;\n  handleChatFolderChange: NoneToVoidFunction;\n  handleReport?: NoneToVoidFunction;\n}, isInSearch = false) => {\n  const lang = useLang();\n\n  const { isSelf } = user || {};\n  const isServiceNotifications = user?.id === SERVICE_NOTIFICATIONS_USER_ID;\n\n  const deleteTitle = useMemo(() => {\n    if (!chat) return undefined;\n\n    if (isSavedDialog) {\n      return lang('Delete');\n    }\n\n    if (isUserId(chat.id)) {\n      return lang('DeleteChat');\n    }\n\n    if (getCanDeleteChat(chat)) {\n      return lang('DeleteChat');\n    }\n\n    if (isChatChannel(chat)) {\n      return lang('ChannelLeave');\n    }\n\n    return lang('GroupLeaveGroup');\n  }, [chat, isSavedDialog, lang]);\n\n  return useMemo(() => {\n    if (!chat || isPreview) {\n      return undefined;\n    }\n\n    const {\n      toggleChatPinned,\n      toggleSavedDialogPinned,\n      toggleChatArchived,\n      markChatMessagesRead,\n      markChatUnread,\n      openChatInNewTab,\n      openQuickPreview,\n    } = getActions();\n\n    const actionOpenInNewTab = IS_OPEN_IN_NEW_TAB_SUPPORTED && {\n      title: IS_TAURI ? lang('ChatListOpenInNewWindow') : lang('ChatListOpenInNewTab'),\n      icon: 'open-in-new-tab',\n      handler: () => {\n        if (isSavedDialog) {\n          openChatInNewTab({ chatId: currentUserId!, threadId: chat.id });\n        } else {\n          openChatInNewTab({ chatId: chat.id });\n        }\n      },\n    };\n\n    const actionQuickPreview = !isSavedDialog && !chat.isForum && {\n      title: lang('QuickPreview'),\n      icon: 'eye-outline',\n      handler: () => {\n        openQuickPreview({\n          id: chat.id,\n        });\n      },\n    };\n\n    const togglePinned = () => {\n      if (isSavedDialog) {\n        toggleSavedDialogPinned({ id: chat.id });\n      } else {\n        toggleChatPinned({ id: chat.id, folderId: folderId! });\n      }\n    };\n\n    const actionPin = isPinned\n      ? {\n        title: lang('ChatListUnpinFromTop'),\n        icon: 'unpin',\n        handler: togglePinned,\n      }\n      : {\n        title: lang('ChatListPinToTop'),\n        icon: 'pin',\n        handler: togglePinned,\n      };\n\n    const actionDelete = {\n      title: deleteTitle,\n      icon: 'delete',\n      destructive: true,\n      handler: handleDelete,\n    };\n\n    if (isSavedDialog) {\n      return compact([actionOpenInNewTab, actionQuickPreview, actionPin, actionDelete]) as MenuItemContextAction[];\n    }\n\n    const actionAddToFolder = canChangeFolder ? {\n      title: lang('ChatListContextAddToFolder'),\n      icon: 'folder',\n      handler: handleChatFolderChange,\n    } : undefined;\n\n    const actionMute = isMuted\n      ? {\n        title: lang('ChatsUnmute'),\n        icon: 'unmute',\n        handler: handleUnmute,\n      }\n      : {\n        title: `${lang('ChatsMute')}...`,\n        icon: 'mute',\n        handler: handleMute,\n      };\n\n    if (isInSearch) {\n      return compact([\n        actionOpenInNewTab, actionQuickPreview, actionPin, actionAddToFolder, actionMute,\n      ]) as MenuItemContextAction[];\n    }\n\n    const actionMaskAsRead = (\n      chat.unreadCount || chat.hasUnreadMark || Object.values(topics || {}).some(({ unreadCount }) => unreadCount)\n    )\n      ? {\n        title: lang('ChatListContextMaskAsRead'),\n        icon: 'readchats',\n        handler: () => markChatMessagesRead({ id: chat.id }),\n      } : undefined;\n    const actionMarkAsUnread = !(chat.unreadCount || chat.hasUnreadMark) && !chat.isForum\n      ? { title: lang('ChatListContextMaskAsUnread'), icon: 'unread', handler: () => markChatUnread({ id: chat.id }) }\n      : undefined;\n\n    const actionArchive = isChatArchived(chat)\n      ? { title: lang('Unarchive'), icon: 'unarchive', handler: () => toggleChatArchived({ id: chat.id }) }\n      : { title: lang('Archive'), icon: 'archive', handler: () => toggleChatArchived({ id: chat.id }) };\n\n    const canReport = handleReport && !user && (isChatChannel(chat) || isChatGroup(chat));\n    const actionReport = canReport\n      ? { title: lang('ReportPeerReport'), icon: 'flag', handler: handleReport }\n      : undefined;\n\n    const isInFolder = folderId !== undefined;\n\n    return compact([\n      actionOpenInNewTab,\n      actionQuickPreview,\n      actionAddToFolder,\n      actionMaskAsRead,\n      actionMarkAsUnread,\n      actionPin,\n      !isSelf && actionMute,\n      !isSelf && !isServiceNotifications && !isInFolder && actionArchive,\n      actionReport,\n      actionDelete,\n    ]) as MenuItemContextAction[];\n  }, [\n    chat, user, canChangeFolder, lang, handleChatFolderChange, isPinned, isInSearch, isMuted, currentUserId,\n    handleDelete, handleMute, handleReport, folderId, isSelf, isServiceNotifications, isSavedDialog, deleteTitle,\n    isPreview, topics, handleUnmute,\n  ]);\n};\n\nexport default useChatContextActions;\n","import type { ApiGeoPoint } from '../api/types';\n\nconst PROVIDERS = {\n  google: 'https://maps.google.com/maps',\n  bing: 'https://bing.com/maps/default.aspx',\n  osm: 'https://www.openstreetmap.org',\n  apple: 'https://maps.apple.com',\n};\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(provider: keyof typeof PROVIDERS, point: Omit<ApiGeoPoint, 'accessHash'>, zoom = 15) {\n  const { lat, long } = point;\n  const providerUrl = PROVIDERS[provider];\n  switch (provider) {\n    case 'google':\n      return `${providerUrl}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n    case 'bing':\n      return `${providerUrl}?cp=${lat}~${long}&lvl=${zoom}&sp=point.${lat}_${long}`;\n    case 'apple':\n      return `${providerUrl}?q=${lat},${long}`;\n    case 'osm':\n    default:\n      return `${providerUrl}/?mlat=${lat}&mlon=${long}&zoom=${zoom}`;\n  }\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import type { FC, StateHookSetter } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport { formatStarsAsText } from '../../util/localization/format';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './PaymentMessageConfirmDialog.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n  userName?: string;\n  messagePriceInStars: number;\n  messagesCount: number;\n  shouldAutoApprove: boolean;\n  setAutoApprove: StateHookSetter<boolean>;\n  confirmHandler: NoneToVoidFunction;\n};\n\nconst PaymentMessageConfirmDialog: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  userName,\n  messagePriceInStars,\n  messagesCount,\n  shouldAutoApprove: shouldPaidMessageAutoApprove,\n  setAutoApprove: setShouldPaidMessageAutoApprove,\n  confirmHandler,\n}) => {\n  const lang = useLang();\n\n  const confirmPaymentMessage = lang('ConfirmationModalPaymentForMessage', {\n    user: userName,\n    amount: formatStarsAsText(lang, messagePriceInStars),\n    totalAmount: formatStarsAsText(lang, messagePriceInStars * messagesCount),\n    count: messagesCount,\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n    pluralValue: messagesCount,\n  });\n\n  const confirmLabel = lang('PayForMessage', { count: messagesCount }, {\n    withNodes: true,\n    pluralValue: messagesCount,\n  });\n\n  return (\n    <ConfirmDialog\n      title={lang('TitleConfirmPayment')}\n      confirmLabel={confirmLabel}\n      isOpen={isOpen}\n      onClose={onClose}\n      confirmHandler={confirmHandler}\n    >\n      {confirmPaymentMessage}\n      <Checkbox\n        className={styles.checkBox}\n        label={lang('DoNotAskAgain')}\n        checked={shouldPaidMessageAutoApprove}\n        onCheck={setShouldPaidMessageAutoApprove}\n      />\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(PaymentMessageConfirmDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkBox\":\"eScpikxM\"};","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HeaderMenuContainer';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default HeaderMenuContainerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { IAnchorPosition, MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens } from '../../types';\n\nimport { requestMeasure, requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getHasAdminRight,\n  getIsSavedDialog,\n  isAnonymousForwardsChat,\n  isChatBasicGroup, isChatChannel, isChatSuperGroup,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatBotNotStarted,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectTranslationLanguage,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { ARE_CALLS_SUPPORTED, IS_APP } from '../../util/browser/windowEnvironment';\nimport { isUserId } from '../../util/entities/ids';\nimport focusNoScroll from '../../util/focusNoScroll';\n\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n  isForForum?: boolean;\n  isMobile?: boolean;\n  onTopicSearch?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canUnblock?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canViewMonetization?: boolean;\n  canViewBoosts?: boolean;\n  canShowBoostModal?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  channelMonoforumId?: string;\n  pendingJoinRequests?: number;\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  noAnimation?: boolean;\n  canTranslate?: boolean;\n  isTranslating?: boolean;\n  translationLanguage: string;\n  language: string;\n  detectedChatLanguage?: string;\n  doNotTranslate: string[];\n  isAccountFrozen?: boolean;\n}\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isMobile,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canUnblock,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canViewMonetization,\n  canViewBoosts,\n  canShowBoostModal,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  channelMonoforumId,\n  pendingJoinRequests,\n  isRightColumnShown,\n  isForForum,\n  canExpandActions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  noAnimation,\n  canTranslate,\n  isTranslating,\n  translationLanguage,\n  language,\n  detectedChatLanguage,\n  doNotTranslate,\n  isAccountFrozen,\n  onTopicSearch,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openMiddleSearch,\n    restartBot,\n    requestMasterAndRequestCall,\n    requestNextManagementScreen,\n    showNotification,\n    openChat,\n    requestChatTranslation,\n    togglePeerTranslations,\n    openChatLanguageModal,\n    setSettingOption,\n    unblockUser,\n    setViewForumAsMessages,\n    openFrozenAccountModal,\n  } = getActions();\n  const menuButtonRef = useRef<HTMLButtonElement>();\n  const lang = useOldLang();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuAnchor, setMenuAnchor] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useLastCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuAnchor({ x: rect.right, y: rect.bottom });\n  });\n\n  const handleHeaderMenuClose = useLastCallback(() => {\n    setIsMenuOpen(false);\n  });\n\n  const handleHeaderMenuHide = useLastCallback(() => {\n    setMenuAnchor(undefined);\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId });\n    if (shouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId });\n  });\n\n  const handleTranslateClick = useLastCallback(() => {\n    if (isTranslating) {\n      requestChatTranslation({ chatId, toLanguageCode: undefined });\n      return;\n    }\n\n    requestChatTranslation({ chatId, toLanguageCode: translationLanguage });\n  });\n\n  const handleJoinRequestsClick = useLastCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  });\n\n  const handleSearchClick = useLastCallback(() => {\n    if (isForForum) {\n      onTopicSearch?.();\n      return;\n    }\n\n    openMiddleSearch();\n\n    if (noAnimation) {\n      // The second RAF is necessary because Teact must update the state and render the async component\n      requestMeasure(() => {\n        requestNextMutation(setFocusInSearchInput);\n      });\n    } else {\n      setFocusInSearchInput();\n    }\n  });\n\n  const handleAsMessagesClick = useLastCallback(() => {\n    openChat({ id: chatId });\n    setViewForumAsMessages({ chatId, isEnabled: true });\n  });\n\n  const handleRequestCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    requestMasterAndRequestCall({ userId: chatId });\n  });\n\n  const handleHotkeySearchClick = useLastCallback((e: KeyboardEvent) => {\n    if (!canSearch || !IS_APP || e.shiftKey) {\n      return;\n    }\n\n    e.preventDefault();\n    handleSearchClick();\n  });\n\n  const getTextWithLanguage = useCallback((langKey: string, langCode: string) => {\n    const simplified = langCode.split('-')[0];\n    const translationKey = `TranslateLanguage${simplified.toUpperCase()}`;\n    const name = lang(translationKey);\n    if (name !== translationKey) {\n      return lang(langKey, name);\n    }\n\n    const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n    return lang(`${langKey}Other`, translatedName);\n  }, [language, lang]);\n\n  const buttonText = useMemo(() => {\n    if (isTranslating) return lang('ShowOriginalButton');\n\n    return getTextWithLanguage('TranslateToButton', translationLanguage);\n  }, [translationLanguage, getTextWithLanguage, isTranslating, lang]);\n\n  const doNotTranslateText = useMemo(() => {\n    if (!detectedChatLanguage) return undefined;\n\n    return getTextWithLanguage('DoNotTranslateLanguage', detectedChatLanguage);\n  }, [getTextWithLanguage, detectedChatLanguage]);\n\n  const handleHide = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: false });\n    requestChatTranslation({ chatId, toLanguageCode: undefined });\n  });\n\n  const handleChangeLanguage = useLastCallback(() => {\n    openChatLanguageModal({ chatId });\n  });\n\n  const handleDoNotTranslate = useLastCallback(() => {\n    if (!detectedChatLanguage) return;\n\n    setSettingOption({\n      doNotTranslate: [...doNotTranslate, detectedChatLanguage],\n    });\n    requestChatTranslation({ chatId, toLanguageCode: undefined });\n\n    showNotification({ message: getTextWithLanguage('AddedToDoNotTranslate', detectedChatLanguage) });\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+F': handleHotkeySearchClick,\n  }), []));\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={isRightColumnShown}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('TranslateMessage')}\n      >\n        <Icon name=\"language\" />\n      </Button>\n    );\n  }, [isRightColumnShown, lang]);\n\n  return (\n    <div className=\"HeaderActions\">\n      {!isForForum && canTranslate && (\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"language\" onClick={handleTranslateClick}>\n            {buttonText}\n          </MenuItem>\n          <MenuItem icon=\"replace\" onClick={handleChangeLanguage}>\n            {lang('Chat.Translate.Menu.To')}\n          </MenuItem>\n          <MenuSeparator />\n          {detectedChatLanguage\n            && <MenuItem icon=\"hand-stop\" onClick={handleDoNotTranslate}>{doNotTranslateText}</MenuItem>}\n          <MenuItem icon=\"close-circle\" onClick={handleHide}>{lang('Hide')}</MenuItem>\n        </DropdownMenu>\n      )}\n      {!isMobile && (\n        <>\n          {canExpandActions && !shouldSendJoinRequest && (canSubscribe || shouldJoinToSend) && (\n            <Button\n              size=\"smaller\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && shouldSendJoinRequest && (\n            <Button\n              size=\"smaller\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang('ChannelJoinRequest')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"smaller\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canExpandActions && canUnblock && (\n            <Button\n              size=\"smaller\"\n              ripple\n              fluid\n              onClick={handleUnblock}\n            >\n              {lang('Unblock')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel={lang('Conversation.SearchPlaceholder')}\n            >\n              <Icon name=\"search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleRequestCall}\n              ariaLabel=\"Call\"\n            >\n              <Icon name=\"phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {!isForForum && Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <Icon name=\"user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <Icon name=\"more\" />\n      </Button>\n      {menuAnchor && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuAnchor}\n          withExtraActions={isMobile || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canViewBoosts={canViewBoosts}\n          canViewMonetization={canViewMonetization}\n          canShowBoostModal={canShowBoostModal}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          pendingJoinRequests={pendingJoinRequests}\n          onJoinRequestsClick={handleJoinRequestsClick}\n          withForumActions={isForForum}\n          channelMonoforumId={channelMonoforumId}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onAsMessagesClick={handleAsMessagesClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const isSuperGroup = Boolean(chat && isChatSuperGroup(chat));\n    const language = selectLanguageCode(global);\n    const translationLanguage = selectTranslationLanguage(global);\n    const isPrivate = isUserId(chatId);\n    const { doNotTranslate } = global.settings.byKey;\n\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    if (!chat || isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n        language,\n        translationLanguage,\n        doNotTranslate,\n      } as Complete<StateProps>;\n    }\n\n    const bot = selectBot(global, chatId);\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const fullInfo = chatFullInfo || userFullInfo;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global, isMobile);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canUnblock = isUserBlocked && !bot;\n    const canSubscribe = Boolean(\n      (isMainThread || chat.isForum) && (isChannel || isSuperGroup) && chat.isNotJoined && !chat.isMonoforum,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot && !chat.isSupport\n      && !isAnonymousForwardsChat(chat.id);\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isSavedDialog || (isMainThread && !canSubscribe);\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && isMainThread && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && isMainThread && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat))) && !chat.isMonoforum;\n    const canViewStatistics = isMainThread && chatFullInfo?.canViewStatistics;\n    const canViewMonetization = isMainThread && chatFullInfo?.canViewMonetization;\n    const canViewBoosts = isMainThread && !chat.isMonoforum\n      && (isSuperGroup || isChannel) && (canViewStatistics || getHasAdminRight(chat, 'postStories'));\n    const canShowBoostModal = !canViewBoosts && (isSuperGroup || isChannel) && !chat.isMonoforum;\n    const pendingJoinRequests = isMainThread ? chatFullInfo?.requestsPending : undefined;\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const noAnimation = !selectCanAnimateInterface(global);\n\n    const isTranslating = Boolean(selectRequestedChatTranslationLanguage(global, chatId));\n    const canTranslate = selectCanTranslateChat(global, chatId) && !fullInfo?.isTranslationDisabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const channelMonoforumId = isChatChannel(chat) ? chat.linkedMonoforumId : undefined;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canViewMonetization,\n      canViewBoosts,\n      canShowBoostModal,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      noAnimation,\n      canTranslate,\n      isTranslating,\n      translationLanguage,\n      language,\n      doNotTranslate,\n      detectedChatLanguage: chat.detectedLanguage,\n      canUnblock,\n      isAccountFrozen,\n      channelMonoforumId,\n    };\n  },\n)(HeaderActions));\n\nfunction setFocusInSearchInput() {\n  const searchInput = document.querySelector<HTMLInputElement>('#MiddleSearch input');\n  if (searchInput) {\n    focusNoScroll(searchInput);\n  }\n}\n","import type {\n  ElementRef } from '../../../lib/teact/teact';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n  useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { setExtraStyles } from '../../../lib/teact/teact-dom';\n\nimport { requestForcedReflow, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\n\nexport interface PaneState {\n  element?: HTMLElement;\n  height: number;\n  isOpen?: boolean;\n}\n\n// Max slide transition duration\nconst CLOSE_DURATION = 450;\nconst RESIZE_THROTTLE = 100;\n\nexport default function useHeaderPane<RefType extends HTMLElement = HTMLDivElement>({\n  ref: providedRef,\n  isOpen,\n  isDisabled,\n  withResizeObserver,\n  onStateChange,\n}: {\n  ref?: ElementRef<RefType>;\n  isOpen?: boolean;\n  isDisabled?: boolean;\n  withResizeObserver?: boolean;\n  onStateChange?: (state: PaneState) => void;\n}) {\n  const [shouldRender, setShouldRender] = useState(isOpen);\n  const localRef = useRef<RefType>();\n  const ref = providedRef || localRef;\n\n  const lastHeightRef = useRef(0);\n\n  const reset = useLastCallback(() => {\n    setShouldRender(true);\n    onStateChange?.({\n      element: undefined,\n      height: 0,\n      isOpen: false,\n    });\n  });\n\n  useEffect(() => {\n    if (isDisabled) {\n      reset();\n    }\n  }, [isDisabled]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldRender(true);\n    }\n  }, [isOpen]);\n\n  useUnmountCleanup(reset);\n\n  useTimeout(() => {\n    setShouldRender(false);\n    onStateChange?.({\n      height: 0,\n      isOpen: false,\n    });\n  }, !isOpen ? CLOSE_DURATION : undefined);\n\n  // Should be `useCallback` to trigger effect on deps change\n  const handleUpdate = useCallback(() => {\n    const element = ref.current;\n    if (isDisabled || !element || !shouldRender) return;\n\n    if (!isOpen) {\n      onStateChange?.({\n        element,\n        height: 0,\n        isOpen: false,\n      });\n      return;\n    }\n\n    requestForcedReflow(() => {\n      const currentHeight = element.offsetHeight;\n      lastHeightRef.current = currentHeight;\n      return () => {\n        onStateChange?.({\n          element,\n          height: currentHeight,\n          isOpen,\n        });\n      };\n    });\n  }, [isOpen, shouldRender, isDisabled, ref, onStateChange]);\n\n  const handleResize = useThrottledCallback(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const newHeight = element.offsetHeight;\n    if (newHeight === lastHeightRef.current) {\n      return;\n    }\n\n    handleUpdate();\n  }, [handleUpdate, ref], RESIZE_THROTTLE, true);\n\n  useLayoutEffect(handleUpdate, [handleUpdate]);\n\n  useResizeObserver(ref, handleResize, !withResizeObserver || !shouldRender);\n\n  return {\n    shouldRender,\n    ref,\n  };\n}\n\nexport function applyAnimationState(list: PaneState[], noTransition = false) {\n  let cumulativeHeight = 0;\n  for (let i = 0; i < list.length; i++) {\n    const state = list[i];\n    const element = state.element;\n    if (!element) {\n      continue;\n    }\n\n    const shiftPx = `${cumulativeHeight}px`;\n\n    const apply = () => {\n      setExtraStyles(element, {\n        transform: `translateY(${state.isOpen ? shiftPx : `calc(${shiftPx} - 100%)`})`,\n        zIndex: String(-i),\n        transition: noTransition ? 'none' : '',\n      });\n    };\n\n    if (!element.dataset.isPanelOpen && state.isOpen && !noTransition) {\n      // Start animation right above its final position\n      setExtraStyles(element, {\n        transform: `translateY(calc(${shiftPx} - 100%))`,\n        zIndex: String(-i),\n        transition: 'none',\n      });\n      element.dataset.isPanelOpen = 'true';\n      requestNextMutation(apply);\n    } else {\n      apply();\n    }\n\n    cumulativeHeight += state.height;\n  }\n}\n","interface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn }: OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiTooltip';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const EmojiTooltip = useModuleLoader(Bundles.Extra, 'EmojiTooltip', !isOpen);\n\n  return EmojiTooltip ? <EmojiTooltip {...props} /> : undefined;\n};\n\nexport default EmojiTooltipAsync;\n","export type MediaSessionHandlers = {\n  play?: () => void;\n  pause?: () => void;\n  stop?: () => void;\n\n  previoustrack?: () => void;\n  nexttrack?: () => void;\n\n  togglemicrophone?: () => void;\n  togglecamera?: () => void;\n  hangup?: () => void;\n\n  seekbackward?: (details: MediaSessionActionDetails) => void;\n  seekforward?: (details: MediaSessionActionDetails) => void;\n  seekTo?: ((details: MediaSessionActionDetails) => void);\n};\n\ninterface MediaMetadataParameters {\n  title?: string;\n  artist?: string;\n  album?: string;\n  artwork?: MediaImage[];\n}\n\nconst DEFAULT_HANDLERS = {\n  play: undefined,\n  pause: undefined,\n  seekbackward: undefined,\n  seekforward: undefined,\n  previoustrack: undefined,\n  nexttrack: undefined,\n  stop: undefined,\n  seekTo: undefined,\n};\n\nexport function registerMediaSession(metadata?: MediaMetadata, handlers?: MediaSessionHandlers) {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    if (metadata) updateMetadata(metadata);\n    if (handlers) setMediaSessionHandlers(handlers);\n  } else {\n    // eslint-disable-next-line no-console\n    console.warn('MediaSession API not supported in this browser');\n  }\n}\n\nexport function updateMetadata(metadata?: MediaMetadata) {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    // eslint-disable-next-line no-null/no-null\n    mediaSession.metadata = metadata ?? null;\n  }\n}\n\nexport function setMediaSessionHandlers(handlers: MediaSessionHandlers) {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    Object.entries({ ...DEFAULT_HANDLERS, ...handlers }).forEach(([key, handler]) => {\n      try {\n        // @ts-ignore API not standardized yet\n        mediaSession.setActionHandler(key, handler);\n      } catch (err) {\n        // Handler not supported, ignoring\n      }\n    });\n  }\n}\n\nexport function clearMediaSession() {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    // eslint-disable-next-line no-null/no-null\n    mediaSession.metadata = null;\n    setMediaSessionHandlers(DEFAULT_HANDLERS);\n    if (mediaSession.playbackState) mediaSession.playbackState = 'none';\n    mediaSession.setPositionState?.();\n  }\n}\n\nexport function setPlaybackState(state: 'none' | 'paused' | 'playing' = 'none') {\n  const { mediaSession } = window.navigator;\n  if (mediaSession && mediaSession.playbackState) {\n    mediaSession.playbackState = state;\n  }\n}\n\nexport function setPositionState(state?: MediaPositionState) {\n  if (!state || state.position === undefined || state.duration === undefined) return;\n  state.position = Math.min(state.position, state.duration);\n\n  const { mediaSession } = window.navigator;\n  mediaSession?.setPositionState?.(state);\n}\n\nexport function buildMediaMetadata({\n  title, artist, album, artwork,\n}: MediaMetadataParameters) {\n  if ('MediaMetadata' in window) {\n    return new window.MediaMetadata({\n      title,\n      artist,\n      album,\n      artwork,\n    });\n  }\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sG8AAzvK\",\"minimized\":\"lTOui0dp\",\"button\":\"bNkLqJf1\",\"title\":\"rMTpNazX\",\"unread-count\":\"O7esHjyC\",\"unreadCount\":\"O7esHjyC\",\"info\":\"OS2LWzdu\",\"name\":\"bkCtPuPQ\",\"icon\":\"f4LUPgr4\",\"avatarWrapper\":\"RMY__Znz\",\"avatar\":\"qeb0Aox1\",\"chatsPreview\":\"_1817Hwgd\",\"unread\":\"SS39xuL3\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { ARCHIVED_FOLDER_ID } from '../../../config';\nimport { getChatTitle } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { compact } from '../../../util/iteratees';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport { useFolderManagerForOrderedIds, useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Badge from '../../ui/Badge';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\nimport styles from './Archive.module.scss';\n\ntype OwnProps = {\n  archiveSettings: GlobalState['archiveSettings'];\n  onDragEnter?: NoneToVoidFunction;\n  onClick?: NoneToVoidFunction;\n};\n\nconst PREVIEW_SLICE = 5;\nconst ARCHIVE_CUSTOM_PEER: CustomPeer = {\n  isCustomPeer: true,\n  title: 'Archived Chats',\n  avatarIcon: 'archive-filled',\n  customPeerAvatarColor: '#9EAAB5',\n};\n\nconst Archive: FC<OwnProps> = ({\n  archiveSettings,\n  onDragEnter,\n  onClick,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  const orderedChatIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const unreadCounters = useFolderManagerForUnreadCounters();\n  const archiveUnreadCount = unreadCounters[ARCHIVED_FOLDER_ID]?.chatsCount;\n\n  const previewItems = useMemo(() => {\n    if (!orderedChatIds?.length) return lang('Loading');\n\n    const chatsById = getGlobal().chats.byId;\n\n    return orderedChatIds.slice(0, PREVIEW_SLICE).map((chatId, i, arr) => {\n      const isLast = i === arr.length - 1;\n      const chat = chatsById[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      const title = getChatTitle(lang, chat);\n\n      return (\n        <>\n          <span className={buildClassName(styles.chat, archiveUnreadCount && chat.unreadCount && styles.unread)}>\n            {renderText(title)}\n          </span>\n          {isLast ? '' : ', '}\n        </>\n      );\n    });\n  }, [orderedChatIds, lang, archiveUnreadCount]);\n\n  const contextActions = useMemo(() => {\n    const actionMinimize = !archiveSettings.isMinimized && {\n      title: lang('ContextArchiveCollapse'),\n      icon: 'collapse',\n      handler: () => {\n        updateArchiveSettings({ isMinimized: true });\n      },\n    } satisfies MenuItemContextAction;\n\n    const actionExpand = archiveSettings.isMinimized && {\n      title: lang('ContextArchiveExpand'),\n      icon: 'expand',\n      handler: () => {\n        updateArchiveSettings({ isMinimized: false });\n      },\n    } satisfies MenuItemContextAction;\n\n    const actionHide = {\n      title: lang('ContextArchiveToMenu'),\n      icon: 'archive-to-main',\n      handler: () => {\n        updateArchiveSettings({ isHidden: true });\n      },\n    } satisfies MenuItemContextAction;\n\n    return compact([actionMinimize, actionExpand, actionHide]);\n  }, [archiveSettings.isMinimized, lang, updateArchiveSettings]);\n\n  const handleDragEnter = useCallback((e) => {\n    e.preventDefault();\n    onDragEnter?.();\n  }, [onDragEnter]);\n\n  function renderCollapsed() {\n    return (\n      <div className={buildClassName(styles.info, 'info')}>\n        <div className=\"info-row\">\n          <div className={buildClassName('title', styles.title)}>\n            <h3 dir=\"auto\" className={buildClassName(styles.name, 'fullName')}>\n              <Icon name=\"archive-filled\" className={styles.icon} />\n              {lang('ArchivedChats')}\n            </h3>\n          </div>\n          <Badge\n            className={styles.unreadCount}\n            text={archiveUnreadCount ? formatIntegerCompact(lang, archiveUnreadCount) : undefined}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  function renderRegular() {\n    return (\n      <>\n        <div className={buildClassName('status', styles.avatarWrapper)}>\n          <Avatar peer={ARCHIVE_CUSTOM_PEER} />\n        </div>\n        <div className={buildClassName(styles.info, 'info')}>\n          <div className=\"info-row\">\n            <div className={buildClassName('title', styles.title)}>\n              <h3 dir=\"auto\" className={buildClassName(styles.name, 'fullName')}>{lang('ArchivedChats')}</h3>\n            </div>\n          </div>\n          <div className=\"subtitle\">\n            <div className={buildClassName('status', styles.chatsPreview)}>\n              {previewItems}\n            </div>\n            <Badge\n              className={styles.unreadCount}\n              text={archiveUnreadCount ? formatIntegerCompact(lang, archiveUnreadCount) : undefined}\n            />\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <ListItem\n      onClick={onClick}\n      onDragEnter={handleDragEnter}\n      className={buildClassName(\n        styles.root,\n        archiveSettings.isMinimized && styles.minimized,\n        'chat-item-clickable',\n        'chat-item-archive',\n      )}\n      buttonClassName={styles.button}\n      contextActions={contextActions}\n      withPortalForMenu\n    >\n      {archiveSettings.isMinimized ? renderCollapsed() : renderRegular()}\n    </ListItem>\n  );\n};\n\nexport default memo(Archive);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yftKUVDQ\",\"sticker\":\"UCBfMOiz\",\"title\":\"dB9cHelg\",\"description\":\"TJ_liZcJ\",\"is-ios\":\"z51XfrFn\",\"isIos\":\"z51XfrFn\",\"is-macos\":\"tiLqJXxs\",\"isMacos\":\"tiLqJXxs\",\"button-text\":\"aL7e0w4t\",\"buttonText\":\"aL7e0w4t\",\"centered\":\"NefQ8HbN\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiSticker } from '../../../api/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectAnimatedEmoji, selectChatFolder } from '../../../global/selectors';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './EmptyFolder.module.scss';\n\ntype OwnProps = {\n  folderId?: number;\n  folderType: 'all' | 'archived' | 'saved' | 'folder';\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFolder?: ApiChatFolder;\n  animatedEmoji?: ApiSticker;\n};\n\nconst ICON_SIZE = 96;\n\nconst EmptyFolder: FC<OwnProps & StateProps> = ({\n  chatFolder, animatedEmoji, foldersDispatch,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const handleEditFolder = useCallback(() => {\n    foldersDispatch({ type: 'editFolder', payload: chatFolder });\n    openSettingsScreen({ screen: SettingsScreens.FoldersEditFolderFromChatList });\n  }, [chatFolder, foldersDispatch]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.sticker}>\n        {animatedEmoji && <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} />}\n      </div>\n      <h3 className={styles.title} dir=\"auto\">{lang('FilterNoChatsToDisplay')}</h3>\n      <p className={styles.description} dir=\"auto\">\n        {lang(chatFolder ? 'ChatList.EmptyChatListFilterText' : 'Chat.EmptyChat')}\n      </p>\n      {chatFolder && (\n        <Button\n          ripple={!isMobile}\n          fluid\n          pill\n          onClick={handleEditFolder}\n          isRtl={lang.isRtl}\n        >\n          <Icon name=\"settings\" />\n          <div className={styles.buttonText}>\n            {lang('ChatList.EmptyChatListEditFilter')}\n          </div>\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { folderId, folderType }): Complete<StateProps> => {\n  const chatFolder = folderId && folderType === 'folder' ? selectChatFolder(global, folderId) : undefined;\n\n  return {\n    chatFolder,\n    animatedEmoji: selectAnimatedEmoji(global, '📂'),\n  };\n})(EmptyFolder));\n","import { memo } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './FrozenAccountNotification.module.scss';\n\ntype OwnProps = {\n  onClick: () => void;\n};\n\nconst FrozenAccountNotification = ({ onClick }: OwnProps) => {\n  const lang = useLang();\n\n  return (\n    <div\n      className={styles.root}\n      onClick={onClick}\n    >\n      <div className={styles.title}>{lang('TitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('SubtitleFrozenAccount')}</div>\n    </div>\n  );\n};\n\nexport default memo(FrozenAccountNotification);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"fOmerTkM\",\"title\":\"URLYINJA\",\"subtitle\":\"mCFsx7Tv\"};","// extracted by mini-css-extract-plugin\nexport default {\"minimized\":\"lTOui0dp\",\"root\":\"yEkGgZVL\",\"title\":\"VhAJDrnz\",\"info\":\"WmyL1NJ8\",\"buttons\":\"_40UGD1Y\",\"button\":\"pedMJD_v\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport Button from '../../ui/Button';\n\nimport styles from './UnconfirmedSession.module.scss';\n\ntype OwnProps = {\n  sessions: Record<string, ApiSession>;\n  onHeightChange: (height: number) => void;\n};\n\nconst UnconfirmedSession = ({ sessions, onHeightChange }: OwnProps) => {\n  const { changeSessionSettings, terminateAuthorization, showNotification } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n\n  useResizeObserver(ref, (entry) => {\n    const height = entry.borderBoxSize?.[0]?.blockSize || entry.contentRect.height;\n    onHeightChange(height);\n  });\n\n  const firstUnconfirmed = useMemo(() => {\n    return Object.values(sessions).sort((a, b) => b.dateCreated - a.dateCreated)\n      .find((session) => session.isUnconfirmed)!;\n  }, [sessions]);\n\n  const locationString = useMemo(() => {\n    return [firstUnconfirmed.deviceModel, firstUnconfirmed.region, firstUnconfirmed.country].filter(Boolean).join(', ');\n  }, [firstUnconfirmed]);\n\n  const handleAccept = useLastCallback(() => {\n    changeSessionSettings({\n      hash: firstUnconfirmed.hash,\n      isConfirmed: true,\n    });\n  });\n\n  const handleReject = useLastCallback(() => {\n    terminateAuthorization({ hash: firstUnconfirmed.hash });\n    showNotification({\n      title: lang('UnconfirmedAuthDeniedTitle', 1),\n      message: lang('UnconfirmedAuthDeniedMessageSingle', locationString),\n    });\n  });\n\n  return (\n    <div className={styles.root} ref={ref}>\n      <h2 className={styles.title}>{lang('UnconfirmedAuthTitle')}</h2>\n      <p className={styles.info}>\n        {lang('UnconfirmedAuthSingle', locationString)}\n      </p>\n      <div className={styles.buttons}>\n        <Button fluid isText className={styles.button} onClick={handleAccept}>\n          {lang('UnconfirmedAuthConfirm')}\n        </Button>\n        <Button fluid isText color=\"danger\" onClick={handleReject} className={styles.button}>\n          {lang('UnconfirmedAuthDeny')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(UnconfirmedSession);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport { LeftColumnContent } from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVE_MINIMIZED_HEIGHT,\n  ARCHIVED_FOLDER_ID,\n  CHAT_HEIGHT_PX,\n  CHAT_LIST_SLICE,\n  FRESH_AUTH_PERIOD,\n  SAVED_FOLDER_ID,\n} from '../../../config';\nimport { IS_APP, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getOrderedIds, getOrderKey, getPinnedChatsCount } from '../../../util/folderManager';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useDebouncedCallback from '../../../hooks/useDebouncedCallback';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOrderDiff from './hooks/useOrderDiff';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Archive from './Archive';\nimport Chat from './Chat';\nimport EmptyFolder from './EmptyFolder';\nimport FrozenAccountNotification from './FrozenAccountNotification';\nimport UnconfirmedSession from './UnconfirmedSession';\nimport { useWorkspaceStorage } from '../../../hooks/useWorkspaceStorage';\n\ntype OwnProps = {\n  className?: string;\n  folderType: 'all' | 'archived' | 'saved' | 'folder';\n  folderId?: number;\n  isActive: boolean;\n  canDisplayArchive?: boolean;\n  archiveSettings?: GlobalState['archiveSettings'];\n  isForumPanelOpen?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n  isMainList?: boolean;\n  foldersDispatch?: FolderEditDispatch;\n  withTags?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst INTERSECTION_THROTTLE = 200;\nconst DRAG_ENTER_DEBOUNCE = 500;\nconst RESERVED_HOTKEYS = new Set(['9', '0']);\n\nconst ChatList: FC<OwnProps & StateProps> = ({\n  className,\n  folderType,\n  folderId,\n  isActive,\n  isForumPanelOpen,\n  canDisplayArchive,\n  archiveSettings,\n  sessions,\n  isAccountFrozen,\n  isMainList,\n  foldersDispatch,\n  withTags,\n  currentUserId,\n}) => {\n  const {\n    openChat,\n    openNextChat,\n    closeForumPanel,\n    openFrozenAccountModal,\n    openLeftColumnContent,\n    toggleFocusList,\n  } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n  const shouldIgnoreDragRef = useRef(false);\n  const [unconfirmedSessionHeight, setUnconfirmedSessionHeight] = useState(0);\n  const { currentWorkspaceId, excludeOtherWorkspaces, savedWorkspaces } = useWorkspaceStorage();\n\n  const EVERYTHING_WORKSPACE_ID = '0';\n  \n  const isArchived = folderType === 'archived';\n  const isAllFolder = folderType === 'all';\n  const isSaved = folderType === 'saved';\n  const resolvedFolderId = (\n    isAllFolder ? ALL_FOLDER_ID : isArchived ? ARCHIVED_FOLDER_ID : isSaved ? SAVED_FOLDER_ID : folderId!\n  );\n\n  const shouldDisplayArchive = isAllFolder && canDisplayArchive && archiveSettings;\n  const shouldShowFrozenAccountNotification = isAccountFrozen && isAllFolder;\n\n  const orderedIds = useFolderManagerForOrderedIds(resolvedFolderId);\n  \n  const foldersFromWorkspaces = useMemo(() => savedWorkspaces.flatMap(w => w.foldersIds), [savedWorkspaces]);\n  const shouldFilterByWorkspace = isAllFolder && currentWorkspaceId === EVERYTHING_WORKSPACE_ID && excludeOtherWorkspaces;\n\n  const filteredOrderedIds = useMemo(() => {\n    const orderedIdsWithoutSelf = orderedIds?.filter((chatId) => chatId !== currentUserId);\n\n    if (!shouldFilterByWorkspace || !orderedIdsWithoutSelf) {\n      return orderedIdsWithoutSelf;\n    }\n\n    return orderedIdsWithoutSelf.filter((chatId) => {\n      return !foldersFromWorkspaces.some(folderId => {\n        const folderChatIds = getOrderedIds(folderId);\n        return folderChatIds?.includes(chatId);\n      });\n    });\n  }, [orderedIds, shouldFilterByWorkspace, foldersFromWorkspaces, currentUserId]);\n\n  const chatsHeight = (filteredOrderedIds?.length || 0) * CHAT_HEIGHT_PX;\n  const archiveHeight = shouldDisplayArchive\n    ? archiveSettings?.isMinimized ? ARCHIVE_MINIMIZED_HEIGHT : CHAT_HEIGHT_PX : 0;\n  const frozenNotificationHeight = shouldShowFrozenAccountNotification ? 68 : 0;\n\n  const { orderDiffById, getAnimationType } = useOrderDiff(filteredOrderedIds);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, filteredOrderedIds, undefined, CHAT_LIST_SLICE);\n\n  const shouldShowUnconfirmedSessions = useMemo(() => {\n    const sessionsArray = Object.values(sessions || {});\n    const current = sessionsArray.find((session) => session.isCurrent);\n    if (!current || getServerTime() - current.dateCreated < FRESH_AUTH_PERIOD) return false;\n\n    return !isAccountFrozen && isAllFolder && sessionsArray.some((session) => session.isUnconfirmed);\n  }, [isAllFolder, sessions, isAccountFrozen]);\n\n  useEffect(() => {\n    if (!shouldShowUnconfirmedSessions) setUnconfirmedSessionHeight(0);\n  }, [shouldShowUnconfirmedSessions]);\n\n  // Support <Alt>+<Up/Down> to navigate between chats\n  useHotkeys(useMemo(() => (isActive && filteredOrderedIds?.length ? {\n    'Alt+ArrowUp': (e: KeyboardEvent) => {\n      e.preventDefault();\n      openNextChat({ targetIndexDelta: -1, orderedIds: filteredOrderedIds });\n    },\n    'Alt+ArrowDown': (e: KeyboardEvent) => {\n      e.preventDefault();\n      openNextChat({ targetIndexDelta: 1, orderedIds: filteredOrderedIds });\n    },\n    'Mod+P': (e: KeyboardEvent) => {\n      e.preventDefault();\n      toggleFocusList();\n    },\n  } : undefined), [isActive, filteredOrderedIds]));\n\n  // Support <Cmd>+<Digit> to navigate between chats\n  useEffect(() => {\n    if (!isActive || isSaved || !filteredOrderedIds || !IS_APP) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && e.code.startsWith('Digit')) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit || RESERVED_HOTKEYS.has(digit)) return;\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        const isArchiveInList = shouldDisplayArchive && archiveSettings && !archiveSettings.isMinimized;\n\n        const shift = isArchiveInList ? -1 : 0;\n        const position = Number(digit) + shift - 1;\n\n        if (isArchiveInList && position === -1) {\n          if (isMainList) openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n          return;\n        }\n\n        if (position > filteredOrderedIds!.length - 1) return;\n\n        openChat({ id: filteredOrderedIds![position], shouldReplaceHistory: true });\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [\n    archiveSettings, isSaved, isActive, openChat, openNextChat, filteredOrderedIds, shouldDisplayArchive, isMainList,\n  ]);\n\n  const { observe } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleArchivedClick = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n    closeForumPanel();\n  });\n\n  const handleFrozenAccountNotificationClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  const handleArchivedDragEnter = useLastCallback(() => {\n    if (shouldIgnoreDragRef.current) {\n      shouldIgnoreDragRef.current = false;\n      return;\n    }\n    handleArchivedClick();\n  });\n\n  const handleDragEnter = useDebouncedCallback((chatId: string) => {\n    if (shouldIgnoreDragRef.current) {\n      shouldIgnoreDragRef.current = false;\n      return;\n    }\n    openChat({ id: chatId, shouldReplaceHistory: true });\n  }, [openChat], DRAG_ENTER_DEBOUNCE, true);\n\n  const handleDragLeave = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    if (x < rect.width || y < rect.y) return;\n    shouldIgnoreDragRef.current = true;\n  });\n\n  function renderChats() {\n    const viewportOffset = filteredOrderedIds!.indexOf(viewportIds![0]);\n\n    const pinnedCount = getPinnedChatsCount(resolvedFolderId) || 0;\n\n    return viewportIds!.map((id, i) => {\n      const isPinned = viewportOffset + i < pinnedCount;\n      const offsetTop = unconfirmedSessionHeight + archiveHeight + frozenNotificationHeight\n        + (viewportOffset + i) * CHAT_HEIGHT_PX;\n\n      return (\n        <Chat\n          key={id}\n          teactOrderKey={isPinned ? i : getOrderKey(id, isSaved)}\n          chatId={id}\n          isPinned={isPinned}\n          folderId={folderId}\n          isSavedDialog={isSaved}\n          animationType={getAnimationType(id)}\n          orderDiff={orderDiffById[id]}\n          offsetTop={offsetTop}\n          observeIntersection={observe}\n          onDragEnter={handleDragEnter}\n          withTags={withTags}\n        />\n      );\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      className={buildClassName('chat-list custom-scroll', isForumPanelOpen && 'forum-panel-open', className)}\n      ref={containerRef}\n      items={viewportIds}\n      itemSelector=\".ListItem:not(.chat-item-archive)\"\n      preloadBackwards={CHAT_LIST_SLICE}\n      withAbsolutePositioning\n      maxHeight={chatsHeight + archiveHeight + frozenNotificationHeight + unconfirmedSessionHeight}\n      onLoadMore={getMore}\n      onDragLeave={handleDragLeave}\n    >\n      {shouldShowUnconfirmedSessions && (\n        <UnconfirmedSession\n          key=\"unconfirmed\"\n          sessions={sessions!}\n          onHeightChange={setUnconfirmedSessionHeight}\n        />\n      )}\n      {shouldShowFrozenAccountNotification && (\n        <FrozenAccountNotification\n          key=\"frozen\"\n          onClick={handleFrozenAccountNotificationClick}\n        />\n      )}\n      {shouldDisplayArchive && (\n        <Archive\n          key=\"archive\"\n          archiveSettings={archiveSettings}\n          onClick={handleArchivedClick}\n          onDragEnter={handleArchivedDragEnter}\n        />\n      )}\n      {viewportIds?.length ? (\n        renderChats()\n      ) : viewportIds && !viewportIds.length && !isSaved ? (\n        (\n          <EmptyFolder\n            folderId={folderId}\n            folderType={folderType}\n            foldersDispatch={foldersDispatch!}\n          />\n        )\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      currentUserId: global.currentUserId!,\n    };\n  },\n)(ChatList));\n\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiTopic, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\nimport { MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  getChatTypeString,\n  getGroupStatus,\n  getMainUsername,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessages,\n  selectChatOnlineCount,\n  selectIsChatRestricted,\n  selectMonoforumChannel,\n  selectThreadInfo,\n  selectThreadMessagesCount,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Transition from '../ui/Transition';\nimport Avatar from './Avatar';\nimport DotAnimation from './DotAnimation';\nimport FullNameTitle from './FullNameTitle';\nimport Icon from './icons/Icon';\nimport TopicIcon from './TopicIcon';\nimport TypingStatus from './TypingStatus';\n\nconst TOPIC_ICON_SIZE = 2.5 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  className?: string;\n  statusIcon?: IconName;\n  typingStatus?: ApiTypingStatus;\n  avatarSize?: 'tiny' | 'small' | 'medium' | 'large' | 'jumbo';\n  status?: string;\n  withDots?: boolean;\n  withMediaViewer?: boolean;\n  withUsername?: boolean;\n  withFullInfo?: boolean;\n  withUpdatingStatus?: boolean;\n  withChatType?: boolean;\n  noEmojiStatus?: boolean;\n  emojiStatusSize?: number;\n  noRtl?: boolean;\n  noAvatar?: boolean;\n  noStatusOrTyping?: boolean;\n  isSavedDialog?: boolean;\n  withMonoforumStatus?: boolean;\n  onClick?: VoidFunction;\n  onEmojiStatusClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  threadInfo?: ApiThreadInfo;\n  topic?: ApiTopic;\n  onlineCount?: number;\n  areMessagesLoaded: boolean;\n  messagesCount?: number;\n  self?: ApiUser;\n  monoforumChannel?: ApiChat;\n};\n\nconst GroupChatInfo: FC<OwnProps & StateProps> = ({\n  typingStatus,\n  className,\n  statusIcon,\n  avatarSize = 'medium',\n  noAvatar,\n  status,\n  withDots,\n  withMediaViewer,\n  withUsername,\n  withFullInfo,\n  withUpdatingStatus,\n  withChatType,\n  threadInfo,\n  noRtl,\n  chat: realChat,\n  onlineCount,\n  areMessagesLoaded,\n  topic,\n  messagesCount,\n  noStatusOrTyping,\n  noEmojiStatus,\n  emojiStatusSize,\n  isSavedDialog,\n  self,\n  withMonoforumStatus,\n  monoforumChannel,\n  onClick,\n  onEmojiStatusClick,\n}) => {\n  const {\n    loadFullChat,\n    openMediaViewer,\n    loadMoreProfilePhotos,\n  } = getActions();\n\n  const chat = !withMonoforumStatus && monoforumChannel ? monoforumChannel : realChat;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const isSuperGroup = chat && isChatSuperGroup(chat);\n  const isTopic = Boolean(chat?.isForum && threadInfo && topic);\n  const { id: chatId, isMin } = chat || {};\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId!);\n\n  useEffect(() => {\n    if (chatId && !isMin) {\n      if (withFullInfo) loadFullChat({ chatId });\n      if (withMediaViewer) loadMoreProfilePhotos({ peerId: chatId, isPreload: true });\n    }\n  }, [chatId, isMin, withFullInfo, isSuperGroup, withMediaViewer]);\n\n  const handleAvatarViewerOpen = useLastCallback(\n    (e: React.MouseEvent<HTMLDivElement, MouseEvent>, hasMedia: boolean) => {\n      if (chat && hasMedia) {\n        e.stopPropagation();\n        openMediaViewer({\n          isAvatarView: true,\n          chatId: chat.id,\n          mediaIndex: 0,\n          origin: avatarSize === 'jumbo' ? MediaViewerOrigin.ProfileAvatar : MediaViewerOrigin.MiddleHeaderAvatar,\n        });\n      }\n    },\n  );\n\n  const mainUsername = useMemo(() => chat && withUsername && getMainUsername(chat), [chat, withUsername]);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  function renderStatusOrTyping() {\n    if (withUpdatingStatus && !areMessagesLoaded && !isRestricted) {\n      return (\n        <DotAnimation className=\"status\" content={oldLang('Updating')} />\n      );\n    }\n\n    if (withMonoforumStatus) {\n      return (\n        <span className=\"status\" dir=\"auto\">\n          {lang('MonoforumStatus')}\n        </span>\n      );\n    }\n\n    if (realChat?.isMonoforum) {\n      return undefined;\n    }\n\n    if (status) {\n      return withDots ? (\n        <DotAnimation className=\"status\" content={status} />\n      ) : (\n        <span className=\"status\" dir=\"auto\">\n          {statusIcon && <Icon className=\"status-icon\" name={statusIcon} />}\n          {renderText(status)}\n        </span>\n      );\n    }\n\n    if (!chat) {\n      return undefined;\n    }\n\n    if (typingStatus) {\n      return <TypingStatus typingStatus={typingStatus} />;\n    }\n\n    if (isTopic) {\n      return (\n        <span className=\"status\" dir=\"auto\">\n          <Transition\n            name=\"fade\"\n            shouldRestoreHeight\n            activeKey={messagesCount !== undefined ? 1 : 2}\n            className=\"message-count-transition\"\n          >\n            {messagesCount !== undefined && oldLang('messages', messagesCount, 'i')}\n          </Transition>\n        </span>\n      );\n    }\n\n    if (withChatType) {\n      return (\n        <span className=\"status\" dir=\"auto\">{oldLang(getChatTypeString(chat))}</span>\n      );\n    }\n\n    const groupStatus = getGroupStatus(oldLang, chat);\n    const onlineStatus = onlineCount ? `, ${oldLang('OnlineCount', onlineCount, 'i')}` : undefined;\n\n    return (\n      <span className=\"status\">\n        {mainUsername && <span className=\"handle withStatus\">{mainUsername}</span>}\n        <span className=\"group-status\">{groupStatus}</span>\n        {onlineStatus && <span className=\"online-status\">{onlineStatus}</span>}\n      </span>\n    );\n  }\n\n  return (\n    <div\n      className={\n        buildClassName('ChatInfo', className)\n      }\n      dir={!noRtl && oldLang.isRtl ? 'rtl' : undefined}\n      onClick={onClick}\n    >\n      {!noAvatar && !isTopic && (\n        <>\n          {isSavedDialog && self && (\n            <Avatar\n              key=\"saved-messages\"\n              size={avatarSize}\n              peer={self}\n              isSavedMessages\n              className=\"saved-dialog-avatar\"\n            />\n          )}\n          <Avatar\n            key={chat.id}\n            className={buildClassName(isSavedDialog && 'overlay-avatar')}\n            size={avatarSize}\n            peer={chat}\n            asMessageBubble={Boolean(monoforumChannel)}\n            isSavedDialog={isSavedDialog}\n            onClick={withMediaViewer ? handleAvatarViewerOpen : undefined}\n          />\n        </>\n      )}\n      {isTopic && (\n        <TopicIcon\n          topic={topic!}\n          className=\"topic-header-icon\"\n          size={TOPIC_ICON_SIZE}\n        />\n      )}\n      <div className=\"info\">\n        {topic\n          ? <h3 dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</h3>\n          : (\n            <FullNameTitle\n              peer={chat}\n              isMonoforum={!withMonoforumStatus && Boolean(monoforumChannel)}\n              emojiStatusSize={emojiStatusSize}\n              withEmojiStatus={!noEmojiStatus}\n              isSavedDialog={isSavedDialog}\n              onEmojiStatusClick={onEmojiStatusClick}\n            />\n          )}\n        {!noStatusOrTyping && renderStatusOrTyping()}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const threadInfo = threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const onlineCount = chat ? selectChatOnlineCount(global, chat) : undefined;\n    const areMessagesLoaded = Boolean(selectChatMessages(global, chatId));\n    const topic = threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const messagesCount = topic && selectThreadMessagesCount(global, chatId, threadId!);\n    const self = selectUser(global, global.currentUserId!);\n    const monoforumChannel = selectMonoforumChannel(global, chatId);\n\n    return {\n      chat,\n      threadInfo,\n      onlineCount,\n      topic,\n      areMessagesLoaded,\n      messagesCount,\n      self,\n      monoforumChannel,\n    };\n  },\n)(GroupChatInfo));\n","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMediaExtendedPreview, ApiPhoto } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ThemeKey } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  getMediaFormat, getMediaThumbUri, getMediaTransferState, getPhotoMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions, MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../../hooks/usePrevious';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport SensitiveContentConfirmModal from '../../common/SensitiveContentConfirmModal';\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps<T> = {\n  id?: string;\n  photo: ApiPhoto | ApiMediaExtendedPreview;\n  isInWebPage?: boolean;\n  messageText?: string;\n  isOwn?: boolean;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ThemeKey;\n  className?: string;\n  clickArg?: T;\n  isMediaNsfw?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick?: (arg: T, e: React.MouseEvent<HTMLElement>) => void;\n  onCancelUpload?: (arg: T) => void;\n};\n\ntype StateProps = {\n  needsAgeVerification?: boolean;\n};\n\nconst Photo = <T,>({\n  id,\n  photo,\n  messageText,\n  isOwn,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  forcedWidth,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  isInWebPage,\n  clickArg,\n  className,\n  isMediaNsfw,\n  observeIntersection,\n  onClick,\n  onCancelUpload,\n  needsAgeVerification,\n}: OwnProps<T> & StateProps) => {\n  const ref = useRef<HTMLDivElement>();\n  const isPaidPreview = photo.mediaType === 'extendedMediaPreview';\n\n  const localBlobUrl = !isPaidPreview ? photo.blobUrl : undefined;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting && !isPaidPreview;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(!isPaidPreview ? getPhotoMediaHash(photo, size) : undefined, !shouldLoad);\n  const prevMediaData = usePrevious(mediaData);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const { ref: fullMediaRef, shouldRender: shouldRenderFullMedia } = useMediaTransition<HTMLImageElement>({\n    hasMediaData: Boolean(fullMediaData),\n    withShouldRender: true,\n  });\n\n  const withBlurredBackground = Boolean(forcedWidth);\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(photo, noThumb);\n  useMediaTransition({ ref: thumbRef, hasMediaData: !noThumb });\n  const blurredBackgroundRef = useBlurredMediaThumbRef(photo, !withBlurredBackground);\n  const thumbDataUri = getMediaThumbUri(photo);\n\n  const { updateContentSettings, openAgeVerificationModal } = getActions();\n  const [isNsfwModalOpen, openNsfwModal, closeNsfwModal] = useFlag();\n  const [shouldAlwaysShowNsfw, setShouldAlwaysShowNsfw] = useState(false);\n\n  const shouldShowSpoiler = isPaidPreview || photo.isSpoiler || isMediaNsfw;\n  const [isSpoilerShown, showSpoiler, hideSpoiler] = useFlag(shouldShowSpoiler);\n\n  useEffect(() => {\n    if (shouldShowSpoiler) {\n      showSpoiler();\n    } else {\n      hideSpoiler();\n    }\n  }, [shouldShowSpoiler]);\n\n  const handleNsfwConfirm = useLastCallback(() => {\n    closeNsfwModal();\n    hideSpoiler();\n\n    if (shouldAlwaysShowNsfw) {\n      updateContentSettings({ isSensitiveEnabled: true });\n    }\n  });\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    !isPaidPreview ? getPhotoMediaHash(photo, 'download') : undefined,\n    !isDownloading,\n    !isPaidPreview ? getMediaFormat(photo, 'download') : undefined,\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n    uploadProgress !== undefined,\n  );\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n\n  const {\n    ref: spinnerRef,\n    shouldRender: shouldRenderSpinner,\n  } = useShowTransition({\n    isOpen: isTransferring,\n    noMountTransition: wasLoadDisabled,\n    className: 'slow',\n    withShouldRender: true,\n  });\n  const {\n    ref: downloadButtonRef,\n    shouldRender: shouldRenderDownloadButton,\n  } = useShowTransition({\n    isOpen: !fullMediaData && !isLoadAllowed,\n    withShouldRender: true,\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    if (isUploading) {\n      onCancelUpload?.(clickArg!);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      if (isMediaNsfw) {\n        if (needsAgeVerification) {\n          openAgeVerificationModal();\n          return;\n        }\n        openNsfwModal();\n        return;\n      }\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(clickArg!, e);\n  });\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      const messageId = Number(contentEl.closest<HTMLDivElement>('.Message')!.dataset.messageId);\n      getCustomAppendixBg(fullMediaData, Boolean(isOwn), messageId, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions({\n    media: photo,\n    isOwn,\n    asForwarded,\n    noAvatars,\n    isMobile,\n    messageText,\n    isInWebPage,\n  });\n\n  const componentClassName = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    (width === height || size === 'pictogram') && 'square-image',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n    className,\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={componentClassName}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && (\n        <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          ref={fullMediaRef}\n          src={fullMediaData || prevMediaData}\n          className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n          alt=\"\"\n          style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n          draggable={!isProtected}\n        />\n      )}\n      {withThumb && (\n        <canvas ref={thumbRef} className=\"thumbnail\" />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div ref={spinnerRef} className=\"media-loading\">\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <Icon ref={downloadButtonRef} name=\"download\" />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n        isNsfw={isMediaNsfw}\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">\n          {Math.round(transferProgress * 100)}\n          %\n        </span>\n      )}\n      <SensitiveContentConfirmModal\n        isOpen={isNsfwModalOpen}\n        onClose={closeNsfwModal}\n        shouldAlwaysShow={shouldAlwaysShowNsfw}\n        onAlwaysShowChanged={setShouldAlwaysShowNsfw}\n        confirmHandler={handleNsfwConfirm}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const appConfig = global.appConfig;\n  const needsAgeVerification = appConfig.needAgeVideoVerification;\n\n  return {\n    needsAgeVerification,\n  };\n})(Photo));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","import type { ElementRef, FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDateTime, formatPastTimeShort } from '../../util/dates/dateFormat';\nimport { getColorFromExtension, getFileSizeString } from './helpers/documentInfo';\nimport { getDocumentThumbnailDimensions } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport Link from '../ui/Link';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport Icon from './icons/Icon';\n\nimport './File.scss';\n\ntype OwnProps = {\n  ref?: ElementRef<HTMLDivElement>;\n  name: string;\n  extension?: string;\n  size: number;\n  timestamp?: number;\n  sender?: string;\n  thumbnailDataUri?: string;\n  previewData?: string;\n  className?: string;\n  smaller?: boolean;\n  isTransferring?: boolean;\n  isUploading?: boolean;\n  isSelectable?: boolean;\n  isSelected?: boolean;\n  transferProgress?: number;\n  actionIcon?: IconName;\n  onClick?: () => void;\n  onDateClick?: (e: React.MouseEvent<HTMLAnchorElement>) => void;\n};\n\nconst File: FC<OwnProps> = ({\n  ref,\n  name,\n  size,\n  extension = '',\n  timestamp,\n  sender,\n  thumbnailDataUri,\n  previewData,\n  className,\n  smaller,\n  isTransferring,\n  isUploading,\n  isSelectable,\n  isSelected,\n  transferProgress,\n  actionIcon,\n  onClick,\n  onDateClick,\n}) => {\n  const lang = useOldLang();\n  let elementRef = useRef<HTMLDivElement>();\n  if (ref) {\n    elementRef = ref;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [withThumb] = useState(!previewData);\n  const noThumb = Boolean(previewData);\n  const thumbRef = useCanvasBlur(thumbnailDataUri, noThumb, isMobile && !IS_CANVAS_FILTER_SUPPORTED);\n  const thumbClassNames = useMediaTransitionDeprecated(!noThumb);\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransitionDeprecated(isTransferring, undefined, true);\n\n  const color = getColorFromExtension(extension);\n  const sizeString = getFileSizeString(size);\n  const subtitle = useMemo(() => {\n    if (!isTransferring || !transferProgress) return sizeString;\n    return `${getFileSizeString(size * transferProgress)} / ${sizeString}`;\n  }, [isTransferring, size, sizeString, transferProgress]);\n\n  const { width, height } = getDocumentThumbnailDimensions(smaller);\n\n  const fullClassName = buildClassName(\n    'File',\n    className,\n    smaller && 'smaller',\n    onClick && !isUploading && 'interactive',\n    isSelected && 'file-is-selected',\n  );\n\n  return (\n    <div ref={elementRef} className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      {isSelectable && (\n        <div className=\"message-select-control no-selection\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      <div className=\"file-icon-container\" onClick={isUploading ? undefined : onClick}>\n        {thumbnailDataUri || previewData ? (\n          <div className=\"file-preview media-inner\">\n            <img\n              src={previewData}\n              className=\"full-media\"\n              width={width}\n              height={height}\n              draggable={false}\n              alt=\"\"\n            />\n            {withThumb && (\n              <canvas\n                ref={thumbRef}\n                className={buildClassName('thumbnail', thumbClassNames)}\n              />\n            )}\n          </div>\n        ) : (\n          <div className={`file-icon ${color}`}>\n            {extension.length <= 4 && (\n              <span className=\"file-ext\" dir=\"auto\">{extension}</span>\n            )}\n          </div>\n        )}\n        {shouldSpinnerRender && (\n          <div className={buildClassName('file-progress', color, spinnerClassNames)}>\n            <ProgressSpinner\n              progress={transferProgress}\n              size={smaller ? 's' : 'm'}\n              onClick={isUploading ? onClick : undefined}\n            />\n          </div>\n        )}\n        {onClick && (\n          <Icon\n            name={actionIcon || 'download'}\n            className={buildClassName('action-icon', shouldSpinnerRender && 'hidden')}\n          />\n        )}\n      </div>\n      <div className=\"file-info\">\n        <div className=\"file-title\" dir=\"auto\" title={name}>{renderText(name)}</div>\n        <div className=\"file-subtitle\" dir=\"auto\">\n          <span>\n            {subtitle}\n          </span>\n          {sender && <span className=\"file-sender\">{renderText(sender)}</span>}\n          {!sender && Boolean(timestamp) && (\n            <>\n              <span className=\"bullet\" />\n              <Link onClick={onDateClick}>{formatMediaDateTime(lang, timestamp * 1000, true)}</Link>\n            </>\n          )}\n        </div>\n      </div>\n      {sender && Boolean(timestamp) && (\n        <Link onClick={onDateClick}>{formatPastTimeShort(lang, timestamp * 1000)}</Link>\n      )}\n    </div>\n  );\n};\n\nexport default memo(File);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ow6Ij9O5\",\"title-row\":\"CBda1UmC\",\"titleRow\":\"CBda1UmC\",\"loading\":\"L4Zk0yMN\",\"other-column\":\"d0hTIVJn\",\"otherColumn\":\"d0hTIVJn\",\"main-column\":\"lEbV6HrI\",\"mainColumn\":\"lEbV6HrI\",\"unread\":\"BhS75ocD\",\"last-message\":\"KJ16dBus\",\"lastMessage\":\"KJ16dBus\",\"after-wrapper\":\"uWo2dhui\",\"afterWrapper\":\"uWo2dhui\",\"after\":\"g3XnC73g\",\"title\":\"k3Ch25ZQ\",\"otherColumnIcon\":\"oknhG11L\",\"other-column-title\":\"ZUj3xAjs\",\"otherColumnTitle\":\"ZUj3xAjs\",\"other-columns\":\"IkuCBmvA\",\"otherColumns\":\"IkuCBmvA\",\"ellipsis\":\"_m_2xcPW\",\"reverse-corner\":\"U_yhhC0w\",\"reverseCorner\":\"U_yhhC0w\",\"overwritten-width\":\"HV0wCR4O\",\"overwrittenWidth\":\"HV0wCR4O\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { getOrderedTopics } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './ChatForumLastMessage.module.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  topics?: Record<number, ApiTopic>;\n  renderLastMessage: () => React.ReactNode;\n  observeIntersection?: ObserveFn;\n  noForumTitle?: boolean;\n};\n\nconst NO_CORNER_THRESHOLD = Number(REM);\nconst MAX_TOPICS = 3;\n\nconst ChatForumLastMessage: FC<OwnProps> = ({\n  chat,\n  topics,\n  renderLastMessage,\n  observeIntersection,\n  noForumTitle,\n}) => {\n  const { openThread } = getActions();\n\n  const lastMessageRef = useRef<HTMLDivElement>();\n  const mainColumnRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const [lastActiveTopic, ...otherTopics] = useMemo(() => {\n    if (!topics) {\n      return [];\n    }\n\n    return getOrderedTopics(Object.values(topics), undefined, true).slice(0, MAX_TOPICS);\n  }, [topics]);\n\n  const [isReversedCorner, setIsReversedCorner] = useState(false);\n  const [overwrittenWidth, setOverwrittenWidth] = useState<number | undefined>(undefined);\n\n  const {\n    handleClick: handleOpenTopicClick,\n    handleMouseDown: handleOpenTopicMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement>) => {\n    if (lastActiveTopic.unreadCount === 0 || chat.isForumAsMessages) return;\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    openThread({\n      chatId: chat.id,\n      threadId: lastActiveTopic.id,\n      shouldReplaceHistory: true,\n      noForumTopicPanel: getIsMobile(),\n    });\n  });\n\n  useEffect(() => {\n    const lastMessageElement = lastMessageRef.current;\n    const mainColumnElement = mainColumnRef.current;\n    if (!lastMessageElement || !mainColumnElement) return;\n\n    const lastMessageWidth = lastMessageElement.offsetWidth;\n    const mainColumnWidth = mainColumnElement.offsetWidth;\n\n    if (Math.abs(lastMessageWidth - mainColumnWidth) < NO_CORNER_THRESHOLD) {\n      setOverwrittenWidth(Math.max(lastMessageWidth, mainColumnWidth));\n    } else {\n      setOverwrittenWidth(undefined);\n    }\n    setIsReversedCorner(lastMessageWidth > mainColumnWidth);\n  }, [lastActiveTopic, renderLastMessage]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        isReversedCorner && styles.reverseCorner,\n        overwrittenWidth && styles.overwrittenWidth,\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      style={overwrittenWidth ? `--overwritten-width: ${overwrittenWidth}px` : undefined}\n    >\n      {\n        !noForumTitle && (\n          <>\n            {lastActiveTopic && (\n              <div className={styles.titleRow}>\n                <div\n                  className={buildClassName(\n                    styles.mainColumn,\n                    lastActiveTopic.unreadCount && styles.unread,\n                  )}\n                  ref={mainColumnRef}\n                  onClick={handleOpenTopicClick}\n                  onMouseDown={handleOpenTopicMouseDown}\n                >\n                  <TopicIcon\n                    topic={lastActiveTopic}\n                    observeIntersection={observeIntersection}\n                  />\n                  <div className={styles.title}>{renderText(lastActiveTopic.title)}</div>\n                  {!overwrittenWidth && isReversedCorner && (\n                    <div className={styles.afterWrapper}>\n                      <div className={styles.after} />\n                    </div>\n                  )}\n                </div>\n\n                <div className={styles.otherColumns}>\n                  {otherTopics.map((topic) => (\n                    <div\n                      className={buildClassName(\n                        styles.otherColumn, topic.unreadCount && styles.unread,\n                      )}\n                      key={topic.id}\n                    >\n                      <TopicIcon\n                        topic={topic}\n                        className={styles.otherColumnIcon}\n                        observeIntersection={observeIntersection}\n                      />\n                      <span className={styles.otherColumnTitle}>{renderText(topic.title)}</span>\n                    </div>\n                  ))}\n                </div>\n\n                <div className={styles.ellipsis} />\n              </div>\n            )}\n            {!lastActiveTopic && (\n              <div className={buildClassName(styles.titleRow, styles.loading)}>\n                {lang('Loading')}\n              </div>\n            )}\n          </>\n        )\n      }\n      <div\n        className={buildClassName(styles.lastMessage, lastActiveTopic?.unreadCount && !noForumTitle && styles.unread)}\n        ref={lastMessageRef}\n        onClick={handleOpenTopicClick}\n        onMouseDown={handleOpenTopicMouseDown}\n      >\n        {renderLastMessage()}\n        {!overwrittenWidth && !isReversedCorner && (\n          <div className={styles.afterWrapper}>\n            <div className={styles.after} />\n          </div>\n        )}\n      </div>\n\n    </div>\n  );\n};\n\nexport default memo(ChatForumLastMessage);\n","import {\n  useCallback, useLayoutEffect, useRef,\n} from '../../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiDraft, ApiMessage, ApiPeer, ApiTopic, ApiTypingStatus,\n  StatefulMediaContent,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { ANIMATION_END_DELAY, CHAT_HEIGHT_PX } from '../../../../config';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\nimport {\n  getMessageIsSpoiler,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n} from '../../../../global/helpers';\nimport { getMessageSenderName } from '../../../../global/helpers/peers';\nimport buildClassName from '../../../../util/buildClassName';\nimport renderText from '../../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\nimport { ChatAnimationTypes } from './useChatAnimationType';\n\nimport useMessageMediaHash from '../../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../../hooks/media/useThumbnail';\nimport useEnsureStory from '../../../../hooks/useEnsureStory';\nimport useLang from '../../../../hooks/useLang';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ChatForumLastMessage from '../../../common/ChatForumLastMessage';\nimport Icon from '../../../common/icons/Icon';\nimport MessageSummary from '../../../common/MessageSummary';\nimport TypingStatus from '../../../common/TypingStatus';\n\nconst ANIMATION_DURATION = 200;\n\nexport default function useChatListEntry({\n  chat,\n  topics,\n  lastMessage,\n  statefulMediaContent,\n  chatId,\n  typingStatus,\n  draft,\n  lastMessageTopic,\n  lastMessageSender,\n  observeIntersection,\n  animationType,\n  orderDiff,\n  withInterfaceAnimations,\n  isTopic,\n  isSavedDialog,\n  isPreview,\n  noForumTitle,\n}: {\n  chat?: ApiChat;\n  topics?: Record<number, ApiTopic>;\n  lastMessage?: ApiMessage;\n  statefulMediaContent: StatefulMediaContent | undefined;\n  chatId: string;\n  typingStatus?: ApiTypingStatus;\n  draft?: ApiDraft;\n  lastMessageTopic?: ApiTopic;\n  lastMessageSender?: ApiPeer;\n  observeIntersection?: ObserveFn;\n  isTopic?: boolean;\n  isSavedDialog?: boolean;\n  isPreview?: boolean;\n\n  animationType: ChatAnimationTypes;\n  orderDiff: number;\n  withInterfaceAnimations?: boolean;\n  noForumTitle?: boolean;\n}) {\n  const lang = useLang();\n  const ref = useRef<HTMLDivElement>();\n\n  const storyData = lastMessage?.content.storyData;\n  const shouldTryLoadingStory = statefulMediaContent && !statefulMediaContent.story;\n\n  useEnsureStory(shouldTryLoadingStory ? storyData?.peerId : undefined, storyData?.id, statefulMediaContent?.story);\n\n  const mediaContent = statefulMediaContent?.story || lastMessage;\n  const mediaHasPreview = mediaContent && !getMessageSticker(mediaContent);\n\n  const thumbDataUri = useThumbnail(mediaContent);\n\n  const mediaThumbnail = mediaHasPreview ? thumbDataUri : undefined;\n  const mediaHash = useMessageMediaHash(mediaContent, 'micro');\n  const mediaBlobUrl = useMedia(mediaHasPreview ? mediaHash : undefined);\n  const isRoundVideo = Boolean(lastMessage && getMessageRoundVideo(lastMessage));\n\n  const renderLastMessageOrTyping = useCallback(() => {\n    if (!isSavedDialog && !isPreview\n      && typingStatus && lastMessage && typingStatus.timestamp > lastMessage.date * 1000) {\n      return <TypingStatus typingStatus={typingStatus} />;\n    }\n\n    const isDraftReplyToTopic = draft && draft.replyInfo?.replyToMsgId === lastMessageTopic?.id;\n    const isEmptyLocalReply = draft?.replyInfo && !draft.text && draft.isLocal;\n\n    const canDisplayDraft = !chat?.isForum && !isSavedDialog && !isPreview && draft && !isEmptyLocalReply\n      && (!isTopic || !isDraftReplyToTopic);\n\n    if (canDisplayDraft) {\n      return (\n        <p className=\"last-message\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n          <span className=\"draft\">{lang('ChatDraftPrefix')}</span>\n          <span className=\"last-message-summary\" dir=\"auto\">\n            {renderTextWithEntities({\n              text: draft.text?.text || '',\n              entities: draft.text?.entities,\n              asPreview: true,\n              withTranslucentThumbs: true,\n            })}\n          </span>\n        </p>\n      );\n    }\n\n    if (!lastMessage) {\n      return undefined;\n    }\n\n    const senderName = lastMessageSender\n      ? getMessageSenderName(lang, chatId, lastMessageSender)\n      : undefined;\n\n    return (\n      <p className=\"last-message shared-canvas-container\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n        {senderName && (\n          <>\n            <span className=\"sender-name\">{renderText(senderName)}</span>\n            <span className=\"colon\">:</span>\n          </>\n        )}\n        {!isSavedDialog && lastMessage.forwardInfo && (<Icon name=\"share-filled\" className=\"chat-prefix-icon\" />)}\n        {lastMessage.replyInfo?.type === 'story' && (<Icon name=\"story-reply\" className=\"chat-prefix-icon\" />)}\n        <span className=\"last-message-summary\" dir=\"auto\">\n          {renderSummary(lastMessage, observeIntersection, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </span>\n      </p>\n    );\n  }, [\n    chat, chatId, draft, isRoundVideo, isTopic, lang, lastMessage, lastMessageSender, lastMessageTopic,\n    mediaBlobUrl, mediaThumbnail, observeIntersection, typingStatus, isSavedDialog, isPreview,\n  ]);\n\n  function renderSubtitle() {\n    if (chat?.isForum && !isTopic) {\n      return (\n        <ChatForumLastMessage\n          chat={chat}\n          renderLastMessage={renderLastMessageOrTyping}\n          observeIntersection={observeIntersection}\n          topics={topics}\n          noForumTitle={noForumTitle}\n        />\n      );\n    }\n\n    return renderLastMessageOrTyping();\n  }\n\n  // Sets animation excess values when `orderDiff` changes and then resets excess values to animate\n  useLayoutEffect(() => {\n    const element = ref.current;\n\n    if (!withInterfaceAnimations || !element) {\n      return;\n    }\n\n    // TODO Refactor animation: create `useListAnimation` that owns `orderDiff` and `animationType`\n    if (animationType === ChatAnimationTypes.Opacity) {\n      element.style.opacity = '0';\n\n      requestMutation(() => {\n        element.classList.add('animate-opacity');\n        element.style.opacity = '1';\n      });\n    } else if (animationType === ChatAnimationTypes.Move) {\n      element.style.transform = `translate3d(0, ${-orderDiff * CHAT_HEIGHT_PX}px, 0)`;\n\n      requestMutation(() => {\n        element.classList.add('animate-transform');\n        element.style.transform = '';\n      });\n    } else {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMutation(() => {\n        element.classList.remove('animate-opacity', 'animate-transform');\n        element.style.opacity = '';\n        element.style.transform = '';\n      });\n    }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n  }, [withInterfaceAnimations, orderDiff, animationType]);\n\n  return {\n    renderSubtitle,\n    ref,\n  };\n}\n\nfunction renderSummary(\n  message: ApiMessage, observeIntersection?: ObserveFn, blobUrl?: string, isRoundVideo?: boolean,\n) {\n  const messageSummary = (\n    <MessageSummary\n      message={message}\n      noEmoji={Boolean(blobUrl)}\n      observeIntersectionForLoading={observeIntersection}\n      inChatList\n    />\n  );\n\n  if (!blobUrl) {\n    return messageSummary;\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n        draggable={false}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {messageSummary}\n    </span>\n  );\n}\n","import { getActions, getGlobal } from '../global';\n\nimport type { ApiMessage } from '../api/types';\nimport type { MessageKey } from './keys/messageKey';\nimport { AudioOrigin, GlobalSearchContent } from '../types';\n\nimport { requestNextMutation } from '../lib/fasterdom/fasterdom';\nimport { selectCurrentMessageList, selectTabState } from '../global/selectors';\nimport { IS_SAFARI } from './browser/windowEnvironment';\nimport { getMessageServerKey, parseMessageKey } from './keys/messageKey';\nimport { isSafariPatchInProgress, patchSafariProgressiveAudio } from './patchSafariProgressiveAudio';\nimport safePlay from './safePlay';\n\ntype Handler = (eventName: string, e: Event) => void;\nexport type TrackId = `${MessageKey}-${number}`;\n\nexport interface Track {\n  audio: HTMLAudioElement;\n  proxy: HTMLAudioElement;\n  type: 'voice' | 'audio' | 'oneTimeVoice';\n  handlers: Handler[];\n  onForcePlay?: NoneToVoidFunction;\n  onTrackChange?: NoneToVoidFunction;\n}\n\nconst tracks = new Map<TrackId, Track>();\n\nlet voiceQueue: TrackId[] = [];\nlet musicQueue: TrackId[] = [];\n\nlet currentTrackId: TrackId | undefined;\n\nfunction createAudio(\n  trackId: TrackId,\n  type: Track['type'],\n  onForcePlay?: NoneToVoidFunction,\n  onTrackChange?: NoneToVoidFunction,\n): Track {\n  const audio = new Audio();\n\n  function handleEvent(eventName: string) {\n    return (e: Event) => {\n      if (!tracks.has(trackId)) {\n        return;\n      }\n\n      if (isSafariPatchInProgress(audio)) {\n        return;\n      }\n\n      tracks.get(trackId)!.handlers.forEach((handler) => {\n        handler(eventName, e);\n      });\n    };\n  }\n\n  audio.addEventListener('timeupdate', handleEvent('onTimeUpdate'));\n  audio.addEventListener('play', handleEvent('onPlay'));\n  audio.addEventListener('pause', handleEvent('onPause'));\n  audio.addEventListener('loadstart', handleEvent('onLoadStart'));\n  audio.addEventListener('loadeddata', handleEvent('onLoadedData'));\n  audio.addEventListener('playing', handleEvent('onPlaying'));\n  audio.addEventListener('ended', () => {\n    if (!tracks.has(trackId)) {\n      return;\n    }\n\n    if (isSafariPatchInProgress(audio)) {\n      return;\n    }\n\n    playNext(trackId);\n  });\n\n  return {\n    audio,\n    type,\n    proxy: new Proxy(audio, {\n      get: (target, key: keyof HTMLAudioElement) => target[key],\n    }),\n    handlers: [],\n    onForcePlay,\n    onTrackChange,\n  };\n}\n\nfunction playNext(trackId: TrackId, isReverseOrder?: boolean) {\n  const currentTrack = currentTrackId && tracks.get(currentTrackId);\n  if (currentTrack) {\n    currentTrack.audio.pause();\n    currentTrack.audio.currentTime = 0;\n    if (currentTrack.onTrackChange) currentTrack.onTrackChange();\n  }\n\n  const origin = selectTabState(getGlobal()).audioPlayer.origin || AudioOrigin.Inline;\n\n  const nextTrackId = findNextInQueue(trackId, origin, isReverseOrder);\n  if (!nextTrackId) {\n    return;\n  }\n\n  if (!tracks.has(nextTrackId)) {\n    // A bit hacky way to continue playlist when switching chat\n    getActions().openAudioPlayer(parseMessageKey(splitTrackId(nextTrackId).messageKey));\n\n    return;\n  }\n\n  const nextTrack = tracks.get(nextTrackId)!;\n\n  if (nextTrack.onForcePlay) {\n    nextTrack.onForcePlay();\n  }\n\n  currentTrackId = nextTrackId;\n\n  if (nextTrack.audio.src) {\n    safePlay(nextTrack.audio);\n  }\n}\n\nexport function stopCurrentAudio() {\n  const currentTrack = currentTrackId && tracks.get(currentTrackId);\n  if (currentTrack) {\n    currentTrack.audio.pause();\n  }\n}\n\nexport function register(\n  trackId: TrackId,\n  trackType: Track['type'],\n  handler: Handler,\n  onForcePlay?: NoneToVoidFunction,\n  onTrackChange?: NoneToVoidFunction,\n) {\n  if (!tracks.has(trackId)) {\n    const track = createAudio(trackId, trackType, onForcePlay, onTrackChange);\n    tracks.set(trackId, track);\n    addTrackToQueue(track, trackId);\n  }\n  const { audio, proxy, handlers } = tracks.get(trackId)!;\n\n  handlers.push(handler);\n\n  return {\n    play(src: string) {\n      if (!audio.paused) return;\n      const currentTrack = currentTrackId && tracks.get(currentTrackId);\n      if (currentTrack && currentTrackId !== trackId) {\n        currentTrack.audio.pause();\n        currentTrack.audio.currentTime = 0;\n        if (isSafariPatchInProgress(currentTrack.audio)) {\n          currentTrack.audio.dataset.preventPlayAfterPatch = 'true';\n        }\n        if (currentTrack.onTrackChange) currentTrack.onTrackChange();\n      }\n\n      currentTrackId = trackId;\n\n      if (!audio.src) {\n        audio.src = src;\n        audio.preload = 'auto';\n\n        if (src.includes('/progressive/') && IS_SAFARI) {\n          delete audio.dataset.preventPlayAfterPatch;\n          patchSafariProgressiveAudio(audio);\n        }\n      }\n\n      safePlay(audio);\n      cleanUpQueue(trackType, trackId);\n    },\n\n    pause() {\n      if (currentTrackId === trackId) {\n        audio.pause();\n      }\n    },\n\n    stop() {\n      if (currentTrackId === trackId) {\n        // Hack, reset `src` to remove default media session notification\n        const prevSrc = audio.src;\n        audio.pause();\n        // `onPause` not called otherwise, but required to sync UI\n        requestNextMutation(() => {\n          audio.src = '';\n          audio.src = prevSrc;\n        });\n      }\n    },\n\n    setCurrentTime(time: number) {\n      if (currentTrackId === trackId) {\n        if (audio.fastSeek) {\n          audio.fastSeek(time);\n        } else {\n          audio.currentTime = time;\n        }\n      }\n    },\n\n    setVolume(volume: number) {\n      if (currentTrackId === trackId) {\n        audio.volume = volume;\n        audio.muted = false;\n      }\n    },\n\n    setPlaybackRate(rate: number) {\n      if (currentTrackId === trackId) {\n        audio.playbackRate = rate;\n      }\n    },\n\n    toggleMuted(muted?: boolean) {\n      if (muted === undefined) {\n        audio.muted = !audio.muted;\n      } else {\n        audio.muted = muted;\n      }\n    },\n\n    proxy,\n\n    requestNextTrack() {\n      playNext(trackId);\n    },\n\n    isLast() {\n      return !findNextInQueue(trackId, selectTabState(getGlobal()).audioPlayer.origin);\n    },\n\n    isFirst() {\n      return !findNextInQueue(trackId, selectTabState(getGlobal()).audioPlayer.origin, true);\n    },\n\n    requestPreviousTrack() {\n      playNext(trackId, true);\n    },\n\n    destroy(shouldRemoveFromQueue = false) {\n      const track = tracks.get(trackId);\n      if (!track) {\n        return;\n      }\n\n      track.handlers = track.handlers.filter((h) => h !== handler);\n\n      if (!track.handlers.length) {\n        track.audio.pause();\n        tracks.delete(trackId);\n\n        if (shouldRemoveFromQueue) {\n          removeFromQueue(track, trackId);\n        }\n\n        if (trackId === currentTrackId) {\n          currentTrackId = undefined;\n        }\n      }\n    },\n  };\n}\n\nfunction getTrackQueue(track: Track) {\n  switch (track.type) {\n    case 'audio': return musicQueue;\n    case 'voice': return voiceQueue;\n    default: return undefined;\n  }\n}\n\nfunction addTrackToQueue(track: Track, trackId: TrackId) {\n  if (track.type === 'audio' && !musicQueue.includes(trackId)) {\n    musicQueue.push(trackId);\n    musicQueue.sort(trackIdComparator);\n  }\n\n  if (track.type === 'voice' && !voiceQueue.includes(trackId)) {\n    voiceQueue.push(trackId);\n    voiceQueue.sort(trackIdComparator);\n  }\n}\n\nfunction removeFromQueue(track: Track, trackId: TrackId) {\n  const trackIdFilter = (el: TrackId) => el !== trackId;\n  if (track.type === 'audio') {\n    musicQueue = musicQueue.filter(trackIdFilter);\n  }\n\n  if (track.type === 'voice') {\n    voiceQueue = voiceQueue.filter(trackIdFilter);\n  }\n}\n\nfunction cleanUpQueue(type: Track['type'], trackId: TrackId) {\n  if (selectTabState(getGlobal()).globalSearch.currentContent === GlobalSearchContent.Music) return;\n  const { chatId } = parseMessageKey(splitTrackId(trackId).messageKey);\n  const openedChatId = selectCurrentMessageList(getGlobal())?.chatId;\n  const queueFilter = (id: string) => (\n    id.startsWith(`msg${chatId}`) || (openedChatId && id.startsWith(`msg${openedChatId}`))\n  );\n\n  if (type === 'audio') {\n    musicQueue = musicQueue.filter(queueFilter);\n  }\n\n  if (type === 'voice') {\n    voiceQueue = voiceQueue.filter(queueFilter);\n  }\n}\n\nfunction findNextInQueue(currentId: TrackId, origin = AudioOrigin.Inline, isReverseOrder?: boolean) {\n  const track = tracks.get(currentId)!;\n  const queue = getTrackQueue(track);\n  if (!queue) return undefined;\n\n  if (origin === AudioOrigin.Search) {\n    const index = queue.indexOf(currentId);\n    if (index < 0) return undefined;\n    const direction = isReverseOrder ? -1 : 1;\n    return queue[index + direction];\n  }\n\n  const { chatId } = parseMessageKey(splitTrackId(currentId).messageKey);\n  const chatAudio = queue.filter((id) => id.startsWith(`msg${chatId}`));\n  const index = chatAudio.indexOf(currentId);\n  if (index < 0) return undefined;\n  let direction = origin === AudioOrigin.Inline ? -1 : 1;\n  if (isReverseOrder) direction *= -1;\n  return chatAudio[index + direction];\n}\n\nexport function makeTrackId(message: ApiMessage): TrackId | undefined {\n  const key = getMessageServerKey(message);\n  if (!key) {\n    return undefined;\n  }\n  return `${key}-${message.date}`;\n}\n\nfunction splitTrackId(trackId: TrackId) {\n  const messageKey = trackId.match(/^msg(-?\\d+)-(\\d+)/)![0] as MessageKey;\n  const date = Number(trackId.split('-').pop());\n  return {\n    messageKey,\n    date,\n  };\n}\n\n// Descending order by date\nfunction trackIdComparator(one?: TrackId, two?: TrackId) {\n  if (!one || !two) return 0;\n  const { date: dateOne, messageKey: keyOne } = splitTrackId(one);\n  const { date: dateTwo, messageKey: keyTwo } = splitTrackId(two);\n  const diff = dateTwo - dateOne;\n  return diff === 0 ? keyTwo.localeCompare(keyOne) : diff;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../global/helpers';\nimport { selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Avatar from './Avatar';\n\nimport './DeleteChatModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chat: ApiChat;\n  isSavedDialog?: boolean;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isChatWithSelf?: boolean;\n  isBot?: boolean;\n  isPrivateChat: boolean;\n  isBasicGroup: boolean;\n  isSuperGroup: boolean;\n  currentUserId: string | undefined;\n  canDeleteForAll?: boolean;\n  contactName?: string;\n};\n\nconst DeleteChatModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  isSavedDialog,\n  isChannel,\n  isPrivateChat,\n  isChatWithSelf,\n  isBot,\n  isBasicGroup,\n  isSuperGroup,\n  currentUserId,\n  canDeleteForAll,\n  contactName,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    leaveChannel,\n    deleteHistory,\n    deleteSavedHistory,\n    deleteChannel,\n    deleteChatUser,\n    blockUser,\n    deleteChat,\n  } = getActions();\n\n  const lang = useOldLang();\n  const chatTitle = getChatTitle(lang, chat);\n\n  const handleDeleteForAll = useLastCallback(() => {\n    deleteHistory({ chatId: chat.id, shouldDeleteForAll: true });\n\n    onClose();\n  });\n\n  const handleDeleteAndStop = useLastCallback(() => {\n    deleteHistory({ chatId: chat.id, shouldDeleteForAll: true });\n    blockUser({ userId: chat.id });\n\n    onClose();\n  });\n\n  const handleDeleteChat = useLastCallback(() => {\n    if (isSavedDialog) {\n      deleteSavedHistory({ chatId: chat.id });\n    } else if (isPrivateChat) {\n      deleteHistory({ chatId: chat.id, shouldDeleteForAll: false });\n    } else if (isBasicGroup) {\n      if (chat.isCreator) {\n        deleteHistory({ chatId: chat.id, shouldDeleteForAll: true });\n        deleteChat({ chatId: chat.id });\n      } else {\n        deleteHistory({ chatId: chat.id, shouldDeleteForAll: false });\n        deleteChatUser({ chatId: chat.id, userId: currentUserId! });\n      }\n    } else if ((isChannel || isSuperGroup) && !chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else if ((isChannel || isSuperGroup) && chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    }\n    onClose();\n  });\n\n  const handleLeaveChat = useLastCallback(() => {\n    if (isChannel || isSuperGroup) {\n      leaveChannel({ chatId: chat.id });\n      onClose();\n    } else if (isBasicGroup && chat.isCreator) {\n      deleteHistory({ chatId: chat.id, shouldDeleteForAll: false });\n      deleteChatUser({ chatId: chat.id, userId: currentUserId! });\n    } else {\n      handleDeleteChat();\n    }\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar\n          size=\"tiny\"\n          peer={chat}\n          isSavedMessages={isChatWithSelf}\n        />\n        <h3 className=\"modal-title\">{lang(renderTitle())}</h3>\n      </div>\n    );\n  }\n\n  function renderTitle() {\n    if (isSavedDialog) {\n      return isChatWithSelf ? 'ClearHistoryMyNotesTitle' : 'ClearHistoryTitleSingle2';\n    }\n\n    if (isChannel && !chat.isCreator) {\n      return 'LeaveChannel';\n    }\n\n    if (isChannel && chat.isCreator) {\n      return 'ChannelDelete';\n    }\n\n    if (isBasicGroup || isSuperGroup) {\n      return 'Group.LeaveGroup';\n    }\n\n    return 'DeleteChatUser';\n  }\n\n  function renderContent() {\n    if (isSavedDialog) {\n      return (\n        <p>\n          {renderText(\n            isChatWithSelf ? lang('ClearHistoryMyNotesMessage') : lang('ClearHistoryMessageSingle', chatTitle),\n            ['simple_markdown', 'emoji'],\n          )}\n        </p>\n      );\n    }\n    if (isChannel && chat.isCreator) {\n      return (\n        <p>\n          {renderText(lang('ChatList.DeleteAndLeaveGroupConfirmation', chatTitle), ['simple_markdown', 'emoji'])}\n        </p>\n      );\n    }\n\n    if ((isChannel && !chat.isCreator) || isBasicGroup || isSuperGroup) {\n      return <p>{renderText(lang('ChannelLeaveAlertWithName', chatTitle), ['simple_markdown', 'emoji'])}</p>;\n    }\n\n    return <p>{renderText(lang('ChatList.DeleteChatConfirmation', contactName), ['simple_markdown', 'emoji'])}</p>;\n  }\n\n  function renderActionText() {\n    if (isSavedDialog) {\n      return 'Delete';\n    }\n\n    if (isChannel && !chat.isCreator) {\n      return 'LeaveChannel';\n    }\n    if (isChannel && chat.isCreator) {\n      return 'Chat.Input.Delete';\n    }\n\n    if (isBasicGroup || isSuperGroup) {\n      return 'Group.LeaveGroup';\n    }\n\n    return canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete';\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"DeleteChatModal\"\n      header={renderHeader()}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {renderContent()}\n      <div className=\"dialog-buttons-column\">\n        {isBot && !isSavedDialog && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteAndStop}>\n            {lang('DeleteAndStop')}\n          </Button>\n        )}\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteForAll}>\n            {contactName ? renderText(lang('ChatList.DeleteForEveryone', contactName)) : lang('DeleteForAll')}\n          </Button>\n        )}\n        {!isPrivateChat && chat.isCreator && !isSavedDialog && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChat}>\n            {lang('DeleteForAll')}\n          </Button>\n        )}\n        <Button\n          color=\"danger\"\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={(isPrivateChat || isSavedDialog) ? handleDeleteChat : handleLeaveChat}\n        >\n          {lang(renderActionText())}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat, isSavedDialog }): Complete<StateProps> => {\n    const isPrivateChat = isUserId(chat.id);\n    const isChatWithSelf = selectIsChatWithSelf(global, chat.id);\n    const user = isPrivateChat && selectUser(global, getPrivateChatUserId(chat)!);\n    const isBot = user && isUserBot(user) && !chat.isSupport;\n    const canDeleteForAll = (isPrivateChat && !isChatWithSelf && !isBot && !isSavedDialog);\n    const contactName = isPrivateChat\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isBot,\n      isChannel: isChatChannel(chat),\n      isBasicGroup: isChatBasicGroup(chat),\n      isSuperGroup: isChatSuperGroup(chat),\n      currentUserId: global.currentUserId,\n      canDeleteForAll,\n      contactName,\n    };\n  },\n)(DeleteChatModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mklnEg0s\",\"compact\":\"VGmPJoga\",\"image\":\"tT8KQwg0\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiDocument } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useMedia from '../../../hooks/useMedia';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ThemeKey;\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const { isTouchScreen } = useAppLayout();\n  const mediaData = useMedia(getDocumentMediaHash(icon, 'full'), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, 'icon', !isTouchScreen && styles.compact)}>\n      <img\n        src={iconSvg}\n        alt=\"\"\n        className={buildClassName(styles.image, !isTouchScreen && styles.compact)}\n        draggable={false}\n      />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiAttachBot } from '../../../api/types';\nimport type { IAnchorPosition, ThemeKey, ThreadId } from '../../../types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ThemeKey;\n  isInSideMenu?: true;\n  chatId?: string;\n  threadId?: ThreadId;\n  canShowNew?: boolean;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  isInSideMenu,\n  canShowNew,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useOldLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useLastCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isInSideMenu) {\n      callAttachBot({\n        bot,\n        isFromSideMenu: true,\n      });\n    } else {\n      callAttachBot({\n        bot,\n        chatId: chatId!,\n        threadId,\n      });\n    }\n  });\n\n  const handleCloseMenu = useLastCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  });\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    setMenuPosition(undefined);\n  });\n\n  const handleRemoveBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  });\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {canShowNew && bot.isDisclaimerNeeded && <span className=\"menu-item-badge\">{lang('New')}</span>}\n      {menuPosition && (\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n          className=\"bot-attach-context-menu\"\n          autoClose\n          withPortal\n          onClose={handleCloseMenu}\n          onCloseAnimationEnd={handleCloseAnimationEnd}\n        >\n          <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n        </Menu>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import useForceUpdate from '../useForceUpdate';\nimport useInterval from './useInterval';\n\nexport default function useIntervalForceUpdate(interval?: number) {\n  const forceUpdate = useForceUpdate();\n\n  useInterval(forceUpdate, interval, true);\n}\n","import type { ApiAttachment } from '../../../../api/types';\n\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  createPosterForVideo,\n  preloadImage,\n  preloadVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_STANDARD_QUALITY_IMG_SIZE = 1280; // px\nconst MAX_HIGH_QUALITY_IMG_SIZE = 2560;\nconst MAX_THUMB_IMG_SIZE = 40; // px\nconst MAX_ASPECT_RATIO = 20;\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let shouldSendAsFile;\n  const shouldSendInHighQuality = options?.shouldSendInHighQuality;\n\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    const maxQuickImgSize = shouldSendInHighQuality ? MAX_HIGH_QUALITY_IMG_SIZE : MAX_STANDARD_QUALITY_IMG_SIZE;\n    const shouldShrink = Math.max(width, height) > maxQuickImgSize;\n    const isGif = mimeType === GIF_MIME_TYPE;\n\n    if (!shouldSendAsFile) {\n      if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? maxQuickImgSize / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        return buildAttachment(filename, blob, {\n          ...options,\n          compressedBlobUrl: resizedUrl,\n        });\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    }\n\n    const shouldShrinkPreview = Math.max(width, height) > MAX_THUMB_IMG_SIZE;\n    if (shouldShrinkPreview) {\n      previewBlobUrl = await scaleImage(\n        blobUrl, MAX_THUMB_IMG_SIZE / Math.max(width, height), 'image/jpeg',\n      );\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    try {\n      const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n      shouldSendAsFile = !validateAspectRatio(width, height);\n      if (!shouldSendAsFile) {\n        quick = { width, height, duration };\n      }\n    } catch (err) {\n      shouldSendAsFile = true;\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blob,\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    shouldSendAsFile: shouldSendAsFile || undefined,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !(attach.voice || attach.audio) || undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n\nfunction validateAspectRatio(width: number, height: number) {\n  const maxAspectRatio = Math.max(width, height) / Math.min(width, height);\n  return maxAspectRatio <= MAX_ASPECT_RATIO;\n}\n","import { fetchBlob } from './files';\n\ntype AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { parseBlob, selectCover } = await import('music-metadata');\n  const blob = await fetchBlob(url);\n  const metadata = await parseBlob(blob);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverBlob = cover ? new Blob([cover.data], { type: cover.format }) : undefined;\n  const coverUrl = coverBlob ? URL.createObjectURL(coverBlob) : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import type { ApiBoostsStatus } from '../../../api/types';\n\nexport function getBoostProgressInfo(boostInfo: ApiBoostsStatus, freezeOnLevelUp?: boolean) {\n  const {\n    level, boosts, currentLevelBoosts, nextLevelBoosts, hasMyBoost, prepaidGiveaways,\n  } = boostInfo;\n\n  const isJustUpgraded = freezeOnLevelUp && boosts === currentLevelBoosts && hasMyBoost;\n\n  const currentLevel = isJustUpgraded ? level - 1 : level;\n  const hasNextLevel = Boolean(nextLevelBoosts);\n\n  const levelProgress = (!nextLevelBoosts || isJustUpgraded) ? 1\n    : (boosts - currentLevelBoosts) / (nextLevelBoosts - currentLevelBoosts);\n  const remainingBoosts = nextLevelBoosts ? nextLevelBoosts - boosts : 0;\n\n  const isMaxLevel = nextLevelBoosts === undefined;\n\n  return {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n    isMaxLevel,\n    prepaidGiveaways,\n  };\n}\n","import type { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\n\nimport {\n  getChatTitle,\n  isChatGroup,\n} from '../../../../global/helpers';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { isUserId } from '../../../../util/entities/ids';\n\nexport function getSenderName(\n  lang: OldLangFn, message: ApiMessage, chatsById: Record<string, ApiChat>, usersById: Record<string, ApiUser>,\n) {\n  const { senderId } = message;\n  if (!senderId) {\n    return undefined;\n  }\n\n  const sender = isUserId(senderId) ? usersById[senderId] : chatsById[senderId];\n\n  let senderName = getPeerTitle(lang, sender);\n\n  const chat = chatsById[message.chatId];\n  if (chat) {\n    if ('isSelf' in sender && sender.isSelf) {\n      senderName = `${lang('FromYou')} → ${getChatTitle(lang, chat)}`;\n    } else if (isChatGroup(chat)) {\n      senderName += ` → ${getChatTitle(lang, chat)}`;\n    }\n  }\n\n  return senderName;\n}\n","import { getGlobal, setGlobal } from '../../../global';\n\nimport type { ApiDocument, ApiMessage } from '../../../api/types';\n\nimport {\n  getDocumentMediaHash, getMediaFormat, getMessageDocumentPhoto, getMessageDocumentVideo,\n} from '../../../global/helpers';\nimport { updateChatMessage } from '../../../global/reducers';\nimport { selectChatMessage } from '../../../global/selectors';\nimport { IS_PROGRESSIVE_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { preloadImage, preloadVideo } from '../../../util/files';\nimport { fetch } from '../../../util/mediaLoader';\nimport LimitedMap from '../../../util/primitives/LimitedMap';\n\nconst preloadedHashes = new LimitedMap<string, void>(100);\n\nexport async function preloadDocumentMedia(mediaContainer: ApiMessage) {\n  const video = getMessageDocumentVideo(mediaContainer);\n  const photo = getMessageDocumentPhoto(mediaContainer);\n\n  const media = video || photo;\n\n  // Skip large photos that were not processed by the server\n  const shouldSkipPhoto = photo && photo.mediaSize && !photo.mediaSize.fromDocumentAttribute;\n  if (!media || media.previewBlobUrl || shouldSkipPhoto) {\n    return;\n  }\n\n  const hash = getDocumentMediaHash(media, 'full');\n  if (!hash || preloadedHashes.has(hash)) {\n    return;\n  }\n\n  preloadedHashes.set(hash, undefined);\n\n  const url = await fetch(hash, getMediaFormat(media, 'full'));\n  if (!url) {\n    return;\n  }\n\n  let dimensions: ApiDocument['mediaSize'] | undefined;\n\n  if (video && IS_PROGRESSIVE_SUPPORTED) {\n    const videoEl = await preloadVideo(url);\n    dimensions = { width: videoEl.videoWidth, height: videoEl.videoHeight, fromPreload: true };\n  }\n\n  if (photo) {\n    const img = await preloadImage(url);\n    dimensions = { width: img.naturalWidth, height: img.naturalHeight, fromPreload: true };\n  }\n\n  if (!dimensions || dimensions.width <= 0 || dimensions.height <= 0) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, mediaContainer.chatId, mediaContainer.id);\n  if (!message || !message.content.document) return;\n  global = updateChatMessage(global, mediaContainer.chatId, mediaContainer.id, {\n    content: {\n      ...message.content,\n      document: {\n        ...message.content.document,\n        mediaSize: dimensions,\n      },\n    },\n  });\n  setGlobal(global);\n}\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDocument, ApiMessage } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getDocumentMediaHash,\n  getMediaFormat,\n  getMediaThumbUri,\n  getMediaTransferState,\n  isDocumentVideo,\n} from '../../global/helpers';\nimport { isIpRevealingMedia } from '../../util/media/ipRevealingMedia';\nimport { getDocumentExtension, getDocumentHasPreview } from './helpers/documentInfo';\nimport { preloadDocumentMedia } from './helpers/preloadDocumentMedia';\n\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport File from './File';\n\ntype OwnProps = {\n  document: ApiDocument;\n  observeIntersection?: ObserveFn;\n  smaller?: boolean;\n  isSelected?: boolean;\n  isSelectable?: boolean;\n  canAutoLoad?: boolean;\n  uploadProgress?: number;\n  datetime?: number;\n  className?: string;\n  sender?: string;\n  autoLoadFileMaxSizeMb?: number;\n  isDownloading?: boolean;\n  shouldWarnAboutFiles?: boolean;\n  onCancelUpload?: () => void;\n  onMediaClick?: () => void;\n} & ({\n  message: ApiMessage;\n  onDateClick: (arg: ApiMessage) => void;\n} | {\n  message?: ApiMessage;\n  onDateClick?: never;\n});\n\nconst BYTES_PER_MB = 1024 * 1024;\n\nconst Document = ({\n  document,\n  observeIntersection,\n  smaller,\n  canAutoLoad,\n  autoLoadFileMaxSizeMb,\n  uploadProgress,\n  datetime,\n  className,\n  sender,\n  isSelected,\n  isSelectable,\n  shouldWarnAboutFiles,\n  isDownloading,\n  message,\n  onCancelUpload,\n  onMediaClick,\n  onDateClick,\n}: OwnProps) => {\n  const { cancelMediaDownload, downloadMedia, setSharedSettingOption } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n  const [isFileIpDialogOpen, openFileIpDialog, closeFileIpDialog] = useFlag();\n  const [shouldNotWarnAboutFiles, setShouldNotWarnAboutFiles] = useState(false);\n\n  const { fileName, size, mimeType } = document;\n  const extension = getDocumentExtension(document) || '';\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const [wasIntersected, markIntersected] = useFlag();\n  useEffect(() => {\n    if (isIntersecting) {\n      markIntersected();\n    }\n  }, [isIntersecting, markIntersected]);\n\n  // Auto-loading does not use global download manager because requires additional click to save files locally\n  const [isLoadAllowed, setIsLoadAllowed] = useState(\n    canAutoLoad && (!autoLoadFileMaxSizeMb || size <= autoLoadFileMaxSizeMb * BYTES_PER_MB),\n  );\n\n  const shouldDownload = Boolean(isDownloading || (isLoadAllowed && wasIntersected));\n\n  const documentHash = getDocumentMediaHash(document, 'download');\n  const { loadProgress: downloadProgress, mediaData } = useMediaWithLoadProgress(\n    documentHash, !shouldDownload, getMediaFormat(document, 'download'), undefined, true,\n  );\n  const isLoaded = Boolean(mediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    uploadProgress || downloadProgress,\n    shouldDownload && !isLoaded,\n    uploadProgress !== undefined,\n  );\n\n  const hasPreview = getDocumentHasPreview(document);\n  const thumbDataUri = hasPreview ? getMediaThumbUri(document) : undefined;\n  const localBlobUrl = hasPreview ? document.previewBlobUrl : undefined;\n  const previewData = useMedia(getDocumentMediaHash(document, 'pictogram'), !isIntersecting);\n\n  const shouldForceDownload = document.innerMediaType === 'photo' && document.mediaSize\n    && !document.mediaSize.fromDocumentAttribute && !document.mediaSize.fromPreload;\n\n  const withMediaViewer = onMediaClick && document.innerMediaType && !shouldForceDownload;\n\n  useEffect(() => {\n    const fileEl = ref.current;\n    if (!withMediaViewer || !fileEl || !message) return;\n\n    const onHover = () => {\n      preloadDocumentMedia(message);\n    };\n\n    fileEl.addEventListener('mouseenter', onHover);\n\n    return () => {\n      fileEl.removeEventListener('mouseenter', onHover);\n    };\n  }, [withMediaViewer, message]);\n\n  const handleDownload = useLastCallback(() => {\n    downloadMedia({ media: document, originMessage: message });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload();\n      }\n      return;\n    }\n\n    if (isDownloading) {\n      cancelMediaDownload({ media: document });\n      return;\n    }\n\n    if (isTransferring) {\n      setIsLoadAllowed(false);\n      return;\n    }\n\n    if (withMediaViewer) {\n      onMediaClick();\n      return;\n    }\n\n    if (isIpRevealingMedia({ mimeType, extension }) && shouldWarnAboutFiles) {\n      openFileIpDialog();\n      return;\n    }\n\n    handleDownload();\n  });\n\n  const handleFileIpConfirm = useLastCallback(() => {\n    setSharedSettingOption({ shouldWarnAboutFiles: !shouldNotWarnAboutFiles });\n    closeFileIpDialog();\n    handleDownload();\n  });\n\n  const handleDateClick = useLastCallback(() => {\n    onDateClick?.(message);\n  });\n\n  return (\n    <>\n      <File\n        ref={ref}\n        name={fileName}\n        extension={extension}\n        size={size}\n        timestamp={datetime}\n        thumbnailDataUri={thumbDataUri}\n        previewData={localBlobUrl || previewData}\n        smaller={smaller}\n        isTransferring={isTransferring}\n        isUploading={isUploading}\n        transferProgress={transferProgress}\n        className={className}\n        sender={sender}\n        isSelectable={isSelectable}\n        isSelected={isSelected}\n        actionIcon={withMediaViewer ? (isDocumentVideo(document) ? 'play' : 'eye') : 'download'}\n        onClick={handleClick}\n        onDateClick={onDateClick ? handleDateClick : undefined}\n      />\n      <ConfirmDialog\n        isOpen={isFileIpDialogOpen}\n        onClose={closeFileIpDialog}\n        confirmHandler={handleFileIpConfirm}\n      >\n        {lang('lng_launch_svg_warning')}\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldNotWarnAboutFiles}\n          label={lang('lng_launch_exe_dont_ask')}\n          onCheck={setShouldNotWarnAboutFiles}\n        />\n      </ConfirmDialog>\n    </>\n  );\n};\n\nexport default memo(Document);\n","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"RXAMu4VD\",\"mediaArea\":\"pruw1nLm\",\"preview\":\"_5HkplWee\",\"shiny\":\"xFjJpeOA\",\"wave\":\"Ux0tlNbE\",\"light\":\"_7esBA3m\",\"dark\":\"eic2vQ8c\",\"reactionBackground\":\"c3ajA3hg\",\"flipped\":\"furSXGdL\",\"reaction\":\"Et3MvYmN\",\"withCount\":\"mFTLUHm2\",\"reactionCount\":\"Tr8mYyDk\",\"weather\":\"KBjMtRUS\",\"weatherInner\":\"IFChB3tD\",\"temperature\":\"_ke1UBIl\"};","import {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMediaAreaSuggestedReaction, ApiStory } from '../../../api/types';\n\nimport { getStoryKey, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { isUserId } from '../../../util/entities/ids';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport ReactionAnimatedEmoji from '../../common/reactions/ReactionAnimatedEmoji';\n\nimport styles from './MediaArea.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  mediaArea: ApiMediaAreaSuggestedReaction;\n  index: number;\n  isPreview?: boolean;\n  className?: string;\n  style?: string;\n};\n\nconst REACTION_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 4;\n\nconst MediaAreaSuggestedReaction = ({\n  story,\n  mediaArea,\n  index,\n  className,\n  style,\n  isPreview,\n}: OwnProps) => {\n  const { sendStoryReaction } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const [customEmojiSize, setCustomEmojiSize] = useState(1.5 * REM);\n\n  const { peerId, id, views } = story;\n  const { reactions } = views || {};\n  const { reaction, isDark, isFlipped } = mediaArea;\n\n  const isChannel = !isUserId(peerId);\n  const containerId = `${getStoryKey(peerId, id)}-${index}-${isPreview ? 'preview' : 'viewer'}`;\n\n  const reactionCount = useMemo(() => (\n    reactions?.find((r) => isSameReaction(r.reaction, reaction))?.count\n  ), [reaction, reactions]);\n  const shouldDisplayCount = !isPreview && Boolean(reactionCount) && isChannel;\n\n  const updateCustomEmojiSize = useLastCallback(() => {\n    if (!ref.current) return;\n    const height = ref.current.clientHeight;\n    setCustomEmojiSize(Math.round(height * REACTION_SIZE_MULTIPLIER));\n  });\n\n  useEffectWithPrevDeps(([prevReactionCount]) => {\n    if (Boolean(reactionCount) !== Boolean(prevReactionCount)) {\n      updateCustomEmojiSize();\n    }\n  }, [reactionCount]);\n\n  useResizeObserver(ref, updateCustomEmojiSize);\n\n  const handleClick = useLastCallback(() => {\n    sendStoryReaction({\n      peerId,\n      storyId: id,\n      containerId,\n      reaction,\n    });\n  });\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(isDark ? styles.dark : styles.light, className)}\n      style={buildStyle(style, `--custom-emoji-size: ${customEmojiSize}px`)}\n      onClick={handleClick}\n    >\n      <div\n        className={buildClassName(styles.reactionBackground, isFlipped && styles.flipped)}\n      />\n      {Boolean(customEmojiSize) && (\n        <ReactionAnimatedEmoji\n          className={buildClassName(styles.reaction, shouldDisplayCount && styles.withCount)}\n          reaction={reaction}\n          containerId={containerId}\n          size={customEmojiSize}\n          effectSize={customEmojiSize * EFFECT_SIZE_MULTIPLIER}\n          shouldPause={isPreview}\n          shouldLoop={!isPreview}\n        />\n      )}\n      {shouldDisplayCount && (\n        <span className={styles.reactionCount}>{reactionCount}</span>\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaAreaSuggestedReaction);\n","export const formatTemperature = (temperatureC: number) => {\n  const isFahrenheit = Boolean(navigator.language === 'en-US');\n  return isFahrenheit ? `${Math.round((temperatureC * 9) / 5 + 32)}°F` : `${Math.round(temperatureC)}°C`;\n};\n","import {\n  type FC, memo,\n  useLayoutEffect,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { setExtraStyles } from '../../../lib/teact/teact-dom';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiMediaAreaWeather, ApiSticker } from '../../../api/types';\n\nimport { requestForcedReflow, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectRestrictedEmoji } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { convertToRGBA, getTextColor } from '../../../util/colors';\nimport { formatTemperature } from '../../../util/formatTemperature';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './MediaArea.module.scss';\n\ntype OwnProps = {\n  mediaArea: ApiMediaAreaWeather;\n  className?: string;\n  style?: string;\n  isPreview?: boolean;\n};\n\ntype StateProps = {\n  restrictedEmoji?: ApiSticker;\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.7;\nconst TEMPERATURE_SIZE = 32;\n\nconst MediaAreaWeather: FC<OwnProps & StateProps> = ({\n  mediaArea,\n  className,\n  style,\n  restrictedEmoji,\n  isPreview,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const [customEmojiSize, setCustomEmojiSize] = useState(0);\n\n  const { temperatureC, color } = mediaArea;\n\n  const backgroundColor = convertToRGBA(color);\n  const textColor = getTextColor(color);\n\n  const updateCustomSize = useLastCallback((isImmediate?: boolean) => {\n    if (!ref.current) return undefined;\n    const el = ref.current;\n\n    const height = el.clientHeight;\n    const customEmojiHeight = Math.round(height * EMOJI_SIZE_MULTIPLIER);\n    setCustomEmojiSize(customEmojiHeight);\n    const applyFn = () => {\n      setExtraStyles(el, {\n        '--custom-emoji-size': `${customEmojiHeight}px`,\n        'font-size': `${height / TEMPERATURE_SIZE}rem`,\n      });\n    };\n\n    if (isImmediate) return applyFn;\n\n    requestMutation(applyFn);\n\n    return undefined;\n  });\n\n  useLayoutEffect(() => {\n    requestForcedReflow(() => updateCustomSize(true));\n  }, []);\n\n  useResizeObserver(ref, () => updateCustomSize());\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.weather, className)}\n      style={buildStyle(\n        style,\n        `--custom-background-color: ${backgroundColor}`,\n        `color: ${textColor}`,\n      )}\n    >\n      <div className={styles.weatherInner}>\n        {restrictedEmoji && (\n          <CustomEmoji\n            key={restrictedEmoji.id}\n            documentId={restrictedEmoji.id}\n            size={customEmojiSize}\n            noPlay={isPreview}\n            withTranslucentThumb\n            forceAlways\n          />\n        )}\n        <p className={styles.temperature}>\n          {formatTemperature(temperatureC)}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, ownProps): Complete<StateProps> => {\n  const { mediaArea } = ownProps;\n  const restrictedEmoji = selectRestrictedEmoji(global, mediaArea.emoji);\n  return { restrictedEmoji };\n})(MediaAreaWeather));\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMediaArea, ApiStory } from '../../../api/types';\n\nimport { MOBILE_SCREEN_MAX_WIDTH } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport MediaAreaSuggestedReaction from './MediaAreaSuggestedReaction';\nimport MediaAreaWeather from './MediaAreaWeather';\n\nimport styles from './MediaArea.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  isActive?: boolean;\n  isStoryPlaying?: boolean;\n  className?: string;\n};\n\nconst STORY_ASPECT_RATIO = 9 / 16;\nconst PERCENTAGE_BASE = 100;\n\nconst NO_SHINY_TYPES = new Set<ApiMediaArea['type']>(['channelPost', 'uniqueGift']);\n\nconst MediaAreaOverlay = ({\n  story, isActive, className, isStoryPlaying,\n}: OwnProps) => {\n  const {\n    openMapModal, openUniqueGiftBySlug, focusMessage, closeStoryViewer, openUrl,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const [mediaWidth, setMediaWidth] = useState(0);\n\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current) return;\n    const element = ref.current;\n    setMediaWidth(element.clientWidth);\n\n    if (windowSize.width > MOBILE_SCREEN_MAX_WIDTH) {\n      requestMutation(() => {\n        element.style.removeProperty('--media-width');\n        element.style.removeProperty('--media-height');\n      });\n      return;\n    }\n\n    const screenAspectRatio = windowSize.width / windowSize.height;\n\n    const width = screenAspectRatio < STORY_ASPECT_RATIO\n      ? element.clientHeight * STORY_ASPECT_RATIO : element.clientWidth;\n    const height = screenAspectRatio < STORY_ASPECT_RATIO\n      ? element.clientHeight : element.clientWidth / STORY_ASPECT_RATIO;\n\n    requestMutation(() => {\n      element.style.setProperty('--media-width', `${width}px`);\n      element.style.setProperty('--media-height', `${height}px`);\n    });\n  }, [isActive, windowSize]);\n\n  const handleMediaAreaClick = (mediaArea: ApiMediaArea) => {\n    switch (mediaArea.type) {\n      case 'geoPoint':\n      case 'venue': {\n        openMapModal({ geoPoint: mediaArea.geo });\n        break;\n      }\n      case 'channelPost': {\n        focusMessage({\n          chatId: mediaArea.channelId,\n          messageId: mediaArea.messageId,\n        });\n        closeStoryViewer();\n        break;\n      }\n      case 'url': {\n        openUrl({ url: mediaArea.url });\n        break;\n      }\n      case 'uniqueGift': {\n        openUniqueGiftBySlug({ slug: mediaArea.slug });\n        break;\n      }\n    }\n  };\n\n  const mediaAreas = story.mediaAreas;\n\n  return (\n    <div\n      className={buildClassName(styles.overlay, !isActive && styles.preview, className)}\n      ref={ref}\n    >\n      {mediaAreas?.map((mediaArea, i) => {\n        switch (mediaArea.type) {\n          case 'geoPoint':\n          case 'venue':\n          case 'channelPost':\n          case 'url':\n          case 'uniqueGift': {\n            const isShiny = isActive && !NO_SHINY_TYPES.has(mediaArea.type);\n            return (\n              <div\n                className={buildClassName(styles.mediaArea, isShiny && styles.shiny)}\n                style={prepareStyle(mediaArea)}\n                onClick={() => handleMediaAreaClick(mediaArea)}\n              />\n            );\n          }\n          case 'suggestedReaction':\n            return (\n              <MediaAreaSuggestedReaction\n\n                key={`${mediaArea.type}-${i}`}\n                story={story}\n                mediaArea={mediaArea}\n                index={i}\n                isPreview={!isActive}\n                className={styles.mediaArea}\n                style={prepareStyle(mediaArea)}\n              />\n            );\n          case 'weather': {\n            return (\n              <MediaAreaWeather\n\n                key={`${mediaArea.type}-${i}`}\n                mediaArea={mediaArea}\n                className={styles.mediaArea}\n                style={prepareStyle(mediaArea, mediaWidth)}\n                isPreview={!isActive || isStoryPlaying}\n              />\n            );\n          }\n          default:\n            return undefined;\n        }\n      })}\n    </div>\n  );\n};\n\nfunction prepareStyle(mediaArea: ApiMediaArea, mediaWidth?: number) {\n  const {\n    x, y, width, height, rotation, radius,\n  } = mediaArea.coordinates;\n\n  let pixelRadius = '';\n\n  if (mediaWidth && radius && mediaWidth > 0) {\n    const pixelWidth = (mediaWidth * (width / PERCENTAGE_BASE));\n    const pixelHeight = (mediaWidth * (height / PERCENTAGE_BASE));\n    pixelRadius = `${Math.min(pixelWidth, pixelHeight) * (radius / PERCENTAGE_BASE)}px`;\n  }\n\n  return buildStyle(\n    `left: ${x}%`,\n    `top: ${y}%`,\n    `width: ${width}%`,\n    `height: ${height}%`,\n    `transform: rotate(${rotation}deg) translate(-50%, -50%)`,\n    pixelRadius && `border-radius: ${pixelRadius}`,\n  );\n}\n\nexport default memo(MediaAreaOverlay);\n","import { useEffect } from '../../lib/teact/teact';\n\nimport { onBeforeUnload } from '../../util/schedulers';\nimport useLastCallback from '../useLastCallback';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  const lastCallback = useLastCallback(callback);\n\n  useEffect(() => onBeforeUnload(lastCallback), [lastCallback]);\n}\n","import type { ElementRef } from '@teact';\nimport { useEffect, useLayoutEffect } from '@teact';\nimport { addExtraClass, removeExtraClass, toggleExtraClass } from '@teact/teact-dom.ts';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom.ts';\nimport { throttle } from '../util/schedulers.ts';\n\nconst THROTTLE_DELAY = 100;\n\nconst useScrollNotch = ({\n  containerRef,\n  selector,\n}: {\n  containerRef: ElementRef<HTMLDivElement>;\n  selector: string;\n}, deps: unknown[]) => {\n  useLayoutEffect(() => {\n    const elements = containerRef.current?.querySelectorAll<HTMLElement>(selector);\n    if (!elements?.length) return undefined;\n\n    const handleScroll = throttle((event: Event) => {\n      const target = event.target as HTMLElement;\n      const isScrolled = target.scrollTop > 0;\n\n      requestMutation(() => {\n        toggleExtraClass(target, 'scrolled', isScrolled);\n      });\n    }, THROTTLE_DELAY);\n\n    elements.forEach((el) => {\n      addExtraClass(el, 'with-notch');\n      el.addEventListener('scroll', handleScroll, { passive: true });\n    });\n\n    return () => {\n      elements.forEach((el) => {\n        el.removeEventListener('scroll', handleScroll);\n        removeExtraClass(el, 'with-notch');\n      });\n    };\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [containerRef, selector, ...deps]);\n\n  useEffect(() => {\n    const elements = containerRef.current?.querySelectorAll<HTMLElement>(selector);\n    if (!elements?.length) return undefined;\n\n    elements.forEach((el) => {\n      const isScrolled = el.scrollTop > 0;\n      requestMutation(() => {\n        toggleExtraClass(el, 'scrolled', isScrolled);\n      });\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [containerRef, selector, ...deps]);\n};\n\nexport default useScrollNotch;\n","import { useLayoutEffect, useMemo, useRef } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport cycleRestrict from '../util/cycleRestrict';\nimport { preloadImage } from '../util/files';\nimport { MAX_WORKERS, requestMediaWorker } from '../util/launchMediaWorkers';\nimport useLastCallback from './useLastCallback';\n\nconst RADIUS_RATIO = 0.1; // Use 10% of the smallest dimension as the blur radius\n\nlet lastWorkerIndex = -1;\n\nexport default function useOffscreenCanvasBlur(\n  thumbData?: string, // data URI or blob URL\n  isDisabled = false,\n) {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const workerIndex = useMemo(() => cycleRestrict(MAX_WORKERS, ++lastWorkerIndex), []);\n  const offscreenRef = useRef<OffscreenCanvas>();\n\n  const blurThumb = useLastCallback(async (canvas: HTMLCanvasElement, uri: string) => {\n    const image = await preloadImage(uri);\n    if (!image) {\n      return;\n    }\n\n    requestMutation(() => {\n      canvas.width = image.width;\n      canvas.height = image.height;\n\n      offscreenRef.current = canvas.transferControlToOffscreen();\n\n      const radius = Math.ceil(Math.min(image.width, image.height) * RADIUS_RATIO);\n\n      requestMediaWorker({\n        name: 'offscreen-canvas:blurThumb',\n        args: [offscreenRef.current, uri, radius],\n        transferables: [offscreenRef.current],\n      }, workerIndex);\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!thumbData || isDisabled || offscreenRef.current) return;\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    blurThumb(canvas, thumbData);\n  }, [blurThumb, isDisabled, thumbData]);\n\n  return canvasRef;\n}\n","import { getMediaThumbUri, type MediaWithThumbs } from '../../../../global/helpers';\n\nimport useOffscreenCanvasBlur from '../../../../hooks/useOffscreenCanvasBlur';\n\ntype CanvasBlurReturnType = ReturnType<typeof useOffscreenCanvasBlur>;\n\nexport default function useBlurredMediaThumbRef(\n  forcedUri: string | undefined, isDisabled: boolean,\n): CanvasBlurReturnType;\nexport default function useBlurredMediaThumbRef(media: MediaWithThumbs, isDisabled?: boolean): CanvasBlurReturnType;\nexport default function useBlurredMediaThumbRef(\n  media: MediaWithThumbs | string | undefined,\n  isDisabled?: boolean,\n) {\n  const dataUri = media ? typeof media === 'string' ? media : getMediaThumbUri(media) : undefined;\n\n  return useOffscreenCanvasBlur(dataUri, isDisabled);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiGroupCall } from '../../../api/types';\n\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { selectChatGroupCall } from '../../../global/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../../middle/hooks/useHeaderPane';\n\nimport AvatarList from '../../common/AvatarList';\nimport Button from '../../ui/Button';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n};\n\nconst PREVIEW_AVATARS_COUNT = 3;\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  className,\n  groupCall,\n  onPaneStateChange,\n}) => {\n  const {\n    requestMasterAndJoinGroupCall,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    requestMasterAndJoinGroupCall({\n      chatId,\n    });\n  }, [requestMasterAndJoinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (!participants) {\n      return [];\n    }\n\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n\n    return Object.values(participants)\n      .slice(0, PREVIEW_AVATARS_COUNT)\n      .map(({ id }) => usersById[id] || chatsById[id])\n      .filter(Boolean);\n  }, [participants]);\n\n  const renderingParticipantCount = useCurrentOrPrev(groupCall?.participantsCount, true);\n  const renderingFetchedParticipants = useCurrentOrPrev(fetchedParticipants, true);\n\n  const isRendering = Boolean(groupCall && isActive);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'GroupCallTopPane',\n        className,\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', renderingParticipantCount ?? 0, 'i')}</span>\n      </div>\n      {Boolean(renderingFetchedParticipants?.length) && (\n        <AvatarList size=\"small\" peers={renderingFetchedParticipants} className=\"avatars\" />\n      )}\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    const activeGroupCallId = selectTabState(global).isMasterTab ? global.groupCalls.activeGroupCallId : undefined;\n\n    return {\n      groupCall,\n      isActive: activeGroupCallId !== groupCall?.id && Boolean(\n        groupCall\n          ? groupCall.participantsCount > 0 && groupCall.isLoaded\n          : chat && chat.isCallNotEmpty && chat.isCallActive,\n      ),\n    };\n  },\n)(GroupCallTopPane));\n","import type { Scheduler } from '../util/schedulers';\nimport type { Signal } from '../util/signals';\n\nimport useDebouncedCallback from './useDebouncedCallback';\nimport useDerivedSignal from './useDerivedSignal';\nimport useThrottledCallback from './useThrottledCallback';\n\nexport function useThrottledResolver<T>(\n  resolver: () => T,\n  deps: any[],\n  msOrSchedulerFn: number | Scheduler,\n  noFirst = false,\n) {\n  return useThrottledCallback((setValue: (newValue: T) => void) => {\n    setValue(resolver());\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, deps, msOrSchedulerFn, noFirst);\n}\n\nexport function useThrottledSignal<T>(\n  getValue: Signal<T>,\n  ms: number,\n  noFirst = false,\n): Signal<T> {\n  const throttledResolver = useThrottledResolver(() => getValue(), [getValue], ms, noFirst);\n\n  return useDerivedSignal(\n    throttledResolver, [throttledResolver, getValue], true,\n  );\n}\n\nexport function useDebouncedResolver<T>(\n  resolver: () => T,\n  deps: any[],\n  ms: number,\n  noFirst = false,\n  noLast = false,\n) {\n  return useDebouncedCallback((setValue: (newValue: T) => void) => {\n    setValue(resolver());\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, deps, ms, noFirst, noLast);\n}\n\nexport function useDebouncedSignal<T>(\n  getValue: Signal<T>,\n  ms: number,\n  noFirst = false,\n  noLast = false,\n): Signal<T> {\n  const debouncedResolver = useDebouncedResolver(() => getValue(), [getValue], ms, noFirst, noLast);\n\n  return useDerivedSignal(\n    debouncedResolver, [debouncedResolver, getValue], true,\n  );\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ChatTranslatedMessages } from '../../../../types';\n\nimport { throttle } from '../../../../util/schedulers';\n\nconst MESSAGE_LIMIT_PER_REQUEST = 20;\nconst THROTTLE_DELAY = 500;\nconst PENDING_TRANSLATIONS = new Map<string, Map<string, number[]>>();\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId?: string,\n  messageId?: number,\n  requestedLanguageCode?: string,\n) {\n  const messageTranslation = requestedLanguageCode && messageId\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!chatId || !messageId) return;\n\n    if (!text && isPending === undefined && requestedLanguageCode) {\n      addPendingTranslation(chatId, messageId, requestedLanguageCode);\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode]);\n\n  if (!chatId || !messageId) {\n    return {\n      isPending: false,\n      translatedText: undefined,\n    };\n  }\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n\nconst throttledProcessPending = throttle(processPending, THROTTLE_DELAY);\n\nfunction processPending() {\n  const { translateMessages } = getActions();\n  let hasUnprocessed = false;\n  PENDING_TRANSLATIONS.forEach((chats, toLanguageCode) => {\n    chats.forEach((messageIds, chatId) => {\n      const messageIdsToTranslate = messageIds.slice(0, MESSAGE_LIMIT_PER_REQUEST);\n\n      if (messageIdsToTranslate.length < messageIds.length) {\n        hasUnprocessed = true;\n      }\n\n      translateMessages({ chatId, messageIds: messageIdsToTranslate, toLanguageCode });\n\n      removePendingTranslations(chatId, messageIdsToTranslate, toLanguageCode);\n    });\n  });\n\n  if (hasUnprocessed) {\n    throttledProcessPending();\n  }\n}\n\nfunction addPendingTranslation(\n  chatId: string,\n  messageId: number,\n  toLanguageCode: string,\n) {\n  const languageTranslations = PENDING_TRANSLATIONS.get(toLanguageCode) || new Map<string, number[]>();\n  const messageIds = languageTranslations.get(chatId) || [];\n\n  if (messageIds.includes(messageId)) {\n    throttledProcessPending();\n    return;\n  }\n\n  messageIds.push(messageId);\n  languageTranslations.set(chatId, messageIds);\n  PENDING_TRANSLATIONS.set(toLanguageCode, languageTranslations);\n\n  getActions().markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  throttledProcessPending();\n}\n\nfunction removePendingTranslations(\n  chatId: string,\n  messageIds: number[],\n  toLanguageCode: string,\n) {\n  const languageTranslations = PENDING_TRANSLATIONS.get(toLanguageCode);\n  if (!languageTranslations?.size) {\n    PENDING_TRANSLATIONS.delete(toLanguageCode);\n    return;\n  }\n\n  const oldMessageIds = languageTranslations.get(chatId);\n  if (!oldMessageIds?.length) {\n    languageTranslations.delete(chatId);\n    return;\n  }\n\n  const newMessageIds = oldMessageIds.filter((id) => !messageIds.includes(id));\n\n  if (!newMessageIds?.length) {\n    languageTranslations.delete(chatId);\n    if (!languageTranslations.size) {\n      PENDING_TRANSLATIONS.delete(toLanguageCode);\n    }\n    return;\n  }\n\n  languageTranslations.set(chatId, newMessageIds);\n}\n","import type { ElementRef } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiMessage, ApiVideo, ApiVoice,\n  ApiWebPage,\n} from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { ThemeKey } from '../../types';\nimport { ApiMediaFormat } from '../../api/types';\nimport { AudioOrigin } from '../../types';\n\nimport {\n  getMediaFormat,\n  getMediaHash,\n  getMediaTransferState,\n  getWebPageAudio,\n  hasMessageTtl,\n  isMessageLocal,\n  isOwnMessage,\n} from '../../global/helpers';\nimport { selectWebPageFromMessage } from '../../global/selectors';\nimport { selectMessageMediaDuration } from '../../global/selectors/media';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDateTime, formatMediaDuration, formatPastTimeShort } from '../../util/dates/dateFormat';\nimport { decodeWaveform, interpolateArray } from '../../util/waveform';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport { getFileSizeString } from './helpers/documentInfo';\nimport renderText from './helpers/renderText';\nimport { MAX_EMPTY_WAVEFORM_POINTS, renderWaveform } from './helpers/waveform';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useBuffering from '../../hooks/useBuffering';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport AnimatedIcon from './AnimatedIcon';\nimport Icon from './icons/Icon';\n\nimport './Audio.scss';\n\ntype OwnProps = {\n  theme: ThemeKey;\n  message: ApiMessage;\n  senderTitle?: string;\n  uploadProgress?: number;\n  origin: AudioOrigin;\n  date?: number;\n  noAvatars?: boolean;\n  className?: string;\n  isSelectable?: boolean;\n  isSelected?: boolean;\n  isDownloading?: boolean;\n  isTranscribing?: boolean;\n  isTranscribed?: boolean;\n  canDownload?: boolean;\n  canTranscribe?: boolean;\n  isTranscriptionHidden?: boolean;\n  isTranscriptionError?: boolean;\n  autoPlay?: boolean;\n  onHideTranscription?: (isHidden: boolean) => void;\n  onPlay?: (messageId: number, chatId: string) => void;\n  onPause?: NoneToVoidFunction;\n  onReadMedia?: () => void;\n  onCancelUpload?: () => void;\n  onDateClick?: (arg: ApiMessage) => void;\n};\n\ntype StateProps = {\n  mediaDuration?: number;\n  webPage?: ApiWebPage;\n};\n\nexport const TINY_SCREEN_WIDTH_MQL = window.matchMedia('(max-width: 375px)');\nexport const WITH_AVATAR_TINY_SCREEN_WIDTH_MQL = window.matchMedia('(max-width: 410px)');\nconst AVG_VOICE_DURATION = 10;\n// This is needed for browsers requiring user interaction before playing.\nconst PRELOAD = true;\n\nconst Audio = ({\n  theme,\n  message,\n  senderTitle,\n  uploadProgress,\n  origin,\n  date,\n  noAvatars,\n  className,\n  isSelectable,\n  isSelected,\n  isDownloading,\n  isTranscribing,\n  isTranscriptionHidden,\n  isTranscribed,\n  isTranscriptionError,\n  canDownload,\n  canTranscribe,\n  autoPlay,\n  webPage,\n  mediaDuration,\n  onHideTranscription,\n  onPlay,\n  onPause,\n  onReadMedia,\n  onCancelUpload,\n  onDateClick,\n}: OwnProps & StateProps) => {\n  const {\n    cancelMediaDownload, downloadMedia, transcribeAudio, openOneTimeMediaModal,\n  } = getActions();\n\n  const {\n    content: {\n      audio: contentAudio, voice, video,\n    }, isMediaUnread,\n  } = message;\n  const audio = contentAudio || getWebPageAudio(webPage);\n  const media = (voice || video || audio)!;\n  const mediaSource = (voice || video);\n  const isVoice = Boolean(voice || video);\n  const isSeeking = useRef<boolean>(false);\n  const seekerRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n  const { isRtl } = lang;\n\n  const { isMobile } = useAppLayout();\n  const [isActivated, setIsActivated] = useState(false);\n  const shouldLoad = isActivated || PRELOAD;\n  const coverHash = getMediaHash(media, 'pictogram');\n  const coverBlobUrl = useMedia(coverHash, false, ApiMediaFormat.BlobUrl);\n  const hasTtl = hasMessageTtl(message);\n  const isInOneTimeModal = origin === AudioOrigin.OneTimeModal;\n  const trackType = isVoice ? (hasTtl ? 'oneTimeVoice' : 'voice') : 'audio';\n\n  const mediaData = useMedia(\n    getMediaHash(media, 'inline'),\n    !shouldLoad,\n    getMediaFormat(media, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMediaHash(media, 'download'),\n    !isDownloading,\n    getMediaFormat(media, 'download'),\n  );\n\n  const handleForcePlay = useLastCallback(() => {\n    setIsActivated(true);\n    onPlay?.(message.id, message.chatId);\n  });\n\n  const handleTrackChange = useLastCallback(() => {\n    setIsActivated(false);\n  });\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, checkBuffering,\n  } = useBuffering();\n\n  const noReset = isInOneTimeModal;\n  const {\n    isPlaying, playProgress, playPause, setCurrentTime, duration,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    mediaDuration!,\n    trackType,\n    mediaData,\n    bufferingHandlers,\n    undefined,\n    checkBuffering,\n    Boolean(isActivated || autoPlay),\n    handleForcePlay,\n    handleTrackChange,\n    isMessageLocal(message) || hasTtl,\n    undefined,\n    onPause,\n    noReset,\n    hasTtl && !isInOneTimeModal,\n  );\n\n  const reversePlayProgress = 1 - playProgress;\n  const isOwn = isOwnMessage(message);\n  const isReverse = hasTtl && isInOneTimeModal;\n\n  const waveformCanvasRef = useWaveformCanvas(\n    theme,\n    mediaSource,\n    (isMediaUnread && !isOwn && !isReverse) ? 1 : playProgress,\n    isOwn,\n    !noAvatars,\n    isMobile,\n    isReverse,\n  );\n\n  const withSeekline = isPlaying || (playProgress > 0 && playProgress < 1);\n\n  useEffect(() => {\n    setIsActivated(isPlaying);\n  }, [isPlaying]);\n\n  const isLoadingForPlaying = isActivated && !isBuffered;\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    uploadProgress || downloadProgress,\n    isLoadingForPlaying || isDownloading,\n    uploadProgress !== undefined,\n  );\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransitionDeprecated(isTransferring);\n\n  const shouldRenderCross = shouldRenderSpinner && (isLoadingForPlaying || isUploading);\n\n  const handleButtonClick = useLastCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.();\n      return;\n    }\n\n    if (hasTtl) {\n      openOneTimeMediaModal({ message });\n      onReadMedia?.();\n      return;\n    }\n\n    if (!isPlaying) {\n      onPlay?.(message.id, message.chatId);\n    }\n\n    getActions().setAudioPlayerOrigin({ origin });\n    setIsActivated(!isActivated);\n    playPause();\n  });\n\n  useEffect(() => {\n    if (onReadMedia && isMediaUnread && isPlaying) {\n      onReadMedia();\n    }\n  }, [isPlaying, isMediaUnread, onReadMedia]);\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (isDownloading) {\n      cancelMediaDownload({ media });\n    } else {\n      downloadMedia({ media, originMessage: message });\n    }\n  });\n\n  const handleSeek = useLastCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeeking.current && seekerRef.current) {\n      const { width, left } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      e.stopPropagation(); // Prevent Slide-to-Reply activation\n      // Prevent track skipping while seeking near end\n      setCurrentTime(Math.max(Math.min(duration * ((clientX - left) / width), duration - 0.1), 0.001));\n    }\n  });\n\n  const handleStartSeek = useLastCallback((e: MouseEvent | TouchEvent) => {\n    if (e instanceof MouseEvent && e.button === 2) return;\n    isSeeking.current = true;\n    handleSeek(e);\n  });\n\n  const handleStopSeek = useLastCallback(() => {\n    isSeeking.current = false;\n  });\n\n  const handleDateClick = useLastCallback(() => {\n    onDateClick!(message);\n  });\n\n  const handleTranscribe = useLastCallback(() => {\n    transcribeAudio({ chatId: message.chatId, messageId: message.id });\n  });\n\n  useEffect(() => {\n    if (!seekerRef.current || !withSeekline || isInOneTimeModal) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [withSeekline, handleStartSeek, handleSeek, handleStopSeek, isInOneTimeModal]);\n\n  function renderFirstLine() {\n    if (isVoice) {\n      return senderTitle || 'Voice';\n    }\n\n    const { title, fileName } = audio!;\n\n    return title || fileName;\n  }\n\n  function renderSecondLine() {\n    if (isVoice) {\n      return (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          {formatMediaDuration((voice || video)!.duration)}\n        </div>\n      );\n    }\n\n    const { performer } = audio!;\n\n    return (\n      <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n        {formatMediaDuration(duration)}\n        <span className=\"bullet\">&bull;</span>\n        {performer && <span className=\"performer\" title={performer}>{renderText(performer)}</span>}\n        {performer && senderTitle && <span className=\"bullet\">&bull;</span>}\n        {senderTitle && <span title={senderTitle}>{renderText(senderTitle)}</span>}\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'Audio',\n    className,\n    isInOneTimeModal && 'non-interactive',\n    origin === AudioOrigin.Inline && 'inline',\n    isOwn && origin === AudioOrigin.Inline && 'own',\n    (origin === AudioOrigin.Search || origin === AudioOrigin.SharedMedia) && 'bigger',\n    isSelected && 'audio-is-selected',\n  );\n\n  const buttonClassNames = ['toogle-play-wrapper'];\n  if (shouldRenderCross) {\n    buttonClassNames.push('loading');\n  } else {\n    buttonClassNames.push(isPlaying ? 'pause' : 'play');\n  }\n\n  const contentClassName = buildClassName('content', withSeekline && 'with-seekline');\n\n  function renderWithTitle() {\n    return (\n      <div className={contentClassName}>\n        <div className=\"content-row\">\n          <p className=\"title\" dir=\"auto\" title={renderFirstLine()}>{renderText(renderFirstLine())}</p>\n\n          <div className=\"message-date\">\n            {Boolean(date) && (\n              <Link\n                className=\"date\"\n                onClick={handleDateClick}\n              >\n                {formatPastTimeShort(lang, date * 1000)}\n              </Link>\n            )}\n          </div>\n        </div>\n\n        {withSeekline && (\n          <div className=\"meta search-result\" dir={isRtl ? 'rtl' : undefined}>\n            <span className=\"duration with-seekline\" dir=\"auto\">\n              {playProgress < 1 && formatMediaDuration(duration * playProgress, duration)}\n            </span>\n            {renderSeekline(playProgress, bufferedRanges, seekerRef)}\n          </div>\n        )}\n        {!withSeekline && renderSecondLine()}\n      </div>\n    );\n  }\n\n  function renderTooglePlayWrapper() {\n    return (\n      <div className={buildClassName(...buttonClassNames)}>\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"smaller\"\n          className=\"toggle-play\"\n          color={coverBlobUrl ? 'translucent-white' : 'primary'}\n          ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n          onClick={handleButtonClick}\n          isRtl={lang.isRtl}\n          backgroundImage={coverBlobUrl}\n          nonInteractive={isInOneTimeModal}\n        >\n          {!isInOneTimeModal && <Icon name=\"play\" />}\n          {!isInOneTimeModal && <Icon name=\"pause\" />}\n          {isInOneTimeModal && (\n            <AnimatedIcon\n              className=\"flame\"\n              tgsUrl={LOCAL_TGS_URLS.Flame}\n              nonInteractive\n              noLoop={false}\n              size={40}\n            />\n          )}\n        </Button>\n        {hasTtl && !isInOneTimeModal && (\n          <Icon name=\"view-once\" />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : 'ltr'}>\n      {isSelectable && (\n        <div className=\"message-select-control no-selection\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {renderTooglePlayWrapper()}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames, shouldRenderCross && 'interactive')}>\n          <ProgressSpinner\n            progress={transferProgress}\n            transparent\n            withColor\n            size=\"m\"\n            onClick={shouldRenderCross ? handleButtonClick : undefined}\n            noCross={!shouldRenderCross}\n          />\n        </div>\n      )}\n      {isInOneTimeModal && !shouldRenderSpinner && (\n        <div className={buildClassName('media-loading')}>\n          <ProgressSpinner\n            progress={playProgress}\n            transparent\n            size=\"m\"\n            noCross\n            rotationOffset={3 / 4}\n          />\n        </div>\n      )}\n      {audio && canDownload && !isUploading && (\n        <Button\n          round\n          size=\"tiny\"\n          className=\"download-button\"\n          ariaLabel={isDownloading ? 'Cancel download' : 'Download'}\n          onClick={handleDownloadClick}\n        >\n          <Icon name={isDownloading ? 'close' : 'arrow-down'} />\n        </Button>\n      )}\n      {origin === AudioOrigin.Search && renderWithTitle()}\n      {origin !== AudioOrigin.Search && audio && renderAudio(\n        lang,\n        audio,\n        duration,\n        isPlaying,\n        playProgress,\n        bufferedRanges,\n        seekerRef,\n        (isDownloading || isUploading),\n        date,\n        transferProgress,\n        onDateClick ? handleDateClick : undefined,\n      )}\n      {origin === AudioOrigin.SharedMedia && mediaSource && renderWithTitle()}\n      {(origin === AudioOrigin.Inline || isInOneTimeModal || isTranscribed) && mediaSource && (\n        renderVoice(\n          mediaSource,\n          seekerRef,\n          waveformCanvasRef,\n          hasTtl ? reversePlayProgress : playProgress,\n          isMediaUnread,\n          isTranscribing,\n          isTranscriptionHidden,\n          isTranscribed,\n          isTranscriptionError,\n          canTranscribe ? handleTranscribe : undefined,\n          onHideTranscription,\n          origin,\n        )\n      )}\n    </div>\n  );\n};\n\nfunction getSeeklineSpikeAmounts(isMobile?: boolean, withAvatar?: boolean) {\n  return {\n    MIN_SPIKES: isMobile ? (TINY_SCREEN_WIDTH_MQL.matches ? 16 : 20) : 25,\n    MAX_SPIKES: isMobile\n      ? (TINY_SCREEN_WIDTH_MQL.matches\n        ? 35\n        : (withAvatar && WITH_AVATAR_TINY_SCREEN_WIDTH_MQL.matches ? 40 : 45))\n      : 75,\n  };\n}\n\nfunction renderAudio(\n  lang: OldLangFn,\n  audio: ApiAudio,\n  duration: number,\n  isPlaying: boolean,\n  playProgress: number,\n  bufferedRanges: BufferedRange[],\n  seekerRef: ElementRef<HTMLDivElement>,\n  showProgress?: boolean,\n  date?: number,\n  progress?: number,\n  handleDateClick?: NoneToVoidFunction,\n) {\n  const {\n    title, performer, fileName,\n  } = audio;\n  const showSeekline = isPlaying || (playProgress > 0 && playProgress < 1);\n  const { isRtl } = lang;\n\n  return (\n    <div className=\"content\">\n      <p className=\"title\" dir=\"auto\" title={title}>{renderText(title || fileName)}</p>\n      {showSeekline && (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          <span className=\"duration with-seekline\" dir=\"auto\">\n            {formatMediaDuration(duration * playProgress, duration)}\n          </span>\n          {renderSeekline(playProgress, bufferedRanges, seekerRef)}\n        </div>\n      )}\n      {!showSeekline && showProgress && (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          {progress ? `${getFileSizeString(audio.size * progress)} / ` : undefined}\n          {getFileSizeString(audio.size)}\n        </div>\n      )}\n      {!showSeekline && !showProgress && (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          <span className=\"duration\" dir=\"auto\">{formatMediaDuration(duration)}</span>\n          {performer && (\n            <>\n              <span className=\"bullet\">&bull;</span>\n              <span className=\"performer\" dir=\"auto\" title={performer}>{renderText(performer)}</span>\n            </>\n          )}\n          {Boolean(date) && (\n            <>\n              <span className=\"bullet\">&bull;</span>\n              <Link className=\"date\" onClick={handleDateClick}>\n                {formatMediaDateTime(lang, date * 1000, true)}\n              </Link>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction renderVoice(\n  media: ApiVoice | ApiVideo,\n  seekerRef: ElementRef<HTMLDivElement>,\n  waveformCanvasRef: ElementRef<HTMLCanvasElement>,\n  playProgress: number,\n  isMediaUnread?: boolean,\n  isTranscribing?: boolean,\n  isTranscriptionHidden?: boolean,\n  isTranscribed?: boolean,\n  isTranscriptionError?: boolean,\n  onClickTranscribe?: VoidFunction,\n  onHideTranscription?: (isHidden: boolean) => void,\n  origin?: AudioOrigin,\n) {\n  return (\n    <div className=\"content\">\n      <div className=\"waveform-wrapper\">\n        <div\n          className=\"waveform\"\n          draggable={false}\n          ref={seekerRef}\n        >\n          <canvas ref={waveformCanvasRef} />\n        </div>\n        {onClickTranscribe && (\n\n          <Button onClick={() => {\n            if ((isTranscribed || isTranscriptionError) && onHideTranscription) {\n              onHideTranscription(!isTranscriptionHidden);\n            } else if (!isTranscribing) {\n              onClickTranscribe();\n            }\n          }}\n          >\n            <Icon\n              name={(isTranscribed || isTranscriptionError) ? 'down' : 'transcribe'}\n              className={buildClassName(\n                'transcribe-icon',\n                (isTranscribed || isTranscriptionError) && !isTranscriptionHidden && 'transcribe-shown',\n              )}\n            />\n            {isTranscribing && (\n              <svg viewBox=\"0 0 32 24\" className=\"loading-svg\">\n                <rect\n                  className=\"loading-rect\"\n                  fill=\"transparent\"\n                  width=\"32\"\n                  height=\"24\"\n                  stroke-width=\"3\"\n                  stroke-linejoin=\"round\"\n                  rx=\"6\"\n                  ry=\"6\"\n                  stroke=\"white\"\n                  stroke-dashoffset=\"1\"\n                  stroke-dasharray=\"32,68\"\n                />\n              </svg>\n            )}\n          </Button>\n        )}\n      </div>\n      <p\n        className={buildClassName('voice-duration', origin !== AudioOrigin.OneTimeModal && isMediaUnread && 'unread')}\n        dir=\"auto\"\n      >\n        {playProgress === 0 || playProgress === 1\n          ? formatMediaDuration(media.duration) : formatMediaDuration(media.duration * playProgress)}\n      </p>\n    </div>\n  );\n}\n\nfunction useWaveformCanvas(\n  theme: ThemeKey,\n  media?: ApiVoice | ApiVideo,\n  playProgress = 0,\n  isOwn = false,\n  withAvatar = false,\n  isMobile = false,\n  isReverse = false,\n) {\n  const canvasRef = useRef<HTMLCanvasElement>();\n\n  const { data: spikes, peak } = useMemo(() => {\n    if (!media) {\n      return undefined;\n    }\n\n    const { waveform, duration } = media;\n    if (!waveform) {\n      return {\n        data: new Array(Math.min(duration, MAX_EMPTY_WAVEFORM_POINTS)).fill(0),\n        peak: 0,\n      };\n    }\n\n    const { MIN_SPIKES, MAX_SPIKES } = getSeeklineSpikeAmounts(isMobile, withAvatar);\n    const durationFactor = Math.min(duration / AVG_VOICE_DURATION, 1);\n    const spikesCount = Math.round(MIN_SPIKES + (MAX_SPIKES - MIN_SPIKES) * durationFactor);\n    const decodedWaveform = decodeWaveform(new Uint8Array(waveform));\n\n    return interpolateArray(decodedWaveform, spikesCount);\n  }, [isMobile, media, withAvatar]) || {};\n\n  useLayoutEffect(() => {\n    const canvas = canvasRef.current;\n\n    if (!canvas || !spikes || peak === undefined) {\n      return;\n    }\n\n    const fillColor = theme === 'dark' ? '#494A78' : '#ADD3F7';\n    const fillOwnColor = theme === 'dark' ? '#B7ABED' : '#AEDFA4';\n    const progressFillColor = theme === 'dark' ? '#8774E1' : '#3390EC';\n    const progressFillOwnColor = theme === 'dark' ? '#FFFFFF' : '#4FAE4E';\n\n    const fillStyle = isOwn ? fillOwnColor : fillColor;\n    const progressFillStyle = isOwn ? progressFillOwnColor : progressFillColor;\n\n    renderWaveform(canvas, spikes, isReverse ? 1 - playProgress : playProgress, {\n      peak,\n      fillStyle,\n      progressFillStyle,\n    });\n  }, [isOwn, peak, playProgress, spikes, theme, isReverse]);\n\n  return canvasRef;\n}\n\nfunction renderSeekline(\n  playProgress: number,\n  bufferedRanges: BufferedRange[],\n  seekerRef: ElementRef<HTMLDivElement>,\n) {\n  return (\n    <div\n      className=\"seekline\"\n      ref={seekerRef}\n    >\n      {bufferedRanges.map(({ start, end }) => (\n        <div\n          className=\"seekline-buffered-progress\"\n          style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n        />\n      ))}\n      <span className=\"seekline-play-progress\">\n        <i\n          className=\"seekline-play-progress-inner\"\n          style={`transform: translateX(${playProgress * 100}%)`}\n        />\n      </span>\n      <span className=\"seekline-thumb\">\n        <i\n          className=\"seekline-thumb-inner\"\n          style={`transform: translateX(${playProgress * 100}%)`}\n        />\n      </span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message,\n  }): Complete<StateProps> => {\n    const webPage = selectWebPageFromMessage(global, message);\n    const mediaDuration = selectMessageMediaDuration(global, message);\n\n    return {\n      webPage,\n      mediaDuration,\n    };\n  },\n)(Audio));\n","type IWaveformProps = {\n  peak: number;\n  fillStyle: string;\n  progressFillStyle: string;\n};\n\nexport const MAX_EMPTY_WAVEFORM_POINTS = 30;\nconst SPIKE_WIDTH = 2;\nconst SPIKE_STEP = 4;\nconst SPIKE_RADIUS = 1;\nconst HEIGHT = 23;\n\nexport function renderWaveform(\n  canvas: HTMLCanvasElement,\n  spikes: number[],\n  progress: number,\n  {\n    peak, fillStyle, progressFillStyle,\n  }: IWaveformProps,\n) {\n  const width = spikes.length * SPIKE_STEP;\n  const height = HEIGHT;\n\n  canvas.width = width * 2;\n  canvas.height = height * 2;\n  canvas.style.width = `${width}px`;\n  canvas.style.height = `${height}px`;\n\n  const ctx = canvas.getContext('2d')!;\n  ctx.scale(2, 2);\n\n  spikes.forEach((item, i) => {\n    ctx.globalAlpha = (i / spikes.length >= progress) ? 0.5 : 1;\n    ctx.fillStyle = progress > i / spikes.length ? progressFillStyle : fillStyle;\n    const spikeHeight = Math.max(2, HEIGHT * (item / Math.max(1, peak)));\n    roundedRectangle(ctx, i * SPIKE_STEP, (height + spikeHeight) / 2, SPIKE_WIDTH, spikeHeight, SPIKE_RADIUS);\n    ctx.fill();\n  });\n}\n\nfunction roundedRectangle(\n  ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, radius: number,\n) {\n  if (width < 2 * radius) {\n    radius = width / 2;\n  }\n  if (height < 2 * radius) {\n    radius = height / 2;\n  }\n\n  ctx.beginPath();\n  ctx.moveTo(x + radius, y);\n  ctx.arcTo(x + width, y, x + width, y - height, radius);\n  ctx.arcTo(x + width, y - height, x, y - height, radius);\n  ctx.arcTo(x, y - height, x, y, radius);\n  ctx.arcTo(x, y, x + width, y, radius);\n  ctx.closePath();\n}\n","// Ref: https://github.com/telegramdesktop/tdesktop/blob/0743e71ab6b928d2ee5bae1aed991849b1e2b291/Telegram/SourceFiles/data/data_document.cpp#L1018\nexport function decodeWaveform(encoded5bit: Uint8Array) {\n  const bitsCount = encoded5bit.length * 8;\n  const valuesCount = Math.floor(bitsCount / 5);\n  if (!valuesCount) {\n    return [];\n  }\n\n  // Read each 5 bit of encoded5bit as 0-31 unsigned char.\n  // We count the index of the byte in which the desired 5-bit sequence starts.\n  // And then we read a uint16 starting from that byte to guarantee to get all of those 5 bits.\n  //\n  // BUT! if it is the last byte we have, we're not allowed to read a uint16 starting with it.\n  // Because it will be an overflow (we'll access one byte after the available memory).\n  // We see, that only the last 5 bits could start in the last available byte and be problematic.\n  // So we read in a general way all the entries in a general way except the last one.\n  const result = Array(valuesCount);\n  const bitsData = encoded5bit;\n  for (let i = 0, l = valuesCount - 1; i !== l; ++i) {\n    const byteIndex = Math.floor((i * 5) / 8);\n    const bitShift = Math.floor((i * 5) % 8);\n    const value = bitsData[byteIndex] + (bitsData[byteIndex + 1] << 8);\n    result[i] = ((value >> bitShift) & 0x1F);\n  }\n  const lastByteIndex = Math.floor(((valuesCount - 1) * 5) / 8);\n  const lastBitShift = Math.floor(((valuesCount - 1) * 5) % 8);\n  const lastValue = bitsData[lastByteIndex] + (bitsData[lastByteIndex + 1] << 8);\n  result[valuesCount - 1] = (lastValue >> lastBitShift) & 0x1F;\n\n  return result;\n}\n\nexport function interpolateArray(data: number[], fitCount: number) {\n  let peak = 0;\n  const newData = new Array(fitCount);\n  const springFactor = data.length / fitCount;\n  const leftFiller = data[0];\n  const rightFiller = data[data.length - 1];\n  for (let i = 0; i < fitCount; i++) {\n    const idx = Math.floor(i * springFactor);\n    const val = ((data[idx - 1] ?? leftFiller) + (data[idx] ?? leftFiller) + (data[idx + 1] ?? rightFiller)) / 3;\n    newData[i] = val;\n    if (peak < val) {\n      peak = val;\n    }\n  }\n  return { data: newData, peak };\n}\n","export default function cycleRestrict(length: number, index: number) {\n  return index - Math.floor(index / length) * length;\n}\n","import {\n  useEffect, useMemo, useRef, useState,\n} from '../lib/teact/teact';\n\nimport { ApiMediaFormat } from '../api/types';\n\nimport { selectIsSynced } from '../global/selectors';\nimport { IS_PROGRESSIVE_SUPPORTED } from '../util/browser/windowEnvironment';\nimport * as mediaLoader from '../util/mediaLoader';\nimport { throttle } from '../util/schedulers';\nimport useSelector from './data/useSelector';\nimport useForceUpdate from './useForceUpdate';\nimport useUniqueId from './useUniqueId';\n\nconst STREAMING_PROGRESS = 0.75;\nconst STREAMING_TIMEOUT = 1500;\nconst PROGRESS_THROTTLE = 500;\n\nexport default function useMediaWithLoadProgress(\n  mediaHash: string | undefined,\n  noLoad = false,\n  mediaFormat = ApiMediaFormat.BlobUrl,\n  delay?: number | false,\n  isHtmlAllowed = false,\n) {\n  const isStreaming = IS_PROGRESSIVE_SUPPORTED && mediaFormat === ApiMediaFormat.Progressive;\n  const mediaData = mediaHash\n    ? (isStreaming ? mediaLoader.getProgressiveUrl(mediaHash)\n      : mediaLoader.getFromMemory(mediaHash)) : undefined;\n\n  const forceUpdate = useForceUpdate();\n  const isSynced = useSelector(selectIsSynced);\n  const id = useUniqueId();\n  const [loadProgress, setLoadProgress] = useState(mediaData && !isStreaming ? 1 : 0);\n  const startedAtRef = useRef<number>();\n\n  const handleProgress = useMemo(() => {\n    return throttle((progress: number) => {\n      if (startedAtRef.current && (!delay || (Date.now() - startedAtRef.current > delay))) {\n        setLoadProgress(progress);\n      }\n    }, PROGRESS_THROTTLE, true);\n  }, [delay]);\n\n  useEffect(() => {\n    if (!noLoad && mediaHash) {\n      if (!mediaData) {\n        setLoadProgress(0);\n\n        if (startedAtRef.current) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n\n        startedAtRef.current = Date.now();\n\n        mediaLoader.fetch(mediaHash, mediaFormat, isHtmlAllowed, handleProgress, id).then(() => {\n          const spentTime = Date.now() - startedAtRef.current!;\n          startedAtRef.current = undefined;\n\n          if (!delay || spentTime >= delay) {\n            forceUpdate();\n          } else {\n            setTimeout(forceUpdate, delay - spentTime);\n          }\n        });\n      } else if (isStreaming) {\n        setTimeout(() => {\n          setLoadProgress(STREAMING_PROGRESS);\n        }, STREAMING_TIMEOUT);\n      }\n    }\n  }, [\n    noLoad, mediaHash, mediaData, mediaFormat, isStreaming, delay, handleProgress, isHtmlAllowed, id, isSynced,\n  ]);\n\n  useEffect(() => {\n    if (noLoad && startedAtRef.current) {\n      mediaLoader.cancelProgress(handleProgress);\n      setLoadProgress(0);\n      startedAtRef.current = undefined;\n    }\n  }, [handleProgress, noLoad]);\n\n  useEffect(() => {\n    return () => {\n      if (mediaHash) {\n        mediaLoader.removeCallback(mediaHash, id);\n      }\n    };\n  }, [id, mediaHash]);\n\n  return { mediaData, loadProgress };\n}\n","import type { GlobalState } from '../types';\n\nimport { getMainUsername, isChatBasicGroup } from '../helpers';\nimport { selectChat, selectChatFullInfo } from './chats';\nimport { selectUser } from './users';\n\nexport function selectChatGroupCall<T extends GlobalState>(global: T, chatId: string) {\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo || !fullInfo.groupCallId) return undefined;\n\n  return selectGroupCall(global, fullInfo.groupCallId);\n}\n\nexport function selectGroupCall<T extends GlobalState>(global: T, groupCallId: string) {\n  return global.groupCalls.byId[groupCallId];\n}\n\nexport function selectGroupCallParticipant<T extends GlobalState>(\n  global: T, groupCallId: string, participantId: string,\n) {\n  return selectGroupCall(global, groupCallId)?.participants[participantId];\n}\n\nexport function selectIsAdminInActiveGroupCall<T extends GlobalState>(global: T): boolean {\n  const chatId = selectActiveGroupCall(global)?.chatId;\n\n  if (!chatId) return false;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return false;\n\n  return (isChatBasicGroup(chat) && chat.isCreator) || Boolean(chat.adminRights?.manageCall);\n}\n\nexport function selectActiveGroupCall<T extends GlobalState>(global: T) {\n  const { groupCalls: { activeGroupCallId } } = global;\n  if (!activeGroupCallId) {\n    return undefined;\n  }\n\n  return selectGroupCall(global, activeGroupCallId);\n}\n\nexport function selectPhoneCallUser<T extends GlobalState>(global: T) {\n  const { phoneCall, currentUserId } = global;\n  if (!phoneCall || !phoneCall.participantId || !phoneCall.adminId) {\n    return undefined;\n  }\n\n  const id = phoneCall.adminId === currentUserId ? phoneCall.participantId : phoneCall.adminId;\n  return selectUser(global, id);\n}\n\nexport function selectCanInviteToActiveGroupCall<T extends GlobalState>(global: T) {\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return false;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return false;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n  if (hasPublicUsername) {\n    return true;\n  }\n\n  const inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  return Boolean(inviteLink);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Gi8Nokbl\",\"header\":\"H01lE7mv\",\"title\":\"VQbs04hT\",\"caption\":\"X7bBlGdi\",\"table\":\"s5beXqqL\",\"tableCell\":\"gvrp3KoR\",\"tableHeading\":\"IHb3ZATQ\",\"tableValue\":\"zAPFdKbZ\",\"tableSecondaryValue\":\"_mYEmh_u\",\"value\":\"idLrmbhS\",\"negative\":\"SLfwGHQC\",\"decimalPart\":\"ZAfXkuWL\",\"decimalUsdPart\":\"HRXb_S2M\",\"toncoin\":\"it39BC_c\"};","import type { ReactNode } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiBoostStatistics, ApiChannelMonetizationStatistics,\n  ApiChannelStatistics, ApiGroupStatistics, ApiPostStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatFullDate } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../../util/formatCurrency';\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './StatisticsOverview.module.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  withAbsoluteValue?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'viewsPerStory', title: 'ChannelStats.Overview.ViewsPerStory' },\n  ],\n  [\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n    { name: 'sharesPerStory', title: 'ChannelStats.Overview.SharesPerStory' },\n  ],\n  [\n    { name: 'reactionsPerPost', title: 'ChannelStats.Overview.ReactionsPerPost' },\n    { name: 'reactionsPerStory', title: 'ChannelStats.Overview.ReactionsPerStory' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'viewsCount', title: 'Stats.Message.Views', isPlain: true },\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n  [\n    { name: 'reactionsCount', title: 'Channel.Stats.Overview.Reactions', isPlain: true },\n    {\n      name: 'forwardsCount', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n];\n\nconst STORY_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'viewsCount', title: 'Channel.Stats.Overview.Views', isPlain: true },\n    { name: 'publicForwards', title: 'PublicShares', isPlain: true },\n  ],\n  [\n    { name: 'reactionsCount', title: 'Channel.Stats.Overview.Reactions', isPlain: true },\n    { name: 'forwardsCount', title: 'PrivateShares', isPlain: true },\n  ],\n];\n\nconst BOOST_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'level', title: 'Stats.Boosts.Level', isPlain: true },\n    {\n      name: 'premiumSubscribers',\n      title: 'Stats.Boosts.PremiumSubscribers',\n      isPercentage: true,\n      isApproximate: true,\n      withAbsoluteValue: true,\n    },\n  ],\n  [\n    { name: 'boosts', title: 'Stats.Boosts.ExistingBoosts', isPlain: true },\n    { name: 'remainingBoosts', title: 'Stats.Boosts.BoostsToLevelUp', isPlain: true },\n  ],\n];\n\ntype StatisticsType = 'channel' | 'group' | 'message' | 'boost' | 'story' | 'monetization';\n\nconst DEFAULT_VALUE = 0;\n\nexport type OwnProps = {\n  type: StatisticsType;\n  title?: string;\n  className?: string;\n  isToncoin?: boolean;\n  statistics:\n    ApiChannelStatistics |\n    ApiGroupStatistics |\n    ApiPostStatistics |\n    ApiBoostStatistics |\n    ApiChannelMonetizationStatistics;\n  subtitle?: ReactNode;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({\n  title,\n  type,\n  statistics,\n  isToncoin,\n  className,\n  subtitle,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName(styles.value, isChangeNegative && styles.negative)}>\n        {isChangeNegative\n          ? `-${formatIntegerCompact(lang, Math.abs(change))}`\n          : `+${formatIntegerCompact(lang, change)}`}\n        {percentage && (\n          <>\n            {' '}\n            (\n            {percentage}\n            %)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const renderBalanceCell = (balance: number, usdRate: number, text: string) => {\n    const [integerTonPart, decimalTonPart] = balance.toFixed(4).split('.');\n    const [integerUsdPart, decimalUsdPart] = (balance * usdRate).toFixed(2).split('.');\n    return (\n      <div>\n        <Icon className={styles.toncoin} name=\"toncoin\" />\n        <b className={styles.tableValue}>\n          {integerTonPart}\n          <span className={styles.decimalPart}>\n            .\n            {decimalTonPart}\n          </span>\n        </b>\n        {' '}\n        <span className={styles.tableHeading}>\n          ≈ $\n          {integerUsdPart}\n          <span className={styles.decimalUsdPart}>\n            .\n            {decimalUsdPart}\n          </span>\n        </span>\n        <h3 className={styles.tableHeading}>{oldLang(text)}</h3>\n      </div>\n    );\n  };\n\n  const { period } = statistics as ApiGroupStatistics;\n  const { balances, usdRate } = statistics as ApiChannelMonetizationStatistics;\n\n  const schema = getSchemaByType(type);\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      <div className={styles.header}>\n        {title && (\n          <div className={styles.title}>\n            {title}\n          </div>\n        )}\n\n        {period && (\n          <div className={styles.caption}>\n            {formatFullDate(oldLang, period.minDate * 1000)}\n            {' '}\n            —\n            {formatFullDate(oldLang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className={styles.table}>\n        {isToncoin ? (\n          <tr>\n            <td className={styles.tableCell}>\n              {renderBalanceCell(\n                balances?.availableBalance ? convertTonFromNanos(balances.availableBalance.amount) : 0,\n                usdRate || 0,\n                'lng_channel_earn_available',\n              )}\n              {renderBalanceCell(\n                balances?.currentBalance ? convertTonFromNanos(balances.currentBalance.amount) : 0,\n                usdRate || 0,\n                'lng_channel_earn_reward',\n              )}\n              {renderBalanceCell(\n                balances?.overallRevenue ? convertTonFromNanos(balances.overallRevenue.amount) : 0,\n                usdRate || 0,\n                'lng_channel_earn_total',\n              )}\n            </td>\n          </tr>\n        ) : schema.map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)?.[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className={styles.tableCell}>\n                    <b className={styles.tableValue}>\n                      {`${cell.isApproximate ? '≈ ' : ''}${formatInteger(field ?? DEFAULT_VALUE)}`}\n                    </b>\n                    <h3 className={styles.tableHeading}>{oldLang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                const part = field?.part ?? DEFAULT_VALUE;\n                const percentage = field?.percentage ?? DEFAULT_VALUE;\n\n                return (\n                  <td className={styles.tableCell}>\n                    {cell.withAbsoluteValue && (\n                      <span className={styles.tableValue}>\n                        {`${cell.isApproximate ? '≈ ' : ''}${formatInteger(part)}`}\n                      </span>\n                    )}\n                    <span className={cell.withAbsoluteValue ? styles.tableSecondaryValue : styles.tableValue}>\n                      {percentage}\n                      %\n                    </span>\n                    <h3 className={styles.tableHeading}>{oldLang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className={styles.tableCell}>\n                  <b className={styles.tableValue}>\n                    {formatIntegerCompact(lang, field?.current ?? DEFAULT_VALUE)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className={styles.tableHeading}>{oldLang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n\n      {subtitle}\n    </div>\n  );\n};\n\nfunction getSchemaByType(type: StatisticsType) {\n  switch (type) {\n    case 'group':\n      return GROUP_OVERVIEW;\n    case 'message':\n      return MESSAGE_OVERVIEW;\n    case 'boost':\n      return BOOST_OVERVIEW;\n    case 'story':\n      return STORY_OVERVIEW;\n    case 'channel':\n    default:\n      return CHANNEL_OVERVIEW;\n  }\n}\n\nexport default memo(StatisticsOverview);\n","import { useMemo } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ApiSendMessageAction } from '../api/types';\nimport type { ThreadId } from '../types';\n\nimport { SEND_MESSAGE_ACTION_INTERVAL } from '../config';\nimport { throttle } from '../util/schedulers';\n\nconst useSendMessageAction = (chatId?: string, threadId?: ThreadId) => {\n  return useMemo(() => {\n    return throttle((action: ApiSendMessageAction) => {\n      if (!chatId || !threadId) return;\n      getActions().sendMessageAction({ chatId, threadId, action });\n    }, SEND_MESSAGE_ACTION_INTERVAL);\n  }, [chatId, threadId]);\n};\n\nexport default useSendMessageAction;\n","import type { TypeStatisticsGraph } from '../../../../api/types';\n\nexport function isGraph(obj: unknown): obj is TypeStatisticsGraph {\n  // eslint-disable-next-line no-null/no-null\n  return typeof obj === 'object' && obj !== null && 'graphType' in obj;\n}\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import { requestMeasure, requestMutation } from '../lib/fasterdom/fasterdom';\nimport safePlay from './safePlay';\n\ntype AbsoluteVideoOptions = {\n  position: { x: number; y: number };\n  noLoop?: boolean;\n  size: number;\n  style?: string;\n};\n\nexport default class AbsoluteVideo {\n  private video?: HTMLVideoElement;\n\n  private isPlaying = false;\n\n  constructor(\n    videoUrl: string,\n    private container: HTMLElement,\n    private options: AbsoluteVideoOptions,\n  ) {\n    this.video = document.createElement('video');\n    this.video.src = videoUrl;\n    this.video.disablePictureInPicture = true;\n    this.video.muted = true;\n    if (options.style) {\n      this.video.setAttribute('style', options.style);\n    }\n    this.video.style.position = 'absolute';\n    this.video.load();\n\n    if (!this.options.noLoop) {\n      this.video.loop = true;\n    }\n\n    requestMutation(() => {\n      this.container.appendChild(this.video!);\n\n      this.recalculatePositionAndSize();\n    });\n  }\n\n  public play() {\n    if (this.isPlaying || !this.video) return;\n    this.recalculatePositionAndSize();\n    if (this.video.paused) {\n      safePlay(this.video);\n    }\n    this.isPlaying = true;\n  }\n\n  public pause() {\n    if (!this.isPlaying || !this.video) return;\n    if (!this.video.paused) {\n      this.video.pause();\n    }\n    this.isPlaying = false;\n  }\n\n  public destroy() {\n    this.pause();\n    this.video?.remove();\n    this.video = undefined;\n  }\n\n  public updatePosition(position: AbsoluteVideoOptions['position']) {\n    this.options.position = position;\n    this.recalculatePositionAndSize();\n  }\n\n  private recalculatePositionAndSize() {\n    const { size, position: { x, y } } = this.options;\n    requestMeasure(() => {\n      if (!this.video) return;\n      const video = this.video;\n      const { width, height } = this.container.getBoundingClientRect();\n      requestMutation(() => {\n        video.style.left = `${Math.round(x * width)}px`;\n        video.style.top = `${Math.round(y * height)}px`;\n        video.style.width = `${size}px`;\n        video.style.height = `${size}px`;\n      });\n    });\n  }\n}\n","import type {\n  ElementRef } from '../../../../lib/teact/teact';\nimport {\n  useEffect, useLayoutEffect, useRef,\n} from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { ensureRLottie } from '../../../../lib/rlottie/RLottie.async';\nimport { selectCustomEmoji, selectIsAlwaysHighPriorityEmoji } from '../../../../global/selectors';\nimport AbsoluteVideo from '../../../../util/AbsoluteVideo';\nimport {\n  addCustomEmojiInputRenderCallback,\n  getCustomEmojiMediaDataForInput,\n} from '../../../../util/emoji/customEmojiManager';\nimport { round } from '../../../../util/math';\nimport { hexToRgb } from '../../../../util/switchTheme';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useColorFilter from '../../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../../hooks/stickers/useDynamicColorListener';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\nimport useBackgroundMode from '../../../../hooks/window/useBackgroundMode';\nimport useDevicePixelRatio from '../../../../hooks/window/useDevicePixelRatio';\n\nconst SIZE = 1.25 * REM;\nconst THROTTLE_MS = 300;\n\ntype CustomEmojiPlayer = {\n  play: () => void;\n  pause: () => void;\n  destroy: () => void;\n  updatePosition: (x: number, y: number) => void;\n};\n\nexport default function useInputCustomEmojis(\n  getHtml: Signal<string>,\n  inputRef: ElementRef<HTMLDivElement>,\n  sharedCanvasRef: ElementRef<HTMLCanvasElement>,\n  sharedCanvasHqRef: ElementRef<HTMLCanvasElement>,\n  absoluteContainerRef: ElementRef<HTMLElement>,\n  prefixId: string,\n  canPlayAnimatedEmojis: boolean,\n  isReady?: boolean,\n  isActive?: boolean,\n) {\n  const customColor = useDynamicColorListener(inputRef, undefined, !isReady);\n  const colorFilter = useColorFilter(customColor, true);\n  const dpr = useDevicePixelRatio();\n  const playersById = useRef<Map<string, CustomEmojiPlayer>>(new Map());\n\n  const clearPlayers = useLastCallback((ids: string[]) => {\n    ids.forEach((id) => {\n      const player = playersById.current.get(id);\n      if (player) {\n        player.destroy();\n        playersById.current.delete(id);\n      }\n    });\n  });\n\n  const synchronizeElements = useLastCallback(() => {\n    if (!isReady || !inputRef.current || !sharedCanvasRef.current || !sharedCanvasHqRef.current) return;\n\n    const global = getGlobal();\n    const playerIdsToClear = new Set(playersById.current.keys());\n    const customEmojis = Array.from(inputRef.current.querySelectorAll<HTMLElement>('.custom-emoji'));\n\n    customEmojis.forEach((element) => {\n      if (!element.dataset.uniqueId) {\n        return;\n      }\n      const playerId = `${prefixId}${element.dataset.uniqueId}${customColor || ''}`;\n      const documentId = element.dataset.documentId!;\n\n      playerIdsToClear.delete(playerId);\n\n      const mediaUrl = getCustomEmojiMediaDataForInput(documentId);\n      if (!mediaUrl) {\n        return;\n      }\n\n      const canvasBounds = sharedCanvasRef.current!.getBoundingClientRect();\n      const elementBounds = element.getBoundingClientRect();\n      const x = round((elementBounds.left - canvasBounds.left) / canvasBounds.width, 4);\n      const y = round((elementBounds.top - canvasBounds.top) / canvasBounds.height, 4);\n\n      if (playersById.current.has(playerId)) {\n        const player = playersById.current.get(playerId)!;\n        player.updatePosition(x, y);\n        return;\n      }\n\n      const customEmoji = selectCustomEmoji(global, documentId);\n      if (!customEmoji) {\n        return;\n      }\n      const isHq = customEmoji?.stickerSetInfo && selectIsAlwaysHighPriorityEmoji(global, customEmoji.stickerSetInfo);\n      const renderId = [\n        prefixId, documentId, customColor, dpr,\n      ].filter(Boolean).join('_');\n\n      createPlayer({\n        customEmoji,\n        sharedCanvasRef,\n        sharedCanvasHqRef,\n        absoluteContainerRef,\n        renderId,\n        viewId: playerId,\n        mediaUrl,\n        isHq,\n        position: { x, y },\n        textColor: customColor,\n        colorFilter,\n      }).then((animation) => {\n        if (canPlayAnimatedEmojis) {\n          animation.play();\n        }\n\n        playersById.current.set(playerId, animation);\n      });\n    });\n\n    clearPlayers(Array.from(playerIdsToClear));\n  });\n\n  useEffect(() => {\n    return addCustomEmojiInputRenderCallback(synchronizeElements);\n  }, [synchronizeElements]);\n\n  useEffect(() => {\n    const activePlayersById = playersById.current;\n    // Always clear players on unmount\n    return () => {\n      clearPlayers(Array.from(activePlayersById.keys()));\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!getHtml() || !inputRef.current || !sharedCanvasRef.current || !isActive || !isReady) {\n      clearPlayers(Array.from(playersById.current.keys()));\n      return;\n    }\n\n    // Wait one frame for DOM to update\n    requestMeasure(() => {\n      synchronizeElements();\n    });\n  }, [getHtml, synchronizeElements, inputRef, clearPlayers, sharedCanvasRef, isActive, isReady]);\n\n  useLayoutEffect(() => {\n    document.documentElement.style.setProperty('--input-custom-emoji-filter', colorFilter || 'none');\n  }, [colorFilter]);\n\n  useEffectWithPrevDeps(([prevCustomColor]) => {\n    if (prevCustomColor !== undefined && customColor !== prevCustomColor) {\n      synchronizeElements();\n    }\n  }, [customColor, synchronizeElements]);\n\n  const throttledSynchronizeElements = useThrottledCallback(\n    synchronizeElements,\n    [synchronizeElements],\n    THROTTLE_MS,\n    false,\n  );\n  useResizeObserver(sharedCanvasRef, throttledSynchronizeElements);\n  useEffectWithPrevDeps(([prevDpr]) => {\n    if (dpr !== prevDpr) {\n      clearPlayers(Array.from(playersById.current.keys()));\n      synchronizeElements();\n    }\n  }, [dpr, synchronizeElements]);\n\n  const freezeAnimation = useLastCallback(() => {\n    playersById.current.forEach((player) => {\n      player.pause();\n    });\n  });\n\n  const unfreezeAnimation = useLastCallback(() => {\n    if (!canPlayAnimatedEmojis) {\n      return;\n    }\n\n    playersById.current?.forEach((player) => {\n      player.play();\n    });\n  });\n\n  const unfreezeAnimationOnRaf = useLastCallback(() => {\n    requestMeasure(unfreezeAnimation);\n  });\n\n  // Pausing frame may not happen in background,\n  // so we need to make sure it happens right after focusing,\n  // then we can play again.\n  useBackgroundMode(freezeAnimation, unfreezeAnimationOnRaf);\n}\n\nasync function createPlayer({\n  customEmoji,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  absoluteContainerRef,\n  renderId,\n  viewId,\n  mediaUrl,\n  position,\n  isHq,\n  textColor,\n  colorFilter,\n}: {\n  customEmoji: ApiSticker;\n  sharedCanvasRef: ElementRef<HTMLCanvasElement>;\n  sharedCanvasHqRef: ElementRef<HTMLCanvasElement>;\n  absoluteContainerRef: ElementRef<HTMLElement>;\n  renderId: string;\n  viewId: string;\n  mediaUrl: string;\n  position: { x: number; y: number };\n  isHq?: boolean;\n  textColor?: string;\n  colorFilter?: string;\n}): Promise<CustomEmojiPlayer> {\n  if (customEmoji.isLottie) {\n    const color = customEmoji.shouldUseTextColor && textColor ? hexToRgb(textColor) : undefined;\n    const RLottie = await ensureRLottie();\n    const lottie = RLottie.init(\n      mediaUrl,\n      isHq ? sharedCanvasHqRef.current! : sharedCanvasRef.current!,\n      renderId,\n      {\n        size: SIZE,\n        coords: position,\n        isLowPriority: !isHq,\n      },\n      viewId,\n      color ? [color.r, color.g, color.b] : undefined,\n    );\n\n    return {\n      play: () => lottie.play(),\n      pause: () => lottie.pause(),\n      destroy: () => lottie.removeView(viewId),\n      updatePosition: (x: number, y: number) => {\n        return lottie.setSharedCanvasCoords(viewId, { x, y });\n      },\n    };\n  }\n\n  if (customEmoji.isVideo) {\n    const style = customEmoji.shouldUseTextColor && colorFilter ? `filter: ${colorFilter};` : undefined;\n    const absoluteVideo = new AbsoluteVideo(\n      mediaUrl,\n      absoluteContainerRef.current!,\n      { size: SIZE, position, style },\n    );\n    return {\n      play: () => absoluteVideo.play(),\n      pause: () => absoluteVideo.pause(),\n      destroy: () => absoluteVideo.destroy(),\n      updatePosition: (x: number, y: number) => absoluteVideo.updatePosition({ x, y }),\n    };\n  }\n\n  throw new Error('Unsupported custom emoji type');\n}\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './TextFormatter';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst TextFormatterAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const TextFormatter = useModuleLoader(Bundles.Extra, 'TextFormatter', !isOpen);\n\n  return TextFormatter ? <TextFormatter {...props} /> : undefined;\n};\n\nexport default TextFormatterAsync;\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef, FC, TeactNode } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiInputMessageReplyInfo } from '../../../api/types';\nimport type { SharedSettings } from '../../../global/types';\nimport type {\n  IAnchorPosition, MessageListType, ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { requestForcedReflow, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectCanPlayAnimatedEmojis, selectDraft, selectIsInSelectMode } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport {\n  IS_ANDROID, IS_EMOJI_SUPPORTED, IS_IOS, IS_TOUCH_ENV,\n} from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureKeyboardListeners from '../../../util/captureKeyboardListeners';\nimport { getIsDirectTextInputDisabled } from '../../../util/directInputManager';\nimport parseEmojiOnlyString from '../../../util/emoji/parseEmojiOnlyString';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport { debounce, fastRaf } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\nimport { isSelectionInsideInput } from './helpers/selection';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useInputCustomEmojis from './hooks/useInputCustomEmojis';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport TextTimer from '../../ui/TextTimer';\nimport TextFormatter from './TextFormatter.async';\n\nconst CONTEXT_MENU_CLOSE_DELAY_MS = 100;\nconst TRANSITION_DURATION_FACTOR = 50;\n\nconst SCROLLER_CLASS = 'input-scroller';\nconst INPUT_WRAPPER_CLASS = 'message-input-wrapper';\n\ntype OwnProps = {\n  ref?: ElementRef<HTMLDivElement>;\n  id: string;\n  chatId: string;\n  threadId: ThreadId;\n  isAttachmentModalInput?: boolean;\n  isStoryInput?: boolean;\n  customEmojiPrefix: string;\n  editableInputId?: string;\n  isReady: boolean;\n  isActive: boolean;\n  getHtml: Signal<string>;\n  placeholder: TeactNode | string;\n  timedPlaceholderLangKey?: string;\n  timedPlaceholderDate?: number;\n  forcedPlaceholder?: string;\n  noFocusInterception?: boolean;\n  canAutoFocus: boolean;\n  shouldSuppressFocus?: boolean;\n  shouldSuppressTextFormatter?: boolean;\n  canSendPlainText?: boolean;\n  onUpdate: (html: string) => void;\n  onSuppressedFocus?: () => void;\n  onSend: () => void;\n  onScroll?: (event: React.UIEvent<HTMLElement>) => void;\n  captionLimit?: number;\n  onFocus?: NoneToVoidFunction;\n  onBlur?: NoneToVoidFunction;\n  isNeedPremium?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  replyInfo?: ApiInputMessageReplyInfo;\n  isSelectModeActive?: boolean;\n  messageSendKeyCombo?: SharedSettings['messageSendKeyCombo'];\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst MAX_ATTACHMENT_MODAL_INPUT_HEIGHT = 160;\nconst MAX_STORY_MODAL_INPUT_HEIGHT = 128;\nconst TAB_INDEX_PRIORITY_TIMEOUT = 2000;\n// Heuristics allowing the user to make a triple click\nconst SELECTION_RECALCULATE_DELAY_MS = 260;\nconst TEXT_FORMATTER_SAFE_AREA_PX = 140;\n// For some reason Safari inserts `<br>` after user removes text from input\nconst SAFARI_BR = '<br>';\nconst IGNORE_KEYS = [\n  'Esc', 'Escape', 'Enter', 'PageUp', 'PageDown', 'Meta', 'Alt', 'Ctrl', 'ArrowDown', 'ArrowUp', 'Control', 'Shift',\n];\n\nfunction clearSelection() {\n  const selection = window.getSelection();\n  if (!selection) {\n    return;\n  }\n\n  if (selection.removeAllRanges) {\n    selection.removeAllRanges();\n  } else if (selection.empty) {\n    selection.empty();\n  }\n}\n\nconst MessageInput: FC<OwnProps & StateProps> = ({\n  ref,\n  id,\n  chatId,\n  captionLimit,\n  isAttachmentModalInput,\n  isStoryInput,\n  customEmojiPrefix,\n  editableInputId,\n  isReady,\n  isActive,\n  getHtml,\n  placeholder,\n  timedPlaceholderLangKey,\n  timedPlaceholderDate,\n  forcedPlaceholder,\n  canSendPlainText,\n  canAutoFocus,\n  noFocusInterception,\n  shouldSuppressFocus,\n  shouldSuppressTextFormatter,\n  replyInfo,\n  isSelectModeActive,\n  canPlayAnimatedEmojis,\n  messageSendKeyCombo,\n  onUpdate,\n  onSuppressedFocus,\n  onSend,\n  onScroll,\n  onFocus,\n  onBlur,\n  isNeedPremium,\n  messageListType,\n}) => {\n  const {\n    editLastMessage,\n    replyToNextMessage,\n    showAllowedMessageTypesNotification,\n    openPremiumModal,\n  } = getActions();\n\n  let inputRef = useRef<HTMLDivElement>();\n  if (ref) {\n    inputRef = ref;\n  }\n\n  const selectionTimeoutRef = useRef<number>();\n  const cloneRef = useRef<HTMLDivElement>();\n  const scrollerCloneRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n  const absoluteContainerRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const isContextMenuOpenRef = useRef(false);\n  const [isTextFormatterOpen, openTextFormatter, closeTextFormatter] = useFlag();\n  const [textFormatterAnchorPosition, setTextFormatterAnchorPosition] = useState<IAnchorPosition>();\n  const [selectedRange, setSelectedRange] = useState<Range>();\n  const [isTextFormatterDisabled, setIsTextFormatterDisabled] = useState<boolean>(false);\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const [shouldDisplayTimer, setShouldDisplayTimer] = useState(false);\n\n  useEffect(() => {\n    setShouldDisplayTimer(Boolean(timedPlaceholderLangKey && timedPlaceholderDate));\n  }, [timedPlaceholderDate, timedPlaceholderLangKey]);\n\n  const handleTimerEnd = useLastCallback(() => {\n    setShouldDisplayTimer(false);\n  });\n\n  useInputCustomEmojis(\n    getHtml,\n    inputRef,\n    sharedCanvasRef,\n    sharedCanvasHqRef,\n    absoluteContainerRef,\n    customEmojiPrefix,\n    canPlayAnimatedEmojis,\n    isReady,\n    isActive,\n  );\n\n  const maxInputHeight = isAttachmentModalInput\n    ? MAX_ATTACHMENT_MODAL_INPUT_HEIGHT\n    : isStoryInput ? MAX_STORY_MODAL_INPUT_HEIGHT : (isMobile ? 256 : 416);\n  const updateInputHeight = useLastCallback((willSend = false) => {\n    // Defer to avoid animation/layout conflicts during DOM updates\n    fastRaf(() => {\n      requestForcedReflow(() => {\n        const scroller = inputRef.current!.closest<HTMLDivElement>(`.${SCROLLER_CLASS}`)!;\n        const currentHeight = Number(scroller.style.height.replace('px', ''));\n        const clone = scrollerCloneRef.current!;\n        const { scrollHeight } = clone;\n        const newHeight = Math.min(scrollHeight, maxInputHeight);\n\n        if (newHeight === currentHeight) {\n          return undefined;\n        }\n\n        const isOverflown = scrollHeight > maxInputHeight;\n\n        function exec() {\n          const transitionDuration = Math.round(\n            TRANSITION_DURATION_FACTOR * Math.log(Math.abs(newHeight - currentHeight)),\n          );\n          scroller.style.height = `${newHeight}px`;\n          scroller.style.transitionDuration = `${transitionDuration}ms`;\n          scroller.classList.toggle('overflown', isOverflown);\n        }\n\n        if (willSend) {\n          // Delay to next frame to sync with sending animation\n          requestMutation(exec);\n          return undefined;\n        } else {\n          return exec;\n        }\n      });\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!isAttachmentModalInput) return;\n    updateInputHeight(false);\n  }, [isAttachmentModalInput, updateInputHeight]);\n\n  const htmlRef = useRef(getHtml());\n  useLayoutEffect(() => {\n    const html = isActive ? getHtml() : '';\n\n    if (!isActive && inputRef.current) {\n      inputRef.current.blur();\n    }\n\n    if (html !== inputRef.current!.innerHTML) {\n      inputRef.current!.innerHTML = html;\n    }\n\n    if (html !== cloneRef.current!.innerHTML) {\n      cloneRef.current!.innerHTML = html;\n    }\n\n    if (html !== htmlRef.current) {\n      htmlRef.current = html;\n\n      updateInputHeight(!html);\n    }\n  }, [getHtml, isActive, updateInputHeight]);\n\n  const chatIdRef = useRef(chatId);\n  chatIdRef.current = chatId;\n  const focusInput = useLastCallback(() => {\n    if (!inputRef.current || isNeedPremium) {\n      return;\n    }\n\n    focusEditableElement(inputRef.current);\n  });\n\n  const handleCloseTextFormatter = useLastCallback(() => {\n    closeTextFormatter();\n    clearSelection();\n  });\n\n  function checkSelection() {\n    // Disable the formatter on iOS devices for now.\n    if (IS_IOS) {\n      return false;\n    }\n\n    const selection = window.getSelection();\n    if (!selection || !selection.rangeCount || isContextMenuOpenRef.current) {\n      closeTextFormatter();\n      if (IS_ANDROID) {\n        setIsTextFormatterDisabled(false);\n      }\n      return false;\n    }\n\n    const selectionRange = selection.getRangeAt(0);\n    const selectedText = selectionRange.toString().trim();\n    if (\n      shouldSuppressTextFormatter\n      || !isSelectionInsideInput(selectionRange, editableInputId || EDITABLE_INPUT_ID)\n      || !selectedText\n      || parseEmojiOnlyString(selectedText)\n      || !selectionRange.START_TO_END\n    ) {\n      closeTextFormatter();\n      return false;\n    }\n\n    return true;\n  }\n\n  function processSelection() {\n    if (!checkSelection()) {\n      return;\n    }\n\n    if (isTextFormatterDisabled) {\n      return;\n    }\n\n    const selectionRange = window.getSelection()!.getRangeAt(0);\n    const selectionRect = selectionRange.getBoundingClientRect();\n    const scrollerRect = inputRef.current!.closest<HTMLDivElement>(`.${SCROLLER_CLASS}`)!.getBoundingClientRect();\n\n    let x = (selectionRect.left + selectionRect.width / 2) - scrollerRect.left;\n\n    if (x < TEXT_FORMATTER_SAFE_AREA_PX) {\n      x = TEXT_FORMATTER_SAFE_AREA_PX;\n    } else if (x > scrollerRect.width - TEXT_FORMATTER_SAFE_AREA_PX) {\n      x = scrollerRect.width - TEXT_FORMATTER_SAFE_AREA_PX;\n    }\n\n    setTextFormatterAnchorPosition({\n      x,\n      y: selectionRect.top - scrollerRect.top,\n    });\n\n    setSelectedRange(selectionRange);\n    openTextFormatter();\n  }\n\n  function processSelectionWithTimeout() {\n    if (selectionTimeoutRef.current) {\n      window.clearTimeout(selectionTimeoutRef.current);\n    }\n    // Small delay to allow browser properly recalculate selection\n    selectionTimeoutRef.current = window.setTimeout(processSelection, SELECTION_RECALCULATE_DELAY_MS);\n  }\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (e.button !== 2) {\n      const listenerEl = e.currentTarget.closest(`.${INPUT_WRAPPER_CLASS}`) || e.target;\n\n      listenerEl.addEventListener('mouseup', processSelectionWithTimeout, { once: true });\n      return;\n    }\n\n    if (isContextMenuOpenRef.current) {\n      return;\n    }\n\n    isContextMenuOpenRef.current = true;\n\n    function handleCloseContextMenu(e2: KeyboardEvent | MouseEvent) {\n      if (e2 instanceof KeyboardEvent && e2.key !== 'Esc' && e2.key !== 'Escape') {\n        return;\n      }\n\n      setTimeout(() => {\n        isContextMenuOpenRef.current = false;\n      }, CONTEXT_MENU_CLOSE_DELAY_MS);\n\n      window.removeEventListener('keydown', handleCloseContextMenu);\n      window.removeEventListener('mousedown', handleCloseContextMenu);\n    }\n\n    document.addEventListener('mousedown', handleCloseContextMenu);\n    document.addEventListener('keydown', handleCloseContextMenu);\n  }\n\n  function handleKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    // https://levelup.gitconnected.com/javascript-events-handlers-keyboard-and-load-events-1b3e46a6b0c3#1960\n    const { isComposing } = e;\n\n    const html = getHtml();\n    if (!isComposing && !html && (e.metaKey || e.ctrlKey)) {\n      const targetIndexDelta = e.key === 'ArrowDown' ? 1 : e.key === 'ArrowUp' ? -1 : undefined;\n      if (targetIndexDelta) {\n        e.preventDefault();\n\n        replyToNextMessage({ targetIndexDelta });\n        return;\n      }\n    }\n\n    if (!isComposing && e.key === 'Enter' && !e.shiftKey) {\n      if (\n        !isMobileDevice\n        && (\n          (messageSendKeyCombo === 'enter' && !e.shiftKey)\n          || (messageSendKeyCombo === 'ctrl-enter' && (e.ctrlKey || e.metaKey))\n        )\n      ) {\n        e.preventDefault();\n\n        closeTextFormatter();\n        onSend();\n      }\n    } else if (!isComposing && e.key === 'ArrowUp' && !html && !e.metaKey && !e.ctrlKey && !e.altKey) {\n      e.preventDefault();\n      editLastMessage();\n    } else {\n      e.target.addEventListener('keyup', processSelectionWithTimeout, { once: true });\n    }\n  }\n\n  function handleChange(e: ChangeEvent<HTMLDivElement>) {\n    const { innerHTML, textContent } = e.currentTarget;\n\n    onUpdate(innerHTML === SAFARI_BR ? '' : innerHTML);\n\n    // Reset focus on the input to remove any active styling when input is cleared\n    if (\n      !IS_TOUCH_ENV\n      && (!textContent || !textContent.length)\n      // When emojis are not supported, innerHTML contains an emoji img tag that doesn't exist in the textContext\n      && !(!IS_EMOJI_SUPPORTED && innerHTML.includes('emoji-small'))\n      && !(innerHTML.includes('custom-emoji'))\n    ) {\n      const selection = window.getSelection()!;\n      if (selection) {\n        inputRef.current!.blur();\n        selection.removeAllRanges();\n        focusEditableElement(inputRef.current!, true);\n      }\n    }\n  }\n\n  function handleAndroidContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (!checkSelection()) {\n      return;\n    }\n\n    setIsTextFormatterDisabled(!isTextFormatterDisabled);\n\n    if (!isTextFormatterDisabled) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      processSelection();\n    } else {\n      closeTextFormatter();\n    }\n  }\n\n  function handleClick() {\n    if (isAttachmentModalInput || canSendPlainText || (isStoryInput && isNeedPremium)) return;\n    showAllowedMessageTypesNotification({ chatId, messageListType });\n  }\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    if (canAutoFocus) {\n      focusInput();\n    }\n  }, [chatId, focusInput, replyInfo, canAutoFocus]);\n\n  useEffect(() => {\n    if (\n      !chatId\n      || editableInputId !== EDITABLE_INPUT_ID\n      || noFocusInterception\n      || isMobileDevice\n      || isSelectModeActive\n    ) {\n      return undefined;\n    }\n\n    const handleDocumentKeyDown = (e: KeyboardEvent) => {\n      if (getIsDirectTextInputDisabled()) {\n        return;\n      }\n\n      const { key } = e;\n      const target = e.target as HTMLElement | undefined;\n\n      if (!target || IGNORE_KEYS.includes(key)) {\n        return;\n      }\n\n      const input = inputRef.current!;\n      const isSelectionCollapsed = document.getSelection()?.isCollapsed;\n\n      if (\n        ((key.startsWith('Arrow') || (e.shiftKey && key === 'Shift')) && !isSelectionCollapsed)\n        || (e.code === 'KeyC' && (e.ctrlKey || e.metaKey) && target.tagName !== 'INPUT')\n      ) {\n        return;\n      }\n\n      if (\n        input\n        && target !== input\n        && target.tagName !== 'INPUT'\n        && target.tagName !== 'TEXTAREA'\n        && !target.isContentEditable\n      ) {\n        focusEditableElement(input, true, true);\n\n        const newEvent = new KeyboardEvent(e.type, e as any);\n        input.dispatchEvent(newEvent);\n      }\n    };\n\n    document.addEventListener('keydown', handleDocumentKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleDocumentKeyDown, true);\n    };\n  }, [chatId, editableInputId, isMobileDevice, isSelectModeActive, noFocusInterception]);\n\n  useEffect(() => {\n    const captureFirstTab = debounce((e: KeyboardEvent) => {\n      if (e.key === 'Tab' && !getIsDirectTextInputDisabled()) {\n        e.preventDefault();\n        requestMutation(focusInput);\n      }\n    }, TAB_INDEX_PRIORITY_TIMEOUT, true, false);\n\n    return captureKeyboardListeners({ onTab: captureFirstTab });\n  }, [focusInput]);\n\n  useEffect(() => {\n    const input = inputRef.current!;\n\n    function suppressFocus() {\n      input.blur();\n    }\n\n    if (shouldSuppressFocus) {\n      input.addEventListener('focus', suppressFocus);\n    }\n\n    return () => {\n      input.removeEventListener('focus', suppressFocus);\n    };\n  }, [shouldSuppressFocus]);\n\n  const isTouched = useDerivedState(() => Boolean(isActive && getHtml()), [isActive, getHtml]);\n\n  const className = buildClassName(\n    'form-control allow-selection',\n    isTouched && 'touched',\n    shouldSuppressFocus && 'focus-disabled',\n  );\n\n  const inputScrollerContentClass = buildClassName('input-scroller-content', isNeedPremium && 'is-need-premium');\n  const placeholderAriaLabel = typeof placeholder === 'string' ? placeholder : undefined;\n\n  return (\n    <div id={id} onClick={shouldSuppressFocus ? onSuppressedFocus : undefined} dir={oldLang.isRtl ? 'rtl' : undefined}>\n      <div\n        className={buildClassName('custom-scroll', SCROLLER_CLASS, isNeedPremium && 'is-need-premium')}\n        onScroll={onScroll}\n        onClick={!isAttachmentModalInput && !canSendPlainText ? handleClick : undefined}\n      >\n        <div className={inputScrollerContentClass}>\n          <div\n            ref={inputRef}\n            id={editableInputId || EDITABLE_INPUT_ID}\n            className={className}\n            contentEditable={isAttachmentModalInput || canSendPlainText}\n            role=\"textbox\"\n            dir=\"auto\"\n            spellCheck={IS_TAURI ? false : undefined}\n            tabIndex={0}\n            onClick={focusInput}\n            onChange={handleChange}\n            onKeyDown={handleKeyDown}\n            onMouseDown={handleMouseDown}\n            onContextMenu={IS_ANDROID ? handleAndroidContextMenu : undefined}\n            onTouchCancel={IS_ANDROID ? processSelectionWithTimeout : undefined}\n            aria-label={placeholderAriaLabel}\n            onFocus={!isNeedPremium ? onFocus : undefined}\n            onBlur={!isNeedPremium ? onBlur : undefined}\n          />\n          {!forcedPlaceholder && (\n            <span\n              className={buildClassName(\n                'placeholder-text',\n                !isAttachmentModalInput && !canSendPlainText && 'with-icon',\n                isNeedPremium && 'is-need-premium',\n              )}\n              dir=\"auto\"\n            >\n              {!isAttachmentModalInput && !canSendPlainText\n                && <Icon name=\"lock-badge\" className=\"placeholder-icon\" />}\n              {shouldDisplayTimer ? (\n                <TextTimer langKey={timedPlaceholderLangKey!} endsAt={timedPlaceholderDate!} onEnd={handleTimerEnd} />\n              ) : placeholder}\n              {isStoryInput && isNeedPremium && (\n                <Button className=\"unlock-button\" size=\"tiny\" color=\"adaptive\" onClick={handleOpenPremiumModal}>\n                  {oldLang('StoryRepliesLockedButton')}\n                </Button>\n              )}\n            </span>\n          )}\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          <div ref={absoluteContainerRef} className=\"absolute-video-container\" />\n        </div>\n      </div>\n      <div\n        ref={scrollerCloneRef}\n        className={buildClassName('custom-scroll',\n          SCROLLER_CLASS,\n          'clone',\n          isNeedPremium && 'is-need-premium')}\n      >\n        <div className={inputScrollerContentClass}>\n          <div ref={cloneRef} className={buildClassName(className, 'clone')} dir=\"auto\" />\n        </div>\n      </div>\n      {captionLimit !== undefined && (\n        <div className=\"max-length-indicator\" dir=\"auto\">\n          {captionLimit}\n        </div>\n      )}\n      <TextFormatter\n        isOpen={isTextFormatterOpen}\n        anchorPosition={textFormatterAnchorPosition}\n        selectedRange={selectedRange}\n        setSelectedRange={setSelectedRange}\n        onClose={handleCloseTextFormatter}\n      />\n      {forcedPlaceholder && <span className=\"forced-placeholder\">{renderText(forcedPlaceholder)}</span>}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }: OwnProps): Complete<StateProps> => {\n    const { messageSendKeyCombo } = selectSharedSettings(global);\n\n    return {\n      messageSendKeyCombo,\n      replyInfo: chatId && threadId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined,\n      isSelectModeActive: selectIsInSelectMode(global),\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(MessageInput));\n","import { useMemo } from '../../../../lib/teact/teact';\n\nexport enum ChatAnimationTypes {\n  Move,\n  Opacity,\n  None,\n}\n\nexport function useChatAnimationType<T extends number | string>(orderDiffById: Record<T, number>) {\n  return useMemo(() => {\n    const orderDiffs = Object.values<number>(orderDiffById);\n    const numberOfUp = orderDiffs.filter((diff) => diff < 0).length;\n    const numberOfDown = orderDiffs.filter((diff) => diff > 0).length;\n\n    return (chatId: T): ChatAnimationTypes => {\n      const orderDiff = orderDiffById[chatId];\n      if (orderDiff === 0) {\n        return ChatAnimationTypes.None;\n      }\n\n      if (\n        orderDiff === Infinity\n        || orderDiff === -Infinity\n        || (numberOfUp <= numberOfDown && orderDiff < 0)\n        || (numberOfDown < numberOfUp && orderDiff > 0)\n      ) {\n        return ChatAnimationTypes.Opacity;\n      }\n\n      return ChatAnimationTypes.Move;\n    };\n  }, [orderDiffById]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiTypingStatus, ApiUser } from '../../api/types';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport DotAnimation from './DotAnimation';\n\nimport './TypingStatus.scss';\n\ntype OwnProps = {\n  typingStatus: ApiTypingStatus;\n};\n\ntype StateProps = {\n  typingUser?: ApiUser;\n};\n\nconst TypingStatus: FC<OwnProps & StateProps> = ({ typingStatus, typingUser }) => {\n  const lang = useOldLang();\n  const typingUserName = typingUser && !typingUser.isSelf && getUserFirstOrLastName(typingUser);\n  const content = lang(typingStatus.action)\n    // Fix for translation \"{user} is typing\"\n    .replace('{user}', '')\n    .replace('{emoji}', typingStatus.emoji || '').trim();\n\n  return (\n    <p className=\"typing-status\" dir={lang.isRtl ? 'rtl' : 'auto'}>\n      {typingUserName && (\n        <span className=\"sender-name\" dir=\"auto\">{renderText(typingUserName)}</span>\n      )}\n      <DotAnimation content={content} />\n    </p>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { typingStatus }): Complete<StateProps> => {\n    if (!typingStatus.userId) {\n      return { typingUser: undefined };\n    }\n\n    const typingUser = selectUser(global, typingStatus.userId);\n\n    return { typingUser };\n  },\n)(TypingStatus));\n","import type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport './DotAnimation.scss';\n\ntype OwnProps = {\n  content: string;\n  className?: string;\n};\n\nconst DotAnimation: FC<OwnProps> = ({ content, className }) => {\n  const lang = useOldLang();\n  return (\n    <span className={buildClassName('DotAnimation', className)} dir={lang.isRtl ? 'rtl' : 'auto'}>\n      {renderText(content)}\n      <span className=\"ellipsis\" />\n    </span>\n  );\n};\n\nexport default DotAnimation;\n","import { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageHtmlId,\n  getMessageIsSpoiler,\n  getMessageVideo,\n  getVideoMediaHash,\n} from '../../global/helpers';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport useMessageMediaHash from '../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../hooks/media/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  idPrefix?: string;\n  isProtected?: boolean;\n  canAutoPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick?: (messageId: number, chatId: string) => void;\n};\n\nconst Media = ({\n  message,\n  idPrefix = 'shared-media',\n  isProtected,\n  canAutoPlay,\n  observeIntersection,\n  onClick,\n}: OwnProps) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const [isHovering, markMouseOver, markMouseOut] = useFlag();\n\n  const thumbDataUri = useThumbnail(message);\n  const mediaHash = useMessageMediaHash(message, 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash, !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = getMessageVideo(message);\n  const fullGiftHash = video?.isGif ? getVideoMediaHash(video, 'full') : undefined;\n  const fullGifBlobUrl = useMedia(fullGiftHash, !isIntersecting);\n\n  const hasSpoiler = getMessageIsSpoiler(message);\n  const [isSpoilerShown, , hideSpoiler] = useFlag(hasSpoiler);\n\n  const handleClick = useLastCallback(() => {\n    hideSpoiler();\n    onClick!(message.id, message.chatId);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${getMessageHtmlId(message.id)}`}\n      className=\"Media scroll-item\"\n      onClick={onClick ? handleClick : undefined}\n      onMouseOver={!IS_TOUCH_ENV ? markMouseOver : undefined}\n      onMouseOut={!IS_TOUCH_ENV ? markMouseOut : undefined}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {fullGifBlobUrl ? (\n        <OptimizedVideo\n          canPlay={isIntersecting && !hasSpoiler && isHovering && Boolean(canAutoPlay)}\n          src={fullGifBlobUrl}\n          className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n          muted\n          loop\n          playsInline\n          draggable={false}\n          disablePictureInPicture\n          onContextMenu={isProtected ? stopEvent : undefined}\n        />\n      ) : (\n        <img\n          src={mediaBlobUrl}\n          className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n          decoding=\"async\"\n          onContextMenu={isProtected ? stopEvent : undefined}\n        />\n      )}\n      {hasSpoiler && (\n        <MediaSpoiler\n          thumbDataUri={mediaBlobUrl || thumbDataUri}\n          isVisible={isSpoilerShown}\n          className=\"media-spoiler\"\n        />\n      )}\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(Media);\n","import { memo } from '../../lib/teact/teact';\n\nimport type { ApiMessage, ApiMessageOutgoingStatus } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatPastTimeShort } from '../../util/dates/dateFormat';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport MessageOutgoingStatus from './MessageOutgoingStatus';\n\nimport './LastMessageMeta.scss';\n\ntype OwnProps = {\n  className?: string;\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  draftDate?: number;\n};\n\nconst LastMessageMeta = ({\n  className, message, outgoingStatus, draftDate,\n}: OwnProps) => {\n  const lang = useOldLang();\n\n  const shouldUseDraft = draftDate && draftDate > message.date;\n  return (\n    <div className={buildClassName('LastMessageMeta', className)}>\n      {outgoingStatus && !shouldUseDraft && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      <span className=\"time\">\n        {formatPastTimeShort(lang, (shouldUseDraft ? draftDate : message.date) * 1000)}\n      </span>\n    </div>\n  );\n};\n\nexport default memo(LastMessageMeta);\n","import type { ElementRef } from '../../lib/teact/teact';\nimport { useEffect, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { IS_MOBILE } from '../../util/browser/windowEnvironment';\nimport useLastCallback from '../useLastCallback';\nimport useOldLang from '../useOldLang';\n\nconst NOTIFICATION_DURATION = 8000;\n\nexport default function useUnsupportedMedia(\n  ref: ElementRef<HTMLVideoElement>, shouldDisableNotification?: boolean, isDisabled?: boolean,\n) {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n  const [isUnsupported, setIsUnsupported] = useState(false);\n\n  const handleUnsupported = useLastCallback(() => {\n    setIsUnsupported(true);\n    if (shouldDisableNotification) return;\n\n    showNotification({\n      message: IS_MOBILE ? lang('Video.Unsupported.Mobile') : lang('Video.Unsupported.Desktop'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const onError = useLastCallback((event: Event) => {\n    const target = event.currentTarget as HTMLVideoElement;\n    const { error } = target;\n    if (!error) return;\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaError/code\n    if (error.code === 3 || error.code === 4) {\n      handleUnsupported();\n    }\n  });\n\n  const onCanPlay = useLastCallback((event: Event) => {\n    const target = event.currentTarget as HTMLVideoElement;\n\n    if (!target.videoHeight || !target.videoWidth) {\n      handleUnsupported();\n    }\n  });\n\n  useEffect(() => {\n    if (isDisabled) return undefined;\n\n    const { current } = ref;\n    if (!current) {\n      return undefined;\n    }\n\n    current.addEventListener('error', onError);\n    current.addEventListener('canplay', onCanPlay);\n\n    return () => {\n      current.removeEventListener('error', onError);\n      current.removeEventListener('canplay', onCanPlay);\n    };\n  }, [isDisabled, ref]);\n\n  return isUnsupported;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  useEffect, useLayoutEffect,\n  useRef, useSignal, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getMediaFormat,\n  getVideoMediaHash,\n  hasMessageTtl,\n} from '../../../global/helpers';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport safePlay from '../../../util/safePlay';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\n\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport Button from '../../ui/Button';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  className?: string;\n  canAutoLoad?: boolean;\n  isDownloading?: boolean;\n  origin?: 'oneTimeModal';\n  observeIntersection?: ObserveFn;\n  onStop?: NoneToVoidFunction;\n  onReadMedia?: NoneToVoidFunction;\n  onHideTranscription?: (isHidden: boolean) => void;\n  isTranscriptionError?: boolean;\n  canTranscribe?: boolean;\n  isTranscribed?: boolean;\n  isTranscriptionHidden?: boolean;\n  isTranscribing?: boolean;\n};\n\nconst PROGRESS_CENTER = ROUND_VIDEO_DIMENSIONS_PX / 2;\nconst PROGRESS_MARGIN = 6;\nconst PROGRESS_CIRCUMFERENCE = (PROGRESS_CENTER - PROGRESS_MARGIN) * 2 * Math.PI;\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  className,\n  canAutoLoad,\n  isDownloading,\n  origin,\n  observeIntersection,\n  onStop,\n  onReadMedia,\n  isTranscriptionError,\n  isTranscribed,\n  canTranscribe,\n  onHideTranscription,\n  isTranscriptionHidden,\n  isTranscribing,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const playerRef = useRef<HTMLVideoElement>();\n  const circleRef = useRef<SVGCircleElement>();\n\n  const { cancelMediaDownload, openOneTimeMediaModal, transcribeAudio } = getActions();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const video = message.content.video!;\n  const isMediaUnread = message.isMediaUnread;\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getVideoMediaHash(video, 'inline'),\n    !shouldLoad,\n    getMediaFormat(video, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getVideoMediaHash(video, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasTtl = hasMessageTtl(message);\n  const isInOneTimeModal = origin === 'oneTimeModal';\n  const shouldRenderSpoiler = hasTtl && !isInOneTimeModal;\n  const thumbDataUri = useThumbnail(message);\n  const hasThumb = Boolean(thumbDataUri);\n  const noThumb = !hasThumb || isPlayerReady || shouldRenderSpoiler;\n  const thumbRef = useBlurredMediaThumbRef(video, noThumb);\n  useMediaTransition({ hasMediaData: !noThumb, ref: thumbRef });\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n\n  const {\n    ref: spinnerRef,\n    shouldRender: shouldRenderSpinner,\n  } = useShowTransition({\n    isOpen: isTransferring,\n    noMountTransition: wasLoadDisabled,\n    withShouldRender: true,\n  });\n\n  const [isActivated, setIsActivated] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated || !circleRef.current) {\n      return;\n    }\n\n    const strokeDashOffset = PROGRESS_CIRCUMFERENCE - getThrottledProgress() * PROGRESS_CIRCUMFERENCE;\n    circleRef.current.setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const togglePlaying = useLastCallback(() => {\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n      setIsActivated(true);\n    }\n  });\n\n  useEffect(() => {\n    if (!isInOneTimeModal) {\n      return;\n    }\n    togglePlaying();\n  }, [isInOneTimeModal]);\n\n  const handleClick = useLastCallback((event) => {\n    if (event.target.closest('.transcribe-button')) {\n      return;\n    }\n\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      cancelMediaDownload({ media: video });\n      return;\n    }\n\n    if (hasTtl && !isInOneTimeModal) {\n      openOneTimeMediaModal({ message });\n      onReadMedia?.();\n      return;\n    }\n\n    togglePlaying();\n  });\n\n  useEffect(() => {\n    if (onReadMedia && isMediaUnread && isActivated) {\n      onReadMedia();\n    }\n  }, [isActivated, isMediaUnread, onReadMedia]);\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n    setProgress(playerEl.currentTime / playerEl.duration);\n    setCurrentTime(Math.floor(playerEl.currentTime));\n  });\n\n  const handleTranscribe = useLastCallback(() => {\n    transcribeAudio({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderPlayWrapper() {\n    return (\n      <div className=\"play-wrapper\">\n        <Button\n          color=\"dark\"\n          round\n          size=\"smaller\"\n          className=\"play\"\n          nonInteractive\n        >\n          <Icon name=\"play\" />\n        </Button>\n        <Icon name=\"view-once\" />\n      </div>\n    );\n  }\n\n  const handleButtonClick = useLastCallback(() => {\n    if ((isTranscribed || isTranscriptionError) && onHideTranscription) {\n      onHideTranscription(!isTranscriptionHidden);\n    } else if (!isTranscribing) {\n      handleTranscribe();\n    }\n  });\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('RoundVideo', 'media-inner', isInOneTimeModal && 'non-interactive', className)}\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {shouldRenderSpoiler && (\n            <MediaSpoiler\n              isVisible\n              thumbDataUri={thumbDataUri}\n              width={ROUND_VIDEO_DIMENSIONS_PX}\n              height={ROUND_VIDEO_DIMENSIONS_PX}\n              className=\"media-spoiler\"\n            />\n          )}\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay={!shouldRenderSpoiler}\n            disablePictureInPicture\n            muted={!isActivated}\n            defaultMuted\n            loop={!isActivated}\n            playsInline\n            isPriority\n            onEnded={isActivated ? onStop ?? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      {!shouldRenderSpoiler && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      )}\n      <div className=\"progress\">\n        {isActivated && (\n          <svg width={ROUND_VIDEO_DIMENSIONS_PX} height={ROUND_VIDEO_DIMENSIONS_PX}>\n            <circle\n              ref={circleRef}\n              cx={PROGRESS_CENTER}\n              cy={PROGRESS_CENTER}\n              r={PROGRESS_CENTER - PROGRESS_MARGIN}\n              className=\"progress-circle\"\n              transform={`rotate(-90, ${PROGRESS_CENTER}, ${PROGRESS_CENTER})`}\n              stroke-dasharray={PROGRESS_CIRCUMFERENCE}\n              stroke-dashoffset={PROGRESS_CIRCUMFERENCE}\n            />\n          </svg>\n        )}\n      </div>\n      {shouldRenderSpinner && (\n        <div ref={spinnerRef} className=\"media-loading\">\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {shouldRenderSpoiler && !shouldRenderSpinner && renderPlayWrapper()}\n      {!mediaData && !isLoadAllowed && (\n        <Icon name=\"download\" />\n      )}\n      {!isInOneTimeModal && (\n        <div\n          className={buildClassName(\n            'message-media-duration', isMediaUnread && 'unread',\n          )}\n        >\n          {isActivated ? formatMediaDuration(currentTime) : formatMediaDuration(video.duration)}\n          {(!isActivated || playerRef.current!.paused) && <Icon name=\"muted\" />}\n        </div>\n      )}\n      {canTranscribe && (\n        <Button\n          onClick={handleButtonClick}\n          className=\"transcribe-button\"\n        >\n          {isTranscribed || isTranscriptionError ? <Icon name=\"down\" /> : <Icon name=\"transcribe\" />}\n          {isTranscribing && (\n            <svg viewBox=\"0 0 32 24\" className=\"loading-svg\">\n              <rect\n                className=\"loading-rect\"\n                fill=\"transparent\"\n                width=\"32\"\n                height=\"24\"\n                stroke-width=\"3\"\n                stroke-linejoin=\"round\"\n                rx=\"6\"\n                ry=\"6\"\n                stroke=\"white\"\n                stroke-dashoffset=\"1\"\n                stroke-dasharray=\"32,68\"\n              />\n            </svg>\n          )}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import { type TeactNode } from '../../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton } from '../../../../api/types';\nimport type { LangFn } from '../../../../util/localization';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../../config';\nimport { replaceWithTeact } from '../../../../util/replaceWithTeact';\nimport renderText from '../../../common/helpers/renderText';\n\nimport { type OldLangFn } from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nexport default function renderKeyboardButtonText(lang: OldLangFn | LangFn, button: ApiKeyboardButton): TeactNode {\n  if (button.type === 'receipt') {\n    return lang('PaymentReceipt');\n  }\n\n  if (button.type === 'buy') {\n    return replaceWithTeact(button.text, STARS_ICON_PLACEHOLDER, <Icon className=\"star-currency-icon\" name=\"star\" />);\n  }\n\n  return renderText(button.text);\n}\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiPhoto, ApiUser } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getChatTitle,\n  getPhotoMediaHash,\n  getProfilePhotoMediaHash,\n  getUserFullName,\n  getVideoProfilePhotoMediaHash,\n  isAnonymousForwardsChat,\n  isChatWithRepliesBot,\n  isDeletedUser,\n} from '../../../global/helpers';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\n\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport Spinner from '../../ui/Spinner';\nimport Icon from '../icons/Icon';\n\nimport './ProfilePhoto.scss';\n\ntype OwnProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n  photo?: ApiPhoto;\n  canPlayVideo: boolean;\n  className?: string;\n  style?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst ProfilePhoto: FC<OwnProps> = ({\n  chat,\n  user,\n  photo,\n  isSavedMessages,\n  isSavedDialog,\n  canPlayVideo,\n  className,\n  style,\n  onClick,\n}) => {\n  const videoRef = useRef<HTMLVideoElement>();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const isDeleted = user && isDeletedUser(user);\n  const isRepliesChat = chat && isChatWithRepliesBot(chat.id);\n  const isAnonymousForwards = chat && isAnonymousForwardsChat(chat.id);\n  const peer = (user || chat)!;\n  const canHaveMedia = peer && !isSavedMessages && !isDeleted && !isRepliesChat && !isAnonymousForwards;\n  const { isVideo } = photo || {};\n\n  const avatarHash = (!photo || photo.id === peer.avatarPhotoId) && getChatAvatarHash(peer, 'normal');\n\n  const previewHash = canHaveMedia && photo && !avatarHash && getPhotoMediaHash(photo, 'pictogram');\n  const previewBlobUrl = useMedia(previewHash || avatarHash);\n\n  const photoHash = canHaveMedia && photo && !isVideo && getProfilePhotoMediaHash(photo);\n  const photoBlobUrl = useMedia(photoHash);\n\n  const videoHash = canHaveMedia && photo && isVideo && getVideoProfilePhotoMediaHash(photo);\n  const videoBlobUrl = useMedia(videoHash);\n\n  const fullMediaData = videoBlobUrl || photoBlobUrl;\n  const [isVideoReady, markVideoReady] = useFlag();\n  const isFullMediaReady = Boolean(fullMediaData && (!isVideo || isVideoReady));\n  const transitionClassNames = useMediaTransitionDeprecated(isFullMediaReady);\n  const isBlurredThumb = canHaveMedia && !isFullMediaReady && !previewBlobUrl && photo?.thumbnail?.dataUri;\n  const blurredThumbCanvasRef = useCanvasBlur(\n    photo?.thumbnail?.dataUri, !isBlurredThumb, isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n  const hasMedia = photo || previewBlobUrl || isBlurredThumb;\n\n  useEffect(() => {\n    if (videoRef.current && !canPlayVideo) {\n      videoRef.current.currentTime = 0;\n    }\n  }, [canPlayVideo]);\n\n  const specialIcon = useMemo(() => {\n    if (isSavedMessages) {\n      return isSavedDialog ? 'my-notes' : 'avatar-saved-messages';\n    }\n\n    if (isDeleted) {\n      return 'avatar-deleted-account';\n    }\n\n    if (isRepliesChat) {\n      return 'reply-filled';\n    }\n\n    if (isAnonymousForwards) {\n      return 'author-hidden';\n    }\n\n    return undefined;\n  }, [isAnonymousForwards, isDeleted, isSavedDialog, isRepliesChat, isSavedMessages]);\n\n  let content: TeactNode | undefined;\n\n  if (specialIcon) {\n    content = <Icon name={specialIcon} role=\"img\" />;\n  } else if (hasMedia) {\n    content = (\n      <>\n        {isBlurredThumb ? (\n          <canvas ref={blurredThumbCanvasRef} className=\"thumb\" />\n        ) : (\n          <img src={previewBlobUrl} draggable={false} className=\"thumb\" alt=\"\" />\n        )}\n        {photo && (\n          isVideo ? (\n            <OptimizedVideo\n              canPlay={canPlayVideo}\n              ref={videoRef}\n              src={fullMediaData}\n              className={buildClassName('avatar-media', transitionClassNames)}\n              muted\n              disablePictureInPicture\n              loop\n              playsInline\n              onReady={markVideoReady}\n            />\n          ) : (\n            <img\n              src={fullMediaData}\n              draggable={false}\n              className={buildClassName('avatar-media', transitionClassNames)}\n              alt=\"\"\n            />\n          )\n        )}\n      </>\n    );\n  } else if (user) {\n    const userFullName = getUserFullName(user);\n    content = userFullName ? getFirstLetters(userFullName, 2) : undefined;\n  } else if (chat) {\n    const title = getChatTitle(lang, chat);\n    content = title && getFirstLetters(title, isUserId(chat.id) ? 2 : 1);\n  } else {\n    content = (\n      <div className=\"spinner-wrapper\">\n        <Spinner color=\"white\" />\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'ProfilePhoto',\n    getPeerColorClass(peer),\n    isSavedMessages && 'saved-messages',\n    isAnonymousForwards && 'anonymous-forwards',\n    isDeleted && 'deleted-account',\n    isRepliesChat && 'replies-bot-account',\n    (!isSavedMessages && !hasMedia) && 'no-photo',\n    className,\n  );\n\n  return (\n    <div className={fullClassName} onClick={hasMedia ? onClick : undefined} style={style}>\n      {typeof content === 'string' ? renderText(content, ['hq_emoji']) : content}\n    </div>\n  );\n};\n\nexport default memo(ProfilePhoto);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dspICZx5\",\"gift\":\"GtRefNqT\",\"fadeOut\":\"CviSFYWp\",\"fadeIn\":\"zARAyL86\"};","import { memo, useMemo, useRef } from '@teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSavedStarGift } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { clamp } from '../../../util/math';\nimport { getGiftAttributes } from '../helpers/gifts';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useVtn } from '../../../hooks/animations/useVtn';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport GiftEffectWrapper from '../gift/GiftEffectWrapper';\nimport StickerView from '../StickerView';\n\nimport styles from './ProfilePinnedGifts.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  className?: string;\n  gifts?: ApiSavedStarGift[];\n  isExpanded?: boolean;\n  withGlow?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 2 * REM;\nconst POSITIONS = [\n  { x: -0.2, y: -0.3 },\n  { x: 0.3, y: 0.1 },\n  { x: -0.4, y: -0.1 },\n  { x: 0.4, y: -0.1 },\n  { x: -0.25, y: 0.1 },\n  { x: 0.25, y: -0.25 },\n];\n\nconst CENTER = { x: 0.5, y: 0.5 };\n\nconst ProfilePinnedGifts = ({\n  peerId,\n  gifts,\n  isExpanded,\n  className,\n  withGlow,\n}: OwnProps) => {\n  const { createVtnStyle } = useVtn();\n\n  if (!gifts) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {gifts.slice(0, POSITIONS.length).map((gift, index) => {\n        const position = !isExpanded ? POSITIONS[index] : getExpandedPosition(POSITIONS[index]);\n        const style = buildStyle(\n          `top: ${(CENTER.y + position.y) * 100}%`,\n          `left: ${(CENTER.x + position.x) * 100}%`,\n        );\n        return (\n          <PinnedGift\n            peerId={peerId}\n            className={styles.gift}\n            key={gift.gift.id}\n            gift={gift}\n            style={buildStyle(style, createVtnStyle(`profilePinnedGift${index}`, 'profilePinnedGift'))}\n            withGlow={withGlow}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nfunction getExpandedPosition(position: { x: number; y: number }) {\n  return {\n    x: clamp(position.x * 1.5, -0.45, 0.45),\n    y: clamp(position.y * 1.5, -0.45, 0.45),\n  };\n}\n\nconst PinnedGift = ({\n  gift, style, className, withGlow, peerId,\n}: {\n  gift: ApiSavedStarGift;\n  style?: string;\n  className?: string;\n  withGlow?: boolean;\n  peerId: string;\n}) => {\n  const { openGiftInfoModal } = getActions();\n\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const giftAttributes = useMemo(() => {\n    return getGiftAttributes(gift.gift);\n  }, [gift]);\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({ peerId, gift });\n  });\n\n  if (!giftAttributes?.model || !giftAttributes.backdrop) return undefined;\n\n  return (\n    <GiftEffectWrapper\n      withSparkles\n      sparklesColor={giftAttributes.backdrop.textColor}\n      glowColor={withGlow ? giftAttributes.backdrop.edgeColor : undefined}\n      ref={stickerRef}\n      className={className}\n      style={style}\n      onClick={handleClick}\n    >\n      <StickerView\n        containerRef={stickerRef}\n        sticker={giftAttributes.model.sticker}\n        size={GIFT_STICKER_SIZE}\n        withTranslucentThumb\n        noPlay\n      />\n    </GiftEffectWrapper>\n  );\n};\n\nexport default memo(ProfilePinnedGifts);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Z_HM0Jqg\",\"plain\":\"YIhgPXW6\",\"minimized\":\"blI_IH7j\",\"userRatingNegativeWrapper\":\"vuUzgWI1\",\"userRatingWrapper\":\"P6tsZMON\",\"status\":\"XxRtPe_4\",\"getStatus\":\"wCXGPPTY\",\"userStatus\":\"F4JyLH2c\",\"fallbackPhoto\":\"eZ2DGNou\",\"fallbackPhotoContents\":\"ldzIKEUp\",\"fallbackPhotoVisible\":\"uNvH08Qp\",\"fallbackPhotoAvatar\":\"a9OwsvOP\",\"photoWrapper\":\"UZ7NDj8N\",\"photoDashes\":\"e7iOf_3T\",\"photoDash\":\"eD0Is6TL\",\"photoDash_current\":\"MSdiAM06\",\"photoDashCurrent\":\"MSdiAM06\",\"navigation\":\"Yr9FHqbF\",\"navigation_prev\":\"Z1ZX2xot\",\"navigationPrev\":\"Z1ZX2xot\",\"navigation_next\":\"X0stLWTl\",\"navigationNext\":\"X0stLWTl\",\"info\":\"ZFBuRDGK\",\"title\":\"atYgxkWV\",\"ratingIcon\":\"Yvu9iM5n\",\"ratingNegativeIcon\":\"JZBCjHv0\",\"ratingLevel\":\"eFsZljMG\",\"topicContainer\":\"dNcezQH8\",\"topicTitle\":\"hjk4U031\",\"topicIcon\":\"YwVcTLvK\",\"topicIconTitle\":\"_sQEevF7\",\"topicMessagesCounter\":\"GXxwbzqF\",\"radialPatternBackground\":\"BvunKb6r\",\"standaloneAvatar\":\"rLHO_VQT\",\"activeProfilePhoto\":\"yltXKQri\",\"pinnedGifts\":\"JX3wjADD\",\"profileExpandAvatar\":\"KtpaSfR5\",\"profileCollapseAvatar\":\"c1xe6OKs\"};","import { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat,\n  ApiEmojiStatusType,\n  ApiPeerColorOption,\n  ApiPeerPhotos,\n  ApiPeerProfileColorSet,\n  ApiSavedGifts,\n  ApiSticker,\n  ApiTopic,\n  ApiUser,\n  ApiUserFullInfo,\n  ApiUserStatus,\n} from '../../../api/types/index';\nimport type { IconName } from '../../../types/icons/index';\nimport type { AnimationLevel, ThemeKey } from '../../../types/index';\nimport { MediaViewerOrigin } from '../../../types/index';\n\nimport {\n  getUserStatus, isAnonymousForwardsChat, isChatChannel, isSystemBot, isUserOnline,\n} from '../../../global/helpers/index';\nimport { getActions, withGlobal } from '../../../global/index';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCustomEmoji,\n  selectPeer,\n  selectPeerHasProfileBackground,\n  selectPeerPhotos,\n  selectPeerProfileColor,\n  selectPeerSavedGifts,\n  selectTabState,\n  selectTheme,\n  selectThreadMessagesCount,\n  selectTopic,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n} from '../../../global/selectors/index';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\nimport { REM } from '../helpers/mediaDimensions.ts';\nimport renderText from '../helpers/renderText.tsx';\n\nimport { useVtn } from '../../../hooks/animations/useVtn';\nimport useIntervalForceUpdate from '../../../hooks/schedulers/useIntervalForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useCustomEmoji from '../hooks/useCustomEmoji';\nimport usePhotosPreload from '../hooks/usePhotosPreload';\n\nimport Transition from '../../ui/Transition.tsx';\nimport Avatar from '../Avatar.tsx';\nimport FullNameTitle from '../FullNameTitle.tsx';\nimport Icon from '../icons/Icon.tsx';\nimport TopicIcon from '../TopicIcon.tsx';\nimport ProfilePhoto from './ProfilePhoto';\nimport ProfilePinnedGifts from './ProfilePinnedGifts.tsx';\nimport RadialPatternBackground from './RadialPatternBackground.tsx';\n\nimport './ProfileInfo.scss';\nimport styles from './ProfileInfo.module.scss';\n\nconst MAX_LEVEL_ICON = 90;\n\ntype OwnProps = {\n  isExpanded?: boolean;\n  peerId: string;\n  isForSettings?: boolean;\n  canPlayVideo: boolean;\n  isForMonoforum?: boolean;\n  onExpand?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userFullInfo?: ApiUserFullInfo;\n  userStatus?: ApiUserStatus;\n  chat?: ApiChat;\n  mediaIndex?: number;\n  avatarOwnerId?: string;\n  topic?: ApiTopic;\n  messagesCount?: number;\n  animationLevel: AnimationLevel;\n  emojiStatus?: ApiEmojiStatusType;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n  profilePhotos?: ApiPeerPhotos;\n  profileColorOption?: ApiPeerColorOption<ApiPeerProfileColorSet>;\n  theme: ThemeKey;\n  isPlain?: boolean;\n  savedGifts?: ApiSavedGifts;\n};\n\nconst EMOJI_STATUS_SIZE = 24;\nconst EMOJI_TOPIC_SIZE = 120;\nconst LOAD_MORE_THRESHOLD = 3;\nconst MAX_PHOTO_DASH_COUNT = 30;\nconst STATUS_UPDATE_INTERVAL = 1000 * 60; // 1 min\nconst PATTERN_Y_SHIFT = 8 * REM;\n\nconst ProfileInfo = ({\n  isExpanded,\n  isForSettings,\n  canPlayVideo,\n  user,\n  userFullInfo,\n  userStatus,\n  chat,\n  mediaIndex,\n  avatarOwnerId,\n  topic,\n  messagesCount,\n  animationLevel,\n  emojiStatus,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  profilePhotos,\n  peerId,\n  isForMonoforum,\n  profileColorOption,\n  theme,\n  isPlain,\n  savedGifts,\n  onExpand,\n}: OwnProps & StateProps) => {\n  const {\n    openMediaViewer,\n    openPremiumModal,\n    openStickerSet,\n    openPrivacySettingsNoticeModal,\n    loadMoreProfilePhotos,\n    openUniqueGiftBySlug,\n    openProfileRatingModal,\n    loadPeerSavedGifts,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useIntervalForceUpdate(user ? STATUS_UPDATE_INTERVAL : undefined);\n\n  const { createVtnStyle } = useVtn();\n\n  const photos = profilePhotos?.photos || MEMO_EMPTY_ARRAY;\n  const prevMediaIndex = usePreviousDeprecated(mediaIndex);\n  const prevAvatarOwnerId = usePreviousDeprecated(avatarOwnerId);\n  const [hasSlideAnimation, setHasSlideAnimation] = useState(true);\n\n  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);\n  const isFirst = photos.length <= 1 || currentPhotoIndex === 0;\n  const isLast = photos.length <= 1 || currentPhotoIndex === photos.length - 1;\n\n  const collectibleEmojiStatus = emojiStatus?.type === 'collectible' ? emojiStatus : undefined;\n\n  const peer = user || chat;\n  const { customEmoji: backgroundEmoji } = useCustomEmoji(\n    collectibleEmojiStatus?.patternDocumentId || peer?.profileColor?.backgroundEmojiId,\n  );\n\n  const profileColorSet = useMemo(() => {\n    if (collectibleEmojiStatus) {\n      return {\n        bgColors: [collectibleEmojiStatus.centerColor, collectibleEmojiStatus.edgeColor],\n        storyColors: [collectibleEmojiStatus.textColor, collectibleEmojiStatus.textColor],\n      };\n    }\n\n    const colors = profileColorOption\n      && (theme === 'dark' ? profileColorOption.darkColors : profileColorOption.colors);\n    if (!colors) return undefined;\n\n    // Why are they reversed on the server?\n    return {\n      bgColors: [...colors.bgColors].reverse(),\n      storyColors: [...colors.storyColors].reverse(),\n    };\n  }, [profileColorOption, theme, collectibleEmojiStatus]);\n\n  const pinnedGifts = useMemo(() => {\n    return savedGifts?.gifts.filter((gift) => {\n      if (gift.gift.type === 'starGiftUnique') {\n        return gift.isPinned && gift.gift.slug !== collectibleEmojiStatus?.slug;\n      }\n\n      return gift.isPinned;\n    });\n  }, [savedGifts, collectibleEmojiStatus?.slug]);\n\n  useEffect(() => {\n    if (photos.length - currentPhotoIndex <= LOAD_MORE_THRESHOLD) {\n      loadMoreProfilePhotos({ peerId });\n    }\n  }, [currentPhotoIndex, peerId, photos.length]);\n\n  useEffect(() => {\n    loadPeerSavedGifts({ peerId });\n  }, [peerId]);\n\n  // Set the current avatar photo to the last selected photo in Media Viewer after it is closed\n  useEffect(() => {\n    if (prevAvatarOwnerId && prevMediaIndex !== undefined && mediaIndex === undefined) {\n      setHasSlideAnimation(false);\n      setCurrentPhotoIndex(prevMediaIndex);\n    }\n  }, [mediaIndex, prevMediaIndex, prevAvatarOwnerId]);\n\n  // Deleting the last profile photo may result in an error\n  useEffect(() => {\n    if (currentPhotoIndex > photos.length) {\n      setHasSlideAnimation(false);\n      setCurrentPhotoIndex(Math.max(0, photos.length - 1));\n    }\n  }, [currentPhotoIndex, photos.length]);\n\n  // Reset photo index when collapsing\n  useEffect(() => {\n    if (!isExpanded) {\n      setCurrentPhotoIndex(0);\n    }\n  }, [isExpanded]);\n\n  usePhotosPreload(photos, currentPhotoIndex);\n\n  const handleProfilePhotoClick = useLastCallback(() => {\n    openMediaViewer({\n      isAvatarView: true,\n      chatId: peerId,\n      mediaIndex: currentPhotoIndex,\n      origin: isForSettings ? MediaViewerOrigin.SettingsAvatar : MediaViewerOrigin.ProfileAvatar,\n    });\n  });\n\n  const handleStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    if (!peerId) {\n      openStickerSet({\n        stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n      });\n      return;\n    }\n\n    openPremiumModal({ fromUserId: peerId });\n  });\n\n  const selectPreviousMedia = useLastCallback(() => {\n    if (isFirst) {\n      return;\n    }\n    setHasSlideAnimation(true);\n    setCurrentPhotoIndex(currentPhotoIndex - 1);\n  });\n\n  const selectNextMedia = useLastCallback(() => {\n    if (isLast) {\n      return;\n    }\n    setHasSlideAnimation(true);\n    setCurrentPhotoIndex(currentPhotoIndex + 1);\n  });\n\n  const handleOpenGetReadDateModal = useLastCallback(() => {\n    openPrivacySettingsNoticeModal({ chatId: chat!.id, isReadDate: false });\n  });\n\n  const handleRatingClick = useLastCallback((level: number) => {\n    if (user) {\n      openProfileRatingModal({ userId: user.id, level });\n    }\n  });\n\n  const handleMinimizedAvatarClick = useLastCallback(() => {\n    if (isForSettings) {\n      handleProfilePhotoClick();\n      return;\n    }\n\n    onExpand?.();\n  });\n\n  function handleSelectFallbackPhoto() {\n    if (!isFirst) return;\n    setHasSlideAnimation(true);\n    setCurrentPhotoIndex(photos.length - 1);\n  }\n\n  // Swipe gestures\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>(`.${styles.photoWrapper}`);\n    if (!element) {\n      return undefined;\n    }\n\n    return captureEvents(element, {\n      selectorToPreventScroll: '.Profile, .settings-content',\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n          return true;\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n          return true;\n        }\n\n        return false;\n      } : undefined,\n    });\n  }, [selectNextMedia, selectPreviousMedia]);\n\n  if (!user && !chat) {\n    return undefined;\n  }\n\n  function renderTopic() {\n    return (\n      <div className={styles.topicContainer}>\n        <TopicIcon\n          topic={topic!}\n          size={EMOJI_TOPIC_SIZE}\n          className={styles.topicIcon}\n          letterClassName={styles.topicIconTitle}\n          noLoopLimit\n        />\n        <h3 className={styles.topicTitle} dir={lang.isRtl ? 'rtl' : undefined}>{renderText(topic!.title)}</h3>\n        <p className={styles.topicMessagesCounter}>\n          {messagesCount ? oldLang('Chat.Title.Topic', messagesCount, 'i') : oldLang('lng_forum_no_messages')}\n        </p>\n      </div>\n    );\n  }\n\n  function renderPhotoTabs() {\n    const totalPhotosLength = Math.max(photos.length, profilePhotos?.count || 0);\n    if (!photos || totalPhotosLength <= 1) {\n      return undefined;\n    }\n\n    const enumerator = Array.from({ length: Math.min(totalPhotosLength, MAX_PHOTO_DASH_COUNT) });\n    const activeDashIndex = currentPhotoIndex >= MAX_PHOTO_DASH_COUNT ? MAX_PHOTO_DASH_COUNT - 1 : currentPhotoIndex;\n\n    return (\n      <div className={styles.photoDashes}>\n        {enumerator.map((_, i) => (\n          <span className={buildClassName(styles.photoDash, i === activeDashIndex && styles.photoDash_current)} />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPhoto(isActive?: boolean) {\n    const photo = photos.length > 0\n      ? photos[currentPhotoIndex]\n      : undefined;\n\n    return (\n      <ProfilePhoto\n        key={currentPhotoIndex}\n        user={user}\n        chat={chat}\n        photo={photo}\n        canPlayVideo={Boolean(isActive && canPlayVideo)}\n        className={buildClassName(isActive && styles.activeProfilePhoto)}\n        style={isActive ? createVtnStyle('avatar', true) : undefined}\n        onClick={handleProfilePhotoClick}\n      />\n    );\n  }\n\n  function renderUserRating() {\n    if (!userFullInfo?.starsRating) return undefined;\n\n    const level = userFullInfo.starsRating.level;\n    const isNegative = level < 0;\n\n    const onRatingClick = () => handleRatingClick(level);\n\n    if (isNegative) {\n      return (\n        <span role=\"button\" tabIndex={0} className={styles.userRatingNegativeWrapper} onClick={onRatingClick}>\n          <Icon\n            name=\"rating-icons-negative\"\n            className={styles.ratingNegativeIcon}\n          />\n          <span className={styles.ratingLevel}>!</span>\n        </span>\n      );\n    }\n\n    const safeLevel = Math.max(level, 1);\n    const iconLevel = Math.min(safeLevel, MAX_LEVEL_ICON);\n    const iconName = (iconLevel < 10\n      ? `rating-icons-level${iconLevel}`\n      : `rating-icons-level${Math.floor(iconLevel / 10) * 10}`) as IconName;\n\n    return (\n      <span role=\"button\" tabIndex={0} className={styles.userRatingWrapper} onClick={onRatingClick}>\n        <Icon\n          name={iconName}\n          className={styles.ratingIcon}\n        />\n        <span className={styles.ratingLevel}>{level}</span>\n      </span>\n    );\n  }\n\n  function renderStatus() {\n    const isAnonymousForwards = isAnonymousForwardsChat(peerId);\n    const isSystemBotChat = isSystemBot(peerId);\n    if (isAnonymousForwards || isSystemBotChat) return undefined;\n\n    if (isForMonoforum) {\n      return (\n        <span\n          className={buildClassName(styles.status, 'status')}\n          dir=\"auto\"\n          style={createVtnStyle('status', true)}\n        >\n          {lang('MonoforumStatus')}\n        </span>\n      );\n    }\n\n    if (user) {\n      return (\n        <div\n          className={buildClassName(\n            styles.status,\n            'status',\n            isUserOnline(user, userStatus) && 'online',\n          )}\n          style={createVtnStyle('status', true)}\n        >\n          {renderUserRating()}\n          <span className={styles.userStatus} dir=\"auto\">\n            {getUserStatus(oldLang, user, userStatus)}\n          </span>\n          {userStatus?.isReadDateRestrictedByMe && (\n            <span className={styles.getStatus} onClick={handleOpenGetReadDateModal}>\n              <span>{oldLang('StatusHiddenShow')}</span>\n            </span>\n          )}\n        </div>\n      );\n    }\n\n    return (\n      <span\n        className={buildClassName(styles.status, 'status')}\n        dir=\"auto\"\n        style={createVtnStyle('status', true)}\n      >\n        {\n          isChatChannel(chat!)\n            ? oldLang('Subscribers', chat!.membersCount ?? 0, 'i')\n            : oldLang('Members', chat!.membersCount ?? 0, 'i')\n        }\n      </span>\n    );\n  }\n\n  if (topic) {\n    return renderTopic();\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        'ProfileInfo',\n        styles.root,\n        !isExpanded && styles.minimized,\n        isPlain && styles.plain,\n      )}\n      style={buildStyle(\n        profileColorSet && `--rating-outline-color: ${isExpanded ? 'transparent' : profileColorSet?.bgColors[1]}`,\n        profileColorSet && !isExpanded && `--rating-text-color: ${profileColorSet?.bgColors[1]}`,\n        createVtnStyle('profileInfo', true),\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {profileColorSet?.bgColors && (\n        <RadialPatternBackground\n          backgroundColors={profileColorSet.bgColors}\n          patternIcon={backgroundEmoji}\n          patternColor={collectibleEmojiStatus?.patternColor}\n          patternSize={16}\n          withLinearGradient={!collectibleEmojiStatus}\n          className={styles.radialPatternBackground}\n          yPosition={PATTERN_Y_SHIFT}\n        />\n      )}\n      {pinnedGifts && (\n        <ProfilePinnedGifts\n          peerId={peerId}\n          gifts={pinnedGifts}\n          isExpanded={isExpanded}\n          className={styles.pinnedGifts}\n          withGlow={!isPlain}\n        />\n      )}\n      {isExpanded && (\n        <div className={styles.photoWrapper} style={createVtnStyle('photoWrapper', true)}>\n          {renderPhotoTabs()}\n          {!isForSettings && profilePhotos?.personalPhoto && (\n            <div className={buildClassName(\n              styles.fallbackPhoto,\n              isFirst && styles.fallbackPhotoVisible,\n            )}\n            >\n              <div className={styles.fallbackPhotoContents}>\n                {oldLang(profilePhotos.personalPhoto.isVideo ? 'UserInfo.CustomVideo' : 'UserInfo.CustomPhoto')}\n              </div>\n            </div>\n          )}\n          {isForSettings && profilePhotos?.fallbackPhoto && (\n            <div className={buildClassName(\n              styles.fallbackPhoto,\n              (isFirst || isLast) && styles.fallbackPhotoVisible,\n            )}\n            >\n              <div className={styles.fallbackPhotoContents} onClick={handleSelectFallbackPhoto}>\n                {!isLast && (\n                  <Avatar\n                    photo={profilePhotos.fallbackPhoto}\n                    className={styles.fallbackPhotoAvatar}\n                    size=\"mini\"\n                  />\n                )}\n                {oldLang(profilePhotos.fallbackPhoto.isVideo ? 'UserInfo.PublicVideo' : 'UserInfo.PublicPhoto')}\n              </div>\n            </div>\n          )}\n          <Transition\n            activeKey={currentPhotoIndex}\n            name={resolveTransitionName('slide', animationLevel, !hasSlideAnimation, lang.isRtl)}\n          >\n            {renderPhoto}\n          </Transition>\n\n          {!isFirst && (\n            <button\n              type=\"button\"\n              dir={lang.isRtl ? 'rtl' : undefined}\n              className={buildClassName(styles.navigation, styles.navigation_prev)}\n              aria-label={oldLang('AccDescrPrevious')}\n              onClick={selectPreviousMedia}\n            />\n          )}\n          {!isLast && (\n            <button\n              type=\"button\"\n              dir={lang.isRtl ? 'rtl' : undefined}\n              className={buildClassName(styles.navigation, styles.navigation_next)}\n              aria-label={oldLang('Next')}\n              onClick={selectNextMedia}\n            />\n          )}\n        </div>\n      )}\n      {!isExpanded && (\n        <Avatar\n          className={styles.standaloneAvatar}\n          key={peer?.id}\n          size=\"jumbo\"\n          peer={peer}\n          style={createVtnStyle('avatar', true)}\n          onClick={handleMinimizedAvatarClick}\n        />\n      )}\n\n      <div\n        className={styles.info}\n        dir={lang.isRtl ? 'rtl' : 'auto'}\n        style={createVtnStyle('info', true)}\n      >\n        {(user || chat) && (\n          <FullNameTitle\n            className={styles.title}\n            style={createVtnStyle('title', true)}\n            peer={(user || chat)!}\n            withEmojiStatus\n            withStatusTextColor\n            emojiStatusSize={EMOJI_STATUS_SIZE}\n            onEmojiStatusClick={handleStatusClick}\n            noLoopLimit\n            canCopyTitle\n          />\n        )}\n        {renderStatus()}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const peer = selectPeer(global, peerId);\n    const user = selectUser(global, peerId);\n    const userFullInfo = user ? selectUserFullInfo(global, peerId) : undefined;\n    const userStatus = selectUserStatus(global, peerId);\n    const chat = selectChat(global, peerId);\n    const profilePhotos = selectPeerPhotos(global, peerId);\n    const { mediaIndex, chatId: avatarOwnerId } = selectTabState(global).mediaViewer;\n    const isForum = chat?.isForum;\n    const { threadId: currentTopicId } = selectCurrentMessageList(global) || {};\n    const topic = isForum && currentTopicId ? selectTopic(global, peerId, currentTopicId) : undefined;\n    const { animationLevel } = selectSharedSettings(global);\n\n    const emojiStatus = peer?.emojiStatus;\n    const emojiStatusSticker = emojiStatus ? selectCustomEmoji(global, emojiStatus.documentId) : undefined;\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const profileColor = peer && selectPeerProfileColor(global, peer);\n    const theme = selectTheme(global);\n\n    const hasBackground = selectPeerHasProfileBackground(global, peerId);\n    const savedGifts = selectPeerSavedGifts(global, peerId);\n\n    return {\n      user,\n      userFullInfo,\n      userStatus,\n      chat,\n      mediaIndex,\n      avatarOwnerId,\n      animationLevel,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      emojiStatus,\n      profilePhotos,\n      topic,\n      messagesCount: topic ? selectThreadMessagesCount(global, peerId, currentTopicId!) : undefined,\n      profileColorOption: profileColor,\n      theme,\n      isPlain: !hasBackground,\n      savedGifts,\n    };\n  },\n)(ProfileInfo));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport type { ApiPhoto } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getProfilePhotoMediaHash } from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nconst PHOTOS_TO_PRELOAD = 4;\n\nexport default function usePhotosPreload(\n  photos: ApiPhoto[],\n  currentIndex: number,\n) {\n  useEffect(() => {\n    photos.slice(currentIndex, currentIndex + PHOTOS_TO_PRELOAD).forEach((photo) => {\n      const mediaHash = getProfilePhotoMediaHash(photo);\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n      if (!mediaData) {\n        mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl);\n      }\n    });\n  }, [currentIndex, photos]);\n}\n","import type {\n  ElementRef } from '../lib/teact/teact';\nimport {\n  useEffect, useMemo, useRef, useState,\n} from '../lib/teact/teact';\nimport { getActions, getGlobal } from '../global';\n\nimport type { Track, TrackId } from '../util/audioPlayer';\nimport type { MediaSessionHandlers } from '../util/mediaSession';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../config';\nimport { selectTabState } from '../global/selectors';\nimport { register } from '../util/audioPlayer';\nimport {\n  registerMediaSession, setPlaybackState, setPositionState, updateMetadata,\n} from '../util/mediaSession';\nimport { isSafariPatchInProgress } from '../util/patchSafariProgressiveAudio';\nimport useEffectWithPrevDeps from './useEffectWithPrevDeps';\nimport useLastCallback from './useLastCallback';\nimport useSyncEffect from './useSyncEffect';\n\ntype Handler = (e: Event) => void;\n\nconst DEFAULT_SKIP_TIME = 10;\n\nconst useAudioPlayer = (\n  trackId: TrackId | undefined,\n  originalDuration: number, // Sometimes incorrect for voice messages\n  trackType: Track['type'],\n  src?: string,\n  handlers?: Record<string, Handler>,\n  metadata?: MediaMetadata,\n  onInit?: (element: HTMLAudioElement) => void,\n  shouldPlay = false,\n  onForcePlay?: NoneToVoidFunction,\n  onTrackChange?: NoneToVoidFunction,\n  noPlaylist = false,\n  noProgressUpdates = false,\n  onPause?: NoneToVoidFunction,\n  noReset = false,\n  noHandleEvents = false,\n) => {\n  const controllerRef = useRef<ReturnType<typeof register>>();\n\n  const [isPlaying, setIsPlaying] = useState(false);\n  let isPlayingSync = isPlaying;\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n\n  const handleTrackChange = useLastCallback(() => {\n    setIsPlaying(false);\n    if (onTrackChange) onTrackChange();\n  });\n\n  useSyncEffect(() => {\n    if (!trackId) {\n      return;\n    }\n    controllerRef.current = register(trackId, trackType, (eventName, e) => {\n      if (noHandleEvents) {\n        return;\n      }\n      switch (eventName) {\n        case 'onPlay': {\n          const {\n            setVolume, setPlaybackRate, toggleMuted, proxy,\n          } = controllerRef.current!;\n          setIsPlaying(true);\n          if (trackType !== 'oneTimeVoice') {\n            registerMediaSession(metadata, makeMediaHandlers(controllerRef));\n          }\n          setPlaybackState('playing');\n          const { audioPlayer } = selectTabState(getGlobal());\n          setVolume(audioPlayer.volume);\n          toggleMuted(Boolean(audioPlayer.isMuted));\n          const duration = proxy.duration && Number.isFinite(proxy.duration) ? proxy.duration : originalDuration;\n          if (trackType === 'voice' || duration > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION) {\n            setPlaybackRate(audioPlayer.playbackRate);\n          }\n          setPositionState({\n            duration: proxy.duration || 0,\n            playbackRate: proxy.playbackRate,\n            position: proxy.currentTime,\n          });\n          break;\n        }\n        case 'onRateChange': {\n          const { proxy } = controllerRef.current!;\n          setPositionState({\n            duration: proxy.duration || 0,\n            playbackRate: proxy.playbackRate,\n            position: proxy.currentTime,\n          });\n          break;\n        }\n        case 'onPause':\n          setIsPlaying(false);\n          setPlaybackState('paused');\n          onPause?.();\n          break;\n        case 'onTimeUpdate': {\n          const { proxy } = controllerRef.current!;\n          if (noReset && proxy.currentTime === 0) {\n            break;\n          }\n          const duration = proxy.duration && Number.isFinite(proxy.duration) ? proxy.duration : originalDuration;\n          if (!noProgressUpdates) setPlayProgress(proxy.currentTime / duration);\n          break;\n        }\n        case 'onEnded': {\n          setPlaybackState('paused');\n          break;\n        }\n      }\n      handlers?.[eventName]?.(e);\n    }, onForcePlay, handleTrackChange);\n\n    const { proxy } = controllerRef.current;\n\n    if (!isPlaying && !proxy.paused) {\n      setIsPlaying(true);\n      // `isPlayingSync` is only needed to help `setIsPlaying` because it is asynchronous\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      isPlayingSync = true;\n    }\n\n    if (onInit && !noHandleEvents) {\n      onInit(proxy);\n    }\n  }, [trackId]);\n\n  useEffect(() => {\n    if (isPlaying && metadata) updateMetadata(metadata);\n  }, [metadata, isPlaying]);\n\n  const {\n    play,\n    pause,\n    setCurrentTime,\n    proxy,\n    destroy,\n    setVolume,\n    stop,\n    isFirst,\n    isLast,\n    requestNextTrack,\n    requestPreviousTrack,\n    setPlaybackRate,\n    toggleMuted,\n  } = controllerRef.current ?? {};\n\n  const duration = useMemo(() => {\n    return proxy?.duration && Number.isFinite(proxy.duration) ? proxy.duration : originalDuration;\n  }, [proxy?.duration, originalDuration]);\n\n  // RAF progress\n  useEffect(() => {\n    if (!proxy) {\n      return;\n    }\n    if (noReset && proxy.currentTime === 0) {\n      return;\n    }\n    if (duration && !isSafariPatchInProgress(proxy) && !noProgressUpdates) {\n      setPlayProgress(proxy.currentTime / duration);\n    }\n  }, [duration, playProgress, proxy, noProgressUpdates, noReset]);\n\n  // Cleanup\n  useEffect(() => () => {\n    destroy?.(noPlaylist);\n  }, [destroy, noPlaylist]);\n\n  // Autoplay once `src` is present\n  useEffectWithPrevDeps(([prevShouldPlay, prevSrc]) => {\n    if (prevShouldPlay === shouldPlay && src === prevSrc) {\n      return;\n    }\n\n    // When paused by another player\n    if (proxy?.src && proxy?.paused) {\n      return;\n    }\n\n    if (shouldPlay && src && !isPlaying) {\n      play?.(src);\n    }\n  }, [shouldPlay, src, isPlaying, play, proxy?.src, proxy?.paused, trackType]);\n\n  const playIfPresent = useLastCallback(() => {\n    if (src) {\n      play?.(src);\n    }\n  });\n\n  const playPause = useLastCallback(() => {\n    if (isPlaying) {\n      pause?.();\n    } else {\n      playIfPresent();\n    }\n  });\n\n  const setTime = useLastCallback((time: number) => {\n    setCurrentTime?.(time);\n    if (duration && proxy) {\n      setPlayProgress(proxy.currentTime / duration);\n    }\n  });\n\n  return {\n    isPlaying: isPlayingSync,\n    playProgress,\n    playPause,\n    pause,\n    play: playIfPresent,\n    stop,\n    setCurrentTime: setTime,\n    setVolume,\n    audioProxy: proxy,\n    duration,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setPlaybackRate,\n    toggleMuted,\n  };\n};\n\nfunction makeMediaHandlers(controllerRef: ElementRef<ReturnType<typeof register>>) {\n  let mediaHandlers: MediaSessionHandlers = {};\n  if (controllerRef && controllerRef.current) {\n    const {\n      play, pause, setCurrentTime, proxy, requestNextTrack, requestPreviousTrack, isFirst, isLast,\n    } = controllerRef.current;\n    mediaHandlers = {\n      play: () => {\n        play(proxy.src);\n      },\n      pause: () => {\n        pause();\n      },\n      stop: () => {\n        pause();\n        setCurrentTime(0);\n        getActions().closeAudioPlayer();\n      },\n      seekbackward: (event) => {\n        const skipTime = event.seekOffset || DEFAULT_SKIP_TIME;\n        setCurrentTime(Math.max(proxy.currentTime - skipTime, 0));\n      },\n      seekforward: (event) => {\n        const skipTime = event.seekOffset || DEFAULT_SKIP_TIME;\n        setCurrentTime(Math.min(proxy.currentTime + skipTime, proxy.duration));\n      },\n      seekTo: (event) => {\n        if (event.seekTime) {\n          setCurrentTime(event.seekTime);\n        }\n      },\n    };\n\n    if (!isLast()) {\n      mediaHandlers.nexttrack = () => {\n        requestNextTrack();\n      };\n    }\n    if (!isFirst()) {\n      mediaHandlers.previoustrack = () => {\n        requestPreviousTrack();\n      };\n    }\n  }\n  return mediaHandlers;\n}\n\nexport default useAudioPlayer;\n","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { IAnchorPosition } from '../../../types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  sponsorInfo?: string;\n  canReport?: boolean;\n  triggerRef: ElementRef<HTMLElement>;\n  shouldSkipAbout?: boolean;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  onAboutAdsClick: NoneToVoidFunction;\n  onSponsoredHide: NoneToVoidFunction;\n  onSponsorInfo?: NoneToVoidFunction;\n  onSponsoredReport?: NoneToVoidFunction;\n};\n\nconst SponsoredContextMenu: FC<OwnProps> = ({\n  isOpen,\n  sponsorInfo,\n  canReport,\n  anchor,\n  triggerRef,\n  shouldSkipAbout,\n  onClose,\n  onCloseAnimationEnd,\n  onAboutAdsClick,\n  onSponsoredHide,\n  onSponsorInfo,\n  onSponsoredReport,\n}) => {\n  const menuRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n\n  const getTriggerElement = useLastCallback(() => triggerRef.current);\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n\n  const isSeparatorNeeded = sponsorInfo || !shouldSkipAbout || canReport;\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      anchor={anchor}\n      withPortal\n      className=\"with-menu-transitions\"\n      getLayout={getLayout}\n      getTriggerElement={getTriggerElement}\n      getMenuElement={getMenuElement}\n      getRootElement={getRootElement}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {sponsorInfo && onSponsorInfo && (\n        <MenuItem icon=\"channel\" onClick={onSponsorInfo}>{lang('SponsoredMessageSponsor')}</MenuItem>\n      )}\n      {!shouldSkipAbout && (\n        <MenuItem icon=\"info\" onClick={onAboutAdsClick}>\n          {lang(canReport ? 'AboutRevenueSharingAds' : 'SponsoredMessageInfo')}\n        </MenuItem>\n      )}\n      {canReport && onSponsoredReport && (\n        <MenuItem icon=\"hand-stop\" onClick={onSponsoredReport}>\n          {lang('ReportAd')}\n        </MenuItem>\n      )}\n      {isSeparatorNeeded && <MenuSeparator />}\n      <MenuItem icon=\"close-circle\" onClick={onSponsoredHide}>\n        {lang('HideAd')}\n      </MenuItem>\n    </Menu>\n  );\n};\n\nexport default memo(SponsoredContextMenu);\n","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition } from '../../../types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport SponsoredContextMenu from './SponsoredContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  randomId: string;\n  sponsorInfo?: string;\n  additionalInfo?: string;\n  canReport?: boolean;\n  anchor: IAnchorPosition;\n  triggerRef: ElementRef<HTMLElement>;\n  shouldSkipAbout?: boolean;\n  onItemClick?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd: NoneToVoidFunction;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps> = ({\n  isOpen,\n  randomId,\n  sponsorInfo,\n  additionalInfo,\n  canReport,\n  anchor,\n  triggerRef,\n  shouldSkipAbout,\n  onItemClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    openAboutAdsModal,\n    showDialog,\n    reportSponsored,\n    hideSponsored,\n  } = getActions();\n\n  const { ref } = useShowTransition({\n    isOpen,\n    onCloseAnimationEnd,\n  });\n\n  const handleItemClick = useLastCallback(() => {\n    onItemClick?.();\n    onClose();\n  });\n\n  const handleAboutAdsOpen = useLastCallback(() => {\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n    handleItemClick();\n  });\n\n  const handleSponsoredHide = useLastCallback(() => {\n    hideSponsored();\n    handleItemClick();\n  });\n\n  const handleSponsorInfo = useLastCallback(() => {\n    showDialog({\n      data: {\n        message: [sponsorInfo, additionalInfo].filter(Boolean).join('\\n'),\n      },\n    });\n    handleItemClick();\n  });\n\n  const handleReportSponsoredMessage = useLastCallback(() => {\n    reportSponsored({ randomId });\n    handleItemClick();\n  });\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div ref={ref} className=\"ContextMenuContainer\">\n      <SponsoredContextMenu\n        isOpen={isOpen}\n        anchor={anchor}\n        triggerRef={triggerRef}\n        canReport={canReport}\n        sponsorInfo={sponsorInfo}\n        shouldSkipAbout={shouldSkipAbout}\n        onClose={onClose}\n        onCloseAnimationEnd={onClose}\n        onAboutAdsClick={handleAboutAdsOpen}\n        onSponsoredHide={handleSponsoredHide}\n        onSponsorInfo={handleSponsorInfo}\n        onSponsoredReport={handleReportSponsoredMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(SponsoredMessageContextMenuContainer);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ky16H_sV\",\"button-text\":\"W01t9CIf\",\"buttonText\":\"W01t9CIf\",\"sticker\":\"c8lE3XW5\",\"title\":\"wlwD1B1Q\",\"description\":\"V8OCFHmp\",\"is-ios\":\"IxW_z_r0\",\"isIos\":\"IxW_z_r0\",\"is-macos\":\"OFxKGCEJ\",\"isMacos\":\"OFxKGCEJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectAnimatedEmoji, selectChat } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport Button from '../../ui/Button';\n\nimport styles from './EmptyForum.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n};\n\ntype StateProps = {\n  animatedEmoji?: ApiSticker;\n  canManageTopics?: boolean;\n};\n\nconst ICON_SIZE = 7 * REM;\n\nconst EmptyForum: FC<OwnProps & StateProps> = ({\n  chatId, animatedEmoji, canManageTopics,\n}) => {\n  const { openCreateTopicPanel } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const handleCreateTopic = useCallback(() => {\n    openCreateTopicPanel({ chatId });\n  }, [chatId, openCreateTopicPanel]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.sticker}>\n        {animatedEmoji && <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} />}\n      </div>\n      <h3 className={styles.title} dir=\"auto\">{lang('ChatList.EmptyTopicsTitle')}</h3>\n      <p className={buildClassName(styles.description, styles.centered)} dir=\"auto\">\n        {lang('ChatList.EmptyTopicsDescription')}\n      </p>\n      {canManageTopics && (\n        <Button\n          ripple={!isMobile}\n          fluid\n          onClick={handleCreateTopic}\n          isRtl={lang.isRtl}\n        >\n          <div className={styles.buttonText}>\n            {lang('ChatList.EmptyTopicsCreate')}\n          </div>\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { chatId }): Complete<StateProps> => {\n  const chat = selectChat(global, chatId);\n  const canManageTopics = chat && (chat.isCreator || getHasAdminRight(chat, 'manageTopics'));\n\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🐣'),\n    canManageTopics,\n  };\n})(EmptyForum));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Fn34Vu_9\",\"closed-icon\":\"MB7Gomjn\",\"closedIcon\":\"MB7Gomjn\",\"topic-icon\":\"oXJl4tra\",\"topicIcon\":\"oXJl4tra\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiDraft, ApiMessage, ApiMessageOutgoingStatus,\n  ApiPeer, ApiTopic, ApiTypeStory, ApiTypingStatus,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ChatAnimationTypes } from './hooks';\n\nimport { UNMUTE_TIMESTAMP } from '../../../config';\nimport { groupStatefulContent } from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectCanAnimateInterface,\n  selectCanDeleteTopic,\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectDraft,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectOutgoingStatus,\n  selectPeerStory,\n  selectSender,\n  selectThreadInfo,\n  selectThreadParam,\n  selectTopics,\n} from '../../../global/selectors';\nimport { IS_OPEN_IN_NEW_TAB_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { createLocationHash } from '../../../util/routing';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useChatListEntry from './hooks/useChatListEntry';\nimport useTopicContextActions from './hooks/useTopicContextActions';\n\nimport Icon from '../../common/icons/Icon';\nimport LastMessageMeta from '../../common/LastMessageMeta';\nimport TopicIcon from '../../common/TopicIcon';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport MuteChatModal from '../MuteChatModal.async';\nimport ChatBadge from './ChatBadge';\n\nimport styles from './Topic.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topic: ApiTopic;\n  isSelected: boolean;\n  style: string;\n  observeIntersection?: ObserveFn;\n  orderDiff: number;\n  animationType: ChatAnimationTypes;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChatMuted?: boolean;\n  canDelete?: boolean;\n  lastMessage?: ApiMessage;\n  lastMessageStory?: ApiTypeStory;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  draft?: ApiDraft;\n  canScrollDown?: boolean;\n  wasTopicOpened?: boolean;\n  withInterfaceAnimations?: boolean;\n  topics?: Record<number, ApiTopic>;\n};\n\nconst Topic: FC<OwnProps & StateProps> = ({\n  topic,\n  isSelected,\n  chatId,\n  chat,\n  isChatMuted,\n  style,\n  lastMessage,\n  lastMessageStory,\n  canScrollDown,\n  lastMessageOutgoingStatus,\n  observeIntersection,\n  canDelete,\n  lastMessageSender,\n  animationType,\n  withInterfaceAnimations,\n  orderDiff,\n  typingStatus,\n  draft,\n  wasTopicOpened,\n  topics,\n}) => {\n  const {\n    openThread,\n    deleteTopic,\n    focusLastMessage,\n    setViewForumAsMessages,\n    updateTopicMutedState,\n    openQuickPreview,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [shouldRenderDeleteModal, markRenderDeleteModal, unmarkRenderDeleteModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const {\n    isPinned, isClosed, notifySettings,\n  } = topic;\n  const isMuted = Boolean(notifySettings.mutedUntil || (notifySettings.mutedUntil === undefined && isChatMuted));\n\n  const handleOpenDeleteModal = useLastCallback(() => {\n    markRenderDeleteModal();\n    openDeleteModal();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    deleteTopic({ chatId: chat.id, topicId: topic.id });\n  });\n\n  const handleMute = useLastCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  });\n\n  const handleUnmute = useLastCallback(() => {\n    updateTopicMutedState({ chatId, topicId: topic.id, mutedUntil: UNMUTE_TIMESTAMP });\n  });\n\n  const { renderSubtitle, ref } = useChatListEntry({\n    chat,\n    chatId,\n    lastMessage,\n    draft,\n    lastMessageSender,\n    lastMessageTopic: topic,\n    observeIntersection,\n    isTopic: true,\n    typingStatus,\n    topics,\n    statefulMediaContent: groupStatefulContent({ story: lastMessageStory }),\n\n    animationType,\n    withInterfaceAnimations,\n    orderDiff,\n  });\n\n  const handleOpenTopic = useLastCallback((e: React.MouseEvent) => {\n    if (e.altKey) {\n      e.preventDefault();\n      openQuickPreview({ id: chatId, threadId: topic.id });\n      return;\n    }\n\n    openThread({ chatId, threadId: topic.id, shouldReplaceHistory: true });\n    setViewForumAsMessages({ chatId, isEnabled: false });\n\n    if (canScrollDown) {\n      focusLastMessage();\n    }\n  });\n\n  const contextActions = useTopicContextActions({\n    topic,\n    chat,\n    isChatMuted,\n    wasOpened: wasTopicOpened,\n    canDelete,\n    handleDelete: handleOpenDeleteModal,\n    handleMute,\n    handleUnmute,\n  });\n\n  return (\n    <ListItem\n      className={buildClassName(\n        styles.root,\n        'Chat',\n        isSelected && 'selected',\n        'chat-item-clickable',\n      )}\n      onClick={handleOpenTopic}\n      style={style}\n      href={IS_OPEN_IN_NEW_TAB_SUPPORTED ? `#${createLocationHash(chatId, 'thread', topic.id)}` : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      ref={ref}\n    >\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className={buildClassName('title')}>\n            <TopicIcon topic={topic} className={styles.topicIcon} observeIntersection={observeIntersection} />\n            <h3 dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</h3>\n          </div>\n          {Boolean(notifySettings.mutedUntil) && <Icon name=\"muted\" />}\n          <div className=\"separator\" />\n          {isClosed && (\n            <Icon name=\"lock-badge\" className={styles.closedIcon} />\n          )}\n          {lastMessage && (\n            <LastMessageMeta\n              message={lastMessage}\n              outgoingStatus={lastMessageOutgoingStatus}\n            />\n          )}\n        </div>\n        <div className=\"subtitle\">\n          {renderSubtitle()}\n          <ChatBadge\n            chat={chat}\n            isPinned={isPinned}\n            isMuted={isMuted}\n            topic={topic}\n            wasTopicOpened={wasTopicOpened}\n            topics={topics}\n          />\n        </div>\n      </div>\n      {shouldRenderDeleteModal && (\n        <ConfirmDialog\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onCloseAnimationEnd={unmarkRenderDeleteModal}\n          confirmIsDestructive\n          confirmHandler={handleDelete}\n          text={lang('lng_forum_topic_delete_sure')}\n          confirmLabel={lang('Delete')}\n        />\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n          topicId={topic.id}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topic, isSelected }) => {\n    const chat = selectChat(global, chatId);\n\n    const lastMessage = selectChatMessage(global, chatId, topic.lastMessageId);\n    const { isOutgoing } = lastMessage || {};\n    const lastMessageSender = lastMessage && selectSender(global, lastMessage);\n    const typingStatus = selectThreadParam(global, chatId, topic.id, 'typingStatus');\n    const draft = selectDraft(global, chatId, topic.id);\n    const threadInfo = selectThreadInfo(global, chatId, topic.id);\n    const wasTopicOpened = Boolean(threadInfo?.lastReadInboxMessageId);\n    const topics = selectTopics(global, chatId);\n\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const storyData = lastMessage?.content.storyData;\n    const lastMessageStory = storyData && selectPeerStory(global, storyData.peerId, storyData.id);\n\n    const isChatMuted = chat && getIsChatMuted(\n      chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id),\n    );\n\n    return {\n      chat,\n      lastMessage,\n      lastMessageSender,\n      typingStatus,\n      isChatMuted,\n      canDelete: selectCanDeleteTopic(global, chatId, topic.id),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      draft,\n      ...(isOutgoing && lastMessage && {\n        lastMessageOutgoingStatus: selectOutgoingStatus(global, lastMessage),\n      }),\n      canScrollDown: isSelected && chat?.id === currentChatId && currentThreadId === topic.id,\n      wasTopicOpened,\n      topics,\n      lastMessageStory,\n    };\n  },\n)(Topic));\n","import { useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChat, ApiTopic } from '../../../../api/types';\nimport type { MenuItemContextAction } from '../../../ui/ListItem';\n\nimport { getCanManageTopic, getHasAdminRight } from '../../../../global/helpers';\nimport { IS_OPEN_IN_NEW_TAB_SUPPORTED } from '../../../../util/browser/windowEnvironment';\nimport { compact } from '../../../../util/iteratees';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nexport default function useTopicContextActions({\n  topic,\n  chat,\n  isChatMuted,\n  wasOpened,\n  canDelete,\n  handleDelete,\n  handleMute,\n  handleUnmute,\n}: {\n  topic: ApiTopic;\n  chat: ApiChat;\n  isChatMuted?: boolean;\n  wasOpened?: boolean;\n  canDelete?: boolean;\n  handleDelete?: NoneToVoidFunction;\n  handleMute?: NoneToVoidFunction;\n  handleUnmute?: NoneToVoidFunction;\n}) {\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  return useMemo(() => {\n    const {\n      isPinned, notifySettings, isClosed, id: topicId,\n    } = topic;\n\n    const chatId = chat.id;\n\n    const {\n      editTopic,\n      toggleTopicPinned,\n      markTopicRead,\n      openChatInNewTab,\n      openQuickPreview,\n    } = getActions();\n\n    const canToggleClosed = getCanManageTopic(chat, topic);\n    const canTogglePinned = chat.isCreator || getHasAdminRight(chat, 'manageTopics');\n\n    const actionOpenInNewTab = IS_OPEN_IN_NEW_TAB_SUPPORTED && {\n      title: 'Open in new tab',\n      icon: 'open-in-new-tab',\n      handler: () => {\n        openChatInNewTab({ chatId: chat.id, threadId: topicId });\n      },\n    };\n\n    const actionQuickPreview = {\n      title: lang('QuickPreview'),\n      icon: 'eye-outline',\n      handler: () => {\n        openQuickPreview({ id: chatId, threadId: topicId });\n      },\n    };\n\n    const actionUnreadMark = topic.unreadCount || !wasOpened\n      ? {\n        title: oldLang('MarkAsRead'),\n        icon: 'readchats',\n        handler: () => {\n          markTopicRead({ chatId, topicId });\n        },\n      }\n      : undefined;\n\n    const actionPin = canTogglePinned ? (isPinned\n      ? {\n        title: oldLang('UnpinFromTop'),\n        icon: 'unpin',\n        handler: () => toggleTopicPinned({ chatId, topicId, isPinned: false }),\n      }\n      : {\n        title: oldLang('PinToTop'),\n        icon: 'pin',\n        handler: () => toggleTopicPinned({ chatId, topicId, isPinned: true }),\n      }) : undefined;\n\n    const actionMute = ((isChatMuted && notifySettings.mutedUntil === undefined) || notifySettings.mutedUntil)\n      ? {\n        title: oldLang('ChatList.Unmute'),\n        icon: 'unmute',\n        handler: handleUnmute,\n      }\n      : {\n        title: `${oldLang('ChatList.Mute')}...`,\n        icon: 'mute',\n        handler: handleMute,\n      };\n\n    const actionCloseTopic = canToggleClosed ? (isClosed\n      ? {\n        title: oldLang('lng_forum_topic_reopen'),\n        icon: 'reopen-topic',\n        handler: () => editTopic({ chatId, topicId, isClosed: false }),\n      }\n      : {\n        title: oldLang('lng_forum_topic_close'),\n        icon: 'close-topic',\n        handler: () => editTopic({ chatId, topicId, isClosed: true }),\n      }) : undefined;\n\n    const actionDelete = canDelete ? {\n      title: oldLang('lng_forum_topic_delete'),\n      icon: 'delete',\n      destructive: true,\n      handler: handleDelete,\n    } : undefined;\n\n    return compact([\n      actionOpenInNewTab,\n      actionQuickPreview,\n      actionPin,\n      actionUnreadMark,\n      actionMute,\n      actionCloseTopic,\n      actionDelete,\n    ]) as MenuItemContextAction[];\n  }, [topic, chat, isChatMuted, wasOpened, lang, oldLang, canDelete, handleDelete, handleMute, handleUnmute]);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { TopicsInfo } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  GENERAL_TOPIC_ID, TOPIC_HEIGHT_PX, TOPIC_LIST_SENSITIVE_AREA, TOPICS_SLICE,\n} from '../../../config';\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getOrderedTopics } from '../../../global/helpers';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsForumPanelOpen,\n  selectTabState,\n  selectTopicsInfo,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { waitForTransitionEnd } from '../../../util/cssAnimationEndListeners';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useOrderDiff from './hooks/useOrderDiff';\n\nimport GroupCallTopPane from '../../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport HeaderActions from '../../middle/HeaderActions';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport EmptyForum from './EmptyForum';\nimport Topic from './Topic';\n\nimport styles from './ForumPanel.module.scss';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  isHidden?: boolean;\n  onTopicSearch?: NoneToVoidFunction;\n  onCloseAnimationEnd?: VoidFunction;\n  onOpenAnimationStart?: VoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topicsInfo?: TopicsInfo;\n  currentTopicId?: number;\n  withInterfaceAnimations?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst ForumPanel: FC<OwnProps & StateProps> = ({\n  chat,\n  currentTopicId,\n  isOpen,\n  isHidden,\n  topicsInfo,\n  onTopicSearch,\n  onCloseAnimationEnd,\n  onOpenAnimationStart,\n  withInterfaceAnimations,\n}) => {\n  const {\n    closeForumPanel, openChatWithInfo, loadTopics,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const scrollTopHandlerRef = useRef<HTMLDivElement>();\n  const { isMobile } = useAppLayout();\n  const chatId = chat?.id;\n\n  useEffect(() => {\n    if (chatId && !topicsInfo) {\n      loadTopics({ chatId });\n    }\n  }, [topicsInfo, chatId]);\n\n  const [isScrolled, setIsScrolled] = useState(false);\n  const lang = useOldLang();\n\n  const handleClose = useLastCallback(() => {\n    closeForumPanel();\n  });\n\n  useEffect(() => {\n    if (!withInterfaceAnimations && !isOpen) {\n      onCloseAnimationEnd?.();\n    }\n  }, [withInterfaceAnimations, isOpen, onCloseAnimationEnd]);\n\n  const handleToggleChatInfo = useLastCallback(() => {\n    if (!chat) return;\n    openChatWithInfo({ id: chat.id, shouldReplaceHistory: true });\n  });\n\n  const { observe } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  useOnIntersect(scrollTopHandlerRef, observe, ({ isIntersecting }) => {\n    setIsScrolled(!isIntersecting);\n  });\n\n  const orderedIds = useMemo(() => {\n    return topicsInfo\n      ? getOrderedTopics(\n        Object.values(topicsInfo.topicsById),\n        topicsInfo.orderedPinnedTopicIds,\n      ).map(({ id }) => id)\n      : [];\n  }, [topicsInfo]);\n\n  const { orderDiffById, getAnimationType } = useOrderDiff(orderedIds, chat?.id);\n\n  const [viewportIds, getMore] = useInfiniteScroll(() => {\n    if (!chat) return;\n    loadTopics({ chatId: chat.id });\n  }, orderedIds, !topicsInfo?.totalCount || orderedIds.length >= topicsInfo.totalCount, TOPICS_SLICE);\n\n  const shouldRenderRef = useRef(false);\n  const isVisible = isOpen && !isHidden;\n  const prevIsVisible = usePreviousDeprecated(isVisible);\n\n  if (prevIsVisible !== isVisible) {\n    shouldRenderRef.current = false;\n  }\n\n  useHistoryBack({\n    isActive: isVisible,\n    onBack: handleClose,\n  });\n\n  useEffect(() => (isVisible ? captureEscKeyListener(handleClose) : undefined), [handleClose, isVisible]);\n\n  useEffect(() => {\n    if (prevIsVisible !== isVisible) {\n      // For performance reasons, we delay animation of the topic list panel to the next animation frame\n      requestNextMutation(() => {\n        if (!ref.current) return;\n\n        const endHeavyAnimation = beginHeavyAnimation();\n        waitForTransitionEnd(ref.current, endHeavyAnimation);\n\n        onOpenAnimationStart?.();\n\n        if (isVisible) {\n          shouldRenderRef.current = true;\n          ref.current.style.transform = 'none';\n        } else {\n          shouldRenderRef.current = false;\n          ref.current.style.transform = '';\n        }\n      });\n    }\n  }, [isVisible, onOpenAnimationStart, prevIsVisible]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(ref.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: (e, direction) => {\n        const closeDirection = lang.isRtl ? SwipeDirection.Left : SwipeDirection.Right;\n\n        if (direction === closeDirection) {\n          closeForumPanel();\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [closeForumPanel, lang.isRtl]);\n\n  function renderTopics() {\n    const viewportOffset = orderedIds.indexOf(viewportIds![0]);\n\n    return viewportIds?.map((id, i) => (\n      <Topic\n        key={id}\n        chatId={chat!.id}\n        topic={topicsInfo!.topicsById[id]}\n        style={`top: ${(viewportOffset + i) * TOPIC_HEIGHT_PX}px;`}\n        isSelected={currentTopicId === id}\n        observeIntersection={observe}\n        animationType={getAnimationType(id)}\n        orderDiff={orderDiffById[id]}\n      />\n    ));\n  }\n\n  const isLoading = topicsInfo === undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        styles.root,\n        isScrolled && styles.scrolled,\n        lang.isRtl && styles.rtl,\n        !withInterfaceAnimations && styles.noAnimation,\n      )}\n      onTransitionEnd={!isOpen ? onCloseAnimationEnd : undefined}\n    >\n      <div id=\"TopicListHeader\" className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleClose}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n\n        {chat && (\n          <GroupChatInfo\n            noAvatar\n            className={styles.info}\n            chatId={chat.id}\n            onClick={handleToggleChatInfo}\n          />\n        )}\n\n        {chat\n          && (\n            <HeaderActions\n              chatId={chat.id}\n              threadId={MAIN_THREAD_ID}\n              messageListType=\"thread\"\n              canExpandActions={false}\n              isForForum\n              isMobile={isMobile}\n              onTopicSearch={onTopicSearch}\n            />\n          )}\n      </div>\n\n      {chat && <GroupCallTopPane chatId={chat.id} />}\n\n      <div className={styles.notch} />\n\n      <InfiniteScroll\n        className=\"chat-list custom-scroll\"\n        ref={containerRef}\n        items={viewportIds}\n        preloadBackwards={TOPICS_SLICE}\n        withAbsolutePositioning\n        maxHeight={(orderedIds?.length || 0) * TOPIC_HEIGHT_PX}\n        onLoadMore={getMore}\n        sensitiveArea={TOPIC_LIST_SENSITIVE_AREA}\n        beforeChildren={<div ref={scrollTopHandlerRef} className={styles.scrollTopHandler} />}\n      >\n        {Boolean(viewportIds?.length) && (\n          renderTopics()\n        )}\n        {isLoading && !viewportIds?.length && (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n      {!isLoading && viewportIds?.length === 1 && viewportIds[0] === GENERAL_TOPIC_ID && (\n        <EmptyForum chatId={chatId!} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const chatId = selectTabState(global).forumPanelChatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const {\n      chatId: currentChatId,\n      threadId: currentThreadId,\n    } = selectCurrentMessageList(global) || {};\n    const topicsInfo = chatId ? selectTopicsInfo(global, chatId) : undefined;\n\n    return {\n      chat,\n      currentTopicId: chatId === currentChatId ? Number(currentThreadId) : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      topicsInfo,\n    };\n  },\n  (global) => selectIsForumPanelOpen(global),\n)(ForumPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"MlF2n1nb\",\"rtl\":\"Xs2y1fCE\",\"no-animation\":\"kmDMv6D8\",\"noAnimation\":\"kmDMv6D8\",\"notch\":\"hGeb3TQJ\",\"scrolled\":\"SZ24u3cn\",\"scroll-top-handler\":\"ERz3fcar\",\"scrollTopHandler\":\"ERz3fcar\",\"info\":\"Sf633zAP\"};","import type { ElementRef } from '../../lib/teact/teact';\nimport { useEffect, useLayoutEffect, useState } from '../../lib/teact/teact';\n\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_IOS } from '../../util/browser/windowEnvironment';\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreen<T extends HTMLElement>(elRef: ElementRef<T>, exitCallback?: CallbackType,\n  enterCallback?: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || IS_IOS) || isFullscreen) {\n      return;\n    }\n    safeRequestFullscreen(elRef.current);\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n    safeExitFullscreen();\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const element = elRef.current;\n    const listener = () => {\n      const isEnabled = Boolean(prop && document[prop]);\n      setIsFullscreen(isEnabled);\n      if (isEnabled) {\n        enterCallback?.(false);\n      } else {\n        exitCallback?.(false);\n      }\n      // In Firefox fullscreen video controls are not visible by default, so we force them manually\n      if (element instanceof HTMLVideoElement) element.controls = isEnabled;\n    };\n\n    const listenerEnter = () => {\n      setIsFullscreen(true);\n      if (enterCallback) enterCallback(true);\n    };\n\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      if (exitCallback) exitCallback(false);\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (element) {\n      element.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      element.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (element) {\n        element.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        element.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && !IS_IOS) {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nexport const useFullscreenStatus = () => {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const listener = () => {\n      setIsFullscreen(checkIfFullscreen());\n    };\n\n    let removeTauriListener: VoidFunction | undefined;\n    const setupTauriListener = async () => {\n      const tauriWindow = await window.tauri?.getCurrentWindow();\n      removeTauriListener = await tauriWindow.onResized(() => {\n        tauriWindow.isFullscreen().then(setIsFullscreen);\n      });\n    };\n\n    if (IS_TAURI) {\n      window.tauri?.getCurrentWindow().then((tauriWindow) => {\n        tauriWindow.isFullscreen().then(setIsFullscreen);\n      });\n      setupTauriListener();\n    }\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    return () => {\n      removeTauriListener?.();\n\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n    };\n  }, []);\n\n  return isFullscreen;\n};\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n  return '';\n}\n\nexport function checkIfFullscreen() {\n  const fullscreenProp = getBrowserFullscreenElementProp();\n  return Boolean(fullscreenProp && document[fullscreenProp]);\n}\n\nexport function safeRequestFullscreen(element: HTMLElement) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element.webkitRequestFullscreen) {\n    element.webkitRequestFullscreen();\n  } else if (element.webkitEnterFullscreen) {\n    element.webkitEnterFullscreen();\n  } else if (element.mozRequestFullScreen) {\n    element.mozRequestFullScreen();\n  }\n}\n\nexport function safeExitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitCancelFullScreen) {\n    document.webkitCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n","import type { ApiPaidMedia } from '../../../../api/types';\n\nexport default function getSingularPaidMedia(media?: ApiPaidMedia) {\n  if (!media || media.extendedMedia.length !== 1) {\n    return {\n      photo: undefined,\n      video: undefined,\n    };\n  }\n\n  const singularMedia = media.extendedMedia[0];\n  const isPreview = 'mediaType' in singularMedia;\n  const photo = isPreview ? (!singularMedia.duration ? singularMedia : undefined) : singularMedia.photo;\n  const video = isPreview ? (singularMedia.duration ? singularMedia : undefined) : singularMedia.video;\n\n  return { photo, video };\n}\n","// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { getMessageContent } from '../../../../global/helpers';\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isSingleMessage: boolean, isMobile: boolean) {\n  const isOutgoing = messages[0].isOutgoing;\n  const allMedia = (isSingleMessage\n    ? messages[0].content.paidMedia!.extendedMedia.map((media) => (\n      'mediaType' in media ? media : (media.photo || media.video)\n    ))\n    : messages.map((message) => (\n      getMessageContent(message).photo || getMessageContent(message).video\n    ))\n  ).filter(Boolean);\n  return allMedia.map(\n    (media) => {\n      const dimensions = calculateMediaDimensions({\n        media,\n        isOwn: isOutgoing,\n        isMobile,\n      }) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, Boolean(album.isPaidMedia), isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, false, noAvatars, isMobile);\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './browser/windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata({\n      chatId: message.chatId,\n      id: message.id,\n      isTranslatable,\n      detectedLanguage,\n    });\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata({\n  chatId, id, isTranslatable, detectedLanguage,\n}: {\n  chatId: string;\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage?: string;\n}) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / translatableCount;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type React from '../../../../lib/teact/teact';\nimport type { ElementRef } from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: ElementRef<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: ElementRef<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady?: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({\n      replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, quoteOffset: undefined,\n    });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady?.()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      },\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\nimport PeerColorWrapper from '../PeerColorWrapper';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  const ref = useRef<HTMLDivElement>();\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getPeerTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <PeerColorWrapper\n      ref={ref}\n      peerColor={sender?.color}\n      noUserColors={noUserColors}\n      shouldReset\n      className={buildClassName(\n        'EmbeddedMessage',\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </PeerColorWrapper>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from './icons/Icon';\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useOldLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <Icon name=\"lock\" />}\n      <Icon name=\"next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Icon from '../../../common/icons/Icon';\n\ntype OwnProps<T> =\n  (PhotoProps<T> | VideoProps<T>) & {\n    clickArg: number;\n    noSelectControls?: boolean;\n  };\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl = <T,>(props: OwnProps<T> & StateProps) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      dimensions,\n      clickArg,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: clickArg, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <Icon name=\"select\" />\n            )}\n          </div>\n        )}\n        {}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps<unknown>>(\n    (global, ownProps) => {\n      const { clickArg, noSelectControls } = ownProps;\n      return {\n        isInSelectMode: !noSelectControls && selectIsInSelectMode(global),\n        isSelected: !noSelectControls && selectIsMessageSelected(global, clickArg),\n      };\n    },\n  )(ComponentWithSelectControl)) as typeof ComponentWithSelectControl;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ThemeKey } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport {\n  getIsDownloading, getMessageContent, getMessageHtmlId, getMessagePhoto,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number, index?: number) => void;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloads,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const { content: { paidMedia } } = album.mainMessage;\n\n  const mediaCount = album.isPaidMedia ? paidMedia!.extendedMedia.length : album.messages.length;\n\n  const handlePaidMediaClick = useLastCallback((index: number) => {\n    onMediaClick(album.mainMessage.id, index);\n  });\n\n  const handleAlbumMessageClick = useLastCallback((messageId: number) => {\n    onMediaClick(messageId);\n  });\n\n  const handleCancelUpload = useLastCallback((messageId: number) => {\n    cancelUploadMedia({ chatId: album.mainMessage.chatId, messageId });\n  });\n\n  const messages = useMemo(() => {\n    if (album.isPaidMedia) {\n      return album.mainMessage.content.paidMedia!.extendedMedia.map(() => album.mainMessage);\n    }\n\n    return album.messages;\n  }, [album]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const renderingPaidMedia = album.isPaidMedia ? message.content.paidMedia?.extendedMedia[index] : undefined;\n    const paidPhotoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.photo;\n    const paidVideoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.video;\n    const photo = paidPhotoOrPreview || getMessagePhoto(message);\n    const video = paidVideoOrPreview || getMessageContent(message).video;\n\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id, album.isPaidMedia ? index : undefined)}`}\n          photo={photo}\n          isOwn={isOwn}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={photo.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, photo)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          video={video}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={video.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, video)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global);\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloads,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../types';\n\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const audioRef = useRef<HTMLAudioElement | undefined>();\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_TAURI && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ActiveEmojiInteraction } from '../../../types';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n  selectCustomEmoji,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = selectCustomEmoji(global, customEmojiId);\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ActiveEmojiInteraction } from '../../../types';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectIsCurrentUserFrozen, selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n  asActionButton?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n  asActionButton,\n}) => {\n  const { openThread, openFrozenAccountModal } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    const global = getGlobal();\n    if (selectIsCurrentUserFrozen(global)) {\n      openFrozenAccountModal();\n      return;\n    }\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={oldLang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (oldLang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount))\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(lang, messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(lang, messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n        asActionButton && 'as-action-button',\n      )}\n      dir={oldLang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <Icon\n        name=\"comments-sticker\"\n        className={buildClassName(\n          'CommentButton_icon-comments',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n      />\n      {!recentRepliers?.length && <Icon name=\"comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : oldLang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        )}\n        <Icon\n          name=\"next\"\n          className={buildClassName(\n            'CommentButton_icon-open',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useOldLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"medium\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              size=\"tiny\"\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                size=\"tiny\"\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): Complete<StateProps> => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default ContextMenuContainerAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HMB5LgeX\",\"title\":\"vZnCPl3t\",\"content\":\"k_dGolcu\",\"separator\":\"qRaSs5iA\",\"footnote\":\"EDmr0wJG\",\"collapsed\":\"hYzpXwTM\",\"cutoutWrapper\":\"nfCzKu78\",\"collapseIcon\":\"mxPizZpR\",\"clickable\":\"Cj2cLczd\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiFactCheck } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useCollapsibleLines from '../../../hooks/element/useCollapsibleLines';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Separator from '../../ui/Separator';\n\nimport styles from './FactCheck.module.scss';\n\ntype OwnProps = {\n  factCheck: ApiFactCheck;\n  isToggleDisabled?: boolean;\n};\n\nconst COLOR = {\n  color: 0,\n};\nconst MAX_LINES = 4;\n\nconst FactCheck = ({ factCheck, isToggleDisabled }: OwnProps) => {\n  const lang = useOldLang();\n\n  const ref = useRef<HTMLDivElement>();\n  const cutoutRef = useRef<HTMLDivElement>();\n  const {\n    isCollapsed, isCollapsible, setIsCollapsed,\n  } = useCollapsibleLines(ref, MAX_LINES, cutoutRef);\n\n  const countryLocalized = useMemo(() => {\n    if (!factCheck.countryCode || !lang.code) return undefined;\n\n    const displayNames = new Intl.DisplayNames([lang.code], { type: 'region' });\n    return displayNames.of(factCheck.countryCode);\n  }, [factCheck.countryCode, lang.code]);\n\n  const canExpand = !isToggleDisabled && isCollapsed;\n\n  const handleExpand = useLastCallback(() => {\n    setIsCollapsed(false);\n  });\n\n  const handleToggle = useLastCallback(() => {\n    setIsCollapsed((prev) => !prev);\n  });\n\n  if (!factCheck.text) {\n    return undefined;\n  }\n\n  return (\n    <PeerColorWrapper peerColor={COLOR} className={styles.root} onClick={canExpand ? handleExpand : undefined}>\n      <div\n        ref={cutoutRef}\n        className={buildClassName(styles.cutoutWrapper, isCollapsed && styles.collapsed)}\n      >\n        <div className={styles.title}>{lang('FactCheck')}</div>\n        <div ref={ref} className={styles.content}>\n          {renderTextWithEntities({\n            text: factCheck.text.text,\n            entities: factCheck.text.entities,\n          })}\n        </div>\n        <Separator className={styles.separator} />\n        <div className={styles.footnote}>{lang('FactCheckFooter', countryLocalized)}</div>\n      </div>\n      {isCollapsible && (\n        <div\n          className={buildClassName(styles.collapseIcon, !isToggleDisabled && styles.clickable)}\n          onClick={!isToggleDisabled ? handleToggle : undefined}\n          aria-hidden\n        >\n          <Icon name={isCollapsed ? 'down' : 'up'} />\n        </div>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(FactCheck);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: ThreadId;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  threadId,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      chatId: message.chatId,\n      messageId: message.id,\n      threadId,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isOwnMessage,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useOldLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription, stars,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {message?.content?.giveaway?.stars ? (\n              <>\n                {renderText(\n                  lang('Chat.Giveaway.Message.Stars.PrizeText', lang('Stars', message?.content?.giveaway?.stars)),\n                  ['simple_markdown'],\n                )}\n                <br />\n                {renderText(lang('AmongWinners', quantity), ['simple_markdown'])}\n              </>\n            ) : (\n              <>\n                {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n                <br />\n                {renderText(lang(\n                  'ActionGiftPremiumSubtitle',\n                  lang('Chat.Giveaway.Info.Months', months),\n                ), ['simple_markdown'])}\n              </>\n            )}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PeerChip\n                peerId={peerId}\n                forceShowSelf\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PeerChip\n                peerId={peerId}\n                forceShowSelf\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const giveawayDuration = isResultsInfo ? lang('Chat.Giveaway.Info.Months', months) : lang('Stars', stars, 'i');\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, giveawayDuration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): Complete<StateProps> => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = (giveaway?.channelIds[0] ? selectChat(global, giveaway.channelIds[0]) : undefined)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\nimport type { ActionPayloads } from '../../../global/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: (payload: ActionPayloads['clickBotInlineButton']) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useOldLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <Icon className=\"corner-icon\" name=\"card\" />;\n      case 'switchBotInline':\n        return <Icon className=\"corner-icon\" name=\"share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <Icon className=\"corner-icon\" name=\"webapp\" />;\n      case 'copy':\n        return <Icon className=\"corner-icon\" name=\"copy\" />;\n      case 'suggestedMessage':\n        if (button.buttonType === 'suggestChanges') {\n          return <Icon className=\"left-icon\" name=\"edit\" />;\n        }\n        if (button.buttonType === 'approve') {\n          return <Icon className=\"left-icon\" name=\"check\" />;\n        }\n        if (button.buttonType === 'decline') {\n          return <Icon className=\"left-icon\" name=\"close\" />;\n        }\n        break;\n    }\n    return undefined;\n  };\n\n  const buttonTexts = useMemo(() => {\n    const texts: TeactNode[][] = [];\n    message.inlineButtons!.forEach((row) => {\n      texts.push(row.map((button) => renderKeyboardButtonText(lang, button)));\n    });\n    return texts;\n  }, [lang, message.inlineButtons]);\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row, i) => (\n        <div className=\"row\">\n          {row.map((button, j) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported' || (button.type === 'suggestedMessage' && button.disabled)}\n\n              onClick={() => onClick({ chatId: message.chatId, messageId: message.id, button })}\n            >\n              {renderIcon(button)}\n              <span className=\"inline-button-text\">\n                {buttonTexts[i][j]}\n              </span>\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(InlineButtons);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ThemeKey;\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    description,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(photoUrl, !withBlurredBackground);\n  const messageId = message.id;\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, messageId, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme, messageId]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {description && (\n        <div className=\"info\">{renderText(description, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(lang, amount, currency, { iconClassName: 'invoice-currency-icon' })}\n          {isTest && <span className=\"test-invoice\">{oldLang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <Icon name=\"lock\" className={styles.lock} />\n        {lang('Checkout.PayPrice', formatCurrencyAsString(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLocationLastUpdate } from '../../../util/dates/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ThemeKey;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const countdownRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { mediaType, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (mediaType === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = mediaType === 'venue' || (mediaType === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePreviousDeprecated(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (mediaType !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [mediaType, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (mediaType !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (mediaType === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (mediaType === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLocationLastUpdate(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      mediaType,\n      isExpired && 'expired',\n    );\n    if (mediaType === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (mediaType === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dates/dateFormat';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  effectEmoji?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onEffectClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n  paidMessageStars?: number;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  effectEmoji,\n  onClick,\n  onTranslationClick,\n  onEffectClick,\n  onOpenThread,\n  paidMessageStars,\n}) => {\n  const { showNotification } = getActions();\n\n  const [isActivated, markActivated] = useFlag();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: {\n        key: 'ImportedInfo',\n      },\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const dateTitle = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, oldLang.code, undefined, oldLang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, oldLang.code, undefined, oldLang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        oldLang.code,\n        undefined,\n        oldLang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('MessageTooltipEditedDate', { date: editDateTime });\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('MessageTooltipForwardedDate', { date: forwardedDateTime });\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, oldLang, message, oldLang.timeFormat]);\n\n  const viewsTitle = useMemo(() => {\n    if (!message.viewsCount) return undefined;\n    let text = lang('MessageTooltipViews', {\n      count: lang.number(message.viewsCount),\n    }, { pluralValue: message.viewsCount });\n    if (message.forwardsCount) {\n      text += '\\n';\n      text += lang('MessageTooltipForwards', {\n        count: lang.number(message.forwardsCount),\n      }, { pluralValue: message.forwardsCount });\n    }\n\n    return text;\n  }, [lang, message.forwardsCount, message.viewsCount]);\n\n  const repliesTitle = useMemo(() => {\n    const count = repliesThreadInfo?.messagesCount;\n    if (!count) return undefined;\n    return lang('MessageTooltipReplies', { count }, { pluralValue: count });\n  }, [lang, repliesThreadInfo]);\n\n  const date = useMemo(() => {\n    const time = formatTime(oldLang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(oldLang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [oldLang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {effectEmoji && (\n        <span className=\"message-effect-icon\" onClick={onEffectClick}>\n          {renderText(effectEmoji)}\n        </span>\n      )}\n      {isTranslated && (\n        <Icon name=\"language\" className=\"message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\" title={viewsTitle}>\n            {formatIntegerCompact(lang, message.viewsCount)}\n          </span>\n          <Icon name=\"channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\" title={repliesTitle}>\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(lang, repliesThreadInfo.messagesCount)} />\n          </span>\n          <Icon name=\"reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <Icon name=\"pinned-message\" className=\"message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      {Boolean(paidMessageStars) && (\n        <span className=\"message-price\">\n          {\n            formatStarsAsIcon(lang, paidMessageStars, {\n              asFont: true,\n              className: 'message-price-star-icon',\n              containerClassName: 'message-price-stars-container',\n            })\n          }\n        </span>\n      )}\n      <span className=\"message-time\" title={dateTitle} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('MessageMetaImported')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('MessageMetaEdited')} `}\n        {message.isVideoProcessingPending && `${lang('MessageMetaApproximate')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ApiMessageActionPhoneCall } from '../../../api/types/messageActions';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dates/dateFormat';\nimport { getCallMessageKey } from './helpers/messageActions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: ApiMessageActionPhoneCall;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useOldLang();\n  const {\n    isVideo, reason, duration,\n  } = phoneCall;\n  const isOutgoing = message.isOutgoing;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <Icon name={isVideo ? 'video-outlined' : 'phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(getCallMessageKey(phoneCall, message.isOutgoing))}</div>\n        <div className={styles.meta}>\n          <Icon\n            name=\"arrow-right\"\n            className={buildClassName(\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mVaSjZRJ\",\"buyButton\":\"GnKGu6D9\",\"boughtStatus\":\"IGXW5hWr\",\"star\":\"ywiOugiH\",\"buttonText\":\"gLaaVQXr\"};","import type React from '../../../lib/teact/teact';\nimport { memo, type TeactNode, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPaidMedia } from '../../../api/types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { replaceWithTeact } from '../../../util/replaceWithTeact';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './PaidMediaOverlay.module.scss';\n\ntype OwnProps = {\n  paidMedia: ApiPaidMedia;\n  chatId: string;\n  messageId: number;\n  isOutgoing?: boolean;\n  children?: TeactNode;\n};\n\nconst PaidMediaOverlay = ({\n  paidMedia,\n  chatId,\n  messageId,\n  isOutgoing,\n  children,\n}: OwnProps) => {\n  const { openInvoice } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const isClickable = !paidMedia.isBought;\n\n  const buttonText = useMemo(() => {\n    const value = oldLang('UnlockPaidContent', paidMedia.starsAmount);\n\n    return replaceWithTeact(\n      value, STARS_ICON_PLACEHOLDER, <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />,\n    );\n  }, [oldLang, paidMedia]);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId,\n    });\n    stopEvent(e);\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={isClickable ? handleClick : undefined}\n    >\n      {children}\n      {isClickable && (\n        <Button\n          className={styles.buyButton}\n          color=\"dark\"\n          size=\"tiny\"\n          fluid\n          pill\n        >\n          <span className={styles.buttonText}>{buttonText}</span>\n        </Button>\n      )}\n      {paidMedia.isBought && (\n        <div className={buildClassName('message-paid-media-status', styles.boughtStatus)}>\n          {isOutgoing\n            ? formatStarsAsIcon(lang, paidMedia.starsAmount)\n            : oldLang('Chat.PaidMedia.Purchased')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(PaidMediaOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const lang = useLang();\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}\n        %\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <Icon name={correctAnswer ? 'check' : 'close'} className=\"poll-option-icon\" />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: answer.text.text,\n            entities: answer.text.entities,\n          })}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { selectPeer } from '../../../global/selectors';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { getServerTime } from '../../../util/serverTime';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onSendVote: (options: string[]) => void;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps> = ({\n  message,\n  poll,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onSendVote,\n}) => {\n  const {\n    loadMessage, openPollResults, requestConfetti, showNotification,\n  } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  const countdownRef = useRef<HTMLDivElement>();\n  const timerCircleRef = useRef<SVGCircleElement>();\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const recentVoterIds = results.recentVoterIds;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: renderTextWithEntities({\n      text: a.text.text,\n      entities: a.text.entities,\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    }),\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [\n    closePeriod, observeIntersectionForLoading, observeIntersectionForPlaying,\n    summary.answers, summary.closePeriod, summary.quiz,\n  ]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const global = getGlobal();\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const peer = selectPeer(global, id);\n      if (peer) {\n        result.push(peer);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const showSolution = useLastCallback(() => {\n    showNotification({\n      localId: getMessageKey(message),\n      message: renderTextWithEntities({ text: poll.results.solution!, entities: poll.results.solutionEntities }),\n      duration: SOLUTION_DURATION,\n      containerSelector: SOLUTION_CONTAINER_ID,\n    });\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        showSolution();\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useOldLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          <AvatarList\n            size=\"micro\"\n            peers={recentVoters}\n          />\n        </div>\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      <div className=\"poll-question\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n          observeIntersectionForLoading,\n          observeIntersectionForPlaying,\n        })}\n      </div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            onClick={showSolution}\n            ariaLabel=\"Show Solution\"\n          >\n            <Icon name=\"lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div\n          className=\"poll-answers\"\n          onClick={stopPropagation}\n        >\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                selected={chosenOptions}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                isRound\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: OldLangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(Poll);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FPceNkgD\",\"inactive\":\"hruUWBuj\",\"mirrored\":\"GydRBA08\",\"effect\":\"WMMaWlOL\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMediaThumbUri, getStickerMediaHash } from '../../../global/helpers';\nimport { IS_WEBM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useOverlayPosition from './hooks/useOverlayPosition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport SensitiveContentConfirmModal from '../../common/SensitiveContentConfirmModal';\nimport StickerView from '../../common/StickerView';\nimport Portal from '../../ui/Portal';\n\nimport styles from './Sticker.module.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  isMediaNsfw?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  onStopEffect?: VoidFunction;\n};\n\ntype StateProps = {\n  needsAgeVerification?: boolean;\n};\n\nconst Sticker: FC<OwnProps & StateProps> = ({\n  message,\n  shouldLoop,\n  shouldPlayEffect,\n  withEffect,\n  isMediaNsfw,\n  onStopEffect,\n  observeIntersection,\n  observeIntersectionForPlaying,\n  needsAgeVerification,\n}) => {\n  const { showNotification, openStickerSet, updateContentSettings, openAgeVerificationModal } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const effectRef = useRef<HTMLDivElement>();\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n  const isMirrored = !message.isOutgoing;\n\n  const [isNsfwModalOpen, openNsfwModal, closeNsfwModal] = useFlag();\n  const [shouldAlwaysShowNsfw, setShouldAlwaysShowNsfw] = useState(false);\n\n  const shouldShowSpoiler = isMediaNsfw;\n  const [isSpoilerShown, showSpoiler, hideSpoiler] = useFlag(shouldShowSpoiler);\n\n  useEffect(() => {\n    if (shouldShowSpoiler) {\n      showSpoiler();\n    } else {\n      hideSpoiler();\n    }\n  }, [shouldShowSpoiler]);\n\n  const handleNsfwConfirm = useLastCallback(() => {\n    closeNsfwModal();\n    hideSpoiler();\n\n    if (shouldAlwaysShowNsfw) {\n      updateContentSettings({ isSensitiveEnabled: true });\n    }\n  });\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getStickerMediaHash(sticker, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect || !withEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const thumbDataUri = getMediaThumbUri(sticker);\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n    }\n  }, [hasEffect, canPlay, shouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const shouldRenderEffect = hasEffect && withEffect && effectBlobUrl && isPlayingEffect;\n  useOverlayPosition({\n    anchorRef: ref,\n    overlayRef: effectRef,\n    isMirrored,\n    isDisabled: !shouldRenderEffect,\n  });\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isSpoilerShown) {\n      if (isMediaNsfw) {\n        if (needsAgeVerification) {\n          openAgeVerificationModal();\n          return;\n        }\n        openNsfwModal();\n        return;\n      }\n      hideSpoiler();\n      return;\n    }\n\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'media-inner',\n    styles.root,\n    isMemojiSticker && styles.inactive,\n    hasEffect && isMirrored && styles.mirrored,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n        isNsfw={isMediaNsfw}\n      />\n      {shouldRenderEffect && (\n        <Portal>\n          <AnimatedSticker\n            ref={effectRef}\n            key={mediaHashEffect}\n            className={buildClassName(styles.effect, isMirrored && styles.mirrored)}\n            tgsUrl={effectBlobUrl}\n            size={width * EFFECT_SIZE_MULTIPLIER}\n            play\n            isLowPriority\n            noLoop\n            onEnded={handleEffectEnded}\n          />\n        </Portal>\n      )}\n      <SensitiveContentConfirmModal\n        isOpen={isNsfwModalOpen}\n        onClose={closeNsfwModal}\n        shouldAlwaysShow={shouldAlwaysShowNsfw}\n        onAlwaysShowChanged={setShouldAlwaysShowNsfw}\n        confirmHandler={handleNsfwConfirm}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const appConfig = global.appConfig;\n  const needsAgeVerification = appConfig.needAgeVideoVerification;\n\n  return {\n    needsAgeVerification,\n  };\n})(Sticker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"EVLTkrt1\",\"preview\":\"V3HabdKr\",\"linkPreview\":\"ClGe8yij\",\"media\":\"WAItYc5d\",\"nonInteractive\":\"AQWPv0bP\",\"expired\":\"tprkr7qf\",\"expiredIcon\":\"nLA7VEhv\"};","import { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessageStoryData, ApiTypeStory } from '../../../api/types';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport MediaAreaOverlay from '../../story/mediaArea/MediaAreaOverlay';\n\nimport styles from './BaseStory.module.scss';\n\ninterface OwnProps {\n  story?: ApiTypeStory | ApiMessageStoryData;\n  isPreview?: boolean;\n  isProtected?: boolean;\n  isConnected?: boolean;\n}\n\nfunction BaseStory({\n  story, isPreview, isProtected, isConnected,\n}: OwnProps) {\n  const { openStoryViewer, loadPeerStoriesByIds, showNotification } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const isExpired = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbnail = isLoaded ? (video ? video.thumbnail?.dataUri : story.content.photo?.thumbnail?.dataUri) : undefined;\n  const mediaUrl = useCurrentOrPrev(imgBlobUrl, true);\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(Boolean(mediaUrl));\n  const blurredBackgroundRef = useCanvasBlur(\n    thumbnail,\n    isExpired && !isPreview,\n    isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n\n  const fullClassName = buildClassName(\n    styles.root,\n    'media-inner',\n    (!isConnected || isExpired) && styles.nonInteractive,\n    isExpired && styles.expired,\n    isPreview && styles.preview,\n  );\n\n  useEffect(() => {\n    if (story && !(isLoaded || isExpired)) {\n      loadPeerStoriesByIds({ peerId: story.peerId, storyIds: [story.id] });\n    }\n  }, [story, isExpired, isLoaded]);\n\n  const handleClick = useLastCallback(() => {\n    if (isExpired) {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n      return;\n    }\n\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  return (\n    <div\n      className={fullClassName}\n      onClick={isConnected ? handleClick : undefined}\n    >\n      {!isExpired && isPreview && (\n        <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />\n      )}\n      {shouldRender && (\n        <>\n          <img\n            src={mediaUrl}\n            alt=\"\"\n            className={buildClassName(styles.media, isPreview && styles.linkPreview, transitionClassNames)}\n            draggable={false}\n          />\n          {isLoaded && <MediaAreaOverlay story={story} className={transitionClassNames} />}\n        </>\n      )}\n      {isExpired && (\n        <span>\n          <Icon name=\"story-expired\" className={styles.expiredIcon} />\n          {lang('StoryExpiredSubtitle')}\n        </span>\n      )}\n      {Boolean(video?.duration) && (\n        <div className=\"message-media-duration\">\n          {formatMediaDuration(video.duration)}\n        </div>\n      )}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default memo(BaseStory);\n","import { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): Complete<StateProps> => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useOldLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getPeerTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): Complete<StateProps> => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import {\n  memo, useLayoutEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMediaTodo,\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport { getPeerFullTitle, getPeerTitle } from '../../../global/helpers/peers';\nimport { selectIsCurrentUserPremium, selectSender, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\n\nimport './TodoList.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  todoList: ApiMediaTodo;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  isCurrentUserPremium: boolean;\n  isSynced?: boolean;\n};\n\nconst TodoList = ({\n  message,\n  todoList,\n  sender,\n  isCurrentUserPremium,\n  isSynced,\n}: OwnProps & StateProps) => {\n  const { toggleTodoCompleted, showNotification, requestConfetti } = getActions();\n  const { todo, completions } = todoList;\n  const { title, items, othersCanComplete } = todo;\n  const [completedTasks, setCompletedTasks] = useState<string[]>([]);\n  const completedTasksSet = useMemo(() => new Set(completedTasks), [completedTasks]);\n\n  const canToggle = !message.isScheduled && isCurrentUserPremium && isSynced;\n\n  useLayoutEffect(() => {\n    const completedIds = completions?.map((c) => c.itemId.toString()) || [];\n    setCompletedTasks(completedIds);\n  }, [completions]);\n\n  const lang = useLang();\n\n  const handleTaskLabelClick = useLastCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('SubscribeToTelegramPremiumForToggleTask'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'todo' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n      return;\n    }\n  });\n\n  const handleTaskToggle = useLastCallback((newCompletedTasks: string[]) => {\n    const newCompletedId = newCompletedTasks.find((id) => !completedTasksSet.has(id));\n    const newIncompletedId = Array.from(completedTasksSet).find((id) => !newCompletedTasks.includes(id));\n\n    toggleTodoCompleted({\n      chatId: message.chatId,\n      messageId: message.id,\n      completedIds: newCompletedId ? [Number(newCompletedId)] : [],\n      incompletedIds: newIncompletedId ? [Number(newIncompletedId)] : [],\n    });\n\n    if (newCompletedTasks.length === items.length) {\n      requestConfetti({});\n    }\n  });\n  const isReadOnly = Boolean(message.forwardInfo) || (!othersCanComplete && !message.isOutgoing);\n  const isOutgoing = message.isOutgoing;\n\n  const tasks = useMemo(() => items.map((task) => {\n    const user = !othersCanComplete ? undefined : selectUser(getGlobal(),\n      completions?.find((c) => c.itemId === task.id)?.completedBy || '');\n    const subLabel = user ? getPeerFullTitle(lang, user) : undefined;\n    return {\n      label: renderTextWithEntities(task.title),\n      value: task.id.toString(),\n      user,\n      subLabel,\n    };\n  }), [items, othersCanComplete, completions, lang]);\n\n  const renderCheckBoxGroup = () => {\n    return (\n      <CheckboxGroup\n        options={tasks}\n        selected={completedTasks}\n        onChange={handleTaskToggle}\n        onClickLabel={!isCurrentUserPremium ? handleTaskLabelClick : undefined}\n        disabled={!canToggle}\n        isRound\n      />\n    );\n  };\n\n  const renderReadOnlyTodoList = () => {\n    return (\n      <div className=\"todo-list-items\">\n        {tasks.map((task) => (\n          <div\n            key={task.value}\n            className=\"todo-list-readonly-item\"\n          >\n            <div className=\"todo-readonly-item-checkbox\">\n              {completedTasksSet.has(task.value)\n                ? <Icon name=\"check\" />\n                : <div className=\"todo-item-bullet-point\" />}\n            </div>\n            <div\n              className={buildClassName(\n                'readonly-item-label',\n                completedTasksSet.has(task.value) && 'completed-label',\n              )}\n            >\n              {task.label}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderTodoListType = () => {\n    if (message.forwardInfo) {\n      return lang('TitleToDoList');\n    }\n\n    if (othersCanComplete) {\n      return lang('TitleGroupToDoList');\n    }\n\n    if (isOutgoing) {\n      return lang('TitleYourToDoList');\n    }\n\n    if (sender) {\n      return lang('TitleUserToDoList', { peer: getPeerTitle(lang, sender) }, { withNodes: true });\n    }\n\n    return lang('TitleToDoList');\n  };\n\n  return (\n    <div className=\"todo-list\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      <div className=\"todo-list-header\">\n        <div className=\"todo-list-title\">\n          {renderTextWithEntities(title)}\n        </div>\n        <div className=\"list-type\">\n          {renderTodoListType()}\n        </div>\n      </div>\n\n      <div className=\"todo-list-items\">\n        {isReadOnly ? renderReadOnlyTodoList() : renderCheckBoxGroup()}\n      </div>\n      <div className=\"completed-tasks-count\">\n        <AnimatedCounter text={\n          lang('DescriptionCompletedToDoTasks', {\n            number: completedTasks.length,\n            count: tasks.length,\n          })\n        }\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { message }): Complete<StateProps> => {\n  const sender = selectSender(global, message);\n  return {\n    sender,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    isSynced: global.isSynced,\n  };\n},\n)(TodoList));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LaOdPURl\",\"backgroundWrapper\":\"zDnMa37m\",\"background\":\"EdXfeKWY\",\"stickerWrapper\":\"o_DYZEMV\"};","import { memo, useRef } from '@teact';\n\nimport type { ApiStarGiftUnique } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../util/buildClassName.ts';\nimport { getGiftAttributes } from '../../common/helpers/gifts';\n\nimport useFlag from '../../../hooks/useFlag.ts';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport StickerView from '../../common/StickerView';\n\nimport styles from './WebPageUniqueGift.module.scss';\n\ntype OwnProps = {\n  gift: ApiStarGiftUnique;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\nconst STAR_GIFT_STICKER_SIZE = 120;\n\nconst WebPageUniqueGift = ({\n  gift,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}: OwnProps) => {\n  const stickerRef = useRef<HTMLDivElement>();\n  const {\n    backdrop, model, pattern,\n  } = getGiftAttributes(gift)!;\n\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const backgroundColors = [backdrop!.centerColor, backdrop!.edgeColor];\n\n  return (\n    <div\n      className={buildClassName('interactive-gift', styles.root)}\n      onClick={onClick}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      <div className={styles.backgroundWrapper}>\n        <RadialPatternBackground\n          className={styles.background}\n          backgroundColors={backgroundColors}\n          patternColor={backdrop!.patternColor}\n          patternIcon={pattern!.sticker}\n        />\n      </div>\n      <div ref={stickerRef} className={styles.stickerWrapper}>\n        <StickerView\n          containerRef={stickerRef}\n          sticker={model!.sticker}\n          size={STAR_GIFT_STICKER_SIZE}\n          shouldLoop={isHover}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WebPageUniqueGift);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageWebPage, ApiTypeStory, ApiWebPage, ApiWebPageFull } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { AudioOrigin, type ThemeKey, type WebPageMediaSize } from '../../../types';\n\nimport { getPhotoFullDimensions } from '../../../global/helpers';\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { tryParseDeepLink } from '../../../util/deepLinkParser';\nimport trimText from '../../../util/trimText';\nimport renderText from '../../common/helpers/renderText';\nimport { getWebpageButtonLangKey } from './helpers/webpageType';\n\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Audio from '../../common/Audio';\nimport Document from '../../common/Document';\nimport EmojiIconBackground from '../../common/embedded/EmojiIconBackground';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport SafeLink from '../../common/SafeLink';\nimport StickerView from '../../common/StickerView';\nimport Button from '../../ui/Button';\nimport BaseStory from './BaseStory';\nimport Photo from './Photo';\nimport Video from './Video';\nimport WebPageUniqueGift from './WebPageUniqueGift';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\nconst WEBPAGE_STORY_TYPE = 'telegram_story';\nconst WEBPAGE_GIFT_TYPE = 'telegram_nft';\nconst STICKER_SIZE = 80;\nconst EMOJI_SIZE = 38;\n\ntype OwnProps = {\n  messageWebPage: ApiMessageWebPage;\n  webPage: ApiWebPage;\n  message?: ApiMessage;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  asForwarded?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  isConnected?: boolean;\n  backgroundEmojiId?: string;\n  theme: ThemeKey;\n  story?: ApiTypeStory;\n  shouldWarnAboutFiles?: boolean;\n  autoLoadFileMaxSizeMb?: number;\n  lastPlaybackTimestamp?: number;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onAudioPlay?: NoneToVoidFunction;\n  onMediaClick?: NoneToVoidFunction;\n  onDocumentClick?: NoneToVoidFunction;\n  onCancelMediaTransfer?: NoneToVoidFunction;\n  onContainerClick?: ((e: React.MouseEvent) => void);\n};\ntype StateProps = {\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst WebPage: FC<OwnProps & StateProps> = ({\n  messageWebPage,\n  webPage,\n  message,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  asForwarded,\n  isDownloading = false,\n  isProtected,\n  isConnected,\n  story,\n  theme,\n  backgroundEmojiId,\n  shouldWarnAboutFiles,\n  autoLoadFileMaxSizeMb,\n  lastPlaybackTimestamp,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onMediaClick,\n  onDocumentClick,\n  onContainerClick,\n  onAudioPlay,\n  onCancelMediaTransfer,\n}) => {\n  const { openUrl, openTelegramLink } = getActions();\n  const stickersRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const handleMediaClick = useLastCallback(() => {\n    onMediaClick!();\n  });\n\n  const handleContainerClick = useLastCallback((e: React.MouseEvent) => {\n    onContainerClick?.(e);\n  });\n\n  const fullWebPage = webPage?.webpageType === 'full' ? webPage : undefined;\n\n  const { story: storyData, stickers } = fullWebPage || {};\n\n  useEnsureStory(storyData?.peerId, storyData?.id, story);\n\n  const hasCustomColor = stickers?.isWithTextColor || stickers?.documents?.[0]?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(stickersRef, undefined, !hasCustomColor);\n\n  const linkTimestamp = useMemo(() => {\n    const parsedLink = webPage?.url && tryParseDeepLink(webPage?.url);\n    if (!parsedLink || !('timestamp' in parsedLink)) return undefined;\n    return parsedLink.timestamp;\n  }, [webPage?.url]);\n\n  if (webPage?.webpageType !== 'full') return undefined;\n\n  const handleOpenTelegramLink = useLastCallback(() => {\n    openTelegramLink({\n      url: webPage.url,\n    });\n  });\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n    audio,\n    type,\n    document,\n  } = webPage;\n  const { mediaSize } = messageWebPage;\n  const isStory = type === WEBPAGE_STORY_TYPE;\n  const isGift = type === WEBPAGE_GIFT_TYPE;\n  const isExpiredStory = story && 'isDeleted' in story;\n\n  const resultType = stickers?.isEmoji ? 'telegram_emojiset' : type;\n  const quickButtonLangKey = !isExpiredStory ? getWebpageButtonLangKey(resultType) : undefined;\n  const quickButtonTitle = quickButtonLangKey && lang(quickButtonLangKey);\n\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = Boolean(stickers);\n  if (isArticle && webPage?.photo && !webPage.video && !webPage.document) {\n    isSquarePhoto = getIsSmallPhoto(webPage, mediaSize);\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n    document && 'with-document',\n    quickButtonTitle && 'with-quick-button',\n    isGift && 'with-gift',\n  );\n\n  function renderQuickButton(caption: string) {\n    return (\n      <Button\n        className=\"WebPage--quick-button\"\n        size=\"tiny\"\n        color=\"translucent\"\n        isRectangular\n        noForcedUpperCase\n        onClick={handleOpenTelegramLink}\n      >\n        {caption}\n      </Button>\n    );\n  }\n\n  return (\n    <PeerColorWrapper\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir={oldLang.isRtl ? 'rtl' : 'auto'}\n      onClick={handleContainerClick}\n    >\n      <div className={buildClassName(\n        'WebPage--content',\n        isStory && 'is-story',\n        isGift && 'is-gift',\n      )}\n      >\n        {backgroundEmojiId && (\n          <EmojiIconBackground\n            emojiDocumentId={backgroundEmojiId}\n            className=\"WebPage--background-icons\"\n          />\n        )}\n        {isStory && (\n          <BaseStory story={story} isProtected={isProtected} isConnected={isConnected} isPreview />\n        )}\n        {isGift && (\n          <WebPageUniqueGift\n            gift={webPage.gift!}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleOpenTelegramLink}\n          />\n        )}\n        {isArticle && (\n          <div\n            className={buildClassName('WebPage-text', 'WebPage-text_interactive')}\n            onClick={() => openUrl({ url, shouldSkipModal: messageWebPage.isSafe })}\n          >\n            <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n            {title && (\n              <p className=\"site-title\">{renderText(title)}</p>\n            )}\n            {truncatedDescription && !isGift && (\n              <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n            )}\n          </div>\n        )}\n        {photo && !isGift && !video && !document && (\n          <Photo\n            photo={photo}\n            isOwn={message?.isOutgoing}\n            isInWebPage\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            size={isSquarePhoto ? 'pictogram' : 'inline'}\n            asForwarded={asForwarded}\n            nonInteractive={!isMediaInteractive}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n        {video && (\n          <Video\n            video={video}\n            isOwn={message?.isOutgoing}\n            isInWebPage\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            canAutoPlay={canAutoPlay}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            lastPlaybackTimestamp={lastPlaybackTimestamp || linkTimestamp}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n        {audio && (\n          <Audio\n            theme={theme}\n            message={message!}\n            origin={AudioOrigin.Inline}\n            noAvatars={noAvatars}\n            isDownloading={isDownloading}\n            onPlay={onAudioPlay}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n        {document && (\n          <Document\n            document={document}\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            onMediaClick={onDocumentClick}\n            onCancelUpload={onCancelMediaTransfer}\n            isDownloading={isDownloading}\n            shouldWarnAboutFiles={shouldWarnAboutFiles}\n          />\n        )}\n        {stickers && (\n          <div\n            ref={stickersRef}\n            className={buildClassName(\n              'media-inner', 'square-image', stickers.isEmoji && 'WebPage--emoji-grid', 'WebPage--stickers',\n            )}\n          >\n            {stickers.documents.map((sticker) => (\n              <div key={sticker.id} className=\"WebPage--sticker\">\n                <StickerView\n                  containerRef={stickersRef}\n                  sticker={sticker}\n                  shouldLoop\n                  size={stickers.isEmoji ? EMOJI_SIZE : STICKER_SIZE}\n                  customColor={customColor}\n                  observeIntersectionForPlaying={observeIntersectionForPlaying}\n                  observeIntersectionForLoading={observeIntersectionForLoading}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n      {quickButtonTitle && renderQuickButton(quickButtonTitle)}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getIsSmallPhoto(webPage: ApiWebPageFull, mediaSize?: WebPageMediaSize) {\n  if (!webPage?.photo) return false;\n  if (mediaSize === 'small') return true;\n  if (mediaSize === 'large') return false;\n\n  const { width, height } = getPhotoFullDimensions(webPage.photo) || {};\n  if (!width || !height) return false;\n\n  return width === height && !webPage.hasLargeMedia;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(WebPage));\n","import type { RegularLangKey } from '../../../../types/language';\n\n// https://github.com/telegramdesktop/tdesktop/blob/3da787791f6d227f69b32bf4003bc6071d05e2ac/Telegram/SourceFiles/history/view/history_view_view_button.cpp#L51\nexport function getWebpageButtonLangKey(type?: string): RegularLangKey | undefined {\n  switch (type) {\n    case 'telegram_channel_request':\n    case 'telegram_megagroup_request':\n    case 'telegram_chat_request':\n      return 'ViewButtonRequestJoin';\n    case 'telegram_message':\n      return 'ViewButtonMessage';\n    case 'telegram_bot':\n      return 'ViewButtonBot';\n    case 'telegram_voicechat':\n      return 'ViewButtonVoiceChat';\n    case 'telegram_livestream':\n      return 'ViewButtonVoiceChatChannel';\n    case 'telegram_megagroup':\n    case 'telegram_chat':\n      return 'ViewButtonGroup';\n    case 'telegram_channel':\n      return 'ViewButtonChannel';\n    case 'telegram_user':\n      return 'ViewButtonUser';\n    case 'telegram_botapp':\n      return 'ViewButtonBotApp';\n    case 'telegram_chatlist':\n      return 'ViewChatList';\n    case 'telegram_story':\n      return 'ViewButtonStory';\n    case 'telegram_channel_boost':\n    case 'telegram_group_boost':\n      return 'ViewButtonBoost';\n    case 'telegram_stickerset':\n      return 'ViewButtonStickerset';\n    case 'telegram_emojiset':\n      return 'ViewButtonEmojiset';\n    case 'telegram_nft':\n      return 'ViewButtonGiftUnique';\n    default:\n      return undefined;\n  }\n}\n","import {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiPoll,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n  ApiWebPage,\n} from '../../../api/types';\nimport type { ActionPayloads } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  FocusDirection,\n  IAlbum,\n  MessageListType,\n  ScrollTargetPosition,\n  ThemeKey,\n  ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { OnIntersectPinnedMessage } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, MESSAGE_APPEARANCE_DELAY } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getIsDownloading,\n  getMainUsername,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getMessageWebPage,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport { getPeerFullTitle } from '../../../global/helpers/peers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectActiveDownloads,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectCanReplyToMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentMiddleSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectFullWebPageFromMessage,\n  selectIsChatProtected,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectPollFromMessage,\n  selectReplyMessage,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport {\n  selectIsMediaNsfw,\n  selectMessageDownloadableMedia,\n  selectMessageLastPlaybackTimestamp,\n  selectMessageTimestampableDuration,\n} from '../../../global/selectors/media';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { IS_ANDROID, IS_TRANSLATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { getServerTime } from '../../../util/serverTime';\nimport stopEvent from '../../../util/stopEvent';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport { calculateDimensionsForMessageMedia, getStickerDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport getSingularPaidMedia from './helpers/getSingularPaidMedia';\nimport { calculateMediaDimensions, getMinMediaWidth, getMinMediaWidthWithText } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useMessageResizeObserver from '../../../hooks/useResizeMessageObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport MessageText from '../../common/MessageText';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport FactCheck from './FactCheck';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageEffect from './MessageEffect';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport PaidMediaOverlay from './PaidMediaOverlay';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport TodoList from './TodoList';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    noReactions?: boolean;\n    appearAsNotOwn?: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef?: { current: number | undefined };\n    getIsMessageListReady?: Signal<boolean>;\n    observeIntersectionForBottom?: ObserveFn;\n    observeIntersectionForLoading?: ObserveFn;\n    observeIntersectionForPlaying?: ObserveFn;\n    onIntersectPinnedMessage?: OnIntersectPinnedMessage;\n    isInFocusList?: boolean;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ThemeKey;\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  focusedQuoteOffset?: number;\n  noFocusHighlight?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withAnimatedEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutFiles?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n  effect?: ApiAvailableEffect;\n  poll?: ApiPoll;\n  webPage?: ApiWebPage;\n  maxTimestamp?: number;\n  lastPlaybackTimestamp?: number;\n  paidMessageStars?: number;\n  isChatWithUser?: boolean;\n  isAccountFrozen?: boolean;\n  minFutureTime?: number;\n  isMediaNsfw?: boolean;\n  isReplyMediaNsfw?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst MAX_REASON_LENGTH = 200;\n\nconst Message = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  noReactions,\n  appearAsNotOwn,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  isInFocusList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  focusedQuoteOffset,\n  noFocusHighlight,\n  scrollTargetPosition,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withAnimatedEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutFiles,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  effect,\n  poll,\n  maxTimestamp,\n  lastPlaybackTimestamp,\n  isMediaNsfw,\n  isReplyMediaNsfw,\n  paidMessageStars,\n  isChatWithUser,\n  isAccountFrozen,\n  minFutureTime,\n  webPage,\n  onIntersectPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    clickSuggestedMessageButton,\n    rejectSuggestedPost,\n    openSuggestedPostApprovalModal,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const bottomMarkerRef = useRef<HTMLDivElement>();\n  const quickReactionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [isPlayingSnapAnimation, setIsPlayingSnapAnimation] = useState(false);\n  const [isPlayingDeleteAnimation, setIsPlayingDeleteAnimation] = useState(false);\n  const [shouldPlayEffect, requestEffect, hideEffect] = useFlag();\n  const [isDeclineDialogOpen, openDeclineDialog, closeDeclineDialog] = useFlag();\n  const [declineReason, setDeclineReason] = useState('');\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    (isTouchScreen && isInSelectMode) || isAccountFrozen || isInFocusList,\n    !IS_TAURI,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  useShowTransition({\n    ref,\n    isOpen: isShown || isJustAdded,\n    noMountTransition: noAppearanceAnimation && !isJustAdded,\n    className: false,\n  });\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError, factCheck,\n  } = message;\n\n  useUnmountCleanup(() => {\n    if (message.isPinned) {\n      const id = album ? album.mainMessage.id : messageId;\n      onIntersectPinnedMessage?.({ viewportPinnedIdsToRemove: [id] });\n    }\n  });\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = appearAsNotOwn ? false : isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo, audio,\n    voice, document, sticker, contact,\n    invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults, todo,\n  } = getMessageContent(message);\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = !withVoiceTranscription && getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = noReactions ? false : reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isAnonymousForwards\n    && !botSender\n  ) || Boolean(storyData && !storyData.isMention);\n  const canShowSenderBoosts = Boolean(senderBoosts) && !asForwarded && isFirstInGroup;\n  const isStoryMention = storyData?.isMention;\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isAlbum = Boolean(album)\n    && (\n      (album.isPaidMedia && paidMedia!.extendedMedia.length > 1)\n      || album.messages.length > 1\n    ) && !album.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  ) || isInFocusList;\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed\n    && !isChatProtected;\n  const canMarkAsRead = isChatWithSelf || isInFocusList;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || isChatWithSelf || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasFactCheck = Boolean(factCheck?.text);\n\n  const hasForwardedCustomShape = asForwarded && isCustomShape;\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply || hasForwardedCustomShape;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    if (isAccountFrozen) return;\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n\n  const messageColorPeer = asForwarded ? originSender : sender;\n  const noUserColors = isOwn && !isCustomShape;\n\n  const senderPeer = (forwardInfo || storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleDocumentClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleMarkAsRead,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers({\n    lang: oldLang,\n    selectMessage,\n    message,\n    webPage,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    isTranslatingChat: Boolean(requestedChatTranslationLanguage),\n    story: replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n    isSavedMessages: isChatWithSelf,\n    lastPlaybackTimestamp,\n    isInFocusList,\n  });\n\n  const handleEffectClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    requestEffect();\n  });\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  useEffect(() => {\n    const element = ref.current;\n    const isPartialAlbumDelete = message.isInAlbum && album?.messages.some((msg) => !msg.isDeleting);\n    if (message.isDeleting && element && !isPartialAlbumDelete) {\n      if (animateSnap(element)) {\n        setIsPlayingSnapAnimation(true);\n      } else {\n        setIsPlayingDeleteAnimation(true);\n      }\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Only start animation on `isDeleting` change\n  }, [message.isDeleting]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasTextContent = textMessage && hasMessageText(textMessage);\n  const hasText = hasTextContent || hasFactCheck;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'hide-on-print',\n    isProtected && !hasTextContent ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    isPlayingDeleteAnimation && 'is-deleting',\n    isPlayingSnapAnimation && 'is-dissolving',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || shouldPlayEffect) && 'has-active-effect',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const text = textMessage && getMessageContent(textMessage).text;\n  const isInvertedMedia = Boolean(message.isInvertedMedia);\n\n  const { replyToMsgId, replyToPeerId } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  useEffect(() => {\n    if ((sticker?.hasEffect || effect) && ((\n      memoFirstUnreadIdRef?.current && messageId >= memoFirstUnreadIdRef.current\n    ) || isLocal)) {\n      requestEffect();\n    }\n  }, [effect, isLocal, memoFirstUnreadIdRef, messageId, sticker?.hasEffect]);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled && shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePreviousDeprecated(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const phoneCall = action?.type === 'phoneCall' ? action : undefined;\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl && !isAccountFrozen && !isInFocusList;\n\n  const hasOutsideReactions = !withVoiceTranscription && hasReactions\n    && (isCustomShape || (\n      (photo || video || storyData || (location?.mediaType === 'geo')) && (!hasText || isInvertedMedia))\n    );\n\n  const contentClassName = buildContentClassName(message, album, {\n    poll,\n    webPage,\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasBottomCommentButton: withCommentButton && !isCustomShape,\n    hasActionButton: canForward || canFocus || (withCommentButton && isCustomShape),\n    hasReactions,\n    isGeoLiveActive: location?.mediaType === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors, true),\n    hasOutsideReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(text?.emojiOnlyCount);\n\n  const paidMessageStarsInMeta = !isChatWithUser\n    ? (isAlbum && paidMessageStars ? album.messages.length * paidMessageStars : paidMessageStars)\n    : undefined;\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize && !isInvertedMedia) {\n    metaPosition = 'in-text';\n  } else if (isInvertedMedia && !emojiSize && (hasFactCheck || webPage)) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (hasOutsideReactions) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage({\n    elementRef: ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    isQuote: Boolean(focusedQuote),\n    scrollTargetPosition,\n    isInFocusList,\n  });\n\n  const viaBusinessBotTitle = viaBusinessBot ? getPeerFullTitle(oldLang, viaBusinessBot) : undefined;\n\n  const canShowPostAuthor = !message.senderId;\n  const signature = viaBusinessBotTitle || (canShowPostAuthor && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  useMessageResizeObserver(ref, isLastInList);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    let unreadMentionIds: number[] = [];\n    if (message.hasUnreadMention) {\n      unreadMentionIds = [messageId];\n    }\n\n    if (album) {\n      unreadMentionIds = album.messages.filter((msg) => msg.hasUnreadMention).map((msg) => msg.id);\n    }\n\n    if (unreadMentionIds.length) {\n      markMentionsRead({ chatId, messageIds: unreadMentionIds });\n    }\n  }, [hasUnreadReaction, album, chatId, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(noAvatars), album, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded && !isCustomShape ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo || video) {\n        const media = (photo || video);\n        if (media && !isRoundVideo) {\n          width = calculateMediaDimensions({\n            media,\n            isOwn,\n            asForwarded,\n            noAvatars,\n            isMobile,\n          }).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < getMinMediaWidthWithText(isMobile)) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMobile, isMediaWithCommentButton), width);\n      }\n    } else if (albumLayout) {\n      const minWidth = getMinMediaWidth(text?.text, isMobile, isMediaWithCommentButton);\n      calculatedWidth = Math.max(minWidth, albumLayout.containerStyle.width);\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, noAvatars, photo, sticker, text?.text, video, isRoundVideo,\n  ]);\n\n  const {\n    contentWidth, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        focusedQuoteOffset={focusedQuoteOffset}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n        isInSelectMode={isInSelectMode}\n        canBeEmpty={hasFactCheck}\n        maxTimestamp={maxTimestamp}\n        threadId={threadId}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName(\n          'quick-reaction',\n          'no-selection',\n          isQuickReactionVisible && !hasActiveReactions && 'visible',\n        )}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        effectEmoji={effect?.emoticon}\n        onClick={handleMetaClick}\n        onEffectClick={handleEffectClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n        paidMessageStars={paidMessageStarsInMeta}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        threadId={threadId}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n        isAccountFrozen={isAccountFrozen}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasForwardedCustomShape && 'forwarded-custom-shape',\n      hasSubheader && 'with-subheader',\n    );\n    const hasCustomAppendix = isLastInGroup\n      && (!hasText || (isInvertedMedia && !hasFactCheck && reactionsPosition !== 'inside')) && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && shouldRenderSenderName() && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasForwardedCustomShape && (\n              <div className=\"forward-custom-shape-subheader\">\n                <div className=\"message-title\">\n                  {renderForwardTitle()}\n                </div>\n                {renderSenderName(true, true)}\n              </div>\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                isMediaNsfw={isReplyMediaNsfw}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && observeIntersectionForLoading && observeIntersectionForPlaying && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={shouldPlayEffect}\n            withEffect={withAnimatedEffects}\n            isMediaNsfw={isMediaNsfw}\n            onStopEffect={hideEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withAnimatedEffects && isChatWithUser && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withAnimatedEffects && isChatWithUser && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {withAnimatedEffects && effect && !isLocal && (\n          <MessageEffect\n            shouldPlay={shouldPlayEffect}\n            messageId={message.id}\n            isMirrored={!message.isOutgoing}\n            effect={effect}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onStop={hideEffect}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && isRoundVideo && !withVoiceTranscription && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n            onHideTranscription={setTranscriptionHidden}\n            isTranscriptionError={isTranscriptionError}\n            isTranscribed={Boolean(transcribedText)}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribing={isTranscribing}\n          />\n        )}\n        {(audio || voice || withVoiceTranscription) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            document={document}\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleDocumentClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutFiles={shouldWarnAboutFiles}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {todo && (\n          <TodoList message={message} todoList={todo} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            threadId={threadId}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? oldLang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {isInvertedMedia && renderInvertedMediaContent(hasCustomAppendix)}\n\n        {!isInvertedMedia && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {hasText && !hasAnimatedEmoji && (\n              <div className={textContentClass} dir=\"auto\">\n                {renderMessageText()}\n                {isTranslationPending && (\n                  <div className=\"translation-animation\">\n                    <div className=\"text-loading\">\n                      {renderMessageText(true)}\n                    </div>\n                  </div>\n                )}\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {metaPosition === 'in-text' && renderReactionsAndMeta()}\n              </div>\n            )}\n            {renderWebPage()}\n          </>\n        )}\n\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderInvertedMediaContent(hasCustomAppendix: boolean) {\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n    );\n    const footerClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    const hasMediaAfterText = isAlbum || (!isAlbum && photo) || (!isAlbum && video && !isRoundVideo);\n    const hasContentAfterText = hasMediaAfterText || (!hasAnimatedEmoji && hasFactCheck);\n    const isMetaInText = metaPosition === 'in-text';\n\n    return (\n      <>\n        {renderWebPage()}\n        {hasText && !hasAnimatedEmoji && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {!hasContentAfterText && isMetaInText && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {hasContentAfterText && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {!hasAnimatedEmoji && (\n              <div className={footerClass} dir=\"auto\">\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {isMetaInText && renderReactionsAndMeta()}\n              </div>\n            )}\n          </>\n        )}\n\n      </>\n    );\n  }\n\n  function renderWebPage() {\n    const messageWebPage = getMessageWebPage(message);\n    if (!messageWebPage || !webPage) return undefined;\n    return (\n      <WebPage\n        messageWebPage={messageWebPage}\n        webPage={webPage}\n        message={message}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        noAvatars={noAvatars}\n        canAutoLoad={canAutoLoadMedia}\n        canAutoPlay={canAutoPlayMedia}\n        asForwarded={asForwarded}\n        isDownloading={isDownloading}\n        isProtected={isProtected}\n        theme={theme}\n        story={webPageStory}\n        isConnected={isConnected}\n        lastPlaybackTimestamp={lastPlaybackTimestamp}\n        backgroundEmojiId={messageColorPeer?.color?.backgroundEmojiId}\n        shouldWarnAboutFiles={shouldWarnAboutFiles}\n        autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n        onAudioPlay={handleAudioPlay}\n        onMediaClick={handleMediaClick}\n        onDocumentClick={handleDocumentClick}\n        onCancelMediaTransfer={handleCancelUpload}\n      />\n    );\n  }\n\n  function renderInvertibleMediaContent(hasCustomAppendix: boolean) {\n    const content = (\n      <>\n        {isAlbum && observeIntersectionForLoading && (\n          <Album\n            album={album}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            messageText={text?.text}\n            photo={photo}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            isMediaNsfw={isMediaNsfw}\n            forcedWidth={contentWidth}\n            onClick={handlePhotoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && !isRoundVideo && (\n          <Video\n            video={video}\n            isOwn={isOwn}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            isMediaNsfw={isMediaNsfw}\n            lastPlaybackTimestamp={lastPlaybackTimestamp}\n            onClick={handleVideoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n      </>\n    );\n\n    if (paidMedia) {\n      return (\n        <PaidMediaOverlay chatId={chatId} messageId={messageId} paidMedia={paidMedia} isOutgoing={isOwn}>\n          {content}\n        </PaidMediaOverlay>\n      );\n    }\n\n    return content;\n  }\n\n  function shouldRenderSenderName() {\n    const media = photo || video || location || paidMedia;\n    return !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n  }\n\n  function renderForwardTitle() {\n    return (\n      <span className=\"forward-title-container\">\n        {asForwarded && (\n          <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n        )}\n        {asForwarded && (\n          <span className=\"forward-title\">\n            {oldLang('ForwardedFrom')}\n          </span>\n        )}\n      </span>\n    );\n  }\n\n  const handleSuggestedMessageButton = useLastCallback((payload: ActionPayloads['clickBotInlineButton']) => {\n    if (payload.button.type !== 'suggestedMessage') return;\n    if (payload.button.buttonType === 'approve') {\n      openSuggestedPostApprovalModal({\n        chatId,\n        messageId: message.id,\n      });\n      return;\n    }\n\n    if (payload.button.buttonType === 'decline') {\n      openDeclineDialog();\n      return;\n    }\n\n    clickSuggestedMessageButton({\n      ...payload,\n      button: payload.button,\n    });\n  });\n\n  const handleDeclineReasonChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setDeclineReason(e.target.value);\n  });\n\n  const handleDeclineConfirm = useLastCallback(() => {\n    rejectSuggestedPost({\n      chatId,\n      messageId: message.id,\n      rejectComment: declineReason.trim() || undefined,\n    });\n    closeDeclineDialog();\n    setDeclineReason('');\n  });\n\n  function renderSenderName(\n    shouldSkipRenderForwardTitle: boolean = false, shouldSkipRenderAdminTitle: boolean = false,\n  ) {\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getPeerFullTitle(oldLang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getPeerFullTitle(oldLang, originSender);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    const shouldRenderForwardAvatar = asForwarded && senderPeer;\n    const hasBotSenderUsername = botSender?.hasUsername;\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name-container',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            dir=\"ltr\"\n          >\n            {!shouldSkipRenderForwardTitle && renderForwardTitle()}\n            <span className=\"message-title-name\">\n              {storyData && <Icon name=\"play-story\" />}\n              {shouldRenderForwardAvatar && (\n                <Avatar\n                  className=\"forward-avatar\"\n                  peer={senderPeer}\n                  size=\"micro\"\n                />\n              )}\n              <span\n                className=\"sender-title\"\n                onClick={handleSenderClick}\n              >\n                {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n              </span>\n              {!asForwarded && senderEmojiStatus && (\n                <CustomEmoji\n                  documentId={senderEmojiStatus.documentId}\n                  className=\"no-selection\"\n                  loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                  observeIntersectionForLoading={observeIntersectionForLoading}\n                  observeIntersectionForPlaying={observeIntersectionForPlaying}\n                />\n              )}\n              {!asForwarded && !senderEmojiStatus && senderIsPremium && <StarIcon />}\n              {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n            </span>\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender?.hasUsername && (\n          <span className=\"interactive\">\n            <span className=\"via\">{oldLang('ViaBot')}</span>\n            <span\n              className=\"sender-title\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${getMainUsername(botSender)}`)}\n            </span>\n          </span>\n        )}\n        <div className=\"title-spacer\" />\n        {!shouldSkipRenderAdminTitle && !hasBotSenderUsername ? (forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{oldLang('DiscussChannel')}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || oldLang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined) : undefined}\n        {canShowSenderBoosts && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const shouldRenderSuggestedPostButtons = message.suggestedPostInfo\n    && !message.isOutgoing && !message.suggestedPostInfo.isAccepted && !message.suggestedPostInfo.isRejected;\n\n  const isSuggestedPostExpired = useMemo(() => {\n    if (!message.suggestedPostInfo?.scheduleDate || !minFutureTime) return false;\n    const now = getServerTime();\n    return message.suggestedPostInfo.scheduleDate <= now + minFutureTime;\n  }, [message.suggestedPostInfo, minFutureTime]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control no-selection\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName(\n            'message-select-control group-select no-selection', isGroupSelected && 'is-selected',\n          )}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <Icon name=\"select\" />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('message-content-wrapper',\n          contentClassName.includes('text') && 'can-select-text',\n          contentClassName.includes('giveaway') && 'giveaway-result-content')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {shouldRenderSenderName() && renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && (\n            <div className={buildClassName(\n              'message-action-buttons',\n              isLoadingComments && 'message-action-buttons-shown',\n            )}\n            >\n              {canMarkAsRead && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Done\"\n                  onClick={handleMarkAsRead}\n                >\n                  <Icon name=\"check\" />\n                </Button>\n              )}\n              {!isInFocusList && (\n                <>\n                  {withCommentButton && isCustomShape && (\n                    <CommentButton\n                      threadInfo={repliesThreadInfo}\n                      disabled={noComments}\n                      isLoading={isLoadingComments}\n                      isCustomShape\n                      asActionButton\n                    />\n                  )}\n                  {canForward && (\n                    <Button\n                      className=\"message-action-button\"\n                      color=\"translucent-white\"\n                      round\n                      size=\"tiny\"\n                      ariaLabel={oldLang('lng_context_forward_msg')}\n                      onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n                    >\n                      <Icon name=\"share-filled\" />\n                    </Button>\n                  )}\n                  {canFocus && (\n                    <Button\n                      className=\"message-action-button\"\n                      color=\"translucent-white\"\n                      round\n                      size=\"tiny\"\n                      ariaLabel={lang('FocusMessage')}\n                      onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n                    >\n                      <Icon name=\"arrow-right\" />\n                    </Button>\n                  )}\n                </>\n              )}\n            </div>\n          )}\n          {withCommentButton && !isCustomShape && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {shouldRenderSuggestedPostButtons && (\n          <InlineButtons\n            message={{\n              ...message,\n              inlineButtons: [\n                [\n                  {\n                    type: 'suggestedMessage',\n                    buttonType: 'decline',\n                    text: lang('SuggestedPostDecline'),\n                  },\n                  {\n                    type: 'suggestedMessage',\n                    buttonType: 'approve',\n                    text: lang('SuggestedPostApprove'),\n                    disabled: isSuggestedPostExpired,\n                  },\n                ],\n                [\n                  {\n                    type: 'suggestedMessage',\n                    buttonType: 'suggestChanges',\n                    text: lang('SuggestedPostSuggestChanges'),\n                  },\n                ],\n              ],\n            }}\n            onClick={handleSuggestedMessageButton}\n          />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            threadId={threadId}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n            isAccountFrozen={isAccountFrozen}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n      {isDeclineDialogOpen && (\n        <ConfirmDialog\n          isOpen={isDeclineDialogOpen}\n          onClose={closeDeclineDialog}\n          title={lang('SuggestedPostDecline')}\n          confirmLabel={lang('SuggestedPostDecline')}\n          confirmHandler={handleDeclineConfirm}\n          confirmIsDestructive\n        >\n          <div className=\"decline-dialog-question\">\n            {renderText(lang('DeclinePostDialogQuestion', {\n              sender: sender ? getPeerFullTitle(oldLang, sender) : '',\n            }, { withNodes: true, withMarkdown: true }))}\n          </div>\n          <InputText\n            placeholder={lang('DeclineReasonPlaceholder')}\n            value={declineReason}\n            onChange={handleDeclineReasonChange}\n            maxLength={MAX_REASON_LENGTH}\n          />\n        </ConfirmDialog>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): Complete<StateProps> => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId, effectId,\n      paidMessageStars,\n    } = message;\n\n    const webPage = selectFullWebPageFromMessage(global, message);\n\n    const { shouldWarnAboutFiles } = selectSharedSettings(global);\n    const isChatWithUser = isUserId(chatId);\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isChatWithUser ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = selectReplyMessage(global, message);\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectSender(global, replyMessage)\n      : forwardHeader && !isSystemBotChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isSystemBotChat && !isAnonymousForwards && replyMessageChat\n      && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || selectIsChatRestricted(global, replyMessageChat.id));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n      quote: focusedQuote, quoteOffset: focusedQuoteOffset, scrollTargetPosition,\n    } = (isFocused && focusedMessage) || {};\n\n    const middleSearch = selectCurrentMiddleSearch(global);\n    const highlight = middleSearch?.results?.query\n      && `${middleSearch.isHashtag ? '#' : ''}${middleSearch.results.query}`;\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const canReply = messageListType === 'thread' && selectCanReplyToMessage(global, message, threadId);\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = selectMessageDownloadableMedia(global, message);\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? selectTopicFromMessage(global, message) : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    const effect = effectId ? global.availableEffectById[effectId] : undefined;\n\n    const poll = selectPollFromMessage(global, message);\n\n    const maxTimestamp = selectMessageTimestampableDuration(global, message);\n\n    const lastPlaybackTimestamp = selectMessageLastPlaybackTimestamp(global, chatId, message.id);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const minFutureTime = global.appConfig.starsSuggestedPostFutureMin;\n\n    const isMediaNsfw = selectIsMediaNsfw(global, message);\n    const isReplyMediaNsfw = replyMessage && selectIsMediaNsfw(global, replyMessage);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withAnimatedEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutFiles,\n      outgoingStatus: isOutgoing ? selectOutgoingStatus(global, message, messageListType === 'scheduled') : undefined,\n      uploadProgress: typeof uploadProgress === 'number' ? uploadProgress : undefined,\n      focusDirection: isFocused ? focusDirection : undefined,\n      noFocusHighlight: isFocused ? noFocusHighlight : undefined,\n      isResizingContainer: isFocused ? isResizingContainer : undefined,\n      focusedQuote: isFocused ? focusedQuote : undefined,\n      focusedQuoteOffset: isFocused ? focusedQuoteOffset : undefined,\n      scrollTargetPosition: isFocused ? scrollTargetPosition : undefined,\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n      minFutureTime,\n      effect,\n      poll,\n      maxTimestamp,\n      lastPlaybackTimestamp,\n      paidMessageStars,\n      isChatWithUser,\n      isAccountFrozen,\n      isMediaNsfw,\n      isReplyMediaNsfw,\n      webPage,\n    };\n  },\n)(Message));\n","import { getActions } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser, ApiWebPage } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMainUsername, getMessagePhoto, getWebPagePhoto, getWebPageVideo } from '../../../../global/helpers';\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\nimport { tryParseDeepLink } from '../../../../util/deepLinkParser';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers({\n  lang,\n  selectMessage,\n  message,\n  webPage,\n  chatId,\n  threadId,\n  isInDocumentGroup,\n  asForwarded,\n  isScheduled,\n  album,\n  senderPeer,\n  botSender,\n  messageTopic,\n  isTranslatingChat,\n  story,\n  isReplyPrivate,\n  isRepliesChat,\n  isSavedMessages,\n  lastPlaybackTimestamp,\n  isInFocusList,\n}: {\n  lang: OldLangFn;\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void;\n  message: ApiMessage;\n  webPage?: ApiWebPage;\n  chatId: string;\n  threadId: ThreadId;\n  isInDocumentGroup: boolean;\n  asForwarded?: boolean;\n  isScheduled?: boolean;\n  album?: IAlbum;\n  avatarPeer?: ApiPeer;\n  senderPeer?: ApiPeer;\n  botSender?: ApiUser;\n  messageTopic?: ApiTopic;\n  isTranslatingChat?: boolean;\n  story?: ApiStory;\n  isReplyPrivate?: boolean;\n  isRepliesChat?: boolean;\n  isSavedMessages?: boolean;\n  lastPlaybackTimestamp?: number;\n  isInFocusList?: boolean;\n}) {\n  const {\n    openChat, openChatWithDraft, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer, searchChatMediaMessages, deleteMessages, removeFromFocusList\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId, content: { paidMedia, video },\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText, quoteOffset,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChatWithDraft({\n      chatId,\n      threadId,\n      text: {\n        text: `@${getMainUsername(botSender)} `,\n      },\n    });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    if (isRepliesChat && replyToPeerId && replyToTopId) {\n      openThread({\n        isComments: true,\n        originChannelId: replyToPeerId,\n        originMessageId: replyToTopId,\n        focusMessageId: replyToMsgId,\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text, quoteOffset }),\n    });\n  });\n\n  const handleDocumentClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const openMediaViewerWithPhotoOrVideo = useLastCallback((withDynamicLoading: boolean): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n    if (withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    }\n\n    const parsedLink = webPage?.url && tryParseDeepLink(webPage.url);\n\n    const videoContent = video || getWebPageVideo(webPage);\n    const webpageTimestamp = parsedLink && 'timestamp' in parsedLink ? parsedLink.timestamp : undefined;\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n      timestamp: lastPlaybackTimestamp || videoContent?.timestamp || webpageTimestamp,\n      withDynamicLoading,\n    });\n  });\n  const handlePhotoMediaClick = useLastCallback((): void => {\n    const withDynamicLoading = !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n  const handleVideoMediaClick = useLastCallback(() => {\n    const isGif = message.content?.video?.isGif;\n    const withDynamicLoading = !isGif && !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    const photo = getMessagePhoto(message) || getWebPagePhoto(webPage);\n    if (photo) {\n      handlePhotoMediaClick();\n    }\n\n    handleVideoMediaClick();\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number, albumIndex?: number): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n\n    searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      mediaIndex: albumIndex,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n      withDynamicLoading: !paidMedia,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleMarkAsRead = useLastCallback(() => {\n    if (isInFocusList) {\n      removeFromFocusList({ chatId, messageId });\n    } else {\n      deleteMessages({ messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    const originalChatId = (isSavedMessages && forwardInfo!.savedFromPeerId) || forwardInfo!.fromChatId!;\n\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: originalChatId, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      if (isRepliesChat) {\n        openThread({\n          isComments: true,\n          originChannelId: replyToPeerId,\n          originMessageId: replyToTopId,\n          focusMessageId: forwardInfo!.fromMessageId!,\n        });\n      } else {\n        focusMessage({\n          chatId: replyToPeerId,\n          threadId: replyToTopId,\n          messageId: forwardInfo!.fromMessageId!,\n        });\n      }\n    } else {\n      focusMessage({\n        chatId: originalChatId, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleDocumentClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleMarkAsRead,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage, ApiPoll, ApiWebPage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\nimport getSingularPaidMedia from './getSingularPaidMedia';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    poll,\n    webPage,\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasBottomCommentButton,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n    hasOutsideReactions,\n  }: {\n    poll?: ApiPoll;\n    webPage?: ApiWebPage;\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasBottomCommentButton?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n    hasOutsideReactions?: boolean;\n  } = {},\n) {\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const content = getMessageContent(message);\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo,\n    audio, voice, document, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = content;\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n  const hasFactCheck = Boolean(message.factCheck?.text);\n\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isInvertedMedia = message.isInvertedMedia;\n  const isInvertibleMedia = photo || (video && !isRoundVideo) || album || webPage;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia || paidMedia;\n  const hasText = text || location?.mediaType === 'venue' || isGeoLiveActive || hasFactCheck;\n  const isMediaWithNoText = isMedia && !hasText;\n  const hasInlineKeyboard = Boolean(message.inlineButtons);\n  const isViaBot = Boolean(message.viaBotId);\n\n  const hasFooter = (() => {\n    if (isInvertedMedia && isInvertibleMedia) {\n      if (hasReactions && !hasOutsideReactions) return true;\n      if (hasFactCheck) return true;\n      if (webPage && hasText) return true;\n      return false;\n    }\n    return hasText;\n  })();\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && text?.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (text.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${text.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (!Object.keys(content).length) {\n    classNames.push('unsupported');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n\n    if (isRoundVideo) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia && !withVoiceTranscription) {\n    classNames.push('media');\n  } else if (video) {\n    classNames.push('video');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage?.webpageType === 'full') {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n\n    if (webPage.gift) {\n      classNames.push('gift');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (invoice && invoice.photo) {\n    classNames.push('has-photo');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (hasOutsideReactions) {\n    classNames.push('has-outside-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText\n      || forceSenderName || hasFactCheck || withVoiceTranscription) {\n      classNames.push('has-solid-background');\n    }\n\n    if (hasFactCheck) {\n      classNames.push('has-fact-check');\n    }\n\n    if (isLastInGroup && !hasInlineKeyboard && (photo || !isMediaWithNoText || hasBottomCommentButton)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  if (isInvertibleMedia && isInvertedMedia) {\n    classNames.push('is-inverted-media');\n  }\n\n  if (hasFooter) {\n    classNames.push('has-footer');\n  } else {\n    classNames.push('no-footer');\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat,\n  ApiInputSuggestedPostInfo,\n  ApiMessage, ApiPeer, ApiReplyInfo, MediaContainer,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ChatTranslatedMessages } from '../../../types';\nimport type { IconName } from '../../../types/icons';\n\nimport { TON_CURRENCY_CODE } from '../../../config';\nimport {\n  getMessageIsSpoiler,\n  getMessageRoundVideo,\n  isChatChannel,\n  isChatGroup,\n  isMessageTranslatable,\n} from '../../../global/helpers';\nimport { getMediaContentTypeDescription } from '../../../global/helpers/messageSummary';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatScheduledDateTime } from '../../../util/dates/dateFormat';\nimport { isUserId } from '../../../util/entities/ids';\nimport freezeWhenClosed from '../../../util/hoc/freezeWhenClosed';\nimport { formatStarsAsIcon, formatTonAsIcon } from '../../../util/localization/format';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport renderText from '../helpers/renderText';\nimport { renderTextWithEntities } from '../helpers/renderTextWithEntities';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useMessageTranslation from '../../middle/message/hooks/useMessageTranslation';\n\nimport RippleEffect from '../../ui/RippleEffect';\nimport Icon from '../icons/Icon';\nimport MediaSpoiler from '../MediaSpoiler';\nimport MessageSummary from '../MessageSummary';\nimport PeerColorWrapper from '../PeerColorWrapper';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  replyInfo?: ApiReplyInfo;\n  suggestedPostInfo?: ApiInputSuggestedPostInfo;\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  senderChat?: ApiChat;\n  forwardSender?: ApiPeer;\n  composerForwardSenders?: ApiPeer[];\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  isInComposer?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  requestedChatTranslationLanguage?: string;\n  isOpen?: boolean;\n  isMediaNsfw?: boolean;\n  noCaptions?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: ((e: React.MouseEvent) => void);\n};\n\nconst NBSP = '\\u00A0';\nconst EMOJI_SIZE = 17;\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  replyInfo,\n  suggestedPostInfo,\n  sender,\n  senderChat,\n  forwardSender,\n  composerForwardSenders,\n  title,\n  customText,\n  isProtected,\n  isInComposer,\n  noUserColors,\n  chatTranslations,\n  requestedChatTranslationLanguage,\n  isMediaNsfw,\n  noCaptions,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const containedMedia: MediaContainer | undefined = useMemo(() => {\n    const media = (replyInfo?.type === 'message' && replyInfo.replyMedia) || message?.content;\n    if (!media) {\n      return undefined;\n    }\n\n    return {\n      content: media,\n    };\n  }, [message, replyInfo]);\n\n  const gif = containedMedia?.content?.video?.isGif ? containedMedia.content.video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaHash = useMessageMediaHash(containedMedia, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash, !isIntersecting);\n  const mediaThumbnail = useThumbnail(containedMedia);\n\n  const isRoundVideo = Boolean(containedMedia && getMessageRoundVideo(containedMedia));\n  const isSpoiler = Boolean(containedMedia && getMessageIsSpoiler(containedMedia)) || isMediaNsfw;\n  const isQuote = Boolean(replyInfo?.type === 'message' && replyInfo.isQuote);\n  const replyForwardInfo = replyInfo?.type === 'message' ? replyInfo.replyFrom : undefined;\n\n  const shouldTranslate = message && isMessageTranslatable(message);\n  const { translatedText } = useMessageTranslation(\n    chatTranslations, message?.chatId, shouldTranslate ? message?.id : undefined, requestedChatTranslationLanguage,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const senderTitle = sender ? getPeerTitle(oldLang, sender)\n    : (replyForwardInfo?.hiddenUserName || message?.forwardInfo?.hiddenUserName);\n\n  const forwardSendersTitle = useMemo(() => {\n    if (!composerForwardSenders) return undefined;\n\n    const peerTitles = composerForwardSenders.map((peer) => getPeerTitle(lang, peer)).filter(Boolean);\n    return lang.conjunction(peerTitles);\n  }, [composerForwardSenders, lang]);\n\n  const senderChatTitle = senderChat ? getPeerTitle(oldLang, senderChat) : undefined;\n  const forwardSenderTitle = forwardSender ? getPeerTitle(oldLang, forwardSender)\n    : message?.forwardInfo?.hiddenUserName;\n  const areSendersSame = sender && sender.id === forwardSender?.id;\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderTextContent() {\n    const isFree = !(suggestedPostInfo?.price?.amount);\n    if (suggestedPostInfo) {\n      if (isFree && !suggestedPostInfo.scheduleDate) {\n        return lang('ComposerEmbeddedMessageSuggestedPostDescription');\n      }\n      const priceText = suggestedPostInfo.price\n        ? (suggestedPostInfo.price.currency === TON_CURRENCY_CODE\n          ? formatTonAsIcon(lang, suggestedPostInfo.price.amount, {\n            className: 'suggested-price-ton-icon',\n            shouldConvertFromNanos: true,\n          })\n          : formatStarsAsIcon(lang, suggestedPostInfo.price.amount, {\n            className: 'suggested-price-star-icon',\n          }))\n        : '';\n      const scheduleText = suggestedPostInfo.scheduleDate\n        ? formatScheduledDateTime(suggestedPostInfo.scheduleDate, lang, oldLang)\n        : '';\n      if (priceText && !scheduleText) {\n        return (\n          <span className=\"suggested-post-price-wrapper\">\n            {\n              lang('TitleSuggestedPostAmountForAnyTime',\n                { amount: priceText },\n                {\n                  withNodes: true,\n                  withMarkdown: true,\n                })\n            }\n          </span>\n        );\n      }\n      return (\n        <span className=\"suggested-post-price-wrapper\">\n          {priceText}\n          {scheduleText ? ` • ${scheduleText}` : ''}\n        </span>\n      );\n    }\n\n    if (replyInfo?.type === 'message' && replyInfo.quoteText) {\n      return renderTextWithEntities({\n        text: replyInfo.quoteText.text,\n        entities: replyInfo.quoteText.entities,\n        asPreview: true,\n        emojiSize: EMOJI_SIZE,\n      });\n    }\n\n    if (!message) {\n      return customText || renderMediaContentType(containedMedia) || NBSP;\n    }\n\n    if (noCaptions) {\n      return lang('EmbeddedMessageNoCaption');\n    }\n\n    return (\n      <MessageSummary\n        message={message}\n        noEmoji={Boolean(mediaThumbnail)}\n        translatedText={translatedText}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        emojiSize={EMOJI_SIZE}\n      />\n    );\n  }\n\n  function renderMediaContentType(media?: MediaContainer) {\n    if (!media || media.content.text) return NBSP;\n    const description = getMediaContentTypeDescription(lang, media.content, {});\n    if (!description) return NBSP;\n    return (\n      <span>\n        {renderText(description)}\n      </span>\n    );\n  }\n\n  function checkShouldRenderSenderTitle() {\n    if (!senderChat) return true;\n    if (isUserId(senderChat?.id)) return true;\n    if (senderChat.id === sender?.id) return false;\n    return true;\n  }\n  function renderSender() {\n    if (title) {\n      return renderText(title);\n    }\n\n    if (suggestedPostInfo && replyInfo) {\n      return lang('TitleSuggestedChanges');\n    }\n\n    if (suggestedPostInfo) {\n      return lang('ComposerEmbeddedMessageSuggestedPostTitle');\n    }\n\n    if (!senderTitle && !forwardSendersTitle) {\n      return NBSP;\n    }\n\n    let icon: IconName | undefined;\n    if (senderChat) {\n      if (isChatChannel(senderChat)) {\n        icon = 'channel-filled';\n      }\n\n      if (isChatGroup(senderChat)) {\n        icon = 'group-filled';\n      }\n    }\n\n    const isReplyToQuote = isInComposer && Boolean(replyInfo && 'quoteText' in replyInfo && replyInfo?.quoteText);\n\n    return (\n      <span className=\"embedded-sender-wrapper\">\n        {checkShouldRenderSenderTitle() && (\n          <span className=\"embedded-sender\">\n            {!composerForwardSenders && senderTitle\n              && renderText(isReplyToQuote ? oldLang('ReplyToQuote', senderTitle) : senderTitle)}\n            {forwardSendersTitle && renderText(lang('ComposerTitleForwardFrom', {\n              users: forwardSendersTitle,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            }))}\n          </span>\n        )}\n        {icon && <Icon name={icon} className=\"embedded-chat-icon\" />}\n        {icon && senderChatTitle && (\n          <span className=\"embedded-sender-chat\">\n            {renderText(senderChatTitle)}\n          </span>\n        )}\n      </span>\n    );\n  }\n\n  function renderForwardSender() {\n    return forwardSenderTitle && !areSendersSame && (\n      <span className=\"embedded-forward-sender-wrapper\">\n        <Icon name={forwardSender ? 'share-filled' : 'forward'} className=\"embedded-origin-icon\" />\n        <span className=\"forward-sender-title\">\n          {renderText(forwardSenderTitle)}\n        </span>\n      </span>\n    );\n  }\n\n  return (\n    <PeerColorWrapper\n      peer={sender}\n      emojiIconClassName=\"EmbeddedMessage--background-icons\"\n      ref={ref}\n      shouldReset\n      noUserColors={noUserColors}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        isQuote && 'is-quote',\n        mediaThumbnail && 'with-thumb',\n        'no-selection',\n        composerForwardSenders && 'is-input-forward',\n        suggestedPostInfo && 'is-suggested-post',\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      <div className=\"hover-effect\" />\n      <RippleEffect />\n      {mediaThumbnail && renderPictogram(\n        mediaThumbnail, mediaBlobUrl, isVideoThumbnail, isRoundVideo, isProtected, isSpoiler,\n      )}\n      <div className=\"message-text\">\n        <p className={buildClassName('embedded-text-wrapper', isQuote && 'multiline')}>\n          {renderTextContent()}\n        </p>\n        <div className=\"message-title\">\n          {renderSender()}\n          {renderForwardSender()}\n        </div>\n      </div>\n    </PeerColorWrapper>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isFullVideo?: boolean,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n  const shouldRenderVideo = isFullVideo && blobUrl;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && !shouldRenderVideo && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      {!isSpoiler && shouldRenderVideo && (\n        <video\n          src={blobUrl}\n          width={width}\n          height={height}\n          playsInline\n          disablePictureInPicture\n          className=\"pictogram\"\n        />\n      )}\n      <MediaSpoiler\n        thumbDataUri={shouldRenderVideo ? thumbDataUri : srcUrl}\n        isVisible={Boolean(isSpoiler)}\n        width={width}\n        height={height}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport const ClosableEmbeddedMessage = freezeWhenClosed(EmbeddedMessage);\n\nexport default EmbeddedMessage;\n","import { useMemo } from '../lib/teact/teact';\r\n\r\nimport type { GlobalState } from '../global/types';\r\nimport type { Workspace } from '../types';\r\nimport useSelector from './data/useSelector';\r\nimport { useLocalStorage } from './useStorage';\r\n\r\nfunction selectCurrentUserId(global: GlobalState) {\r\n  return global.currentUserId;\r\n}\r\n\r\nexport function useWorkspaceStorage() {\r\n  const currentUserId = useSelector(selectCurrentUserId);\r\n\r\n  const workspacesKey = useMemo(() => {\r\n    return currentUserId ? `workspaces_${currentUserId}` : 'workspaces';\r\n  }, [currentUserId]);\r\n\r\n  const workspaceIdKey = useMemo(() => {\r\n    return currentUserId ? `currentWorkspaceId_${currentUserId}` : 'currentWorkspaceId';\r\n  }, [currentUserId]);\r\n\r\n  const excludeOtherWorkspacesKey = useMemo(() => {\r\n    return currentUserId ? `excludeOtherWorkspaces_${currentUserId}` : 'excludeOtherWorkspaces';\r\n  }, [currentUserId]);\r\n\r\n  const [savedWorkspaces, setSavedWorkspaces] = useLocalStorage<Workspace[]>({\r\n    key: workspacesKey,\r\n    initValue: [],\r\n  });\r\n  const [\r\n    currentWorkspaceId,\r\n    setCurrentWorkspaceId,\r\n  ] = useLocalStorage<string>({\r\n    key: workspaceIdKey,\r\n    initValue: \"0\",\r\n  });\r\n\r\n  const [excludeOtherWorkspaces, setExcludeOtherWorkspaces] = useLocalStorage<boolean>({\r\n    key: excludeOtherWorkspacesKey,\r\n    initValue: false,\r\n  });\r\n\r\n  return {\r\n    savedWorkspaces,\r\n    setSavedWorkspaces,\r\n    currentWorkspaceId,\r\n    setCurrentWorkspaceId,\r\n    excludeOtherWorkspaces,\r\n    setExcludeOtherWorkspaces,\r\n  };\r\n}\r\n","import { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useAsyncRendering<T extends any[]>(dependencies: T, delay?: number) {\n  const isDisabled = delay === undefined;\n  const shouldRenderRef = useRef(isDisabled);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  useSyncEffect(() => {\n    if (isDisabled) {\n      return;\n    }\n\n    shouldRenderRef.current = false;\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = undefined;\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, dependencies);\n\n  useEffect(() => {\n    if (isDisabled || shouldRenderRef.current) {\n      return;\n    }\n\n    const exec = () => {\n      shouldRenderRef.current = true;\n      forceUpdate();\n    };\n\n    if (delay > 0) {\n      timeoutRef.current = window.setTimeout(exec, delay);\n    } else {\n      exec();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, dependencies);\n\n  return shouldRenderRef.current;\n}\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.target = '_blank';\n  link.rel = 'noopener noreferrer';\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MuteChatModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MuteChatModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MuteChatModal = useModuleLoader(Bundles.Extra, 'MuteChatModal', !isOpen);\n\n  return MuteChatModal ? <MuteChatModal {...props} /> : undefined;\n};\n\nexport default MuteChatModalAsync;\n","import { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableEffect } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOverlayPosition from './hooks/useOverlayPosition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport Portal from '../../ui/Portal';\n\nimport styles from './MessageEffect.module.scss';\n\ntype OwnProps = {\n  messageId?: number;\n  isMirrored?: boolean;\n  effect: ApiAvailableEffect;\n  shouldPlay?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onStop?: VoidFunction;\n};\n\nconst EFFECT_SIZE = 256;\n\nconst MessageEffect = ({\n  messageId,\n  isMirrored,\n  effect,\n  shouldPlay,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onStop,\n}: OwnProps) => {\n  const anchorRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const canLoad = useIsIntersecting(anchorRef, observeIntersectionForLoading);\n  const canPlay = useIsIntersecting(anchorRef, observeIntersectionForPlaying);\n\n  const [isPlaying, startPlaying, stopPlaying] = useFlag();\n  const [isPositionUpdateRequired, requirePositionUpdate, resetPositionUpdate] = useFlag();\n\n  const effectHash = getEffectHash(effect);\n  const effectBlob = useMedia(effectHash, !canLoad);\n\n  const handleEnded = useLastCallback(() => {\n    stopPlaying();\n    onStop?.();\n  });\n\n  const updatePosition = useOverlayPosition({\n    anchorRef,\n    overlayRef: ref,\n    isMirrored,\n    isDisabled: !isPlaying,\n    isForMessageEffect: true,\n    id: effect.id,\n  });\n\n  useEffect(() => {\n    if (isPositionUpdateRequired) updatePosition();\n    resetPositionUpdate();\n  }, [updatePosition, resetPositionUpdate, isPositionUpdateRequired]);\n\n  useEffect(() => {\n    if (canPlay && shouldPlay && effectBlob) {\n      startPlaying();\n      requirePositionUpdate();\n    }\n  }, [canPlay, effectBlob, shouldPlay, updatePosition]);\n\n  const effectClassName = buildClassName(\n    styles.root,\n    isMirrored && styles.mirror,\n  );\n\n  return (\n    <div className={buildClassName(styles.anchor, isMirrored && styles.mirrorAnchor)} ref={anchorRef}>\n      {isPlaying && (\n        <Portal>\n          <AnimatedSticker\n            ref={ref}\n            key={`effect-${messageId ?? effect.id}`}\n            className={effectClassName}\n            tgsUrl={effectBlob}\n            size={EFFECT_SIZE}\n            play\n            isLowPriority\n            noLoop\n            forceAlways\n            onEnded={handleEnded}\n          />\n        </Portal>\n      )}\n    </div>\n  );\n};\n\nfunction getEffectHash(effect: ApiAvailableEffect) {\n  if (effect.effectAnimationId) {\n    return `sticker${effect.effectAnimationId}`;\n  }\n\n  return `sticker${effect.effectStickerId}?size=f`;\n}\n\nexport default memo(MessageEffect);\n","// extracted by mini-css-extract-plugin\nexport default {\"anchor\":\"IYu2f7FM\",\"mirrorAnchor\":\"GsTZawTE\",\"root\":\"McmbiWZE\",\"mirror\":\"wNvU2uqi\"};","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatFolderModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatFolderModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatFolderModal = useModuleLoader(Bundles.Extra, 'ChatFolderModal', !isOpen);\n\n  return ChatFolderModal ? <ChatFolderModal {...props} /> : undefined;\n};\n\nexport default ChatFolderModalAsync;\n"],"names":["Keys","memo","MessageOutgoingStatus","status","_jsx","className","children","Transition","name","activeKey","Icon","withGlobal","global","userId","chat","selectCurrentChat","user","selectUser","contactName","getUserFirstOrLastName","undefined","DeleteMemberModal","isOpen","onClose","deleteChatMember","getActions","lang","useOldLang","handleDeleteChatMember","useCallback","chatId","id","ConfirmDialog","title","textParts","renderText","confirmLabel","confirmHandler","confirmIsDestructive","IGNORE_TAGS","Set","handlers","createCallbackManager","useHotkeys","hotkeys","useEffect","entries","Object","addCallback","e","target","HTMLElement","has","tagName","shouldFireEvent","forEach","hotkey","handler","event","alt","ctrl","meta","mod","shift","key","altKey","ctrlKey","metaKey","shiftKey","pressedKey","Boolean","toLowerCase","code","replace","isExactHotkey","keys","split","map","part","trim","modifiers","includes","reservedKeys","find","parseHotkey","getHotkeyMatcher","document","documentElement","addEventListener","runCallbacks","THROTTLE","RE_ENDS_ON_EMOJI","RegExp","twemojiRegex","source","RE_ENDS_ON_EMOJI_IMG","EMOJI_IMG_REGEX","useCustomEmojiTooltip","isEnabled","getHtml","setHtml","getSelectionRange","inputRef","customEmojis","loadCustomEmojiForEmoji","clearCustomEmojiForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","useFlag","extractLastEmojiThrottled","useThrottledResolver","html","collapsed","match","IS_EMOJI_SUPPORTED","htmlBeforeSelection","getHtmlBeforeSelection","current","getLastEmoji","useDerivedSignal","isActive","useDerivedState","hasCustomEmojis","length","lastEmoji","emoji","insertCustomEmoji","useLastCallback","inputEl","regexText","regex","count","newHtml","buildCustomEmojiHtml","repeat","htmlAfterSelection","innerHTML","substring","requestNextMutation","focusEditableElement","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","ConnectorClass","requestStates","Map","requestStatesByCallback","pendingPayloads","pendingTransferables","constructor","onUpdate","channel","destroy","init","args","this","postMessageOnTickEnd","type","request","messageData","transferables","restMessageData","messageId","generateUniqueId","payload","requestState","promise","Promise","resolve","reject","assign","withCallback","callback","pop","set","catch","finally","delete","cancelCallback","progressCallback","isCanceled","get","onMessage","data","payloads","update","error","response","callbackArgs","Error","message","push","postMessagesOnTickEnd","throttleWithTickEnd","postMessage","createConnector","worker","connector","handleMessage","removeEventListener","props","CustomSend","useModuleLoader","Bundles","Extra","RE_USERNAME_SEARCH","useMentionTooltip","groupChatMembers","topInlineBotIds","currentUserId","useLang","filteredUsers","setFilteredUsers","useState","extractUsernameTagThrottled","prepareForRegExp","getUsernameTag","getWithInlineBots","startsWith","usernameTag","usersById","getGlobal","users","byId","memberIds","reduce","acc","member","filter","filteredIds","filterPeersByQuery","ids","unique","query","values","pickTruthy","insertMention","peer","forceFocus","insertAtEnd","hasUsername","getPeerTitle","mainUsername","getMainUsername","userFirstOrLastName","htmlToInsert","ApiMessageEntityTypes","MentionName","fixedHtmlBeforeSelection","cleanWebkitNewLines","atIndex","lastIndexOf","shiftCaretPosition","substr","caretPosition","getCaretPosition","newCaretPosition","setCaretPosition","isMentionTooltipOpen","closeMentionTooltip","mentionFilteredUsers","useOrderDiff","orderedIds","orderById","useMemo","i","prevOrderById","usePreviousDeprecated","prevChatId","orderDiffById","mapValues","order","getAnimationType","useChatAnimationType","OFFSET_X","REM","useOverlayPosition","anchorRef","overlayRef","isMirrored","isForMessageEffect","isDisabled","updatePosition","element","anchor","anchorRect","getBoundingClientRect","elementRect","windowWidth","window","innerWidth","requestMutation","anchorCenterY","top","height","anchorBottomY","bottom","y","style","left","right","messagesContainer","closest","passive","MAX_NESTING_PARENTS","isSelectionInsideInput","selectionRange","inputId","commonAncestorContainer","parentNode","iterations","parentElement","useForumPanelRender","isForumPanelOpen","shouldRenderForumPanelRef","useRef","isAnimationStartedRef","forceUpdate","useForceUpdate","useSyncEffect","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","shouldRenderForumPanel","isAnimationStarted","verifyAgeMin","appConfig","VERIFY_AGE_MIN_DEFAULT","SensitiveContentConfirmModal","shouldAlwaysShow","onAlwaysShowChanged","_jsxs","years","Checkbox","label","checked","onCheck","VISIBLITY_MARGIN","DURATION","SnapEffectContainer","styles","root","SNAP_EFFECT_CONTAINER_ID","animateSnap","selectCanAnimateSnapEffect","rect","x","scrollX","scrollY","width","innerHeight","seed","Math","floor","Date","now","filterId","SNAP_EFFECT_ID","component","ghost","viewBox","createFilter","min","elementContainer","svg","jsxToHtml","foreignObject","querySelector","computedStyle","getComputedStyle","clone","cloneNode","Array","from","setProperty","getPropertyValue","appendChild","snapContainer","getElementById","removeChild","once","smallestSide","baseSeed","xmlns","SVG_NAMESPACE","baseFrequency","numOctaves","result","in","slope","intercept","attributeName","dur","fill","in2","operator","scale","xChannelSelector","yChannelSelector","forceShowSelf","isSynced","userStatus","selectUserStatus","isSavedMessages","isSelf","self","areMessagesLoaded","selectChatMessages","PrivateChatInfo","customPeer","typingStatus","avatarSize","statusIcon","withDots","withMediaViewer","withUsername","withFullInfo","withUpdatingStatus","emojiStatusSize","noStatusOrTyping","noEmojiStatus","noFake","noVerified","noRtl","isSavedDialog","adminMember","ripple","onEmojiStatusClick","iconElement","rightElement","loadFullUser","openMediaViewer","loadMoreProfilePhotos","hasAvatarMediaViewer","peerId","isPreload","useIntervalForceUpdate","handleAvatarViewerOpen","hasMedia","stopPropagation","isAvatarView","mediaIndex","origin","MediaViewerOrigin","ProfileAvatar","MiddleHeaderAvatar","customTitle","isOwner","buildClassName","dir","isRtl","Avatar","size","onClick","FullNameTitle","withEmojiStatus","DotAnimation","content","subtitleKey","TypingStatus","isSystemBot","translatedStatus","getUserStatus","mainUserNameClassName","isUserOnline","renderStatusOrTyping","RippleEffect","RE_BR","RE_SPACE","RE_CLEAN_HTML","RE_EXTRA_NEW_LINE","ChatCallStatus","isSelected","isMobile","ChatTags","orderedFolderIds","chatFoldersById","visibleFolderIds","slice","remainingCount","folderId","folder","getApiPeerColorClass","color","renderTextWithEntities","text","entities","noCustomEmojiPlayback","noTitleAnimations","emojiSize","isPreview","previewMessageId","selectChat","chatFolderIds","getChatFolderIds","areTagsEnabled","chatFolders","isPremium","selectIsCurrentUserPremium","lastMessageId","selectChatLastMessageId","lastMessage","selectChatMessage","selectChatLastMessage","isOutgoing","forwardInfo","savedDialogSender","fromId","selectPeer","messageSender","selectSender","lastMessageSender","currentChatId","threadId","currentThreadId","messageListType","selectCurrentMessageList","MAIN_THREAD_ID","isSelectedForum","isForum","selectTabState","forumPanelChatId","lastMessageTopic","selectTopicFromMessage","selectThreadParam","topicsInfo","selectTopicsInfo","isAccountFrozen","selectIsCurrentUserFrozen","monoforumChannel","selectMonoforumChannel","isMuted","getIsChatMuted","selectNotifyDefaults","selectNotifyException","draft","selectDraft","selectIsForumPanelOpen","canScrollDown","canChangeFolder","lastMessageOutgoingStatus","selectOutgoingStatus","withInterfaceAnimations","selectCanAnimateInterface","listedTopicIds","topics","topicsById","Chat","orderDiff","animationType","isPinned","observeIntersection","offsetTop","onDragEnter","withTags","openChat","openSavedDialog","toggleChatInfo","focusLastMessage","focusMessage","loadTopics","openForumPanel","closeForumPanel","setShouldCloseRightColumn","reportMessages","openFrozenAccountModal","updateChatMutedState","openQuickPreview","useAppLayout","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderDeleteModal","markRenderDeleteModal","unmarkRenderDeleteModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","isForumAsMessages","isMonoforum","useEnsureMessage","tagFolderIds","chatFolderIdsSet","isAll","ALL_FOLDER_ID","hasColor","shouldRenderTags","renderSubtitle","ref","useChatListEntry","statefulMediaContent","groupStatefulContent","noForumTitle","getIsForumPanelClosed","useSelectorSignal","selectIsForumPanelClosed","handleClick","preventDefault","noForumTopicPanel","value","forceOnHeavyAnimation","force","shouldReplaceHistory","handleDragEnter","handleDelete","handleMute","handleUnmute","mutedUntil","UNMUTE_TIMESTAMP","handleChatFolderChange","handleReport","messageIds","contextActions","useChatContextActions","isIntersecting","useIsIntersecting","isOnline","hasShownClass","isAvatarOnlineShown","useShowTransitionDeprecated","href","IS_OPEN_IN_NEW_TAB_SUPPORTED","createLocationHash","chatClassName","isUserId","ListItem","withPortalForMenu","asMessageBubble","subscriptionUntil","StarIcon","ChatBadge","shouldShowOnlyMostImportant","forceHidden","isCallActive","isCallNotEmpty","monoforumBadgeClassName","withStatusTextColor","LastMessageMeta","outgoingStatus","draftDate","date","hasMiniApp","hasMainMiniApp","DeleteChatModal","onCloseAnimationEnd","MuteChatModal","ChatFolderModal","usePaidMessageConfirmation","starsForAllMessages","isStarsBalanceModeOpen","starsBalance","shouldPaidMessageAutoApprove","settings","byKey","shouldAutoApprove","setAutoApprove","isWaitingStarsTopup","setIsWaitingStarsTopup","confirmPaymentHandlerRef","closeConfirmDialog","closePaymentMessageConfirmDialogOpen","handleStarsTopup","openStarsBalanceModal","topup","balanceNeeded","purpose","PAID_MESSAGES_PURPOSE","handleWithConfirmation","openPaymentMessageConfirmDialogOpen","dialogHandler","setPaidMessageAutoApprove","storyId","story","loadPeerStoriesByIds","loadStoryThrottled","throttled","throttle","storyIds","resetInput","applyIosAutoCapitalizationFix","focus","IS_IOS","createElement","classList","add","body","RE_COMMAND","GDOCS_ELEMENT_ID_REGEXP","headers","parseHtml","DOMParser","parseFromString","wrapNodeAnchor","node","wrapNodeInline","el","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","textContent","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","indexOf","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","VALID_TARGET_IDS","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","EDITABLE_STORY_INPUT_ID","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","setNextText","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","showNotification","updateShouldSaveAttachmentsCompression","applyDefaultAttachmentsCompression","handlePaste","async","clipboardData","input","activeElement","pastedText","getData","pastedFormattedText","parseHtmlAsFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","err","DEBUG","console","textContents","querySelectorAll","getElementsByTagName","removeAttribute","replaceWith","dataset","entityType","getAttribute","ignoreOnPaste","remove","ENTITY_CLASS_BY_NODE_NAME","setAttribute","innerText","CustomEmoji","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","files","getFilesFromDataTransferItems","textToPaste","isWordDocument","hasText","shouldSetAttachments","newAttachments","all","file","buildAttachment","canReplace","canReplaceMessageMedia","isUploadingDocumentSticker","isUploadingFileSticker","isInAlbum","groupedId","pluralValue","shouldSave","attachments","concat","isFrozen","URL_ENTITIES","TextUrl","Url","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","username","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_LINK","RE_LINK_TEMPLATE","STARTS_ENDS_ON_EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","URL","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","startedAt","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","cb","requestMeasure","subscribeToAnalyzer","stop","onstop","blob","Blob","duration","round","onerror","delayStop","max","setTimeout","pause","AttachmentModal","AttachMenu","isButtonVisible","canAttachMedia","canAttachPolls","canAttachToDoLists","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","attachBots","peerType","isScheduled","theme","shouldCollectDebugLogs","canEditMedia","editingMessage","paidMessagesStars","onFileSelect","onMenuOpen","onMenuClose","onPollCreate","onTodoListCreate","updateAttachmentSettings","isAttachMenuOpen","openAttachMenu","closeAttachMenu","handleMouseEnter","handleMouseLeave","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","isMenuOpen","isPhotoOrVideo","getMessagePhoto","getMessageVideo","isFile","getMessageAudio","getMessageVoice","getMessageDocument","handleToggleAttachMenu","handleFileSelect","validatedFiles","validateFiles","handleQuickSelect","shouldCompress","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","join","handleDocumentSelect","SUPPORTED_AUDIO_CONTENT_TYPES","handleSendLogs","File","getDebugLogs","DEBUG_LOG_FILENAME","bots","bot","isForAttachMenu","attachMenuPeerTypes","oldLang","ResponsiveHoverButton","onActivate","ariaLabel","ariaControls","hasPopup","disabled","Menu","autoClose","positionX","positionY","onMouseEnter","IS_TOUCH_ENV","onMouseLeave","noCloseOnBackdrop","ariaLabelledBy","MenuItem","_Fragment","icon","AttachBotItem","onMenuOpened","onMenuClosed","BotCommandMenu","BotKeyboardMenu","clickBotInlineButton","isKeyboardSingleUse","buttonTexts","texts","keyboardButtons","row","button","renderKeyboardButtonText","noCompact","j","Button","BotMenuButton","textRef","textEl","scrollWidth","composerEl","removeProperty","ChatCommandTooltip","shouldForceShowEditing","forwardMessages","fromChatId","toChatId","forwardMessageIds","noAuthors","noCaptions","isShareMessageModalShown","isModalShown","shouldPreventComposerAnimation","editingId","selectEditingScheduledId","selectEditingId","shouldAnimate","isForwarding","forwardedMessages","replyInfo","suggestedPostInfo","replyToPeerId","senderChat","sender","selectEditingMessage","replyToMsgId","forwardSenders","m","selectSenderFromForwardedMessage","forwardedMessage","selectForwardedSender","isChatWithSelf","selectIsChatWithSelf","isChannelPost","hiddenUserName","quoteText","isSenderChannel","isChatChannel","forwardsHaveCaptions","some","forward","isContextMenuDisabled","storyData","isReplyToDiscussion","isMediaNsfw","selectIsMediaNsfw","forwardedMessagesCount","isCurrentUserPremium","isInChangingRecipientMode","ComposerEmbeddedMessage","onClear","resetDraftReplyInfo","resetDraftSuggestedPostInfo","updateDraftReplyInfo","setEditingId","changeRecipient","openChatOrTopicWithReplyInDraft","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","setShouldPreventComposerAnimation","openSuggestMessageModal","isReplyToTopicStart","action","isShowingReply","isReplyWithQuote","isShowingSuggestedPost","senders","isShown","shouldRender","transitionClassNames","clearEmbedded","captureEscKeyListener","isContextMenuOpen","contextMenuAnchor","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleMessageClick","handleClearClick","buildAutoCloseMenuItemHandler","handleForwardToAnotherChatClick","handleShowMessageClick","focusMessageFromDraft","handleRemoveQuoteClick","handleChangeReplyRecipientClick","handleReplyInSenderChat","handleDoNotReplyClick","getTriggerElement","getRootElement","getMenuElement","renderingSender","useCurrentOrPrev","innerClassName","getPeerColorClass","leftIcon","customText","strippedMessage","strippedText","renderingLeftIcon","canReplyInSenderChat","onContextMenu","ClosableEmbeddedMessage","isInComposer","composerForwardSenders","faded","customIcon","MenuSeparator","DropArea","InlineBotTooltip","MentionTooltip","PollModal","SendAsMenu","StickerTooltip","modal","ToDoListModal","tabState","noWebPage","selectNoWebPage","attachmentSettings","webPagePreview","webPagePreviewId","selectWebPage","webpageType","WebPagePreview","isEditing","toggleMessageWebPage","isInvertedMedia","isSmallerMedia","webPageMediaSize","useShowTransition","withShouldRender","hasMediaSizeOptions","hasLargeMedia","prevWebPageRef","renderingWebPage","isFullWebPage","thumbnailUrl","useThumbnail","previewMedia","getWebPagePhoto","getWebPageVideo","getWebPageAudio","getWebPageDocument","previewMediaHash","getMediaHash","previewMediaUrl","useMedia","shouldRenderPreviewMedia","previewMediaRef","noCloseTransition","hasPreviewMedia","handleClearWebpagePreview","handleBeforeContextMenu","handlePreviewClick","updateIsInvertedMedia","updateIsLargerMedia","PeerColorWrapper","noUserColors","onMouseDown","src","siteName","url","description","webPage","photo","video","audio","MainButtonState","chatBot","selectBot","isChatWithBot","isChatWithUser","userFullInfo","selectUserFullInfo","selectPeerPaidMessagesStars","chatFullInfo","selectChatFullInfo","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","shouldUpdateStickerSetOrder","language","selectSharedSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","currentUser","sendAsId","sendAsPeer","requestedDraft","selectRequestedDraft","requestedDraftFiles","selectRequestedDraftFiles","isStoryViewerOpen","storyViewer","currentMessageList","isForCurrentMessageList","canSendVoiceByPrivacy","noVoiceMessages","slowMode","editingDraft","selectEditingScheduledDraft","selectEditingDraft","selectPeerStory","sentStoryReaction","sentReaction","replyToMessage","replyToTopic","isInScheduledList","canSendQuickReplies","isSilentPosting","getChatNotifySettings","areEffectsSupported","SERVICE_NOTIFICATIONS_USER_ID","canPlayEffect","selectPerformanceSettingsValue","shouldPlayEffect","shouldPlayEffectInComposer","effectId","effect","availableEffectById","effectReactions","reactions","maxMessageLength","config","DEFAULT_MAX_MESSAGE_LENGTH","isReplying","hasSuggestedPost","stars","balance","amount","isStarsBalanceModalOpen","starsBalanceModal","isAppConfigLoaded","insertingPeerIdMention","availableReactions","topReactions","isOnActiveTab","isBlurred","canScheduleUntilOnline","selectCanScheduleUntilOnline","isChannel","isRightColumnShown","selectIsRightColumnShown","isSelectModeActive","selectIsInSelectMode","withScheduledButton","hasScheduledMessages","botKeyboardPlaceholder","keyboardPlaceholder","pollModal","todoListModal","stickersForEmoji","stickers","forEmoji","customEmojiForEmoji","topInlineBots","userIds","contentToBeScheduled","recentEmojis","keywords","inlineBots","byUsername","isInlineBotLoading","isLoading","botCommands","botInfo","commands","botMenuButton","menuButton","attachMenu","attachMenuPeerType","selectChatType","selectTheme","fileSizeLimit","selectCurrentLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","isReactionPickerOpen","selectIsReactionPickerOpen","canBuyPremium","selectIsPremiumPurchaseBlocked","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","canSendOneTimeMedia","stealthMode","stories","quickReplyMessages","quickReplies","messagesById","isContactRequirePremium","isPaymentMessageConfirmDialogOpen","shouldDisplayGiftsButton","disallowedGifts","pollMaxAnswers","Composer","dropAreaState","isReady","inputPlaceholder","editableInputCssSelector","editableInputId","onDropHide","onFocus","onBlur","onForward","sendMessage","clearDraft","showDialog","openPollModal","closePollModal","openTodoListModal","closeTodoListModal","loadScheduledHistory","openThread","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","callAttachBot","addRecentCustomEmoji","showAllowedMessageTypesNotification","openStoryReactionPicker","openGiftModal","closeReactionPicker","sendStoryReaction","editMessage","saveEffectInDraft","setReactionEffect","hideEffectInComposer","updateChatSilentPosting","updateInsertingPeerIdMention","updateDraftSuggestedPostInfo","counterRef","storyReactionRef","useSignal","isMounted","setIsMounted","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","windowSize","isInMessageList","isInStoryViewer","sendAsPeerIds","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","isInputHasFocus","markInputHasFocus","unmarkInputHasFocus","onAttachMenuOpen","onAttachMenuClose","canMediaBeReplaced","emojiSet","members","chatBotCommands","chatEmojiSetId","canSchedule","isSentStoryReactionHeart","isSameReaction","HEART_REACTION","processMessageInputForCustomEmoji","customEmojiNotificationNumber","requestCalendar","calendar","useSchedule","useTimeout","isChannelWithProfiles","areProfilesShown","isChatWithSendAs","isChatSuperGroup","isChatPublic","isLinkedInDiscussion","hasGeo","shouldAnimateSendAsButtonRef","prevSendAsPeerIds","hasAttachments","nextText","canSendStickers","canSendGifs","canAttachEmbedLinks","canSendVoices","canSendPlainText","getAllowedAttachmentOptions","isNeedPremium","isSendTextBlocked","messagesCount","messagesInInput","closeConfirmModalPayForMessage","paymentMessageConfirmDialogHandler","setShouldPaidMessageAutoApprove","handleActionWithPaymentConfirmation","hasWebPagePreview","isComposerBlocked","insertHtmlAndUpdateCursor","inInputId","shouldPrepend","selection","getSelection","messageInput","rangeCount","getRangeAt","insertHtmlInSelection","dispatchEvent","Event","bubbles","newFirstWord","shouldReplace","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","insertNextText","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","shouldSendInHighQuality","openLimitReachedModal","setShouldForceAsFile","setShouldForceCompression","MEMO_EMPTY_ARRAY","newValue","attachment","getAttachmentMediaType","limit","shouldForce","isSpoiler","newAttachment","shouldSendAsSpoiler","handleUpdateAttachmentsQuality","filename","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","isViewOnceEnabled","setIsViewOnceEnabled","toogleViewOnceEnabled","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","shouldSendRecordingStatus","useInterval","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","useStateRef","isAdmin","isChatAdmin","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","getSingleEmoji","cleanHtml","parseEmojiOnlyString","hasStickers","singleEmoji","useStickerTooltip","isInlineBotTooltipOpen","botId","inlineBotId","isGallery","isInlineBotTooltipGallery","switchPm","inlineBotSwitchPm","switchWebview","inlineBotSwitchWebview","results","inlineBotResults","closeTooltip","closeInlineBotTooltip","help","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","resetAllInlineBots","extractBotQueryThrottled","getPlainText","parseBotQuery","prevUsername","offset","useInlineBotTooltip","hasQuickReplies","isChatCommandTooltipOpen","close","closeChatCommandTooltip","filteredBotCommands","botTooltipCommands","filteredQuickReplies","quickReplyCommands","setFilteredBotCommands","setFilteredQuickReplies","detectCommandThrottled","getCommand","command","nextFilteredBotCommands","c","newFilteredQuickReplies","quickReply","shortcut","useChatCommandTooltip","useDraft","saveDraft","loadCustomEmojis","isTouchedRef","isLocalDraft","isLocal","updateDraft","prevState","shouldKeepReply","shouldKeepSuggestedPost","runDebouncedForSaveDraft","useRunDebounced","DRAFT_DEBOUNCE","useLayoutEffectWithPrevDeps","prevThreadId","prevDraft","isTouched","shouldUpdateSuggestedPost","EDITABLE_INPUT_CSS_SELECTOR","customEmojiIds","entity","documentId","useLayoutEffect","chatIdRef","threadIdRef","scopedСhatId","scopedThreadId","useBackgroundMode","useBeforeUnload","loadWebPagePreview","clearWebPagePreview","formattedTextWithLinkRef","detectLinkDebounced","useDebouncedResolver","formattedText","linkEntity","getLink","link","useLoadLinkPreview","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","useEditing","setEditingDraft","openDeleteMessageModal","setShouldForceShowEditing","replyingToId","useEffectWithPrevDeps","prevEditedMessage","prevReplyingToId","shouldSetNoWebPage","edited","getShouldResetNoWebPageDebounced","restoreNewDraftAfterEditing","hasMessageMedia","messageList","isSchedule","handleBlur","resetComposerRef","stopRecordingVoiceRef","areAllGiftsDisallowed","every","shouldShowGiftButton","shouldShowSuggestedPostButton","showCustomEmojiPremiumNotification","notificationNumber","actionText","initialSection","Number","mainButtonState","Edit","Schedule","Send","Record","Forward","canShowCustomSendMenu","isCustomSendMenuOpen","storyReactionPickerAnchor","handleStoryPickerContextMenu","handleBeforeStoryPickerContextMenu","handleStoryPickerContextMenuHide","position","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","toString","hasErrorKey","checkSlowMode","nowSeconds","getServerTime","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","formatMediaDuration","isSlowMode","blur","canSendAttachments","attachmentsToSend","sendAttachments","sendCompressed","sendGrouped","shouldSendGrouped","isSilent","scheduledAt","prepareAttachmentsToSend","shouldGroupMessages","isLocalOnly","handleSendAttachmentsFromModal","handleSendAttachments","handleSendCore","currentAttachments","webPageUrl","handleSend","record","ttlSeconds","ONE_TIME_MEDIA_TTL_SECONDS","voice","handleSendWithConfirmation","handleTodoListCreate","handleClickBotMenu","parsedLink","tryParseDeepLink","appName","processDeepLink","handleActivateBotCommandMenu","handleMessageSchedule","queryId","restArgs","prevContentToBeScheduled","handleCustomEmojiSelect","emojiSetId","stickerSetInfo","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","gif","isScheduleRequested","handleStickerSelect","sticker","canUpdateStickerSetsOrder","isPreloadedGlobally","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","poll","handleToDoListSend","todo","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","deleteLastCharacterOutsideSelection","removeSymbolAttachmentModal","handleAllScheduledClick","handleGiftClick","forUserId","handleSuggestPostClick","price","currency","STARS_CURRENCY_CODE","nanos","handleToggleSilentPosting","localId","withBotMenuButton","isBotMenuButtonOpen","timedPlaceholderLangKey","timedPlaceholderDate","activeUntil","isComposerHasFocus","isReactionSelectorOpen","placeholder","formatStarsAsIcon","asFont","withNodes","adminRights","anonymous","topic","shouldRenderReactionSelector","reactionSelectorTransitonClassNames","areVoiceMessagesNotAllowed","mainButtonHandler","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","fullClassName","handleToggleReaction","reaction","emoticon","selectCustomEmoji","customEmojiMessage","isReaction","handleToggleEffectReaction","handleReactionPickerOpen","sendAsMessage","handleLikeStory","containerId","getStoryKey","handleSendScheduled","handleSendSilent","handleSendWhenOnline","SCHEDULED_WHEN_ONLINE","handleSendScheduledAttachments","handleSendSilentAttachments","handleRemoveEffect","handleStopEffect","onSend","withBotCommands","effectEmoji","shouldRenderPaidBadge","prevShouldRenderPaidBadge","usePrevious","DropAreaState","None","withQuick","QuickFile","onHide","ReactionSelector","allAvailableReactions","onToggleReaction","isPrivate","isInSavedMessages","onShowMore","isForMessage","shouldSchedule","forceDarkTheme","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","onSendWhenOnline","isQuiz","shouldBeAnonymous","maxOptionsCount","selectedSendAsId","onInsertUserName","filterUnits","dy","stdDeviation","d","onSelectResult","SymbolMenuButton","isMessageComposer","onGifSelect","onStickerSelect","inputCssSelector","idPrefix","MessageInput","customEmojiPrefix","isStoryInput","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onSuppressedFocus","Spinner","slideClassName","direction","formatVoiceRecordDuration","CustomEmojiTooltip","EmojiTooltip","emojis","ReactionAnimatedEmoji","withEffectOnly","getReactionKey","allowDisabledClick","noFastClick","nonInteractive","pill","fluid","AnimatedCounter","number","MessageEffect","shouldPlay","onStop","CustomSendMenu","onSendSchedule","onRemoveEffect","withEffects","hasCurrentEffect","PaymentMessageConfirmDialog","userName","messagePriceInStars","POLLING_INTERVAL","PEER_LAST_POLLING_TIME","PEER_ID_QUEUE","loadFromQueue","queue","queueToLoad","otherQueue","loadStoriesMaxIds","peerIds","usePeerStoriesPolling","peers","pollablePeerIds","lastPollingTime","isStatusAvailable","isContact","isUserBot","isSupport","isRestricted","selectIsChatRestricted","usePrevDuringAnimation","prev","timeoutRef","isCurrentPresent","isPrevPresent","clearTimeout","wasTopicOpened","requestMainWebView","unreadMentionsCount","unreadReactionsCount","isTopicUnopened","topicsWithUnread","unreadCount","shouldBeUnMuted","notifySettings","isEveryUnreadMuted","hasUnreadMark","isSignal","isUnread","handleOpenApp","extractCurrentThemeParams","ShowTransition","isCustom","unreadReactionsElement","unreadMentionsElement","unopenedTopicElement","unreadCountElement","formatIntegerCompact","pinnedElement","miniAppButton","visiblePinnedElement","elements","renderContent","formatUsername","asAbsoluteLink","TME_LINK_PREFIX","useLeftHeaderButtonRtlForumTransition","shouldHideSearch","shouldDisableDropdownMenuTransitionRef","prevShouldHideSearch","handleDropdownMenuTransitionEnd","needsAgeVerification","needAgeVideoVerification","Video","isOwn","isInWebPage","noAvatars","canAutoLoad","canAutoPlay","uploadProgress","forcedWidth","dimensions","asForwarded","isDownloading","isProtected","lastPlaybackTimestamp","clickArg","observeIntersectionForLoading","observeIntersectionForPlaying","onCancelUpload","cancelMediaDownload","updateContentSettings","openAgeVerificationModal","videoRef","isNsfwModalOpen","openNsfwModal","closeNsfwModal","shouldAlwaysShowNsfw","setShouldAlwaysShowNsfw","isPaidPreview","mediaType","localBlobUrl","blobUrl","shouldShowSpoiler","isSpoilerShown","showSpoiler","hideSpoiler","handleNsfwConfirm","isSensitiveEnabled","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","isPlayAllowed","setIsPlayAllowed","fullMediaHash","getVideoMediaHash","isFullMediaPreloaded","mediaLoader","mediaData","loadProgress","useMediaWithLoadProgress","getMediaFormat","fullMediaData","isPlayerReady","markPlayerReady","thumbDataUri","getMediaThumbUri","hasThumb","withBlurredBackground","isInline","isUnsupported","useUnsupportedMedia","isPreviewPreloaded","canLoadPreview","previewBlobUrl","shouldHidePreview","previewRef","useMediaTransition","hasMediaData","noThumb","thumbRef","useBlurredMediaThumbRef","blurredBackgroundRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","spinnerRef","shouldRenderSpinner","noMountTransition","playButtonRef","playProgress","setPlayProgress","handleTimeUpdate","currentTarget","currentTime","isFinite","calculateExtendedPreviewDimensions","calculateVideoDimensions","isFromSpinner","isAllowed","media","handleClickOnSpinner","componentClassName","MIN_MEDIA_HEIGHT","OptimizedVideo","canPlay","defaultMuted","muted","loop","playsInline","disablePictureInPicture","draggable","onTimeUpdate","onReady","MediaSpoiler","isVisible","withAnimation","isNsfw","ProgressSpinner","progress","isGif","emojiDataPromise","emojiRawData","emojiData","RE_EMOJI_SEARCH","RE_LOWERCASE_TEST","EMOJIS_LIMIT","FILTER_MIN_LENGTH","prepareRecentEmojisMemo","recentEmojiIds","prepareLibraryMemo","byNative","buildCollectionByKey","baseEmojisByKeyword","natives","emojisByKeyword","byKeyword","byName","names","maxKeyLength","keyword","searchInLibraryMemo","library","matched","matchedKeywords","sort","flat","matchedNames","setById","setFilteredEmojis","setFilteredCustomEmojis","exec","uncompressEmoji","ensureEmojiData","then","detectEmojiCodeThrottled","getEmojiCode","updateFiltered","nativeEmojis","native","uniqueByField","selectCustomEmojiForEmojis","isForce","emojiHtml","emojiCode","newShouldAutoInsert","endsWith","test","SymbolMenu","setStickerSearchQuery","setGifSearchQuery","triggerRef","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","setContextMenuAnchor","symbolMenuButtonClassName","handleActivateSymbolMenu","triggerEl","handleSearchOpen","handleSymbolMenuOpen","EDITABLE_INPUT_MODAL_CSS_SELECTOR","getLayout","withPortal","onLoad","onSearchOpen","INCLUDE_FILTER_FIELDS","EXCLUDE_FILTER_FIELDS","selectChatFilters","state","mode","selectTemp","selectedChatIds","selectedChatTypes","includedChatIds","includeFilters","pick","excludedChatIds","excludeFilters","getSuggestedFolderName","filters","groups","channels","contacts","nonContacts","INITIAL_STATE","chatFilter","foldersReducer","omit","isChatList","useFoldersReducer","useReducer","isAlbum","messageOrAlbum","groupMessages","messages","firstUnreadId","topMessageId","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","index","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","paidMedia","extendedMedia","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","senderId","paidMessageStars","postAuthorTitle","isActionMessage","inlineButtons","greeting","fullInfo","defaultStickers","lastUnreadMessageId","lastReadInboxMessageId","connectionState","businessIntro","ContactGreeting","loadGreetingStickers","markMessageListRead","containerRef","randomIndex","random","maxId","StickerView","shouldLoop","getUserFullName","countryList","phoneCodes","phoneCodeList","commonChats","selectUserCommonChats","isLoadingFullUser","MessageListAccountInfo","hasMessages","loadCommonChats","openChatWithInfo","phoneCountry","registrationMonth","nameChangeDate","photoChangeDate","country","getCountryCodeByIso","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","stopEvent","profileTab","forceScrollProfileTab","securityNameInfo","time","formatPastDatetime","withMarkdown","securityPhotoInfo","tableData","isoToEmoji","iso2","defaultName","formatRegistrationMonth","commonChatsCount","Link","AvatarList","buildStyle","Skeleton","forceAspectRatio","getChatTitle","MiniTable","keyClassName","isVerified","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","SponsoredContextMenuContainer","selectSponsoredMessage","activeDownloads","selectActiveDownloads","downloadableMedia","selectMessageDownloadableMedia","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","SponsoredMessage","viewSponsored","openUrl","hideSponsored","clickSponsored","openAboutAdsModal","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","randomId","handleHideSponsoredMessage","getMessageContent","isMedia","shouldSkipModal","handleOpenMedia","isSponsoredMessage","handleOpenAboutAdsModal","canReport","additionalInfo","sponsorInfo","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","getMinMediaWidthWithText","getMinMediaWidth","noMediaCorners","preventMessageInputBlur","peerColor","Photo","renderMediaContent","isRecommended","BadgeButton","isRectangular","buttonText","MessageAppendix","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","isChannelChat","isChatMonoforum","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","hasLinkedChat","shouldRenderAccountInfo","noAppearanceAnimation","isQuickPreview","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","canPost","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","shouldUpdateViews","albumMainId","hasUnreadMention","hasUnreadReaction","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadViewportMessages","loadMoreBackwards","loadMoreForwards","debounce","LoadMoreDirection","Backwards","Forwards","toggleScrollTools","container","fabTrigger","offsetHeight","scrollHeight","scrollTop","fabOffsetTop","scrollBottom","isNearBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","renderPaidMessageAction","album","messagesLength","formatStarsAsText","userTitle","renderSuggestedPostInfoAction","scheduleDate","userLink","renderPeerLink","originalMessage","titleText","getSuggestedChangesInfo","getSuggestedChangesActionText","compact","formatTonAsText","convertTonFromNanos","formatScheduledDateTime","actionMessageStyles","suggestedPostContainer","suggestedPostTitle","messageCountToAnimate","messageGroup","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","appearanceOrder","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","previousLocalId","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","isServiceNotificationMessage","noComments","Message","withAvatar","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","firstMessage","firstMessageId","SenderGroupContainer","calculateSenderGroups","teactFastList","selectedAt","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","selectThemeValues","openPremiumModal","handleOpenPremiumModal","handleGetMoreStars","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","isApiPeerUser","containerClassName","Sparkles","preset","Content","runDebouncedForScroll","selectCurrentMessageIds","selectChatScheduledMessages","getIsSavedDialog","restrictionReasons","selectActiveRestrictionReasons","focusingId","selectFocusedMessageId","withLastMessageWhenPreloading","isNonContact","canAddContact","selectTopic","selectThreadInfo","areAdsEnabled","hasCustomGreeting","monoforumChannelId","canTranslate","selectCanTranslateChat","isTranslationDisabled","shouldAutoTranslate","hasAutoTranslation","translationLanguage","selectTranslationLanguage","isChatLoaded","isGroupChat","isChatGroup","isChannelWithAvatars","isCreator","isSystemBotChat","isAnonymousForwards","isAnonymousForwardsChat","isBot","selectFirstUnreadId","selectIsViewportNewest","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","isChatProtected","selectIsChatProtected","MessageList","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadMessageViews","loadFactChecks","requestChatTranslation","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","onTickEnd","toLanguageCode","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","arr","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","orderBy","storyDataList","storiesByPeerIds","isCommentsInfo","viewsCount","factCheck","shouldFetch","loadMoreAround","Around","isScrolled","updateStickyDates","markIsScrolled","runDebounced","contains","stuckDateEl","allElements","containerTop","headerActionsHeight","parseInt","findStuckDate","currentStuck","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","scrollOffset","prevContainerHeightRef","isComposerVisible","setContainerHeight","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","String","prevContainerHeight","useContainerHeight","isLocalMessageId","MESSAGE_LIST_SLICE","firstElementChild","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","animateScroll","forceDuration","isResized","isAnimatingScroll","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","ANIMATION_END_DELAY","shouldRenderGreeting","isEmptyTopic","Restricted","PremiumRequired","Loading","AccountInfo","StarsRequired","shouldCleanup","onScroll","RequirementToContactMessage","backgroundColor","ownProps","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","isRepliesChat","isInFocusList","markShown","MESSAGE_APPEARANCE_DELAY","avatarPeer","isAvatarPeerUser","handleOpenChat","handleMention","handleAvatarClick","avatarRef","canMention","shouldRenderContextMenu","hiddenName","renderAvatar","SMALL_IMAGE_THRESHOLD","MIN_MESSAGE_LENGTH_FOR_BLUR","MIN_MEDIA_WIDTH","hasCommentButton","messageText","isPhoto","isVideo","isWebPagePhoto","isWebPageVideo","calculateInlineImageDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","selectWebPagesById","webPageById","useMessageMediaHash","webPagesById","useSelector","webPageId","getMessageMediaHash","useLocalStorage","initValue","eventName","getStoredValue","localStorage","getItem","JSON","parse","writeValue","stringifiedValue","stringify","setItem","restoreValue","storedValue","setState","listenStorageChange","forcePlaceCaretAtEnd","nodeValue","selectNodeContents","collapse","MENU_CLOSE_TIMEOUT","closeTimeout","menuCloseTimeout","isMouseInside","selectWebPageFromMessage","WebLink","senderTitle","onMessageClick","linkData","getFirstLinkInMessage","domain","formattedDescription","getMessageTextWithFallback","renderMessageSummary","displayUrl","truncatedDescription","trimText","safeLinkContent","Media","SafeLink","formatPastTimeShort","cache","WeakMap","fn","cached","areSortedArraysEqual","lastArgs","lastResult","letterClassName","noLoopLimit","iconEmojiId","loopLimit","TopicDefaultIcon","iconColor","topicId","onStart","onEnd","isLongPressActive","isPressed","timerId","canProcessEvent","touches","end","cancel","useUnmountCleanup","onMouseUp","onTouchStart","onTouchEnd","extractorEl","deleteContents","createContextualFragment","lastInsertedNode","insertNode","setStartAfter","setEndAfter","useCommonAncestor","sel","cloneRange","intersectsNode","cloneContents","caretRange","endContainer","endOffset","Node","TEXT_NODE","removeAllSelections","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","requestMediaWorker","MAX_WORKERS","navigator","hardwareConcurrency","instances","launchMediaWorkers","IS_TEST","Worker","inputSelector","getRange","setRange","onSelectionChange","Element","VTN_PROPERTY_NAME","useVtn","uniqueId","fallbackId","useUniqueId","createVtnStyle","vtClass","vtClassString","CSS","registerProperty","syntax","inherits","DropTarget","isQuick","isGeneric","isHovered","markHovered","unmarkHovered","handleDragLeave","relatedTarget","toTarget","onDrop","onDragLeave","rx","hideTimeoutRef","prevWithQuick","handleFilesDrop","dataTransfer","dt","folderFiles","handleQuickFilesDrop","fromTarget","matches","shouldRenderQuick","Portal","containerSelector","onDragOver","handleDragOver","reducer","initialState","reducerRef","dispatch","NothingFound","withSticker","DuckNothingFound","previewUrl","LOCAL_TGS_PREVIEW_URLS","noLoop","DAY_MINUTES","WEEK_MINUTES","getWeekStart","setHours","day","getDay","diff","getDate","setDate","getTime","shiftTimeRanges","ranges","shiftedRanges","startMinute","endMinute","a","b","last","DAYS","_","BusinessHours","businessHours","transitionRef","isExpanded","expand","isMyTime","showInMyTime","showInLocalTime","timezoneSignal","timezones","timezoneMinuteDifference","timezone","timezoneId","getTimezoneOffset","utcOffset","workHours","weekStart","days","dayStart","dayEnd","splitDays","segments","formatTime","isBusinessOpen","localTimeHours","minutesSinceWeekStart","currentDay","handleTriggerOffset","slide","ACTIVE_SLIDE_CLASS_NAME","handleAnimationStart","TO_SLIDE_CLASS_NAME","iconClassName","multiline","isStatic","narrow","withColorTransition","role","tabIndex","formatWeekday","segment","EFFECT_EMOJIS","birthdayNumbers","animatedEmojiEffects","isPremiumPurchaseBlocked","UserBirthday","birthday","isInSettings","requestConfetti","animationPlayedRef","isPlayingAnimation","playAnimation","stopAnimation","formattedDate","isToday","age","today","year","setMonth","month","formatDateToString","getMonth","getAge","numbersForAge","numbers","byEmoji","digit","effectSticker","randomEffect","hash","getStickerMediaHash","ApiMediaFormat","BlobUrl","effectHash","column","canGiftPremium","handleOpenGiftModal","secondaryIcon","secondaryIconClassName","onSecondaryIconClick","IS_OFFSET_PATH_SUPPORTED","forceAlways","birthdate","DEFAULT_MAP_CONFIG","zoom","chatOrUserId","botAppPermissions","selectBotAppPermissions","botVerification","chatInviteLink","inviteLink","bio","about","canViewSubscribers","canInviteUsers","isUserRightBanned","getHasAdminRight","topicLink","selectTopicLink","hasSavedMessages","chats","listIds","saved","personalChannel","personalChannelId","isBotCanManageEmojiStatus","ChatExtra","isOwnProfile","updateTopicMutedState","loadPeerStories","openMapModal","requestCollectibleInfo","toggleUserEmojiStatusPermission","toggleUserLocationPermission","requestNextManagementScreen","usernames","phoneNumber","chatUsernames","businessLocation","businessWorkHours","personalChannelMessageId","prevPeerId","dpr","useDevicePixelRatio","locationMediaHash","geo","buildStaticMapHash","locationBlobUrl","locationRightComponent","isTopicInfo","shouldRenderAllLinks","activeUsernames","u","activeChatUsernames","getChatLink","handleClickLocation","address","copyTextToClipboard","geoPoint","handleToggleNotifications","MUTE_INDEFINITE_TIMESTAMP","manageEmojiStatusChange","handleLocationPermissionChange","isAccessGranted","geolocation","handleOpenSavedDialog","copy","formattedNumber","formatPhoneNumberWithCode","handlePhoneClick","FRAGMENT_PHONE_LENGTH","FRAGMENT_PHONE_CODE","collectible","handleUsernameClick","isChat","isEditable","handleOpenSubscribers","screen","ManagementScreens","ChannelSubscribers","shouldMarkBotTrusted","appTermsInfo","terms","membersCount","ChatAnimationTypes","renderUsernames","allowSelection","Switcher","inactive","iconId","usernameList","otherUsernames","usernameLinks","s","idx","dataTransferItems","traverseFileTreePromise","item","itemFile","getAsFile","isDirectory","createReader","readEntries","entriesPromises","kind","webkitGetAsEntry","InviteLink","withShare","onRevoke","openChatWithDraft","isOnlyCopy","copyLink","handleCopyClick","handleShare","PrimaryLinkMenuButton","onTrigger","readOnly","DropdownMenu","trigger","destructive","isInSearch","isServiceNotifications","deleteTitle","getCanDeleteChat","toggleChatPinned","toggleSavedDialogPinned","toggleChatArchived","markChatMessagesRead","markChatUnread","openChatInNewTab","actionOpenInNewTab","IS_TAURI","actionQuickPreview","togglePinned","actionPin","actionDelete","actionAddToFolder","actionMute","actionMaskAsRead","actionMarkAsUnread","actionArchive","isChatArchived","actionReport","isInFolder","PROVIDERS","google","bing","osm","apple","VENUE_COLORS","arts_entertainment","building","education","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","prepareMapUrl","provider","point","lat","long","providerUrl","getMetersPerPixel","cos","PI","getVenueIconUrl","getVenueColor","str","prevHash","currVal","charCodeAt","confirmPaymentMessage","totalAmount","HeaderMenuContainer","isSuperGroup","selectLanguageCode","doNotTranslate","noMenu","isMainThread","isDiscussionThread","isUserBlocked","selectIsUserBlocked","canRestartBot","canStartBot","selectIsChatBotNotStarted","canUnblock","canSubscribe","isNotJoined","canSearch","canCall","ARE_CALLS_SUPPORTED","canMute","canLeave","canEnterVoiceChat","canCreateVoiceChat","manageCall","isChatBasicGroup","canViewStatistics","canViewMonetization","canViewBoosts","canShowBoostModal","pendingJoinRequests","requestsPending","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","noAnimation","isTranslating","selectRequestedChatTranslationLanguage","channelMonoforumId","linkedMonoforumId","detectedChatLanguage","detectedLanguage","HeaderActions","isForForum","canExpandActions","onTopicSearch","joinChannel","sendBotCommand","openMiddleSearch","restartBot","requestMasterAndRequestCall","togglePeerTranslations","openChatLanguageModal","setSettingOption","unblockUser","setViewForumAsMessages","menuButtonRef","setIsMenuOpen","menuAnchor","setMenuAnchor","handleHeaderMenuOpen","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","handleTranslateClick","handleJoinRequestsClick","JoinRequests","handleSearchClick","setFocusInSearchInput","handleAsMessagesClick","handleRequestCall","handleHotkeySearchClick","IS_APP","getTextWithLanguage","langKey","langCode","translationKey","toUpperCase","translatedName","Intl","DisplayNames","of","doNotTranslateText","handleHide","handleChangeLanguage","handleDoNotTranslate","MoreMenuButton","withExtraActions","onJoinRequestsClick","withForumActions","onSubscribeChannel","onSearchClick","onAsMessagesClick","searchInput","focusNoScroll","CLOSE_DURATION","RESIZE_THROTTLE","useHeaderPane","providedRef","withResizeObserver","onStateChange","setShouldRender","localRef","lastHeightRef","reset","handleUpdate","currentHeight","useThrottledCallback","applyAnimationState","list","noTransition","cumulativeHeight","shiftPx","apply","setExtraStyles","transform","zIndex","transition","isPanelOpen","path","DEFAULT_HANDLERS","play","seekbackward","seekforward","previoustrack","nexttrack","seekTo","registerMediaSession","metadata","mediaSession","updateMetadata","setMediaSessionHandlers","warn","setActionHandler","clearMediaSession","playbackState","setPositionState","setPlaybackState","buildMediaMetadata","artist","artwork","MediaMetadata","ARCHIVE_CUSTOM_PEER","isCustomPeer","avatarIcon","customPeerAvatarColor","Archive","archiveSettings","updateArchiveSettings","orderedChatIds","useFolderManagerForOrderedIds","ARCHIVED_FOLDER_ID","unreadCounters","useFolderManagerForUnreadCounters","archiveUnreadCount","chatsCount","previewItems","chatsById","isLast","unread","actionMinimize","isMinimized","actionExpand","actionHide","isHidden","minimized","buttonClassName","info","Badge","avatarWrapper","chatsPreview","folderType","chatFolder","selectChatFolder","animatedEmoji","selectAnimatedEmoji","EmptyFolder","foldersDispatch","openSettingsScreen","handleEditFolder","SettingsScreens","FoldersEditFolderFromChatList","AnimatedIconFromSticker","FrozenAccountNotification","UnconfirmedSession","sessions","onHeightChange","changeSessionSettings","terminateAuthorization","borderBoxSize","blockSize","firstUnconfirmed","dateCreated","session","isUnconfirmed","locationString","deviceModel","region","handleAccept","isConfirmed","handleReject","isText","RESERVED_HOTKEYS","ChatList","canDisplayArchive","isMainList","openNextChat","openLeftColumnContent","toggleFocusList","shouldIgnoreDragRef","unconfirmedSessionHeight","setUnconfirmedSessionHeight","currentWorkspaceId","excludeOtherWorkspaces","savedWorkspaces","useWorkspaceStorage","isArchived","isAllFolder","isSaved","resolvedFolderId","SAVED_FOLDER_ID","shouldDisplayArchive","shouldShowFrozenAccountNotification","foldersFromWorkspaces","flatMap","w","foldersIds","shouldFilterByWorkspace","filteredOrderedIds","orderedIdsWithoutSelf","folderChatIds","getOrderedIds","chatsHeight","CHAT_HEIGHT_PX","archiveHeight","ARCHIVE_MINIMIZED_HEIGHT","frozenNotificationHeight","viewportIds","getMore","useInfiniteScroll","CHAT_LIST_SLICE","shouldShowUnconfirmedSessions","sessionsArray","isCurrent","FRESH_AUTH_PERIOD","targetIndexDelta","handleKeyDown","IS_MAC_OS","isArchiveInList","contentKey","LeftColumnContent","Archived","handleArchivedClick","handleFrozenAccountNotificationClick","handleArchivedDragEnter","useDebouncedCallback","clientX","clientY","InfiniteScroll","itemSelector","preloadBackwards","withAbsolutePositioning","maxHeight","onLoadMore","viewportOffset","pinnedCount","getPinnedChatsCount","teactOrderKey","getOrderKey","renderChats","TOPIC_ICON_SIZE","threadInfo","onlineCount","selectChatOnlineCount","selectThreadMessagesCount","GroupChatInfo","noAvatar","withChatType","realChat","withMonoforumStatus","loadFullChat","isTopic","isMin","shouldRestoreHeight","getChatTypeString","groupStatus","getGroupStatus","onlineStatus","isInSelectMode","shouldAffectAppendix","getPhotoMediaHash","prevMediaData","fullMediaRef","shouldRenderFullMedia","withThumb","downloadButtonRef","shouldRenderDownloadButton","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","dimensionsStyle","fileSelector","accept","noMultiple","onchange","click","extension","timestamp","thumbnailDataUri","previewData","smaller","isSelectable","actionIcon","onDateClick","elementRef","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","thumbClassNames","useMediaTransitionDeprecated","shouldSpinnerRender","spinnerClassNames","getColorFromExtension","sizeString","getFileSizeString","subtitle","getDocumentThumbnailDimensions","formatMediaDateTime","NO_CORNER_THRESHOLD","ChatForumLastMessage","renderLastMessage","lastMessageRef","mainColumnRef","lastActiveTopic","otherTopics","getOrderedTopics","isReversedCorner","setIsReversedCorner","overwrittenWidth","setOverwrittenWidth","handleOpenTopicClick","handleMouseDown","handleOpenTopicMouseDown","useFastClick","getIsMobile","lastMessageElement","mainColumnElement","lastMessageWidth","offsetWidth","mainColumnWidth","abs","ANIMATION_DURATION","shouldTryLoadingStory","useEnsureStory","mediaContent","mediaHasPreview","getMessageSticker","mediaThumbnail","mediaHash","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","renderLastMessageOrTyping","isDraftReplyToTopic","isEmptyLocalReply","asPreview","withTranslucentThumbs","senderName","getMessageSenderName","renderSummary","Opacity","opacity","Move","messageSummary","MessageSummary","noEmoji","inChatList","getMessageIsSpoiler","tracks","currentTrackId","voiceQueue","musicQueue","playNext","trackId","isReverseOrder","currentTrack","onTrackChange","nextTrackId","findNextInQueue","audioPlayer","AudioOrigin","Inline","openAudioPlayer","parseMessageKey","splitTrackId","messageKey","nextTrack","onForcePlay","safePlay","stopCurrentAudio","register","trackType","track","Audio","handleEvent","isSafariPatchInProgress","proxy","Proxy","createAudio","trackIdComparator","addTrackToQueue","paused","preventPlayAfterPatch","preload","patchSafariProgressiveAudio","globalSearch","currentContent","GlobalSearchContent","Music","openedChatId","queueFilter","cleanUpQueue","prevSrc","setCurrentTime","fastSeek","setVolume","setPlaybackRate","rate","playbackRate","toggleMuted","requestNextTrack","isFirst","requestPreviousTrack","shouldRemoveFromQueue","h","trackIdFilter","removeFromQueue","currentId","getTrackQueue","Search","chatAudio","makeTrackId","getMessageServerKey","one","two","dateOne","keyOne","dateTwo","keyTwo","localeCompare","isPrivateChat","getPrivateChatUserId","canDeleteForAll","isBasicGroup","leaveChannel","deleteHistory","deleteSavedHistory","deleteChannel","deleteChatUser","blockUser","deleteChat","chatTitle","handleDeleteForAll","shouldDeleteForAll","handleDeleteAndStop","handleDeleteChat","handleLeaveChat","Modal","header","COLOR_REPLACE_PATTERN","AttachBotIcon","isTouchScreen","getDocumentMediaHash","Text","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","isInSideMenu","canShowNew","toggleAttachBot","icons","openMenu","closeMenu","menuPosition","setMenuPosition","isFromSideMenu","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","shortName","isDisclaimerNeeded","interval","MAX_STANDARD_QUALITY_IMG_SIZE","MAX_HIGH_QUALITY_IMG_SIZE","MAX_THUMB_IMG_SIZE","MAX_ASPECT_RATIO","FILE_EXT_REGEX","options","createObjectURL","mimeType","quick","shouldSendAsFile","img","preloadImage","validateAspectRatio","maxQuickImgSize","shouldShrink","GIF_MIME_TYPE","compressedBlobUrl","resizedUrl","scaleImage","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","performer","coverUrl","parseBlob","selectCover","fetchBlob","common","picture","format","cover","coverBlob","parseAudioMetadata","shouldSendCompressed","attach","getBoostProgressInfo","boostInfo","freezeOnLevelUp","level","boosts","currentLevelBoosts","nextLevelBoosts","hasMyBoost","prepaidGiveaways","isJustUpgraded","currentLevel","hasNextLevel","levelProgress","remainingBoosts","isMaxLevel","getSenderName","preloadedHashes","LimitedMap","Document","autoLoadFileMaxSizeMb","shouldWarnAboutFiles","onMediaClick","downloadMedia","setSharedSettingOption","isFileIpDialogOpen","openFileIpDialog","closeFileIpDialog","shouldNotWarnAboutFiles","setShouldNotWarnAboutFiles","fileName","getDocumentExtension","wasIntersected","markIntersected","shouldDownload","documentHash","isLoaded","hasPreview","getDocumentHasPreview","shouldForceDownload","innerMediaType","mediaSize","fromDocumentAttribute","fromPreload","fileEl","onHover","mediaContainer","getMessageDocumentVideo","getMessageDocumentPhoto","shouldSkipPhoto","fetch","IS_PROGRESSIVE_SUPPORTED","videoEl","naturalWidth","naturalHeight","updateChatMessage","setGlobal","preloadDocumentMedia","handleDownload","originMessage","isIpRevealingMedia","handleFileIpConfirm","handleDateClick","isDocumentVideo","MediaAreaSuggestedReaction","mediaArea","customEmojiSize","setCustomEmojiSize","views","isDark","isFlipped","reactionCount","r","shouldDisplayCount","updateCustomEmojiSize","prevReactionCount","effectSize","shouldPause","formatTemperature","temperatureC","restrictedEmoji","selectRestrictedEmoji","MediaAreaWeather","convertToRGBA","textColor","getTextColor","updateCustomSize","isImmediate","customEmojiHeight","applyFn","noPlay","withTranslucentThumb","STORY_ASPECT_RATIO","NO_SHINY_TYPES","prepareStyle","mediaWidth","rotation","radius","coordinates","pixelRadius","pixelWidth","pixelHeight","MediaAreaOverlay","isStoryPlaying","openUniqueGiftBySlug","closeStoryViewer","setMediaWidth","useWindowSize","clientWidth","MOBILE_SCREEN_MAX_WIDTH","screenAspectRatio","mediaAreas","isShiny","channelId","slug","handleMediaAreaClick","lastCallback","onBeforeUnload","useScrollNotch","selector","deps","toggleExtraClass","RADIUS_RATIO","lastWorkerIndex","thumbData","canvasRef","workerIndex","cycleRestrict","offscreenRef","blurThumb","canvas","uri","image","transferControlToOffscreen","useOffscreenCanvasBlur","groupCall","selectChatGroupCall","isMasterTab","groupCalls","activeGroupCallId","participantsCount","GroupCallTopPane","onPaneStateChange","requestMasterAndJoinGroupCall","handleJoinGroupCall","participants","fetchedParticipants","renderingParticipantCount","renderingFetchedParticipants","isRendering","resolver","msOrSchedulerFn","noFirst","setValue","useThrottledSignal","getValue","ms","throttledResolver","noLast","debouncedResolver","PENDING_TRANSLATIONS","useMessageTranslation","chatTranslations","requestedLanguageCode","messageTranslation","byLangCode","isPending","languageTranslations","markMessagesTranslationPending","throttledProcessPending","addPendingTranslation","translatedText","translateMessages","hasUnprocessed","messageIdsToTranslate","oldMessageIds","newMessageIds","removePendingTranslations","TINY_SCREEN_WIDTH_MQL","matchMedia","WITH_AVATAR_TINY_SCREEN_WIDTH_MQL","renderAudio","isPlaying","bufferedRanges","seekerRef","showProgress","showSeekline","renderSeekline","renderVoice","waveformCanvasRef","isMediaUnread","isTranscribing","isTranscriptionHidden","isTranscribed","isTranscriptionError","onClickTranscribe","onHideTranscription","ry","OneTimeModal","mediaDuration","selectMessageMediaDuration","canDownload","canTranscribe","autoPlay","onPlay","onPause","onReadMedia","transcribeAudio","openOneTimeMediaModal","contentAudio","mediaSource","isVoice","isSeeking","isActivated","setIsActivated","coverHash","coverBlobUrl","hasTtl","hasMessageTtl","isInOneTimeModal","handleForcePlay","handleTrackChange","isBuffered","bufferingHandlers","checkBuffering","useBuffering","noReset","playPause","useAudioPlayer","isMessageLocal","reversePlayProgress","isReverse","spikes","peak","MIN_SPIKES","MAX_SPIKES","getSeeklineSpikeAmounts","durationFactor","spikesCount","fitCount","newData","springFactor","leftFiller","rightFiller","val","interpolateArray","encoded5bit","bitsCount","valuesCount","bitsData","l","byteIndex","bitShift","lastByteIndex","lastBitShift","lastValue","decodeWaveform","fillStyle","progressFillStyle","ctx","getContext","globalAlpha","spikeHeight","beginPath","moveTo","arcTo","closePath","roundedRectangle","renderWaveform","useWaveformCanvas","withSeekline","isLoadingForPlaying","shouldRenderCross","handleButtonClick","setAudioPlayerOrigin","handleDownloadClick","handleSeek","MouseEvent","targetTouches","handleStartSeek","handleStopSeek","handleTranscribe","renderFirstLine","renderSecondLine","captureEvents","onCapture","onRelease","onDrag","SharedMedia","buttonClassNames","contentClassName","renderWithTitle","backgroundImage","AnimatedIcon","Flame","transparent","withColor","noCross","rotationOffset","STREAMING_PROGRESS","STREAMING_TIMEOUT","PROGRESS_THROTTLE","noLoad","mediaFormat","delay","isHtmlAllowed","isStreaming","Progressive","selectIsSynced","setLoadProgress","startedAtRef","handleProgress","spentTime","groupCallId","selectGroupCall","selectGroupCallParticipant","participantId","selectIsAdminInActiveGroupCall","selectActiveGroupCall","selectPhoneCallUser","phoneCall","adminId","selectCanInviteToActiveGroupCall","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","STORY_OVERVIEW","BOOST_OVERVIEW","withAbsoluteValue","StatisticsOverview","statistics","isToncoin","renderOverviewItemValue","change","percentage","isChangeNegative","renderBalanceCell","usdRate","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","period","balances","schema","getSchemaByType","formatFullDate","minDate","maxDate","availableBalance","currentBalance","overallRevenue","cell","field","formatInteger","isGraph","obj","ConnectionStatus","useConnectionStatus","isSyncing","hasMiddleHeader","setIsOnline","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","connectionStatus","connectionStatusPosition","connectionStatusText","AbsoluteVideo","videoUrl","load","recalculatePositionAndSize","SIZE","TextFormatter","SCROLLER_CLASS","TEXT_FORMATTER_SAFE_AREA_PX","IGNORE_KEYS","messageSendKeyCombo","isAttachmentModalInput","editLastMessage","replyToNextMessage","selectionTimeoutRef","cloneRef","scrollerCloneRef","sharedCanvasRef","sharedCanvasHqRef","absoluteContainerRef","isContextMenuOpenRef","isTextFormatterOpen","openTextFormatter","closeTextFormatter","textFormatterAnchorPosition","setTextFormatterAnchorPosition","selectedRange","setSelectedRange","isTextFormatterDisabled","setIsTextFormatterDisabled","isMobileDevice","shouldDisplayTimer","setShouldDisplayTimer","handleTimerEnd","prefixId","customColor","useDynamicColorListener","colorFilter","useColorFilter","playersById","clearPlayers","player","synchronizeElements","playerIdsToClear","playerId","mediaUrl","getCustomEmojiMediaDataForInput","canvasBounds","elementBounds","customEmoji","isHq","selectIsAlwaysHighPriorityEmoji","renderId","viewId","isLottie","shouldUseTextColor","hexToRgb","lottie","ensureRLottie","coords","isLowPriority","g","removeView","setSharedCanvasCoords","absoluteVideo","createPlayer","animation","addCustomEmojiInputRenderCallback","activePlayersById","prevCustomColor","throttledSynchronizeElements","prevDpr","freezeAnimation","unfreezeAnimation","unfreezeAnimationOnRaf","useInputCustomEmojis","maxInputHeight","updateInputHeight","willSend","fastRaf","scroller","newHeight","isOverflown","transitionDuration","log","toggle","htmlRef","focusInput","handleCloseTextFormatter","empty","clearSelection","checkSelection","selectedText","START_TO_END","processSelection","selectionRect","scrollerRect","processSelectionWithTimeout","handleDocumentKeyDown","getIsDirectTextInputDisabled","isSelectionCollapsed","isCollapsed","isContentEditable","newEvent","KeyboardEvent","captureFirstTab","captureKeyboardListeners","onTab","suppressFocus","inputScrollerContentClass","placeholderAriaLabel","spellCheck","onChange","onKeyDown","isComposing","handleCloseContextMenu","e2","onTouchCancel","TextTimer","endsAt","anchorPosition","orderDiffs","numberOfUp","numberOfDown","Infinity","typingUser","typingUserName","isHovering","markMouseOver","markMouseOut","fullGiftHash","fullGifBlobUrl","hasSpoiler","onMouseOver","onMouseOut","decoding","shouldUseDraft","NOTIFICATION_DURATION","shouldDisableNotification","setIsUnsupported","handleUnsupported","IS_MOBILE","onError","onCanPlay","PROGRESS_CENTER","ROUND_VIDEO_DIMENSIONS_PX","PROGRESS_CIRCUMFERENCE","stopPrevious","RoundVideo","playerRef","circleRef","shouldRenderSpoiler","getProgress","setProgress","getThrottledProgress","playerEl","strokeDashOffset","stopPlaying","capturePlaying","togglePlaying","isPriority","onEnded","cx","cy","replaceWithTeact","STARS_ICON_PLACEHOLDER","ProfilePhoto","canPlayVideo","isDeleted","isDeletedUser","isChatWithRepliesBot","canHaveMedia","avatarHash","avatarPhotoId","getChatAvatarHash","previewHash","photoHash","getProfilePhotoMediaHash","photoBlobUrl","videoHash","getVideoProfilePhotoMediaHash","isVideoReady","markVideoReady","isFullMediaReady","isBlurredThumb","thumbnail","dataUri","blurredThumbCanvasRef","specialIcon","userFullName","getFirstLetters","GIFT_STICKER_SIZE","POSITIONS","PinnedGift","gift","withGlow","openGiftInfoModal","stickerRef","giftAttributes","getGiftAttributes","model","backdrop","GiftEffectWrapper","withSparkles","sparklesColor","glowColor","edgeColor","ProfilePinnedGifts","gifts","clamp","getExpandedPosition","PATTERN_Y_SHIFT","profilePhotos","selectPeerPhotos","avatarOwnerId","mediaViewer","currentTopicId","animationLevel","emojiStatus","emojiStatusSticker","emojiStatusSlug","profileColor","selectPeerProfileColor","hasBackground","selectPeerHasProfileBackground","savedGifts","selectPeerSavedGifts","profileColorOption","ProfileInfo","isForSettings","isForMonoforum","onExpand","openStickerSet","openPrivacySettingsNoticeModal","openProfileRatingModal","loadPeerSavedGifts","photos","prevMediaIndex","prevAvatarOwnerId","hasSlideAnimation","setHasSlideAnimation","currentPhotoIndex","setCurrentPhotoIndex","collectibleEmojiStatus","backgroundEmoji","useCustomEmoji","patternDocumentId","backgroundEmojiId","profileColorSet","bgColors","centerColor","storyColors","colors","darkColors","reverse","pinnedGifts","currentIndex","usePhotosPreload","handleProfilePhotoClick","SettingsAvatar","handleStatusClick","fromUserId","selectPreviousMedia","selectNextMedia","handleOpenGetReadDateModal","isReadDate","handleRatingClick","handleMinimizedAvatarClick","selectorToPreventScroll","onSwipe","SwipeDirection","Right","Left","RadialPatternBackground","backgroundColors","patternIcon","patternSize","withLinearGradient","yPosition","totalPhotosLength","enumerator","activeDashIndex","MAX_PHOTO_DASH_COUNT","renderPhotoTabs","personalPhoto","fallbackPhoto","resolveTransitionName","canCopyTitle","renderUserRating","isReadDateRestrictedByMe","renderStatus","starsRating","onRatingClick","safeLevel","iconLevel","iconName","originalDuration","onInit","noPlaylist","noProgressUpdates","noHandleEvents","controllerRef","setIsPlaying","isPlayingSync","mediaHandlers","closeAudioPlayer","skipTime","seekOffset","seekTime","makeMediaHandlers","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","prevShouldPlay","playIfPresent","setTime","audioProxy","SponsoredContextMenu","shouldSkipAbout","onAboutAdsClick","onSponsoredHide","onSponsorInfo","onSponsoredReport","menuRef","isSeparatorNeeded","SponsoredMessageContextMenuContainer","onItemClick","reportSponsored","handleItemClick","handleAboutAdsOpen","handleSponsoredHide","handleSponsorInfo","handleReportSponsoredMessage","canManageTopics","EmptyForum","openCreateTopicPanel","handleCreateTopic","centered","selectTopics","lastMessageStory","isChatMuted","canDelete","selectCanDeleteTopic","Topic","deleteTopic","isClosed","handleOpenDeleteModal","handleOpenTopic","wasOpened","editTopic","toggleTopicPinned","markTopicRead","canToggleClosed","getCanManageTopic","canTogglePinned","actionUnreadMark","actionCloseTopic","useTopicContextActions","ForumPanel","onOpenAnimationStart","scrollTopHandlerRef","setIsScrolled","handleClose","handleToggleChatInfo","orderedPinnedTopicIds","totalCount","TOPICS_SLICE","shouldRenderRef","prevIsVisible","useHistoryBack","onBack","endHeavyAnimation","waitForTransitionEnd","onTransitionEnd","TOPIC_HEIGHT_PX","sensitiveArea","TOPIC_LIST_SENSITIVE_AREA","beforeChildren","renderTopics","GENERAL_TOPIC_ID","prop","getBrowserFullscreenElementProp","useFullscreen","elRef","exitCallback","enterCallback","isFullscreen","setIsFullscreen","listener","HTMLVideoElement","controls","listenerEnter","listenerExit","setFullscreen","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","exitFullscreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","checkIfFullscreen","removeTauriListener","tauri","getCurrentWindow","tauriWindow","onResized","setupTauriListener","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","fullscreenProp","getSingularPaidMedia","singularMedia","accumulate","accumulator","calculateContainerSize","layout","sides","calculateAlbumLayout","ratios","isSingleMessage","allMedia","getRatios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","params","minWidth","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","optimalCounts","optimalHeights","rowCount","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","h0","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","isTranslatable","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","canReply","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","quickReactionContainer","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","isVisibleX","isVisibleY","excludedClosestSelector","clearInterval","getIsKeyboardVisible","handleTap","handleDoubleClick","quoteOffset","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","nextElementSibling","renderPictogram","srcUrl","getPictogramDimensions","EmbeddedStory","isFullStory","isExpiredStory","isVideoStory","getStoryMediaHash","pictogramUrl","handleFastClick","shouldReset","TopicChip","getTopicColorCssVariable","blankSrc","withSelectControl","WrappedComponent","noSelectControls","selectIsMessageSelected","toggleMessageSelection","handleMessageSelect","withShift","newProps","dims","PhotoWithSelect","VideoWithSelect","uploadsByKey","fileUploads","byMessageKey","Album","hasCustomAppendix","albumLayout","cancelUploadMedia","mediaCount","handlePaidMediaClick","handleAlbumMessageClick","handleCancelUpload","containerWidth","renderingPaidMedia","paidPhotoOrPreview","paidVideoOrPreview","fileUpload","getMessageKey","useAnimatedEmoji","soundId","activeEmojiInteractions","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","interactions","startedInteractions","sendInteractionBunch","startSize","isReversed","performance","interactionMessageId","customEmojiId","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","AnimatedCustomEmoji","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","AnimatedEmoji","forceLoadPreview","quality","forcePreview","CommentButton","isCustomShape","asActionButton","shouldRenderLoading","useAsyncRendering","originMessageId","recentReplierIds","originChannelId","recentRepliers","hasUnread","commentsText","getContactName","contact","firstName","lastName","Contact","openAddContactDialog","isRegistered","getCanAddContact","handleAddContact","emojiIconClassName","ContextMenuContainer","COLOR","FactCheck","isToggleDisabled","cutoutRef","isCollapsible","setIsCollapsed","useCollapsibleLines","countryLocalized","countryCode","canExpand","handleExpand","handleToggle","Separator","Game","game","getGamePreviewPhotoHash","getGamePreviewVideoHash","videoBlobUrl","handleGameClick","getMessageText","giveaway","channelIds","giftSticker","selectGiftStickerForDuration","months","Giveaway","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","untilDate","prizeDescription","quantity","winnersCount","hasEnded","translatedNames","countries","handlePeerClick","handleShowInfoClick","callApi","handleCloseInfo","giveawayInfoTitle","PartyPopper","winnerIds","PeerChip","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","isOnlyConfirm","isResultsInfo","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstKey","giveawayDuration","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","InlineButtons","renderIcon","RE_TME_LINK","buttonType","Invoice","invoice","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","crossOrigin","formatCurrency","InvoiceMediaPreview","isConnected","openInvoice","loadExtendedMedia","refreshExtendedMedia","isExtendedMedia","spoiler","buy","lock","formatCurrencyAsString","TIMER_CIRCUMFERENCE","TIMER_RADIUS","MOVE_THRESHOLD","PinSvg","Location","countdownRef","location","getMessageLocation","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","setPoint","shouldRenderText","prevMediaBlobUrl","mapBlobUrl","accuracyRadiusPx","accuracyRadius","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","timeLeft","formatCountdownShort","renderPin","pinClassName","heading","venueType","iconSrc","mapPin","renderOverlay","formatLocationLastUpdate","editDate","renderInfo","MessageMeta","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","isTranslated","withFullDate","onTranslationClick","onEffectClick","onOpenThread","markActivated","handleImportedClick","dateTitle","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","viewsTitle","forwardsCount","repliesTitle","isImported","isVideoProcessingPending","MessagePhoneCall","reason","isMissed","isCancelled","handleCall","formattedDuration","formatTimeDuration","timeFormatted","getCallMessageKey","PaidMediaOverlay","isClickable","isBought","starsAmount","getPercentage","total","PollOption","answer","voteResults","totalVoters","maxVotersCount","correctResults","option","correctAnswer","showIcon","isChosen","answerPercent","votersCount","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","getPollTypeString","summary","isPublic","closed","quiz","getReadableVotersCount","Poll","onSendVote","loadMessage","openPollResults","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isMultiple","multipleChoice","recentVoterIds","isCorrect","answers","hidden","chosen","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","showSolution","solution","solutionEntities","question","CheckboxGroup","selected","loadingOptions","isRound","RadioGroup","loadingOption","Sticker","withEffect","onStopEffect","effectRef","hasEffect","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","shouldRenderEffect","openModal","isMemojiSticker","getStickerDimensions","fullMediaClassName","AnimatedSticker","openStoryViewer","imageHash","imgBlobUrl","isSinglePeer","isSingleStory","BaseStory","lastReadId","selectPeerStories","targetUser","thumbUrl","TodoList","todoList","toggleTodoCompleted","completions","othersCanComplete","completedTasks","setCompletedTasks","completedTasksSet","canToggle","completedIds","itemId","handleTaskLabelClick","handleTaskToggle","newCompletedTasks","newCompletedId","newIncompletedId","incompletedIds","isReadOnly","tasks","task","completedBy","subLabel","getPeerFullTitle","onClickLabel","WebPageUniqueGift","pattern","isHover","markHover","unmarkHover","WebPage","messageWebPage","onDocumentClick","onContainerClick","onAudioPlay","onCancelMediaTransfer","openTelegramLink","stickersRef","handleMediaClick","handleContainerClick","fullWebPage","hasCustomColor","isWithTextColor","documents","linkTimestamp","handleOpenTelegramLink","isStory","isGift","quickButtonLangKey","getWebpageButtonLangKey","isEmoji","quickButtonTitle","isArticle","isSquarePhoto","getIsSmallPhoto","isMediaInteractive","EmojiIconBackground","emojiDocumentId","isSafe","caption","noForcedUpperCase","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","activeReactions","loadingThread","viaBotId","transcriptionId","viaBusinessBotId","selectFullWebPageFromMessage","isGroup","webPageStoryData","webPageStory","botSender","senderAdminMember","adminMembersById","isThreadTop","replyFrom","getMessageReplyInfo","storyReplyPeerId","storyReplyId","getStoryReplyInfo","shouldHideReply","replyMessage","selectReplyMessage","forwardHeader","replyMessageSender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noHighlight","noFocusHighlight","isResizingContainer","quote","focusedQuote","focusedQuoteOffset","scrollTargetPosition","middleSearch","selectCurrentMiddleSearch","highlight","isHashtag","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","selectCanReplyToMessage","isInDocumentGroup","documentGroupFirstMessageId","selectMessageIdsByGroupId","reactionMessage","unreadReactions","hasTopicChip","messageTopic","selectChatTranslations","requestedTranslationLanguage","selectRequestedMessageTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","hasActiveReactions","senderBoosts","boostsApplied","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectPollFromMessage","maxTimestamp","selectMessageTimestampableDuration","selectMessageLastPlaybackTimestamp","minFutureTime","starsSuggestedPostFutureMin","isReplyMediaNsfw","selectIsMessageProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldLoopStickers","selectShouldLoopStickers","defaultReaction","selectDefaultReaction","transcriptions","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","withAnimatedEffects","isLoadingComments","loadingChatId","loadingMessageId","tags","savedReactionTags","noReactions","appearAsNotOwn","clickSuggestedMessageButton","rejectSuggestedPost","openSuggestedPostApprovalModal","disableContextMenuHint","bottomMarkerRef","setTranscriptionHidden","isPlayingSnapAnimation","setIsPlayingSnapAnimation","isPlayingDeleteAnimation","setIsPlayingDeleteAnimation","requestEffect","hideEffect","isDeclineDialogOpen","openDeclineDialog","closeDeclineDialog","declineReason","setDeclineReason","contextMenuTarget","hasMessageReply","isReplyToMessage","paidMediaPhoto","paidMediaVideo","messageReplyInfo","storyReplyInfo","withVoiceTranscription","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","canShowSenderBoosts","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canMarkAsRead","canFocus","fromMessageId","hasFactCheck","hasForwardedCustomShape","hasSubheader","childMessageIds","messageColorPeer","senderPeer","handleSenderClick","handleViaBotClick","handleReplyClick","handleDocumentClick","handleAudioPlay","handleAlbumMediaClick","handlePhotoMediaClick","handleVideoMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleMarkAsRead","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","markMessagesRead","sendPollVote","openForwardMenu","searchChatMediaMessages","deleteMessages","removeFromFocusList","replyToTopId","isQuote","channelPostId","focusMessageId","replyMessageId","ScheduledInline","openMediaViewerWithPhotoOrVideo","withDynamicLoading","currentMediaMessageId","videoContent","webpageTimestamp","albumMessageId","albumIndex","ScheduledAlbum","originalChatId","savedFromPeerId","groupedChatId","selectWithGroupedId","useInnerHandlers","handleEffectClick","isPartialAlbumDelete","isDeleting","textMessage","hasTextContent","hasMessageText","setLanguage","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","hasOutsideReactions","hasCommentCounter","hasBottomCommentButton","hasActionButton","isGeoLiveActive","peerColorClass","isInvertibleMedia","classNames","MESSAGE_CONTENT_CLASS_NAME","isMediaWithNoText","hasInlineKeyboard","isViaBot","hasFooter","emojiOnlyCount","EMOJI_SIZES","buildContentClassName","withAppendix","paidMessageStarsInMeta","metaPosition","reactionsPosition","quickReactionPosition","useFocusMessage","viaBusinessBotTitle","canShowPostAuthor","useMessageResizeObserver","bottomMarker","isElementInViewport","unreadMentionIds","extraPadding","reactionsMaxWidth","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","renderMessageText","isForAnimation","MessageText","messageOrStory","canBeEmpty","ReactionStaticEmoji","renderReactionsAndMeta","Reactions","metaChildren","noRecentReactors","renderInvertedMediaContent","textContentClass","footerClass","hasContentAfterText","isMetaInText","renderWebPage","renderInvertibleMediaContent","getMessageWebPage","shouldRenderSenderName","renderForwardTitle","handleSuggestedMessageButton","handleDeclineReasonChange","handleDeclineConfirm","rejectComment","renderSenderName","shouldSkipRenderForwardTitle","shouldSkipRenderAdminTitle","senderEmojiStatus","senderIsPremium","shouldRenderForwardAvatar","hasBotSenderUsername","senderColor","EMOJI_STATUS_LOOP_LIMIT","fakeType","FakeIcon","forwardAuthor","shouldRenderSuggestedPostButtons","isAccepted","isRejected","isSuggestedPostExpired","onCopy","onDoubleClick","onMouseMove","shouldReadMedia","EmbeddedMessage","forwardSender","Story","StoryMention","isOutside","targetHref","InputText","NBSP","containedMedia","replyMedia","isVideoThumbnail","previewPhotoSizes","replyForwardInfo","forwardSendersTitle","peerTitles","conjunction","senderChatTitle","forwardSenderTitle","areSendersSame","priceText","TON_CURRENCY_CODE","formatTonAsIcon","shouldConvertFromNanos","scheduleText","getMediaContentTypeDescription","renderMediaContentType","renderTextContent","isReplyToQuote","renderSender","isFullVideo","shouldRenderVideo","freezeWhenClosed","selectCurrentUserId","workspacesKey","workspaceIdKey","excludeOtherWorkspacesKey","setSavedWorkspaces","setCurrentWorkspaceId","setExcludeOtherWorkspaces","dependencies","LIMIT_PER_BATCH","BATCH_INTERVAL","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","rel","startPlaying","isPositionUpdateRequired","requirePositionUpdate","resetPositionUpdate","effectAnimationId","effectStickerId","getEffectHash","effectBlob","handleEnded","effectClassName"],"sourceRoot":""}
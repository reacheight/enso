{"version":3,"file":"7768.63a72b81e6b33c8ff8e0.js","mappings":"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","sources":["webpack://telegram-t/./src/components/common/gift/GiftMenuItems.tsx","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/account.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/ui/focusList.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/ui/workspaces.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/AccountMenuItems.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/WorkspaceAvatar.tsx","webpack://telegram-t/./src/components/left/main/WorkspaceManager.tsx","webpack://telegram-t/./src/components/left/main/SavedMessages.tsx","webpack://telegram-t/./src/components/left/main/CustomButtons.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/value/GiftInfoValueModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/locked/GiftLockedModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/resale/GiftResalePriceComposerModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferConfirmModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://telegram-t/./src/components/modals/priceConfirm/PriceConfirmModal.async.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.async.tsx","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.async.tsx","webpack://telegram-t/./src/components/modals/profileRating/ProfileRatingModal.async.tsx","webpack://telegram-t/./src/components/modals/quickPreview/QuickPreviewModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/util/animations/viewTransitionTypes.ts","webpack://telegram-t/./src/hooks/scroll/useTopOverscroll.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/common/AnimatedTabItem.module.scss?3313","webpack://telegram-t/./src/components/common/AnimatedTabItem.tsx","webpack://telegram-t/./src/components/common/AnimatedTabList.tsx","webpack://telegram-t/./src/components/common/AnimatedTabList.module.scss?5731","webpack://telegram-t/./src/components/right/gifts/StarGiftCollectionList.tsx","webpack://telegram-t/./src/components/right/gifts/StarGiftCollectionList.module.scss?00be","webpack://telegram-t/./src/components/right/stories/StoryAlbumList.tsx","webpack://telegram-t/./src/components/right/stories/StoryAlbumList.module.scss?ff67","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/FocusList.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/workspace/WorkspaceModal.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/hooks/tauri/useTauriEvent.ts","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSavedStarGift, ApiStarGift,\n} from '../../../api/types';\n\nimport { DEFAULT_STATUS_ICON_ID, TME_LINK_PREFIX } from '../../../config';\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  peerId: string;\n  canManage?: boolean;\n  gift: ApiSavedStarGift | ApiStarGift;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GiftMenuItems = ({\n  peerId,\n  canManage,\n  gift: typeGift,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n}: OwnProps) => {\n  const {\n    showNotification,\n    openChatWithDraft,\n    openGiftTransferModal,\n    openGiftResalePriceComposerModal,\n    openGiftStatusInfoModal,\n    setEmojiStatus,\n    toggleSavedGiftPinned,\n    changeGiftVisibility,\n    updateStarGiftPrice,\n    closeGiftInfoModal,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const gift = isSavedGift ? typeGift.gift : typeGift;\n\n  const starGiftUniqueSlug = gift?.type === 'starGiftUnique' ? gift.slug : undefined;\n  const starGiftUniqueLink = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return `${TME_LINK_PREFIX}nft/${starGiftUniqueSlug}`;\n  }, [starGiftUniqueSlug]);\n  const userCollectibleStatus = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return collectibleEmojiStatuses?.find((\n      status,\n    ) => status.type === 'collectible' && status.slug === starGiftUniqueSlug) as ApiEmojiStatusCollectible | undefined;\n  }, [starGiftUniqueSlug, collectibleEmojiStatuses]);\n\n  const currenUniqueEmojiStatusSlug = currentUserEmojiStatus?.type === 'collectible'\n    ? currentUserEmojiStatus.slug : undefined;\n\n  const isGiftUnique = gift && gift.type === 'starGiftUnique';\n  const canTakeOff = isGiftUnique && currenUniqueEmojiStatusSlug === gift.slug;\n  const canWear = userCollectibleStatus && !canTakeOff;\n  const giftResalePrice = isGiftUnique ? gift.resellPrice : undefined;\n\n  const hasPinOptions = canManage && savedGift && !savedGift.isUnsaved && isGiftUnique;\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { inputGift, isUnsaved } = savedGift!;\n    changeGiftVisibility({ gift: inputGift!, shouldUnsave: !isUnsaved });\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    copyTextToClipboard(starGiftUniqueLink);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  });\n\n  const handleLinkShare = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    openChatWithDraft({ text: { text: starGiftUniqueLink } });\n  });\n\n  const handleTransfer = useLastCallback(() => {\n    if (!savedGift || savedGift?.gift.type !== 'starGiftUnique') return;\n\n    if (savedGift.canTransferAt && savedGift.canTransferAt > getServerTime()) {\n      showNotification({\n        message: {\n          key: 'NotificationGiftCanTransferAt',\n          variables: { date: formatDateAtTime(oldLang, savedGift.canTransferAt * 1000) },\n        },\n      });\n      return;\n    }\n\n    openGiftTransferModal({ gift: savedGift });\n  });\n\n  const handleSell = useLastCallback(() => {\n    if (!savedGift) return;\n    if (savedGift.canResellAt && savedGift.canResellAt > getServerTime()) {\n      showNotification({\n        message: {\n          key: 'NotificationGiftCanResellAt',\n          variables: { date: formatDateAtTime(oldLang, savedGift.canResellAt * 1000) },\n        },\n      });\n      return;\n    }\n    openGiftResalePriceComposerModal({ peerId, gift: savedGift });\n  });\n\n  const handleUnsell = useLastCallback(() => {\n    if (!savedGift || savedGift.gift.type !== 'starGiftUnique' || !savedGift.inputGift) return;\n    closeGiftInfoModal();\n    updateStarGiftPrice({ gift: savedGift.inputGift, price: {\n      currency: STARS_CURRENCY_CODE, amount: 0, nanos: 0,\n    } });\n    showNotification({\n      icon: 'unlist-outline',\n      message: {\n        key: 'NotificationGiftIsUnlist',\n        variables: { gift: lang('GiftUnique', { title: savedGift.gift.title, number: savedGift.gift.number }) },\n      },\n    });\n  });\n\n  const handleWear = useLastCallback(() => {\n    if (gift?.type !== 'starGiftUnique' || !userCollectibleStatus) return;\n    openGiftStatusInfoModal({ emojiStatus: userCollectibleStatus });\n  });\n\n  const handleTakeOff = useLastCallback(() => {\n    if (canTakeOff) {\n      setEmojiStatus({\n        emojiStatus: { type: 'regular', documentId: DEFAULT_STATUS_ICON_ID },\n      });\n    }\n  });\n\n  const handleTogglePin = useLastCallback(() => {\n    toggleSavedGiftPinned({ peerId, gift: savedGift! });\n  });\n\n  return (\n    <>\n      {hasPinOptions && (\n        <MenuItem icon={savedGift.isPinned ? 'unpin' : 'pin'} onClick={handleTogglePin}>\n          {lang(savedGift.isPinned ? 'ChatListUnpinFromTop' : 'ChatListPinToTop')}\n        </MenuItem>\n      )}\n      <MenuItem icon=\"link-badge\" onClick={handleCopyLink}>\n        {lang('CopyLink')}\n      </MenuItem>\n      <MenuItem icon=\"forward\" onClick={handleLinkShare}>\n        {lang('Share')}\n      </MenuItem>\n      {canManage && isGiftUnique && (\n        <MenuItem icon=\"diamond\" onClick={handleTransfer}>\n          {lang('GiftInfoTransfer')}\n        </MenuItem>\n      )}\n      {canManage && isGiftUnique && !giftResalePrice && (\n        <MenuItem icon=\"sell-outline\" onClick={handleSell}>\n          {lang('Sell')}\n        </MenuItem>\n      )}\n      {canManage && isGiftUnique && Boolean(giftResalePrice) && (\n        <MenuItem icon=\"unlist-outline\" onClick={handleUnsell}>\n          {lang('GiftInfoUnlist')}\n        </MenuItem>\n      )}\n      {canManage && savedGift && (\n        <MenuItem icon={savedGift.isUnsaved ? 'eye-outline' : 'eye-crossed-outline'} onClick={handleTriggerVisibility}>\n          {lang(savedGift.isUnsaved ? 'GiftActionShow' : 'GiftActionHide')}\n        </MenuItem>\n      )}\n      {canWear && (\n        <MenuItem icon=\"crown-wear-outline\" onClick={handleWear}>\n          {lang('GiftInfoWear')}\n        </MenuItem>\n      )}\n      {canTakeOff && (\n        <MenuItem icon=\"crown-take-off-outline\" onClick={handleTakeOff}>\n          {lang('GiftInfoTakeOff')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(GiftMenuItems);\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = 3 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  replaceWebPage,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll, webPage,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, true, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, true, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newScheduledMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message as ApiMessage,\n            poll: update.poll,\n            webPage: update.webPage,\n          });\n        }\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, false, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message,\n            poll: update.poll,\n            webPage: update.webPage,\n            shouldForceReply,\n          });\n        }\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, false, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll, webPage } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateScheduledMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateScheduledMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'failedMessageTranslations': {\n      const { chatId, messageIds, toLanguageCode } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, []);\n\n      setGlobal(global);\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nexport function updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  isNew: boolean,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  if (!currentMessage && !isNew) return global;\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const threadId = selectThreadIdFromMessage(global, message);\n  global = updateThreadInfo(global, chatId, threadId, {\n    lastMessageId: message.id,\n  });\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiInputSuggestedPostInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n  MediaContent,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  STARS_CURRENCY_CODE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectCustomEmoji,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsMonoforumAdmin,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectSavedDialogIdFromMessage,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { updateWithLocalMedia } from '../apiUpdaters/messages';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  const isRestricted = selectIsChatRestricted(global, chatId);\n  // TODO Revise if `isRestricted` check is needed\n  if (!chat || isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadMessagesById', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageIds } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messages = await callApi('fetchMessagesById', {\n    chat,\n    messageIds,\n  });\n  if (!messages) return;\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chatId, buildCollectionByKey(messages, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n  const draftSuggestedPostInfo = !isForwarding && !isStoryReply\n    ? draft?.suggestedPostInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const threadInfo = selectThreadInfo(global, chatId!, threadId!);\n  const lastMessageId = threadId === MAIN_THREAD_ID\n    ? selectChatLastMessageId(global, chatId!) : threadInfo?.lastMessageId;\n\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const suggestedPostPrice = draftSuggestedPostInfo?.price;\n  const suggestedPostCurrency = suggestedPostPrice?.currency || STARS_CURRENCY_CODE;\n  const suggestedPostAmount = suggestedPostPrice?.amount || 0;\n  if (suggestedPostAmount && !draftReplyInfo) {\n    if (suggestedPostCurrency === STARS_CURRENCY_CODE) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n\n      if (suggestedPostAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: suggestedPostAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else if (suggestedPostCurrency === TON_CURRENCY_CODE) {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (suggestedPostAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const suggestedMessage = draftReplyInfo && draftSuggestedPostInfo\n    ? selectChatMessage(global, chatId!, draftReplyInfo.replyToMsgId) : undefined;\n  let suggestedMedia: MediaContent | undefined;\n  if (draftSuggestedPostInfo && suggestedMessage?.content) {\n    suggestedMedia = suggestedMessage.content;\n  }\n\n  const params: SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    suggestedPostInfo: draftSuggestedPostInfo,\n    suggestedMedia,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n    ...suggestedMessage && { isInvertedMedia: suggestedMessage?.isInvertedMedia },\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group, MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('editTodo', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, todo, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('editTodo', {\n    chat,\n    message,\n    todo,\n  });\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!text || !chat) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  if (chat.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n    suggestedPostInfo: currentDraft?.suggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply, shouldKeepSuggestedPost,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = (shouldKeepReply && currentReplyInfo)\n    || (shouldKeepSuggestedPost && currentDraft.suggestedPostInfo) ? {\n      replyInfo: shouldKeepReply ? currentReplyInfo : undefined,\n      suggestedPostInfo: shouldKeepSuggestedPost ? currentDraft.suggestedPostInfo : undefined,\n    } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n    suggestedPostInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('updateDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedSuggestedPostInfo = {\n    ...currentDraft?.suggestedPostInfo,\n    ...update,\n  } as ApiInputSuggestedPostInfo;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    suggestedPostInfo: updatedSuggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  saveDraft({\n    global, chatId, threadId, draft: undefined, isLocalOnly: false,\n  });\n});\n\naddActionHandler('initDraftFromSuggestedMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n\n  actions.clearDraft({\n    chatId,\n    threadId,\n    isLocalOnly: true,\n  });\n\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId,\n    monoforumPeerId: selectSavedDialogIdFromMessage(global, message),\n    tabId,\n  });\n\n  if (message.suggestedPostInfo) {\n    const { scheduleDate, ...messageSuggestedPost } = message.suggestedPostInfo;\n    const now = getServerTime();\n    const futureMin = global.appConfig.starsSuggestedPostFutureMin;\n\n    const validScheduleDate = scheduleDate && scheduleDate > now + futureMin ? scheduleDate : undefined;\n\n    actions.updateDraftSuggestedPostInfo({\n      ...messageSuggestedPost,\n      scheduleDate: validScheduleDate,\n      tabId,\n    });\n  }\n\n  actions.saveDraft({\n    chatId,\n    threadId,\n    text: message.content.text,\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('updateInsertingPeerIdMention', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    insertingPeerIdMention: peerId,\n  }, tabId);\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n}: {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n\n  messageIdsToDelete.forEach((messageId) => {\n    actions.removeFromFocusList({ chatId, messageId });\n  });\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || chat.isMonoforum) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreviewId: webPagePreview?.id,\n  }, tabId);\n  setGlobal(global);\n\n  if (!webPagePreview) return;\n\n  actions.apiUpdate({\n    '@type': 'updateWebPage',\n    webPage: webPagePreview,\n  });\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webPagePreviewId: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('toggleTodoCompleted', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, completedIds, incompletedIds } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const currentUserId = global.currentUserId;\n\n  const currentTodo = message?.content.todo;\n  if (!currentTodo || !currentUserId || !chat) {\n    return;\n  }\n\n  const currentCompletions = currentTodo.completions || [];\n  const currentCompletionIds = currentCompletions.map((c) => c.itemId);\n\n  const newCompletions = [...currentCompletions];\n  const now = getServerTime();\n\n  completedIds.forEach((itemId) => {\n    if (!currentCompletionIds.includes(itemId)) {\n      newCompletions.push({\n        itemId,\n        completedBy: currentUserId,\n        completedAt: now,\n      });\n    }\n  });\n\n  const finalCompletions = newCompletions.filter((c) => !incompletedIds.includes(c.itemId));\n\n  const newContent = {\n    ...message.content,\n    todo: {\n      ...currentTodo,\n      completions: finalCompletions,\n    },\n  };\n\n  const messageUpdate: Partial<ApiMessage> = {\n    ...message,\n    content: newContent,\n  };\n\n  global = updateWithLocalMedia(global, chatId, message.id, false, messageUpdate);\n  setGlobal(global);\n\n  callApi('toggleTodoCompleted', { chat, messageId: message.id, completedIds, incompletedIds });\n});\naddActionHandler('appendTodoList', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, items, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('appendTodoList', {\n    chat,\n    message,\n    items,\n  });\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !selectCustomEmoji(global, documentId)));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    if (selectIsMonoforumAdmin(global, peerId)) {\n      return undefined;\n    }\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n    || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  getActions().sendMessages({ sendParams });\n\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\naddActionHandler('approveSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, scheduleDate, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const isAdmin = selectIsMonoforumAdmin(global, chatId);\n\n  if (!isAdmin && message?.suggestedPostInfo?.price?.amount) {\n    const neededAmount = message.suggestedPostInfo.price.amount;\n    const isCurrencyStars = message.suggestedPostInfo.price.currency === STARS_CURRENCY_CODE;\n\n    if (isCurrencyStars) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n      if (neededAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: neededAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (neededAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: false,\n    scheduleDate,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostApproved' },\n    tabId,\n  });\n});\n\naddActionHandler('rejectSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, rejectComment, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: true,\n    rejectComment,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostRejectedNotification' },\n    tabId,\n  });\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, linkContext, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url);\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, linkContext, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n    parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n    window.open(parsedUrl.href, '_blank', 'noopener');\n    return;\n  }\n\n  if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n    actions.closeStoryViewer({ tabId });\n\n    actions.requestLinkUrlAuth({ url, tabId });\n    return;\n  }\n\n  const isWhitelisted = appConfig.whitelistedDomains.includes(parsedUrl.hostname);\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal && !isWhitelisted;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    monoforumPeerId: replyingInfo.toThreadId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), scheduledAt } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId, scheduledAt });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTonGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchTonGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    tonGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers', {});\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiSearchPostsFlood, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { toChannelId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('checkSearchPostsFlood', async (global, actions, payload): Promise<void> => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkSearchPostsFlood', query);\n\n  global = getGlobal();\n  if (!result) {\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    searchFlood: result,\n  }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n\n  if (type === 'publicPosts') {\n    global = updateGlobalSearchFetchingStatus(global, { publicPosts: true }, tabId);\n    setGlobal(global);\n  }\n\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n    searchFlood?: ApiSearchPostsFlood;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  const previousSearchFlood = selectTabState(global, tabId).globalSearch.searchFlood;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false, publicPosts: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  const searchFlood = result.searchFlood || previousSearchFlood;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    searchFlood,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n\n  if (type === 'publicPosts' && searchFlood && !searchFlood.queryIsFree && !offsetId\n    && previousSearchFlood?.remains === 0) {\n    const lang = getTranslationFn();\n    getActions().showNotification({\n      icon: 'star',\n      message: {\n        key: 'NotificationPaidExtraSearch',\n        variables: {\n          stars: formatStarsAsText(lang, searchFlood.starsAmount),\n        },\n      },\n    });\n  }\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog, getMessageContentIds, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchPublicPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, savedTag, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n): number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction: LoadMoreDirection,\n  limit: number, newFoundIdsCount: number,\n  currentSegment?: ChatMediaSearchSegment,\n): LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getMessageContentIds(byId, newFoundIds, 'inlineMedia');\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }));\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadAccountDaysTtl', async (global, actions, payload): Promise<void> => {\n  const result = await callApi('fetchAccountTTL');\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: result.days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('setAccountTTL', async (global, actions, payload): Promise<void> => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  const result = await callApi('setAccountTTL', { days });\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: days,\n    },\n  };\n  setGlobal(global);\n  actions.closeDeleteAccountModal({ tabId });\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatRestricted,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addUserStatuses(global, result.userStatusesById);\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', {\n    user,\n    maxId: commonChats?.maxId,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('toggleNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n\n  if (chat && selectIsChatRestricted(global, peerId)) {\n    return;\n  }\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp<T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings, ThreadId } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { pick } from '../../../util/iteratees.ts';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  getWebAppKey,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickSuggestedMessageButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { buttonType } = button;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  switch (buttonType) {\n    case 'suggestChanges':\n      if (!message) break;\n\n      actions.initDraftFromSuggestedMessage({ chatId, messageId, tabId });\n      break;\n  }\n});\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId, linkContext: { type: 'message', chatId, messageId, threadId } });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, threadId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, threadId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${getMainUsername(botSender)} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  actions.sendInlineBotApiResult({ ...params });\n\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId,\n      botId: (isFromBotMenu ? chatId : bot.id),\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const currentInlineBotSettings = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !currentInlineBotSettings || query !== currentInlineBotSettings.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((currentInlineBotSettings.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...currentInlineBotSettings,\n    ...pick(result, ['help', 'switchPm', 'switchWebview']),\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: currentInlineBotSettings.offset === '' || currentInlineBotSettings.offset === result.nextOffset\n      ? result.results\n      : (currentInlineBotSettings.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, threadId?: ThreadId, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      openGame({\n        url, chatId: chat.id, messageId, tabId,\n      });\n    } else {\n      openUrl({ url, tabId, linkContext: { type: 'message', chatId: chat.id, messageId, threadId } });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiInputInvoiceStarGiftResale,\n  ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL, STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('buyStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    slug, peerId, price, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGiftResale = {\n    type: 'stargiftResale',\n    slug,\n    peerId,\n    currency: price.currency,\n  };\n\n  payInputStarInvoice(global, inputInvoice, price.amount, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n    && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId, gift,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n      gift,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('checkCanSendGift', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, onSuccess, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (gift.type !== 'starGift' || !gift.lockedUntilDate) {\n    onSuccess();\n    return;\n  }\n\n  const result = await callApi('fetchCheckCanSendGift', {\n    giftId: gift.id,\n  });\n\n  if (!result) return;\n\n  if (result?.canSend) {\n    onSuccess();\n  } else {\n    actions.openLockedGiftModalInfo({\n      untilDate: gift.type === 'starGift' ? gift.lockedUntilDate : undefined,\n      reason: result.reason,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, selectedResaleGift, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n      selectedResaleGift,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const chat = forUserId ? selectChat(global, forUserId) : undefined;\n  if (forUserId && !chat) return;\n\n  const starsGiftOptions = await callApi('fetchStarsGiftOptions', {\n    chat,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = getServerTime();\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    const result = await callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    global = getGlobal();\n    if (result && global.currentUserId) {\n      actions.reloadPeerSavedGifts({ peerId: global.currentUserId });\n    }\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const actions = getActions();\n  const isTon = inputInvoice.type === 'stargiftResale' && inputInvoice.currency === TON_CURRENCY_CODE;\n  const balance = isTon ? global.ton?.balance : global.stars?.balance;\n  const currency = isTon ? TON_CURRENCY_CODE : STARS_CURRENCY_CODE;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ currency, tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  const formPrice = form.invoice.totalAmount;\n  if (formPrice !== price) {\n    actions.openPriceConfirmModal({\n      originalAmount: price,\n      newAmount: formPrice,\n      currency,\n      directInfo: {\n        inputInvoice,\n        formId: form.formId,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n\nfunction handlePaymentFormError(error: string, tabId: number) {\n  if (error === 'SLUG_INVALID') {\n    getActions().showNotification({\n      message: {\n        key: 'PaymentInvoiceNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  getActions().showDialog({ data: { message: error, hasErrorKey: true }, tabId });\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByCallback, buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { RESALE_GIFTS_LIMIT } from '../../../limits';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateChats,\n  updatePeerStarGiftCollections,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveGiftsCollectionId,\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerCollectionSavedGifts,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStarsStatus = global.stars;\n  const needsTopupOptions = !currentStarsStatus?.topupOptions;\n\n  const [starsStatus, tonStatus, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    callApi('fetchStarsStatus', { isTon: true }),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!(starsStatus || tonStatus) || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (starsStatus && starsStatus.balance.currency === STARS_CURRENCY_CODE) {\n    global = {\n      ...global,\n      stars: {\n        ...currentStarsStatus,\n        balance: starsStatus.balance,\n        topupOptions: topupOptions || currentStarsStatus!.topupOptions,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n        subscriptions: undefined,\n      },\n    };\n\n    if (starsStatus.history) {\n      global = appendStarsTransactions(global, 'all', starsStatus.history, starsStatus.nextHistoryOffset);\n    }\n\n    if (starsStatus.subscriptions) {\n      global = appendStarsSubscriptions(global, starsStatus.subscriptions, starsStatus.nextSubscriptionOffset);\n    }\n  }\n\n  if (tonStatus?.balance.currency === TON_CURRENCY_CODE) {\n    global = {\n      ...global,\n      ton: {\n        ...tonStatus,\n        balance: tonStatus.balance,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n      },\n    };\n\n    global = updateStarsBalance(global, tonStatus.balance);\n\n    if (tonStatus.history) {\n      global = appendStarsTransactions(global, 'all', tonStatus.history, tonStatus.nextHistoryOffset, true);\n    }\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type, isTon } = payload;\n\n  const history = isTon ? global.ton?.history[type] : global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound',\n    isOutbound: type === 'outbound',\n    offset: offset || '',\n    isTon,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset, isTon);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const byId = buildCollectionByKey(result.gifts, 'id');\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const resaleStarGiftIds = allStarGifts.map((gift) => (gift.availabilityResale ? gift.id : undefined))\n    .filter(Boolean);\n\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: {\n        all: allStarGiftIds,\n        resale: resaleStarGiftIds,\n        myCollectibles: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadMyCollectibleGifts', async (global, actions, payload): Promise<void> => {\n  const { shouldRefresh } = payload || {};\n  const currentUserId = global.currentUserId;\n  if (!currentUserId) return;\n\n  const currentMyCollectibleGifts = global.myCollectibleGifts;\n  const localNextOffset = currentMyCollectibleGifts?.nextOffset;\n\n  if (currentMyCollectibleGifts && !localNextOffset && !shouldRefresh) return;\n\n  const peer = selectPeer(global, currentUserId);\n  if (!peer) return;\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : undefined,\n    filter: {\n      sortType: 'byDate',\n      shouldIncludeUnique: true,\n      shouldIncludeUnlimited: false,\n      shouldIncludeUpgradable: false,\n      shouldIncludeLimited: false,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n    },\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  const gifts = result.gifts;\n\n  const byId = buildCollectionByCallback(gifts, (savedGift) => (\n    [savedGift.gift.id, savedGift]\n  ));\n\n  const ids = gifts.map((gift) => gift.gift.id);\n\n  global = {\n    ...global,\n    myCollectibleGifts: {\n      byId: {\n        ...!shouldRefresh && (global.myCollectibleGifts?.byId || {}),\n        ...byId,\n      },\n      ids: [\n        ...!shouldRefresh ? (global.myCollectibleGifts?.ids || []) : [],\n        ...ids,\n      ],\n      nextOffset: result.nextOffset,\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('updateResaleGiftsFilter', (global, actions, payload): ActionReturnType => {\n  const {\n    filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      filter,\n    },\n  }, tabId);\n  if (tabState.resaleGifts.giftId) {\n    actions.loadResaleGifts({ giftId: tabState.resaleGifts.giftId, shouldRefresh: true, tabId });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadResaleGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  let tabState = selectTabState(global, tabId);\n  if (tabState.resaleGifts.isLoading || (tabState.resaleGifts.isAllLoaded && !shouldRefresh)) return;\n\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      isLoading: true,\n      ...(shouldRefresh && {\n        count: 0,\n        nextOffset: undefined,\n        isAllLoaded: false,\n      }),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const nextOffset = tabState.resaleGifts.nextOffset;\n  const attributesHash = tabState.resaleGifts.attributesHash;\n  const filter = tabState.resaleGifts.filter;\n\n  const result = await callApi('fetchResaleGifts', {\n    giftId,\n    offset: nextOffset,\n    limit: RESALE_GIFTS_LIMIT,\n    attributesHash,\n    filter,\n  });\n\n  if (!result) {\n    return;\n  };\n\n  const {\n    chats,\n    users,\n  } = result;\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n\n  const currentGifts = tabState.resaleGifts.gifts;\n  const newGifts = !shouldRefresh ? currentGifts.concat(result.gifts) : result.gifts;\n  const currentUpdateIteration = tabState.resaleGifts.updateIteration;\n  const shouldUpdateIteration = tabState.resaleGifts.giftId !== giftId || shouldRefresh;\n  const updateIteration = shouldUpdateIteration ? currentUpdateIteration + 1 : currentUpdateIteration;\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      giftId,\n      count: result.count || tabState.resaleGifts.count,\n      gifts: newGifts,\n      attributes: result.attributes || tabState.resaleGifts.attributes,\n      counters: result.counters || tabState.resaleGifts.counters,\n      attributesHash: result.attributesHash,\n      nextOffset: result.nextOffset,\n      isLoading: false,\n      isAllLoaded: !result.nextOffset,\n      updateIteration,\n    },\n  }, tabId);\n\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  setGlobal(global);\n});\n\naddActionHandler('resetResaleGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    resaleGifts: {\n      updateIteration: tabState.resaleGifts.updateIteration + 1,\n      filter: DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n      count: 0,\n      gifts: [],\n    },\n  }, tabId);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  global = getGlobal();\n\n  const fetchingCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n  const currentGifts = selectPeerCollectionSavedGifts(global, peerId, fetchingCollectionId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n    collectionId: fetchingCollectionId === 'all' ? undefined : fetchingCollectionId,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n  const currentCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n\n  if (!result || currentCollectionId !== fetchingCollectionId || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reloadPeerSavedGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n  } = payload;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    const activeCollectionId = selectActiveGiftsCollectionId(global, peerId, tabState.id);\n    if (selectPeerCollectionSavedGifts(global, peerId, activeCollectionId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  if (peerId === global.currentUserId) {\n    actions.loadMyCollectibleGifts({ shouldRefresh: true });\n  }\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result || result.balance.currency !== STARS_CURRENCY_CODE) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const activeCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n  const oldGifts = selectTabState(global, tabId).savedGifts.collectionsByPeerId[peerId]?.[activeCollectionId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.reloadPeerSavedGifts({ peerId });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  actions.reloadPeerSavedGifts({ peerId });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  actions.reloadPeerSavedGifts({ peerId });\n});\n\naddActionHandler('updateStarGiftPrice', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, price,\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n\n  if (!requestSavedGift) {\n    return;\n  }\n\n  const result = await callApi('updateStarGiftPrice', {\n    inputSavedGift: requestSavedGift,\n    price,\n  });\n\n  if (!result) return;\n\n  actions.reloadPeerSavedGifts({ peerId: global.currentUserId! });\n});\n\naddActionHandler('loadStarGiftCollections', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    hash,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchStarGiftCollections', {\n    peer,\n    hash,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updatePeerStarGiftCollections(global, peerId, result.collections);\n  setGlobal(global);\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions: ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n    * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n\n  if (stats.type === 'channel') {\n    const messageInteractions = stats.recentPosts.filter((post) => post.type === 'message');\n    const storyInteractions = stats.recentPosts.filter((post) => post.type === 'story');\n\n    if (messageInteractions.length > 0) {\n      actions.loadMessagesById({\n        chatId,\n        messageIds: messageInteractions.map((interaction) => interaction.msgId),\n      });\n    }\n\n    if (storyInteractions.length > 0) {\n      actions.loadPeerStoriesByIds({\n        peerId: chatId,\n        storyIds: storyInteractions.map((interaction) => interaction.storyId),\n      });\n    }\n  }\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat((forwards || [])),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\nimport { selectActiveStoriesCollectionId } from '../../selectors/stories';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const selectedAlbumId = selectActiveStoriesCollectionId(global, tabId);\n  if (selectedAlbumId !== 'all') {\n    let albumData = peerStories?.idsByAlbumId?.[selectedAlbumId];\n    if (albumData?.isFullyLoaded) {\n      return;\n    }\n\n    const result = await callApi('fetchAlbumStories', {\n      peer,\n      albumId: selectedAlbumId,\n      offset: offsetId || 0,\n    });\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds, false, selectedAlbumId);\n    peerStories = selectPeerStories(global, peerId);\n\n    albumData = peerStories?.idsByAlbumId?.[selectedAlbumId];\n    if (Object.values(result.stories).length === 0\n      || (albumData?.ids?.length && albumData.ids.length >= result.count)) {\n      global = updatePeerStoriesFullyLoaded(global, peerId, true, false, selectedAlbumId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n\naddActionHandler('loadStoryAlbums', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const albums = await callApi('fetchAlbums', { peer });\n  if (!albums) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      albumsByPeerId: {\n        ...global.stories.albumsByPeerId,\n        [peerId]: albums,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('selectStoryAlbum', (global, actions, payload): ActionReturnType => {\n  const { peerId, albumId, tabId = getCurrentTabId() } = payload;\n\n  if (albumId && peerId) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, false);\n  }\n\n  global = updateTabState(global, {\n    selectedStoryAlbumId: albumId || undefined,\n  }, tabId);\n\n  setGlobal(global);\n\n  actions.loadPeerProfileStories({ peerId, tabId });\n});\n\naddActionHandler('loadAlbumStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, albumId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchAlbumStories', {\n    peer,\n    albumId,\n    offset: offsetId || 0,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('resetSelectedStoryAlbum', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    selectedStoryAlbumId: undefined,\n  }, tabId);\n});\n","import type { ProfileTabType } from '../../../types';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, execAfterActions, getGlobal, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n      // Reset chat info state for new chat\n      chatInfo: {\n        isOpen: tabState.chatInfo.isOpen,\n      },\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  window.open(hashUrl, '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab, isOwnProfile, tabId = getCurrentTabId(), ...rest } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const isSameMessageList = currentMessageList?.chatId === rest.id\n    && currentMessageList?.threadId === MAIN_THREAD_ID\n    && currentMessageList?.type === (rest.type || 'thread');\n\n  processChatInfoState({ global, isSameMessageList, profileTab, forceScrollProfileTab, isOwnProfile, tabId });\n\n  actions.openChat({ ...rest, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab, isOwnProfile, tabId = getCurrentTabId(), ...rest } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const isSameMessageList = currentMessageList?.chatId === rest.chatId\n    && currentMessageList?.threadId === rest.threadId\n    && currentMessageList?.type === (rest.type || 'thread');\n\n  processChatInfoState({ global, isSameMessageList, profileTab, forceScrollProfileTab, isOwnProfile, tabId });\n\n  actions.openThread({ ...rest, tabId });\n});\n\nfunction processChatInfoState<T extends GlobalState>({\n  global,\n  isSameMessageList,\n  profileTab,\n  forceScrollProfileTab,\n  isOwnProfile,\n  tabId,\n}: {\n  global: T;\n  isSameMessageList: boolean;\n  profileTab?: ProfileTabType;\n  forceScrollProfileTab?: boolean;\n  isOwnProfile?: boolean;\n  tabId: number;\n}) {\n  const currentChatInfo = selectTabState(global, tabId).chatInfo;\n\n  const newProfileTab = profileTab ?? (isSameMessageList ? currentChatInfo.profileTab : undefined);\n  const newForceScrollProfileTab = forceScrollProfileTab\n    ?? (isSameMessageList ? currentChatInfo.forceScrollProfileTab : undefined);\n  const newIsOwnProfile = isOwnProfile ?? (isSameMessageList ? currentChatInfo.isOwnProfile : undefined);\n\n  execAfterActions(() => {\n    global = getGlobal();\n    global = updateTabState(global, {\n      ...selectTabState(global, tabId),\n      chatInfo: {\n        isOpen: true,\n        profileTab: newProfileTab,\n        forceScrollProfileTab: newForceScrollProfileTab,\n        isOwnProfile: newIsOwnProfile,\n      },\n    }, tabId);\n    global = { ...global, lastIsChatInfoShown: true };\n    setGlobal(global);\n  });\n}\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n    && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-expect-error -- No idea how to type this properly\n    actions[action]({\n      ...(callbackPayload),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getTranslationFn } from '../../../util/localization';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { selectMessageDownloadableMedia } from '../../selectors/media';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 7; // 7 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: { key: 'ErrorFocusInaccessibleMessage' }, tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(), isRemindMe,\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: !isRemindMe,\n    isRemindMeCalendarShown: isRemindMe,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = selectMessageDownloadableMedia(global, message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      message: {\n        key: IS_TOUCH_ENV ? 'ContextMenuHintTouch' : 'ContextMenuHintMouse',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openTodoListModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, forNewTask, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    todoListModal: {\n      chatId,\n      messageId,\n      forNewTask,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeTodoListModal', 'todoListModal');\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (CHANGELOG_DATETIME && Date.now() > CHANGELOG_DATETIME + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestMessageModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestedPostApprovalModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestedPostApprovalModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = getTranslationFn();\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openQuickPreview', (global, actions, payload): ActionReturnType => {\n  const { id: chatId, threadId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    quickPreview: { chatId, threadId },\n  }, tabId);\n});\n\naddActionHandler('closeQuickPreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    quickPreview: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\n\nimport { type LangFn } from '../../util/localization';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = (renderMessageText({ message, shouldRenderAsHtml: true }) as string[])?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true) as string;\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query\n    && currentContent !== GlobalSearchContent.BotApps && currentContent !== GlobalSearchContent.PublicPosts\n    ? { chats: !chatId, messages: true } : undefined;\n\n  actions.checkSearchPostsFlood({ query, tabId });\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    deleteAccountModal: {\n      selfDestructAccountDays: days,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteAccountModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n\naddActionHandler('openProfileRatingModal', (global, actions, payload): ActionReturnType => {\n  const { userId, level, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    profileRatingModal: {\n      userId,\n      level,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeProfileRatingModal', 'profileRatingModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_TAURI } from './browser/globalEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport async function setPageTitleInstant(nextTitle: string) {\n  if (IS_TAURI) {\n    await window.tauri?.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n  PAGE_TITLE_TAURI,\n} from '../../../config';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const chatInfo = selectTabState(global, tabId).chatInfo;\n  const willChatInfoBeShown = force !== undefined ? force : !chatInfo.isOpen;\n\n  if (willChatInfoBeShown !== chatInfo.isOpen) {\n    global = updateTabState(global, {\n      chatInfo: {\n        ...chatInfo,\n        isOpen: willChatInfoBeShown,\n      },\n    }, tabId);\n  }\n  global = { ...global, lastIsChatInfoShown: willChatInfoBeShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('changeProfileTab', (global, actions, payload): ActionReturnType => {\n  const { profileTab, shouldScrollTo, tabId = getCurrentTabId() } = payload;\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const chatInfo = selectTabState(global, tabId).chatInfo;\n\n  return updateTabState(global, {\n    chatInfo: {\n      ...chatInfo,\n      isOpen: true,\n      profileTab,\n      forceScrollProfileTab: shouldScrollTo,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentMessage: undefined,\n      currentStoryId: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n      currentMessage: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n  const isChatWithBot = chatId ? selectIsChatWithBot(global, chat) : undefined;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  return {\n    ...global,\n    attachmentSettings: {\n      ...global.attachmentSettings,\n      ...payload,\n    },\n  };\n});\n\naddActionHandler('updateShouldSaveAttachmentsCompression', (global, actions, payload): ActionReturnType => {\n  const { shouldSave, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldSaveAttachmentsCompression: shouldSave,\n  }, tabId);\n});\n\naddActionHandler('applyDefaultAttachmentsCompression', (global): ActionReturnType => {\n  const { defaultAttachmentCompression } = global.attachmentSettings;\n  const shouldCompress = defaultAttachmentCompression === 'compress';\n\n  return {\n    ...global,\n    attachmentSettings: {\n      ...global.attachmentSettings,\n      shouldCompress,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  const defaultTitle = IS_TAURI ? PAGE_TITLE_TAURI : PAGE_TITLE;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${defaultTitle} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  // Show blinking title in browser tab\n  if (!IS_TAURI && global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(`${prefix}${defaultTitle}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig;\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline({ isOnline: newBlurredTabsCount !== getAllMultitabTokens().length });\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ApiSavedGifts } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { selectActiveGiftsCollectionId } from '../../../global/selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique\n    && !updatedFilter.shouldIncludeUpgradable) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      shouldIncludeUpgradable: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  const activeCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      collectionsByPeerId: {\n        [peerId]: {\n          [activeCollectionId]: tabState.savedGifts.collectionsByPeerId[peerId]?.[activeCollectionId],\n        } as Record<number | 'all', ApiSavedGifts>,\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const activeCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      collectionsByPeerId: {\n        [peerId]: {\n          [activeCollectionId]: tabState.savedGifts.collectionsByPeerId[peerId]?.[activeCollectionId],\n        } as Record<number | 'all', ApiSavedGifts>,\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openPriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originalAmount,\n    newAmount,\n    currency,\n    directInfo,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    priceConfirmModal: {\n      originalAmount,\n      newAmount,\n      currency,\n      directInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    priceConfirmModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\nimport { selectTimestampableMedia } from '../../selectors/media';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = selectTimestampableMedia(global, message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? selectTimestampableMedia(global, replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import { getPromiseActions } from '../../../global';\n\nimport type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { selectChat } from '../../../global/selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    currency = STARS_CURRENCY_CODE,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n      currency,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await getPromiseActions().loadMessage({ chatId, messageId });\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n  const recipientId = 'recipientId' in payload ? payload.recipientId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n      recipientId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openLockedGiftModalInfo', (global, actions, payload): ActionReturnType => {\n  const {\n    untilDate, reason, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    lockedGiftModal: {\n      untilDate,\n      reason,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeLockedGiftModal', 'lockedGiftModal');\n\naddActionHandler('openGiftResalePriceComposerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    giftResalePriceComposerModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftInMarket', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const giftModal = selectTabState(global, tabId).giftModal;\n\n  actions.closeGiftInfoValueModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (giftModal) {\n    return updateTabState(global, {\n      giftModal: {\n        ...giftModal,\n        selectedResaleGift: gift,\n      },\n    }, tabId);\n  }\n\n  actions.openGiftModal({\n    forUserId: global.currentUserId!,\n    selectedResaleGift: gift,\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('closeResaleGiftsMarket', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  actions.resetResaleGifts({ tabId });\n\n  const giftModal = selectTabState(global, tabId).giftModal;\n\n  if (giftModal) {\n    return updateTabState(global, {\n      giftModal: {\n        ...giftModal,\n        selectedResaleGift: undefined,\n      },\n    }, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftInfoValueModal', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('fetchUniqueStarGiftValueInfo', { slug: gift.slug });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftInfoValueModal: {\n      valueInfo: result,\n      gift,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftInfoValueModal', 'giftInfoValueModal');\n\naddTabStateResetterAction('closeGiftResalePriceComposerModal', 'giftResalePriceComposerModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n\naddActionHandler('openGiftTransferConfirmModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    giftTransferConfirmModal: {\n      gift,\n      recipientId,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferConfirmModal', 'giftTransferConfirmModal');\n\naddActionHandler('updateSelectedGiftCollection', (global, actions, payload): ActionReturnType => {\n  const { peerId, collectionId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      activeCollectionByPeerId: {\n        ...tabState.savedGifts.activeCollectionByPeerId,\n        [peerId]: collectionId,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetSelectedGiftCollection', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      activeCollectionByPeerId: {\n        ...tabState.savedGifts.activeCollectionByPeerId,\n        [peerId]: undefined,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerId: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { updateTabState } from '../../reducers/tabs';\nimport { addActionHandler } from '../../index';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('toggleFocusList', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload ?? {};\n  const isFocusListShown = force !== undefined ? force : !selectTabState(global, tabId).isFocusListShown;\n\n  global = updateTabState(global, { isFocusListShown }, tabId);\n  global = { ...global, lastIsFocusListShown: isFocusListShown };\n\n  return global;\n});\n\naddActionHandler('addToFocusList', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const messageKey = `${chatId}_${messageId}`;\n  \n  const currentMessageIds = global.focusList.messageIds;\n  if (currentMessageIds.includes(messageKey)) {\n    return global;\n  }\n\n  return {\n    ...global,\n    focusList: {\n      ...global.focusList,\n      messageIds: [...currentMessageIds, messageKey],\n    },\n  };\n});\n\naddActionHandler('removeFromFocusList', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const messageKey = `${chatId}_${messageId}`;\n  \n  return {\n    ...global,\n    focusList: {\n      ...global.focusList,\n      messageIds: global.focusList.messageIds.filter(id => id !== messageKey),\n    },\n  };\n});\n\naddActionHandler('replaceFocusList', (global, actions, payload): ActionReturnType => {\n  const { messageKeys } = payload;\n  \n  return {\n    ...global,\n    focusList: {\n      ...global.focusList,\n      messageIds: messageKeys,\n    },\n  };\n});\n","import type { ApiChat, ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\nconst INVALIDATE_FULL_CHAT_FIELDS = new Set<keyof ApiChat>([\n  'boostLevel', 'isForum', 'isLinkedInDiscussion', 'fakeType', 'restrictionReasons', 'isJoinToSend', 'isJoinRequest',\n  'type',\n]);\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n        && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      if (localChat) {\n        const chatUpdate = update.chat;\n        const changedFields = (Object.keys(chatUpdate) as (keyof ApiChat)[])\n          .filter((key) => localChat[key] !== chatUpdate[key]);\n        if (changedFields.some((key) => INVALIDATE_FULL_CHAT_FIELDS.has(key))) {\n          actions.invalidateFullInfo({ peerId: update.id });\n        }\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      const isOur = message.senderId ? message.senderId === global.currentUserId : message.isOutgoing;\n      if (isOur && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal || chat.id === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n          && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n      if (!ids) {\n        actions.loadPinnedDialogs({ listType });\n        return global;\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updateChat,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      global = updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n      global = updateChat(global, update.userId, { emojiStatus: update.emojiStatus });\n      return global;\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  replaceWebPage,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateFullWebPage,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls, webPages,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      if (webPages) {\n        webPages.forEach((webPage) => {\n          if (webPage.webpageType === 'full') {\n            global = updateFullWebPage(global, webPage.id, webPage);\n          } else {\n            global = replaceWebPage(global, webPage.id, webPage);\n          }\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateWebPage': {\n      const { webPage } = update;\n      if (webPage.webpageType === 'full') {\n        global = updateFullWebPage(global, webPage.id, webPage);\n      } else {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n\n          actions.reloadPeerSavedGifts({ peerId: global.currentUserId! });\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          const user = selectPhoneCallUser(global);\n          if (!user) return;\n          notifyAboutCall({\n            call,\n            user,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType, GlobalState } from '../../types';\r\n\r\nimport { addActionHandler, setGlobal } from '../..';\r\n\r\ntype UpdateWorkspaceSettingsPayload = Partial<GlobalState['workspaces']>;\r\n\r\nfunction updateWorkspaceSettings<T extends GlobalState>(\r\n  global: T, payload: UpdateWorkspaceSettingsPayload,\r\n) {\r\n  global = {\r\n    ...global,\r\n    workspaces: {\r\n      ...global.workspaces,\r\n      ...payload,\r\n    },\r\n  };\r\n  setGlobal(global);\r\n  return global;\r\n}\r\n\r\naddActionHandler('openWorkspaceCreator', (global): ActionReturnType => {\r\n  updateWorkspaceSettings(global, { isCreatorOpen: true, editingWorkspaceId: undefined });\r\n});\r\n\r\naddActionHandler('openWorkspaceEditor', (global, actions, payload?: { workspaceId: string }): ActionReturnType => {\r\n  updateWorkspaceSettings(global, { isCreatorOpen: true, editingWorkspaceId: payload?.workspaceId });\r\n});\r\n\r\naddActionHandler('closeWorkspaceCreator', (global): ActionReturnType => {\r\n  updateWorkspaceSettings(global, { isCreatorOpen: false, editingWorkspaceId: undefined });\r\n});","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.reloadPeerSavedGifts({ peerId: starGiftModalState.forPeerId });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftResale') {\n        const starGiftModalState = selectTabState(global, tabId).giftInfoModal;\n\n        if (starGiftModalState) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftBought',\n            },\n            tabId,\n          });\n          if (starGiftModalState.peerId) {\n            actions.reloadPeerSavedGifts({ peerId: starGiftModalState.peerId });\n          }\n          actions.reloadPeerSavedGifts({ peerId: inputInvoice.peerId });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftInfoModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftUpgrade' && global.currentUserId) {\n        actions.reloadPeerSavedGifts({ peerId: global.currentUserId });\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { AnimationLevel, Workspace } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useWorkspaceStorage } from '../../../hooks/useWorkspaceStorage';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n  isFocusMode?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n  isFocusMode,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n    openSettingsScreen,\n  } = getActions();\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const { currentWorkspaceId, savedWorkspaces, excludeOtherWorkspaces } = useWorkspaceStorage();\n  const everythingWorkspace = { id: '0', name: 'Personal', foldersIds: [] } satisfies Workspace;\n  const currentWorkspace = savedWorkspaces.find((workspace) => workspace.id === currentWorkspaceId) || everythingWorkspace;\n\n  const displayedFolders = useMemo(() => {\n    if (!orderedFolderIds) return undefined;\n\n    return orderedFolderIds\n      .map((id) => {\n        if (id === ALL_FOLDER_ID && currentWorkspaceId === everythingWorkspace.id) {\n          return allChatsFolder;\n        }\n        \n        if (currentWorkspaceId === everythingWorkspace.id && excludeOtherWorkspaces && savedWorkspaces.some(w => w.foldersIds.includes(id))) {\n          return null;\n        }\n\n        const folder = chatFoldersById[id] || allChatsFolder;\n        if (folder && (currentWorkspaceId === everythingWorkspace.id || currentWorkspace.foldersIds.includes(id))) {\n          return folder;\n        }\n\n        return null;\n      })\n      .filter(Boolean);\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds, currentWorkspaceId, currentWorkspace.foldersIds, excludeOtherWorkspaces]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  \n  const adjustedFolderCountersById = useMemo(() => {\n    const shouldFilterByWorkspace = currentWorkspaceId === everythingWorkspace.id && excludeOtherWorkspaces;\n    if (!shouldFilterByWorkspace) {\n      return folderCountersById;\n    }\n\n    const folderFromWorkspaces = savedWorkspaces.flatMap(w => w.foldersIds);\n    const adjusted = { ...folderCountersById };\n    \n    const allFolderUnreadChats = folderUnreadChatsCountersById[ALL_FOLDER_ID];\n    if (allFolderUnreadChats) {\n      const filteredUnreadChats = allFolderUnreadChats.filter((chatId) => \n        !folderFromWorkspaces.some(folderId => getOrderedIds(folderId)?.includes(chatId))\n      );\n      \n      if (adjusted[ALL_FOLDER_ID]) {\n        adjusted[ALL_FOLDER_ID] = {\n          ...adjusted[ALL_FOLDER_ID],\n          chatsCount: filteredUnreadChats.length,\n        };\n      }\n    }\n    \n    return adjusted;\n  }, [\n    folderCountersById, \n    currentWorkspaceId, \n    excludeOtherWorkspaces, \n    savedWorkspaces, \n    folderUnreadChatsCountersById,\n    everythingWorkspace.id,\n  ]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            openSettingsScreen({ screen: SettingsScreens.Folders });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount: isFocusMode ? 0 : adjustedFolderCountersById[id]?.chatsCount,\n        isBadgeActive: !isFocusMode && Boolean(adjustedFolderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, adjustedFolderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, openSettingsScreen,\n    isFocusMode,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        key={`${currentWorkspaceId}-${activeChatFolder}`}\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        isMainList\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n        withTags\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={resolveTransitionName('slideOptimized', animationLevel, shouldSkipHistoryAnimations, lang.isRtl)}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n      isFocusMode,\n    } = global;\n    const { animationLevel } = selectSharedSettings(global);\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n      isFocusMode,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const currentAccountInfo = useMemo(() => {\n    return Object.values(accounts).find((account) => account.userId === currentUser.id);\n  }, [accounts, currentUser.id]);\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const isSameServer = account.isTest === currentAccountInfo?.isTest;\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: isSameServer ? account.emojiStatusId : undefined,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                {account.isTest && <span className=\"account-menu-item-test\">T</span>}\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","import type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  IS_BETA,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MED,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  currentUser?: ApiUser;\n  theme: ThemeKey;\n  attachBots: GlobalState['attachMenu']['bots'];\n  accountsTotalLimit: number;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings' | 'isFocusMode'>;\n\nconst LeftSideMenuItems = ({\n  archiveSettings,\n  animationLevel,\n  theme,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  isFocusMode,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    setSharedSettingOption,\n    updatePerformanceSettings,\n    setFocusMode,\n  } = getActions();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MED);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel, wasAnimationLevelSetManually: true });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener,noreferrer');\n  });\n\n  const handleFocusModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newValue = !isFocusMode;\n    \n    setFocusMode({ isEnabled: newValue });\n  });\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('MenuArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"group\"\n        onClick={onSelectContacts}\n      >\n        {lang('MenuContacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('MenuSettings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('MenuNightMode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'AriaMenuDisableNightMode' : 'AriaMenuEnableNightMode')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"unmute\"\n        onClick={handleFocusModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('MenuFocusMode')}</span>\n        <Switcher\n          id=\"focusmode\"\n          label={lang(isFocusMode ? 'AriaMenuDisableFocusMode' : 'AriaMenuEnableFocusMode')}\n          checked={isFocusMode}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('MenuAnimationsSwitch')}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      currentUserId, archiveSettings, isFocusMode,\n    } = global;\n    const { animationLevel } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n      isFocusMode,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport GiftEffectWrapper from '../../common/gift/GiftEffectWrapper';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  const buttonRef = useRef<HTMLButtonElement>();\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const collectibleEmojiStatus = emojiStatus?.type === 'collectible' ? emojiStatus : undefined;\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      (status) => 'collectibleId' in status && status.documentId === sticker.id,\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <GiftEffectWrapper\n            withSparkles={Boolean(collectibleEmojiStatus)}\n            sparklesClassName=\"statusSparkles\"\n            sparklesColor={collectibleEmojiStatus?.textColor}\n          >\n            <CustomEmoji\n              key={emojiStatus.documentId}\n              documentId={emojiStatus.documentId}\n              size={EMOJI_STATUS_SIZE}\n              loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            />\n          </GiftEffectWrapper>\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { IS_APP, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?: boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSharedSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    openSettingsScreen,\n    searchMessagesGlobal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const handleSearchEnter = useLastCallback(() => {\n    if (searchQuery && content === LeftColumnContent.GlobalSearch) {\n      searchMessagesGlobal({\n        type: 'publicPosts',\n        shouldResetResultsByType: true,\n      });\n    }\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const withStoryToggler = !isSearchFocused && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  const version = useMemo(() => {\n    let fullVersion = '';\n    if (IS_TAURI && window.tauri.version) {\n      fullVersion = `Tauri ${window.tauri.version} | `;\n    }\n\n    fullVersion += `${APP_NAME} ${versionString}`;\n\n    return fullVersion;\n  }, [versionString]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div\n        id=\"LeftMainHeader\"\n        className=\"left-header\"\n        data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}\n      >\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={version}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_TAURI && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n          onEnter={handleSearchEnter}\n        >\n          {searchContent}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats\n        || fetchingStatus.messages || fetchingStatus.publicPosts) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import { ApiUser } from '../../../api/types';\r\nimport { FC, memo } from '../../../lib/teact/teact';\r\nimport { Workspace } from '../../../types';\r\nimport Avatar, { AvatarSize } from '../../common/Avatar';\r\n\r\ntype OwnProps = {\r\n  workspace: Workspace;\r\n  currentUser?: ApiUser;\r\n  size?: AvatarSize;\r\n};\r\n\r\nconst WorkspaceAvatar: FC<OwnProps> = ({ workspace, currentUser, size }) => {\r\n  const everythingWorkspaceId = '0';\r\n\r\n  return workspace.id === everythingWorkspaceId\r\n    ? <Avatar isRectangular peer={currentUser} size={size} />\r\n    : <Avatar isRectangular size={size} text={workspace.name} />\r\n};\r\n\r\nexport default memo(WorkspaceAvatar);","import type { FC } from '../../../lib/teact/teact';\r\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\r\nimport { getActions, withGlobal } from '../../../global';\r\nimport { Workspace } from '../../../types';\r\nimport { useWorkspaceStorage } from '../../../hooks/useWorkspaceStorage';\r\n\r\nimport DropdownMenu from '../../ui/DropdownMenu';\r\nimport MenuItem from '../../ui/MenuItem';\r\n\r\nimport './WorkspaceManager.scss';\r\nimport buildClassName from '../../../util/buildClassName';\r\nimport Icon from '../../common/icons/Icon';\r\nimport MenuSeparator from '../../ui/MenuSeparator';\r\nimport Switcher from '../../ui/Switcher';\r\nimport { ApiUser } from '../../../api/types';\r\nimport { selectUser } from '../../../global/selectors/users';\r\nimport WorkspaceAvatar from './WorkspaceAvatar';\r\n\r\ntype StateProps = {\r\n  currentUser?: ApiUser;\r\n};\r\n\r\nconst WorkspaceManager: FC<StateProps> = ({ currentUser }) => {\r\n  const { openWorkspaceCreator, openWorkspaceEditor, setActiveChatFolder } = getActions();\r\n  const {\r\n    savedWorkspaces,\r\n    currentWorkspaceId,\r\n    setCurrentWorkspaceId,\r\n    excludeOtherWorkspaces,\r\n    setExcludeOtherWorkspaces,\r\n  } = useWorkspaceStorage();\r\n\r\n  const everythingWorkspace: Workspace = { id: '0', name: 'Personal', foldersIds: [] };\r\n  const selectedWorkspace = savedWorkspaces.find(workspace => workspace.id === currentWorkspaceId) || everythingWorkspace;\r\n\r\n  const handleWorkspaceSelect = useCallback((workspace: Workspace) => {\r\n    setCurrentWorkspaceId(workspace.id);\r\n    setActiveChatFolder({ activeChatFolder: 0 }, { forceOnHeavyAnimation: true });\r\n  }, [setCurrentWorkspaceId, setActiveChatFolder]);\r\n\r\n  const handleCreateWorkspace = useCallback(() => {\r\n    openWorkspaceCreator();\r\n  }, [openWorkspaceCreator]);\r\n\r\n  const handleSwitcherChange = useCallback((e) => {\r\n    e.stopPropagation();\r\n    setExcludeOtherWorkspaces(!excludeOtherWorkspaces);\r\n  }, [excludeOtherWorkspaces, setExcludeOtherWorkspaces]);\r\n\r\n  const renderTrigger = useCallback(({ onTrigger, isOpen }: { onTrigger: () => void; isOpen?: boolean }) => (\r\n    <div\r\n      key={selectedWorkspace?.id}\r\n      onClick={onTrigger}\r\n      className={buildClassName('WorkspaceManager-trigger', isOpen && 'active')}\r\n    >\r\n      <WorkspaceAvatar workspace={selectedWorkspace} currentUser={currentUser} size=\"tiny\" />\r\n      {selectedWorkspace.name}\r\n    </div>\r\n  ), [selectedWorkspace]);\r\n\r\n  return (\r\n    <DropdownMenu\r\n      className=\"WorkspaceManager-dropdown\"\r\n      trigger={renderTrigger}\r\n      positionX=\"left\"\r\n    >\r\n      {[everythingWorkspace, ...savedWorkspaces].map((workspace) => (\r\n        <MenuItem\r\n          key={workspace.id}\r\n          onClick={() => handleWorkspaceSelect(workspace)}\r\n          className=\"WorkspaceManager-workspace\"\r\n          customIcon={<WorkspaceAvatar workspace={workspace} currentUser={currentUser} size=\"mini\" />}\r\n        >\r\n          {workspace.name}\r\n          {workspace.id === currentWorkspaceId && <Icon name=\"check\" />}\r\n        </MenuItem>\r\n      ))}\r\n      <MenuSeparator />\r\n      <MenuItem\r\n        icon=\"add\"\r\n        onClick={handleCreateWorkspace}\r\n      >\r\n        New Workspace\r\n      </MenuItem>\r\n      {selectedWorkspace.id !== everythingWorkspace.id && (\r\n        <MenuItem\r\n          icon=\"settings\"\r\n          onClick={() => openWorkspaceEditor({ workspaceId: selectedWorkspace.id })}\r\n        >\r\n          Workspace settings\r\n        </MenuItem>\r\n      )}\r\n      {selectedWorkspace.id === everythingWorkspace.id && savedWorkspaces.length > 0 && (\r\n        <MenuItem\r\n          className=\"WorkspaceManager-excludeOther\"\r\n          onClick={handleSwitcherChange}\r\n        >\r\n          <Switcher\r\n            checked={excludeOtherWorkspaces}\r\n            label=\"Exclude folders and chats from other workspaces\"\r\n          />\r\n          Exclude others\r\n        </MenuItem>\r\n      )}\r\n    </DropdownMenu>\r\n  );\r\n};\r\n\r\nexport default memo(withGlobal<StateProps>(\r\n  (global): StateProps => {\r\n    return {\r\n      currentUser: selectUser(global, global.currentUserId!),\r\n    };\r\n  },\r\n)(WorkspaceManager));","import { getActions, withGlobal } from '../../../global';\r\nimport { selectChat, selectCurrentChat, selectIsChatWithSelf } from '../../../global/selectors';\r\nimport type { FC } from '../../../lib/teact/teact';\r\nimport React, { memo } from '../../../lib/teact/teact';\r\nimport buildClassName from '../../../util/buildClassName';\r\nimport Icon from '../../common/icons/Icon';\r\n\r\nimport './SavedMessages.scss';\r\n\r\ntype StateProps = {\r\n  currentUserId?: string;\r\n  isActive?: boolean;\r\n  savedMesagesUnreadCount?: number;\r\n}\r\n\r\nconst SavedMessages: FC<StateProps> = ({ currentUserId, isActive, savedMesagesUnreadCount }) => {\r\n  const { openChat, focusLastMessage } = getActions();\r\n\r\n  return (\r\n    <div\r\n      onClick={() => {\r\n        openChat({ id: currentUserId });\r\n        focusLastMessage();\r\n      }}\r\n      className={buildClassName('SavedMessages-trigger', isActive && 'active')}\r\n    >\r\n      <Icon name=\"saved-messages\" />  \r\n      Saved\r\n      {savedMesagesUnreadCount !== undefined && savedMesagesUnreadCount !== 0 && <span className=\"count\">{savedMesagesUnreadCount}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(withGlobal<StateProps>(\r\n  (global): StateProps => {\r\n    const currentUserId = global.currentUserId!;\r\n    const currentChat = selectCurrentChat(global);\r\n    const savedMesagesUnreadCount = selectChat(global, currentUserId)?.unreadCount;\r\n    const isChatWithSelf = currentChat ? currentChat.id === currentUserId : false;\r\n\r\n    return {\r\n      currentUserId,\r\n      isActive: isChatWithSelf,\r\n      savedMesagesUnreadCount,\r\n    }\r\n  }\r\n)(SavedMessages));","import type { FC } from '../../../lib/teact/teact';\r\nimport React, { memo } from '../../../lib/teact/teact';\r\nimport WorkspaceManager from './WorkspaceManager';\r\nimport SavedMessages from './SavedMessages';\r\nimport FocusListButton from './FocusListButton';\r\nimport './CustomButtons.scss';\r\n\r\nconst CustomButtons: FC = () => {\r\n  return (\r\n    <div className=\"CustomButtons\">\r\n      <div className=\"workspace-manager\">\r\n        <WorkspaceManager />\r\n      </div>\r\n      <SavedMessages />\r\n      <FocusListButton />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(CustomButtons);","import type { Update } from '@tauri-apps/plugin-updater';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport { LeftColumnContent } from '../../../types';\n\nimport { DEBUG } from '../../../config';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\nimport CustomButtons from './CustomButtons';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst TAURI_CHECK_UPDATE_INTERVAL = 10 * 60 * 1000;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel, openLeftColumnContent } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [tauriUpdate, setTauriUpdate] = useState<Update>();\n  const [isTauriUpdateDownloading, setIsTauriUpdateDownloading] = useState(false);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || Boolean(tauriUpdate));\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Contacts });\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(async () => {\n    if (tauriUpdate) {\n      try {\n        setIsTauriUpdateDownloading(true);\n        await tauriUpdate.downloadAndInstall();\n        setIsTauriUpdateDownloading(false);\n\n        await window.tauri?.relaunch();\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('Failed to download and install Tauri update', e);\n      } finally {\n        setIsTauriUpdateDownloading(false);\n      }\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const checkTauriUpdate = useLastCallback(() => {\n    window.tauri?.checkUpdate()\n      .then((update) => setTauriUpdate(update ?? undefined))\n      .catch((e) => {\n        // eslint-disable-next-line no-console\n        console.error('Tauri update check failed:', e);\n      });\n  });\n\n  useEffect(() => {\n    checkTauriUpdate();\n  }, []);\n\n  useInterval(\n    checkTauriUpdate,\n    (IS_TAURI && !DEBUG) ? TAURI_CHECK_UPDATE_INTERVAL : undefined,\n  );\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <CustomButtons />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n          isLoading={isTauriUpdateDownloading}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type {\n  ElementRef } from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { type AnimationLevel, LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { resolveTransitionName } from '../../util/resolveTransitionName';\nimport { captureControlledSwipe } from '../../util/swipeController';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: ElementRef<HTMLDivElement>;\n}\n\ntype StateProps = {\n  contentKey: LeftColumnContent;\n  settingsScreen: SettingsScreens;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n\n  NewGroup,\n\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  contentKey,\n  settingsScreen,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    openLeftColumnContent,\n    openSettingsScreen,\n  } = getActions();\n\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (contentKey) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      openLeftColumnContent({ contentKey: undefined });\n      openSettingsScreen({ screen: undefined });\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewChannelStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (contentKey === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          openSettingsScreen({ screen: SettingsScreens.General });\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          openSettingsScreen({ screen: SettingsScreens.Privacy });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          openSettingsScreen({\n            screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeEnabled });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber });\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen });\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto });\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBio });\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday });\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGifts });\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall });\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneP2P });\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding });\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages });\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats });\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaDisabled });\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaEnabled });\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent });\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          openSettingsScreen({ screen: SettingsScreens.Folders });\n          return;\n\n        case SettingsScreens.FoldersShare:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolderFromChatList });\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          openLeftColumnContent({ contentKey: LeftColumnContent.ChatList });\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          openSettingsScreen({ screen: SettingsScreens.Stickers });\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          openSettingsScreen({ screen: SettingsScreens.Language });\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyMessages });\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (contentKey === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (contentKey === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = contentKey === LeftColumnContent.Archived;\n      const isChatList = contentKey === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, contentKey, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (contentKey === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction]);\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n        openSettingsScreen({ screen: prevSettingsScreenRef.current! });\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            animationLevel={animationLevel}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={contentKey}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onSearchQuery={handleSearchQuery}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={resolveTransitionName('layers', animationLevel, shouldSkipHistoryAnimations)}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      leftColumn,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const { animationLevel } = selectSharedSettings(global);\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n      contentKey: leftColumn.contentKey,\n      settingsScreen: leftColumn.settingsScreen,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const ref = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  const elementRef = useRef<HTMLDivElement>();\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {} as Complete<StateProps>;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMessageContent, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { selectMessageMediaDuration } from '../../../global/selectors/media';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  mediaDuration?: number;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  mediaDuration,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = useMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    mediaDuration || 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  useEffect(() => {\n    if (isPlaying && message?.isDeleting) {\n      playPause();\n    }\n  }, [isPlaying, message?.isDeleting, playPause]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}\n      X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): Complete<StateProps> => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    const mediaDuration = message ? selectMessageMediaDuration(global, message) : undefined;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n      mediaDuration,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = useMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state as Complete<StateProps>;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      } as Complete<StateProps>;\n    }\n\n    return state as Complete<StateProps>;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCustomEmoji,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPeer,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_MAC_OS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\nimport Icon from '../common/icons/Icon';\n \nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  isSavedMessages?: boolean;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n  isSavedMessages,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openSavedDialog,\n    focusLastMessage,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isDesktop, isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  const componentRef = useRef<HTMLDivElement>();\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    // Force close My Profile if clicked on Saved Messages header\n    openThreadWithInfo({ chatId, threadId, isOwnProfile: false });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const handleOpenSavedMessages = useLastCallback(() => {\n    openSavedDialog({ chatId });\n    focusLastMessage();\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n    const displayChatId = chat?.isMonoforum ? chat.linkedMonoforumId! : realChatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(displayChatId) ? (\n            <PrivateChatInfo\n              key={displayChatId}\n              userId={displayChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={displayChatId}\n              chatId={displayChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              withMonoforumStatus={chat?.isMonoforum}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef} data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}>\n      {!isMobile && !isSavedMessages && !isSavedDialog && (\n      <Button className=\"saved-messages-button\" round size=\"smaller\" color=\"translucent\" onClick={handleOpenSavedMessages} ariaLabel=\"Saved Messages\">\n          <Icon name=\"saved-messages\" />\n        </Button>\n      )}\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): Complete<StateProps> => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const peer = selectPeer(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = peer?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && selectCustomEmoji(global, emojiStatus.documentId);\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n      isSavedMessages,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import { memo, useRef, useSignal } from '@teact';\nimport { setExtraStyles } from '@teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectCanAnimateRightColumn,\n  selectChat,\n  selectChatMessage,\n  selectCurrentMiddleSearch,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n  withRightColumnAnimation?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  withRightColumnAnimation,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={\n        buildClassName(\n          styles.root,\n          withRightColumnAnimation && styles.root_withRightColumnAnimation,\n          className,\n        )\n      }\n    >\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): Complete<StateProps> => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\",\"root_withRightColumnAnimation\":\"YPrc0luK\",\"rootWithRightColumnAnimation\":\"YPrc0luK\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import type React from '@teact';\nimport type { ElementRef } from '@teact';\nimport { memo, useEffect, useMemo, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic } from '../../api/types';\nimport type { ActiveEmojiInteraction, AnimationLevel, MessageListType, ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface, selectCanAnimateRightColumn,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectEditingId,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsMonoforumAdmin,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport {\n  IS_ANDROID, IS_IOS, IS_MAC_OS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport backgroundStyles from '../../styles/_patternBackground.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: ElementRef<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  withInterfaceAnimations?: boolean;\n  withRightColumnAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  shouldBlockSendInMonoforum?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  animationLevel,\n  withInterfaceAnimations,\n  withRightColumnAnimation,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  shouldBlockSendInMonoforum,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel\n          ? oldLang('RequestToJoinChannelSentDescription') : oldLang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    backgroundStyles.background,\n    withRightColumnAnimation && backgroundStyles.withTransition,\n    customBackground && backgroundStyles.customBgImage,\n    backgroundColor && backgroundStyles.customBgColor,\n    customBackground && isBackgroundBlurred && backgroundStyles.blurred,\n    isRightColumnShown && backgroundStyles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    oldLang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(\n    oldLang, chat, threadId, topics, Boolean(draftReplyInfo),\n  );\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    || forumComposerPlaceholder\n    || (shouldBlockSendInMonoforum ? lang('MonoforumComposerPlaceholder') : undefined)\n    || (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    || (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale}`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        data-tauri-drag-region={IS_TAURI && IS_MAC_OS && !(renderingChatId && renderingThreadId) ? true : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={resolveTransitionName(\n                'slide',\n                animationLevel,\n                shouldSkipHistoryAnimations || !withInterfaceAnimations,\n              )}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                paidMessagesStars={paidMessagesStars}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage}\n              />\n              <div className={footerClassName}>\n                <FloatingActionButtons\n                  withScrollDown={renderingIsScrollDownShown}\n                  canPost={renderingCanPost}\n                  withExtraShift={withExtraShift}\n                />\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{oldLang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{oldLang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {oldLang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {oldLang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {oldLang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      animationLevel: selectSharedSettings(global).animationLevel,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state as Complete<StateProps>;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const editingId = selectEditingId(global, chatId, threadId);\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests\n      && !chat.isMonoforum,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const isMonoforumAdmin = selectIsMonoforumAdmin(global, chatId);\n    const shouldBlockSendInMonoforum = Boolean(chat?.isMonoforum && !draftReplyInfo && isMonoforumAdmin && !editingId);\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n        || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !shouldBlockSendInMonoforum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n      shouldBlockSendInMonoforum,\n    } as Complete<StateProps>;\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: ElementRef<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AgeVerificationModal from './ageVerification/AgeVerificationModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport DeleteAccountModal from './deleteAccount/DeleteAccountModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftLockedModal from './gift/locked/GiftLockedModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftResalePriceComposerModal from './gift/resale/GiftResalePriceComposerModal.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferConfirmModal from './gift/transfer/GiftTransferConfirmModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftInfoValueModal from './gift/value/GiftInfoValueModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport PriceConfirmModal from './priceConfirm/PriceConfirmModal.async';\nimport ProfileRatingModal from './profileRating/ProfileRatingModal.async';\nimport QuickPreviewModal from './quickPreview/QuickPreviewModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedPostApprovalModal from './suggestedPostApproval/SuggestedPostApprovalModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport SuggestMessageModal from './suggestMessage/SuggestMessageModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n  'giftCodeModal' |\n  'boostModal' |\n  'chatlistModal' |\n  'urlAuth' |\n  'mapModal' |\n  'oneTimeMediaModal' |\n  'inviteViaLinkModal' |\n  'requestedAttachBotInstall' |\n  'collectibleInfoModal' |\n  'reportAdModal' |\n  'reportModal' |\n  'starsBalanceModal' |\n  'starsPayment' |\n  'starsTransactionModal' |\n  'paidReactionModal' |\n  'suggestMessageModal' |\n  'suggestedPostApprovalModal' |\n  'webApps' |\n  'chatInviteModal' |\n  'starsSubscriptionModal' |\n  'starsGiftModal' |\n  'giftModal' |\n  'isGiftRecipientPickerOpen' |\n  'isWebAppsCloseConfirmationModalOpen' |\n  'giftInfoModal' |\n  'giftInfoValueModal' |\n  'lockedGiftModal' |\n  'giftResalePriceComposerModal' |\n  'suggestedStatusModal' |\n  'emojiStatusAccessModal' |\n  'locationAccessModal' |\n  'aboutAdsModal' |\n  'giftUpgradeModal' |\n  'monetizationVerificationModal' |\n  'giftWithdrawModal' |\n  'preparedMessageModal' |\n  'sharePreparedMessageModal' |\n  'giftStatusInfoModal' |\n  'giftTransferModal' |\n  'giftTransferConfirmModal' |\n  'chatRefundModal' |\n  'priceConfirmModal' |\n  'isFrozenAccountModalOpen' |\n  'deleteAccountModal' |\n  'isAgeVerificationModalOpen' |\n  'profileRatingModal' |\n  'quickPreview'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  suggestMessageModal: SuggestMessageModal,\n  suggestedPostApprovalModal: SuggestedPostApprovalModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  giftInfoValueModal: GiftInfoValueModal,\n  lockedGiftModal: GiftLockedModal,\n  giftResalePriceComposerModal: GiftResalePriceComposerModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  giftTransferConfirmModal: GiftTransferConfirmModal,\n  chatRefundModal: ChatRefundModal,\n  priceConfirmModal: PriceConfirmModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n  deleteAccountModal: DeleteAccountModal,\n  isAgeVerificationModalOpen: AgeVerificationModal,\n  profileRatingModal: ProfileRatingModal,\n  quickPreview: QuickPreviewModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => (\n    pick(selectTabState(global), MODAL_KEYS) as Complete<StateProps>\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal?.isModalOpen);\n\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal?.inputInvoice);\n\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestMessageModal = useModuleLoader(Bundles.Extra, 'SuggestMessageModal', !modal);\n\n  return SuggestMessageModal ? <SuggestMessageModal {...props} /> : undefined;\n};\n\nexport default SuggestMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedPostApprovalModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedPostApprovalModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedPostApprovalModal = useModuleLoader(Bundles.Extra, 'SuggestedPostApprovalModal', !modal);\n\n  return SuggestedPostApprovalModal ? <SuggestedPostApprovalModal {...props} /> : undefined;\n};\n\nexport default SuggestedPostApprovalModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoValueModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoValueModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoValueModal = useModuleLoader(Bundles.Stars, 'GiftInfoValueModal', !modal);\n\n  return GiftInfoValueModal ? <GiftInfoValueModal {...props} /> : undefined;\n};\n\nexport default GiftInfoValueModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftLockedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftLockedModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftLockedModal = useModuleLoader(Bundles.Stars, 'GiftLockedModal', !modal);\n\n  return GiftLockedModal ? <GiftLockedModal {...props} /> : undefined;\n};\n\nexport default GiftLockedModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftResalePriceComposerModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftResalePriceComposerModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftResalePriceComposerModal = useModuleLoader(Bundles.Stars, 'GiftResalePriceComposerModal', !modal);\n\n  return GiftResalePriceComposerModal ? <GiftResalePriceComposerModal {...props} /> : undefined;\n};\n\nexport default GiftResalePriceComposerModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferConfirmModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferConfirmModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferConfirmModal = useModuleLoader(\n    Bundles.Stars,\n    'GiftTransferConfirmModal',\n    !modal,\n  );\n\n  return GiftTransferConfirmModal ? <GiftTransferConfirmModal {...props} /> : undefined;\n};\n\nexport default GiftTransferConfirmModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { TabState } from '../../../global/types';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nexport type OwnProps = {\n  modal: TabState['priceConfirmModal'];\n};\n\nconst PriceConfirmModalAsync: FC<OwnProps> = ({ modal }) => {\n  const PriceConfirmModal = useModuleLoader(Bundles.Stars, 'PriceConfirmModal', !modal);\n\n  return PriceConfirmModal ? <PriceConfirmModal modal={modal} /> : undefined;\n};\n\nexport default PriceConfirmModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', !modal);\n\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DeleteAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const DeleteAccountModal = useModuleLoader(Bundles.Extra, 'DeleteAccountModal', !modal);\n\n  return DeleteAccountModal ? <DeleteAccountModal {...props} /> : undefined;\n};\n\nexport default DeleteAccountModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AgeVerificationModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AgeVerificationModalAsync: FC<OwnProps> = memo((props) => {\n  const { modal } = props;\n\n  const AgeVerificationModal = useModuleLoader(Bundles.Extra, 'AgeVerificationModal', !modal);\n\n  return AgeVerificationModal ? <AgeVerificationModal {...props} /> : undefined;\n});\n\nexport default AgeVerificationModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ProfileRatingModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ProfileRatingModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ProfileRatingModal = useModuleLoader(Bundles.Extra, 'ProfileRatingModal', !modal);\n\n  return ProfileRatingModal ? <ProfileRatingModal {...props} /> : undefined;\n};\n\nexport default ProfileRatingModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './QuickPreviewModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst QuickPreviewModalAsync: FC<OwnProps> = memo((props) => {\n  const { modal } = props;\n\n  const QuickPreviewModal = useModuleLoader(Bundles.Extra, 'QuickPreviewModal', !modal);\n\n  return QuickPreviewModal ? <QuickPreviewModal {...props} /> : undefined;\n});\n\nexport default QuickPreviewModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","export class VTTypes {\n  private readonly hierarchy: string[] = [];\n\n  constructor(types: readonly string[]) {\n    this.hierarchy = [...(types || [])];\n  }\n\n  with(type: string): VTTypes {\n    return new VTTypes([...this.hierarchy, type]);\n  }\n\n  getTypes(): readonly string[] {\n    return this.hierarchy;\n  }\n}\n\n// View transition types\nexport const VTT_RIGHT_COLUMN = new VTTypes(['rightColumn']);\nexport const VTT_RIGHT_PROFILE_AVATAR = VTT_RIGHT_COLUMN.with('profileAvatar');\nexport const VTT_RIGHT_PROFILE_EXPAND = VTT_RIGHT_PROFILE_AVATAR.with('profileExpand');\nexport const VTT_RIGHT_PROFILE_COLLAPSE = VTT_RIGHT_PROFILE_AVATAR.with('profileCollapse');\n\nexport const VTT_PROFILE_GIFTS = VTT_RIGHT_COLUMN.with('profileGifts');\n","import { type ElementRef, useEffect, useRef, useSignal } from '@teact';\n\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport stopEvent from '../../util/stopEvent';\nimport useLastCallback from '../useLastCallback';\n\ntype State = 'overscroll' | 'animating' | 'normal';\n\ntype ActiveScrollContext = {\n  lastDeltas: number[];\n  lastAverageDelta: number;\n  isStartedAtTop: boolean;\n  resetStartTopAt?: number;\n  timeout: number | undefined;\n};\n\nconst LAST_DELTA_COUNT = 7;\nconst ACTIVE_SCROLL_RESET_TIMEOUT = 100;\nconst NEW_INPUT_DELTA_THRESHOLD = 7;\nconst OVERSCROLL_CONTAINER_CLASS = 'no-overscroll';\nconst NO_TOUCH_CONTAINER_CLASS = 'no-touch';\nconst TRANSITION_DURATION = 350;\nconst DRAG_TRIGGER_DISTANCE = 75;\n\nconst initialActiveScrollContext: ActiveScrollContext = {\n  lastDeltas: new Array(LAST_DELTA_COUNT).fill(0),\n  lastAverageDelta: 0,\n  isStartedAtTop: false,\n  resetStartTopAt: undefined,\n  timeout: undefined,\n};\n\nexport default function useTopOverscroll({\n  containerRef,\n  isOverscrolled,\n  isDisabled,\n  onOverscroll,\n  onReset,\n}: {\n  containerRef: ElementRef<HTMLDivElement>;\n  isOverscrolled?: boolean;\n  onOverscroll?: AnyToVoidFunction;\n  onReset?: AnyToVoidFunction;\n  isDisabled?: boolean;\n},\n) {\n  const [getState, setState] = useSignal<State>('normal');\n  const activeScrollRef = useRef<ActiveScrollContext>({ ...initialActiveScrollContext });\n  const transitionTimeoutRef = useRef<number | undefined>();\n  const touchStartYRef = useRef<number | undefined>();\n\n  const triggerOverscroll = useLastCallback(() => {\n    clearTimeout(transitionTimeoutRef.current);\n    setState('overscroll');\n    onOverscroll?.();\n  });\n\n  const triggerReset = useLastCallback(() => {\n    setState('animating');\n    transitionTimeoutRef.current = window.setTimeout(() => {\n      setState('normal');\n    }, TRANSITION_DURATION);\n    onReset?.();\n  });\n\n  const scheduleResetActiveScroll = useLastCallback((timeout: number) => {\n    clearTimeout(activeScrollRef.current.timeout);\n    activeScrollRef.current.timeout = window.setTimeout(() => {\n      activeScrollRef.current = { ...initialActiveScrollContext };\n    }, timeout);\n  });\n\n  const handleWheel = useLastCallback((e: WheelEvent) => {\n    const container = containerRef.current;\n    if (!container || e.defaultPrevented) {\n      return;\n    }\n\n    const { deltaY } = e;\n    const { scrollTop } = container;\n    const state = getState();\n\n    const activeScroll = activeScrollRef.current;\n    const lastAverageDelta = activeScroll.lastAverageDelta;\n\n    const isStarting = activeScroll.lastDeltas.at(-1) === 0\n      || (activeScroll.resetStartTopAt && Date.now() >= activeScroll.resetStartTopAt);\n    if (scrollTop === 0 && isStarting) {\n      activeScroll.isStartedAtTop = true;\n      activeScroll.resetStartTopAt = undefined;\n    }\n\n    const lastDeltas = activeScrollRef.current.lastDeltas.slice(); // Copy\n    lastDeltas.push(deltaY);\n    if (lastDeltas.length > LAST_DELTA_COUNT) {\n      lastDeltas.shift();\n    }\n    activeScrollRef.current.lastDeltas = lastDeltas;\n    const currentAverageDelta = lastDeltas.reduce((a, b) => a + b, 0) / lastDeltas.length;\n    activeScrollRef.current.lastAverageDelta = currentAverageDelta;\n\n    const isNewInput = Math.abs(currentAverageDelta) - Math.abs(lastAverageDelta) > NEW_INPUT_DELTA_THRESHOLD;\n\n    scheduleResetActiveScroll(ACTIVE_SCROLL_RESET_TIMEOUT);\n\n    // If we're at the top and scrolling up\n    if (scrollTop === 0 && deltaY < 0 && state !== 'overscroll') {\n      if (!activeScroll.resetStartTopAt) {\n        // Schedule delta reset, so we would respond to new input with `isStartedAtTop` flag set\n        activeScroll.resetStartTopAt = Date.now() + ACTIVE_SCROLL_RESET_TIMEOUT;\n      }\n\n      // Only trigger overscroll on new input, ignore momentum events\n      if (isNewInput && activeScroll.isStartedAtTop) {\n        triggerOverscroll();\n      }\n      return;\n    }\n\n    // Ignore scroll events during collapse animation\n    if (state === 'animating' && deltaY > 0) {\n      stopEvent(e);\n      return;\n    }\n\n    // If we're overscrolled, any down wheel event should reset\n    if (state === 'overscroll' && deltaY > 0) {\n      triggerReset();\n      stopEvent(e);\n      return;\n    }\n  });\n\n  const handleTouchStart = useLastCallback((e: TouchEvent) => {\n    const container = containerRef.current;\n    if (!container || e.touches.length !== 1) return;\n\n    const { scrollTop } = container;\n    const state = getState();\n\n    // Register touch start position when at top or in overscroll state\n    if (scrollTop === 0 || state === 'overscroll') {\n      touchStartYRef.current = e.touches[0].clientY;\n    }\n  });\n\n  const handleTouchMove = useLastCallback((e: TouchEvent) => {\n    const container = containerRef.current;\n    const startY = touchStartYRef.current;\n    if (!container || startY === undefined || e.touches.length !== 1) return;\n\n    const { scrollTop } = container;\n    const state = getState();\n    const currentY = e.touches[0].clientY;\n    const deltaY = currentY - startY;\n\n    if (state === 'animating') {\n      return;\n    }\n\n    // If we're at the top and dragging down by more than trigger distance\n    if (scrollTop === 0 && deltaY > DRAG_TRIGGER_DISTANCE && state !== 'overscroll') {\n      triggerOverscroll();\n      touchStartYRef.current = undefined; // Reset to prevent multiple triggers\n      return;\n    }\n\n    // If we're overscrolled and dragging up by more than trigger distance, reset\n    if (state === 'overscroll' && deltaY < -DRAG_TRIGGER_DISTANCE) {\n      triggerReset();\n      touchStartYRef.current = undefined; // Reset to prevent multiple triggers\n      return;\n    }\n  });\n\n  const handleTouchEnd = useLastCallback(() => {\n    touchStartYRef.current = undefined;\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (isDisabled || !container) return;\n    requestMutation(() => {\n      container.classList.add(OVERSCROLL_CONTAINER_CLASS);\n    });\n\n    return () => {\n      requestMutation(() => {\n        container.classList.remove(OVERSCROLL_CONTAINER_CLASS);\n      });\n    };\n  }, [containerRef, isDisabled]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (isDisabled || !container) return;\n    requestMutation(() => {\n      container.classList.toggle(NO_TOUCH_CONTAINER_CLASS, getState() !== 'normal');\n    });\n\n    return () => {\n      requestMutation(() => {\n        container.classList.remove(NO_TOUCH_CONTAINER_CLASS);\n      });\n    };\n  }, [containerRef, isDisabled, getState]);\n\n  useEffect(() => {\n    setState(isOverscrolled ? 'overscroll' : 'normal');\n  }, [isOverscrolled, setState]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (isDisabled || !container) {\n      return undefined;\n    }\n\n    container.addEventListener('wheel', handleWheel, { passive: getState() === 'normal' });\n    container.addEventListener('touchstart', handleTouchStart, { passive: true });\n    container.addEventListener('touchmove', handleTouchMove, { passive: true });\n    container.addEventListener('touchend', handleTouchEnd, { passive: true });\n    container.addEventListener('touchcancel', handleTouchEnd, { passive: true });\n\n    return () => {\n      container.removeEventListener('wheel', handleWheel);\n      container.removeEventListener('touchstart', handleTouchStart);\n      container.removeEventListener('touchmove', handleTouchMove);\n      container.removeEventListener('touchend', handleTouchEnd);\n      container.removeEventListener('touchcancel', handleTouchEnd);\n\n      const activeScroll = activeScrollRef.current;\n      if (activeScroll?.timeout) clearTimeout(activeScroll.timeout);\n    };\n  }, [containerRef, handleWheel, handleTouchStart, handleTouchMove, handleTouchEnd, getState, isDisabled]);\n}\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState({\n  containerRef,\n  tabType,\n  profileState,\n  onProfileStateChange,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs,\n}: {\n  containerRef: ElementRef<HTMLDivElement>;\n  tabType: ProfileTabType;\n  profileState: ProfileState;\n  forceScrollProfileTab?: boolean;\n  allowAutoScrollToTabs?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n  handleStopAutoScrollToTabs: NoneToVoidFunction;\n}) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [\n    tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs,\n  ]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    if (state !== profileState) {\n      onProfileStateChange(state);\n    }\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n}: {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [gifViewportIds, getMoreGifs, noProfileInfoForGifs] = useInfiniteScrollForSharedMedia(\n    'gif', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'gif':\n      viewportIds = gifViewportIds;\n      getMore = getMoreGifs;\n      noProfileInfo = noProfileInfoForGifs;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"star\":\"LLQBJODm\",\"priceBadge\":\"haa6STaT\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\",\"stickerWrapper\":\"NYuBBB9j\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon, formatTonAsIcon } from '../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StickerView from '../../common/StickerView';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  className?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  className,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const starGift = gift.gift;\n  const starGiftUnique = starGift.type === 'starGiftUnique' ? starGift : undefined;\n\n  const resellPrice = useMemo(() => {\n    if (!starGiftUnique?.resellPrice) return undefined;\n\n    if (starGiftUnique.resaleTonOnly) {\n      return starGiftUnique.resellPrice.find((amount) => amount.currency === TON_CURRENCY_CODE);\n    }\n\n    return starGiftUnique.resellPrice.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n  }, [starGiftUnique]);\n\n  const ribbonText = (() => {\n    if (starGiftUnique?.resellPrice) {\n      return lang('GiftRibbonSale');\n    }\n    if (gift.isPinned && starGiftUnique) {\n      return lang('GiftSavedNumber', { number: starGiftUnique.number });\n    }\n    if (totalIssued) {\n      return lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) });\n    }\n    return undefined;\n  })();\n\n  const ribbonColor = starGiftUnique?.resellPrice ? 'green' : 'blue';\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const giftAttributes = useMemo(() => getGiftAttributes(gift.gift), [gift.gift]);\n  const { backdrop, pattern } = giftAttributes || {};\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n        patternSize={14}\n        ringsCount={1}\n        ovalFactor={1}\n      />\n    );\n  }, [backdrop, pattern]);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('interactive-gift scroll-item', styles.root, className)}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldLoop={isHover}\n            shouldPreloadPreview\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n          />\n        )}\n\n      </div>\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {resellPrice && (\n        <Button\n          className={styles.priceBadge}\n          nonInteractive\n          size=\"tiny\"\n          withSparkleEffect\n          noSparkleAnimation\n          pill\n          fluid\n        >\n          {resellPrice.currency === 'TON'\n            ? formatTonAsIcon(lang, resellPrice.amount, { shouldConvertFromNanos: true, className: styles.star })\n            : formatStarsAsIcon(lang, resellPrice.amount, { asFont: true, className: styles.star })}\n        </Button>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color={ribbonColor}\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): Complete<StateProps> => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport useMessageMediaHash from '../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../hooks/media/useThumbnail';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = useThumbnail(media);\n\n  const mediaHash = useMessageMediaHash(media, 'preview');\n  const mediaBlobUrl = useMedia(mediaHash, !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): Complete<StateProps> => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig;\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"_KBrROQt\",\"icon\":\"Y3vEed9M\"};","import { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from './AnimatedIconFromSticker';\n\nimport styles from './AnimatedTabItem.module.scss';\n\ntype OwnProps = {\n  id: string;\n  title: string;\n  sticker?: ApiSticker;\n  onClick?: (id: string) => void;\n};\n\nconst AnimatedTabItem = ({\n  id,\n  title,\n  sticker,\n  onClick,\n}: OwnProps) => {\n  const handleClick = useLastCallback(() => {\n    onClick?.(id);\n  });\n\n  return (\n    <div\n      className={styles.item}\n      onClick={handleClick}\n    >\n      {sticker && (\n        <AnimatedIconFromSticker\n          className={styles.icon}\n          sticker={sticker}\n          size={20}\n          forcePreview\n        />\n      )}\n      {title}\n    </div>\n  );\n};\n\nexport default memo(AnimatedTabItem);\n","import { memo, useEffect, useRef, useState } from '../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { ANIMATION_LEVEL_MIN } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport AnimatedTabItem from './AnimatedTabItem';\n\nimport styles from './AnimatedTabList.module.scss';\n\nexport type TabItem = {\n  id: string;\n  title: string;\n  sticker?: ApiSticker;\n};\n\ntype OwnProps = {\n  items: TabItem[];\n  selectedItemId?: string;\n  className?: string;\n  animationLevel: AnimationLevel;\n  onItemSelect?: (itemId: string) => void;\n};\n\nconst AnimatedTabList = ({\n  items,\n  selectedItemId,\n  animationLevel,\n  onItemSelect,\n  className,\n}: OwnProps) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const clipPathContainerRef = useRef<HTMLDivElement>();\n  const selectedIndex = items.findIndex((item) => item.id === selectedItemId) || 0;\n  const [clipPath, setClipPath] = useState<string>('');\n  const shouldAnimate = animationLevel > ANIMATION_LEVEL_MIN;\n\n  useHorizontalScroll(containerRef, !items.length, true);\n\n  const updateClipPath = useLastCallback(() => {\n    const clipPathContainer = clipPathContainerRef.current;\n    const activeTab = selectedIndex >= 0 && clipPathContainer?.childNodes[selectedIndex] as HTMLElement | null;\n\n    if (clipPathContainer && activeTab && clipPathContainer.offsetWidth > 0) {\n      const { offsetLeft, offsetWidth } = activeTab;\n      const containerWidth = clipPathContainer.offsetWidth;\n      const left = (offsetLeft / containerWidth * 100).toFixed(1);\n      const right = ((containerWidth - (offsetLeft + offsetWidth)) / containerWidth * 100).toFixed(1);\n\n      const newClipPath = `inset(0 ${right}% 0 ${left}% round 1rem)`;\n      setClipPath(newClipPath);\n    }\n  });\n\n  useEffect(() => {\n    updateClipPath();\n  }, [selectedIndex, items]);\n\n  useResizeObserver(clipPathContainerRef, updateClipPath);\n\n  if (!items.length) return undefined;\n\n  return (\n    <div\n      ref={containerRef}\n      className={\n        buildClassName(\n          styles.container,\n          'no-scrollbar',\n          className,\n          clipPath && styles.isVisible,\n        )\n      }\n    >\n      {items.map((item) => (\n        <AnimatedTabItem\n          key={item.id}\n          id={item.id}\n          title={item.title}\n          sticker={item.sticker}\n          onClick={onItemSelect}\n        />\n      ))}\n\n      <div\n        ref={clipPathContainerRef}\n        className={buildClassName(\n          styles.clipPathContainer,\n          'clip-path-container',\n          !shouldAnimate && styles.noAnimation,\n        )}\n        style={clipPath ? `clip-path: ${clipPath}` : undefined}\n        aria-hidden\n      >\n        {items.map((item, i) => (\n          <AnimatedTabItem\n            key={item.id}\n            id={item.id}\n            title={item.title}\n            sticker={item.sticker}\n            onClick={onItemSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(AnimatedTabList);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"UQ6pUmuC\",\"clipPathContainer\":\"c397ZVz4\",\"isVisible\":\"_Nw3GzkO\",\"noAnimation\":\"zNFdzcTe\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarGiftCollection } from '../../../api/types';\nimport type { ProfileCollectionKey } from '../../../global/selectors/payments';\nimport type { AnimationLevel } from '../../../types';\nimport type { TabItem } from '../../common/AnimatedTabList';\n\nimport { selectActiveGiftsCollectionId } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedTabList from '../../common/AnimatedTabList';\n\nimport styles from './StarGiftCollectionList.module.scss';\ntype OwnProps = {\n  peerId: string;\n  className?: string;\n};\n\ntype StateProps = {\n  collections?: ApiStarGiftCollection[];\n  activeCollectionId: ProfileCollectionKey;\n  animationLevel: AnimationLevel;\n};\n\nconst StarGiftCollectionList = ({\n  peerId,\n  className,\n  collections,\n  activeCollectionId,\n  animationLevel,\n}: StateProps & OwnProps) => {\n  const { updateSelectedGiftCollection, resetSelectedGiftCollection } = getActions();\n  const lang = useLang();\n\n  const handleItemSelect = useLastCallback((itemId: string) => {\n    if (itemId === 'all') {\n      resetSelectedGiftCollection({ peerId });\n    } else {\n      const collectionId = Number(itemId);\n      updateSelectedGiftCollection({ peerId, collectionId });\n    }\n  });\n\n  if (!collections || collections.length === 0) {\n    return undefined;\n  }\n\n  const items: TabItem[] = useMemo(() => [\n    {\n      id: 'all',\n      title: lang('AllGiftsCategory'),\n    },\n    ...collections.map((collection) => ({\n      id: String(collection.collectionId),\n      title: collection.title,\n      sticker: collection.icon,\n    })),\n  ], [collections, lang]);\n\n  const selectedItemId = activeCollectionId ? String(activeCollectionId) : 'all';\n\n  return (\n    <AnimatedTabList\n      items={items}\n      selectedItemId={selectedItemId}\n      animationLevel={animationLevel}\n      onItemSelect={handleItemSelect}\n      className={buildClassName(styles.tabList, className)}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const { starGiftCollections } = global;\n    const collections = starGiftCollections?.byPeerId?.[peerId];\n    const activeCollectionId = selectActiveGiftsCollectionId(global, peerId);\n\n    return {\n      collections,\n      activeCollectionId,\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(StarGiftCollectionList));\n","// extracted by mini-css-extract-plugin\nexport default {\"tabList\":\"pvf61Tbm\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStoryAlbum } from '../../../api/types';\nimport type { ProfileCollectionKey } from '../../../global/selectors/payments';\nimport type { AnimationLevel } from '../../../types';\nimport type { TabItem } from '../../common/AnimatedTabList';\n\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { selectActiveStoriesCollectionId } from '../../../global/selectors/stories';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedTabList from '../../common/AnimatedTabList';\n\nimport styles from './StoryAlbumList.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  className?: string;\n};\n\ntype StateProps = {\n  albums?: ApiStoryAlbum[];\n  selectedAlbumId: ProfileCollectionKey;\n  animationLevel: AnimationLevel;\n};\n\nconst StoryAlbumList = ({\n  peerId,\n  className,\n  albums,\n  selectedAlbumId,\n  animationLevel,\n}: StateProps & OwnProps) => {\n  const { selectStoryAlbum, resetSelectedStoryAlbum } = getActions();\n  const lang = useLang();\n\n  const handleItemSelect = useLastCallback((itemId: string) => {\n    if (itemId === 'all') {\n      resetSelectedStoryAlbum();\n    } else {\n      const albumId = Number(itemId);\n      selectStoryAlbum({ peerId, albumId });\n    }\n  });\n\n  if (!albums?.length) {\n    return undefined;\n  }\n\n  const items: TabItem[] = useMemo(() => [\n    {\n      id: 'all',\n      title: lang('AllStoriesCategory'),\n    },\n    ...albums.map((album) => ({\n      id: String(album.albumId),\n      title: album.title,\n    })),\n  ], [albums, lang]);\n\n  const selectedItemId = selectedAlbumId ? String(selectedAlbumId) : 'all';\n\n  return (\n    <AnimatedTabList\n      items={items}\n      selectedItemId={selectedItemId}\n      animationLevel={animationLevel}\n      onItemSelect={handleItemSelect}\n      className={buildClassName(styles.tabList, className)}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const { stories } = global;\n    const albums = stories?.albumsByPeerId?.[peerId];\n    const selectedAlbumId = selectActiveStoriesCollectionId(global);\n\n    return {\n      albums,\n      selectedAlbumId,\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(StoryAlbumList));\n","// extracted by mini-css-extract-plugin\nexport default {\"tabList\":\"GgK8T6WN\"};","import { memo, useCallback, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiProfileTab,\n  ApiSavedStarGift,\n  ApiStarGiftCollection,\n  ApiStoryAlbum,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { ProfileCollectionKey } from '../../global/selectors/payments';\nimport type { TabState } from '../../global/types';\nimport type { AnimationLevel, ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId } from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport { MEMBERS_SLICE, PROFILE_SENSITIVE_AREA, SHARED_MEDIA_SLICE, SLIDE_TRANSITION_DURATION } from '../../config';\nimport { selectActiveGiftsCollectionId } from '../../global/selectors/payments';\n\nconst CONTENT_PANEL_SHOW_DELAY = 300;\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getSavedGiftKey } from '../../global/helpers/stars';\nimport {\n  selectActiveDownloads,\n  selectCanUpdateMainTab,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsChatRestricted,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectMonoforumChannel,\n  selectPeerStories,\n  selectPerformanceSettingsValue,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectMessageDownloadableMedia } from '../../global/selectors/media';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { selectActiveStoriesCollectionId } from '../../global/selectors/stories';\nimport {\n  VTT_PROFILE_GIFTS,\n  VTT_RIGHT_PROFILE_COLLAPSE,\n  VTT_RIGHT_PROFILE_EXPAND,\n} from '../../util/animations/viewTransitionTypes.ts';\nimport { areDeepEqual } from '../../util/areDeepEqual';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport { useVtn } from '../../hooks/animations/useVtn.ts';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useTopOverscroll from '../../hooks/scroll/useTopOverscroll.tsx';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useSyncEffectWithPrevDeps from '../../hooks/useSyncEffectWithPrevDeps.ts';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/profile/ProfileInfo.tsx';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList, { type TabWithProperties } from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport StarGiftCollectionList from './gifts/StarGiftCollectionList';\nimport StoryAlbumList from './stories/StoryAlbumList';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  isActive: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  monoforumChannel?: ApiChat;\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  storyAlbums?: ApiStoryAlbum[];\n  giftCollections?: ApiStarGiftCollection[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  selectedStoryAlbumId: ProfileCollectionKey;\n  activeCollectionId: ProfileCollectionKey;\n  giftsFilter?: any;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  chatInfo: TabState['chatInfo'];\n  animationLevel: AnimationLevel;\n  shouldWarnAboutFiles?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia?: ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  isSavedMessages?: boolean;\n  isSynced?: boolean;\n  hasAvatar?: boolean;\n  mainTab?: ApiProfileTab;\n  canUpdateMainTab?: boolean;\n  canAutoPlayGifs?: boolean;\n};\n\ntype LocalTabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\ntype TabWithPropertiesAndType = TabWithProperties & {\n  type: ProfileTabType;\n};\n\nconst TABS: LocalTabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n  { type: 'gif', key: 'ProfileTabGifs' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst VALID_CHANNEL_MAIN_TAB_TYPES = new Set<StringAutocomplete<ApiProfileTab>>([\n  'stories', 'gifts', 'media', 'documents', 'audio', 'voice', 'links', 'gif',\n]);\nconst VALID_USER_MAIN_TAB_TYPES = new Set<StringAutocomplete<ApiProfileTab>>([\n  'stories', 'gifts',\n]);\nconst SHARED_MEDIA_TYPES = new Set<StringAutocomplete<SharedMediaType>>([\n  'media', 'documents', 'links', 'audio', 'voice', 'gif',\n]);\n\nconst Profile = ({\n  chatId,\n  isActive,\n  threadId,\n  chatInfo,\n  profileState,\n  theme,\n  monoforumChannel,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  selectedStoryAlbumId,\n  activeCollectionId,\n  giftsFilter,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  storyAlbums,\n  giftCollections,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  animationLevel,\n  shouldWarnAboutFiles,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  isSavedMessages,\n  isSynced,\n  hasAvatar,\n  mainTab,\n  canUpdateMainTab,\n  canAutoPlayGifs,\n  onProfileStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n    loadStarGiftCollections,\n    loadStoryAlbums,\n    resetSelectedStoryAlbum,\n    changeProfileTab,\n    setMainProfileTab,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const shouldSkipTransitionRef = useRef(false);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n  const [isGiftTransitionEnabled, enableGiftTransition, disableGiftTransition] = useFlag();\n\n  const isClosed = !chatInfo.isOpen;\n  const { profileTab, forceScrollProfileTab, isOwnProfile } = chatInfo;\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isGeneralSavedMessages = isSavedMessages && !isSavedDialog;\n  const [isProfileExpanded, expandProfile, collapseProfile] = useFlag();\n\n  const [restoreContentHeightKey, setRestoreContentHeightKey] = useState(0);\n\n  const isUser = isUserId(chatId);\n  const validMainTabTypes = isUser ? VALID_USER_MAIN_TAB_TYPES : VALID_CHANNEL_MAIN_TAB_TYPES;\n\n  const tabs = useMemo(() => {\n    const arr: LocalTabProps[] = [];\n    if (isGeneralSavedMessages) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasStoriesTab && isOwnProfile) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasMembersTab && !isOwnProfile) {\n      arr.push({ type: 'members', key: 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab && !isOwnProfile) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    if (!isOwnProfile) {\n      arr.push(...TABS);\n    }\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo && !isOwnProfile) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab && !isOwnProfile) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length && !isOwnProfile) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length && !isOwnProfile) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    // Fallback to prevent errors in edge cases\n    // TODO: Handle no tabs case, skip shared media block\n    if (!arr.length) {\n      arr.push(TABS[0]);\n    }\n\n    if (mainTab) {\n      const mainTabIndex = arr.findIndex((tab) => tab.type === mainTab);\n      if (mainTabIndex !== -1) {\n        const newFirstTab = arr[mainTabIndex];\n        arr.splice(mainTabIndex, 1);\n        arr.unshift(newFirstTab);\n      }\n    }\n\n    return arr.map((tab) => {\n      const contextActions: MenuItemContextAction[] | undefined = canUpdateMainTab && mainTab !== tab.type\n        && validMainTabTypes.has(tab.type) ? [{\n          title: lang('ProfileMenuSetMainTab'),\n          icon: 'replace',\n          handler: () => {\n            setMainProfileTab({ chatId, tab: tab.type as ApiProfileTab });\n          },\n        }] : undefined;\n\n      return {\n        type: tab.type,\n        title: lang(tab.key),\n        contextActions,\n      } satisfies TabWithPropertiesAndType;\n    });\n  }, [\n    isGeneralSavedMessages, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang, isOwnProfile,\n    mainTab, chatId, canUpdateMainTab, validMainTabTypes,\n  ]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const setActiveTab = useLastCallback((type: ProfileTabType) => {\n    if (isClosed) return;\n    changeProfileTab({ profileTab: type });\n    setSharedMediaSearchType({ mediaType: SHARED_MEDIA_TYPES.has(type) ? type as SharedMediaType : undefined });\n  });\n\n  useEffect(() => {\n    if (isClosed) return;\n    if (profileTab) {\n      // Force reset scroll marker\n      changeProfileTab({ profileTab, shouldScrollTo: undefined });\n      return;\n    };\n\n    setActiveTab(tabs[0].type); // Set default tab\n  }, [isClosed, profileTab, tabs]);\n\n  useEffectWithPrevDeps(([prevMainTab]) => {\n    if (prevMainTab || !mainTab) return;\n    setActiveTab(mainTab); // Only focus when loading full info\n  }, [mainTab]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(tabs[index].type);\n  }, [tabs]);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  useEffect(() => {\n    resetSelectedStoryAlbum();\n  }, [chatId]);\n\n  useSyncEffect(() => {\n    enableGiftTransition();\n  }, [giftsFilter]);\n\n  useSyncEffect(() => {\n    disableGiftTransition();\n  }, [gifts]);\n\n  useEffect(() => {\n    if (hasGiftsTab && isSynced) {\n      loadStarGiftCollections({ peerId: chatId });\n      loadStoryAlbums({ peerId: chatId });\n    }\n  }, [chatId, hasGiftsTab, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition } = useViewTransition();\n  const { createVtnStyle } = useVtn();\n\n  const giftIds = useMemo(() => renderingGifts?.map((gift) => getSavedGiftKey(gift)), [renderingGifts]);\n\n  const activeTabIndex = useMemo(() => {\n    const index = tabs.findIndex(({ type }) => type === profileTab);\n    return index === -1 ? 0 : index;\n  }, [profileTab, tabs]);\n\n  // Reset skip transition flag from previous render\n  if (shouldSkipTransitionRef.current) {\n    shouldSkipTransitionRef.current = false;\n  }\n\n  useSyncEffectWithPrevDeps(([prevProfileTab, prevActiveTabIndex]) => {\n    if (prevProfileTab === profileTab && prevActiveTabIndex !== activeTabIndex) {\n      shouldSkipTransitionRef.current = true;\n    }\n  }, [profileTab, activeTabIndex]);\n\n  const tabType = tabs[activeTabIndex].type;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n\n  const handleLoadMoreMembers = useCallback(() => {\n    loadMoreMembers({ chatId });\n  }, [chatId, loadMoreMembers]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (areDeepEqual(gifts, prevGifts)) {\n      return;\n    }\n\n    if (!gifts || !prevGifts || !isGiftTransitionEnabled) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map((gift) => getSavedGiftKey(gift));\n    const newGiftIds = gifts.map((gift) => getSavedGiftKey(gift));\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(VTT_PROFILE_GIFTS, () => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition, isGiftTransitionEnabled]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers: handleLoadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n\n  const shouldRenderProfileInfo = !noProfileInfo && !isSavedMessages;\n\n  const isFirstTab = tabs[0].type === resultType;\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const [isGiftCollectionsShowed, markGiftCollectionsShowed, unmarkGiftCollectionsShowed] = useFlag(false);\n  const [isStoryAlbumsShowed, markStoryAlbumsShowed, unmarkStoryAlbums] = useFlag(false);\n\n  const hasGiftsCollections = giftCollections && giftCollections.length > 0;\n  const hasStoryAlbums = storyAlbums && storyAlbums.length > 0;\n  const isGiftsResult = resultType === 'gifts';\n  const isStoriesResult = resultType === 'stories';\n  const shouldShowContentPanel = (isGiftsResult && hasGiftsCollections) || (isStoriesResult && hasStoryAlbums);\n\n  useEffect(() => {\n    if (hasGiftsCollections) {\n      setTimeout(() => {\n        markGiftCollectionsShowed();\n      }, CONTENT_PANEL_SHOW_DELAY);\n    } else {\n      unmarkGiftCollectionsShowed();\n    }\n\n    if (hasStoryAlbums) {\n      setTimeout(() => {\n        markStoryAlbumsShowed();\n      }, CONTENT_PANEL_SHOW_DELAY);\n    } else {\n      unmarkStoryAlbums();\n    }\n  }, [hasGiftsCollections, hasStoryAlbums, markGiftCollectionsShowed, markStoryAlbumsShowed]);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const handleExpandProfile = useLastCallback(() => {\n    if (isProfileExpanded) return;\n    startViewTransition(VTT_RIGHT_PROFILE_EXPAND, () => {\n      expandProfile();\n    });\n  });\n\n  const handleCollapseProfile = useLastCallback(() => {\n    if (!isProfileExpanded) return;\n    startViewTransition(VTT_RIGHT_PROFILE_COLLAPSE, () => {\n      collapseProfile();\n    });\n  });\n\n  const { handleScroll } = useProfileState({\n    containerRef,\n    tabType: resultType,\n    profileState,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    onProfileStateChange,\n    handleStopAutoScrollToTabs,\n  });\n\n  useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n        || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useTopOverscroll({\n    containerRef,\n    onOverscroll: handleExpandProfile,\n    onReset: handleCollapseProfile,\n    isOverscrolled: isProfileExpanded,\n    isDisabled: !hasAvatar || !shouldRenderProfileInfo,\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          const nextIndex = Math.min(activeTabIndex + 1, tabs.length - 1);\n          setActiveTab(tabs[nextIndex].type);\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          const nextIndex = Math.max(0, activeTabIndex - 1);\n          setActiveTab(tabs[nextIndex].type);\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [activeTabIndex, tabs]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if ((!viewportIds && !botPreviewMedia) || (!gifts?.length && resultType === 'gifts')) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType,\n    activeTabIndex, activeCollectionId, selectedStoryAlbumId], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    const noContent = (!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById;\n    const noSpinner = isFirstTab && !canRenderContent;\n\n    return (\n      <div>\n        {renderCategories()}\n        {renderSpinnerOrContent(noContent, noSpinner)}\n      </div>\n    );\n  }\n\n  function renderCategories() {\n    if (resultType === 'gifts') {\n      return (\n        <div\n          className={buildClassName(\n            'contentCategoriesPanel',\n            !shouldShowContentPanel && 'hiddenPanel',\n            isGiftCollectionsShowed && 'noTransition',\n          )}\n        >\n          <StarGiftCollectionList peerId={chatId} />\n        </div>\n      );\n    }\n\n    if (resultType === 'stories') {\n      return (\n        <div\n          className={buildClassName(\n            'contentCategoriesPanel',\n            !shouldShowContentPanel && 'hiddenPanel',\n            isStoryAlbumsShowed && 'noTransition',\n          )}\n        >\n          <StoryAlbumList peerId={chatId} />\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSpinnerOrContentBase(noContent: boolean, noSpinner: boolean) {\n    if (noContent) {\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text={lang('ChatMemberListNoAccess')} />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? lang('ChatMemberListNoAccess') : lang('NoMembersFound');\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        case 'gif':\n          text = oldLang('lng_media_gif_empty');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    if (!messagesById) {\n      // A TypeScript assertion, should never be really reached\n      return;\n    }\n\n    const noTransition = resultType === 'gifts' ? isGiftCollectionsShowed\n      : resultType === 'stories' ? isStoryAlbumsShowed : false;\n    return (\n      <div\n        className={buildClassName(\n          `content ${resultType}-list`,\n          shouldShowContentPanel && 'showContentPanel',\n          noTransition && 'noTransition',\n        )}\n        dir={lang.isRtl && (resultType === 'media' || resultType === 'gif') ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' || resultType === 'gif' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              canAutoPlay={canAutoPlayGifs}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[]).map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              datetime={messagesById[id].date}\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutFiles={shouldWarnAboutFiles}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[]).map((id) => {\n            const global = getGlobal();\n            const message = messagesById[id];\n            if (!message) return undefined;\n\n            const media = selectMessageDownloadableMedia(global, message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={message}\n                senderTitle={getSenderName(oldLang, message, chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={message.date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !message.isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-channels\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: userId })}\n              >\n                <PrivateChatInfo\n                  userId={userId}\n                  avatarSize=\"medium\"\n                />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-bots\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getSavedGiftKey(gift)}\n                className=\"saved-gift\"\n                style={createVtnStyle(getSavedGiftKey(gift))}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const shouldUseTransitionForContent = resultType === 'stories' || resultType === 'gifts';\n  const contentTransitionKey = (() => {\n    if (resultType === 'stories') {\n      return selectedStoryAlbumId === 'all' ? 0 : selectedStoryAlbumId;\n    }\n    if (resultType === 'gifts') {\n      return activeCollectionId === 'all' ? 0 : activeCollectionId;\n    }\n    return 0;\n  })();\n\n  const handleOnStop = useLastCallback(() => {\n    setRestoreContentHeightKey(restoreContentHeightKey + 1);\n  });\n\n  function renderProfileInfo(peerId: string, isReady: boolean) {\n    return (\n      <div className=\"profile-info\">\n        <ProfileInfo\n          isExpanded={isProfileExpanded}\n          peerId={peerId}\n          canPlayVideo={isReady}\n          isForMonoforum={Boolean(monoforumChannel)}\n          onExpand={handleExpandProfile}\n        />\n        <ChatExtra\n          chatOrUserId={profileId}\n          isSavedDialog={isSavedDialog}\n          isOwnProfile={isOwnProfile}\n          style={createVtnStyle('chatExtra')}\n        />\n      </div>\n    );\n  }\n\n  function renderSpinnerOrContent(noContent: boolean, noSpinner: boolean) {\n    const baseContent = renderSpinnerOrContentBase(noContent, noSpinner);\n\n    const isSpinner = noContent && !noSpinner;\n\n    if (shouldUseTransitionForContent) {\n      return (\n        <Transition\n          className={`${resultType}-list`}\n          activeKey={contentTransitionKey}\n          name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n          shouldCleanup\n          shouldRestoreHeight\n          restoreHeightKey={restoreContentHeightKey}\n          contentSelector=\".Transition > .Transition_slide-active > .content\"\n        >\n          <Transition\n            activeKey={isSpinner ? 0 : 1}\n            name=\"fade\"\n            shouldCleanup\n            shouldRestoreHeight\n            restoreHeightKey={restoreContentHeightKey}\n            contentSelector=\".content\"\n            onStop={handleOnStop}\n          >\n            {baseContent}\n          </Transition>\n        </Transition>\n      );\n    }\n\n    return (\n      <Transition\n        activeKey={isSpinner ? 0 : 1}\n        name=\"fade\"\n        shouldCleanup\n        shouldRestoreHeight\n      >\n        {baseContent}\n      </Transition>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active`;\n  // eslint-disable-next-line @stylistic/max-len\n  const nestedSelector = `${activeListSelector} > .Transition > .Transition_slide-active > .Transition > .Transition_slide-active`;\n  const itemSelector = !shouldUseTransitionForContent\n    ? `${activeListSelector} .${resultType}-list > .scroll-item`\n    : `${nestedSelector} > .${resultType}-list > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(\n          monoforumChannel?.id || profileId,\n          isRightColumnShown && canRenderContent,\n        )\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n          style={createVtnStyle('sharedMedia')}\n        >\n          <Transition\n            ref={transitionRef}\n            name={shouldSkipTransitionRef.current ? 'none'\n              : resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStop={resetCacheBuster}\n            restoreHeightKey={shouldUseTransitionForContent ? restoreContentHeightKey : undefined}\n            contentSelector={shouldUseTransitionForContent\n              ? '.Transition > .Transition_slide-active > .Transition > .Transition_slide-active > .content'\n              : undefined}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={activeTabIndex} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): Complete<StateProps> => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const tabState = selectTabState(global);\n    const { chatInfo, savedGifts } = tabState;\n    const { isOwnProfile } = chatInfo;\n\n    const { animationLevel, shouldWarnAboutFiles } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedMessages = chatId === global.currentUserId && !isOwnProfile;\n    const isSavedDialog = !isOwnProfile ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && isGroup && !chat?.isMonoforum;\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedMessages\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedMessages;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const selectedStoryAlbumId = selectActiveStoriesCollectionId(global);\n    const storyIds = selectedStoryAlbumId !== 'all'\n      ? peerStories?.idsByAlbumId?.[selectedStoryAlbumId]?.ids\n      : peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedMessages;\n    const activeCollectionId = selectActiveGiftsCollectionId(global, chatId);\n    const peerGifts = savedGifts.collectionsByPeerId[chatId]?.[activeCollectionId];\n\n    const storyAlbums = global.stories.albumsByPeerId?.[chatId];\n    const giftCollections = global.starGiftCollections?.byPeerId?.[chatId];\n\n    const monoforumChannel = selectMonoforumChannel(global, chatId);\n    const isRestricted = chat && selectIsChatRestricted(global, chat.id);\n    const hasAvatar = Boolean(peer?.avatarPhotoId);\n\n    const canAutoPlayGifs = selectPerformanceSettingsValue(global, 'autoplayGifs');\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      storyAlbums,\n      giftCollections,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      selectedStoryAlbumId,\n      activeCollectionId,\n      giftsFilter: savedGifts.filter,\n      isChatProtected: chat?.isProtected,\n      chatInfo,\n      animationLevel,\n      shouldWarnAboutFiles,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSavedMessages,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      members: hasMembersTab ? members : undefined,\n      adminMembersById: hasMembersTab ? adminMembersById : undefined,\n      commonChatIds: commonChats?.ids,\n      monoforumChannel,\n      hasAvatar,\n      mainTab: peerFullInfo?.mainTab,\n      canUpdateMainTab: selectCanUpdateMainTab(global, chatId),\n      canAutoPlayGifs,\n    };\n  },\n)(Profile));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useTransitionFixes(\n  containerRef: ElementRef<HTMLDivElement>,\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.clientHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, SettingsScreens } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_MAC_OS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport { useVtn } from '../../hooks/animations/useVtn';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  isFocusList?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n  isOwnProfile?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  NewDiscussionGroup,\n  FocusList,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  isFocusList,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n  isOwnProfile,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n    openSettingsScreen,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n  const { createVtnStyle } = useVtn();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUpgradable: shouldIncludeUpgradableGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleEditProfile = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.EditProfile });\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : managementScreen === ManagementScreens.NewDiscussionGroup ? (\n      HeaderContent.NewDiscussionGroup\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : isFocusList ? (\n    HeaderContent.FocusList\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isOwnProfile) {\n      return lang('MyProfileHeader');\n    }\n\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.FocusList:\n        return <h3 className=\"title\">Priority</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: {\n                        shouldIncludeLimited: !shouldIncludeLimitedGifts,\n                      } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUpgradableGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: {\n                        shouldIncludeUpgradable: !shouldIncludeUpgradableGifts,\n                      } },\n                    )}\n                  >\n                    {lang('GiftFilterUpgradable')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.NewDiscussionGroup:\n        return <h3 className=\"title\">{oldLang('NewGroup')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n              {isOwnProfile && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditProfile}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div\n      className=\"RightHeader\"\n      data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}\n      style={createVtnStyle('rightHeader', true)}\n    >\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isOwnProfile = tabState.chatInfo?.isOwnProfile;\n    const isSavedMessages = chatId && !isOwnProfile ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n      isOwnProfile,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\",\"boostInfo\":\"BhoA3MT6\"};","import { memo, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { AnimationLevel, CustomPeer } from '../../../types';\n\nimport { GIVEAWAY_BOOST_PER_PREMIUM } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectIsGiveawayGiftsPurchaseAvailable, selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n  animationLevel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>\n            {lang(boost.isFromGiveaway\n              ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className={buildClassName(styles.boostInfo, 'chat-item-clickable')}\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months] || GIVEAWAY_IMG_LIST[3]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>\n                          {\n                            isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                              : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                          }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>\n                    {lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">\n                {lang(\n                  isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n                )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig.giveawayBoostsPerPremium;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n      animationLevel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { convertTonFromNanos } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { isGraph } from './helpers/isGraph';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index] as HTMLElement, {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph,\n        });\n\n        loadedCharts.current.add(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const tonAmount = availableBalance ? convertTonFromNanos(availableBalance.amount) : 0;\n    const [integerTonPart, decimalTonPart] = tonAmount.toFixed(4).split('.');\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n      && statistics?.usdRate ? (tonAmount * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? (\n              <span className={styles.decimalPart}>\n                .\n                {decimalTonPart}\n              </span>\n            ) : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ $\n          {integerUsdPart}\n          {decimalUsdPart ? (\n            <span className={styles.decimalUsdPart}>\n              .\n              {decimalUsdPart}\n            </span>\n          ) : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '@teact';\nimport { memo, useCallback, useEffect, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { selectFocusListMessages, selectTheme, selectThemeValues } from '../../global/selectors';\nimport { getMessageOriginalId } from '../../global/helpers/messages';\n\nimport buildStyle from '../../util/buildStyle';\n\nimport NothingFound from '../common/NothingFound';\nimport SenderGroupContainer from '../middle/message/SenderGroupContainer';\nimport Draggable from '../ui/Draggable';\n\nimport './FocusList.scss';\nimport Message from '../middle/message/Message';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  focusMessages?: ApiMessage[];\n  patternColor?: string;\n};\n\ntype FocusListState = {\n  orderedMessageKeys?: string[];\n  dragOrderMessageKeys?: string[];\n  draggedKey?: string;\n  messageHeights: Record<string, number>;\n};\n\nconst DEFAULT_MESSAGE_HEIGHT = 80;\n\nconst FocusList: FC<OwnProps & StateProps> = ({\n  isActive,\n  focusMessages,\n  patternColor,\n}) => {\n  const { focusMessage, replaceFocusList } = getActions();\n  \n  const [state, setState] = useState<FocusListState>({\n    messageHeights: {},\n  });\n\n  useEffect(() => {\n    if (focusMessages) {\n      const messageKeys = focusMessages.map(msg => `${msg.chatId}_${msg.id}`);\n      setState(prev => ({\n        ...prev,\n        orderedMessageKeys: messageKeys,\n        dragOrderMessageKeys: messageKeys,\n      }));\n    }\n  }, [focusMessages]);\n\n  const handleMessageRef = useCallback((el: HTMLDivElement | null | undefined, messageKey: string) => {\n    if (el && !state.messageHeights[messageKey]) {\n      const height = el.offsetHeight;\n      if (height > 0) {\n        setState(prev => ({\n          ...prev,\n          messageHeights: { ...prev.messageHeights, [messageKey]: height },\n        }));\n      }\n    }\n  }, []);\n\n  const handleMessageClick = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  const getMessageHeight = useCallback((messageKey: string) => {\n    return state.messageHeights[messageKey] || DEFAULT_MESSAGE_HEIGHT;\n  }, [state.messageHeights]);\n\n  const getTotalHeightUpTo = useCallback((messageKeys: string[], upToIndex: number) => {\n    let total = 0;\n    for (let i = 0; i < upToIndex; i++) {\n      total += getMessageHeight(messageKeys[i]);\n    }\n    return total;\n  }, [getMessageHeight]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    if (!state.orderedMessageKeys) return;\n\n    const messageKey = id as string;\n    const index = state.orderedMessageKeys.indexOf(messageKey);\n    \n    if (index === -1) return;\n\n    let targetIndex = index;\n    \n    if (translation.y > 0) {\n      let offset = translation.y;\n      for (let i = index + 1; i < state.orderedMessageKeys.length; i++) {\n        const nextHeight = getMessageHeight(state.orderedMessageKeys[i]);\n        if (offset > nextHeight / 2) {\n          offset -= nextHeight;\n          targetIndex = i;\n        } else {\n          break;\n        }\n      }\n    } else if (translation.y < 0) {\n      let offset = -translation.y;\n      for (let i = index - 1; i >= 0; i--) {\n        const prevHeight = getMessageHeight(state.orderedMessageKeys[i]);\n        if (offset > prevHeight / 2) {\n          offset -= prevHeight;\n          targetIndex = i;\n        } else {\n          break;\n        }\n      }\n    }\n\n    const dragOrderKeys = state.orderedMessageKeys.filter(key => key !== messageKey);\n    dragOrderKeys.splice(targetIndex, 0, messageKey);\n    \n    setState(current => ({\n      ...current,\n      draggedKey: messageKey,\n      dragOrderMessageKeys: dragOrderKeys,\n    }));\n  }, [getMessageHeight, state.orderedMessageKeys]);\n\n  const handleDragEnd = useCallback(() => {\n    if (state.dragOrderMessageKeys) {\n      setState(current => ({\n        ...current,\n        draggedKey: undefined,\n        dragOrderMessageKeys: current.dragOrderMessageKeys,\n        orderedMessageKeys: current.dragOrderMessageKeys,\n      }));\n      replaceFocusList({ messageKeys: state.dragOrderMessageKeys });\n    }\n  }, [replaceFocusList, state.dragOrderMessageKeys]);\n\n  if (!isActive || !focusMessages || !state.dragOrderMessageKeys) {\n    return undefined;\n  }\n  \n  const minHeight = useMemo(\n    () => focusMessages\n      .map(msg => `${msg.chatId}_${msg.id}`)\n      .reduce((sum, key) => sum + getMessageHeight(key), 0),\n    [focusMessages, getMessageHeight],\n  );\n\n  return (\n    <div className=\"FocusList\" style={buildStyle(`--pattern-color: ${patternColor}`)}>\n      <div className=\"FocusList__content custom-scroll\">\n        {focusMessages.length === 0 ? (\n          <div className=\"FocusList__empty\">\n            <NothingFound\n              text=\"No messages in Priority list\"\n              description=\"Add important messages to your Priority list for quick access\"\n            />\n          </div>\n        ) : (\n          <div className=\"FocusList__messages\" style={`min-height: ${minHeight}px`}>\n            {focusMessages.map((message, i) => {\n              const messageKey = `${message.chatId}_${message.id}`;\n              const messageId = getMessageOriginalId(message);\n              const withAvatar = true;\n              \n              const isDragged = state.draggedKey === messageKey;\n              const originalIndex = state.orderedMessageKeys?.indexOf(messageKey) ?? i;\n              const currentIndex = state.dragOrderMessageKeys?.indexOf(messageKey) ?? i;\n              \n              const draggedTop = getTotalHeightUpTo(state.orderedMessageKeys || [], originalIndex);\n              const top = getTotalHeightUpTo(state.dragOrderMessageKeys || [], currentIndex);\n\n              return (\n                <Draggable\n                  key={messageKey}\n                  id={messageKey}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  isDisabled={!isActive}\n                >\n                  <div\n                    ref={(el) => handleMessageRef(el, messageKey)}\n                    className=\"FocusList__message-item\"\n                    onClick={() => handleMessageClick(message)}\n                  >\n                    <SenderGroupContainer\n                      key={`sender-${messageId}`}\n                      id={`focus-message-group-${messageId}`}\n                      message={message}\n                      withAvatar={withAvatar}\n                      appearanceOrder={-1}\n                      isInFocusList\n                    >\n                      <Message\n                        message={message}\n                        withAvatar={withAvatar}\n                        withSenderName\n                        threadId={MAIN_THREAD_ID}\n                        messageListType='thread'\n                        noComments\n                        noReplies\n                        noReactions\n                        appearAsNotOwn\n                        appearanceOrder={-1}\n                        isJustAdded={false}\n                        isFirstInGroup\n                        isLastInGroup\n                        isFirstInDocumentGroup\n                        isLastInDocumentGroup\n                        isLastInList={currentIndex === focusMessages.length - 1}\n                        isInFocusList\n                      />\n                    </SenderGroupContainer>\n                  </div>\n                </Draggable>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    \n    return {\n      focusMessages: selectFocusListMessages(global),\n      patternColor,\n    };\n  },\n)(FocusList));\n","import type { FC } from '@teact';\nimport { memo, useEffect, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { AnimationLevel, ThreadId } from '../../types';\nimport { ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent } from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useScrollNotch from '../../hooks/useScrollNotch.ts';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport FocusList from './FocusList';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isChatSelected: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n  isOwnProfile?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n  isOwnProfile,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n    toggleFocusList,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isFocusList = contentKey === RightColumnContent.FocusList;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useScrollNotch({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.NewDiscussionGroup:\n            setManagementScreen(ManagementScreens.Discussion);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n      case RightColumnContent.FocusList:\n        toggleFocusList({ force: false });\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}_${Boolean(isOwnProfile)}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.FocusList:\n        return <FocusList isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={(!isChatSelected && !isFocusList) ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          isFocusList={isFocusList}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={resolveTransitionName('layers', animationLevel, shouldSkipTransition || shouldSkipHistoryAnimations)}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): Complete<StateProps> => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { animationLevel } = selectSharedSettings(global);\n    const {\n      management, shouldSkipHistoryAnimations, shouldCloseRightColumn, chatInfo,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isOwnProfile = chatInfo?.isOwnProfile;\n    const isSavedMessages = chatId && !isOwnProfile ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n      isOwnProfile,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): Complete<StateProps> => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\r\nimport { useState, useCallback, useEffect } from '../../../lib/teact/teact';\r\nimport { getGlobal, getActions } from '../../../global';\r\n\r\nimport { useWorkspaceStorage } from '../../../hooks/useWorkspaceStorage';\r\nimport { Workspace } from '../../../types';\r\nimport Button from '../../ui/Button';\r\nimport InputText from '../../ui/InputText';\r\nimport Checkbox from '../../ui/Checkbox';\r\nimport Icon from '../../common/icons/Icon';\r\nimport Modal from '../../ui/Modal';\r\nimport useLang from '../../../hooks/useLang';\r\n\r\nimport './WorkspaceModal.scss';\r\n\r\ntype OwnProps = {\r\n  isOpen: boolean;\r\n  workspaceId?: string;\r\n};\r\n\r\nconst WorkspaceModal: FC<OwnProps> = ({\r\n  isOpen,\r\n  workspaceId,\r\n}) => {\r\n  const global = getGlobal();\r\n  const { setActiveChatFolder, closeWorkspaceCreator } = getActions();\r\n\r\n  const chatFoldersById = global.chatFolders.byId;\r\n  const orderedFolderIds = global.chatFolders.orderedIds;\r\n  const folders = orderedFolderIds ? orderedFolderIds.map((id) => chatFoldersById[id]).filter(Boolean) : [];\r\n\r\n  const [workspaceName, setWorkspaceName] = useState('');\r\n  const [selectedFolderIds, setSelectedFolderIds] = useState<number[]>([]);\r\n  const { savedWorkspaces, setSavedWorkspaces, setCurrentWorkspaceId } = useWorkspaceStorage();\r\n\r\n  const lang = useLang();\r\n  const currentWorkspaceId = workspaceId;\r\n\r\n  useEffect(() => {\r\n    if (currentWorkspaceId) {\r\n      const workspace = savedWorkspaces.find(w => w.id === currentWorkspaceId);\r\n      if (workspace) {\r\n        setWorkspaceName(workspace.name);\r\n        setSelectedFolderIds(workspace.foldersIds || []);\r\n      }\r\n    } else {\r\n      setWorkspaceName('');\r\n      setSelectedFolderIds([]);\r\n    }\r\n  }, [currentWorkspaceId, savedWorkspaces]);\r\n\r\n  const isFormValid = selectedFolderIds.length > 0 && workspaceName.trim() !== '';\r\n\r\n  const handleSubmit = useCallback(e => {\r\n    e.preventDefault();\r\n    const trimmedName = workspaceName.trim();\r\n\r\n    if (isFormValid) {\r\n      if (currentWorkspaceId) {\r\n        setSavedWorkspaces(\r\n          savedWorkspaces.map(w =>\r\n            w.id === currentWorkspaceId ? { ...w, name: trimmedName, foldersIds: selectedFolderIds } : w\r\n          )\r\n        );\r\n      } else {\r\n        const newWorkspace: Workspace = {\r\n          id: Date.now().toString(),\r\n          name: trimmedName,\r\n          foldersIds: selectedFolderIds,\r\n        };\r\n        setSavedWorkspaces([...savedWorkspaces, newWorkspace]);\r\n        setCurrentWorkspaceId(newWorkspace.id);\r\n      }\r\n\r\n      setActiveChatFolder({ activeChatFolder: 0 }, { forceOnHeavyAnimation: true });\r\n      closeWorkspaceCreator();\r\n    }\r\n  }, [workspaceName, selectedFolderIds, currentWorkspaceId, setSavedWorkspaces, savedWorkspaces, isFormValid, setActiveChatFolder, closeWorkspaceCreator]);\r\n\r\n  const handleNameChange = useCallback(e => {\r\n    setWorkspaceName(e.target.value);\r\n  }, []);\r\n\r\n  const handleFolderSelect = useCallback((folderId: number) => (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSelectedFolderIds(prevIds =>\r\n      prevIds.includes(folderId)\r\n        ? prevIds.filter(id => id !== folderId)\r\n        : [...prevIds, folderId]\r\n    );\r\n  }, []);\r\n\r\n  const handleDeleteWorkspace = useCallback(() => {\r\n    if (currentWorkspaceId) {\r\n      setSavedWorkspaces(savedWorkspaces.filter(w => w.id !== currentWorkspaceId));\r\n      setCurrentWorkspaceId('0');\r\n      closeWorkspaceCreator();\r\n    }\r\n  }, [currentWorkspaceId, savedWorkspaces, setSavedWorkspaces, setCurrentWorkspaceId, closeWorkspaceCreator]);\r\n\r\n  const handleClose = useCallback(() => {\r\n    closeWorkspaceCreator();\r\n  }, [closeWorkspaceCreator]);\r\n\r\n  const renderHeader = useCallback(() => {\r\n    const modalTitle = currentWorkspaceId ? 'Edit Workspace' : 'Create Workspace';\r\n    return (\r\n      <div className=\"modal-header-condensed\">\r\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Cancel')} onClick={handleClose}>\r\n          <Icon name=\"close\" />\r\n        </Button>\r\n        <div className=\"modal-title\">{modalTitle}</div>\r\n        <Button\r\n          color=\"primary\"\r\n          size=\"smaller\"\r\n          className=\"modal-action-button\"\r\n          onClick={handleSubmit}\r\n          disabled={!isFormValid}\r\n        >\r\n          {currentWorkspaceId ? 'Save' : 'Create'}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }, [currentWorkspaceId, isFormValid, handleSubmit, handleClose, lang]);\r\n\r\n  return (\r\n    <Modal isOpen={isOpen} onClose={handleClose} header={renderHeader()} className=\"WorkspaceModal\">\r\n      <div className=\"workspace-form\">\r\n        <InputText\r\n          id=\"workspace-name\"\r\n          value={workspaceName}\r\n          onChange={handleNameChange}\r\n          label=\"Workspace name\"\r\n        />\r\n        \r\n        <div className=\"workspace-folder-selection\">\r\n          <h3 className=\"workspace-folder-selection-title\">Select folders:</h3>\r\n          {folders.map((folder) => (\r\n            <Checkbox\r\n              key={folder.id}\r\n              label={folder.title.text}\r\n              checked={selectedFolderIds.includes(folder.id)}\r\n              onChange={handleFolderSelect(folder.id)}\r\n            />\r\n          ))}\r\n        </div>\r\n\r\n        {currentWorkspaceId && (\r\n          <Button color=\"danger\" onClick={handleDeleteWorkspace}>Delete workspace</Button>\r\n        )}\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default WorkspaceModal;","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line @stylistic/max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => pick(selectTabState(global), ['confetti']) as Complete<StateProps>,\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_ANDROID, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useTauriEvent from '../../hooks/tauri/useTauriEvent';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport WorkspaceModal from './workspace/WorkspaceModal';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isFocusListOpen?: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n  isWorkspaceCreatorOpen?: boolean;\n  editingWorkspaceId?: string;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isFocusListOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n  isWorkspaceCreatorOpen,\n  editingWorkspaceId,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadTonGifts,\n    loadStarGifts,\n    loadMyCollectibleGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n    loadContentSettings,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const containerRef = useRef<HTMLDivElement>();\n  const leftColumnRef = useRef<HTMLDivElement>();\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline({ isOnline: true });\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadContentSettings();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadTonGifts();\n      loadStarGifts();\n      loadMyCollectibleGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useTauriEvent<string>('deeplink', (event) => {\n    try {\n      const url = event.payload || '';\n      const decodedUrl = decodeURIComponent(url);\n      processDeepLink(decodedUrl);\n    } catch (e) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('Failed to process deep link', e);\n      }\n    }\n  });\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n    isFocusListOpen && 'focus-list-open',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, IS_TAURI);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n      <WorkspaceModal \n        isOpen={Boolean(isWorkspaceCreatorOpen)} \n        workspaceId={editingWorkspaceId}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): Complete<StateProps> => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n      || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isFocusListOpen: selectTabState(global).isFocusListShown,\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n      isWorkspaceCreatorOpen: global.workspaces.isCreatorOpen,\n      editingWorkspaceId: global.workspaces.editingWorkspaceId,\n    };\n  },\n)(Main));\n","import type { Event } from '@tauri-apps/api/event';\nimport { useEffect } from '../../lib/teact/teact';\n\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\n\nexport default function useTauriEvent<T>(name: string, callback: (event: Event<T>) => void) {\n  return useEffect(() => {\n    if (!IS_TAURI) {\n      return undefined;\n    }\n\n    let removeListener: VoidFunction | undefined;\n\n    const setUpListener = async () => {\n      const { listen } = await import('@tauri-apps/api/event');\n      removeListener = await listen<T>(name, (event) => {\n        callback(event);\n      });\n    };\n\n    setUpListener().catch((error) => {\n      // eslint-disable-next-line no-console\n      console.error(`Could not set up window event listener. ${error}`);\n    });\n\n    return () => {\n      removeListener?.();\n    };\n  }, [name, callback]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>\n          {' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          onClearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n"],"names":["memo","GiftMenuItems","peerId","canManage","gift","typeGift","currentUserEmojiStatus","collectibleEmojiStatuses","showNotification","openChatWithDraft","openGiftTransferModal","openGiftResalePriceComposerModal","openGiftStatusInfoModal","setEmojiStatus","toggleSavedGiftPinned","changeGiftVisibility","updateStarGiftPrice","closeGiftInfoModal","getActions","lang","useLang","oldLang","useOldLang","isSavedGift","savedGift","undefined","starGiftUniqueSlug","type","slug","starGiftUniqueLink","useMemo","TME_LINK_PREFIX","userCollectibleStatus","find","status","currenUniqueEmojiStatusSlug","isGiftUnique","canTakeOff","canWear","giftResalePrice","resellPrice","hasPinOptions","isUnsaved","handleTriggerVisibility","useLastCallback","inputGift","shouldUnsave","handleCopyLink","copyTextToClipboard","message","handleLinkShare","text","handleTransfer","canTransferAt","getServerTime","key","variables","date","formatDateAtTime","handleSell","canResellAt","handleUnsell","price","currency","STARS_CURRENCY_CODE","amount","nanos","icon","title","number","handleWear","emojiStatus","handleTakeOff","documentId","DEFAULT_STATUS_ICON_ID","handleTogglePin","_jsxs","_Fragment","children","_jsx","MenuItem","isPinned","onClick","Boolean","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","isNew","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","selectThreadIdFromMessage","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","webPage","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","replaceWebPage","reportDeliveryUntilDate","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","isFromNew","apiUpdate","keys","selectChatScheduledMessages","map","clearMessageTranslation","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","draftDate","callApi","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","peer","selectPeer","isApiPeerChat","selectIsMonoforumAdmin","paidMessagesStars","fullInfo","selectUserFullInfo","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","selectIsChatRestricted","viewportIds","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","draftSuggestedPostInfo","suggestedPostInfo","messageReplyInfo","suggestedPostPrice","suggestedPostCurrency","suggestedPostAmount","stars","balance","openStarsBalanceModal","topup","balanceNeeded","TON_CURRENCY_CODE","ton","suggestedMessage","suggestedMedia","noWebPage","selectNoWebPage","isInvertedMedia","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","pluralValue","titleKey","formatStarsAsText","getTranslationFn","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","todo","cancelApiProgress","currentDraft","isMonoforum","effectId","shouldKeepReply","shouldKeepSuggestedPost","currentReplyInfo","updatedReplyInfo","updatedSuggestedPostInfo","clearDraft","monoforumPeerId","scheduleDate","messageSuggestedPost","futureMin","appConfig","starsSuggestedPostFutureMin","validScheduleDate","updateDraftSuggestedPostInfo","insertingPeerIdMention","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","removeFromFocusList","notifications","dismissAction","Array","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectIsCurrentUserFrozen","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","webPagePreviewId","completedIds","incompletedIds","currentTodo","currentCompletions","completions","currentCompletionIds","c","itemId","newCompletions","completedBy","completedAt","finalCompletions","newContent","items","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","selectCustomEmoji","customEmoji","customEmojis","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","neededAmount","reject","rejectComment","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","linkContext","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","isWhitelisted","whitelistedDomains","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","quoteOffset","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","tonGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","searchResult","sponsoredResult","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","publicPosts","previousSearchFlood","searchFlood","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","queryIsFree","remains","starsAmount","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","shouldReuseParams","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getMessageContentIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","accountDaysTtl","closeDeleteAccountModal","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","chatRefundModal","starsToRefund","shouldSharePhoneNumber","isContact","phoneNumber","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","buttonType","initDraftFromSuggestedMessage","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","currentInlineBotSettings","newResults","isGallery","searchInlineBot","botSender","getMainUsername","queryId","allowPaidStars","resultId","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","openFrozenAccountModal","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","selectSharedSettings","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","botUrl","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","isTon","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","handlePaymentFormError","formPrice","totalAmount","sendStarPaymentForm","directInfo","formId","openPriceConfirmModal","originalAmount","newAmount","hasErrorKey","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","starsPayment","shouldHideName","shouldUpgrade","giftId","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","lockedUntilDate","canSend","openLockedGiftModalInfo","untilDate","forUserId","selectedResaleGift","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","inputSavedGift","reloadPeerSavedGifts","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","closeGiftWithdrawModal","currentStarsStatus","needsTopupOptions","topupOptions","starsStatus","tonStatus","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","updateStarsBalance","isInbound","isOutbound","allStarGiftIds","resaleStarGiftIds","availabilityResale","starGifts","idsByCategory","resale","myCollectibles","shouldRefresh","currentMyCollectibleGifts","myCollectibleGifts","localNextOffset","sortType","shouldIncludeUnique","shouldIncludeUnlimited","shouldIncludeUpgradable","shouldIncludeLimited","shouldIncludeDisplayed","shouldIncludeHidden","buildCollectionByCallback","resaleGifts","loadResaleGifts","isAllLoaded","attributesHash","RESALE_GIFTS_LIMIT","currentGifts","newGifts","currentUpdateIteration","updateIteration","attributes","counters","DEFAULT_RESALE_GIFTS_FILTER_OPTIONS","fetchingCollectionId","selectActiveGiftsCollectionId","selectPeerCollectionSavedGifts","fetchingFilter","selectGiftProfileFilter","collectionId","currentFilter","currentCollectionId","replacePeerSavedGifts","activeCollectionId","loadPeerSavedGifts","loadMyCollectibleGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","savedGifts","collectionsByPeerId","g","areInputSavedGiftsEqual","samples","giftUpgradeModal","sampleAttributes","selectPeerSavedGifts","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","updatePeerStarGiftCollections","collections","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","tags","tag","getReactionKey","byKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","messageInteractions","recentPosts","post","storyInteractions","loadMessagesById","msgId","loadPeerStoriesByIds","storyIds","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","lastReadStoryId","selectedAlbumId","selectActiveStoriesCollectionId","albumData","idsByAlbumId","albumId","updatePeerStoriesFullyLoaded","profileIds","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","albums","albumsByPeerId","selectedStoryAlbumId","loadPeerProfileStories","processChatInfoState","isSameMessageList","profileTab","forceScrollProfileTab","isOwnProfile","currentChatInfo","chatInfo","newProfileTab","newForceScrollProfileTab","newIsOwnProfile","execAfterActions","lastIsChatInfoShown","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","rest","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","addTabStateResetterAction","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","isMuted","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","isRemindMe","groupedMessageIds","isRemindMeCalendarShown","selectedMessages","forwardableMessageIds","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","selectMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","forNewTask","todoListModal","CHANGELOG_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","suggestMessageModal","suggestedPostApprovalModal","isSchedule","deleteMessageModal","additionalInfo","canReport","sponsorInfo","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","quickPreview","currentContent","fetchingStatus","GlobalSearchContent","BotApps","PublicPosts","checkSearchPostsFlood","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","isFrozenAccountModalOpen","deleteAccountModal","selfDestructAccountDays","isAgeVerificationModalOpen","newContact","isByPhoneNumber","profileRatingModal","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","IS_TAURI","tauri","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","willChatInfoBeShown","isActive","screen","nextScreen","getIsTablet","messageLists","shouldScrollTo","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","isSavedMessages","isChatWithBot","selectIsChatWithBot","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","attachmentSettings","shouldSaveAttachmentsCompression","defaultAttachmentCompression","shouldCompress","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","defaultTitle","PAGE_TITLE_TAURI","PAGE_TITLE","INACTIVE_MARKER","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","isOnline","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","priceConfirmModal","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","selectTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","openSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","getPromiseActions","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","lockedGiftModal","giftResalePriceComposerModal","closeGiftInfoValueModal","openGiftModal","resetResaleGifts","giftInfoValueModal","valueInfo","giftStatusInfoModal","giftTransferModal","giftTransferConfirmModal","activeCollectionByPeerId","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerId","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","isFocusListShown","lastIsFocusListShown","currentMessageIds","focusList","messageKeys","INVALIDATE_FULL_CHAT_FIELDS","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","invalidateFullInfo","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","loadPinnedDialogs","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","commands","threadInfos","polls","webPages","addUsers","addChats","webpageType","updateFullWebPage","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","selectPhoneCallUser","notifyAboutCall","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","updateWorkspaceSettings","workspaces","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","isCreatorOpen","editingWorkspaceId","workspaceId","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isAccountFrozen","isMenuOpen","setIsMenuOpen","useState","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","isFocusMode","animationLevel","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","scrollToTop","useDerivedState","activeList","scrollTo","top","behavior","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","currentWorkspaceId","savedWorkspaces","excludeOtherWorkspaces","useWorkspaceStorage","everythingWorkspace","foldersIds","currentWorkspace","workspace","displayedFolders","w","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","unreadChatIds","folderCountersById","adjustedFolderCountersById","folderFromWorkspaces","adjusted","allFolderUnreadChats","filteredUnreadChats","getOrderedIds","chatsCount","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","Folders","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","badgeCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","shouldRenderFolders","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","Transition","resolveTransitionName","activeKey","renderCount","activeFolder","isFolder","ChatList","folderType","isMainList","canDisplayArchive","withTags","ContactList","ConnectionStatusOverlay","connectionStatus","connectionStatusText","Spinner","AccountMenuItems","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","currentAccountInfo","account","shouldShowLimit","handleLimitClick","newAccountUrl","freeIndex","getAccountSlotUrl","isSameServer","isTest","mockUser","isCustomPeer","peerColorId","emojiStatusId","hasSeparator","customIcon","Avatar","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","emojiStatusSize","MenuSeparator","rel","attachBots","selectTheme","accountsTotalLimit","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSharedSettingOption","updatePerformanceSettings","setFocusMode","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","archivedUnreadChatsCount","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MED","wasAnimationLevelSetManually","handleChangelogClick","BETA_CHANGELOG_URL","handleFocusModeToggle","IS_MULTIACCOUNT_SUPPORTED","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","StatusPickerMenu","collectibleStatuses","StatusButton","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","collectibleEmojiStatus","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","GiftEffectWrapper","withSparkles","sparklesClassName","sparklesColor","textColor","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","Contacts","selectedSearchDate","formatDateToString","connectionStatusPosition","useConnectionStatus","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","handleSearchEnter","GlobalSearch","isSearchRelevant","isSearchFocused","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","fullVersion","APP_NAME","IS_MAC_OS","DropdownMenu","trigger","footer","forceOpen","transformOriginX","onTransitionEnd","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","onEnter","ShowTransition","isCustom","WorkspaceAvatar","isRectangular","WorkspaceManager","openWorkspaceCreator","openWorkspaceEditor","setCurrentWorkspaceId","setExcludeOtherWorkspaces","selectedWorkspace","handleWorkspaceSelect","handleCreateWorkspace","handleSwitcherChange","renderTrigger","savedMesagesUnreadCount","SavedMessages","CustomButtons","FocusListButton","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onTopicSearch","openLeftColumnContent","isNewChatButtonShown","setIsNewChatButtonShown","tauriUpdate","setTauriUpdate","isTauriUpdateDownloading","setIsTauriUpdateDownloading","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","contentKey","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","downloadAndInstall","relaunch","location","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","checkTauriUpdate","checkUpdate","useInterval","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","leftColumn","nextFoldersAction","isChatOpen","selectIsForumPanelOpen","isFirstChatFolderActive","isArchivedStoryRibbonShown","settingsScreen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","blur","EditProfile","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","prevSettingsScreenRef","useStateRef","usePrevious","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","withSwipeControl","currentScreen","isChannel","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","viewportPinnedIds","lastFocusedId","clampIndex","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","styles","handleClick","MessageSelectToolbar","LOGO_DIMENSIONS","height","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","renderAudio","audio","performer","fileName","renderText","renderVoice","senderName","mediaDuration","selectMessageMediaDuration","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","mediaHash","useMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","artist","album","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","shouldForceOpen","useHeaderPane","isDisabled","onStateChange","handleBeforeContextMenu","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","volumeIcon","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","selectForwardedSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isGif","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","alt","draggable","playsInline","disablePictureInPicture","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","currentTransitionKey","MiddleHeader","isComments","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","openSavedDialog","isBackButtonActive","isDesktop","isTablet","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleOpenChat","target","closest","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","threshold","handleOpenSavedMessages","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","prevTransitionKey","usePreviousDeprecated","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","displayChatId","linkedMonoforumId","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","onEmojiStatusClick","GroupChatInfo","withMonoforumStatus","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","selectSponsoredMessage","isBot","BotAdPane","viewSponsored","clickSponsored","openAboutAdsModal","renderingSponsoredMessage","withResizeObserver","contextMenuAnchor","handleAboutClick","peerColor","getApiPeerColorClass","BadgeButton","SponsoredMessageContextMenuContainer","anchor","triggerRef","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canAddContact","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","Checkbox","onCheck","chargedPaidMessageStars","PaidMessageChargePane","openChatRefundModal","handleRefund","formatStarsAsIcon","asFont","messageStarIcon","containerClassName","messageStars","withMarkdown","withNodes","root","noForcedUpperCase","pill","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","withRightColumnAnimation","selectCanAnimateRightColumn","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","useSignal","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isFirstRenderRef","useEffectOnce","useSignalEffect","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","userName","handleOpenPremiumModal","Link","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","selectThemeValues","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","isMonoforumAdmin","shouldBlockSendInMonoforum","canShowOpenChatButton","ANONYMOUS_USER_ID","isCreator","isUserRightBanned","getHasAdminRight","userFull","isContactRequirePremium","freezeAppealChat","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","useDerivedSignal","pinnedLength","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","shouldCancelWaiting","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","isReady","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","currentTarget","useIsReady","IS_ANDROID","visualViewport","handleResize","isFixNeeded","documentElement","clientHeight","requestMutation","classList","toggle","requestMeasure","offsetTop","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","remove","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","dataTransfer","shouldDrawQuick","IS_SAFARI","item","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","backgroundStyles","withTransition","customBgImage","customBgColor","blurred","withRightColumn","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","FrozenAccountPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","buildStyle","onDoubleClick","onDragEnter","isBlockingAnimation","onStop","MessageList","onScrollDownToggle","onNotchToggle","withBottomShift","withDefaultBg","onIntersectPinnedMessage","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","onUnpin","teactFastList","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","SuggestMessageModal","SuggestedPostApprovalModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","GiftInfoValueModal","GiftLockedModal","GiftResalePriceComposerModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","GiftTransferConfirmModal","ChatRefundModal","PriceConfirmModalAsync","PriceConfirmModal","FrozenAccountModal","DeleteAccountModal","AgeVerificationModal","ProfileRatingModal","QuickPreviewModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filterPeersByQuery","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","VTTypes","hierarchy","constructor","types","this","with","getTypes","VTT_RIGHT_COLUMN","VTT_RIGHT_PROFILE_AVATAR","VTT_RIGHT_PROFILE_EXPAND","VTT_RIGHT_PROFILE_COLLAPSE","VTT_PROFILE_GIFTS","OVERSCROLL_CONTAINER_CLASS","NO_TOUCH_CONTAINER_CLASS","initialActiveScrollContext","lastDeltas","fill","lastAverageDelta","isStartedAtTop","resetStartTopAt","timeout","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","fromPeer","hasAdminRights","SavedGift","observeIntersection","stickerRef","isHover","markHover","unmarkHover","totalIssued","getTotalGiftAvailability","starGiftUnique","resaleTonOnly","ribbonText","total","ribbonColor","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","avatarPeer","CUSTOM_PEER_HIDDEN","getStickerFromGift","giftAttributes","getGiftAttributes","backdrop","pattern","radialPatternBackdrop","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","patternSize","ringsCount","ovalFactor","StickerView","shouldLoop","shouldPreloadPreview","observeIntersectionForPlaying","observeIntersectionForLoading","nonInteractive","withSparkleEffect","noSparkleAnimation","formatTonAsIcon","shouldConvertFromNanos","GiftRibbon","PreviewMedia","idPrefix","isProtected","isIntersecting","useIsIntersecting","useMediaTransitionDeprecated","decoding","stopEvent","formatMediaDuration","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","isDense","imageHash","getStoryMediaHash","thumbUrl","dataUri","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","AnimatedTabItem","AnimatedIconFromSticker","forcePreview","AnimatedTabList","selectedItemId","onItemSelect","clipPathContainerRef","selectedIndex","setClipPath","shouldAnimate","useHorizontalScroll","updateClipPath","clipPathContainer","childNodes","offsetLeft","containerWidth","left","toFixed","right","useResizeObserver","starGiftCollections","StarGiftCollectionList","updateSelectedGiftCollection","resetSelectedGiftCollection","handleItemSelect","collection","StoryAlbumList","selectStoryAlbum","resetSelectedStoryAlbum","TABS","VALID_CHANNEL_MAIN_TAB_TYPES","VALID_USER_MAIN_TAB_TYPES","SHARED_MEDIA_TYPES","shouldWarnAboutFiles","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","activeDownloads","selectActiveDownloads","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","commonChatsCount","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","storyAlbums","giftCollections","monoforumChannel","selectMonoforumChannel","hasAvatar","canAutoPlayGifs","giftsFilter","isChatProtected","similarChannels","similarBots","limitSimilarPeers","commonChatIds","mainTab","canUpdateMainTab","selectCanUpdateMainTab","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","loadStarGiftCollections","loadStoryAlbums","changeProfileTab","setMainProfileTab","shouldSkipTransitionRef","deletingUserId","setDeletingUserId","isGiftTransitionEnabled","enableGiftTransition","disableGiftTransition","profileId","isGeneralSavedMessages","isProfileExpanded","expandProfile","collapseProfile","restoreContentHeightKey","setRestoreContentHeightKey","validMainTabTypes","mainTabIndex","tab","newFirstTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","prevMainTab","renderingGifts","setRenderingGifts","startViewTransition","useViewTransition","createVtnStyle","useVtn","giftIds","getSavedGiftKey","activeTabIndex","useSyncEffectWithPrevDeps","prevProfileTab","prevActiveTabIndex","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","handleLoadMoreMembers","prevGifts","prevGiftIds","newGiftIds","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","gifViewportIds","getMoreGifs","noProfileInfoForGifs","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","shouldRenderProfileInfo","isFirstTab","isGiftCollectionsShowed","markGiftCollectionsShowed","unmarkGiftCollectionsShowed","isStoryAlbumsShowed","markStoryAlbumsShowed","unmarkStoryAlbums","hasGiftsCollections","hasStoryAlbums","shouldShowContentPanel","usePeerStoriesPolling","handleStopAutoScrollToTabs","handleExpandProfile","handleCollapseProfile","handleScroll","prevTabType","tabsEl","scrollTop","forceDuration","prevProfileState","tabListEl","maxDistance","offsetHeight","determineProfileState","useProfileState","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","handleResetGiftsFilter","renderingDelay","isOverscrolled","onOverscroll","getState","setState","activeScrollRef","transitionTimeoutRef","touchStartYRef","triggerOverscroll","triggerReset","scheduleResetActiveScroll","handleWheel","defaultPrevented","deltaY","activeScroll","isStarting","at","shift","currentAverageDelta","isNewInput","abs","handleTouchStart","touches","clientY","handleTouchMove","handleTouchEnd","passive","useTopOverscroll","nextIndex","SLIDE_TRANSITION_DURATION","canRenderContent","shouldUseTransitionForContent","contentTransitionKey","handleOnStop","renderSpinnerOrContent","noContent","noSpinner","baseContent","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","SearchingDuck","noLoop","noTransition","Media","canAutoPlay","MediaStory","getMessageDocument","datetime","smaller","isDownloading","getIsDownloading","onDateClick","WebLink","onMessageClick","Audio","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","renderSpinnerOrContentBase","isSpinner","shouldRestoreHeight","restoreHeightKey","contentSelector","activeListSelector","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","onScroll","ProfileInfo","isExpanded","canPlayVideo","isForMonoforum","onExpand","ChatExtra","chatOrUserId","renderContent","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","RightHeader","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","isFocusList","managementScreen","onScreenSelect","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUpgradableGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","handleEditProfile","setShouldSkipTransition","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","NewDiscussionGroup","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","FocusList","renderingContentKey","PrimaryLinkMenuButton","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","avatarIcon","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","isLoaded","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","initialTab","renderingActiveTab","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","boostInfo","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","errorCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","isGraph","isAsync","graphType","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","tonAmount","convertTonFromNanos","integerTonPart","decimalTonPart","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","focusMessages","selectFocusListMessages","replaceFocusList","messageHeights","msg","prev","orderedMessageKeys","dragOrderMessageKeys","handleMessageRef","getMessageHeight","getTotalHeightUpTo","upToIndex","handleDrag","translation","targetIndex","nextHeight","prevHeight","dragOrderKeys","draggedKey","handleDragEnd","sum","getMessageOriginalId","withAvatar","isDragged","originalIndex","draggedTop","Draggable","onDrag","onDragEnd","SenderGroupContainer","appearanceOrder","isInFocusList","Message","withSenderName","noComments","noReplies","noReactions","appearAsNotOwn","isJustAdded","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","isLastInList","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","toggleFocusList","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useScrollNotch","selector","close","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","useLayoutEffectWithPrevDeps","prevChatId","prevThreadId","onChatMemberSelect","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","runDebounced","useRunDebounced","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","focus","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","WorkspaceModal","closeWorkspaceCreator","workspaceName","setWorkspaceName","selectedFolderIds","setSelectedFolderIds","setSavedWorkspaces","isFormValid","handleSubmit","trimmedName","newWorkspace","handleNameChange","handleFolderSelect","prevIds","handleDeleteWorkspace","renderHeader","modalTitle","header","InputText","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","diff","newPos","newVelocity","newFlicker","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerHeight","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","xmlns","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isFocusListOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","isAppConfigLoaded","isWorkspaceCreatorOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadTonGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBotFreezeAppeal","loadAllStories","loadAllHiddenStories","loadContentSettings","loadBundle","callback","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","decodedUrl","removeListener","listen","setUpListener","parsedLocationHash","parseLocationHash","parentNode","childElementCount","addExtraClass","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","beginHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBackgroundMode","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","onClearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit"],"sourceRoot":""}
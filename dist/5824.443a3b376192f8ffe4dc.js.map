{"version":3,"file":"5824.443a3b376192f8ffe4dc.js","mappings":"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gBAC/BnuB,mBACAuqB,qBACAC,0BACA4D,eAAgB76B,EAAU66B,iBAtLZvuC,CAvmEwBwuC,EAC1CtlC,OACA4hC,gBACA2D,gBACAxF,oBACA+B,yBACA0D,UACA7xB,WACAuZ,iBACAj1B,SACAke,YACAyK,WACAse,sBACA7oB,mBACAoB,SACAxgB,QACA0mC,gBACAmC,gBACAX,2BACA1J,wBACA2J,yBACA9B,iBACA7I,kBACAuN,aACAiC,iBACAhC,sBACAE,sBACAkC,wBACAc,4BACAxR,gBACAsN,cACAC,oBACA1L,0BACAiN,aACAC,iBACAnE,wBACAgE,0BACAkD,oBACApD,uBACAM,oBACAG,uBACA3/B,mBACAC,iBACAq7B,eACA2F,gBACAnB,wBACAlF,yBACAC,4BACAI,qBACAC,iBACA6E,gBACAE,cACAE,sBACAE,eACA7E,cACAD,YACAa,gBACAX,kBACAE,uBACA6E,iBACA/W,cACAkX,sBACA5J,sBACAnN,SACAuS,YACArB,+BACAyH,4BACAC,mBACAr8B,WACA9S,aACAkrC,sBACAC,gBACA4C,iBACAE,yBACAzX,0BACA2S,qBACAiF,eACAD,uBACAG,sBACAC,gBACA/E,uBACA7F,kBACAH,aACAiL,2BACA9X,qBACAuT,UACAE,mBACAT,uBACAE,iBACAE,oBACAO,oBACAb,mBACAiF,qCACA3lB,gBACA+hB,2BACA8D,mBACAnuB,mBACAuqB,qBACAC,0BACA4D,kBACAO,cACAC,WACAC,UACAC,iBAEA,MAAM,YACJC,GAAW,WACXC,GAAU,WACVC,GAAU,cACVC,GAAa,eACbC,GAAc,kBACdC,GAAiB,mBACjBC,GAAkB,qBAClBC,GAAoB,WACpBC,GAAU,eACVC,GAAc,oBACdC,GAAmB,WACnBC,GAAU,uBACVC,GAAsB,cACtBC,GAAa,qBACbC,GAAoB,iBACpBtiB,GAAgB,oCAChBuiB,GAAmC,wBACnCC,GAAuB,cACvBC,GAAa,oBACbC,GAAmB,kBACnBC,GAAiB,YACjBC,GAAW,yBACX3Z,GAAwB,kBACxB4Z,GAAiB,kBACjBC,GAAiB,qBACjBC,GAAoB,wBACp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","sources":["webpack://telegram-t/./src/components/common/MessageOutgoingStatus.tsx","webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/hooks/useHotkeys.ts","webpack://telegram-t/./src/util/parseHotkey.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useCustomEmojiTooltip.ts","webpack://telegram-t/./src/util/PostMessageConnector.ts","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useMentionTooltip.ts","webpack://telegram-t/./src/components/left/main/hooks/useOrderDiff.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOverlayPosition.ts","webpack://telegram-t/./src/components/middle/composer/helpers/selection.ts","webpack://telegram-t/./src/hooks/useForumPanelRender.ts","webpack://telegram-t/./src/components/common/SensitiveContentConfirmModal.tsx","webpack://telegram-t/./src/components/common/SensitiveContentConfirmModal.module.scss?c6aa","webpack://telegram-t/./src/components/main/visualEffects/SnapEffectContainer.module.scss?fa7b","webpack://telegram-t/./src/components/main/visualEffects/SnapEffectContainer.tsx","webpack://telegram-t/./src/components/common/PrivateChatInfo.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/prepareForRegExp.ts","webpack://telegram-t/./src/components/left/main/ChatCallStatus.module.scss?f06e","webpack://telegram-t/./src/components/left/main/ChatCallStatus.tsx","webpack://telegram-t/./src/components/left/main/ChatTags.module.scss?bf8a","webpack://telegram-t/./src/components/left/main/ChatTags.tsx","webpack://telegram-t/./src/components/left/main/Chat.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/usePaidMessageConfirmation.ts","webpack://telegram-t/./src/hooks/useEnsureStory.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useChatCommandTooltip.ts","webpack://telegram-t/./src/lib/cleanDocsHtml.ts","webpack://telegram-t/./src/components/middle/composer/helpers/cleanHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useLoadLinkPreview.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/ToDoListModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.module.scss?90e3","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/common/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/hooks/polling/usePeerStoriesPolling.ts","webpack://telegram-t/./src/hooks/usePrevDuringAnimation.ts","webpack://telegram-t/./src/components/left/main/ChatBadge.tsx","webpack://telegram-t/./src/components/common/helpers/formatUsername.ts","webpack://telegram-t/./src/components/left/main/hooks/useLeftHeaderButtonRtlForumTransition.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useEmojiTooltip.ts","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuButton.tsx","webpack://telegram-t/./src/hooks/reducers/useFoldersReducer.ts","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/hooks/media/useMessageMediaHash.ts","webpack://telegram-t/./src/util/focusEditableElement.ts","webpack://telegram-t/./src/hooks/useMouseInside.ts","webpack://telegram-t/./src/components/common/WebLink.tsx","webpack://telegram-t/./src/util/memoized.ts","webpack://telegram-t/./src/components/common/TopicIcon.tsx","webpack://telegram-t/./src/hooks/useLongPress.ts","webpack://telegram-t/./src/styles/_patternBackground.module.scss?c0b7","webpack://telegram-t/./src/util/selection.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/util/launchMediaWorkers.ts","webpack://telegram-t/./src/hooks/useGetSelectionRange.ts","webpack://telegram-t/./src/hooks/animations/useVtn.ts","webpack://telegram-t/./src/components/middle/composer/DropTarget.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.tsx","webpack://telegram-t/./src/hooks/useReducer.ts","webpack://telegram-t/./src/components/common/NothingFound.tsx","webpack://telegram-t/./src/util/dates/workHours.ts","webpack://telegram-t/./src/components/common/profile/BusinessHours.module.scss?06fd","webpack://telegram-t/./src/components/common/profile/BusinessHours.tsx","webpack://telegram-t/./src/components/common/profile/UserBirthday.module.scss?dc99","webpack://telegram-t/./src/components/common/profile/UserBirthday.tsx","webpack://telegram-t/./src/components/common/profile/ChatExtra.module.scss?9412","webpack://telegram-t/./src/components/common/profile/ChatExtra.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/getFilesFromDataTransferItems.ts","webpack://telegram-t/./src/components/common/LinkField.tsx","webpack://telegram-t/./src/components/common/LinkField.module.scss?fa18","webpack://telegram-t/./src/hooks/useChatContextActions.ts","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/common/PaymentMessageConfirmDialog.tsx","webpack://telegram-t/./src/components/common/PaymentMessageConfirmDialog.module.scss?1d52","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/components/middle/hooks/useHeaderPane.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.async.tsx","webpack://telegram-t/./src/util/mediaSession.ts","webpack://telegram-t/./src/components/left/main/Archive.module.scss?6d2a","webpack://telegram-t/./src/components/left/main/Archive.tsx","webpack://telegram-t/./src/components/left/main/EmptyFolder.module.scss?0952","webpack://telegram-t/./src/components/left/main/EmptyFolder.tsx","webpack://telegram-t/./src/components/left/main/FrozenAccountNotification.tsx","webpack://telegram-t/./src/components/left/main/FrozenAccountNotification.module.scss?c59a","webpack://telegram-t/./src/components/left/main/UnconfirmedSession.module.scss?bd2b","webpack://telegram-t/./src/components/left/main/UnconfirmedSession.tsx","webpack://telegram-t/./src/components/left/main/ChatList.tsx","webpack://telegram-t/./src/components/common/GroupChatInfo.tsx","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/util/systemFilesDialog.ts","webpack://telegram-t/./src/components/common/File.tsx","webpack://telegram-t/./src/components/common/ChatForumLastMessage.module.scss?cb0b","webpack://telegram-t/./src/components/common/ChatForumLastMessage.tsx","webpack://telegram-t/./src/components/left/main/hooks/useChatListEntry.tsx","webpack://telegram-t/./src/util/audioPlayer.ts","webpack://telegram-t/./src/global/selectors/workspaces.ts","webpack://telegram-t/./src/components/common/DeleteChatModal.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/hooks/schedulers/useIntervalForceUpdate.ts","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/common/helpers/boostInfo.ts","webpack://telegram-t/./src/components/left/search/helpers/getSenderName.ts","webpack://telegram-t/./src/components/common/helpers/preloadDocumentMedia.ts","webpack://telegram-t/./src/components/common/Document.tsx","webpack://telegram-t/./src/components/story/mediaArea/MediaArea.module.scss?fe60","webpack://telegram-t/./src/components/story/mediaArea/MediaAreaSuggestedReaction.tsx","webpack://telegram-t/./src/util/formatTemperature.ts","webpack://telegram-t/./src/components/story/mediaArea/MediaAreaWeather.tsx","webpack://telegram-t/./src/components/story/mediaArea/MediaAreaOverlay.tsx","webpack://telegram-t/./src/hooks/window/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/useScrollNotch.ts","webpack://telegram-t/./src/hooks/useOffscreenCanvasBlur.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/hooks/useAsyncResolvers.ts","webpack://telegram-t/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://telegram-t/./src/components/common/Audio.tsx","webpack://telegram-t/./src/components/common/helpers/waveform.ts","webpack://telegram-t/./src/util/waveform.ts","webpack://telegram-t/./src/util/cycleRestrict.ts","webpack://telegram-t/./src/hooks/useMediaWithLoadProgress.ts","webpack://telegram-t/./src/global/selectors/calls.ts","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.module.scss?5334","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/hooks/useSendMessageAction.ts","webpack://telegram-t/./src/components/right/statistics/helpers/isGraph.ts","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/util/AbsoluteVideo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInputCustomEmojis.ts","webpack://telegram-t/./src/components/middle/composer/TextFormatter.async.tsx","webpack://telegram-t/./src/components/middle/composer/MessageInput.tsx","webpack://telegram-t/./src/components/left/main/hooks/useChatAnimationType.ts","webpack://telegram-t/./src/components/common/TypingStatus.tsx","webpack://telegram-t/./src/components/common/DotAnimation.tsx","webpack://telegram-t/./src/components/common/Media.tsx","webpack://telegram-t/./src/components/common/LastMessageMeta.tsx","webpack://telegram-t/./src/hooks/media/useUnsupportedMedia.ts","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/renderKeyboardButtonText.tsx","webpack://telegram-t/./src/components/common/profile/ProfilePhoto.tsx","webpack://telegram-t/./src/components/common/profile/ProfilePinnedGifts.module.scss?70d3","webpack://telegram-t/./src/components/common/profile/ProfilePinnedGifts.tsx","webpack://telegram-t/./src/components/common/profile/ProfileInfo.module.scss?af06","webpack://telegram-t/./src/components/common/profile/ProfileInfo.tsx","webpack://telegram-t/./src/components/common/hooks/usePhotosPreload.ts","webpack://telegram-t/./src/hooks/useAudioPlayer.ts","webpack://telegram-t/./src/components/middle/message/SponsoredContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredContextMenuContainer.tsx","webpack://telegram-t/./src/components/left/main/EmptyForum.module.scss?0a02","webpack://telegram-t/./src/components/left/main/EmptyForum.tsx","webpack://telegram-t/./src/components/left/main/Topic.module.scss?d97e","webpack://telegram-t/./src/components/left/main/Topic.tsx","webpack://telegram-t/./src/components/left/main/hooks/useTopicContextActions.ts","webpack://telegram-t/./src/components/left/main/ForumPanel.tsx","webpack://telegram-t/./src/components/left/main/ForumPanel.module.scss?d1a9","webpack://telegram-t/./src/hooks/window/useFullscreen.ts","webpack://telegram-t/./src/components/middle/message/helpers/getSingularPaidMedia.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/FactCheck.module.scss?3842","webpack://telegram-t/./src/components/middle/message/FactCheck.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.module.scss?e3d6","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.module.scss?30d0","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/BaseStory.module.scss?d118","webpack://telegram-t/./src/components/middle/message/BaseStory.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/TodoList.tsx","webpack://telegram-t/./src/components/middle/message/WebPageUniqueGift.module.scss?8703","webpack://telegram-t/./src/components/middle/message/WebPageUniqueGift.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/helpers/webpageType.ts","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/right/hooks/useAsyncRendering.ts","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/left/MuteChatModal.async.tsx","webpack://telegram-t/./src/components/middle/message/MessageEffect.tsx","webpack://telegram-t/./src/components/middle/message/MessageEffect.module.scss?d23f","webpack://telegram-t/./src/components/left/ChatFolderModal.async.tsx"],"sourcesContent":["import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiMessageOutgoingStatus } from '../../api/types';\n\nimport Transition from '../ui/Transition';\nimport Icon from './icons/Icon';\n\nimport './MessageOutgoingStatus.scss';\n\ntype OwnProps = {\n  status: ApiMessageOutgoingStatus;\n};\n\nenum Keys {\n  failed, pending, succeeded, read,\n}\n\nconst MessageOutgoingStatus: FC<OwnProps> = ({ status }) => {\n  return (\n    <div className=\"MessageOutgoingStatus\">\n      <Transition name=\"reveal\" activeKey={Keys[status]}>\n        {status === 'failed' ? (\n          <div className=\"MessageOutgoingStatus--failed\">\n            <Icon name=\"message-failed\" />\n          </div>\n        ) : <Icon name={`message-${status}`} />}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(MessageOutgoingStatus);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectCurrentChat, selectUser } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\nconst DeleteMemberModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n}) => {\n  const { deleteChatMember } = getActions();\n\n  const lang = useOldLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId: userId! });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('GroupRemoved.Remove')}\n      textParts={renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}\n      confirmLabel={lang('lng_box_remove')}\n      confirmHandler={handleDeleteChatMember}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n)(DeleteMemberModal));\n","import { useEffect } from '../lib/teact/teact';\n\nimport { createCallbackManager } from '../util/callbacks';\nimport { getHotkeyMatcher } from '../util/parseHotkey';\n\nconst IGNORE_TAGS = new Set(['INPUT', 'TEXTAREA', 'SELECT']);\n\nconst handlers = createCallbackManager();\ndocument.documentElement.addEventListener('keydown', handlers.runCallbacks);\n\nexport function useHotkeys(hotkeys?: Record<string, (e: KeyboardEvent) => void>) {\n  useEffect(() => {\n    if (!hotkeys) {\n      return undefined;\n    }\n\n    const entries = Object.entries(hotkeys);\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (!shouldFireEvent(e)) {\n        return;\n      }\n\n      entries.forEach(([hotkey, handler]) => {\n        if (getHotkeyMatcher(hotkey)(e)) {\n          handler(e);\n        }\n      });\n    }\n\n    return handlers.addCallback(handleKeyDown);\n  }, [hotkeys]);\n}\n\nfunction shouldFireEvent(e: KeyboardEvent) {\n  if (e.target instanceof HTMLElement) {\n    return !IGNORE_TAGS.has(e.target.tagName);\n  }\n\n  return true;\n}\n","// Original source from Mantine\n// https://github.com/mantinedev/mantine/blob/master/src/mantine-hooks/src/use-hotkeys/parse-hotkey.ts\n\nexport type KeyboardModifiers = {\n  alt: boolean;\n  ctrl: boolean;\n  meta: boolean;\n  mod: boolean;\n  shift: boolean;\n};\n\nexport type Hotkey = KeyboardModifiers & {\n  key?: string;\n};\n\ntype CheckHotkeyMatch = (event: KeyboardEvent) => boolean;\n\nexport function parseHotkey(hotkey: string): Hotkey {\n  const keys = hotkey\n    .toLowerCase()\n    .split('+')\n    .map((part) => part.trim());\n\n  const modifiers: KeyboardModifiers = {\n    alt: keys.includes('alt'),\n    ctrl: keys.includes('ctrl'),\n    meta: keys.includes('meta'),\n    mod: keys.includes('mod'),\n    shift: keys.includes('shift'),\n  };\n\n  const reservedKeys = ['alt', 'ctrl', 'meta', 'shift', 'mod'];\n\n  const freeKey = keys.find((key) => !reservedKeys.includes(key));\n\n  return {\n    ...modifiers,\n    key: freeKey,\n  };\n}\n\nfunction isExactHotkey(hotkey: Hotkey, event: KeyboardEvent): boolean {\n  const {\n    alt, ctrl, meta, mod, shift, key,\n  } = hotkey;\n  const {\n    altKey, ctrlKey, metaKey, shiftKey, key: pressedKey,\n  } = event;\n\n  if (alt !== altKey) {\n    return false;\n  }\n\n  if (mod) {\n    if (!ctrlKey && !metaKey) {\n      return false;\n    }\n  } else {\n    if (ctrl !== ctrlKey) {\n      return false;\n    }\n    if (meta !== metaKey) {\n      return false;\n    }\n  }\n  if (shift !== shiftKey) {\n    return false;\n  }\n\n  return Boolean(key\n    && (pressedKey.toLowerCase() === key.toLowerCase()\n      || event.code.replace('Key', '').toLowerCase() === key.toLowerCase()));\n}\n\nexport function getHotkeyMatcher(hotkey: string): CheckHotkeyMatch {\n  return (event) => isExactHotkey(parseHotkey(hotkey), event);\n}\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/browser/windowEnvironment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { getHtmlBeforeSelection } from '../../../../util/selection';\nimport { buildCustomEmojiHtml } from '../helpers/customEmoji';\n\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nconst THROTTLE = 300;\nconst RE_ENDS_ON_EMOJI = new RegExp(`(${twemojiRegex.source})$`, 'g');\nconst RE_ENDS_ON_EMOJI_IMG = new RegExp(`${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useCustomEmojiTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  getSelectionRange: Signal<Range | undefined>,\n  inputRef: ElementRef<HTMLDivElement>,\n  customEmojis?: ApiSticker[],\n) {\n  const { loadCustomEmojiForEmoji, clearCustomEmojiForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractLastEmojiThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || !getSelectionRange()?.collapsed) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const htmlBeforeSelection = getHtmlBeforeSelection(inputRef.current);\n\n    return htmlBeforeSelection.match(IS_EMOJI_SUPPORTED ? RE_ENDS_ON_EMOJI : RE_ENDS_ON_EMOJI_IMG)?.[0];\n  }, [getHtml, getSelectionRange, inputRef, isEnabled], THROTTLE);\n\n  const getLastEmoji = useDerivedSignal(\n    extractLastEmojiThrottled, [extractLastEmojiThrottled, getHtml, getSelectionRange], true,\n  );\n\n  const isActive = useDerivedState(() => Boolean(getLastEmoji()), [getLastEmoji]);\n  const hasCustomEmojis = Boolean(customEmojis?.length);\n\n  useEffect(() => {\n    if (!isEnabled || !isActive) return;\n\n    const lastEmoji = getLastEmoji();\n    if (lastEmoji) {\n      if (!hasCustomEmojis) {\n        const emoji = IS_EMOJI_SUPPORTED ? lastEmoji : lastEmoji.match(/.+alt=\"(.+)\"/)?.[1];\n        if (emoji) {\n          loadCustomEmojiForEmoji({\n            emoji,\n          });\n        }\n      }\n    } else {\n      clearCustomEmojiForEmoji();\n    }\n  }, [isEnabled, isActive, getLastEmoji, hasCustomEmojis, clearCustomEmojiForEmoji, loadCustomEmojiForEmoji]);\n\n  const insertCustomEmoji = useLastCallback((emoji: ApiSticker) => {\n    const lastEmoji = getLastEmoji();\n    if (!isEnabled || !lastEmoji) return;\n\n    const inputEl = inputRef.current!;\n    const htmlBeforeSelection = getHtmlBeforeSelection(inputEl);\n    const regexText = IS_EMOJI_SUPPORTED\n      ? lastEmoji\n      // Escape regexp special chars\n      : lastEmoji.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    const regex = new RegExp(`(${regexText})\\\\1*$`, '');\n    const matched = htmlBeforeSelection.match(regex)![0];\n    const count = matched.length / lastEmoji.length;\n    const newHtml = htmlBeforeSelection.replace(regex, buildCustomEmojiHtml(emoji).repeat(count));\n    const htmlAfterSelection = inputEl.innerHTML.substring(htmlBeforeSelection.length);\n\n    setHtml(`${newHtml}${htmlAfterSelection}`);\n\n    requestNextMutation(() => {\n      focusEditableElement(inputEl, true, true);\n    });\n  });\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isCustomEmojiTooltipOpen: Boolean(isActive && hasCustomEmojis && !isManuallyClosed),\n    closeCustomEmojiTooltip: markManuallyClosed,\n    insertCustomEmoji,\n  };\n}\n","import generateUniqueId from './generateUniqueId';\nimport { throttleWithTickEnd } from './schedulers';\n\nexport interface CancellableCallback {\n  (\n    ...args: any[]\n  ): void;\n\n  isCanceled?: boolean;\n}\n\ntype InitPayload = {\n  type: 'init';\n  messageId?: string;\n  args: any;\n};\n\ntype CallMethodPayload = {\n  type: 'callMethod';\n  messageId?: string;\n  name: string;\n  args: any;\n  withCallback?: boolean;\n};\n\ntype CancelProgressPayload = {\n  type: 'cancelProgress';\n  messageId: string;\n};\n\nexport type OriginPayload =\n  InitPayload\n  | CallMethodPayload\n  | CancelProgressPayload;\n\nexport type OriginMessageData = {\n  channel?: string;\n  payloads: OriginPayload[];\n};\n\nexport interface OriginMessageEvent {\n  data: OriginMessageData;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport type ApiUpdate = { type: string } & any;\n\nexport type WorkerPayload =\n  {\n    channel?: string;\n    type: 'update';\n    update: ApiUpdate;\n  }\n  |\n  {\n    channel?: string;\n    type: 'methodResponse';\n    messageId: string;\n    response?: any;\n    error?: { message: string };\n  }\n  |\n  {\n    channel?: string;\n    type: 'methodCallback';\n    messageId: string;\n    callbackArgs: any[];\n  }\n  |\n  {\n    channel?: string;\n    type: 'unhandledError';\n    error?: { message: string };\n  };\n\nexport type WorkerMessageData = {\n  channel?: string;\n  payloads: WorkerPayload[];\n};\n\nexport interface WorkerMessageEvent {\n  data: WorkerMessageData;\n}\n\ninterface RequestState {\n  messageId: string;\n  resolve: AnyToVoidFunction;\n  reject: AnyToVoidFunction;\n  callback: AnyToVoidFunction;\n}\n\ntype InputRequestTypes = Record<string, AnyFunction>;\n\ntype Values<T> = T[keyof T];\nexport type RequestTypes<T extends InputRequestTypes> = Values<{\n  [Name in keyof (T)]: {\n    name: Name & string;\n    args: Parameters<T[Name]>;\n    transferables?: Transferable[];\n  }\n}>;\n\nclass ConnectorClass<T extends InputRequestTypes> {\n  private requestStates = new Map<string, RequestState>();\n\n  private requestStatesByCallback = new Map<AnyToVoidFunction, RequestState>();\n\n  private pendingPayloads: OriginPayload[] = [];\n\n  private pendingTransferables: Transferable[] = [];\n\n  constructor(\n    public target: Worker,\n    private onUpdate?: (update: ApiUpdate) => void,\n    private channel?: string,\n  ) {\n  }\n\n  public destroy() {\n  }\n\n  init(...args: any[]) {\n    this.postMessageOnTickEnd({\n      type: 'init',\n      args,\n    });\n  }\n\n  request(messageData: RequestTypes<T>) {\n    const { requestStates, requestStatesByCallback } = this;\n    const { transferables, ...restMessageData } = messageData;\n\n    const messageId = generateUniqueId();\n    const payload: CallMethodPayload = {\n      type: 'callMethod',\n      messageId,\n      ...restMessageData,\n    };\n\n    const requestState = { messageId } as RequestState;\n\n    // Re-wrap type because of `postMessage`\n    const promise = new Promise<any>((resolve, reject) => {\n      Object.assign(requestState, { resolve, reject });\n    });\n\n    if (typeof payload.args[payload.args.length - 1] === 'function') {\n      payload.withCallback = true;\n\n      const callback = payload.args.pop() as AnyToVoidFunction;\n      requestState.callback = callback;\n      requestStatesByCallback.set(callback, requestState);\n    }\n\n    requestStates.set(messageId, requestState);\n    promise\n      .catch(() => undefined)\n      .finally(() => {\n        requestStates.delete(messageId);\n\n        if (requestState.callback) {\n          requestStatesByCallback.delete(requestState.callback);\n        }\n      });\n\n    this.postMessageOnTickEnd(payload, transferables);\n\n    return promise;\n  }\n\n  cancelCallback(progressCallback: CancellableCallback) {\n    progressCallback.isCanceled = true;\n\n    const { messageId } = this.requestStatesByCallback.get(progressCallback) || {};\n    if (!messageId) {\n      return;\n    }\n\n    this.postMessageOnTickEnd({\n      type: 'cancelProgress',\n      messageId,\n    });\n  }\n\n  onMessage(data: WorkerMessageData) {\n    const { requestStates, channel } = this;\n    if (data.channel !== channel) {\n      return;\n    }\n\n    data.payloads.forEach((payload) => {\n      if (payload.type === 'update' && this.onUpdate) {\n        this.onUpdate(payload.update);\n      }\n      if (payload.type === 'methodResponse') {\n        const requestState = requestStates.get(payload.messageId);\n        if (requestState) {\n          if (payload.error) {\n            requestState.reject(payload.error);\n          } else {\n            requestState.resolve(payload.response);\n          }\n        }\n      } else if (payload.type === 'methodCallback') {\n        const requestState = requestStates.get(payload.messageId);\n        requestState?.callback?.(...payload.callbackArgs);\n      } else if (payload.type === 'unhandledError') {\n        throw new Error(payload.error?.message);\n      }\n    });\n  }\n\n  private postMessageOnTickEnd(payload: OriginPayload, transferables?: Transferable[]) {\n    this.pendingPayloads.push(payload);\n\n    if (transferables) {\n      this.pendingTransferables.push(...transferables);\n    }\n\n    this.postMessagesOnTickEnd();\n  }\n\n  private postMessagesOnTickEnd = throttleWithTickEnd(() => {\n    const { channel } = this;\n    const payloads = this.pendingPayloads;\n    const transferables = this.pendingTransferables;\n\n    this.pendingPayloads = [];\n    this.pendingTransferables = [];\n\n    this.target.postMessage({ channel, payloads }, transferables);\n  });\n}\n\nexport function createConnector<T extends InputRequestTypes>(\n  worker: Worker,\n  onUpdate?: (update: ApiUpdate) => void,\n  channel?: string,\n) {\n  const connector = new ConnectorClass<T>(worker, onUpdate, channel);\n\n  function handleMessage({ data }: WorkerMessageEvent) {\n    connector.onMessage(data);\n  }\n\n  worker.addEventListener('message', handleMessage);\n\n  connector.destroy = () => {\n    worker.removeEventListener('message', handleMessage);\n  };\n\n  return connector;\n}\n\nexport type Connector<T extends InputRequestTypes = InputRequestTypes> = ReturnType<typeof createConnector<T>>;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomSendMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default CustomSendMenuAsync;\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useEffect, useState } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport type { ApiChatMember, ApiPeer, ApiUser } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getMainUsername } from '../../../../global/helpers';\nimport { filterPeersByQuery, getPeerTitle } from '../../../../global/helpers/peers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { pickTruthy, unique } from '../../../../util/iteratees';\nimport { getCaretPosition, getHtmlBeforeSelection, setCaretPosition } from '../../../../util/selection';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nconst THROTTLE = 300;\n\nlet RE_USERNAME_SEARCH: RegExp;\ntry {\n  RE_USERNAME_SEARCH = /(^|\\s)@[-_\\p{L}\\p{M}\\p{N}]*$/gui;\n} catch (e) {\n  // Support for older versions of Firefox\n  RE_USERNAME_SEARCH = /(^|\\s)@[-_\\d\\wа-яёґєії]*$/gi;\n}\n\nexport default function useMentionTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  getSelectionRange: Signal<Range | undefined>,\n  inputRef: ElementRef<HTMLDivElement>,\n  groupChatMembers?: ApiChatMember[],\n  topInlineBotIds?: string[],\n  currentUserId?: string,\n) {\n  const lang = useLang();\n  const [filteredUsers, setFilteredUsers] = useState<ApiUser[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractUsernameTagThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    if (!isEnabled || !getSelectionRange()?.collapsed || !html.includes('@')) return undefined;\n\n    const htmlBeforeSelection = getHtmlBeforeSelection(inputRef.current);\n\n    return prepareForRegExp(htmlBeforeSelection).match(RE_USERNAME_SEARCH)?.[0].trim();\n  }, [isEnabled, getHtml, getSelectionRange, inputRef], THROTTLE);\n\n  const getUsernameTag = useDerivedSignal(\n    extractUsernameTagThrottled, [extractUsernameTagThrottled, getHtml, getSelectionRange], true,\n  );\n\n  const getWithInlineBots = useDerivedSignal(() => {\n    return isEnabled && getHtml().startsWith('@');\n  }, [getHtml, isEnabled]);\n\n  useEffect(() => {\n    const usernameTag = getUsernameTag();\n\n    if (!usernameTag || !(groupChatMembers || topInlineBotIds)) {\n      setFilteredUsers(undefined);\n      return;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!usersById) {\n      setFilteredUsers(undefined);\n      return;\n    }\n\n    const memberIds = groupChatMembers?.reduce((acc: string[], member) => {\n      if (member.userId !== currentUserId) {\n        acc.push(member.userId);\n      }\n\n      return acc;\n    }, []);\n\n    const filter = usernameTag.substring(1);\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...((getWithInlineBots() && topInlineBotIds) || []),\n        ...(memberIds || []),\n      ]),\n      query: filter,\n      type: 'user',\n    });\n\n    setFilteredUsers(Object.values(pickTruthy(usersById, filteredIds)));\n  }, [currentUserId, groupChatMembers, topInlineBotIds, getUsernameTag, getWithInlineBots]);\n\n  const insertMention = useLastCallback((\n    peer: ApiPeer,\n    forceFocus = false,\n    insertAtEnd = false,\n  ) => {\n    if (!peer.hasUsername && !getPeerTitle(lang, peer)) {\n      return;\n    }\n\n    const mainUsername = getMainUsername(peer);\n    const userFirstOrLastName = getPeerTitle(lang, peer) || '';\n    const htmlToInsert = mainUsername\n      ? `@${mainUsername}`\n      : `<a\n          class=\"text-entity-link\"\n          data-entity-type=\"${ApiMessageEntityTypes.MentionName}\"\n          data-user-id=\"${peer.id}\"\n          contenteditable=\"false\"\n          dir=\"auto\"\n        >${userFirstOrLastName}</a>`;\n\n    const inputEl = inputRef.current!;\n    const htmlBeforeSelection = getHtmlBeforeSelection(inputEl);\n    const fixedHtmlBeforeSelection = cleanWebkitNewLines(htmlBeforeSelection);\n    const atIndex = insertAtEnd ? fixedHtmlBeforeSelection.length\n      : fixedHtmlBeforeSelection.lastIndexOf('@');\n    const shiftCaretPosition = (mainUsername ? mainUsername.length + 1 : userFirstOrLastName.length)\n      - (fixedHtmlBeforeSelection.length - atIndex);\n\n    if (atIndex !== -1) {\n      const newHtml = `${fixedHtmlBeforeSelection.substr(0, atIndex)}${htmlToInsert}&nbsp;`;\n      const htmlAfterSelection = cleanWebkitNewLines(inputEl.innerHTML).substring(fixedHtmlBeforeSelection.length);\n      const caretPosition = getCaretPosition(inputEl);\n      setHtml(`${newHtml}${htmlAfterSelection}`);\n\n      requestNextMutation(() => {\n        const newCaretPosition = caretPosition + shiftCaretPosition + 1;\n        focusEditableElement(inputEl, forceFocus);\n        if (newCaretPosition >= 0) {\n          setCaretPosition(inputEl, newCaretPosition);\n        }\n      });\n    }\n\n    setFilteredUsers(undefined);\n  });\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isMentionTooltipOpen: Boolean(filteredUsers?.length && !isManuallyClosed),\n    closeMentionTooltip: markManuallyClosed,\n    insertMention,\n    mentionFilteredUsers: filteredUsers,\n  };\n}\n\n// Webkit replaces the line break with the `<div><br /></div>` or `<div></div>` code.\n// It is necessary to clean the html to a single form before processing.\nfunction cleanWebkitNewLines(html: string) {\n  return html.replace(/<div>(<br>|<br\\s?\\/>)?<\\/div>/gi, '<br>');\n}\n","import { useMemo } from '../../../../lib/teact/teact';\n\nimport { mapValues } from '../../../../util/iteratees';\nimport { useChatAnimationType } from './useChatAnimationType';\n\nimport usePreviousDeprecated from '../../../../hooks/usePreviousDeprecated';\n\nexport default function useOrderDiff(orderedIds: (string | number)[] | undefined, key?: string) {\n  const orderById = useMemo(() => {\n    if (!orderedIds) {\n      return undefined;\n    }\n\n    return orderedIds.reduce((acc, id, i) => {\n      acc[id] = i;\n      return acc;\n    }, {} as Record<string, number>);\n  }, [orderedIds]);\n\n  const prevOrderById = usePreviousDeprecated(orderById);\n  const prevChatId = usePreviousDeprecated(key);\n\n  const orderDiffById = useMemo(() => {\n    if (!orderById || !prevOrderById || key !== prevChatId) {\n      return {};\n    }\n\n    return mapValues(orderById, (order, id) => {\n      return prevOrderById[id] !== undefined ? order - prevOrderById[id] : -Infinity;\n    });\n  }, [key, orderById, prevChatId, prevOrderById]);\n\n  const getAnimationType = useChatAnimationType(orderDiffById);\n\n  return {\n    orderDiffById,\n    getAnimationType,\n  };\n}\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nconst OFFSET_X = REM;\n\nexport default function useOverlayPosition({\n  anchorRef,\n  overlayRef,\n  isMirrored,\n  isForMessageEffect,\n  isDisabled,\n  id,\n}: {\n  anchorRef: ElementRef<HTMLDivElement>;\n  overlayRef: ElementRef<HTMLDivElement>;\n  isMirrored?: boolean;\n  isForMessageEffect?: boolean;\n  isDisabled?: boolean;\n  id?: string;\n}) {\n  const updatePosition = useLastCallback(() => {\n    const element = overlayRef.current;\n    const anchor = anchorRef.current;\n    if (!element || !anchor) {\n      return;\n    }\n\n    const anchorRect = anchor.getBoundingClientRect();\n    const elementRect = element.getBoundingClientRect();\n    const windowWidth = window.innerWidth;\n\n    requestMutation(() => {\n      const anchorCenterY = anchorRect.top + anchorRect.height / 2;\n      const anchorBottomY = anchorRect.bottom;\n      const y = isForMessageEffect ? anchorBottomY : anchorCenterY;\n      element.style.top = `${y - elementRect.height / 2}px`;\n\n      if (isMirrored) {\n        element.style.left = `${anchorRect.left - OFFSET_X}px`;\n      } else {\n        element.style.right = `${windowWidth - anchorRect.right - OFFSET_X}px`;\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (isDisabled) return;\n    updatePosition();\n  }, [isDisabled, id]);\n\n  useEffect(() => {\n    if (isDisabled) return undefined;\n\n    const messagesContainer = anchorRef.current!.closest<HTMLDivElement>('.MessageList')!;\n    if (!messagesContainer) return undefined;\n\n    messagesContainer.addEventListener('scroll', updatePosition, { passive: true });\n\n    return () => {\n      messagesContainer.removeEventListener('scroll', updatePosition);\n    };\n  }, [isDisabled, anchorRef]);\n\n  return updatePosition;\n}\n","const MAX_NESTING_PARENTS = 5;\n\nexport function isSelectionInsideInput(selectionRange: Range, inputId: string) {\n  const { commonAncestorContainer } = selectionRange;\n  let parentNode: HTMLElement | null = commonAncestorContainer as HTMLElement;\n  let iterations = 1;\n  while (parentNode && parentNode.id !== inputId && iterations < MAX_NESTING_PARENTS) {\n    parentNode = parentNode.parentElement;\n    iterations++;\n  }\n\n  return Boolean(parentNode && parentNode.id === inputId);\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport useForceUpdate from './useForceUpdate';\nimport useLastCallback from './useLastCallback';\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useForumPanelRender(isForumPanelOpen = false) {\n  const shouldRenderForumPanelRef = useRef(isForumPanelOpen);\n  const isAnimationStartedRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  useSyncEffect(() => {\n    if (isForumPanelOpen) {\n      shouldRenderForumPanelRef.current = true;\n    }\n  }, [isForumPanelOpen]);\n\n  const handleForumPanelAnimationEnd = useLastCallback(() => {\n    shouldRenderForumPanelRef.current = false;\n    isAnimationStartedRef.current = false;\n    forceUpdate();\n  });\n\n  const handleForumPanelAnimationStart = useLastCallback(() => {\n    isAnimationStartedRef.current = true;\n    forceUpdate();\n  });\n\n  return {\n    shouldRenderForumPanel: shouldRenderForumPanelRef.current,\n    isAnimationStarted: isAnimationStartedRef.current,\n    handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart,\n  };\n}\n","import { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport { VERIFY_AGE_MIN_DEFAULT } from '../../config';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './SensitiveContentConfirmModal.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n  shouldAlwaysShow: boolean;\n  onAlwaysShowChanged: (value: boolean) => void;\n  confirmHandler: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  verifyAgeMin: number;\n};\n\nconst SensitiveContentConfirmModal = ({\n  isOpen,\n  onClose,\n  shouldAlwaysShow,\n  onAlwaysShowChanged,\n  confirmHandler,\n  verifyAgeMin,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n\n  return (\n    <ConfirmDialog\n      title={lang('TitleSensitiveModal', { years: verifyAgeMin })}\n      confirmLabel={lang('ButtonSensitiveView')}\n      isOpen={isOpen}\n      onClose={onClose}\n      confirmHandler={confirmHandler}\n    >\n      {lang('TextSensitiveModal')}\n      <Checkbox\n        className={styles.checkBox}\n        label={lang('ButtonSensitiveAlways', { years: verifyAgeMin })}\n        checked={shouldAlwaysShow}\n        onCheck={onAlwaysShowChanged}\n      />\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const appConfig = global.appConfig;\n  const verifyAgeMin = appConfig.verifyAgeMin;\n\n  return {\n    verifyAgeMin: verifyAgeMin || VERIFY_AGE_MIN_DEFAULT,\n  };\n})(SensitiveContentConfirmModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"checkBox\":\"mYXi2mIC\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AN8wkEiR\",\"ghost\":\"ANWk2pWP\",\"scale\":\"kMHxyoSt\",\"elementContainer\":\"UDCMfXxs\"};","import { memo } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport { SNAP_EFFECT_CONTAINER_ID, SNAP_EFFECT_ID, SVG_NAMESPACE } from '../../../config';\nimport { selectCanAnimateSnapEffect } from '../../../global/selectors';\nimport jsxToHtml from '../../../util/element/jsxToHtml';\nimport generateUniqueId from '../../../util/generateUniqueId';\n\nimport styles from './SnapEffectContainer.module.scss';\n\nconst VISIBLITY_MARGIN = 50;\nconst DURATION = 1000;\n\nconst SnapEffectContainer = () => {\n  return (\n    <div className={styles.root} id={SNAP_EFFECT_CONTAINER_ID} />\n  );\n};\n\nexport default memo(SnapEffectContainer);\n\nexport function animateSnap(element: HTMLElement) {\n  const global = getGlobal();\n  const canPlayEffect = selectCanAnimateSnapEffect(global);\n  if (!canPlayEffect) return false;\n  // Get element current fixed position on screen\n  const rect = element.getBoundingClientRect();\n  const x = rect.left + window.scrollX;\n  const y = rect.top + window.scrollY;\n  const width = rect.width;\n  const height = rect.height;\n\n  // Check for visibility\n  if (x + width + VISIBLITY_MARGIN < 0 || x - VISIBLITY_MARGIN > window.innerWidth\n    || y + height + VISIBLITY_MARGIN < 0 || y - VISIBLITY_MARGIN > window.innerHeight) {\n    return false;\n  }\n\n  const seed = Math.floor(Date.now() / 1000);\n  const filterId = `${SNAP_EFFECT_ID}-${generateUniqueId()}`;\n\n  const component = (\n    <svg\n      className={styles.ghost}\n      width={width}\n      height={height}\n      style={`left: ${x}px; top: ${y}px;`}\n      viewBox={`0 0 ${width} ${height}`}\n    >\n      <defs>\n        {createFilter(filterId, Math.min(width, height), seed)}\n      </defs>\n      <g filter={`url(#${filterId})`}>\n        <foreignObject className={styles.elementContainer} width={width} height={height} />\n      </g>\n    </svg>\n  );\n\n  const svg = jsxToHtml(component)[0] as HTMLElement;\n  const foreignObject = svg.querySelector('foreignObject')!;\n\n  const computedStyle = window.getComputedStyle(element);\n  const clone = element.cloneNode(true) as HTMLElement;\n  Array.from(computedStyle).forEach((key) => (\n    clone.style.setProperty(key, computedStyle.getPropertyValue(key), 'important')\n  ));\n\n  foreignObject.appendChild(clone);\n\n  const snapContainer = document.getElementById(SNAP_EFFECT_CONTAINER_ID)!;\n  snapContainer.appendChild(svg);\n\n  svg.addEventListener('animationend', () => {\n    snapContainer.removeChild(svg);\n  }, {\n    once: true,\n  });\n\n  return true;\n}\n\nfunction createFilter(id: string, smallestSide: number, baseSeed: number = 42) {\n  return (\n    <filter\n      xmlns={SVG_NAMESPACE}\n      id={id}\n      x=\"-150%\"\n      y=\"-150%\"\n      width=\"400%\"\n      height=\"400%\"\n      color-interpolation-filters=\"sRGB\"\n    >\n      <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.5\" numOctaves=\"1\" result=\"dustNoise\" seed={baseSeed} />\n      <feComponentTransfer in=\"dustNoise\" result=\"dustNoiseMask\">\n        <feFuncA type=\"linear\" slope=\"5\" intercept=\"0\">\n          <animate attributeName=\"slope\" values=\"5; 2; 1; 0\" dur={`${DURATION}ms`} fill=\"freeze\" />\n        </feFuncA>\n      </feComponentTransfer>\n      <feComposite in=\"SourceGraphic\" in2=\"dustNoiseMask\" operator=\"in\" result=\"dustySource\" />\n      <feTurbulence\n        type=\"fractalNoise\"\n        baseFrequency=\"0.015\"\n        numOctaves=\"1\"\n        result=\"displacementNoise1\"\n        seed={baseSeed + 1}\n      />\n      <feTurbulence\n        type=\"fractalNoise\"\n        baseFrequency=\"1\"\n        numOctaves=\"2\"\n        result=\"displacementNoise2\"\n        seed={baseSeed + 2}\n      />\n      <feMerge result=\"combinedNoise\">\n        <feMergeNode in=\"displacementNoise1\" />\n        <feMergeNode in=\"displacementNoise2\" />\n      </feMerge>\n      <feDisplacementMap in=\"dustySource\" in2=\"combinedNoise\" scale=\"0\" xChannelSelector=\"R\" yChannelSelector=\"G\">\n        <animate attributeName=\"scale\" values={`0; ${smallestSide * 3}`} dur={`${DURATION}ms`} fill=\"freeze\" />\n      </feDisplacementMap>\n    </filter>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember, ApiTypingStatus, ApiUser, ApiUserStatus,\n} from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MediaViewerOrigin } from '../../types';\n\nimport {\n  getMainUsername, getUserStatus, isSystemBot, isUserOnline,\n} from '../../global/helpers';\nimport { selectChatMessages, selectUser, selectUserStatus } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useIntervalForceUpdate from '../../hooks/schedulers/useIntervalForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Avatar from './Avatar';\nimport DotAnimation from './DotAnimation';\nimport FullNameTitle from './FullNameTitle';\nimport Icon from './icons/Icon';\nimport TypingStatus from './TypingStatus';\n\ntype OwnProps = {\n  userId?: string;\n  customPeer?: CustomPeer;\n  typingStatus?: ApiTypingStatus;\n  avatarSize?: 'tiny' | 'small' | 'medium' | 'large' | 'jumbo';\n  forceShowSelf?: boolean;\n  status?: string;\n  statusIcon?: IconName;\n  ripple?: boolean;\n  withDots?: boolean;\n  withMediaViewer?: boolean;\n  withUsername?: boolean;\n  withFullInfo?: boolean;\n  withUpdatingStatus?: boolean;\n  noEmojiStatus?: boolean;\n  noFake?: boolean;\n  noVerified?: boolean;\n  emojiStatusSize?: number;\n  noStatusOrTyping?: boolean;\n  noRtl?: boolean;\n  adminMember?: ApiChatMember;\n  isSavedDialog?: boolean;\n  className?: string;\n  onEmojiStatusClick?: NoneToVoidFunction;\n  iconElement?: React.ReactNode;\n  rightElement?: React.ReactNode;\n};\n\ntype StateProps =\n  {\n    user?: ApiUser;\n    userStatus?: ApiUserStatus;\n    self?: ApiUser;\n    isSavedMessages?: boolean;\n    areMessagesLoaded: boolean;\n    isSynced?: boolean;\n  };\n\nconst UPDATE_INTERVAL = 1000 * 60; // 1 min\n\nconst PrivateChatInfo: FC<OwnProps & StateProps> = ({\n  customPeer,\n  typingStatus,\n  avatarSize = 'medium',\n  status,\n  statusIcon,\n  withDots,\n  withMediaViewer,\n  withUsername,\n  withFullInfo,\n  withUpdatingStatus,\n  emojiStatusSize,\n  noStatusOrTyping,\n  noEmojiStatus,\n  noFake,\n  noVerified,\n  noRtl,\n  user,\n  userStatus,\n  self,\n  isSavedMessages,\n  isSavedDialog,\n  areMessagesLoaded,\n  adminMember,\n  ripple,\n  className,\n  isSynced,\n  onEmojiStatusClick,\n  iconElement,\n  rightElement,\n}) => {\n  const {\n    loadFullUser,\n    openMediaViewer,\n    loadMoreProfilePhotos,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { id: userId } = user || {};\n\n  const hasAvatarMediaViewer = withMediaViewer && !isSavedMessages;\n\n  useEffect(() => {\n    if (userId) {\n      if (withFullInfo && isSynced) loadFullUser({ userId });\n      if (withMediaViewer) loadMoreProfilePhotos({ peerId: userId, isPreload: true });\n    }\n  }, [userId, withFullInfo, withMediaViewer, isSynced]);\n\n  useIntervalForceUpdate(UPDATE_INTERVAL);\n\n  const handleAvatarViewerOpen = useLastCallback(\n    (e: React.MouseEvent<HTMLDivElement, MouseEvent>, hasMedia: boolean) => {\n      if (user && hasMedia) {\n        e.stopPropagation();\n        openMediaViewer({\n          isAvatarView: true,\n          chatId: user.id,\n          mediaIndex: 0,\n          origin: avatarSize === 'jumbo' ? MediaViewerOrigin.ProfileAvatar : MediaViewerOrigin.MiddleHeaderAvatar,\n        });\n      }\n    },\n  );\n\n  const mainUsername = useMemo(() => user && withUsername && getMainUsername(user), [user, withUsername]);\n\n  if (!user && !customPeer) {\n    return undefined;\n  }\n\n  function renderStatusOrTyping() {\n    if (status) {\n      return withDots ? (\n        <DotAnimation className=\"status\" content={status} />\n      ) : (\n        <span className=\"status\" dir=\"auto\">\n          {statusIcon && <Icon className=\"status-icon\" name={statusIcon} />}\n          {renderText(status)}\n        </span>\n      );\n    }\n\n    if (withUpdatingStatus && !areMessagesLoaded) {\n      return (\n        <DotAnimation className=\"status\" content={lang('Updating')} />\n      );\n    }\n\n    if (customPeer?.subtitleKey) {\n      return (\n        <span className=\"status\" dir=\"auto\">\n          <span className=\"user-status\" dir=\"auto\">{lang(customPeer.subtitleKey)}</span>\n        </span>\n      );\n    }\n\n    if (!user) {\n      return undefined;\n    }\n\n    if (typingStatus) {\n      return <TypingStatus typingStatus={typingStatus} />;\n    }\n\n    if (isSystemBot(user.id)) {\n      return undefined;\n    }\n\n    const translatedStatus = getUserStatus(lang, user, userStatus);\n    const mainUserNameClassName = buildClassName('handle', translatedStatus && 'withStatus');\n    return (\n      <span className={buildClassName('status', isUserOnline(user, userStatus, true) && 'online')}>\n        {mainUsername && <span className={mainUserNameClassName}>{mainUsername}</span>}\n        {translatedStatus && <span className=\"user-status\" dir=\"auto\">{translatedStatus}</span>}\n      </span>\n    );\n  }\n\n  const customTitle = adminMember\n    ? adminMember.customTitle || lang(adminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin')\n    : undefined;\n\n  function renderNameTitle() {\n    if (customTitle) {\n      return (\n        <div className=\"info-name-title\">\n          <FullNameTitle\n            peer={user!}\n            withEmojiStatus={!noEmojiStatus}\n            emojiStatusSize={emojiStatusSize}\n            isSavedMessages={isSavedMessages}\n            isSavedDialog={isSavedDialog}\n            onEmojiStatusClick={onEmojiStatusClick}\n          />\n          {customTitle && <span className=\"custom-title\">{customTitle}</span>}\n        </div>\n      );\n    }\n\n    return (\n      <FullNameTitle\n        peer={customPeer || user!}\n        noFake={noFake}\n        noVerified={noVerified}\n        withEmojiStatus={!noEmojiStatus}\n        emojiStatusSize={emojiStatusSize}\n        isSavedMessages={isSavedMessages}\n        isSavedDialog={isSavedDialog}\n        onEmojiStatusClick={onEmojiStatusClick}\n        iconElement={iconElement}\n      />\n    );\n  }\n\n  return (\n    <div className={buildClassName('ChatInfo', className)} dir={!noRtl && lang.isRtl ? 'rtl' : undefined}>\n      {isSavedDialog && self && (\n        <Avatar\n          key=\"saved-messages\"\n          size={avatarSize}\n          peer={self}\n          isSavedMessages\n          className=\"saved-dialog-avatar\"\n        />\n      )}\n      <Avatar\n        key={user?.id}\n        size={avatarSize}\n        peer={customPeer || user}\n        className={buildClassName(isSavedDialog && 'overlay-avatar')}\n        isSavedMessages={isSavedMessages}\n        isSavedDialog={isSavedDialog}\n        onClick={hasAvatarMediaViewer ? handleAvatarViewerOpen : undefined}\n      />\n      <div className=\"info\">\n        {renderNameTitle()}\n        {(status || (!isSavedMessages && !noStatusOrTyping)) && renderStatusOrTyping()}\n      </div>\n      {ripple && <RippleEffect />}\n      {rightElement}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId, forceShowSelf }): Complete<StateProps> => {\n    const { isSynced } = global;\n    const user = userId ? selectUser(global, userId) : undefined;\n    const userStatus = userId ? selectUserStatus(global, userId) : undefined;\n    const isSavedMessages = !forceShowSelf && user && user.isSelf;\n    const self = isSavedMessages ? user : selectUser(global, global.currentUserId!);\n    const areMessagesLoaded = Boolean(userId && selectChatMessages(global, userId));\n\n    return {\n      user,\n      userStatus,\n      isSavedMessages,\n      areMessagesLoaded,\n      self,\n      isSynced,\n    };\n  },\n)(PrivateChatInfo));\n","const RE_BR = /(<br>|<br\\s?\\/>)/g;\nconst RE_SPACE = /(&nbsp;|\\u00A0)/g;\nconst RE_CLEAN_HTML = /(<div>|<\\/div>)/gi;\nconst RE_EXTRA_NEW_LINE = /\\n$/i;\n\nexport function prepareForRegExp(html: string) {\n  return html\n    .replace(RE_SPACE, ' ')\n    .replace(RE_BR, '\\n')\n    .replace(RE_CLEAN_HTML, '')\n    .replace(RE_EXTRA_NEW_LINE, '');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"byPckqUT\",\"indicator\":\"nl36F75B\",\"indicatorInner\":\"AA5s1Pu4\",\"selected\":\"qy2i51dM\",\"active\":\"IsUWP16T\",\"bar-animation-transform-2\":\"p_1Kbke9\",\"barAnimationTransform2\":\"p_1Kbke9\",\"bar-animation-transform-1\":\"gOCprMbJ\",\"barAnimationTransform1\":\"gOCprMbJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './ChatCallStatus.module.scss';\n\ntype OwnProps = {\n  isSelected?: boolean;\n  isActive?: boolean;\n  isMobile?: boolean;\n};\n\nconst ChatCallStatus: FC<OwnProps> = ({\n  isSelected,\n  isActive,\n  isMobile,\n}) => {\n  return (\n    <div className={buildClassName(\n      styles.root,\n      isActive && styles.active,\n      isSelected && !isMobile && styles.selected,\n    )}\n    >\n      <div className={styles.indicator}>\n        <div className={styles.indicatorInner} />\n        <div className={styles.indicatorInner} />\n        <div className={styles.indicatorInner} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ChatCallStatus);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"cgAMX02q\",\"tag\":\"oIgI9O0L\",\"tagColorMore\":\"hZDqIz3W\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport styles from './ChatTags.module.scss';\n\nconst MAX_VISIBLE_TAGS = 3;\n\ntype OwnProps = {\n  orderedFolderIds?: number[];\n  chatFoldersById?: Record<number, ApiChatFolder>;\n};\n\nconst ChatTags = ({\n  orderedFolderIds,\n  chatFoldersById,\n}: OwnProps) => {\n  if (!orderedFolderIds) {\n    return undefined;\n  }\n\n  const visibleFolderIds = orderedFolderIds.slice(0, MAX_VISIBLE_TAGS);\n  const remainingCount = orderedFolderIds.length - visibleFolderIds.length;\n\n  return (\n    <div className={styles.wrapper}>\n      {visibleFolderIds.map((folderId) => {\n        const folder = chatFoldersById?.[folderId];\n        return folder && (\n          <div\n            key={folder.id}\n            className={buildClassName(\n              'ChatTags',\n              styles.tag,\n              getApiPeerColorClass({ color: folder.color }),\n            )}\n          >\n            {renderTextWithEntities({\n              text: folder.title.text,\n              entities: folder.title.entities,\n              noCustomEmojiPlayback: folder.noTitleAnimations,\n              emojiSize: 12,\n            })}\n          </div>\n        );\n      })}\n      {remainingCount > 0 && (\n        <div className={`ChatTags ${styles.tag} ${styles.tagColorMore}`}>\n          +\n          {remainingCount}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ChatTags);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiChatFolder,\n  ApiDraft,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiTopic,\n  ApiTypingStatus,\n  ApiUser,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ChatAnimationTypes } from './hooks';\nimport type { FocusMode } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ALL_FOLDER_ID, UNMUTE_TIMESTAMP } from '../../../config';\nimport {\n  groupStatefulContent,\n  isUserOnline,\n} from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatLastMessage,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForumPanelClosed,\n  selectIsForumPanelOpen,\n  selectMonoforumChannel,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectOutgoingStatus,\n  selectPeer,\n  selectSender,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n  selectTopicsInfo,\n  selectUser,\n  selectUserStatus,\n} from '../../../global/selectors';\nimport { IS_OPEN_IN_NEW_TAB_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getChatFolderIds } from '../../../util/folderManager';\nimport { createLocationHash } from '../../../util/routing';\n\nimport useSelectorSignal from '../../../hooks/data/useSelectorSignal';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport useChatListEntry from './hooks/useChatListEntry';\n\nimport Avatar from '../../common/Avatar';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport LastMessageMeta from '../../common/LastMessageMeta';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\nimport ChatBadge from './ChatBadge';\nimport ChatCallStatus from './ChatCallStatus';\nimport ChatTags from './ChatTags';\n\nimport './Chat.scss';\n\ntype OwnProps = {\n  chatId: string;\n  folderId?: number;\n  orderDiff: number;\n  animationType: ChatAnimationTypes;\n  isPinned?: boolean;\n  offsetTop?: number;\n  isSavedDialog?: boolean;\n  isPreview?: boolean;\n  previewMessageId?: number;\n  className?: string;\n  observeIntersection?: ObserveFn;\n  onDragEnter?: (chatId: string) => void;\n  withTags?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  monoforumChannel?: ApiChat;\n  listedTopicIds?: number[];\n  topics?: Record<number, ApiTopic>;\n  isMuted?: boolean;\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  lastMessageSender?: ApiPeer;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  draft?: ApiDraft;\n  isSelected?: boolean;\n  isSelectedForum?: boolean;\n  isForumPanelOpen?: boolean;\n  canScrollDown?: boolean;\n  canChangeFolder?: boolean;\n  lastMessageTopic?: ApiTopic;\n  typingStatus?: ApiTypingStatus;\n  withInterfaceAnimations?: boolean;\n  lastMessageId?: number;\n  lastMessage?: ApiMessage;\n  currentUserId: string;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  chatFolderIds?: number[];\n  orderedFolderIds?: number[];\n  chatFoldersById?: Record<number, ApiChatFolder>;\n  areTagsEnabled?: boolean;\n  focusMode?: FocusMode;\n};\n\nconst Chat: FC<OwnProps & StateProps> = ({\n  chatId,\n  folderId,\n  orderDiff,\n  animationType,\n  isPinned,\n  listedTopicIds,\n  topics,\n  observeIntersection,\n  chat,\n  monoforumChannel,\n  isMuted,\n  user,\n  userStatus,\n  lastMessageSender,\n  lastMessageOutgoingStatus,\n  offsetTop,\n  draft,\n  withInterfaceAnimations,\n  isSelected,\n  isSelectedForum,\n  isForumPanelOpen,\n  canScrollDown,\n  canChangeFolder,\n  lastMessageTopic,\n  typingStatus,\n  lastMessageId,\n  lastMessage,\n  isSavedDialog,\n  currentUserId,\n  isPreview,\n  previewMessageId,\n  className,\n  isSynced,\n  onDragEnter,\n  isAccountFrozen,\n  chatFolderIds,\n  orderedFolderIds,\n  chatFoldersById,\n  areTagsEnabled,\n  withTags,\n  focusMode,\n}) => {\n  const {\n    openChat,\n    openSavedDialog,\n    toggleChatInfo,\n    focusLastMessage,\n    focusMessage,\n    loadTopics,\n    openForumPanel,\n    closeForumPanel,\n    setShouldCloseRightColumn,\n    reportMessages,\n    openFrozenAccountModal,\n    updateChatMutedState,\n    openQuickPreview,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderDeleteModal, markRenderDeleteModal, unmarkRenderDeleteModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n\n  const { isForum, isForumAsMessages, isMonoforum } = chat || {};\n\n  useEnsureMessage(isSavedDialog ? currentUserId : chatId, lastMessageId, lastMessage);\n\n  const tagFolderIds = useMemo(() => {\n    const chatFolderIdsSet = new Set(chatFolderIds);\n\n    return orderedFolderIds?.filter((id) => {\n      if (!chatFolderIdsSet.has(id)) return undefined;\n\n      const isActive = id === folderId;\n      const isAll = id === ALL_FOLDER_ID;\n\n      const folder = chatFoldersById?.[id];\n      const hasColor = folder?.color !== undefined && folder.color !== -1;\n\n      return !isActive && !isAll && hasColor;\n    });\n  }, [orderedFolderIds, folderId, chatFoldersById, chatFolderIds]);\n\n  const shouldRenderTags = areTagsEnabled && withTags && Boolean(tagFolderIds?.length);\n\n  const { renderSubtitle, ref } = useChatListEntry({\n    chat,\n    chatId,\n    lastMessage,\n    typingStatus,\n    draft,\n    statefulMediaContent: groupStatefulContent({}),\n    lastMessageTopic,\n    lastMessageSender,\n    observeIntersection,\n    animationType,\n    withInterfaceAnimations,\n    orderDiff,\n    isSavedDialog,\n    isPreview,\n    topics,\n    noForumTitle: shouldRenderTags,\n  });\n\n  const getIsForumPanelClosed = useSelectorSignal(selectIsForumPanelClosed);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    if (e.altKey && !isSavedDialog && !isForum && !isPreview) {\n      e.preventDefault();\n      openQuickPreview({ id: chatId });\n      return;\n    }\n\n    const noForumTopicPanel = isMobile && isForumAsMessages;\n\n    if (isMobile) {\n      setShouldCloseRightColumn({ value: true });\n    }\n\n    if (isPreview) {\n      focusMessage({\n        chatId,\n        messageId: previewMessageId!,\n      });\n      return;\n    }\n\n    if (isSavedDialog) {\n      openSavedDialog({ chatId, noForumTopicPanel: true }, { forceOnHeavyAnimation: true });\n\n      if (isMobile) {\n        toggleChatInfo({ force: false });\n      }\n      return;\n    }\n\n    if (isForum) {\n      if (isForumPanelOpen) {\n        closeForumPanel(undefined, { forceOnHeavyAnimation: true });\n\n        return;\n      } else {\n        if (!noForumTopicPanel) {\n          openForumPanel({ chatId }, { forceOnHeavyAnimation: true });\n        }\n\n        if (!isForumAsMessages) return;\n      }\n    }\n\n    openChat({ id: chatId, noForumTopicPanel, shouldReplaceHistory: true }, { forceOnHeavyAnimation: true });\n\n    if (isSelected && canScrollDown) {\n      focusLastMessage();\n    }\n  });\n\n  const handleDragEnter = useLastCallback((e) => {\n    e.preventDefault();\n    onDragEnter?.(chatId);\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n\n    markRenderDeleteModal();\n    openDeleteModal();\n  });\n\n  const handleMute = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n\n    markRenderMuteModal();\n    openMuteModal();\n  });\n\n  const handleUnmute = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n\n    updateChatMutedState({ chatId, mutedUntil: UNMUTE_TIMESTAMP });\n  });\n\n  const handleChatFolderChange = useLastCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  });\n\n  const handleReport = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n\n    if (!chat) return;\n    reportMessages({ chatId: chat.id, messageIds: [] });\n  });\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    handleDelete,\n    handleMute,\n    handleUnmute,\n    handleChatFolderChange,\n    handleReport,\n    folderId,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    isSavedDialog,\n    currentUserId,\n    isPreview,\n    topics,\n  });\n\n  const isIntersecting = useIsIntersecting(ref, chat ? observeIntersection : undefined);\n\n  // Load the forum topics to display unread count badge\n  useEffect(() => {\n    if (isIntersecting && isForum && isSynced && listedTopicIds === undefined) {\n      loadTopics({ chatId });\n    }\n  }, [chatId, listedTopicIds, isSynced, isForum, isIntersecting]);\n\n  const isOnline = user && userStatus && isUserOnline(user, userStatus);\n  const { hasShownClass: isAvatarOnlineShown } = !focusMode ? useShowTransitionDeprecated(isOnline) : { hasShownClass: false };\n  const shouldDisableChatBadge = focusMode === 'deepWork' || (focusMode === 'noDistraction' && isMuted);\n\n  const href = useMemo(() => {\n    if (!IS_OPEN_IN_NEW_TAB_SUPPORTED) return undefined;\n\n    if (isSavedDialog) {\n      return `#${createLocationHash(currentUserId, 'thread', chatId)}`;\n    }\n\n    return `#${createLocationHash(chatId, 'thread', MAIN_THREAD_ID)}`;\n  }, [chatId, currentUserId, isSavedDialog]);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = user || chat;\n\n  const chatClassName = buildClassName(\n    'Chat chat-item-clickable',\n    isUserId(chatId) ? 'private' : 'group',\n    isForum && 'forum',\n    isSelected && 'selected',\n    isSelectedForum && 'selected-forum',\n    isPreview && 'standalone',\n    areTagsEnabled && withTags && 'chat-item-with-tags',\n    className,\n  );\n\n  return (\n    <ListItem\n      ref={ref}\n      className={chatClassName}\n      href={href}\n      style={`top: ${offsetTop}px`}\n      ripple={!isForum && !isMobile}\n      contextActions={contextActions}\n      onClick={handleClick}\n      onDragEnter={handleDragEnter}\n      withPortalForMenu\n    >\n      <div className={buildClassName('status', 'status-clickable')}>\n        <Avatar\n          peer={isMonoforum ? monoforumChannel : peer}\n          isSavedMessages={user?.isSelf}\n          isSavedDialog={isSavedDialog}\n          size={isPreview ? 'medium' : 'large'}\n          asMessageBubble={isMonoforum}\n        />\n        <div className=\"avatar-badge-wrapper\">\n          <div\n            className={buildClassName('avatar-online', 'avatar-badge', isAvatarOnlineShown && 'avatar-online-shown')}\n          />\n          {!isAvatarOnlineShown && Boolean(chat.subscriptionUntil) && (\n            <StarIcon type=\"gold\" className=\"avatar-badge avatar-subscription\" size=\"adaptive\" />\n          )}\n          {!shouldDisableChatBadge && (\n            <ChatBadge\n              chat={chat}\n              isMuted={isMuted}\n              shouldShowOnlyMostImportant\n              forceHidden={getIsForumPanelClosed}\n              topics={topics}\n              isSelected={isSelected}\n            />\n          )}\n        </div>\n        {chat.isCallActive && chat.isCallNotEmpty && (\n          <ChatCallStatus isMobile={isMobile} isSelected={isSelected} isActive={withInterfaceAnimations} />\n        )}\n      </div>\n      <div className={buildClassName('info', areTagsEnabled && withTags && 'has-tags')}>\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={isMonoforum ? monoforumChannel! : peer}\n            isMonoforum={isMonoforum}\n            monoforumBadgeClassName=\"monoforum-badge\"\n            withEmojiStatus\n            isSavedMessages={chatId === user?.id && user?.isSelf}\n            isSavedDialog={isSavedDialog}\n            observeIntersection={observeIntersection}\n            withStatusTextColor={isSelected}\n          />\n          {isMuted && !isSavedDialog && <Icon name=\"muted\" />}\n          <div className=\"separator\" />\n          {lastMessage && (\n            <LastMessageMeta\n              message={lastMessage}\n              outgoingStatus={!isSavedDialog ? lastMessageOutgoingStatus : undefined}\n              draftDate={draft?.date}\n            />\n          )}\n        </div>\n        <div className=\"subtitle\">\n          {renderSubtitle()}\n          {!isPreview && !shouldDisableChatBadge && (\n            <ChatBadge\n              chat={chat}\n              isPinned={isPinned}\n              isMuted={isMuted}\n              isSavedDialog={isSavedDialog}\n              hasMiniApp={user?.hasMainMiniApp}\n              topics={topics}\n              isSelected={isSelected}\n            />\n          )}\n        </div>\n        {shouldRenderTags && (\n          <ChatTags\n            orderedFolderIds={tagFolderIds}\n            chatFoldersById={chatFoldersById}\n          />\n        )}\n      </div>\n      {shouldRenderDeleteModal && (\n        <DeleteChatModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onCloseAnimationEnd={unmarkRenderDeleteModal}\n          chat={chat}\n          isSavedDialog={isSavedDialog}\n        />\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isSavedDialog, isPreview, previewMessageId,\n  }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, chatId);\n    if (!chat) {\n      return {\n        currentUserId: global.currentUserId!,\n      } as Complete<StateProps>;\n    }\n\n    const chatFolderIds = getChatFolderIds(chatId);\n    const { areTagsEnabled } = global.chatFolders;\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    const lastMessageId = previewMessageId || selectChatLastMessageId(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const lastMessage = previewMessageId\n      ? selectChatMessage(global, chatId, previewMessageId)\n      : selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const { isOutgoing, forwardInfo } = lastMessage || {};\n    const savedDialogSender = isSavedDialog && forwardInfo?.fromId ? selectPeer(global, forwardInfo.fromId) : undefined;\n    const messageSender = lastMessage ? selectSender(global, lastMessage) : undefined;\n    const lastMessageSender = savedDialogSender || messageSender;\n\n    const {\n      chatId: currentChatId,\n      threadId: currentThreadId,\n      type: messageListType,\n    } = selectCurrentMessageList(global) || {};\n    const isSelected = !isPreview && chatId === currentChatId && (isSavedDialog\n      ? chatId === currentThreadId : currentThreadId === MAIN_THREAD_ID);\n    const isSelectedForum = (chat.isForum && chatId === currentChatId)\n      || chatId === selectTabState(global).forumPanelChatId;\n\n    const userStatus = selectUserStatus(global, chatId);\n    const lastMessageTopic = lastMessage && selectTopicFromMessage(global, lastMessage);\n\n    const typingStatus = selectThreadParam(global, chatId, MAIN_THREAD_ID, 'typingStatus');\n\n    const topicsInfo = selectTopicsInfo(global, chatId);\n\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const monoforumChannel = selectMonoforumChannel(global, chatId);\n\n    return {\n      chat,\n      isMuted: getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id)),\n      lastMessageSender,\n      draft: selectDraft(global, chatId, MAIN_THREAD_ID),\n      isSelected,\n      isSelectedForum,\n      isForumPanelOpen: selectIsForumPanelOpen(global),\n      canScrollDown: isSelected && messageListType === 'thread',\n      canChangeFolder: (global.chatFolders.orderedIds?.length || 0) > 1,\n      lastMessageOutgoingStatus: isOutgoing && lastMessage ? selectOutgoingStatus(global, lastMessage) : undefined,\n      user,\n      userStatus,\n      lastMessageTopic,\n      typingStatus,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      lastMessage,\n      lastMessageId,\n      currentUserId: global.currentUserId!,\n      listedTopicIds: topicsInfo?.listedTopicIds,\n      topics: topicsInfo?.topicsById,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      monoforumChannel,\n      chatFolderIds,\n      orderedFolderIds: global.chatFolders.orderedIds,\n      chatFoldersById: global.chatFolders.byId,\n      areTagsEnabled: areTagsEnabled && isPremium,\n      focusMode: global.focusMode,\n    };\n  },\n)(Chat));\n","import { useEffect, useRef, useState } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport { PAID_MESSAGES_PURPOSE } from '../../../../config';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePaidMessageConfirmation(\n  starsForAllMessages: number,\n  isStarsBalanceModeOpen: boolean,\n  starsBalance: number,\n) {\n  const {\n    shouldPaidMessageAutoApprove,\n  } = getGlobal().settings.byKey;\n\n  const [shouldAutoApprove,\n    setAutoApprove] = useState(Boolean(shouldPaidMessageAutoApprove));\n  const [isWaitingStarsTopup, setIsWaitingStarsTopup] = useState(false);\n  const confirmPaymentHandlerRef = useRef<NoneToVoidFunction | undefined>(undefined);\n\n  const closeConfirmDialog = useLastCallback(() => {\n    getActions().closePaymentMessageConfirmDialogOpen();\n  });\n\n  useEffect(() => {\n    if (isWaitingStarsTopup && !isStarsBalanceModeOpen) {\n      setIsWaitingStarsTopup(false);\n\n      if (starsBalance > starsForAllMessages) {\n        confirmPaymentHandlerRef?.current?.();\n      }\n    }\n  }, [isWaitingStarsTopup, isStarsBalanceModeOpen, starsBalance, starsForAllMessages]);\n\n  const handleStarsTopup = useLastCallback(() => {\n    getActions().openStarsBalanceModal({\n      topup: {\n        balanceNeeded: starsForAllMessages,\n        purpose: PAID_MESSAGES_PURPOSE,\n      },\n    });\n    setIsWaitingStarsTopup(true);\n  });\n\n  const dialogHandler = useLastCallback(() => {\n    if (starsForAllMessages > starsBalance) {\n      handleStarsTopup();\n    } else {\n      confirmPaymentHandlerRef?.current?.();\n    }\n    getActions().closePaymentMessageConfirmDialogOpen();\n    if (shouldAutoApprove) getActions().setPaidMessageAutoApprove();\n  });\n\n  const handleWithConfirmation = <T extends (...args: any[]) => void>(\n    handler: T,\n    ...args: Parameters<T>\n  ) => {\n    if (starsForAllMessages) {\n      confirmPaymentHandlerRef.current = () => handler(...args);\n      if (!shouldPaidMessageAutoApprove) {\n        getActions().openPaymentMessageConfirmDialogOpen();\n        return;\n      }\n\n      if (starsForAllMessages > starsBalance) {\n        handleStarsTopup();\n        return;\n      }\n    }\n\n    handler(...args);\n  };\n\n  return {\n    closeConfirmDialog,\n    handleWithConfirmation,\n    dialogHandler,\n    shouldAutoApprove,\n    setAutoApprove,\n  };\n}\n","import { useEffect, useMemo } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ApiTypeStory } from '../api/types';\n\nimport { throttle } from '../util/schedulers';\n\nconst THROTTLE_THRESHOLD_MS = 200;\n\nfunction useEnsureStory(\n  peerId?: string,\n  storyId?: number,\n  story?: ApiTypeStory,\n) {\n  const { loadPeerStoriesByIds } = getActions();\n\n  const loadStoryThrottled = useMemo(() => {\n    const throttled = throttle(loadPeerStoriesByIds, THROTTLE_THRESHOLD_MS, true);\n    return () => {\n      throttled({ peerId: peerId!, storyIds: [storyId!] });\n    };\n  }, [storyId, peerId]);\n\n  useEffect(() => {\n    const shouldLoadStory = !story || !('content' in story || 'isDeleted' in story);\n    if (peerId && storyId && shouldLoadStory) {\n      loadStoryThrottled();\n    }\n  }, [loadStoryThrottled, story, storyId, peerId]);\n}\n\nexport default useEnsureStory;\n","import { IS_IOS } from '../../../../util/browser/windowEnvironment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiQuickReply } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useChatCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n  quickReplies?: Record<number, ApiQuickReply>,\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [filteredQuickReplies, setFilteredQuickReplies] = useState<ApiQuickReply[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || (!commands && !quickReplies)) {\n      setFilteredBotCommands(undefined);\n      setFilteredQuickReplies(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands?.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n\n    const newFilteredQuickReplies = Object.values(quickReplies || {}).filter((quickReply) => (\n      !filter || quickReply.shortcut.startsWith(filter)\n    ));\n\n    setFilteredQuickReplies(\n      newFilteredQuickReplies?.length ? newFilteredQuickReplies : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands, quickReplies]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean((filteredBotCommands?.length || filteredQuickReplies?.length) && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n    filteredQuickReplies,\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  BLOCKQUOTE: 'blockquote',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { DEBUG } from '../../../../config';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseHtmlAsFormattedText';\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nexport function preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) {\n      node.remove();\n      return;\n    }\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nexport function escapeHtml(html: string) {\n  const fragment = document.createElement('div');\n  const text = document.createTextNode(html);\n  fragment.appendChild(text);\n  return fragment.innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport {\n  EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID, EDITABLE_STORY_INPUT_ID,\n} from '../../../../config';\nimport { canReplaceMessageMedia, isUploadingFileSticker } from '../../../../global/helpers';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport buildAttachment from '../helpers/buildAttachment';\nimport { preparePastedHtml } from '../helpers/cleanHtml';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\n\nimport useLang from '../../../../hooks/useLang';\n\nconst TYPE_HTML = 'text/html';\nconst DOCUMENT_TYPE_WORD = 'urn:schemas-microsoft-com:office:word';\nconst NAMESPACE_PREFIX_WORD = 'xmlns:w';\n\nconst VALID_TARGET_IDS = new Set([EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID, EDITABLE_STORY_INPUT_ID]);\nconst CLOSEST_CONTENT_EDITABLE_SELECTOR = 'div[contenteditable]';\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  setNextText: StateHookSetter<ApiFormattedText | undefined>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  const {\n    showNotification,\n    updateShouldSaveAttachmentsCompression,\n    applyDefaultAttachmentsCompression } = getActions();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = (e.target as HTMLElement)?.closest(CLOSEST_CONTENT_EDITABLE_SELECTOR);\n      if (!input || !VALID_TARGET_IDS.has(input.id)) {\n        return;\n      }\n\n      e.preventDefault();\n\n      // Some extensions can trigger paste into their panels without focus\n      if (document.activeElement !== input) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text');\n      const html = e.clipboardData.getData('text/html');\n\n      let pastedFormattedText = html ? parseHtmlAsFormattedText(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n        if (editedMessage) {\n          files = files?.slice(0, 1);\n        }\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      let isWordDocument = false;\n      try {\n        const parser = new DOMParser();\n        const parsedDocument = parser.parseFromString(html, TYPE_HTML);\n        isWordDocument = parsedDocument.documentElement\n          .getAttribute(NAMESPACE_PREFIX_WORD) === DOCUMENT_TYPE_WORD;\n      } catch (err: any) {\n        // Ignore\n      }\n\n      const hasText = textToPaste && textToPaste.text;\n      let shouldSetAttachments = files?.length && !isWordDocument;\n\n      const newAttachments = files ? await Promise.all(files.map((file) => buildAttachment(file.name, file))) : [];\n      const canReplace = (editedMessage && newAttachments?.length\n        && canReplaceMessageMedia(editedMessage, newAttachments[0])) || Boolean(hasText);\n      const isUploadingDocumentSticker = isUploadingFileSticker(newAttachments[0]);\n      const isInAlbum = editedMessage && editedMessage?.groupedId;\n\n      if (editedMessage && newAttachments?.length > 1) {\n        showNotification({\n          message: lang('MediaReplaceInvalidError', undefined, { pluralValue: newAttachments.length }),\n        });\n        return;\n      }\n\n      if (editedMessage && isUploadingDocumentSticker) {\n        showNotification({ message: lang('MediaReplaceInvalidError', undefined, { pluralValue: 1 }) });\n        return;\n      }\n\n      if (isInAlbum) {\n        shouldSetAttachments = canReplace;\n        if (!shouldSetAttachments) {\n          showNotification({\n            message: lang('MediaReplaceInvalidError', undefined, { pluralValue: newAttachments.length }),\n          });\n          return;\n        }\n      }\n\n      if (shouldSetAttachments) {\n        updateShouldSaveAttachmentsCompression({ shouldSave: true });\n        applyDefaultAttachmentsCompression();\n        setAttachments(editedMessage ? newAttachments : (attachments) => attachments.concat(newAttachments));\n      }\n\n      if (hasText) {\n        if (shouldSetAttachments) {\n          setNextText(textToPaste);\n        } else {\n          insertTextAndUpdateCursor(textToPaste, input?.id);\n        }\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji,\n    onCustomEmojiStripped, setNextText, lang,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useEffect, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft, ApiMessage } from '../../../../api/types';\nimport type { ThreadId } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport {\n  requestMeasure, requestNextMutation,\n} from '../../../../lib/fasterdom/fasterdom';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../../../hooks/useLayoutEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useBackgroundMode from '../../../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/window/useBeforeUnload';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n\n  requestMeasure(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = ({\n  draft,\n  chatId,\n  threadId,\n  getHtml,\n  setHtml,\n  editedMessage,\n  isDisabled,\n}: {\n  draft?: ApiDraft;\n  chatId: string;\n  threadId: ThreadId;\n  getHtml: Signal<string>;\n  setHtml: (html: string) => void;\n  editedMessage?: ApiMessage;\n  isDisabled?: boolean;\n}) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isTouchedRef = useRef(false);\n\n  useEffect(() => {\n    const html = getHtml();\n    const isLocalDraft = draft?.isLocal !== undefined;\n    if (getTextWithEntitiesAsHtml(draft?.text) === html && !isLocalDraft) {\n      isTouchedRef.current = false;\n    } else {\n      isTouchedRef.current = true;\n    }\n  }, [draft, getHtml]);\n  useEffect(() => {\n    isTouchedRef.current = false;\n  }, [chatId, threadId]);\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useLastCallback((prevState: { chatId?: string; threadId?: ThreadId } = {}) => {\n    if (isDisabled || isEditing || !isTouchedRef.current) return;\n\n    const html = getHtml();\n\n    if (html) {\n      requestMeasure(() => {\n        saveDraft({\n          chatId: prevState.chatId ?? chatId,\n          threadId: prevState.threadId ?? threadId,\n          text: parseHtmlAsFormattedText(html),\n        });\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldKeepReply: true,\n        shouldKeepSuggestedPost: true,\n      });\n    }\n  });\n\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (isDisabled) {\n      return;\n    }\n    const isTouched = isTouchedRef.current;\n    const shouldUpdateSuggestedPost = draft?.suggestedPostInfo && !prevDraft?.suggestedPostInfo;\n\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (isTouched && !draft) return; // Prevent reset from other client if we have local edits\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (isTouched && !shouldUpdateSuggestedPost) return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft.text));\n    if (shouldUpdateSuggestedPost) {\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n\n    const customEmojiIds = draft.text?.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n  }, [chatId, threadId, draft, getHtml, setHtml, editedMessage, isDisabled]);\n\n  // Save draft on chat change. Should be layout effect to read correct html on cleanup\n  useLayoutEffect(() => {\n    if (isDisabled) {\n      return undefined;\n    }\n\n    return () => {\n      if (!isEditing) {\n        updateDraft({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraft, isDisabled]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isDisabled || isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraft();\n\n      return;\n    }\n\n    const scopedСhatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedСhatId && threadIdRef.current === scopedThreadId) {\n        updateDraft();\n      }\n    });\n  }, [chatIdRef, getHtml, isDisabled, runDebouncedForSaveDraft, threadIdRef, updateDraft]);\n\n  useBackgroundMode(updateDraft);\n  useBeforeUnload(updateDraft);\n};\n\nexport default useDraft;\n","import { useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\nimport { useDebouncedResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useBackgroundMode from '../../../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/window/useBeforeUnload';\n\nconst URL_ENTITIES = new Set<string>([ApiMessageEntityTypes.TextUrl, ApiMessageEntityTypes.Url]);\nconst DEBOUNCE_MS = 300;\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  chatId: string,\n  threadId: ThreadId,\n  type: MessageListType,\n  draft?: ApiDraft,\n  editingDraft?: ApiFormattedText,\n): [VoidFunction, VoidFunction, boolean] => {\n  const {\n    editMessage, setEditingDraft, toggleMessageWebPage, openDeleteMessageModal,\n  } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState(false);\n\n  const replyingToId = draft?.replyInfo?.replyToMsgId;\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n\n    requestNextMutation(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, replyingToId, editingDraft, setHtml]);\n\n  useEffect(() => {\n    if (!editedMessage) {\n      return;\n    }\n\n    const shouldSetNoWebPage = !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type));\n\n    toggleMessageWebPage({\n      chatId,\n      threadId,\n      noWebPage: shouldSetNoWebPage,\n    });\n  }, [chatId, threadId, editedMessage]);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseHtmlAsFormattedText(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    if (!editedMessage) return false;\n\n    const edited = parseHtmlAsFormattedText(getHtml());\n    return !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type))\n      && !(edited.entities?.some((entity) => URL_ENTITIES.has(entity.type)));\n  }, [editedMessage, getHtml], DEBOUNCE_MS, true);\n\n  const getShouldResetNoWebPageDebounced = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage || prevEditedMessage?.id !== editedMessage.id) {\n      return;\n    }\n\n    if (getShouldResetNoWebPageDebounced()) {\n      toggleMessageWebPage({\n        chatId,\n        threadId,\n        noWebPage: false,\n      });\n    }\n  }, [editedMessage, chatId, getHtml, threadId, getShouldResetNoWebPageDebounced]);\n\n  const restoreNewDraftAfterEditing = useLastCallback(() => {\n    if (!draft) return;\n\n    // Run one frame after editing draft reset\n    requestMeasure(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft.text));\n\n      // Wait one more frame until new HTML is rendered\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    });\n  });\n\n  const handleEditCancel = useLastCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  });\n\n  const handleEditComplete = useLastCallback(() => {\n    const { text, entities } = parseHtmlAsFormattedText(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteMessageModal({\n        chatId,\n        messageIds: [editedMessage.id],\n        isSchedule: type === 'scheduled',\n      });\n      return;\n    }\n\n    editMessage({\n      messageList: { chatId, threadId, type },\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  });\n\n  const handleBlur = useLastCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseHtmlAsFormattedText(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  });\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport memoized from '../../../../util/memoized';\n\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/is;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n  }, [username, resetInlineBot]);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    switchWebview,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm || switchWebview) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useLastCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  });\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    switchWebview,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useRef } from '@teact';\nimport { getActions } from '../../../../global';\n\nimport type { ThreadId } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\nimport {\n  type ApiFormattedText,\n  type ApiMessageEntityTextUrl,\n  ApiMessageEntityTypes,\n} from '../../../../api/types';\n\nimport { RE_LINK_TEMPLATE } from '../../../../config';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\n\nimport { useDebouncedResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nexport default function useLoadLinkPreview({\n  getHtml,\n  chatId,\n  threadId,\n}: {\n  chatId: string;\n  threadId: ThreadId;\n  getHtml: Signal<string>;\n}) {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const formattedTextWithLinkRef = useRef<ApiFormattedText>();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const formattedText = parseHtmlAsFormattedText(getHtml());\n    const linkEntity = formattedText.entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    formattedTextWithLinkRef.current = formattedText;\n\n    return linkEntity?.url || formattedText.text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n    const formattedText = formattedTextWithLinkRef.current;\n\n    if (link) {\n      loadWebPagePreview({ text: formattedText! });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/browser/windowEnvironment';\nimport parseEmojiOnlyString from '../../../../util/emoji/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1])\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled || !isActive) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, isActive, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: (volume: number) => void) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: (volume: number) => void) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestMeasure(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachmentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default AttachmentModalAsync;\n","import {\n  memo, useEffect,\n  useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiAttachMenuPeerType, ApiMessage } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MessageListType, ThemeKey, ThreadId } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, DEBUG_LOG_FILENAME, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport {\n  getMessageAudio, getMessageDocument,\n  getMessagePhoto,\n  getMessageVideo, getMessageVoice,\n} from '../../../global/helpers';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canAttachToDoLists: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots?: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  shouldCollectDebugLogs?: boolean;\n  theme: ThemeKey;\n  canEditMedia?: boolean;\n  editingMessage?: ApiMessage;\n  messageListType?: MessageListType;\n  paidMessagesStars?: number;\n  onFileSelect: (files: File[]) => void;\n  onPollCreate: NoneToVoidFunction;\n  onTodoListCreate: NoneToVoidFunction;\n  onMenuOpen: NoneToVoidFunction;\n  onMenuClose: NoneToVoidFunction;\n};\n\nconst AttachMenu = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canAttachToDoLists,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  theme,\n  shouldCollectDebugLogs,\n  canEditMedia,\n  editingMessage,\n  messageListType,\n  paidMessagesStars,\n  onFileSelect,\n  onMenuOpen,\n  onMenuClose,\n  onPollCreate,\n  onTodoListCreate,\n}: OwnProps) => {\n  const {\n    updateAttachmentSettings,\n  } = getActions();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  const isMenuOpen = isAttachMenuOpen || isAttachmentBotMenuOpen;\n\n  const isPhotoOrVideo = editingMessage && editingMessage?.groupedId\n    && Boolean(getMessagePhoto(editingMessage)\n      || Boolean(getMessageVideo(editingMessage)));\n  const isFile = editingMessage && editingMessage?.groupedId && Boolean(getMessageAudio(editingMessage)\n    || getMessageVoice(editingMessage) || getMessageDocument(editingMessage));\n\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  useEffect(() => {\n    if (isMenuOpen) {\n      onMenuOpen();\n    } else {\n      onMenuClose();\n    }\n  }, [isMenuOpen, onMenuClose, onMenuOpen]);\n\n  const handleToggleAttachMenu = useLastCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  });\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles);\n    }\n  });\n\n  const handleQuickSelect = useLastCallback(() => {\n    updateAttachmentSettings({ shouldCompress: true });\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_PHOTO_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e),\n    );\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    updateAttachmentSettings({ shouldCompress: false });\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e));\n  });\n\n  const handleSendLogs = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    onFileSelect([file]);\n  });\n\n  const bots = useMemo(() => {\n    return attachBots\n      ? Object.values(attachBots).filter((bot) => {\n        if (!peerType || !bot.isForAttachMenu) return false;\n        if (peerType === 'bots' && bot.id === chatId\n          && bot.attachMenuPeerTypes && bot.attachMenuPeerTypes.includes('self')) {\n          return true;\n        }\n        return bot.attachMenuPeerTypes!.includes(peerType);\n      })\n      : undefined;\n  }, [attachBots, chatId, peerType]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      {\n        editingMessage && canEditMedia ? (\n          <ResponsiveHoverButton\n            id=\"replace-menu-button\"\n            className={buildClassName('AttachMenu--button composer-action-button', isAttachMenuOpen && 'activated')}\n            round\n            color=\"translucent\"\n            onActivate={handleToggleAttachMenu}\n            ariaLabel=\"Replace an attachment\"\n            ariaControls=\"replace-menu-controls\"\n            hasPopup\n          >\n            <Icon name=\"replace\" />\n          </ResponsiveHoverButton>\n        ) : (\n          <ResponsiveHoverButton\n            id=\"attach-menu-button\"\n            disabled={Boolean(editingMessage)}\n            className={buildClassName('AttachMenu--button composer-action-button', isAttachMenuOpen && 'activated')}\n            round\n            color=\"translucent\"\n            onActivate={handleToggleAttachMenu}\n            ariaLabel=\"Add an attachment\"\n            ariaControls=\"attach-menu-controls\"\n            hasPopup\n          >\n            <Icon name=\"attach\" />\n          </ResponsiveHoverButton>\n        )\n      }\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>\n            {lang(messageListType === 'scheduled' && paidMessagesStars\n              ? 'DescriptionScheduledPaidMediaNotAllowed'\n              : 'DescriptionRestrictedMedia')}\n          </MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && !isFile && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {oldLang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {((canSendDocuments || canSendAudios) && !isPhotoOrVideo)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {oldLang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n            {canSendDocuments && shouldCollectDebugLogs && (\n              <MenuItem icon=\"bug\" onClick={handleSendLogs}>\n                {oldLang('DebugSendLogs')}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {canAttachPolls && !editingMessage && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{oldLang('Poll')}</MenuItem>\n        )}\n        {canAttachToDoLists && !editingMessage && (\n          <MenuItem icon=\"select\" onClick={onTodoListCreate}>{lang('TitleToDoList')}</MenuItem>\n        )}\n\n        {!editingMessage && !canEditMedia && !isScheduled && bots?.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BotCommandMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default BotCommandMenuAsync;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport renderKeyboardButtonText from './helpers/renderKeyboardButtonText';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  threadId?: ThreadId;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, threadId, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const lang = useOldLang();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  const buttonTexts = useMemo(() => {\n    const texts: TeactNode[][] = [];\n    message?.keyboardButtons!.forEach((row) => {\n      texts.push(row.map((button) => renderKeyboardButtonText(lang, button)));\n    });\n\n    return texts;\n  }, [lang, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content custom-scroll\">\n        {message.keyboardButtons.map((row, i) => (\n          <div className=\"row\">\n            {row.map((button, j) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n\n                onClick={() => clickBotInlineButton({\n                  chatId: message.chatId, messageId: message.id, threadId, button,\n                })}\n              >\n                {buttonTexts?.[i][j]}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): Complete<StateProps> => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n\n    const message = chatId ? selectChatMessage(global, chatId, messageId) : undefined;\n    return {\n      message,\n    };\n  },\n)(BotKeyboardMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  const textRef = useRef<HTMLSpanElement>();\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('composer-action-button bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <Icon name=\"webapp\" className={buildClassName('bot-menu-icon', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{renderText(text)}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatCommandTooltip';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatCommandTooltip = useModuleLoader(Bundles.Extra, 'ChatCommandTooltip', !isOpen);\n\n  return ChatCommandTooltip ? <ChatCommandTooltip {...props} /> : undefined;\n};\n\nexport default ChatCommandTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiInputMessageReplyInfo, ApiInputSuggestedPostInfo, ApiMessage, ApiPeer,\n} from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types/index';\n\nimport { isChatChannel, stripCustomEmoji } from '../../../global/helpers';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectSender,\n  selectTabState,\n} from '../../../global/selectors';\nimport { selectIsMediaNsfw } from '../../../global/selectors/media';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { unique } from '../../../util/iteratees';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport { ClosableEmbeddedMessage } from '../../common/embedded/EmbeddedMessage';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyInfo?: ApiInputMessageReplyInfo;\n  suggestedPostInfo?: ApiInputSuggestedPostInfo;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n  isContextMenuDisabled?: boolean;\n  isReplyToDiscussion?: boolean;\n  isInChangingRecipientMode?: boolean;\n  shouldPreventComposerAnimation?: boolean;\n  senderChat?: ApiChat;\n  isSenderChannel?: boolean;\n  currentUserId?: string;\n  forwardMessageIds?: number[];\n  fromChatId?: string;\n  isMediaNsfw?: boolean;\n};\n\ntype OwnProps = {\n  shouldForceShowEditing?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  onClear?: () => void;\n};\n\nconst CLOSE_DURATION = 350;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyInfo,\n  suggestedPostInfo,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  isContextMenuDisabled,\n  isReplyToDiscussion,\n  isInChangingRecipientMode,\n  shouldPreventComposerAnimation,\n  senderChat,\n  chatId,\n  currentUserId,\n  isSenderChannel,\n  forwardMessageIds,\n  fromChatId,\n  isMediaNsfw,\n  onClear,\n}) => {\n  const {\n    resetDraftReplyInfo,\n    resetDraftSuggestedPostInfo,\n    updateDraftReplyInfo,\n    setEditingId,\n    focusMessage,\n    changeRecipient,\n    openChatOrTopicWithReplyInDraft,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n    setShouldPreventComposerAnimation,\n    openSuggestMessageModal,\n  } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const isReplyToTopicStart = message?.content.action?.type === 'topicCreate';\n  const isShowingReply = replyInfo && !shouldForceShowEditing;\n  const isReplyWithQuote = Boolean(replyInfo?.quoteText);\n  const isShowingSuggestedPost = Boolean(suggestedPostInfo) && !shouldForceShowEditing;\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n\n  const selectSenderFromForwardedMessage = useLastCallback((forwardedMessage: ApiMessage) => {\n    const global = getGlobal();\n    sender = selectForwardedSender(global, forwardedMessage);\n    if (!sender) {\n      sender = selectSender(global, forwardedMessage);\n    }\n    return sender;\n  });\n\n  const forwardSenders = useMemo(() => {\n    if (!isForwarding) return undefined;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(getGlobal(), fromChatId!, id))\n      .filter(Boolean);\n    const senders = forwardedMessages?.map((m) => selectSenderFromForwardedMessage(m)).filter(Boolean);\n    return senders ? unique(senders) : undefined;\n  }, [isForwarding, forwardMessageIds, fromChatId]);\n\n  const isShown = (() => {\n    if (isInChangingRecipientMode) return false;\n    if (message && (replyInfo || editingId)) return true;\n    if (forwardSenders && isForwarding) return true;\n    if (isShowingSuggestedPost) return true;\n    return false;\n  })();\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransitionDeprecated(\n    isShown && !isReplyToTopicStart && !isReplyToDiscussion,\n    undefined,\n    !shouldAnimate,\n    undefined,\n    !shouldAnimate,\n    CLOSE_DURATION,\n    !shouldAnimate,\n  );\n  useEffect(() => {\n    if (shouldPreventComposerAnimation) {\n      setShouldPreventComposerAnimation({ shouldPreventComposerAnimation: false });\n    }\n  });\n\n  const clearEmbedded = useLastCallback(() => {\n    if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    } else if (isShowingSuggestedPost) {\n      resetDraftSuggestedPostInfo();\n      resetDraftReplyInfo();\n    } else if (replyInfo && !shouldForceShowEditing) {\n      resetDraftReplyInfo();\n    }\n    onClear?.();\n  });\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const focusMessageFromDraft = () => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  };\n  const handleMessageClick = useLastCallback((e: React.MouseEvent): void => {\n    if (suggestedPostInfo) {\n      openSuggestMessageModal({ chatId });\n      return;\n    }\n    handleContextMenu(e);\n  });\n\n  const handleClearClick = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n    handleContextMenuHide();\n  });\n  const buildAutoCloseMenuItemHandler = (action: NoneToVoidFunction) => {\n    return () => {\n      handleContextMenuClose();\n      action();\n    };\n  };\n  const handleForwardToAnotherChatClick = useLastCallback(buildAutoCloseMenuItemHandler(changeRecipient));\n  const handleShowMessageClick = useLastCallback(buildAutoCloseMenuItemHandler(focusMessageFromDraft));\n  const handleRemoveQuoteClick = useLastCallback(buildAutoCloseMenuItemHandler(\n    () => updateDraftReplyInfo({ quoteText: undefined }),\n  ));\n  const handleChangeReplyRecipientClick = useLastCallback(buildAutoCloseMenuItemHandler(changeRecipient));\n  const handleReplyInSenderChat = useLastCallback(() => {\n    handleContextMenuClose();\n    if (!sender) return;\n    openChatOrTopicWithReplyInDraft({ chatId: sender.id });\n  });\n  const handleDoNotReplyClick = useLastCallback(buildAutoCloseMenuItemHandler(clearEmbedded));\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'));\n\n  useEffect(() => {\n    if (!shouldRender) {\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, handleContextMenuHide, shouldRender]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n  const renderingSender = useCurrentOrPrev(sender, true);\n  const innerClassName = buildClassName(\n    'ComposerEmbeddedMessage_inner',\n    getPeerColorClass(renderingSender),\n  );\n\n  const leftIcon = useMemo(() => {\n    if (editingId) {\n      return 'edit';\n    }\n    if (isShowingSuggestedPost) {\n      return 'cash-circle';\n    }\n    if (isForwarding) {\n      return 'forward';\n    }\n    if (isShowingReply) {\n      return 'reply';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, isShowingReply, isShowingSuggestedPost]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? oldLang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  const renderingLeftIcon = useCurrentOrPrev(leftIcon, true);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const canReplyInSenderChat = sender && !isSenderChannel && chatId !== sender.id && sender.id !== currentUserId;\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu}>\n      <div className={innerClassName}>\n        <div className=\"embedded-left-icon\" onClick={handleContextMenu}>\n          {renderingLeftIcon && <Icon name={renderingLeftIcon} />}\n          {Boolean(replyInfo?.quoteText) && (\n            <Icon name=\"quote\" className=\"quote-reply\" />\n          )}\n        </div>\n        <ClosableEmbeddedMessage\n          isOpen={isShown}\n          className=\"inside-input\"\n          replyInfo={replyInfo}\n          suggestedPostInfo={suggestedPostInfo}\n          isMediaNsfw={isMediaNsfw}\n          isInComposer\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          composerForwardSenders={forwardSenders}\n          customText={customText}\n          noCaptions={noCaptions}\n          title={(editingId && !isShowingReply) ? oldLang('EditMessage')\n            : noAuthors ? oldLang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          senderChat={senderChat}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={oldLang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        {(isShowingReply || isForwarding) && !isContextMenuDisabled && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            anchor={contextMenuAnchor}\n            getTriggerElement={getTriggerElement}\n            getRootElement={getRootElement}\n            getMenuElement={getMenuElement}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            {isForwarding && (\n              <>\n                <MenuItem\n                  icon={!noAuthors ? 'message-succeeded' : undefined}\n                  customIcon={noAuthors ? <Icon name=\"placeholder\" /> : undefined}\n\n                  onClick={() => setForwardNoAuthors({\n                    noAuthors: false,\n                  })}\n                >\n                  {oldLang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n                </MenuItem>\n                <MenuItem\n                  icon={noAuthors ? 'message-succeeded' : undefined}\n                  customIcon={!noAuthors ? <Icon name=\"placeholder\" /> : undefined}\n\n                  onClick={() => setForwardNoAuthors({\n                    noAuthors: true,\n                  })}\n                >\n                  {oldLang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n                </MenuItem>\n                {forwardsHaveCaptions && (\n                  <>\n                    <MenuSeparator />\n                    <MenuItem\n                      icon={!noCaptions ? 'message-succeeded' : undefined}\n                      customIcon={noCaptions ? <Icon name=\"placeholder\" /> : undefined}\n\n                      onClick={() => setForwardNoCaptions({\n                        noCaptions: false,\n                      })}\n                    >\n                      {oldLang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                    </MenuItem>\n                    <MenuItem\n                      icon={noCaptions ? 'message-succeeded' : undefined}\n                      customIcon={!noCaptions ? <Icon name=\"placeholder\" /> : undefined}\n\n                      onClick={() => setForwardNoCaptions({\n                        noCaptions: true,\n                      })}\n                    >\n                      {oldLang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                    </MenuItem>\n                  </>\n                )}\n                <MenuSeparator />\n                <MenuItem icon=\"replace\" onClick={handleForwardToAnotherChatClick}>\n                  {oldLang('ForwardAnotherChat')}\n                </MenuItem>\n              </>\n            )}\n            {isShowingReply && (\n              <>\n                <MenuItem\n                  icon=\"show-message\"\n                  onClick={handleShowMessageClick}\n                >\n                  {oldLang('Message.Context.Goto')}\n                </MenuItem>\n                {isReplyWithQuote && (\n                  <MenuItem\n                    icon=\"remove-quote\"\n                    onClick={handleRemoveQuoteClick}\n                  >\n                    {oldLang('RemoveQuote')}\n                  </MenuItem>\n                )}\n                {canReplyInSenderChat && (\n                  <MenuItem icon=\"user\" onClick={handleReplyInSenderChat}>\n                    {lang('ReplyInPrivateMessage')}\n                  </MenuItem>\n                )}\n                <MenuItem icon=\"replace\" onClick={handleChangeReplyRecipientClick}>\n                  {oldLang('ReplyToAnotherChat')}\n                </MenuItem>\n                <MenuItem icon=\"delete\" onClick={handleDoNotReplyClick}>\n                  {oldLang('DoNotReply')}\n                </MenuItem>\n              </>\n            )}\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    shouldForceShowEditing, chatId, threadId, messageListType,\n  }): Complete<StateProps> => {\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n      isShareMessageModalShown: isModalShown,\n      shouldPreventComposerAnimation,\n    } = selectTabState(global);\n\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = selectCanAnimateInterface(global) && !shouldPreventComposerAnimation;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    const draft = selectDraft(global, chatId, threadId);\n    const replyInfo = draft?.replyInfo;\n    const suggestedPostInfo = draft?.suggestedPostInfo;\n    const replyToPeerId = replyInfo?.replyToPeerId;\n    const senderChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n\n    let message: ApiMessage | undefined;\n    if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    } else if (replyInfo && !shouldForceShowEditing) {\n      message = selectChatMessage(global, replyInfo.replyToPeerId || chatId, replyInfo.replyToMsgId);\n    }\n\n    let sender: ApiPeer | undefined;\n\n    const selectSenderFromForwardedMessage = (forwardedMessage: ApiMessage) => {\n      sender = selectForwardedSender(global, forwardedMessage);\n      if (!sender) {\n        sender = selectSender(global, forwardedMessage);\n      }\n      return sender;\n    };\n\n    if (editingId && message) {\n      sender = selectSender(global, message);\n    } else if (isForwarding) {\n      let forwardSenders = forwardedMessages?.map((m) => selectSenderFromForwardedMessage(m)).filter(Boolean);\n      forwardSenders = forwardSenders ? unique(forwardSenders) : undefined;\n      sender = forwardSenders?.length === 1 ? forwardSenders?.[0] : undefined;\n    } else if (replyInfo && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && (!forwardInfo?.hiddenUserName || Boolean(replyInfo.quoteText))) {\n        sender = selectSender(global, message);\n      }\n    }\n\n    const chat = sender && selectChat(global, sender.id);\n    const isSenderChannel = chat && isChatChannel(chat);\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    const isContextMenuDisabled = isForwarding && forwardMessageIds!.length === 1\n      && Boolean(message?.content.storyData);\n\n    const isReplyToDiscussion = replyInfo?.replyToMsgId === threadId && !replyInfo.replyToPeerId;\n\n    const isMediaNsfw = message && selectIsMediaNsfw(global, message);\n\n    return {\n      replyInfo,\n      suggestedPostInfo,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isContextMenuDisabled,\n      isReplyToDiscussion,\n      isInChangingRecipientMode: isModalShown,\n      shouldPreventComposerAnimation,\n      senderChat,\n      currentUserId: global.currentUserId,\n      isSenderChannel,\n      forwardMessageIds,\n      fromChatId,\n      isMediaNsfw,\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './DropArea';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default DropAreaAsync;\nexport { DropAreaState } from './DropArea';\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InlineBotTooltip';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default InlineBotTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MentionTooltip';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default MentionTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PollModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default PollModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SendAsMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default SendAsMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerTooltip';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ToDoListModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ToDoListModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ToDoListModal = useModuleLoader(Bundles.Extra, 'ToDoListModal', !modal);\n\n  return ToDoListModal ? <ToDoListModal {...props} /> : undefined;\n};\n\nexport default ToDoListModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O3di3ULC\",\"no-page-transitions\":\"UDdgVrUQ\",\"noPageTransitions\":\"UDdgVrUQ\",\"select-mode-active\":\"Y5TInySi\",\"selectModeActive\":\"Y5TInySi\",\"middle-column-footer\":\"XlGyc4tC\",\"middleColumnFooter\":\"XlGyc4tC\",\"no-message-composer-animations\":\"eDMArdYq\",\"noMessageComposerAnimations\":\"eDMArdYq\",\"ComposerEmbeddedMessage\":\"z4RvByc2\",\"composerEmbeddedMessage\":\"z4RvByc2\",\"inner\":\"m3DBx9f5\",\"contextMenu\":\"zqTOc7LU\",\"clear\":\"yhxytYkd\",\"left-icon\":\"vFWsMwfP\",\"leftIcon\":\"vFWsMwfP\",\"preview\":\"otSxF62k\",\"previewText\":\"itmZe2qi\",\"previewImageContainer\":\"VvwZOug9\",\"previewImage\":\"b0A9Zfoa\",\"siteName\":\"ER149gdz\",\"siteDescription\":\"FSYSqC60\",\"interactive\":\"G5_7x_Hn\"};","import { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiWebPage,\n  ApiWebPageFull,\n  ApiWebPagePending,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ThreadId, WebPageMediaSize } from '../../../types';\n\nimport {\n  getMediaHash,\n  getWebPageAudio,\n  getWebPageDocument,\n  getWebPagePhoto,\n  getWebPageVideo,\n} from '../../../global/helpers';\nimport { selectNoWebPage, selectTabState, selectWebPage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport styles from './WebPagePreview.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  isEditing: boolean;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPageFull | ApiWebPagePending;\n  noWebPage?: boolean;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst WebPagePreview = ({\n  chatId,\n  threadId,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  attachmentSettings,\n  isEditing,\n}: OwnProps & StateProps) => {\n  const {\n    toggleMessageWebPage,\n    updateAttachmentSettings,\n  } = getActions();\n\n  const lang = useLang();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const isInvertedMedia = attachmentSettings.isInvertedMedia;\n  const isSmallerMedia = attachmentSettings.webPageMediaSize === 'small';\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && !noWebPage && !isDisabled);\n  }, [isDisabled, noWebPage, webPagePreview]);\n  const { shouldRender } = useShowTransition({ isOpen: isShown, ref, withShouldRender: true });\n\n  const hasMediaSizeOptions = webPagePreview?.webpageType === 'full' && webPagePreview.hasLargeMedia;\n\n  const prevWebPageRef = useRef<ApiWebPage | undefined>(webPagePreview);\n\n  if (webPagePreview && webPagePreview !== prevWebPageRef.current) {\n    prevWebPageRef.current = webPagePreview;\n  }\n\n  const renderingWebPage = webPagePreview || prevWebPageRef.current;\n\n  const isFullWebPage = renderingWebPage?.webpageType === 'full';\n\n  const thumbnailUrl = useThumbnail(isFullWebPage ? { content: renderingWebPage } : undefined);\n  const previewMedia = getWebPagePhoto(renderingWebPage) || getWebPageVideo(renderingWebPage)\n    || getWebPageAudio(renderingWebPage) || getWebPageDocument(renderingWebPage);\n  const previewMediaHash = previewMedia && getMediaHash(previewMedia, 'pictogram');\n  const previewMediaUrl = useMedia(previewMediaHash);\n\n  const { shouldRender: shouldRenderPreviewMedia, ref: previewMediaRef } = useShowTransition<HTMLImageElement>({\n    isOpen: Boolean(previewMediaUrl),\n    withShouldRender: true,\n    noCloseTransition: true,\n  });\n\n  const hasPreviewMedia = Boolean(previewMediaUrl || shouldRenderPreviewMedia);\n\n  const handleClearWebpagePreview = useLastCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide, handleBeforeContextMenu,\n  } = useContextMenuHandlers(ref, isEditing, true);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(\n    () => ref.current!.querySelector(`.${styles.contextMenu} .bubble`),\n  );\n\n  const handlePreviewClick = useLastCallback((e: React.MouseEvent): void => {\n    handleContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (!shouldRender || !renderingWebPage) {\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, handleContextMenuHide, shouldRender, renderingWebPage]);\n\n  function updateIsInvertedMedia(value?: true) {\n    updateAttachmentSettings({ isInvertedMedia: value });\n  }\n\n  function updateIsLargerMedia(value?: WebPageMediaSize) {\n    updateAttachmentSettings({ webPageMediaSize: value });\n  }\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getMenuElement={getMenuElement}\n        className={styles.contextMenu}\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        autoClose\n      >\n        <>\n          {\n            isInvertedMedia ? (\n              <MenuItem icon=\"move-caption-up\" onClick={() => updateIsInvertedMedia(undefined)}>\n                {lang('ContextMoveTextUp')}\n              </MenuItem>\n            ) : (\n              <MenuItem icon=\"move-caption-down\" onClick={() => updateIsInvertedMedia(true)}>\n                {lang('ContextMoveTextDown')}\n              </MenuItem>\n            )\n          }\n          {hasMediaSizeOptions && (\n            isSmallerMedia ? (\n              <MenuItem icon=\"expand\" onClick={() => updateIsLargerMedia('large')}>\n                {lang('ContextLinkLargerMedia')}\n              </MenuItem>\n            ) : (\n              <MenuItem icon=\"collapse\" onClick={() => updateIsLargerMedia('small')}>\n                {lang('ContextLinkSmallerMedia')}\n              </MenuItem>\n            )\n          )}\n          <MenuItem\n            icon=\"delete\"\n            onClick={handleClearWebpagePreview}\n          >\n            {lang('ContextLinkRemovePreview')}\n          </MenuItem>\n        </>\n      </Menu>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        !isEditing && styles.interactive,\n      )}\n      ref={ref}\n    >\n      <div className={styles.inner}>\n        <div className={styles.leftIcon} onClick={handlePreviewClick}>\n          <Icon name=\"link\" />\n        </div>\n        {renderingWebPage && renderingWebPage.webpageType !== 'empty' && (\n          <PeerColorWrapper\n            noUserColors\n            className={styles.preview}\n            onContextMenu={handleContextMenu}\n            onMouseDown={handleBeforeContextMenu}\n            onClick={handlePreviewClick}\n          >\n            {hasPreviewMedia && (\n              <div className={styles.previewImageContainer}>\n                {thumbnailUrl && (\n                  <img src={thumbnailUrl} alt=\"\" className={styles.previewImage} />\n                )}\n                {shouldRenderPreviewMedia && (\n                  <img ref={previewMediaRef} src={previewMediaUrl} alt=\"\" className={styles.previewImage} />\n                )}\n              </div>\n            )}\n            <div className={styles.previewText}>\n              <span className={styles.siteName}>\n                {isFullWebPage\n                  ? (renderingWebPage.siteName || renderingWebPage.url)\n                  : lang('Loading')}\n              </span>\n              <span className={styles.siteDescription}>\n                {isFullWebPage\n                  ? (renderingWebPage.description || lang(getMediaTypeKey(renderingWebPage)))\n                  : renderingWebPage.url}\n              </span>\n            </div>\n          </PeerColorWrapper>\n        )}\n        <Button\n          className={styles.clear}\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('AccLinkRemovePreview')}\n          onClick={handleClearWebpagePreview}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        {!isEditing && renderContextMenu()}\n      </div>\n    </div>\n  );\n};\n\nfunction getMediaTypeKey(webPage: ApiWebPageFull) {\n  if (webPage.photo) return 'AttachPhoto';\n  if (webPage.video) return 'AttachVideo';\n  if (webPage.audio) return 'AttachMusic';\n  if (webPage.document) return 'AttachDocument';\n  if (webPage.story) return 'AttachStory';\n  return 'LinkPreview';\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    const {\n      attachmentSettings,\n    } = global;\n\n    const webPagePreview = tabState.webPagePreviewId ? selectWebPage(global, tabState.webPagePreviewId) : undefined;\n\n    return {\n      webPagePreview: webPagePreview?.webpageType === 'empty' ? undefined : webPagePreview,\n      noWebPage,\n      attachmentSettings,\n    };\n  },\n)(WebPagePreview));\n","import type { FC, TeactNode } from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useSignal, useState } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAttachment,\n  ApiAttachMenuPeerType,\n  ApiAvailableEffect,\n  ApiAvailableReaction,\n  ApiBotCommand,\n  ApiBotInlineMediaResult,\n  ApiBotInlineResult,\n  ApiBotMenuButton,\n  ApiChat,\n  ApiChatFullInfo,\n  ApiDisallowedGifts,\n  ApiDraft,\n  ApiFormattedText,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewMediaTodo,\n  ApiNewPoll,\n  ApiPeer,\n  ApiQuickReply,\n  ApiReaction,\n  ApiStealthMode,\n  ApiSticker,\n  ApiTopic,\n  ApiUser,\n  ApiVideo,\n  ApiWebPage,\n} from '../../api/types';\nimport type { GlobalState, TabState } from '../../global/types';\nimport type {\n  IAnchorPosition,\n  InlineBotSettings,\n  MessageList,\n  MessageListType,\n  ThemeKey,\n  ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  HEART_REACTION,\n  MAX_UPLOAD_FILEPART_SIZE,\n  ONE_TIME_MEDIA_TTL_SECONDS,\n  SCHEDULED_WHEN_ONLINE,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  STARS_CURRENCY_CODE,\n} from '../../config';\nimport { requestMeasure, requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  canEditMedia,\n  getAllowedAttachmentOptions,\n  getReactionKey,\n  getStoryKey,\n  isChatAdmin,\n  isChatChannel,\n  isChatPublic,\n  isChatSuperGroup,\n  isSameReaction,\n  isSystemBot,\n} from '../../global/helpers';\nimport { getChatNotifySettings } from '../../global/helpers/notifications';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectBot,\n  selectCanPlayAnimatedEmojis,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatType,\n  selectCurrentMessageList,\n  selectCustomEmoji,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingMessage,\n  selectEditingScheduledDraft,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsPremiumPurchaseBlocked,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectNoWebPage,\n  selectPeer,\n  selectPeerPaidMessagesStars,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectRequestedDraft,\n  selectRequestedDraftFiles,\n  selectTabState,\n  selectTheme,\n  selectTopicFromMessage,\n  selectUser,\n  selectUserFullInfo,\n  selectWebPage,\n} from '../../global/selectors';\nimport { selectCurrentLimit } from '../../global/selectors/limits';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_IOS, IS_VOICE_RECORDING_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../util/dates/dateFormat';\nimport { processDeepLink } from '../../util/deeplink';\nimport { tryParseDeepLink } from '../../util/deepLinkParser';\nimport deleteLastCharacterOutsideSelection from '../../util/deleteLastCharacterOutsideSelection';\nimport { processMessageInputForCustomEmoji } from '../../util/emoji/customEmojiManager';\nimport { isUserId } from '../../util/entities/ids';\nimport focusEditableElement from '../../util/focusEditableElement';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport parseHtmlAsFormattedText from '../../util/parseHtmlAsFormattedText';\nimport { insertHtmlInSelection } from '../../util/selection';\nimport { getServerTime } from '../../util/serverTime';\nimport windowSize from '../../util/windowSize';\nimport { DEFAULT_MAX_MESSAGE_LENGTH } from '../../limits';\nimport applyIosAutoCapitalizationFix from '../middle/composer/helpers/applyIosAutoCapitalizationFix';\nimport buildAttachment, { prepareAttachmentsToSend } from '../middle/composer/helpers/buildAttachment';\nimport { buildCustomEmojiHtml } from '../middle/composer/helpers/customEmoji';\nimport { isSelectionInsideInput } from '../middle/composer/helpers/selection';\nimport { getPeerColorClass } from './helpers/peerColor';\nimport renderText from './helpers/renderText';\nimport { getTextWithEntitiesAsHtml } from './helpers/renderTextWithEntities';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useGetSelectionRange from '../../hooks/useGetSelectionRange';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useSchedule from '../../hooks/useSchedule';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAttachmentModal from '../middle/composer/hooks/useAttachmentModal';\nimport useChatCommandTooltip from '../middle/composer/hooks/useChatCommandTooltip';\nimport useClipboardPaste from '../middle/composer/hooks/useClipboardPaste';\nimport useCustomEmojiTooltip from '../middle/composer/hooks/useCustomEmojiTooltip';\nimport useDraft from '../middle/composer/hooks/useDraft';\nimport useEditing from '../middle/composer/hooks/useEditing';\nimport useEmojiTooltip from '../middle/composer/hooks/useEmojiTooltip';\nimport useInlineBotTooltip from '../middle/composer/hooks/useInlineBotTooltip';\nimport useLoadLinkPreview from '../middle/composer/hooks/useLoadLinkPreview';\nimport useMentionTooltip from '../middle/composer/hooks/useMentionTooltip';\nimport usePaidMessageConfirmation from '../middle/composer/hooks/usePaidMessageConfirmation';\nimport useStickerTooltip from '../middle/composer/hooks/useStickerTooltip';\nimport useVoiceRecording from '../middle/composer/hooks/useVoiceRecording';\n\nimport AttachmentModal from '../middle/composer/AttachmentModal.async';\nimport AttachMenu from '../middle/composer/AttachMenu';\nimport BotCommandMenu from '../middle/composer/BotCommandMenu.async';\nimport BotKeyboardMenu from '../middle/composer/BotKeyboardMenu';\nimport BotMenuButton from '../middle/composer/BotMenuButton';\nimport ChatCommandTooltip from '../middle/composer/ChatCommandTooltip.async';\nimport ComposerEmbeddedMessage from '../middle/composer/ComposerEmbeddedMessage';\nimport CustomEmojiTooltip from '../middle/composer/CustomEmojiTooltip.async';\nimport CustomSendMenu from '../middle/composer/CustomSendMenu.async';\nimport DropArea, { DropAreaState } from '../middle/composer/DropArea.async';\nimport EmojiTooltip from '../middle/composer/EmojiTooltip.async';\nimport InlineBotTooltip from '../middle/composer/InlineBotTooltip.async';\nimport MentionTooltip from '../middle/composer/MentionTooltip.async';\nimport MessageInput from '../middle/composer/MessageInput';\nimport PollModal from '../middle/composer/PollModal.async';\nimport SendAsMenu from '../middle/composer/SendAsMenu.async';\nimport StickerTooltip from '../middle/composer/StickerTooltip.async';\nimport SymbolMenuButton from '../middle/composer/SymbolMenuButton';\nimport ToDoListModal from '../middle/composer/ToDoListModal.async';\nimport WebPagePreview from '../middle/composer/WebPagePreview';\nimport MessageEffect from '../middle/message/MessageEffect';\nimport ReactionSelector from '../middle/message/reactions/ReactionSelector';\nimport Button from '../ui/Button';\nimport ResponsiveHoverButton from '../ui/ResponsiveHoverButton';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport AnimatedCounter from './AnimatedCounter';\nimport Avatar from './Avatar';\nimport Icon from './icons/Icon';\nimport PaymentMessageConfirmDialog from './PaymentMessageConfirmDialog';\nimport ReactionAnimatedEmoji from './reactions/ReactionAnimatedEmoji';\n\nimport './Composer.scss';\n\ntype ComposerType = 'messageList' | 'story';\n\ntype OwnProps = {\n  type: ComposerType;\n  chatId: string;\n  threadId: ThreadId;\n  storyId?: number;\n  messageListType: MessageListType;\n  dropAreaState?: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  inputId: string;\n  editableInputCssSelector: string;\n  editableInputId: string;\n  className?: string;\n  inputPlaceholder?: TeactNode | string;\n  onDropHide?: NoneToVoidFunction;\n  onForward?: NoneToVoidFunction;\n  onFocus?: NoneToVoidFunction;\n  onBlur?: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    isOnActiveTab: boolean;\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    chatFullInfo?: ApiChatFullInfo;\n    draft?: ApiDraft;\n    replyToTopic?: ApiTopic;\n    currentMessageList?: MessageList;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isReactionPickerOpen?: boolean;\n    shouldDisplayGiftsButton?: boolean;\n    isForwarding?: boolean;\n    isReplying?: boolean;\n    hasSuggestedPost?: boolean;\n    forwardedMessagesCount?: number;\n    pollModal: TabState['pollModal'];\n    todoListModal: TabState['todoListModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    isInScheduledList?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    currentUserId?: string;\n    currentUser?: ApiUser;\n    recentEmojis: string[];\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    sendAsPeer?: ApiPeer;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraft?: ApiFormattedText;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ThemeKey;\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n    slowMode?: ApiChatFullInfo['slowMode'];\n    shouldUpdateStickerSetOrder?: boolean;\n    availableReactions?: ApiAvailableReaction[];\n    topReactions?: ApiReaction[];\n    canPlayAnimatedEmojis?: boolean;\n    canBuyPremium?: boolean;\n    shouldCollectDebugLogs?: boolean;\n    sentStoryReaction?: ApiReaction;\n    stealthMode?: ApiStealthMode;\n    canSendOneTimeMedia?: boolean;\n    quickReplyMessages?: Record<number, ApiMessage>;\n    quickReplies?: Record<number, ApiQuickReply>;\n    canSendQuickReplies?: boolean;\n    webPagePreview?: ApiWebPage;\n    noWebPage?: boolean;\n    isContactRequirePremium?: boolean;\n    paidMessagesStars?: number;\n    effect?: ApiAvailableEffect;\n    effectReactions?: ApiReaction[];\n    areEffectsSupported?: boolean;\n    canPlayEffect?: boolean;\n    shouldPlayEffect?: boolean;\n    maxMessageLength: number;\n    shouldPaidMessageAutoApprove?: boolean;\n    isSilentPosting?: boolean;\n    isPaymentMessageConfirmDialogOpen: boolean;\n    starsBalance: number;\n    isStarsBalanceModalOpen: boolean;\n    disallowedGifts?: ApiDisallowedGifts;\n    isAccountFrozen?: boolean;\n    isAppConfigLoaded?: boolean;\n    insertingPeerIdMention?: string;\n    pollMaxAnswers?: number;\n  };\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n  Forward = 'forward',\n  SendOneTime = 'sendOneTime',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst SENDING_ANIMATION_DURATION = 350;\nconst MOUNT_ANIMATION_DURATION = 430;\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  type,\n  isOnActiveTab,\n  dropAreaState,\n  isInScheduledList,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  editingMessage,\n  chatId,\n  threadId,\n  storyId,\n  currentMessageList,\n  messageListType,\n  draft,\n  chat,\n  chatFullInfo,\n  replyToTopic,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isReactionPickerOpen,\n  shouldDisplayGiftsButton,\n  isForwarding,\n  isReplying,\n  hasSuggestedPost,\n  forwardedMessagesCount,\n  pollModal,\n  todoListModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  inputPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  topInlineBotIds,\n  currentUserId,\n  currentUser,\n  captionLimit,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  sendAsPeer,\n  sendAsId,\n  editingDraft,\n  requestedDraft,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n  slowMode,\n  shouldUpdateStickerSetOrder,\n  editableInputCssSelector,\n  editableInputId,\n  inputId,\n  className,\n  availableReactions,\n  topReactions,\n  canBuyPremium,\n  canPlayAnimatedEmojis,\n  shouldCollectDebugLogs,\n  sentStoryReaction,\n  stealthMode,\n  canSendOneTimeMedia,\n  quickReplyMessages,\n  quickReplies,\n  canSendQuickReplies,\n  webPagePreview,\n  noWebPage,\n  isContactRequirePremium,\n  paidMessagesStars,\n  effect,\n  effectReactions,\n  areEffectsSupported,\n  canPlayEffect,\n  shouldPlayEffect,\n  maxMessageLength,\n  isSilentPosting,\n  isPaymentMessageConfirmDialogOpen,\n  starsBalance,\n  isStarsBalanceModalOpen,\n  disallowedGifts,\n  isAccountFrozen,\n  isAppConfigLoaded,\n  insertingPeerIdMention,\n  pollMaxAnswers,\n  onDropHide,\n  onFocus,\n  onBlur,\n  onForward,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    openPollModal,\n    closePollModal,\n    openTodoListModal,\n    closeTodoListModal,\n    loadScheduledHistory,\n    openThread,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n    openStoryReactionPicker,\n    openGiftModal,\n    closeReactionPicker,\n    sendStoryReaction,\n    editMessage,\n    updateAttachmentSettings,\n    saveEffectInDraft,\n    setReactionEffect,\n    hideEffectInComposer,\n    updateChatSilentPosting,\n    updateInsertingPeerIdMention,\n    updateDraftSuggestedPostInfo,\n    updateShouldSaveAttachmentsCompression,\n    applyDefaultAttachmentsCompression,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const inputRef = useRef<HTMLDivElement>();\n  const counterRef = useRef<HTMLSpanElement>();\n\n  const storyReactionRef = useRef<HTMLButtonElement>();\n\n  const [getHtml, setHtml] = useSignal('');\n  const [isMounted, setIsMounted] = useState(false);\n  const getSelectionRange = useGetSelectionRange(editableInputCssSelector);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePreviousDeprecated(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n\n  const isInMessageList = type === 'messageList';\n  const isInStoryViewer = type === 'story';\n  const sendAsPeerIds = isInMessageList ? chat?.sendAsPeerIds : undefined;\n  const canShowSendAs = Boolean(sendAsPeerIds?.length);\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n  const [isInputHasFocus, markInputHasFocus, unmarkInputHasFocus] = useFlag();\n  const [isAttachMenuOpen, onAttachMenuOpen, onAttachMenuClose] = useFlag();\n\n  const canMediaBeReplaced = editingMessage && canEditMedia(editingMessage);\n\n  const isMonoforum = chat?.isMonoforum;\n  const { emojiSet, members: groupChatMembers, botCommands: chatBotCommands } = chatFullInfo || {};\n  const chatEmojiSetId = emojiSet?.id;\n\n  const canSchedule = !paidMessagesStars && !isMonoforum;\n\n  const isSentStoryReactionHeart = sentStoryReaction && isSameReaction(sentStoryReaction, HEART_REACTION);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const [requestCalendar, calendar] = useSchedule(\n    isInMessageList && canScheduleUntilOnline,\n    cancelForceShowSymbolMenu,\n  );\n\n  useTimeout(() => {\n    setIsMounted(true);\n  }, MOUNT_ANIMATION_DURATION);\n\n  useEffect(() => {\n    if (isInMessageList) return;\n\n    closeReactionPicker();\n  }, [isInMessageList, storyId]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (isAppConfigLoaded && chatId && isReady && !isInStoryViewer && !isMonoforum) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, threadId, isInStoryViewer, isAppConfigLoaded, isMonoforum]);\n\n  useEffect(() => {\n    const isChannelWithProfiles = isChannel && chat?.areProfilesShown;\n    const isChatWithSendAs = chat && isChatSuperGroup(chat)\n      && Boolean(isChatPublic(chat) || chat.isLinkedInDiscussion || chat.hasGeo);\n    if (!sendAsPeerIds && isReady && (isChatWithSendAs || isChannelWithProfiles)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isChannel, isReady, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n  const [nextText, setNextText] = useState<ApiFormattedText | undefined>(undefined);\n\n  useEffect(() => {\n    if (!attachments.length || !attachments) {\n      updateShouldSaveAttachmentsCompression({ shouldSave: false });\n    }\n  }, [attachments]);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks, canAttachToDoLists,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(\n    () => getAllowedAttachmentOptions(\n      chat,\n      chatFullInfo,\n      isChatWithBot,\n      isChatWithSelf,\n      isInStoryViewer,\n      paidMessagesStars,\n      isInScheduledList,\n    ),\n    [chat, chatFullInfo, isChatWithBot, isChatWithSelf, isInStoryViewer, paidMessagesStars, isInScheduledList],\n  );\n\n  const isNeedPremium = isContactRequirePremium && isInStoryViewer;\n  const isSendTextBlocked = isNeedPremium || !canSendPlainText;\n\n  const messagesCount = useDerivedState(() => {\n    if (hasAttachments) return attachments.length;\n    const messagesInInput = (getHtml() || hasAttachments) ? 1 : 0;\n    if (!isForwarding || !forwardedMessagesCount) return messagesInInput || 1;\n    return forwardedMessagesCount + messagesInInput;\n  }, [getHtml, hasAttachments, attachments, isForwarding, forwardedMessagesCount]);\n  const starsForAllMessages = paidMessagesStars ? messagesCount * paidMessagesStars : 0;\n\n  const {\n    closeConfirmDialog: closeConfirmModalPayForMessage,\n    dialogHandler: paymentMessageConfirmDialogHandler,\n    shouldAutoApprove: shouldPaidMessageAutoApprove,\n    setAutoApprove: setShouldPaidMessageAutoApprove,\n    handleWithConfirmation: handleActionWithPaymentConfirmation,\n  } = usePaidMessageConfirmation(starsForAllMessages, isStarsBalanceModalOpen, starsBalance);\n\n  const hasWebPagePreview = !hasAttachments && canAttachEmbedLinks && !noWebPage && Boolean(webPagePreview);\n  const isComposerBlocked = isSendTextBlocked && !editingMessage;\n\n  useEffect(() => {\n    if (!hasWebPagePreview) {\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [hasWebPagePreview]);\n\n  const insertHtmlAndUpdateCursor = useLastCallback((\n    newHtml: string, inInputId: string = editableInputId, shouldPrepend = false,\n  ) => {\n    if (inInputId === editableInputId && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inInputId === editableInputId) {\n      messageInput = document.querySelector<HTMLDivElement>(editableInputCssSelector)!;\n    } else {\n      messageInput = document.getElementById(inInputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount && !shouldPrepend) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inInputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    if (shouldPrepend) {\n      const newFirstWord = newHtml.split(' ')[0];\n      const shouldReplace = getHtml().startsWith(newFirstWord);\n\n      setHtml(shouldReplace ? newHtml : `${newHtml}${getHtml()}`);\n    } else {\n      setHtml(`${getHtml()}${newHtml}`);\n    }\n\n    // If selection is outside of input, set cursor at the end of input\n    requestNextMutation(() => {\n      focusEditableElement(messageInput);\n    });\n  });\n\n  const insertTextAndUpdateCursor = useLastCallback((\n    text: string, inInputId: string = editableInputId,\n  ) => {\n    const newHtml = (renderText(text, ['escape_html', 'emoji_html', 'br_html']) as string[])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inInputId);\n  });\n\n  const insertFormattedTextAndUpdateCursor = useLastCallback((\n    text: ApiFormattedText, inInputId: string = editableInputId, shouldPrepend = false,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inInputId, shouldPrepend);\n  });\n\n  const insertCustomEmojiAndUpdateCursor = useLastCallback((emoji: ApiSticker, inInputId: string = editableInputId) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inInputId);\n  });\n\n  const insertNextText = useLastCallback(() => {\n    if (!nextText) return;\n    insertFormattedTextAndUpdateCursor(nextText, editableInputId);\n    setNextText(undefined);\n  });\n\n  const {\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n    insertNextText,\n    editedMessage: editingMessage,\n    shouldSendInHighQuality: attachmentSettings.shouldSendInHighQuality,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n    isViewOnceEnabled,\n    setIsViewOnceEnabled,\n    toogleViewOnceEnabled,\n  } = useVoiceRecording();\n\n  const shouldSendRecordingStatus = isForCurrentMessageList && !isInStoryViewer;\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, shouldSendRecordingStatus ? activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL : undefined);\n\n  useEffect(() => {\n    if (!isForCurrentMessageList || isInStoryViewer) return;\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, isForCurrentMessageList, isInStoryViewer, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (!isForCurrentMessageList || isInStoryViewer) return;\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, isForCurrentMessageList, isInStoryViewer, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && (isInStoryViewer || isForCurrentMessageList)\n      && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && (isInStoryViewer || isForCurrentMessageList)\n      && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady\n      && isOnActiveTab\n      && (isInStoryViewer || isForCurrentMessageList)\n      && shouldSuggestStickers\n      && canSendStickers\n      && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isInMessageList && isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  useEffect(() => {\n    if (!insertingPeerIdMention) return;\n    const peer = selectPeer(getGlobal(), insertingPeerIdMention);\n    if (peer) {\n      insertMention(peer, true, true);\n    }\n    updateInsertingPeerIdMention({ peerId: undefined });\n  }, [insertingPeerIdMention, insertMention]);\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    switchWebview: inlineBotSwitchWebview,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isInMessageList && isReady && isForCurrentMessageList && !hasAttachments),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const hasQuickReplies = Boolean(quickReplies && Object.keys(quickReplies).length);\n\n  const {\n    isOpen: isChatCommandTooltipOpen,\n    close: closeChatCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n    filteredQuickReplies: quickReplyCommands,\n  } = useChatCommandTooltip(\n    Boolean(isInMessageList\n      && isReady\n      && isForCurrentMessageList\n      && ((botCommands && botCommands?.length) || chatBotCommands?.length || (hasQuickReplies && canSendQuickReplies))),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n    canSendQuickReplies ? quickReplies : undefined,\n  );\n\n  useDraft({\n    draft,\n    chatId,\n    threadId,\n    getHtml,\n    setHtml,\n    editedMessage: editingMessage,\n    isDisabled: isInStoryViewer || Boolean(requestedDraft) || (!hasSuggestedPost && isMonoforum),\n  });\n\n  useLoadLinkPreview({\n    chatId,\n    threadId,\n    getHtml,\n  });\n\n  const resetComposer = useLastCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n    setNextText(undefined);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  });\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    return Object.values(disallowedGifts).every(Boolean);\n  }, [disallowedGifts]);\n\n  const shouldShowGiftButton = Boolean(!isChatWithSelf && shouldDisplayGiftsButton && !areAllGiftsDisallowed);\n  const shouldShowSuggestedPostButton = isMonoforum && !editingMessage\n    && !isForwarding && !isReplying && !draft?.suggestedPostInfo;\n\n  const showCustomEmojiPremiumNotification = useLastCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: oldLang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: oldLang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: oldLang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: oldLang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  });\n\n  const mainButtonState = useDerivedState(() => {\n    if (!isInputHasFocus && onForward && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Forward;\n    }\n\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (isInScheduledList) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, editingMessage, getHtml, hasAttachments, isForwarding, isInputHasFocus, onForward,\n    shouldForceShowEditing, isInScheduledList,\n  ]);\n  const canShowCustomSendMenu = !isInScheduledList;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    contextMenuAnchor: storyReactionPickerAnchor,\n    handleContextMenu: handleStoryPickerContextMenu,\n    handleBeforeContextMenu: handleBeforeStoryPickerContextMenu,\n    handleContextMenuHide: handleStoryPickerContextMenuHide,\n  } = useContextMenuHandlers(storyReactionRef, !isInStoryViewer);\n\n  useEffect(() => {\n    if (isReactionPickerOpen) return;\n\n    if (storyReactionPickerAnchor) {\n      openStoryReactionPicker({\n        peerId: chatId,\n        storyId: storyId!,\n        position: storyReactionPickerAnchor,\n      });\n      handleStoryPickerContextMenuHide();\n    }\n  }, [chatId, handleStoryPickerContextMenuHide, isReactionPickerOpen, storyId, storyReactionPickerAnchor]);\n\n  useClipboardPaste(\n    isForCurrentMessageList || isInStoryViewer,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    setNextText,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useLastCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  });\n\n  const validateTextLength = useLastCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : maxMessageLength;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  });\n\n  const checkSlowMode = useLastCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(editableInputCssSelector);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: oldLang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  });\n\n  const canSendAttachments = (attachmentsToSend: ApiAttachment[]): boolean => {\n    if (!currentMessageList && !storyId) {\n      return false;\n    }\n\n    const { text } = parseHtmlAsFormattedText(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return false;\n    }\n    if (!validateTextLength(text, true)) return false;\n    if (!checkSlowMode()) return false;\n\n    return true;\n  };\n\n  const sendAttachments = useLastCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n    isInvertedMedia,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n    isInvertedMedia?: true;\n  }) => {\n    if (!currentMessageList && !storyId) {\n      return;\n    }\n    isSilent = isSilent || isSilentPosting;\n\n    const { text, entities } = parseHtmlAsFormattedText(getHtml());\n\n    isInvertedMedia = text && sendCompressed && sendGrouped ? isInvertedMedia : undefined;\n\n    if (editingMessage) {\n      editMessage({\n        messageList: currentMessageList,\n        text,\n        entities,\n        attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetOrder,\n        attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n        shouldGroupMessages: sendGrouped,\n        isInvertedMedia,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, threadId, isLocalOnly: true });\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleSendAttachmentsFromModal = useLastCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isInvertedMedia?: true,\n  ) => {\n    if (canSendAttachments(attachments)) {\n      if (editingMessage) {\n        sendAttachments({\n          attachments,\n          sendCompressed,\n          sendGrouped,\n          isInvertedMedia,\n        });\n        return;\n      }\n\n      handleActionWithPaymentConfirmation(sendAttachments, {\n        attachments,\n        sendCompressed,\n        sendGrouped,\n        isInvertedMedia,\n      });\n    }\n  });\n\n  const handleSendAttachments = useLastCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n    isInvertedMedia?: true,\n  ) => {\n    if (canSendAttachments(attachments)) {\n      sendAttachments({\n        attachments,\n        sendCompressed,\n        sendGrouped,\n        isSilent,\n        scheduledAt,\n        isInvertedMedia,\n      });\n    }\n  });\n\n  const handleSendCore = useLastCallback(\n    (currentAttachments: ApiAttachment[], isSilent = false, scheduledAt?: number) => {\n      const { text, entities } = parseHtmlAsFormattedText(getHtml());\n\n      if (currentAttachments.length) {\n        if (canSendAttachments(currentAttachments)) {\n          sendAttachments({\n            attachments: currentAttachments,\n            scheduledAt,\n            isSilent,\n          });\n        }\n        return;\n      }\n\n      if (!text && !isForwarding) {\n        return;\n      }\n\n      if (!validateTextLength(text)) return;\n\n      const messageInput = document.querySelector<HTMLDivElement>(editableInputCssSelector);\n\n      const effectId = effect?.id;\n\n      if (text || isForwarding) {\n        if (!checkSlowMode()) return;\n\n        const isInvertedMedia = hasWebPagePreview ? attachmentSettings.isInvertedMedia : undefined;\n\n        if (areEffectsSupported) saveEffectInDraft({ chatId, threadId, effectId: undefined });\n\n        sendMessage({\n          messageList: currentMessageList,\n          text,\n          entities,\n          scheduledAt,\n          isSilent,\n          shouldUpdateStickerSetOrder,\n          isInvertedMedia,\n          effectId,\n          webPageMediaSize: attachmentSettings.webPageMediaSize,\n          webPageUrl: hasWebPagePreview ? webPagePreview.url : undefined,\n          isForwarding,\n        });\n      }\n\n      lastMessageSendTimeSeconds.current = getServerTime();\n      clearDraft({\n        chatId, threadId, isLocalOnly: true, shouldKeepReply: isForwarding,\n      });\n\n      if (IS_IOS && messageInput && messageInput === document.activeElement) {\n        applyIosAutoCapitalizationFix(messageInput);\n      }\n\n      // Wait until message animation starts\n      requestMeasure(() => {\n        resetComposer();\n      });\n    },\n  );\n\n  const handleSend = useLastCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (!currentMessageList && !storyId) {\n      return;\n    }\n\n    isSilent = isSilent || isSilentPosting;\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      const ttlSeconds = isViewOnceEnabled ? ONE_TIME_MEDIA_TTL_SECONDS : undefined;\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform }, ttlSeconds },\n        )];\n      }\n    }\n\n    handleSendCore(currentAttachments, isSilent, scheduledAt);\n  });\n\n  const handleSendWithConfirmation = useLastCallback((isSilent = false, scheduledAt?: number) => {\n    handleActionWithPaymentConfirmation(handleSend, isSilent, scheduledAt);\n  });\n\n  const handleTodoListCreate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('SubscribeToTelegramPremiumForCreateToDo'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'todo' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n      return;\n    }\n\n    openTodoListModal({ chatId });\n  });\n\n  const handleClickBotMenu = useLastCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    const parsedLink = tryParseDeepLink(botMenuButton.url);\n\n    if (parsedLink?.type === 'publicUsernameOrBotLink' && parsedLink.appName) {\n      processDeepLink(botMenuButton.url);\n    } else {\n      callAttachBot({\n        chatId, url: botMenuButton.url, threadId,\n      });\n    }\n  });\n\n  const handleActivateBotCommandMenu = useLastCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  });\n\n  const handleMessageSchedule = useLastCallback((\n    args: ScheduledMessageArgs, scheduledAt: number, messageList: MessageList, effectId?: string,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        chatId,\n        threadId,\n        queryId,\n        scheduledAt,\n        isSilent: isSilent || isSilentPosting,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false, isInvertedMedia } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt, isInvertedMedia);\n    } else {\n      sendMessage({\n        ...args,\n        messageList,\n        scheduledAt,\n        effectId,\n      });\n    }\n  });\n\n  useEffectWithPrevDeps(([prevContentToBeScheduled]) => {\n    if (currentMessageList && contentToBeScheduled && contentToBeScheduled !== prevContentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt, currentMessageList);\n      });\n    }\n  }, [contentToBeScheduled, currentMessageList, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraft) {\n      insertFormattedTextAndUpdateCursor(requestedDraft, undefined, true);\n      resetOpenChatWithDraft();\n\n      requestNextMutation(() => {\n        const messageInput = document.getElementById(editableInputId)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [editableInputId, requestedDraft, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      void handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      updateShouldSaveAttachmentsCompression({ shouldSave: true });\n      applyDefaultAttachmentsCompression();\n    } else {\n      updateShouldSaveAttachmentsCompression({ shouldSave: false });\n    }\n  }, [requestedDraftFiles, updateShouldSaveAttachmentsCompression, applyDefaultAttachmentsCompression]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker, inInputId?: string) => {\n    const emojiSetId = 'id' in emoji.stickerSetInfo && emoji.stickerSetInfo.id;\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf && emojiSetId !== chatEmojiSetId) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inInputId);\n  });\n\n  const handleCustomEmojiSelectAttachmentModal = useLastCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const handleGifSelect = useLastCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList && !storyId) {\n      return;\n    }\n\n    isSilent = isSilent || isSilentPosting;\n\n    if (isInScheduledList || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleActionWithPaymentConfirmation(handleMessageSchedule, { gif, isSilent }, scheduledAt, currentMessageList!);\n        requestMeasure(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      handleActionWithPaymentConfirmation(sendMessage, { messageList: currentMessageList, gif, isSilent });\n      requestMeasure(() => {\n        resetComposer(true);\n      });\n    }\n\n    clearDraft({ chatId, threadId, isLocalOnly: true });\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    if (!currentMessageList && !storyId) {\n      return;\n    }\n\n    isSilent = isSilent || isSilentPosting;\n\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (isInScheduledList || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleActionWithPaymentConfirmation(\n          handleMessageSchedule, { sticker, isSilent }, scheduledAt, currentMessageList!,\n        );\n        requestMeasure(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      handleActionWithPaymentConfirmation(\n        sendMessage,\n        {\n          messageList: currentMessageList,\n          sticker,\n          isSilent,\n          shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && canUpdateStickerSetsOrder,\n        },\n      );\n      clearDraft({ chatId, threadId, isLocalOnly: true });\n\n      requestMeasure(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  });\n\n  const handleInlineBotSelect = useLastCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (!currentMessageList && !storyId) {\n      return;\n    }\n\n    isSilent = isSilent || isSilentPosting;\n\n    if (isInScheduledList || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleActionWithPaymentConfirmation(\n          handleMessageSchedule,\n          {\n            id: inlineResult.id,\n            queryId: inlineResult.queryId,\n            isSilent,\n          },\n          scheduledAt,\n          currentMessageList!,\n        );\n      });\n    } else {\n      handleActionWithPaymentConfirmation(\n        sendInlineBotResult,\n        {\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          threadId,\n          chatId,\n          isSilent,\n        },\n      );\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(editableInputCssSelector);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, threadId, isLocalOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleBotCommandSelect = useLastCallback(() => {\n    clearDraft({ chatId, threadId, isLocalOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handlePollSend = useLastCallback((poll: ApiNewPoll) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (isInScheduledList) {\n      requestCalendar((scheduledAt) => {\n        handleActionWithPaymentConfirmation(\n          handleMessageSchedule,\n          { poll },\n          scheduledAt,\n          currentMessageList,\n        );\n      });\n      closePollModal();\n    } else {\n      handleActionWithPaymentConfirmation(\n        sendMessage,\n        { messageList: currentMessageList, poll, isSilent: isSilentPosting },\n      );\n      closePollModal();\n    }\n  });\n\n  const handleToDoListSend = useLastCallback((todo: ApiNewMediaTodo) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (isInScheduledList) {\n      requestCalendar((scheduledAt) => {\n        handleActionWithPaymentConfirmation(\n          handleMessageSchedule,\n          { todo },\n          scheduledAt,\n          currentMessageList,\n        );\n      });\n    } else {\n      handleActionWithPaymentConfirmation(\n        sendMessage,\n        { messageList: currentMessageList, todo, isSilent: isSilentPosting },\n      );\n    }\n  });\n\n  const sendSilent = useLastCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (isInScheduledList) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt, currentMessageList!);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false, isInvertedMedia } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true, undefined, isInvertedMedia);\n    } else {\n      void handleSend(true);\n    }\n  });\n\n  const handleSendAsMenuOpen = useLastCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(editableInputCssSelector);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  });\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useLastCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const removeSymbol = useLastCallback((inInputId = editableInputId) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inInputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  });\n\n  const removeSymbolAttachmentModal = useLastCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const handleAllScheduledClick = useLastCallback(() => {\n    openThread({\n      chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  });\n\n  const handleGiftClick = useLastCallback(() => {\n    openGiftModal({ forUserId: chatId });\n  });\n  const handleSuggestPostClick = useLastCallback(() => {\n    updateDraftSuggestedPostInfo({\n      price: { currency: STARS_CURRENCY_CODE, amount: 0, nanos: 0 },\n    });\n  });\n\n  const handleToggleSilentPosting = useLastCallback(() => {\n    const newValue = !isSilentPosting;\n    updateChatSilentPosting({ chatId, isEnabled: newValue });\n\n    showNotification({\n      localId: 'silentPosting',\n      icon: newValue ? 'mute' : 'unmute',\n      message: lang(`ComposerSilentPosting${newValue ? 'Enabled' : 'Disabled'}Tootlip`),\n    });\n  });\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const hasText = useDerivedState(() => Boolean(getHtml()), [getHtml]);\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage\n    && messageListType === 'thread';\n  const isBotMenuButtonOpen = withBotMenuButton && !hasText && !activeVoiceRecording;\n\n  const [timedPlaceholderLangKey, timedPlaceholderDate] = useMemo(() => {\n    if (slowMode?.nextSendDate) {\n      return ['SlowModeWait', slowMode.nextSendDate];\n    }\n\n    if (stealthMode?.activeUntil && isInStoryViewer) {\n      return ['StealthModeActiveHint', stealthMode.activeUntil];\n    }\n\n    return [];\n  }, [isInStoryViewer, slowMode?.nextSendDate, stealthMode?.activeUntil]);\n\n  const isComposerHasFocus = isBotKeyboardOpen || isSymbolMenuOpen || isEmojiTooltipOpen || isSendAsMenuOpen\n    || isMentionTooltipOpen || isInlineBotTooltipOpen || isBotCommandMenuOpen || isAttachMenuOpen\n    || isStickerTooltipOpen || isChatCommandTooltipOpen || isCustomEmojiTooltipOpen || isBotMenuButtonOpen\n    || isCustomSendMenuOpen || Boolean(activeVoiceRecording) || attachments.length > 0 || isInputHasFocus;\n  const isReactionSelectorOpen = isComposerHasFocus && !isReactionPickerOpen && isInStoryViewer && !isAttachMenuOpen\n    && !isSymbolMenuOpen;\n\n  const placeholder = useMemo(() => {\n    if (activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER) {\n      return '';\n    }\n\n    if (!isComposerBlocked) {\n      if (botKeyboardPlaceholder) return botKeyboardPlaceholder;\n      if (inputPlaceholder) return inputPlaceholder;\n      if (paidMessagesStars) {\n        return lang('ComposerPlaceholderPaidMessage', {\n          amount: formatStarsAsIcon(lang, paidMessagesStars, { asFont: true, className: 'placeholder-star-icon' }),\n        }, {\n          withNodes: true,\n        });\n      }\n\n      if (isReplying && hasSuggestedPost) {\n        return lang('ComposerPlaceholderCaption');\n      }\n\n      if (chat?.adminRights?.anonymous) {\n        return lang('ComposerPlaceholderAnonymous');\n      }\n\n      if (chat?.isForum && chat?.isForumAsMessages && threadId === MAIN_THREAD_ID) {\n        return replyToTopic\n          ? lang('ComposerPlaceholderTopic', { topic: replyToTopic.title })\n          : lang('ComposerPlaceholderTopicGeneral');\n      }\n      if (isChannel) {\n        return lang(isSilentPosting ? 'ComposerPlaceholderBroadcastSilent' : 'ComposerPlaceholderBroadcast');\n      }\n      return lang('ComposerPlaceholder');\n    }\n\n    if (isInStoryViewer) return lang('ComposerStoryPlaceholderLocked');\n\n    return lang('ComposerPlaceholderNoText');\n  }, [\n    activeVoiceRecording, botKeyboardPlaceholder, chat, inputPlaceholder, isChannel, isComposerBlocked,\n    isInStoryViewer, isSilentPosting, lang, replyToTopic, isReplying, threadId, windowWidth, paidMessagesStars,\n    hasSuggestedPost,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus) {\n      onFocus?.();\n    } else {\n      onBlur?.();\n    }\n  }, [isComposerHasFocus, onBlur, onFocus]);\n\n  const {\n    shouldRender: shouldRenderReactionSelector,\n    transitionClassNames: reactionSelectorTransitonClassNames,\n  } = useShowTransitionDeprecated(isReactionSelectorOpen);\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useLastCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Forward:\n        onForward?.();\n        break;\n      case MainButtonState.Send:\n        handleSendWithConfirmation();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: oldLang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId, messageListType });\n          }\n        } else {\n          setIsViewOnceEnabled(false);\n          void startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        if (!currentMessageList) {\n          return;\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt, currentMessageList, effect?.id);\n        });\n        break;\n      default:\n        break;\n    }\n  });\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Forward:\n      sendButtonAriaLabel = 'Forward';\n      break;\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const fullClassName = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n    isMounted && 'mounted',\n    className,\n  );\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if (reaction.type === 'emoji') {\n      text = reaction.emoticon;\n    }\n\n    if (reaction.type === 'custom') {\n      const sticker = selectCustomEmoji(getGlobal(), reaction.documentId);\n      if (!sticker) {\n        return;\n      }\n\n      if (!sticker.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n        showCustomEmojiPremiumNotification();\n        return;\n      }\n      const customEmojiMessage = parseHtmlAsFormattedText(buildCustomEmojiHtml(sticker));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    handleActionWithPaymentConfirmation(sendMessage, { text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const handleToggleEffectReaction = useLastCallback((reaction: ApiReaction) => {\n    setReactionEffect({ chatId, threadId, reaction });\n\n    closeReactionPicker();\n  });\n\n  const handleReactionPickerOpen = useLastCallback((position: IAnchorPosition) => {\n    openStoryReactionPicker({\n      peerId: chatId,\n      storyId: storyId!,\n      position,\n      sendAsMessage: true,\n    });\n  });\n\n  const handleLikeStory = useLastCallback(() => {\n    const reaction = sentStoryReaction ? undefined : HEART_REACTION;\n    sendStoryReaction({\n      peerId: chatId,\n      storyId: storyId!,\n      containerId: getStoryKey(chatId, storyId!),\n      reaction,\n    });\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt, currentMessageList!);\n    });\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    handleActionWithPaymentConfirmation(sendSilent);\n  });\n\n  const handleSendWhenOnline = useLastCallback(() => {\n    handleActionWithPaymentConfirmation(\n      handleMessageSchedule, {}, SCHEDULED_WHEN_ONLINE, currentMessageList!, effect?.id,\n    );\n  });\n\n  const handleSendScheduledAttachments = useLastCallback(\n    (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => {\n      requestCalendar((scheduledAt) => {\n        handleActionWithPaymentConfirmation(\n          handleMessageSchedule,\n          { sendCompressed, sendGrouped, isInvertedMedia },\n          scheduledAt,\n          currentMessageList!,\n        );\n      });\n    },\n  );\n\n  const handleSendSilentAttachments = useLastCallback(\n    (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => {\n      handleActionWithPaymentConfirmation(sendSilent, { sendCompressed, sendGrouped, isInvertedMedia });\n    },\n  );\n\n  const handleRemoveEffect = useLastCallback(() => {\n    saveEffectInDraft({ chatId, threadId, effectId: undefined });\n  });\n\n  const handleStopEffect = useLastCallback(() => {\n    hideEffectInComposer({});\n  });\n\n  const onSend = useMemo(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Edit:\n        return handleEditComplete;\n      case MainButtonState.Schedule:\n        return handleSendScheduled;\n      default:\n        return handleSendWithConfirmation;\n    }\n  }, [mainButtonState, handleEditComplete, handleSendWithConfirmation]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n\n  const effectEmoji = areEffectsSupported && effect?.emoticon;\n\n  const shouldRenderPaidBadge = Boolean(paidMessagesStars && mainButtonState === MainButtonState.Send);\n  const prevShouldRenderPaidBadge = usePrevious(shouldRenderPaidBadge);\n\n  return (\n    <div className={fullClassName}>\n      {isInMessageList && canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide!}\n          onFileSelect={handleFileSelect}\n          editingMessage={editingMessage}\n        />\n      )}\n      {shouldRenderReactionSelector && !isNeedPremium && (\n        <ReactionSelector\n          topReactions={topReactions}\n          allAvailableReactions={availableReactions}\n          onToggleReaction={handleToggleReaction}\n          isPrivate\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isChatWithSelf}\n          isInStoryViewer={isInStoryViewer}\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleReactionPickerOpen}\n          className={reactionSelectorTransitonClassNames}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        isForMessage={isInMessageList}\n        shouldSchedule={canSchedule && isInScheduledList}\n        canSchedule={canSchedule}\n        forceDarkTheme={isInStoryViewer}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachmentsFromModal}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n        editingMessage={editingMessage}\n        onSendWhenOnline={handleSendWhenOnline}\n        canScheduleUntilOnline={canScheduleUntilOnline && !isViewOnceEnabled}\n        paidMessagesStars={paidMessagesStars}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        maxOptionsCount={pollMaxAnswers}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      <ToDoListModal\n        modal={todoListModal}\n        onClear={closeTodoListModal}\n        onSend={handleToDoListSend}\n      />\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <ChatCommandTooltip\n        isOpen={isChatCommandTooltipOpen}\n        chatId={chatId}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        quickReplies={quickReplyCommands}\n        getHtml={getHtml}\n        self={currentUser!}\n        quickReplyMessages={quickReplyMessages}\n        onClick={handleBotCommandSelect}\n        onClose={closeChatCommandTooltip}\n      />\n      <div className={\n        buildClassName('composer-wrapper', isInStoryViewer && 'with-story-tweaks', isNeedPremium && 'is-need-premium')\n      }\n      >\n        {!isNeedPremium && (\n          <svg className=\"svg-appendix\" width=\"9\" height=\"20\">\n            <defs>\n              <filter\n                x=\"-50%\"\n                y=\"-14.7%\"\n                width=\"200%\"\n                height=\"141.2%\"\n                filterUnits=\"objectBoundingBox\"\n                id=\"composerAppendix\"\n              >\n                <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n                <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n                <feColorMatrix\n                  values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n                  in=\"shadowBlurOuter1\"\n                />\n              </filter>\n            </defs>\n            <g fill=\"none\" fill-rule=\"evenodd\">\n              <path\n                d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\"\n                fill=\"#000\"\n                filter=\"url(#composerAppendix)\"\n              />\n              <path\n                d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\"\n                fill=\"#FFF\"\n                className=\"corner\"\n              />\n            </g>\n          </svg>\n        )}\n        {isInMessageList && (\n          <>\n            <InlineBotTooltip\n              isOpen={isInlineBotTooltipOpen}\n              botId={inlineBotId}\n              isGallery={isInlineBotTooltipGallery}\n              inlineBotResults={inlineBotResults}\n              switchPm={inlineBotSwitchPm}\n              switchWebview={inlineBotSwitchWebview}\n              loadMore={loadMoreForInlineBot}\n              isSavedMessages={isChatWithSelf}\n              canSendGifs={canSendGifs}\n              isCurrentUserPremium={isCurrentUserPremium}\n              onSelectResult={handleInlineBotSelect}\n              onClose={closeInlineBotTooltip}\n            />\n            <ComposerEmbeddedMessage\n              onClear={handleEmbeddedClear}\n              shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n              chatId={chatId}\n              threadId={threadId}\n              messageListType={messageListType}\n            />\n            <WebPagePreview\n              chatId={chatId}\n              threadId={threadId}\n              isDisabled={!canAttachEmbedLinks || hasAttachments || !hasText}\n              isEditing={Boolean(editingMessage)}\n            />\n          </>\n        )}\n        <div className={buildClassName('message-input-wrapper', getPeerColorClass(currentUser))}>\n          {isInMessageList && (\n            <>\n              {withBotMenuButton && (\n                <BotMenuButton\n                  isOpen={isBotMenuButtonOpen}\n                  text={botMenuButton.text}\n                  isDisabled={Boolean(activeVoiceRecording)}\n                  onClick={handleClickBotMenu}\n                />\n              )}\n              {withBotCommands && (\n                <ResponsiveHoverButton\n                  className={buildClassName(\n                    'bot-commands', 'composer-action-button',\n                  )}\n                  round\n                  disabled={botCommands === undefined}\n                  color=\"translucent\"\n                  onActivate={handleActivateBotCommandMenu}\n                  ariaLabel=\"Open bot command keyboard\"\n                >\n                  <Icon name=\"bot-commands-filled\" />\n                </ResponsiveHoverButton>\n              )}\n              {canShowSendAs && sendAsPeer && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n                  ariaLabel={oldLang('SendMessageAsTitle')}\n                  className={buildClassName(\n                    'send-as-button',\n                    'composer-action-button',\n                    shouldAnimateSendAsButtonRef.current && 'appear-animation',\n                  )}\n                >\n                  <Avatar\n                    peer={sendAsPeer}\n                    size=\"tiny\"\n                  />\n                </Button>\n              )}\n            </>\n          )}\n          {((!isComposerBlocked || canSendGifs || canSendStickers) && !isNeedPremium && !isAccountFrozen) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              isMessageComposer={isInMessageList}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n              inputCssSelector={editableInputCssSelector}\n              idPrefix={type}\n              forceDarkTheme={isInStoryViewer}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id={inputId}\n            editableInputId={editableInputId}\n            customEmojiPrefix={type}\n            isStoryInput={isInStoryViewer}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isReady={isReady}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={placeholder}\n            timedPlaceholderDate={timedPlaceholderDate}\n            timedPlaceholderLangKey={timedPlaceholderLangKey}\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments && isInMessageList}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n            onFocus={markInputHasFocus}\n            onBlur={unmarkInputHasFocus}\n            isNeedPremium={isNeedPremium}\n            messageListType={messageListType}\n          />\n          {isInMessageList && (\n            <>\n              {isInlineBotLoading && Boolean(inlineBotId) && (\n                <Spinner color=\"gray\" />\n              )}\n              <Transition\n                className=\"composer-action-buttons-container\"\n                slideClassName=\"composer-action-buttons\"\n                activeKey={Number(hasText)}\n                direction=\"inverse\"\n                name=\"slideFadeAndroid\"\n              >\n                {!hasText && (\n                  <>\n                    {isChannel && (\n                      <Transition className=\"composer-action-button\" name=\"reveal\" activeKey={Number(isSilentPosting)}>\n                        <Button\n                          round\n                          faded\n                          className=\"composer-action-button\"\n                          color=\"translucent\"\n                          onClick={handleToggleSilentPosting}\n                          ariaLabel={lang(\n                            isSilentPosting ? 'AriaComposerSilentPostingDisable' : 'AriaComposerSilentPostingEnable',\n                          )}\n                        >\n                          <Icon name={isSilentPosting ? 'mute' : 'unmute'} />\n                        </Button>\n                      </Transition>\n                    )}\n                    {withScheduledButton && (\n                      <Button\n                        round\n                        faded\n                        className=\"composer-action-button scheduled-button\"\n                        color=\"translucent\"\n                        onClick={handleAllScheduledClick}\n                        ariaLabel={lang('AriaComposerOpenScheduled')}\n                      >\n                        <Icon name=\"scheduled\" />\n                      </Button>\n                    )}\n                    {shouldShowGiftButton && (\n                      <Button\n                        round\n                        faded\n                        className=\"composer-action-button\"\n                        color=\"translucent\"\n                        onClick={handleGiftClick}\n                      >\n                        <Icon name=\"gift\" />\n                      </Button>\n                    )}\n                    {shouldShowSuggestedPostButton && (\n                      <Button\n                        round\n                        faded\n                        className=\"composer-action-button\"\n                        color=\"translucent\"\n                        onClick={handleSuggestPostClick}\n                      >\n                        <Icon name=\"cash-circle\" />\n                      </Button>\n                    )}\n                    {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n                      <ResponsiveHoverButton\n                        className={buildClassName('composer-action-button', isBotKeyboardOpen && 'activated')}\n                        round\n                        color=\"translucent\"\n                        onActivate={openBotKeyboard}\n                        ariaLabel={lang('AriaComposerBotKeyboard')}\n                      >\n                        <Icon name=\"bot-command\" />\n                      </ResponsiveHoverButton>\n                    )}\n                  </>\n                )}\n              </Transition>\n            </>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          {!isNeedPremium && (\n            <AttachMenu\n              chatId={chatId}\n              threadId={threadId}\n              editingMessage={editingMessage}\n              canEditMedia={canMediaBeReplaced}\n              isButtonVisible={!activeVoiceRecording}\n              canAttachMedia={canAttachMedia}\n              canAttachPolls={canAttachPolls}\n              canAttachToDoLists={canAttachToDoLists}\n              canSendPhotos={canSendPhotos}\n              canSendVideos={canSendVideos}\n              canSendDocuments={canSendDocuments}\n              canSendAudios={canSendAudios}\n              onFileSelect={handleFileSelect}\n              onPollCreate={openPollModal}\n              onTodoListCreate={handleTodoListCreate}\n              isScheduled={isInScheduledList}\n              attachBots={isInMessageList ? attachBots : undefined}\n              peerType={attachMenuPeerType}\n              shouldCollectDebugLogs={shouldCollectDebugLogs}\n              theme={theme}\n              onMenuOpen={onAttachMenuOpen}\n              onMenuClose={onAttachMenuClose}\n              messageListType={messageListType}\n              paidMessagesStars={paidMessagesStars}\n            />\n          )}\n          {isInMessageList && Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              threadId={threadId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {isInMessageList && botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            key={`custom-emoji-tooltip-${editableInputId}`}\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            key={`sticker-tooltip-${editableInputId}`}\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            key={`emoji-tooltip-${editableInputId}`}\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {canSendOneTimeMedia && activeVoiceRecording && (\n        <Button\n          className={buildClassName('view-once', isViewOnceEnabled && 'active')}\n          round\n          color=\"secondary\"\n          ariaLabel={oldLang('Chat.PlayOnceVoiceMessageTooltip')}\n          onClick={toogleViewOnceEnabled}\n        >\n          <Icon name=\"view-once\" />\n          <Icon name=\"one-filled\" />\n        </Button>\n      )}\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <Icon name=\"delete\" />\n        </Button>\n      )}\n      {isInStoryViewer && !activeVoiceRecording && (\n        <Button\n          round\n          className=\"story-reaction-button\"\n          color=\"secondary\"\n          onClick={handleLikeStory}\n          onContextMenu={handleStoryPickerContextMenu}\n          onMouseDown={handleBeforeStoryPickerContextMenu}\n          ariaLabel={oldLang('AccDescrLike')}\n          ref={storyReactionRef}\n        >\n          {sentStoryReaction && (\n            <ReactionAnimatedEmoji\n              key={getReactionKey(sentStoryReaction)}\n              containerId={getStoryKey(chatId, storyId!)}\n              reaction={sentStoryReaction}\n              withEffectOnly={isSentStoryReactionHeart}\n            />\n          )}\n          {(!sentStoryReaction || isSentStoryReactionHeart) && (\n            <Icon name=\"heart\" className={buildClassName(isSentStoryReactionHeart && 'story-reaction-heart')} />\n          )}\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(\n          mainButtonState,\n          'main-button',\n          !isReady && 'not-ready',\n          activeVoiceRecording && 'recording',\n        )}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        noFastClick\n        ariaLabel={oldLang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <Icon name=\"send\" />\n        <Icon name=\"microphone-alt\" />\n        {onForward && <Icon name=\"forward\" />}\n        {isInMessageList && <Icon name=\"schedule\" />}\n        {isInMessageList && <Icon name=\"check\" />}\n        <Button\n          className={buildClassName(\n            'paidStarsBadge',\n            shouldRenderPaidBadge && 'visible',\n            prevShouldRenderPaidBadge && !shouldRenderPaidBadge && 'hiding',\n            !prevShouldRenderPaidBadge && !shouldRenderPaidBadge && 'hidden',\n          )}\n          nonInteractive\n          size=\"tiny\"\n          color=\"stars\"\n          pill\n          fluid\n        >\n          <div className=\"paidStarsBadgeText\">\n            <Icon name=\"star\" className={buildClassName('star-amount-icon', className)} />\n            <AnimatedCounter\n              ref={counterRef}\n              text={lang.number(starsForAllMessages)}\n            />\n          </div>\n        </Button>\n      </Button>\n      {effectEmoji && (\n        <span className=\"effect-icon\" onClick={handleRemoveEffect}>\n          {renderText(effectEmoji)}\n        </span>\n      )}\n      {effect && canPlayEffect && (\n        <MessageEffect\n          shouldPlay={shouldPlayEffect}\n          effect={effect}\n          onStop={handleStopEffect}\n        />\n      )}\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          canSchedule={canSchedule && isInMessageList && !isViewOnceEnabled}\n          canScheduleUntilOnline={canScheduleUntilOnline && !isViewOnceEnabled}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!isInScheduledList ? handleSendScheduled : undefined}\n          onSendWhenOnline={handleSendWhenOnline}\n          onRemoveEffect={handleRemoveEffect}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n          chatId={chatId}\n          withEffects={areEffectsSupported}\n          hasCurrentEffect={Boolean(effect)}\n          effectReactions={effectReactions}\n          allAvailableReactions={availableReactions}\n          onToggleReaction={handleToggleEffectReaction}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isChatWithSelf}\n          isInStoryViewer={isInStoryViewer}\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n        />\n      )}\n      {calendar}\n      <PaymentMessageConfirmDialog\n        isOpen={isPaymentMessageConfirmDialogOpen}\n        onClose={closeConfirmModalPayForMessage}\n        userName={chat ? getPeerTitle(lang, chat) : undefined}\n        messagePriceInStars={paidMessagesStars || 0}\n        messagesCount={messagesCount}\n        shouldAutoApprove={shouldPaidMessageAutoApprove}\n        setAutoApprove={setShouldPaidMessageAutoApprove}\n        confirmHandler={paymentMessageConfirmDialogHandler}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, storyId, messageListType, isMobile, type,\n  }): Complete<StateProps> => {\n    const appConfig = global.appConfig;\n    const chat = selectChat(global, chatId);\n    const chatBot = !isSystemBot(chatId) ? selectBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const userFullInfo = isChatWithUser ? selectUserFullInfo(global, chatId) : undefined;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n    const chatFullInfo = !isChatWithUser ? selectChatFullInfo(global, chatId) : undefined;\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const {\n      shouldSuggestStickers, shouldSuggestCustomEmoji, shouldUpdateStickerSetOrder, shouldPaidMessageAutoApprove,\n    } = global.settings.byKey;\n    const { language, shouldCollectDebugLogs } = selectSharedSettings(global);\n    const {\n      forwardMessages: { messageIds: forwardMessageIds },\n    } = selectTabState(global);\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const currentUser = selectUser(global, currentUserId!)!;\n    const defaultSendAsId = chatFullInfo ? chatFullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = defaultSendAsId;\n    const sendAsPeer = sendAsId ? selectPeer(global, sendAsId) : undefined;\n    const requestedDraft = selectRequestedDraft(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n\n    const tabState = selectTabState(global);\n    const isStoryViewerOpen = Boolean(tabState.storyViewer.storyId);\n\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type\n      && !isStoryViewerOpen;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !userFullInfo?.noVoiceMessages) ?? true;\n    const slowMode = chatFullInfo?.slowMode;\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const story = storyId && selectPeerStory(global, chatId, storyId);\n    const sentStoryReaction = story && 'sentReaction' in story ? story.sentReaction : undefined;\n    const draft = selectDraft(global, chatId, threadId);\n    const replyToMessage = draft?.replyInfo\n      ? selectChatMessage(global, chatId, draft.replyInfo.replyToMsgId)\n      : undefined;\n    const replyToTopic = chat?.isForum && chat.isForumAsMessages && threadId === MAIN_THREAD_ID && replyToMessage\n      ? selectTopicFromMessage(global, replyToMessage)\n      : undefined;\n    const isInScheduledList = messageListType === 'scheduled';\n\n    const canSendQuickReplies = isChatWithUser && !isChatWithBot && !isInScheduledList && !isChatWithSelf;\n\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    const isSilentPosting = chat && getChatNotifySettings(\n      chat,\n      selectNotifyDefaults(global),\n      selectNotifyException(global, chatId),\n    )?.isSilentPosting;\n\n    const areEffectsSupported = isChatWithUser && !isChatWithBot\n      && !isInScheduledList && !isChatWithSelf && type !== 'story' && chatId !== SERVICE_NOTIFICATIONS_USER_ID;\n    const canPlayEffect = selectPerformanceSettingsValue(global, 'stickerEffects');\n    const shouldPlayEffect = tabState.shouldPlayEffectInComposer;\n    const effectId = areEffectsSupported && draft?.effectId;\n    const effect = effectId ? global.availableEffectById[effectId] : undefined;\n    const effectReactions = global.reactions.effectReactions;\n\n    const maxMessageLength = global.config?.maxMessageLength || DEFAULT_MAX_MESSAGE_LENGTH;\n    const isForwarding = chatId === tabState.forwardMessages.toChatId;\n    const isReplying = Boolean(draft?.replyInfo);\n    const hasSuggestedPost = Boolean(draft?.suggestedPostInfo);\n    const starsBalance = global.stars?.balance.amount || 0;\n    const isStarsBalanceModalOpen = Boolean(tabState.starsBalanceModal);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n    const insertingPeerIdMention = tabState.insertingPeerIdMention;\n\n    const webPagePreview = tabState.webPagePreviewId ? selectWebPage(global, tabState.webPagePreviewId) : undefined;\n\n    return {\n      availableReactions: global.reactions.availableReactions,\n      topReactions: type === 'story' ? global.reactions.topReactions : undefined,\n      isOnActiveTab: !tabState.isBlurred,\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      draft,\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && (userFullInfo || chatFullInfo)?.hasScheduledMessages\n      ),\n      isInScheduledList,\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding,\n      isReplying,\n      hasSuggestedPost,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      pollModal: tabState.pollModal,\n      todoListModal: tabState.todoListModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      chatFullInfo,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      currentUser,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      shouldUpdateStickerSetOrder,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      botCommands: userFullInfo ? (userFullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: userFullInfo?.botInfo?.menuButton,\n      sendAsPeer,\n      sendAsId,\n      editingDraft,\n      requestedDraft,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium,\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n      slowMode,\n      currentMessageList,\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      canSendOneTimeMedia: !isChatWithSelf && isChatWithUser && !isChatWithBot && !isInScheduledList,\n      shouldCollectDebugLogs,\n      sentStoryReaction,\n      stealthMode: global.stories.stealthMode,\n      replyToTopic,\n      quickReplyMessages: global.quickReplies.messagesById,\n      quickReplies: global.quickReplies.byId,\n      canSendQuickReplies,\n      noWebPage,\n      webPagePreview,\n      isContactRequirePremium: userFullInfo?.isContactRequirePremium,\n      effect,\n      effectReactions,\n      areEffectsSupported,\n      canPlayEffect,\n      shouldPlayEffect,\n      maxMessageLength,\n      paidMessagesStars,\n      shouldPaidMessageAutoApprove,\n      isSilentPosting,\n      isPaymentMessageConfirmDialogOpen: tabState.isPaymentMessageConfirmDialogOpen,\n      starsBalance,\n      isStarsBalanceModalOpen,\n      shouldDisplayGiftsButton: userFullInfo?.shouldDisplayGiftsButton,\n      disallowedGifts: userFullInfo?.disallowedGifts,\n      isAccountFrozen,\n      isAppConfigLoaded,\n      insertingPeerIdMention,\n      pollMaxAnswers: appConfig.pollMaxAnswers,\n    };\n  },\n)(Composer));\n","import { useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport { canReplaceMessageMedia, getAttachmentMediaType } from '../../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport buildAttachment from '../helpers/buildAttachment';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n  insertNextText,\n  editedMessage,\n  shouldSendInHighQuality,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n  insertNextText: VoidFunction;\n  editedMessage: ApiMessage | undefined;\n  shouldSendInHighQuality?: boolean;\n}) {\n  const lang = useLang();\n  const { openLimitReachedModal, showAllowedMessageTypesNotification, showNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n\n  const handleClearAttachments = useLastCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n    insertNextText();\n  });\n\n  const handleSetAttachments = useLastCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentMediaType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'photo' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentMediaType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'photo' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    },\n  );\n\n  const handleAppendFiles = useLastCallback(async (files: File[], isSpoiler?: boolean) => {\n    if (editedMessage) {\n      const newAttachment = await buildAttachment(files[0].name, files[0]);\n      const canReplace = editedMessage && canReplaceMessageMedia(editedMessage, newAttachment);\n\n      if (editedMessage?.groupedId) {\n        if (canReplace) {\n          handleSetAttachments([newAttachment]);\n        } else {\n          showNotification({ message: lang('MediaReplaceInvalidError', undefined, { pluralValue: files.length }) });\n        }\n      } else {\n        handleSetAttachments([newAttachment]);\n      }\n    } else {\n      const newAttachments = await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file,\n          { shouldSendAsSpoiler: isSpoiler || undefined, shouldSendInHighQuality })\n      )));\n      handleSetAttachments([...attachments, ...newAttachments]);\n    }\n  });\n\n  const handleFileSelect = useLastCallback(async (files: File[]) => {\n    if (editedMessage) {\n      const newAttachment = await buildAttachment(files[0].name, files[0]);\n      const canReplace = editedMessage && canReplaceMessageMedia(editedMessage, newAttachment);\n\n      if (editedMessage?.groupedId) {\n        if (canReplace) {\n          handleSetAttachments([newAttachment]);\n        } else {\n          showNotification({ message: lang('MediaReplaceInvalidError', undefined, { pluralValue: files.length }) });\n        }\n      } else {\n        handleSetAttachments([newAttachment]);\n      }\n    } else {\n      const newAttachments = await Promise.all(files.map((file) =>\n        buildAttachment(file.name, file, { shouldSendInHighQuality })));\n      handleSetAttachments(newAttachments);\n    }\n  });\n\n  const handleUpdateAttachmentsQuality = useLastCallback(async () => {\n    const newAttachments = await Promise.all(attachments.map((attachment) =>\n      buildAttachment(attachment.filename, attachment.blob, { shouldSendInHighQuality })));\n    handleSetAttachments(newAttachments);\n  });\n\n  useEffect(() => {\n    handleUpdateAttachmentsQuality();\n  }, [shouldSendInHighQuality]);\n\n  return {\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n","import { useEffect, useRef, useState } from '../../../../lib/teact/teact';\n\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\nimport * as voiceRecording from '../../../../util/voiceRecording';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype ActiveVoiceRecording =\n  { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction }\n  | undefined;\n\nconst useVoiceRecording = () => {\n  const recordButtonRef = useRef<HTMLButtonElement>();\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n  const [isViewOnceEnabled, setIsViewOnceEnabled] = useState(false);\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useLastCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            requestMutation(() => {\n              if (!recordButtonRef.current) return;\n              recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n            });\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  });\n\n  const pauseRecordingVoice = useLastCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  });\n\n  const stopRecordingVoice = useLastCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  });\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  const toogleViewOnceEnabled = useLastCallback(() => {\n    setIsViewOnceEnabled(!isViewOnceEnabled);\n  });\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n    isViewOnceEnabled,\n    setIsViewOnceEnabled,\n    toogleViewOnceEnabled,\n  };\n};\n\nexport default useVoiceRecording;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  tempInput.className = 'allow-selection'; // Patch for Safari\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiChat, ApiUser } from '../../api/types';\n\nimport { isChatChannel, isUserBot } from '../../global/helpers';\nimport { selectIsChatRestricted, selectPeer, selectUserStatus } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { throttle } from '../../util/schedulers';\n\nconst POLLING_INTERVAL = 60 * 60 * 1000;\nconst PEER_LAST_POLLING_TIME = new Map<string, number>();\nlet PEER_ID_QUEUE = new Set<string>();\nconst LIMIT_PER_REQUEST = 100;\nconst REQUEST_THROTTLE = 500;\n\nconst loadFromQueue = throttle(() => {\n  const queue = Array.from(PEER_ID_QUEUE);\n  const queueToLoad = queue.slice(0, LIMIT_PER_REQUEST);\n  const otherQueue = queue.slice(LIMIT_PER_REQUEST);\n\n  getActions().loadStoriesMaxIds({\n    peerIds: queueToLoad,\n  });\n\n  queueToLoad.forEach((id) => PEER_LAST_POLLING_TIME.set(id, Date.now()));\n\n  PEER_ID_QUEUE = new Set(otherQueue);\n\n  // Schedule next load\n  if (PEER_ID_QUEUE.size) {\n    loadFromQueue();\n  }\n}, REQUEST_THROTTLE);\n\nexport default function usePeerStoriesPolling(ids?: string[]) {\n  const peers = useMemo(() => {\n    const global = getGlobal();\n    return ids?.map((id) => selectPeer(global, id)).filter(Boolean);\n  }, [ids]);\n\n  const pollablePeerIds = useMemo(() => {\n    const global = getGlobal();\n    return peers?.filter((peer) => {\n      const lastPollingTime = PEER_LAST_POLLING_TIME.get(peer.id) || 0;\n      if (Date.now() - lastPollingTime < POLLING_INTERVAL) {\n        return false;\n      }\n\n      if (isUserId(peer.id)) {\n        const user = peer as ApiUser;\n        const status = selectUserStatus(global, user.id);\n        const isStatusAvailable = status && status.type !== 'userStatusEmpty';\n        return !user.isContact && !user.isSelf && !isUserBot(user) && !peer.isSupport && isStatusAvailable;\n      } else {\n        const chat = peer as ApiChat;\n        const isRestricted = selectIsChatRestricted(global, chat.id);\n        return isChatChannel(chat) && !isRestricted;\n      }\n    }).map((user) => user.id);\n  }, [peers]);\n\n  useEffect(() => {\n    if (pollablePeerIds?.length) {\n      pollablePeerIds.forEach((id) => PEER_ID_QUEUE.add(id));\n      loadFromQueue();\n    }\n  }, [pollablePeerIds]);\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport useForceUpdate from './useForceUpdate';\nimport usePreviousDeprecated from './usePreviousDeprecated';\nimport useSyncEffect from './useSyncEffect';\n\nexport default function usePrevDuringAnimation<T>(current: T, duration?: number): T {\n  const prev = usePreviousDeprecated(current, true);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n  // eslint-disable-next-line no-null/no-null\n  const isCurrentPresent = current !== undefined && current !== null;\n  // eslint-disable-next-line no-null/no-null\n  const isPrevPresent = prev !== undefined && prev !== null;\n\n  if (isCurrentPresent && timeoutRef.current) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useSyncEffect(() => {\n    // When `current` becomes empty\n    if (duration && !isCurrentPresent && isPrevPresent && !timeoutRef.current) {\n      timeoutRef.current = window.setTimeout(() => {\n        timeoutRef.current = undefined;\n        forceUpdate();\n      }, duration);\n    }\n  }, [duration, forceUpdate, isCurrentPresent, isPrevPresent]);\n\n  return (!timeoutRef.current || !duration || isCurrentPresent ? current : prev)!;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChat, ApiTopic } from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isSignal } from '../../../util/signals';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ShowTransition from '../../ui/ShowTransition';\n\nimport './ChatBadge.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  topic?: ApiTopic;\n  wasTopicOpened?: boolean;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  isSavedDialog?: boolean;\n  shouldShowOnlyMostImportant?: boolean;\n  hasMiniApp?: boolean;\n  forceHidden?: boolean | Signal<boolean>;\n  topics?: Record<number, ApiTopic>;\n  isSelected?: boolean;\n};\n\nconst ChatBadge: FC<OwnProps> = ({\n  topic,\n  topics,\n  chat,\n  isPinned,\n  isMuted,\n  shouldShowOnlyMostImportant,\n  wasTopicOpened,\n  forceHidden,\n  isSavedDialog,\n  hasMiniApp,\n  isSelected,\n}) => {\n  const { requestMainWebView } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    unreadMentionsCount = 0, unreadReactionsCount = 0,\n  } = !chat.isForum ? chat : {}; // TODO[forums] Unread mentions and reactions temporarily disabled for forums\n\n  const isTopicUnopened = !isPinned && topic && !wasTopicOpened;\n  const isForum = chat.isForum && !topic;\n  const topicsWithUnread = useMemo(() => (\n    isForum && topics ? Object.values(topics).filter(({ unreadCount }) => unreadCount) : undefined\n  ), [topics, isForum]);\n\n  const unreadCount = useMemo(() => {\n    if (!isForum) {\n      return (topic || chat).unreadCount;\n    }\n\n    return topicsWithUnread?.length;\n  }, [chat, topic, topicsWithUnread, isForum]);\n\n  const shouldBeUnMuted = useMemo(() => {\n    if (!isForum) {\n      return !isMuted || topic?.notifySettings.mutedUntil === 0;\n    }\n\n    if (isMuted) {\n      return topicsWithUnread?.some((acc) => acc.notifySettings.mutedUntil === 0);\n    }\n\n    const isEveryUnreadMuted = topicsWithUnread?.every((acc) => (\n      acc.notifySettings.mutedUntil && acc.notifySettings.mutedUntil > getServerTime()\n    ));\n\n    return !isEveryUnreadMuted;\n  }, [isForum, isMuted, topicsWithUnread, topic?.notifySettings.mutedUntil]);\n\n  const hasUnreadMark = topic ? false : chat.hasUnreadMark;\n\n  const resolvedForceHidden = useDerivedState(\n    () => (isSignal(forceHidden) ? forceHidden() : forceHidden),\n    [forceHidden],\n  );\n  const isShown = !resolvedForceHidden && Boolean(\n    unreadCount || unreadMentionsCount || hasUnreadMark || isPinned || unreadReactionsCount\n    || isTopicUnopened || hasMiniApp,\n  );\n\n  const isUnread = Boolean((unreadCount || hasUnreadMark) && !isSavedDialog);\n  const className = buildClassName(\n    'ChatBadge',\n    !shouldBeUnMuted && 'muted',\n    !isUnread && isPinned && 'pinned',\n    isUnread && 'unread',\n  );\n\n  const handleOpenApp = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId: chat.id,\n      peerId: chat.id,\n      theme,\n    });\n  });\n\n  function renderContent() {\n    const unreadReactionsElement = unreadReactionsCount && (\n      <div className={buildClassName('ChatBadge reaction', !shouldBeUnMuted && 'muted')}>\n        <Icon name=\"heart\" />\n      </div>\n    );\n\n    const unreadMentionsElement = unreadMentionsCount && (\n      <div className=\"ChatBadge mention\">\n        <Icon name=\"mention\" />\n      </div>\n    );\n\n    const unopenedTopicElement = isTopicUnopened && (\n      <div className={buildClassName('ChatBadge unopened', !shouldBeUnMuted && 'muted')} />\n    );\n\n    const unreadCountElement = (hasUnreadMark || unreadCount) ? (\n      <div className={className}>\n        {!hasUnreadMark && <AnimatedCounter text={formatIntegerCompact(lang, unreadCount!)} />}\n      </div>\n    ) : undefined;\n\n    const pinnedElement = isPinned && (\n      <div className={className}>\n        <Icon name=\"pinned-chat\" />\n      </div>\n    );\n\n    const miniAppButton = hasMiniApp && (\n      <Button\n        color={isSelected ? 'secondary' : 'primary'}\n        className=\"ChatBadge miniapp\"\n        pill\n        size=\"tiny\"\n        onClick={handleOpenApp}\n      >\n        {oldLang('BotOpen')}\n      </Button>\n    );\n\n    const visiblePinnedElement = !unreadCountElement && !unreadMentionsElement && !unreadReactionsElement\n      && pinnedElement;\n\n    const elements = [\n      unopenedTopicElement, unreadReactionsElement, unreadMentionsElement, unreadCountElement, visiblePinnedElement,\n    ].filter(Boolean);\n\n    if (isSavedDialog) return pinnedElement;\n\n    // Show only if empty or have pinned icon\n    if (hasMiniApp && (elements.length === 0 || visiblePinnedElement)) return miniAppButton;\n\n    if (elements.length === 0) return undefined;\n\n    if (elements.length === 1) return elements[0];\n\n    if (shouldShowOnlyMostImportant) {\n      const importanceOrderedElements = [\n        unreadMentionsElement, unreadCountElement, unreadReactionsElement, pinnedElement,\n      ].filter(Boolean);\n      return importanceOrderedElements[0];\n    }\n\n    return (\n      <div className=\"ChatBadge-wrapper\">\n        {elements}\n      </div>\n    );\n  }\n\n  return (\n    <ShowTransition isCustom className=\"ChatBadge-transition\" isOpen={isShown}>\n      {renderContent()}\n    </ShowTransition>\n  );\n};\n\nexport default memo(ChatBadge);\n","import { TME_LINK_PREFIX } from '../../../config';\n\nexport default function formatUsername(username: string, asAbsoluteLink?: boolean) {\n  return asAbsoluteLink ? `${TME_LINK_PREFIX}${username}` : `@${username}`;\n}\n","import { useRef } from '../../../../lib/teact/teact';\n\nimport useForceUpdate from '../../../../hooks/useForceUpdate';\nimport usePreviousDeprecated from '../../../../hooks/usePreviousDeprecated';\n\nexport default function useLeftHeaderButtonRtlForumTransition(shouldHideSearch?: boolean) {\n  const forceUpdate = useForceUpdate();\n  const shouldDisableDropdownMenuTransitionRef = useRef(shouldHideSearch);\n  const prevShouldHideSearch = usePreviousDeprecated(shouldHideSearch);\n\n  function handleDropdownMenuTransitionEnd() {\n    shouldDisableDropdownMenuTransitionRef.current = Boolean(shouldHideSearch);\n    forceUpdate();\n  }\n\n  if (shouldHideSearch === false && prevShouldHideSearch !== shouldHideSearch) {\n    shouldDisableDropdownMenuTransitionRef.current = false;\n  }\n\n  return { shouldDisableDropdownMenuTransitionRef, handleDropdownMenuTransitionEnd };\n}\n","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMediaExtendedPreview, ApiVideo } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMediaFormat, getMediaThumbUri, getMediaTransferState, getVideoMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { calculateExtendedPreviewDimensions, calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport { MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\n\nimport useUnsupportedMedia from '../../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport SensitiveContentConfirmModal from '../../common/SensitiveContentConfirmModal';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps<T> = {\n  id?: string;\n  video: ApiVideo | ApiMediaExtendedPreview;\n  lastPlaybackTimestamp?: number;\n  isOwn?: boolean;\n  isInWebPage?: boolean;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  className?: string;\n  clickArg?: T;\n  isMediaNsfw?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: (arg: T, e: React.MouseEvent<HTMLElement>) => void;\n  onCancelUpload?: (arg: T) => void;\n};\n\ntype StateProps = {\n  needsAgeVerification?: boolean;\n};\n\nconst Video = <T,>({\n  id,\n  video,\n  isOwn,\n  isInWebPage,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  forcedWidth,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  className,\n  lastPlaybackTimestamp,\n  clickArg,\n  isMediaNsfw,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n  onCancelUpload,\n  needsAgeVerification,\n}: OwnProps<T> & StateProps) => {\n  const { cancelMediaDownload, updateContentSettings, openAgeVerificationModal } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const videoRef = useRef<HTMLVideoElement>();\n  const [isNsfwModalOpen, openNsfwModal, closeNsfwModal] = useFlag();\n  const [shouldAlwaysShowNsfw, setShouldAlwaysShowNsfw] = useState(false);\n\n  const isPaidPreview = video.mediaType === 'extendedMediaPreview';\n\n  const localBlobUrl = !isPaidPreview ? video.blobUrl : undefined;\n\n  const shouldShowSpoiler = isPaidPreview || video.isSpoiler || isMediaNsfw;\n  const [isSpoilerShown, showSpoiler, hideSpoiler] = useFlag(shouldShowSpoiler);\n\n  useEffect(() => {\n    if (shouldShowSpoiler) {\n      showSpoiler();\n    } else {\n      hideSpoiler();\n    }\n  }, [shouldShowSpoiler]);\n\n  const handleNsfwConfirm = useLastCallback(() => {\n    closeNsfwModal();\n    hideSpoiler();\n\n    if (shouldAlwaysShowNsfw) {\n      updateContentSettings({ isSensitiveEnabled: true });\n    }\n  });\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && !isPaidPreview);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(Boolean(canAutoPlay && !isSpoilerShown));\n\n  const fullMediaHash = !isPaidPreview ? getVideoMediaHash(video, 'inline') : undefined;\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash,\n    !shouldLoad,\n    !isPaidPreview ? getMediaFormat(video, 'inline') : undefined,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMediaThumbUri(video);\n  const hasThumb = Boolean(thumbDataUri);\n  const withBlurredBackground = Boolean(forcedWidth);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const isUnsupported = useUnsupportedMedia(videoRef, true, !isInline);\n\n  const previewMediaHash = !isPaidPreview ? getVideoMediaHash(video, 'preview') : undefined;\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview);\n  const shouldHidePreview = isPlayerReady && !isUnsupported;\n  const { ref: previewRef } = useMediaTransition<HTMLImageElement>({\n    hasMediaData: Boolean((hasThumb || previewBlobUrl) && !shouldHidePreview),\n  });\n\n  const noThumb = Boolean(!hasThumb || previewBlobUrl || isPlayerReady);\n  const thumbRef = useBlurredMediaThumbRef(video, noThumb);\n  useMediaTransition({ ref: thumbRef, hasMediaData: !noThumb });\n  const blurredBackgroundRef = useBlurredMediaThumbRef(video, !withBlurredBackground);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    !isPaidPreview ? getVideoMediaHash(video, 'download') : undefined,\n    !isDownloading,\n    !isPaidPreview ? getMediaFormat(video, 'download') : undefined,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n    uploadProgress !== undefined,\n  );\n\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n  const {\n    ref: spinnerRef,\n    shouldRender: shouldRenderSpinner,\n  } = useShowTransition({\n    isOpen: isTransferring && !isUnsupported,\n    noMountTransition: wasLoadDisabled,\n    withShouldRender: true,\n  });\n  const {\n    ref: playButtonRef,\n  } = useShowTransition({\n    isOpen: Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner),\n  });\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  });\n\n  const duration = (Number.isFinite(videoRef.current?.duration) && !isUnsupported\n    ? videoRef.current?.duration : video.duration) || 0;\n\n  const {\n    width, height,\n  } = dimensions || (\n    isPaidPreview\n      ? calculateExtendedPreviewDimensions(video, Boolean(isOwn), asForwarded, isInWebPage, noAvatars, isMobile)\n      : calculateVideoDimensions(video, Boolean(isOwn), asForwarded, isInWebPage, noAvatars, isMobile)\n  );\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>, isFromSpinner?: boolean) => {\n    if (isUploading) {\n      onCancelUpload?.(clickArg!);\n      return;\n    }\n\n    if (!isPaidPreview && isDownloading) {\n      cancelMediaDownload({ media: video });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      if (isMediaNsfw) {\n        if (needsAgeVerification) {\n          openAgeVerificationModal();\n          return;\n        }\n        openNsfwModal();\n        return;\n      }\n      hideSpoiler();\n      return;\n    }\n\n    if (isFromSpinner && shouldLoad && !isPlayerReady && !isFullMediaPreloaded) {\n      setIsLoadAllowed(false);\n      e.stopPropagation();\n      return;\n    }\n\n    onClick?.(clickArg!, e);\n  });\n\n  const handleClickOnSpinner = useLastCallback(\n    (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      handleClick(e, true);\n    },\n  );\n\n  const componentClassName = buildClassName(\n    'media-inner dark',\n    !isUploading && 'interactive',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n    className,\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={componentClassName}\n      style={style}\n      onClick={isUploading ? undefined : (e) => handleClick(e)}\n    >\n      {withBlurredBackground && (\n        <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />\n      )}\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n          canPlay={isPlayAllowed && isIntersectingForPlaying && !isUnsupported}\n          defaultMuted\n          muted\n          loop\n          playsInline\n          disablePictureInPicture\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n          style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        />\n      )}\n      <img\n        ref={previewRef}\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px;` : undefined}\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas ref={thumbRef} className=\"thumbnail\" />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <Icon ref={playButtonRef} name=\"large-play\" />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        isNsfw={isMediaNsfw}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div ref={spinnerRef} className=\"media-loading\">\n          <ProgressSpinner\n            progress={transferProgress}\n            onClick={handleClickOnSpinner}\n          />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <Icon name=\"download\" />\n      )}\n      {isTransferring && (!isUnsupported || isDownloading) ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {!isPaidPreview && video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n          {isUnsupported && <Icon name=\"message-failed\" className=\"playback-failed\" />}\n        </div>\n      )}\n      {Boolean(lastPlaybackTimestamp) && (\n        <div\n          className=\"message-media-last-progress\"\n          style={`--_progress: ${Math.floor((lastPlaybackTimestamp / duration) * 100)}%`}\n        />\n      )}\n      <SensitiveContentConfirmModal\n        isOpen={isNsfwModalOpen}\n        onClose={closeNsfwModal}\n        shouldAlwaysShow={shouldAlwaysShowNsfw}\n        onAlwaysShowChanged={setShouldAlwaysShowNsfw}\n        confirmHandler={handleNsfwConfirm}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const appConfig = global.appConfig;\n  const needsAgeVerification = appConfig.needAgeVideoVerification;\n\n  return {\n    needsAgeVerification,\n  };\n})(Video));\n","import { useEffect, useState } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { EmojiData, EmojiModule, EmojiRawData } from '../../../../util/emoji/emoji';\nimport type { Signal } from '../../../../util/signals';\n\nimport { EDITABLE_INPUT_CSS_SELECTOR, EDITABLE_INPUT_ID } from '../../../../config';\nimport { requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { selectCustomEmojiForEmojis } from '../../../../global/selectors';\nimport { uncompressEmoji } from '../../../../util/emoji/emoji';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport {\n  buildCollectionByKey, mapValues, pickTruthy, unique, uniqueByField,\n} from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport memoized from '../../../../util/memoized';\nimport renderText from '../../../common/helpers/renderText';\nimport { buildCustomEmojiHtml } from '../helpers/customEmoji';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ninterface Library {\n  keywords: string[];\n  byKeyword: Record<string, Emoji[]>;\n  names: string[];\n  byName: Record<string, Emoji[]>;\n  maxKeyLength: number;\n}\n\nlet emojiDataPromise: Promise<EmojiModule> | undefined;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nlet RE_EMOJI_SEARCH: RegExp;\nlet RE_LOWERCASE_TEST: RegExp;\nconst EMOJIS_LIMIT = 36;\nconst FILTER_MIN_LENGTH = 2;\n\nconst THROTTLE = 300;\n\nconst prepareRecentEmojisMemo = memoized(prepareRecentEmojis);\nconst prepareLibraryMemo = memoized(prepareLibrary);\nconst searchInLibraryMemo = memoized(searchInLibrary);\n\ntry {\n  RE_EMOJI_SEARCH = /(^|\\s):(?!\\s)[-+_:'\\s\\p{L}\\p{N}]*$/gui;\n  RE_LOWERCASE_TEST = /\\p{Ll}/u;\n} catch (e) {\n  // Support for older versions of firefox\n  RE_EMOJI_SEARCH = /(^|\\s):(?!\\s)[-+_:'\\s\\d\\wа-яёґєії]*$/gi;\n  RE_LOWERCASE_TEST = /[a-zяёґєії]/;\n}\n\nexport default function useEmojiTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  inputId = EDITABLE_INPUT_ID,\n  recentEmojiIds: string[],\n  baseEmojiKeywords?: Record<string, string[]>,\n  emojiKeywords?: Record<string, string[]>,\n) {\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const [byId, setById] = useState<Record<string, Emoji> | undefined>();\n  const [filteredEmojis, setFilteredEmojis] = useState<Emoji[]>(MEMO_EMPTY_ARRAY);\n  const [filteredCustomEmojis, setFilteredCustomEmojis] = useState<ApiSticker[]>(MEMO_EMPTY_ARRAY);\n\n  // Initialize data on first render\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    function exec() {\n      setById(emojiData.emojis);\n    }\n\n    if (emojiData) {\n      exec();\n    } else {\n      ensureEmojiData().then(exec);\n    }\n  }, [isEnabled]);\n\n  const detectEmojiCodeThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.includes(':') ? prepareForRegExp(html).match(RE_EMOJI_SEARCH)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getEmojiCode = useDerivedSignal(\n    detectEmojiCodeThrottled, [detectEmojiCodeThrottled, getHtml], true,\n  );\n\n  const updateFiltered = useLastCallback((emojis: Emoji[]) => {\n    setFilteredEmojis(emojis);\n\n    if (emojis === MEMO_EMPTY_ARRAY) {\n      setFilteredCustomEmojis(MEMO_EMPTY_ARRAY);\n      return;\n    }\n\n    const nativeEmojis = emojis.map((emoji) => emoji.native);\n    const customEmojis = uniqueByField(\n      selectCustomEmojiForEmojis(getGlobal(), nativeEmojis),\n      'id',\n    );\n    setFilteredCustomEmojis(customEmojis);\n  });\n\n  const insertEmoji = useLastCallback((emoji: string | ApiSticker, isForce = false) => {\n    const html = getHtml();\n    if (!html) return;\n\n    const atIndex = html.lastIndexOf(':', isForce ? html.lastIndexOf(':') - 1 : undefined);\n\n    if (atIndex !== -1) {\n      const emojiHtml = typeof emoji === 'string'\n        ? renderText(emoji, ['emoji_html'])[0] as string\n        : buildCustomEmojiHtml(emoji);\n      setHtml(`${html.substring(0, atIndex)}${emojiHtml}`);\n\n      const messageInput = inputId === EDITABLE_INPUT_ID\n        ? document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!\n        : document.getElementById(inputId) as HTMLDivElement;\n\n      requestNextMutation(() => {\n        focusEditableElement(messageInput, true, true);\n      });\n    }\n\n    updateFiltered(MEMO_EMPTY_ARRAY);\n  });\n\n  useEffect(() => {\n    const emojiCode = getEmojiCode();\n    if (!emojiCode || !byId) {\n      updateFiltered(MEMO_EMPTY_ARRAY);\n      return;\n    }\n\n    const newShouldAutoInsert = emojiCode.length > 2 && emojiCode.endsWith(':');\n\n    const filter = emojiCode.substring(1, newShouldAutoInsert ? 1 + emojiCode.length - 2 : undefined);\n    let matched: Emoji[] = MEMO_EMPTY_ARRAY;\n\n    if (!filter) {\n      matched = prepareRecentEmojisMemo(byId, recentEmojiIds, EMOJIS_LIMIT);\n    } else if ((filter.length === 1 && RE_LOWERCASE_TEST.test(filter)) || filter.length >= FILTER_MIN_LENGTH) {\n      const library = prepareLibraryMemo(byId, baseEmojiKeywords, emojiKeywords);\n      matched = searchInLibraryMemo(library, filter.toLowerCase(), EMOJIS_LIMIT);\n    }\n\n    if (!matched.length) {\n      updateFiltered(MEMO_EMPTY_ARRAY);\n      return;\n    }\n\n    if (newShouldAutoInsert) {\n      insertEmoji(matched[0].native, true);\n    } else {\n      updateFiltered(matched);\n    }\n  }, [\n    baseEmojiKeywords, byId, getEmojiCode, emojiKeywords, insertEmoji, recentEmojiIds, updateFiltered,\n  ]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isEmojiTooltipOpen: Boolean(filteredEmojis.length || filteredCustomEmojis.length) && !isManuallyClosed,\n    closeEmojiTooltip: markManuallyClosed,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  };\n}\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nfunction prepareRecentEmojis(byId: Record<string, Emoji>, recentEmojiIds: string[], limit: number) {\n  if (!byId || !recentEmojiIds.length) {\n    return MEMO_EMPTY_ARRAY;\n  }\n\n  return Object.values(pickTruthy(byId, recentEmojiIds)).slice(0, limit);\n}\n\nfunction prepareLibrary(\n  byId: Record<string, Emoji>,\n  baseEmojiKeywords?: Record<string, string[]>,\n  emojiKeywords?: Record<string, string[]>,\n): Library {\n  const emojis = Object.values(byId);\n\n  const byNative = buildCollectionByKey<Emoji>(emojis, 'native');\n  const baseEmojisByKeyword = baseEmojiKeywords\n    ? mapValues(baseEmojiKeywords, (natives) => {\n      return Object.values(pickTruthy(byNative, natives));\n    })\n    : {};\n  const emojisByKeyword = emojiKeywords\n    ? mapValues(emojiKeywords, (natives) => {\n      return Object.values(pickTruthy(byNative, natives));\n    })\n    : {};\n\n  const byKeyword = { ...baseEmojisByKeyword, ...emojisByKeyword };\n  const keywords = ([] as string[]).concat(Object.keys(baseEmojisByKeyword), Object.keys(emojisByKeyword));\n\n  const byName = emojis.reduce((result, emoji) => {\n    emoji.names.forEach((name) => {\n      if (!result[name]) {\n        result[name] = [];\n      }\n\n      result[name].push(emoji);\n    });\n\n    return result;\n  }, {} as Record<string, Emoji[]>);\n\n  const names = Object.keys(byName);\n  const maxKeyLength = keywords.reduce((max, keyword) => Math.max(max, keyword.length), 0);\n\n  return {\n    byKeyword,\n    keywords,\n    byName,\n    names,\n    maxKeyLength,\n  };\n}\n\nfunction searchInLibrary(library: Library, filter: string, limit: number) {\n  const {\n    byKeyword, keywords, byName, names, maxKeyLength,\n  } = library;\n\n  let matched: Emoji[] = [];\n\n  if (filter.length > maxKeyLength) {\n    return MEMO_EMPTY_ARRAY;\n  }\n\n  const matchedKeywords = keywords.filter((keyword) => keyword.startsWith(filter)).sort();\n  matched = matched.concat(Object.values(pickTruthy(byKeyword, matchedKeywords)).flat());\n\n  // Also search by names, which is useful for non-English languages\n  const matchedNames = names.filter((name) => name.startsWith(filter));\n  matched = matched.concat(Object.values(pickTruthy(byName, matchedNames)).flat());\n\n  matched = unique(matched);\n\n  if (!matched.length) {\n    return MEMO_EMPTY_ARRAY;\n  }\n\n  return matched.slice(0, limit);\n}\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiTooltip';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomEmojiTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomEmojiTooltip = useModuleLoader(Bundles.Extra, 'CustomEmojiTooltip', !isOpen);\n\n  return CustomEmojiTooltip ? <CustomEmojiTooltip {...props} /> : undefined;\n};\n\nexport default CustomEmojiTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SymbolMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default SymbolMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { IAnchorPosition, ThreadId } from '../../../types';\n\nimport { EDITABLE_INPUT_CSS_SELECTOR, EDITABLE_INPUT_MODAL_CSS_SELECTOR } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport SymbolMenu from './SymbolMenu.async';\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isMobile?: boolean;\n  isReady?: boolean;\n  isSymbolMenuOpen?: boolean;\n  canSendGifs?: boolean;\n  canSendStickers?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  forceDarkTheme?: boolean;\n  openSymbolMenu: VoidFunction;\n  closeSymbolMenu: VoidFunction;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n  closeBotCommandMenu?: VoidFunction;\n  closeSendAsMenu?: VoidFunction;\n  isSymbolMenuForced?: boolean;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  className?: string;\n  inputCssSelector?: string;\n};\n\nconst SymbolMenuButton: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isMobile,\n  canSendGifs,\n  canSendStickers,\n  isMessageComposer,\n  isReady,\n  isSymbolMenuOpen,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  isSymbolMenuForced,\n  className,\n  forceDarkTheme,\n  inputCssSelector = EDITABLE_INPUT_CSS_SELECTOR,\n  openSymbolMenu,\n  closeSymbolMenu,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n  closeBotCommandMenu,\n  closeSendAsMenu,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    addRecentEmoji,\n    addRecentCustomEmoji,\n  } = getActions();\n\n  const triggerRef = useRef<HTMLDivElement>();\n\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [contextMenuAnchor, setContextMenuAnchor] = useState<IAnchorPosition | undefined>(undefined);\n\n  const symbolMenuButtonClassName = buildClassName(\n    'composer-action-button mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleActivateSymbolMenu = useLastCallback(() => {\n    closeBotCommandMenu?.();\n    closeSendAsMenu?.();\n    openSymbolMenu();\n    const triggerEl = triggerRef.current;\n    if (!triggerEl) return;\n    const { x, y } = triggerEl.getBoundingClientRect();\n    setContextMenuAnchor({ x, y });\n  });\n\n  const handleSearchOpen = useLastCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  });\n\n  const handleSymbolMenuOpen = useLastCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(\n      isAttachmentModal ? EDITABLE_INPUT_MODAL_CSS_SELECTOR : inputCssSelector,\n    );\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu?.();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  });\n\n  const getTriggerElement = useLastCallback(() => triggerRef.current);\n  const getRootElement = useLastCallback(() => triggerRef.current?.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .SymbolMenu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  return (\n    <>\n      {isMobile ? (\n        <Button\n          className={symbolMenuButtonClassName}\n          round\n          color=\"translucent\"\n          onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n          ariaLabel=\"Choose emoji, sticker or GIF\"\n        >\n          <Icon name=\"smile\" />\n          <Icon name=\"keyboard\" />\n          {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n        </Button>\n      ) : (\n        <ResponsiveHoverButton\n          className={buildClassName('composer-action-button symbol-menu-button', isSymbolMenuOpen && 'activated')}\n          round\n          color=\"translucent\"\n          onActivate={handleActivateSymbolMenu}\n          ariaLabel=\"Choose emoji, sticker or GIF\"\n        >\n          <div ref={triggerRef} className=\"symbol-menu-trigger\" />\n          <Icon name=\"smile\" />\n        </ResponsiveHoverButton>\n      )}\n\n      <SymbolMenu\n        chatId={chatId}\n        threadId={threadId}\n        isOpen={isSymbolMenuOpen || Boolean(isSymbolMenuForced)}\n        canSendGifs={canSendGifs}\n        canSendStickers={canSendStickers}\n        isMessageComposer={isMessageComposer}\n        idPrefix={idPrefix}\n        onLoad={onSymbolMenuLoadingComplete}\n        onClose={closeSymbolMenu}\n        onEmojiSelect={onEmojiSelect}\n        onStickerSelect={onStickerSelect}\n        onCustomEmojiSelect={onCustomEmojiSelect}\n        onGifSelect={onGifSelect}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearchOpen}\n        addRecentEmoji={addRecentEmoji}\n        addRecentCustomEmoji={addRecentCustomEmoji}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n        className={buildClassName(className, forceDarkTheme && 'component-theme-dark')}\n        anchor={isAttachmentModal ? contextMenuAnchor : undefined}\n        getTriggerElement={isAttachmentModal ? getTriggerElement : undefined}\n        getRootElement={isAttachmentModal ? getRootElement : undefined}\n        getMenuElement={isAttachmentModal ? getMenuElement : undefined}\n        getLayout={isAttachmentModal ? getLayout : undefined}\n      />\n    </>\n  );\n};\n\nexport default memo(SymbolMenuButton);\n","import { getGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\nimport type { IconName } from '../../types/icons';\nimport type { Dispatch, StateReducer } from '../useReducer';\n\nimport { selectChat } from '../../global/selectors';\nimport { omit, pick } from '../../util/iteratees';\nimport useReducer from '../useReducer';\n\nexport type FolderChatType = {\n  icon: IconName;\n  title: string;\n  key: keyof Pick<ApiChatFolder, (\n    'contacts' | 'nonContacts' | 'groups' | 'channels' | 'bots' |\n    'excludeMuted' | 'excludeArchived' | 'excludeRead'\n  )>;\n};\n\nconst INCLUDE_FILTER_FIELDS: Array<keyof FolderIncludeFilters> = [\n  'includedChatIds', 'bots', 'channels', 'groups', 'contacts', 'nonContacts',\n];\nconst EXCLUDE_FILTER_FIELDS: Array<keyof FolderExcludeFilters> = [\n  'excludedChatIds', 'excludeArchived', 'excludeMuted', 'excludeRead',\n];\n\nexport function selectChatFilters(state: FoldersState, mode: 'included' | 'excluded', selectTemp?: boolean) {\n  let selectedChatIds: string[] = [];\n  let selectedChatTypes: FolderChatType['key'][] = [];\n\n  if (mode === 'included') {\n    const {\n      includedChatIds,\n      ...includeFilters\n    } = selectTemp\n      ? state.includeFilters || {}\n      : pick(\n        state.folder,\n        INCLUDE_FILTER_FIELDS,\n      );\n\n    selectedChatIds = includedChatIds || [];\n    selectedChatTypes = (Object.keys(includeFilters) as Array<keyof typeof includeFilters>)\n      .filter((key) => Boolean(includeFilters[key]));\n  } else {\n    const {\n      excludedChatIds,\n      ...excludeFilters\n    } = selectTemp\n      ? state.excludeFilters || {}\n      : pick(\n        state.folder,\n        EXCLUDE_FILTER_FIELDS,\n      );\n\n    selectedChatIds = excludedChatIds || [];\n    selectedChatTypes = (Object.keys(excludeFilters) as Array<keyof typeof excludeFilters>)\n      .filter((key) => Boolean(excludeFilters[key]));\n  }\n\n  const global = getGlobal();\n  const existingSelectedChatIds = selectedChatIds.filter((id) => selectChat(global, id));\n\n  return {\n    selectedChatIds: existingSelectedChatIds,\n    selectedChatTypes,\n  };\n}\n\nfunction getSuggestedFolderName(includeFilters?: FolderIncludeFilters) {\n  if (includeFilters) {\n    const {\n      includedChatIds,\n      ...filters\n    } = includeFilters;\n\n    if (\n      Object.values(filters).filter(Boolean).length > 1\n      || (includedChatIds?.length)\n    ) {\n      return '';\n    }\n\n    if (filters.bots) {\n      return 'Bots';\n    } else if (filters.groups) {\n      return 'Groups';\n    } else if (filters.channels) {\n      return 'Channels';\n    } else if (filters.contacts) {\n      return 'Contacts';\n    } else if (filters.nonContacts) {\n      return 'Non-Contacts';\n    }\n  }\n\n  return '';\n}\n\ntype FolderIncludeFilters = Pick<ApiChatFolder, (\n  'includedChatIds' | 'bots' | 'channels' | 'groups' | 'contacts' | 'nonContacts'\n)>;\ntype FolderExcludeFilters = Pick<ApiChatFolder, 'excludedChatIds' | 'excludeArchived' | 'excludeMuted' | 'excludeRead'>;\n\nexport type FoldersState = {\n  mode: 'create' | 'edit';\n  isLoading?: boolean;\n  isTouched?: boolean;\n  error?: string;\n  folderId?: number;\n  chatFilter: string;\n  folder: Omit<ApiChatFolder, 'id' | 'description' | 'emoticon'>;\n  includeFilters?: FolderIncludeFilters;\n  excludeFilters?: FolderExcludeFilters;\n};\nexport type FoldersActions = (\n  'setTitle' | 'saveFilters' | 'editFolder' | 'reset' | 'setChatFilter' | 'setIsLoading' | 'setError' |\n  'editIncludeFilters' | 'editExcludeFilters' | 'setIncludeFilters' | 'setExcludeFilters' | 'setIsTouched' |\n  'setFolderId' | 'setIsChatlist' | 'setColor'\n  );\nexport type FolderEditDispatch = Dispatch<FoldersState, FoldersActions>;\n\nconst INITIAL_STATE: FoldersState = {\n  mode: 'create',\n  chatFilter: '',\n  folder: {\n    title: { text: '' },\n    includedChatIds: [],\n    excludedChatIds: [],\n  },\n};\n\nconst foldersReducer: StateReducer<FoldersState, FoldersActions> = (\n  state,\n  action,\n): FoldersState => {\n  switch (action.type) {\n    case 'setTitle':\n      return {\n        ...state,\n        folder: {\n          ...state.folder,\n          title: { text: action.payload },\n        },\n        isTouched: true,\n      };\n    case 'setFolderId':\n      return {\n        ...state,\n        folderId: action.payload,\n        mode: 'edit',\n      };\n    case 'editIncludeFilters':\n      return {\n        ...state,\n        includeFilters: pick(\n          state.folder,\n          INCLUDE_FILTER_FIELDS,\n        ),\n      };\n    case 'editExcludeFilters':\n      return {\n        ...state,\n        excludeFilters: pick(\n          state.folder,\n          EXCLUDE_FILTER_FIELDS,\n        ),\n      };\n    case 'setIncludeFilters':\n      return {\n        ...state,\n        includeFilters: action.payload,\n        chatFilter: '',\n      };\n    case 'setExcludeFilters':\n      return {\n        ...state,\n        excludeFilters: action.payload,\n        chatFilter: '',\n      };\n    case 'saveFilters':\n      if (state.includeFilters) {\n        return {\n          ...state,\n          folder: {\n            ...omit(state.folder, INCLUDE_FILTER_FIELDS),\n            title: state.folder.title ? state.folder.title : { text: getSuggestedFolderName(state.includeFilters) },\n            ...state.includeFilters,\n          },\n          includeFilters: undefined,\n          chatFilter: '',\n          isTouched: true,\n        };\n      } else if (state.excludeFilters) {\n        return {\n          ...state,\n          folder: {\n            ...omit(state.folder, EXCLUDE_FILTER_FIELDS),\n            ...state.excludeFilters,\n          },\n          excludeFilters: undefined,\n          chatFilter: '',\n          isTouched: true,\n        };\n      } else {\n        return state;\n      }\n    case 'editFolder': {\n      const { id: folderId, ...folder } = action.payload;\n\n      return {\n        mode: 'edit',\n        folderId,\n        folder,\n        chatFilter: '',\n      };\n    }\n    case 'setChatFilter': {\n      return {\n        ...state,\n        chatFilter: action.payload,\n      };\n    }\n    case 'setIsTouched': {\n      return {\n        ...state,\n        isTouched: action.payload,\n      };\n    }\n    case 'setIsLoading': {\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    }\n    case 'setError': {\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload,\n      };\n    }\n    case 'setIsChatlist':\n      return {\n        ...state,\n        folder: {\n          ...state.folder,\n          isChatList: action.payload,\n        },\n      };\n    case 'setColor':\n      return {\n        ...state,\n        folder: {\n          ...state.folder,\n          color: action.payload,\n        },\n        isTouched: true,\n      };\n    case 'reset':\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n\nconst useFoldersReducer = () => {\n  return useReducer(foldersReducer, INITIAL_STATE);\n};\n\nexport default useFoldersReducer;\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || (nextMessage.suggestedPostInfo)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n            && nextMessage.id !== topMessageId)\n          || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {} as Complete<StateProps>;\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasMessages?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n  hasMessages,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>\n        {lang('UserUpdatedName', {\n          user: chat.title,\n          time: formatPastDatetime(lang, nameChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>\n        {lang('UserUpdatedPhoto', {\n          user: chat.title,\n          time: formatPastDatetime(lang, photoChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && !hasMessages && (\n        <span>{oldLang('NoMessages')}</span>\n      )}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage | undefined,\n  chatId: string,\n  isQuickPreview?: boolean,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (!isQuickPreview) {\n      if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n        markMessageListRead({ maxId });\n      }\n\n      if (mentionIds.length) {\n        markMentionsRead({ chatId, messageIds: mentionIds });\n      }\n\n      if (scheduledToUpdateViews.length) {\n        scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n      }\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage?.({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, getMinMediaWidthWithText } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: ElementRef<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const contentRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const content = message && getMessageContent(message);\n  const {\n    photo, video, text,\n  } = content || {};\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < getMinMediaWidthWithText(isMobile)) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMobile), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile, text?.text]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? selectMessageDownloadableMedia(global, message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { ElementRef, FC } from '../../lib/teact/teact';\nimport { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  getSuggestedChangesActionText,\n  getSuggestedChangesInfo,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectChatMessage, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate, formatScheduledDateTime } from '../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../util/formatCurrency';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText, formatTonAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport { renderPeerLink } from './message/helpers/messageActions';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\nimport actionMessageStyles from './message/ActionMessage.module.scss';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isChatMonoforum?: boolean;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: ElementRef<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  isQuickPreview?: boolean;\n  onScrollDownToggle?: BooleanToVoidFunction;\n  onNotchToggle?: AnyToVoidFunction;\n  onIntersectPinnedMessage?: OnIntersectPinnedMessage;\n  canPost?: boolean;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  isChatMonoforum,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  isQuickPreview,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n  canPost,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId, isQuickPreview);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>\n            {\n              message.isOutgoing\n                ? lang('ActionPaidOneMessageOutgoing', {\n                  amount: formatStarsAsText(lang, amount),\n                })\n                : (() => {\n                  const sender = selectSender(getGlobal(), message);\n                  const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                  return lang('ActionPaidOneMessageIncoming', {\n                    user: userTitle,\n                    amount: formatStarsAsText(lang, amount),\n                  });\n                })()\n            }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const renderSuggestedPostInfoAction = (message: ApiMessage) => {\n    if (message.suggestedPostInfo) {\n      const { price, scheduleDate } = message.suggestedPostInfo;\n      const sender = selectSender(getGlobal(), message);\n      const userTitle = sender ? getPeerTitle(lang, sender) : '';\n      const userLink = renderPeerLink(sender?.id, userTitle || lang('ActionFallbackUser'));\n\n      const originalMessage = message.replyInfo?.type === 'message' && message.replyInfo.replyToMsgId\n        ? selectChatMessage(getGlobal(), message.chatId, message.replyInfo.replyToMsgId)\n        : undefined;\n      const changesInfo = getSuggestedChangesInfo(message, originalMessage);\n\n      const titleText = changesInfo\n        ? getSuggestedChangesActionText(lang, message, originalMessage, message.isOutgoing, userLink)\n        : message.isOutgoing\n          ? lang('ActionSuggestedPostOutgoing', undefined, { withNodes: true, withMarkdown: true })\n          : lang('ActionSuggestedPostIncoming', { user: userLink }, { withNodes: true, withMarkdown: true });\n\n      const tableData: TableEntry[] = compact([\n        [lang('TitlePrice'), price ? (price.currency === 'TON'\n          ? formatTonAsText(lang, convertTonFromNanos(price.amount))\n          : formatStarsAsText(lang, price.amount)) : lang('SuggestMessageNoPrice')],\n        [lang('TitleTime'),\n          scheduleDate\n            ? formatScheduledDateTime(scheduleDate, lang, oldLang)\n            : lang('SuggestMessageAnytime'),\n        ],\n      ]);\n\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`suggested-post-action-${message.id}`}\n        >\n          <span className={actionMessageStyles.suggestedPostContainer}>\n            <div\n              className={actionMessageStyles.suggestedPostTitle}\n            >\n              {titleText}\n            </div>\n            {Boolean(tableData.length) && (\n              <MiniTable\n                className={actionMessageStyles.suggestedPostInfo}\n                data={tableData}\n              />\n            )}\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat || Boolean(isChatMonoforum);\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          message.suggestedPostInfo && renderSuggestedPostInfoAction(message),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            // eslint-disable-next-line react-x/no-duplicate-key\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>\n                {oldLang(isEmptyThread\n                  ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n          canPost={canPost}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n        && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} hasMessages />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction | undefined,\n  onNotchToggle: AnyToVoidFunction | undefined,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const backwardsTriggerRef = useRef<HTMLDivElement>();\n  const forwardsTriggerRef = useRef<HTMLDivElement>();\n  const fabTriggerRef = useRef<HTMLDivElement>();\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle?.(false);\n      onNotchToggle?.(false);\n\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle?.(true);\n      onNotchToggle?.(true);\n\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle?.(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle?.(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPeer } from '../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../global/helpers/peers';\nimport { selectPeer, selectTheme, selectThemeValues } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  peer?: ApiPeer;\n};\n\nfunction RequirementToContactMessage({\n  patternColor, peer, paidMessagesStars,\n}: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  if (!peer) return undefined;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang(isApiPeerUser(peer) ? 'MessagesPlaceholderPaidUser' : 'MessagesPlaceholderPaidChannel', {\n                peer: getPeerTitle(lang, peer),\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', getPeerTitle(lang, peer)), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { peerId: userId }): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, userId);\n\n    return {\n      patternColor,\n      peer,\n    };\n  })(RequirementToContactMessage),\n);\n","import type { FC } from '@teact';\nimport { beginHeavyAnimation, memo, useEffect, useMemo, useRef } from '@teact';\nimport { addExtraClass, removeExtraClass } from '@teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic } from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatMonoforum,\n  isSystemBot,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectMonoforumChannel,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectIsChatRestricted } from '../../global/selectors/chats';\nimport { selectActiveRestrictionReasons, selectCurrentMessageList } from '../../global/selectors/messages';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport Transition from '../ui/Transition.tsx';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n  isQuickPreview?: boolean;\n  onScrollDownToggle?: BooleanToVoidFunction;\n  onNotchToggle?: AnyToVoidFunction;\n  onIntersectPinnedMessage?: OnIntersectPinnedMessage;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatMonoforum?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReasons?: ApiRestrictionReason[];\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n  monoforumChannelId?: string;\n  canTranslate?: boolean;\n  translationLanguage?: string;\n  shouldAutoTranslate?: boolean;\n  isActive?: boolean;\n};\n\nenum Content {\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Loading,\n  Restricted,\n  StarsRequired,\n  PremiumRequired,\n  AccountInfo,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  ContactGreeting,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  NoMessages,\n  MessageList,\n}\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isActive,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  isChatMonoforum,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReasons,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  isAccountFrozen,\n  hasCustomGreeting,\n  monoforumChannelId,\n  isAppConfigLoaded,\n  canTranslate,\n  translationLanguage,\n  shouldAutoTranslate,\n  isQuickPreview,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks, requestChatTranslation,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  // Enable auto translation for the chat if it's available\n  useEffect(() => {\n    if (!shouldAutoTranslate || !canTranslate) return;\n    requestChatTranslation({ chatId, toLanguageCode: translationLanguage });\n  }, [shouldAutoTranslate, canTranslate, translationLanguage, chatId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen || !isActive) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || !isActive) {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled' || !isActive) {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled' || !isActive) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(\n      () => loadViewportMessages({ direction: LoadMoreDirection.Around, chatId, threadId }),\n      1000,\n      true,\n      false,\n    );\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage?.({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread' && !isQuickPreview) {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement : firstUnreadElement,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = Boolean((messageIds && messageGroups) || lastMessage);\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle?.(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  const activeKey = isRestricted ? (\n    Content.Restricted\n  ) : paidMessagesStars && !hasMessages && !hasCustomGreeting ? (\n    Content.StarsRequired\n  ) : isContactRequirePremium && !hasMessages ? (\n    Content.PremiumRequired\n  ) : (isBot || isNonContact) && !hasMessages ? (\n    Content.AccountInfo\n  ) : shouldRenderGreeting ? (\n    Content.ContactGreeting\n  ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n    Content.NoMessages\n  ) : hasMessages ? (\n    Content.MessageList\n  ) : (\n    Content.Loading\n  );\n\n  function renderContent() {\n    return activeKey === Content.Restricted ? (\n      <div className=\"empty\">\n        <span>\n          {restrictionReasons?.[0]?.text || `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n        </span>\n      </div>\n    ) : activeKey === Content.StarsRequired ? (\n      <RequirementToContactMessage paidMessagesStars={paidMessagesStars} peerId={monoforumChannelId || chatId} />\n    ) : activeKey === Content.PremiumRequired ? (\n      <RequirementToContactMessage peerId={chatId} />\n    ) : activeKey === Content.AccountInfo ? (\n      <MessageListAccountInfo chatId={chatId} hasMessages={hasMessages} />\n    ) : activeKey === Content.ContactGreeting ? (\n      <ContactGreeting key={chatId} userId={chatId} />\n    ) : activeKey === Content.NoMessages ? (\n      <NoMessages\n        chatId={chatId}\n        topic={topic}\n        type={type}\n        isChatWithSelf={isChatWithSelf}\n        isGroupChatJustCreated={isGroupChatJustCreated}\n      />\n    ) : activeKey === Content.MessageList ? (\n      <MessageListContent\n        canShowAds={areAdsEnabled && isChannelChat}\n        chatId={chatId}\n        isComments={isComments}\n        isChannelChat={isChannelChat}\n        isChatMonoforum={isChatMonoforum}\n        isSavedDialog={isSavedDialog}\n        messageIds={messageIds || [lastMessage!.id]}\n        messageGroups={messageGroups || groupMessages([lastMessage!])}\n        getContainerHeight={getContainerHeight}\n        isViewportNewest={Boolean(isViewportNewest)}\n        isUnread={Boolean(firstUnreadId)}\n        isEmptyThread={isEmptyThread}\n        withUsers={withUsers}\n        noAvatars={noAvatars}\n        containerRef={containerRef}\n        anchorIdRef={anchorIdRef}\n        memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n        memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n        threadId={threadId}\n        type={type}\n        isReady={isReady}\n        hasLinkedChat={hasLinkedChat}\n        isSchedule={messageGroups ? type === 'scheduled' : false}\n        shouldRenderAccountInfo={isBot || isNonContact}\n        nameChangeDate={nameChangeDate}\n        photoChangeDate={photoChangeDate}\n        noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n        isQuickPreview={isQuickPreview}\n        onScrollDownToggle={onScrollDownToggle}\n        onNotchToggle={onNotchToggle}\n        onIntersectPinnedMessage={onIntersectPinnedMessage}\n        canPost={canPost}\n      />\n    ) : (\n      <Loading color=\"white\" backgroundColor=\"dark\" />\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      className={className}\n      name=\"fade\"\n      activeKey={activeKey}\n      shouldCleanup\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {renderContent()}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): Complete<StateProps> => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId } as Complete<StateProps>;\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId } as Complete<StateProps>;\n    }\n\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    const restrictionReasons = selectActiveRestrictionReasons(global, chat?.restrictionReasons);\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    const monoforumChannelId = selectMonoforumChannel(global, chatId)?.id;\n    const canTranslate = selectCanTranslateChat(global, chatId) && !chatFullInfo?.isTranslationDisabled;\n    const shouldAutoTranslate = chat?.hasAutoTranslation;\n    const translationLanguage = selectTranslationLanguage(global);\n\n    const currentMessageList = selectCurrentMessageList(global);\n    const isActive = currentMessageList && currentMessageList.chatId === chatId\n      && currentMessageList.threadId === threadId && currentMessageList.type === type;\n\n    return {\n      isActive,\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReasons,\n      isChannelChat: isChatChannel(chat),\n      isChatMonoforum: isChatMonoforum(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      lastMessage: withLastMessageWhenPreloading ? lastMessage : undefined,\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n      monoforumChannelId,\n      canTranslate,\n      translationLanguage,\n      shouldAutoTranslate,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: ElementRef<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\",\"contextMenu\":\"FHxnbOg6\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MESSAGE_APPEARANCE_DELAY,\n} from '../../../config';\nimport {\n  getMainUsername,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n    canPost?: boolean;\n    isInFocusList?: boolean;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  canPost,\n  isInFocusList,\n}) => {\n  const { openChat, updateInsertingPeerIdMention } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const isAvatarPeerUser = avatarPeer && isApiPeerUser(avatarPeer);\n\n  const handleOpenChat = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleMention = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (messageInput) {\n      updateInsertingPeerIdMention({ peerId: avatarPeer.id });\n    }\n  });\n\n  const handleAvatarClick = useLastCallback(() => {\n    handleOpenChat();\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    noMountTransition: isShown,\n    withShouldRender: true,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(avatarRef);\n\n  const getTriggerElement = useLastCallback(() => avatarRef.current);\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n  const getMenuElement = useLastCallback(\n    () => avatarRef?.current?.querySelector(`.${styles.contextMenu} .bubble`),\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const canMention = canPost && avatarPeer && (isAvatarPeerUser || Boolean(getMainUsername(avatarPeer)));\n  const shouldRenderContextMenu = Boolean(contextMenuAnchor) && (isAvatarPeerUser || canMention) && !isInFocusList;\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n        getMenuElement={getMenuElement}\n        className={styles.contextMenu}\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        withPortal\n        autoClose\n      >\n        <>\n          {isAvatarPeerUser && (\n            <MenuItem\n              icon=\"comments\"\n              onClick={handleOpenChat}\n            >\n              {lang('SendMessage')}\n            </MenuItem>\n          )}\n          {canMention && (\n            <MenuItem\n              icon=\"mention\"\n              onClick={handleMention}\n            >\n              {lang('ContextMenuItemMention')}\n            </MenuItem>\n          )}\n        </>\n      </Menu>\n    );\n  }\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n        onContextMenu={handleContextMenu}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {renderAvatar()}\n          {shouldRenderContextMenu && renderContextMenu()}\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): Complete<StateProps> => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { ApiMediaExtendedPreview, ApiPhoto, ApiVideo } from '../../../../api/types';\n\nimport {\n  calculateExtendedPreviewDimensions,\n  calculateInlineImageDimensions,\n  calculateVideoDimensions,\n  REM,\n} from '../../../common/helpers/mediaDimensions';\n\nconst SMALL_IMAGE_THRESHOLD = 12;\nconst MIN_MESSAGE_LENGTH_FOR_BLUR = 40;\nconst MIN_MEDIA_WIDTH = SMALL_IMAGE_THRESHOLD * REM;\nexport const MIN_MEDIA_HEIGHT = 5 * REM;\n\nexport function getMinMediaWidthWithText(isMobile: boolean) {\n  return (isMobile ? 14 : 20) * REM;\n}\n\nexport function getMinMediaWidth(text: string = '', isMobile: boolean, hasCommentButton?: boolean) {\n  return text.length > MIN_MESSAGE_LENGTH_FOR_BLUR || hasCommentButton\n    ? getMinMediaWidthWithText(isMobile)\n    : MIN_MEDIA_WIDTH;\n}\n\nexport function calculateMediaDimensions({\n  media,\n  messageText,\n  isOwn,\n  isInWebPage,\n  asForwarded,\n  noAvatars,\n  isMobile,\n}: {\n  media: ApiPhoto | ApiVideo | ApiMediaExtendedPreview;\n  messageText?: string;\n  isOwn?: boolean;\n  isInWebPage?: boolean;\n  asForwarded?: boolean;\n  noAvatars?: boolean;\n  isMobile: boolean;\n}) {\n  const isPhoto = media.mediaType === 'photo';\n  const isVideo = media.mediaType === 'video';\n  const isWebPagePhoto = isPhoto && isInWebPage;\n  const isWebPageVideo = isVideo && isInWebPage;\n  const { width, height } = isPhoto\n    ? calculateInlineImageDimensions(media, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile)\n    : isVideo ? calculateVideoDimensions(media, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile)\n      : calculateExtendedPreviewDimensions(media, isOwn, asForwarded, isInWebPage, noAvatars, isMobile);\n\n  const minMediaWidth = getMinMediaWidth(messageText, isMobile);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","import type { MediaContainer, SizeTarget } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport { getMessageMediaHash } from '../../global/helpers/messageMedia';\nimport useSelector from '../data/useSelector';\n\nfunction selectWebPagesById(global: GlobalState) {\n  return global.messages.webPageById;\n}\n\nexport default function useMessageMediaHash(message: MediaContainer | undefined, target: SizeTarget) {\n  const webPagesById = useSelector(selectWebPagesById);\n  if (!message) return undefined;\n\n  const webPageId = message.content.webPage?.id;\n  const webPage = webPageId ? webPagesById[webPageId] : undefined;\n\n  return getMessageMediaHash(message, { webPage }, target);\n}\n","import { IS_TOUCH_ENV } from './browser/windowEnvironment';\n\nexport default function focusEditableElement(element: HTMLElement, force?: boolean, forcePlaceCaretAtEnd?: boolean) {\n  if (!force && element === document.activeElement) {\n    return;\n  }\n\n  const selection = window.getSelection()!;\n  const range = document.createRange();\n  const lastChild = element.lastChild || element;\n\n  if (!IS_TOUCH_ENV && !forcePlaceCaretAtEnd && (!lastChild || !lastChild.nodeValue)) {\n    element.focus();\n    return;\n  }\n\n  range.selectNodeContents(forcePlaceCaretAtEnd ? element : lastChild);\n  // `false` means collapse to the end rather than the start\n  range.collapse(false);\n  selection.removeAllRanges();\n  selection.addRange(range);\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\nimport useLastCallback from './useLastCallback';\n\nconst MENU_CLOSE_TIMEOUT = 250;\nlet closeTimeout: number | undefined;\n\nexport default function useMouseInside(\n  isOpen: boolean, onClose: NoneToVoidFunction, menuCloseTimeout = MENU_CLOSE_TIMEOUT, isDisabled = false,\n) {\n  const isMouseInside = useRef(false);\n\n  const markMouseInside = useLastCallback(() => {\n    isMouseInside.current = true;\n  });\n\n  useEffect(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    if (isOpen && !IS_TOUCH_ENV && !isDisabled) {\n      closeTimeout = window.setTimeout(() => {\n        if (!isMouseInside.current) {\n          onClose();\n        }\n      }, menuCloseTimeout * 2);\n    }\n  }, [isDisabled, isOpen, menuCloseTimeout, onClose]);\n\n  const handleMouseEnter = useLastCallback(() => {\n    isMouseInside.current = true;\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        onClose();\n      }\n    }, menuCloseTimeout);\n  });\n\n  return [handleMouseEnter, handleMouseLeave, markMouseInside];\n}\n","import { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiWebPage } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { TextPart } from '../../types';\n\nimport {\n  getFirstLinkInMessage,\n  getMessageTextWithFallback,\n} from '../../global/helpers';\nimport { selectWebPageFromMessage } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatPastTimeShort } from '../../util/dates/dateFormat';\nimport trimText from '../../util/trimText';\nimport { renderMessageSummary } from './helpers/renderMessageText';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\nimport Media from './Media';\nimport SafeLink from './SafeLink';\n\nimport './WebLink.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype ApiWebPageWithFormatted =\n  ApiWebPage\n  & { formattedDescription?: TextPart[] };\n\ntype OwnProps = {\n  message: ApiMessage;\n  senderTitle?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onMessageClick: (message: ApiMessage) => void;\n};\n\ntype StateProps = {\n  webPage?: ApiWebPage;\n};\n\nconst WebLink = ({\n  message, webPage, senderTitle, isProtected, observeIntersection, onMessageClick,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  let linkData: ApiWebPageWithFormatted | undefined = webPage;\n\n  if (!linkData) {\n    const link = getFirstLinkInMessage(message);\n    if (link) {\n      const { url, domain } = link;\n\n      linkData = {\n        siteName: domain.replace(/^www./, ''),\n        url: url.includes('://') ? url : url.includes('@') ? `mailto:${url}` : `http://${url}`,\n        formattedDescription: getMessageTextWithFallback(lang, message)?.text !== url\n          ? renderMessageSummary(lang, message, undefined, undefined, MAX_TEXT_LENGTH)\n          : undefined,\n      } as ApiWebPageWithFormatted;\n    }\n  }\n\n  const handleMessageClick = useLastCallback(() => {\n    onMessageClick(message);\n  });\n\n  if (linkData?.webpageType !== 'full') {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    formattedDescription,\n    photo,\n    video,\n  } = linkData;\n\n  const truncatedDescription = !senderTitle && description && trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebLink scroll-item',\n    (!photo && !video) && 'without-media',\n  );\n\n  const safeLinkContent = url.replace('mailto:', '') || displayUrl;\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {photo && (\n        <Media message={message} isProtected={isProtected} observeIntersection={observeIntersection} />\n      )}\n      <div className=\"content\">\n        <Link isRtl={lang.isRtl} className=\"site-title\" onClick={handleMessageClick}>\n          {renderText(title || siteName || displayUrl)}\n        </Link>\n        {(truncatedDescription || formattedDescription) && (\n          <Link isRtl={lang.isRtl} className=\"site-description\" onClick={handleMessageClick}>\n            {formattedDescription || (truncatedDescription && renderText(truncatedDescription))}\n          </Link>\n        )}\n        <SafeLink\n          url={url}\n          className=\"site-name\"\n          text={safeLinkContent}\n          isRtl={lang.isRtl}\n        />\n        {senderTitle && <div className=\"sender-name\">{renderText(senderTitle)}</div>}\n      </div>\n      {senderTitle && (\n        <div className=\"message-date\">\n          <Link\n            className=\"date\"\n            onClick={handleMessageClick}\n            isRtl={lang.isRtl}\n          >\n            {formatPastTimeShort(oldLang, message.date * 1000)}\n          </Link>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message,\n  }): Complete<StateProps> => {\n    const webPage = selectWebPageFromMessage(global, message);\n\n    return {\n      webPage,\n    };\n  },\n)(WebLink));\n","import { areSortedArraysEqual } from './iteratees';\n\nconst cache = new WeakMap<AnyFunction, {\n  lastArgs: any[];\n  lastResult: any;\n}>();\n\nexport default function memoized<T extends AnyFunction>(fn: T) {\n  return (...args: Parameters<T>): ReturnType<T> => {\n    const cached = cache.get(fn);\n    if (cached && areSortedArraysEqual(cached.lastArgs, args)) {\n      return cached.lastResult;\n    }\n\n    const result = fn(...args);\n    cache.set(fn, { lastArgs: args, lastResult: result });\n    return result;\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport CustomEmoji from './CustomEmoji';\nimport TopicDefaultIcon from './TopicDefaultIcon';\n\ntype OwnProps = {\n  topic: Pick<ApiTopic, 'iconEmojiId' | 'iconColor' | 'title' | 'id'>;\n  className?: string;\n  letterClassName?: string;\n  size?: number;\n  noLoopLimit?: true;\n  observeIntersection?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\nconst LOOP_LIMIT = 2;\nconst DEFAULT_ICON_ID = '0';\n\nconst TopicIcon: FC<OwnProps> = ({\n  topic,\n  className,\n  letterClassName,\n  size,\n  noLoopLimit,\n  observeIntersection,\n  onClick,\n}) => {\n  if (topic.iconEmojiId && topic.iconEmojiId !== DEFAULT_ICON_ID) {\n    return (\n      <CustomEmoji\n        documentId={topic.iconEmojiId}\n        className={className}\n        size={size}\n        observeIntersectionForPlaying={observeIntersection}\n        loopLimit={!noLoopLimit ? LOOP_LIMIT : undefined}\n        onClick={onClick}\n      />\n    );\n  }\n\n  return (\n    <TopicDefaultIcon\n      iconColor={topic.iconColor}\n      title={topic.title}\n      topicId={topic.id}\n      className={className}\n      letterClassName={letterClassName}\n      onClick={onClick}\n    />\n  );\n};\n\nexport default memo(TopicIcon);\n","import { useRef, useUnmountCleanup } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst DEFAULT_THRESHOLD = 250;\n\nfunction useLongPress({\n  onClick, onStart, onEnd, threshold = DEFAULT_THRESHOLD,\n}: {\n  onStart?: NoneToVoidFunction;\n  onClick?: (event: React.MouseEvent | React.TouchEvent) => void;\n  onEnd?: NoneToVoidFunction;\n  threshold?: number;\n}) {\n  const isLongPressActive = useRef(false);\n  const isPressed = useRef(false);\n  const timerId = useRef<number | undefined>(undefined);\n\n  const start = useLastCallback((e: React.MouseEvent | React.TouchEvent) => {\n    const canProcessEvent = ('button' in e && e.button === 0) || ('touches' in e && e.touches.length > 0);\n    if (isPressed.current || !canProcessEvent) {\n      return;\n    }\n\n    isPressed.current = true;\n    timerId.current = window.setTimeout(() => {\n      onStart?.();\n      isLongPressActive.current = true;\n    }, threshold);\n  });\n\n  const end = useLastCallback((e: React.MouseEvent | React.TouchEvent) => {\n    if (!isPressed.current) return;\n\n    if (isLongPressActive.current) {\n      onEnd?.();\n    } else {\n      onClick?.(e);\n    }\n\n    cancel();\n  });\n\n  const cancel = useLastCallback(() => {\n    isLongPressActive.current = false;\n    isPressed.current = false;\n    window.clearTimeout(timerId.current);\n  });\n\n  useUnmountCleanup(() => {\n    window.clearTimeout(timerId.current);\n  });\n\n  return {\n    onMouseDown: start,\n    onMouseUp: end,\n    onMouseLeave: end,\n    onTouchStart: start,\n    onTouchEnd: end,\n  };\n}\n\nexport default useLongPress;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"LzylDSXD\",\"customBgImage\":\"iBGWkDsW\",\"customBgColor\":\"HnpqkkHj\",\"withTransition\":\"V96TOnoY\",\"blurred\":\"K_W7XNrk\",\"withRightColumn\":\"EiMC9Ymb\"};","const extractorEl = document.createElement('div');\n\nexport function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n\nexport function getHtmlBeforeSelection(container?: HTMLElement, useCommonAncestor?: boolean) {\n  if (!container) {\n    return '';\n  }\n\n  const sel = window.getSelection();\n  if (!sel || !sel.rangeCount) {\n    return container.innerHTML;\n  }\n\n  const range = sel.getRangeAt(0).cloneRange();\n  if (!range.intersectsNode(container)) {\n    return container.innerHTML;\n  }\n\n  if (!useCommonAncestor && !container.contains(range.commonAncestorContainer)) {\n    return '';\n  }\n\n  range.collapse(true);\n  range.setStart(container, 0);\n\n  extractorEl.innerHTML = '';\n  extractorEl.appendChild(range.cloneContents());\n\n  return extractorEl.innerHTML;\n}\n\n// https://stackoverflow.com/a/3976125\nexport function getCaretPosition(element: HTMLElement) {\n  let caretPosition = 0;\n  const selection = window.getSelection();\n  if (!selection || selection.rangeCount === 0) {\n    return caretPosition;\n  }\n\n  const range = selection.getRangeAt(0);\n  const caretRange = range.cloneRange();\n  caretRange.selectNodeContents(element);\n  caretRange.setEnd(range.endContainer, range.endOffset);\n  caretPosition = caretRange.toString().length;\n\n  return caretPosition;\n}\n\n// https://stackoverflow.com/a/36953852\nexport function setCaretPosition(element: Node, position: number) {\n  for (const node of element.childNodes) {\n    if (node.nodeType === Node.TEXT_NODE) {\n      if ((node as Text).length >= position) {\n        const range = document.createRange();\n        const selection = window.getSelection()!;\n        range.setStart(node, position);\n        range.collapse(true);\n        selection.removeAllRanges();\n        selection.addRange(range);\n\n        return -1;\n      } else {\n        position -= 'length' in node ? node.length as number : 0;\n      }\n    } else {\n      position = setCaretPosition(node, position);\n      if (position === -1) {\n        return -1;\n      }\n    }\n  }\n\n  return position;\n}\n\nexport function removeAllSelections() {\n  const selection = window.getSelection();\n  selection?.removeAllRanges();\n}\n","import type { ThemeKey } from '../../../../types';\n\nimport { MAX_WORKERS, requestMediaWorker } from '../../../../util/launchMediaWorkers';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, id: number, isSelected?: boolean, theme?: ThemeKey,\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n\n  return requestMediaWorker({\n    name: 'offscreen-canvas:getAppendixColorFromImage',\n    args: [src, isOwn],\n  }, Math.round(id) % MAX_WORKERS);\n}\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TEST } from '../config';\n\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (IS_TEST) return [];\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker, undefined, 'media');\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n\nexport function requestMediaWorker(payload: Parameters<Connector<MediaWorkerApi>['request']>[0], index: number) {\n  return launchMediaWorkers()[index].connector.request(payload);\n}\n","import { useEffect, useSignal } from '../lib/teact/teact';\n\nexport default function useGetSelectionRange(inputSelector: string) {\n  const [getRange, setRange] = useSignal<Range | undefined>();\n\n  useEffect(() => {\n    function onSelectionChange() {\n      const selection = window.getSelection();\n      if (!selection?.rangeCount) return;\n\n      const range = selection.getRangeAt(0);\n      if (!range) {\n        return;\n      }\n\n      const inputEl = document.querySelector(inputSelector);\n      if (!inputEl) {\n        return;\n      }\n\n      const { commonAncestorContainer } = range;\n      const element = commonAncestorContainer instanceof Element\n        ? commonAncestorContainer\n        : commonAncestorContainer.parentElement!;\n      if (element.closest(inputSelector)) {\n        setRange(range);\n      }\n    }\n\n    document.addEventListener('selectionchange', onSelectionChange);\n\n    return () => document.removeEventListener('selectionchange', onSelectionChange);\n  }, [inputSelector, setRange]);\n\n  return getRange;\n}\n","import buildStyle from '../../util/buildStyle';\nimport useLastCallback from '../useLastCallback';\nimport useUniqueId from '../useUniqueId';\n\nconst VTN_PROPERTY_NAME = '--_vtn';\n\nCSS.registerProperty?.({\n  name: VTN_PROPERTY_NAME,\n  syntax: '*',\n  inherits: false,\n});\n\nexport function useVtn(uniqueId?: string) {\n  const fallbackId = useUniqueId();\n\n  // Pass `true` to use the same class name as the name parameter\n  const createVtnStyle = useLastCallback((name: string, vtClass?: string | boolean) => {\n    const vtClassString = vtClass === true ? name : (vtClass || undefined);\n    return buildStyle(\n      `${VTN_PROPERTY_NAME}: vtn-${name}-${uniqueId || fallbackId}`,\n      vtClassString && `view-transition-class: ${vtClassString}`,\n    );\n  });\n\n  return {\n    createVtnStyle,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './DropTarget.scss';\n\nexport type OwnProps = {\n  isQuick?: boolean;\n  isGeneric?: boolean;\n  onFileSelect: (e: React.DragEvent<HTMLDivElement>) => void;\n};\n\nconst DropTarget: FC<OwnProps> = ({ isQuick, isGeneric, onFileSelect }) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  const handleDragLeave = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { relatedTarget: toTarget } = e;\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  });\n\n  const className = buildClassName(\n    'DropTarget',\n    isHovered && 'hovered',\n  );\n\n  return (\n    <div\n      className={className}\n      ref={ref}\n      onDrop={onFileSelect}\n      onDragEnter={markHovered}\n      onDragLeave={handleDragLeave}\n      data-dropzone\n    >\n      <svg className=\"target-outline-container\">\n        <rect className=\"target-outline\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" rx=\"8\" />\n      </svg>\n      <div className=\"target-content\">\n        <Icon name={isQuick ? 'photo' : 'document'} />\n        <div className=\"title\">{lang('FileDropZoneTitle')}</div>\n        {!isGeneric && (\n          <div className=\"description\">\n            {isQuick ? lang('FileDropZoneQuick') : lang('FileDropZoneNoCompression')}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(DropTarget);\n","import { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { canReplaceMessageMedia } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildAttachment from './helpers/buildAttachment';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Portal from '../../ui/Portal';\nimport DropTarget from './DropTarget';\n\nimport './DropArea.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withQuick?: boolean;\n  editingMessage?: ApiMessage | undefined;\n  onHide: NoneToVoidFunction;\n  onFileSelect: (files: File[]) => void;\n};\n\nexport enum DropAreaState {\n  None = 'none',\n  Document = 'document',\n  QuickFile = 'quick_file',\n}\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst DropArea = ({\n  isOpen, withQuick, editingMessage, onHide, onFileSelect,\n}: OwnProps) => {\n  const lang = useLang();\n  const { showNotification, updateAttachmentSettings } = getActions();\n  const hideTimeoutRef = useRef<number>();\n  const prevWithQuick = usePreviousDeprecated(withQuick);\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onHide) : undefined), [isOpen, onHide]);\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    const { dataTransfer: dt } = e;\n    let files: File[] = [];\n\n    if (dt.files && dt.files.length > 0 && (!dt.items || !dt.items.length)) {\n      files = files.concat(Array.from(dt.files));\n    } else if (dt.items && dt.items.length > 0) {\n      const folderFiles = await getFilesFromDataTransferItems(dt.items);\n      if (folderFiles?.length) {\n        files = files.concat(folderFiles);\n      }\n    }\n\n    if (editingMessage) {\n      if (files.length > 1) {\n        showNotification({ message: lang('MediaReplaceInvalidError', undefined, { pluralValue: files.length }) });\n        return;\n      }\n\n      if (files.length === 1) {\n        const newAttachment = await buildAttachment(files[0].name, files[0]);\n        const canReplace = editingMessage && newAttachment && canReplaceMessageMedia(editingMessage, newAttachment);\n        if (!canReplace) {\n          showNotification({ message: lang('MediaReplaceInvalidError', undefined, { pluralValue: files.length }) });\n          return;\n        }\n      }\n    }\n\n    onHide();\n    updateAttachmentSettings({ shouldCompress: withQuick ? false : undefined });\n    onFileSelect(files);\n  });\n\n  const handleQuickFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    const { dataTransfer: dt } = e;\n\n    if (dt.files && dt.files.length > 0) {\n      const files = Array.from(dt.files);\n      if (editingMessage) {\n        if (files.length > 1) {\n          showNotification({ message: lang('MediaReplaceInvalidError', undefined, { pluralValue: files.length }) });\n          return;\n        }\n        if (files.length === 1) {\n          const newAttachment = await buildAttachment(files[0].name, files[0]);\n          const canReplace = editingMessage && newAttachment && canReplaceMessageMedia(editingMessage, newAttachment);\n          if (!canReplace) {\n            showNotification({ message: lang('MediaReplaceInvalidError', undefined, { pluralValue: files.length }) });\n            return;\n          }\n        }\n      }\n\n      onHide();\n      updateAttachmentSettings({ shouldCompress: true });\n      onFileSelect(files);\n    }\n  });\n\n  const handleDragLeave = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    const { target: fromTarget, relatedTarget: toTarget } = e;\n\n    // Esc button pressed during drag event\n    if (\n      (fromTarget as HTMLDivElement).matches('.DropTarget, .DropArea') && (\n        !toTarget || !(toTarget as HTMLDivElement).matches('.DropTarget, .DropArea')\n      )\n    ) {\n      hideTimeoutRef.current = window.setTimeout(() => {\n        onHide();\n      }, DROP_LEAVE_TIMEOUT_MS);\n    }\n  });\n\n  const handleDragOver = () => {\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n    }\n  };\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const shouldRenderQuick = withQuick || prevWithQuick;\n\n  const className = buildClassName(\n    'DropArea',\n    transitionClassNames,\n  );\n\n  return (\n    <Portal containerSelector=\"#middle-column-portals\">\n      <div\n        className={className}\n        onDragLeave={handleDragLeave}\n        onDragOver={handleDragOver}\n        onDrop={onHide}\n        onClick={onHide}\n      >\n        <DropTarget onFileSelect={handleFilesDrop} isGeneric={!shouldRenderQuick} />\n        {shouldRenderQuick && <DropTarget onFileSelect={handleQuickFilesDrop} isQuick />}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(DropArea);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nimport useForceUpdate from './useForceUpdate';\n\nexport type ReducerAction<Actions> = { type: Actions; payload?: any };\nexport type StateReducer<State, Actions> = (state: State, action: ReducerAction<Actions>) => State;\nexport type Dispatch<State, Actions> = (action: ReducerAction<Actions>) => State;\n\nexport default function useReducer<State, Actions>(\n  reducer: StateReducer<State, Actions>,\n  initialState: State,\n) {\n  const forceUpdate = useForceUpdate();\n  const reducerRef = useRef(reducer);\n  const state = useRef(initialState);\n\n  const dispatch = useCallback((action: ReducerAction<Actions>) => {\n    state.current = reducerRef.current(state.current, action);\n    forceUpdate();\n    return state.current;\n  }, []);\n\n  return [\n    state.current,\n    dispatch,\n  ] as [State, Dispatch<State, Actions>];\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { LOCAL_TGS_PREVIEW_URLS, LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\n\nimport './NothingFound.scss';\n\ninterface OwnProps {\n  text?: string;\n  description?: string;\n  withSticker?: boolean;\n}\n\nconst DEFAULT_TEXT = 'Nothing found.';\n\nconst NothingFound: FC<OwnProps> = ({ text = DEFAULT_TEXT, description, withSticker }) => {\n  const lang = useOldLang();\n  const { transitionClassNames } = useShowTransitionDeprecated(true);\n\n  return (\n    <div className={buildClassName(\n      'NothingFound',\n      transitionClassNames,\n      description && 'with-description',\n      withSticker && 'with-sticker')}\n    >\n      {withSticker && (\n        <AnimatedIconWithPreview\n          className=\"sticker\"\n          size={120}\n          tgsUrl={LOCAL_TGS_URLS.DuckNothingFound}\n          previewUrl={LOCAL_TGS_PREVIEW_URLS.DuckNothingFound}\n          nonInteractive\n          noLoop={false}\n        />\n      )}\n      {text}\n      {description && <p className=\"description\">{renderText(lang(description), ['br'])}</p>}\n    </div>\n  );\n};\n\nexport default memo(NothingFound);\n","import type { ApiBusinessTimetableSegment } from '../../api/types';\n\nconst DAY_MINUTES = 1440;\nconst WEEK_MINUTES = 10080;\n\n/**\n * @returns Monday 00:00 of the current week for the local timezone\n */\nexport function getWeekStart(): number {\n  const now = new Date();\n  now.setHours(0, 0, 0, 0);\n  const day = now.getDay();\n  const diff = now.getDate() - day + (day === 0 ? -6 : 1);\n  return new Date(now.setDate(diff)).getTime();\n}\n\n/**\n * @returns UTC offset in seconds\n */\nexport function getUtcOffset() {\n  return new Date().getTimezoneOffset() * -60;\n}\n\nexport function shiftTimeRanges(ranges: ApiBusinessTimetableSegment[], shift: number): ApiBusinessTimetableSegment[] {\n  if (shift === 0) return ranges;\n\n  const shiftedRanges: ApiBusinessTimetableSegment[] = [];\n\n  for (const range of ranges) {\n    let start = (range.startMinute + shift) % WEEK_MINUTES;\n    let end = (range.endMinute + shift) % WEEK_MINUTES;\n\n    if (start < 0) start += WEEK_MINUTES;\n    if (end <= 0) end += WEEK_MINUTES;\n\n    if (start > end) {\n      shiftedRanges.push({ startMinute: start, endMinute: WEEK_MINUTES - 1 });\n      shiftedRanges.push({ startMinute: 0, endMinute: end });\n    } else {\n      shiftedRanges.push({ startMinute: start, endMinute: end });\n    }\n  }\n\n  shiftedRanges.sort((a, b) => a.startMinute - b.startMinute);\n\n  // Combine overlapping ranges\n  return shiftedRanges.reduce<ApiBusinessTimetableSegment[]>((acc, range) => {\n    const last = acc[acc.length - 1];\n    if (last && last.endMinute >= range.startMinute) {\n      last.endMinute = Math.max(last.endMinute, range.endMinute);\n    } else {\n      acc.push(range);\n    }\n    return acc;\n  }, []);\n}\n\nexport function splitDays(ranges: ApiBusinessTimetableSegment[]): Record<number, ApiBusinessTimetableSegment[]> {\n  const days: Record<number, ApiBusinessTimetableSegment[]> = {};\n\n  for (const range of ranges) {\n    const start = range.startMinute;\n    const end = range.endMinute;\n\n    const dayStart = Math.floor(start / DAY_MINUTES);\n    const dayEnd = Math.floor((end - 1) / DAY_MINUTES); // 00:00 is counted as same day\n\n    for (let day = dayStart; day <= dayEnd; day++) {\n      if (!days[day]) {\n        days[day] = [];\n      }\n\n      days[day].push({\n        startMinute: Math.max(0, start - day * DAY_MINUTES),\n        endMinute: Math.min(DAY_MINUTES, end - day * DAY_MINUTES),\n      });\n    }\n  }\n\n  return days;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ef_0p5Qm\",\"top\":\"nHSmCUNs\",\"icon\":\"rlM4Mbnn\",\"left\":\"JTZ8UnnP\",\"bottom\":\"lp9VIV1o\",\"status\":\"JVL7ZnnJ\",\"status-open\":\"segAfYXs\",\"statusOpen\":\"segAfYXs\",\"arrow\":\"dYxw2cFn\",\"offset-trigger\":\"gVwflFhz\",\"offsetTrigger\":\"gVwflFhz\",\"transition\":\"WKgL_XiP\",\"timetable\":\"MPBKHdZL\",\"schedule\":\"Rs0VPgpq\",\"weekday\":\"cmxPqAof\",\"current-day\":\"YZVvP_56\",\"currentDay\":\"YZVvP_56\"};","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiBusinessWorkHours } from '../../../api/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatWeekday } from '../../../util/dates/dateFormat';\nimport {\n  getUtcOffset, getWeekStart, shiftTimeRanges, splitDays,\n} from '../../../util/dates/workHours';\n\nimport useSelectorSignal from '../../../hooks/data/useSelectorSignal';\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\nimport Icon from '../icons/Icon';\n\nimport styles from './BusinessHours.module.scss';\n\nconst DAYS = Array.from({ length: 7 }, (_, i) => i);\n\ntype OwnProps = {\n  businessHours: ApiBusinessWorkHours;\n};\n\nconst BusinessHours = ({\n  businessHours,\n}: OwnProps) => {\n  const transitionRef = useRef<HTMLDivElement>();\n  const [isExpanded, expand, collapse] = useFlag(false);\n  const [isMyTime, showInMyTime, showInLocalTime] = useFlag(false);\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  useInterval(forceUpdate, 60 * 1000);\n\n  const timezoneSignal = useSelectorSignal((global) => global.timezones?.byId);\n  const timezones = useDerivedState(timezoneSignal, [timezoneSignal]);\n  const timezoneMinuteDifference = useMemo(() => {\n    if (!timezones) return 0;\n    const timezone = timezones[businessHours.timezoneId];\n    const myOffset = getUtcOffset();\n    return (myOffset - timezone.utcOffset) / 60;\n  }, [businessHours.timezoneId, timezones]);\n\n  const workHours = useMemo(() => {\n    const weekStart = getWeekStart();\n    const shiftedHours = shiftTimeRanges(businessHours.workHours, isMyTime ? timezoneMinuteDifference : 0);\n    const days = splitDays(shiftedHours);\n    const result: Record<number, string[]> = {};\n\n    DAYS.forEach((day) => {\n      const segments = days[day];\n      if (!segments) {\n        result[day] = [lang('BusinessHoursDayClosed')];\n        return;\n      }\n\n      result[day] = segments.map(({ startMinute, endMinute }) => {\n        if (endMinute - startMinute === 24 * 60) return lang('BusinessHoursDayFullOpened');\n        const start = formatTime(lang, weekStart + startMinute * 60 * 1000);\n        const end = formatTime(lang, weekStart + endMinute * 60 * 1000);\n        return `${start} – ${end}`;\n      });\n    });\n\n    return result;\n  }, [businessHours.workHours, isMyTime, lang, timezoneMinuteDifference]);\n\n  const isBusinessOpen = useMemo(() => {\n    const localTimeHours = shiftTimeRanges(businessHours.workHours, timezoneMinuteDifference);\n\n    const weekStart = getWeekStart();\n    const now = new Date().getTime();\n    const minutesSinceWeekStart = (now - weekStart) / 1000 / 60;\n\n    return localTimeHours.some(({ startMinute, endMinute }) => (\n      startMinute <= minutesSinceWeekStart && minutesSinceWeekStart <= endMinute\n    ));\n  }, [businessHours.workHours, timezoneMinuteDifference]);\n\n  const currentDay = useMemo(() => {\n    const now = new Date(Date.now() - (isMyTime ? 0 : timezoneMinuteDifference * 60 * 1000));\n    return (now.getDay() + 6) % 7;\n  }, [isMyTime, timezoneMinuteDifference]);\n\n  const handleClick = useLastCallback(() => {\n    if (isExpanded) {\n      collapse();\n    } else {\n      expand();\n    }\n  });\n\n  const handleTriggerOffset = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    if (isMyTime) {\n      showInLocalTime();\n    } else {\n      showInMyTime();\n    }\n  });\n\n  useEffect(() => {\n    if (!isExpanded) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.timetable}`);\n    if (!slide) return;\n\n    const height = slide.offsetHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height}px`;\n    });\n  }, [isExpanded]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.timetable}`)!;\n\n    requestMeasure(() => {\n      const height = slide.offsetHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height}px`;\n      });\n    });\n  });\n\n  return (\n    <ListItem\n      icon=\"clock\"\n      iconClassName={styles.icon}\n      multiline\n      className={styles.root}\n      isStatic={isExpanded}\n      ripple\n      narrow\n      withColorTransition\n      onClick={handleClick}\n    >\n      <div className={styles.top}>\n        <div className={styles.left}>\n          <div>{lang('BusinessHoursProfile')}</div>\n          <div className={buildClassName(styles.status, isBusinessOpen && styles.statusOpen)}>\n            {isBusinessOpen ? lang('BusinessHoursProfileNowOpen') : lang('BusinessHoursProfileNowClosed')}\n          </div>\n        </div>\n        <Icon className={styles.arrow} name={isExpanded ? 'up' : 'down'} />\n      </div>\n      {isExpanded && (\n        <div className={styles.bottom}>\n          {Boolean(timezoneMinuteDifference) && (\n            <div\n              className={styles.offsetTrigger}\n              role=\"button\"\n              tabIndex={0}\n              onMouseDown={!IS_TOUCH_ENV ? handleTriggerOffset : undefined}\n              onClick={IS_TOUCH_ENV ? handleTriggerOffset : undefined}\n            >\n              {lang(isMyTime ? 'BusinessHoursProfileSwitchMy' : 'BusinessHoursProfileSwitchLocal')}\n            </div>\n          )}\n          <Transition\n            className={styles.transition}\n            ref={transitionRef}\n            name=\"fade\"\n            activeKey={Number(isMyTime)}\n            onStart={handleAnimationStart}\n          >\n            <dl className={styles.timetable}>\n              {DAYS.map((day) => (\n                <>\n                  <dt className={buildClassName(styles.weekday, day === currentDay && styles.currentDay)}>\n                    {formatWeekday(lang, day === 6 ? 0 : day + 1)}\n                  </dt>\n                  <dd className={styles.schedule}>\n                    {workHours[day].map((segment) => (\n                      <div>{segment}</div>\n                    ))}\n                  </dd>\n                </>\n              ))}\n            </dl>\n          </Transition>\n        </div>\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(BusinessHours);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wCp6TBYF\",\"number\":\"lQeU96Fj\",\"float\":\"nKt3QDc_\",\"show-up\":\"ZaSLCV2k\",\"showUp\":\"ZaSLCV2k\",\"dissapear\":\"jA50ot3v\",\"shiftOrigin\":\"e1ezfWJb\",\"effect\":\"cFEXGUih\",\"giftIcon\":\"c4HDQNGJ\"};","import {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  type ApiBirthday, ApiMediaFormat, type ApiStickerSet, type ApiUser,\n} from '../../../api/types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport { selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport renderText from '../helpers/renderText';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport StickerView from '../StickerView';\n\nimport styles from './UserBirthday.module.scss';\n\nconst NUMBER_EMOJI_SUFFIX = '\\uFE0F\\u20E3';\nconst NUMBER_STICKER_SIZE = 128;\nconst EFFECT_EMOJIS = ['🎉', '🎆', '🎈'];\nconst EFFECT_SIZE = 288;\nconst ANIMATION_DURATION = 3000;\n\ntype OwnProps = {\n  user: ApiUser;\n  birthday: ApiBirthday;\n  isInSettings?: boolean;\n};\n\ntype StateProps = {\n  isPremiumPurchaseBlocked?: boolean;\n  birthdayNumbers?: ApiStickerSet;\n  animatedEmojiEffects?: ApiStickerSet;\n};\n\nconst UserBirthday = ({\n  user,\n  birthday,\n  isPremiumPurchaseBlocked,\n  birthdayNumbers,\n  animatedEmojiEffects,\n  isInSettings,\n}: OwnProps & StateProps) => {\n  const { openGiftModal, requestConfetti } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const animationPlayedRef = useRef(false);\n  const [isPlayingAnimation, playAnimation, stopAnimation] = useFlag();\n\n  const lang = useLang();\n\n  const {\n    formattedDate,\n    isToday,\n    age,\n  } = useMemo(() => {\n    const today = new Date();\n    const date = new Date();\n    if (birthday.year) {\n      date.setFullYear(birthday.year);\n    }\n    date.setMonth(birthday.month - 1);\n    date.setDate(birthday.day);\n    date.setHours(0, 0, 0, 0);\n\n    const formatted = formatDateToString(date, lang.code, true, 'long');\n    const isBirthdayToday = date.getDate() === today.getDate() && date.getMonth() === today.getMonth();\n    return {\n      formattedDate: formatted,\n      isToday: isBirthdayToday,\n      age: birthday.year && getAge(date),\n    };\n  }, [birthday, lang]);\n\n  const numbersForAge = useMemo(() => {\n    if (!age || !isToday) return undefined;\n    const numbers = birthdayNumbers?.stickers?.filter(({ emoji }) => emoji?.endsWith(NUMBER_EMOJI_SUFFIX));\n    if (!numbers) return undefined;\n    const byEmoji = buildCollectionByKey(numbers, 'emoji');\n\n    const ageDigits = age.toString().split('');\n    return ageDigits.map((digit) => byEmoji[digit + NUMBER_EMOJI_SUFFIX]);\n  }, [age, birthdayNumbers?.stickers, isToday]);\n\n  const effectSticker = useMemo(() => {\n    if (!isToday) return undefined;\n    const randomEffect = EFFECT_EMOJIS[Math.floor(Math.random() * EFFECT_EMOJIS.length)];\n    return animatedEmojiEffects?.stickers?.find(({ emoji }) => emoji === randomEffect);\n  }, [animatedEmojiEffects?.stickers, isToday]);\n\n  // Preload stickers\n  useEffect(() => {\n    if (!isToday || !numbersForAge) return;\n\n    numbersForAge.forEach((sticker) => {\n      const hash = getStickerMediaHash(sticker, 'preview');\n      mediaLoader.fetch(hash, ApiMediaFormat.BlobUrl);\n    });\n\n    if (effectSticker) {\n      const effectHash = getStickerMediaHash(effectSticker, 'preview');\n      mediaLoader.fetch(effectHash, ApiMediaFormat.BlobUrl);\n    }\n  }, [effectSticker, isToday, numbersForAge]);\n\n  useTimeout(stopAnimation, isPlayingAnimation ? ANIMATION_DURATION : undefined);\n\n  useEffect(() => {\n    if (isPlayingAnimation) {\n      animationPlayedRef.current = true;\n\n      const column = document.getElementById(isInSettings ? 'LeftColumn' : 'RightColumn');\n      if (!column) return;\n\n      requestMeasure(() => {\n        const {\n          top, left, width, height,\n        } = column.getBoundingClientRect();\n\n        requestConfetti({\n          top,\n          left,\n          width,\n          height,\n          style: 'top-down',\n        });\n      });\n    }\n  }, [isInSettings, isPlayingAnimation]);\n\n  const value = useMemo(() => {\n    if (age) {\n      return lang(\n        `ProfileBirthday${isToday ? 'Today' : ''}ValueYear`,\n        { date: formattedDate, age },\n        { pluralValue: age },\n      );\n    }\n\n    return lang(`ProfileBirthday${isToday ? 'Today' : ''}Value`, { date: formattedDate });\n  }, [age, formattedDate, isToday, lang]);\n\n  const canGiftPremium = isToday && !user.isPremium && !user.isSelf && !isPremiumPurchaseBlocked;\n\n  const handleOpenGiftModal = useLastCallback(() => {\n    openGiftModal({ forUserId: user.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!isToday) return;\n\n    if (canGiftPremium && animationPlayedRef.current) {\n      handleOpenGiftModal();\n      return;\n    }\n\n    playAnimation();\n  });\n\n  const isStatic = !isToday && !canGiftPremium;\n\n  return (\n    <div className={styles.root}>\n      <ListItem\n        icon=\"calendar\"\n        secondaryIcon={canGiftPremium ? 'gift' : undefined}\n        secondaryIconClassName={styles.giftIcon}\n        multiline\n        narrow\n        ref={ref}\n        ripple={!isStatic}\n        onClick={handleClick}\n        isStatic={isStatic}\n        onSecondaryIconClick={handleOpenGiftModal}\n      >\n        <div className=\"title\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {renderText(value)}\n        </div>\n        <span className=\"subtitle\">{lang(isToday ? 'ProfileBirthdayToday' : 'ProfileBirthday')}</span>\n      </ListItem>\n      {isPlayingAnimation && IS_OFFSET_PATH_SUPPORTED && numbersForAge?.map((sticker, index) => (\n        <div\n          className={buildClassName(styles.number, index > 0 && styles.shiftOrigin)}\n          style={`--digit-offset: ${index}`}\n        >\n          <StickerView\n            containerRef={ref}\n            sticker={sticker}\n            size={NUMBER_STICKER_SIZE}\n            forceAlways\n          />\n        </div>\n      ))}\n      {isPlayingAnimation && effectSticker && (\n        <div className={styles.effect}>\n          <StickerView\n            containerRef={ref}\n            sticker={effectSticker}\n            size={EFFECT_SIZE}\n            shouldLoop\n            forceAlways\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { birthdayNumbers, animatedEmojiEffects } = global;\n    return {\n      birthdayNumbers,\n      animatedEmojiEffects,\n      isPremiumPurchaseBlocked: selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(UserBirthday));\n\n// https://stackoverflow.com/a/7091965\nfunction getAge(birthdate: Date) {\n  const today = new Date();\n  let age = today.getFullYear() - birthdate.getFullYear();\n  const m = today.getMonth() - birthdate.getMonth();\n  if (m < 0 || (m === 0 && today.getDate() < birthdate.getDate())) {\n    age--;\n  }\n\n  return age;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"businessLocation\":\"UZbkeFDB\",\"personalChannel\":\"HP5EJx7s\",\"personalChannelTitle\":\"cHyTGri2\",\"botVerificationSection\":\"RWFu5ENh\",\"sectionInfo\":\"IrqRJFxm\",\"botVerificationIcon\":\"b32hsSPS\",\"personalChannelSubscribers\":\"kYd2GrmU\",\"personalChannelItem\":\"qOJwhXMC\",\"openAppButton\":\"x925YeS3\"};","import {\n  memo, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiBotVerification,\n  ApiChat,\n  ApiCountryCode,\n  ApiUser,\n  ApiUserFullInfo,\n  ApiUsername,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type BotAppPermissions, ManagementScreens } from '../../../types';\n\nimport {\n  FRAGMENT_PHONE_CODE, FRAGMENT_PHONE_LENGTH, MUTE_INDEFINITE_TIMESTAMP, UNMUTE_TIMESTAMP,\n} from '../../../config';\nimport {\n  buildStaticMapHash,\n  getChatLink,\n  getHasAdminRight,\n  isChatAdmin,\n  isChatChannel,\n  isUserRightBanned,\n} from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectBotAppPermissions,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatRestricted,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTopicLink,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport stopEvent from '../../../util/stopEvent';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { ChatAnimationTypes } from '../../left/main/hooks';\nimport formatUsername from '../helpers/formatUsername';\nimport renderText from '../helpers/renderText';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Chat from '../../left/main/Chat';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Skeleton from '../../ui/placeholder/Skeleton';\nimport Switcher from '../../ui/Switcher';\nimport CustomEmoji from '../CustomEmoji';\nimport SafeLink from '../SafeLink';\nimport BusinessHours from './BusinessHours';\nimport UserBirthday from './UserBirthday';\n\nimport styles from './ChatExtra.module.scss';\n\ntype OwnProps = {\n  chatOrUserId: string;\n  isOwnProfile?: boolean;\n  isSavedDialog?: boolean;\n  isInSettings?: boolean;\n  className?: string;\n  style?: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  canInviteUsers?: boolean;\n  isMuted?: boolean;\n  phoneCodeList: ApiCountryCode[];\n  topicId?: number;\n  description?: string;\n  chatInviteLink?: string;\n  topicLink?: string;\n  hasSavedMessages?: boolean;\n  personalChannel?: ApiChat;\n  hasMainMiniApp?: boolean;\n  isBotCanManageEmojiStatus?: boolean;\n  botAppPermissions?: BotAppPermissions;\n  botVerification?: ApiBotVerification;\n  canViewSubscribers?: boolean;\n};\n\nconst DEFAULT_MAP_CONFIG = {\n  width: 64,\n  height: 64,\n  zoom: 15,\n};\n\nconst BOT_VERIFICATION_ICON_SIZE = 16;\n\nconst ChatExtra = ({\n  chatOrUserId,\n  user,\n  chat,\n  userFullInfo,\n  isOwnProfile,\n  canInviteUsers,\n  isMuted,\n  phoneCodeList,\n  topicId,\n  description,\n  chatInviteLink,\n  topicLink,\n  hasSavedMessages,\n  personalChannel,\n  hasMainMiniApp,\n  isBotCanManageEmojiStatus,\n  botAppPermissions,\n  botVerification,\n  className,\n  style,\n  isInSettings,\n  canViewSubscribers,\n}: OwnProps & StateProps) => {\n  const {\n    showNotification,\n    updateChatMutedState,\n    updateTopicMutedState,\n    loadPeerStories,\n    openSavedDialog,\n    openMapModal,\n    requestCollectibleInfo,\n    requestMainWebView,\n    toggleUserEmojiStatusPermission,\n    toggleUserLocationPermission,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const {\n    id: userId,\n    usernames,\n    phoneNumber,\n    isSelf,\n  } = user || {};\n  const { id: chatId, usernames: chatUsernames } = chat || {};\n  const peerId = userId || chatId;\n  const {\n    businessLocation,\n    businessWorkHours,\n    personalChannelMessageId,\n    birthday,\n  } = userFullInfo || {};\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffectWithPrevDeps(([prevPeerId]) => {\n    if (!peerId || prevPeerId === peerId) return;\n    if (user || (chat && isChatChannel(chat))) {\n      loadPeerStories({ peerId });\n    }\n  }, [peerId, chat, user]);\n\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n  const locationMediaHash = businessLocation?.geo\n    && buildStaticMapHash(businessLocation.geo, width, height, zoom, dpr);\n  const locationBlobUrl = useMedia(locationMediaHash);\n\n  const locationRightComponent = useMemo(() => {\n    if (!businessLocation?.geo) return undefined;\n    if (locationBlobUrl) {\n      return <img src={locationBlobUrl} alt=\"\" className={styles.businessLocation} />;\n    }\n\n    return <Skeleton className={styles.businessLocation} />;\n  }, [businessLocation, locationBlobUrl]);\n\n  const isTopicInfo = Boolean(topicId && topicId !== MAIN_THREAD_ID);\n  const shouldRenderAllLinks = (chat && isChatChannel(chat)) || user?.isPremium;\n\n  const activeUsernames = useMemo(() => {\n    const result = usernames?.filter((u) => u.isActive);\n\n    return result?.length ? result : undefined;\n  }, [usernames]);\n\n  const activeChatUsernames = useMemo(() => {\n    const result = !user ? chatUsernames?.filter((u) => u.isActive) : undefined;\n\n    return result?.length ? result : undefined;\n  }, [chatUsernames, user]);\n\n  const link = useMemo(() => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return isTopicInfo ? topicLink! : getChatLink(chat) || chatInviteLink;\n  }, [chat, isTopicInfo, topicLink, chatInviteLink]);\n\n  const handleClickLocation = useLastCallback(() => {\n    const { address, geo } = businessLocation!;\n    if (!geo) {\n      copyTextToClipboard(address);\n      showNotification({ message: oldLang('BusinessLocationCopied') });\n      return;\n    }\n\n    openMapModal({ geoPoint: geo, zoom });\n  });\n\n  const handleToggleNotifications = useLastCallback(() => {\n    const mutedUntil = isMuted ? UNMUTE_TIMESTAMP : MUTE_INDEFINITE_TIMESTAMP;\n    if (isTopicInfo) {\n      updateTopicMutedState({\n        chatId: chatId!,\n        topicId: topicId!,\n        mutedUntil,\n      });\n    } else {\n      updateChatMutedState({ chatId: chatId!, mutedUntil });\n    }\n  });\n\n  const manageEmojiStatusChange = useLastCallback(() => {\n    if (!user) return;\n    toggleUserEmojiStatusPermission({ botId: user.id, isEnabled: !isBotCanManageEmojiStatus });\n  });\n\n  const handleLocationPermissionChange = useLastCallback(() => {\n    if (!user) return;\n    toggleUserLocationPermission({ botId: user.id, isAccessGranted: !botAppPermissions?.geolocation });\n  });\n\n  const handleOpenSavedDialog = useLastCallback(() => {\n    openSavedDialog({ chatId: chatOrUserId });\n  });\n\n  function copy(text: string, entity: string) {\n    copyTextToClipboard(text);\n    showNotification({ message: `${entity} was copied` });\n  }\n\n  const formattedNumber = phoneNumber && formatPhoneNumberWithCode(phoneCodeList, phoneNumber);\n\n  const handlePhoneClick = useLastCallback(() => {\n    if (phoneNumber?.length === FRAGMENT_PHONE_LENGTH && phoneNumber.startsWith(FRAGMENT_PHONE_CODE)) {\n      requestCollectibleInfo({ collectible: phoneNumber, peerId: peerId!, type: 'phone' });\n      return;\n    }\n    copy(formattedNumber!, oldLang('Phone'));\n  });\n\n  const handleUsernameClick = useLastCallback((username: ApiUsername, isChat?: boolean) => {\n    if (!username.isEditable) {\n      requestCollectibleInfo({ collectible: username.username, peerId: peerId!, type: 'username' });\n      return;\n    }\n    copy(formatUsername(username.username, isChat), oldLang(isChat ? 'Link' : 'Username'));\n  });\n\n  const handleOpenSubscribers = useLastCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.ChannelSubscribers });\n  });\n\n  const handleOpenApp = useLastCallback(() => {\n    const botId = user?.id;\n    if (!botId) {\n      return;\n    }\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId,\n      peerId: botId,\n      theme,\n      shouldMarkBotTrusted: true,\n    });\n  });\n\n  const appTermsInfo = lang('ProfileOpenAppAbout', {\n    terms: (\n      <SafeLink\n        text={lang('ProfileOpenAppTerms')}\n        url={lang('ProfileBotOpenAppInfoLink')}\n      />\n    ),\n  }, { withNodes: true });\n\n  const isRestricted = chatId ? selectIsChatRestricted(getGlobal(), chatId) : false;\n  if (isRestricted || (isSelf && !isOwnProfile && !isInSettings)) {\n    return undefined;\n  }\n\n  function renderUsernames(usernameList: ApiUsername[], isChat?: boolean) {\n    const [mainUsername, ...otherUsernames] = usernameList;\n\n    const usernameLinks = otherUsernames.length\n      ? (oldLang('UsernameAlso', '%USERNAMES%'))\n        .split('%')\n        .map((s) => {\n          return (s === 'USERNAMES' ? (\n            <>\n              {otherUsernames.map((username, idx) => {\n                return (\n                  <>\n                    {idx > 0 ? ', ' : ''}\n                    <a\n                      key={username.username}\n                      href={formatUsername(username.username, true)}\n                      onMouseDown={stopEvent}\n                      onClick={(e) => {\n                        stopEvent(e);\n                        handleUsernameClick(username, isChat);\n                      }}\n                      className=\"text-entity-link username-link\"\n                    >\n                      {formatUsername(username.username)}\n                    </a>\n                  </>\n                );\n              })}\n            </>\n          ) : s);\n        })\n      : undefined;\n\n    return (\n      <ListItem\n        icon={isChat ? 'link' : 'mention'}\n        multiline\n        narrow\n        ripple\n\n        onClick={() => {\n          handleUsernameClick(mainUsername, isChat);\n        }}\n      >\n        <span className=\"title\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {formatUsername(mainUsername.username, isChat)}\n        </span>\n        <span className=\"subtitle\">\n          {usernameLinks && <span className=\"other-usernames\">{usernameLinks}</span>}\n          {oldLang(isChat ? 'Link' : 'Username')}\n        </span>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className={buildClassName('ChatExtra', className)} style={style}>\n      {personalChannel && (\n        <div className={styles.personalChannel}>\n          <h3 className={styles.personalChannelTitle}>{oldLang('ProfileChannel')}</h3>\n          <span className={styles.personalChannelSubscribers}>\n            {oldLang('Subscribers', personalChannel.membersCount, 'i')}\n          </span>\n          <Chat\n            chatId={personalChannel.id}\n            orderDiff={0}\n            animationType={ChatAnimationTypes.None}\n            isPreview\n            previewMessageId={personalChannelMessageId}\n            className={styles.personalChannelItem}\n          />\n        </div>\n      )}\n      {Boolean(formattedNumber?.length) && (\n\n        <ListItem icon=\"phone\" multiline narrow ripple onClick={handlePhoneClick}>\n          <span className=\"title\" dir={lang.isRtl ? 'rtl' : undefined}>{formattedNumber}</span>\n          <span className=\"subtitle\">{oldLang('Phone')}</span>\n        </ListItem>\n      )}\n      {activeUsernames && renderUsernames(activeUsernames)}\n      {description && Boolean(description.length) && (\n        <ListItem\n          icon=\"info\"\n          multiline\n          narrow\n          isStatic\n          allowSelection\n        >\n          <span className=\"title word-break allow-selection\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {\n              renderText(description, [\n                'br',\n                shouldRenderAllLinks ? 'links' : 'tg_links',\n                'emoji',\n              ])\n            }\n          </span>\n          <span className=\"subtitle\">{oldLang(userId ? 'UserBio' : 'Info')}</span>\n        </ListItem>\n      )}\n      {activeChatUsernames && !isTopicInfo && renderUsernames(activeChatUsernames, true)}\n      {((!activeChatUsernames && canInviteUsers) || isTopicInfo) && link && (\n        <ListItem\n          icon=\"link\"\n          multiline\n          narrow\n          ripple\n\n          onClick={() => copy(link, oldLang('SetUrlPlaceholder'))}\n        >\n          <div className=\"title\">{link}</div>\n          <span className=\"subtitle\">{oldLang('SetUrlPlaceholder')}</span>\n        </ListItem>\n      )}\n      {birthday && (\n        <UserBirthday key={peerId} birthday={birthday} user={user!} isInSettings={isInSettings} />\n      )}\n      {hasMainMiniApp && (\n        <ListItem\n          multiline\n          isStatic\n          narrow\n        >\n          <Button\n            className={styles.openAppButton}\n            onClick={handleOpenApp}\n          >\n            {oldLang('ProfileBotOpenApp')}\n          </Button>\n          <div className={styles.sectionInfo}>\n            {appTermsInfo}\n          </div>\n        </ListItem>\n      )}\n      {!isOwnProfile && !isInSettings && (\n        <ListItem icon={isMuted ? 'mute' : 'unmute'} narrow ripple onClick={handleToggleNotifications}>\n          <span>{lang('Notifications')}</span>\n          <Switcher\n            id=\"group-notifications\"\n            label={lang(userId ? 'AriaToggleUserNotifications' : 'AriaToggleChatNotifications')}\n            checked={!isMuted}\n            inactive\n          />\n        </ListItem>\n      )}\n      {businessWorkHours && (\n        <BusinessHours businessHours={businessWorkHours} />\n      )}\n      {businessLocation && (\n        <ListItem\n          icon=\"location\"\n          ripple\n          multiline\n          narrow\n          rightElement={locationRightComponent}\n          onClick={handleClickLocation}\n        >\n          <div className=\"title\">{businessLocation.address}</div>\n          <span className=\"subtitle\">{oldLang('BusinessProfileLocation')}</span>\n        </ListItem>\n      )}\n      {hasSavedMessages && !isOwnProfile && !isInSettings && (\n        <ListItem icon=\"saved-messages\" narrow ripple onClick={handleOpenSavedDialog}>\n          <span>{oldLang('SavedMessagesTab')}</span>\n        </ListItem>\n      )}\n      {userFullInfo && 'isBotAccessEmojiGranted' in userFullInfo && (\n        <ListItem icon=\"user\" narrow ripple onClick={manageEmojiStatusChange}>\n          <span>{oldLang('BotProfilePermissionEmojiStatus')}</span>\n          <Switcher\n            label={oldLang('BotProfilePermissionEmojiStatus')}\n            checked={isBotCanManageEmojiStatus}\n            inactive\n          />\n        </ListItem>\n      )}\n      {botAppPermissions?.geolocation !== undefined && (\n        <ListItem icon=\"location\" narrow ripple onClick={handleLocationPermissionChange}>\n          <span>{oldLang('BotProfilePermissionLocation')}</span>\n          <Switcher\n            label={oldLang('BotProfilePermissionLocation')}\n            checked={botAppPermissions?.geolocation}\n            inactive\n          />\n        </ListItem>\n      )}\n      {canViewSubscribers && (\n        <ListItem icon=\"group\" narrow multiline ripple onClick={handleOpenSubscribers}>\n          <div className=\"title\">{lang('ProfileItemSubscribers')}</div>\n          <span className=\"subtitle\">{lang.number(chat?.membersCount || 0)}</span>\n        </ListItem>\n      )}\n      {botVerification && (\n        <div className={styles.botVerificationSection}>\n          <CustomEmoji\n            className={styles.botVerificationIcon}\n            documentId={botVerification.iconId}\n            size={BOT_VERIFICATION_ICON_SIZE}\n          />\n          {botVerification.description}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatOrUserId, isSavedDialog }): Complete<StateProps> => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n\n    const chat = chatOrUserId ? selectChat(global, chatOrUserId) : undefined;\n    const user = chatOrUserId ? selectUser(global, chatOrUserId) : undefined;\n    const botAppPermissions = chatOrUserId ? selectBotAppPermissions(global, chatOrUserId) : undefined;\n    const isForum = chat?.isForum;\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const topicId = isForum && threadId ? Number(threadId) : undefined;\n\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const userFullInfo = user && selectUserFullInfo(global, user.id);\n\n    const botVerification = userFullInfo?.botVerification || chatFullInfo?.botVerification;\n\n    const chatInviteLink = chatFullInfo?.inviteLink;\n    const description = userFullInfo?.bio || chatFullInfo?.about;\n\n    const canViewSubscribers = chat && isChatChannel(chat) && isChatAdmin(chat);\n    const canInviteUsers = chat && !user && (\n      (!isChatChannel(chat) && !isUserRightBanned(chat, 'inviteUsers'))\n      || getHasAdminRight(chat, 'inviteUsers')\n    );\n\n    const topicLink = topicId ? selectTopicLink(global, chatOrUserId, topicId) : undefined;\n\n    const hasSavedMessages = !isSavedDialog && global.chats.listIds.saved?.includes(chatOrUserId);\n\n    const personalChannel = userFullInfo?.personalChannelId\n      ? selectChat(global, userFullInfo.personalChannelId)\n      : undefined;\n\n    const hasMainMiniApp = user?.hasMainMiniApp;\n\n    return {\n      phoneCodeList,\n      chat,\n      user,\n      userFullInfo,\n      canInviteUsers,\n      botAppPermissions,\n      isMuted,\n      topicId,\n      chatInviteLink,\n      description,\n      topicLink,\n      hasSavedMessages,\n      personalChannel,\n      hasMainMiniApp,\n      isBotCanManageEmojiStatus: userFullInfo?.isBotCanManageEmojiStatus,\n      botVerification,\n      canViewSubscribers,\n    };\n  },\n)(ChatExtra));\n","import { validateFiles } from '../../../../util/files';\n\nexport default async function getFilesFromDataTransferItems(dataTransferItems: DataTransferItemList) {\n  const files: File[] = [];\n\n  function traverseFileTreePromise(entry: FileSystemEntry | File, item: DataTransferItem) {\n    return new Promise((resolve) => {\n      if (entry instanceof File) {\n        files.push(entry);\n        resolve(entry);\n      } else if (entry.isFile) {\n        const itemFile = item.getAsFile();\n        (entry as FileSystemFileEntry).file((file) => {\n          files.push(file);\n          resolve(file);\n        }, () => {\n          // iOS Safari throws an error \"NotFoundError: Path does not exist\" for files from the clipboard\n          // https://stackoverflow.com/a/50059309\n          if (itemFile) {\n            files.push(itemFile);\n          }\n          resolve(itemFile);\n        });\n      } else if (entry.isDirectory) {\n        const dirReader = (entry as FileSystemDirectoryEntry).createReader();\n        dirReader.readEntries((entries) => {\n          const entriesPromises = [];\n          for (let i = 0; i < entries.length; i++) {\n            entriesPromises.push(traverseFileTreePromise(entries[i], item));\n          }\n          resolve(Promise.all(entriesPromises));\n        });\n      }\n    });\n  }\n\n  const entriesPromises = [];\n  for (let i = 0; i < dataTransferItems.length; i++) {\n    const item = dataTransferItems[i];\n    if (item.kind === 'file') {\n      const entry = item.webkitGetAsEntry() || item.getAsFile();\n      if (entry) {\n        entriesPromises.push(traverseFileTreePromise(entry, item));\n      }\n    }\n  }\n\n  await Promise.all(entriesPromises);\n\n  return validateFiles(files);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Icon from './icons/Icon';\n\nimport styles from './LinkField.module.scss';\n\ntype OwnProps = {\n  title?: string;\n  link: string;\n  isDisabled?: boolean;\n  className?: string;\n  withShare?: boolean;\n  onRevoke?: VoidFunction;\n};\n\nconst InviteLink: FC<OwnProps> = ({\n  title,\n  link,\n  isDisabled,\n  className,\n  withShare,\n  onRevoke,\n}) => {\n  const lang = useOldLang();\n  const { showNotification, openChatWithDraft } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const isOnlyCopy = !onRevoke;\n\n  const copyLink = useLastCallback(() => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: {\n        key: 'LinkCopied',\n      },\n    });\n  });\n\n  const handleCopyClick = useLastCallback(() => {\n    if (isDisabled) return;\n    copyLink();\n  });\n\n  const handleShare = useLastCallback(() => {\n    openChatWithDraft({ text: { text: link } });\n  });\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  return (\n    <div className={className}>\n      <p className={styles.title}>\n        {lang(title || 'InviteLink.InviteLink')}\n      </p>\n      <div className={styles.primaryLink}>\n        <input\n          className={buildClassName('form-control', styles.input)}\n          value={link}\n          readOnly\n          onClick={handleCopyClick}\n        />\n        {isOnlyCopy ? (\n          <Button\n            color=\"translucent\"\n            className={styles.copy}\n            size=\"smaller\"\n            round\n            disabled={isDisabled}\n            onClick={handleCopyClick}\n          >\n            <Icon name=\"copy\" />\n          </Button>\n        ) : (\n          <DropdownMenu\n            className={styles.moreMenu}\n            trigger={PrimaryLinkMenuButton}\n            positionX=\"right\"\n          >\n            <MenuItem icon=\"copy\" onClick={handleCopyClick} disabled={isDisabled}>{lang('Copy')}</MenuItem>\n            {onRevoke && (\n              <MenuItem icon=\"delete\" onClick={onRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n            )}\n          </DropdownMenu>\n        )}\n      </div>\n      {withShare && (\n        <Button\n          disabled={isDisabled}\n          onClick={handleShare}\n          className={styles.share}\n        >\n          {lang('FolderLinkScreen.LinkActionShare')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(InviteLink);\n","// extracted by mini-css-extract-plugin\nexport default {\"primaryLink\":\"xNjJHI7j\",\"input\":\"Ag6k_p7b\",\"moreMenu\":\"p7t3macG\",\"copy\":\"obuPXobw\",\"title\":\"vCMpiQTJ\",\"share\":\"Sbagy_Tm\"};","import { useMemo } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ApiChat, ApiTopic, ApiUser } from '../api/types';\nimport type { MenuItemContextAction } from '../components/ui/ListItem';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../config';\nimport { getCanDeleteChat, isChatArchived, isChatChannel, isChatGroup } from '../global/helpers';\nimport { IS_TAURI } from '../util/browser/globalEnvironment';\nimport { IS_OPEN_IN_NEW_TAB_SUPPORTED } from '../util/browser/windowEnvironment';\nimport { isUserId } from '../util/entities/ids';\nimport { compact } from '../util/iteratees';\nimport useLang from './useLang';\n\nconst useChatContextActions = ({\n  chat,\n  user,\n  folderId,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n  isSavedDialog,\n  currentUserId,\n  isPreview,\n  topics,\n  handleDelete,\n  handleMute,\n  handleUnmute,\n  handleChatFolderChange,\n  handleReport,\n}: {\n  chat: ApiChat | undefined;\n  user: ApiUser | undefined;\n  folderId?: number;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n  isSavedDialog?: boolean;\n  currentUserId?: string;\n  isPreview?: boolean;\n  topics?: Record<number, ApiTopic>;\n  handleDelete?: NoneToVoidFunction;\n  handleMute?: NoneToVoidFunction;\n  handleUnmute?: NoneToVoidFunction;\n  handleChatFolderChange: NoneToVoidFunction;\n  handleReport?: NoneToVoidFunction;\n}, isInSearch = false) => {\n  const lang = useLang();\n\n  const { isSelf } = user || {};\n  const isServiceNotifications = user?.id === SERVICE_NOTIFICATIONS_USER_ID;\n\n  const deleteTitle = useMemo(() => {\n    if (!chat) return undefined;\n\n    if (isSavedDialog) {\n      return lang('Delete');\n    }\n\n    if (isUserId(chat.id)) {\n      return lang('DeleteChat');\n    }\n\n    if (getCanDeleteChat(chat)) {\n      return lang('DeleteChat');\n    }\n\n    if (isChatChannel(chat)) {\n      return lang('ChannelLeave');\n    }\n\n    return lang('GroupLeaveGroup');\n  }, [chat, isSavedDialog, lang]);\n\n  return useMemo(() => {\n    if (!chat || isPreview) {\n      return undefined;\n    }\n\n    const {\n      toggleChatPinned,\n      toggleSavedDialogPinned,\n      toggleChatArchived,\n      markChatMessagesRead,\n      markChatUnread,\n      openChatInNewTab,\n      openQuickPreview,\n    } = getActions();\n\n    const actionOpenInNewTab = IS_OPEN_IN_NEW_TAB_SUPPORTED && {\n      title: IS_TAURI ? lang('ChatListOpenInNewWindow') : lang('ChatListOpenInNewTab'),\n      icon: 'open-in-new-tab',\n      handler: () => {\n        if (isSavedDialog) {\n          openChatInNewTab({ chatId: currentUserId!, threadId: chat.id });\n        } else {\n          openChatInNewTab({ chatId: chat.id });\n        }\n      },\n    };\n\n    const actionQuickPreview = !isSavedDialog && !chat.isForum && {\n      title: lang('QuickPreview'),\n      icon: 'eye-outline',\n      handler: () => {\n        openQuickPreview({\n          id: chat.id,\n        });\n      },\n    };\n\n    const togglePinned = () => {\n      if (isSavedDialog) {\n        toggleSavedDialogPinned({ id: chat.id });\n      } else {\n        toggleChatPinned({ id: chat.id, folderId: folderId! });\n      }\n    };\n\n    const actionPin = isPinned\n      ? {\n        title: lang('ChatListUnpinFromTop'),\n        icon: 'unpin',\n        handler: togglePinned,\n      }\n      : {\n        title: lang('ChatListPinToTop'),\n        icon: 'pin',\n        handler: togglePinned,\n      };\n\n    const actionDelete = {\n      title: deleteTitle,\n      icon: 'delete',\n      destructive: true,\n      handler: handleDelete,\n    };\n\n    if (isSavedDialog) {\n      return compact([actionOpenInNewTab, actionQuickPreview, actionPin, actionDelete]) as MenuItemContextAction[];\n    }\n\n    const actionAddToFolder = canChangeFolder ? {\n      title: lang('ChatListContextAddToFolder'),\n      icon: 'folder',\n      handler: handleChatFolderChange,\n    } : undefined;\n\n    const actionMute = isMuted\n      ? {\n        title: lang('ChatsUnmute'),\n        icon: 'unmute',\n        handler: handleUnmute,\n      }\n      : {\n        title: `${lang('ChatsMute')}...`,\n        icon: 'mute',\n        handler: handleMute,\n      };\n\n    if (isInSearch) {\n      return compact([\n        actionOpenInNewTab, actionQuickPreview, actionPin, actionAddToFolder, actionMute,\n      ]) as MenuItemContextAction[];\n    }\n\n    const actionMaskAsRead = (\n      chat.unreadCount || chat.hasUnreadMark || Object.values(topics || {}).some(({ unreadCount }) => unreadCount)\n    )\n      ? {\n        title: lang('ChatListContextMaskAsRead'),\n        icon: 'readchats',\n        handler: () => markChatMessagesRead({ id: chat.id }),\n      } : undefined;\n    const actionMarkAsUnread = !(chat.unreadCount || chat.hasUnreadMark) && !chat.isForum\n      ? { title: lang('ChatListContextMaskAsUnread'), icon: 'unread', handler: () => markChatUnread({ id: chat.id }) }\n      : undefined;\n\n    const actionArchive = isChatArchived(chat)\n      ? { title: lang('Unarchive'), icon: 'unarchive', handler: () => toggleChatArchived({ id: chat.id }) }\n      : { title: lang('Archive'), icon: 'archive', handler: () => toggleChatArchived({ id: chat.id }) };\n\n    const canReport = handleReport && !user && (isChatChannel(chat) || isChatGroup(chat));\n    const actionReport = canReport\n      ? { title: lang('ReportPeerReport'), icon: 'flag', handler: handleReport }\n      : undefined;\n\n    const isInFolder = folderId !== undefined;\n\n    return compact([\n      actionOpenInNewTab,\n      actionQuickPreview,\n      actionAddToFolder,\n      actionMaskAsRead,\n      actionMarkAsUnread,\n      actionPin,\n      !isSelf && actionMute,\n      !isSelf && !isServiceNotifications && !isInFolder && actionArchive,\n      actionReport,\n      actionDelete,\n    ]) as MenuItemContextAction[];\n  }, [\n    chat, user, canChangeFolder, lang, handleChatFolderChange, isPinned, isInSearch, isMuted, currentUserId,\n    handleDelete, handleMute, handleReport, folderId, isSelf, isServiceNotifications, isSavedDialog, deleteTitle,\n    isPreview, topics, handleUnmute,\n  ]);\n};\n\nexport default useChatContextActions;\n","import type { ApiGeoPoint } from '../api/types';\n\nconst PROVIDERS = {\n  google: 'https://maps.google.com/maps',\n  bing: 'https://bing.com/maps/default.aspx',\n  osm: 'https://www.openstreetmap.org',\n  apple: 'https://maps.apple.com',\n};\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(provider: keyof typeof PROVIDERS, point: Omit<ApiGeoPoint, 'accessHash'>, zoom = 15) {\n  const { lat, long } = point;\n  const providerUrl = PROVIDERS[provider];\n  switch (provider) {\n    case 'google':\n      return `${providerUrl}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n    case 'bing':\n      return `${providerUrl}?cp=${lat}~${long}&lvl=${zoom}&sp=point.${lat}_${long}`;\n    case 'apple':\n      return `${providerUrl}?q=${lat},${long}`;\n    case 'osm':\n    default:\n      return `${providerUrl}/?mlat=${lat}&mlon=${long}&zoom=${zoom}`;\n  }\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import type { FC, StateHookSetter } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport { formatStarsAsText } from '../../util/localization/format';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './PaymentMessageConfirmDialog.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n  userName?: string;\n  messagePriceInStars: number;\n  messagesCount: number;\n  shouldAutoApprove: boolean;\n  setAutoApprove: StateHookSetter<boolean>;\n  confirmHandler: NoneToVoidFunction;\n};\n\nconst PaymentMessageConfirmDialog: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  userName,\n  messagePriceInStars,\n  messagesCount,\n  shouldAutoApprove: shouldPaidMessageAutoApprove,\n  setAutoApprove: setShouldPaidMessageAutoApprove,\n  confirmHandler,\n}) => {\n  const lang = useLang();\n\n  const confirmPaymentMessage = lang('ConfirmationModalPaymentForMessage', {\n    user: userName,\n    amount: formatStarsAsText(lang, messagePriceInStars),\n    totalAmount: formatStarsAsText(lang, messagePriceInStars * messagesCount),\n    count: messagesCount,\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n    pluralValue: messagesCount,\n  });\n\n  const confirmLabel = lang('PayForMessage', { count: messagesCount }, {\n    withNodes: true,\n    pluralValue: messagesCount,\n  });\n\n  return (\n    <ConfirmDialog\n      title={lang('TitleConfirmPayment')}\n      confirmLabel={confirmLabel}\n      isOpen={isOpen}\n      onClose={onClose}\n      confirmHandler={confirmHandler}\n    >\n      {confirmPaymentMessage}\n      <Checkbox\n        className={styles.checkBox}\n        label={lang('DoNotAskAgain')}\n        checked={shouldPaidMessageAutoApprove}\n        onCheck={setShouldPaidMessageAutoApprove}\n      />\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(PaymentMessageConfirmDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkBox\":\"eScpikxM\"};","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HeaderMenuContainer';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default HeaderMenuContainerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { IAnchorPosition, MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens } from '../../types';\n\nimport { requestMeasure, requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getHasAdminRight,\n  getIsSavedDialog,\n  isAnonymousForwardsChat,\n  isChatBasicGroup, isChatChannel, isChatSuperGroup,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatBotNotStarted,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectTranslationLanguage,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { ARE_CALLS_SUPPORTED, IS_APP } from '../../util/browser/windowEnvironment';\nimport { isUserId } from '../../util/entities/ids';\nimport focusNoScroll from '../../util/focusNoScroll';\n\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n  isForForum?: boolean;\n  isMobile?: boolean;\n  onTopicSearch?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canUnblock?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canViewMonetization?: boolean;\n  canViewBoosts?: boolean;\n  canShowBoostModal?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  channelMonoforumId?: string;\n  pendingJoinRequests?: number;\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  noAnimation?: boolean;\n  canTranslate?: boolean;\n  isTranslating?: boolean;\n  translationLanguage: string;\n  language: string;\n  detectedChatLanguage?: string;\n  doNotTranslate: string[];\n  isAccountFrozen?: boolean;\n}\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isMobile,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canUnblock,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canViewMonetization,\n  canViewBoosts,\n  canShowBoostModal,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  channelMonoforumId,\n  pendingJoinRequests,\n  isRightColumnShown,\n  isForForum,\n  canExpandActions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  noAnimation,\n  canTranslate,\n  isTranslating,\n  translationLanguage,\n  language,\n  detectedChatLanguage,\n  doNotTranslate,\n  isAccountFrozen,\n  onTopicSearch,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openMiddleSearch,\n    restartBot,\n    requestMasterAndRequestCall,\n    requestNextManagementScreen,\n    showNotification,\n    openChat,\n    requestChatTranslation,\n    togglePeerTranslations,\n    openChatLanguageModal,\n    setSettingOption,\n    unblockUser,\n    setViewForumAsMessages,\n    openFrozenAccountModal,\n  } = getActions();\n  const menuButtonRef = useRef<HTMLButtonElement>();\n  const lang = useOldLang();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuAnchor, setMenuAnchor] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useLastCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuAnchor({ x: rect.right, y: rect.bottom });\n  });\n\n  const handleHeaderMenuClose = useLastCallback(() => {\n    setIsMenuOpen(false);\n  });\n\n  const handleHeaderMenuHide = useLastCallback(() => {\n    setMenuAnchor(undefined);\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId });\n    if (shouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId });\n  });\n\n  const handleTranslateClick = useLastCallback(() => {\n    if (isTranslating) {\n      requestChatTranslation({ chatId, toLanguageCode: undefined });\n      return;\n    }\n\n    requestChatTranslation({ chatId, toLanguageCode: translationLanguage });\n  });\n\n  const handleJoinRequestsClick = useLastCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  });\n\n  const handleSearchClick = useLastCallback(() => {\n    if (isForForum) {\n      onTopicSearch?.();\n      return;\n    }\n\n    openMiddleSearch();\n\n    if (noAnimation) {\n      // The second RAF is necessary because Teact must update the state and render the async component\n      requestMeasure(() => {\n        requestNextMutation(setFocusInSearchInput);\n      });\n    } else {\n      setFocusInSearchInput();\n    }\n  });\n\n  const handleAsMessagesClick = useLastCallback(() => {\n    openChat({ id: chatId });\n    setViewForumAsMessages({ chatId, isEnabled: true });\n  });\n\n  const handleRequestCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    requestMasterAndRequestCall({ userId: chatId });\n  });\n\n  const handleHotkeySearchClick = useLastCallback((e: KeyboardEvent) => {\n    if (!canSearch || !IS_APP || e.shiftKey) {\n      return;\n    }\n\n    e.preventDefault();\n    handleSearchClick();\n  });\n\n  const getTextWithLanguage = useCallback((langKey: string, langCode: string) => {\n    const simplified = langCode.split('-')[0];\n    const translationKey = `TranslateLanguage${simplified.toUpperCase()}`;\n    const name = lang(translationKey);\n    if (name !== translationKey) {\n      return lang(langKey, name);\n    }\n\n    const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n    return lang(`${langKey}Other`, translatedName);\n  }, [language, lang]);\n\n  const buttonText = useMemo(() => {\n    if (isTranslating) return lang('ShowOriginalButton');\n\n    return getTextWithLanguage('TranslateToButton', translationLanguage);\n  }, [translationLanguage, getTextWithLanguage, isTranslating, lang]);\n\n  const doNotTranslateText = useMemo(() => {\n    if (!detectedChatLanguage) return undefined;\n\n    return getTextWithLanguage('DoNotTranslateLanguage', detectedChatLanguage);\n  }, [getTextWithLanguage, detectedChatLanguage]);\n\n  const handleHide = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: false });\n    requestChatTranslation({ chatId, toLanguageCode: undefined });\n  });\n\n  const handleChangeLanguage = useLastCallback(() => {\n    openChatLanguageModal({ chatId });\n  });\n\n  const handleDoNotTranslate = useLastCallback(() => {\n    if (!detectedChatLanguage) return;\n\n    setSettingOption({\n      doNotTranslate: [...doNotTranslate, detectedChatLanguage],\n    });\n    requestChatTranslation({ chatId, toLanguageCode: undefined });\n\n    showNotification({ message: getTextWithLanguage('AddedToDoNotTranslate', detectedChatLanguage) });\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+F': handleHotkeySearchClick,\n  }), []));\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={isRightColumnShown}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('TranslateMessage')}\n      >\n        <Icon name=\"language\" />\n      </Button>\n    );\n  }, [isRightColumnShown, lang]);\n\n  return (\n    <div className=\"HeaderActions\">\n      {!isForForum && canTranslate && (\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"language\" onClick={handleTranslateClick}>\n            {buttonText}\n          </MenuItem>\n          <MenuItem icon=\"replace\" onClick={handleChangeLanguage}>\n            {lang('Chat.Translate.Menu.To')}\n          </MenuItem>\n          <MenuSeparator />\n          {detectedChatLanguage\n            && <MenuItem icon=\"hand-stop\" onClick={handleDoNotTranslate}>{doNotTranslateText}</MenuItem>}\n          <MenuItem icon=\"close-circle\" onClick={handleHide}>{lang('Hide')}</MenuItem>\n        </DropdownMenu>\n      )}\n      {!isMobile && (\n        <>\n          {canExpandActions && !shouldSendJoinRequest && (canSubscribe || shouldJoinToSend) && (\n            <Button\n              size=\"smaller\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && shouldSendJoinRequest && (\n            <Button\n              size=\"smaller\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang('ChannelJoinRequest')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"smaller\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canExpandActions && canUnblock && (\n            <Button\n              size=\"smaller\"\n              ripple\n              fluid\n              onClick={handleUnblock}\n            >\n              {lang('Unblock')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel={lang('Conversation.SearchPlaceholder')}\n            >\n              <Icon name=\"search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleRequestCall}\n              ariaLabel=\"Call\"\n            >\n              <Icon name=\"phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {!isForForum && Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <Icon name=\"user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <Icon name=\"more\" />\n      </Button>\n      {menuAnchor && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuAnchor}\n          withExtraActions={isMobile || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canViewBoosts={canViewBoosts}\n          canViewMonetization={canViewMonetization}\n          canShowBoostModal={canShowBoostModal}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          pendingJoinRequests={pendingJoinRequests}\n          onJoinRequestsClick={handleJoinRequestsClick}\n          withForumActions={isForForum}\n          channelMonoforumId={channelMonoforumId}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onAsMessagesClick={handleAsMessagesClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const isSuperGroup = Boolean(chat && isChatSuperGroup(chat));\n    const language = selectLanguageCode(global);\n    const translationLanguage = selectTranslationLanguage(global);\n    const isPrivate = isUserId(chatId);\n    const { doNotTranslate } = global.settings.byKey;\n\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    if (!chat || isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n        language,\n        translationLanguage,\n        doNotTranslate,\n      } as Complete<StateProps>;\n    }\n\n    const bot = selectBot(global, chatId);\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const fullInfo = chatFullInfo || userFullInfo;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global, isMobile);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canUnblock = isUserBlocked && !bot;\n    const canSubscribe = Boolean(\n      (isMainThread || chat.isForum) && (isChannel || isSuperGroup) && chat.isNotJoined && !chat.isMonoforum,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot && !chat.isSupport\n      && !isAnonymousForwardsChat(chat.id);\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isSavedDialog || (isMainThread && !canSubscribe);\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && isMainThread && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && isMainThread && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat))) && !chat.isMonoforum;\n    const canViewStatistics = isMainThread && chatFullInfo?.canViewStatistics;\n    const canViewMonetization = isMainThread && chatFullInfo?.canViewMonetization;\n    const canViewBoosts = isMainThread && !chat.isMonoforum\n      && (isSuperGroup || isChannel) && (canViewStatistics || getHasAdminRight(chat, 'postStories'));\n    const canShowBoostModal = !canViewBoosts && (isSuperGroup || isChannel) && !chat.isMonoforum;\n    const pendingJoinRequests = isMainThread ? chatFullInfo?.requestsPending : undefined;\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const noAnimation = !selectCanAnimateInterface(global);\n\n    const isTranslating = Boolean(selectRequestedChatTranslationLanguage(global, chatId));\n    const canTranslate = selectCanTranslateChat(global, chatId) && !fullInfo?.isTranslationDisabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const channelMonoforumId = isChatChannel(chat) ? chat.linkedMonoforumId : undefined;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canViewMonetization,\n      canViewBoosts,\n      canShowBoostModal,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      noAnimation,\n      canTranslate,\n      isTranslating,\n      translationLanguage,\n      language,\n      doNotTranslate,\n      detectedChatLanguage: chat.detectedLanguage,\n      canUnblock,\n      isAccountFrozen,\n      channelMonoforumId,\n    };\n  },\n)(HeaderActions));\n\nfunction setFocusInSearchInput() {\n  const searchInput = document.querySelector<HTMLInputElement>('#MiddleSearch input');\n  if (searchInput) {\n    focusNoScroll(searchInput);\n  }\n}\n","import type {\n  ElementRef } from '../../../lib/teact/teact';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n  useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { setExtraStyles } from '../../../lib/teact/teact-dom';\n\nimport { requestForcedReflow, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\n\nexport interface PaneState {\n  element?: HTMLElement;\n  height: number;\n  isOpen?: boolean;\n}\n\n// Max slide transition duration\nconst CLOSE_DURATION = 450;\nconst RESIZE_THROTTLE = 100;\n\nexport default function useHeaderPane<RefType extends HTMLElement = HTMLDivElement>({\n  ref: providedRef,\n  isOpen,\n  isDisabled,\n  withResizeObserver,\n  onStateChange,\n}: {\n  ref?: ElementRef<RefType>;\n  isOpen?: boolean;\n  isDisabled?: boolean;\n  withResizeObserver?: boolean;\n  onStateChange?: (state: PaneState) => void;\n}) {\n  const [shouldRender, setShouldRender] = useState(isOpen);\n  const localRef = useRef<RefType>();\n  const ref = providedRef || localRef;\n\n  const lastHeightRef = useRef(0);\n\n  const reset = useLastCallback(() => {\n    setShouldRender(true);\n    onStateChange?.({\n      element: undefined,\n      height: 0,\n      isOpen: false,\n    });\n  });\n\n  useEffect(() => {\n    if (isDisabled) {\n      reset();\n    }\n  }, [isDisabled]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldRender(true);\n    }\n  }, [isOpen]);\n\n  useUnmountCleanup(reset);\n\n  useTimeout(() => {\n    setShouldRender(false);\n    onStateChange?.({\n      height: 0,\n      isOpen: false,\n    });\n  }, !isOpen ? CLOSE_DURATION : undefined);\n\n  // Should be `useCallback` to trigger effect on deps change\n  const handleUpdate = useCallback(() => {\n    const element = ref.current;\n    if (isDisabled || !element || !shouldRender) return;\n\n    if (!isOpen) {\n      onStateChange?.({\n        element,\n        height: 0,\n        isOpen: false,\n      });\n      return;\n    }\n\n    requestForcedReflow(() => {\n      const currentHeight = element.offsetHeight;\n      lastHeightRef.current = currentHeight;\n      return () => {\n        onStateChange?.({\n          element,\n          height: currentHeight,\n          isOpen,\n        });\n      };\n    });\n  }, [isOpen, shouldRender, isDisabled, ref, onStateChange]);\n\n  const handleResize = useThrottledCallback(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const newHeight = element.offsetHeight;\n    if (newHeight === lastHeightRef.current) {\n      return;\n    }\n\n    handleUpdate();\n  }, [handleUpdate, ref], RESIZE_THROTTLE, true);\n\n  useLayoutEffect(handleUpdate, [handleUpdate]);\n\n  useResizeObserver(ref, handleResize, !withResizeObserver || !shouldRender);\n\n  return {\n    shouldRender,\n    ref,\n  };\n}\n\nexport function applyAnimationState(list: PaneState[], noTransition = false) {\n  let cumulativeHeight = 0;\n  for (let i = 0; i < list.length; i++) {\n    const state = list[i];\n    const element = state.element;\n    if (!element) {\n      continue;\n    }\n\n    const shiftPx = `${cumulativeHeight}px`;\n\n    const apply = () => {\n      setExtraStyles(element, {\n        transform: `translateY(${state.isOpen ? shiftPx : `calc(${shiftPx} - 100%)`})`,\n        zIndex: String(-i),\n        transition: noTransition ? 'none' : '',\n      });\n    };\n\n    if (!element.dataset.isPanelOpen && state.isOpen && !noTransition) {\n      // Start animation right above its final position\n      setExtraStyles(element, {\n        transform: `translateY(calc(${shiftPx} - 100%))`,\n        zIndex: String(-i),\n        transition: 'none',\n      });\n      element.dataset.isPanelOpen = 'true';\n      requestNextMutation(apply);\n    } else {\n      apply();\n    }\n\n    cumulativeHeight += state.height;\n  }\n}\n","interface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn }: OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiTooltip';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const EmojiTooltip = useModuleLoader(Bundles.Extra, 'EmojiTooltip', !isOpen);\n\n  return EmojiTooltip ? <EmojiTooltip {...props} /> : undefined;\n};\n\nexport default EmojiTooltipAsync;\n","export type MediaSessionHandlers = {\n  play?: () => void;\n  pause?: () => void;\n  stop?: () => void;\n\n  previoustrack?: () => void;\n  nexttrack?: () => void;\n\n  togglemicrophone?: () => void;\n  togglecamera?: () => void;\n  hangup?: () => void;\n\n  seekbackward?: (details: MediaSessionActionDetails) => void;\n  seekforward?: (details: MediaSessionActionDetails) => void;\n  seekTo?: ((details: MediaSessionActionDetails) => void);\n};\n\ninterface MediaMetadataParameters {\n  title?: string;\n  artist?: string;\n  album?: string;\n  artwork?: MediaImage[];\n}\n\nconst DEFAULT_HANDLERS = {\n  play: undefined,\n  pause: undefined,\n  seekbackward: undefined,\n  seekforward: undefined,\n  previoustrack: undefined,\n  nexttrack: undefined,\n  stop: undefined,\n  seekTo: undefined,\n};\n\nexport function registerMediaSession(metadata?: MediaMetadata, handlers?: MediaSessionHandlers) {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    if (metadata) updateMetadata(metadata);\n    if (handlers) setMediaSessionHandlers(handlers);\n  } else {\n    // eslint-disable-next-line no-console\n    console.warn('MediaSession API not supported in this browser');\n  }\n}\n\nexport function updateMetadata(metadata?: MediaMetadata) {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    // eslint-disable-next-line no-null/no-null\n    mediaSession.metadata = metadata ?? null;\n  }\n}\n\nexport function setMediaSessionHandlers(handlers: MediaSessionHandlers) {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    Object.entries({ ...DEFAULT_HANDLERS, ...handlers }).forEach(([key, handler]) => {\n      try {\n        // @ts-ignore API not standardized yet\n        mediaSession.setActionHandler(key, handler);\n      } catch (err) {\n        // Handler not supported, ignoring\n      }\n    });\n  }\n}\n\nexport function clearMediaSession() {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    // eslint-disable-next-line no-null/no-null\n    mediaSession.metadata = null;\n    setMediaSessionHandlers(DEFAULT_HANDLERS);\n    if (mediaSession.playbackState) mediaSession.playbackState = 'none';\n    mediaSession.setPositionState?.();\n  }\n}\n\nexport function setPlaybackState(state: 'none' | 'paused' | 'playing' = 'none') {\n  const { mediaSession } = window.navigator;\n  if (mediaSession && mediaSession.playbackState) {\n    mediaSession.playbackState = state;\n  }\n}\n\nexport function setPositionState(state?: MediaPositionState) {\n  if (!state || state.position === undefined || state.duration === undefined) return;\n  state.position = Math.min(state.position, state.duration);\n\n  const { mediaSession } = window.navigator;\n  mediaSession?.setPositionState?.(state);\n}\n\nexport function buildMediaMetadata({\n  title, artist, album, artwork,\n}: MediaMetadataParameters) {\n  if ('MediaMetadata' in window) {\n    return new window.MediaMetadata({\n      title,\n      artist,\n      album,\n      artwork,\n    });\n  }\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sG8AAzvK\",\"minimized\":\"lTOui0dp\",\"button\":\"bNkLqJf1\",\"title\":\"rMTpNazX\",\"unread-count\":\"O7esHjyC\",\"unreadCount\":\"O7esHjyC\",\"info\":\"OS2LWzdu\",\"name\":\"bkCtPuPQ\",\"icon\":\"f4LUPgr4\",\"avatarWrapper\":\"RMY__Znz\",\"avatar\":\"qeb0Aox1\",\"chatsPreview\":\"_1817Hwgd\",\"unread\":\"SS39xuL3\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { ARCHIVED_FOLDER_ID } from '../../../config';\nimport { getChatTitle } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { compact } from '../../../util/iteratees';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport { useFolderManagerForOrderedIds, useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Badge from '../../ui/Badge';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\nimport styles from './Archive.module.scss';\n\ntype OwnProps = {\n  archiveSettings: GlobalState['archiveSettings'];\n  onDragEnter?: NoneToVoidFunction;\n  onClick?: NoneToVoidFunction;\n};\n\nconst PREVIEW_SLICE = 5;\nconst ARCHIVE_CUSTOM_PEER: CustomPeer = {\n  isCustomPeer: true,\n  title: 'Archived Chats',\n  avatarIcon: 'archive-filled',\n  customPeerAvatarColor: '#9EAAB5',\n};\n\nconst Archive: FC<OwnProps> = ({\n  archiveSettings,\n  onDragEnter,\n  onClick,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  const orderedChatIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const unreadCounters = useFolderManagerForUnreadCounters();\n  const archiveUnreadCount = unreadCounters[ARCHIVED_FOLDER_ID]?.chatsCount;\n\n  const previewItems = useMemo(() => {\n    if (!orderedChatIds?.length) return lang('Loading');\n\n    const chatsById = getGlobal().chats.byId;\n\n    return orderedChatIds.slice(0, PREVIEW_SLICE).map((chatId, i, arr) => {\n      const isLast = i === arr.length - 1;\n      const chat = chatsById[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      const title = getChatTitle(lang, chat);\n\n      return (\n        <>\n          <span className={buildClassName(styles.chat, archiveUnreadCount && chat.unreadCount && styles.unread)}>\n            {renderText(title)}\n          </span>\n          {isLast ? '' : ', '}\n        </>\n      );\n    });\n  }, [orderedChatIds, lang, archiveUnreadCount]);\n\n  const contextActions = useMemo(() => {\n    const actionMinimize = !archiveSettings.isMinimized && {\n      title: lang('ContextArchiveCollapse'),\n      icon: 'collapse',\n      handler: () => {\n        updateArchiveSettings({ isMinimized: true });\n      },\n    } satisfies MenuItemContextAction;\n\n    const actionExpand = archiveSettings.isMinimized && {\n      title: lang('ContextArchiveExpand'),\n      icon: 'expand',\n      handler: () => {\n        updateArchiveSettings({ isMinimized: false });\n      },\n    } satisfies MenuItemContextAction;\n\n    const actionHide = {\n      title: lang('ContextArchiveToMenu'),\n      icon: 'archive-to-main',\n      handler: () => {\n        updateArchiveSettings({ isHidden: true });\n      },\n    } satisfies MenuItemContextAction;\n\n    return compact([actionMinimize, actionExpand, actionHide]);\n  }, [archiveSettings.isMinimized, lang, updateArchiveSettings]);\n\n  const handleDragEnter = useCallback((e) => {\n    e.preventDefault();\n    onDragEnter?.();\n  }, [onDragEnter]);\n\n  function renderCollapsed() {\n    return (\n      <div className={buildClassName(styles.info, 'info')}>\n        <div className=\"info-row\">\n          <div className={buildClassName('title', styles.title)}>\n            <h3 dir=\"auto\" className={buildClassName(styles.name, 'fullName')}>\n              <Icon name=\"archive-filled\" className={styles.icon} />\n              {lang('ArchivedChats')}\n            </h3>\n          </div>\n          <Badge\n            className={styles.unreadCount}\n            text={archiveUnreadCount ? formatIntegerCompact(lang, archiveUnreadCount) : undefined}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  function renderRegular() {\n    return (\n      <>\n        <div className={buildClassName('status', styles.avatarWrapper)}>\n          <Avatar peer={ARCHIVE_CUSTOM_PEER} />\n        </div>\n        <div className={buildClassName(styles.info, 'info')}>\n          <div className=\"info-row\">\n            <div className={buildClassName('title', styles.title)}>\n              <h3 dir=\"auto\" className={buildClassName(styles.name, 'fullName')}>{lang('ArchivedChats')}</h3>\n            </div>\n          </div>\n          <div className=\"subtitle\">\n            <div className={buildClassName('status', styles.chatsPreview)}>\n              {previewItems}\n            </div>\n            <Badge\n              className={styles.unreadCount}\n              text={archiveUnreadCount ? formatIntegerCompact(lang, archiveUnreadCount) : undefined}\n            />\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <ListItem\n      onClick={onClick}\n      onDragEnter={handleDragEnter}\n      className={buildClassName(\n        styles.root,\n        archiveSettings.isMinimized && styles.minimized,\n        'chat-item-clickable',\n        'chat-item-archive',\n      )}\n      buttonClassName={styles.button}\n      contextActions={contextActions}\n      withPortalForMenu\n    >\n      {archiveSettings.isMinimized ? renderCollapsed() : renderRegular()}\n    </ListItem>\n  );\n};\n\nexport default memo(Archive);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yftKUVDQ\",\"sticker\":\"UCBfMOiz\",\"title\":\"dB9cHelg\",\"description\":\"TJ_liZcJ\",\"is-ios\":\"z51XfrFn\",\"isIos\":\"z51XfrFn\",\"is-macos\":\"tiLqJXxs\",\"isMacos\":\"tiLqJXxs\",\"button-text\":\"aL7e0w4t\",\"buttonText\":\"aL7e0w4t\",\"centered\":\"NefQ8HbN\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiSticker } from '../../../api/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectAnimatedEmoji, selectChatFolder } from '../../../global/selectors';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './EmptyFolder.module.scss';\n\ntype OwnProps = {\n  folderId?: number;\n  folderType: 'all' | 'archived' | 'saved' | 'folder';\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFolder?: ApiChatFolder;\n  animatedEmoji?: ApiSticker;\n};\n\nconst ICON_SIZE = 96;\n\nconst EmptyFolder: FC<OwnProps & StateProps> = ({\n  chatFolder, animatedEmoji, foldersDispatch,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const handleEditFolder = useCallback(() => {\n    foldersDispatch({ type: 'editFolder', payload: chatFolder });\n    openSettingsScreen({ screen: SettingsScreens.FoldersEditFolderFromChatList });\n  }, [chatFolder, foldersDispatch]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.sticker}>\n        {animatedEmoji && <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} />}\n      </div>\n      <h3 className={styles.title} dir=\"auto\">{lang('FilterNoChatsToDisplay')}</h3>\n      <p className={styles.description} dir=\"auto\">\n        {lang(chatFolder ? 'ChatList.EmptyChatListFilterText' : 'Chat.EmptyChat')}\n      </p>\n      {chatFolder && (\n        <Button\n          ripple={!isMobile}\n          fluid\n          pill\n          onClick={handleEditFolder}\n          isRtl={lang.isRtl}\n        >\n          <Icon name=\"settings\" />\n          <div className={styles.buttonText}>\n            {lang('ChatList.EmptyChatListEditFilter')}\n          </div>\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { folderId, folderType }): Complete<StateProps> => {\n  const chatFolder = folderId && folderType === 'folder' ? selectChatFolder(global, folderId) : undefined;\n\n  return {\n    chatFolder,\n    animatedEmoji: selectAnimatedEmoji(global, '📂'),\n  };\n})(EmptyFolder));\n","import { memo } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './FrozenAccountNotification.module.scss';\n\ntype OwnProps = {\n  onClick: () => void;\n};\n\nconst FrozenAccountNotification = ({ onClick }: OwnProps) => {\n  const lang = useLang();\n\n  return (\n    <div\n      className={styles.root}\n      onClick={onClick}\n    >\n      <div className={styles.title}>{lang('TitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('SubtitleFrozenAccount')}</div>\n    </div>\n  );\n};\n\nexport default memo(FrozenAccountNotification);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"fOmerTkM\",\"title\":\"URLYINJA\",\"subtitle\":\"mCFsx7Tv\"};","// extracted by mini-css-extract-plugin\nexport default {\"minimized\":\"lTOui0dp\",\"root\":\"yEkGgZVL\",\"title\":\"VhAJDrnz\",\"info\":\"WmyL1NJ8\",\"buttons\":\"_40UGD1Y\",\"button\":\"pedMJD_v\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport Button from '../../ui/Button';\n\nimport styles from './UnconfirmedSession.module.scss';\n\ntype OwnProps = {\n  sessions: Record<string, ApiSession>;\n  onHeightChange: (height: number) => void;\n};\n\nconst UnconfirmedSession = ({ sessions, onHeightChange }: OwnProps) => {\n  const { changeSessionSettings, terminateAuthorization, showNotification } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n\n  useResizeObserver(ref, (entry) => {\n    const height = entry.borderBoxSize?.[0]?.blockSize || entry.contentRect.height;\n    onHeightChange(height);\n  });\n\n  const firstUnconfirmed = useMemo(() => {\n    return Object.values(sessions).sort((a, b) => b.dateCreated - a.dateCreated)\n      .find((session) => session.isUnconfirmed)!;\n  }, [sessions]);\n\n  const locationString = useMemo(() => {\n    return [firstUnconfirmed.deviceModel, firstUnconfirmed.region, firstUnconfirmed.country].filter(Boolean).join(', ');\n  }, [firstUnconfirmed]);\n\n  const handleAccept = useLastCallback(() => {\n    changeSessionSettings({\n      hash: firstUnconfirmed.hash,\n      isConfirmed: true,\n    });\n  });\n\n  const handleReject = useLastCallback(() => {\n    terminateAuthorization({ hash: firstUnconfirmed.hash });\n    showNotification({\n      title: lang('UnconfirmedAuthDeniedTitle', 1),\n      message: lang('UnconfirmedAuthDeniedMessageSingle', locationString),\n    });\n  });\n\n  return (\n    <div className={styles.root} ref={ref}>\n      <h2 className={styles.title}>{lang('UnconfirmedAuthTitle')}</h2>\n      <p className={styles.info}>\n        {lang('UnconfirmedAuthSingle', locationString)}\n      </p>\n      <div className={styles.buttons}>\n        <Button fluid isText className={styles.button} onClick={handleAccept}>\n          {lang('UnconfirmedAuthConfirm')}\n        </Button>\n        <Button fluid isText color=\"danger\" onClick={handleReject} className={styles.button}>\n          {lang('UnconfirmedAuthDeny')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(UnconfirmedSession);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { Workspace } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVE_MINIMIZED_HEIGHT,\n  ARCHIVED_FOLDER_ID,\n  CHAT_HEIGHT_PX,\n  CHAT_LIST_SLICE,\n  FRESH_AUTH_PERIOD,\n  SAVED_FOLDER_ID,\n} from '../../../config';\nimport { IS_APP, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getOrderedIds, getOrderKey, getPinnedChatsCount } from '../../../util/folderManager';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useDebouncedCallback from '../../../hooks/useDebouncedCallback';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOrderDiff from './hooks/useOrderDiff';\nimport {\n  selectWorkspaces,\n  selectCurrentWorkspaceId,\n  selectExcludeOtherWorkspaces,\n  EVERYTHING_WORKSPACE_ID,\n} from '../../../global/selectors/workspaces';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Archive from './Archive';\nimport Chat from './Chat';\nimport EmptyFolder from './EmptyFolder';\nimport FrozenAccountNotification from './FrozenAccountNotification';\nimport UnconfirmedSession from './UnconfirmedSession';\n\ntype OwnProps = {\n  className?: string;\n  folderType: 'all' | 'archived' | 'saved' | 'folder';\n  folderId?: number;\n  isActive: boolean;\n  canDisplayArchive?: boolean;\n  archiveSettings?: GlobalState['archiveSettings'];\n  isForumPanelOpen?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n  isMainList?: boolean;\n  foldersDispatch?: FolderEditDispatch;\n  withTags?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  allWorkspaces: Workspace[];\n  currentWorkspaceId: string;\n  excludeOtherWorkspaces: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\nconst DRAG_ENTER_DEBOUNCE = 500;\nconst RESERVED_HOTKEYS = new Set(['9', '0']);\n\nconst ChatList: FC<OwnProps & StateProps> = ({\n  className,\n  folderType,\n  folderId,\n  isActive,\n  isForumPanelOpen,\n  canDisplayArchive,\n  archiveSettings,\n  sessions,\n  isAccountFrozen,\n  isMainList,\n  foldersDispatch,\n  withTags,\n  currentUserId,\n  allWorkspaces,\n  currentWorkspaceId,\n  excludeOtherWorkspaces,\n}) => {\n  const {\n    openChat,\n    openNextChat,\n    closeForumPanel,\n    openFrozenAccountModal,\n    openLeftColumnContent,\n  } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n  const shouldIgnoreDragRef = useRef(false);\n  const [unconfirmedSessionHeight, setUnconfirmedSessionHeight] = useState(0);\n  \n  const isArchived = folderType === 'archived';\n  const isAllFolder = folderType === 'all';\n  const isSaved = folderType === 'saved';\n  const resolvedFolderId = (\n    isAllFolder ? ALL_FOLDER_ID : isArchived ? ARCHIVED_FOLDER_ID : isSaved ? SAVED_FOLDER_ID : folderId!\n  );\n\n  const shouldDisplayArchive = isAllFolder && canDisplayArchive && archiveSettings;\n  const shouldShowFrozenAccountNotification = isAccountFrozen && isAllFolder;\n\n  const orderedIds = useFolderManagerForOrderedIds(resolvedFolderId);\n  \n  const foldersFromWorkspaces = useMemo(() => allWorkspaces.flatMap(w => w.foldersIds), [allWorkspaces]);\n  const shouldFilterByWorkspace = isAllFolder && currentWorkspaceId === EVERYTHING_WORKSPACE_ID && excludeOtherWorkspaces;\n\n  const filteredOrderedIds = useMemo(() => {\n    const orderedIdsWithoutSelf = orderedIds?.filter((chatId) => chatId !== currentUserId);\n\n    if (!shouldFilterByWorkspace || !orderedIdsWithoutSelf) {\n      return orderedIdsWithoutSelf;\n    }\n\n    return orderedIdsWithoutSelf.filter((chatId) => {\n      return !foldersFromWorkspaces.some(folderId => {\n        const folderChatIds = getOrderedIds(folderId);\n        return folderChatIds?.includes(chatId);\n      });\n    });\n  }, [orderedIds, shouldFilterByWorkspace, foldersFromWorkspaces, currentUserId]);\n\n  const chatsHeight = (filteredOrderedIds?.length || 0) * CHAT_HEIGHT_PX;\n  const archiveHeight = shouldDisplayArchive\n    ? archiveSettings?.isMinimized ? ARCHIVE_MINIMIZED_HEIGHT : CHAT_HEIGHT_PX : 0;\n  const frozenNotificationHeight = shouldShowFrozenAccountNotification ? 68 : 0;\n\n  const { orderDiffById, getAnimationType } = useOrderDiff(filteredOrderedIds);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, filteredOrderedIds, undefined, CHAT_LIST_SLICE);\n\n  const shouldShowUnconfirmedSessions = useMemo(() => {\n    const sessionsArray = Object.values(sessions || {});\n    const current = sessionsArray.find((session) => session.isCurrent);\n    if (!current || getServerTime() - current.dateCreated < FRESH_AUTH_PERIOD) return false;\n\n    return !isAccountFrozen && isAllFolder && sessionsArray.some((session) => session.isUnconfirmed);\n  }, [isAllFolder, sessions, isAccountFrozen]);\n\n  useEffect(() => {\n    if (!shouldShowUnconfirmedSessions) setUnconfirmedSessionHeight(0);\n  }, [shouldShowUnconfirmedSessions]);\n\n  // Support <Alt>+<Up/Down> to navigate between chats\n  useHotkeys(useMemo(() => (isActive && filteredOrderedIds?.length ? {\n    'Alt+ArrowUp': (e: KeyboardEvent) => {\n      e.preventDefault();\n      openNextChat({ targetIndexDelta: -1, orderedIds: filteredOrderedIds });\n    },\n    'Alt+ArrowDown': (e: KeyboardEvent) => {\n      e.preventDefault();\n      openNextChat({ targetIndexDelta: 1, orderedIds: filteredOrderedIds });\n    },\n  } : undefined), [isActive, filteredOrderedIds]));\n\n  // Support <Cmd>+<Digit> to navigate between chats\n  useEffect(() => {\n    if (!isActive || isSaved || !filteredOrderedIds || !IS_APP) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && e.code.startsWith('Digit')) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit || RESERVED_HOTKEYS.has(digit)) return;\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        const isArchiveInList = shouldDisplayArchive && archiveSettings && !archiveSettings.isMinimized;\n\n        const shift = isArchiveInList ? -1 : 0;\n        const position = Number(digit) + shift - 1;\n\n        if (isArchiveInList && position === -1) {\n          if (isMainList) openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n          return;\n        }\n\n        if (position > filteredOrderedIds!.length - 1) return;\n\n        openChat({ id: filteredOrderedIds![position], shouldReplaceHistory: true });\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [\n    archiveSettings, isSaved, isActive, openChat, openNextChat, filteredOrderedIds, shouldDisplayArchive, isMainList,\n  ]);\n\n  const { observe } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleArchivedClick = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n    closeForumPanel();\n  });\n\n  const handleFrozenAccountNotificationClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  const handleArchivedDragEnter = useLastCallback(() => {\n    if (shouldIgnoreDragRef.current) {\n      shouldIgnoreDragRef.current = false;\n      return;\n    }\n    handleArchivedClick();\n  });\n\n  const handleDragEnter = useDebouncedCallback((chatId: string) => {\n    if (shouldIgnoreDragRef.current) {\n      shouldIgnoreDragRef.current = false;\n      return;\n    }\n    openChat({ id: chatId, shouldReplaceHistory: true });\n  }, [openChat], DRAG_ENTER_DEBOUNCE, true);\n\n  const handleDragLeave = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    if (x < rect.width || y < rect.y) return;\n    shouldIgnoreDragRef.current = true;\n  });\n\n  function renderChats() {\n    const viewportOffset = filteredOrderedIds!.indexOf(viewportIds![0]);\n\n    const pinnedCount = getPinnedChatsCount(resolvedFolderId) || 0;\n\n    return viewportIds!.map((id, i) => {\n      const isPinned = viewportOffset + i < pinnedCount;\n      const offsetTop = unconfirmedSessionHeight + archiveHeight + frozenNotificationHeight\n        + (viewportOffset + i) * CHAT_HEIGHT_PX;\n\n      return (\n        <Chat\n          key={id}\n          teactOrderKey={isPinned ? i : getOrderKey(id, isSaved)}\n          chatId={id}\n          isPinned={isPinned}\n          folderId={folderId}\n          isSavedDialog={isSaved}\n          animationType={getAnimationType(id)}\n          orderDiff={orderDiffById[id]}\n          offsetTop={offsetTop}\n          observeIntersection={observe}\n          onDragEnter={handleDragEnter}\n          withTags={withTags}\n        />\n      );\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      className={buildClassName('chat-list custom-scroll', isForumPanelOpen && 'forum-panel-open', className)}\n      ref={containerRef}\n      items={viewportIds}\n      itemSelector=\".ListItem:not(.chat-item-archive)\"\n      preloadBackwards={CHAT_LIST_SLICE}\n      withAbsolutePositioning\n      maxHeight={chatsHeight + archiveHeight + frozenNotificationHeight + unconfirmedSessionHeight}\n      onLoadMore={getMore}\n      onDragLeave={handleDragLeave}\n    >\n      {shouldShowUnconfirmedSessions && (\n        <UnconfirmedSession\n          key=\"unconfirmed\"\n          sessions={sessions!}\n          onHeightChange={setUnconfirmedSessionHeight}\n        />\n      )}\n      {shouldShowFrozenAccountNotification && (\n        <FrozenAccountNotification\n          key=\"frozen\"\n          onClick={handleFrozenAccountNotificationClick}\n        />\n      )}\n      {shouldDisplayArchive && (\n        <Archive\n          key=\"archive\"\n          archiveSettings={archiveSettings}\n          onClick={handleArchivedClick}\n          onDragEnter={handleArchivedDragEnter}\n        />\n      )}\n      {viewportIds?.length ? (\n        renderChats()\n      ) : viewportIds && !viewportIds.length && !isSaved ? (\n        (\n          <EmptyFolder\n            folderId={folderId}\n            folderType={folderType}\n            foldersDispatch={foldersDispatch!}\n          />\n        )\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      currentUserId: global.currentUserId!,\n      allWorkspaces: selectWorkspaces(global),\n      currentWorkspaceId: selectCurrentWorkspaceId(global),\n      excludeOtherWorkspaces: selectExcludeOtherWorkspaces(global),\n    };\n  },\n)(ChatList));\n\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiTopic, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\nimport { MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  getChatTypeString,\n  getGroupStatus,\n  getMainUsername,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessages,\n  selectChatOnlineCount,\n  selectIsChatRestricted,\n  selectMonoforumChannel,\n  selectThreadInfo,\n  selectThreadMessagesCount,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Transition from '../ui/Transition';\nimport Avatar from './Avatar';\nimport DotAnimation from './DotAnimation';\nimport FullNameTitle from './FullNameTitle';\nimport Icon from './icons/Icon';\nimport TopicIcon from './TopicIcon';\nimport TypingStatus from './TypingStatus';\n\nconst TOPIC_ICON_SIZE = 2.5 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  className?: string;\n  statusIcon?: IconName;\n  typingStatus?: ApiTypingStatus;\n  avatarSize?: 'tiny' | 'small' | 'medium' | 'large' | 'jumbo';\n  status?: string;\n  withDots?: boolean;\n  withMediaViewer?: boolean;\n  withUsername?: boolean;\n  withFullInfo?: boolean;\n  withUpdatingStatus?: boolean;\n  withChatType?: boolean;\n  noEmojiStatus?: boolean;\n  emojiStatusSize?: number;\n  noRtl?: boolean;\n  noAvatar?: boolean;\n  noStatusOrTyping?: boolean;\n  isSavedDialog?: boolean;\n  withMonoforumStatus?: boolean;\n  onClick?: VoidFunction;\n  onEmojiStatusClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  threadInfo?: ApiThreadInfo;\n  topic?: ApiTopic;\n  onlineCount?: number;\n  areMessagesLoaded: boolean;\n  messagesCount?: number;\n  self?: ApiUser;\n  monoforumChannel?: ApiChat;\n};\n\nconst GroupChatInfo: FC<OwnProps & StateProps> = ({\n  typingStatus,\n  className,\n  statusIcon,\n  avatarSize = 'medium',\n  noAvatar,\n  status,\n  withDots,\n  withMediaViewer,\n  withUsername,\n  withFullInfo,\n  withUpdatingStatus,\n  withChatType,\n  threadInfo,\n  noRtl,\n  chat: realChat,\n  onlineCount,\n  areMessagesLoaded,\n  topic,\n  messagesCount,\n  noStatusOrTyping,\n  noEmojiStatus,\n  emojiStatusSize,\n  isSavedDialog,\n  self,\n  withMonoforumStatus,\n  monoforumChannel,\n  onClick,\n  onEmojiStatusClick,\n}) => {\n  const {\n    loadFullChat,\n    openMediaViewer,\n    loadMoreProfilePhotos,\n  } = getActions();\n\n  const chat = !withMonoforumStatus && monoforumChannel ? monoforumChannel : realChat;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const isSuperGroup = chat && isChatSuperGroup(chat);\n  const isTopic = Boolean(chat?.isForum && threadInfo && topic);\n  const { id: chatId, isMin } = chat || {};\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId!);\n\n  useEffect(() => {\n    if (chatId && !isMin) {\n      if (withFullInfo) loadFullChat({ chatId });\n      if (withMediaViewer) loadMoreProfilePhotos({ peerId: chatId, isPreload: true });\n    }\n  }, [chatId, isMin, withFullInfo, isSuperGroup, withMediaViewer]);\n\n  const handleAvatarViewerOpen = useLastCallback(\n    (e: React.MouseEvent<HTMLDivElement, MouseEvent>, hasMedia: boolean) => {\n      if (chat && hasMedia) {\n        e.stopPropagation();\n        openMediaViewer({\n          isAvatarView: true,\n          chatId: chat.id,\n          mediaIndex: 0,\n          origin: avatarSize === 'jumbo' ? MediaViewerOrigin.ProfileAvatar : MediaViewerOrigin.MiddleHeaderAvatar,\n        });\n      }\n    },\n  );\n\n  const mainUsername = useMemo(() => chat && withUsername && getMainUsername(chat), [chat, withUsername]);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  function renderStatusOrTyping() {\n    if (withUpdatingStatus && !areMessagesLoaded && !isRestricted) {\n      return (\n        <DotAnimation className=\"status\" content={oldLang('Updating')} />\n      );\n    }\n\n    if (withMonoforumStatus) {\n      return (\n        <span className=\"status\" dir=\"auto\">\n          {lang('MonoforumStatus')}\n        </span>\n      );\n    }\n\n    if (realChat?.isMonoforum) {\n      return undefined;\n    }\n\n    if (status) {\n      return withDots ? (\n        <DotAnimation className=\"status\" content={status} />\n      ) : (\n        <span className=\"status\" dir=\"auto\">\n          {statusIcon && <Icon className=\"status-icon\" name={statusIcon} />}\n          {renderText(status)}\n        </span>\n      );\n    }\n\n    if (!chat) {\n      return undefined;\n    }\n\n    if (typingStatus) {\n      return <TypingStatus typingStatus={typingStatus} />;\n    }\n\n    if (isTopic) {\n      return (\n        <span className=\"status\" dir=\"auto\">\n          <Transition\n            name=\"fade\"\n            shouldRestoreHeight\n            activeKey={messagesCount !== undefined ? 1 : 2}\n            className=\"message-count-transition\"\n          >\n            {messagesCount !== undefined && oldLang('messages', messagesCount, 'i')}\n          </Transition>\n        </span>\n      );\n    }\n\n    if (withChatType) {\n      return (\n        <span className=\"status\" dir=\"auto\">{oldLang(getChatTypeString(chat))}</span>\n      );\n    }\n\n    const groupStatus = getGroupStatus(oldLang, chat);\n    const onlineStatus = onlineCount ? `, ${oldLang('OnlineCount', onlineCount, 'i')}` : undefined;\n\n    return (\n      <span className=\"status\">\n        {mainUsername && <span className=\"handle withStatus\">{mainUsername}</span>}\n        <span className=\"group-status\">{groupStatus}</span>\n        {onlineStatus && <span className=\"online-status\">{onlineStatus}</span>}\n      </span>\n    );\n  }\n\n  return (\n    <div\n      className={\n        buildClassName('ChatInfo', className)\n      }\n      dir={!noRtl && oldLang.isRtl ? 'rtl' : undefined}\n      onClick={onClick}\n    >\n      {!noAvatar && !isTopic && (\n        <>\n          {isSavedDialog && self && (\n            <Avatar\n              key=\"saved-messages\"\n              size={avatarSize}\n              peer={self}\n              isSavedMessages\n              className=\"saved-dialog-avatar\"\n            />\n          )}\n          <Avatar\n            key={chat.id}\n            className={buildClassName(isSavedDialog && 'overlay-avatar')}\n            size={avatarSize}\n            peer={chat}\n            asMessageBubble={Boolean(monoforumChannel)}\n            isSavedDialog={isSavedDialog}\n            onClick={withMediaViewer ? handleAvatarViewerOpen : undefined}\n          />\n        </>\n      )}\n      {isTopic && (\n        <TopicIcon\n          topic={topic!}\n          className=\"topic-header-icon\"\n          size={TOPIC_ICON_SIZE}\n        />\n      )}\n      <div className=\"info\">\n        {topic\n          ? <h3 dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</h3>\n          : (\n            <FullNameTitle\n              peer={chat}\n              isMonoforum={!withMonoforumStatus && Boolean(monoforumChannel)}\n              emojiStatusSize={emojiStatusSize}\n              withEmojiStatus={!noEmojiStatus}\n              isSavedDialog={isSavedDialog}\n              onEmojiStatusClick={onEmojiStatusClick}\n            />\n          )}\n        {!noStatusOrTyping && renderStatusOrTyping()}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const threadInfo = threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const onlineCount = chat ? selectChatOnlineCount(global, chat) : undefined;\n    const areMessagesLoaded = Boolean(selectChatMessages(global, chatId));\n    const topic = threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const messagesCount = topic && selectThreadMessagesCount(global, chatId, threadId!);\n    const self = selectUser(global, global.currentUserId!);\n    const monoforumChannel = selectMonoforumChannel(global, chatId);\n\n    return {\n      chat,\n      threadInfo,\n      onlineCount,\n      topic,\n      areMessagesLoaded,\n      messagesCount,\n      self,\n      monoforumChannel,\n    };\n  },\n)(GroupChatInfo));\n","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMediaExtendedPreview, ApiPhoto } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ThemeKey } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  getMediaFormat, getMediaThumbUri, getMediaTransferState, getPhotoMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions, MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../../hooks/usePrevious';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport SensitiveContentConfirmModal from '../../common/SensitiveContentConfirmModal';\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps<T> = {\n  id?: string;\n  photo: ApiPhoto | ApiMediaExtendedPreview;\n  isInWebPage?: boolean;\n  messageText?: string;\n  isOwn?: boolean;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ThemeKey;\n  className?: string;\n  clickArg?: T;\n  isMediaNsfw?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick?: (arg: T, e: React.MouseEvent<HTMLElement>) => void;\n  onCancelUpload?: (arg: T) => void;\n};\n\ntype StateProps = {\n  needsAgeVerification?: boolean;\n};\n\nconst Photo = <T,>({\n  id,\n  photo,\n  messageText,\n  isOwn,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  forcedWidth,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  isInWebPage,\n  clickArg,\n  className,\n  isMediaNsfw,\n  observeIntersection,\n  onClick,\n  onCancelUpload,\n  needsAgeVerification,\n}: OwnProps<T> & StateProps) => {\n  const ref = useRef<HTMLDivElement>();\n  const isPaidPreview = photo.mediaType === 'extendedMediaPreview';\n\n  const localBlobUrl = !isPaidPreview ? photo.blobUrl : undefined;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting && !isPaidPreview;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(!isPaidPreview ? getPhotoMediaHash(photo, size) : undefined, !shouldLoad);\n  const prevMediaData = usePrevious(mediaData);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const { ref: fullMediaRef, shouldRender: shouldRenderFullMedia } = useMediaTransition<HTMLImageElement>({\n    hasMediaData: Boolean(fullMediaData),\n    withShouldRender: true,\n  });\n\n  const withBlurredBackground = Boolean(forcedWidth);\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(photo, noThumb);\n  useMediaTransition({ ref: thumbRef, hasMediaData: !noThumb });\n  const blurredBackgroundRef = useBlurredMediaThumbRef(photo, !withBlurredBackground);\n  const thumbDataUri = getMediaThumbUri(photo);\n\n  const { updateContentSettings, openAgeVerificationModal } = getActions();\n  const [isNsfwModalOpen, openNsfwModal, closeNsfwModal] = useFlag();\n  const [shouldAlwaysShowNsfw, setShouldAlwaysShowNsfw] = useState(false);\n\n  const shouldShowSpoiler = isPaidPreview || photo.isSpoiler || isMediaNsfw;\n  const [isSpoilerShown, showSpoiler, hideSpoiler] = useFlag(shouldShowSpoiler);\n\n  useEffect(() => {\n    if (shouldShowSpoiler) {\n      showSpoiler();\n    } else {\n      hideSpoiler();\n    }\n  }, [shouldShowSpoiler]);\n\n  const handleNsfwConfirm = useLastCallback(() => {\n    closeNsfwModal();\n    hideSpoiler();\n\n    if (shouldAlwaysShowNsfw) {\n      updateContentSettings({ isSensitiveEnabled: true });\n    }\n  });\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    !isPaidPreview ? getPhotoMediaHash(photo, 'download') : undefined,\n    !isDownloading,\n    !isPaidPreview ? getMediaFormat(photo, 'download') : undefined,\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n    uploadProgress !== undefined,\n  );\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n\n  const {\n    ref: spinnerRef,\n    shouldRender: shouldRenderSpinner,\n  } = useShowTransition({\n    isOpen: isTransferring,\n    noMountTransition: wasLoadDisabled,\n    className: 'slow',\n    withShouldRender: true,\n  });\n  const {\n    ref: downloadButtonRef,\n    shouldRender: shouldRenderDownloadButton,\n  } = useShowTransition({\n    isOpen: !fullMediaData && !isLoadAllowed,\n    withShouldRender: true,\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    if (isUploading) {\n      onCancelUpload?.(clickArg!);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      if (isMediaNsfw) {\n        if (needsAgeVerification) {\n          openAgeVerificationModal();\n          return;\n        }\n        openNsfwModal();\n        return;\n      }\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(clickArg!, e);\n  });\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      const messageId = Number(contentEl.closest<HTMLDivElement>('.Message')!.dataset.messageId);\n      getCustomAppendixBg(fullMediaData, Boolean(isOwn), messageId, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions({\n    media: photo,\n    isOwn,\n    asForwarded,\n    noAvatars,\n    isMobile,\n    messageText,\n    isInWebPage,\n  });\n\n  const componentClassName = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    (width === height || size === 'pictogram') && 'square-image',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n    className,\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={componentClassName}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && (\n        <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          ref={fullMediaRef}\n          src={fullMediaData || prevMediaData}\n          className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n          alt=\"\"\n          style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n          draggable={!isProtected}\n        />\n      )}\n      {withThumb && (\n        <canvas ref={thumbRef} className=\"thumbnail\" />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div ref={spinnerRef} className=\"media-loading\">\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <Icon ref={downloadButtonRef} name=\"download\" />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n        isNsfw={isMediaNsfw}\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">\n          {Math.round(transferProgress * 100)}\n          %\n        </span>\n      )}\n      <SensitiveContentConfirmModal\n        isOpen={isNsfwModalOpen}\n        onClose={closeNsfwModal}\n        shouldAlwaysShow={shouldAlwaysShowNsfw}\n        onAlwaysShowChanged={setShouldAlwaysShowNsfw}\n        confirmHandler={handleNsfwConfirm}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const appConfig = global.appConfig;\n  const needsAgeVerification = appConfig.needAgeVideoVerification;\n\n  return {\n    needsAgeVerification,\n  };\n})(Photo));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","import type { ElementRef, FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDateTime, formatPastTimeShort } from '../../util/dates/dateFormat';\nimport { getColorFromExtension, getFileSizeString } from './helpers/documentInfo';\nimport { getDocumentThumbnailDimensions } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport Link from '../ui/Link';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport Icon from './icons/Icon';\n\nimport './File.scss';\n\ntype OwnProps = {\n  ref?: ElementRef<HTMLDivElement>;\n  name: string;\n  extension?: string;\n  size: number;\n  timestamp?: number;\n  sender?: string;\n  thumbnailDataUri?: string;\n  previewData?: string;\n  className?: string;\n  smaller?: boolean;\n  isTransferring?: boolean;\n  isUploading?: boolean;\n  isSelectable?: boolean;\n  isSelected?: boolean;\n  transferProgress?: number;\n  actionIcon?: IconName;\n  onClick?: () => void;\n  onDateClick?: (e: React.MouseEvent<HTMLAnchorElement>) => void;\n};\n\nconst File: FC<OwnProps> = ({\n  ref,\n  name,\n  size,\n  extension = '',\n  timestamp,\n  sender,\n  thumbnailDataUri,\n  previewData,\n  className,\n  smaller,\n  isTransferring,\n  isUploading,\n  isSelectable,\n  isSelected,\n  transferProgress,\n  actionIcon,\n  onClick,\n  onDateClick,\n}) => {\n  const lang = useOldLang();\n  let elementRef = useRef<HTMLDivElement>();\n  if (ref) {\n    elementRef = ref;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [withThumb] = useState(!previewData);\n  const noThumb = Boolean(previewData);\n  const thumbRef = useCanvasBlur(thumbnailDataUri, noThumb, isMobile && !IS_CANVAS_FILTER_SUPPORTED);\n  const thumbClassNames = useMediaTransitionDeprecated(!noThumb);\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransitionDeprecated(isTransferring, undefined, true);\n\n  const color = getColorFromExtension(extension);\n  const sizeString = getFileSizeString(size);\n  const subtitle = useMemo(() => {\n    if (!isTransferring || !transferProgress) return sizeString;\n    return `${getFileSizeString(size * transferProgress)} / ${sizeString}`;\n  }, [isTransferring, size, sizeString, transferProgress]);\n\n  const { width, height } = getDocumentThumbnailDimensions(smaller);\n\n  const fullClassName = buildClassName(\n    'File',\n    className,\n    smaller && 'smaller',\n    onClick && !isUploading && 'interactive',\n    isSelected && 'file-is-selected',\n  );\n\n  return (\n    <div ref={elementRef} className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      {isSelectable && (\n        <div className=\"message-select-control no-selection\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      <div className=\"file-icon-container\" onClick={isUploading ? undefined : onClick}>\n        {thumbnailDataUri || previewData ? (\n          <div className=\"file-preview media-inner\">\n            <img\n              src={previewData}\n              className=\"full-media\"\n              width={width}\n              height={height}\n              draggable={false}\n              alt=\"\"\n            />\n            {withThumb && (\n              <canvas\n                ref={thumbRef}\n                className={buildClassName('thumbnail', thumbClassNames)}\n              />\n            )}\n          </div>\n        ) : (\n          <div className={`file-icon ${color}`}>\n            {extension.length <= 4 && (\n              <span className=\"file-ext\" dir=\"auto\">{extension}</span>\n            )}\n          </div>\n        )}\n        {shouldSpinnerRender && (\n          <div className={buildClassName('file-progress', color, spinnerClassNames)}>\n            <ProgressSpinner\n              progress={transferProgress}\n              size={smaller ? 's' : 'm'}\n              onClick={isUploading ? onClick : undefined}\n            />\n          </div>\n        )}\n        {onClick && (\n          <Icon\n            name={actionIcon || 'download'}\n            className={buildClassName('action-icon', shouldSpinnerRender && 'hidden')}\n          />\n        )}\n      </div>\n      <div className=\"file-info\">\n        <div className=\"file-title\" dir=\"auto\" title={name}>{renderText(name)}</div>\n        <div className=\"file-subtitle\" dir=\"auto\">\n          <span>\n            {subtitle}\n          </span>\n          {sender && <span className=\"file-sender\">{renderText(sender)}</span>}\n          {!sender && Boolean(timestamp) && (\n            <>\n              <span className=\"bullet\" />\n              <Link onClick={onDateClick}>{formatMediaDateTime(lang, timestamp * 1000, true)}</Link>\n            </>\n          )}\n        </div>\n      </div>\n      {sender && Boolean(timestamp) && (\n        <Link onClick={onDateClick}>{formatPastTimeShort(lang, timestamp * 1000)}</Link>\n      )}\n    </div>\n  );\n};\n\nexport default memo(File);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ow6Ij9O5\",\"title-row\":\"CBda1UmC\",\"titleRow\":\"CBda1UmC\",\"loading\":\"L4Zk0yMN\",\"other-column\":\"d0hTIVJn\",\"otherColumn\":\"d0hTIVJn\",\"main-column\":\"lEbV6HrI\",\"mainColumn\":\"lEbV6HrI\",\"unread\":\"BhS75ocD\",\"last-message\":\"KJ16dBus\",\"lastMessage\":\"KJ16dBus\",\"after-wrapper\":\"uWo2dhui\",\"afterWrapper\":\"uWo2dhui\",\"after\":\"g3XnC73g\",\"title\":\"k3Ch25ZQ\",\"otherColumnIcon\":\"oknhG11L\",\"other-column-title\":\"ZUj3xAjs\",\"otherColumnTitle\":\"ZUj3xAjs\",\"other-columns\":\"IkuCBmvA\",\"otherColumns\":\"IkuCBmvA\",\"ellipsis\":\"_m_2xcPW\",\"reverse-corner\":\"U_yhhC0w\",\"reverseCorner\":\"U_yhhC0w\",\"overwritten-width\":\"HV0wCR4O\",\"overwrittenWidth\":\"HV0wCR4O\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { getOrderedTopics } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './ChatForumLastMessage.module.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  topics?: Record<number, ApiTopic>;\n  renderLastMessage: () => React.ReactNode;\n  observeIntersection?: ObserveFn;\n  noForumTitle?: boolean;\n};\n\nconst NO_CORNER_THRESHOLD = Number(REM);\nconst MAX_TOPICS = 3;\n\nconst ChatForumLastMessage: FC<OwnProps> = ({\n  chat,\n  topics,\n  renderLastMessage,\n  observeIntersection,\n  noForumTitle,\n}) => {\n  const { openThread } = getActions();\n\n  const lastMessageRef = useRef<HTMLDivElement>();\n  const mainColumnRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const [lastActiveTopic, ...otherTopics] = useMemo(() => {\n    if (!topics) {\n      return [];\n    }\n\n    return getOrderedTopics(Object.values(topics), undefined, true).slice(0, MAX_TOPICS);\n  }, [topics]);\n\n  const [isReversedCorner, setIsReversedCorner] = useState(false);\n  const [overwrittenWidth, setOverwrittenWidth] = useState<number | undefined>(undefined);\n\n  const {\n    handleClick: handleOpenTopicClick,\n    handleMouseDown: handleOpenTopicMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement>) => {\n    if (lastActiveTopic.unreadCount === 0 || chat.isForumAsMessages) return;\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    openThread({\n      chatId: chat.id,\n      threadId: lastActiveTopic.id,\n      shouldReplaceHistory: true,\n      noForumTopicPanel: getIsMobile(),\n    });\n  });\n\n  useEffect(() => {\n    const lastMessageElement = lastMessageRef.current;\n    const mainColumnElement = mainColumnRef.current;\n    if (!lastMessageElement || !mainColumnElement) return;\n\n    const lastMessageWidth = lastMessageElement.offsetWidth;\n    const mainColumnWidth = mainColumnElement.offsetWidth;\n\n    if (Math.abs(lastMessageWidth - mainColumnWidth) < NO_CORNER_THRESHOLD) {\n      setOverwrittenWidth(Math.max(lastMessageWidth, mainColumnWidth));\n    } else {\n      setOverwrittenWidth(undefined);\n    }\n    setIsReversedCorner(lastMessageWidth > mainColumnWidth);\n  }, [lastActiveTopic, renderLastMessage]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        isReversedCorner && styles.reverseCorner,\n        overwrittenWidth && styles.overwrittenWidth,\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      style={overwrittenWidth ? `--overwritten-width: ${overwrittenWidth}px` : undefined}\n    >\n      {\n        !noForumTitle && (\n          <>\n            {lastActiveTopic && (\n              <div className={styles.titleRow}>\n                <div\n                  className={buildClassName(\n                    styles.mainColumn,\n                    lastActiveTopic.unreadCount && styles.unread,\n                  )}\n                  ref={mainColumnRef}\n                  onClick={handleOpenTopicClick}\n                  onMouseDown={handleOpenTopicMouseDown}\n                >\n                  <TopicIcon\n                    topic={lastActiveTopic}\n                    observeIntersection={observeIntersection}\n                  />\n                  <div className={styles.title}>{renderText(lastActiveTopic.title)}</div>\n                  {!overwrittenWidth && isReversedCorner && (\n                    <div className={styles.afterWrapper}>\n                      <div className={styles.after} />\n                    </div>\n                  )}\n                </div>\n\n                <div className={styles.otherColumns}>\n                  {otherTopics.map((topic) => (\n                    <div\n                      className={buildClassName(\n                        styles.otherColumn, topic.unreadCount && styles.unread,\n                      )}\n                      key={topic.id}\n                    >\n                      <TopicIcon\n                        topic={topic}\n                        className={styles.otherColumnIcon}\n                        observeIntersection={observeIntersection}\n                      />\n                      <span className={styles.otherColumnTitle}>{renderText(topic.title)}</span>\n                    </div>\n                  ))}\n                </div>\n\n                <div className={styles.ellipsis} />\n              </div>\n            )}\n            {!lastActiveTopic && (\n              <div className={buildClassName(styles.titleRow, styles.loading)}>\n                {lang('Loading')}\n              </div>\n            )}\n          </>\n        )\n      }\n      <div\n        className={buildClassName(styles.lastMessage, lastActiveTopic?.unreadCount && !noForumTitle && styles.unread)}\n        ref={lastMessageRef}\n        onClick={handleOpenTopicClick}\n        onMouseDown={handleOpenTopicMouseDown}\n      >\n        {renderLastMessage()}\n        {!overwrittenWidth && !isReversedCorner && (\n          <div className={styles.afterWrapper}>\n            <div className={styles.after} />\n          </div>\n        )}\n      </div>\n\n    </div>\n  );\n};\n\nexport default memo(ChatForumLastMessage);\n","import {\n  useCallback, useLayoutEffect, useRef,\n} from '../../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiDraft, ApiMessage, ApiPeer, ApiTopic, ApiTypingStatus,\n  StatefulMediaContent,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { ANIMATION_END_DELAY, CHAT_HEIGHT_PX } from '../../../../config';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\nimport {\n  getMessageIsSpoiler,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n} from '../../../../global/helpers';\nimport { getMessageSenderName } from '../../../../global/helpers/peers';\nimport buildClassName from '../../../../util/buildClassName';\nimport renderText from '../../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\nimport { ChatAnimationTypes } from './useChatAnimationType';\n\nimport useMessageMediaHash from '../../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../../hooks/media/useThumbnail';\nimport useEnsureStory from '../../../../hooks/useEnsureStory';\nimport useLang from '../../../../hooks/useLang';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ChatForumLastMessage from '../../../common/ChatForumLastMessage';\nimport Icon from '../../../common/icons/Icon';\nimport MessageSummary from '../../../common/MessageSummary';\nimport TypingStatus from '../../../common/TypingStatus';\n\nconst ANIMATION_DURATION = 200;\n\nexport default function useChatListEntry({\n  chat,\n  topics,\n  lastMessage,\n  statefulMediaContent,\n  chatId,\n  typingStatus,\n  draft,\n  lastMessageTopic,\n  lastMessageSender,\n  observeIntersection,\n  animationType,\n  orderDiff,\n  withInterfaceAnimations,\n  isTopic,\n  isSavedDialog,\n  isPreview,\n  noForumTitle,\n}: {\n  chat?: ApiChat;\n  topics?: Record<number, ApiTopic>;\n  lastMessage?: ApiMessage;\n  statefulMediaContent: StatefulMediaContent | undefined;\n  chatId: string;\n  typingStatus?: ApiTypingStatus;\n  draft?: ApiDraft;\n  lastMessageTopic?: ApiTopic;\n  lastMessageSender?: ApiPeer;\n  observeIntersection?: ObserveFn;\n  isTopic?: boolean;\n  isSavedDialog?: boolean;\n  isPreview?: boolean;\n\n  animationType: ChatAnimationTypes;\n  orderDiff: number;\n  withInterfaceAnimations?: boolean;\n  noForumTitle?: boolean;\n}) {\n  const lang = useLang();\n  const ref = useRef<HTMLDivElement>();\n\n  const storyData = lastMessage?.content.storyData;\n  const shouldTryLoadingStory = statefulMediaContent && !statefulMediaContent.story;\n\n  useEnsureStory(shouldTryLoadingStory ? storyData?.peerId : undefined, storyData?.id, statefulMediaContent?.story);\n\n  const mediaContent = statefulMediaContent?.story || lastMessage;\n  const mediaHasPreview = mediaContent && !getMessageSticker(mediaContent);\n\n  const thumbDataUri = useThumbnail(mediaContent);\n\n  const mediaThumbnail = mediaHasPreview ? thumbDataUri : undefined;\n  const mediaHash = useMessageMediaHash(mediaContent, 'micro');\n  const mediaBlobUrl = useMedia(mediaHasPreview ? mediaHash : undefined);\n  const isRoundVideo = Boolean(lastMessage && getMessageRoundVideo(lastMessage));\n\n  const renderLastMessageOrTyping = useCallback(() => {\n    if (!isSavedDialog && !isPreview\n      && typingStatus && lastMessage && typingStatus.timestamp > lastMessage.date * 1000) {\n      return <TypingStatus typingStatus={typingStatus} />;\n    }\n\n    const isDraftReplyToTopic = draft && draft.replyInfo?.replyToMsgId === lastMessageTopic?.id;\n    const isEmptyLocalReply = draft?.replyInfo && !draft.text && draft.isLocal;\n\n    const canDisplayDraft = !chat?.isForum && !isSavedDialog && !isPreview && draft && !isEmptyLocalReply\n      && (!isTopic || !isDraftReplyToTopic);\n\n    if (canDisplayDraft) {\n      return (\n        <p className=\"last-message\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n          <span className=\"draft\">{lang('ChatDraftPrefix')}</span>\n          <span className=\"last-message-summary\" dir=\"auto\">\n            {renderTextWithEntities({\n              text: draft.text?.text || '',\n              entities: draft.text?.entities,\n              asPreview: true,\n              withTranslucentThumbs: true,\n            })}\n          </span>\n        </p>\n      );\n    }\n\n    if (!lastMessage) {\n      return undefined;\n    }\n\n    const senderName = lastMessageSender\n      ? getMessageSenderName(lang, chatId, lastMessageSender)\n      : undefined;\n\n    return (\n      <p className=\"last-message shared-canvas-container\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n        {senderName && (\n          <>\n            <span className=\"sender-name\">{renderText(senderName)}</span>\n            <span className=\"colon\">:</span>\n          </>\n        )}\n        {!isSavedDialog && lastMessage.forwardInfo && (<Icon name=\"share-filled\" className=\"chat-prefix-icon\" />)}\n        {lastMessage.replyInfo?.type === 'story' && (<Icon name=\"story-reply\" className=\"chat-prefix-icon\" />)}\n        <span className=\"last-message-summary\" dir=\"auto\">\n          {renderSummary(lastMessage, observeIntersection, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </span>\n      </p>\n    );\n  }, [\n    chat, chatId, draft, isRoundVideo, isTopic, lang, lastMessage, lastMessageSender, lastMessageTopic,\n    mediaBlobUrl, mediaThumbnail, observeIntersection, typingStatus, isSavedDialog, isPreview,\n  ]);\n\n  function renderSubtitle() {\n    if (chat?.isForum && !isTopic) {\n      return (\n        <ChatForumLastMessage\n          chat={chat}\n          renderLastMessage={renderLastMessageOrTyping}\n          observeIntersection={observeIntersection}\n          topics={topics}\n          noForumTitle={noForumTitle}\n        />\n      );\n    }\n\n    return renderLastMessageOrTyping();\n  }\n\n  // Sets animation excess values when `orderDiff` changes and then resets excess values to animate\n  useLayoutEffect(() => {\n    const element = ref.current;\n\n    if (!withInterfaceAnimations || !element) {\n      return;\n    }\n\n    // TODO Refactor animation: create `useListAnimation` that owns `orderDiff` and `animationType`\n    if (animationType === ChatAnimationTypes.Opacity) {\n      element.style.opacity = '0';\n\n      requestMutation(() => {\n        element.classList.add('animate-opacity');\n        element.style.opacity = '1';\n      });\n    } else if (animationType === ChatAnimationTypes.Move) {\n      element.style.transform = `translate3d(0, ${-orderDiff * CHAT_HEIGHT_PX}px, 0)`;\n\n      requestMutation(() => {\n        element.classList.add('animate-transform');\n        element.style.transform = '';\n      });\n    } else {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMutation(() => {\n        element.classList.remove('animate-opacity', 'animate-transform');\n        element.style.opacity = '';\n        element.style.transform = '';\n      });\n    }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n  }, [withInterfaceAnimations, orderDiff, animationType]);\n\n  return {\n    renderSubtitle,\n    ref,\n  };\n}\n\nfunction renderSummary(\n  message: ApiMessage, observeIntersection?: ObserveFn, blobUrl?: string, isRoundVideo?: boolean,\n) {\n  const messageSummary = (\n    <MessageSummary\n      message={message}\n      noEmoji={Boolean(blobUrl)}\n      observeIntersectionForLoading={observeIntersection}\n      inChatList\n    />\n  );\n\n  if (!blobUrl) {\n    return messageSummary;\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n        draggable={false}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {messageSummary}\n    </span>\n  );\n}\n","import { getActions, getGlobal } from '../global';\n\nimport type { ApiMessage } from '../api/types';\nimport type { MessageKey } from './keys/messageKey';\nimport { AudioOrigin, GlobalSearchContent } from '../types';\n\nimport { requestNextMutation } from '../lib/fasterdom/fasterdom';\nimport { selectCurrentMessageList, selectTabState } from '../global/selectors';\nimport { IS_SAFARI } from './browser/windowEnvironment';\nimport { getMessageServerKey, parseMessageKey } from './keys/messageKey';\nimport { isSafariPatchInProgress, patchSafariProgressiveAudio } from './patchSafariProgressiveAudio';\nimport safePlay from './safePlay';\n\ntype Handler = (eventName: string, e: Event) => void;\nexport type TrackId = `${MessageKey}-${number}`;\n\nexport interface Track {\n  audio: HTMLAudioElement;\n  proxy: HTMLAudioElement;\n  type: 'voice' | 'audio' | 'oneTimeVoice';\n  handlers: Handler[];\n  onForcePlay?: NoneToVoidFunction;\n  onTrackChange?: NoneToVoidFunction;\n}\n\nconst tracks = new Map<TrackId, Track>();\n\nlet voiceQueue: TrackId[] = [];\nlet musicQueue: TrackId[] = [];\n\nlet currentTrackId: TrackId | undefined;\n\nfunction createAudio(\n  trackId: TrackId,\n  type: Track['type'],\n  onForcePlay?: NoneToVoidFunction,\n  onTrackChange?: NoneToVoidFunction,\n): Track {\n  const audio = new Audio();\n\n  function handleEvent(eventName: string) {\n    return (e: Event) => {\n      if (!tracks.has(trackId)) {\n        return;\n      }\n\n      if (isSafariPatchInProgress(audio)) {\n        return;\n      }\n\n      tracks.get(trackId)!.handlers.forEach((handler) => {\n        handler(eventName, e);\n      });\n    };\n  }\n\n  audio.addEventListener('timeupdate', handleEvent('onTimeUpdate'));\n  audio.addEventListener('play', handleEvent('onPlay'));\n  audio.addEventListener('pause', handleEvent('onPause'));\n  audio.addEventListener('loadstart', handleEvent('onLoadStart'));\n  audio.addEventListener('loadeddata', handleEvent('onLoadedData'));\n  audio.addEventListener('playing', handleEvent('onPlaying'));\n  audio.addEventListener('ended', () => {\n    if (!tracks.has(trackId)) {\n      return;\n    }\n\n    if (isSafariPatchInProgress(audio)) {\n      return;\n    }\n\n    playNext(trackId);\n  });\n\n  return {\n    audio,\n    type,\n    proxy: new Proxy(audio, {\n      get: (target, key: keyof HTMLAudioElement) => target[key],\n    }),\n    handlers: [],\n    onForcePlay,\n    onTrackChange,\n  };\n}\n\nfunction playNext(trackId: TrackId, isReverseOrder?: boolean) {\n  const currentTrack = currentTrackId && tracks.get(currentTrackId);\n  if (currentTrack) {\n    currentTrack.audio.pause();\n    currentTrack.audio.currentTime = 0;\n    if (currentTrack.onTrackChange) currentTrack.onTrackChange();\n  }\n\n  const origin = selectTabState(getGlobal()).audioPlayer.origin || AudioOrigin.Inline;\n\n  const nextTrackId = findNextInQueue(trackId, origin, isReverseOrder);\n  if (!nextTrackId) {\n    return;\n  }\n\n  if (!tracks.has(nextTrackId)) {\n    // A bit hacky way to continue playlist when switching chat\n    getActions().openAudioPlayer(parseMessageKey(splitTrackId(nextTrackId).messageKey));\n\n    return;\n  }\n\n  const nextTrack = tracks.get(nextTrackId)!;\n\n  if (nextTrack.onForcePlay) {\n    nextTrack.onForcePlay();\n  }\n\n  currentTrackId = nextTrackId;\n\n  if (nextTrack.audio.src) {\n    safePlay(nextTrack.audio);\n  }\n}\n\nexport function stopCurrentAudio() {\n  const currentTrack = currentTrackId && tracks.get(currentTrackId);\n  if (currentTrack) {\n    currentTrack.audio.pause();\n  }\n}\n\nexport function register(\n  trackId: TrackId,\n  trackType: Track['type'],\n  handler: Handler,\n  onForcePlay?: NoneToVoidFunction,\n  onTrackChange?: NoneToVoidFunction,\n) {\n  if (!tracks.has(trackId)) {\n    const track = createAudio(trackId, trackType, onForcePlay, onTrackChange);\n    tracks.set(trackId, track);\n    addTrackToQueue(track, trackId);\n  }\n  const { audio, proxy, handlers } = tracks.get(trackId)!;\n\n  handlers.push(handler);\n\n  return {\n    play(src: string) {\n      if (!audio.paused) return;\n      const currentTrack = currentTrackId && tracks.get(currentTrackId);\n      if (currentTrack && currentTrackId !== trackId) {\n        currentTrack.audio.pause();\n        currentTrack.audio.currentTime = 0;\n        if (isSafariPatchInProgress(currentTrack.audio)) {\n          currentTrack.audio.dataset.preventPlayAfterPatch = 'true';\n        }\n        if (currentTrack.onTrackChange) currentTrack.onTrackChange();\n      }\n\n      currentTrackId = trackId;\n\n      if (!audio.src) {\n        audio.src = src;\n        audio.preload = 'auto';\n\n        if (src.includes('/progressive/') && IS_SAFARI) {\n          delete audio.dataset.preventPlayAfterPatch;\n          patchSafariProgressiveAudio(audio);\n        }\n      }\n\n      safePlay(audio);\n      cleanUpQueue(trackType, trackId);\n    },\n\n    pause() {\n      if (currentTrackId === trackId) {\n        audio.pause();\n      }\n    },\n\n    stop() {\n      if (currentTrackId === trackId) {\n        // Hack, reset `src` to remove default media session notification\n        const prevSrc = audio.src;\n        audio.pause();\n        // `onPause` not called otherwise, but required to sync UI\n        requestNextMutation(() => {\n          audio.src = '';\n          audio.src = prevSrc;\n        });\n      }\n    },\n\n    setCurrentTime(time: number) {\n      if (currentTrackId === trackId) {\n        if (audio.fastSeek) {\n          audio.fastSeek(time);\n        } else {\n          audio.currentTime = time;\n        }\n      }\n    },\n\n    setVolume(volume: number) {\n      if (currentTrackId === trackId) {\n        audio.volume = volume;\n        audio.muted = false;\n      }\n    },\n\n    setPlaybackRate(rate: number) {\n      if (currentTrackId === trackId) {\n        audio.playbackRate = rate;\n      }\n    },\n\n    toggleMuted(muted?: boolean) {\n      if (muted === undefined) {\n        audio.muted = !audio.muted;\n      } else {\n        audio.muted = muted;\n      }\n    },\n\n    proxy,\n\n    requestNextTrack() {\n      playNext(trackId);\n    },\n\n    isLast() {\n      return !findNextInQueue(trackId, selectTabState(getGlobal()).audioPlayer.origin);\n    },\n\n    isFirst() {\n      return !findNextInQueue(trackId, selectTabState(getGlobal()).audioPlayer.origin, true);\n    },\n\n    requestPreviousTrack() {\n      playNext(trackId, true);\n    },\n\n    destroy(shouldRemoveFromQueue = false) {\n      const track = tracks.get(trackId);\n      if (!track) {\n        return;\n      }\n\n      track.handlers = track.handlers.filter((h) => h !== handler);\n\n      if (!track.handlers.length) {\n        track.audio.pause();\n        tracks.delete(trackId);\n\n        if (shouldRemoveFromQueue) {\n          removeFromQueue(track, trackId);\n        }\n\n        if (trackId === currentTrackId) {\n          currentTrackId = undefined;\n        }\n      }\n    },\n  };\n}\n\nfunction getTrackQueue(track: Track) {\n  switch (track.type) {\n    case 'audio': return musicQueue;\n    case 'voice': return voiceQueue;\n    default: return undefined;\n  }\n}\n\nfunction addTrackToQueue(track: Track, trackId: TrackId) {\n  if (track.type === 'audio' && !musicQueue.includes(trackId)) {\n    musicQueue.push(trackId);\n    musicQueue.sort(trackIdComparator);\n  }\n\n  if (track.type === 'voice' && !voiceQueue.includes(trackId)) {\n    voiceQueue.push(trackId);\n    voiceQueue.sort(trackIdComparator);\n  }\n}\n\nfunction removeFromQueue(track: Track, trackId: TrackId) {\n  const trackIdFilter = (el: TrackId) => el !== trackId;\n  if (track.type === 'audio') {\n    musicQueue = musicQueue.filter(trackIdFilter);\n  }\n\n  if (track.type === 'voice') {\n    voiceQueue = voiceQueue.filter(trackIdFilter);\n  }\n}\n\nfunction cleanUpQueue(type: Track['type'], trackId: TrackId) {\n  if (selectTabState(getGlobal()).globalSearch.currentContent === GlobalSearchContent.Music) return;\n  const { chatId } = parseMessageKey(splitTrackId(trackId).messageKey);\n  const openedChatId = selectCurrentMessageList(getGlobal())?.chatId;\n  const queueFilter = (id: string) => (\n    id.startsWith(`msg${chatId}`) || (openedChatId && id.startsWith(`msg${openedChatId}`))\n  );\n\n  if (type === 'audio') {\n    musicQueue = musicQueue.filter(queueFilter);\n  }\n\n  if (type === 'voice') {\n    voiceQueue = voiceQueue.filter(queueFilter);\n  }\n}\n\nfunction findNextInQueue(currentId: TrackId, origin = AudioOrigin.Inline, isReverseOrder?: boolean) {\n  const track = tracks.get(currentId)!;\n  const queue = getTrackQueue(track);\n  if (!queue) return undefined;\n\n  if (origin === AudioOrigin.Search) {\n    const index = queue.indexOf(currentId);\n    if (index < 0) return undefined;\n    const direction = isReverseOrder ? -1 : 1;\n    return queue[index + direction];\n  }\n\n  const { chatId } = parseMessageKey(splitTrackId(currentId).messageKey);\n  const chatAudio = queue.filter((id) => id.startsWith(`msg${chatId}`));\n  const index = chatAudio.indexOf(currentId);\n  if (index < 0) return undefined;\n  let direction = origin === AudioOrigin.Inline ? -1 : 1;\n  if (isReverseOrder) direction *= -1;\n  return chatAudio[index + direction];\n}\n\nexport function makeTrackId(message: ApiMessage): TrackId | undefined {\n  const key = getMessageServerKey(message);\n  if (!key) {\n    return undefined;\n  }\n  return `${key}-${message.date}`;\n}\n\nfunction splitTrackId(trackId: TrackId) {\n  const messageKey = trackId.match(/^msg(-?\\d+)-(\\d+)/)![0] as MessageKey;\n  const date = Number(trackId.split('-').pop());\n  return {\n    messageKey,\n    date,\n  };\n}\n\n// Descending order by date\nfunction trackIdComparator(one?: TrackId, two?: TrackId) {\n  if (!one || !two) return 0;\n  const { date: dateOne, messageKey: keyOne } = splitTrackId(one);\n  const { date: dateTwo, messageKey: keyTwo } = splitTrackId(two);\n  const diff = dateTwo - dateOne;\n  return diff === 0 ? keyTwo.localeCompare(keyOne) : diff;\n}\n","import type { GlobalState } from '../types';\r\nimport type { Workspace } from '../../types';\r\n\r\nimport { getAdjustedUnreadCounters } from '../../util/folderManager';\r\nimport { SAVED_FOLDER_ID } from '../../config';\r\n\r\nexport const EVERYTHING_WORKSPACE_ID = '0';\r\n\r\nexport const EVERYTHING_WORKSPACE: Workspace = {\r\n  id: EVERYTHING_WORKSPACE_ID,\r\n  name: 'Personal',\r\n  foldersIds: [],\r\n};\r\n\r\nexport function selectIsWorkspaceCreatorOpen<T extends GlobalState>(global: T) {\r\n  return global.workspaces.isCreatorOpen;\r\n}\r\n\r\nexport function selectEditingWorkspaceId<T extends GlobalState>(global: T) {\r\n  return global.workspaces.editingWorkspaceId;\r\n}\r\n\r\nexport function selectWorkspaces<T extends GlobalState>(global: T): Workspace[] {\r\n  const { byId, orderedIds } = global.workspaces;\r\n  const userWorkspaces = orderedIds.map((id) => byId[id]).filter(Boolean);\r\n\r\n  return [EVERYTHING_WORKSPACE, ...userWorkspaces];\r\n}\r\n\r\nexport function selectWorkspaceById<T extends GlobalState>(global: T, workspaceId: string): Workspace | undefined {\r\n  return global.workspaces.byId[workspaceId] || EVERYTHING_WORKSPACE;\r\n}\r\n\r\nexport function selectCurrentWorkspaceId<T extends GlobalState>(global: T) {\r\n  return global.workspaces.currentWorkspaceId;\r\n}\r\n\r\nexport function selectCurrentWorkspace<T extends GlobalState>(global: T): Workspace {\r\n  const currentId = global.workspaces.currentWorkspaceId;\r\n  return global.workspaces.byId[currentId] || EVERYTHING_WORKSPACE;\r\n}\r\n\r\nexport function selectExcludeOtherWorkspaces<T extends GlobalState>(global: T) {\r\n  return global.workspaces.excludeOtherWorkspaces;\r\n}\r\n\r\nexport function selectWorkspaceUnreadUnmutedChatsCount(\r\n  workspace: Workspace,\r\n  allWorkspaces: Workspace[],\r\n  excludeOtherWorkspaces: boolean,\r\n): number {\r\n  const adjustedUnreadCounters = getAdjustedUnreadCounters(excludeOtherWorkspaces, allWorkspaces);\r\n\r\n  if (workspace.id === EVERYTHING_WORKSPACE_ID) {\r\n    const otherWorkspacesFoldersIds = allWorkspaces.flatMap(w => w.foldersIds);\r\n    otherWorkspacesFoldersIds.push(SAVED_FOLDER_ID);\r\n\r\n    return Object.entries(adjustedUnreadCounters)\r\n      .filter(([folderId]) => !otherWorkspacesFoldersIds.includes(Number(folderId)))\r\n      .reduce((acc, [, counters]) => acc + (counters?.unmutedChatsCount || 0), 0);\r\n  }\r\n\r\n  let count = 0;\r\n\r\n  for (const folderId of workspace.foldersIds) {\r\n    const folderCounters = adjustedUnreadCounters[folderId];\r\n    if (folderCounters) {\r\n      count += folderCounters.unmutedChatsCount;\r\n    }\r\n  }\r\n\r\n  return count;\r\n}","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../global/helpers';\nimport { selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Avatar from './Avatar';\n\nimport './DeleteChatModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chat: ApiChat;\n  isSavedDialog?: boolean;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isChatWithSelf?: boolean;\n  isBot?: boolean;\n  isPrivateChat: boolean;\n  isBasicGroup: boolean;\n  isSuperGroup: boolean;\n  currentUserId: string | undefined;\n  canDeleteForAll?: boolean;\n  contactName?: string;\n};\n\nconst DeleteChatModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  isSavedDialog,\n  isChannel,\n  isPrivateChat,\n  isChatWithSelf,\n  isBot,\n  isBasicGroup,\n  isSuperGroup,\n  currentUserId,\n  canDeleteForAll,\n  contactName,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    leaveChannel,\n    deleteHistory,\n    deleteSavedHistory,\n    deleteChannel,\n    deleteChatUser,\n    blockUser,\n    deleteChat,\n  } = getActions();\n\n  const lang = useOldLang();\n  const chatTitle = getChatTitle(lang, chat);\n\n  const handleDeleteForAll = useLastCallback(() => {\n    deleteHistory({ chatId: chat.id, shouldDeleteForAll: true });\n\n    onClose();\n  });\n\n  const handleDeleteAndStop = useLastCallback(() => {\n    deleteHistory({ chatId: chat.id, shouldDeleteForAll: true });\n    blockUser({ userId: chat.id });\n\n    onClose();\n  });\n\n  const handleDeleteChat = useLastCallback(() => {\n    if (isSavedDialog) {\n      deleteSavedHistory({ chatId: chat.id });\n    } else if (isPrivateChat) {\n      deleteHistory({ chatId: chat.id, shouldDeleteForAll: false });\n    } else if (isBasicGroup) {\n      if (chat.isCreator) {\n        deleteHistory({ chatId: chat.id, shouldDeleteForAll: true });\n        deleteChat({ chatId: chat.id });\n      } else {\n        deleteHistory({ chatId: chat.id, shouldDeleteForAll: false });\n        deleteChatUser({ chatId: chat.id, userId: currentUserId! });\n      }\n    } else if ((isChannel || isSuperGroup) && !chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else if ((isChannel || isSuperGroup) && chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    }\n    onClose();\n  });\n\n  const handleLeaveChat = useLastCallback(() => {\n    if (isChannel || isSuperGroup) {\n      leaveChannel({ chatId: chat.id });\n      onClose();\n    } else if (isBasicGroup && chat.isCreator) {\n      deleteHistory({ chatId: chat.id, shouldDeleteForAll: false });\n      deleteChatUser({ chatId: chat.id, userId: currentUserId! });\n    } else {\n      handleDeleteChat();\n    }\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar\n          size=\"tiny\"\n          peer={chat}\n          isSavedMessages={isChatWithSelf}\n        />\n        <h3 className=\"modal-title\">{lang(renderTitle())}</h3>\n      </div>\n    );\n  }\n\n  function renderTitle() {\n    if (isSavedDialog) {\n      return isChatWithSelf ? 'ClearHistoryMyNotesTitle' : 'ClearHistoryTitleSingle2';\n    }\n\n    if (isChannel && !chat.isCreator) {\n      return 'LeaveChannel';\n    }\n\n    if (isChannel && chat.isCreator) {\n      return 'ChannelDelete';\n    }\n\n    if (isBasicGroup || isSuperGroup) {\n      return 'Group.LeaveGroup';\n    }\n\n    return 'DeleteChatUser';\n  }\n\n  function renderContent() {\n    if (isSavedDialog) {\n      return (\n        <p>\n          {renderText(\n            isChatWithSelf ? lang('ClearHistoryMyNotesMessage') : lang('ClearHistoryMessageSingle', chatTitle),\n            ['simple_markdown', 'emoji'],\n          )}\n        </p>\n      );\n    }\n    if (isChannel && chat.isCreator) {\n      return (\n        <p>\n          {renderText(lang('ChatList.DeleteAndLeaveGroupConfirmation', chatTitle), ['simple_markdown', 'emoji'])}\n        </p>\n      );\n    }\n\n    if ((isChannel && !chat.isCreator) || isBasicGroup || isSuperGroup) {\n      return <p>{renderText(lang('ChannelLeaveAlertWithName', chatTitle), ['simple_markdown', 'emoji'])}</p>;\n    }\n\n    return <p>{renderText(lang('ChatList.DeleteChatConfirmation', contactName), ['simple_markdown', 'emoji'])}</p>;\n  }\n\n  function renderActionText() {\n    if (isSavedDialog) {\n      return 'Delete';\n    }\n\n    if (isChannel && !chat.isCreator) {\n      return 'LeaveChannel';\n    }\n    if (isChannel && chat.isCreator) {\n      return 'Chat.Input.Delete';\n    }\n\n    if (isBasicGroup || isSuperGroup) {\n      return 'Group.LeaveGroup';\n    }\n\n    return canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete';\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"DeleteChatModal\"\n      header={renderHeader()}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {renderContent()}\n      <div className=\"dialog-buttons-column\">\n        {isBot && !isSavedDialog && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteAndStop}>\n            {lang('DeleteAndStop')}\n          </Button>\n        )}\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteForAll}>\n            {contactName ? renderText(lang('ChatList.DeleteForEveryone', contactName)) : lang('DeleteForAll')}\n          </Button>\n        )}\n        {!isPrivateChat && chat.isCreator && !isSavedDialog && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChat}>\n            {lang('DeleteForAll')}\n          </Button>\n        )}\n        <Button\n          color=\"danger\"\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={(isPrivateChat || isSavedDialog) ? handleDeleteChat : handleLeaveChat}\n        >\n          {lang(renderActionText())}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat, isSavedDialog }): Complete<StateProps> => {\n    const isPrivateChat = isUserId(chat.id);\n    const isChatWithSelf = selectIsChatWithSelf(global, chat.id);\n    const user = isPrivateChat && selectUser(global, getPrivateChatUserId(chat)!);\n    const isBot = user && isUserBot(user) && !chat.isSupport;\n    const canDeleteForAll = (isPrivateChat && !isChatWithSelf && !isBot && !isSavedDialog);\n    const contactName = isPrivateChat\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isBot,\n      isChannel: isChatChannel(chat),\n      isBasicGroup: isChatBasicGroup(chat),\n      isSuperGroup: isChatSuperGroup(chat),\n      currentUserId: global.currentUserId,\n      canDeleteForAll,\n      contactName,\n    };\n  },\n)(DeleteChatModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mklnEg0s\",\"compact\":\"VGmPJoga\",\"image\":\"tT8KQwg0\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiDocument } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useMedia from '../../../hooks/useMedia';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ThemeKey;\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const { isTouchScreen } = useAppLayout();\n  const mediaData = useMedia(getDocumentMediaHash(icon, 'full'), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, 'icon', !isTouchScreen && styles.compact)}>\n      <img\n        src={iconSvg}\n        alt=\"\"\n        className={buildClassName(styles.image, !isTouchScreen && styles.compact)}\n        draggable={false}\n      />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiAttachBot } from '../../../api/types';\nimport type { IAnchorPosition, ThemeKey, ThreadId } from '../../../types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ThemeKey;\n  isInSideMenu?: true;\n  chatId?: string;\n  threadId?: ThreadId;\n  canShowNew?: boolean;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  isInSideMenu,\n  canShowNew,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useOldLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useLastCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isInSideMenu) {\n      callAttachBot({\n        bot,\n        isFromSideMenu: true,\n      });\n    } else {\n      callAttachBot({\n        bot,\n        chatId: chatId!,\n        threadId,\n      });\n    }\n  });\n\n  const handleCloseMenu = useLastCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  });\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    setMenuPosition(undefined);\n  });\n\n  const handleRemoveBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  });\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {canShowNew && bot.isDisclaimerNeeded && <span className=\"menu-item-badge\">{lang('New')}</span>}\n      {menuPosition && (\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n          className=\"bot-attach-context-menu\"\n          autoClose\n          withPortal\n          onClose={handleCloseMenu}\n          onCloseAnimationEnd={handleCloseAnimationEnd}\n        >\n          <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n        </Menu>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import useForceUpdate from '../useForceUpdate';\nimport useInterval from './useInterval';\n\nexport default function useIntervalForceUpdate(interval?: number) {\n  const forceUpdate = useForceUpdate();\n\n  useInterval(forceUpdate, interval, true);\n}\n","import type { ApiAttachment } from '../../../../api/types';\n\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  createPosterForVideo,\n  preloadImage,\n  preloadVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_STANDARD_QUALITY_IMG_SIZE = 1280; // px\nconst MAX_HIGH_QUALITY_IMG_SIZE = 2560;\nconst MAX_THUMB_IMG_SIZE = 40; // px\nconst MAX_ASPECT_RATIO = 20;\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let shouldSendAsFile;\n  const shouldSendInHighQuality = options?.shouldSendInHighQuality;\n\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    const maxQuickImgSize = shouldSendInHighQuality ? MAX_HIGH_QUALITY_IMG_SIZE : MAX_STANDARD_QUALITY_IMG_SIZE;\n    const shouldShrink = Math.max(width, height) > maxQuickImgSize;\n    const isGif = mimeType === GIF_MIME_TYPE;\n\n    if (!shouldSendAsFile) {\n      if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? maxQuickImgSize / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        return buildAttachment(filename, blob, {\n          ...options,\n          compressedBlobUrl: resizedUrl,\n        });\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    }\n\n    const shouldShrinkPreview = Math.max(width, height) > MAX_THUMB_IMG_SIZE;\n    if (shouldShrinkPreview) {\n      previewBlobUrl = await scaleImage(\n        blobUrl, MAX_THUMB_IMG_SIZE / Math.max(width, height), 'image/jpeg',\n      );\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    try {\n      const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n      shouldSendAsFile = !validateAspectRatio(width, height);\n      if (!shouldSendAsFile) {\n        quick = { width, height, duration };\n      }\n    } catch (err) {\n      shouldSendAsFile = true;\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blob,\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    shouldSendAsFile: shouldSendAsFile || undefined,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !(attach.voice || attach.audio) || undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n\nfunction validateAspectRatio(width: number, height: number) {\n  const maxAspectRatio = Math.max(width, height) / Math.min(width, height);\n  return maxAspectRatio <= MAX_ASPECT_RATIO;\n}\n","import { fetchBlob } from './files';\n\ntype AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { parseBlob, selectCover } = await import('music-metadata');\n  const blob = await fetchBlob(url);\n  const metadata = await parseBlob(blob);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverBlob = cover ? new Blob([cover.data], { type: cover.format }) : undefined;\n  const coverUrl = coverBlob ? URL.createObjectURL(coverBlob) : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import type { ApiBoostsStatus } from '../../../api/types';\n\nexport function getBoostProgressInfo(boostInfo: ApiBoostsStatus, freezeOnLevelUp?: boolean) {\n  const {\n    level, boosts, currentLevelBoosts, nextLevelBoosts, hasMyBoost, prepaidGiveaways,\n  } = boostInfo;\n\n  const isJustUpgraded = freezeOnLevelUp && boosts === currentLevelBoosts && hasMyBoost;\n\n  const currentLevel = isJustUpgraded ? level - 1 : level;\n  const hasNextLevel = Boolean(nextLevelBoosts);\n\n  const levelProgress = (!nextLevelBoosts || isJustUpgraded) ? 1\n    : (boosts - currentLevelBoosts) / (nextLevelBoosts - currentLevelBoosts);\n  const remainingBoosts = nextLevelBoosts ? nextLevelBoosts - boosts : 0;\n\n  const isMaxLevel = nextLevelBoosts === undefined;\n\n  return {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n    isMaxLevel,\n    prepaidGiveaways,\n  };\n}\n","import type { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\n\nimport {\n  getChatTitle,\n  isChatGroup,\n} from '../../../../global/helpers';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { isUserId } from '../../../../util/entities/ids';\n\nexport function getSenderName(\n  lang: OldLangFn, message: ApiMessage, chatsById: Record<string, ApiChat>, usersById: Record<string, ApiUser>,\n) {\n  const { senderId } = message;\n  if (!senderId) {\n    return undefined;\n  }\n\n  const sender = isUserId(senderId) ? usersById[senderId] : chatsById[senderId];\n\n  let senderName = getPeerTitle(lang, sender);\n\n  const chat = chatsById[message.chatId];\n  if (chat) {\n    if ('isSelf' in sender && sender.isSelf) {\n      senderName = `${lang('FromYou')} → ${getChatTitle(lang, chat)}`;\n    } else if (isChatGroup(chat)) {\n      senderName += ` → ${getChatTitle(lang, chat)}`;\n    }\n  }\n\n  return senderName;\n}\n","import { getGlobal, setGlobal } from '../../../global';\n\nimport type { ApiDocument, ApiMessage } from '../../../api/types';\n\nimport {\n  getDocumentMediaHash, getMediaFormat, getMessageDocumentPhoto, getMessageDocumentVideo,\n} from '../../../global/helpers';\nimport { updateChatMessage } from '../../../global/reducers';\nimport { selectChatMessage } from '../../../global/selectors';\nimport { IS_PROGRESSIVE_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { preloadImage, preloadVideo } from '../../../util/files';\nimport { fetch } from '../../../util/mediaLoader';\nimport LimitedMap from '../../../util/primitives/LimitedMap';\n\nconst preloadedHashes = new LimitedMap<string, void>(100);\n\nexport async function preloadDocumentMedia(mediaContainer: ApiMessage) {\n  const video = getMessageDocumentVideo(mediaContainer);\n  const photo = getMessageDocumentPhoto(mediaContainer);\n\n  const media = video || photo;\n\n  // Skip large photos that were not processed by the server\n  const shouldSkipPhoto = photo && photo.mediaSize && !photo.mediaSize.fromDocumentAttribute;\n  if (!media || media.previewBlobUrl || shouldSkipPhoto) {\n    return;\n  }\n\n  const hash = getDocumentMediaHash(media, 'full');\n  if (!hash || preloadedHashes.has(hash)) {\n    return;\n  }\n\n  preloadedHashes.set(hash, undefined);\n\n  const url = await fetch(hash, getMediaFormat(media, 'full'));\n  if (!url) {\n    return;\n  }\n\n  let dimensions: ApiDocument['mediaSize'] | undefined;\n\n  if (video && IS_PROGRESSIVE_SUPPORTED) {\n    const videoEl = await preloadVideo(url);\n    dimensions = { width: videoEl.videoWidth, height: videoEl.videoHeight, fromPreload: true };\n  }\n\n  if (photo) {\n    const img = await preloadImage(url);\n    dimensions = { width: img.naturalWidth, height: img.naturalHeight, fromPreload: true };\n  }\n\n  if (!dimensions || dimensions.width <= 0 || dimensions.height <= 0) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, mediaContainer.chatId, mediaContainer.id);\n  if (!message || !message.content.document) return;\n  global = updateChatMessage(global, mediaContainer.chatId, mediaContainer.id, {\n    content: {\n      ...message.content,\n      document: {\n        ...message.content.document,\n        mediaSize: dimensions,\n      },\n    },\n  });\n  setGlobal(global);\n}\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDocument, ApiMessage } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getDocumentMediaHash,\n  getMediaFormat,\n  getMediaThumbUri,\n  getMediaTransferState,\n  isDocumentVideo,\n} from '../../global/helpers';\nimport { isIpRevealingMedia } from '../../util/media/ipRevealingMedia';\nimport { getDocumentExtension, getDocumentHasPreview } from './helpers/documentInfo';\nimport { preloadDocumentMedia } from './helpers/preloadDocumentMedia';\n\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport File from './File';\n\ntype OwnProps = {\n  document: ApiDocument;\n  observeIntersection?: ObserveFn;\n  smaller?: boolean;\n  isSelected?: boolean;\n  isSelectable?: boolean;\n  canAutoLoad?: boolean;\n  uploadProgress?: number;\n  datetime?: number;\n  className?: string;\n  sender?: string;\n  autoLoadFileMaxSizeMb?: number;\n  isDownloading?: boolean;\n  shouldWarnAboutFiles?: boolean;\n  onCancelUpload?: () => void;\n  onMediaClick?: () => void;\n} & ({\n  message: ApiMessage;\n  onDateClick: (arg: ApiMessage) => void;\n} | {\n  message?: ApiMessage;\n  onDateClick?: never;\n});\n\nconst BYTES_PER_MB = 1024 * 1024;\n\nconst Document = ({\n  document,\n  observeIntersection,\n  smaller,\n  canAutoLoad,\n  autoLoadFileMaxSizeMb,\n  uploadProgress,\n  datetime,\n  className,\n  sender,\n  isSelected,\n  isSelectable,\n  shouldWarnAboutFiles,\n  isDownloading,\n  message,\n  onCancelUpload,\n  onMediaClick,\n  onDateClick,\n}: OwnProps) => {\n  const { cancelMediaDownload, downloadMedia, setSharedSettingOption } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n  const [isFileIpDialogOpen, openFileIpDialog, closeFileIpDialog] = useFlag();\n  const [shouldNotWarnAboutFiles, setShouldNotWarnAboutFiles] = useState(false);\n\n  const { fileName, size, mimeType } = document;\n  const extension = getDocumentExtension(document) || '';\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const [wasIntersected, markIntersected] = useFlag();\n  useEffect(() => {\n    if (isIntersecting) {\n      markIntersected();\n    }\n  }, [isIntersecting, markIntersected]);\n\n  // Auto-loading does not use global download manager because requires additional click to save files locally\n  const [isLoadAllowed, setIsLoadAllowed] = useState(\n    canAutoLoad && (!autoLoadFileMaxSizeMb || size <= autoLoadFileMaxSizeMb * BYTES_PER_MB),\n  );\n\n  const shouldDownload = Boolean(isDownloading || (isLoadAllowed && wasIntersected));\n\n  const documentHash = getDocumentMediaHash(document, 'download');\n  const { loadProgress: downloadProgress, mediaData } = useMediaWithLoadProgress(\n    documentHash, !shouldDownload, getMediaFormat(document, 'download'), undefined, true,\n  );\n  const isLoaded = Boolean(mediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    uploadProgress || downloadProgress,\n    shouldDownload && !isLoaded,\n    uploadProgress !== undefined,\n  );\n\n  const hasPreview = getDocumentHasPreview(document);\n  const thumbDataUri = hasPreview ? getMediaThumbUri(document) : undefined;\n  const localBlobUrl = hasPreview ? document.previewBlobUrl : undefined;\n  const previewData = useMedia(getDocumentMediaHash(document, 'pictogram'), !isIntersecting);\n\n  const shouldForceDownload = document.innerMediaType === 'photo' && document.mediaSize\n    && !document.mediaSize.fromDocumentAttribute && !document.mediaSize.fromPreload;\n\n  const withMediaViewer = onMediaClick && document.innerMediaType && !shouldForceDownload;\n\n  useEffect(() => {\n    const fileEl = ref.current;\n    if (!withMediaViewer || !fileEl || !message) return;\n\n    const onHover = () => {\n      preloadDocumentMedia(message);\n    };\n\n    fileEl.addEventListener('mouseenter', onHover);\n\n    return () => {\n      fileEl.removeEventListener('mouseenter', onHover);\n    };\n  }, [withMediaViewer, message]);\n\n  const handleDownload = useLastCallback(() => {\n    downloadMedia({ media: document, originMessage: message });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload();\n      }\n      return;\n    }\n\n    if (isDownloading) {\n      cancelMediaDownload({ media: document });\n      return;\n    }\n\n    if (isTransferring) {\n      setIsLoadAllowed(false);\n      return;\n    }\n\n    if (withMediaViewer) {\n      onMediaClick();\n      return;\n    }\n\n    if (isIpRevealingMedia({ mimeType, extension }) && shouldWarnAboutFiles) {\n      openFileIpDialog();\n      return;\n    }\n\n    handleDownload();\n  });\n\n  const handleFileIpConfirm = useLastCallback(() => {\n    setSharedSettingOption({ shouldWarnAboutFiles: !shouldNotWarnAboutFiles });\n    closeFileIpDialog();\n    handleDownload();\n  });\n\n  const handleDateClick = useLastCallback(() => {\n    onDateClick?.(message);\n  });\n\n  return (\n    <>\n      <File\n        ref={ref}\n        name={fileName}\n        extension={extension}\n        size={size}\n        timestamp={datetime}\n        thumbnailDataUri={thumbDataUri}\n        previewData={localBlobUrl || previewData}\n        smaller={smaller}\n        isTransferring={isTransferring}\n        isUploading={isUploading}\n        transferProgress={transferProgress}\n        className={className}\n        sender={sender}\n        isSelectable={isSelectable}\n        isSelected={isSelected}\n        actionIcon={withMediaViewer ? (isDocumentVideo(document) ? 'play' : 'eye') : 'download'}\n        onClick={handleClick}\n        onDateClick={onDateClick ? handleDateClick : undefined}\n      />\n      <ConfirmDialog\n        isOpen={isFileIpDialogOpen}\n        onClose={closeFileIpDialog}\n        confirmHandler={handleFileIpConfirm}\n      >\n        {lang('lng_launch_svg_warning')}\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldNotWarnAboutFiles}\n          label={lang('lng_launch_exe_dont_ask')}\n          onCheck={setShouldNotWarnAboutFiles}\n        />\n      </ConfirmDialog>\n    </>\n  );\n};\n\nexport default memo(Document);\n","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"RXAMu4VD\",\"mediaArea\":\"pruw1nLm\",\"preview\":\"_5HkplWee\",\"shiny\":\"xFjJpeOA\",\"wave\":\"Ux0tlNbE\",\"light\":\"_7esBA3m\",\"dark\":\"eic2vQ8c\",\"reactionBackground\":\"c3ajA3hg\",\"flipped\":\"furSXGdL\",\"reaction\":\"Et3MvYmN\",\"withCount\":\"mFTLUHm2\",\"reactionCount\":\"Tr8mYyDk\",\"weather\":\"KBjMtRUS\",\"weatherInner\":\"IFChB3tD\",\"temperature\":\"_ke1UBIl\"};","import {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMediaAreaSuggestedReaction, ApiStory } from '../../../api/types';\n\nimport { getStoryKey, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { isUserId } from '../../../util/entities/ids';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport ReactionAnimatedEmoji from '../../common/reactions/ReactionAnimatedEmoji';\n\nimport styles from './MediaArea.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  mediaArea: ApiMediaAreaSuggestedReaction;\n  index: number;\n  isPreview?: boolean;\n  className?: string;\n  style?: string;\n};\n\nconst REACTION_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 4;\n\nconst MediaAreaSuggestedReaction = ({\n  story,\n  mediaArea,\n  index,\n  className,\n  style,\n  isPreview,\n}: OwnProps) => {\n  const { sendStoryReaction } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const [customEmojiSize, setCustomEmojiSize] = useState(1.5 * REM);\n\n  const { peerId, id, views } = story;\n  const { reactions } = views || {};\n  const { reaction, isDark, isFlipped } = mediaArea;\n\n  const isChannel = !isUserId(peerId);\n  const containerId = `${getStoryKey(peerId, id)}-${index}-${isPreview ? 'preview' : 'viewer'}`;\n\n  const reactionCount = useMemo(() => (\n    reactions?.find((r) => isSameReaction(r.reaction, reaction))?.count\n  ), [reaction, reactions]);\n  const shouldDisplayCount = !isPreview && Boolean(reactionCount) && isChannel;\n\n  const updateCustomEmojiSize = useLastCallback(() => {\n    if (!ref.current) return;\n    const height = ref.current.clientHeight;\n    setCustomEmojiSize(Math.round(height * REACTION_SIZE_MULTIPLIER));\n  });\n\n  useEffectWithPrevDeps(([prevReactionCount]) => {\n    if (Boolean(reactionCount) !== Boolean(prevReactionCount)) {\n      updateCustomEmojiSize();\n    }\n  }, [reactionCount]);\n\n  useResizeObserver(ref, updateCustomEmojiSize);\n\n  const handleClick = useLastCallback(() => {\n    sendStoryReaction({\n      peerId,\n      storyId: id,\n      containerId,\n      reaction,\n    });\n  });\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(isDark ? styles.dark : styles.light, className)}\n      style={buildStyle(style, `--custom-emoji-size: ${customEmojiSize}px`)}\n      onClick={handleClick}\n    >\n      <div\n        className={buildClassName(styles.reactionBackground, isFlipped && styles.flipped)}\n      />\n      {Boolean(customEmojiSize) && (\n        <ReactionAnimatedEmoji\n          className={buildClassName(styles.reaction, shouldDisplayCount && styles.withCount)}\n          reaction={reaction}\n          containerId={containerId}\n          size={customEmojiSize}\n          effectSize={customEmojiSize * EFFECT_SIZE_MULTIPLIER}\n          shouldPause={isPreview}\n          shouldLoop={!isPreview}\n        />\n      )}\n      {shouldDisplayCount && (\n        <span className={styles.reactionCount}>{reactionCount}</span>\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaAreaSuggestedReaction);\n","export const formatTemperature = (temperatureC: number) => {\n  const isFahrenheit = Boolean(navigator.language === 'en-US');\n  return isFahrenheit ? `${Math.round((temperatureC * 9) / 5 + 32)}°F` : `${Math.round(temperatureC)}°C`;\n};\n","import {\n  type FC, memo,\n  useLayoutEffect,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { setExtraStyles } from '../../../lib/teact/teact-dom';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiMediaAreaWeather, ApiSticker } from '../../../api/types';\n\nimport { requestForcedReflow, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectRestrictedEmoji } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { convertToRGBA, getTextColor } from '../../../util/colors';\nimport { formatTemperature } from '../../../util/formatTemperature';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './MediaArea.module.scss';\n\ntype OwnProps = {\n  mediaArea: ApiMediaAreaWeather;\n  className?: string;\n  style?: string;\n  isPreview?: boolean;\n};\n\ntype StateProps = {\n  restrictedEmoji?: ApiSticker;\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.7;\nconst TEMPERATURE_SIZE = 32;\n\nconst MediaAreaWeather: FC<OwnProps & StateProps> = ({\n  mediaArea,\n  className,\n  style,\n  restrictedEmoji,\n  isPreview,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const [customEmojiSize, setCustomEmojiSize] = useState(0);\n\n  const { temperatureC, color } = mediaArea;\n\n  const backgroundColor = convertToRGBA(color);\n  const textColor = getTextColor(color);\n\n  const updateCustomSize = useLastCallback((isImmediate?: boolean) => {\n    if (!ref.current) return undefined;\n    const el = ref.current;\n\n    const height = el.clientHeight;\n    const customEmojiHeight = Math.round(height * EMOJI_SIZE_MULTIPLIER);\n    setCustomEmojiSize(customEmojiHeight);\n    const applyFn = () => {\n      setExtraStyles(el, {\n        '--custom-emoji-size': `${customEmojiHeight}px`,\n        'font-size': `${height / TEMPERATURE_SIZE}rem`,\n      });\n    };\n\n    if (isImmediate) return applyFn;\n\n    requestMutation(applyFn);\n\n    return undefined;\n  });\n\n  useLayoutEffect(() => {\n    requestForcedReflow(() => updateCustomSize(true));\n  }, []);\n\n  useResizeObserver(ref, () => updateCustomSize());\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.weather, className)}\n      style={buildStyle(\n        style,\n        `--custom-background-color: ${backgroundColor}`,\n        `color: ${textColor}`,\n      )}\n    >\n      <div className={styles.weatherInner}>\n        {restrictedEmoji && (\n          <CustomEmoji\n            key={restrictedEmoji.id}\n            documentId={restrictedEmoji.id}\n            size={customEmojiSize}\n            noPlay={isPreview}\n            withTranslucentThumb\n            forceAlways\n          />\n        )}\n        <p className={styles.temperature}>\n          {formatTemperature(temperatureC)}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, ownProps): Complete<StateProps> => {\n  const { mediaArea } = ownProps;\n  const restrictedEmoji = selectRestrictedEmoji(global, mediaArea.emoji);\n  return { restrictedEmoji };\n})(MediaAreaWeather));\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMediaArea, ApiStory } from '../../../api/types';\n\nimport { MOBILE_SCREEN_MAX_WIDTH } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport MediaAreaSuggestedReaction from './MediaAreaSuggestedReaction';\nimport MediaAreaWeather from './MediaAreaWeather';\n\nimport styles from './MediaArea.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  isActive?: boolean;\n  isStoryPlaying?: boolean;\n  className?: string;\n};\n\nconst STORY_ASPECT_RATIO = 9 / 16;\nconst PERCENTAGE_BASE = 100;\n\nconst NO_SHINY_TYPES = new Set<ApiMediaArea['type']>(['channelPost', 'uniqueGift']);\n\nconst MediaAreaOverlay = ({\n  story, isActive, className, isStoryPlaying,\n}: OwnProps) => {\n  const {\n    openMapModal, openUniqueGiftBySlug, focusMessage, closeStoryViewer, openUrl,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const [mediaWidth, setMediaWidth] = useState(0);\n\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current) return;\n    const element = ref.current;\n    setMediaWidth(element.clientWidth);\n\n    if (windowSize.width > MOBILE_SCREEN_MAX_WIDTH) {\n      requestMutation(() => {\n        element.style.removeProperty('--media-width');\n        element.style.removeProperty('--media-height');\n      });\n      return;\n    }\n\n    const screenAspectRatio = windowSize.width / windowSize.height;\n\n    const width = screenAspectRatio < STORY_ASPECT_RATIO\n      ? element.clientHeight * STORY_ASPECT_RATIO : element.clientWidth;\n    const height = screenAspectRatio < STORY_ASPECT_RATIO\n      ? element.clientHeight : element.clientWidth / STORY_ASPECT_RATIO;\n\n    requestMutation(() => {\n      element.style.setProperty('--media-width', `${width}px`);\n      element.style.setProperty('--media-height', `${height}px`);\n    });\n  }, [isActive, windowSize]);\n\n  const handleMediaAreaClick = (mediaArea: ApiMediaArea) => {\n    switch (mediaArea.type) {\n      case 'geoPoint':\n      case 'venue': {\n        openMapModal({ geoPoint: mediaArea.geo });\n        break;\n      }\n      case 'channelPost': {\n        focusMessage({\n          chatId: mediaArea.channelId,\n          messageId: mediaArea.messageId,\n        });\n        closeStoryViewer();\n        break;\n      }\n      case 'url': {\n        openUrl({ url: mediaArea.url });\n        break;\n      }\n      case 'uniqueGift': {\n        openUniqueGiftBySlug({ slug: mediaArea.slug });\n        break;\n      }\n    }\n  };\n\n  const mediaAreas = story.mediaAreas;\n\n  return (\n    <div\n      className={buildClassName(styles.overlay, !isActive && styles.preview, className)}\n      ref={ref}\n    >\n      {mediaAreas?.map((mediaArea, i) => {\n        switch (mediaArea.type) {\n          case 'geoPoint':\n          case 'venue':\n          case 'channelPost':\n          case 'url':\n          case 'uniqueGift': {\n            const isShiny = isActive && !NO_SHINY_TYPES.has(mediaArea.type);\n            return (\n              <div\n                className={buildClassName(styles.mediaArea, isShiny && styles.shiny)}\n                style={prepareStyle(mediaArea)}\n                onClick={() => handleMediaAreaClick(mediaArea)}\n              />\n            );\n          }\n          case 'suggestedReaction':\n            return (\n              <MediaAreaSuggestedReaction\n\n                key={`${mediaArea.type}-${i}`}\n                story={story}\n                mediaArea={mediaArea}\n                index={i}\n                isPreview={!isActive}\n                className={styles.mediaArea}\n                style={prepareStyle(mediaArea)}\n              />\n            );\n          case 'weather': {\n            return (\n              <MediaAreaWeather\n\n                key={`${mediaArea.type}-${i}`}\n                mediaArea={mediaArea}\n                className={styles.mediaArea}\n                style={prepareStyle(mediaArea, mediaWidth)}\n                isPreview={!isActive || isStoryPlaying}\n              />\n            );\n          }\n          default:\n            return undefined;\n        }\n      })}\n    </div>\n  );\n};\n\nfunction prepareStyle(mediaArea: ApiMediaArea, mediaWidth?: number) {\n  const {\n    x, y, width, height, rotation, radius,\n  } = mediaArea.coordinates;\n\n  let pixelRadius = '';\n\n  if (mediaWidth && radius && mediaWidth > 0) {\n    const pixelWidth = (mediaWidth * (width / PERCENTAGE_BASE));\n    const pixelHeight = (mediaWidth * (height / PERCENTAGE_BASE));\n    pixelRadius = `${Math.min(pixelWidth, pixelHeight) * (radius / PERCENTAGE_BASE)}px`;\n  }\n\n  return buildStyle(\n    `left: ${x}%`,\n    `top: ${y}%`,\n    `width: ${width}%`,\n    `height: ${height}%`,\n    `transform: rotate(${rotation}deg) translate(-50%, -50%)`,\n    pixelRadius && `border-radius: ${pixelRadius}`,\n  );\n}\n\nexport default memo(MediaAreaOverlay);\n","import { useEffect } from '../../lib/teact/teact';\n\nimport { onBeforeUnload } from '../../util/schedulers';\nimport useLastCallback from '../useLastCallback';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  const lastCallback = useLastCallback(callback);\n\n  useEffect(() => onBeforeUnload(lastCallback), [lastCallback]);\n}\n","import type { ElementRef } from '@teact';\nimport { useEffect, useLayoutEffect } from '@teact';\nimport { addExtraClass, removeExtraClass, toggleExtraClass } from '@teact/teact-dom.ts';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom.ts';\nimport { throttle } from '../util/schedulers.ts';\n\nconst THROTTLE_DELAY = 100;\n\nconst useScrollNotch = ({\n  containerRef,\n  selector,\n}: {\n  containerRef: ElementRef<HTMLDivElement>;\n  selector: string;\n}, deps: unknown[]) => {\n  useLayoutEffect(() => {\n    const elements = containerRef.current?.querySelectorAll<HTMLElement>(selector);\n    if (!elements?.length) return undefined;\n\n    const handleScroll = throttle((event: Event) => {\n      const target = event.target as HTMLElement;\n      const isScrolled = target.scrollTop > 0;\n\n      requestMutation(() => {\n        toggleExtraClass(target, 'scrolled', isScrolled);\n      });\n    }, THROTTLE_DELAY);\n\n    elements.forEach((el) => {\n      addExtraClass(el, 'with-notch');\n      el.addEventListener('scroll', handleScroll, { passive: true });\n    });\n\n    return () => {\n      elements.forEach((el) => {\n        el.removeEventListener('scroll', handleScroll);\n        removeExtraClass(el, 'with-notch');\n      });\n    };\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [containerRef, selector, ...deps]);\n\n  useEffect(() => {\n    const elements = containerRef.current?.querySelectorAll<HTMLElement>(selector);\n    if (!elements?.length) return undefined;\n\n    elements.forEach((el) => {\n      const isScrolled = el.scrollTop > 0;\n      requestMutation(() => {\n        toggleExtraClass(el, 'scrolled', isScrolled);\n      });\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [containerRef, selector, ...deps]);\n};\n\nexport default useScrollNotch;\n","import { useLayoutEffect, useMemo, useRef } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport cycleRestrict from '../util/cycleRestrict';\nimport { preloadImage } from '../util/files';\nimport { MAX_WORKERS, requestMediaWorker } from '../util/launchMediaWorkers';\nimport useLastCallback from './useLastCallback';\n\nconst RADIUS_RATIO = 0.1; // Use 10% of the smallest dimension as the blur radius\n\nlet lastWorkerIndex = -1;\n\nexport default function useOffscreenCanvasBlur(\n  thumbData?: string, // data URI or blob URL\n  isDisabled = false,\n) {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const workerIndex = useMemo(() => cycleRestrict(MAX_WORKERS, ++lastWorkerIndex), []);\n  const offscreenRef = useRef<OffscreenCanvas>();\n\n  const blurThumb = useLastCallback(async (canvas: HTMLCanvasElement, uri: string) => {\n    const image = await preloadImage(uri);\n    if (!image) {\n      return;\n    }\n\n    requestMutation(() => {\n      canvas.width = image.width;\n      canvas.height = image.height;\n\n      offscreenRef.current = canvas.transferControlToOffscreen();\n\n      const radius = Math.ceil(Math.min(image.width, image.height) * RADIUS_RATIO);\n\n      requestMediaWorker({\n        name: 'offscreen-canvas:blurThumb',\n        args: [offscreenRef.current, uri, radius],\n        transferables: [offscreenRef.current],\n      }, workerIndex);\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!thumbData || isDisabled || offscreenRef.current) return;\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    blurThumb(canvas, thumbData);\n  }, [blurThumb, isDisabled, thumbData]);\n\n  return canvasRef;\n}\n","import { getMediaThumbUri, type MediaWithThumbs } from '../../../../global/helpers';\n\nimport useOffscreenCanvasBlur from '../../../../hooks/useOffscreenCanvasBlur';\n\ntype CanvasBlurReturnType = ReturnType<typeof useOffscreenCanvasBlur>;\n\nexport default function useBlurredMediaThumbRef(\n  forcedUri: string | undefined, isDisabled: boolean,\n): CanvasBlurReturnType;\nexport default function useBlurredMediaThumbRef(media: MediaWithThumbs, isDisabled?: boolean): CanvasBlurReturnType;\nexport default function useBlurredMediaThumbRef(\n  media: MediaWithThumbs | string | undefined,\n  isDisabled?: boolean,\n) {\n  const dataUri = media ? typeof media === 'string' ? media : getMediaThumbUri(media) : undefined;\n\n  return useOffscreenCanvasBlur(dataUri, isDisabled);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiGroupCall } from '../../../api/types';\n\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { selectChatGroupCall } from '../../../global/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../../middle/hooks/useHeaderPane';\n\nimport AvatarList from '../../common/AvatarList';\nimport Button from '../../ui/Button';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n};\n\nconst PREVIEW_AVATARS_COUNT = 3;\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  className,\n  groupCall,\n  onPaneStateChange,\n}) => {\n  const {\n    requestMasterAndJoinGroupCall,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    requestMasterAndJoinGroupCall({\n      chatId,\n    });\n  }, [requestMasterAndJoinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (!participants) {\n      return [];\n    }\n\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n\n    return Object.values(participants)\n      .slice(0, PREVIEW_AVATARS_COUNT)\n      .map(({ id }) => usersById[id] || chatsById[id])\n      .filter(Boolean);\n  }, [participants]);\n\n  const renderingParticipantCount = useCurrentOrPrev(groupCall?.participantsCount, true);\n  const renderingFetchedParticipants = useCurrentOrPrev(fetchedParticipants, true);\n\n  const isRendering = Boolean(groupCall && isActive);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'GroupCallTopPane',\n        className,\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', renderingParticipantCount ?? 0, 'i')}</span>\n      </div>\n      {Boolean(renderingFetchedParticipants?.length) && (\n        <AvatarList size=\"small\" peers={renderingFetchedParticipants} className=\"avatars\" />\n      )}\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    const activeGroupCallId = selectTabState(global).isMasterTab ? global.groupCalls.activeGroupCallId : undefined;\n\n    return {\n      groupCall,\n      isActive: activeGroupCallId !== groupCall?.id && Boolean(\n        groupCall\n          ? groupCall.participantsCount > 0 && groupCall.isLoaded\n          : chat && chat.isCallNotEmpty && chat.isCallActive,\n      ),\n    };\n  },\n)(GroupCallTopPane));\n","import type { Scheduler } from '../util/schedulers';\nimport type { Signal } from '../util/signals';\n\nimport useDebouncedCallback from './useDebouncedCallback';\nimport useDerivedSignal from './useDerivedSignal';\nimport useThrottledCallback from './useThrottledCallback';\n\nexport function useThrottledResolver<T>(\n  resolver: () => T,\n  deps: any[],\n  msOrSchedulerFn: number | Scheduler,\n  noFirst = false,\n) {\n  return useThrottledCallback((setValue: (newValue: T) => void) => {\n    setValue(resolver());\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, deps, msOrSchedulerFn, noFirst);\n}\n\nexport function useThrottledSignal<T>(\n  getValue: Signal<T>,\n  ms: number,\n  noFirst = false,\n): Signal<T> {\n  const throttledResolver = useThrottledResolver(() => getValue(), [getValue], ms, noFirst);\n\n  return useDerivedSignal(\n    throttledResolver, [throttledResolver, getValue], true,\n  );\n}\n\nexport function useDebouncedResolver<T>(\n  resolver: () => T,\n  deps: any[],\n  ms: number,\n  noFirst = false,\n  noLast = false,\n) {\n  return useDebouncedCallback((setValue: (newValue: T) => void) => {\n    setValue(resolver());\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, deps, ms, noFirst, noLast);\n}\n\nexport function useDebouncedSignal<T>(\n  getValue: Signal<T>,\n  ms: number,\n  noFirst = false,\n  noLast = false,\n): Signal<T> {\n  const debouncedResolver = useDebouncedResolver(() => getValue(), [getValue], ms, noFirst, noLast);\n\n  return useDerivedSignal(\n    debouncedResolver, [debouncedResolver, getValue], true,\n  );\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ChatTranslatedMessages } from '../../../../types';\n\nimport { throttle } from '../../../../util/schedulers';\n\nconst MESSAGE_LIMIT_PER_REQUEST = 20;\nconst THROTTLE_DELAY = 500;\nconst PENDING_TRANSLATIONS = new Map<string, Map<string, number[]>>();\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId?: string,\n  messageId?: number,\n  requestedLanguageCode?: string,\n) {\n  const messageTranslation = requestedLanguageCode && messageId\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!chatId || !messageId) return;\n\n    if (!text && isPending === undefined && requestedLanguageCode) {\n      addPendingTranslation(chatId, messageId, requestedLanguageCode);\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode]);\n\n  if (!chatId || !messageId) {\n    return {\n      isPending: false,\n      translatedText: undefined,\n    };\n  }\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n\nconst throttledProcessPending = throttle(processPending, THROTTLE_DELAY);\n\nfunction processPending() {\n  const { translateMessages } = getActions();\n  let hasUnprocessed = false;\n  PENDING_TRANSLATIONS.forEach((chats, toLanguageCode) => {\n    chats.forEach((messageIds, chatId) => {\n      const messageIdsToTranslate = messageIds.slice(0, MESSAGE_LIMIT_PER_REQUEST);\n\n      if (messageIdsToTranslate.length < messageIds.length) {\n        hasUnprocessed = true;\n      }\n\n      translateMessages({ chatId, messageIds: messageIdsToTranslate, toLanguageCode });\n\n      removePendingTranslations(chatId, messageIdsToTranslate, toLanguageCode);\n    });\n  });\n\n  if (hasUnprocessed) {\n    throttledProcessPending();\n  }\n}\n\nfunction addPendingTranslation(\n  chatId: string,\n  messageId: number,\n  toLanguageCode: string,\n) {\n  const languageTranslations = PENDING_TRANSLATIONS.get(toLanguageCode) || new Map<string, number[]>();\n  const messageIds = languageTranslations.get(chatId) || [];\n\n  if (messageIds.includes(messageId)) {\n    throttledProcessPending();\n    return;\n  }\n\n  messageIds.push(messageId);\n  languageTranslations.set(chatId, messageIds);\n  PENDING_TRANSLATIONS.set(toLanguageCode, languageTranslations);\n\n  getActions().markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  throttledProcessPending();\n}\n\nfunction removePendingTranslations(\n  chatId: string,\n  messageIds: number[],\n  toLanguageCode: string,\n) {\n  const languageTranslations = PENDING_TRANSLATIONS.get(toLanguageCode);\n  if (!languageTranslations?.size) {\n    PENDING_TRANSLATIONS.delete(toLanguageCode);\n    return;\n  }\n\n  const oldMessageIds = languageTranslations.get(chatId);\n  if (!oldMessageIds?.length) {\n    languageTranslations.delete(chatId);\n    return;\n  }\n\n  const newMessageIds = oldMessageIds.filter((id) => !messageIds.includes(id));\n\n  if (!newMessageIds?.length) {\n    languageTranslations.delete(chatId);\n    if (!languageTranslations.size) {\n      PENDING_TRANSLATIONS.delete(toLanguageCode);\n    }\n    return;\n  }\n\n  languageTranslations.set(chatId, newMessageIds);\n}\n","import type { ElementRef } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiMessage, ApiVideo, ApiVoice,\n  ApiWebPage,\n} from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { ThemeKey } from '../../types';\nimport { ApiMediaFormat } from '../../api/types';\nimport { AudioOrigin } from '../../types';\n\nimport {\n  getMediaFormat,\n  getMediaHash,\n  getMediaTransferState,\n  getWebPageAudio,\n  hasMessageTtl,\n  isMessageLocal,\n  isOwnMessage,\n} from '../../global/helpers';\nimport { selectWebPageFromMessage } from '../../global/selectors';\nimport { selectMessageMediaDuration } from '../../global/selectors/media';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDateTime, formatMediaDuration, formatPastTimeShort } from '../../util/dates/dateFormat';\nimport { decodeWaveform, interpolateArray } from '../../util/waveform';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport { getFileSizeString } from './helpers/documentInfo';\nimport renderText from './helpers/renderText';\nimport { MAX_EMPTY_WAVEFORM_POINTS, renderWaveform } from './helpers/waveform';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useBuffering from '../../hooks/useBuffering';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport AnimatedIcon from './AnimatedIcon';\nimport Icon from './icons/Icon';\n\nimport './Audio.scss';\n\ntype OwnProps = {\n  theme: ThemeKey;\n  message: ApiMessage;\n  senderTitle?: string;\n  uploadProgress?: number;\n  origin: AudioOrigin;\n  date?: number;\n  noAvatars?: boolean;\n  className?: string;\n  isSelectable?: boolean;\n  isSelected?: boolean;\n  isDownloading?: boolean;\n  isTranscribing?: boolean;\n  isTranscribed?: boolean;\n  canDownload?: boolean;\n  canTranscribe?: boolean;\n  isTranscriptionHidden?: boolean;\n  isTranscriptionError?: boolean;\n  autoPlay?: boolean;\n  onHideTranscription?: (isHidden: boolean) => void;\n  onPlay?: (messageId: number, chatId: string) => void;\n  onPause?: NoneToVoidFunction;\n  onReadMedia?: () => void;\n  onCancelUpload?: () => void;\n  onDateClick?: (arg: ApiMessage) => void;\n};\n\ntype StateProps = {\n  mediaDuration?: number;\n  webPage?: ApiWebPage;\n};\n\nexport const TINY_SCREEN_WIDTH_MQL = window.matchMedia('(max-width: 375px)');\nexport const WITH_AVATAR_TINY_SCREEN_WIDTH_MQL = window.matchMedia('(max-width: 410px)');\nconst AVG_VOICE_DURATION = 10;\n// This is needed for browsers requiring user interaction before playing.\nconst PRELOAD = true;\n\nconst Audio = ({\n  theme,\n  message,\n  senderTitle,\n  uploadProgress,\n  origin,\n  date,\n  noAvatars,\n  className,\n  isSelectable,\n  isSelected,\n  isDownloading,\n  isTranscribing,\n  isTranscriptionHidden,\n  isTranscribed,\n  isTranscriptionError,\n  canDownload,\n  canTranscribe,\n  autoPlay,\n  webPage,\n  mediaDuration,\n  onHideTranscription,\n  onPlay,\n  onPause,\n  onReadMedia,\n  onCancelUpload,\n  onDateClick,\n}: OwnProps & StateProps) => {\n  const {\n    cancelMediaDownload, downloadMedia, transcribeAudio, openOneTimeMediaModal,\n  } = getActions();\n\n  const {\n    content: {\n      audio: contentAudio, voice, video,\n    }, isMediaUnread,\n  } = message;\n  const audio = contentAudio || getWebPageAudio(webPage);\n  const media = (voice || video || audio)!;\n  const mediaSource = (voice || video);\n  const isVoice = Boolean(voice || video);\n  const isSeeking = useRef<boolean>(false);\n  const seekerRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n  const { isRtl } = lang;\n\n  const { isMobile } = useAppLayout();\n  const [isActivated, setIsActivated] = useState(false);\n  const shouldLoad = isActivated || PRELOAD;\n  const coverHash = getMediaHash(media, 'pictogram');\n  const coverBlobUrl = useMedia(coverHash, false, ApiMediaFormat.BlobUrl);\n  const hasTtl = hasMessageTtl(message);\n  const isInOneTimeModal = origin === AudioOrigin.OneTimeModal;\n  const trackType = isVoice ? (hasTtl ? 'oneTimeVoice' : 'voice') : 'audio';\n\n  const mediaData = useMedia(\n    getMediaHash(media, 'inline'),\n    !shouldLoad,\n    getMediaFormat(media, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMediaHash(media, 'download'),\n    !isDownloading,\n    getMediaFormat(media, 'download'),\n  );\n\n  const handleForcePlay = useLastCallback(() => {\n    setIsActivated(true);\n    onPlay?.(message.id, message.chatId);\n  });\n\n  const handleTrackChange = useLastCallback(() => {\n    setIsActivated(false);\n  });\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, checkBuffering,\n  } = useBuffering();\n\n  const noReset = isInOneTimeModal;\n  const {\n    isPlaying, playProgress, playPause, setCurrentTime, duration,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    mediaDuration!,\n    trackType,\n    mediaData,\n    bufferingHandlers,\n    undefined,\n    checkBuffering,\n    Boolean(isActivated || autoPlay),\n    handleForcePlay,\n    handleTrackChange,\n    isMessageLocal(message) || hasTtl,\n    undefined,\n    onPause,\n    noReset,\n    hasTtl && !isInOneTimeModal,\n  );\n\n  const reversePlayProgress = 1 - playProgress;\n  const isOwn = isOwnMessage(message);\n  const isReverse = hasTtl && isInOneTimeModal;\n\n  const waveformCanvasRef = useWaveformCanvas(\n    theme,\n    mediaSource,\n    (isMediaUnread && !isOwn && !isReverse) ? 1 : playProgress,\n    isOwn,\n    !noAvatars,\n    isMobile,\n    isReverse,\n  );\n\n  const withSeekline = isPlaying || (playProgress > 0 && playProgress < 1);\n\n  useEffect(() => {\n    setIsActivated(isPlaying);\n  }, [isPlaying]);\n\n  const isLoadingForPlaying = isActivated && !isBuffered;\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    uploadProgress || downloadProgress,\n    isLoadingForPlaying || isDownloading,\n    uploadProgress !== undefined,\n  );\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransitionDeprecated(isTransferring);\n\n  const shouldRenderCross = shouldRenderSpinner && (isLoadingForPlaying || isUploading);\n\n  const handleButtonClick = useLastCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.();\n      return;\n    }\n\n    if (hasTtl) {\n      openOneTimeMediaModal({ message });\n      onReadMedia?.();\n      return;\n    }\n\n    if (!isPlaying) {\n      onPlay?.(message.id, message.chatId);\n    }\n\n    getActions().setAudioPlayerOrigin({ origin });\n    setIsActivated(!isActivated);\n    playPause();\n  });\n\n  useEffect(() => {\n    if (onReadMedia && isMediaUnread && isPlaying) {\n      onReadMedia();\n    }\n  }, [isPlaying, isMediaUnread, onReadMedia]);\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (isDownloading) {\n      cancelMediaDownload({ media });\n    } else {\n      downloadMedia({ media, originMessage: message });\n    }\n  });\n\n  const handleSeek = useLastCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeeking.current && seekerRef.current) {\n      const { width, left } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      e.stopPropagation(); // Prevent Slide-to-Reply activation\n      // Prevent track skipping while seeking near end\n      setCurrentTime(Math.max(Math.min(duration * ((clientX - left) / width), duration - 0.1), 0.001));\n    }\n  });\n\n  const handleStartSeek = useLastCallback((e: MouseEvent | TouchEvent) => {\n    if (e instanceof MouseEvent && e.button === 2) return;\n    isSeeking.current = true;\n    handleSeek(e);\n  });\n\n  const handleStopSeek = useLastCallback(() => {\n    isSeeking.current = false;\n  });\n\n  const handleDateClick = useLastCallback(() => {\n    onDateClick!(message);\n  });\n\n  const handleTranscribe = useLastCallback(() => {\n    transcribeAudio({ chatId: message.chatId, messageId: message.id });\n  });\n\n  useEffect(() => {\n    if (!seekerRef.current || !withSeekline || isInOneTimeModal) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [withSeekline, handleStartSeek, handleSeek, handleStopSeek, isInOneTimeModal]);\n\n  function renderFirstLine() {\n    if (isVoice) {\n      return senderTitle || 'Voice';\n    }\n\n    const { title, fileName } = audio!;\n\n    return title || fileName;\n  }\n\n  function renderSecondLine() {\n    if (isVoice) {\n      return (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          {formatMediaDuration((voice || video)!.duration)}\n        </div>\n      );\n    }\n\n    const { performer } = audio!;\n\n    return (\n      <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n        {formatMediaDuration(duration)}\n        <span className=\"bullet\">&bull;</span>\n        {performer && <span className=\"performer\" title={performer}>{renderText(performer)}</span>}\n        {performer && senderTitle && <span className=\"bullet\">&bull;</span>}\n        {senderTitle && <span title={senderTitle}>{renderText(senderTitle)}</span>}\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'Audio',\n    className,\n    isInOneTimeModal && 'non-interactive',\n    origin === AudioOrigin.Inline && 'inline',\n    isOwn && origin === AudioOrigin.Inline && 'own',\n    (origin === AudioOrigin.Search || origin === AudioOrigin.SharedMedia) && 'bigger',\n    isSelected && 'audio-is-selected',\n  );\n\n  const buttonClassNames = ['toogle-play-wrapper'];\n  if (shouldRenderCross) {\n    buttonClassNames.push('loading');\n  } else {\n    buttonClassNames.push(isPlaying ? 'pause' : 'play');\n  }\n\n  const contentClassName = buildClassName('content', withSeekline && 'with-seekline');\n\n  function renderWithTitle() {\n    return (\n      <div className={contentClassName}>\n        <div className=\"content-row\">\n          <p className=\"title\" dir=\"auto\" title={renderFirstLine()}>{renderText(renderFirstLine())}</p>\n\n          <div className=\"message-date\">\n            {Boolean(date) && (\n              <Link\n                className=\"date\"\n                onClick={handleDateClick}\n              >\n                {formatPastTimeShort(lang, date * 1000)}\n              </Link>\n            )}\n          </div>\n        </div>\n\n        {withSeekline && (\n          <div className=\"meta search-result\" dir={isRtl ? 'rtl' : undefined}>\n            <span className=\"duration with-seekline\" dir=\"auto\">\n              {playProgress < 1 && formatMediaDuration(duration * playProgress, duration)}\n            </span>\n            {renderSeekline(playProgress, bufferedRanges, seekerRef)}\n          </div>\n        )}\n        {!withSeekline && renderSecondLine()}\n      </div>\n    );\n  }\n\n  function renderTooglePlayWrapper() {\n    return (\n      <div className={buildClassName(...buttonClassNames)}>\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"smaller\"\n          className=\"toggle-play\"\n          color={coverBlobUrl ? 'translucent-white' : 'primary'}\n          ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n          onClick={handleButtonClick}\n          isRtl={lang.isRtl}\n          backgroundImage={coverBlobUrl}\n          nonInteractive={isInOneTimeModal}\n        >\n          {!isInOneTimeModal && <Icon name=\"play\" />}\n          {!isInOneTimeModal && <Icon name=\"pause\" />}\n          {isInOneTimeModal && (\n            <AnimatedIcon\n              className=\"flame\"\n              tgsUrl={LOCAL_TGS_URLS.Flame}\n              nonInteractive\n              noLoop={false}\n              size={40}\n            />\n          )}\n        </Button>\n        {hasTtl && !isInOneTimeModal && (\n          <Icon name=\"view-once\" />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : 'ltr'}>\n      {isSelectable && (\n        <div className=\"message-select-control no-selection\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {renderTooglePlayWrapper()}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames, shouldRenderCross && 'interactive')}>\n          <ProgressSpinner\n            progress={transferProgress}\n            transparent\n            withColor\n            size=\"m\"\n            onClick={shouldRenderCross ? handleButtonClick : undefined}\n            noCross={!shouldRenderCross}\n          />\n        </div>\n      )}\n      {isInOneTimeModal && !shouldRenderSpinner && (\n        <div className={buildClassName('media-loading')}>\n          <ProgressSpinner\n            progress={playProgress}\n            transparent\n            size=\"m\"\n            noCross\n            rotationOffset={3 / 4}\n          />\n        </div>\n      )}\n      {audio && canDownload && !isUploading && (\n        <Button\n          round\n          size=\"tiny\"\n          className=\"download-button\"\n          ariaLabel={isDownloading ? 'Cancel download' : 'Download'}\n          onClick={handleDownloadClick}\n        >\n          <Icon name={isDownloading ? 'close' : 'arrow-down'} />\n        </Button>\n      )}\n      {origin === AudioOrigin.Search && renderWithTitle()}\n      {origin !== AudioOrigin.Search && audio && renderAudio(\n        lang,\n        audio,\n        duration,\n        isPlaying,\n        playProgress,\n        bufferedRanges,\n        seekerRef,\n        (isDownloading || isUploading),\n        date,\n        transferProgress,\n        onDateClick ? handleDateClick : undefined,\n      )}\n      {origin === AudioOrigin.SharedMedia && mediaSource && renderWithTitle()}\n      {(origin === AudioOrigin.Inline || isInOneTimeModal || isTranscribed) && mediaSource && (\n        renderVoice(\n          mediaSource,\n          seekerRef,\n          waveformCanvasRef,\n          hasTtl ? reversePlayProgress : playProgress,\n          isMediaUnread,\n          isTranscribing,\n          isTranscriptionHidden,\n          isTranscribed,\n          isTranscriptionError,\n          canTranscribe ? handleTranscribe : undefined,\n          onHideTranscription,\n          origin,\n        )\n      )}\n    </div>\n  );\n};\n\nfunction getSeeklineSpikeAmounts(isMobile?: boolean, withAvatar?: boolean) {\n  return {\n    MIN_SPIKES: isMobile ? (TINY_SCREEN_WIDTH_MQL.matches ? 16 : 20) : 25,\n    MAX_SPIKES: isMobile\n      ? (TINY_SCREEN_WIDTH_MQL.matches\n        ? 35\n        : (withAvatar && WITH_AVATAR_TINY_SCREEN_WIDTH_MQL.matches ? 40 : 45))\n      : 75,\n  };\n}\n\nfunction renderAudio(\n  lang: OldLangFn,\n  audio: ApiAudio,\n  duration: number,\n  isPlaying: boolean,\n  playProgress: number,\n  bufferedRanges: BufferedRange[],\n  seekerRef: ElementRef<HTMLDivElement>,\n  showProgress?: boolean,\n  date?: number,\n  progress?: number,\n  handleDateClick?: NoneToVoidFunction,\n) {\n  const {\n    title, performer, fileName,\n  } = audio;\n  const showSeekline = isPlaying || (playProgress > 0 && playProgress < 1);\n  const { isRtl } = lang;\n\n  return (\n    <div className=\"content\">\n      <p className=\"title\" dir=\"auto\" title={title}>{renderText(title || fileName)}</p>\n      {showSeekline && (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          <span className=\"duration with-seekline\" dir=\"auto\">\n            {formatMediaDuration(duration * playProgress, duration)}\n          </span>\n          {renderSeekline(playProgress, bufferedRanges, seekerRef)}\n        </div>\n      )}\n      {!showSeekline && showProgress && (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          {progress ? `${getFileSizeString(audio.size * progress)} / ` : undefined}\n          {getFileSizeString(audio.size)}\n        </div>\n      )}\n      {!showSeekline && !showProgress && (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          <span className=\"duration\" dir=\"auto\">{formatMediaDuration(duration)}</span>\n          {performer && (\n            <>\n              <span className=\"bullet\">&bull;</span>\n              <span className=\"performer\" dir=\"auto\" title={performer}>{renderText(performer)}</span>\n            </>\n          )}\n          {Boolean(date) && (\n            <>\n              <span className=\"bullet\">&bull;</span>\n              <Link className=\"date\" onClick={handleDateClick}>\n                {formatMediaDateTime(lang, date * 1000, true)}\n              </Link>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction renderVoice(\n  media: ApiVoice | ApiVideo,\n  seekerRef: ElementRef<HTMLDivElement>,\n  waveformCanvasRef: ElementRef<HTMLCanvasElement>,\n  playProgress: number,\n  isMediaUnread?: boolean,\n  isTranscribing?: boolean,\n  isTranscriptionHidden?: boolean,\n  isTranscribed?: boolean,\n  isTranscriptionError?: boolean,\n  onClickTranscribe?: VoidFunction,\n  onHideTranscription?: (isHidden: boolean) => void,\n  origin?: AudioOrigin,\n) {\n  return (\n    <div className=\"content\">\n      <div className=\"waveform-wrapper\">\n        <div\n          className=\"waveform\"\n          draggable={false}\n          ref={seekerRef}\n        >\n          <canvas ref={waveformCanvasRef} />\n        </div>\n        {onClickTranscribe && (\n\n          <Button onClick={() => {\n            if ((isTranscribed || isTranscriptionError) && onHideTranscription) {\n              onHideTranscription(!isTranscriptionHidden);\n            } else if (!isTranscribing) {\n              onClickTranscribe();\n            }\n          }}\n          >\n            <Icon\n              name={(isTranscribed || isTranscriptionError) ? 'down' : 'transcribe'}\n              className={buildClassName(\n                'transcribe-icon',\n                (isTranscribed || isTranscriptionError) && !isTranscriptionHidden && 'transcribe-shown',\n              )}\n            />\n            {isTranscribing && (\n              <svg viewBox=\"0 0 32 24\" className=\"loading-svg\">\n                <rect\n                  className=\"loading-rect\"\n                  fill=\"transparent\"\n                  width=\"32\"\n                  height=\"24\"\n                  stroke-width=\"3\"\n                  stroke-linejoin=\"round\"\n                  rx=\"6\"\n                  ry=\"6\"\n                  stroke=\"white\"\n                  stroke-dashoffset=\"1\"\n                  stroke-dasharray=\"32,68\"\n                />\n              </svg>\n            )}\n          </Button>\n        )}\n      </div>\n      <p\n        className={buildClassName('voice-duration', origin !== AudioOrigin.OneTimeModal && isMediaUnread && 'unread')}\n        dir=\"auto\"\n      >\n        {playProgress === 0 || playProgress === 1\n          ? formatMediaDuration(media.duration) : formatMediaDuration(media.duration * playProgress)}\n      </p>\n    </div>\n  );\n}\n\nfunction useWaveformCanvas(\n  theme: ThemeKey,\n  media?: ApiVoice | ApiVideo,\n  playProgress = 0,\n  isOwn = false,\n  withAvatar = false,\n  isMobile = false,\n  isReverse = false,\n) {\n  const canvasRef = useRef<HTMLCanvasElement>();\n\n  const { data: spikes, peak } = useMemo(() => {\n    if (!media) {\n      return undefined;\n    }\n\n    const { waveform, duration } = media;\n    if (!waveform) {\n      return {\n        data: new Array(Math.min(duration, MAX_EMPTY_WAVEFORM_POINTS)).fill(0),\n        peak: 0,\n      };\n    }\n\n    const { MIN_SPIKES, MAX_SPIKES } = getSeeklineSpikeAmounts(isMobile, withAvatar);\n    const durationFactor = Math.min(duration / AVG_VOICE_DURATION, 1);\n    const spikesCount = Math.round(MIN_SPIKES + (MAX_SPIKES - MIN_SPIKES) * durationFactor);\n    const decodedWaveform = decodeWaveform(new Uint8Array(waveform));\n\n    return interpolateArray(decodedWaveform, spikesCount);\n  }, [isMobile, media, withAvatar]) || {};\n\n  useLayoutEffect(() => {\n    const canvas = canvasRef.current;\n\n    if (!canvas || !spikes || peak === undefined) {\n      return;\n    }\n\n    const fillColor = theme === 'dark' ? '#494A78' : '#ADD3F7';\n    const fillOwnColor = theme === 'dark' ? '#B7ABED' : '#AEDFA4';\n    const progressFillColor = theme === 'dark' ? '#8774E1' : '#3390EC';\n    const progressFillOwnColor = theme === 'dark' ? '#FFFFFF' : '#4FAE4E';\n\n    const fillStyle = isOwn ? fillOwnColor : fillColor;\n    const progressFillStyle = isOwn ? progressFillOwnColor : progressFillColor;\n\n    renderWaveform(canvas, spikes, isReverse ? 1 - playProgress : playProgress, {\n      peak,\n      fillStyle,\n      progressFillStyle,\n    });\n  }, [isOwn, peak, playProgress, spikes, theme, isReverse]);\n\n  return canvasRef;\n}\n\nfunction renderSeekline(\n  playProgress: number,\n  bufferedRanges: BufferedRange[],\n  seekerRef: ElementRef<HTMLDivElement>,\n) {\n  return (\n    <div\n      className=\"seekline\"\n      ref={seekerRef}\n    >\n      {bufferedRanges.map(({ start, end }) => (\n        <div\n          className=\"seekline-buffered-progress\"\n          style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n        />\n      ))}\n      <span className=\"seekline-play-progress\">\n        <i\n          className=\"seekline-play-progress-inner\"\n          style={`transform: translateX(${playProgress * 100}%)`}\n        />\n      </span>\n      <span className=\"seekline-thumb\">\n        <i\n          className=\"seekline-thumb-inner\"\n          style={`transform: translateX(${playProgress * 100}%)`}\n        />\n      </span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message,\n  }): Complete<StateProps> => {\n    const webPage = selectWebPageFromMessage(global, message);\n    const mediaDuration = selectMessageMediaDuration(global, message);\n\n    return {\n      webPage,\n      mediaDuration,\n    };\n  },\n)(Audio));\n","type IWaveformProps = {\n  peak: number;\n  fillStyle: string;\n  progressFillStyle: string;\n};\n\nexport const MAX_EMPTY_WAVEFORM_POINTS = 30;\nconst SPIKE_WIDTH = 2;\nconst SPIKE_STEP = 4;\nconst SPIKE_RADIUS = 1;\nconst HEIGHT = 23;\n\nexport function renderWaveform(\n  canvas: HTMLCanvasElement,\n  spikes: number[],\n  progress: number,\n  {\n    peak, fillStyle, progressFillStyle,\n  }: IWaveformProps,\n) {\n  const width = spikes.length * SPIKE_STEP;\n  const height = HEIGHT;\n\n  canvas.width = width * 2;\n  canvas.height = height * 2;\n  canvas.style.width = `${width}px`;\n  canvas.style.height = `${height}px`;\n\n  const ctx = canvas.getContext('2d')!;\n  ctx.scale(2, 2);\n\n  spikes.forEach((item, i) => {\n    ctx.globalAlpha = (i / spikes.length >= progress) ? 0.5 : 1;\n    ctx.fillStyle = progress > i / spikes.length ? progressFillStyle : fillStyle;\n    const spikeHeight = Math.max(2, HEIGHT * (item / Math.max(1, peak)));\n    roundedRectangle(ctx, i * SPIKE_STEP, (height + spikeHeight) / 2, SPIKE_WIDTH, spikeHeight, SPIKE_RADIUS);\n    ctx.fill();\n  });\n}\n\nfunction roundedRectangle(\n  ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, radius: number,\n) {\n  if (width < 2 * radius) {\n    radius = width / 2;\n  }\n  if (height < 2 * radius) {\n    radius = height / 2;\n  }\n\n  ctx.beginPath();\n  ctx.moveTo(x + radius, y);\n  ctx.arcTo(x + width, y, x + width, y - height, radius);\n  ctx.arcTo(x + width, y - height, x, y - height, radius);\n  ctx.arcTo(x, y - height, x, y, radius);\n  ctx.arcTo(x, y, x + width, y, radius);\n  ctx.closePath();\n}\n","// Ref: https://github.com/telegramdesktop/tdesktop/blob/0743e71ab6b928d2ee5bae1aed991849b1e2b291/Telegram/SourceFiles/data/data_document.cpp#L1018\nexport function decodeWaveform(encoded5bit: Uint8Array) {\n  const bitsCount = encoded5bit.length * 8;\n  const valuesCount = Math.floor(bitsCount / 5);\n  if (!valuesCount) {\n    return [];\n  }\n\n  // Read each 5 bit of encoded5bit as 0-31 unsigned char.\n  // We count the index of the byte in which the desired 5-bit sequence starts.\n  // And then we read a uint16 starting from that byte to guarantee to get all of those 5 bits.\n  //\n  // BUT! if it is the last byte we have, we're not allowed to read a uint16 starting with it.\n  // Because it will be an overflow (we'll access one byte after the available memory).\n  // We see, that only the last 5 bits could start in the last available byte and be problematic.\n  // So we read in a general way all the entries in a general way except the last one.\n  const result = Array(valuesCount);\n  const bitsData = encoded5bit;\n  for (let i = 0, l = valuesCount - 1; i !== l; ++i) {\n    const byteIndex = Math.floor((i * 5) / 8);\n    const bitShift = Math.floor((i * 5) % 8);\n    const value = bitsData[byteIndex] + (bitsData[byteIndex + 1] << 8);\n    result[i] = ((value >> bitShift) & 0x1F);\n  }\n  const lastByteIndex = Math.floor(((valuesCount - 1) * 5) / 8);\n  const lastBitShift = Math.floor(((valuesCount - 1) * 5) % 8);\n  const lastValue = bitsData[lastByteIndex] + (bitsData[lastByteIndex + 1] << 8);\n  result[valuesCount - 1] = (lastValue >> lastBitShift) & 0x1F;\n\n  return result;\n}\n\nexport function interpolateArray(data: number[], fitCount: number) {\n  let peak = 0;\n  const newData = new Array(fitCount);\n  const springFactor = data.length / fitCount;\n  const leftFiller = data[0];\n  const rightFiller = data[data.length - 1];\n  for (let i = 0; i < fitCount; i++) {\n    const idx = Math.floor(i * springFactor);\n    const val = ((data[idx - 1] ?? leftFiller) + (data[idx] ?? leftFiller) + (data[idx + 1] ?? rightFiller)) / 3;\n    newData[i] = val;\n    if (peak < val) {\n      peak = val;\n    }\n  }\n  return { data: newData, peak };\n}\n","export default function cycleRestrict(length: number, index: number) {\n  return index - Math.floor(index / length) * length;\n}\n","import {\n  useEffect, useMemo, useRef, useState,\n} from '../lib/teact/teact';\n\nimport { ApiMediaFormat } from '../api/types';\n\nimport { selectIsSynced } from '../global/selectors';\nimport { IS_PROGRESSIVE_SUPPORTED } from '../util/browser/windowEnvironment';\nimport * as mediaLoader from '../util/mediaLoader';\nimport { throttle } from '../util/schedulers';\nimport useSelector from './data/useSelector';\nimport useForceUpdate from './useForceUpdate';\nimport useUniqueId from './useUniqueId';\n\nconst STREAMING_PROGRESS = 0.75;\nconst STREAMING_TIMEOUT = 1500;\nconst PROGRESS_THROTTLE = 500;\n\nexport default function useMediaWithLoadProgress(\n  mediaHash: string | undefined,\n  noLoad = false,\n  mediaFormat = ApiMediaFormat.BlobUrl,\n  delay?: number | false,\n  isHtmlAllowed = false,\n) {\n  const isStreaming = IS_PROGRESSIVE_SUPPORTED && mediaFormat === ApiMediaFormat.Progressive;\n  const mediaData = mediaHash\n    ? (isStreaming ? mediaLoader.getProgressiveUrl(mediaHash)\n      : mediaLoader.getFromMemory(mediaHash)) : undefined;\n\n  const forceUpdate = useForceUpdate();\n  const isSynced = useSelector(selectIsSynced);\n  const id = useUniqueId();\n  const [loadProgress, setLoadProgress] = useState(mediaData && !isStreaming ? 1 : 0);\n  const startedAtRef = useRef<number>();\n\n  const handleProgress = useMemo(() => {\n    return throttle((progress: number) => {\n      if (startedAtRef.current && (!delay || (Date.now() - startedAtRef.current > delay))) {\n        setLoadProgress(progress);\n      }\n    }, PROGRESS_THROTTLE, true);\n  }, [delay]);\n\n  useEffect(() => {\n    if (!noLoad && mediaHash) {\n      if (!mediaData) {\n        setLoadProgress(0);\n\n        if (startedAtRef.current) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n\n        startedAtRef.current = Date.now();\n\n        mediaLoader.fetch(mediaHash, mediaFormat, isHtmlAllowed, handleProgress, id).then(() => {\n          const spentTime = Date.now() - startedAtRef.current!;\n          startedAtRef.current = undefined;\n\n          if (!delay || spentTime >= delay) {\n            forceUpdate();\n          } else {\n            setTimeout(forceUpdate, delay - spentTime);\n          }\n        });\n      } else if (isStreaming) {\n        setTimeout(() => {\n          setLoadProgress(STREAMING_PROGRESS);\n        }, STREAMING_TIMEOUT);\n      }\n    }\n  }, [\n    noLoad, mediaHash, mediaData, mediaFormat, isStreaming, delay, handleProgress, isHtmlAllowed, id, isSynced,\n  ]);\n\n  useEffect(() => {\n    if (noLoad && startedAtRef.current) {\n      mediaLoader.cancelProgress(handleProgress);\n      setLoadProgress(0);\n      startedAtRef.current = undefined;\n    }\n  }, [handleProgress, noLoad]);\n\n  useEffect(() => {\n    return () => {\n      if (mediaHash) {\n        mediaLoader.removeCallback(mediaHash, id);\n      }\n    };\n  }, [id, mediaHash]);\n\n  return { mediaData, loadProgress };\n}\n","import type { GlobalState } from '../types';\n\nimport { getMainUsername, isChatBasicGroup } from '../helpers';\nimport { selectChat, selectChatFullInfo } from './chats';\nimport { selectUser } from './users';\n\nexport function selectChatGroupCall<T extends GlobalState>(global: T, chatId: string) {\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo || !fullInfo.groupCallId) return undefined;\n\n  return selectGroupCall(global, fullInfo.groupCallId);\n}\n\nexport function selectGroupCall<T extends GlobalState>(global: T, groupCallId: string) {\n  return global.groupCalls.byId[groupCallId];\n}\n\nexport function selectGroupCallParticipant<T extends GlobalState>(\n  global: T, groupCallId: string, participantId: string,\n) {\n  return selectGroupCall(global, groupCallId)?.participants[participantId];\n}\n\nexport function selectIsAdminInActiveGroupCall<T extends GlobalState>(global: T): boolean {\n  const chatId = selectActiveGroupCall(global)?.chatId;\n\n  if (!chatId) return false;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return false;\n\n  return (isChatBasicGroup(chat) && chat.isCreator) || Boolean(chat.adminRights?.manageCall);\n}\n\nexport function selectActiveGroupCall<T extends GlobalState>(global: T) {\n  const { groupCalls: { activeGroupCallId } } = global;\n  if (!activeGroupCallId) {\n    return undefined;\n  }\n\n  return selectGroupCall(global, activeGroupCallId);\n}\n\nexport function selectPhoneCallUser<T extends GlobalState>(global: T) {\n  const { phoneCall, currentUserId } = global;\n  if (!phoneCall || !phoneCall.participantId || !phoneCall.adminId) {\n    return undefined;\n  }\n\n  const id = phoneCall.adminId === currentUserId ? phoneCall.participantId : phoneCall.adminId;\n  return selectUser(global, id);\n}\n\nexport function selectCanInviteToActiveGroupCall<T extends GlobalState>(global: T) {\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return false;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return false;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n  if (hasPublicUsername) {\n    return true;\n  }\n\n  const inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  return Boolean(inviteLink);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Gi8Nokbl\",\"header\":\"H01lE7mv\",\"title\":\"VQbs04hT\",\"caption\":\"X7bBlGdi\",\"table\":\"s5beXqqL\",\"tableCell\":\"gvrp3KoR\",\"tableHeading\":\"IHb3ZATQ\",\"tableValue\":\"zAPFdKbZ\",\"tableSecondaryValue\":\"_mYEmh_u\",\"value\":\"idLrmbhS\",\"negative\":\"SLfwGHQC\",\"decimalPart\":\"ZAfXkuWL\",\"decimalUsdPart\":\"HRXb_S2M\",\"toncoin\":\"it39BC_c\"};","import type { ReactNode } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiBoostStatistics, ApiChannelMonetizationStatistics,\n  ApiChannelStatistics, ApiGroupStatistics, ApiPostStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatFullDate } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../../util/formatCurrency';\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './StatisticsOverview.module.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  withAbsoluteValue?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'viewsPerStory', title: 'ChannelStats.Overview.ViewsPerStory' },\n  ],\n  [\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n    { name: 'sharesPerStory', title: 'ChannelStats.Overview.SharesPerStory' },\n  ],\n  [\n    { name: 'reactionsPerPost', title: 'ChannelStats.Overview.ReactionsPerPost' },\n    { name: 'reactionsPerStory', title: 'ChannelStats.Overview.ReactionsPerStory' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'viewsCount', title: 'Stats.Message.Views', isPlain: true },\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n  [\n    { name: 'reactionsCount', title: 'Channel.Stats.Overview.Reactions', isPlain: true },\n    {\n      name: 'forwardsCount', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n];\n\nconst STORY_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'viewsCount', title: 'Channel.Stats.Overview.Views', isPlain: true },\n    { name: 'publicForwards', title: 'PublicShares', isPlain: true },\n  ],\n  [\n    { name: 'reactionsCount', title: 'Channel.Stats.Overview.Reactions', isPlain: true },\n    { name: 'forwardsCount', title: 'PrivateShares', isPlain: true },\n  ],\n];\n\nconst BOOST_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'level', title: 'Stats.Boosts.Level', isPlain: true },\n    {\n      name: 'premiumSubscribers',\n      title: 'Stats.Boosts.PremiumSubscribers',\n      isPercentage: true,\n      isApproximate: true,\n      withAbsoluteValue: true,\n    },\n  ],\n  [\n    { name: 'boosts', title: 'Stats.Boosts.ExistingBoosts', isPlain: true },\n    { name: 'remainingBoosts', title: 'Stats.Boosts.BoostsToLevelUp', isPlain: true },\n  ],\n];\n\ntype StatisticsType = 'channel' | 'group' | 'message' | 'boost' | 'story' | 'monetization';\n\nconst DEFAULT_VALUE = 0;\n\nexport type OwnProps = {\n  type: StatisticsType;\n  title?: string;\n  className?: string;\n  isToncoin?: boolean;\n  statistics:\n    ApiChannelStatistics |\n    ApiGroupStatistics |\n    ApiPostStatistics |\n    ApiBoostStatistics |\n    ApiChannelMonetizationStatistics;\n  subtitle?: ReactNode;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({\n  title,\n  type,\n  statistics,\n  isToncoin,\n  className,\n  subtitle,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName(styles.value, isChangeNegative && styles.negative)}>\n        {isChangeNegative\n          ? `-${formatIntegerCompact(lang, Math.abs(change))}`\n          : `+${formatIntegerCompact(lang, change)}`}\n        {percentage && (\n          <>\n            {' '}\n            (\n            {percentage}\n            %)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const renderBalanceCell = (balance: number, usdRate: number, text: string) => {\n    const [integerTonPart, decimalTonPart] = balance.toFixed(4).split('.');\n    const [integerUsdPart, decimalUsdPart] = (balance * usdRate).toFixed(2).split('.');\n    return (\n      <div>\n        <Icon className={styles.toncoin} name=\"toncoin\" />\n        <b className={styles.tableValue}>\n          {integerTonPart}\n          <span className={styles.decimalPart}>\n            .\n            {decimalTonPart}\n          </span>\n        </b>\n        {' '}\n        <span className={styles.tableHeading}>\n          ≈ $\n          {integerUsdPart}\n          <span className={styles.decimalUsdPart}>\n            .\n            {decimalUsdPart}\n          </span>\n        </span>\n        <h3 className={styles.tableHeading}>{oldLang(text)}</h3>\n      </div>\n    );\n  };\n\n  const { period } = statistics as ApiGroupStatistics;\n  const { balances, usdRate } = statistics as ApiChannelMonetizationStatistics;\n\n  const schema = getSchemaByType(type);\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      <div className={styles.header}>\n        {title && (\n          <div className={styles.title}>\n            {title}\n          </div>\n        )}\n\n        {period && (\n          <div className={styles.caption}>\n            {formatFullDate(oldLang, period.minDate * 1000)}\n            {' '}\n            —\n            {formatFullDate(oldLang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className={styles.table}>\n        {isToncoin ? (\n          <tr>\n            <td className={styles.tableCell}>\n              {renderBalanceCell(\n                balances?.availableBalance ? convertTonFromNanos(balances.availableBalance.amount) : 0,\n                usdRate || 0,\n                'lng_channel_earn_available',\n              )}\n              {renderBalanceCell(\n                balances?.currentBalance ? convertTonFromNanos(balances.currentBalance.amount) : 0,\n                usdRate || 0,\n                'lng_channel_earn_reward',\n              )}\n              {renderBalanceCell(\n                balances?.overallRevenue ? convertTonFromNanos(balances.overallRevenue.amount) : 0,\n                usdRate || 0,\n                'lng_channel_earn_total',\n              )}\n            </td>\n          </tr>\n        ) : schema.map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)?.[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className={styles.tableCell}>\n                    <b className={styles.tableValue}>\n                      {`${cell.isApproximate ? '≈ ' : ''}${formatInteger(field ?? DEFAULT_VALUE)}`}\n                    </b>\n                    <h3 className={styles.tableHeading}>{oldLang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                const part = field?.part ?? DEFAULT_VALUE;\n                const percentage = field?.percentage ?? DEFAULT_VALUE;\n\n                return (\n                  <td className={styles.tableCell}>\n                    {cell.withAbsoluteValue && (\n                      <span className={styles.tableValue}>\n                        {`${cell.isApproximate ? '≈ ' : ''}${formatInteger(part)}`}\n                      </span>\n                    )}\n                    <span className={cell.withAbsoluteValue ? styles.tableSecondaryValue : styles.tableValue}>\n                      {percentage}\n                      %\n                    </span>\n                    <h3 className={styles.tableHeading}>{oldLang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className={styles.tableCell}>\n                  <b className={styles.tableValue}>\n                    {formatIntegerCompact(lang, field?.current ?? DEFAULT_VALUE)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className={styles.tableHeading}>{oldLang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n\n      {subtitle}\n    </div>\n  );\n};\n\nfunction getSchemaByType(type: StatisticsType) {\n  switch (type) {\n    case 'group':\n      return GROUP_OVERVIEW;\n    case 'message':\n      return MESSAGE_OVERVIEW;\n    case 'boost':\n      return BOOST_OVERVIEW;\n    case 'story':\n      return STORY_OVERVIEW;\n    case 'channel':\n    default:\n      return CHANNEL_OVERVIEW;\n  }\n}\n\nexport default memo(StatisticsOverview);\n","import { useMemo } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ApiSendMessageAction } from '../api/types';\nimport type { ThreadId } from '../types';\n\nimport { SEND_MESSAGE_ACTION_INTERVAL } from '../config';\nimport { throttle } from '../util/schedulers';\n\nconst useSendMessageAction = (chatId?: string, threadId?: ThreadId) => {\n  return useMemo(() => {\n    return throttle((action: ApiSendMessageAction) => {\n      if (!chatId || !threadId) return;\n      getActions().sendMessageAction({ chatId, threadId, action });\n    }, SEND_MESSAGE_ACTION_INTERVAL);\n  }, [chatId, threadId]);\n};\n\nexport default useSendMessageAction;\n","import type { TypeStatisticsGraph } from '../../../../api/types';\n\nexport function isGraph(obj: unknown): obj is TypeStatisticsGraph {\n  // eslint-disable-next-line no-null/no-null\n  return typeof obj === 'object' && obj !== null && 'graphType' in obj;\n}\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import { requestMeasure, requestMutation } from '../lib/fasterdom/fasterdom';\nimport safePlay from './safePlay';\n\ntype AbsoluteVideoOptions = {\n  position: { x: number; y: number };\n  noLoop?: boolean;\n  size: number;\n  style?: string;\n};\n\nexport default class AbsoluteVideo {\n  private video?: HTMLVideoElement;\n\n  private isPlaying = false;\n\n  constructor(\n    videoUrl: string,\n    private container: HTMLElement,\n    private options: AbsoluteVideoOptions,\n  ) {\n    this.video = document.createElement('video');\n    this.video.src = videoUrl;\n    this.video.disablePictureInPicture = true;\n    this.video.muted = true;\n    if (options.style) {\n      this.video.setAttribute('style', options.style);\n    }\n    this.video.style.position = 'absolute';\n    this.video.load();\n\n    if (!this.options.noLoop) {\n      this.video.loop = true;\n    }\n\n    requestMutation(() => {\n      this.container.appendChild(this.video!);\n\n      this.recalculatePositionAndSize();\n    });\n  }\n\n  public play() {\n    if (this.isPlaying || !this.video) return;\n    this.recalculatePositionAndSize();\n    if (this.video.paused) {\n      safePlay(this.video);\n    }\n    this.isPlaying = true;\n  }\n\n  public pause() {\n    if (!this.isPlaying || !this.video) return;\n    if (!this.video.paused) {\n      this.video.pause();\n    }\n    this.isPlaying = false;\n  }\n\n  public destroy() {\n    this.pause();\n    this.video?.remove();\n    this.video = undefined;\n  }\n\n  public updatePosition(position: AbsoluteVideoOptions['position']) {\n    this.options.position = position;\n    this.recalculatePositionAndSize();\n  }\n\n  private recalculatePositionAndSize() {\n    const { size, position: { x, y } } = this.options;\n    requestMeasure(() => {\n      if (!this.video) return;\n      const video = this.video;\n      const { width, height } = this.container.getBoundingClientRect();\n      requestMutation(() => {\n        video.style.left = `${Math.round(x * width)}px`;\n        video.style.top = `${Math.round(y * height)}px`;\n        video.style.width = `${size}px`;\n        video.style.height = `${size}px`;\n      });\n    });\n  }\n}\n","import type {\n  ElementRef } from '../../../../lib/teact/teact';\nimport {\n  useEffect, useLayoutEffect, useRef,\n} from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { ensureRLottie } from '../../../../lib/rlottie/RLottie.async';\nimport { selectCustomEmoji, selectIsAlwaysHighPriorityEmoji } from '../../../../global/selectors';\nimport AbsoluteVideo from '../../../../util/AbsoluteVideo';\nimport {\n  addCustomEmojiInputRenderCallback,\n  getCustomEmojiMediaDataForInput,\n} from '../../../../util/emoji/customEmojiManager';\nimport { round } from '../../../../util/math';\nimport { hexToRgb } from '../../../../util/switchTheme';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useColorFilter from '../../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../../hooks/stickers/useDynamicColorListener';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\nimport useBackgroundMode from '../../../../hooks/window/useBackgroundMode';\nimport useDevicePixelRatio from '../../../../hooks/window/useDevicePixelRatio';\n\nconst SIZE = 1.25 * REM;\nconst THROTTLE_MS = 300;\n\ntype CustomEmojiPlayer = {\n  play: () => void;\n  pause: () => void;\n  destroy: () => void;\n  updatePosition: (x: number, y: number) => void;\n};\n\nexport default function useInputCustomEmojis(\n  getHtml: Signal<string>,\n  inputRef: ElementRef<HTMLDivElement>,\n  sharedCanvasRef: ElementRef<HTMLCanvasElement>,\n  sharedCanvasHqRef: ElementRef<HTMLCanvasElement>,\n  absoluteContainerRef: ElementRef<HTMLElement>,\n  prefixId: string,\n  canPlayAnimatedEmojis: boolean,\n  isReady?: boolean,\n  isActive?: boolean,\n) {\n  const customColor = useDynamicColorListener(inputRef, undefined, !isReady);\n  const colorFilter = useColorFilter(customColor, true);\n  const dpr = useDevicePixelRatio();\n  const playersById = useRef<Map<string, CustomEmojiPlayer>>(new Map());\n\n  const clearPlayers = useLastCallback((ids: string[]) => {\n    ids.forEach((id) => {\n      const player = playersById.current.get(id);\n      if (player) {\n        player.destroy();\n        playersById.current.delete(id);\n      }\n    });\n  });\n\n  const synchronizeElements = useLastCallback(() => {\n    if (!isReady || !inputRef.current || !sharedCanvasRef.current || !sharedCanvasHqRef.current) return;\n\n    const global = getGlobal();\n    const playerIdsToClear = new Set(playersById.current.keys());\n    const customEmojis = Array.from(inputRef.current.querySelectorAll<HTMLElement>('.custom-emoji'));\n\n    customEmojis.forEach((element) => {\n      if (!element.dataset.uniqueId) {\n        return;\n      }\n      const playerId = `${prefixId}${element.dataset.uniqueId}${customColor || ''}`;\n      const documentId = element.dataset.documentId!;\n\n      playerIdsToClear.delete(playerId);\n\n      const mediaUrl = getCustomEmojiMediaDataForInput(documentId);\n      if (!mediaUrl) {\n        return;\n      }\n\n      const canvasBounds = sharedCanvasRef.current!.getBoundingClientRect();\n      const elementBounds = element.getBoundingClientRect();\n      const x = round((elementBounds.left - canvasBounds.left) / canvasBounds.width, 4);\n      const y = round((elementBounds.top - canvasBounds.top) / canvasBounds.height, 4);\n\n      if (playersById.current.has(playerId)) {\n        const player = playersById.current.get(playerId)!;\n        player.updatePosition(x, y);\n        return;\n      }\n\n      const customEmoji = selectCustomEmoji(global, documentId);\n      if (!customEmoji) {\n        return;\n      }\n      const isHq = customEmoji?.stickerSetInfo && selectIsAlwaysHighPriorityEmoji(global, customEmoji.stickerSetInfo);\n      const renderId = [\n        prefixId, documentId, customColor, dpr,\n      ].filter(Boolean).join('_');\n\n      createPlayer({\n        customEmoji,\n        sharedCanvasRef,\n        sharedCanvasHqRef,\n        absoluteContainerRef,\n        renderId,\n        viewId: playerId,\n        mediaUrl,\n        isHq,\n        position: { x, y },\n        textColor: customColor,\n        colorFilter,\n      }).then((animation) => {\n        if (canPlayAnimatedEmojis) {\n          animation.play();\n        }\n\n        playersById.current.set(playerId, animation);\n      });\n    });\n\n    clearPlayers(Array.from(playerIdsToClear));\n  });\n\n  useEffect(() => {\n    return addCustomEmojiInputRenderCallback(synchronizeElements);\n  }, [synchronizeElements]);\n\n  useEffect(() => {\n    const activePlayersById = playersById.current;\n    // Always clear players on unmount\n    return () => {\n      clearPlayers(Array.from(activePlayersById.keys()));\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!getHtml() || !inputRef.current || !sharedCanvasRef.current || !isActive || !isReady) {\n      clearPlayers(Array.from(playersById.current.keys()));\n      return;\n    }\n\n    // Wait one frame for DOM to update\n    requestMeasure(() => {\n      synchronizeElements();\n    });\n  }, [getHtml, synchronizeElements, inputRef, clearPlayers, sharedCanvasRef, isActive, isReady]);\n\n  useLayoutEffect(() => {\n    document.documentElement.style.setProperty('--input-custom-emoji-filter', colorFilter || 'none');\n  }, [colorFilter]);\n\n  useEffectWithPrevDeps(([prevCustomColor]) => {\n    if (prevCustomColor !== undefined && customColor !== prevCustomColor) {\n      synchronizeElements();\n    }\n  }, [customColor, synchronizeElements]);\n\n  const throttledSynchronizeElements = useThrottledCallback(\n    synchronizeElements,\n    [synchronizeElements],\n    THROTTLE_MS,\n    false,\n  );\n  useResizeObserver(sharedCanvasRef, throttledSynchronizeElements);\n  useEffectWithPrevDeps(([prevDpr]) => {\n    if (dpr !== prevDpr) {\n      clearPlayers(Array.from(playersById.current.keys()));\n      synchronizeElements();\n    }\n  }, [dpr, synchronizeElements]);\n\n  const freezeAnimation = useLastCallback(() => {\n    playersById.current.forEach((player) => {\n      player.pause();\n    });\n  });\n\n  const unfreezeAnimation = useLastCallback(() => {\n    if (!canPlayAnimatedEmojis) {\n      return;\n    }\n\n    playersById.current?.forEach((player) => {\n      player.play();\n    });\n  });\n\n  const unfreezeAnimationOnRaf = useLastCallback(() => {\n    requestMeasure(unfreezeAnimation);\n  });\n\n  // Pausing frame may not happen in background,\n  // so we need to make sure it happens right after focusing,\n  // then we can play again.\n  useBackgroundMode(freezeAnimation, unfreezeAnimationOnRaf);\n}\n\nasync function createPlayer({\n  customEmoji,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  absoluteContainerRef,\n  renderId,\n  viewId,\n  mediaUrl,\n  position,\n  isHq,\n  textColor,\n  colorFilter,\n}: {\n  customEmoji: ApiSticker;\n  sharedCanvasRef: ElementRef<HTMLCanvasElement>;\n  sharedCanvasHqRef: ElementRef<HTMLCanvasElement>;\n  absoluteContainerRef: ElementRef<HTMLElement>;\n  renderId: string;\n  viewId: string;\n  mediaUrl: string;\n  position: { x: number; y: number };\n  isHq?: boolean;\n  textColor?: string;\n  colorFilter?: string;\n}): Promise<CustomEmojiPlayer> {\n  if (customEmoji.isLottie) {\n    const color = customEmoji.shouldUseTextColor && textColor ? hexToRgb(textColor) : undefined;\n    const RLottie = await ensureRLottie();\n    const lottie = RLottie.init(\n      mediaUrl,\n      isHq ? sharedCanvasHqRef.current! : sharedCanvasRef.current!,\n      renderId,\n      {\n        size: SIZE,\n        coords: position,\n        isLowPriority: !isHq,\n      },\n      viewId,\n      color ? [color.r, color.g, color.b] : undefined,\n    );\n\n    return {\n      play: () => lottie.play(),\n      pause: () => lottie.pause(),\n      destroy: () => lottie.removeView(viewId),\n      updatePosition: (x: number, y: number) => {\n        return lottie.setSharedCanvasCoords(viewId, { x, y });\n      },\n    };\n  }\n\n  if (customEmoji.isVideo) {\n    const style = customEmoji.shouldUseTextColor && colorFilter ? `filter: ${colorFilter};` : undefined;\n    const absoluteVideo = new AbsoluteVideo(\n      mediaUrl,\n      absoluteContainerRef.current!,\n      { size: SIZE, position, style },\n    );\n    return {\n      play: () => absoluteVideo.play(),\n      pause: () => absoluteVideo.pause(),\n      destroy: () => absoluteVideo.destroy(),\n      updatePosition: (x: number, y: number) => absoluteVideo.updatePosition({ x, y }),\n    };\n  }\n\n  throw new Error('Unsupported custom emoji type');\n}\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './TextFormatter';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst TextFormatterAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const TextFormatter = useModuleLoader(Bundles.Extra, 'TextFormatter', !isOpen);\n\n  return TextFormatter ? <TextFormatter {...props} /> : undefined;\n};\n\nexport default TextFormatterAsync;\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef, FC, TeactNode } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiInputMessageReplyInfo } from '../../../api/types';\nimport type { SharedSettings } from '../../../global/types';\nimport type {\n  IAnchorPosition, MessageListType, ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { requestForcedReflow, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectCanPlayAnimatedEmojis, selectDraft, selectIsInSelectMode } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport {\n  IS_ANDROID, IS_EMOJI_SUPPORTED, IS_IOS, IS_TOUCH_ENV,\n} from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureKeyboardListeners from '../../../util/captureKeyboardListeners';\nimport { getIsDirectTextInputDisabled } from '../../../util/directInputManager';\nimport parseEmojiOnlyString from '../../../util/emoji/parseEmojiOnlyString';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport { debounce, fastRaf } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\nimport { isSelectionInsideInput } from './helpers/selection';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useInputCustomEmojis from './hooks/useInputCustomEmojis';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport TextTimer from '../../ui/TextTimer';\nimport TextFormatter from './TextFormatter.async';\n\nconst CONTEXT_MENU_CLOSE_DELAY_MS = 100;\nconst TRANSITION_DURATION_FACTOR = 50;\n\nconst SCROLLER_CLASS = 'input-scroller';\nconst INPUT_WRAPPER_CLASS = 'message-input-wrapper';\n\ntype OwnProps = {\n  ref?: ElementRef<HTMLDivElement>;\n  id: string;\n  chatId: string;\n  threadId: ThreadId;\n  isAttachmentModalInput?: boolean;\n  isStoryInput?: boolean;\n  customEmojiPrefix: string;\n  editableInputId?: string;\n  isReady: boolean;\n  isActive: boolean;\n  getHtml: Signal<string>;\n  placeholder: TeactNode | string;\n  timedPlaceholderLangKey?: string;\n  timedPlaceholderDate?: number;\n  forcedPlaceholder?: string;\n  noFocusInterception?: boolean;\n  canAutoFocus: boolean;\n  shouldSuppressFocus?: boolean;\n  shouldSuppressTextFormatter?: boolean;\n  canSendPlainText?: boolean;\n  onUpdate: (html: string) => void;\n  onSuppressedFocus?: () => void;\n  onSend: () => void;\n  onScroll?: (event: React.UIEvent<HTMLElement>) => void;\n  captionLimit?: number;\n  onFocus?: NoneToVoidFunction;\n  onBlur?: NoneToVoidFunction;\n  isNeedPremium?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  replyInfo?: ApiInputMessageReplyInfo;\n  isSelectModeActive?: boolean;\n  messageSendKeyCombo?: SharedSettings['messageSendKeyCombo'];\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst MAX_ATTACHMENT_MODAL_INPUT_HEIGHT = 160;\nconst MAX_STORY_MODAL_INPUT_HEIGHT = 128;\nconst TAB_INDEX_PRIORITY_TIMEOUT = 2000;\n// Heuristics allowing the user to make a triple click\nconst SELECTION_RECALCULATE_DELAY_MS = 260;\nconst TEXT_FORMATTER_SAFE_AREA_PX = 140;\n// For some reason Safari inserts `<br>` after user removes text from input\nconst SAFARI_BR = '<br>';\nconst IGNORE_KEYS = [\n  'Esc', 'Escape', 'Enter', 'PageUp', 'PageDown', 'Meta', 'Alt', 'Ctrl', 'ArrowDown', 'ArrowUp', 'Control', 'Shift',\n];\n\nfunction clearSelection() {\n  const selection = window.getSelection();\n  if (!selection) {\n    return;\n  }\n\n  if (selection.removeAllRanges) {\n    selection.removeAllRanges();\n  } else if (selection.empty) {\n    selection.empty();\n  }\n}\n\nconst MessageInput: FC<OwnProps & StateProps> = ({\n  ref,\n  id,\n  chatId,\n  captionLimit,\n  isAttachmentModalInput,\n  isStoryInput,\n  customEmojiPrefix,\n  editableInputId,\n  isReady,\n  isActive,\n  getHtml,\n  placeholder,\n  timedPlaceholderLangKey,\n  timedPlaceholderDate,\n  forcedPlaceholder,\n  canSendPlainText,\n  canAutoFocus,\n  noFocusInterception,\n  shouldSuppressFocus,\n  shouldSuppressTextFormatter,\n  replyInfo,\n  isSelectModeActive,\n  canPlayAnimatedEmojis,\n  messageSendKeyCombo,\n  onUpdate,\n  onSuppressedFocus,\n  onSend,\n  onScroll,\n  onFocus,\n  onBlur,\n  isNeedPremium,\n  messageListType,\n}) => {\n  const {\n    editLastMessage,\n    replyToNextMessage,\n    showAllowedMessageTypesNotification,\n    openPremiumModal,\n  } = getActions();\n\n  let inputRef = useRef<HTMLDivElement>();\n  if (ref) {\n    inputRef = ref;\n  }\n\n  const selectionTimeoutRef = useRef<number>();\n  const cloneRef = useRef<HTMLDivElement>();\n  const scrollerCloneRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n  const absoluteContainerRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const isContextMenuOpenRef = useRef(false);\n  const [isTextFormatterOpen, openTextFormatter, closeTextFormatter] = useFlag();\n  const [textFormatterAnchorPosition, setTextFormatterAnchorPosition] = useState<IAnchorPosition>();\n  const [selectedRange, setSelectedRange] = useState<Range>();\n  const [isTextFormatterDisabled, setIsTextFormatterDisabled] = useState<boolean>(false);\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const [shouldDisplayTimer, setShouldDisplayTimer] = useState(false);\n\n  useEffect(() => {\n    setShouldDisplayTimer(Boolean(timedPlaceholderLangKey && timedPlaceholderDate));\n  }, [timedPlaceholderDate, timedPlaceholderLangKey]);\n\n  const handleTimerEnd = useLastCallback(() => {\n    setShouldDisplayTimer(false);\n  });\n\n  useInputCustomEmojis(\n    getHtml,\n    inputRef,\n    sharedCanvasRef,\n    sharedCanvasHqRef,\n    absoluteContainerRef,\n    customEmojiPrefix,\n    canPlayAnimatedEmojis,\n    isReady,\n    isActive,\n  );\n\n  const maxInputHeight = isAttachmentModalInput\n    ? MAX_ATTACHMENT_MODAL_INPUT_HEIGHT\n    : isStoryInput ? MAX_STORY_MODAL_INPUT_HEIGHT : (isMobile ? 256 : 416);\n  const updateInputHeight = useLastCallback((willSend = false) => {\n    // Defer to avoid animation/layout conflicts during DOM updates\n    fastRaf(() => {\n      requestForcedReflow(() => {\n        const scroller = inputRef.current!.closest<HTMLDivElement>(`.${SCROLLER_CLASS}`)!;\n        const currentHeight = Number(scroller.style.height.replace('px', ''));\n        const clone = scrollerCloneRef.current!;\n        const { scrollHeight } = clone;\n        const newHeight = Math.min(scrollHeight, maxInputHeight);\n\n        if (newHeight === currentHeight) {\n          return undefined;\n        }\n\n        const isOverflown = scrollHeight > maxInputHeight;\n\n        function exec() {\n          const transitionDuration = Math.round(\n            TRANSITION_DURATION_FACTOR * Math.log(Math.abs(newHeight - currentHeight)),\n          );\n          scroller.style.height = `${newHeight}px`;\n          scroller.style.transitionDuration = `${transitionDuration}ms`;\n          scroller.classList.toggle('overflown', isOverflown);\n        }\n\n        if (willSend) {\n          // Delay to next frame to sync with sending animation\n          requestMutation(exec);\n          return undefined;\n        } else {\n          return exec;\n        }\n      });\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!isAttachmentModalInput) return;\n    updateInputHeight(false);\n  }, [isAttachmentModalInput, updateInputHeight]);\n\n  const htmlRef = useRef(getHtml());\n  useLayoutEffect(() => {\n    const html = isActive ? getHtml() : '';\n\n    if (!isActive && inputRef.current) {\n      inputRef.current.blur();\n    }\n\n    if (html !== inputRef.current!.innerHTML) {\n      inputRef.current!.innerHTML = html;\n    }\n\n    if (html !== cloneRef.current!.innerHTML) {\n      cloneRef.current!.innerHTML = html;\n    }\n\n    if (html !== htmlRef.current) {\n      htmlRef.current = html;\n\n      updateInputHeight(!html);\n    }\n  }, [getHtml, isActive, updateInputHeight]);\n\n  const chatIdRef = useRef(chatId);\n  chatIdRef.current = chatId;\n  const focusInput = useLastCallback(() => {\n    if (!inputRef.current || isNeedPremium) {\n      return;\n    }\n\n    focusEditableElement(inputRef.current);\n  });\n\n  const handleCloseTextFormatter = useLastCallback(() => {\n    closeTextFormatter();\n    clearSelection();\n  });\n\n  function checkSelection() {\n    // Disable the formatter on iOS devices for now.\n    if (IS_IOS) {\n      return false;\n    }\n\n    const selection = window.getSelection();\n    if (!selection || !selection.rangeCount || isContextMenuOpenRef.current) {\n      closeTextFormatter();\n      if (IS_ANDROID) {\n        setIsTextFormatterDisabled(false);\n      }\n      return false;\n    }\n\n    const selectionRange = selection.getRangeAt(0);\n    const selectedText = selectionRange.toString().trim();\n    if (\n      shouldSuppressTextFormatter\n      || !isSelectionInsideInput(selectionRange, editableInputId || EDITABLE_INPUT_ID)\n      || !selectedText\n      || parseEmojiOnlyString(selectedText)\n      || !selectionRange.START_TO_END\n    ) {\n      closeTextFormatter();\n      return false;\n    }\n\n    return true;\n  }\n\n  function processSelection() {\n    if (!checkSelection()) {\n      return;\n    }\n\n    if (isTextFormatterDisabled) {\n      return;\n    }\n\n    const selectionRange = window.getSelection()!.getRangeAt(0);\n    const selectionRect = selectionRange.getBoundingClientRect();\n    const scrollerRect = inputRef.current!.closest<HTMLDivElement>(`.${SCROLLER_CLASS}`)!.getBoundingClientRect();\n\n    let x = (selectionRect.left + selectionRect.width / 2) - scrollerRect.left;\n\n    if (x < TEXT_FORMATTER_SAFE_AREA_PX) {\n      x = TEXT_FORMATTER_SAFE_AREA_PX;\n    } else if (x > scrollerRect.width - TEXT_FORMATTER_SAFE_AREA_PX) {\n      x = scrollerRect.width - TEXT_FORMATTER_SAFE_AREA_PX;\n    }\n\n    setTextFormatterAnchorPosition({\n      x,\n      y: selectionRect.top - scrollerRect.top,\n    });\n\n    setSelectedRange(selectionRange);\n    openTextFormatter();\n  }\n\n  function processSelectionWithTimeout() {\n    if (selectionTimeoutRef.current) {\n      window.clearTimeout(selectionTimeoutRef.current);\n    }\n    // Small delay to allow browser properly recalculate selection\n    selectionTimeoutRef.current = window.setTimeout(processSelection, SELECTION_RECALCULATE_DELAY_MS);\n  }\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (e.button !== 2) {\n      const listenerEl = e.currentTarget.closest(`.${INPUT_WRAPPER_CLASS}`) || e.target;\n\n      listenerEl.addEventListener('mouseup', processSelectionWithTimeout, { once: true });\n      return;\n    }\n\n    if (isContextMenuOpenRef.current) {\n      return;\n    }\n\n    isContextMenuOpenRef.current = true;\n\n    function handleCloseContextMenu(e2: KeyboardEvent | MouseEvent) {\n      if (e2 instanceof KeyboardEvent && e2.key !== 'Esc' && e2.key !== 'Escape') {\n        return;\n      }\n\n      setTimeout(() => {\n        isContextMenuOpenRef.current = false;\n      }, CONTEXT_MENU_CLOSE_DELAY_MS);\n\n      window.removeEventListener('keydown', handleCloseContextMenu);\n      window.removeEventListener('mousedown', handleCloseContextMenu);\n    }\n\n    document.addEventListener('mousedown', handleCloseContextMenu);\n    document.addEventListener('keydown', handleCloseContextMenu);\n  }\n\n  function handleKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    // https://levelup.gitconnected.com/javascript-events-handlers-keyboard-and-load-events-1b3e46a6b0c3#1960\n    const { isComposing } = e;\n\n    const html = getHtml();\n    if (!isComposing && !html && (e.metaKey || e.ctrlKey)) {\n      const targetIndexDelta = e.key === 'ArrowDown' ? 1 : e.key === 'ArrowUp' ? -1 : undefined;\n      if (targetIndexDelta) {\n        e.preventDefault();\n\n        replyToNextMessage({ targetIndexDelta });\n        return;\n      }\n    }\n\n    if (!isComposing && e.key === 'Enter' && !e.shiftKey) {\n      if (\n        !isMobileDevice\n        && (\n          (messageSendKeyCombo === 'enter' && !e.shiftKey)\n          || (messageSendKeyCombo === 'ctrl-enter' && (e.ctrlKey || e.metaKey))\n        )\n      ) {\n        e.preventDefault();\n\n        closeTextFormatter();\n        onSend();\n      }\n    } else if (!isComposing && e.key === 'ArrowUp' && !html && !e.metaKey && !e.ctrlKey && !e.altKey) {\n      e.preventDefault();\n      editLastMessage();\n    } else {\n      e.target.addEventListener('keyup', processSelectionWithTimeout, { once: true });\n    }\n  }\n\n  function handleChange(e: ChangeEvent<HTMLDivElement>) {\n    const { innerHTML, textContent } = e.currentTarget;\n\n    onUpdate(innerHTML === SAFARI_BR ? '' : innerHTML);\n\n    // Reset focus on the input to remove any active styling when input is cleared\n    if (\n      !IS_TOUCH_ENV\n      && (!textContent || !textContent.length)\n      // When emojis are not supported, innerHTML contains an emoji img tag that doesn't exist in the textContext\n      && !(!IS_EMOJI_SUPPORTED && innerHTML.includes('emoji-small'))\n      && !(innerHTML.includes('custom-emoji'))\n    ) {\n      const selection = window.getSelection()!;\n      if (selection) {\n        inputRef.current!.blur();\n        selection.removeAllRanges();\n        focusEditableElement(inputRef.current!, true);\n      }\n    }\n  }\n\n  function handleAndroidContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (!checkSelection()) {\n      return;\n    }\n\n    setIsTextFormatterDisabled(!isTextFormatterDisabled);\n\n    if (!isTextFormatterDisabled) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      processSelection();\n    } else {\n      closeTextFormatter();\n    }\n  }\n\n  function handleClick() {\n    if (isAttachmentModalInput || canSendPlainText || (isStoryInput && isNeedPremium)) return;\n    showAllowedMessageTypesNotification({ chatId, messageListType });\n  }\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    if (canAutoFocus) {\n      focusInput();\n    }\n  }, [chatId, focusInput, replyInfo, canAutoFocus]);\n\n  useEffect(() => {\n    if (\n      !chatId\n      || editableInputId !== EDITABLE_INPUT_ID\n      || noFocusInterception\n      || isMobileDevice\n      || isSelectModeActive\n    ) {\n      return undefined;\n    }\n\n    const handleDocumentKeyDown = (e: KeyboardEvent) => {\n      if (getIsDirectTextInputDisabled()) {\n        return;\n      }\n\n      const { key } = e;\n      const target = e.target as HTMLElement | undefined;\n\n      if (!target || IGNORE_KEYS.includes(key)) {\n        return;\n      }\n\n      const input = inputRef.current!;\n      const isSelectionCollapsed = document.getSelection()?.isCollapsed;\n\n      if (\n        ((key.startsWith('Arrow') || (e.shiftKey && key === 'Shift')) && !isSelectionCollapsed)\n        || (e.code === 'KeyC' && (e.ctrlKey || e.metaKey) && target.tagName !== 'INPUT')\n      ) {\n        return;\n      }\n\n      if (\n        input\n        && target !== input\n        && target.tagName !== 'INPUT'\n        && target.tagName !== 'TEXTAREA'\n        && !target.isContentEditable\n      ) {\n        focusEditableElement(input, true, true);\n\n        const newEvent = new KeyboardEvent(e.type, e as any);\n        input.dispatchEvent(newEvent);\n      }\n    };\n\n    document.addEventListener('keydown', handleDocumentKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleDocumentKeyDown, true);\n    };\n  }, [chatId, editableInputId, isMobileDevice, isSelectModeActive, noFocusInterception]);\n\n  useEffect(() => {\n    const captureFirstTab = debounce((e: KeyboardEvent) => {\n      if (e.key === 'Tab' && !getIsDirectTextInputDisabled()) {\n        e.preventDefault();\n        requestMutation(focusInput);\n      }\n    }, TAB_INDEX_PRIORITY_TIMEOUT, true, false);\n\n    return captureKeyboardListeners({ onTab: captureFirstTab });\n  }, [focusInput]);\n\n  useEffect(() => {\n    const input = inputRef.current!;\n\n    function suppressFocus() {\n      input.blur();\n    }\n\n    if (shouldSuppressFocus) {\n      input.addEventListener('focus', suppressFocus);\n    }\n\n    return () => {\n      input.removeEventListener('focus', suppressFocus);\n    };\n  }, [shouldSuppressFocus]);\n\n  const isTouched = useDerivedState(() => Boolean(isActive && getHtml()), [isActive, getHtml]);\n\n  const className = buildClassName(\n    'form-control allow-selection',\n    isTouched && 'touched',\n    shouldSuppressFocus && 'focus-disabled',\n  );\n\n  const inputScrollerContentClass = buildClassName('input-scroller-content', isNeedPremium && 'is-need-premium');\n  const placeholderAriaLabel = typeof placeholder === 'string' ? placeholder : undefined;\n\n  return (\n    <div id={id} onClick={shouldSuppressFocus ? onSuppressedFocus : undefined} dir={oldLang.isRtl ? 'rtl' : undefined}>\n      <div\n        className={buildClassName('custom-scroll', SCROLLER_CLASS, isNeedPremium && 'is-need-premium')}\n        onScroll={onScroll}\n        onClick={!isAttachmentModalInput && !canSendPlainText ? handleClick : undefined}\n      >\n        <div className={inputScrollerContentClass}>\n          <div\n            ref={inputRef}\n            id={editableInputId || EDITABLE_INPUT_ID}\n            className={className}\n            contentEditable={isAttachmentModalInput || canSendPlainText}\n            role=\"textbox\"\n            dir=\"auto\"\n            spellCheck={IS_TAURI ? false : undefined}\n            tabIndex={0}\n            onClick={focusInput}\n            onChange={handleChange}\n            onKeyDown={handleKeyDown}\n            onMouseDown={handleMouseDown}\n            onContextMenu={IS_ANDROID ? handleAndroidContextMenu : undefined}\n            onTouchCancel={IS_ANDROID ? processSelectionWithTimeout : undefined}\n            aria-label={placeholderAriaLabel}\n            onFocus={!isNeedPremium ? onFocus : undefined}\n            onBlur={!isNeedPremium ? onBlur : undefined}\n          />\n          {!forcedPlaceholder && (\n            <span\n              className={buildClassName(\n                'placeholder-text',\n                !isAttachmentModalInput && !canSendPlainText && 'with-icon',\n                isNeedPremium && 'is-need-premium',\n              )}\n              dir=\"auto\"\n            >\n              {!isAttachmentModalInput && !canSendPlainText\n                && <Icon name=\"lock-badge\" className=\"placeholder-icon\" />}\n              {shouldDisplayTimer ? (\n                <TextTimer langKey={timedPlaceholderLangKey!} endsAt={timedPlaceholderDate!} onEnd={handleTimerEnd} />\n              ) : placeholder}\n              {isStoryInput && isNeedPremium && (\n                <Button className=\"unlock-button\" size=\"tiny\" color=\"adaptive\" onClick={handleOpenPremiumModal}>\n                  {oldLang('StoryRepliesLockedButton')}\n                </Button>\n              )}\n            </span>\n          )}\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          <div ref={absoluteContainerRef} className=\"absolute-video-container\" />\n        </div>\n      </div>\n      <div\n        ref={scrollerCloneRef}\n        className={buildClassName('custom-scroll',\n          SCROLLER_CLASS,\n          'clone',\n          isNeedPremium && 'is-need-premium')}\n      >\n        <div className={inputScrollerContentClass}>\n          <div ref={cloneRef} className={buildClassName(className, 'clone')} dir=\"auto\" />\n        </div>\n      </div>\n      {captionLimit !== undefined && (\n        <div className=\"max-length-indicator\" dir=\"auto\">\n          {captionLimit}\n        </div>\n      )}\n      <TextFormatter\n        isOpen={isTextFormatterOpen}\n        anchorPosition={textFormatterAnchorPosition}\n        selectedRange={selectedRange}\n        setSelectedRange={setSelectedRange}\n        onClose={handleCloseTextFormatter}\n      />\n      {forcedPlaceholder && <span className=\"forced-placeholder\">{renderText(forcedPlaceholder)}</span>}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }: OwnProps): Complete<StateProps> => {\n    const { messageSendKeyCombo } = selectSharedSettings(global);\n\n    return {\n      messageSendKeyCombo,\n      replyInfo: chatId && threadId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined,\n      isSelectModeActive: selectIsInSelectMode(global),\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(MessageInput));\n","import { useMemo } from '../../../../lib/teact/teact';\n\nexport enum ChatAnimationTypes {\n  Move,\n  Opacity,\n  None,\n}\n\nexport function useChatAnimationType<T extends number | string>(orderDiffById: Record<T, number>) {\n  return useMemo(() => {\n    const orderDiffs = Object.values<number>(orderDiffById);\n    const numberOfUp = orderDiffs.filter((diff) => diff < 0).length;\n    const numberOfDown = orderDiffs.filter((diff) => diff > 0).length;\n\n    return (chatId: T): ChatAnimationTypes => {\n      const orderDiff = orderDiffById[chatId];\n      if (orderDiff === 0) {\n        return ChatAnimationTypes.None;\n      }\n\n      if (\n        orderDiff === Infinity\n        || orderDiff === -Infinity\n        || (numberOfUp <= numberOfDown && orderDiff < 0)\n        || (numberOfDown < numberOfUp && orderDiff > 0)\n      ) {\n        return ChatAnimationTypes.Opacity;\n      }\n\n      return ChatAnimationTypes.Move;\n    };\n  }, [orderDiffById]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiTypingStatus, ApiUser } from '../../api/types';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport DotAnimation from './DotAnimation';\n\nimport './TypingStatus.scss';\n\ntype OwnProps = {\n  typingStatus: ApiTypingStatus;\n};\n\ntype StateProps = {\n  typingUser?: ApiUser;\n};\n\nconst TypingStatus: FC<OwnProps & StateProps> = ({ typingStatus, typingUser }) => {\n  const lang = useOldLang();\n  const typingUserName = typingUser && !typingUser.isSelf && getUserFirstOrLastName(typingUser);\n  const content = lang(typingStatus.action)\n    // Fix for translation \"{user} is typing\"\n    .replace('{user}', '')\n    .replace('{emoji}', typingStatus.emoji || '').trim();\n\n  return (\n    <p className=\"typing-status\" dir={lang.isRtl ? 'rtl' : 'auto'}>\n      {typingUserName && (\n        <span className=\"sender-name\" dir=\"auto\">{renderText(typingUserName)}</span>\n      )}\n      <DotAnimation content={content} />\n    </p>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { typingStatus }): Complete<StateProps> => {\n    if (!typingStatus.userId) {\n      return { typingUser: undefined };\n    }\n\n    const typingUser = selectUser(global, typingStatus.userId);\n\n    return { typingUser };\n  },\n)(TypingStatus));\n","import type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport './DotAnimation.scss';\n\ntype OwnProps = {\n  content: string;\n  className?: string;\n};\n\nconst DotAnimation: FC<OwnProps> = ({ content, className }) => {\n  const lang = useOldLang();\n  return (\n    <span className={buildClassName('DotAnimation', className)} dir={lang.isRtl ? 'rtl' : 'auto'}>\n      {renderText(content)}\n      <span className=\"ellipsis\" />\n    </span>\n  );\n};\n\nexport default DotAnimation;\n","import { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageHtmlId,\n  getMessageIsSpoiler,\n  getMessageVideo,\n  getVideoMediaHash,\n} from '../../global/helpers';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport useMessageMediaHash from '../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../hooks/media/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  idPrefix?: string;\n  isProtected?: boolean;\n  canAutoPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick?: (messageId: number, chatId: string) => void;\n};\n\nconst Media = ({\n  message,\n  idPrefix = 'shared-media',\n  isProtected,\n  canAutoPlay,\n  observeIntersection,\n  onClick,\n}: OwnProps) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const [isHovering, markMouseOver, markMouseOut] = useFlag();\n\n  const thumbDataUri = useThumbnail(message);\n  const mediaHash = useMessageMediaHash(message, 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash, !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = getMessageVideo(message);\n  const fullGiftHash = video?.isGif ? getVideoMediaHash(video, 'full') : undefined;\n  const fullGifBlobUrl = useMedia(fullGiftHash, !isIntersecting);\n\n  const hasSpoiler = getMessageIsSpoiler(message);\n  const [isSpoilerShown, , hideSpoiler] = useFlag(hasSpoiler);\n\n  const handleClick = useLastCallback(() => {\n    hideSpoiler();\n    onClick!(message.id, message.chatId);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${getMessageHtmlId(message.id)}`}\n      className=\"Media scroll-item\"\n      onClick={onClick ? handleClick : undefined}\n      onMouseOver={!IS_TOUCH_ENV ? markMouseOver : undefined}\n      onMouseOut={!IS_TOUCH_ENV ? markMouseOut : undefined}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {fullGifBlobUrl ? (\n        <OptimizedVideo\n          canPlay={isIntersecting && !hasSpoiler && isHovering && Boolean(canAutoPlay)}\n          src={fullGifBlobUrl}\n          className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n          muted\n          loop\n          playsInline\n          draggable={false}\n          disablePictureInPicture\n          onContextMenu={isProtected ? stopEvent : undefined}\n        />\n      ) : (\n        <img\n          src={mediaBlobUrl}\n          className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n          decoding=\"async\"\n          onContextMenu={isProtected ? stopEvent : undefined}\n        />\n      )}\n      {hasSpoiler && (\n        <MediaSpoiler\n          thumbDataUri={mediaBlobUrl || thumbDataUri}\n          isVisible={isSpoilerShown}\n          className=\"media-spoiler\"\n        />\n      )}\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(Media);\n","import { memo } from '../../lib/teact/teact';\n\nimport type { ApiMessage, ApiMessageOutgoingStatus } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatPastTimeShort } from '../../util/dates/dateFormat';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport MessageOutgoingStatus from './MessageOutgoingStatus';\n\nimport './LastMessageMeta.scss';\n\ntype OwnProps = {\n  className?: string;\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  draftDate?: number;\n};\n\nconst LastMessageMeta = ({\n  className, message, outgoingStatus, draftDate,\n}: OwnProps) => {\n  const lang = useOldLang();\n\n  const shouldUseDraft = draftDate && draftDate > message.date;\n  return (\n    <div className={buildClassName('LastMessageMeta', className)}>\n      {outgoingStatus && !shouldUseDraft && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      <span className=\"time\">\n        {formatPastTimeShort(lang, (shouldUseDraft ? draftDate : message.date) * 1000)}\n      </span>\n    </div>\n  );\n};\n\nexport default memo(LastMessageMeta);\n","import type { ElementRef } from '../../lib/teact/teact';\nimport { useEffect, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { IS_MOBILE } from '../../util/browser/windowEnvironment';\nimport useLastCallback from '../useLastCallback';\nimport useOldLang from '../useOldLang';\n\nconst NOTIFICATION_DURATION = 8000;\n\nexport default function useUnsupportedMedia(\n  ref: ElementRef<HTMLVideoElement>, shouldDisableNotification?: boolean, isDisabled?: boolean,\n) {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n  const [isUnsupported, setIsUnsupported] = useState(false);\n\n  const handleUnsupported = useLastCallback(() => {\n    setIsUnsupported(true);\n    if (shouldDisableNotification) return;\n\n    showNotification({\n      message: IS_MOBILE ? lang('Video.Unsupported.Mobile') : lang('Video.Unsupported.Desktop'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const onError = useLastCallback((event: Event) => {\n    const target = event.currentTarget as HTMLVideoElement;\n    const { error } = target;\n    if (!error) return;\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaError/code\n    if (error.code === 3 || error.code === 4) {\n      handleUnsupported();\n    }\n  });\n\n  const onCanPlay = useLastCallback((event: Event) => {\n    const target = event.currentTarget as HTMLVideoElement;\n\n    if (!target.videoHeight || !target.videoWidth) {\n      handleUnsupported();\n    }\n  });\n\n  useEffect(() => {\n    if (isDisabled) return undefined;\n\n    const { current } = ref;\n    if (!current) {\n      return undefined;\n    }\n\n    current.addEventListener('error', onError);\n    current.addEventListener('canplay', onCanPlay);\n\n    return () => {\n      current.removeEventListener('error', onError);\n      current.removeEventListener('canplay', onCanPlay);\n    };\n  }, [isDisabled, ref]);\n\n  return isUnsupported;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  useEffect, useLayoutEffect,\n  useRef, useSignal, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getMediaFormat,\n  getVideoMediaHash,\n  hasMessageTtl,\n} from '../../../global/helpers';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport safePlay from '../../../util/safePlay';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\n\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport Button from '../../ui/Button';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  className?: string;\n  canAutoLoad?: boolean;\n  isDownloading?: boolean;\n  origin?: 'oneTimeModal';\n  observeIntersection?: ObserveFn;\n  onStop?: NoneToVoidFunction;\n  onReadMedia?: NoneToVoidFunction;\n  onHideTranscription?: (isHidden: boolean) => void;\n  isTranscriptionError?: boolean;\n  canTranscribe?: boolean;\n  isTranscribed?: boolean;\n  isTranscriptionHidden?: boolean;\n  isTranscribing?: boolean;\n};\n\nconst PROGRESS_CENTER = ROUND_VIDEO_DIMENSIONS_PX / 2;\nconst PROGRESS_MARGIN = 6;\nconst PROGRESS_CIRCUMFERENCE = (PROGRESS_CENTER - PROGRESS_MARGIN) * 2 * Math.PI;\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  className,\n  canAutoLoad,\n  isDownloading,\n  origin,\n  observeIntersection,\n  onStop,\n  onReadMedia,\n  isTranscriptionError,\n  isTranscribed,\n  canTranscribe,\n  onHideTranscription,\n  isTranscriptionHidden,\n  isTranscribing,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const playerRef = useRef<HTMLVideoElement>();\n  const circleRef = useRef<SVGCircleElement>();\n\n  const { cancelMediaDownload, openOneTimeMediaModal, transcribeAudio } = getActions();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const video = message.content.video!;\n  const isMediaUnread = message.isMediaUnread;\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getVideoMediaHash(video, 'inline'),\n    !shouldLoad,\n    getMediaFormat(video, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getVideoMediaHash(video, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasTtl = hasMessageTtl(message);\n  const isInOneTimeModal = origin === 'oneTimeModal';\n  const shouldRenderSpoiler = hasTtl && !isInOneTimeModal;\n  const thumbDataUri = useThumbnail(message);\n  const hasThumb = Boolean(thumbDataUri);\n  const noThumb = !hasThumb || isPlayerReady || shouldRenderSpoiler;\n  const thumbRef = useBlurredMediaThumbRef(video, noThumb);\n  useMediaTransition({ hasMediaData: !noThumb, ref: thumbRef });\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n\n  const {\n    ref: spinnerRef,\n    shouldRender: shouldRenderSpinner,\n  } = useShowTransition({\n    isOpen: isTransferring,\n    noMountTransition: wasLoadDisabled,\n    withShouldRender: true,\n  });\n\n  const [isActivated, setIsActivated] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated || !circleRef.current) {\n      return;\n    }\n\n    const strokeDashOffset = PROGRESS_CIRCUMFERENCE - getThrottledProgress() * PROGRESS_CIRCUMFERENCE;\n    circleRef.current.setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const togglePlaying = useLastCallback(() => {\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n      setIsActivated(true);\n    }\n  });\n\n  useEffect(() => {\n    if (!isInOneTimeModal) {\n      return;\n    }\n    togglePlaying();\n  }, [isInOneTimeModal]);\n\n  const handleClick = useLastCallback((event) => {\n    if (event.target.closest('.transcribe-button')) {\n      return;\n    }\n\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      cancelMediaDownload({ media: video });\n      return;\n    }\n\n    if (hasTtl && !isInOneTimeModal) {\n      openOneTimeMediaModal({ message });\n      onReadMedia?.();\n      return;\n    }\n\n    togglePlaying();\n  });\n\n  useEffect(() => {\n    if (onReadMedia && isMediaUnread && isActivated) {\n      onReadMedia();\n    }\n  }, [isActivated, isMediaUnread, onReadMedia]);\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n    setProgress(playerEl.currentTime / playerEl.duration);\n    setCurrentTime(Math.floor(playerEl.currentTime));\n  });\n\n  const handleTranscribe = useLastCallback(() => {\n    transcribeAudio({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderPlayWrapper() {\n    return (\n      <div className=\"play-wrapper\">\n        <Button\n          color=\"dark\"\n          round\n          size=\"smaller\"\n          className=\"play\"\n          nonInteractive\n        >\n          <Icon name=\"play\" />\n        </Button>\n        <Icon name=\"view-once\" />\n      </div>\n    );\n  }\n\n  const handleButtonClick = useLastCallback(() => {\n    if ((isTranscribed || isTranscriptionError) && onHideTranscription) {\n      onHideTranscription(!isTranscriptionHidden);\n    } else if (!isTranscribing) {\n      handleTranscribe();\n    }\n  });\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('RoundVideo', 'media-inner', isInOneTimeModal && 'non-interactive', className)}\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {shouldRenderSpoiler && (\n            <MediaSpoiler\n              isVisible\n              thumbDataUri={thumbDataUri}\n              width={ROUND_VIDEO_DIMENSIONS_PX}\n              height={ROUND_VIDEO_DIMENSIONS_PX}\n              className=\"media-spoiler\"\n            />\n          )}\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay={!shouldRenderSpoiler}\n            disablePictureInPicture\n            muted={!isActivated}\n            defaultMuted\n            loop={!isActivated}\n            playsInline\n            isPriority\n            onEnded={isActivated ? onStop ?? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      {!shouldRenderSpoiler && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      )}\n      <div className=\"progress\">\n        {isActivated && (\n          <svg width={ROUND_VIDEO_DIMENSIONS_PX} height={ROUND_VIDEO_DIMENSIONS_PX}>\n            <circle\n              ref={circleRef}\n              cx={PROGRESS_CENTER}\n              cy={PROGRESS_CENTER}\n              r={PROGRESS_CENTER - PROGRESS_MARGIN}\n              className=\"progress-circle\"\n              transform={`rotate(-90, ${PROGRESS_CENTER}, ${PROGRESS_CENTER})`}\n              stroke-dasharray={PROGRESS_CIRCUMFERENCE}\n              stroke-dashoffset={PROGRESS_CIRCUMFERENCE}\n            />\n          </svg>\n        )}\n      </div>\n      {shouldRenderSpinner && (\n        <div ref={spinnerRef} className=\"media-loading\">\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {shouldRenderSpoiler && !shouldRenderSpinner && renderPlayWrapper()}\n      {!mediaData && !isLoadAllowed && (\n        <Icon name=\"download\" />\n      )}\n      {!isInOneTimeModal && (\n        <div\n          className={buildClassName(\n            'message-media-duration', isMediaUnread && 'unread',\n          )}\n        >\n          {isActivated ? formatMediaDuration(currentTime) : formatMediaDuration(video.duration)}\n          {(!isActivated || playerRef.current!.paused) && <Icon name=\"muted\" />}\n        </div>\n      )}\n      {canTranscribe && (\n        <Button\n          onClick={handleButtonClick}\n          className=\"transcribe-button\"\n        >\n          {isTranscribed || isTranscriptionError ? <Icon name=\"down\" /> : <Icon name=\"transcribe\" />}\n          {isTranscribing && (\n            <svg viewBox=\"0 0 32 24\" className=\"loading-svg\">\n              <rect\n                className=\"loading-rect\"\n                fill=\"transparent\"\n                width=\"32\"\n                height=\"24\"\n                stroke-width=\"3\"\n                stroke-linejoin=\"round\"\n                rx=\"6\"\n                ry=\"6\"\n                stroke=\"white\"\n                stroke-dashoffset=\"1\"\n                stroke-dasharray=\"32,68\"\n              />\n            </svg>\n          )}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import { type TeactNode } from '../../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton } from '../../../../api/types';\nimport type { LangFn } from '../../../../util/localization';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../../config';\nimport { replaceWithTeact } from '../../../../util/replaceWithTeact';\nimport renderText from '../../../common/helpers/renderText';\n\nimport { type OldLangFn } from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nexport default function renderKeyboardButtonText(lang: OldLangFn | LangFn, button: ApiKeyboardButton): TeactNode {\n  if (button.type === 'receipt') {\n    return lang('PaymentReceipt');\n  }\n\n  if (button.type === 'buy') {\n    return replaceWithTeact(button.text, STARS_ICON_PLACEHOLDER, <Icon className=\"star-currency-icon\" name=\"star\" />);\n  }\n\n  return renderText(button.text);\n}\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiPhoto, ApiUser } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getChatTitle,\n  getPhotoMediaHash,\n  getProfilePhotoMediaHash,\n  getUserFullName,\n  getVideoProfilePhotoMediaHash,\n  isAnonymousForwardsChat,\n  isChatWithRepliesBot,\n  isDeletedUser,\n} from '../../../global/helpers';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\n\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport Spinner from '../../ui/Spinner';\nimport Icon from '../icons/Icon';\n\nimport './ProfilePhoto.scss';\n\ntype OwnProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n  photo?: ApiPhoto;\n  canPlayVideo: boolean;\n  className?: string;\n  style?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst ProfilePhoto: FC<OwnProps> = ({\n  chat,\n  user,\n  photo,\n  isSavedMessages,\n  isSavedDialog,\n  canPlayVideo,\n  className,\n  style,\n  onClick,\n}) => {\n  const videoRef = useRef<HTMLVideoElement>();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const isDeleted = user && isDeletedUser(user);\n  const isRepliesChat = chat && isChatWithRepliesBot(chat.id);\n  const isAnonymousForwards = chat && isAnonymousForwardsChat(chat.id);\n  const peer = (user || chat)!;\n  const canHaveMedia = peer && !isSavedMessages && !isDeleted && !isRepliesChat && !isAnonymousForwards;\n  const { isVideo } = photo || {};\n\n  const avatarHash = (!photo || photo.id === peer.avatarPhotoId) && getChatAvatarHash(peer, 'normal');\n\n  const previewHash = canHaveMedia && photo && !avatarHash && getPhotoMediaHash(photo, 'pictogram');\n  const previewBlobUrl = useMedia(previewHash || avatarHash);\n\n  const photoHash = canHaveMedia && photo && !isVideo && getProfilePhotoMediaHash(photo);\n  const photoBlobUrl = useMedia(photoHash);\n\n  const videoHash = canHaveMedia && photo && isVideo && getVideoProfilePhotoMediaHash(photo);\n  const videoBlobUrl = useMedia(videoHash);\n\n  const fullMediaData = videoBlobUrl || photoBlobUrl;\n  const [isVideoReady, markVideoReady] = useFlag();\n  const isFullMediaReady = Boolean(fullMediaData && (!isVideo || isVideoReady));\n  const transitionClassNames = useMediaTransitionDeprecated(isFullMediaReady);\n  const isBlurredThumb = canHaveMedia && !isFullMediaReady && !previewBlobUrl && photo?.thumbnail?.dataUri;\n  const blurredThumbCanvasRef = useCanvasBlur(\n    photo?.thumbnail?.dataUri, !isBlurredThumb, isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n  const hasMedia = photo || previewBlobUrl || isBlurredThumb;\n\n  useEffect(() => {\n    if (videoRef.current && !canPlayVideo) {\n      videoRef.current.currentTime = 0;\n    }\n  }, [canPlayVideo]);\n\n  const specialIcon = useMemo(() => {\n    if (isSavedMessages) {\n      return isSavedDialog ? 'my-notes' : 'avatar-saved-messages';\n    }\n\n    if (isDeleted) {\n      return 'avatar-deleted-account';\n    }\n\n    if (isRepliesChat) {\n      return 'reply-filled';\n    }\n\n    if (isAnonymousForwards) {\n      return 'author-hidden';\n    }\n\n    return undefined;\n  }, [isAnonymousForwards, isDeleted, isSavedDialog, isRepliesChat, isSavedMessages]);\n\n  let content: TeactNode | undefined;\n\n  if (specialIcon) {\n    content = <Icon name={specialIcon} role=\"img\" />;\n  } else if (hasMedia) {\n    content = (\n      <>\n        {isBlurredThumb ? (\n          <canvas ref={blurredThumbCanvasRef} className=\"thumb\" />\n        ) : (\n          <img src={previewBlobUrl} draggable={false} className=\"thumb\" alt=\"\" />\n        )}\n        {photo && (\n          isVideo ? (\n            <OptimizedVideo\n              canPlay={canPlayVideo}\n              ref={videoRef}\n              src={fullMediaData}\n              className={buildClassName('avatar-media', transitionClassNames)}\n              muted\n              disablePictureInPicture\n              loop\n              playsInline\n              onReady={markVideoReady}\n            />\n          ) : (\n            <img\n              src={fullMediaData}\n              draggable={false}\n              className={buildClassName('avatar-media', transitionClassNames)}\n              alt=\"\"\n            />\n          )\n        )}\n      </>\n    );\n  } else if (user) {\n    const userFullName = getUserFullName(user);\n    content = userFullName ? getFirstLetters(userFullName, 2) : undefined;\n  } else if (chat) {\n    const title = getChatTitle(lang, chat);\n    content = title && getFirstLetters(title, isUserId(chat.id) ? 2 : 1);\n  } else {\n    content = (\n      <div className=\"spinner-wrapper\">\n        <Spinner color=\"white\" />\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'ProfilePhoto',\n    getPeerColorClass(peer),\n    isSavedMessages && 'saved-messages',\n    isAnonymousForwards && 'anonymous-forwards',\n    isDeleted && 'deleted-account',\n    isRepliesChat && 'replies-bot-account',\n    (!isSavedMessages && !hasMedia) && 'no-photo',\n    className,\n  );\n\n  return (\n    <div className={fullClassName} onClick={hasMedia ? onClick : undefined} style={style}>\n      {typeof content === 'string' ? renderText(content, ['hq_emoji']) : content}\n    </div>\n  );\n};\n\nexport default memo(ProfilePhoto);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dspICZx5\",\"gift\":\"GtRefNqT\",\"fadeOut\":\"CviSFYWp\",\"fadeIn\":\"zARAyL86\"};","import { memo, useMemo, useRef } from '@teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSavedStarGift } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { clamp } from '../../../util/math';\nimport { getGiftAttributes } from '../helpers/gifts';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useVtn } from '../../../hooks/animations/useVtn';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport GiftEffectWrapper from '../gift/GiftEffectWrapper';\nimport StickerView from '../StickerView';\n\nimport styles from './ProfilePinnedGifts.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  className?: string;\n  gifts?: ApiSavedStarGift[];\n  isExpanded?: boolean;\n  withGlow?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 2 * REM;\nconst POSITIONS = [\n  { x: -0.2, y: -0.3 },\n  { x: 0.3, y: 0.1 },\n  { x: -0.4, y: -0.1 },\n  { x: 0.4, y: -0.1 },\n  { x: -0.25, y: 0.1 },\n  { x: 0.25, y: -0.25 },\n];\n\nconst CENTER = { x: 0.5, y: 0.5 };\n\nconst ProfilePinnedGifts = ({\n  peerId,\n  gifts,\n  isExpanded,\n  className,\n  withGlow,\n}: OwnProps) => {\n  const { createVtnStyle } = useVtn();\n\n  if (!gifts) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {gifts.slice(0, POSITIONS.length).map((gift, index) => {\n        const position = !isExpanded ? POSITIONS[index] : getExpandedPosition(POSITIONS[index]);\n        const style = buildStyle(\n          `top: ${(CENTER.y + position.y) * 100}%`,\n          `left: ${(CENTER.x + position.x) * 100}%`,\n        );\n        return (\n          <PinnedGift\n            peerId={peerId}\n            className={styles.gift}\n            key={gift.gift.id}\n            gift={gift}\n            style={buildStyle(style, createVtnStyle(`profilePinnedGift${index}`, 'profilePinnedGift'))}\n            withGlow={withGlow}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nfunction getExpandedPosition(position: { x: number; y: number }) {\n  return {\n    x: clamp(position.x * 1.5, -0.45, 0.45),\n    y: clamp(position.y * 1.5, -0.45, 0.45),\n  };\n}\n\nconst PinnedGift = ({\n  gift, style, className, withGlow, peerId,\n}: {\n  gift: ApiSavedStarGift;\n  style?: string;\n  className?: string;\n  withGlow?: boolean;\n  peerId: string;\n}) => {\n  const { openGiftInfoModal } = getActions();\n\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const giftAttributes = useMemo(() => {\n    return getGiftAttributes(gift.gift);\n  }, [gift]);\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({ peerId, gift });\n  });\n\n  if (!giftAttributes?.model || !giftAttributes.backdrop) return undefined;\n\n  return (\n    <GiftEffectWrapper\n      withSparkles\n      sparklesColor={giftAttributes.backdrop.textColor}\n      glowColor={withGlow ? giftAttributes.backdrop.edgeColor : undefined}\n      ref={stickerRef}\n      className={className}\n      style={style}\n      onClick={handleClick}\n    >\n      <StickerView\n        containerRef={stickerRef}\n        sticker={giftAttributes.model.sticker}\n        size={GIFT_STICKER_SIZE}\n        withTranslucentThumb\n        noPlay\n      />\n    </GiftEffectWrapper>\n  );\n};\n\nexport default memo(ProfilePinnedGifts);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Z_HM0Jqg\",\"plain\":\"YIhgPXW6\",\"minimized\":\"blI_IH7j\",\"userRatingNegativeWrapper\":\"vuUzgWI1\",\"userRatingWrapper\":\"P6tsZMON\",\"status\":\"XxRtPe_4\",\"getStatus\":\"wCXGPPTY\",\"userStatus\":\"F4JyLH2c\",\"fallbackPhoto\":\"eZ2DGNou\",\"fallbackPhotoContents\":\"ldzIKEUp\",\"fallbackPhotoVisible\":\"uNvH08Qp\",\"fallbackPhotoAvatar\":\"a9OwsvOP\",\"photoWrapper\":\"UZ7NDj8N\",\"photoDashes\":\"e7iOf_3T\",\"photoDash\":\"eD0Is6TL\",\"photoDash_current\":\"MSdiAM06\",\"photoDashCurrent\":\"MSdiAM06\",\"navigation\":\"Yr9FHqbF\",\"navigation_prev\":\"Z1ZX2xot\",\"navigationPrev\":\"Z1ZX2xot\",\"navigation_next\":\"X0stLWTl\",\"navigationNext\":\"X0stLWTl\",\"info\":\"ZFBuRDGK\",\"title\":\"atYgxkWV\",\"ratingIcon\":\"Yvu9iM5n\",\"ratingNegativeIcon\":\"JZBCjHv0\",\"ratingLevel\":\"eFsZljMG\",\"topicContainer\":\"dNcezQH8\",\"topicTitle\":\"hjk4U031\",\"topicIcon\":\"YwVcTLvK\",\"topicIconTitle\":\"_sQEevF7\",\"topicMessagesCounter\":\"GXxwbzqF\",\"radialPatternBackground\":\"BvunKb6r\",\"standaloneAvatar\":\"rLHO_VQT\",\"activeProfilePhoto\":\"yltXKQri\",\"pinnedGifts\":\"JX3wjADD\",\"profileExpandAvatar\":\"KtpaSfR5\",\"profileCollapseAvatar\":\"c1xe6OKs\"};","import { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat,\n  ApiEmojiStatusType,\n  ApiPeerColorOption,\n  ApiPeerPhotos,\n  ApiPeerProfileColorSet,\n  ApiSavedGifts,\n  ApiSticker,\n  ApiTopic,\n  ApiUser,\n  ApiUserFullInfo,\n  ApiUserStatus,\n} from '../../../api/types/index';\nimport type { IconName } from '../../../types/icons/index';\nimport type { AnimationLevel, ThemeKey } from '../../../types/index';\nimport { MediaViewerOrigin } from '../../../types/index';\n\nimport {\n  getUserStatus, isAnonymousForwardsChat, isChatChannel, isSystemBot, isUserOnline,\n} from '../../../global/helpers/index';\nimport { getActions, withGlobal } from '../../../global/index';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCustomEmoji,\n  selectPeer,\n  selectPeerHasProfileBackground,\n  selectPeerPhotos,\n  selectPeerProfileColor,\n  selectPeerSavedGifts,\n  selectTabState,\n  selectTheme,\n  selectThreadMessagesCount,\n  selectTopic,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n} from '../../../global/selectors/index';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\nimport { REM } from '../helpers/mediaDimensions.ts';\nimport renderText from '../helpers/renderText.tsx';\n\nimport { useVtn } from '../../../hooks/animations/useVtn';\nimport useIntervalForceUpdate from '../../../hooks/schedulers/useIntervalForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useCustomEmoji from '../hooks/useCustomEmoji';\nimport usePhotosPreload from '../hooks/usePhotosPreload';\n\nimport Transition from '../../ui/Transition.tsx';\nimport Avatar from '../Avatar.tsx';\nimport FullNameTitle from '../FullNameTitle.tsx';\nimport Icon from '../icons/Icon.tsx';\nimport TopicIcon from '../TopicIcon.tsx';\nimport ProfilePhoto from './ProfilePhoto';\nimport ProfilePinnedGifts from './ProfilePinnedGifts.tsx';\nimport RadialPatternBackground from './RadialPatternBackground.tsx';\n\nimport './ProfileInfo.scss';\nimport styles from './ProfileInfo.module.scss';\n\nconst MAX_LEVEL_ICON = 90;\n\ntype OwnProps = {\n  isExpanded?: boolean;\n  peerId: string;\n  isForSettings?: boolean;\n  canPlayVideo: boolean;\n  isForMonoforum?: boolean;\n  onExpand?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userFullInfo?: ApiUserFullInfo;\n  userStatus?: ApiUserStatus;\n  chat?: ApiChat;\n  mediaIndex?: number;\n  avatarOwnerId?: string;\n  topic?: ApiTopic;\n  messagesCount?: number;\n  animationLevel: AnimationLevel;\n  emojiStatus?: ApiEmojiStatusType;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n  profilePhotos?: ApiPeerPhotos;\n  profileColorOption?: ApiPeerColorOption<ApiPeerProfileColorSet>;\n  theme: ThemeKey;\n  isPlain?: boolean;\n  savedGifts?: ApiSavedGifts;\n};\n\nconst EMOJI_STATUS_SIZE = 24;\nconst EMOJI_TOPIC_SIZE = 120;\nconst LOAD_MORE_THRESHOLD = 3;\nconst MAX_PHOTO_DASH_COUNT = 30;\nconst STATUS_UPDATE_INTERVAL = 1000 * 60; // 1 min\nconst PATTERN_Y_SHIFT = 8 * REM;\n\nconst ProfileInfo = ({\n  isExpanded,\n  isForSettings,\n  canPlayVideo,\n  user,\n  userFullInfo,\n  userStatus,\n  chat,\n  mediaIndex,\n  avatarOwnerId,\n  topic,\n  messagesCount,\n  animationLevel,\n  emojiStatus,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  profilePhotos,\n  peerId,\n  isForMonoforum,\n  profileColorOption,\n  theme,\n  isPlain,\n  savedGifts,\n  onExpand,\n}: OwnProps & StateProps) => {\n  const {\n    openMediaViewer,\n    openPremiumModal,\n    openStickerSet,\n    openPrivacySettingsNoticeModal,\n    loadMoreProfilePhotos,\n    openUniqueGiftBySlug,\n    openProfileRatingModal,\n    loadPeerSavedGifts,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useIntervalForceUpdate(user ? STATUS_UPDATE_INTERVAL : undefined);\n\n  const { createVtnStyle } = useVtn();\n\n  const photos = profilePhotos?.photos || MEMO_EMPTY_ARRAY;\n  const prevMediaIndex = usePreviousDeprecated(mediaIndex);\n  const prevAvatarOwnerId = usePreviousDeprecated(avatarOwnerId);\n  const [hasSlideAnimation, setHasSlideAnimation] = useState(true);\n\n  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);\n  const isFirst = photos.length <= 1 || currentPhotoIndex === 0;\n  const isLast = photos.length <= 1 || currentPhotoIndex === photos.length - 1;\n\n  const collectibleEmojiStatus = emojiStatus?.type === 'collectible' ? emojiStatus : undefined;\n\n  const peer = user || chat;\n  const { customEmoji: backgroundEmoji } = useCustomEmoji(\n    collectibleEmojiStatus?.patternDocumentId || peer?.profileColor?.backgroundEmojiId,\n  );\n\n  const profileColorSet = useMemo(() => {\n    if (collectibleEmojiStatus) {\n      return {\n        bgColors: [collectibleEmojiStatus.centerColor, collectibleEmojiStatus.edgeColor],\n        storyColors: [collectibleEmojiStatus.textColor, collectibleEmojiStatus.textColor],\n      };\n    }\n\n    const colors = profileColorOption\n      && (theme === 'dark' ? profileColorOption.darkColors : profileColorOption.colors);\n    if (!colors) return undefined;\n\n    // Why are they reversed on the server?\n    return {\n      bgColors: [...colors.bgColors].reverse(),\n      storyColors: [...colors.storyColors].reverse(),\n    };\n  }, [profileColorOption, theme, collectibleEmojiStatus]);\n\n  const pinnedGifts = useMemo(() => {\n    return savedGifts?.gifts.filter((gift) => {\n      if (gift.gift.type === 'starGiftUnique') {\n        return gift.isPinned && gift.gift.slug !== collectibleEmojiStatus?.slug;\n      }\n\n      return gift.isPinned;\n    });\n  }, [savedGifts, collectibleEmojiStatus?.slug]);\n\n  useEffect(() => {\n    if (photos.length - currentPhotoIndex <= LOAD_MORE_THRESHOLD) {\n      loadMoreProfilePhotos({ peerId });\n    }\n  }, [currentPhotoIndex, peerId, photos.length]);\n\n  useEffect(() => {\n    loadPeerSavedGifts({ peerId });\n  }, [peerId]);\n\n  // Set the current avatar photo to the last selected photo in Media Viewer after it is closed\n  useEffect(() => {\n    if (prevAvatarOwnerId && prevMediaIndex !== undefined && mediaIndex === undefined) {\n      setHasSlideAnimation(false);\n      setCurrentPhotoIndex(prevMediaIndex);\n    }\n  }, [mediaIndex, prevMediaIndex, prevAvatarOwnerId]);\n\n  // Deleting the last profile photo may result in an error\n  useEffect(() => {\n    if (currentPhotoIndex > photos.length) {\n      setHasSlideAnimation(false);\n      setCurrentPhotoIndex(Math.max(0, photos.length - 1));\n    }\n  }, [currentPhotoIndex, photos.length]);\n\n  // Reset photo index when collapsing\n  useEffect(() => {\n    if (!isExpanded) {\n      setCurrentPhotoIndex(0);\n    }\n  }, [isExpanded]);\n\n  usePhotosPreload(photos, currentPhotoIndex);\n\n  const handleProfilePhotoClick = useLastCallback(() => {\n    openMediaViewer({\n      isAvatarView: true,\n      chatId: peerId,\n      mediaIndex: currentPhotoIndex,\n      origin: isForSettings ? MediaViewerOrigin.SettingsAvatar : MediaViewerOrigin.ProfileAvatar,\n    });\n  });\n\n  const handleStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    if (!peerId) {\n      openStickerSet({\n        stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n      });\n      return;\n    }\n\n    openPremiumModal({ fromUserId: peerId });\n  });\n\n  const selectPreviousMedia = useLastCallback(() => {\n    if (isFirst) {\n      return;\n    }\n    setHasSlideAnimation(true);\n    setCurrentPhotoIndex(currentPhotoIndex - 1);\n  });\n\n  const selectNextMedia = useLastCallback(() => {\n    if (isLast) {\n      return;\n    }\n    setHasSlideAnimation(true);\n    setCurrentPhotoIndex(currentPhotoIndex + 1);\n  });\n\n  const handleOpenGetReadDateModal = useLastCallback(() => {\n    openPrivacySettingsNoticeModal({ chatId: chat!.id, isReadDate: false });\n  });\n\n  const handleRatingClick = useLastCallback((level: number) => {\n    if (user) {\n      openProfileRatingModal({ userId: user.id, level });\n    }\n  });\n\n  const handleMinimizedAvatarClick = useLastCallback(() => {\n    if (isForSettings) {\n      handleProfilePhotoClick();\n      return;\n    }\n\n    onExpand?.();\n  });\n\n  function handleSelectFallbackPhoto() {\n    if (!isFirst) return;\n    setHasSlideAnimation(true);\n    setCurrentPhotoIndex(photos.length - 1);\n  }\n\n  // Swipe gestures\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>(`.${styles.photoWrapper}`);\n    if (!element) {\n      return undefined;\n    }\n\n    return captureEvents(element, {\n      selectorToPreventScroll: '.Profile, .settings-content',\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n          return true;\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n          return true;\n        }\n\n        return false;\n      } : undefined,\n    });\n  }, [selectNextMedia, selectPreviousMedia]);\n\n  if (!user && !chat) {\n    return undefined;\n  }\n\n  function renderTopic() {\n    return (\n      <div className={styles.topicContainer}>\n        <TopicIcon\n          topic={topic!}\n          size={EMOJI_TOPIC_SIZE}\n          className={styles.topicIcon}\n          letterClassName={styles.topicIconTitle}\n          noLoopLimit\n        />\n        <h3 className={styles.topicTitle} dir={lang.isRtl ? 'rtl' : undefined}>{renderText(topic!.title)}</h3>\n        <p className={styles.topicMessagesCounter}>\n          {messagesCount ? oldLang('Chat.Title.Topic', messagesCount, 'i') : oldLang('lng_forum_no_messages')}\n        </p>\n      </div>\n    );\n  }\n\n  function renderPhotoTabs() {\n    const totalPhotosLength = Math.max(photos.length, profilePhotos?.count || 0);\n    if (!photos || totalPhotosLength <= 1) {\n      return undefined;\n    }\n\n    const enumerator = Array.from({ length: Math.min(totalPhotosLength, MAX_PHOTO_DASH_COUNT) });\n    const activeDashIndex = currentPhotoIndex >= MAX_PHOTO_DASH_COUNT ? MAX_PHOTO_DASH_COUNT - 1 : currentPhotoIndex;\n\n    return (\n      <div className={styles.photoDashes}>\n        {enumerator.map((_, i) => (\n          <span className={buildClassName(styles.photoDash, i === activeDashIndex && styles.photoDash_current)} />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPhoto(isActive?: boolean) {\n    const photo = photos.length > 0\n      ? photos[currentPhotoIndex]\n      : undefined;\n\n    return (\n      <ProfilePhoto\n        key={currentPhotoIndex}\n        user={user}\n        chat={chat}\n        photo={photo}\n        canPlayVideo={Boolean(isActive && canPlayVideo)}\n        className={buildClassName(isActive && styles.activeProfilePhoto)}\n        style={isActive ? createVtnStyle('avatar', true) : undefined}\n        onClick={handleProfilePhotoClick}\n      />\n    );\n  }\n\n  function renderUserRating() {\n    if (!userFullInfo?.starsRating) return undefined;\n\n    const level = userFullInfo.starsRating.level;\n    const isNegative = level < 0;\n\n    const onRatingClick = () => handleRatingClick(level);\n\n    if (isNegative) {\n      return (\n        <span role=\"button\" tabIndex={0} className={styles.userRatingNegativeWrapper} onClick={onRatingClick}>\n          <Icon\n            name=\"rating-icons-negative\"\n            className={styles.ratingNegativeIcon}\n          />\n          <span className={styles.ratingLevel}>!</span>\n        </span>\n      );\n    }\n\n    const safeLevel = Math.max(level, 1);\n    const iconLevel = Math.min(safeLevel, MAX_LEVEL_ICON);\n    const iconName = (iconLevel < 10\n      ? `rating-icons-level${iconLevel}`\n      : `rating-icons-level${Math.floor(iconLevel / 10) * 10}`) as IconName;\n\n    return (\n      <span role=\"button\" tabIndex={0} className={styles.userRatingWrapper} onClick={onRatingClick}>\n        <Icon\n          name={iconName}\n          className={styles.ratingIcon}\n        />\n        <span className={styles.ratingLevel}>{level}</span>\n      </span>\n    );\n  }\n\n  function renderStatus() {\n    const isAnonymousForwards = isAnonymousForwardsChat(peerId);\n    const isSystemBotChat = isSystemBot(peerId);\n    if (isAnonymousForwards || isSystemBotChat) return undefined;\n\n    if (isForMonoforum) {\n      return (\n        <span\n          className={buildClassName(styles.status, 'status')}\n          dir=\"auto\"\n          style={createVtnStyle('status', true)}\n        >\n          {lang('MonoforumStatus')}\n        </span>\n      );\n    }\n\n    if (user) {\n      return (\n        <div\n          className={buildClassName(\n            styles.status,\n            'status',\n            isUserOnline(user, userStatus) && 'online',\n          )}\n          style={createVtnStyle('status', true)}\n        >\n          {renderUserRating()}\n          <span className={styles.userStatus} dir=\"auto\">\n            {getUserStatus(oldLang, user, userStatus)}\n          </span>\n          {userStatus?.isReadDateRestrictedByMe && (\n            <span className={styles.getStatus} onClick={handleOpenGetReadDateModal}>\n              <span>{oldLang('StatusHiddenShow')}</span>\n            </span>\n          )}\n        </div>\n      );\n    }\n\n    return (\n      <span\n        className={buildClassName(styles.status, 'status')}\n        dir=\"auto\"\n        style={createVtnStyle('status', true)}\n      >\n        {\n          isChatChannel(chat!)\n            ? oldLang('Subscribers', chat!.membersCount ?? 0, 'i')\n            : oldLang('Members', chat!.membersCount ?? 0, 'i')\n        }\n      </span>\n    );\n  }\n\n  if (topic) {\n    return renderTopic();\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        'ProfileInfo',\n        styles.root,\n        !isExpanded && styles.minimized,\n        isPlain && styles.plain,\n      )}\n      style={buildStyle(\n        profileColorSet && `--rating-outline-color: ${isExpanded ? 'transparent' : profileColorSet?.bgColors[1]}`,\n        profileColorSet && !isExpanded && `--rating-text-color: ${profileColorSet?.bgColors[1]}`,\n        createVtnStyle('profileInfo', true),\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {profileColorSet?.bgColors && (\n        <RadialPatternBackground\n          backgroundColors={profileColorSet.bgColors}\n          patternIcon={backgroundEmoji}\n          patternColor={collectibleEmojiStatus?.patternColor}\n          patternSize={16}\n          withLinearGradient={!collectibleEmojiStatus}\n          className={styles.radialPatternBackground}\n          yPosition={PATTERN_Y_SHIFT}\n        />\n      )}\n      {pinnedGifts && (\n        <ProfilePinnedGifts\n          peerId={peerId}\n          gifts={pinnedGifts}\n          isExpanded={isExpanded}\n          className={styles.pinnedGifts}\n          withGlow={!isPlain}\n        />\n      )}\n      {isExpanded && (\n        <div className={styles.photoWrapper} style={createVtnStyle('photoWrapper', true)}>\n          {renderPhotoTabs()}\n          {!isForSettings && profilePhotos?.personalPhoto && (\n            <div className={buildClassName(\n              styles.fallbackPhoto,\n              isFirst && styles.fallbackPhotoVisible,\n            )}\n            >\n              <div className={styles.fallbackPhotoContents}>\n                {oldLang(profilePhotos.personalPhoto.isVideo ? 'UserInfo.CustomVideo' : 'UserInfo.CustomPhoto')}\n              </div>\n            </div>\n          )}\n          {isForSettings && profilePhotos?.fallbackPhoto && (\n            <div className={buildClassName(\n              styles.fallbackPhoto,\n              (isFirst || isLast) && styles.fallbackPhotoVisible,\n            )}\n            >\n              <div className={styles.fallbackPhotoContents} onClick={handleSelectFallbackPhoto}>\n                {!isLast && (\n                  <Avatar\n                    photo={profilePhotos.fallbackPhoto}\n                    className={styles.fallbackPhotoAvatar}\n                    size=\"mini\"\n                  />\n                )}\n                {oldLang(profilePhotos.fallbackPhoto.isVideo ? 'UserInfo.PublicVideo' : 'UserInfo.PublicPhoto')}\n              </div>\n            </div>\n          )}\n          <Transition\n            activeKey={currentPhotoIndex}\n            name={resolveTransitionName('slide', animationLevel, !hasSlideAnimation, lang.isRtl)}\n          >\n            {renderPhoto}\n          </Transition>\n\n          {!isFirst && (\n            <button\n              type=\"button\"\n              dir={lang.isRtl ? 'rtl' : undefined}\n              className={buildClassName(styles.navigation, styles.navigation_prev)}\n              aria-label={oldLang('AccDescrPrevious')}\n              onClick={selectPreviousMedia}\n            />\n          )}\n          {!isLast && (\n            <button\n              type=\"button\"\n              dir={lang.isRtl ? 'rtl' : undefined}\n              className={buildClassName(styles.navigation, styles.navigation_next)}\n              aria-label={oldLang('Next')}\n              onClick={selectNextMedia}\n            />\n          )}\n        </div>\n      )}\n      {!isExpanded && (\n        <Avatar\n          className={styles.standaloneAvatar}\n          key={peer?.id}\n          size=\"jumbo\"\n          peer={peer}\n          style={createVtnStyle('avatar', true)}\n          onClick={handleMinimizedAvatarClick}\n        />\n      )}\n\n      <div\n        className={styles.info}\n        dir={lang.isRtl ? 'rtl' : 'auto'}\n        style={createVtnStyle('info', true)}\n      >\n        {(user || chat) && (\n          <FullNameTitle\n            className={styles.title}\n            style={createVtnStyle('title', true)}\n            peer={(user || chat)!}\n            withEmojiStatus\n            withStatusTextColor\n            emojiStatusSize={EMOJI_STATUS_SIZE}\n            onEmojiStatusClick={handleStatusClick}\n            noLoopLimit\n            canCopyTitle\n          />\n        )}\n        {renderStatus()}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const peer = selectPeer(global, peerId);\n    const user = selectUser(global, peerId);\n    const userFullInfo = user ? selectUserFullInfo(global, peerId) : undefined;\n    const userStatus = selectUserStatus(global, peerId);\n    const chat = selectChat(global, peerId);\n    const profilePhotos = selectPeerPhotos(global, peerId);\n    const { mediaIndex, chatId: avatarOwnerId } = selectTabState(global).mediaViewer;\n    const isForum = chat?.isForum;\n    const { threadId: currentTopicId } = selectCurrentMessageList(global) || {};\n    const topic = isForum && currentTopicId ? selectTopic(global, peerId, currentTopicId) : undefined;\n    const { animationLevel } = selectSharedSettings(global);\n\n    const emojiStatus = peer?.emojiStatus;\n    const emojiStatusSticker = emojiStatus ? selectCustomEmoji(global, emojiStatus.documentId) : undefined;\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const profileColor = peer && selectPeerProfileColor(global, peer);\n    const theme = selectTheme(global);\n\n    const hasBackground = selectPeerHasProfileBackground(global, peerId);\n    const savedGifts = selectPeerSavedGifts(global, peerId);\n\n    return {\n      user,\n      userFullInfo,\n      userStatus,\n      chat,\n      mediaIndex,\n      avatarOwnerId,\n      animationLevel,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      emojiStatus,\n      profilePhotos,\n      topic,\n      messagesCount: topic ? selectThreadMessagesCount(global, peerId, currentTopicId!) : undefined,\n      profileColorOption: profileColor,\n      theme,\n      isPlain: !hasBackground,\n      savedGifts,\n    };\n  },\n)(ProfileInfo));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport type { ApiPhoto } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getProfilePhotoMediaHash } from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nconst PHOTOS_TO_PRELOAD = 4;\n\nexport default function usePhotosPreload(\n  photos: ApiPhoto[],\n  currentIndex: number,\n) {\n  useEffect(() => {\n    photos.slice(currentIndex, currentIndex + PHOTOS_TO_PRELOAD).forEach((photo) => {\n      const mediaHash = getProfilePhotoMediaHash(photo);\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n      if (!mediaData) {\n        mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl);\n      }\n    });\n  }, [currentIndex, photos]);\n}\n","import type {\n  ElementRef } from '../lib/teact/teact';\nimport {\n  useEffect, useMemo, useRef, useState,\n} from '../lib/teact/teact';\nimport { getActions, getGlobal } from '../global';\n\nimport type { Track, TrackId } from '../util/audioPlayer';\nimport type { MediaSessionHandlers } from '../util/mediaSession';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../config';\nimport { selectTabState } from '../global/selectors';\nimport { register } from '../util/audioPlayer';\nimport {\n  registerMediaSession, setPlaybackState, setPositionState, updateMetadata,\n} from '../util/mediaSession';\nimport { isSafariPatchInProgress } from '../util/patchSafariProgressiveAudio';\nimport useEffectWithPrevDeps from './useEffectWithPrevDeps';\nimport useLastCallback from './useLastCallback';\nimport useSyncEffect from './useSyncEffect';\n\ntype Handler = (e: Event) => void;\n\nconst DEFAULT_SKIP_TIME = 10;\n\nconst useAudioPlayer = (\n  trackId: TrackId | undefined,\n  originalDuration: number, // Sometimes incorrect for voice messages\n  trackType: Track['type'],\n  src?: string,\n  handlers?: Record<string, Handler>,\n  metadata?: MediaMetadata,\n  onInit?: (element: HTMLAudioElement) => void,\n  shouldPlay = false,\n  onForcePlay?: NoneToVoidFunction,\n  onTrackChange?: NoneToVoidFunction,\n  noPlaylist = false,\n  noProgressUpdates = false,\n  onPause?: NoneToVoidFunction,\n  noReset = false,\n  noHandleEvents = false,\n) => {\n  const controllerRef = useRef<ReturnType<typeof register>>();\n\n  const [isPlaying, setIsPlaying] = useState(false);\n  let isPlayingSync = isPlaying;\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n\n  const handleTrackChange = useLastCallback(() => {\n    setIsPlaying(false);\n    if (onTrackChange) onTrackChange();\n  });\n\n  useSyncEffect(() => {\n    if (!trackId) {\n      return;\n    }\n    controllerRef.current = register(trackId, trackType, (eventName, e) => {\n      if (noHandleEvents) {\n        return;\n      }\n      switch (eventName) {\n        case 'onPlay': {\n          const {\n            setVolume, setPlaybackRate, toggleMuted, proxy,\n          } = controllerRef.current!;\n          setIsPlaying(true);\n          if (trackType !== 'oneTimeVoice') {\n            registerMediaSession(metadata, makeMediaHandlers(controllerRef));\n          }\n          setPlaybackState('playing');\n          const { audioPlayer } = selectTabState(getGlobal());\n          setVolume(audioPlayer.volume);\n          toggleMuted(Boolean(audioPlayer.isMuted));\n          const duration = proxy.duration && Number.isFinite(proxy.duration) ? proxy.duration : originalDuration;\n          if (trackType === 'voice' || duration > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION) {\n            setPlaybackRate(audioPlayer.playbackRate);\n          }\n          setPositionState({\n            duration: proxy.duration || 0,\n            playbackRate: proxy.playbackRate,\n            position: proxy.currentTime,\n          });\n          break;\n        }\n        case 'onRateChange': {\n          const { proxy } = controllerRef.current!;\n          setPositionState({\n            duration: proxy.duration || 0,\n            playbackRate: proxy.playbackRate,\n            position: proxy.currentTime,\n          });\n          break;\n        }\n        case 'onPause':\n          setIsPlaying(false);\n          setPlaybackState('paused');\n          onPause?.();\n          break;\n        case 'onTimeUpdate': {\n          const { proxy } = controllerRef.current!;\n          if (noReset && proxy.currentTime === 0) {\n            break;\n          }\n          const duration = proxy.duration && Number.isFinite(proxy.duration) ? proxy.duration : originalDuration;\n          if (!noProgressUpdates) setPlayProgress(proxy.currentTime / duration);\n          break;\n        }\n        case 'onEnded': {\n          setPlaybackState('paused');\n          break;\n        }\n      }\n      handlers?.[eventName]?.(e);\n    }, onForcePlay, handleTrackChange);\n\n    const { proxy } = controllerRef.current;\n\n    if (!isPlaying && !proxy.paused) {\n      setIsPlaying(true);\n      // `isPlayingSync` is only needed to help `setIsPlaying` because it is asynchronous\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      isPlayingSync = true;\n    }\n\n    if (onInit && !noHandleEvents) {\n      onInit(proxy);\n    }\n  }, [trackId]);\n\n  useEffect(() => {\n    if (isPlaying && metadata) updateMetadata(metadata);\n  }, [metadata, isPlaying]);\n\n  const {\n    play,\n    pause,\n    setCurrentTime,\n    proxy,\n    destroy,\n    setVolume,\n    stop,\n    isFirst,\n    isLast,\n    requestNextTrack,\n    requestPreviousTrack,\n    setPlaybackRate,\n    toggleMuted,\n  } = controllerRef.current ?? {};\n\n  const duration = useMemo(() => {\n    return proxy?.duration && Number.isFinite(proxy.duration) ? proxy.duration : originalDuration;\n  }, [proxy?.duration, originalDuration]);\n\n  // RAF progress\n  useEffect(() => {\n    if (!proxy) {\n      return;\n    }\n    if (noReset && proxy.currentTime === 0) {\n      return;\n    }\n    if (duration && !isSafariPatchInProgress(proxy) && !noProgressUpdates) {\n      setPlayProgress(proxy.currentTime / duration);\n    }\n  }, [duration, playProgress, proxy, noProgressUpdates, noReset]);\n\n  // Cleanup\n  useEffect(() => () => {\n    destroy?.(noPlaylist);\n  }, [destroy, noPlaylist]);\n\n  // Autoplay once `src` is present\n  useEffectWithPrevDeps(([prevShouldPlay, prevSrc]) => {\n    if (prevShouldPlay === shouldPlay && src === prevSrc) {\n      return;\n    }\n\n    // When paused by another player\n    if (proxy?.src && proxy?.paused) {\n      return;\n    }\n\n    if (shouldPlay && src && !isPlaying) {\n      play?.(src);\n    }\n  }, [shouldPlay, src, isPlaying, play, proxy?.src, proxy?.paused, trackType]);\n\n  const playIfPresent = useLastCallback(() => {\n    if (src) {\n      play?.(src);\n    }\n  });\n\n  const playPause = useLastCallback(() => {\n    if (isPlaying) {\n      pause?.();\n    } else {\n      playIfPresent();\n    }\n  });\n\n  const setTime = useLastCallback((time: number) => {\n    setCurrentTime?.(time);\n    if (duration && proxy) {\n      setPlayProgress(proxy.currentTime / duration);\n    }\n  });\n\n  return {\n    isPlaying: isPlayingSync,\n    playProgress,\n    playPause,\n    pause,\n    play: playIfPresent,\n    stop,\n    setCurrentTime: setTime,\n    setVolume,\n    audioProxy: proxy,\n    duration,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setPlaybackRate,\n    toggleMuted,\n  };\n};\n\nfunction makeMediaHandlers(controllerRef: ElementRef<ReturnType<typeof register>>) {\n  let mediaHandlers: MediaSessionHandlers = {};\n  if (controllerRef && controllerRef.current) {\n    const {\n      play, pause, setCurrentTime, proxy, requestNextTrack, requestPreviousTrack, isFirst, isLast,\n    } = controllerRef.current;\n    mediaHandlers = {\n      play: () => {\n        play(proxy.src);\n      },\n      pause: () => {\n        pause();\n      },\n      stop: () => {\n        pause();\n        setCurrentTime(0);\n        getActions().closeAudioPlayer();\n      },\n      seekbackward: (event) => {\n        const skipTime = event.seekOffset || DEFAULT_SKIP_TIME;\n        setCurrentTime(Math.max(proxy.currentTime - skipTime, 0));\n      },\n      seekforward: (event) => {\n        const skipTime = event.seekOffset || DEFAULT_SKIP_TIME;\n        setCurrentTime(Math.min(proxy.currentTime + skipTime, proxy.duration));\n      },\n      seekTo: (event) => {\n        if (event.seekTime) {\n          setCurrentTime(event.seekTime);\n        }\n      },\n    };\n\n    if (!isLast()) {\n      mediaHandlers.nexttrack = () => {\n        requestNextTrack();\n      };\n    }\n    if (!isFirst()) {\n      mediaHandlers.previoustrack = () => {\n        requestPreviousTrack();\n      };\n    }\n  }\n  return mediaHandlers;\n}\n\nexport default useAudioPlayer;\n","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { IAnchorPosition } from '../../../types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  sponsorInfo?: string;\n  canReport?: boolean;\n  triggerRef: ElementRef<HTMLElement>;\n  shouldSkipAbout?: boolean;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  onAboutAdsClick: NoneToVoidFunction;\n  onSponsoredHide: NoneToVoidFunction;\n  onSponsorInfo?: NoneToVoidFunction;\n  onSponsoredReport?: NoneToVoidFunction;\n};\n\nconst SponsoredContextMenu: FC<OwnProps> = ({\n  isOpen,\n  sponsorInfo,\n  canReport,\n  anchor,\n  triggerRef,\n  shouldSkipAbout,\n  onClose,\n  onCloseAnimationEnd,\n  onAboutAdsClick,\n  onSponsoredHide,\n  onSponsorInfo,\n  onSponsoredReport,\n}) => {\n  const menuRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n\n  const getTriggerElement = useLastCallback(() => triggerRef.current);\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n\n  const isSeparatorNeeded = sponsorInfo || !shouldSkipAbout || canReport;\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      anchor={anchor}\n      withPortal\n      className=\"with-menu-transitions\"\n      getLayout={getLayout}\n      getTriggerElement={getTriggerElement}\n      getMenuElement={getMenuElement}\n      getRootElement={getRootElement}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {sponsorInfo && onSponsorInfo && (\n        <MenuItem icon=\"channel\" onClick={onSponsorInfo}>{lang('SponsoredMessageSponsor')}</MenuItem>\n      )}\n      {!shouldSkipAbout && (\n        <MenuItem icon=\"info\" onClick={onAboutAdsClick}>\n          {lang(canReport ? 'AboutRevenueSharingAds' : 'SponsoredMessageInfo')}\n        </MenuItem>\n      )}\n      {canReport && onSponsoredReport && (\n        <MenuItem icon=\"hand-stop\" onClick={onSponsoredReport}>\n          {lang('ReportAd')}\n        </MenuItem>\n      )}\n      {isSeparatorNeeded && <MenuSeparator />}\n      <MenuItem icon=\"close-circle\" onClick={onSponsoredHide}>\n        {lang('HideAd')}\n      </MenuItem>\n    </Menu>\n  );\n};\n\nexport default memo(SponsoredContextMenu);\n","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition } from '../../../types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport SponsoredContextMenu from './SponsoredContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  randomId: string;\n  sponsorInfo?: string;\n  additionalInfo?: string;\n  canReport?: boolean;\n  anchor: IAnchorPosition;\n  triggerRef: ElementRef<HTMLElement>;\n  shouldSkipAbout?: boolean;\n  onItemClick?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd: NoneToVoidFunction;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps> = ({\n  isOpen,\n  randomId,\n  sponsorInfo,\n  additionalInfo,\n  canReport,\n  anchor,\n  triggerRef,\n  shouldSkipAbout,\n  onItemClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    openAboutAdsModal,\n    showDialog,\n    reportSponsored,\n    hideSponsored,\n  } = getActions();\n\n  const { ref } = useShowTransition({\n    isOpen,\n    onCloseAnimationEnd,\n  });\n\n  const handleItemClick = useLastCallback(() => {\n    onItemClick?.();\n    onClose();\n  });\n\n  const handleAboutAdsOpen = useLastCallback(() => {\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n    handleItemClick();\n  });\n\n  const handleSponsoredHide = useLastCallback(() => {\n    hideSponsored();\n    handleItemClick();\n  });\n\n  const handleSponsorInfo = useLastCallback(() => {\n    showDialog({\n      data: {\n        message: [sponsorInfo, additionalInfo].filter(Boolean).join('\\n'),\n      },\n    });\n    handleItemClick();\n  });\n\n  const handleReportSponsoredMessage = useLastCallback(() => {\n    reportSponsored({ randomId });\n    handleItemClick();\n  });\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div ref={ref} className=\"ContextMenuContainer\">\n      <SponsoredContextMenu\n        isOpen={isOpen}\n        anchor={anchor}\n        triggerRef={triggerRef}\n        canReport={canReport}\n        sponsorInfo={sponsorInfo}\n        shouldSkipAbout={shouldSkipAbout}\n        onClose={onClose}\n        onCloseAnimationEnd={onClose}\n        onAboutAdsClick={handleAboutAdsOpen}\n        onSponsoredHide={handleSponsoredHide}\n        onSponsorInfo={handleSponsorInfo}\n        onSponsoredReport={handleReportSponsoredMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(SponsoredMessageContextMenuContainer);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ky16H_sV\",\"button-text\":\"W01t9CIf\",\"buttonText\":\"W01t9CIf\",\"sticker\":\"c8lE3XW5\",\"title\":\"wlwD1B1Q\",\"description\":\"V8OCFHmp\",\"is-ios\":\"IxW_z_r0\",\"isIos\":\"IxW_z_r0\",\"is-macos\":\"OFxKGCEJ\",\"isMacos\":\"OFxKGCEJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectAnimatedEmoji, selectChat } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport Button from '../../ui/Button';\n\nimport styles from './EmptyForum.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n};\n\ntype StateProps = {\n  animatedEmoji?: ApiSticker;\n  canManageTopics?: boolean;\n};\n\nconst ICON_SIZE = 7 * REM;\n\nconst EmptyForum: FC<OwnProps & StateProps> = ({\n  chatId, animatedEmoji, canManageTopics,\n}) => {\n  const { openCreateTopicPanel } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const handleCreateTopic = useCallback(() => {\n    openCreateTopicPanel({ chatId });\n  }, [chatId, openCreateTopicPanel]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.sticker}>\n        {animatedEmoji && <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} />}\n      </div>\n      <h3 className={styles.title} dir=\"auto\">{lang('ChatList.EmptyTopicsTitle')}</h3>\n      <p className={buildClassName(styles.description, styles.centered)} dir=\"auto\">\n        {lang('ChatList.EmptyTopicsDescription')}\n      </p>\n      {canManageTopics && (\n        <Button\n          ripple={!isMobile}\n          fluid\n          onClick={handleCreateTopic}\n          isRtl={lang.isRtl}\n        >\n          <div className={styles.buttonText}>\n            {lang('ChatList.EmptyTopicsCreate')}\n          </div>\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { chatId }): Complete<StateProps> => {\n  const chat = selectChat(global, chatId);\n  const canManageTopics = chat && (chat.isCreator || getHasAdminRight(chat, 'manageTopics'));\n\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🐣'),\n    canManageTopics,\n  };\n})(EmptyForum));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Fn34Vu_9\",\"closed-icon\":\"MB7Gomjn\",\"closedIcon\":\"MB7Gomjn\",\"topic-icon\":\"oXJl4tra\",\"topicIcon\":\"oXJl4tra\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiDraft, ApiMessage, ApiMessageOutgoingStatus,\n  ApiPeer, ApiTopic, ApiTypeStory, ApiTypingStatus,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ChatAnimationTypes } from './hooks';\n\nimport { UNMUTE_TIMESTAMP } from '../../../config';\nimport { groupStatefulContent } from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectCanAnimateInterface,\n  selectCanDeleteTopic,\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectDraft,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectOutgoingStatus,\n  selectPeerStory,\n  selectSender,\n  selectThreadInfo,\n  selectThreadParam,\n  selectTopics,\n} from '../../../global/selectors';\nimport { IS_OPEN_IN_NEW_TAB_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { createLocationHash } from '../../../util/routing';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useChatListEntry from './hooks/useChatListEntry';\nimport useTopicContextActions from './hooks/useTopicContextActions';\n\nimport Icon from '../../common/icons/Icon';\nimport LastMessageMeta from '../../common/LastMessageMeta';\nimport TopicIcon from '../../common/TopicIcon';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport MuteChatModal from '../MuteChatModal.async';\nimport ChatBadge from './ChatBadge';\n\nimport styles from './Topic.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topic: ApiTopic;\n  isSelected: boolean;\n  style: string;\n  observeIntersection?: ObserveFn;\n  orderDiff: number;\n  animationType: ChatAnimationTypes;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChatMuted?: boolean;\n  canDelete?: boolean;\n  lastMessage?: ApiMessage;\n  lastMessageStory?: ApiTypeStory;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  draft?: ApiDraft;\n  canScrollDown?: boolean;\n  wasTopicOpened?: boolean;\n  withInterfaceAnimations?: boolean;\n  topics?: Record<number, ApiTopic>;\n};\n\nconst Topic: FC<OwnProps & StateProps> = ({\n  topic,\n  isSelected,\n  chatId,\n  chat,\n  isChatMuted,\n  style,\n  lastMessage,\n  lastMessageStory,\n  canScrollDown,\n  lastMessageOutgoingStatus,\n  observeIntersection,\n  canDelete,\n  lastMessageSender,\n  animationType,\n  withInterfaceAnimations,\n  orderDiff,\n  typingStatus,\n  draft,\n  wasTopicOpened,\n  topics,\n}) => {\n  const {\n    openThread,\n    deleteTopic,\n    focusLastMessage,\n    setViewForumAsMessages,\n    updateTopicMutedState,\n    openQuickPreview,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [shouldRenderDeleteModal, markRenderDeleteModal, unmarkRenderDeleteModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const {\n    isPinned, isClosed, notifySettings,\n  } = topic;\n  const isMuted = Boolean(notifySettings.mutedUntil || (notifySettings.mutedUntil === undefined && isChatMuted));\n\n  const handleOpenDeleteModal = useLastCallback(() => {\n    markRenderDeleteModal();\n    openDeleteModal();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    deleteTopic({ chatId: chat.id, topicId: topic.id });\n  });\n\n  const handleMute = useLastCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  });\n\n  const handleUnmute = useLastCallback(() => {\n    updateTopicMutedState({ chatId, topicId: topic.id, mutedUntil: UNMUTE_TIMESTAMP });\n  });\n\n  const { renderSubtitle, ref } = useChatListEntry({\n    chat,\n    chatId,\n    lastMessage,\n    draft,\n    lastMessageSender,\n    lastMessageTopic: topic,\n    observeIntersection,\n    isTopic: true,\n    typingStatus,\n    topics,\n    statefulMediaContent: groupStatefulContent({ story: lastMessageStory }),\n\n    animationType,\n    withInterfaceAnimations,\n    orderDiff,\n  });\n\n  const handleOpenTopic = useLastCallback((e: React.MouseEvent) => {\n    if (e.altKey) {\n      e.preventDefault();\n      openQuickPreview({ id: chatId, threadId: topic.id });\n      return;\n    }\n\n    openThread({ chatId, threadId: topic.id, shouldReplaceHistory: true });\n    setViewForumAsMessages({ chatId, isEnabled: false });\n\n    if (canScrollDown) {\n      focusLastMessage();\n    }\n  });\n\n  const contextActions = useTopicContextActions({\n    topic,\n    chat,\n    isChatMuted,\n    wasOpened: wasTopicOpened,\n    canDelete,\n    handleDelete: handleOpenDeleteModal,\n    handleMute,\n    handleUnmute,\n  });\n\n  return (\n    <ListItem\n      className={buildClassName(\n        styles.root,\n        'Chat',\n        isSelected && 'selected',\n        'chat-item-clickable',\n      )}\n      onClick={handleOpenTopic}\n      style={style}\n      href={IS_OPEN_IN_NEW_TAB_SUPPORTED ? `#${createLocationHash(chatId, 'thread', topic.id)}` : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      ref={ref}\n    >\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className={buildClassName('title')}>\n            <TopicIcon topic={topic} className={styles.topicIcon} observeIntersection={observeIntersection} />\n            <h3 dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</h3>\n          </div>\n          {Boolean(notifySettings.mutedUntil) && <Icon name=\"muted\" />}\n          <div className=\"separator\" />\n          {isClosed && (\n            <Icon name=\"lock-badge\" className={styles.closedIcon} />\n          )}\n          {lastMessage && (\n            <LastMessageMeta\n              message={lastMessage}\n              outgoingStatus={lastMessageOutgoingStatus}\n            />\n          )}\n        </div>\n        <div className=\"subtitle\">\n          {renderSubtitle()}\n          <ChatBadge\n            chat={chat}\n            isPinned={isPinned}\n            isMuted={isMuted}\n            topic={topic}\n            wasTopicOpened={wasTopicOpened}\n            topics={topics}\n          />\n        </div>\n      </div>\n      {shouldRenderDeleteModal && (\n        <ConfirmDialog\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onCloseAnimationEnd={unmarkRenderDeleteModal}\n          confirmIsDestructive\n          confirmHandler={handleDelete}\n          text={lang('lng_forum_topic_delete_sure')}\n          confirmLabel={lang('Delete')}\n        />\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n          topicId={topic.id}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topic, isSelected }) => {\n    const chat = selectChat(global, chatId);\n\n    const lastMessage = selectChatMessage(global, chatId, topic.lastMessageId);\n    const { isOutgoing } = lastMessage || {};\n    const lastMessageSender = lastMessage && selectSender(global, lastMessage);\n    const typingStatus = selectThreadParam(global, chatId, topic.id, 'typingStatus');\n    const draft = selectDraft(global, chatId, topic.id);\n    const threadInfo = selectThreadInfo(global, chatId, topic.id);\n    const wasTopicOpened = Boolean(threadInfo?.lastReadInboxMessageId);\n    const topics = selectTopics(global, chatId);\n\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const storyData = lastMessage?.content.storyData;\n    const lastMessageStory = storyData && selectPeerStory(global, storyData.peerId, storyData.id);\n\n    const isChatMuted = chat && getIsChatMuted(\n      chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id),\n    );\n\n    return {\n      chat,\n      lastMessage,\n      lastMessageSender,\n      typingStatus,\n      isChatMuted,\n      canDelete: selectCanDeleteTopic(global, chatId, topic.id),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      draft,\n      ...(isOutgoing && lastMessage && {\n        lastMessageOutgoingStatus: selectOutgoingStatus(global, lastMessage),\n      }),\n      canScrollDown: isSelected && chat?.id === currentChatId && currentThreadId === topic.id,\n      wasTopicOpened,\n      topics,\n      lastMessageStory,\n    };\n  },\n)(Topic));\n","import { useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChat, ApiTopic } from '../../../../api/types';\nimport type { MenuItemContextAction } from '../../../ui/ListItem';\n\nimport { getCanManageTopic, getHasAdminRight } from '../../../../global/helpers';\nimport { IS_OPEN_IN_NEW_TAB_SUPPORTED } from '../../../../util/browser/windowEnvironment';\nimport { compact } from '../../../../util/iteratees';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nexport default function useTopicContextActions({\n  topic,\n  chat,\n  isChatMuted,\n  wasOpened,\n  canDelete,\n  handleDelete,\n  handleMute,\n  handleUnmute,\n}: {\n  topic: ApiTopic;\n  chat: ApiChat;\n  isChatMuted?: boolean;\n  wasOpened?: boolean;\n  canDelete?: boolean;\n  handleDelete?: NoneToVoidFunction;\n  handleMute?: NoneToVoidFunction;\n  handleUnmute?: NoneToVoidFunction;\n}) {\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  return useMemo(() => {\n    const {\n      isPinned, notifySettings, isClosed, id: topicId,\n    } = topic;\n\n    const chatId = chat.id;\n\n    const {\n      editTopic,\n      toggleTopicPinned,\n      markTopicRead,\n      openChatInNewTab,\n      openQuickPreview,\n    } = getActions();\n\n    const canToggleClosed = getCanManageTopic(chat, topic);\n    const canTogglePinned = chat.isCreator || getHasAdminRight(chat, 'manageTopics');\n\n    const actionOpenInNewTab = IS_OPEN_IN_NEW_TAB_SUPPORTED && {\n      title: 'Open in new tab',\n      icon: 'open-in-new-tab',\n      handler: () => {\n        openChatInNewTab({ chatId: chat.id, threadId: topicId });\n      },\n    };\n\n    const actionQuickPreview = {\n      title: lang('QuickPreview'),\n      icon: 'eye-outline',\n      handler: () => {\n        openQuickPreview({ id: chatId, threadId: topicId });\n      },\n    };\n\n    const actionUnreadMark = topic.unreadCount || !wasOpened\n      ? {\n        title: oldLang('MarkAsRead'),\n        icon: 'readchats',\n        handler: () => {\n          markTopicRead({ chatId, topicId });\n        },\n      }\n      : undefined;\n\n    const actionPin = canTogglePinned ? (isPinned\n      ? {\n        title: oldLang('UnpinFromTop'),\n        icon: 'unpin',\n        handler: () => toggleTopicPinned({ chatId, topicId, isPinned: false }),\n      }\n      : {\n        title: oldLang('PinToTop'),\n        icon: 'pin',\n        handler: () => toggleTopicPinned({ chatId, topicId, isPinned: true }),\n      }) : undefined;\n\n    const actionMute = ((isChatMuted && notifySettings.mutedUntil === undefined) || notifySettings.mutedUntil)\n      ? {\n        title: oldLang('ChatList.Unmute'),\n        icon: 'unmute',\n        handler: handleUnmute,\n      }\n      : {\n        title: `${oldLang('ChatList.Mute')}...`,\n        icon: 'mute',\n        handler: handleMute,\n      };\n\n    const actionCloseTopic = canToggleClosed ? (isClosed\n      ? {\n        title: oldLang('lng_forum_topic_reopen'),\n        icon: 'reopen-topic',\n        handler: () => editTopic({ chatId, topicId, isClosed: false }),\n      }\n      : {\n        title: oldLang('lng_forum_topic_close'),\n        icon: 'close-topic',\n        handler: () => editTopic({ chatId, topicId, isClosed: true }),\n      }) : undefined;\n\n    const actionDelete = canDelete ? {\n      title: oldLang('lng_forum_topic_delete'),\n      icon: 'delete',\n      destructive: true,\n      handler: handleDelete,\n    } : undefined;\n\n    return compact([\n      actionOpenInNewTab,\n      actionQuickPreview,\n      actionPin,\n      actionUnreadMark,\n      actionMute,\n      actionCloseTopic,\n      actionDelete,\n    ]) as MenuItemContextAction[];\n  }, [topic, chat, isChatMuted, wasOpened, lang, oldLang, canDelete, handleDelete, handleMute, handleUnmute]);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { TopicsInfo } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  GENERAL_TOPIC_ID, TOPIC_HEIGHT_PX, TOPIC_LIST_SENSITIVE_AREA, TOPICS_SLICE,\n} from '../../../config';\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getOrderedTopics } from '../../../global/helpers';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsForumPanelOpen,\n  selectTabState,\n  selectTopicsInfo,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { waitForTransitionEnd } from '../../../util/cssAnimationEndListeners';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useOrderDiff from './hooks/useOrderDiff';\n\nimport GroupCallTopPane from '../../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport HeaderActions from '../../middle/HeaderActions';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport EmptyForum from './EmptyForum';\nimport Topic from './Topic';\n\nimport styles from './ForumPanel.module.scss';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  isHidden?: boolean;\n  onTopicSearch?: NoneToVoidFunction;\n  onCloseAnimationEnd?: VoidFunction;\n  onOpenAnimationStart?: VoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topicsInfo?: TopicsInfo;\n  currentTopicId?: number;\n  withInterfaceAnimations?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst ForumPanel: FC<OwnProps & StateProps> = ({\n  chat,\n  currentTopicId,\n  isOpen,\n  isHidden,\n  topicsInfo,\n  onTopicSearch,\n  onCloseAnimationEnd,\n  onOpenAnimationStart,\n  withInterfaceAnimations,\n}) => {\n  const {\n    closeForumPanel, openChatWithInfo, loadTopics,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const scrollTopHandlerRef = useRef<HTMLDivElement>();\n  const { isMobile } = useAppLayout();\n  const chatId = chat?.id;\n\n  useEffect(() => {\n    if (chatId && !topicsInfo) {\n      loadTopics({ chatId });\n    }\n  }, [topicsInfo, chatId]);\n\n  const [isScrolled, setIsScrolled] = useState(false);\n  const lang = useOldLang();\n\n  const handleClose = useLastCallback(() => {\n    closeForumPanel();\n  });\n\n  useEffect(() => {\n    if (!withInterfaceAnimations && !isOpen) {\n      onCloseAnimationEnd?.();\n    }\n  }, [withInterfaceAnimations, isOpen, onCloseAnimationEnd]);\n\n  const handleToggleChatInfo = useLastCallback(() => {\n    if (!chat) return;\n    openChatWithInfo({ id: chat.id, shouldReplaceHistory: true });\n  });\n\n  const { observe } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  useOnIntersect(scrollTopHandlerRef, observe, ({ isIntersecting }) => {\n    setIsScrolled(!isIntersecting);\n  });\n\n  const orderedIds = useMemo(() => {\n    return topicsInfo\n      ? getOrderedTopics(\n        Object.values(topicsInfo.topicsById),\n        topicsInfo.orderedPinnedTopicIds,\n      ).map(({ id }) => id)\n      : [];\n  }, [topicsInfo]);\n\n  const { orderDiffById, getAnimationType } = useOrderDiff(orderedIds, chat?.id);\n\n  const [viewportIds, getMore] = useInfiniteScroll(() => {\n    if (!chat) return;\n    loadTopics({ chatId: chat.id });\n  }, orderedIds, !topicsInfo?.totalCount || orderedIds.length >= topicsInfo.totalCount, TOPICS_SLICE);\n\n  const shouldRenderRef = useRef(false);\n  const isVisible = isOpen && !isHidden;\n  const prevIsVisible = usePreviousDeprecated(isVisible);\n\n  if (prevIsVisible !== isVisible) {\n    shouldRenderRef.current = false;\n  }\n\n  useHistoryBack({\n    isActive: isVisible,\n    onBack: handleClose,\n  });\n\n  useEffect(() => (isVisible ? captureEscKeyListener(handleClose) : undefined), [handleClose, isVisible]);\n\n  useEffect(() => {\n    if (prevIsVisible !== isVisible) {\n      // For performance reasons, we delay animation of the topic list panel to the next animation frame\n      requestNextMutation(() => {\n        if (!ref.current) return;\n\n        const endHeavyAnimation = beginHeavyAnimation();\n        waitForTransitionEnd(ref.current, endHeavyAnimation);\n\n        onOpenAnimationStart?.();\n\n        if (isVisible) {\n          shouldRenderRef.current = true;\n          ref.current.style.transform = 'none';\n        } else {\n          shouldRenderRef.current = false;\n          ref.current.style.transform = '';\n        }\n      });\n    }\n  }, [isVisible, onOpenAnimationStart, prevIsVisible]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(ref.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: (e, direction) => {\n        const closeDirection = lang.isRtl ? SwipeDirection.Left : SwipeDirection.Right;\n\n        if (direction === closeDirection) {\n          closeForumPanel();\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [closeForumPanel, lang.isRtl]);\n\n  function renderTopics() {\n    const viewportOffset = orderedIds.indexOf(viewportIds![0]);\n\n    return viewportIds?.map((id, i) => (\n      <Topic\n        key={id}\n        chatId={chat!.id}\n        topic={topicsInfo!.topicsById[id]}\n        style={`top: ${(viewportOffset + i) * TOPIC_HEIGHT_PX}px;`}\n        isSelected={currentTopicId === id}\n        observeIntersection={observe}\n        animationType={getAnimationType(id)}\n        orderDiff={orderDiffById[id]}\n      />\n    ));\n  }\n\n  const isLoading = topicsInfo === undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        styles.root,\n        isScrolled && styles.scrolled,\n        lang.isRtl && styles.rtl,\n        !withInterfaceAnimations && styles.noAnimation,\n      )}\n      onTransitionEnd={!isOpen ? onCloseAnimationEnd : undefined}\n    >\n      <div id=\"TopicListHeader\" className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleClose}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n\n        {chat && (\n          <GroupChatInfo\n            noAvatar\n            className={styles.info}\n            chatId={chat.id}\n            onClick={handleToggleChatInfo}\n          />\n        )}\n\n        {chat\n          && (\n            <HeaderActions\n              chatId={chat.id}\n              threadId={MAIN_THREAD_ID}\n              messageListType=\"thread\"\n              canExpandActions={false}\n              isForForum\n              isMobile={isMobile}\n              onTopicSearch={onTopicSearch}\n            />\n          )}\n      </div>\n\n      {chat && <GroupCallTopPane chatId={chat.id} />}\n\n      <div className={styles.notch} />\n\n      <InfiniteScroll\n        className=\"chat-list custom-scroll\"\n        ref={containerRef}\n        items={viewportIds}\n        preloadBackwards={TOPICS_SLICE}\n        withAbsolutePositioning\n        maxHeight={(orderedIds?.length || 0) * TOPIC_HEIGHT_PX}\n        onLoadMore={getMore}\n        sensitiveArea={TOPIC_LIST_SENSITIVE_AREA}\n        beforeChildren={<div ref={scrollTopHandlerRef} className={styles.scrollTopHandler} />}\n      >\n        {Boolean(viewportIds?.length) && (\n          renderTopics()\n        )}\n        {isLoading && !viewportIds?.length && (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n      {!isLoading && viewportIds?.length === 1 && viewportIds[0] === GENERAL_TOPIC_ID && (\n        <EmptyForum chatId={chatId!} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const chatId = selectTabState(global).forumPanelChatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const {\n      chatId: currentChatId,\n      threadId: currentThreadId,\n    } = selectCurrentMessageList(global) || {};\n    const topicsInfo = chatId ? selectTopicsInfo(global, chatId) : undefined;\n\n    return {\n      chat,\n      currentTopicId: chatId === currentChatId ? Number(currentThreadId) : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      topicsInfo,\n    };\n  },\n  (global) => selectIsForumPanelOpen(global),\n)(ForumPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"MlF2n1nb\",\"rtl\":\"Xs2y1fCE\",\"no-animation\":\"kmDMv6D8\",\"noAnimation\":\"kmDMv6D8\",\"notch\":\"hGeb3TQJ\",\"scrolled\":\"SZ24u3cn\",\"scroll-top-handler\":\"ERz3fcar\",\"scrollTopHandler\":\"ERz3fcar\",\"info\":\"Sf633zAP\"};","import type { ElementRef } from '../../lib/teact/teact';\nimport { useEffect, useLayoutEffect, useState } from '../../lib/teact/teact';\n\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_IOS } from '../../util/browser/windowEnvironment';\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreen<T extends HTMLElement>(elRef: ElementRef<T>, exitCallback?: CallbackType,\n  enterCallback?: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || IS_IOS) || isFullscreen) {\n      return;\n    }\n    safeRequestFullscreen(elRef.current);\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n    safeExitFullscreen();\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const element = elRef.current;\n    const listener = () => {\n      const isEnabled = Boolean(prop && document[prop]);\n      setIsFullscreen(isEnabled);\n      if (isEnabled) {\n        enterCallback?.(false);\n      } else {\n        exitCallback?.(false);\n      }\n      // In Firefox fullscreen video controls are not visible by default, so we force them manually\n      if (element instanceof HTMLVideoElement) element.controls = isEnabled;\n    };\n\n    const listenerEnter = () => {\n      setIsFullscreen(true);\n      if (enterCallback) enterCallback(true);\n    };\n\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      if (exitCallback) exitCallback(false);\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (element) {\n      element.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      element.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (element) {\n        element.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        element.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && !IS_IOS) {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nexport const useFullscreenStatus = () => {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const listener = () => {\n      setIsFullscreen(checkIfFullscreen());\n    };\n\n    let removeTauriListener: VoidFunction | undefined;\n    const setupTauriListener = async () => {\n      const tauriWindow = await window.tauri?.getCurrentWindow();\n      removeTauriListener = await tauriWindow.onResized(() => {\n        tauriWindow.isFullscreen().then(setIsFullscreen);\n      });\n    };\n\n    if (IS_TAURI) {\n      window.tauri?.getCurrentWindow().then((tauriWindow) => {\n        tauriWindow.isFullscreen().then(setIsFullscreen);\n      });\n      setupTauriListener();\n    }\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    return () => {\n      removeTauriListener?.();\n\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n    };\n  }, []);\n\n  return isFullscreen;\n};\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n  return '';\n}\n\nexport function checkIfFullscreen() {\n  const fullscreenProp = getBrowserFullscreenElementProp();\n  return Boolean(fullscreenProp && document[fullscreenProp]);\n}\n\nexport function safeRequestFullscreen(element: HTMLElement) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element.webkitRequestFullscreen) {\n    element.webkitRequestFullscreen();\n  } else if (element.webkitEnterFullscreen) {\n    element.webkitEnterFullscreen();\n  } else if (element.mozRequestFullScreen) {\n    element.mozRequestFullScreen();\n  }\n}\n\nexport function safeExitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitCancelFullScreen) {\n    document.webkitCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n","import type { ApiPaidMedia } from '../../../../api/types';\n\nexport default function getSingularPaidMedia(media?: ApiPaidMedia) {\n  if (!media || media.extendedMedia.length !== 1) {\n    return {\n      photo: undefined,\n      video: undefined,\n    };\n  }\n\n  const singularMedia = media.extendedMedia[0];\n  const isPreview = 'mediaType' in singularMedia;\n  const photo = isPreview ? (!singularMedia.duration ? singularMedia : undefined) : singularMedia.photo;\n  const video = isPreview ? (singularMedia.duration ? singularMedia : undefined) : singularMedia.video;\n\n  return { photo, video };\n}\n","// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { getMessageContent } from '../../../../global/helpers';\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isSingleMessage: boolean, isMobile: boolean) {\n  const isOutgoing = messages[0].isOutgoing;\n  const allMedia = (isSingleMessage\n    ? messages[0].content.paidMedia!.extendedMedia.map((media) => (\n      'mediaType' in media ? media : (media.photo || media.video)\n    ))\n    : messages.map((message) => (\n      getMessageContent(message).photo || getMessageContent(message).video\n    ))\n  ).filter(Boolean);\n  return allMedia.map(\n    (media) => {\n      const dimensions = calculateMediaDimensions({\n        media,\n        isOwn: isOutgoing,\n        isMobile,\n      }) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, Boolean(album.isPaidMedia), isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, false, noAvatars, isMobile);\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './browser/windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata({\n      chatId: message.chatId,\n      id: message.id,\n      isTranslatable,\n      detectedLanguage,\n    });\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata({\n  chatId, id, isTranslatable, detectedLanguage,\n}: {\n  chatId: string;\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage?: string;\n}) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / translatableCount;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type React from '../../../../lib/teact/teact';\nimport type { ElementRef } from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: ElementRef<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: ElementRef<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady?: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({\n      replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, quoteOffset: undefined,\n    });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady?.()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      },\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\nimport PeerColorWrapper from '../PeerColorWrapper';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  const ref = useRef<HTMLDivElement>();\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getPeerTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <PeerColorWrapper\n      ref={ref}\n      peerColor={sender?.color}\n      noUserColors={noUserColors}\n      shouldReset\n      className={buildClassName(\n        'EmbeddedMessage',\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </PeerColorWrapper>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from './icons/Icon';\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useOldLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <Icon name=\"lock\" />}\n      <Icon name=\"next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Icon from '../../../common/icons/Icon';\n\ntype OwnProps<T> =\n  (PhotoProps<T> | VideoProps<T>) & {\n    clickArg: number;\n    noSelectControls?: boolean;\n  };\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl = <T,>(props: OwnProps<T> & StateProps) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      dimensions,\n      clickArg,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: clickArg, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <Icon name=\"select\" />\n            )}\n          </div>\n        )}\n        {}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps<unknown>>(\n    (global, ownProps) => {\n      const { clickArg, noSelectControls } = ownProps;\n      return {\n        isInSelectMode: !noSelectControls && selectIsInSelectMode(global),\n        isSelected: !noSelectControls && selectIsMessageSelected(global, clickArg),\n      };\n    },\n  )(ComponentWithSelectControl)) as typeof ComponentWithSelectControl;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ThemeKey } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport {\n  getIsDownloading, getMessageContent, getMessageHtmlId, getMessagePhoto,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number, index?: number) => void;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloads,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const { content: { paidMedia } } = album.mainMessage;\n\n  const mediaCount = album.isPaidMedia ? paidMedia!.extendedMedia.length : album.messages.length;\n\n  const handlePaidMediaClick = useLastCallback((index: number) => {\n    onMediaClick(album.mainMessage.id, index);\n  });\n\n  const handleAlbumMessageClick = useLastCallback((messageId: number) => {\n    onMediaClick(messageId);\n  });\n\n  const handleCancelUpload = useLastCallback((messageId: number) => {\n    cancelUploadMedia({ chatId: album.mainMessage.chatId, messageId });\n  });\n\n  const messages = useMemo(() => {\n    if (album.isPaidMedia) {\n      return album.mainMessage.content.paidMedia!.extendedMedia.map(() => album.mainMessage);\n    }\n\n    return album.messages;\n  }, [album]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const renderingPaidMedia = album.isPaidMedia ? message.content.paidMedia?.extendedMedia[index] : undefined;\n    const paidPhotoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.photo;\n    const paidVideoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.video;\n    const photo = paidPhotoOrPreview || getMessagePhoto(message);\n    const video = paidVideoOrPreview || getMessageContent(message).video;\n\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id, album.isPaidMedia ? index : undefined)}`}\n          photo={photo}\n          isOwn={isOwn}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={photo.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, photo)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          video={video}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={video.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, video)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global);\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloads,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../types';\n\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const audioRef = useRef<HTMLAudioElement | undefined>();\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_TAURI && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ActiveEmojiInteraction } from '../../../types';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n  selectCustomEmoji,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = selectCustomEmoji(global, customEmojiId);\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ActiveEmojiInteraction } from '../../../types';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectIsCurrentUserFrozen, selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n  asActionButton?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n  asActionButton,\n}) => {\n  const { openThread, openFrozenAccountModal } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    const global = getGlobal();\n    if (selectIsCurrentUserFrozen(global)) {\n      openFrozenAccountModal();\n      return;\n    }\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={oldLang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (oldLang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount))\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(lang, messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(lang, messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n        asActionButton && 'as-action-button',\n      )}\n      dir={oldLang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <Icon\n        name=\"comments-sticker\"\n        className={buildClassName(\n          'CommentButton_icon-comments',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n      />\n      {!recentRepliers?.length && <Icon name=\"comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : oldLang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        )}\n        <Icon\n          name=\"next\"\n          className={buildClassName(\n            'CommentButton_icon-open',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useOldLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"medium\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              size=\"tiny\"\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                size=\"tiny\"\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): Complete<StateProps> => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default ContextMenuContainerAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HMB5LgeX\",\"title\":\"vZnCPl3t\",\"content\":\"k_dGolcu\",\"separator\":\"qRaSs5iA\",\"footnote\":\"EDmr0wJG\",\"collapsed\":\"hYzpXwTM\",\"cutoutWrapper\":\"nfCzKu78\",\"collapseIcon\":\"mxPizZpR\",\"clickable\":\"Cj2cLczd\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiFactCheck } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useCollapsibleLines from '../../../hooks/element/useCollapsibleLines';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Separator from '../../ui/Separator';\n\nimport styles from './FactCheck.module.scss';\n\ntype OwnProps = {\n  factCheck: ApiFactCheck;\n  isToggleDisabled?: boolean;\n};\n\nconst COLOR = {\n  color: 0,\n};\nconst MAX_LINES = 4;\n\nconst FactCheck = ({ factCheck, isToggleDisabled }: OwnProps) => {\n  const lang = useOldLang();\n\n  const ref = useRef<HTMLDivElement>();\n  const cutoutRef = useRef<HTMLDivElement>();\n  const {\n    isCollapsed, isCollapsible, setIsCollapsed,\n  } = useCollapsibleLines(ref, MAX_LINES, cutoutRef);\n\n  const countryLocalized = useMemo(() => {\n    if (!factCheck.countryCode || !lang.code) return undefined;\n\n    const displayNames = new Intl.DisplayNames([lang.code], { type: 'region' });\n    return displayNames.of(factCheck.countryCode);\n  }, [factCheck.countryCode, lang.code]);\n\n  const canExpand = !isToggleDisabled && isCollapsed;\n\n  const handleExpand = useLastCallback(() => {\n    setIsCollapsed(false);\n  });\n\n  const handleToggle = useLastCallback(() => {\n    setIsCollapsed((prev) => !prev);\n  });\n\n  if (!factCheck.text) {\n    return undefined;\n  }\n\n  return (\n    <PeerColorWrapper peerColor={COLOR} className={styles.root} onClick={canExpand ? handleExpand : undefined}>\n      <div\n        ref={cutoutRef}\n        className={buildClassName(styles.cutoutWrapper, isCollapsed && styles.collapsed)}\n      >\n        <div className={styles.title}>{lang('FactCheck')}</div>\n        <div ref={ref} className={styles.content}>\n          {renderTextWithEntities({\n            text: factCheck.text.text,\n            entities: factCheck.text.entities,\n          })}\n        </div>\n        <Separator className={styles.separator} />\n        <div className={styles.footnote}>{lang('FactCheckFooter', countryLocalized)}</div>\n      </div>\n      {isCollapsible && (\n        <div\n          className={buildClassName(styles.collapseIcon, !isToggleDisabled && styles.clickable)}\n          onClick={!isToggleDisabled ? handleToggle : undefined}\n          aria-hidden\n        >\n          <Icon name={isCollapsed ? 'down' : 'up'} />\n        </div>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(FactCheck);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: ThreadId;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  threadId,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      chatId: message.chatId,\n      messageId: message.id,\n      threadId,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isOwnMessage,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useOldLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription, stars,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {message?.content?.giveaway?.stars ? (\n              <>\n                {renderText(\n                  lang('Chat.Giveaway.Message.Stars.PrizeText', lang('Stars', message?.content?.giveaway?.stars)),\n                  ['simple_markdown'],\n                )}\n                <br />\n                {renderText(lang('AmongWinners', quantity), ['simple_markdown'])}\n              </>\n            ) : (\n              <>\n                {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n                <br />\n                {renderText(lang(\n                  'ActionGiftPremiumSubtitle',\n                  lang('Chat.Giveaway.Info.Months', months),\n                ), ['simple_markdown'])}\n              </>\n            )}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PeerChip\n                peerId={peerId}\n                forceShowSelf\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PeerChip\n                peerId={peerId}\n                forceShowSelf\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const giveawayDuration = isResultsInfo ? lang('Chat.Giveaway.Info.Months', months) : lang('Stars', stars, 'i');\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, giveawayDuration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): Complete<StateProps> => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = (giveaway?.channelIds[0] ? selectChat(global, giveaway.channelIds[0]) : undefined)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\nimport type { ActionPayloads } from '../../../global/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: (payload: ActionPayloads['clickBotInlineButton']) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useOldLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <Icon className=\"corner-icon\" name=\"card\" />;\n      case 'switchBotInline':\n        return <Icon className=\"corner-icon\" name=\"share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <Icon className=\"corner-icon\" name=\"webapp\" />;\n      case 'copy':\n        return <Icon className=\"corner-icon\" name=\"copy\" />;\n      case 'suggestedMessage':\n        if (button.buttonType === 'suggestChanges') {\n          return <Icon className=\"left-icon\" name=\"edit\" />;\n        }\n        if (button.buttonType === 'approve') {\n          return <Icon className=\"left-icon\" name=\"check\" />;\n        }\n        if (button.buttonType === 'decline') {\n          return <Icon className=\"left-icon\" name=\"close\" />;\n        }\n        break;\n    }\n    return undefined;\n  };\n\n  const buttonTexts = useMemo(() => {\n    const texts: TeactNode[][] = [];\n    message.inlineButtons!.forEach((row) => {\n      texts.push(row.map((button) => renderKeyboardButtonText(lang, button)));\n    });\n    return texts;\n  }, [lang, message.inlineButtons]);\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row, i) => (\n        <div className=\"row\">\n          {row.map((button, j) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported' || (button.type === 'suggestedMessage' && button.disabled)}\n\n              onClick={() => onClick({ chatId: message.chatId, messageId: message.id, button })}\n            >\n              {renderIcon(button)}\n              <span className=\"inline-button-text\">\n                {buttonTexts[i][j]}\n              </span>\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(InlineButtons);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ThemeKey;\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    description,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(photoUrl, !withBlurredBackground);\n  const messageId = message.id;\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, messageId, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme, messageId]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {description && (\n        <div className=\"info\">{renderText(description, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(lang, amount, currency, { iconClassName: 'invoice-currency-icon' })}\n          {isTest && <span className=\"test-invoice\">{oldLang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <Icon name=\"lock\" className={styles.lock} />\n        {lang('Checkout.PayPrice', formatCurrencyAsString(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLocationLastUpdate } from '../../../util/dates/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ThemeKey;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const countdownRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { mediaType, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (mediaType === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = mediaType === 'venue' || (mediaType === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePreviousDeprecated(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (mediaType !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [mediaType, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (mediaType !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (mediaType === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (mediaType === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLocationLastUpdate(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      mediaType,\n      isExpired && 'expired',\n    );\n    if (mediaType === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (mediaType === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dates/dateFormat';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  effectEmoji?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onEffectClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n  paidMessageStars?: number;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  effectEmoji,\n  onClick,\n  onTranslationClick,\n  onEffectClick,\n  onOpenThread,\n  paidMessageStars,\n}) => {\n  const { showNotification } = getActions();\n\n  const [isActivated, markActivated] = useFlag();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: {\n        key: 'ImportedInfo',\n      },\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const dateTitle = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, oldLang.code, undefined, oldLang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, oldLang.code, undefined, oldLang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        oldLang.code,\n        undefined,\n        oldLang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('MessageTooltipEditedDate', { date: editDateTime });\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('MessageTooltipForwardedDate', { date: forwardedDateTime });\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, oldLang, message, oldLang.timeFormat]);\n\n  const viewsTitle = useMemo(() => {\n    if (!message.viewsCount) return undefined;\n    let text = lang('MessageTooltipViews', {\n      count: lang.number(message.viewsCount),\n    }, { pluralValue: message.viewsCount });\n    if (message.forwardsCount) {\n      text += '\\n';\n      text += lang('MessageTooltipForwards', {\n        count: lang.number(message.forwardsCount),\n      }, { pluralValue: message.forwardsCount });\n    }\n\n    return text;\n  }, [lang, message.forwardsCount, message.viewsCount]);\n\n  const repliesTitle = useMemo(() => {\n    const count = repliesThreadInfo?.messagesCount;\n    if (!count) return undefined;\n    return lang('MessageTooltipReplies', { count }, { pluralValue: count });\n  }, [lang, repliesThreadInfo]);\n\n  const date = useMemo(() => {\n    const time = formatTime(oldLang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(oldLang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [oldLang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {effectEmoji && (\n        <span className=\"message-effect-icon\" onClick={onEffectClick}>\n          {renderText(effectEmoji)}\n        </span>\n      )}\n      {isTranslated && (\n        <Icon name=\"language\" className=\"message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\" title={viewsTitle}>\n            {formatIntegerCompact(lang, message.viewsCount)}\n          </span>\n          <Icon name=\"channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\" title={repliesTitle}>\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(lang, repliesThreadInfo.messagesCount)} />\n          </span>\n          <Icon name=\"reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <Icon name=\"pinned-message\" className=\"message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      {Boolean(paidMessageStars) && (\n        <span className=\"message-price\">\n          {\n            formatStarsAsIcon(lang, paidMessageStars, {\n              asFont: true,\n              className: 'message-price-star-icon',\n              containerClassName: 'message-price-stars-container',\n            })\n          }\n        </span>\n      )}\n      <span className=\"message-time\" title={dateTitle} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('MessageMetaImported')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('MessageMetaEdited')} `}\n        {message.isVideoProcessingPending && `${lang('MessageMetaApproximate')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ApiMessageActionPhoneCall } from '../../../api/types/messageActions';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dates/dateFormat';\nimport { getCallMessageKey } from './helpers/messageActions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: ApiMessageActionPhoneCall;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useOldLang();\n  const {\n    isVideo, reason, duration,\n  } = phoneCall;\n  const isOutgoing = message.isOutgoing;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <Icon name={isVideo ? 'video-outlined' : 'phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(getCallMessageKey(phoneCall, message.isOutgoing))}</div>\n        <div className={styles.meta}>\n          <Icon\n            name=\"arrow-right\"\n            className={buildClassName(\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mVaSjZRJ\",\"buyButton\":\"GnKGu6D9\",\"boughtStatus\":\"IGXW5hWr\",\"star\":\"ywiOugiH\",\"buttonText\":\"gLaaVQXr\"};","import type React from '../../../lib/teact/teact';\nimport { memo, type TeactNode, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPaidMedia } from '../../../api/types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { replaceWithTeact } from '../../../util/replaceWithTeact';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './PaidMediaOverlay.module.scss';\n\ntype OwnProps = {\n  paidMedia: ApiPaidMedia;\n  chatId: string;\n  messageId: number;\n  isOutgoing?: boolean;\n  children?: TeactNode;\n};\n\nconst PaidMediaOverlay = ({\n  paidMedia,\n  chatId,\n  messageId,\n  isOutgoing,\n  children,\n}: OwnProps) => {\n  const { openInvoice } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const isClickable = !paidMedia.isBought;\n\n  const buttonText = useMemo(() => {\n    const value = oldLang('UnlockPaidContent', paidMedia.starsAmount);\n\n    return replaceWithTeact(\n      value, STARS_ICON_PLACEHOLDER, <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />,\n    );\n  }, [oldLang, paidMedia]);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId,\n    });\n    stopEvent(e);\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={isClickable ? handleClick : undefined}\n    >\n      {children}\n      {isClickable && (\n        <Button\n          className={styles.buyButton}\n          color=\"dark\"\n          size=\"tiny\"\n          fluid\n          pill\n        >\n          <span className={styles.buttonText}>{buttonText}</span>\n        </Button>\n      )}\n      {paidMedia.isBought && (\n        <div className={buildClassName('message-paid-media-status', styles.boughtStatus)}>\n          {isOutgoing\n            ? formatStarsAsIcon(lang, paidMedia.starsAmount)\n            : oldLang('Chat.PaidMedia.Purchased')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(PaidMediaOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const lang = useLang();\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}\n        %\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <Icon name={correctAnswer ? 'check' : 'close'} className=\"poll-option-icon\" />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: answer.text.text,\n            entities: answer.text.entities,\n          })}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { selectPeer } from '../../../global/selectors';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { getServerTime } from '../../../util/serverTime';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onSendVote: (options: string[]) => void;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps> = ({\n  message,\n  poll,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onSendVote,\n}) => {\n  const {\n    loadMessage, openPollResults, requestConfetti, showNotification,\n  } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  const countdownRef = useRef<HTMLDivElement>();\n  const timerCircleRef = useRef<SVGCircleElement>();\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const recentVoterIds = results.recentVoterIds;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: renderTextWithEntities({\n      text: a.text.text,\n      entities: a.text.entities,\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    }),\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [\n    closePeriod, observeIntersectionForLoading, observeIntersectionForPlaying,\n    summary.answers, summary.closePeriod, summary.quiz,\n  ]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const global = getGlobal();\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const peer = selectPeer(global, id);\n      if (peer) {\n        result.push(peer);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const showSolution = useLastCallback(() => {\n    showNotification({\n      localId: getMessageKey(message),\n      message: renderTextWithEntities({ text: poll.results.solution!, entities: poll.results.solutionEntities }),\n      duration: SOLUTION_DURATION,\n      containerSelector: SOLUTION_CONTAINER_ID,\n    });\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        showSolution();\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useOldLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          <AvatarList\n            size=\"micro\"\n            peers={recentVoters}\n          />\n        </div>\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      <div className=\"poll-question\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n          observeIntersectionForLoading,\n          observeIntersectionForPlaying,\n        })}\n      </div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            onClick={showSolution}\n            ariaLabel=\"Show Solution\"\n          >\n            <Icon name=\"lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div\n          className=\"poll-answers\"\n          onClick={stopPropagation}\n        >\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                selected={chosenOptions}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                isRound\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: OldLangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(Poll);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FPceNkgD\",\"inactive\":\"hruUWBuj\",\"mirrored\":\"GydRBA08\",\"effect\":\"WMMaWlOL\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMediaThumbUri, getStickerMediaHash } from '../../../global/helpers';\nimport { IS_WEBM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useOverlayPosition from './hooks/useOverlayPosition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport SensitiveContentConfirmModal from '../../common/SensitiveContentConfirmModal';\nimport StickerView from '../../common/StickerView';\nimport Portal from '../../ui/Portal';\n\nimport styles from './Sticker.module.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  isMediaNsfw?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  onStopEffect?: VoidFunction;\n};\n\ntype StateProps = {\n  needsAgeVerification?: boolean;\n};\n\nconst Sticker: FC<OwnProps & StateProps> = ({\n  message,\n  shouldLoop,\n  shouldPlayEffect,\n  withEffect,\n  isMediaNsfw,\n  onStopEffect,\n  observeIntersection,\n  observeIntersectionForPlaying,\n  needsAgeVerification,\n}) => {\n  const { showNotification, openStickerSet, updateContentSettings, openAgeVerificationModal } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const effectRef = useRef<HTMLDivElement>();\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n  const isMirrored = !message.isOutgoing;\n\n  const [isNsfwModalOpen, openNsfwModal, closeNsfwModal] = useFlag();\n  const [shouldAlwaysShowNsfw, setShouldAlwaysShowNsfw] = useState(false);\n\n  const shouldShowSpoiler = isMediaNsfw;\n  const [isSpoilerShown, showSpoiler, hideSpoiler] = useFlag(shouldShowSpoiler);\n\n  useEffect(() => {\n    if (shouldShowSpoiler) {\n      showSpoiler();\n    } else {\n      hideSpoiler();\n    }\n  }, [shouldShowSpoiler]);\n\n  const handleNsfwConfirm = useLastCallback(() => {\n    closeNsfwModal();\n    hideSpoiler();\n\n    if (shouldAlwaysShowNsfw) {\n      updateContentSettings({ isSensitiveEnabled: true });\n    }\n  });\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getStickerMediaHash(sticker, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect || !withEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const thumbDataUri = getMediaThumbUri(sticker);\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n    }\n  }, [hasEffect, canPlay, shouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const shouldRenderEffect = hasEffect && withEffect && effectBlobUrl && isPlayingEffect;\n  useOverlayPosition({\n    anchorRef: ref,\n    overlayRef: effectRef,\n    isMirrored,\n    isDisabled: !shouldRenderEffect,\n  });\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isSpoilerShown) {\n      if (isMediaNsfw) {\n        if (needsAgeVerification) {\n          openAgeVerificationModal();\n          return;\n        }\n        openNsfwModal();\n        return;\n      }\n      hideSpoiler();\n      return;\n    }\n\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'media-inner',\n    styles.root,\n    isMemojiSticker && styles.inactive,\n    hasEffect && isMirrored && styles.mirrored,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n        isNsfw={isMediaNsfw}\n      />\n      {shouldRenderEffect && (\n        <Portal>\n          <AnimatedSticker\n            ref={effectRef}\n            key={mediaHashEffect}\n            className={buildClassName(styles.effect, isMirrored && styles.mirrored)}\n            tgsUrl={effectBlobUrl}\n            size={width * EFFECT_SIZE_MULTIPLIER}\n            play\n            isLowPriority\n            noLoop\n            onEnded={handleEffectEnded}\n          />\n        </Portal>\n      )}\n      <SensitiveContentConfirmModal\n        isOpen={isNsfwModalOpen}\n        onClose={closeNsfwModal}\n        shouldAlwaysShow={shouldAlwaysShowNsfw}\n        onAlwaysShowChanged={setShouldAlwaysShowNsfw}\n        confirmHandler={handleNsfwConfirm}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const appConfig = global.appConfig;\n  const needsAgeVerification = appConfig.needAgeVideoVerification;\n\n  return {\n    needsAgeVerification,\n  };\n})(Sticker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"EVLTkrt1\",\"preview\":\"V3HabdKr\",\"linkPreview\":\"ClGe8yij\",\"media\":\"WAItYc5d\",\"nonInteractive\":\"AQWPv0bP\",\"expired\":\"tprkr7qf\",\"expiredIcon\":\"nLA7VEhv\"};","import { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessageStoryData, ApiTypeStory } from '../../../api/types';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport MediaAreaOverlay from '../../story/mediaArea/MediaAreaOverlay';\n\nimport styles from './BaseStory.module.scss';\n\ninterface OwnProps {\n  story?: ApiTypeStory | ApiMessageStoryData;\n  isPreview?: boolean;\n  isProtected?: boolean;\n  isConnected?: boolean;\n}\n\nfunction BaseStory({\n  story, isPreview, isProtected, isConnected,\n}: OwnProps) {\n  const { openStoryViewer, loadPeerStoriesByIds, showNotification } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const isExpired = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbnail = isLoaded ? (video ? video.thumbnail?.dataUri : story.content.photo?.thumbnail?.dataUri) : undefined;\n  const mediaUrl = useCurrentOrPrev(imgBlobUrl, true);\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(Boolean(mediaUrl));\n  const blurredBackgroundRef = useCanvasBlur(\n    thumbnail,\n    isExpired && !isPreview,\n    isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n\n  const fullClassName = buildClassName(\n    styles.root,\n    'media-inner',\n    (!isConnected || isExpired) && styles.nonInteractive,\n    isExpired && styles.expired,\n    isPreview && styles.preview,\n  );\n\n  useEffect(() => {\n    if (story && !(isLoaded || isExpired)) {\n      loadPeerStoriesByIds({ peerId: story.peerId, storyIds: [story.id] });\n    }\n  }, [story, isExpired, isLoaded]);\n\n  const handleClick = useLastCallback(() => {\n    if (isExpired) {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n      return;\n    }\n\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  return (\n    <div\n      className={fullClassName}\n      onClick={isConnected ? handleClick : undefined}\n    >\n      {!isExpired && isPreview && (\n        <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />\n      )}\n      {shouldRender && (\n        <>\n          <img\n            src={mediaUrl}\n            alt=\"\"\n            className={buildClassName(styles.media, isPreview && styles.linkPreview, transitionClassNames)}\n            draggable={false}\n          />\n          {isLoaded && <MediaAreaOverlay story={story} className={transitionClassNames} />}\n        </>\n      )}\n      {isExpired && (\n        <span>\n          <Icon name=\"story-expired\" className={styles.expiredIcon} />\n          {lang('StoryExpiredSubtitle')}\n        </span>\n      )}\n      {Boolean(video?.duration) && (\n        <div className=\"message-media-duration\">\n          {formatMediaDuration(video.duration)}\n        </div>\n      )}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default memo(BaseStory);\n","import { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): Complete<StateProps> => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useOldLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getPeerTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): Complete<StateProps> => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import {\n  memo, useLayoutEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMediaTodo,\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport { getPeerFullTitle, getPeerTitle } from '../../../global/helpers/peers';\nimport { selectIsCurrentUserPremium, selectSender, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\n\nimport './TodoList.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  todoList: ApiMediaTodo;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  isCurrentUserPremium: boolean;\n  isSynced?: boolean;\n};\n\nconst TodoList = ({\n  message,\n  todoList,\n  sender,\n  isCurrentUserPremium,\n  isSynced,\n}: OwnProps & StateProps) => {\n  const { toggleTodoCompleted, showNotification, requestConfetti } = getActions();\n  const { todo, completions } = todoList;\n  const { title, items, othersCanComplete } = todo;\n  const [completedTasks, setCompletedTasks] = useState<string[]>([]);\n  const completedTasksSet = useMemo(() => new Set(completedTasks), [completedTasks]);\n\n  const canToggle = !message.isScheduled && isCurrentUserPremium && isSynced;\n\n  useLayoutEffect(() => {\n    const completedIds = completions?.map((c) => c.itemId.toString()) || [];\n    setCompletedTasks(completedIds);\n  }, [completions]);\n\n  const lang = useLang();\n\n  const handleTaskLabelClick = useLastCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('SubscribeToTelegramPremiumForToggleTask'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'todo' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n      return;\n    }\n  });\n\n  const handleTaskToggle = useLastCallback((newCompletedTasks: string[]) => {\n    const newCompletedId = newCompletedTasks.find((id) => !completedTasksSet.has(id));\n    const newIncompletedId = Array.from(completedTasksSet).find((id) => !newCompletedTasks.includes(id));\n\n    toggleTodoCompleted({\n      chatId: message.chatId,\n      messageId: message.id,\n      completedIds: newCompletedId ? [Number(newCompletedId)] : [],\n      incompletedIds: newIncompletedId ? [Number(newIncompletedId)] : [],\n    });\n\n    if (newCompletedTasks.length === items.length) {\n      requestConfetti({});\n    }\n  });\n  const isReadOnly = Boolean(message.forwardInfo) || (!othersCanComplete && !message.isOutgoing);\n  const isOutgoing = message.isOutgoing;\n\n  const tasks = useMemo(() => items.map((task) => {\n    const user = !othersCanComplete ? undefined : selectUser(getGlobal(),\n      completions?.find((c) => c.itemId === task.id)?.completedBy || '');\n    const subLabel = user ? getPeerFullTitle(lang, user) : undefined;\n    return {\n      label: renderTextWithEntities(task.title),\n      value: task.id.toString(),\n      user,\n      subLabel,\n    };\n  }), [items, othersCanComplete, completions, lang]);\n\n  const renderCheckBoxGroup = () => {\n    return (\n      <CheckboxGroup\n        options={tasks}\n        selected={completedTasks}\n        onChange={handleTaskToggle}\n        onClickLabel={!isCurrentUserPremium ? handleTaskLabelClick : undefined}\n        disabled={!canToggle}\n        isRound\n      />\n    );\n  };\n\n  const renderReadOnlyTodoList = () => {\n    return (\n      <div className=\"todo-list-items\">\n        {tasks.map((task) => (\n          <div\n            key={task.value}\n            className=\"todo-list-readonly-item\"\n          >\n            <div className=\"todo-readonly-item-checkbox\">\n              {completedTasksSet.has(task.value)\n                ? <Icon name=\"check\" />\n                : <div className=\"todo-item-bullet-point\" />}\n            </div>\n            <div\n              className={buildClassName(\n                'readonly-item-label',\n                completedTasksSet.has(task.value) && 'completed-label',\n              )}\n            >\n              {task.label}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderTodoListType = () => {\n    if (message.forwardInfo) {\n      return lang('TitleToDoList');\n    }\n\n    if (othersCanComplete) {\n      return lang('TitleGroupToDoList');\n    }\n\n    if (isOutgoing) {\n      return lang('TitleYourToDoList');\n    }\n\n    if (sender) {\n      return lang('TitleUserToDoList', { peer: getPeerTitle(lang, sender) }, { withNodes: true });\n    }\n\n    return lang('TitleToDoList');\n  };\n\n  return (\n    <div className=\"todo-list\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      <div className=\"todo-list-header\">\n        <div className=\"todo-list-title\">\n          {renderTextWithEntities(title)}\n        </div>\n        <div className=\"list-type\">\n          {renderTodoListType()}\n        </div>\n      </div>\n\n      <div className=\"todo-list-items\">\n        {isReadOnly ? renderReadOnlyTodoList() : renderCheckBoxGroup()}\n      </div>\n      <div className=\"completed-tasks-count\">\n        <AnimatedCounter text={\n          lang('DescriptionCompletedToDoTasks', {\n            number: completedTasks.length,\n            count: tasks.length,\n          })\n        }\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { message }): Complete<StateProps> => {\n  const sender = selectSender(global, message);\n  return {\n    sender,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    isSynced: global.isSynced,\n  };\n},\n)(TodoList));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LaOdPURl\",\"backgroundWrapper\":\"zDnMa37m\",\"background\":\"EdXfeKWY\",\"stickerWrapper\":\"o_DYZEMV\"};","import { memo, useRef } from '@teact';\n\nimport type { ApiStarGiftUnique } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../util/buildClassName.ts';\nimport { getGiftAttributes } from '../../common/helpers/gifts';\n\nimport useFlag from '../../../hooks/useFlag.ts';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport StickerView from '../../common/StickerView';\n\nimport styles from './WebPageUniqueGift.module.scss';\n\ntype OwnProps = {\n  gift: ApiStarGiftUnique;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\nconst STAR_GIFT_STICKER_SIZE = 120;\n\nconst WebPageUniqueGift = ({\n  gift,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}: OwnProps) => {\n  const stickerRef = useRef<HTMLDivElement>();\n  const {\n    backdrop, model, pattern,\n  } = getGiftAttributes(gift)!;\n\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const backgroundColors = [backdrop!.centerColor, backdrop!.edgeColor];\n\n  return (\n    <div\n      className={buildClassName('interactive-gift', styles.root)}\n      onClick={onClick}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      <div className={styles.backgroundWrapper}>\n        <RadialPatternBackground\n          className={styles.background}\n          backgroundColors={backgroundColors}\n          patternColor={backdrop!.patternColor}\n          patternIcon={pattern!.sticker}\n        />\n      </div>\n      <div ref={stickerRef} className={styles.stickerWrapper}>\n        <StickerView\n          containerRef={stickerRef}\n          sticker={model!.sticker}\n          size={STAR_GIFT_STICKER_SIZE}\n          shouldLoop={isHover}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WebPageUniqueGift);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageWebPage, ApiTypeStory, ApiWebPage, ApiWebPageFull } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { AudioOrigin, type ThemeKey, type WebPageMediaSize } from '../../../types';\n\nimport { getPhotoFullDimensions } from '../../../global/helpers';\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { tryParseDeepLink } from '../../../util/deepLinkParser';\nimport trimText from '../../../util/trimText';\nimport renderText from '../../common/helpers/renderText';\nimport { getWebpageButtonLangKey } from './helpers/webpageType';\n\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Audio from '../../common/Audio';\nimport Document from '../../common/Document';\nimport EmojiIconBackground from '../../common/embedded/EmojiIconBackground';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport SafeLink from '../../common/SafeLink';\nimport StickerView from '../../common/StickerView';\nimport Button from '../../ui/Button';\nimport BaseStory from './BaseStory';\nimport Photo from './Photo';\nimport Video from './Video';\nimport WebPageUniqueGift from './WebPageUniqueGift';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\nconst WEBPAGE_STORY_TYPE = 'telegram_story';\nconst WEBPAGE_GIFT_TYPE = 'telegram_nft';\nconst STICKER_SIZE = 80;\nconst EMOJI_SIZE = 38;\n\ntype OwnProps = {\n  messageWebPage: ApiMessageWebPage;\n  webPage: ApiWebPage;\n  message?: ApiMessage;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  asForwarded?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  isConnected?: boolean;\n  backgroundEmojiId?: string;\n  theme: ThemeKey;\n  story?: ApiTypeStory;\n  shouldWarnAboutFiles?: boolean;\n  autoLoadFileMaxSizeMb?: number;\n  lastPlaybackTimestamp?: number;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onAudioPlay?: NoneToVoidFunction;\n  onMediaClick?: NoneToVoidFunction;\n  onDocumentClick?: NoneToVoidFunction;\n  onCancelMediaTransfer?: NoneToVoidFunction;\n  onContainerClick?: ((e: React.MouseEvent) => void);\n};\ntype StateProps = {\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst WebPage: FC<OwnProps & StateProps> = ({\n  messageWebPage,\n  webPage,\n  message,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  asForwarded,\n  isDownloading = false,\n  isProtected,\n  isConnected,\n  story,\n  theme,\n  backgroundEmojiId,\n  shouldWarnAboutFiles,\n  autoLoadFileMaxSizeMb,\n  lastPlaybackTimestamp,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onMediaClick,\n  onDocumentClick,\n  onContainerClick,\n  onAudioPlay,\n  onCancelMediaTransfer,\n}) => {\n  const { openUrl, openTelegramLink } = getActions();\n  const stickersRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const handleMediaClick = useLastCallback(() => {\n    onMediaClick!();\n  });\n\n  const handleContainerClick = useLastCallback((e: React.MouseEvent) => {\n    onContainerClick?.(e);\n  });\n\n  const fullWebPage = webPage?.webpageType === 'full' ? webPage : undefined;\n\n  const { story: storyData, stickers } = fullWebPage || {};\n\n  useEnsureStory(storyData?.peerId, storyData?.id, story);\n\n  const hasCustomColor = stickers?.isWithTextColor || stickers?.documents?.[0]?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(stickersRef, undefined, !hasCustomColor);\n\n  const linkTimestamp = useMemo(() => {\n    const parsedLink = webPage?.url && tryParseDeepLink(webPage?.url);\n    if (!parsedLink || !('timestamp' in parsedLink)) return undefined;\n    return parsedLink.timestamp;\n  }, [webPage?.url]);\n\n  if (webPage?.webpageType !== 'full') return undefined;\n\n  const handleOpenTelegramLink = useLastCallback(() => {\n    openTelegramLink({\n      url: webPage.url,\n    });\n  });\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n    audio,\n    type,\n    document,\n  } = webPage;\n  const { mediaSize } = messageWebPage;\n  const isStory = type === WEBPAGE_STORY_TYPE;\n  const isGift = type === WEBPAGE_GIFT_TYPE;\n  const isExpiredStory = story && 'isDeleted' in story;\n\n  const resultType = stickers?.isEmoji ? 'telegram_emojiset' : type;\n  const quickButtonLangKey = !isExpiredStory ? getWebpageButtonLangKey(resultType) : undefined;\n  const quickButtonTitle = quickButtonLangKey && lang(quickButtonLangKey);\n\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = Boolean(stickers);\n  if (isArticle && webPage?.photo && !webPage.video && !webPage.document) {\n    isSquarePhoto = getIsSmallPhoto(webPage, mediaSize);\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n    document && 'with-document',\n    quickButtonTitle && 'with-quick-button',\n    isGift && 'with-gift',\n  );\n\n  function renderQuickButton(caption: string) {\n    return (\n      <Button\n        className=\"WebPage--quick-button\"\n        size=\"tiny\"\n        color=\"translucent\"\n        isRectangular\n        noForcedUpperCase\n        onClick={handleOpenTelegramLink}\n      >\n        {caption}\n      </Button>\n    );\n  }\n\n  return (\n    <PeerColorWrapper\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir={oldLang.isRtl ? 'rtl' : 'auto'}\n      onClick={handleContainerClick}\n    >\n      <div className={buildClassName(\n        'WebPage--content',\n        isStory && 'is-story',\n        isGift && 'is-gift',\n      )}\n      >\n        {backgroundEmojiId && (\n          <EmojiIconBackground\n            emojiDocumentId={backgroundEmojiId}\n            className=\"WebPage--background-icons\"\n          />\n        )}\n        {isStory && (\n          <BaseStory story={story} isProtected={isProtected} isConnected={isConnected} isPreview />\n        )}\n        {isGift && (\n          <WebPageUniqueGift\n            gift={webPage.gift!}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleOpenTelegramLink}\n          />\n        )}\n        {isArticle && (\n          <div\n            className={buildClassName('WebPage-text', 'WebPage-text_interactive')}\n            onClick={() => openUrl({ url, shouldSkipModal: messageWebPage.isSafe })}\n          >\n            <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n            {title && (\n              <p className=\"site-title\">{renderText(title)}</p>\n            )}\n            {truncatedDescription && !isGift && (\n              <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n            )}\n          </div>\n        )}\n        {photo && !isGift && !video && !document && (\n          <Photo\n            photo={photo}\n            isOwn={message?.isOutgoing}\n            isInWebPage\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            size={isSquarePhoto ? 'pictogram' : 'inline'}\n            asForwarded={asForwarded}\n            nonInteractive={!isMediaInteractive}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n        {video && (\n          <Video\n            video={video}\n            isOwn={message?.isOutgoing}\n            isInWebPage\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            canAutoPlay={canAutoPlay}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            lastPlaybackTimestamp={lastPlaybackTimestamp || linkTimestamp}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n        {audio && (\n          <Audio\n            theme={theme}\n            message={message!}\n            origin={AudioOrigin.Inline}\n            noAvatars={noAvatars}\n            isDownloading={isDownloading}\n            onPlay={onAudioPlay}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n        {document && (\n          <Document\n            document={document}\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            onMediaClick={onDocumentClick}\n            onCancelUpload={onCancelMediaTransfer}\n            isDownloading={isDownloading}\n            shouldWarnAboutFiles={shouldWarnAboutFiles}\n          />\n        )}\n        {stickers && (\n          <div\n            ref={stickersRef}\n            className={buildClassName(\n              'media-inner', 'square-image', stickers.isEmoji && 'WebPage--emoji-grid', 'WebPage--stickers',\n            )}\n          >\n            {stickers.documents.map((sticker) => (\n              <div key={sticker.id} className=\"WebPage--sticker\">\n                <StickerView\n                  containerRef={stickersRef}\n                  sticker={sticker}\n                  shouldLoop\n                  size={stickers.isEmoji ? EMOJI_SIZE : STICKER_SIZE}\n                  customColor={customColor}\n                  observeIntersectionForPlaying={observeIntersectionForPlaying}\n                  observeIntersectionForLoading={observeIntersectionForLoading}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n      {quickButtonTitle && renderQuickButton(quickButtonTitle)}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getIsSmallPhoto(webPage: ApiWebPageFull, mediaSize?: WebPageMediaSize) {\n  if (!webPage?.photo) return false;\n  if (mediaSize === 'small') return true;\n  if (mediaSize === 'large') return false;\n\n  const { width, height } = getPhotoFullDimensions(webPage.photo) || {};\n  if (!width || !height) return false;\n\n  return width === height && !webPage.hasLargeMedia;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(WebPage));\n","import type { RegularLangKey } from '../../../../types/language';\n\n// https://github.com/telegramdesktop/tdesktop/blob/3da787791f6d227f69b32bf4003bc6071d05e2ac/Telegram/SourceFiles/history/view/history_view_view_button.cpp#L51\nexport function getWebpageButtonLangKey(type?: string): RegularLangKey | undefined {\n  switch (type) {\n    case 'telegram_channel_request':\n    case 'telegram_megagroup_request':\n    case 'telegram_chat_request':\n      return 'ViewButtonRequestJoin';\n    case 'telegram_message':\n      return 'ViewButtonMessage';\n    case 'telegram_bot':\n      return 'ViewButtonBot';\n    case 'telegram_voicechat':\n      return 'ViewButtonVoiceChat';\n    case 'telegram_livestream':\n      return 'ViewButtonVoiceChatChannel';\n    case 'telegram_megagroup':\n    case 'telegram_chat':\n      return 'ViewButtonGroup';\n    case 'telegram_channel':\n      return 'ViewButtonChannel';\n    case 'telegram_user':\n      return 'ViewButtonUser';\n    case 'telegram_botapp':\n      return 'ViewButtonBotApp';\n    case 'telegram_chatlist':\n      return 'ViewChatList';\n    case 'telegram_story':\n      return 'ViewButtonStory';\n    case 'telegram_channel_boost':\n    case 'telegram_group_boost':\n      return 'ViewButtonBoost';\n    case 'telegram_stickerset':\n      return 'ViewButtonStickerset';\n    case 'telegram_emojiset':\n      return 'ViewButtonEmojiset';\n    case 'telegram_nft':\n      return 'ViewButtonGiftUnique';\n    default:\n      return undefined;\n  }\n}\n","import {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiPoll,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n  ApiWebPage,\n} from '../../../api/types';\nimport type { ActionPayloads } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  FocusDirection,\n  IAlbum,\n  MessageListType,\n  ScrollTargetPosition,\n  ThemeKey,\n  ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { OnIntersectPinnedMessage } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, MESSAGE_APPEARANCE_DELAY } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getIsDownloading,\n  getMainUsername,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getMessageWebPage,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport { getPeerFullTitle } from '../../../global/helpers/peers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectActiveDownloads,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectCanReplyToMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentMiddleSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectFullWebPageFromMessage,\n  selectIsChatProtected,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectPollFromMessage,\n  selectReplyMessage,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport {\n  selectIsMediaNsfw,\n  selectMessageDownloadableMedia,\n  selectMessageLastPlaybackTimestamp,\n  selectMessageTimestampableDuration,\n} from '../../../global/selectors/media';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { IS_ANDROID, IS_TRANSLATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { getServerTime } from '../../../util/serverTime';\nimport stopEvent from '../../../util/stopEvent';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport { calculateDimensionsForMessageMedia, getStickerDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport getSingularPaidMedia from './helpers/getSingularPaidMedia';\nimport { calculateMediaDimensions, getMinMediaWidth, getMinMediaWidthWithText } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useMessageResizeObserver from '../../../hooks/useResizeMessageObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport MessageText from '../../common/MessageText';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport FactCheck from './FactCheck';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageEffect from './MessageEffect';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport PaidMediaOverlay from './PaidMediaOverlay';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport TodoList from './TodoList';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    noReactions?: boolean;\n    appearAsNotOwn?: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef?: { current: number | undefined };\n    getIsMessageListReady?: Signal<boolean>;\n    observeIntersectionForBottom?: ObserveFn;\n    observeIntersectionForLoading?: ObserveFn;\n    observeIntersectionForPlaying?: ObserveFn;\n    onIntersectPinnedMessage?: OnIntersectPinnedMessage;\n    isInFocusList?: boolean;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ThemeKey;\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  focusedQuoteOffset?: number;\n  noFocusHighlight?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withAnimatedEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutFiles?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n  effect?: ApiAvailableEffect;\n  poll?: ApiPoll;\n  webPage?: ApiWebPage;\n  maxTimestamp?: number;\n  lastPlaybackTimestamp?: number;\n  paidMessageStars?: number;\n  isChatWithUser?: boolean;\n  isAccountFrozen?: boolean;\n  minFutureTime?: number;\n  isMediaNsfw?: boolean;\n  isReplyMediaNsfw?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst MAX_REASON_LENGTH = 200;\n\nconst Message = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  noReactions,\n  appearAsNotOwn,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  isInFocusList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  focusedQuoteOffset,\n  noFocusHighlight,\n  scrollTargetPosition,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withAnimatedEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutFiles,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  effect,\n  poll,\n  maxTimestamp,\n  lastPlaybackTimestamp,\n  isMediaNsfw,\n  isReplyMediaNsfw,\n  paidMessageStars,\n  isChatWithUser,\n  isAccountFrozen,\n  minFutureTime,\n  webPage,\n  onIntersectPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    clickSuggestedMessageButton,\n    rejectSuggestedPost,\n    openSuggestedPostApprovalModal,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const bottomMarkerRef = useRef<HTMLDivElement>();\n  const quickReactionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [isPlayingSnapAnimation, setIsPlayingSnapAnimation] = useState(false);\n  const [isPlayingDeleteAnimation, setIsPlayingDeleteAnimation] = useState(false);\n  const [shouldPlayEffect, requestEffect, hideEffect] = useFlag();\n  const [isDeclineDialogOpen, openDeclineDialog, closeDeclineDialog] = useFlag();\n  const [declineReason, setDeclineReason] = useState('');\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    (isTouchScreen && isInSelectMode) || isAccountFrozen || isInFocusList,\n    !IS_TAURI,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  useShowTransition({\n    ref,\n    isOpen: isShown || isJustAdded,\n    noMountTransition: noAppearanceAnimation && !isJustAdded,\n    className: false,\n  });\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError, factCheck,\n  } = message;\n\n  useUnmountCleanup(() => {\n    if (message.isPinned) {\n      const id = album ? album.mainMessage.id : messageId;\n      onIntersectPinnedMessage?.({ viewportPinnedIdsToRemove: [id] });\n    }\n  });\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = appearAsNotOwn ? false : isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo, audio,\n    voice, document, sticker, contact,\n    invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults, todo,\n  } = getMessageContent(message);\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = !withVoiceTranscription && getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = noReactions ? false : reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isAnonymousForwards\n    && !botSender\n  ) || Boolean(storyData && !storyData.isMention);\n  const canShowSenderBoosts = Boolean(senderBoosts) && !asForwarded && isFirstInGroup;\n  const isStoryMention = storyData?.isMention;\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isAlbum = Boolean(album)\n    && (\n      (album.isPaidMedia && paidMedia!.extendedMedia.length > 1)\n      || album.messages.length > 1\n    ) && !album.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  ) || isInFocusList;\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed\n    && !isChatProtected;\n  const canMarkAsRead = isChatWithSelf || isInFocusList;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || isChatWithSelf || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasFactCheck = Boolean(factCheck?.text);\n\n  const hasForwardedCustomShape = asForwarded && isCustomShape;\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply || hasForwardedCustomShape;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    if (isAccountFrozen) return;\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n\n  const messageColorPeer = asForwarded ? originSender : sender;\n  const noUserColors = isOwn && !isCustomShape;\n\n  const senderPeer = (forwardInfo || storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleDocumentClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleMarkAsRead,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers({\n    lang: oldLang,\n    selectMessage,\n    message,\n    webPage,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    isTranslatingChat: Boolean(requestedChatTranslationLanguage),\n    story: replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n    isSavedMessages: isChatWithSelf,\n    lastPlaybackTimestamp,\n    isInFocusList,\n  });\n\n  const handleEffectClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    requestEffect();\n  });\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  useEffect(() => {\n    const element = ref.current;\n    const isPartialAlbumDelete = message.isInAlbum && album?.messages.some((msg) => !msg.isDeleting);\n    if (message.isDeleting && element && !isPartialAlbumDelete) {\n      if (animateSnap(element)) {\n        setIsPlayingSnapAnimation(true);\n      } else {\n        setIsPlayingDeleteAnimation(true);\n      }\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Only start animation on `isDeleting` change\n  }, [message.isDeleting]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasTextContent = textMessage && hasMessageText(textMessage);\n  const hasText = hasTextContent || hasFactCheck;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'hide-on-print',\n    isProtected && !hasTextContent ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    isPlayingDeleteAnimation && 'is-deleting',\n    isPlayingSnapAnimation && 'is-dissolving',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || shouldPlayEffect) && 'has-active-effect',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const text = textMessage && getMessageContent(textMessage).text;\n  const isInvertedMedia = Boolean(message.isInvertedMedia);\n\n  const { replyToMsgId, replyToPeerId } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  useEffect(() => {\n    if ((sticker?.hasEffect || effect) && ((\n      memoFirstUnreadIdRef?.current && messageId >= memoFirstUnreadIdRef.current\n    ) || isLocal)) {\n      requestEffect();\n    }\n  }, [effect, isLocal, memoFirstUnreadIdRef, messageId, sticker?.hasEffect]);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled && shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePreviousDeprecated(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const phoneCall = action?.type === 'phoneCall' ? action : undefined;\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl && !isAccountFrozen && !isInFocusList;\n\n  const hasOutsideReactions = !withVoiceTranscription && hasReactions\n    && (isCustomShape || (\n      (photo || video || storyData || (location?.mediaType === 'geo')) && (!hasText || isInvertedMedia))\n    );\n\n  const contentClassName = buildContentClassName(message, album, {\n    poll,\n    webPage,\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasBottomCommentButton: withCommentButton && !isCustomShape,\n    hasActionButton: canForward || canFocus || (withCommentButton && isCustomShape),\n    hasReactions,\n    isGeoLiveActive: location?.mediaType === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors, true),\n    hasOutsideReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(text?.emojiOnlyCount);\n\n  const paidMessageStarsInMeta = !isChatWithUser\n    ? (isAlbum && paidMessageStars ? album.messages.length * paidMessageStars : paidMessageStars)\n    : undefined;\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize && !isInvertedMedia) {\n    metaPosition = 'in-text';\n  } else if (isInvertedMedia && !emojiSize && (hasFactCheck || webPage)) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (hasOutsideReactions) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage({\n    elementRef: ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    isQuote: Boolean(focusedQuote),\n    scrollTargetPosition,\n    isInFocusList,\n  });\n\n  const viaBusinessBotTitle = viaBusinessBot ? getPeerFullTitle(oldLang, viaBusinessBot) : undefined;\n\n  const canShowPostAuthor = !message.senderId;\n  const signature = viaBusinessBotTitle || (canShowPostAuthor && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  useMessageResizeObserver(ref, isLastInList);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    let unreadMentionIds: number[] = [];\n    if (message.hasUnreadMention) {\n      unreadMentionIds = [messageId];\n    }\n\n    if (album) {\n      unreadMentionIds = album.messages.filter((msg) => msg.hasUnreadMention).map((msg) => msg.id);\n    }\n\n    if (unreadMentionIds.length) {\n      markMentionsRead({ chatId, messageIds: unreadMentionIds });\n    }\n  }, [hasUnreadReaction, album, chatId, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(noAvatars), album, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded && !isCustomShape ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo || video) {\n        const media = (photo || video);\n        if (media && !isRoundVideo) {\n          width = calculateMediaDimensions({\n            media,\n            isOwn,\n            asForwarded,\n            noAvatars,\n            isMobile,\n          }).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < getMinMediaWidthWithText(isMobile)) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMobile, isMediaWithCommentButton), width);\n      }\n    } else if (albumLayout) {\n      const minWidth = getMinMediaWidth(text?.text, isMobile, isMediaWithCommentButton);\n      calculatedWidth = Math.max(minWidth, albumLayout.containerStyle.width);\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, noAvatars, photo, sticker, text?.text, video, isRoundVideo,\n  ]);\n\n  const {\n    contentWidth, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        focusedQuoteOffset={focusedQuoteOffset}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n        isInSelectMode={isInSelectMode}\n        canBeEmpty={hasFactCheck}\n        maxTimestamp={maxTimestamp}\n        threadId={threadId}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName(\n          'quick-reaction',\n          'no-selection',\n          isQuickReactionVisible && !hasActiveReactions && 'visible',\n        )}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        effectEmoji={effect?.emoticon}\n        onClick={handleMetaClick}\n        onEffectClick={handleEffectClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n        paidMessageStars={paidMessageStarsInMeta}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        threadId={threadId}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n        isAccountFrozen={isAccountFrozen}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasForwardedCustomShape && 'forwarded-custom-shape',\n      hasSubheader && 'with-subheader',\n    );\n    const hasCustomAppendix = isLastInGroup\n      && (!hasText || (isInvertedMedia && !hasFactCheck && reactionsPosition !== 'inside')) && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && shouldRenderSenderName() && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasForwardedCustomShape && (\n              <div className=\"forward-custom-shape-subheader\">\n                <div className=\"message-title\">\n                  {renderForwardTitle()}\n                </div>\n                {renderSenderName(true, true)}\n              </div>\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                isMediaNsfw={isReplyMediaNsfw}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && observeIntersectionForLoading && observeIntersectionForPlaying && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={shouldPlayEffect}\n            withEffect={withAnimatedEffects}\n            isMediaNsfw={isMediaNsfw}\n            onStopEffect={hideEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withAnimatedEffects && isChatWithUser && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withAnimatedEffects && isChatWithUser && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {withAnimatedEffects && effect && !isLocal && (\n          <MessageEffect\n            shouldPlay={shouldPlayEffect}\n            messageId={message.id}\n            isMirrored={!message.isOutgoing}\n            effect={effect}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onStop={hideEffect}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && isRoundVideo && !withVoiceTranscription && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n            onHideTranscription={setTranscriptionHidden}\n            isTranscriptionError={isTranscriptionError}\n            isTranscribed={Boolean(transcribedText)}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribing={isTranscribing}\n          />\n        )}\n        {(audio || voice || withVoiceTranscription) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            document={document}\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleDocumentClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutFiles={shouldWarnAboutFiles}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {todo && (\n          <TodoList message={message} todoList={todo} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            threadId={threadId}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? oldLang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {isInvertedMedia && renderInvertedMediaContent(hasCustomAppendix)}\n\n        {!isInvertedMedia && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {hasText && !hasAnimatedEmoji && (\n              <div className={textContentClass} dir=\"auto\">\n                {renderMessageText()}\n                {isTranslationPending && (\n                  <div className=\"translation-animation\">\n                    <div className=\"text-loading\">\n                      {renderMessageText(true)}\n                    </div>\n                  </div>\n                )}\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {metaPosition === 'in-text' && renderReactionsAndMeta()}\n              </div>\n            )}\n            {renderWebPage()}\n          </>\n        )}\n\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderInvertedMediaContent(hasCustomAppendix: boolean) {\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n    );\n    const footerClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    const hasMediaAfterText = isAlbum || (!isAlbum && photo) || (!isAlbum && video && !isRoundVideo);\n    const hasContentAfterText = hasMediaAfterText || (!hasAnimatedEmoji && hasFactCheck);\n    const isMetaInText = metaPosition === 'in-text';\n\n    return (\n      <>\n        {renderWebPage()}\n        {hasText && !hasAnimatedEmoji && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {!hasContentAfterText && isMetaInText && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {hasContentAfterText && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {!hasAnimatedEmoji && (\n              <div className={footerClass} dir=\"auto\">\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {isMetaInText && renderReactionsAndMeta()}\n              </div>\n            )}\n          </>\n        )}\n\n      </>\n    );\n  }\n\n  function renderWebPage() {\n    const messageWebPage = getMessageWebPage(message);\n    if (!messageWebPage || !webPage) return undefined;\n    return (\n      <WebPage\n        messageWebPage={messageWebPage}\n        webPage={webPage}\n        message={message}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        noAvatars={noAvatars}\n        canAutoLoad={canAutoLoadMedia}\n        canAutoPlay={canAutoPlayMedia}\n        asForwarded={asForwarded}\n        isDownloading={isDownloading}\n        isProtected={isProtected}\n        theme={theme}\n        story={webPageStory}\n        isConnected={isConnected}\n        lastPlaybackTimestamp={lastPlaybackTimestamp}\n        backgroundEmojiId={messageColorPeer?.color?.backgroundEmojiId}\n        shouldWarnAboutFiles={shouldWarnAboutFiles}\n        autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n        onAudioPlay={handleAudioPlay}\n        onMediaClick={handleMediaClick}\n        onDocumentClick={handleDocumentClick}\n        onCancelMediaTransfer={handleCancelUpload}\n      />\n    );\n  }\n\n  function renderInvertibleMediaContent(hasCustomAppendix: boolean) {\n    const content = (\n      <>\n        {isAlbum && observeIntersectionForLoading && (\n          <Album\n            album={album}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            messageText={text?.text}\n            photo={photo}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            isMediaNsfw={isMediaNsfw}\n            forcedWidth={contentWidth}\n            onClick={handlePhotoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && !isRoundVideo && (\n          <Video\n            video={video}\n            isOwn={isOwn}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            isMediaNsfw={isMediaNsfw}\n            lastPlaybackTimestamp={lastPlaybackTimestamp}\n            onClick={handleVideoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n      </>\n    );\n\n    if (paidMedia) {\n      return (\n        <PaidMediaOverlay chatId={chatId} messageId={messageId} paidMedia={paidMedia} isOutgoing={isOwn}>\n          {content}\n        </PaidMediaOverlay>\n      );\n    }\n\n    return content;\n  }\n\n  function shouldRenderSenderName() {\n    const media = photo || video || location || paidMedia;\n    return !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n  }\n\n  function renderForwardTitle() {\n    return (\n      <span className=\"forward-title-container\">\n        {asForwarded && (\n          <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n        )}\n        {asForwarded && (\n          <span className=\"forward-title\">\n            {oldLang('ForwardedFrom')}\n          </span>\n        )}\n      </span>\n    );\n  }\n\n  const handleSuggestedMessageButton = useLastCallback((payload: ActionPayloads['clickBotInlineButton']) => {\n    if (payload.button.type !== 'suggestedMessage') return;\n    if (payload.button.buttonType === 'approve') {\n      openSuggestedPostApprovalModal({\n        chatId,\n        messageId: message.id,\n      });\n      return;\n    }\n\n    if (payload.button.buttonType === 'decline') {\n      openDeclineDialog();\n      return;\n    }\n\n    clickSuggestedMessageButton({\n      ...payload,\n      button: payload.button,\n    });\n  });\n\n  const handleDeclineReasonChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setDeclineReason(e.target.value);\n  });\n\n  const handleDeclineConfirm = useLastCallback(() => {\n    rejectSuggestedPost({\n      chatId,\n      messageId: message.id,\n      rejectComment: declineReason.trim() || undefined,\n    });\n    closeDeclineDialog();\n    setDeclineReason('');\n  });\n\n  function renderSenderName(\n    shouldSkipRenderForwardTitle: boolean = false, shouldSkipRenderAdminTitle: boolean = false,\n  ) {\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getPeerFullTitle(oldLang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getPeerFullTitle(oldLang, originSender);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    const shouldRenderForwardAvatar = asForwarded && senderPeer;\n    const hasBotSenderUsername = botSender?.hasUsername;\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name-container',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            dir=\"ltr\"\n          >\n            {!shouldSkipRenderForwardTitle && renderForwardTitle()}\n            <span className=\"message-title-name\">\n              {storyData && <Icon name=\"play-story\" />}\n              {shouldRenderForwardAvatar && (\n                <Avatar\n                  className=\"forward-avatar\"\n                  peer={senderPeer}\n                  size=\"micro\"\n                />\n              )}\n              <span\n                className=\"sender-title\"\n                onClick={handleSenderClick}\n              >\n                {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n              </span>\n              {!asForwarded && senderEmojiStatus && (\n                <CustomEmoji\n                  documentId={senderEmojiStatus.documentId}\n                  className=\"no-selection\"\n                  loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                  observeIntersectionForLoading={observeIntersectionForLoading}\n                  observeIntersectionForPlaying={observeIntersectionForPlaying}\n                />\n              )}\n              {!asForwarded && !senderEmojiStatus && senderIsPremium && <StarIcon />}\n              {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n            </span>\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender?.hasUsername && (\n          <span className=\"interactive\">\n            <span className=\"via\">{oldLang('ViaBot')}</span>\n            <span\n              className=\"sender-title\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${getMainUsername(botSender)}`)}\n            </span>\n          </span>\n        )}\n        <div className=\"title-spacer\" />\n        {!shouldSkipRenderAdminTitle && !hasBotSenderUsername ? (forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{oldLang('DiscussChannel')}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || oldLang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined) : undefined}\n        {canShowSenderBoosts && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const shouldRenderSuggestedPostButtons = message.suggestedPostInfo\n    && !message.isOutgoing && !message.suggestedPostInfo.isAccepted && !message.suggestedPostInfo.isRejected;\n\n  const isSuggestedPostExpired = useMemo(() => {\n    if (!message.suggestedPostInfo?.scheduleDate || !minFutureTime) return false;\n    const now = getServerTime();\n    return message.suggestedPostInfo.scheduleDate <= now + minFutureTime;\n  }, [message.suggestedPostInfo, minFutureTime]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control no-selection\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName(\n            'message-select-control group-select no-selection', isGroupSelected && 'is-selected',\n          )}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <Icon name=\"select\" />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('message-content-wrapper',\n          contentClassName.includes('text') && 'can-select-text',\n          contentClassName.includes('giveaway') && 'giveaway-result-content')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {shouldRenderSenderName() && renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && (\n            <div className={buildClassName(\n              'message-action-buttons',\n              isLoadingComments && 'message-action-buttons-shown',\n            )}\n            >\n              {canMarkAsRead && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Done\"\n                  onClick={handleMarkAsRead}\n                >\n                  <Icon name=\"check\" />\n                </Button>\n              )}\n              {!isInFocusList && (\n                <>\n                  {withCommentButton && isCustomShape && (\n                    <CommentButton\n                      threadInfo={repliesThreadInfo}\n                      disabled={noComments}\n                      isLoading={isLoadingComments}\n                      isCustomShape\n                      asActionButton\n                    />\n                  )}\n                  {canForward && (\n                    <Button\n                      className=\"message-action-button\"\n                      color=\"translucent-white\"\n                      round\n                      size=\"tiny\"\n                      ariaLabel={oldLang('lng_context_forward_msg')}\n                      onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n                    >\n                      <Icon name=\"share-filled\" />\n                    </Button>\n                  )}\n                  {canFocus && (\n                    <Button\n                      className=\"message-action-button\"\n                      color=\"translucent-white\"\n                      round\n                      size=\"tiny\"\n                      ariaLabel={lang('FocusMessage')}\n                      onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n                    >\n                      <Icon name=\"arrow-right\" />\n                    </Button>\n                  )}\n                </>\n              )}\n            </div>\n          )}\n          {withCommentButton && !isCustomShape && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {shouldRenderSuggestedPostButtons && (\n          <InlineButtons\n            message={{\n              ...message,\n              inlineButtons: [\n                [\n                  {\n                    type: 'suggestedMessage',\n                    buttonType: 'decline',\n                    text: lang('SuggestedPostDecline'),\n                  },\n                  {\n                    type: 'suggestedMessage',\n                    buttonType: 'approve',\n                    text: lang('SuggestedPostApprove'),\n                    disabled: isSuggestedPostExpired,\n                  },\n                ],\n                [\n                  {\n                    type: 'suggestedMessage',\n                    buttonType: 'suggestChanges',\n                    text: lang('SuggestedPostSuggestChanges'),\n                  },\n                ],\n              ],\n            }}\n            onClick={handleSuggestedMessageButton}\n          />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            threadId={threadId}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n            isAccountFrozen={isAccountFrozen}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n      {isDeclineDialogOpen && (\n        <ConfirmDialog\n          isOpen={isDeclineDialogOpen}\n          onClose={closeDeclineDialog}\n          title={lang('SuggestedPostDecline')}\n          confirmLabel={lang('SuggestedPostDecline')}\n          confirmHandler={handleDeclineConfirm}\n          confirmIsDestructive\n        >\n          <div className=\"decline-dialog-question\">\n            {renderText(lang('DeclinePostDialogQuestion', {\n              sender: sender ? getPeerFullTitle(oldLang, sender) : '',\n            }, { withNodes: true, withMarkdown: true }))}\n          </div>\n          <InputText\n            placeholder={lang('DeclineReasonPlaceholder')}\n            value={declineReason}\n            onChange={handleDeclineReasonChange}\n            maxLength={MAX_REASON_LENGTH}\n          />\n        </ConfirmDialog>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): Complete<StateProps> => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId, effectId,\n      paidMessageStars,\n    } = message;\n\n    const webPage = selectFullWebPageFromMessage(global, message);\n\n    const { shouldWarnAboutFiles } = selectSharedSettings(global);\n    const isChatWithUser = isUserId(chatId);\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isChatWithUser ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = selectReplyMessage(global, message);\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectSender(global, replyMessage)\n      : forwardHeader && !isSystemBotChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isSystemBotChat && !isAnonymousForwards && replyMessageChat\n      && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || selectIsChatRestricted(global, replyMessageChat.id));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n      quote: focusedQuote, quoteOffset: focusedQuoteOffset, scrollTargetPosition,\n    } = (isFocused && focusedMessage) || {};\n\n    const middleSearch = selectCurrentMiddleSearch(global);\n    const highlight = middleSearch?.results?.query\n      && `${middleSearch.isHashtag ? '#' : ''}${middleSearch.results.query}`;\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const canReply = messageListType === 'thread' && selectCanReplyToMessage(global, message, threadId);\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = selectMessageDownloadableMedia(global, message);\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? selectTopicFromMessage(global, message) : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    const effect = effectId ? global.availableEffectById[effectId] : undefined;\n\n    const poll = selectPollFromMessage(global, message);\n\n    const maxTimestamp = selectMessageTimestampableDuration(global, message);\n\n    const lastPlaybackTimestamp = selectMessageLastPlaybackTimestamp(global, chatId, message.id);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const minFutureTime = global.appConfig.starsSuggestedPostFutureMin;\n\n    const isMediaNsfw = selectIsMediaNsfw(global, message);\n    const isReplyMediaNsfw = replyMessage && selectIsMediaNsfw(global, replyMessage);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withAnimatedEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutFiles,\n      outgoingStatus: isOutgoing ? selectOutgoingStatus(global, message, messageListType === 'scheduled') : undefined,\n      uploadProgress: typeof uploadProgress === 'number' ? uploadProgress : undefined,\n      focusDirection: isFocused ? focusDirection : undefined,\n      noFocusHighlight: isFocused ? noFocusHighlight : undefined,\n      isResizingContainer: isFocused ? isResizingContainer : undefined,\n      focusedQuote: isFocused ? focusedQuote : undefined,\n      focusedQuoteOffset: isFocused ? focusedQuoteOffset : undefined,\n      scrollTargetPosition: isFocused ? scrollTargetPosition : undefined,\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n      minFutureTime,\n      effect,\n      poll,\n      maxTimestamp,\n      lastPlaybackTimestamp,\n      paidMessageStars,\n      isChatWithUser,\n      isAccountFrozen,\n      isMediaNsfw,\n      isReplyMediaNsfw,\n      webPage,\n    };\n  },\n)(Message));\n","import { getActions } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser, ApiWebPage } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMainUsername, getMessagePhoto, getWebPagePhoto, getWebPageVideo } from '../../../../global/helpers';\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\nimport { tryParseDeepLink } from '../../../../util/deepLinkParser';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers({\n  lang,\n  selectMessage,\n  message,\n  webPage,\n  chatId,\n  threadId,\n  isInDocumentGroup,\n  asForwarded,\n  isScheduled,\n  album,\n  senderPeer,\n  botSender,\n  messageTopic,\n  isTranslatingChat,\n  story,\n  isReplyPrivate,\n  isRepliesChat,\n  isSavedMessages,\n  lastPlaybackTimestamp,\n  isInFocusList,\n}: {\n  lang: OldLangFn;\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void;\n  message: ApiMessage;\n  webPage?: ApiWebPage;\n  chatId: string;\n  threadId: ThreadId;\n  isInDocumentGroup: boolean;\n  asForwarded?: boolean;\n  isScheduled?: boolean;\n  album?: IAlbum;\n  avatarPeer?: ApiPeer;\n  senderPeer?: ApiPeer;\n  botSender?: ApiUser;\n  messageTopic?: ApiTopic;\n  isTranslatingChat?: boolean;\n  story?: ApiStory;\n  isReplyPrivate?: boolean;\n  isRepliesChat?: boolean;\n  isSavedMessages?: boolean;\n  lastPlaybackTimestamp?: number;\n  isInFocusList?: boolean;\n}) {\n  const {\n    openChat, openChatWithDraft, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer, searchChatMediaMessages, deleteMessages, removeFromFocusList\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId, content: { paidMedia, video },\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText, quoteOffset,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChatWithDraft({\n      chatId,\n      threadId,\n      text: {\n        text: `@${getMainUsername(botSender)} `,\n      },\n    });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    if (isRepliesChat && replyToPeerId && replyToTopId) {\n      openThread({\n        isComments: true,\n        originChannelId: replyToPeerId,\n        originMessageId: replyToTopId,\n        focusMessageId: replyToMsgId,\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text, quoteOffset }),\n    });\n  });\n\n  const handleDocumentClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const openMediaViewerWithPhotoOrVideo = useLastCallback((withDynamicLoading: boolean): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n    if (withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    }\n\n    const parsedLink = webPage?.url && tryParseDeepLink(webPage.url);\n\n    const videoContent = video || getWebPageVideo(webPage);\n    const webpageTimestamp = parsedLink && 'timestamp' in parsedLink ? parsedLink.timestamp : undefined;\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n      timestamp: lastPlaybackTimestamp || videoContent?.timestamp || webpageTimestamp,\n      withDynamicLoading,\n    });\n  });\n  const handlePhotoMediaClick = useLastCallback((): void => {\n    const withDynamicLoading = !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n  const handleVideoMediaClick = useLastCallback(() => {\n    const isGif = message.content?.video?.isGif;\n    const withDynamicLoading = !isGif && !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    const photo = getMessagePhoto(message) || getWebPagePhoto(webPage);\n    if (photo) {\n      handlePhotoMediaClick();\n    }\n\n    handleVideoMediaClick();\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number, albumIndex?: number): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n\n    searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      mediaIndex: albumIndex,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n      withDynamicLoading: !paidMedia,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleMarkAsRead = useLastCallback(() => {\n    if (isInFocusList) {\n      removeFromFocusList({ chatId, messageId });\n    } else {\n      deleteMessages({ messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    const originalChatId = (isSavedMessages && forwardInfo!.savedFromPeerId) || forwardInfo!.fromChatId!;\n\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: originalChatId, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      if (isRepliesChat) {\n        openThread({\n          isComments: true,\n          originChannelId: replyToPeerId,\n          originMessageId: replyToTopId,\n          focusMessageId: forwardInfo!.fromMessageId!,\n        });\n      } else {\n        focusMessage({\n          chatId: replyToPeerId,\n          threadId: replyToTopId,\n          messageId: forwardInfo!.fromMessageId!,\n        });\n      }\n    } else {\n      focusMessage({\n        chatId: originalChatId, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleDocumentClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleMarkAsRead,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage, ApiPoll, ApiWebPage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\nimport getSingularPaidMedia from './getSingularPaidMedia';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    poll,\n    webPage,\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasBottomCommentButton,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n    hasOutsideReactions,\n  }: {\n    poll?: ApiPoll;\n    webPage?: ApiWebPage;\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasBottomCommentButton?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n    hasOutsideReactions?: boolean;\n  } = {},\n) {\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const content = getMessageContent(message);\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo,\n    audio, voice, document, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = content;\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n  const hasFactCheck = Boolean(message.factCheck?.text);\n\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isInvertedMedia = message.isInvertedMedia;\n  const isInvertibleMedia = photo || (video && !isRoundVideo) || album || webPage;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia || paidMedia;\n  const hasText = text || location?.mediaType === 'venue' || isGeoLiveActive || hasFactCheck;\n  const isMediaWithNoText = isMedia && !hasText;\n  const hasInlineKeyboard = Boolean(message.inlineButtons);\n  const isViaBot = Boolean(message.viaBotId);\n\n  const hasFooter = (() => {\n    if (isInvertedMedia && isInvertibleMedia) {\n      if (hasReactions && !hasOutsideReactions) return true;\n      if (hasFactCheck) return true;\n      if (webPage && hasText) return true;\n      return false;\n    }\n    return hasText;\n  })();\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && text?.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (text.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${text.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (!Object.keys(content).length) {\n    classNames.push('unsupported');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n\n    if (isRoundVideo) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia && !withVoiceTranscription) {\n    classNames.push('media');\n  } else if (video) {\n    classNames.push('video');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage?.webpageType === 'full') {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n\n    if (webPage.gift) {\n      classNames.push('gift');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (invoice && invoice.photo) {\n    classNames.push('has-photo');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (hasOutsideReactions) {\n    classNames.push('has-outside-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText\n      || forceSenderName || hasFactCheck || withVoiceTranscription) {\n      classNames.push('has-solid-background');\n    }\n\n    if (hasFactCheck) {\n      classNames.push('has-fact-check');\n    }\n\n    if (isLastInGroup && !hasInlineKeyboard && (photo || !isMediaWithNoText || hasBottomCommentButton)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  if (isInvertibleMedia && isInvertedMedia) {\n    classNames.push('is-inverted-media');\n  }\n\n  if (hasFooter) {\n    classNames.push('has-footer');\n  } else {\n    classNames.push('no-footer');\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat,\n  ApiInputSuggestedPostInfo,\n  ApiMessage, ApiPeer, ApiReplyInfo, MediaContainer,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ChatTranslatedMessages } from '../../../types';\nimport type { IconName } from '../../../types/icons';\n\nimport { TON_CURRENCY_CODE } from '../../../config';\nimport {\n  getMessageIsSpoiler,\n  getMessageRoundVideo,\n  isChatChannel,\n  isChatGroup,\n  isMessageTranslatable,\n} from '../../../global/helpers';\nimport { getMediaContentTypeDescription } from '../../../global/helpers/messageSummary';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatScheduledDateTime } from '../../../util/dates/dateFormat';\nimport { isUserId } from '../../../util/entities/ids';\nimport freezeWhenClosed from '../../../util/hoc/freezeWhenClosed';\nimport { formatStarsAsIcon, formatTonAsIcon } from '../../../util/localization/format';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport renderText from '../helpers/renderText';\nimport { renderTextWithEntities } from '../helpers/renderTextWithEntities';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useMessageTranslation from '../../middle/message/hooks/useMessageTranslation';\n\nimport RippleEffect from '../../ui/RippleEffect';\nimport Icon from '../icons/Icon';\nimport MediaSpoiler from '../MediaSpoiler';\nimport MessageSummary from '../MessageSummary';\nimport PeerColorWrapper from '../PeerColorWrapper';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  replyInfo?: ApiReplyInfo;\n  suggestedPostInfo?: ApiInputSuggestedPostInfo;\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  senderChat?: ApiChat;\n  forwardSender?: ApiPeer;\n  composerForwardSenders?: ApiPeer[];\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  isInComposer?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  requestedChatTranslationLanguage?: string;\n  isOpen?: boolean;\n  isMediaNsfw?: boolean;\n  noCaptions?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: ((e: React.MouseEvent) => void);\n};\n\nconst NBSP = '\\u00A0';\nconst EMOJI_SIZE = 17;\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  replyInfo,\n  suggestedPostInfo,\n  sender,\n  senderChat,\n  forwardSender,\n  composerForwardSenders,\n  title,\n  customText,\n  isProtected,\n  isInComposer,\n  noUserColors,\n  chatTranslations,\n  requestedChatTranslationLanguage,\n  isMediaNsfw,\n  noCaptions,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const containedMedia: MediaContainer | undefined = useMemo(() => {\n    const media = (replyInfo?.type === 'message' && replyInfo.replyMedia) || message?.content;\n    if (!media) {\n      return undefined;\n    }\n\n    return {\n      content: media,\n    };\n  }, [message, replyInfo]);\n\n  const gif = containedMedia?.content?.video?.isGif ? containedMedia.content.video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaHash = useMessageMediaHash(containedMedia, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash, !isIntersecting);\n  const mediaThumbnail = useThumbnail(containedMedia);\n\n  const isRoundVideo = Boolean(containedMedia && getMessageRoundVideo(containedMedia));\n  const isSpoiler = Boolean(containedMedia && getMessageIsSpoiler(containedMedia)) || isMediaNsfw;\n  const isQuote = Boolean(replyInfo?.type === 'message' && replyInfo.isQuote);\n  const replyForwardInfo = replyInfo?.type === 'message' ? replyInfo.replyFrom : undefined;\n\n  const shouldTranslate = message && isMessageTranslatable(message);\n  const { translatedText } = useMessageTranslation(\n    chatTranslations, message?.chatId, shouldTranslate ? message?.id : undefined, requestedChatTranslationLanguage,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const senderTitle = sender ? getPeerTitle(oldLang, sender)\n    : (replyForwardInfo?.hiddenUserName || message?.forwardInfo?.hiddenUserName);\n\n  const forwardSendersTitle = useMemo(() => {\n    if (!composerForwardSenders) return undefined;\n\n    const peerTitles = composerForwardSenders.map((peer) => getPeerTitle(lang, peer)).filter(Boolean);\n    return lang.conjunction(peerTitles);\n  }, [composerForwardSenders, lang]);\n\n  const senderChatTitle = senderChat ? getPeerTitle(oldLang, senderChat) : undefined;\n  const forwardSenderTitle = forwardSender ? getPeerTitle(oldLang, forwardSender)\n    : message?.forwardInfo?.hiddenUserName;\n  const areSendersSame = sender && sender.id === forwardSender?.id;\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderTextContent() {\n    const isFree = !(suggestedPostInfo?.price?.amount);\n    if (suggestedPostInfo) {\n      if (isFree && !suggestedPostInfo.scheduleDate) {\n        return lang('ComposerEmbeddedMessageSuggestedPostDescription');\n      }\n      const priceText = suggestedPostInfo.price\n        ? (suggestedPostInfo.price.currency === TON_CURRENCY_CODE\n          ? formatTonAsIcon(lang, suggestedPostInfo.price.amount, {\n            className: 'suggested-price-ton-icon',\n            shouldConvertFromNanos: true,\n          })\n          : formatStarsAsIcon(lang, suggestedPostInfo.price.amount, {\n            className: 'suggested-price-star-icon',\n          }))\n        : '';\n      const scheduleText = suggestedPostInfo.scheduleDate\n        ? formatScheduledDateTime(suggestedPostInfo.scheduleDate, lang, oldLang)\n        : '';\n      if (priceText && !scheduleText) {\n        return (\n          <span className=\"suggested-post-price-wrapper\">\n            {\n              lang('TitleSuggestedPostAmountForAnyTime',\n                { amount: priceText },\n                {\n                  withNodes: true,\n                  withMarkdown: true,\n                })\n            }\n          </span>\n        );\n      }\n      return (\n        <span className=\"suggested-post-price-wrapper\">\n          {priceText}\n          {scheduleText ? ` • ${scheduleText}` : ''}\n        </span>\n      );\n    }\n\n    if (replyInfo?.type === 'message' && replyInfo.quoteText) {\n      return renderTextWithEntities({\n        text: replyInfo.quoteText.text,\n        entities: replyInfo.quoteText.entities,\n        asPreview: true,\n        emojiSize: EMOJI_SIZE,\n      });\n    }\n\n    if (!message) {\n      return customText || renderMediaContentType(containedMedia) || NBSP;\n    }\n\n    if (noCaptions) {\n      return lang('EmbeddedMessageNoCaption');\n    }\n\n    return (\n      <MessageSummary\n        message={message}\n        noEmoji={Boolean(mediaThumbnail)}\n        translatedText={translatedText}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        emojiSize={EMOJI_SIZE}\n      />\n    );\n  }\n\n  function renderMediaContentType(media?: MediaContainer) {\n    if (!media || media.content.text) return NBSP;\n    const description = getMediaContentTypeDescription(lang, media.content, {});\n    if (!description) return NBSP;\n    return (\n      <span>\n        {renderText(description)}\n      </span>\n    );\n  }\n\n  function checkShouldRenderSenderTitle() {\n    if (!senderChat) return true;\n    if (isUserId(senderChat?.id)) return true;\n    if (senderChat.id === sender?.id) return false;\n    return true;\n  }\n  function renderSender() {\n    if (title) {\n      return renderText(title);\n    }\n\n    if (suggestedPostInfo && replyInfo) {\n      return lang('TitleSuggestedChanges');\n    }\n\n    if (suggestedPostInfo) {\n      return lang('ComposerEmbeddedMessageSuggestedPostTitle');\n    }\n\n    if (!senderTitle && !forwardSendersTitle) {\n      return NBSP;\n    }\n\n    let icon: IconName | undefined;\n    if (senderChat) {\n      if (isChatChannel(senderChat)) {\n        icon = 'channel-filled';\n      }\n\n      if (isChatGroup(senderChat)) {\n        icon = 'group-filled';\n      }\n    }\n\n    const isReplyToQuote = isInComposer && Boolean(replyInfo && 'quoteText' in replyInfo && replyInfo?.quoteText);\n\n    return (\n      <span className=\"embedded-sender-wrapper\">\n        {checkShouldRenderSenderTitle() && (\n          <span className=\"embedded-sender\">\n            {!composerForwardSenders && senderTitle\n              && renderText(isReplyToQuote ? oldLang('ReplyToQuote', senderTitle) : senderTitle)}\n            {forwardSendersTitle && renderText(lang('ComposerTitleForwardFrom', {\n              users: forwardSendersTitle,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            }))}\n          </span>\n        )}\n        {icon && <Icon name={icon} className=\"embedded-chat-icon\" />}\n        {icon && senderChatTitle && (\n          <span className=\"embedded-sender-chat\">\n            {renderText(senderChatTitle)}\n          </span>\n        )}\n      </span>\n    );\n  }\n\n  function renderForwardSender() {\n    return forwardSenderTitle && !areSendersSame && (\n      <span className=\"embedded-forward-sender-wrapper\">\n        <Icon name={forwardSender ? 'share-filled' : 'forward'} className=\"embedded-origin-icon\" />\n        <span className=\"forward-sender-title\">\n          {renderText(forwardSenderTitle)}\n        </span>\n      </span>\n    );\n  }\n\n  return (\n    <PeerColorWrapper\n      peer={sender}\n      emojiIconClassName=\"EmbeddedMessage--background-icons\"\n      ref={ref}\n      shouldReset\n      noUserColors={noUserColors}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        isQuote && 'is-quote',\n        mediaThumbnail && 'with-thumb',\n        'no-selection',\n        composerForwardSenders && 'is-input-forward',\n        suggestedPostInfo && 'is-suggested-post',\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      <div className=\"hover-effect\" />\n      <RippleEffect />\n      {mediaThumbnail && renderPictogram(\n        mediaThumbnail, mediaBlobUrl, isVideoThumbnail, isRoundVideo, isProtected, isSpoiler,\n      )}\n      <div className=\"message-text\">\n        <p className={buildClassName('embedded-text-wrapper', isQuote && 'multiline')}>\n          {renderTextContent()}\n        </p>\n        <div className=\"message-title\">\n          {renderSender()}\n          {renderForwardSender()}\n        </div>\n      </div>\n    </PeerColorWrapper>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isFullVideo?: boolean,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n  const shouldRenderVideo = isFullVideo && blobUrl;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && !shouldRenderVideo && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      {!isSpoiler && shouldRenderVideo && (\n        <video\n          src={blobUrl}\n          width={width}\n          height={height}\n          playsInline\n          disablePictureInPicture\n          className=\"pictogram\"\n        />\n      )}\n      <MediaSpoiler\n        thumbDataUri={shouldRenderVideo ? thumbDataUri : srcUrl}\n        isVisible={Boolean(isSpoiler)}\n        width={width}\n        height={height}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport const ClosableEmbeddedMessage = freezeWhenClosed(EmbeddedMessage);\n\nexport default EmbeddedMessage;\n","import { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useAsyncRendering<T extends any[]>(dependencies: T, delay?: number) {\n  const isDisabled = delay === undefined;\n  const shouldRenderRef = useRef(isDisabled);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  useSyncEffect(() => {\n    if (isDisabled) {\n      return;\n    }\n\n    shouldRenderRef.current = false;\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = undefined;\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, dependencies);\n\n  useEffect(() => {\n    if (isDisabled || shouldRenderRef.current) {\n      return;\n    }\n\n    const exec = () => {\n      shouldRenderRef.current = true;\n      forceUpdate();\n    };\n\n    if (delay > 0) {\n      timeoutRef.current = window.setTimeout(exec, delay);\n    } else {\n      exec();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, dependencies);\n\n  return shouldRenderRef.current;\n}\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.target = '_blank';\n  link.rel = 'noopener noreferrer';\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MuteChatModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MuteChatModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MuteChatModal = useModuleLoader(Bundles.Extra, 'MuteChatModal', !isOpen);\n\n  return MuteChatModal ? <MuteChatModal {...props} /> : undefined;\n};\n\nexport default MuteChatModalAsync;\n","import { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableEffect } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOverlayPosition from './hooks/useOverlayPosition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport Portal from '../../ui/Portal';\n\nimport styles from './MessageEffect.module.scss';\n\ntype OwnProps = {\n  messageId?: number;\n  isMirrored?: boolean;\n  effect: ApiAvailableEffect;\n  shouldPlay?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onStop?: VoidFunction;\n};\n\nconst EFFECT_SIZE = 256;\n\nconst MessageEffect = ({\n  messageId,\n  isMirrored,\n  effect,\n  shouldPlay,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onStop,\n}: OwnProps) => {\n  const anchorRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const canLoad = useIsIntersecting(anchorRef, observeIntersectionForLoading);\n  const canPlay = useIsIntersecting(anchorRef, observeIntersectionForPlaying);\n\n  const [isPlaying, startPlaying, stopPlaying] = useFlag();\n  const [isPositionUpdateRequired, requirePositionUpdate, resetPositionUpdate] = useFlag();\n\n  const effectHash = getEffectHash(effect);\n  const effectBlob = useMedia(effectHash, !canLoad);\n\n  const handleEnded = useLastCallback(() => {\n    stopPlaying();\n    onStop?.();\n  });\n\n  const updatePosition = useOverlayPosition({\n    anchorRef,\n    overlayRef: ref,\n    isMirrored,\n    isDisabled: !isPlaying,\n    isForMessageEffect: true,\n    id: effect.id,\n  });\n\n  useEffect(() => {\n    if (isPositionUpdateRequired) updatePosition();\n    resetPositionUpdate();\n  }, [updatePosition, resetPositionUpdate, isPositionUpdateRequired]);\n\n  useEffect(() => {\n    if (canPlay && shouldPlay && effectBlob) {\n      startPlaying();\n      requirePositionUpdate();\n    }\n  }, [canPlay, effectBlob, shouldPlay, updatePosition]);\n\n  const effectClassName = buildClassName(\n    styles.root,\n    isMirrored && styles.mirror,\n  );\n\n  return (\n    <div className={buildClassName(styles.anchor, isMirrored && styles.mirrorAnchor)} ref={anchorRef}>\n      {isPlaying && (\n        <Portal>\n          <AnimatedSticker\n            ref={ref}\n            key={`effect-${messageId ?? effect.id}`}\n            className={effectClassName}\n            tgsUrl={effectBlob}\n            size={EFFECT_SIZE}\n            play\n            isLowPriority\n            noLoop\n            forceAlways\n            onEnded={handleEnded}\n          />\n        </Portal>\n      )}\n    </div>\n  );\n};\n\nfunction getEffectHash(effect: ApiAvailableEffect) {\n  if (effect.effectAnimationId) {\n    return `sticker${effect.effectAnimationId}`;\n  }\n\n  return `sticker${effect.effectStickerId}?size=f`;\n}\n\nexport default memo(MessageEffect);\n","// extracted by mini-css-extract-plugin\nexport default {\"anchor\":\"IYu2f7FM\",\"mirrorAnchor\":\"GsTZawTE\",\"root\":\"McmbiWZE\",\"mirror\":\"wNvU2uqi\"};","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatFolderModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatFolderModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatFolderModal = useModuleLoader(Bundles.Extra, 'ChatFolderModal', !isOpen);\n\n  return ChatFolderModal ? <ChatFolderModal {...props} /> : undefined;\n};\n\nexport default ChatFolderModalAsync;\n"],"names":["Keys","memo","MessageOutgoingStatus","status","_jsx","className","children","Transition","name","activeKey","Icon","withGlobal","global","userId","chat","selectCurrentChat","user","selectUser","contactName","getUserFirstOrLastName","undefined","DeleteMemberModal","isOpen","onClose","deleteChatMember","getActions","lang","useOldLang","handleDeleteChatMember","useCallback","chatId","id","ConfirmDialog","title","textParts","renderText","confirmLabel","confirmHandler","confirmIsDestructive","IGNORE_TAGS","Set","handlers","createCallbackManager","useHotkeys","hotkeys","useEffect","entries","Object","addCallback","e","target","HTMLElement","has","tagName","shouldFireEvent","forEach","hotkey","handler","event","alt","ctrl","meta","mod","shift","key","altKey","ctrlKey","metaKey","shiftKey","pressedKey","Boolean","toLowerCase","code","replace","isExactHotkey","keys","split","map","part","trim","modifiers","includes","reservedKeys","find","parseHotkey","getHotkeyMatcher","document","documentElement","addEventListener","runCallbacks","THROTTLE","RE_ENDS_ON_EMOJI","RegExp","twemojiRegex","source","RE_ENDS_ON_EMOJI_IMG","EMOJI_IMG_REGEX","useCustomEmojiTooltip","isEnabled","getHtml","setHtml","getSelectionRange","inputRef","customEmojis","loadCustomEmojiForEmoji","clearCustomEmojiForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","useFlag","extractLastEmojiThrottled","useThrottledResolver","html","collapsed","match","IS_EMOJI_SUPPORTED","htmlBeforeSelection","getHtmlBeforeSelection","current","getLastEmoji","useDerivedSignal","isActive","useDerivedState","hasCustomEmojis","length","lastEmoji","emoji","insertCustomEmoji","useLastCallback","inputEl","regexText","regex","count","newHtml","buildCustomEmojiHtml","repeat","htmlAfterSelection","innerHTML","substring","requestNextMutation","focusEditableElement","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","ConnectorClass","requestStates","Map","requestStatesByCallback","pendingPayloads","pendingTransferables","constructor","onUpdate","channel","destroy","init","args","this","postMessageOnTickEnd","type","request","messageData","transferables","restMessageData","messageId","generateUniqueId","payload","requestState","promise","Promise","resolve","reject","assign","withCallback","callback","pop","set","catch","finally","delete","cancelCallback","progressCallback","isCanceled","get","onMessage","data","payloads","update","error","response","callbackArgs","Error","message","push","postMessagesOnTickEnd","throttleWithTickEnd","postMessage","createConnector","worker","connector","handleMessage","removeEventListener","props","CustomSend","useModuleLoader","Bundles","Extra","RE_USERNAME_SEARCH","useMentionTooltip","groupChatMembers","topInlineBotIds","currentUserId","useLang","filteredUsers","setFilteredUsers","useState","extractUsernameTagThrottled","prepareForRegExp","getUsernameTag","getWithInlineBots","startsWith","usernameTag","usersById","getGlobal","users","byId","memberIds","reduce","acc","member","filter","filteredIds","filterPeersByQuery","ids","unique","query","values","pickTruthy","insertMention","peer","forceFocus","insertAtEnd","hasUsername","getPeerTitle","mainUsername","getMainUsername","userFirstOrLastName","htmlToInsert","ApiMessageEntityTypes","MentionName","fixedHtmlBeforeSelection","cleanWebkitNewLines","atIndex","lastIndexOf","shiftCaretPosition","substr","caretPosition","getCaretPosition","newCaretPosition","setCaretPosition","isMentionTooltipOpen","closeMentionTooltip","mentionFilteredUsers","useOrderDiff","orderedIds","orderById","useMemo","i","prevOrderById","usePreviousDeprecated","prevChatId","orderDiffById","mapValues","order","getAnimationType","useChatAnimationType","OFFSET_X","REM","useOverlayPosition","anchorRef","overlayRef","isMirrored","isForMessageEffect","isDisabled","updatePosition","element","anchor","anchorRect","getBoundingClientRect","elementRect","windowWidth","window","innerWidth","requestMutation","anchorCenterY","top","height","anchorBottomY","bottom","y","style","left","right","messagesContainer","closest","passive","MAX_NESTING_PARENTS","isSelectionInsideInput","selectionRange","inputId","commonAncestorContainer","parentNode","iterations","parentElement","useForumPanelRender","isForumPanelOpen","shouldRenderForumPanelRef","useRef","isAnimationStartedRef","forceUpdate","useForceUpdate","useSyncEffect","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","shouldRenderForumPanel","isAnimationStarted","verifyAgeMin","appConfig","VERIFY_AGE_MIN_DEFAULT","SensitiveContentConfirmModal","shouldAlwaysShow","onAlwaysShowChanged","_jsxs","years","Checkbox","label","checked","onCheck","VISIBLITY_MARGIN","DURATION","SnapEffectContainer","styles","root","SNAP_EFFECT_CONTAINER_ID","animateSnap","selectCanAnimateSnapEffect","rect","x","scrollX","scrollY","width","innerHeight","seed","Math","floor","Date","now","filterId","SNAP_EFFECT_ID","component","ghost","viewBox","createFilter","min","elementContainer","svg","jsxToHtml","foreignObject","querySelector","computedStyle","getComputedStyle","clone","cloneNode","Array","from","setProperty","getPropertyValue","appendChild","snapContainer","getElementById","removeChild","once","smallestSide","baseSeed","xmlns","SVG_NAMESPACE","baseFrequency","numOctaves","result","in","slope","intercept","attributeName","dur","fill","in2","operator","scale","xChannelSelector","yChannelSelector","forceShowSelf","isSynced","userStatus","selectUserStatus","isSavedMessages","isSelf","self","areMessagesLoaded","selectChatMessages","PrivateChatInfo","customPeer","typingStatus","avatarSize","statusIcon","withDots","withMediaViewer","withUsername","withFullInfo","withUpdatingStatus","emojiStatusSize","noStatusOrTyping","noEmojiStatus","noFake","noVerified","noRtl","isSavedDialog","adminMember","ripple","onEmojiStatusClick","iconElement","rightElement","loadFullUser","openMediaViewer","loadMoreProfilePhotos","hasAvatarMediaViewer","peerId","isPreload","useIntervalForceUpdate","handleAvatarViewerOpen","hasMedia","stopPropagation","isAvatarView","mediaIndex","origin","MediaViewerOrigin","ProfileAvatar","MiddleHeaderAvatar","customTitle","isOwner","buildClassName","dir","isRtl","Avatar","size","onClick","FullNameTitle","withEmojiStatus","DotAnimation","content","subtitleKey","TypingStatus","isSystemBot","translatedStatus","getUserStatus","mainUserNameClassName","isUserOnline","renderStatusOrTyping","RippleEffect","RE_BR","RE_SPACE","RE_CLEAN_HTML","RE_EXTRA_NEW_LINE","ChatCallStatus","isSelected","isMobile","ChatTags","orderedFolderIds","chatFoldersById","visibleFolderIds","slice","remainingCount","folderId","folder","getApiPeerColorClass","color","renderTextWithEntities","text","entities","noCustomEmojiPlayback","noTitleAnimations","emojiSize","isPreview","previewMessageId","selectChat","chatFolderIds","getChatFolderIds","areTagsEnabled","chatFolders","isPremium","selectIsCurrentUserPremium","lastMessageId","selectChatLastMessageId","lastMessage","selectChatMessage","selectChatLastMessage","isOutgoing","forwardInfo","savedDialogSender","fromId","selectPeer","messageSender","selectSender","lastMessageSender","currentChatId","threadId","currentThreadId","messageListType","selectCurrentMessageList","MAIN_THREAD_ID","isSelectedForum","isForum","selectTabState","forumPanelChatId","lastMessageTopic","selectTopicFromMessage","selectThreadParam","topicsInfo","selectTopicsInfo","isAccountFrozen","selectIsCurrentUserFrozen","monoforumChannel","selectMonoforumChannel","isMuted","getIsChatMuted","selectNotifyDefaults","selectNotifyException","draft","selectDraft","selectIsForumPanelOpen","canScrollDown","canChangeFolder","lastMessageOutgoingStatus","selectOutgoingStatus","withInterfaceAnimations","selectCanAnimateInterface","listedTopicIds","topics","topicsById","focusMode","Chat","orderDiff","animationType","isPinned","observeIntersection","offsetTop","onDragEnter","withTags","openChat","openSavedDialog","toggleChatInfo","focusLastMessage","focusMessage","loadTopics","openForumPanel","closeForumPanel","setShouldCloseRightColumn","reportMessages","openFrozenAccountModal","updateChatMutedState","openQuickPreview","useAppLayout","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderDeleteModal","markRenderDeleteModal","unmarkRenderDeleteModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","isForumAsMessages","isMonoforum","useEnsureMessage","tagFolderIds","chatFolderIdsSet","isAll","ALL_FOLDER_ID","hasColor","shouldRenderTags","renderSubtitle","ref","useChatListEntry","statefulMediaContent","groupStatefulContent","noForumTitle","getIsForumPanelClosed","useSelectorSignal","selectIsForumPanelClosed","handleClick","preventDefault","noForumTopicPanel","value","forceOnHeavyAnimation","force","shouldReplaceHistory","handleDragEnter","handleDelete","handleMute","handleUnmute","mutedUntil","UNMUTE_TIMESTAMP","handleChatFolderChange","handleReport","messageIds","contextActions","useChatContextActions","isIntersecting","useIsIntersecting","isOnline","hasShownClass","isAvatarOnlineShown","useShowTransitionDeprecated","shouldDisableChatBadge","href","IS_OPEN_IN_NEW_TAB_SUPPORTED","createLocationHash","chatClassName","isUserId","ListItem","withPortalForMenu","asMessageBubble","subscriptionUntil","StarIcon","ChatBadge","shouldShowOnlyMostImportant","forceHidden","isCallActive","isCallNotEmpty","monoforumBadgeClassName","withStatusTextColor","LastMessageMeta","outgoingStatus","draftDate","date","hasMiniApp","hasMainMiniApp","DeleteChatModal","onCloseAnimationEnd","MuteChatModal","ChatFolderModal","usePaidMessageConfirmation","starsForAllMessages","isStarsBalanceModeOpen","starsBalance","shouldPaidMessageAutoApprove","settings","byKey","shouldAutoApprove","setAutoApprove","isWaitingStarsTopup","setIsWaitingStarsTopup","confirmPaymentHandlerRef","closeConfirmDialog","closePaymentMessageConfirmDialogOpen","handleStarsTopup","openStarsBalanceModal","topup","balanceNeeded","purpose","PAID_MESSAGES_PURPOSE","handleWithConfirmation","openPaymentMessageConfirmDialogOpen","dialogHandler","setPaidMessageAutoApprove","storyId","story","loadPeerStoriesByIds","loadStoryThrottled","throttled","throttle","storyIds","resetInput","applyIosAutoCapitalizationFix","focus","IS_IOS","createElement","classList","add","body","RE_COMMAND","GDOCS_ELEMENT_ID_REGEXP","headers","parseHtml","DOMParser","parseFromString","wrapNodeAnchor","node","wrapNodeInline","el","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","textContent","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","indexOf","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","VALID_TARGET_IDS","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","EDITABLE_STORY_INPUT_ID","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","setNextText","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","showNotification","updateShouldSaveAttachmentsCompression","applyDefaultAttachmentsCompression","handlePaste","async","clipboardData","input","activeElement","pastedText","getData","pastedFormattedText","parseHtmlAsFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","err","DEBUG","console","textContents","querySelectorAll","getElementsByTagName","removeAttribute","replaceWith","dataset","entityType","getAttribute","ignoreOnPaste","remove","ENTITY_CLASS_BY_NODE_NAME","setAttribute","innerText","CustomEmoji","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","files","getFilesFromDataTransferItems","textToPaste","isWordDocument","hasText","shouldSetAttachments","newAttachments","all","file","buildAttachment","canReplace","canReplaceMessageMedia","isUploadingDocumentSticker","isUploadingFileSticker","isInAlbum","groupedId","pluralValue","shouldSave","attachments","concat","isFrozen","URL_ENTITIES","TextUrl","Url","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","username","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_LINK","RE_LINK_TEMPLATE","STARTS_ENDS_ON_EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","URL","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","startedAt","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","cb","requestMeasure","subscribeToAnalyzer","stop","onstop","blob","Blob","duration","round","onerror","delayStop","max","setTimeout","pause","AttachmentModal","AttachMenu","isButtonVisible","canAttachMedia","canAttachPolls","canAttachToDoLists","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","attachBots","peerType","isScheduled","theme","shouldCollectDebugLogs","canEditMedia","editingMessage","paidMessagesStars","onFileSelect","onMenuOpen","onMenuClose","onPollCreate","onTodoListCreate","updateAttachmentSettings","isAttachMenuOpen","openAttachMenu","closeAttachMenu","handleMouseEnter","handleMouseLeave","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","isMenuOpen","isPhotoOrVideo","getMessagePhoto","getMessageVideo","isFile","getMessageAudio","getMessageVoice","getMessageDocument","handleToggleAttachMenu","handleFileSelect","validatedFiles","validateFiles","handleQuickSelect","shouldCompress","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","join","handleDocumentSelect","SUPPORTED_AUDIO_CONTENT_TYPES","handleSendLogs","File","getDebugLogs","DEBUG_LOG_FILENAME","bots","bot","isForAttachMenu","attachMenuPeerTypes","oldLang","ResponsiveHoverButton","onActivate","ariaLabel","ariaControls","hasPopup","disabled","Menu","autoClose","positionX","positionY","onMouseEnter","IS_TOUCH_ENV","onMouseLeave","noCloseOnBackdrop","ariaLabelledBy","MenuItem","_Fragment","icon","AttachBotItem","onMenuOpened","onMenuClosed","BotCommandMenu","BotKeyboardMenu","clickBotInlineButton","isKeyboardSingleUse","buttonTexts","texts","keyboardButtons","row","button","renderKeyboardButtonText","noCompact","j","Button","BotMenuButton","textRef","textEl","scrollWidth","composerEl","removeProperty","ChatCommandTooltip","shouldForceShowEditing","forwardMessages","fromChatId","toChatId","forwardMessageIds","noAuthors","noCaptions","isShareMessageModalShown","isModalShown","shouldPreventComposerAnimation","editingId","selectEditingScheduledId","selectEditingId","shouldAnimate","isForwarding","forwardedMessages","replyInfo","suggestedPostInfo","replyToPeerId","senderChat","sender","selectEditingMessage","replyToMsgId","forwardSenders","m","selectSenderFromForwardedMessage","forwardedMessage","selectForwardedSender","isChatWithSelf","selectIsChatWithSelf","isChannelPost","hiddenUserName","quoteText","isSenderChannel","isChatChannel","forwardsHaveCaptions","some","forward","isContextMenuDisabled","storyData","isReplyToDiscussion","isMediaNsfw","selectIsMediaNsfw","forwardedMessagesCount","isCurrentUserPremium","isInChangingRecipientMode","ComposerEmbeddedMessage","onClear","resetDraftReplyInfo","resetDraftSuggestedPostInfo","updateDraftReplyInfo","setEditingId","changeRecipient","openChatOrTopicWithReplyInDraft","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","setShouldPreventComposerAnimation","openSuggestMessageModal","isReplyToTopicStart","action","isShowingReply","isReplyWithQuote","isShowingSuggestedPost","senders","isShown","shouldRender","transitionClassNames","clearEmbedded","captureEscKeyListener","isContextMenuOpen","contextMenuAnchor","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleMessageClick","handleClearClick","buildAutoCloseMenuItemHandler","handleForwardToAnotherChatClick","handleShowMessageClick","focusMessageFromDraft","handleRemoveQuoteClick","handleChangeReplyRecipientClick","handleReplyInSenderChat","handleDoNotReplyClick","getTriggerElement","getRootElement","getMenuElement","renderingSender","useCurrentOrPrev","innerClassName","getPeerColorClass","leftIcon","customText","strippedMessage","strippedText","renderingLeftIcon","canReplyInSenderChat","onContextMenu","ClosableEmbeddedMessage","isInComposer","composerForwardSenders","faded","customIcon","MenuSeparator","DropArea","InlineBotTooltip","MentionTooltip","PollModal","SendAsMenu","StickerTooltip","modal","ToDoListModal","tabState","noWebPage","selectNoWebPage","attachmentSettings","webPagePreview","webPagePreviewId","selectWebPage","webpageType","WebPagePreview","isEditing","toggleMessageWebPage","isInvertedMedia","isSmallerMedia","webPageMediaSize","useShowTransition","withShouldRender","hasMediaSizeOptions","hasLargeMedia","prevWebPageRef","renderingWebPage","isFullWebPage","thumbnailUrl","useThumbnail","previewMedia","getWebPagePhoto","getWebPageVideo","getWebPageAudio","getWebPageDocument","previewMediaHash","getMediaHash","previewMediaUrl","useMedia","shouldRenderPreviewMedia","previewMediaRef","noCloseTransition","hasPreviewMedia","handleClearWebpagePreview","handleBeforeContextMenu","handlePreviewClick","updateIsInvertedMedia","updateIsLargerMedia","PeerColorWrapper","noUserColors","onMouseDown","src","siteName","url","description","webPage","photo","video","audio","MainButtonState","chatBot","selectBot","isChatWithBot","isChatWithUser","userFullInfo","selectUserFullInfo","selectPeerPaidMessagesStars","chatFullInfo","selectChatFullInfo","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","shouldUpdateStickerSetOrder","language","selectSharedSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","currentUser","sendAsId","sendAsPeer","requestedDraft","selectRequestedDraft","requestedDraftFiles","selectRequestedDraftFiles","isStoryViewerOpen","storyViewer","currentMessageList","isForCurrentMessageList","canSendVoiceByPrivacy","noVoiceMessages","slowMode","editingDraft","selectEditingScheduledDraft","selectEditingDraft","selectPeerStory","sentStoryReaction","sentReaction","replyToMessage","replyToTopic","isInScheduledList","canSendQuickReplies","isSilentPosting","getChatNotifySettings","areEffectsSupported","SERVICE_NOTIFICATIONS_USER_ID","canPlayEffect","selectPerformanceSettingsValue","shouldPlayEffect","shouldPlayEffectInComposer","effectId","effect","availableEffectById","effectReactions","reactions","maxMessageLength","config","DEFAULT_MAX_MESSAGE_LENGTH","isReplying","hasSuggestedPost","stars","balance","amount","isStarsBalanceModalOpen","starsBalanceModal","isAppConfigLoaded","insertingPeerIdMention","availableReactions","topReactions","isOnActiveTab","isBlurred","canScheduleUntilOnline","selectCanScheduleUntilOnline","isChannel","isRightColumnShown","selectIsRightColumnShown","isSelectModeActive","selectIsInSelectMode","withScheduledButton","hasScheduledMessages","botKeyboardPlaceholder","keyboardPlaceholder","pollModal","todoListModal","stickersForEmoji","stickers","forEmoji","customEmojiForEmoji","topInlineBots","userIds","contentToBeScheduled","recentEmojis","keywords","inlineBots","byUsername","isInlineBotLoading","isLoading","botCommands","botInfo","commands","botMenuButton","menuButton","attachMenu","attachMenuPeerType","selectChatType","selectTheme","fileSizeLimit","selectCurrentLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","isReactionPickerOpen","selectIsReactionPickerOpen","canBuyPremium","selectIsPremiumPurchaseBlocked","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","canSendOneTimeMedia","stealthMode","stories","quickReplyMessages","quickReplies","messagesById","isContactRequirePremium","isPaymentMessageConfirmDialogOpen","shouldDisplayGiftsButton","disallowedGifts","pollMaxAnswers","Composer","dropAreaState","isReady","inputPlaceholder","editableInputCssSelector","editableInputId","onDropHide","onFocus","onBlur","onForward","sendMessage","clearDraft","showDialog","openPollModal","closePollModal","openTodoListModal","closeTodoListModal","loadScheduledHistory","openThread","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","callAttachBot","addRecentCustomEmoji","showAllowedMessageTypesNotification","openStoryReactionPicker","openGiftModal","closeReactionPicker","sendStoryReaction","editMessage","saveEffectInDraft","setReactionEffect","hideEffectInComposer","updateChatSilentPosting","updateInsertingPeerIdMention","updateDraftSuggestedPostInfo","counterRef","storyReactionRef","useSignal","isMounted","setIsMounted","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","windowSize","isInMessageList","isInStoryViewer","sendAsPeerIds","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","isInputHasFocus","markInputHasFocus","unmarkInputHasFocus","onAttachMenuOpen","onAttachMenuClose","canMediaBeReplaced","emojiSet","members","chatBotCommands","chatEmojiSetId","canSchedule","isSentStoryReactionHeart","isSameReaction","HEART_REACTION","processMessageInputForCustomEmoji","customEmojiNotificationNumber","requestCalendar","calendar","useSchedule","useTimeout","isChannelWithProfiles","areProfilesShown","isChatWithSendAs","isChatSuperGroup","isChatPublic","isLinkedInDiscussion","hasGeo","shouldAnimateSendAsButtonRef","prevSendAsPeerIds","hasAttachments","nextText","canSendStickers","canSendGifs","canAttachEmbedLinks","canSendVoices","canSendPlainText","getAllowedAttachmentOptions","isNeedPremium","isSendTextBlocked","messagesCount","messagesInInput","closeConfirmModalPayForMessage","paymentMessageConfirmDialogHandler","setShouldPaidMessageAutoApprove","handleActionWithPaymentConfirmation","hasWebPagePreview","isComposerBlocked","insertHtmlAndUpdateCursor","inInputId","shouldPrepend","selection","getSelection","messageInput","rangeCount","getRangeAt","insertHtmlInSelection","dispatchEvent","Event","bubbles","newFirstWord","shouldReplace","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","insertNextText","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","shouldSendInHighQuality","openLimitReachedModal","setShouldForceAsFile","setShouldForceCompression","MEMO_EMPTY_ARRAY","newValue","attachment","getAttachmentMediaType","limit","shouldForce","isSpoiler","newAttachment","shouldSendAsSpoiler","handleUpdateAttachmentsQuality","filename","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","isViewOnceEnabled","setIsViewOnceEnabled","toogleViewOnceEnabled","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","shouldSendRecordingStatus","useInterval","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","useStateRef","isAdmin","isChatAdmin","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","getSingleEmoji","cleanHtml","parseEmojiOnlyString","hasStickers","singleEmoji","useStickerTooltip","isInlineBotTooltipOpen","botId","inlineBotId","isGallery","isInlineBotTooltipGallery","switchPm","inlineBotSwitchPm","switchWebview","inlineBotSwitchWebview","results","inlineBotResults","closeTooltip","closeInlineBotTooltip","help","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","resetAllInlineBots","extractBotQueryThrottled","getPlainText","parseBotQuery","prevUsername","offset","useInlineBotTooltip","hasQuickReplies","isChatCommandTooltipOpen","close","closeChatCommandTooltip","filteredBotCommands","botTooltipCommands","filteredQuickReplies","quickReplyCommands","setFilteredBotCommands","setFilteredQuickReplies","detectCommandThrottled","getCommand","command","nextFilteredBotCommands","c","newFilteredQuickReplies","quickReply","shortcut","useChatCommandTooltip","useDraft","saveDraft","loadCustomEmojis","isTouchedRef","isLocalDraft","isLocal","updateDraft","prevState","shouldKeepReply","shouldKeepSuggestedPost","runDebouncedForSaveDraft","useRunDebounced","DRAFT_DEBOUNCE","useLayoutEffectWithPrevDeps","prevThreadId","prevDraft","isTouched","shouldUpdateSuggestedPost","EDITABLE_INPUT_CSS_SELECTOR","customEmojiIds","entity","documentId","useLayoutEffect","chatIdRef","threadIdRef","scopedСhatId","scopedThreadId","useBackgroundMode","useBeforeUnload","loadWebPagePreview","clearWebPagePreview","formattedTextWithLinkRef","detectLinkDebounced","useDebouncedResolver","formattedText","linkEntity","getLink","link","useLoadLinkPreview","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","useEditing","setEditingDraft","openDeleteMessageModal","setShouldForceShowEditing","replyingToId","useEffectWithPrevDeps","prevEditedMessage","prevReplyingToId","shouldSetNoWebPage","edited","getShouldResetNoWebPageDebounced","restoreNewDraftAfterEditing","hasMessageMedia","messageList","isSchedule","handleBlur","resetComposerRef","stopRecordingVoiceRef","areAllGiftsDisallowed","every","shouldShowGiftButton","shouldShowSuggestedPostButton","showCustomEmojiPremiumNotification","notificationNumber","actionText","initialSection","Number","mainButtonState","Edit","Schedule","Send","Record","Forward","canShowCustomSendMenu","isCustomSendMenuOpen","storyReactionPickerAnchor","handleStoryPickerContextMenu","handleBeforeStoryPickerContextMenu","handleStoryPickerContextMenuHide","position","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","toString","hasErrorKey","checkSlowMode","nowSeconds","getServerTime","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","formatMediaDuration","isSlowMode","blur","canSendAttachments","attachmentsToSend","sendAttachments","sendCompressed","sendGrouped","shouldSendGrouped","isSilent","scheduledAt","prepareAttachmentsToSend","shouldGroupMessages","isLocalOnly","handleSendAttachmentsFromModal","handleSendAttachments","handleSendCore","currentAttachments","webPageUrl","handleSend","record","ttlSeconds","ONE_TIME_MEDIA_TTL_SECONDS","voice","handleSendWithConfirmation","handleTodoListCreate","handleClickBotMenu","parsedLink","tryParseDeepLink","appName","processDeepLink","handleActivateBotCommandMenu","handleMessageSchedule","queryId","restArgs","prevContentToBeScheduled","handleCustomEmojiSelect","emojiSetId","stickerSetInfo","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","gif","isScheduleRequested","handleStickerSelect","sticker","canUpdateStickerSetsOrder","isPreloadedGlobally","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","poll","handleToDoListSend","todo","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","deleteLastCharacterOutsideSelection","removeSymbolAttachmentModal","handleAllScheduledClick","handleGiftClick","forUserId","handleSuggestPostClick","price","currency","STARS_CURRENCY_CODE","nanos","handleToggleSilentPosting","localId","withBotMenuButton","isBotMenuButtonOpen","timedPlaceholderLangKey","timedPlaceholderDate","activeUntil","isComposerHasFocus","isReactionSelectorOpen","placeholder","formatStarsAsIcon","asFont","withNodes","adminRights","anonymous","topic","shouldRenderReactionSelector","reactionSelectorTransitonClassNames","areVoiceMessagesNotAllowed","mainButtonHandler","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","fullClassName","handleToggleReaction","reaction","emoticon","selectCustomEmoji","customEmojiMessage","isReaction","handleToggleEffectReaction","handleReactionPickerOpen","sendAsMessage","handleLikeStory","containerId","getStoryKey","handleSendScheduled","handleSendSilent","handleSendWhenOnline","SCHEDULED_WHEN_ONLINE","handleSendScheduledAttachments","handleSendSilentAttachments","handleRemoveEffect","handleStopEffect","onSend","withBotCommands","effectEmoji","shouldRenderPaidBadge","prevShouldRenderPaidBadge","usePrevious","DropAreaState","None","withQuick","QuickFile","onHide","ReactionSelector","allAvailableReactions","onToggleReaction","isPrivate","isInSavedMessages","onShowMore","isForMessage","shouldSchedule","forceDarkTheme","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","onSendWhenOnline","isQuiz","shouldBeAnonymous","maxOptionsCount","selectedSendAsId","onInsertUserName","filterUnits","dy","stdDeviation","d","onSelectResult","SymbolMenuButton","isMessageComposer","onGifSelect","onStickerSelect","inputCssSelector","idPrefix","MessageInput","customEmojiPrefix","isStoryInput","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onSuppressedFocus","Spinner","slideClassName","direction","formatVoiceRecordDuration","CustomEmojiTooltip","EmojiTooltip","emojis","ReactionAnimatedEmoji","withEffectOnly","getReactionKey","allowDisabledClick","noFastClick","nonInteractive","pill","fluid","AnimatedCounter","number","MessageEffect","shouldPlay","onStop","CustomSendMenu","onSendSchedule","onRemoveEffect","withEffects","hasCurrentEffect","PaymentMessageConfirmDialog","userName","messagePriceInStars","POLLING_INTERVAL","PEER_LAST_POLLING_TIME","PEER_ID_QUEUE","loadFromQueue","queue","queueToLoad","otherQueue","loadStoriesMaxIds","peerIds","usePeerStoriesPolling","peers","pollablePeerIds","lastPollingTime","isStatusAvailable","isContact","isUserBot","isSupport","isRestricted","selectIsChatRestricted","usePrevDuringAnimation","prev","timeoutRef","isCurrentPresent","isPrevPresent","clearTimeout","wasTopicOpened","requestMainWebView","unreadMentionsCount","unreadReactionsCount","isTopicUnopened","topicsWithUnread","unreadCount","shouldBeUnMuted","notifySettings","isEveryUnreadMuted","hasUnreadMark","isSignal","isUnread","handleOpenApp","extractCurrentThemeParams","ShowTransition","isCustom","unreadReactionsElement","unreadMentionsElement","unopenedTopicElement","unreadCountElement","formatIntegerCompact","pinnedElement","miniAppButton","visiblePinnedElement","elements","renderContent","formatUsername","asAbsoluteLink","TME_LINK_PREFIX","useLeftHeaderButtonRtlForumTransition","shouldHideSearch","shouldDisableDropdownMenuTransitionRef","prevShouldHideSearch","handleDropdownMenuTransitionEnd","needsAgeVerification","needAgeVideoVerification","Video","isOwn","isInWebPage","noAvatars","canAutoLoad","canAutoPlay","uploadProgress","forcedWidth","dimensions","asForwarded","isDownloading","isProtected","lastPlaybackTimestamp","clickArg","observeIntersectionForLoading","observeIntersectionForPlaying","onCancelUpload","cancelMediaDownload","updateContentSettings","openAgeVerificationModal","videoRef","isNsfwModalOpen","openNsfwModal","closeNsfwModal","shouldAlwaysShowNsfw","setShouldAlwaysShowNsfw","isPaidPreview","mediaType","localBlobUrl","blobUrl","shouldShowSpoiler","isSpoilerShown","showSpoiler","hideSpoiler","handleNsfwConfirm","isSensitiveEnabled","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","isPlayAllowed","setIsPlayAllowed","fullMediaHash","getVideoMediaHash","isFullMediaPreloaded","mediaLoader","mediaData","loadProgress","useMediaWithLoadProgress","getMediaFormat","fullMediaData","isPlayerReady","markPlayerReady","thumbDataUri","getMediaThumbUri","hasThumb","withBlurredBackground","isInline","isUnsupported","useUnsupportedMedia","isPreviewPreloaded","canLoadPreview","previewBlobUrl","shouldHidePreview","previewRef","useMediaTransition","hasMediaData","noThumb","thumbRef","useBlurredMediaThumbRef","blurredBackgroundRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","spinnerRef","shouldRenderSpinner","noMountTransition","playButtonRef","playProgress","setPlayProgress","handleTimeUpdate","currentTarget","currentTime","isFinite","calculateExtendedPreviewDimensions","calculateVideoDimensions","isFromSpinner","isAllowed","media","handleClickOnSpinner","componentClassName","MIN_MEDIA_HEIGHT","OptimizedVideo","canPlay","defaultMuted","muted","loop","playsInline","disablePictureInPicture","draggable","onTimeUpdate","onReady","MediaSpoiler","isVisible","withAnimation","isNsfw","ProgressSpinner","progress","isGif","emojiDataPromise","emojiRawData","emojiData","RE_EMOJI_SEARCH","RE_LOWERCASE_TEST","EMOJIS_LIMIT","FILTER_MIN_LENGTH","prepareRecentEmojisMemo","recentEmojiIds","prepareLibraryMemo","byNative","buildCollectionByKey","baseEmojisByKeyword","natives","emojisByKeyword","byKeyword","byName","names","maxKeyLength","keyword","searchInLibraryMemo","library","matched","matchedKeywords","sort","flat","matchedNames","setById","setFilteredEmojis","setFilteredCustomEmojis","exec","uncompressEmoji","ensureEmojiData","then","detectEmojiCodeThrottled","getEmojiCode","updateFiltered","nativeEmojis","native","uniqueByField","selectCustomEmojiForEmojis","isForce","emojiHtml","emojiCode","newShouldAutoInsert","endsWith","test","SymbolMenu","setStickerSearchQuery","setGifSearchQuery","triggerRef","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","setContextMenuAnchor","symbolMenuButtonClassName","handleActivateSymbolMenu","triggerEl","handleSearchOpen","handleSymbolMenuOpen","EDITABLE_INPUT_MODAL_CSS_SELECTOR","getLayout","withPortal","onLoad","onSearchOpen","INCLUDE_FILTER_FIELDS","EXCLUDE_FILTER_FIELDS","selectChatFilters","state","mode","selectTemp","selectedChatIds","selectedChatTypes","includedChatIds","includeFilters","pick","excludedChatIds","excludeFilters","getSuggestedFolderName","filters","groups","channels","contacts","nonContacts","INITIAL_STATE","chatFilter","foldersReducer","omit","isChatList","useFoldersReducer","useReducer","isAlbum","messageOrAlbum","groupMessages","messages","firstUnreadId","topMessageId","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","index","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","paidMedia","extendedMedia","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","senderId","paidMessageStars","postAuthorTitle","isActionMessage","inlineButtons","greeting","fullInfo","defaultStickers","lastUnreadMessageId","lastReadInboxMessageId","connectionState","businessIntro","ContactGreeting","loadGreetingStickers","markMessageListRead","containerRef","randomIndex","random","maxId","StickerView","shouldLoop","getUserFullName","countryList","phoneCodes","phoneCodeList","commonChats","selectUserCommonChats","isLoadingFullUser","MessageListAccountInfo","hasMessages","loadCommonChats","openChatWithInfo","phoneCountry","registrationMonth","nameChangeDate","photoChangeDate","country","getCountryCodeByIso","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","stopEvent","profileTab","forceScrollProfileTab","securityNameInfo","time","formatPastDatetime","withMarkdown","securityPhotoInfo","tableData","isoToEmoji","iso2","defaultName","formatRegistrationMonth","commonChatsCount","Link","AvatarList","buildStyle","Skeleton","forceAspectRatio","getChatTitle","MiniTable","keyClassName","isVerified","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","SponsoredContextMenuContainer","selectSponsoredMessage","activeDownloads","selectActiveDownloads","downloadableMedia","selectMessageDownloadableMedia","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","SponsoredMessage","viewSponsored","openUrl","hideSponsored","clickSponsored","openAboutAdsModal","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","randomId","handleHideSponsoredMessage","getMessageContent","isMedia","shouldSkipModal","handleOpenMedia","isSponsoredMessage","handleOpenAboutAdsModal","canReport","additionalInfo","sponsorInfo","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","getMinMediaWidthWithText","getMinMediaWidth","noMediaCorners","preventMessageInputBlur","peerColor","Photo","renderMediaContent","isRecommended","BadgeButton","isRectangular","buttonText","MessageAppendix","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","isChannelChat","isChatMonoforum","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","hasLinkedChat","shouldRenderAccountInfo","noAppearanceAnimation","isQuickPreview","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","canPost","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","shouldUpdateViews","albumMainId","hasUnreadMention","hasUnreadReaction","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadViewportMessages","loadMoreBackwards","loadMoreForwards","debounce","LoadMoreDirection","Backwards","Forwards","toggleScrollTools","container","fabTrigger","offsetHeight","scrollHeight","scrollTop","fabOffsetTop","scrollBottom","isNearBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","renderPaidMessageAction","album","messagesLength","formatStarsAsText","userTitle","renderSuggestedPostInfoAction","scheduleDate","userLink","renderPeerLink","originalMessage","titleText","getSuggestedChangesInfo","getSuggestedChangesActionText","compact","formatTonAsText","convertTonFromNanos","formatScheduledDateTime","actionMessageStyles","suggestedPostContainer","suggestedPostTitle","messageCountToAnimate","messageGroup","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","appearanceOrder","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","previousLocalId","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","isServiceNotificationMessage","noComments","Message","withAvatar","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","firstMessage","firstMessageId","SenderGroupContainer","calculateSenderGroups","teactFastList","selectedAt","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","selectThemeValues","openPremiumModal","handleOpenPremiumModal","handleGetMoreStars","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","isApiPeerUser","containerClassName","Sparkles","preset","Content","runDebouncedForScroll","selectCurrentMessageIds","selectChatScheduledMessages","getIsSavedDialog","restrictionReasons","selectActiveRestrictionReasons","focusingId","selectFocusedMessageId","withLastMessageWhenPreloading","isNonContact","canAddContact","selectTopic","selectThreadInfo","areAdsEnabled","hasCustomGreeting","monoforumChannelId","canTranslate","selectCanTranslateChat","isTranslationDisabled","shouldAutoTranslate","hasAutoTranslation","translationLanguage","selectTranslationLanguage","isChatLoaded","isGroupChat","isChatGroup","isChannelWithAvatars","isCreator","isSystemBotChat","isAnonymousForwards","isAnonymousForwardsChat","isBot","selectFirstUnreadId","selectIsViewportNewest","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","isChatProtected","selectIsChatProtected","MessageList","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadMessageViews","loadFactChecks","requestChatTranslation","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","onTickEnd","toLanguageCode","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","arr","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","orderBy","storyDataList","storiesByPeerIds","isCommentsInfo","viewsCount","factCheck","shouldFetch","loadMoreAround","Around","isScrolled","updateStickyDates","markIsScrolled","runDebounced","contains","stuckDateEl","allElements","containerTop","headerActionsHeight","parseInt","findStuckDate","currentStuck","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","scrollOffset","prevContainerHeightRef","isComposerVisible","setContainerHeight","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","String","prevContainerHeight","useContainerHeight","isLocalMessageId","MESSAGE_LIST_SLICE","firstElementChild","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","animateScroll","forceDuration","isResized","isAnimatingScroll","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","ANIMATION_END_DELAY","shouldRenderGreeting","isEmptyTopic","Restricted","PremiumRequired","Loading","AccountInfo","StarsRequired","shouldCleanup","onScroll","RequirementToContactMessage","backgroundColor","ownProps","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","isRepliesChat","isInFocusList","markShown","MESSAGE_APPEARANCE_DELAY","avatarPeer","isAvatarPeerUser","handleOpenChat","handleMention","handleAvatarClick","avatarRef","canMention","shouldRenderContextMenu","hiddenName","renderAvatar","SMALL_IMAGE_THRESHOLD","MIN_MESSAGE_LENGTH_FOR_BLUR","MIN_MEDIA_WIDTH","hasCommentButton","messageText","isPhoto","isVideo","isWebPagePhoto","isWebPageVideo","calculateInlineImageDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","selectWebPagesById","webPageById","useMessageMediaHash","webPagesById","useSelector","webPageId","getMessageMediaHash","forcePlaceCaretAtEnd","nodeValue","selectNodeContents","collapse","MENU_CLOSE_TIMEOUT","closeTimeout","menuCloseTimeout","isMouseInside","selectWebPageFromMessage","WebLink","senderTitle","onMessageClick","linkData","getFirstLinkInMessage","domain","formattedDescription","getMessageTextWithFallback","renderMessageSummary","displayUrl","truncatedDescription","trimText","safeLinkContent","Media","SafeLink","formatPastTimeShort","cache","WeakMap","fn","cached","areSortedArraysEqual","lastArgs","lastResult","letterClassName","noLoopLimit","iconEmojiId","loopLimit","TopicDefaultIcon","iconColor","topicId","onStart","onEnd","isLongPressActive","isPressed","timerId","canProcessEvent","touches","end","cancel","useUnmountCleanup","onMouseUp","onTouchStart","onTouchEnd","extractorEl","deleteContents","createContextualFragment","lastInsertedNode","insertNode","setStartAfter","setEndAfter","useCommonAncestor","sel","cloneRange","intersectsNode","cloneContents","caretRange","endContainer","endOffset","Node","TEXT_NODE","removeAllSelections","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","requestMediaWorker","MAX_WORKERS","navigator","hardwareConcurrency","instances","launchMediaWorkers","IS_TEST","Worker","inputSelector","getRange","setRange","onSelectionChange","Element","VTN_PROPERTY_NAME","useVtn","uniqueId","fallbackId","useUniqueId","createVtnStyle","vtClass","vtClassString","CSS","registerProperty","syntax","inherits","DropTarget","isQuick","isGeneric","isHovered","markHovered","unmarkHovered","handleDragLeave","relatedTarget","toTarget","onDrop","onDragLeave","rx","hideTimeoutRef","prevWithQuick","handleFilesDrop","dataTransfer","dt","folderFiles","handleQuickFilesDrop","fromTarget","matches","shouldRenderQuick","Portal","containerSelector","onDragOver","handleDragOver","reducer","initialState","reducerRef","dispatch","NothingFound","withSticker","DuckNothingFound","previewUrl","LOCAL_TGS_PREVIEW_URLS","noLoop","DAY_MINUTES","WEEK_MINUTES","getWeekStart","setHours","day","getDay","diff","getDate","setDate","getTime","shiftTimeRanges","ranges","shiftedRanges","startMinute","endMinute","a","b","last","DAYS","_","BusinessHours","businessHours","transitionRef","isExpanded","expand","isMyTime","showInMyTime","showInLocalTime","timezoneSignal","timezones","timezoneMinuteDifference","timezone","timezoneId","getTimezoneOffset","utcOffset","workHours","weekStart","days","dayStart","dayEnd","splitDays","segments","formatTime","isBusinessOpen","localTimeHours","minutesSinceWeekStart","currentDay","handleTriggerOffset","slide","ACTIVE_SLIDE_CLASS_NAME","handleAnimationStart","TO_SLIDE_CLASS_NAME","iconClassName","multiline","isStatic","narrow","withColorTransition","role","tabIndex","formatWeekday","segment","EFFECT_EMOJIS","birthdayNumbers","animatedEmojiEffects","isPremiumPurchaseBlocked","UserBirthday","birthday","isInSettings","requestConfetti","animationPlayedRef","isPlayingAnimation","playAnimation","stopAnimation","formattedDate","isToday","age","today","year","setMonth","month","formatDateToString","getMonth","getAge","numbersForAge","numbers","byEmoji","digit","effectSticker","randomEffect","hash","getStickerMediaHash","ApiMediaFormat","BlobUrl","effectHash","column","canGiftPremium","handleOpenGiftModal","secondaryIcon","secondaryIconClassName","onSecondaryIconClick","IS_OFFSET_PATH_SUPPORTED","forceAlways","birthdate","DEFAULT_MAP_CONFIG","zoom","chatOrUserId","botAppPermissions","selectBotAppPermissions","botVerification","chatInviteLink","inviteLink","bio","about","canViewSubscribers","canInviteUsers","isUserRightBanned","getHasAdminRight","topicLink","selectTopicLink","hasSavedMessages","chats","listIds","saved","personalChannel","personalChannelId","isBotCanManageEmojiStatus","ChatExtra","isOwnProfile","updateTopicMutedState","loadPeerStories","openMapModal","requestCollectibleInfo","toggleUserEmojiStatusPermission","toggleUserLocationPermission","requestNextManagementScreen","usernames","phoneNumber","chatUsernames","businessLocation","businessWorkHours","personalChannelMessageId","prevPeerId","dpr","useDevicePixelRatio","locationMediaHash","geo","buildStaticMapHash","locationBlobUrl","locationRightComponent","isTopicInfo","shouldRenderAllLinks","activeUsernames","u","activeChatUsernames","getChatLink","handleClickLocation","address","copyTextToClipboard","geoPoint","handleToggleNotifications","MUTE_INDEFINITE_TIMESTAMP","manageEmojiStatusChange","handleLocationPermissionChange","isAccessGranted","geolocation","handleOpenSavedDialog","copy","formattedNumber","formatPhoneNumberWithCode","handlePhoneClick","FRAGMENT_PHONE_LENGTH","FRAGMENT_PHONE_CODE","collectible","handleUsernameClick","isChat","isEditable","handleOpenSubscribers","screen","ManagementScreens","ChannelSubscribers","shouldMarkBotTrusted","appTermsInfo","terms","membersCount","ChatAnimationTypes","renderUsernames","allowSelection","Switcher","inactive","iconId","usernameList","otherUsernames","usernameLinks","s","idx","dataTransferItems","traverseFileTreePromise","item","itemFile","getAsFile","isDirectory","createReader","readEntries","entriesPromises","kind","webkitGetAsEntry","InviteLink","withShare","onRevoke","openChatWithDraft","isOnlyCopy","copyLink","handleCopyClick","handleShare","PrimaryLinkMenuButton","onTrigger","readOnly","DropdownMenu","trigger","destructive","isInSearch","isServiceNotifications","deleteTitle","getCanDeleteChat","toggleChatPinned","toggleSavedDialogPinned","toggleChatArchived","markChatMessagesRead","markChatUnread","openChatInNewTab","actionOpenInNewTab","IS_TAURI","actionQuickPreview","togglePinned","actionPin","actionDelete","actionAddToFolder","actionMute","actionMaskAsRead","actionMarkAsUnread","actionArchive","isChatArchived","actionReport","isInFolder","PROVIDERS","google","bing","osm","apple","VENUE_COLORS","arts_entertainment","building","education","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","prepareMapUrl","provider","point","lat","long","providerUrl","getMetersPerPixel","cos","PI","getVenueIconUrl","getVenueColor","str","prevHash","currVal","charCodeAt","confirmPaymentMessage","totalAmount","HeaderMenuContainer","isSuperGroup","selectLanguageCode","doNotTranslate","noMenu","isMainThread","isDiscussionThread","isUserBlocked","selectIsUserBlocked","canRestartBot","canStartBot","selectIsChatBotNotStarted","canUnblock","canSubscribe","isNotJoined","canSearch","canCall","ARE_CALLS_SUPPORTED","canMute","canLeave","canEnterVoiceChat","canCreateVoiceChat","manageCall","isChatBasicGroup","canViewStatistics","canViewMonetization","canViewBoosts","canShowBoostModal","pendingJoinRequests","requestsPending","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","noAnimation","isTranslating","selectRequestedChatTranslationLanguage","channelMonoforumId","linkedMonoforumId","detectedChatLanguage","detectedLanguage","HeaderActions","isForForum","canExpandActions","onTopicSearch","joinChannel","sendBotCommand","openMiddleSearch","restartBot","requestMasterAndRequestCall","togglePeerTranslations","openChatLanguageModal","setSettingOption","unblockUser","setViewForumAsMessages","menuButtonRef","setIsMenuOpen","menuAnchor","setMenuAnchor","handleHeaderMenuOpen","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","handleTranslateClick","handleJoinRequestsClick","JoinRequests","handleSearchClick","setFocusInSearchInput","handleAsMessagesClick","handleRequestCall","handleHotkeySearchClick","IS_APP","getTextWithLanguage","langKey","langCode","translationKey","toUpperCase","translatedName","Intl","DisplayNames","of","doNotTranslateText","handleHide","handleChangeLanguage","handleDoNotTranslate","MoreMenuButton","withExtraActions","onJoinRequestsClick","withForumActions","onSubscribeChannel","onSearchClick","onAsMessagesClick","searchInput","focusNoScroll","CLOSE_DURATION","RESIZE_THROTTLE","useHeaderPane","providedRef","withResizeObserver","onStateChange","setShouldRender","localRef","lastHeightRef","reset","handleUpdate","currentHeight","useThrottledCallback","applyAnimationState","list","noTransition","cumulativeHeight","shiftPx","apply","setExtraStyles","transform","zIndex","transition","isPanelOpen","path","DEFAULT_HANDLERS","play","seekbackward","seekforward","previoustrack","nexttrack","seekTo","registerMediaSession","metadata","mediaSession","updateMetadata","setMediaSessionHandlers","warn","setActionHandler","clearMediaSession","playbackState","setPositionState","setPlaybackState","buildMediaMetadata","artist","artwork","MediaMetadata","ARCHIVE_CUSTOM_PEER","isCustomPeer","avatarIcon","customPeerAvatarColor","Archive","archiveSettings","updateArchiveSettings","orderedChatIds","useFolderManagerForOrderedIds","ARCHIVED_FOLDER_ID","unreadCounters","useFolderManagerForUnreadCounters","archiveUnreadCount","chatsCount","previewItems","chatsById","isLast","unread","actionMinimize","isMinimized","actionExpand","actionHide","isHidden","minimized","buttonClassName","info","Badge","avatarWrapper","chatsPreview","folderType","chatFolder","selectChatFolder","animatedEmoji","selectAnimatedEmoji","EmptyFolder","foldersDispatch","openSettingsScreen","handleEditFolder","SettingsScreens","FoldersEditFolderFromChatList","AnimatedIconFromSticker","FrozenAccountNotification","UnconfirmedSession","sessions","onHeightChange","changeSessionSettings","terminateAuthorization","borderBoxSize","blockSize","firstUnconfirmed","dateCreated","session","isUnconfirmed","locationString","deviceModel","region","handleAccept","isConfirmed","handleReject","isText","RESERVED_HOTKEYS","allWorkspaces","selectWorkspaces","currentWorkspaceId","selectCurrentWorkspaceId","excludeOtherWorkspaces","selectExcludeOtherWorkspaces","ChatList","canDisplayArchive","isMainList","openNextChat","openLeftColumnContent","shouldIgnoreDragRef","unconfirmedSessionHeight","setUnconfirmedSessionHeight","isArchived","isAllFolder","isSaved","resolvedFolderId","SAVED_FOLDER_ID","shouldDisplayArchive","shouldShowFrozenAccountNotification","foldersFromWorkspaces","flatMap","w","foldersIds","shouldFilterByWorkspace","EVERYTHING_WORKSPACE_ID","filteredOrderedIds","orderedIdsWithoutSelf","folderChatIds","getOrderedIds","chatsHeight","CHAT_HEIGHT_PX","archiveHeight","ARCHIVE_MINIMIZED_HEIGHT","frozenNotificationHeight","viewportIds","getMore","useInfiniteScroll","CHAT_LIST_SLICE","shouldShowUnconfirmedSessions","sessionsArray","isCurrent","FRESH_AUTH_PERIOD","targetIndexDelta","handleKeyDown","IS_MAC_OS","isArchiveInList","contentKey","LeftColumnContent","Archived","handleArchivedClick","handleFrozenAccountNotificationClick","handleArchivedDragEnter","useDebouncedCallback","clientX","clientY","InfiniteScroll","itemSelector","preloadBackwards","withAbsolutePositioning","maxHeight","onLoadMore","viewportOffset","pinnedCount","getPinnedChatsCount","teactOrderKey","getOrderKey","renderChats","TOPIC_ICON_SIZE","threadInfo","onlineCount","selectChatOnlineCount","selectThreadMessagesCount","GroupChatInfo","noAvatar","withChatType","realChat","withMonoforumStatus","loadFullChat","isTopic","isMin","shouldRestoreHeight","getChatTypeString","groupStatus","getGroupStatus","onlineStatus","isInSelectMode","shouldAffectAppendix","getPhotoMediaHash","prevMediaData","fullMediaRef","shouldRenderFullMedia","withThumb","downloadButtonRef","shouldRenderDownloadButton","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","dimensionsStyle","fileSelector","accept","noMultiple","onchange","click","extension","timestamp","thumbnailDataUri","previewData","smaller","isSelectable","actionIcon","onDateClick","elementRef","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","thumbClassNames","useMediaTransitionDeprecated","shouldSpinnerRender","spinnerClassNames","getColorFromExtension","sizeString","getFileSizeString","subtitle","getDocumentThumbnailDimensions","formatMediaDateTime","NO_CORNER_THRESHOLD","ChatForumLastMessage","renderLastMessage","lastMessageRef","mainColumnRef","lastActiveTopic","otherTopics","getOrderedTopics","isReversedCorner","setIsReversedCorner","overwrittenWidth","setOverwrittenWidth","handleOpenTopicClick","handleMouseDown","handleOpenTopicMouseDown","useFastClick","getIsMobile","lastMessageElement","mainColumnElement","lastMessageWidth","offsetWidth","mainColumnWidth","abs","ANIMATION_DURATION","shouldTryLoadingStory","useEnsureStory","mediaContent","mediaHasPreview","getMessageSticker","mediaThumbnail","mediaHash","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","renderLastMessageOrTyping","isDraftReplyToTopic","isEmptyLocalReply","asPreview","withTranslucentThumbs","senderName","getMessageSenderName","renderSummary","Opacity","opacity","Move","messageSummary","MessageSummary","noEmoji","inChatList","getMessageIsSpoiler","tracks","currentTrackId","voiceQueue","musicQueue","playNext","trackId","isReverseOrder","currentTrack","onTrackChange","nextTrackId","findNextInQueue","audioPlayer","AudioOrigin","Inline","openAudioPlayer","parseMessageKey","splitTrackId","messageKey","nextTrack","onForcePlay","safePlay","stopCurrentAudio","register","trackType","track","Audio","handleEvent","eventName","isSafariPatchInProgress","proxy","Proxy","createAudio","trackIdComparator","addTrackToQueue","paused","preventPlayAfterPatch","preload","patchSafariProgressiveAudio","globalSearch","currentContent","GlobalSearchContent","Music","openedChatId","queueFilter","cleanUpQueue","prevSrc","setCurrentTime","fastSeek","setVolume","setPlaybackRate","rate","playbackRate","toggleMuted","requestNextTrack","isFirst","requestPreviousTrack","shouldRemoveFromQueue","h","trackIdFilter","removeFromQueue","currentId","getTrackQueue","Search","chatAudio","makeTrackId","getMessageServerKey","one","two","dateOne","keyOne","dateTwo","keyTwo","localeCompare","EVERYTHING_WORKSPACE","workspaces","userWorkspaces","selectWorkspaceById","workspaceId","selectCurrentWorkspace","selectWorkspaceUnreadUnmutedChatsCount","workspace","adjustedUnreadCounters","getAdjustedUnreadCounters","otherWorkspacesFoldersIds","counters","unmutedChatsCount","folderCounters","isPrivateChat","getPrivateChatUserId","canDeleteForAll","isBasicGroup","leaveChannel","deleteHistory","deleteSavedHistory","deleteChannel","deleteChatUser","blockUser","deleteChat","chatTitle","handleDeleteForAll","shouldDeleteForAll","handleDeleteAndStop","handleDeleteChat","handleLeaveChat","Modal","header","COLOR_REPLACE_PATTERN","AttachBotIcon","isTouchScreen","getDocumentMediaHash","Text","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","isInSideMenu","canShowNew","toggleAttachBot","icons","openMenu","closeMenu","menuPosition","setMenuPosition","isFromSideMenu","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","shortName","isDisclaimerNeeded","interval","MAX_STANDARD_QUALITY_IMG_SIZE","MAX_HIGH_QUALITY_IMG_SIZE","MAX_THUMB_IMG_SIZE","MAX_ASPECT_RATIO","FILE_EXT_REGEX","options","createObjectURL","mimeType","quick","shouldSendAsFile","img","preloadImage","validateAspectRatio","maxQuickImgSize","shouldShrink","GIF_MIME_TYPE","compressedBlobUrl","resizedUrl","scaleImage","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","performer","coverUrl","parseBlob","selectCover","fetchBlob","common","picture","format","cover","coverBlob","parseAudioMetadata","shouldSendCompressed","attach","getBoostProgressInfo","boostInfo","freezeOnLevelUp","level","boosts","currentLevelBoosts","nextLevelBoosts","hasMyBoost","prepaidGiveaways","isJustUpgraded","currentLevel","hasNextLevel","levelProgress","remainingBoosts","isMaxLevel","getSenderName","preloadedHashes","LimitedMap","Document","autoLoadFileMaxSizeMb","shouldWarnAboutFiles","onMediaClick","downloadMedia","setSharedSettingOption","isFileIpDialogOpen","openFileIpDialog","closeFileIpDialog","shouldNotWarnAboutFiles","setShouldNotWarnAboutFiles","fileName","getDocumentExtension","wasIntersected","markIntersected","shouldDownload","documentHash","isLoaded","hasPreview","getDocumentHasPreview","shouldForceDownload","innerMediaType","mediaSize","fromDocumentAttribute","fromPreload","fileEl","onHover","mediaContainer","getMessageDocumentVideo","getMessageDocumentPhoto","shouldSkipPhoto","fetch","IS_PROGRESSIVE_SUPPORTED","videoEl","naturalWidth","naturalHeight","updateChatMessage","setGlobal","preloadDocumentMedia","handleDownload","originMessage","isIpRevealingMedia","handleFileIpConfirm","handleDateClick","isDocumentVideo","MediaAreaSuggestedReaction","mediaArea","customEmojiSize","setCustomEmojiSize","views","isDark","isFlipped","reactionCount","r","shouldDisplayCount","updateCustomEmojiSize","prevReactionCount","effectSize","shouldPause","formatTemperature","temperatureC","restrictedEmoji","selectRestrictedEmoji","MediaAreaWeather","convertToRGBA","textColor","getTextColor","updateCustomSize","isImmediate","customEmojiHeight","applyFn","noPlay","withTranslucentThumb","STORY_ASPECT_RATIO","NO_SHINY_TYPES","prepareStyle","mediaWidth","rotation","radius","coordinates","pixelRadius","pixelWidth","pixelHeight","MediaAreaOverlay","isStoryPlaying","openUniqueGiftBySlug","closeStoryViewer","setMediaWidth","useWindowSize","clientWidth","MOBILE_SCREEN_MAX_WIDTH","screenAspectRatio","mediaAreas","isShiny","channelId","slug","handleMediaAreaClick","lastCallback","onBeforeUnload","useScrollNotch","selector","deps","toggleExtraClass","RADIUS_RATIO","lastWorkerIndex","thumbData","canvasRef","workerIndex","cycleRestrict","offscreenRef","blurThumb","canvas","uri","image","transferControlToOffscreen","useOffscreenCanvasBlur","groupCall","selectChatGroupCall","isMasterTab","groupCalls","activeGroupCallId","participantsCount","GroupCallTopPane","onPaneStateChange","requestMasterAndJoinGroupCall","handleJoinGroupCall","participants","fetchedParticipants","renderingParticipantCount","renderingFetchedParticipants","isRendering","resolver","msOrSchedulerFn","noFirst","setValue","useThrottledSignal","getValue","ms","throttledResolver","noLast","debouncedResolver","PENDING_TRANSLATIONS","useMessageTranslation","chatTranslations","requestedLanguageCode","messageTranslation","byLangCode","isPending","languageTranslations","markMessagesTranslationPending","throttledProcessPending","addPendingTranslation","translatedText","translateMessages","hasUnprocessed","messageIdsToTranslate","oldMessageIds","newMessageIds","removePendingTranslations","TINY_SCREEN_WIDTH_MQL","matchMedia","WITH_AVATAR_TINY_SCREEN_WIDTH_MQL","renderAudio","isPlaying","bufferedRanges","seekerRef","showProgress","showSeekline","renderSeekline","renderVoice","waveformCanvasRef","isMediaUnread","isTranscribing","isTranscriptionHidden","isTranscribed","isTranscriptionError","onClickTranscribe","onHideTranscription","ry","OneTimeModal","mediaDuration","selectMessageMediaDuration","canDownload","canTranscribe","autoPlay","onPlay","onPause","onReadMedia","transcribeAudio","openOneTimeMediaModal","contentAudio","mediaSource","isVoice","isSeeking","isActivated","setIsActivated","coverHash","coverBlobUrl","hasTtl","hasMessageTtl","isInOneTimeModal","handleForcePlay","handleTrackChange","isBuffered","bufferingHandlers","checkBuffering","useBuffering","noReset","playPause","useAudioPlayer","isMessageLocal","reversePlayProgress","isReverse","spikes","peak","MIN_SPIKES","MAX_SPIKES","getSeeklineSpikeAmounts","durationFactor","spikesCount","fitCount","newData","springFactor","leftFiller","rightFiller","val","interpolateArray","encoded5bit","bitsCount","valuesCount","bitsData","l","byteIndex","bitShift","lastByteIndex","lastBitShift","lastValue","decodeWaveform","fillStyle","progressFillStyle","ctx","getContext","globalAlpha","spikeHeight","beginPath","moveTo","arcTo","closePath","roundedRectangle","renderWaveform","useWaveformCanvas","withSeekline","isLoadingForPlaying","shouldRenderCross","handleButtonClick","setAudioPlayerOrigin","handleDownloadClick","handleSeek","MouseEvent","targetTouches","handleStartSeek","handleStopSeek","handleTranscribe","renderFirstLine","renderSecondLine","captureEvents","onCapture","onRelease","onDrag","SharedMedia","buttonClassNames","contentClassName","renderWithTitle","backgroundImage","AnimatedIcon","Flame","transparent","withColor","noCross","rotationOffset","STREAMING_PROGRESS","STREAMING_TIMEOUT","PROGRESS_THROTTLE","noLoad","mediaFormat","delay","isHtmlAllowed","isStreaming","Progressive","selectIsSynced","setLoadProgress","startedAtRef","handleProgress","spentTime","groupCallId","selectGroupCall","selectGroupCallParticipant","participantId","selectIsAdminInActiveGroupCall","selectActiveGroupCall","selectPhoneCallUser","phoneCall","adminId","selectCanInviteToActiveGroupCall","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","STORY_OVERVIEW","BOOST_OVERVIEW","withAbsoluteValue","StatisticsOverview","statistics","isToncoin","renderOverviewItemValue","change","percentage","isChangeNegative","renderBalanceCell","usdRate","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","period","balances","schema","getSchemaByType","formatFullDate","minDate","maxDate","availableBalance","currentBalance","overallRevenue","cell","field","formatInteger","isGraph","obj","ConnectionStatus","useConnectionStatus","isSyncing","hasMiddleHeader","setIsOnline","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","connectionStatus","connectionStatusPosition","connectionStatusText","AbsoluteVideo","videoUrl","load","recalculatePositionAndSize","SIZE","TextFormatter","SCROLLER_CLASS","TEXT_FORMATTER_SAFE_AREA_PX","IGNORE_KEYS","messageSendKeyCombo","isAttachmentModalInput","editLastMessage","replyToNextMessage","selectionTimeoutRef","cloneRef","scrollerCloneRef","sharedCanvasRef","sharedCanvasHqRef","absoluteContainerRef","isContextMenuOpenRef","isTextFormatterOpen","openTextFormatter","closeTextFormatter","textFormatterAnchorPosition","setTextFormatterAnchorPosition","selectedRange","setSelectedRange","isTextFormatterDisabled","setIsTextFormatterDisabled","isMobileDevice","shouldDisplayTimer","setShouldDisplayTimer","handleTimerEnd","prefixId","customColor","useDynamicColorListener","colorFilter","useColorFilter","playersById","clearPlayers","player","synchronizeElements","playerIdsToClear","playerId","mediaUrl","getCustomEmojiMediaDataForInput","canvasBounds","elementBounds","customEmoji","isHq","selectIsAlwaysHighPriorityEmoji","renderId","viewId","isLottie","shouldUseTextColor","hexToRgb","lottie","ensureRLottie","coords","isLowPriority","g","removeView","setSharedCanvasCoords","absoluteVideo","createPlayer","animation","addCustomEmojiInputRenderCallback","activePlayersById","prevCustomColor","throttledSynchronizeElements","prevDpr","freezeAnimation","unfreezeAnimation","unfreezeAnimationOnRaf","useInputCustomEmojis","maxInputHeight","updateInputHeight","willSend","fastRaf","scroller","newHeight","isOverflown","transitionDuration","log","toggle","htmlRef","focusInput","handleCloseTextFormatter","empty","clearSelection","checkSelection","selectedText","START_TO_END","processSelection","selectionRect","scrollerRect","processSelectionWithTimeout","handleDocumentKeyDown","getIsDirectTextInputDisabled","isSelectionCollapsed","isCollapsed","isContentEditable","newEvent","KeyboardEvent","captureFirstTab","captureKeyboardListeners","onTab","suppressFocus","inputScrollerContentClass","placeholderAriaLabel","spellCheck","onChange","onKeyDown","isComposing","handleCloseContextMenu","e2","onTouchCancel","TextTimer","endsAt","anchorPosition","orderDiffs","numberOfUp","numberOfDown","Infinity","typingUser","typingUserName","isHovering","markMouseOver","markMouseOut","fullGiftHash","fullGifBlobUrl","hasSpoiler","onMouseOver","onMouseOut","decoding","shouldUseDraft","NOTIFICATION_DURATION","shouldDisableNotification","setIsUnsupported","handleUnsupported","IS_MOBILE","onError","onCanPlay","PROGRESS_CENTER","ROUND_VIDEO_DIMENSIONS_PX","PROGRESS_CIRCUMFERENCE","stopPrevious","RoundVideo","playerRef","circleRef","shouldRenderSpoiler","getProgress","setProgress","getThrottledProgress","playerEl","strokeDashOffset","stopPlaying","capturePlaying","togglePlaying","isPriority","onEnded","cx","cy","replaceWithTeact","STARS_ICON_PLACEHOLDER","ProfilePhoto","canPlayVideo","isDeleted","isDeletedUser","isChatWithRepliesBot","canHaveMedia","avatarHash","avatarPhotoId","getChatAvatarHash","previewHash","photoHash","getProfilePhotoMediaHash","photoBlobUrl","videoHash","getVideoProfilePhotoMediaHash","isVideoReady","markVideoReady","isFullMediaReady","isBlurredThumb","thumbnail","dataUri","blurredThumbCanvasRef","specialIcon","userFullName","getFirstLetters","GIFT_STICKER_SIZE","POSITIONS","PinnedGift","gift","withGlow","openGiftInfoModal","stickerRef","giftAttributes","getGiftAttributes","model","backdrop","GiftEffectWrapper","withSparkles","sparklesColor","glowColor","edgeColor","ProfilePinnedGifts","gifts","clamp","getExpandedPosition","PATTERN_Y_SHIFT","profilePhotos","selectPeerPhotos","avatarOwnerId","mediaViewer","currentTopicId","animationLevel","emojiStatus","emojiStatusSticker","emojiStatusSlug","profileColor","selectPeerProfileColor","hasBackground","selectPeerHasProfileBackground","savedGifts","selectPeerSavedGifts","profileColorOption","ProfileInfo","isForSettings","isForMonoforum","onExpand","openStickerSet","openPrivacySettingsNoticeModal","openProfileRatingModal","loadPeerSavedGifts","photos","prevMediaIndex","prevAvatarOwnerId","hasSlideAnimation","setHasSlideAnimation","currentPhotoIndex","setCurrentPhotoIndex","collectibleEmojiStatus","backgroundEmoji","useCustomEmoji","patternDocumentId","backgroundEmojiId","profileColorSet","bgColors","centerColor","storyColors","colors","darkColors","reverse","pinnedGifts","currentIndex","usePhotosPreload","handleProfilePhotoClick","SettingsAvatar","handleStatusClick","fromUserId","selectPreviousMedia","selectNextMedia","handleOpenGetReadDateModal","isReadDate","handleRatingClick","handleMinimizedAvatarClick","selectorToPreventScroll","onSwipe","SwipeDirection","Right","Left","RadialPatternBackground","backgroundColors","patternIcon","patternSize","withLinearGradient","yPosition","totalPhotosLength","enumerator","activeDashIndex","MAX_PHOTO_DASH_COUNT","renderPhotoTabs","personalPhoto","fallbackPhoto","resolveTransitionName","canCopyTitle","renderUserRating","isReadDateRestrictedByMe","renderStatus","starsRating","onRatingClick","safeLevel","iconLevel","iconName","originalDuration","onInit","noPlaylist","noProgressUpdates","noHandleEvents","controllerRef","setIsPlaying","isPlayingSync","mediaHandlers","closeAudioPlayer","skipTime","seekOffset","seekTime","makeMediaHandlers","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","prevShouldPlay","playIfPresent","setTime","audioProxy","SponsoredContextMenu","shouldSkipAbout","onAboutAdsClick","onSponsoredHide","onSponsorInfo","onSponsoredReport","menuRef","isSeparatorNeeded","SponsoredMessageContextMenuContainer","onItemClick","reportSponsored","handleItemClick","handleAboutAdsOpen","handleSponsoredHide","handleSponsorInfo","handleReportSponsoredMessage","canManageTopics","EmptyForum","openCreateTopicPanel","handleCreateTopic","centered","selectTopics","lastMessageStory","isChatMuted","canDelete","selectCanDeleteTopic","Topic","deleteTopic","isClosed","handleOpenDeleteModal","handleOpenTopic","wasOpened","editTopic","toggleTopicPinned","markTopicRead","canToggleClosed","getCanManageTopic","canTogglePinned","actionUnreadMark","actionCloseTopic","useTopicContextActions","ForumPanel","onOpenAnimationStart","scrollTopHandlerRef","setIsScrolled","handleClose","handleToggleChatInfo","orderedPinnedTopicIds","totalCount","TOPICS_SLICE","shouldRenderRef","prevIsVisible","useHistoryBack","onBack","endHeavyAnimation","waitForTransitionEnd","onTransitionEnd","TOPIC_HEIGHT_PX","sensitiveArea","TOPIC_LIST_SENSITIVE_AREA","beforeChildren","renderTopics","GENERAL_TOPIC_ID","prop","getBrowserFullscreenElementProp","useFullscreen","elRef","exitCallback","enterCallback","isFullscreen","setIsFullscreen","listener","HTMLVideoElement","controls","listenerEnter","listenerExit","setFullscreen","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","exitFullscreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","checkIfFullscreen","removeTauriListener","tauri","getCurrentWindow","tauriWindow","onResized","setupTauriListener","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","fullscreenProp","getSingularPaidMedia","singularMedia","accumulate","initValue","accumulator","calculateContainerSize","layout","sides","calculateAlbumLayout","ratios","isSingleMessage","allMedia","getRatios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","params","minWidth","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","optimalCounts","optimalHeights","rowCount","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","h0","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","isTranslatable","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","canReply","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","quickReactionContainer","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","isVisibleX","isVisibleY","excludedClosestSelector","clearInterval","getIsKeyboardVisible","handleTap","handleDoubleClick","quoteOffset","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","nextElementSibling","renderPictogram","srcUrl","getPictogramDimensions","EmbeddedStory","isFullStory","isExpiredStory","isVideoStory","getStoryMediaHash","pictogramUrl","handleFastClick","shouldReset","TopicChip","getTopicColorCssVariable","blankSrc","withSelectControl","WrappedComponent","noSelectControls","selectIsMessageSelected","toggleMessageSelection","handleMessageSelect","withShift","newProps","dims","PhotoWithSelect","VideoWithSelect","uploadsByKey","fileUploads","byMessageKey","Album","hasCustomAppendix","albumLayout","cancelUploadMedia","mediaCount","handlePaidMediaClick","handleAlbumMessageClick","handleCancelUpload","containerWidth","renderingPaidMedia","paidPhotoOrPreview","paidVideoOrPreview","fileUpload","getMessageKey","useAnimatedEmoji","soundId","activeEmojiInteractions","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","interactions","startedInteractions","sendInteractionBunch","startSize","isReversed","performance","interactionMessageId","customEmojiId","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","AnimatedCustomEmoji","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","AnimatedEmoji","forceLoadPreview","quality","forcePreview","CommentButton","isCustomShape","asActionButton","shouldRenderLoading","useAsyncRendering","originMessageId","recentReplierIds","originChannelId","recentRepliers","hasUnread","commentsText","getContactName","contact","firstName","lastName","Contact","openAddContactDialog","isRegistered","getCanAddContact","handleAddContact","emojiIconClassName","ContextMenuContainer","COLOR","FactCheck","isToggleDisabled","cutoutRef","isCollapsible","setIsCollapsed","useCollapsibleLines","countryLocalized","countryCode","canExpand","handleExpand","handleToggle","Separator","Game","game","getGamePreviewPhotoHash","getGamePreviewVideoHash","videoBlobUrl","handleGameClick","getMessageText","giveaway","channelIds","giftSticker","selectGiftStickerForDuration","months","Giveaway","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","untilDate","prizeDescription","quantity","winnersCount","hasEnded","translatedNames","countries","handlePeerClick","handleShowInfoClick","callApi","handleCloseInfo","giveawayInfoTitle","PartyPopper","winnerIds","PeerChip","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","isOnlyConfirm","isResultsInfo","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstKey","giveawayDuration","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","InlineButtons","renderIcon","RE_TME_LINK","buttonType","Invoice","invoice","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","crossOrigin","formatCurrency","InvoiceMediaPreview","isConnected","openInvoice","loadExtendedMedia","refreshExtendedMedia","isExtendedMedia","spoiler","buy","lock","formatCurrencyAsString","TIMER_CIRCUMFERENCE","TIMER_RADIUS","MOVE_THRESHOLD","PinSvg","Location","countdownRef","location","getMessageLocation","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","setPoint","shouldRenderText","prevMediaBlobUrl","mapBlobUrl","accuracyRadiusPx","accuracyRadius","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","timeLeft","formatCountdownShort","renderPin","pinClassName","heading","venueType","iconSrc","mapPin","renderOverlay","formatLocationLastUpdate","editDate","renderInfo","MessageMeta","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","isTranslated","withFullDate","onTranslationClick","onEffectClick","onOpenThread","markActivated","handleImportedClick","dateTitle","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","viewsTitle","forwardsCount","repliesTitle","isImported","isVideoProcessingPending","MessagePhoneCall","reason","isMissed","isCancelled","handleCall","formattedDuration","formatTimeDuration","timeFormatted","getCallMessageKey","PaidMediaOverlay","isClickable","isBought","starsAmount","getPercentage","total","PollOption","answer","voteResults","totalVoters","maxVotersCount","correctResults","option","correctAnswer","showIcon","isChosen","answerPercent","votersCount","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","getPollTypeString","summary","isPublic","closed","quiz","getReadableVotersCount","Poll","onSendVote","loadMessage","openPollResults","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isMultiple","multipleChoice","recentVoterIds","isCorrect","answers","hidden","chosen","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","showSolution","solution","solutionEntities","question","CheckboxGroup","selected","loadingOptions","isRound","RadioGroup","loadingOption","Sticker","withEffect","onStopEffect","effectRef","hasEffect","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","shouldRenderEffect","openModal","isMemojiSticker","getStickerDimensions","fullMediaClassName","AnimatedSticker","openStoryViewer","imageHash","imgBlobUrl","isSinglePeer","isSingleStory","BaseStory","lastReadId","selectPeerStories","targetUser","thumbUrl","TodoList","todoList","toggleTodoCompleted","completions","othersCanComplete","completedTasks","setCompletedTasks","completedTasksSet","canToggle","completedIds","itemId","handleTaskLabelClick","handleTaskToggle","newCompletedTasks","newCompletedId","newIncompletedId","incompletedIds","isReadOnly","tasks","task","completedBy","subLabel","getPeerFullTitle","onClickLabel","WebPageUniqueGift","pattern","isHover","markHover","unmarkHover","WebPage","messageWebPage","onDocumentClick","onContainerClick","onAudioPlay","onCancelMediaTransfer","openTelegramLink","stickersRef","handleMediaClick","handleContainerClick","fullWebPage","hasCustomColor","isWithTextColor","documents","linkTimestamp","handleOpenTelegramLink","isStory","isGift","quickButtonLangKey","getWebpageButtonLangKey","isEmoji","quickButtonTitle","isArticle","isSquarePhoto","getIsSmallPhoto","isMediaInteractive","EmojiIconBackground","emojiDocumentId","isSafe","caption","noForcedUpperCase","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","activeReactions","loadingThread","viaBotId","transcriptionId","viaBusinessBotId","selectFullWebPageFromMessage","isGroup","webPageStoryData","webPageStory","botSender","senderAdminMember","adminMembersById","isThreadTop","replyFrom","getMessageReplyInfo","storyReplyPeerId","storyReplyId","getStoryReplyInfo","shouldHideReply","replyMessage","selectReplyMessage","forwardHeader","replyMessageSender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noHighlight","noFocusHighlight","isResizingContainer","quote","focusedQuote","focusedQuoteOffset","scrollTargetPosition","middleSearch","selectCurrentMiddleSearch","highlight","isHashtag","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","selectCanReplyToMessage","isInDocumentGroup","documentGroupFirstMessageId","selectMessageIdsByGroupId","reactionMessage","unreadReactions","hasTopicChip","messageTopic","selectChatTranslations","requestedTranslationLanguage","selectRequestedMessageTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","hasActiveReactions","senderBoosts","boostsApplied","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectPollFromMessage","maxTimestamp","selectMessageTimestampableDuration","selectMessageLastPlaybackTimestamp","minFutureTime","starsSuggestedPostFutureMin","isReplyMediaNsfw","selectIsMessageProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldLoopStickers","selectShouldLoopStickers","defaultReaction","selectDefaultReaction","transcriptions","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","withAnimatedEffects","isLoadingComments","loadingChatId","loadingMessageId","tags","savedReactionTags","noReactions","appearAsNotOwn","clickSuggestedMessageButton","rejectSuggestedPost","openSuggestedPostApprovalModal","disableContextMenuHint","bottomMarkerRef","setTranscriptionHidden","isPlayingSnapAnimation","setIsPlayingSnapAnimation","isPlayingDeleteAnimation","setIsPlayingDeleteAnimation","requestEffect","hideEffect","isDeclineDialogOpen","openDeclineDialog","closeDeclineDialog","declineReason","setDeclineReason","contextMenuTarget","hasMessageReply","isReplyToMessage","paidMediaPhoto","paidMediaVideo","messageReplyInfo","storyReplyInfo","withVoiceTranscription","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","canShowSenderBoosts","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canMarkAsRead","canFocus","fromMessageId","hasFactCheck","hasForwardedCustomShape","hasSubheader","childMessageIds","messageColorPeer","senderPeer","handleSenderClick","handleViaBotClick","handleReplyClick","handleDocumentClick","handleAudioPlay","handleAlbumMediaClick","handlePhotoMediaClick","handleVideoMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleMarkAsRead","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","markMessagesRead","sendPollVote","openForwardMenu","searchChatMediaMessages","deleteMessages","removeFromFocusList","replyToTopId","isQuote","channelPostId","focusMessageId","replyMessageId","ScheduledInline","openMediaViewerWithPhotoOrVideo","withDynamicLoading","currentMediaMessageId","videoContent","webpageTimestamp","albumMessageId","albumIndex","ScheduledAlbum","originalChatId","savedFromPeerId","groupedChatId","selectWithGroupedId","useInnerHandlers","handleEffectClick","isPartialAlbumDelete","isDeleting","textMessage","hasTextContent","hasMessageText","setLanguage","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","hasOutsideReactions","hasCommentCounter","hasBottomCommentButton","hasActionButton","isGeoLiveActive","peerColorClass","isInvertibleMedia","classNames","MESSAGE_CONTENT_CLASS_NAME","isMediaWithNoText","hasInlineKeyboard","isViaBot","hasFooter","emojiOnlyCount","EMOJI_SIZES","buildContentClassName","withAppendix","paidMessageStarsInMeta","metaPosition","reactionsPosition","quickReactionPosition","useFocusMessage","viaBusinessBotTitle","canShowPostAuthor","useMessageResizeObserver","bottomMarker","isElementInViewport","unreadMentionIds","extraPadding","reactionsMaxWidth","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","renderMessageText","isForAnimation","MessageText","messageOrStory","canBeEmpty","ReactionStaticEmoji","renderReactionsAndMeta","Reactions","metaChildren","noRecentReactors","renderInvertedMediaContent","textContentClass","footerClass","hasContentAfterText","isMetaInText","renderWebPage","renderInvertibleMediaContent","getMessageWebPage","shouldRenderSenderName","renderForwardTitle","handleSuggestedMessageButton","handleDeclineReasonChange","handleDeclineConfirm","rejectComment","renderSenderName","shouldSkipRenderForwardTitle","shouldSkipRenderAdminTitle","senderEmojiStatus","senderIsPremium","shouldRenderForwardAvatar","hasBotSenderUsername","senderColor","EMOJI_STATUS_LOOP_LIMIT","fakeType","FakeIcon","forwardAuthor","shouldRenderSuggestedPostButtons","isAccepted","isRejected","isSuggestedPostExpired","onCopy","onDoubleClick","onMouseMove","shouldReadMedia","EmbeddedMessage","forwardSender","Story","StoryMention","isOutside","targetHref","InputText","NBSP","containedMedia","replyMedia","isVideoThumbnail","previewPhotoSizes","replyForwardInfo","forwardSendersTitle","peerTitles","conjunction","senderChatTitle","forwardSenderTitle","areSendersSame","priceText","TON_CURRENCY_CODE","formatTonAsIcon","shouldConvertFromNanos","scheduleText","getMediaContentTypeDescription","renderMediaContentType","renderTextContent","isReplyToQuote","renderSender","isFullVideo","shouldRenderVideo","freezeWhenClosed","dependencies","LIMIT_PER_BATCH","BATCH_INTERVAL","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","rel","startPlaying","isPositionUpdateRequired","requirePositionUpdate","resetPositionUpdate","effectAnimationId","effectStickerId","getEffectHash","effectBlob","handleEnded","effectClassName"],"sourceRoot":""}
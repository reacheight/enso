{"version":3,"file":"7768.58fe06dc3d3cf6f961d0.js","mappings":"+dAOA,MAAMA,EAAoB,GAAKC,EAAAA,EACzBC,EAA0B,KAAOD,EAAAA,EAC1BE,EAAwB,KAAOF,EAAAA,EAC/BG,EAAwB,GAAKH,EAAAA,EACpCI,EAAqB,OAASJ,EAAAA,E,qCCuB7B,SAASK,EAA6BC,EAAqBC,GAEhE,OAAOA,IADUC,EAAAA,EAAAA,KAAeF,GACVG,qBAAsBC,EAAAA,EAAAA,MACxCJ,EAAOK,mBArBeC,EAqBuBC,EAAAA,EAAWC,MAAMC,OApBhDC,EAAAA,IACTC,KAAKC,IACVD,KAAKE,IAAkB,IAAdP,EAAoBT,GACf,IAAdS,GAIAA,EAAcQ,EAAAA,IACTH,KAAKC,IACVD,KAAKE,IAAkB,IAAdP,EAAoBT,GACf,GAAdS,GAIGV,GAOH,GAtBN,IAA4BU,CAuB5B,CAEO,SAASS,EACdf,EAAWgB,EAAqBC,GAEhC,MAAMC,GAAoBC,EAAAA,EAAAA,KAAqBnB,EAAQgB,EAAQI,QACzDC,EAAmBL,EAAQM,WAAa,CAAEC,QAAS,GAAIC,QAASN,GAChEO,GAAgBC,EAAAA,EAAAA,KAAa1B,EAAQgB,EAAQI,QAG7CG,GAAUI,EAAAA,EAAAA,IAAoBN,EAAiBE,QAASN,GAE9D,IAAI,gBAAEW,EAAkB,IAAOP,EAiB/B,OAfIO,EAAgBC,SAClBD,EAAkBA,EAAgBE,OAAO,EAAGC,QAAOC,aAAcD,GAASC,IAAWhC,EAAOiC,gBAG9FhB,EAAciB,QAASC,IACrB,MAAM,cAAEF,GAAkBjC,EACJ,SAAlBmC,EAASC,MACbR,EAAgBS,QAAQ,CACtBL,OAAQP,GAAea,IAAML,EAC7BE,WACAI,UAAW5B,KAAK6B,MAAMC,KAAKC,MAAQ,KACnCX,OAAO,OAIJY,EAAAA,EAAAA,IAAkB3C,EAAQgB,EAAQI,OAAQJ,EAAQsB,GAAI,CAC3DhB,UAAW,IACND,EACHE,UACAK,oBAGN,CAEO,SAASgB,EACd5C,EAAWoB,EAAgByB,GAE3B,OAAOC,EAAAA,EAAAA,IAAW9C,EAAQoB,EAAQyB,GAAQ,EAC5C,CCcA,MAAME,EAAkB,IAClBC,EAAuB,IAE7B,IAAIC,EAAsC,EAkzB1C,SAASC,EACPlD,EACAmD,EACA/B,EACAkB,EACAhB,EACA8B,EACAC,EACArC,GAEA,MAAMK,EAAmBL,GAASM,UAGlC,GAAID,IAAoBiC,EAAAA,EAAAA,GAAahC,EAAWD,GAC9C,OAAOrB,EAGT,MAAMuD,EAAoBlC,GAAkBE,QAAQiC,KAAMC,GAAMA,EAAEC,aAElE,GAAIH,GAAmBG,YAAa,CAClC,MAAQC,eAAgBC,EAAS,YAAEF,EAAW,YAAEG,GAAgBN,EAChEjC,EAAUC,SAAUuC,EAAAA,EAAAA,IAAgBxC,EAAUC,QAASmC,EAAaE,EAAWC,EACjF,CAIA,GAFA7D,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI,CAAEhB,eAE5C+B,EACH,OAAOrD,EAGT,MAAM,SAAEmC,EAAQ,MAAEJ,EAAK,SAAEgC,GAAazC,EAAUM,kBAAkB,IAAM,CAAC,EAEzE,IAD+BoC,EAAAA,EAAAA,KAA+BhE,EAAQ,oBACxCgB,GAAWmB,GAAY4B,IAAahC,EAAO,CACvE,MAAMkC,GAAaC,EAAAA,EAAAA,IAAclD,GAEjCmC,EAAQgB,oBAAoB,CAAEC,YAAaH,EAAY9B,WAAUkC,OAAOC,EAAAA,EAAAA,OAC1E,CAEA,MAAMC,EAAqCnB,EAAKoB,iBAAiBC,SAASnC,GACpEoC,GAAmCC,EAAAA,EAAAA,IAA0B3E,EAAQsB,GAG3E,GAAIoD,IAAqCH,EAAoC,CAC3EvE,EAAS4C,EAAsB5C,EAAQoB,EAAQ,CAC7CwD,sBAAuBxB,GAAMwB,sBAAwB,GAAK,EAC1DJ,gBAAiB,IAAKpB,GAAMoB,iBAAmB,GAAKlC,GAAIuC,KAAK,CAACC,EAAGC,IAAMA,EAAID,KAG7E,MAAME,GAAaC,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAErD,IAAKc,IAAS4B,EAAY,OAAOhF,GAEjCkF,EAAAA,EAAAA,IAAU,MACRC,EAAAA,EAAAA,IAAmB,CACjB/B,OACApC,QAASgE,EACTI,YAAY,KAGlB,CASA,OAPKV,GAAoCH,IACvCvE,EAAS4C,EAAsB5C,EAAQoB,EAAQ,CAC7CwD,sBAAuBxB,GAAMwB,sBAAwB,GAAK,EAC1DJ,gBAAiBpB,GAAMoB,iBAAiB1C,OAAQuD,GAAMA,IAAM/C,MAIzDtC,CACT,CAEO,SAASsF,EACdtF,EACAoB,EACAkB,EACAiD,EACAC,EACAC,GAAc,GAEd,MAAMC,EAAiBD,GACnBE,EAAAA,EAAAA,KAAuB3F,EAAQoB,EAAQkB,IACvC2C,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAEtC,IAAKoD,IAAmBH,EAAO,OAAOvF,EAGtC,GAAI0F,GAAkBF,EAAcI,WAAYC,EAAAA,EAAAA,IAAiBvD,GAAK,CACpE,MAAM,MACJwD,EAAK,MAAEC,EAAK,QAAEC,EAAO,SAAEC,IACrBC,EAAAA,EAAAA,IAAkBR,GAElBI,GAASN,EAAcI,QAAQE,OACjCN,EAAcI,QAAQE,MAAMK,UAAYL,EAAMK,QAC9CX,EAAcI,QAAQE,MAAMM,YAAcN,EAAMM,WACvCL,GAASP,EAAcI,QAAQG,MACxCP,EAAcI,QAAQG,MAAMI,UAAYJ,EAAMI,QACrCH,GAAWR,EAAcI,QAAQI,QAC1CR,EAAcI,QAAQI,QAAQK,sBAAwBL,EAAQK,oBACrDJ,GAAYT,EAAcI,QAAQK,WAC3CT,EAAcI,QAAQK,SAASK,iBAAmBL,EAASK,eAE/D,CAEA,MAAMtB,EAAaU,EAAiB,IAAKA,KAAmBF,GAAkBA,EAE9E,OAAOC,GACHc,EAAAA,EAAAA,KAAuBvG,EAAQoB,EAAQkB,EAAI0C,IAC3CrC,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI0C,EAC5C,CAEA,SAASwB,EACPxG,EAAWmD,EAAgCnC,EAAqByF,GAEhE,MAAM,OAAErF,GAAWJ,EAEb0F,GAAYC,EAAAA,EAAAA,GAAoB3F,IAEhC,WAAE4F,IAAeC,EAAAA,EAAAA,KAAsB7G,EAAQgB,IAAY,CAAC,EAElE,IAAK4F,GAAcF,GAAWI,aAAc,CAC1C,MAAMC,GAAgB9B,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQsF,EAAUI,cAC9DC,EACF/G,GAASgH,EAAAA,EAAAA,KAAuChH,EAAQ+G,EAAe3F,EAAQJ,EAAQsB,GAAImE,GAE3FtD,EAAQ8D,YAAY,CAClB7F,SACA8F,UAAWR,EAAUI,aACrBK,aAAc,CACZV,aACAW,cAAepG,EAAQsB,KAI/B,CAEA,OAAOtC,CACT,CAEA,SAASqH,EACPrH,EAAWmD,EAAgCnC,GAE3C,MAAM,GAAEsB,EAAE,OAAElB,GAAWJ,EAEjBsG,GAAgBC,EAAAA,EAAAA,KAA+BvH,EAAQgB,IAEvD,WAAE4F,IAAeC,EAAAA,EAAAA,KAAsB7G,EAAQgB,IAAY,CAAC,EAE5DoC,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BqG,EAAwBrE,GAAMsE,eAAgBC,EAAAA,EAAAA,KAAgB3H,EAAQoB,EAAQwG,EAAAA,IAEpF5H,EAASwG,EAAmBxG,EAAQmD,EAASnC,GAC7C,MAAM,SAAE6G,GAAajB,GAAc,CAAEiB,SAAUP,GAgC/C,OA9BIO,IACF7H,GAAS8H,EAAAA,EAAAA,KAAgB9H,EAAQoB,EAAQyG,EAAU,CAACvF,IAEpDyF,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAQ,EAAGI,GAAI+B,MAC3C,IAAI6D,EAAAA,EAAAA,KAAuBlI,EAAQoB,EAAQyG,EAAUxD,GAAQ,CAE3D,MAAM8D,GAAgBC,EAAAA,EAAAA,KAAoBpI,EAAQoB,EAAQyG,GACpDQ,GAAkBC,EAAAA,EAAAA,KAActI,EAAQoB,EAAQyG,EAAUvF,EAAI+B,GAC9DkE,GAAiBC,EAAAA,EAAAA,KAAkBH,EAAiBjH,EAAQyG,EAAUxD,GAEvE8D,IAAiBI,EAAgB9D,SAAS0D,KAC7CnI,EAASqI,EAEb,IAGEzB,IACF5G,GAASyI,EAAAA,EAAAA,KAAmBzI,EAAQoB,EAAQyG,EAAU,aAAc,IAC/DjB,EACHQ,cAAepG,EAAQsB,MAGpBoG,EAAAA,EAAAA,IAAe1H,KAAa2H,EAAAA,EAAAA,IAAgB3H,KAC/ChB,GAAS4I,EAAAA,EAAAA,KAAiB5I,EAAQoB,EAAQyG,EAAU,CAClDgB,eAAgBjC,EAAWiC,eAAiB,GAAK,OAMrDpB,IAIJzH,GAAS8H,EAAAA,EAAAA,KAAgB9H,EAAQoB,EAAQwG,EAAAA,GAAgB,CAACtF,IAE1DyF,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAQ,EAAGI,GAAI+B,MAC3C,IAAI6D,EAAAA,EAAAA,KAAuBlI,EAAQoB,EAAQwG,EAAAA,GAAgBvD,GAAQ,CAEjE,MAAM8D,GAAgBC,EAAAA,EAAAA,KAAoBpI,EAAQoB,EAAQwG,EAAAA,IACpDS,GAAkBC,EAAAA,EAAAA,KAActI,EAAQoB,EAAQwG,EAAAA,GAAgBtF,EAAI+B,GACpEkE,GAAiBC,EAAAA,EAAAA,KAAkBH,EAAiBjH,EAAQwG,EAAAA,GAAgBvD,GAE7E8D,IAAiBI,EAAgB9D,SAAS0D,KAC7CnI,EAASqI,EAEb,KAfOrI,CAmBX,CAEA,SAAS8I,EACP9I,EACAoB,EACAJ,EACA+H,GAAQ,GAER,MAAM,MAAEC,GAAUhJ,EACZoD,EAAO4F,EAAMC,KAAK7H,GAClB8H,GAAuBC,EAAAA,EAAAA,KAAwBnJ,EAAQoB,GAEvDgI,EAAQhG,GAAMiG,SAAUC,EAAAA,EAAAA,KAAuBtJ,EAAQgB,QAAWuI,EACpEH,IACFpJ,GAASwJ,EAAAA,EAAAA,KAAYxJ,EAAQoB,EAAQgI,EAAM9G,GAAI,CAC7C8E,cAAepG,EAAQsB,MAI3B,MAAMuF,GAAW4B,EAAAA,EAAAA,KAA0BzJ,EAAQgB,GACnDhB,GAAS4I,EAAAA,EAAAA,KAAiB5I,EAAQoB,EAAQyG,EAAU,CAClDT,cAAepG,EAAQsB,KAGzB,MAAMgF,GAAgBC,EAAAA,EAAAA,KAA+BvH,EAAQgB,GAK7D,OAJIsG,IACFtH,GAAS0J,EAAAA,EAAAA,KAAwB1J,EAAQsH,EAAetG,EAAQsB,GAAI,WAGlE4G,GAAyBH,GAEzBG,IAAyBlI,EAAQsB,IAAM4G,IAAyBlI,EAAQ2I,iBACrE3I,EAAQsB,GAAK4G,GAOXQ,EAAAA,EAAAA,KAAwB1J,EAAQoB,EAAQJ,EAAQsB,IAJ9CtC,CAOb,CAEA,SAAS4J,EAAuC5J,EAAWoB,EAAgByG,EAAqBD,EAAAA,IAC9F,MAAMqB,GAAOY,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAClC0I,GAAYnC,EAAAA,EAAAA,KAAgB3H,EAAQoB,EAAQyG,GAElD,IAAKoB,IAASa,EACZ,OAGF,IAAIzE,EAAIyE,EAAUjI,OAClB,KAAOwD,KAAK,CACV,MAAMrE,EAAUiI,EAAKa,EAAUzE,IAC/B,GAAIrE,IAAYA,EAAQyF,WACtB,OAAOzF,CAEX,CAGF,CA4CO,SAAS+I,EACd/J,EAAWoB,EAA4B4I,EAAe7G,GAItD,GAAI/B,EAAQ,CACV,MAAMgC,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAM6G,EAAoB,IAAIC,IAC9BD,EAAkBE,IAAIvC,EAAAA,IAEtBoC,EAAI9H,QAASI,IACXtC,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI,CAC7CmE,YAAY,KAGV2D,EAAAA,EAAAA,KAAYpK,EAAQoB,EAAQkB,KAC9BtC,GAASqK,EAAAA,EAAAA,KAAYrK,EAAQoB,EAAQkB,IAGvC,MAAMtB,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAClD,IAAKtB,EACH,OAGmC,kBAAjCA,EAAQ4E,QAAQ0E,QAAQlI,MAA4BpB,EAAQ4E,QAAQ0E,OAAOxE,QAC7E9F,GAASuK,EAAAA,EAAAA,KAAgBvK,EAAQoB,EAAQJ,EAAQ4E,QAAQ0E,OAAOxE,MAAMxD,IAAI,IAG5EtC,EAASwG,EAAmBxG,EAAQmD,EAASnC,GAAS,GAEtD,MAAM6G,GAAW4B,EAAAA,EAAAA,KAA0BzJ,EAAQgB,GAC/C6G,GACFoC,EAAkBE,IAAItC,KAI1B1E,EAAQqH,kBAAkB,CAAEpJ,WAE5B,MAAMqJ,EAAS,IAAIP,IAAIF,GAEvBC,EAAkB/H,QAAS2F,IACzB,MAAMjB,GAAa8D,EAAAA,EAAAA,KAAiB1K,EAAQoB,EAAQyG,GACpD,IAAKjB,GAAYQ,gBAAkBqD,EAAOE,IAAI/D,EAAWQ,eAAgB,OAEzE,MAAMwD,EAAiBhB,EAAgB5J,EAAQoB,EAAQyG,GAClD+C,GAOD/C,IAAaD,EAAAA,KACf5H,EAAS8I,EAAsB9I,EAAQoB,EAAQwJ,GAAgB,IAGjE5K,GAAS4I,EAAAA,EAAAA,KAAiB5I,EAAQoB,EAAQyG,EAAU,CAClDT,cAAewD,EAAetI,KAG5Bc,EAAKiG,UACPrJ,GAASwJ,EAAAA,EAAAA,KAAYxJ,EAAQoB,EAAQyJ,OAAOhD,GAAW,CACrDT,cAAewD,EAAetI,OAhB5Bc,EAAKiG,SAAWxB,IAAaD,EAAAA,IAC/BzE,EAAQ2H,cAAc,CAAE1J,SAAQ2J,QAASF,OAAOhD,QAoBtDmD,EAAAA,EAAAA,IAAUhL,GAEV,MAAMiL,GAAoBC,EAAAA,EAAAA,KAA2BlL,GAUrD,YARAmL,WAAW,KACTnL,GAASoL,EAAAA,EAAAA,MAET,MAAMC,EAAkBrB,EAAIlI,OAAQQ,IAAO2C,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,IAAKmE,YAClFzG,GAASsL,EAAAA,EAAAA,KAAmBtL,EAAQoB,EAAQiK,IAC5CL,EAAAA,EAAAA,IAAUhL,IACTiL,EAAoBjI,EAAuBD,EAGhD,CAIA,MAAMwI,EAA4B,GAElCvB,EAAI9H,QAASI,IACX,MAAMkJ,GAAkBC,EAAAA,EAAAA,KAAsBzL,EAAQsC,GACtD,GAAIkJ,EAAiB,CACnBD,EAAgBG,KAAKF,GAMrB,MAAMZ,EAAiBhB,EAJvB5J,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQwL,EAAiBlJ,EAAI,CACtDmE,YAAY,IAGiC+E,GAC3CZ,IACF5K,EAAS8I,EAAsB9I,EAAQwL,EAAiBZ,GAAgB,IAG1E,MAAM5J,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQwL,EAAiBlJ,GAC3D,IAAInB,EAAAA,EAAAA,KAAqBnB,EAAQwL,IAAoBxK,EAAS,CAC5D,MAAM6G,GAAW4B,EAAAA,EAAAA,KAA0BzJ,EAAQgB,GACnD,IAAI2K,EAAAA,EAAAA,IAAiBH,EAAiB3D,EAAU7H,EAAOiC,eAAgB,CACrE,MAAM2J,EAA4BhC,EAAgB5J,EAAQwL,EAAiB3D,GAC3E1E,EAAQ0I,yBAAyB,CAAEzK,OAAQ0K,OAAOjE,KAC9C+D,IACF5L,GAAS0J,EAAAA,EAAAA,KAAwB1J,EAAQwL,EAAiBI,EAA0BtJ,GAAI,SAE5F,CACF,CAEsC,kBAAlCtB,GAAS4E,QAAQ0E,QAAQlI,MAA4BpB,EAAQ4E,QAAQ0E,OAAOxE,QAC9E9F,GAASuK,EAAAA,EAAAA,KAAgBvK,EAAQwL,EAAiBxK,EAAQ4E,QAAQ0E,OAAOxE,MAAMxD,IAAI,IAGrF,MAAM2I,GAAoBC,EAAAA,EAAAA,KAA2BlL,GAErDmL,WAAW,KACTnL,GAASoL,EAAAA,EAAAA,MACTpL,GAASsL,EAAAA,EAAAA,KAAmBtL,EAAQwL,EAAiB,CAAClJ,KACtD0I,EAAAA,EAAAA,IAAUhL,IACTiL,EAAoBjI,EAAuBD,EAChD,KAGFiI,EAAAA,EAAAA,IAAUhL,IAEV+L,EAAAA,EAAAA,IAAOR,GAAiBrJ,QAASI,IAC/Ba,EAAQqH,kBAAkB,CAAEpJ,OAAQkB,KAExC,EAzuCA0J,EAAAA,EAAAA,IAAiB,YAAa,CAAChM,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAM,OACJzB,EAAM,GAAEkB,EAAE,QAAEtB,EAAO,iBAAEiL,EAAgB,WAAEC,EAAU,KAAEC,EAAI,QAAEC,GACvDvJ,EAEJ7C,EAASqH,EADTrH,EAASsF,EAAqBtF,EAAQoB,EAAQkB,GAAI,EAAMtB,GACZmC,EAASnC,GAErD,MAAMgE,GAAaC,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAC/CoE,GAAYC,EAAAA,EAAAA,GAAoB3B,GAChCqH,GAAiBC,EAAAA,EAAAA,GAAkBtH,GACnC5B,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC5BgC,GAAMiG,SACL3C,GAAW6F,gBACVjD,EAAAA,EAAAA,KAAuBtJ,EAAQgF,IAChC0B,EAAUI,cACb3D,EAAQ2H,cAAc,CAAE1J,SAAQ2J,QAASrE,EAAUI,eAGrD,MAAM0F,GAAU9D,EAAAA,EAAAA,IAAe1H,GAmE/B,GAjEA+G,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAQ,EAAGI,GAAI+B,MAEvCmI,GAAWN,IACblM,EAAS8I,EAAsB9I,EAAQoB,EAAQ4D,IAGjD,MAAM6C,GAAW4B,EAAAA,EAAAA,KAA0BzJ,EAAQgF,GAGnD,GAFAhF,GAASyM,EAAAA,EAAAA,KAA4BzM,EAAQgF,EAAY5D,EAAQyG,EAAUxD,IAEvEqI,EAAAA,EAAAA,KAAoC1M,EAAQoB,EAAQJ,EAAuBqD,GAAQ,CACrF,GAAImI,GAAWxL,EAAQqC,aAAgBrC,EAAQ4E,SAAS0E,SAAY+B,GAAgBM,UAC9E3L,EAAQ4E,SAASgH,UAAW,CAChC,MAAMC,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,GACxDwI,GAEF1J,EAAQ4J,aAAa,CACnB3L,SACAyG,SAAUgF,EAAmBhF,SAC7BX,UAAWlG,EAAQsB,GACnB0K,aAAa,EACbC,qBAAqB,EACrB5I,SAGN,CAIKmI,GACHrB,WAAW,KACTnL,GAASoL,EAAAA,EAAAA,MACLa,GACF9I,EAAQ+J,qBAAqB,CAC3BpG,aAAcxE,EACd+B,UAGJrE,EAAS8I,EAAsB9I,EAAQoB,EAAQ4D,IAC/CgG,EAAAA,EAAAA,IAAUhL,IACT+C,EAEP,MACE/C,EAAS8I,EAAsB9I,EAAQoB,EAAQ4D,KAI/CmH,IACFnM,GAASmN,EAAAA,EAAAA,KAAWnN,EAAQmM,EAAK7J,GAAI6J,IAGnCC,IACFpM,GAASoN,EAAAA,EAAAA,KAAepN,EAAQoM,EAAQ9J,GAAI8J,IAG1CpL,EAAQqM,yBAA2BrM,EAAQqM,yBAA0BC,EAAAA,EAAAA,OACvEnK,EAAQoK,sBAAsB,CAAEnM,SAAQ8F,UAAW5E,KAGrD0I,EAAAA,EAAAA,IAAUhL,GAGLwM,GAAYpJ,GAAMoK,cAAgBC,EAAAA,EAAAA,KAAmBzN,EAAQoB,IAChE+B,EAAQuK,gBAGLlB,IAAWrL,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAAS,CACpD,MAAMkG,GAAgBC,EAAAA,EAAAA,KAA+BvH,EAAQgF,GACzDsC,KAAkBmG,EAAAA,EAAAA,KAAmBzN,EAAQsH,EAAe,UAC9DnE,EAAQ0I,yBAAyB,CAAEzK,OAAQkG,GAE/C,CAEA,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,GAAEhF,EAAE,YAAEqL,GAAgB9K,EAE5B7C,EAAS8I,EAAsB9I,EAAQsC,EAAIqL,GAAa,GACxD3N,GAAS4N,EAAAA,EAAAA,KAAY5N,EAAQ,CAAC2N,KAC9B3C,EAAAA,EAAAA,IAAUhL,GACV,KACF,CAEA,IAAK,8BACH+H,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAQ,EAAGI,GAAI+B,MAC3C,MAAQjD,OAAQyM,IAAkBf,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EAE9E,GAAIwJ,IAAkBhL,EAAOP,GAAI,OACjC,MAAMtB,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQ6N,EAAehL,EAAOqE,WAEhE,IAAKlG,EAAS,OAGd,IAAI8M,EAAAA,EAAAA,IAAe9M,IAAU+M,OAASlL,EAAOmL,MAAO,OAEpD,MAAMC,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxCrE,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BmO,wBAAyB,IAAKF,EAASE,yBAA2B,GAAK,CACrE7L,GAAI3B,KAAKyN,SACTC,eAAgBxL,EAAOmL,MACvB9G,UAAWrE,EAAOqE,aAEnB7C,MAGL2G,EAAAA,EAAAA,IAAUhL,GAEV,MAGF,IAAK,sBAAuB,CAC1B,MAAM,OACJoB,EAAM,GAAEkB,EAAE,QAAEtB,EAAO,KAAEmL,EAAI,QAAEC,GACzBvJ,EAEJ7C,EAASsF,EAAqBtF,EAAQoB,EAAQkB,GAAI,EAAMtB,GAAS,GAEjE,MAAMsN,GAAeC,EAAAA,EAAAA,KAAmBvO,EAAQoB,EAAQwG,EAAAA,KAAmB,GAC3E5H,GAASyI,EAAAA,EAAAA,KAAmBzI,EAAQoB,EAAQwG,EAAAA,GAAgB,gBAAgBmE,EAAAA,EAAAA,IAAO,IAAIuC,EAAchM,KAErG,MAAMuF,GAAW4B,EAAAA,EAAAA,KAA0BzJ,EAAQgB,GACnD,GAAI6G,IAAaD,EAAAA,GAAgB,CAC/B,MAAM4G,GAAqBD,EAAAA,EAAAA,KAAmBvO,EAAQoB,EAAQyG,IAAa,GAC3E7H,GAASyI,EAAAA,EAAAA,KAAmBzI,EAAQoB,EAAQyG,EAAU,gBAAgBkE,EAAAA,EAAAA,IAAO,IAAIyC,EAAoBlM,IACvG,CAEI6J,IACFnM,GAASmN,EAAAA,EAAAA,KAAWnN,EAAQmM,EAAK7J,GAAI6J,IAGnCC,IACFpM,GAASoN,EAAAA,EAAAA,KAAepN,EAAQoM,EAAQ9J,GAAI8J,IAG9CpM,GAASyO,EAAAA,EAAAA,KAAmBzO,EAAQoB,EAAQ,CAC1CsN,sBAAsB,KAGxB1D,EAAAA,EAAAA,IAAUhL,GAEV,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,OACJoB,EAAM,GAAEkB,EAAE,QAAEtB,EAAO,KAAEmL,EAAI,QAAEC,EAAO,UAAEuC,GAClC9L,EAEE6C,GAAiBC,EAAAA,EAAAA,KAAuB3F,EAAQoB,EAAQkB,GAC9D,IAAKoD,EAWH,YAVIiJ,GACFxL,EAAQyL,UAAU,CAChB,QAAS,sBACTtM,GAAIO,EAAOP,GACXlB,OAAQyB,EAAOzB,OACfJ,QAAS6B,EAAO7B,QAChBmL,KAAMtJ,EAAOsJ,KACbC,QAASvJ,EAAOuJ,WAMtBpM,EAASsF,EAAqBtF,EAAQoB,EAAQkB,GAAI,EAAOtB,GAAS,GAClE,MAAMgJ,EAAMjC,OAAO8G,MAAKC,EAAAA,EAAAA,KAA4B9O,EAAQoB,IAAW,CAAC,GAAG2N,IAAIlE,QAAQhG,KAAK,CAACC,EAAGC,IAAMA,EAAID,GAC1G9E,GAASyI,EAAAA,EAAAA,KAAmBzI,EAAQoB,EAAQwG,EAAAA,GAAgB,eAAgBoC,GAE5E,MAAMnC,GAAW4B,EAAAA,EAAAA,KAA0BzJ,EAAQ0F,GACnD,GAAImC,IAAaD,EAAAA,GAAgB,CAC/B,MAAM4G,GAAqBD,EAAAA,EAAAA,KAAmBvO,EAAQoB,EAAQyG,IAAa,GAC3E7H,GAASyI,EAAAA,EAAAA,KAAmBzI,EAAQoB,EAAQyG,EAAU,eAAgB2G,EAAmB3J,KAAK,CAACC,EAAGC,IAAMA,EAAID,GAC9G,CACIqH,IACFnM,GAASmN,EAAAA,EAAAA,KAAWnN,EAAQmM,EAAK7J,GAAI6J,IAGnCC,IACFpM,GAASoN,EAAAA,EAAAA,KAAepN,EAAQoM,EAAQ9J,GAAI8J,KAG9CpB,EAAAA,EAAAA,IAAUhL,GAEV,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,OACJoB,EAAM,GAAEkB,EAAE,QAAEtB,EAAO,KAAEmL,EAAI,QAAEC,EAAO,UAAEuC,EAAS,iBAAE1C,GAC7CpJ,EAEE6C,GAAiBT,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAEzD,IAAKoD,EAYH,YAXIiJ,GACFxL,EAAQyL,UAAU,CAChB,QAAS,aACTtM,GAAIO,EAAOP,GACXlB,OAAQyB,EAAOzB,OACfJ,QAAS6B,EAAO7B,QAChBmL,KAAMtJ,EAAOsJ,KACbC,QAASvJ,EAAOuJ,QAChBH,sBAMN,MAAM7I,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAEhCpB,EAASsF,EAAqBtF,EAAQoB,EAAQkB,GAAI,EAAOtB,GAEzD,MAAMgE,GAAaC,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAEjDtB,EAAQM,WAAa8B,IACvBpD,EAASkD,EACPlD,EAAQmD,EAAS/B,EAAQkB,EAAItB,EAAQM,UAAW8B,EAAM4B,EAAW3B,WAAYqC,IAI7E1E,EAAQ4E,SAASmI,MAAMA,OAASrI,GAAgBE,SAASmI,MAAMA,OACjE/N,GAASgP,EAAAA,EAAAA,KAAwBhP,EAAQoB,EAAQkB,IAG/C6J,IACFnM,GAASmN,EAAAA,EAAAA,KAAWnN,EAAQmM,EAAK7J,GAAI6J,IAGnCC,IACFpM,GAASoN,EAAAA,EAAAA,KAAepN,EAAQoM,EAAQ9J,GAAI8J,KAG9CpB,EAAAA,EAAAA,IAAUhL,GAEV,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,GAAEsC,EAAE,QAAEtB,EAAO,KAAEmL,EAAI,QAAEC,GAAYvJ,EAEvC7C,GAASiP,EAAAA,EAAAA,KAAwBjP,EAAQsC,EAAItB,GAEzCmL,IACFnM,GAASmN,EAAAA,EAAAA,KAAWnN,EAAQmM,EAAK7J,GAAI6J,IAGnCC,IACFpM,GAASoN,EAAAA,EAAAA,KAAepN,EAAQoM,EAAQ9J,GAAI8J,KAG9CpB,EAAAA,EAAAA,IAAUhL,GAEV,KACF,CAEA,IAAK,2BAA4B,CAC/B,MAAM,WAAEkP,GAAerM,EAEvB7C,GAASmP,EAAAA,EAAAA,KAAyBnP,EAAQkP,IAC1ClE,EAAAA,EAAAA,IAAUhL,GAEV,KACF,CAEA,IAAK,qBAAsB,CACzB,MAAM,aAAEoP,GAAiBvM,EACnBoG,GAAOoG,EAAAA,EAAAA,IAAqBD,EAAc,MAEhDpP,GAASsP,EAAAA,EAAAA,KAAmBtP,EAAQiJ,IACpC+B,EAAAA,EAAAA,IAAUhL,GACV,KACF,CAEA,IAAK,mBACHA,GAASuP,EAAAA,EAAAA,KAAiBvP,EAAQ6C,EAAO2M,eACzCxE,EAAAA,EAAAA,IAAUhL,GACV,MAGF,IAAK,+BAAgC,CACnC,MAAM,OACJoB,EAAM,QAAEqO,EAAO,sBAAEC,GACf7M,EAEJ7C,GAASsL,EAAAA,EAAAA,KAAmBtL,EAAQoB,EAAQ,CAACqO,IAC7CzP,GAASyO,EAAAA,EAAAA,KAAmBzO,EAAQoB,EAAQ,CAC1CsN,sBAAsB,KAGxB1D,EAAAA,EAAAA,IAAUhL,GAEV+H,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAQ,EAAGI,GAAI+B,MAC3C,MAAMwI,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,GAC5D,GAAIwI,GAAoBzL,SAAWA,EAAQ,OAE3C,MAAMsB,EAAMD,KAAKC,MACbA,EAAMO,EAjU0B,MAoUpCA,EAAsCP,EAEtCS,EAAQwM,iBAAiB,CACvB3O,QAAS,CACP4O,IAAK,uBAEPC,MAAO,CACLD,IAAK,wBAEPvL,UAGFlB,EAAQ4J,aAAa,CACnB3L,SACA8F,UAAWwI,EACXI,gBAAiB,YACjBzL,aAIJ,KACF,CAEA,IAAK,6BAA8B,CACjC,MAAM,OACJjD,EAAM,QAAEqO,EAAO,QAAEzO,EAAO,KAAEmL,GACxBtJ,EAEJ7C,EAASqH,EAA2BrH,EAAQmD,EAASnC,GAErD,MAAM0E,GAAiBT,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQqO,GAEzDzP,GAASsL,EAAAA,EAAAA,KAAmBtL,EAAQoB,EAAQ,CAACqO,IAGzCzO,EAAQyE,cACVzF,GAAS+P,EAAAA,EAAAA,KAA4B/P,EAAQoB,EAAQ,CAACqO,KAGxDzP,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQJ,EAAQsB,GAAI,IAClDoD,KACA1E,EACH2I,gBAAiB8F,EACjBhJ,gBAAY8C,IAGV4C,IACFnM,GAASmN,EAAAA,EAAAA,KAAWnN,EAAQmM,EAAK7J,GAAI6J,IAGvCnM,EAAS,IACJA,EACHgQ,YAAa,CACXC,cAAcC,EAAAA,EAAAA,IAAKlQ,EAAOgQ,YAAYC,aAAc,EAAC/L,EAAAA,EAAAA,IAAclD,OAIvE,MAAMgE,GAAaC,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQJ,EAAQsB,IAC7DtC,EAAS8I,EAAsB9I,EAAQoB,EAAQ4D,GAE/C,MAAMmL,GAAStJ,EAAAA,EAAAA,KAAsB7G,EAAQgB,GAE7C+G,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAQ,EAAGI,GAAI+B,MAC3C,MAAQjD,OAAQyM,EAAehG,SAAUuI,IAAoBtD,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EACrGwJ,IAAkBzM,IAChB+O,GAAQvJ,YAAYiB,UAAYD,EAAAA,MAAoBwI,GAI1DjN,EAAQkN,oBAAoB,CAAEC,MAAOtP,EAAQsB,GAAI+B,YAE/C8L,GAAQvJ,YAAYiB,WACtB7H,GAASyI,EAAAA,EAAAA,KAAmBzI,EAAQoB,EAAQ+O,EAAOvJ,WAAWiB,SAAU,aAAc,IACjFsI,EAAOvJ,WACVQ,cAAepG,EAAQsB,GACvBiO,uBAAwBvP,EAAQsB,MAIpCtC,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClCmP,uBAAwBvP,EAAQsB,KAGlC,MAAMc,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAMhC,GAJKgC,GAAMoK,cAAgBC,EAAAA,EAAAA,KAAmBzN,EAAQoB,IACpD+B,EAAQuK,gBAGNvM,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAAS,CACxC,MAAMkG,GAAgBC,EAAAA,EAAAA,KAA+BvH,EAAQgF,GACzDsC,KAAkBmG,EAAAA,EAAAA,KAAmBzN,EAAQsH,EAAe,UAC9DnE,EAAQ0I,yBAAyB,CAAEzK,OAAQkG,GAE/C,EAEA0D,EAAAA,EAAAA,IAAUhL,GAEV,KACF,CAEA,IAAK,sCAAuC,CAC1C,MAAM,OACJoB,EAAM,QAAEqO,EAAO,QAAEzO,EAAO,KAAEmL,GACxBtJ,EACEyL,GAAeC,EAAAA,EAAAA,KAAmBvO,EAAQoB,EAAQwG,EAAAA,KAAmB,GAC3E5H,GAASyI,EAAAA,EAAAA,KAAmBzI,EAAQoB,EAAQwG,EAAAA,GAAgB,eAAgB,IAAI0G,EAActN,EAAQsB,KAEtG,MAAMuF,GAAW4B,EAAAA,EAAAA,KAA0BzJ,EAAQgB,GACnD,GAAI6G,IAAaD,EAAAA,GAAgB,CAC/B,MAAM4G,GAAqBD,EAAAA,EAAAA,KAAmBvO,EAAQoB,EAAQyG,IAAa,GAC3E7H,GAASyI,EAAAA,EAAAA,KAAmBzI,EAAQoB,EAAQyG,EAAU,eAAgB,IAAI2G,EAAoBxN,EAAQsB,IACxG,CAEA,MAAMoD,GAAiBC,EAAAA,EAAAA,KAAuB3F,EAAQoB,EAAQqO,GAE9DzP,GAAS+P,EAAAA,EAAAA,KAA4B/P,EAAQoB,EAAQ,CAACqO,IACtDzP,GAASuG,EAAAA,EAAAA,KAAuBvG,EAAQoB,EAAQJ,EAAQsB,GAAI,IACvDoD,KACA1E,EACH2I,gBAAiB8F,EACjBhJ,gBAAY8C,IAGV4C,IACFnM,GAASmN,EAAAA,EAAAA,KAAWnN,EAAQmM,EAAK7J,GAAI6J,KAGvCnB,EAAAA,EAAAA,IAAUhL,GACV,KACF,CAEA,IAAK,kBAAmB,CACtB,MAAM,OAAEoB,EAAM,SAAEoP,EAAQ,WAAEtB,GAAerM,EAEnC4N,GAAWC,EAAAA,EAAAA,KAAW7G,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAAS8N,GAC1DyB,EAA8C,CAClD,CAAC/I,EAAAA,IAAiBsH,GAEpBnH,OAAOC,OAAOyI,GAAUvO,QAASlB,IAC/B,MAAM6G,GAAW4B,EAAAA,EAAAA,KAA0BzJ,EAAQgB,GAInD,GAHAhB,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQJ,EAAQsB,GAAI,CACrDkO,aAEE3I,IAAaD,EAAAA,GAAgB,OACjC,MAAMgJ,EAAyBD,EAAgB9I,IAAa,GAC5D+I,EAAuBlF,KAAK1K,EAAQsB,IACpCqO,EAAgB9I,GAAY+I,IAG9B7I,OAAO8I,QAAQF,GAAiBzO,QAAQ,EAAE2F,EAAUmC,MAClD,MAAM8G,GAAYC,EAAAA,EAAAA,KAAgB/Q,EAAQoB,EAAQwG,EAAAA,KAAmB,GAC/DoJ,EAAeR,GACjBzE,EAAAA,EAAAA,IAAO+E,EAAUG,OAAOjH,IAAMnF,KAAK,CAACC,EAAGC,IAAMA,EAAID,GACjDgM,EAAUhP,OAAQQ,IAAQ0H,EAAIvF,SAASnC,IAC3CtC,GAASyI,EAAAA,EAAAA,KAAmBzI,EAAQoB,EAAQyJ,OAAOhD,GAAW,YAAamJ,MAE7EhG,EAAAA,EAAAA,IAAUhL,GAEV,KACF,CAEA,IAAK,mBAAoB,CACvB,MAAM,WACJ4G,GACE/D,EAEJ7C,GAASkR,EAAAA,EAAAA,KAAkBlR,EAAQ,CAAC4G,IACpC,MAAM,OAAExF,EAAM,SAAEyG,GAAajB,EAC7B,IAAKxF,IAAWyG,EAAU,OAE1B,MAAMzE,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1B+P,GAAoBzG,EAAAA,EAAAA,KAAiB1K,EAAQoB,EAAQyG,GACrDuB,GAAQgB,EAAAA,EAAAA,KAAYpK,EAAQoB,EAAQyG,GAY1C,GAXIzE,GAAMiG,UACHD,GAASA,EAAMhC,gBAAkB+J,GAAmBZ,uBAGvDvQ,GAASwJ,EAAAA,EAAAA,KAAYxJ,EAAQoB,EAAQyJ,OAAOhD,GAAW,CACrDH,YAAa,IAHfvE,EAAQ2H,cAAc,CAAE1J,SAAQ2J,QAASF,OAAOhD,OAS/CzE,GAAMiG,QAAS,CAClB,MAAMkH,EAAyBnN,GAAMmN,uBAC/Ba,EAAiCxK,EAAW2J,wBAA0BA,EACxEA,GAA0Ba,IAC5BpR,GAAS4I,EAAAA,EAAAA,KAAiB5I,EAAQoB,EAAQyG,EAAU,CAClD0I,uBAAwB5P,KAAKE,IAAIuQ,EAAgCb,KAGvE,EACAvF,EAAAA,EAAAA,IAAUhL,GAEV,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAQsC,GAAIlB,GAAWyB,EACjBwO,GAAexH,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAEhD,GAAIiQ,KAAiBC,EAAAA,EAAAA,IAASlQ,GAAS,CACrC,MAAMiD,GAAQC,EAAAA,EAAAA,MACdtE,GAASsL,EAAAA,EAAAA,KAAmBtL,EAAQoB,EAAQ2G,OAAO8G,KAAKwC,GAActC,IAAIlE,UAC1EG,EAAAA,EAAAA,IAAUhL,GACVmD,EAAQoO,aAAa,CAAEnQ,SAAQ2H,OAAO,IACtC5F,EAAQqO,qBAAqB,CAAEpQ,SAAQyG,SAAUD,EAAAA,GAAgBvD,SACnE,CAEA,KACF,CAEA,IAAK,iBAAkB,CACrB,MAAM,IAAE2F,EAAG,OAAE5I,GAAWyB,EAExBkH,EAAe/J,EAAQoB,EAAQ4I,EAAK7G,GACpC,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,IAAE6G,EAAG,OAAEyH,EAAM,OAAErQ,GAAWyB,EAE1B6O,EAAqB1H,GAAK2H,KAAMrP,IACpCqD,EAAAA,EAAAA,KAAuB3F,EAAQoB,EAAQkB,IAAKsP,0BAExCC,EAAmBJ,GAAQjO,KAAMlB,IACrC,MAAMtB,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAClD,OAAOtB,GAAS4E,QAAQG,QAGtB2L,GAAsBG,GACxB9J,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAQ,EAAGI,GAAI+B,MAC3ClB,EAAQwM,iBAAiB,CACvB3O,QAAS,CACP4O,IAAK,uBAEPkC,WAAY,CACVlC,IAAK,uBAEPtF,OAAQ,CACNA,OAAQ,eACRyH,QAAS,CACP3Q,SACA8F,UAAW2K,EACXxN,UAGJA,YAirBZ,SACEjD,EAAgB4I,EAAe7G,EAAgCnD,GAE/DgK,EAAI9H,QAASI,IACXtC,GAASuG,EAAAA,EAAAA,KAAuBvG,EAAQoB,EAAQkB,EAAI,CAClDmE,YAAY,OAIhBuE,EAAAA,EAAAA,IAAUhL,GAEV,MAAMiL,GAAoBC,EAAAA,EAAAA,KAA2BlL,GAErDmL,WAAW,KACTnL,GAASoL,EAAAA,EAAAA,MACTpL,GAAS+P,EAAAA,EAAAA,KAA4B/P,EAAQoB,EAAQ4I,GACrD,MAAMgI,GAAoBlD,EAAAA,EAAAA,KAA4B9O,EAAQoB,GAC9DpB,GAASyI,EAAAA,EAAAA,KACPzI,EAAQoB,EAAQwG,EAAAA,GAAgB,eAAgBG,OAAO8G,KAAKmD,GAAqB,CAAC,GAAGjD,IAAIlE,UAE3FG,EAAAA,EAAAA,IAAUhL,IACTiL,EAAoBjI,EAAuBD,EAChD,CAlsBMkP,CAAwB7Q,EAAQ4I,EAAK7G,EAASnD,GAC9C,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,OAAEoB,GAAWyB,EACbqP,EAAelS,EAAOyQ,SAAS0B,SAAS/Q,GAY9C,GAXIA,IAAWgR,EAAAA,MACbpS,EAAS,IACJA,EACHqS,qBAAsBrS,EAAOqS,qBAAqBtD,IAAKuD,IAAY,IAC9DA,EACHC,WAAW,OAGfvH,EAAAA,EAAAA,IAAUhL,IAGRkS,EAAc,CAChB,MAAMlI,EAAMjC,OAAO8G,KAAKqD,EAAajJ,MAAM8F,IAAIlE,QAE/Cd,EADA/J,GAASoL,EAAAA,EAAAA,MACchK,EAAQ4I,EAAK7G,EACtC,MACEA,EAAQqH,kBAAkB,CAAEpJ,WAG9BpB,GAASoL,EAAAA,EAAAA,MACTpL,GAASwS,EAAAA,EAAAA,KAAwBxS,EAAQoB,IACzC4J,EAAAA,EAAAA,IAAUhL,GAEV,KACF,CAEA,IAAK,qBAAsB,CACzB,MAAM,OAAEoB,GAAWyB,EACbZ,EAAgBjC,EAAOiC,cAC7BjC,GAASwS,EAAAA,EAAAA,KAAwBxS,EAAQoB,EAAQ,UACjD4J,EAAAA,EAAAA,IAAUhL,GAyeT,SACLA,EACAoB,EACAyG,EACA1E,GAEA,MAAM8F,GAAOY,EAAAA,EAAAA,KAAmB7J,EAAQoB,GACxC,IAAK6H,EACH,OAGF,MAAMiG,EAAanH,OAAOC,OAAOiB,GAAMnH,OAAQd,IACrByI,EAAAA,EAAAA,KAA0BzJ,EAAQgB,KAC/B6G,GAC1BkH,IAAK/N,GAAYA,EAAQsB,IAEvB4M,EAAWrN,QAIhBkI,EAAe/J,EAAQoB,EAAQ8N,EAAY/L,EAC7C,CA3fMsP,CADAzS,GAASoL,EAAAA,EAAAA,MACYnJ,EAAeb,EAAQ+B,GAE5C,KACF,CAEA,IAAK,2BAA4B,CAC/B,MAAM,OAAE/B,EAAM,OAAEY,GAAWa,GA6c1B,SACL7C,EACAoB,EACAY,EACAmB,GAEA,MAAM8F,GAAOY,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAElC8N,EAAanH,OAAOC,OAAOiB,GAAMnH,OAAQd,GACtCA,EAAQ0R,WAAa1Q,GAC3B+M,IAAK/N,GAAYA,EAAQsB,IAEvB4M,EAAWrN,QAIhBkI,EAAe/J,EAAQoB,EAAQ8N,EAAY/L,EAC7C,CA3dMwP,CADA3S,GAASoL,EAAAA,EAAAA,MACwBhK,EAAQY,EAAQmB,GAEjD,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,IAAE6G,EAAG,cAAExE,GAAkB3C,EAE/BmH,EAAI9H,QAASI,IACX,MAAMlB,GAASqK,EAAAA,EAAAA,KAAsBzL,EAAQsC,GACzClB,IACFpB,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAIkD,OAInDwF,EAAAA,EAAAA,IAAUhL,GAEV,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,UAAE4S,EAAS,IAAE5I,EAAG,cAAExE,GAAkB3C,EAE1CmH,EAAI9H,QAASI,IACXtC,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQ4S,EAAWtQ,EAAIkD,MAGpDwF,EAAAA,EAAAA,IAAUhL,GAEV,KACF,CAEA,IAAK,oBAAqB,CACxB,MAAM,OAAE6S,EAAM,WAAEC,GAAejQ,EAE/B7C,GAASmN,EAAAA,EAAAA,KAAWnN,EAAQ6S,EAAQC,IAEpC9H,EAAAA,EAAAA,IAAUhL,GACV,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,OAAE6S,EAAM,OAAE7Q,EAAM,QAAE+Q,GAAYlQ,EACpC7C,GAASgT,EAAAA,EAAAA,KAAehT,EAAQ6S,EAAQ7Q,EAAQ+Q,IAChD/H,EAAAA,EAAAA,IAAUhL,GAEV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,QAAEgB,GAAY6B,GAEhBoQ,EAAAA,EAAAA,KAAyBjT,IAC3BmD,EAAQ+P,0BAA0B,CAAElS,YAGtC,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,OAAEI,EAAM,GAAEkB,EAAE,UAAEhB,GAAcuB,EAC5B7B,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAC5Cc,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQ6C,EAAOzB,QAEvC,IAAKgC,IAASpC,EAAS,OAEvBhB,EAASkD,EAAgBlD,EAAQmD,EAAS/B,EAAQkB,EAAIhB,EAAW8B,EAAMpC,EAAQqC,WAAYrC,IAC3FgK,EAAAA,EAAAA,IAAUhL,GACV,KACF,CAEA,IAAK,6BAA8B,CACjC,MAAM,OACJoB,EAAM,GAAEkB,EAAE,cAAE6Q,EAAa,SAAEC,GACzBvQ,EACE7B,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAGlD,KAFakF,EAAAA,EAAAA,KAAWxH,EAAQ6C,EAAOzB,UAEzBJ,EAAS,OAEvB,GAAIA,EAAQ4E,QAAQyN,QAAS,CAC3B,MAAMC,EAAQH,EAAc,GAC5B,GAAI,cAAeG,GAA6B,yBAApBA,EAAMC,UAAsC,CACtE,IAAKvS,EAAQ4E,QAAQyN,QAAS,OAC9BrT,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI,CAC7CsD,QAAS,IACJ5E,EAAQ4E,QACXyN,QAAS,IACJrS,EAAQ4E,QAAQyN,QACnBF,cAAeG,OAIrBtI,EAAAA,EAAAA,IAAUhL,EACZ,KAAO,CACL,MAAM4F,EAAU0N,EAChBtT,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI,CAC7CsD,QAAS,IACJA,MAGPoF,EAAAA,EAAAA,IAAUhL,EACZ,CACF,CAEA,GAAIgB,EAAQ4E,QAAQ4N,UAAW,CAC7B,MAAMC,EAAkBL,EAAW,CAAEA,WAAUD,iBAC3C,CAAEA,cAAeA,EAA4CC,cAAU7J,GAE3EvJ,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI,CAC7CsD,QAAS,IACJ5E,EAAQ4E,QACX4N,UAAW,IACNxS,EAAQ4E,QAAQ4N,aAChBC,OAITzI,EAAAA,EAAAA,IAAUhL,EACZ,CAEA,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,gBAAE0T,EAAe,KAAE3F,EAAI,UAAE4F,GAAc9Q,EAE7C7C,EAAS,IACJA,EACH4T,eAAgB,IACX5T,EAAO4T,eACV,CAACF,GAAkB,IACb1T,EAAO4T,eAAeF,IAAoB,CAAC,EAC/CA,kBACA3F,OACA4F,gBAIN3I,EAAAA,EAAAA,IAAUhL,GACV,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,OAAEoB,EAAM,QAAEqO,EAAO,MAAEoE,GAAUhR,EAE/BgR,EAAMC,MAAM,2BACd/L,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAQ,EAAGI,GAAI+B,MAC3ClB,EAAQ4Q,oCAAoC,CAAE3S,SAAQiD,YAI1DrE,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQqO,EAAS,CAAEuE,aAAc,+BACpEhJ,EAAAA,EAAAA,IAAUhL,GACV,KACF,CAEA,IAAK,mCAAoC,CACvC,MAAM,OAAEoB,EAAM,QAAEqO,EAAO,MAAEoE,GAAUhR,EAE/BgR,EAAMC,MAAM,2BACd/L,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAQ,EAAGI,GAAI+B,MAC3ClB,EAAQ4Q,oCAAoC,CAAE3S,SAAQiD,YAI1DrE,GAASuG,EAAAA,EAAAA,KAAuBvG,EAAQoB,EAAQqO,EAAS,CAAEuE,aAAc,+BACzEhJ,EAAAA,EAAAA,IAAUhL,GACV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,OACJoB,EAAM,WAAE8N,EAAU,eAAE+E,EAAc,aAAEC,GAClCrR,EAEJ7C,GAASmU,EAAAA,EAAAA,KAA0BnU,EAAQoB,EAAQ8N,EAAY+E,EAAgBC,IAE/ElJ,EAAAA,EAAAA,IAAUhL,GACV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,OAAEoB,EAAM,WAAE8N,EAAU,eAAE+E,GAAmBpR,EAE/C7C,GAASmU,EAAAA,EAAAA,KAA0BnU,EAAQoB,EAAQ8N,EAAY+E,EAAgB,KAE/EjJ,EAAAA,EAAAA,IAAUhL,EACZ,KChvBJ,MAEMoU,EAA0B,IAAIC,IAE9BC,IAA0BC,EAAAA,EAAAA,IAAUC,GAAOA,IAAM,KAAK,GA8sB5DC,eAAeC,IAAiC,OAC9C1U,EAAM,OAAEoB,EAAM,SAAEyG,EAAQ,MAAE8M,EAAK,YAAEC,EAAW,kBAAEC,IAI9C,MAAMzR,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1B0T,GAAOC,EAAAA,EAAAA,KAAW/U,EAAQoB,GAChC,IAAKgC,GAAS0R,IAAQE,EAAAA,EAAAA,IAAcF,GAAQ,OAE5C,MAAMpO,GAAYuO,EAAAA,EAAAA,KAAuBjV,EAAQoB,EAAQyG,EAAU8M,GAAOjO,WAEpEwO,EAAiCP,EAAQ,IAC1CA,EACHjO,YACAyO,KAAMxU,KAAK6B,MAAMC,KAAKC,MAAQ,KAC9B8J,SAAS,QACPjD,EAEJvJ,GAASyI,EAAAA,EAAAA,KAAmBzI,EAAQoB,EAAQyG,EAAU,QAASqN,GAC1DL,IACH7U,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAEgU,UAAWF,GAAUC,SAG7DnK,EAAAA,EAAAA,IAAUhL,GAEN4U,UAEiBS,EAAAA,EAAAA,IAAQ,YAAa,CACxCjS,OACAuR,MAAOO,KAGKA,IACZA,EAAS1I,SAAU,GAGrBxM,GAASoL,EAAAA,EAAAA,MACTpL,GAASyI,EAAAA,EAAAA,KAAmBzI,EAAQoB,EAAQyG,EAAU,QAASqN,GAC/DlV,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAEgU,UAAWF,GAAUC,QAE3DnK,EAAAA,EAAAA,IAAUhL,GACZ,CA0pBAyU,eAAea,GAAuBtV,EAAqBuV,EAA+BlR,GACxF,MAAM,WACJmR,EAAU,WAAEtG,EAAU,SAAEuG,EAAQ,YAAEC,EAAW,UAAEC,EAAS,WAAEC,EAAU,WAAEC,EAAajO,EAAAA,KACjF1H,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOyR,iBAC5B,oBAAEC,EAAmB,SAAEC,EAAQ,YAAEC,GAAgBV,EAEjDW,GAAuBC,EAAAA,EAAAA,KAA2BnW,GAClDoW,EAAiBP,IAAejO,EAAAA,GAEhCyO,EAAWb,GAAahO,EAAAA,EAAAA,KAAWxH,EAAQwV,QAAcjM,EACzD+M,EAASb,GAAWjO,EAAAA,EAAAA,KAAWxH,EAAQyV,QAAYlM,EAEnDkH,EAAW+E,GAActG,EAC3BA,EACCrK,KAAK,CAACC,EAAGC,IAAMD,EAAIC,GACnBgK,IAAKzM,IAAO2C,EAAAA,EAAAA,KAAkBjF,EAAQwV,EAAYlT,IAAKR,OAAOyU,cAC/DhN,EAEJ,IAAK8M,IAAaC,IAAW7F,GAAaoF,IAAeO,IAAmBE,EAAOjN,QACjF,OAGF,MAAMmN,GAAS9U,EAAAA,EAAAA,KAAa1B,EAAQyV,GAC9Bd,GAAQ8B,EAAAA,EAAAA,KAAYzW,EAAQyV,EAAWI,GAAcjO,EAAAA,IACrDR,GAAgB+B,EAAAA,EAAAA,KAAwBnJ,EAAQsW,EAAOhU,IACvDoU,EAAqC,IAEpCC,EAAcC,IAAmBC,EAAAA,EAAAA,IAAUpG,EAAWqG,KAAOC,EAAAA,EAAAA,IAA6BD,IAC3FE,EAA0BL,EAAa7U,OAAQd,IAAYiW,EAAAA,EAAAA,KAAwBjX,EAAQgB,IACjG,GAAIgW,EAAwBnV,OAAQ,CAClC,MAAMqV,EAAgBlX,EAAOmX,QAAQC,mBACjCC,EAAAA,EAAAA,IAA2BL,EAAyBhX,EAAOmX,OAAOC,mBAClE,CAACJ,GACL,IAAK,MAAMM,KAASJ,EAAe,CACjC,MAAMK,EAAuC,CAC3ClB,WACAC,SACAT,aACApF,SAAU6G,EACVtB,WACAC,cACAO,SACAd,cACAC,YACAC,aACAM,uBACAhK,WAAYqK,QAAQ5B,GACpBvN,gBACA2O,uBAGF,GAAKA,EAEE,CACL,MAAMyB,QAAoCnC,EAAAA,EAAAA,IAAQ,uBAAwBkC,GAC1Eb,EAAchL,KAAK,IACd6J,EACHgC,cAAe,IAAKA,EAAeC,+BACnCA,+BAEJ,MAREnC,EAAAA,EAAAA,IAAQ,kBAAmBkC,EAS/B,CACF,CAEA,IAAK,MAAMvW,KAAW4V,EAAiB,CACrC,MAAM,KAAE7I,EAAI,SAAE0J,GAAazW,EAAQ4E,QAAQmI,MAAQ,CAAC,GAC9C,QAAE/H,GAAYhF,EAAQ4E,QAItB8R,EAA4B,CAChCtU,KAAMkT,EACN5P,WAJgBuO,EAAAA,EAAAA,KAAuBjV,EAAQsW,EAAOhU,GAAIuT,GAK1D9H,OACA0J,WACAzR,UACAgQ,WACAC,cACAO,SACApP,uBAGIuQ,GAAyB3X,EAAQ0X,EAAQhB,EACjD,CAQA,OANA1W,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B8V,gBAAiB,CAAC,EAClB8B,0BAA0B,GACzBvT,IACH2G,EAAAA,EAAAA,IAAUhL,GACH0W,CACT,CAEAjC,eAAejD,GACbxR,EACAoD,EACAyE,EACAgQ,EACAC,EACAC,GAAa,EACbC,GAAkB,EAClBC,MACI5T,GAAQC,EAAAA,EAAAA,QAEZ,MAAMlD,EAASgC,EAAKd,GAEpB,IAAI4V,EACAC,EAAYC,EAAAA,IAChB,OAAQN,GACN,KAAKO,EAAAA,GAAkBC,UACjBT,GACFK,GAAa,EACbC,GAAa,GAEbD,OAAY3O,EAEd,MACF,KAAK8O,EAAAA,GAAkBE,OACrBL,IAAcvX,KAAK6X,MAAMJ,EAAAA,IAAqB,GAAK,GACnD,MACF,KAAKC,EAAAA,GAAkBI,SACrBP,IAAcE,EAAAA,IAAqB,GAC/BP,IACFM,GAAa,GAOnB,MAAMlW,GAFNjC,GAASoL,EAAAA,EAAAA,OAEoBnJ,cACvByW,GAAgB/M,EAAAA,EAAAA,IAAiBvK,EAAQyG,EAAU5F,GACnD0W,EAAaD,EAAgB5M,OAAOjE,GAAYzG,EAEhDwX,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5CjS,MAAMoE,EAAAA,EAAAA,KAAWxH,EAAQ2Y,GACzBd,WACAK,YACAW,MAAOV,EACPtQ,WACA6Q,kBAGF,IAAKE,EACH,OAGF,MAAM,SACJnI,EAAQ,MAAEqI,GACRF,EAEJ5Y,GAASoL,EAAAA,EAAAA,MAET,MAAMsL,EAAgBtV,IAAWgR,EAAAA,IAC7BpS,EAAOqS,qBAAqBvQ,OAAO,EAAGyQ,gBAAiBA,GAAWxD,IAAI,EAAG/N,aAAcA,GACvF,GACE+X,EAAe,GAAoB9H,OAAOR,EAAUiG,GACpDzN,GAAOoG,EAAAA,EAAAA,IAAqB0J,EAAa,MACzC/O,EAAMjC,OAAO8G,KAAK5F,GAAM8F,IAAIlE,QAElC,GAAIhD,IAAaD,EAAAA,MAAmB+D,EAAAA,EAAAA,IAAiBvK,EAAQyG,EAAU7H,EAAOiC,eAAgB,CAC5F,MAAM+W,GAAuBC,EAAAA,EAAAA,KAAqBjZ,EAAQoB,EAAQyG,GAC5DmC,EAAI,IAAMgP,IAAyBhP,EAAI,IAAOgP,IAAyBnR,GAC3EmC,EAAI3H,QAAQwI,OAAOhD,GAEvB,CAEA7H,GAASkZ,EAAAA,EAAAA,KAAoBlZ,EAAQoB,EAAQ6H,GAC7CjJ,EAAS+X,GACLoB,EAAAA,EAAAA,KAAoBnZ,EAAQoB,EAAQyG,EAAUmC,IAC9ClC,EAAAA,EAAAA,KAAgB9H,EAAQoB,EAAQyG,EAAUmC,GAE9C,IAAIF,GAAYnC,EAAAA,EAAAA,KAAgB3H,EAAQoB,EAAQyG,GAChD,MAAMuR,EAAevB,GAAWwB,EAAAA,EAAAA,KAA8BrZ,EAAQoB,EAAQyG,EAAUgQ,QAAYtO,EAWpG,GATIwO,GAAcjO,GAAasP,IACxBA,EAAavX,UAAUyX,EAAAA,EAAAA,IAA4BxP,EAAWsP,KACjEpZ,GAAS8H,EAAAA,EAAAA,KAAgB9H,EAAQoB,EAAQyG,EAAUuR,GACnDtP,GAAYnC,EAAAA,EAAAA,KAAgB3H,EAAQoB,EAAQyG,GAC5C7H,GAASuZ,EAAAA,EAAAA,KAAmBvZ,EAAQoB,EAAQyG,EAAUuR,GACtDrB,GAAa,KAIZC,EAAiB,CACpB,MAAMwB,EAAazB,GAAcqB,EAAeA,EAAetP,EAC/D,GAAI0P,EAAY,CACd,MAAM,eAAEjR,GAAmBkR,GAAiBD,EAAY3B,EAAUC,GAClE9X,GAAS0Z,EAAAA,EAAAA,KAAuB1Z,EAAQoB,EAAQyG,EAAUU,EAAgBlE,EAC5E,CACF,CAEIyU,IACF9Y,GAAS4I,EAAAA,EAAAA,KAAiB5I,EAAQoD,EAAKd,GAAIuF,EAAU,CACnDgB,cAAeiQ,MAInB9N,EAAAA,EAAAA,IAAUhL,GACViY,KACF,CA8CA,SAASwB,GACPE,EACA9B,EACAC,GAEA,MAAM,OAAEjW,GAAW8X,EACbC,EAAQ/B,EArBhB,SAA0B8B,EAAqB9B,GAC7C,OAAIA,EAAW8B,EAAU,GAChB,EAGL9B,EAAW8B,EAAUA,EAAU9X,OAAS,GACnC8X,EAAU9X,OAAS,EAGrB8X,EAAUE,UAAU,CAACvX,EAAI+C,IAC9B/C,IAAOuV,GACHvV,EAAKuV,GAAY8B,EAAUtU,EAAI,GAAKwS,EAE5C,CAQ2BiC,CAAiBH,EAAW9B,IAAa,EAG5DkC,EAFcjC,IAAcO,EAAAA,GAAkBC,UAEZsB,EAASA,EAAQ,GAAM/X,EACzDsW,EAFWL,IAAcO,EAAAA,GAAkBE,OAEpB5X,KAAK6X,MAAMJ,EAAAA,IAAqB,GAAKA,EAAAA,IAC5D4B,EAAOD,EAAoB5B,EAC3B8B,EAAKF,EAAoB5B,EAAY,EACrC5P,EAAiBoR,EAAUrC,MAAM3W,KAAKE,IAAI,EAAGmZ,GAAOC,EAAK,GAE/D,IAAIC,EACAC,EACJ,OAAQrC,GACN,KAAKO,EAAAA,GAAkBC,UACrB4B,EAAeH,GAAqB,EACpCI,EAAcH,GAAQ,EACtB,MACF,KAAK3B,EAAAA,GAAkBI,SACrByB,EAAeH,EAAoBlY,EACnCsY,EAAcF,GAAMpY,EAAS,EAC7B,MACF,KAAKwW,EAAAA,GAAkBE,OACvB,QACE2B,EAAe3R,EAAe1G,OAAS,EACvCsY,EAAc5R,EAAe1G,SAAWuW,EAAAA,IAI5C,MAAO,CAAE7P,iBAAgB2R,eAAcC,cACzC,CAEO1F,eAAe2F,GACpBpa,EACAgC,GAEA,MAAMqY,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EAAM,OAEX,IAAIE,EAAAA,EAAAA,IAAcF,GAAO,CACvB,IAAIG,EAAAA,EAAAA,KAAuBxa,EAAQgC,GACjC,OAEF,OAAOqY,EAAKI,iBACd,CAEA,IAAKJ,GAAMI,kBAAmB,OAE9B,MAAMC,GAAWC,EAAAA,EAAAA,KAAmB3a,EAAQqa,EAAK/X,IACjD,OAAIoY,EACKA,EAASD,wBAGGpF,EAAAA,EAAAA,IAAQ,+BAAgCgF,EAE/D,CAEA5F,eAAekD,GACb3X,EACAuV,EACAmB,GAEA,GAAKnB,EAAWQ,oBAET,CACL,MAAM/U,QAAgBqU,EAAAA,EAAAA,IAAQ,mBAAoBE,GAC9CvU,GACF0V,EAAchL,KAAK,IACd6J,EACHqF,aAAc5Z,GAGpB,MATE6Z,GAAY7a,EAAQuV,EAUxB,CAEAd,eAAeoG,GAAmC7a,EAAW0X,GAM3D,IAAIoD,GAJApD,EAAOhR,WAAaqU,EAAAA,WAChBC,EAAAA,EAAAA,MAIR,MAAMC,EAAmBvD,EAAOwD,WAAa,CAACC,EAAkBlX,KACzDmQ,EAAwBzJ,IAAI1G,KAC/B6W,EAAoB7W,EACpBmQ,EAAwBgH,IAAInX,EAAYgX,IAG1Cjb,GAASoL,EAAAA,EAAAA,MACTpL,GAASqb,EAAAA,EAAAA,IAAyBrb,EAAQiE,EAAYkX,IACtDnQ,EAAAA,EAAAA,IAAUhL,SACRuJ,QACE8L,EAAAA,EAAAA,IAAQ,cAAeqC,EAAQuD,GACjCA,GAAoBH,IACtB9a,GAASoL,EAAAA,EAAAA,MACTpL,GAASqb,EAAAA,EAAAA,IAAyBrb,EAAQ8a,OAAmBvR,IAC7DyB,EAAAA,EAAAA,IAAUhL,GAEVoU,EAAwBkH,OAAOR,GAEnC,CAiXArG,eAAe8G,GAA2Cvb,EAAWoB,EAAgByW,GACnF,MAAMzU,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMwV,QAAevD,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEjS,OAAMyU,aAE5D,IAAKe,EAAQ,OAEb,MAAM,SAAEnI,GAAamI,EAEf3P,GAAOoG,EAAAA,EAAAA,IAAqBoB,EAAU,MACtCzG,EAAMjC,OAAO8G,KAAK5F,GAAM8F,IAAIlE,QAElC7K,GAASoL,EAAAA,EAAAA,MACTpL,GAASkZ,EAAAA,EAAAA,KAAoBlZ,EAAQoD,EAAKd,GAAI2G,GAC9CjJ,GAASwb,EAAAA,EAAAA,KAAkBxb,EAAQoB,EAAQgC,EAAM4G,IAEjDgB,EAAAA,EAAAA,IAAUhL,EACZ,EAjnEAgM,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,UACJ+F,EAAYO,EAAAA,GAAkBE,OAAM,gBACpCP,GAAkB,EAAK,kBACvByD,GAAoB,EAAK,SACzBxD,EAAQ,QACRyD,EAAO,MACPrX,GAAQC,EAAAA,EAAAA,OACNyN,GAAW,CAAC,EAEhB,IAAI,OAAE3Q,EAAM,SAAEyG,GAAakK,GAAW,CAAC,EAEvC,IAAK3Q,IAAWyG,EAAU,CACxB,MAAMgF,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,GAC5D,IAAKwI,EAEH,YADA6O,MAIFta,EAASyL,EAAmBzL,OAC5ByG,EAAWgF,EAAmBhF,QAChC,CAEA,MAAMzE,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1Bua,GAAeC,EAAAA,EAAAA,KAAuB5b,EAAQoB,GAEpD,IAAKgC,GAAQuY,EAEX,YADAD,MAIF,MAAMG,GAAcrT,EAAAA,EAAAA,KAAkBxI,EAAQoB,EAAQyG,EAAUxD,GAC1DyF,GAAYnC,EAAAA,EAAAA,KAAgB3H,EAAQoB,EAAQyG,GAElD,GAAKgU,GAAgBA,EAAYha,QAAUiW,IAAcO,EAAAA,GAAkBE,OAuBpE,CACL,MAAMV,EAAWC,IAAcO,EAAAA,GAAkBC,UAAYuD,EAAY,GAAKA,EAAYA,EAAYha,OAAS,GAG/G,IAAIgE,EAAAA,EAAAA,IAAiBgS,GAAW,OAGhC,GAAIA,IAAahQ,GAAYiQ,IAAcO,EAAAA,GAAkBC,UAAW,OAExE,MAAMP,EAAaxB,QAAQzM,IAAcA,EAAUrF,SAASoT,IACtD2B,EAAczB,GAChBsB,EAAAA,EAAAA,KAA8BrZ,EAAQoB,EAAQyG,EAAUgQ,GAAY/N,EACxE,GAAI0P,GAAY3X,OAAQ,CACtB,MAAM,eACJ0G,EAAc,aAAE2R,EAAY,YAAEC,GAC5BV,GAAiBD,EAAY3B,EAAUC,GAEvCoC,IACFla,GAAS0Z,EAAAA,EAAAA,KAAuB1Z,EAAQoB,EAAQyG,EAAUU,EAAgBlE,KAG5Ea,EAAAA,EAAAA,IAAU,MAyBhBuP,eACEzU,EACAmD,EACAgX,EAAsBpC,EAAqBC,EAC3C5U,EAAeyE,EAAoBiQ,EAA8BD,EACjEI,MACI5T,GAAQC,EAAAA,EAAAA,QAEP6V,SACG3I,GACJxR,EAAQoD,EAAMyE,EAAUgQ,EAAUC,EAAWC,EAAYC,EAAiBC,EAAU5T,GAInF2T,GACH7U,EAAQqO,qBAAqB,CAC3BpQ,OAAQgC,EAAKd,GAAIuF,WAAUiQ,YAAWE,iBAAiB,EAAMC,WAAU5T,SAG7E,CA3CayX,CACH9b,EACAmD,EACAgX,EACApC,EACAC,EACA5U,EACAyE,EACAiQ,EACAD,EACAI,EACA5T,IAGN,CAEA,GAAI2T,EACF,MAEJ,KAhEmF,CACjF,MAAMH,GAAWkE,EAAAA,EAAAA,KAAuB/b,EAAQoB,EAAQiD,KAAU2X,EAAAA,EAAAA,KAAqBhc,EAAQoB,EAAQyG,GACjGkQ,EAAaxB,QAAQsB,GAAY/N,IAAcA,EAAUrF,SAASoT,IAClE2B,GAAczB,GAChBsB,EAAAA,EAAAA,KAA8BrZ,EAAQoB,EAAQyG,EAAUgQ,GACxD/N,IAAc,IACZ,eACJvB,EAAc,aAAE2R,EAAY,YAAEC,GAC5BV,GAAiBD,EAAY3B,EAAUQ,EAAAA,GAAkBE,QAEzD2B,IACFla,GAAS0Z,EAAAA,EAAAA,KAAuB1Z,EAAQoB,EAAQyG,EAAUU,EAAgBlE,IAGvE8V,EAOHlC,OANA/S,EAAAA,EAAAA,IAAU,KACHsM,GACHxR,EAAQoD,EAAMyE,EAAUgQ,EAAUQ,EAAAA,GAAkBE,OAAQR,EAAYC,EAAiBC,EAAU5T,IAM3G,EA2CA2G,EAAAA,EAAAA,IAAUhL,EAAQ,CAAEic,sBAAuBR,OAwB7CzP,EAAAA,EAAAA,IAAiB,cAAeyI,MAAOzU,EAAQmD,EAAS4O,KACtD,MAAM,OACJ3Q,EAAM,UAAE8F,EAAS,iBAAEgV,EAAgB,aAAE/U,GACnC4K,EAEE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMpC,QAo9CRyT,eACEzU,EAAWoD,EAAe8D,EAAmBgV,GAE7C,MAAMtD,QAAevD,EAAAA,EAAAA,IAAQ,eAAgB,CAAEjS,OAAM8D,cACrD,GAAK0R,EAAL,CAIA,GAAIA,IAAWuD,EAAAA,GAkBf,OAJAnc,GAASoL,EAAAA,EAAAA,MACTpL,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoD,EAAKd,GAAI4E,EAAW0R,EAAO5X,UAC9DgK,EAAAA,EAAAA,IAAUhL,GAEH4Y,EAAO5X,QAjBZ,GAAIkb,EAAkB,CACpBlc,GAASoL,EAAAA,EAAAA,MACT,MAAMgR,GAAenX,EAAAA,EAAAA,KAAkBjF,EAAQoD,EAAKd,GAAI4Z,GACxDlc,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoD,EAAKd,GAAI4Z,EAAkB,IACzDE,EACH1V,eAAW6C,KAEbyB,EAAAA,EAAAA,IAAUhL,EACZ,CAXF,CAqBF,CA/+CwBiH,CAAYjH,EAAQoD,EAAM8D,EAAWgV,GAC3D,GAAIlb,GAAWmG,EAAc,CAC3B,MAAM,cAAEC,EAAa,WAAEX,GAAeU,EACtCnH,GAASoL,EAAAA,EAAAA,MAETpL,GAASgH,EAAAA,EAAAA,KACPhH,EACAgB,EACAI,EACAgG,EACAX,IAEFuE,EAAAA,EAAAA,IAAUhL,EACZ,KAGFgM,EAAAA,EAAAA,IAAiB,mBAAoByI,MAAOzU,EAAQmD,EAAS4O,KAC3D,MAAM,OAAE3Q,EAAM,WAAE8N,GAAe6C,EACzB3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMqN,QAAiB4E,EAAAA,EAAAA,IAAQ,oBAAqB,CAClDjS,OACA8L,eAEGuB,IAELzQ,GAASoL,EAAAA,EAAAA,MACTpL,GAASkZ,EAAAA,EAAAA,KAAoBlZ,EAAQoB,GAAQiO,EAAAA,EAAAA,IAAqBoB,EAAU,QAC5EzF,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,cAAeyI,MAAOzU,EAAQmD,EAAS4O,KACtD,MAAM,YAAEsK,EAAW,MAAEhY,GAAQC,EAAAA,EAAAA,OAAsByN,GAE7C,QAAEpF,EAAS3K,OAAQsa,IAAgBC,EAAAA,EAAAA,KAAyBvc,EAAQqE,GACpEmY,EAAejG,QAAQ5J,GAAW2P,GAExC,IAAKD,IAAgBG,EACnB,OAGF,IAAI,OAAEpb,EAAM,SAAEyG,EAAQ,KAAEzF,GAASia,GAAe,CAAC,EASjD,GARIG,IACFpb,EAASkb,EACTzU,EAAWD,EAAAA,GACXxF,EAAO,UAGT2P,GAAU7B,EAAAA,EAAAA,IAAK6B,EAAS,CAAC,UAEZ,cAAT3P,IAAyB2P,EAAQkE,YAKnC,OAJAjW,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9Byc,qBAAsB1K,GACrB1N,QACH2G,EAAAA,EAAAA,IAAUhL,GAIZ,MAAMoD,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BuT,GAAQ8B,EAAAA,EAAAA,KAAYzW,EAAQoB,EAASyG,GACrC6U,GAAexc,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOyR,iBAAiB5G,YAAYrN,OAE1E8a,EAAkBD,GAAiBF,OAAkCjT,EAAnBoL,GAAOjO,UACzDkW,EAA0BF,GAAiBF,OAClBjT,EAA3BoL,GAAOkI,kBAELxQ,EAAiBmQ,EAAe,CACpCpa,KAAM,QACNJ,OAAQsa,EACR3P,QAASA,QAC0BpD,EAE/BuT,GAAmB7H,EAAAA,EAAAA,KAAuBjV,EAAQoB,EAASyG,EAAW8U,GAEtEjW,EAAY2F,GAAkByQ,EAE9BlW,GAAa8D,EAAAA,EAAAA,KAAiB1K,EAAQoB,EAASyG,GAC/CT,EAAgBS,IAAaD,EAAAA,IAC/BuB,EAAAA,EAAAA,KAAwBnJ,EAAQoB,GAAWwF,GAAYQ,cAErD2O,QAA4BqE,GAAuBpa,EAAQoB,GAE3D2b,EAAqBH,GAAwBI,MAC7CC,EAAwBF,GAAoBG,UAAYC,EAAAA,IACxDC,EAAsBL,GAAoBM,QAAU,EAC1D,GAAID,IAAwBT,EAC1B,GAAIM,IAA0BE,EAAAA,KAG5B,GAAIC,GAFmBpd,EAAOsd,OAAOC,SAASF,QAAU,GAStD,YANAla,EAAQqa,sBAAsB,CAC5BC,MAAO,CACLC,cAAeN,GAEjB/Y,eAIC,GAAI4Y,IAA0BU,EAAAA,KAE/BP,GADsBpd,EAAO4d,KAAKL,SAASF,QAAU,GAMvD,YAJAla,EAAQqa,sBAAsB,CAC5BN,SAAUS,EAAAA,IACVtZ,UAOR,MAAMwZ,EAAmBlB,GAAkBC,GACvC3X,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAASub,EAAe7V,mBAAgByC,EACtE,IAAIuU,EACAlB,GAA0BiB,GAAkBjY,UAC9CkY,EAAiBD,EAAiBjY,SAGpC,MAAM8R,EAA4B,IAC7B3F,EACH3O,OACAsD,YACAmW,kBAAmBD,EACnBkB,iBACAC,WAAWC,EAAAA,EAAAA,KAAgBhe,EAAQoB,EAASyG,GAC5C2O,QAAQ9U,EAAAA,EAAAA,KAAa1B,EAAQoB,GAC7BgG,gBACA2O,sBACAyG,eACA7I,YAAWoC,QAA6BxM,KACrCsU,GAAoB,CAAEI,gBAAiBJ,GAAkBI,kBAGzDzB,GACHrZ,EAAQ+a,oBAAoB,CAAE7Z,UAGhC,MAAM8Z,IAAapM,EAAQqM,aAAerM,EAAQqM,YAAYvc,QAAU,KAAO6a,EACzE2B,GAAaF,GAAYpM,EAAQuM,oBACjC5H,EAAqC,GAE3C,GAAIyH,EAAU,CACZ,MAAM,YAAEC,KAAgBG,GAAe7G,EACjCnC,EAAgC,IACjCgJ,EACHrD,WAAYkD,EAAcA,EAAY,QAAK7U,EAC3C2C,WAAYqK,QAAQ5B,UAEhBgD,GAAyB3X,EAAQuV,EAAYmB,EACrD,MAAO,GAAI2H,EAAW,CACpB,MAAM,KACJtQ,EAAI,SAAE0J,EAAQ,YAAE2G,KAAgBI,GAC9B9G,EACE+G,EA+6EV,SAAgCL,GAC9B,OAAOA,EAAYM,OAAO,CAACC,EAAKzD,EAAYtB,EAAOgF,IACnC,IAAVhF,GACF+E,EAAIjT,KAAK,CAACwP,IACHyD,IAGIE,GAAkB3D,KACV2D,GAAkBD,EAAIhF,EAAQ,IAEjD+E,EAAIA,EAAI9c,OAAS,GAAG6J,KAAKwP,GAEzByD,EAAIjT,KAAK,CAACwP,IAGLyD,GACN,GACL,CAh8EmBG,CAAuBV,GAEtC,IAAIW,GAAiB,EACrB,IAAK,IAAIC,EAAa,EAAGA,EAAaP,EAAO5c,OAAQmd,IAAc,CACjE,MAAMC,EAAQR,EAAOO,GACfE,GAAqBC,EAAAA,EAAAA,IAAMF,EAAOG,EAAAA,KACxC,IAAK,IAAI/Z,EAAI,EAAGA,EAAI6Z,EAAmBrd,OAAQwD,IAAK,CAClD,MAAMga,EAAY,GAAG5c,KAAKC,QAAQsc,IAAa3Z,IAEzCia,EAAgB,IAANja,GAA0B,IAAf2Z,EACrBO,EAASla,IAAM6Z,EAAmBrd,OAAS,GAAKmd,IAAeP,EAAO5c,OAAS,EAErF,GAAIod,EAAM,GAAGO,QAAUP,EAAM,GAAGQ,iBAAkB,CAChD,MAAOC,KAAoBC,GAAmBT,EAAmB7Z,GAEjE,IAAIkQ,EAAgC,IAC/BiJ,EACHzQ,KAAMuR,IAAYP,EAAiBhR,OAAOxE,EAC1CkO,SAAU6H,IAAYP,EAAiBtH,OAAWlO,EAClD2R,WAAYwE,EACZL,UAAWM,EAAgB9d,OAAS,EAAIwd,OAAY9V,EACpD2C,WAAYqK,QAAQ5B,UAEhBgD,GAAyB3X,EAAQuV,EAAYmB,GAEnDqI,GAAiB,EAEjB,IAAK,MAAM7D,KAAcyE,EACvBpK,EAAa,IACRiJ,EACHtD,aACAmE,mBAEI1H,GAAyB3X,EAAQuV,EAAYmB,EAEvD,KAAO,CACL,MAAMkJ,EAAmBV,EAAmB7Z,GAAGiS,MAAM,GAAI,GACnDuI,EAAiBX,EAAmB7Z,GAAG6Z,EAAmB7Z,GAAGxD,OAAS,GAC5E,IAAK,MAAMqZ,KAAc0E,EAAkB,CACzC,MAAMrK,EAAa,IACdiJ,EACHtD,aACAmE,mBAEI1H,GAAyB3X,EAAQuV,EAAYmB,EACrD,CAEA,MAAMnB,EAAa,IACdiJ,EACHzQ,KAAMwR,IAAWR,EAAiBhR,OAAOxE,EACzCkO,SAAU8H,IAAWR,EAAiBtH,OAAWlO,EACjD2R,WAAY2E,EACZR,UAAWO,EAAiB/d,OAAS,EAAIwd,OAAY9V,EACrD2C,WAAYqK,QAAQ5B,UAEhBgD,GAAyB3X,EAAQuV,EAAYmB,GAEnDqI,GAAiB,CACnB,CACF,CACF,CACF,KAAO,CACL,MAAM,KACJhR,EAAI,SAAE0J,EAAQ,YAAE2G,EAAa1X,UAAWoZ,KAA2BtB,GACjE9G,EAEJ,GAAI3J,EAAM,CACR,MAAMwH,EAAa,IACdiJ,EACHzQ,OACA0J,WACA/Q,UAAWoZ,EACX5T,WAAYqK,QAAQ5B,UAEhBgD,GAAyB3X,EAAQuV,EAAYmB,EACrD,CAEA,GAAI0H,EACF,IAAK,MAAMlD,KAAckD,EAAa,CACpC,MAAM7I,EAAa,IACdiJ,EACHtD,oBAEIvD,GAAyB3X,EAAQuV,EAAYmB,EACrD,CAEJ,CACA,GAAIgG,EAAc,CAChB,MAAMqD,QAAsBzK,GAAuBtV,EAAQ0X,EAAQrT,GAC/D0b,GACFrJ,EAAchL,QAAQqU,EAE1B,CACIrJ,GAAe7U,QAk3CrB4S,eACEzU,EACAuV,GAEA,MAAMnS,EAAOmS,EAAW,IAAInS,KAC5B,IAAKA,IAASmS,EAAW1T,OAAQ,OACjC,MAAMme,QAA2B5F,GAAuBpa,EAAQoD,EAAKd,IACrE,IAAK0d,EAEH,YADAC,EAAAA,EAAAA,MAAaC,aAAa,CAAE3K,eAG9B,MAAM4K,EAAoB5K,EAAWmJ,OAAO,CAAC1U,EAAK0N,KAChD,GAAIA,EAAOkD,cAActY,GACvB0H,EAAI0B,KAAKgM,EAAOkD,aAAatY,SACxB,GAAIoV,EAAOF,6BAA6Bd,cAAe,CAC5D,MAAM0J,EAAerY,OAAOC,OAAO0P,EAAOF,4BAA4Bd,eACnE3H,IAAKsR,GAAqBA,EAAiB/d,IAC3CR,OAAOyU,SACVvM,EAAI0B,QAAQ0U,EACd,CACA,OAAOpW,GACN,IAEG+V,EAAgBxK,EAAW,IAAIiC,6BAA6Bd,cAC5D4J,EAAe/K,EAAW,IAAIqF,cAC9BmF,GAAiBhY,OAAOC,OAAO+X,GAAe,GACpD,IAAKO,EAAc,OAEnB,MAAMzX,EAAgBsX,EAAkBte,OAElC0e,EAAiBhL,EAAW,GAClC,IAAIiL,EACJ,GAA0B,IAAtBjL,EAAW1T,QAAgB0e,EAAe/D,aAAc,CAC1D,MAAM,IAAEiE,EAAG,QAAEza,EAAO,WAAEZ,GAAemb,EAEjCE,EACFD,EAAmB,CAAE5Q,IAAK,4BAA6B8Q,UAAW,CAAE5H,MAAO,GAAK/F,QAAS,CAAE4N,YAAa,IAC/F3a,EACTwa,EAAmB,CAAE5Q,IAAK,2BACjBxK,IACTob,EAAmB,CAAE5Q,IAAK,4BAE9B,CAEA,MAAMgR,EAAoCJ,GAAoB,CAC5D5Q,IAAK,4BACL8Q,UAAW,CAAE5H,MAAOjQ,GACpBkK,QAAS,CAAE4N,YAAa9X,KAG1BoX,EAAAA,EAAAA,MAAaC,aAAa,CAAE3K,gBAE5B0K,EAAAA,EAAAA,MAAatQ,iBAAiB,CAC5BF,SAASvL,EAAAA,EAAAA,IAAcoc,GACvBzQ,MAAO+Q,EACP5f,QAAS,CACP4O,IAAK,2BACL8Q,UAAW,CAAErD,QAAQwD,EAAAA,EAAAA,KAAkBC,EAAAA,EAAAA,MAAoBd,EAAqBnX,KAElFkY,KAAM,OACNC,qBAAqB,EACrB5e,KAAM,eAEV,CAj7C6B6e,CAA6BjhB,EAAQ0W,MAGlE1K,EAAAA,EAAAA,IAAiB,qBAAsByI,MAAOzU,EAAQmD,EAAS4O,KAC7D,MAAM,OAAE3Q,EAAM,QAAE8f,EAAO,MAAE7c,GAAQC,EAAAA,EAAAA,OAAsByN,EACjDoP,GAAeC,EAAAA,EAAAA,KAAmBphB,EAAQoB,GAChD,IAAK+f,GAAcE,WACjB,OAEF,MAAMC,EAA0B,GAehC,aAdMC,QAAQC,IAAIN,EAAQnS,IAAK0S,IAC7B,MAAMre,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQyhB,GAChC,IAAKre,EACH,OAEF,MAAMse,GAAeC,EAAAA,EAAAA,KAAgB5M,EAAAA,EAAAA,KAAW/U,EAAQyhB,IAIxD,OAHIC,GACFJ,EAAc5V,KAAKgW,GAEd7G,GAAY7a,EAAQ,CACzBoD,OACA2K,KAAMoT,EAAaE,gBAGhBle,EAAQwM,iBAAiB,CAC9B3O,SAAS4gB,EAAAA,EAAAA,IAAa,yCAA0CN,EAAcO,KAAK,OACnFxd,aAIJ2H,EAAAA,EAAAA,IAAiB,cAAe,CAAChM,EAAQmD,EAAS4O,KAChD,MAAM,YACJsK,EAAW,KAAEtO,EAAI,SAAE0J,EAAQ,YAAE2G,EAAW,MAAE/Z,GAAQC,EAAAA,EAAAA,OAChDyN,EAEJ,IAAKsK,EACH,OAGF,IAAIvB,EACJ,MAAMG,EAAmBmD,EAAc,CAACjD,EAAkBlX,KACnDmQ,EAAwBzJ,IAAI1G,KAC/B6W,EAAoB7W,EACpBmQ,EAAwBgH,IAAInX,EAAYgX,IAG1Cjb,GAASoL,EAAAA,EAAAA,MACTpL,GAASqb,EAAAA,EAAAA,IAAyBrb,EAAQiE,EAAYkX,IACtDnQ,EAAAA,EAAAA,IAAUhL,SACRuJ,GAEE,OAAEnI,EAAM,SAAEyG,EAAUzF,KAAM0N,GAAoBuM,EAC9CjZ,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BJ,GAAU8gB,EAAAA,EAAAA,KAAqB9hB,EAAQoB,EAAQyG,EAAUiI,GAC1D1M,GAASpC,IAIdmC,EAAQ4e,aAAa,CAAE7a,eAAWqC,EAAWlF,UAE7C,iBACQgR,EAAAA,EAAAA,IAAQ,cAAe,CAC3BjS,OACApC,UACAka,WAAYkD,EAAcA,EAAY,QAAK7U,EAC3CwE,OACA0J,WACAsG,WAAWC,EAAAA,EAAAA,KAAgBhe,EAAQoB,EAAQyG,IAC1CoT,GAECA,GAAoBH,IACtB9a,GAASoL,EAAAA,EAAAA,MACTpL,GAASqb,EAAAA,EAAAA,IAAyBrb,EAAQ8a,OAAmBvR,IAC7DyB,EAAAA,EAAAA,IAAUhL,GAEVoU,EAAwBkH,OAAOR,GAElC,EAjBD,OAoBF9O,EAAAA,EAAAA,IAAiB,WAAY,CAAChM,EAAQmD,EAAS4O,KAC7C,MAAM,OACJ3Q,EAAM,KAAE4gB,EAAI,UAAE9a,GACZ6K,EAEE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAC7C9D,GAASpC,IAIdqU,EAAAA,EAAAA,IAAQ,WAAY,CAClBjS,OACApC,UACAghB,YAIJhW,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,OAAE3Q,EAAM,UAAE8F,GAAc6K,EAExB/Q,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAClD,IAAKlG,EAAS,OAEd,MAAMia,EAAmBja,GAAWoT,EAAwB5T,KAAI0D,EAAAA,EAAAA,IAAclD,IAC1Eia,IACFgH,EAAAA,EAAAA,IAAkBhH,IAGhBvS,EAAAA,EAAAA,IAAe1H,IACjBmC,EAAQyL,UAAU,CAChB,QAAS,iBACT5E,IAAK,CAAC9C,GACN9F,cAKN4K,EAAAA,EAAAA,IAAiB,YAAa,CAAChM,EAAQmD,EAAS4O,KAC9C,MAAM,OACJ3Q,EAAM,SAAEyG,EAAQ,KAAEkG,GAChBgE,EACE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAK2M,IAAS3K,EACZ,OAGF,MAAM8e,GAAezL,EAAAA,EAAAA,KAAYzW,EAAQoB,EAAQyG,KAE7CzE,EAAK+e,aAAgBD,GAAcxb,WAAcwb,GAAcrF,oBAWnEnI,GAAU,CACR1U,SAAQoB,SAAQyG,WAAU8M,MARD,CACzB5G,OACArH,UAAWwb,GAAcxb,UACzB0b,SAAUF,GAAcE,SACxBvF,kBAAmBqF,GAAcrF,wBAQrC7Q,EAAAA,EAAAA,IAAiB,aAAc,CAAChM,EAAQmD,EAAS4O,KAC/C,MAAM,OACJ3Q,EAAM,SAAEyG,EAAWD,EAAAA,GAAc,YAAEgN,EAAW,gBAAEyN,EAAe,wBAAEC,GAC/DvQ,EACEmQ,GAAezL,EAAAA,EAAAA,KAAYzW,EAAQoB,EAAQyG,GACjD,IAAKqa,EACH,OAGF,MAAMK,EAAmBL,EAAaxb,UAQtCgO,GAAU,CACR1U,SAAQoB,SAAQyG,WAAU8M,MAPY0N,GAAmBE,GACrDD,GAA2BJ,EAAarF,kBAAqB,CAC/DnW,UAAW2b,EAAkBE,OAAmBhZ,EAChDsT,kBAAmByF,EAA0BJ,EAAarF,uBAAoBtT,QAC5EA,EAGuCqL,mBAI/C5I,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,SAAsBzB,GAAWkP,EAC3ClF,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,GAC5D,IAAKwI,EACH,OAGF,MAAM,OAAEzL,EAAM,SAAEyG,GAAagF,EAEvBqV,GAAezL,EAAAA,EAAAA,KAAYzW,EAAQoB,EAAQyG,GAE3C2a,EAAmB,CACvBpgB,KAAM,aACH8f,GAAcxb,aACd7D,GAGA2f,EAAiB1b,cAQtB4N,GAAU,CACR1U,SAAQoB,SAAQyG,WAAU8M,MAPD,IACtBuN,EACHxb,UAAW8b,EACX3F,uBAAmBtT,GAIwBqL,aAAa,EAAMC,mBAAmB,OAIrF7I,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5ClF,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,GAC5D,IAAKwI,EACH,OAEF,MAAM,OAAEzL,EAAM,SAAEyG,GAAagF,EACvBzJ,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAE1B8gB,GAAezL,EAAAA,EAAAA,KAAYzW,EAAQoB,EAAQyG,GACjD,GAAIzE,GAAM+e,cAAgBD,GAAcxb,YAAcwb,GAAcrF,kBAClE,OAEF,MAAM3H,EAAkCgN,GAAcnU,KAAmB,IACpEmU,EACHxb,eAAW6C,QAFgDA,EAK7DmL,GAAU,CACR1U,SAAQoB,SAAQyG,WAAU8M,MAAOO,EAAUN,YAAa2B,QAAQrB,QAIpElJ,EAAAA,EAAAA,IAAiB,+BAAgC,CAAChM,EAAQmD,EAAS4O,KACjE,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,SAAsBzB,GAAWkP,EAC3ClF,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,GAC5D,IAAKwI,EACH,OAGF,MAAM,OAAEzL,EAAM,SAAEyG,GAAagF,EAEvBqV,GAAezL,EAAAA,EAAAA,KAAYzW,EAAQoB,EAAQyG,GAE3C4a,EAA2B,IAC5BP,GAAcrF,qBACdha,GAQL6R,GAAU,CACR1U,SAAQoB,SAAQyG,WAAU8M,MAND,IACtBuN,EACHrF,kBAAmB4F,GAIwB7N,aAAa,EAAMC,mBAAmB,OAIrF7I,EAAAA,EAAAA,IAAiB,8BAA+B,CAAChM,EAAQmD,EAAS4O,KAChE,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5ClF,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,GAC5D,IAAKwI,EACH,OAEF,MAAM,OAAEzL,EAAM,SAAEyG,GAAagF,EAE7B6H,GAAU,CACR1U,SAAQoB,SAAQyG,WAAU8M,WAAOpL,EAAWqL,aAAa,OAI7D5I,EAAAA,EAAAA,IAAiB,gCAAiC,CAAChM,EAAQmD,EAAS4O,KAClE,MAAM,OAAE3Q,EAAM,UAAE8F,EAAS,MAAE7C,GAAQC,EAAAA,EAAAA,OAAsByN,EACnD/Q,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAClD,IAAKlG,EACH,OAGF,MAAM6L,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,GAC5D,IAAKwI,EACH,OAGF,MAAM,SAAEhF,GAAagF,EAcrB,GAZA1J,EAAQuf,WAAW,CACjBthB,SACAyG,WACA+M,aAAa,IAGfzR,EAAQ+J,qBAAqB,CAC3BpG,aAAcI,EACdyb,iBAAiBpb,EAAAA,EAAAA,KAA+BvH,EAAQgB,GACxDqD,UAGErD,EAAQ6b,kBAAmB,CAC7B,MAAM,aAAE+F,KAAiBC,GAAyB7hB,EAAQ6b,kBACpDna,GAAM4K,EAAAA,EAAAA,MACNwV,EAAY9iB,EAAO+iB,UAAUC,4BAE7BC,EAAoBL,GAAgBA,EAAelgB,EAAMogB,EAAYF,OAAerZ,EAE1FpG,EAAQ+f,6BAA6B,IAChCL,EACHD,aAAcK,EACd5e,SAEJ,CAEAlB,EAAQuR,UAAU,CAChBtT,SACAyG,WACAkG,KAAM/M,EAAQ4E,QAAQmI,UAI1B/B,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,OACJ3Q,EAAM,SAAEyG,EAAQ,SAAEua,GAChBrQ,EAEE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1B8gB,GAAezL,EAAAA,EAAAA,KAAYzW,EAAQoB,EAAQyG,KAC7CzE,GAAM+e,aAAgBD,GAAcxb,WAAcwb,GAAcrF,oBASpEnI,GAAU,CACR1U,SAAQoB,SAAQyG,WAAU8M,MANX,IACZuN,EACHE,YAI2CxN,aAAa,EAAMC,mBAAmB,OAIrF7I,EAAAA,EAAAA,IAAiB,+BAAgC,CAAChM,EAAQmD,EAAS4O,KACjE,MAAM,OAAE/P,EAAM,MAAEqC,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC1D,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BmjB,uBAAwBnhB,GACvBqC,MA8CL2H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,OAAE3Q,EAAM,SAAEyG,EAAQ,UAAEkW,GAAchM,EAExC,OAAOtJ,EAAAA,EAAAA,KAAmBzI,EAAQoB,EAAQyG,EAAU,YAAakW,MAGnE/R,EAAAA,EAAAA,IAAiB,aAAc,CAAChM,EAAQmD,EAAS4O,KAC/C,MAAM,OACJ3Q,EAAM,UAAE8F,EAAS,QAAEkc,EAAO,UAAEC,EAAS,SAAErN,GACrCjE,EAEE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC3BgC,IAIAiS,EAAAA,EAAAA,IAAQ,aAAc,CACzBjS,OAAM8D,YAAWkc,UAASC,YAAWrN,gBAIzChK,EAAAA,EAAAA,IAAiB,mBAAoByI,MAAOzU,EAAQmD,EAAS4O,KAC3D,MAAM,OAAE3Q,EAAM,SAAEyG,GAAakK,EACvB3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EACH,aAGIiS,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEjS,OAAMyE,aAE1C7H,GAASoL,EAAAA,EAAAA,MACT,MAAM0F,GAAYC,EAAAA,EAAAA,KAAgB/Q,EAAQoB,EAAQyG,GAClDiJ,GAAW5O,QAASI,IAClBtC,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI,CAAEkO,UAAU,MAE7DxQ,GAASyI,EAAAA,EAAAA,KAAmBzI,EAAQoD,EAAKd,GAAIsF,EAAAA,GAAgB,YAAa,KAC1EoD,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,iBAAkB,CAAChM,EAAQmD,EAAS4O,KACnD,MAAM,WACJ7C,EAAU,mBAAEoU,EAAoBjH,YAAakH,EAAkB,MAAElf,GAAQC,EAAAA,EAAAA,OACvEyN,EACElF,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,GACtDgY,EAAckH,GAAsB1W,EAC1C,IAAKwP,EACH,OAEF,MAAM,OAAEjb,EAAM,SAAEyG,GAAawU,EACvBjZ,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BoiB,EAAqBtU,EAAWpN,OAAQQ,IAC5C,MAAMtB,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAClD,OAAOtB,KAAY0H,EAAAA,EAAAA,IAAe1H,KAIpC,IAAKwiB,EAAmB3hB,QAAUqN,EAAWrN,OAE3C,YADAkI,EAAe/J,GAAQyjB,EAAAA,EAAAA,IAAcrgB,KAASsgB,EAAAA,EAAAA,IAAiBtgB,GAAQhC,OAASmI,EAAW2F,EAAY/L,IAIpGkS,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEjS,OAAM8L,WAAYsU,EAAoBF,uBAEvE,MAAMK,GAAYC,EAAAA,EAAAA,KAAgB5jB,EAAQoB,EAAQyG,GAC9C8b,GAAazU,EAAWzK,SAASkf,IACnCxgB,EAAQ4e,aAAa,CAAE7a,eAAWqC,EAAWlF,UAG/Cmf,EAAmBthB,QAASgF,IAC1B/D,EAAQ0gB,oBAAoB,CAAEziB,SAAQ8F,mBAI1C8E,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAE5C+R,GAAgB5jB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOyf,cACpD,OAAKA,GAAkBA,EAAcjiB,QAErCiiB,EAAc5hB,QAASoQ,IACrB,GAA0B,gBAAtBA,EAAalQ,KAAwB,CACvC,MAAMkI,EAASgI,EAAayR,cACxBzZ,IAAW0Z,MAAMC,QAAQ3Z,IAE3BnH,EAAQmH,EAAOA,QAAQA,EAAOyH,SAEhC5O,EAAQ+gB,oBAAoB,CAAEzU,QAAS6C,EAAa7C,QAASpL,SAC/D,IAEKrE,GAZ6CA,KAetDgM,EAAAA,EAAAA,IAAiB,2BAA4B,CAAChM,EAAQmD,EAAS4O,KAC7D,MAAM,OACJ3Q,EAAM,OAAEY,GACN+P,EACE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BiZ,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,IAE3BqT,EAAAA,EAAAA,IAAQ,2BAA4B,CAAEjS,OAAMiX,YAGnDrO,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,WAAE7C,EAAU,MAAE7K,GAAQC,EAAAA,EAAAA,OAAsByN,EAC5ClF,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,GAC5D,IAAKwI,EACH,OAGF,MAAM,OAAEzL,GAAWyL,EACbzJ,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,IAE3BiU,EAAAA,EAAAA,IAAQ,0BAA2B,CAAEjS,OAAM8L,eAEhD,MAAMyU,GAAYQ,EAAAA,EAAAA,KAAyBnkB,EAAQoB,GAC/CuiB,GAAazU,EAAWzK,SAASkf,IACnCxgB,EAAQ4e,aAAa,CAAE7a,eAAWqC,EAAWlF,aAIjD2H,EAAAA,EAAAA,IAAiB,gBAAiByI,MAAOzU,EAAQmD,EAAS4O,KACxD,MAAM,OAAE3Q,EAAM,mBAAEkiB,EAAkB,MAAEjf,GAAQC,EAAAA,EAAAA,OAAsByN,EAC5D3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EACH,aAGIiS,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEjS,OAAMkgB,uBAEvCtjB,GAASoL,EAAAA,EAAAA,MACT,MAAMgZ,GAAatX,EAAAA,EAAAA,KAAyB9M,EAAQqE,GAChD+f,GAAcA,EAAWhjB,SAAWA,GACtC+B,EAAQkhB,SAAS,CAAE/hB,QAAIiH,EAAWlF,UAIpC,MAAMigB,EAAUtkB,EAAOukB,YAAYtb,KACnClB,OAAOC,OAAOsc,GAASpiB,QAASsiB,IAC9B,GAAIA,EAAOC,gBAAgBhgB,SAASrD,IAAWojB,EAAOE,eAAejgB,SAASrD,GAAS,CACrF,MAAMujB,EAAqBH,EAAOC,gBAAgB3iB,OAAQQ,GAAOA,IAAOlB,GAClEwjB,EAAmBJ,EAAOE,eAAe5iB,OAAQQ,GAAOA,IAAOlB,GAE/DyjB,EAAgB,IACjBL,EACHC,gBAAiBE,EACjBD,cAAeE,IAGjBvP,EAAAA,EAAAA,IAAQ,iBAAkB,CACxB/S,GAAIkiB,EAAOliB,GACXwiB,aAAcD,GAElB,OAIJ7Y,EAAAA,EAAAA,IAAiB,qBAAsByI,MAAOzU,EAAQmD,EAAS4O,KAC7D,MAAM,OAAE3Q,EAAM,MAAEiD,GAAQC,EAAAA,EAAAA,OAAsByN,EACxC3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EACH,aAGIiS,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEjS,SAEtCpD,GAASoL,EAAAA,EAAAA,MACT,MAAMgZ,GAAatX,EAAAA,EAAAA,KAAyB9M,EAAQqE,GAChD+f,GAAcA,EAAWvc,WAAazG,GACxC+B,EAAQkhB,SAAS,CAAE/hB,QAAIiH,EAAWlF,aAItC2H,EAAAA,EAAAA,IAAiB,iBAAkByI,MAAOzU,EAAQmD,EAAS4O,KACzD,MAAM,WACJ7C,EAAU,YAAE6V,EAAc,GAAE,OAAEC,EAAS,GAAE,OAAE5jB,EAAM,MAAEiD,GAAQC,EAAAA,EAAAA,OACzDyN,EACE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAE1B6jB,QAAiB5P,EAAAA,EAAAA,IAAQ,iBAAkB,CAC/CgF,KAAMjX,EAAM8L,aAAY6V,cAAaC,WAGvC,IAAKC,EAAU,OAEf,MAAM,OAAErM,EAAM,MAAE/E,GAAUoR,EAE1B,GAAIpR,IAAUqR,EAAAA,IAMZ,OALA/hB,EAAQwM,iBAAiB,CACvB3O,SAAS4gB,EAAAA,EAAAA,IAAa,qCACtBvd,eAEFlB,EAAQgiB,iBAAiB,CAAE9gB,UAI7B,GAAKuU,EAAL,CAEA,GAAoB,aAAhBA,EAAOxW,KAQT,OAPAe,EAAQwM,iBAAiB,CACvB3O,QAAS4X,GACLgJ,EAAAA,EAAAA,IAAa,2BACb,2EACJvd,eAEFlB,EAAQgiB,iBAAiB,CAAE9gB,UAI7B,GAAoB,iBAAhBuU,EAAOxW,KAAyB,CAClCpC,GAASoL,EAAAA,EAAAA,MACT,MAAMga,GAAcllB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOghB,aAAaC,SACzDC,EAAiBH,IAAcA,EAAYvjB,OAAS,IAAIkR,SAASvP,KAAMgiB,GAAMA,EAAER,SAAWA,GAC1FS,EAAa,CACjB5V,MAAO+I,EAAO/I,MACdkD,QAAS6F,EAAO7F,QAChB2S,SAAUH,GAAgBxX,MAE5B/N,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BqlB,YAAa,CACXjkB,SACA8N,aACA6V,cACAY,QAAS,UACTL,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzDphB,IACH2G,EAAAA,EAAAA,IAAUhL,EACZ,CAEA,GAAoB,YAAhB4Y,EAAOxW,KAAoB,CAC7BpC,GAASoL,EAAAA,EAAAA,MACT,MAAMga,GAAcllB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOghB,aAAaC,SACzDC,EAAiBH,IAAcA,EAAYvjB,OAAS,IAAIkR,SAASvP,KAAMgiB,GAAMA,EAAER,SAAWA,GAC1FS,EAAa,CACjBG,WAAYhN,EAAOgN,WACnBZ,OAAQpM,EAAOoM,OACfnV,MAAO0V,GAAgBxX,MAEzB/N,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BqlB,YAAa,CACXjkB,SACA8N,aACA6V,cACAY,QAAS,UACTL,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzDphB,IACH2G,EAAAA,EAAAA,IAAUhL,EACZ,CArDmB,KAwDrBgM,EAAAA,EAAAA,IAAiB,oBAAqByI,MAAOzU,EAAQmD,EAAS4O,KAC5D,MAAM,OAAEzH,EAAM,OAAElJ,EAAM,SAAEyG,GAAakK,EACrC,GAA+B,yBAA3B/R,EAAO6lB,gBAA4C,OACvD,IAAI1kB,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAAS,OAE1C,MAAMgC,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,GAAQA,EAAK+e,YAAa,OAC/B,MAAMrN,GAAOC,EAAAA,EAAAA,KAAW/U,EAAQoB,GAC5B0T,KAASgR,EAAAA,EAAAA,IAAUhR,KAASE,EAAAA,EAAAA,IAAcF,WAExCO,EAAAA,EAAAA,IAAQ,oBAAqB,CACjCgF,KAAMjX,EAAMyE,WAAUyC,cAI1B0B,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,cAAEgU,EAAa,OAAE3kB,EAAM,WAAE8N,GAAe6C,EACxCsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQ+lB,GAC1B3iB,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC3BiZ,GAASjX,IAITiS,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEgF,OAAMjX,OAAM8L,kBAGlDlD,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,IAAIiU,EAAAA,EAAAA,KAA0BhmB,GAAS,OACvC,MAAM,MAAEsQ,EAAK,MAAEjM,GAAQC,EAAAA,EAAAA,OAAsByN,EAEvClF,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,GAC5D,IAAKwI,EACH,OAGF,MAAM,OAAEzL,EAAM,SAAEyG,GAAagF,EACvBzJ,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,IAAQuI,EAAAA,EAAAA,IAAiBvK,EAAQyG,EAAU7H,EAAOiC,eACrD,OAGFqS,GAAwB,MACjBe,EAAAA,EAAAA,IAAQ,sBAAuB,CAClCjS,OAAMyE,WAAUyI,YAIhBlP,IAAWgR,EAAAA,MACbpS,EAAS,IACJA,EACHqS,qBAAsBrS,EAAOqS,qBAAqBtD,IAAKuD,GAC9CA,EAAavO,UAAYuO,EAAahQ,IAAMgO,EAAQ,IAAKgC,EAAcvO,UAAU,GAAUuO,KAKxG,MAAMuJ,GAAcrT,EAAAA,EAAAA,KAAkBxI,EAAQoB,EAAQyG,EAAUxD,GAC1D4hB,GAAQ7d,EAAAA,EAAAA,KAAoBpI,EAAQoB,EAAQyG,GAElD,GAAIA,IAAaD,EAAAA,KAAmBxE,EAAKiG,QAIvC,OAHST,EAAAA,EAAAA,KAAiB5I,EAAQoB,EAAQyG,EAAU,CAClD0I,uBAAwBD,IAK5B,IAAKuL,IAAgBoK,IAAU7iB,EAAKsE,YAClC,OAAO1H,EAGT,MAAMkmB,EAqoDR,SAAwBlc,EAAegQ,EAAcC,GAEnD,GAAmB,IAAfjQ,EAAInI,QAAgBmY,EAAOhQ,EAAI,IAAMiQ,EAAKjQ,EAAIA,EAAInI,OAAS,GAAI,OAEnE,IAAIiX,EAAQ,EAEZ,IAAK,IAAIzT,EAAI,EAAG8gB,EAAInc,EAAInI,OAAQwD,EAAI8gB,IAC9Bnc,EAAI3E,IAAM2U,GAAQhQ,EAAI3E,IAAM4U,GAC9BnB,MAGE9O,EAAI3E,IAAM4U,IALuB5U,KAUvC,OAAOyT,CACT,CAtpDoBsN,CAAevK,EAAaoK,EAAO3V,GACrD,IAAK4V,EACH,OAAOlmB,EAGT,MAAMoJ,GAAQgB,EAAAA,EAAAA,KAAYpK,EAAQoB,EAAQyG,GAC1C,GAAIzE,EAAKiG,SAAWD,EAAO,CACzBpJ,GAAS4I,EAAAA,EAAAA,KAAiB5I,EAAQoB,EAAQyG,EAAU,CAClD0I,uBAAwBD,IAE1B,MAAM+V,EAAsB1lB,KAAKE,IAAI,EAAGuI,EAAM1B,YAAcwe,GAM5D,OAL4B,IAAxBG,IACFrmB,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClCsG,YAAa/G,KAAKE,IAAI,EAAGuC,EAAKsE,YAAc,OAGzC8B,EAAAA,EAAAA,KAAYxJ,EAAQoB,EAAQyJ,OAAOhD,GAAW,CACnDH,YAAa2e,GAEjB,CAEA,OAAOvjB,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAChCmP,uBAAwBD,EACxB5I,YAAa/G,KAAKE,IAAI,EAAGuC,EAAKsE,YAAcwe,QAIhDla,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,WAAE7C,EAAU,MAAE7K,GAAQC,EAAAA,EAAAA,MAAiB,2BAAEgiB,GAA+BvU,EAExE3O,GAAOmjB,EAAAA,EAAAA,KAAkBvmB,EAAQqE,GAClCjB,IAIAiS,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEjS,OAAM8L,eACtCsX,KAAK,KACAF,GACFnjB,EAAQsjB,qBAAqB,CAAErlB,OAAQgC,EAAKd,UAKpD0J,EAAAA,EAAAA,IAAiB,qBAAsByI,MAAOzU,EAAQmD,EAAS4O,KAC7D,MAAM,KAAEhE,EAAI,MAAE1J,GAAQC,EAAAA,EAAAA,OAAsByN,EAEtC2U,QAAuBrR,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEtH,SAE9D/N,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B2mB,iBAAkBD,GAAgBpkB,IACjC+B,IACH2G,EAAAA,EAAAA,IAAUhL,GAEL0mB,GAELvjB,EAAQyL,UAAU,CAChB,QAAS,gBACTxC,QAASsa,OAIb1a,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B2mB,sBAAkBpd,GACjBlF,MAGL2H,EAAAA,EAAAA,IAAiB,eAAgB,CAAChM,EAAQmD,EAAS4O,KACjD,MAAM,OAAE3Q,EAAM,UAAE8F,EAAS,QAAE6L,GAAYhB,EACjC3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAE5BgC,IACGiS,EAAAA,EAAAA,IAAQ,eAAgB,CAAEjS,OAAM8D,YAAW6L,eAIpD/G,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,OAAE3Q,EAAM,UAAE8F,EAAS,aAAE0f,EAAY,eAAEC,GAAmB9U,EACtD3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAC5CjF,EAAgBjC,EAAOiC,cAEvB6kB,EAAc9lB,GAAS4E,QAAQoc,KACrC,IAAK8E,IAAgB7kB,IAAkBmB,EACrC,OAGF,MAAM2jB,EAAqBD,EAAYE,aAAe,GAChDC,EAAuBF,EAAmBhY,IAAKmY,GAAMA,EAAEC,QAEvDC,EAAiB,IAAIL,GACrBrkB,GAAM4K,EAAAA,EAAAA,MAEZsZ,EAAa1kB,QAASilB,IACfF,EAAqBxiB,SAAS0iB,IACjCC,EAAe1b,KAAK,CAClByb,SACAE,YAAaplB,EACbqlB,YAAa5kB,MAKnB,MAAM6kB,EAAmBH,EAAetlB,OAAQolB,IAAOL,EAAepiB,SAASyiB,EAAEC,SAE3EK,EAAa,IACdxmB,EAAQ4E,QACXoc,KAAM,IACD8E,EACHE,YAAaO,IAIX/hB,EAAqC,IACtCxE,EACH4E,QAAS4hB,GAGXxnB,EAASsF,EAAqBtF,EAAQoB,EAAQJ,EAAQsB,IAAI,EAAOkD,IACjEwF,EAAAA,EAAAA,IAAUhL,IAEVqV,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEjS,OAAM8D,UAAWlG,EAAQsB,GAAIskB,eAAcC,sBAE9E7a,EAAAA,EAAAA,IAAiB,iBAAkB,CAAChM,EAAQmD,EAAS4O,KACnD,MAAM,OACJ3Q,EAAM,MAAEqmB,EAAK,UAAEvgB,GACb6K,EAEE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAC7C9D,GAASpC,IAIdqU,EAAAA,EAAAA,IAAQ,iBAAkB,CACxBjS,OACApC,UACAymB,aAIJzb,EAAAA,EAAAA,IAAiB,iBAAkB,CAAChM,EAAQmD,EAAS4O,KACnD,MAAM,OAAE3Q,EAAM,UAAE8F,GAAc6K,EACxB3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAE5BgC,IACGiS,EAAAA,EAAAA,IAAQ,eAAgB,CAAEjS,OAAM8D,YAAW6L,QAAS,QAI7D/G,EAAAA,EAAAA,IAAiB,YAAa,CAAChM,EAAQmD,EAAS4O,KAC9C,MAAM,OAAE3Q,EAAM,UAAE8F,GAAc6K,EACxB3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAC5CiF,EAAOnL,IAAW0mB,EAAAA,EAAAA,KAAsB1nB,EAAQgB,GAClDoC,GAAQ+I,IACLkJ,EAAAA,EAAAA,IAAQ,YAAa,CAAEjS,OAAM8D,YAAWiF,YAIjDH,EAAAA,EAAAA,IAAiB,wBAAyByI,MAAOzU,EAAQmD,EAAS4O,KAChE,MAAM,KACJ3O,EAAI,UAAE8D,EAAS,OAAE8d,EAAM,OAAE2C,EAAM,MAAE9O,EAAK,kBAAE+O,EAAiB,MAAEvjB,GAAQC,EAAAA,EAAAA,OACjEyN,EAEE6G,QAAevD,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDjS,OAAM8D,YAAW8d,SAAQ2C,SAAQ9O,UAGnC,IAAKD,EACH,OAGF5Y,GAASoL,EAAAA,EAAAA,MAET,MAAM6C,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,IAClC,YAAEwjB,GAAgB5Z,GAClB,OAAE6Z,GAAW7Z,EAAS4Z,YAE5B7nB,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B6nB,YAAa,IACRA,EACHC,OAAQ,IACHA,EACH,CAAC9C,IAASjZ,EAAAA,EAAAA,IAAO,KACV6b,GAAqBE,IAAS9C,GAAU8C,EAAO9C,GAAU,MAC3DpM,EAAOmP,MAAMhZ,IAAKiZ,GAASA,EAAKhmB,WAGvCimB,QAAS,IACHJ,EAAYI,QAAUJ,EAAYI,QAAU,CAAC,EACjD,CAACjD,GAASpM,EAAOsP,YAAc,MAGlC7jB,IACH2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,OAAE3Q,EAAM,IAAE4I,GAAQ+H,EAClB3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC5BgC,IACGiS,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEjS,OAAM4G,WAI/CgC,EAAAA,EAAAA,IAAiB,uBAAwByI,MAAOzU,EAAQmD,EAAS4O,KAC/D,IAAIiU,EAAAA,EAAAA,KAA0BhmB,GAAS,OAEvC,MAAM,OAAEoB,GAAW2Q,EACb3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMwV,QAAevD,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEjS,SACxD,IAAKwV,EACH,OAGF,MAAM,SAAEnI,GAAamI,EAEf3P,GAAOoG,EAAAA,EAAAA,IAAqBoB,EAAU,MACtCzG,EAAMjC,OAAO8G,KAAK5F,GAAM8F,IAAIlE,QAAQhG,KAAK,CAACC,EAAGC,IAAMA,EAAID,GAS7D,GAPA9E,GAASoL,EAAAA,EAAAA,MACTpL,GAASmoB,EAAAA,EAAAA,KAAwBnoB,EAAQoD,EAAKd,GAAI2G,GAClDjJ,GAASyI,EAAAA,EAAAA,KAAmBzI,EAAQoD,EAAKd,GAAIsF,EAAAA,GAAgB,eAAgBoC,GACxEA,EAAInI,SACP7B,GAASyO,EAAAA,EAAAA,KAAmBzO,EAAQoD,EAAKd,GAAI,CAAEoM,sBAAsB,KAGnEtL,GAAMiG,QAAS,CACjB,MAAM+e,EAAiD,CAAC,EACxD3X,EAASvO,QAASlB,IAChB,MAAM6G,GAAW4B,EAAAA,EAAAA,KAA0BzJ,EAAQgB,GAC7CqnB,EAAoBD,EAAmBvgB,IAAa,GAC1DwgB,EAAkB3c,KAAK1K,EAAQsB,IAC/B8lB,EAAmBvgB,GAAYwgB,IAGjCtgB,OAAO8I,QAAQuX,GAAoBlmB,QAAQ,EAAE2F,EAAUyG,MACrDtO,GAASyI,EAAAA,EAAAA,KAAmBzI,EAAQoD,EAAKd,GAAIuI,OAAOhD,GAAW,eAAgByG,IAEnF,EACAtD,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,OACJ3Q,EAAM,GAAEkB,GACNyP,EAEE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAE3BgC,IAIAiS,EAAAA,EAAAA,IAAQ,wBAAyB,CACpCjS,OACA4G,IAAK,CAAC1H,QAIV0J,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,OACJ3Q,EAAM,UAAE8F,EAAS,YAAE+O,GACjBlE,EAEE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BJ,EAAUoC,IAAQuC,EAAAA,EAAAA,KAAuB3F,EAAQoD,EAAKd,GAAI4E,GAC3D9D,GAASpC,IAITqU,EAAAA,EAAAA,IAAQ,oBAAqB,CAChCjS,OACApC,UACAiV,mBAIJjK,EAAAA,EAAAA,IAAiB,kBAAmByI,MAAOzU,EAAQmD,EAAS4O,KAC1D,MAAM,UAAE7K,EAAS,OAAE9F,GAAW2Q,EAExB3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAEhC,IAAKgC,EAAM,OAEXpD,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ8F,EAAW,CACpDwM,gBAAiB,MAGnB1I,EAAAA,EAAAA,IAAUhL,GAEV,MAAM4Y,QAAevD,EAAAA,EAAAA,IAAQ,kBAAmB,CAAEjS,OAAM8D,cAExDlH,GAASoL,EAAAA,EAAAA,MACTpL,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ8F,EAAW,CACpDwM,gBAAiBkF,EACjB0P,sBAAuB1P,KAGzB5N,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,mBAAoByI,MAAOzU,EAAQmD,EAAS4O,KAC3D,MAAM,IAAE/H,EAAG,YAAEue,GAAgBxW,EACvByW,EAAoBD,EAAcve,GACpC+B,EAAAA,EAAAA,IAAO/B,EAAIlI,OAAQ2mB,KAAgBC,EAAAA,EAAAA,KAAkB1oB,EAAQyoB,KAC3DE,QAAoBtT,EAAAA,EAAAA,IAAQ,mBAAoB,CACpDoT,WAAYD,IAETG,IAEL3oB,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACH4oB,aAAc,IACT5oB,EAAO4oB,aACV3f,KAAM,IACDjJ,EAAO4oB,aAAa3f,SACpBoG,EAAAA,EAAAA,IAAqBsZ,EAAa,UAI3C3d,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,SACJiE,EAAQ,YAAEC,EAAW,MAAE5R,GAAQC,EAAAA,EAAAA,OAC7ByN,GACE,SAAE0D,IAAavV,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOyR,gBAC7CQ,EAASb,GAAWjO,EAAAA,EAAAA,KAAWxH,EAAQyV,QAAYlM,EACpD+M,GACLhB,GAAuBtV,EAAQ,CAAEoD,KAAMkT,EAAQN,WAAUC,eAAe5R,MAqa1E2H,EAAAA,EAAAA,IAAiB,eAAgByI,MAAOzU,EAAQmD,EAAS4O,KACvD,MAAM,WAAEwD,GAAexD,QACjBwP,QAAQC,IAAIjM,EAAWxG,IAAI0F,UAC3BiD,EAAOF,6BAA+BE,EAAOH,qBACzCyD,EAAAA,EAAAA,YACA3F,EAAAA,EAAAA,IAAQ,qBAAsBqC,EAAOH,sBAErCsD,GAAY7a,EAAQ0X,MAG1BnC,EAAW1T,OAAS,GAAK0T,EAAW,GAAGQ,qBAAqB5S,EAAQ0lB,oBAG1E7c,EAAAA,EAAAA,IAAiB,qBAAsByI,MAAOzU,EAAQmD,EAAS4O,KAC7D,MAAM,OAAE3Q,EAAM,SAAEyG,GAAakK,EACvB3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,IAAQuI,EAAAA,EAAAA,IAAiBvK,EAAQyG,EAAU7H,EAAOiC,eACrD,OAGF,MAAM2W,QAAevD,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEjS,OAAMyE,aAC5D,IAAK+Q,EACH,OAGF,MAAM,SAAEnI,GAAamI,EAEf3P,GAAOoG,EAAAA,EAAAA,IAAqBoB,EAAU,MACtCzG,EAAMjC,OAAO8G,KAAK5F,GAAM8F,IAAIlE,QAAQhG,KAAK,CAACC,EAAGC,IAAMA,EAAID,GAE7D9E,GAASoL,EAAAA,EAAAA,MACTpL,GAASkZ,EAAAA,EAAAA,KAAoBlZ,EAAQoD,EAAKd,GAAI2G,GAC9CjJ,GAAS8oB,EAAAA,EAAAA,KAAqB9oB,EAAQoD,EAAKd,GAAIuF,EAAUmC,IACzDgB,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,aAAcyI,MAAOzU,EAAQmD,EAAS4O,KACrD,MAAM,OAAE3Q,EAAM,UAAE8F,GAAc6K,EACxB3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMwV,QAAevD,EAAAA,EAAAA,IAAQ,cAAe,CAAEjS,OAAM8D,cAC/C0R,IAIL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ8F,EAAW,CACpD6hB,YAAanQ,KAEf5N,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,OAAE3Q,EAAM,SAAE4nB,GAAajX,EACvB3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1B6nB,GAAazhB,EAAAA,EAAAA,KAAWxH,EAAQgpB,KAAajU,EAAAA,EAAAA,KAAW/U,EAAQgpB,GACtE,GAAK5lB,GAAS6lB,EAMd,OAFK5T,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEmB,OAAQyS,EAAY7lB,UAEjD8lB,EAAAA,EAAAA,KAAmBlpB,EAAQoB,EAAQ,CAAE4nB,gBAG9Chd,EAAAA,EAAAA,IAAiB,aAAcyI,MAAOzU,EAAQmD,EAAS4O,KACrD,MAAM,OAAE3Q,GAAW2Q,EACb3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMwV,QAAevD,EAAAA,EAAAA,IAAQ,cAAe,CAAEjS,SAC9C,IAAKwV,EAOH,OANA5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClC+nB,cAAe,UAEjBne,EAAAA,EAAAA,IAAUhL,GAKZA,GAASoL,EAAAA,EAAAA,MACTpL,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAE+nB,cAAevQ,KACrD5N,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,0BAA2ByI,MAAOzU,EAAQmD,EAAS4O,KAClE,MAAM,OAAE3Q,GAAW2Q,EACb3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMwV,QAAevD,EAAAA,EAAAA,IAAQ,cAAe,CAAEjS,OAAMgmB,oBAAoB,IACxE,IAAKxQ,EAOH,OANA5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClCioB,2BAA4B,UAE9Bre,EAAAA,EAAAA,IAAUhL,GAKZA,GAASoL,EAAAA,EAAAA,MACTpL,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAEioB,2BAA4BzQ,KAClE5N,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,wBAAyByI,MAAOzU,EAAQmD,EAAS4O,KAChE,IAAIiU,EAAAA,EAAAA,KAA0BhmB,GAAS,OAEvC,MAAM,OAAEgC,GAAW+P,EACbsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EACH,OAGF,IAAIiP,EAAAA,EAAAA,IAAcjP,KAASkP,EAAAA,EAAAA,KAA0BvpB,EAAQqa,EAAK/X,IAChE,OAGF,MAAMsW,QAAevD,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEgF,SACpDzB,IAIL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASwpB,EAAAA,EAAAA,KAAuBxpB,EAAQgC,EAAQ4W,EAAOnI,SAAS,KAChEzF,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,gBAAiB,CAAChM,EAAQmD,EAAS4O,KAClD,MAAM,SAAE0X,GAAa1X,GAEhBsD,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEjH,OAAQqb,OAGjDzd,EAAAA,EAAAA,IAAiB,iBAAkB,CAAChM,EAAQmD,EAAS4O,KACnD,MAAM,SAAE0X,EAAQ,QAAEC,EAAO,aAAEC,GAAiB5X,GAEvCsD,EAAAA,EAAAA,IAAQ,wBAAyB,CACpCjH,OAAQqb,EAAUC,UAASC,oBAI/B3d,EAAAA,EAAAA,IAAiB,kBAAmByI,MAAOzU,EAAQmD,EAAS4O,KAC1D,MAAM,OACJ/P,EAAM,SAAEynB,EAAQ,OAAEzE,EAAS,GAAE,MAAE3gB,GAAQC,EAAAA,EAAAA,OACrCyN,EAEE6G,QAAevD,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEoU,WAAUzE,WAEnE,GAAKpM,EAAL,CAEA,GAAoB,oBAAhBA,EAAOxW,KAGT,OAFAe,EAAQymB,iBAAiB,CAAEC,eAAgB,SAAUxlB,eACrDlB,EAAQ2mB,mBAAmB,CAAEzlB,UAI/B,GAAoB,aAAhBuU,EAAOxW,MAAuC,WAAhBwW,EAAOxW,KAgBvC,OAfAe,EAAQwM,iBAAiB,CACvB3O,SAAS4gB,EAAAA,EAAAA,IAA6B,aAAhBhJ,EAAOxW,KAAsB,aAAe,YAClEiC,UAEFlB,EAAQ2mB,mBAAmB,CAAEzlB,UAE7BrE,GAASoL,EAAAA,EAAAA,MAEPpL,EADEgC,GACO+nB,EAAAA,EAAAA,KAAuB/pB,EAAQgC,IAE/BgoB,EAAAA,EAAAA,KAAmBhqB,EAAQ,CAClCiqB,mBAAe1gB,GACdlF,QAEL2G,EAAAA,EAAAA,IAAUhL,GAIZ,GAAoB,iBAAhB4Y,EAAOxW,KAAyB,CAClCpC,GAASoL,EAAAA,EAAAA,MACT,MAAMga,GAAcllB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO6lB,eAAe5E,SAC3DC,EAAiBH,IAAcA,EAAYvjB,OAAS,IAAIkR,QAAQvP,KAAMgiB,GAAMA,EAAER,SAAWA,GACzFS,EAAa,CACjB5V,MAAO+I,EAAO/I,MACdkD,QAAS6F,EAAO7F,QAChB2S,SAAUH,GAAgBxX,MAE5B/N,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BkqB,cAAe,CACb9oB,OAAQY,EACRynB,WACAnE,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzDphB,IACH2G,EAAAA,EAAAA,IAAUhL,EACZ,CA5CmB,KA+CrBgM,EAAAA,EAAAA,IAAiB,gBAAiByI,MAAOzU,EAAQmD,EAAS4O,KACxD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,GACrBoE,EAAAA,EAAAA,KAA2BnW,SAMnCqV,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE8U,SAAS,MAEnEnqB,GAASoL,EAAAA,EAAAA,MACTpL,GAASoqB,EAAAA,EAAAA,KAAmBpqB,EAAQA,EAAOiC,cAAgB,CACzDooB,eAAe,KAEjBrf,EAAAA,EAAAA,IAAUhL,GACVmD,EAAQwM,iBAAiB,CACvB3O,SAAS4gB,EAAAA,EAAAA,IAAa,YACtBvd,WAbAlB,EAAQymB,iBAAiB,CAAEC,eAAgB,SAAUxlB,aAiBzD2H,EAAAA,EAAAA,IAAiB,sBAAuByI,MAAOzU,EAAQmD,EAAS4O,KAC9D,MAAM,OAAE3Q,EAAM,SAAEyW,GAAa9F,QACvBwJ,GAAoBvb,EAAQoB,EAAQyW,MAG5C7L,EAAAA,EAAAA,IAAiB,uBAAwByI,MAAOzU,EAAQmD,EAAS4O,KAC/D,MAAM,OAAE3Q,EAAM,UAAE8F,EAAS,aAAE0b,EAAY,MAAEve,GAAQC,EAAAA,EAAAA,OAAsByN,EACjE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMpC,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAIlD,KAFgBsT,EAAAA,EAAAA,KAAuBxa,EAAQoB,IAE/BJ,GAAS6b,mBAAmBG,OAAOK,OAAQ,CACzD,MAAMiN,EAAetpB,EAAQ6b,kBAAkBG,MAAMK,OAGrD,GAFwBrc,EAAQ6b,kBAAkBG,MAAME,WAAaC,EAAAA,KAInE,GAAImN,GADmBtqB,EAAOsd,OAAOC,SAASF,QAAU,GAQtD,YANAla,EAAQqa,sBAAsB,CAC5BC,MAAO,CACLC,cAAe4M,GAEjBjmB,eAMJ,GAAIimB,GADsBtqB,EAAO4d,KAAKL,SAASF,QAAU,GAMvD,YAJAla,EAAQqa,sBAAsB,CAC5BN,SAAUS,EAAAA,IACVtZ,SAKR,OAEqBgR,EAAAA,EAAAA,IAAQ,8BAA+B,CAC1DjS,OACA8D,YACAqjB,QAAQ,EACR3H,kBAKFzf,EAAQwM,iBAAiB,CACvB3O,QAAS,CAAE4O,IAAK,yBAChBvL,aAIJ2H,EAAAA,EAAAA,IAAiB,sBAAuByI,MAAOzU,EAAQmD,EAAS4O,KAC9D,MAAM,OAAE3Q,EAAM,UAAE8F,EAAS,cAAEsjB,EAAa,MAAEnmB,GAAQC,EAAAA,EAAAA,OAAsByN,EAClE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC3BgC,SAEgBiS,EAAAA,EAAAA,IAAQ,8BAA+B,CAC1DjS,OACA8D,YACAqjB,QAAQ,EACRC,mBAKFrnB,EAAQwM,iBAAiB,CACvB3O,QAAS,CAAE4O,IAAK,qCAChBvL,aAwBJ2H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,OAAE3Q,EAAM,WAAE8N,EAAU,MAAE7K,GAAQC,EAAAA,EAAAA,OAAsByN,EACpD3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC3BgC,IAELpD,GAASyqB,EAAAA,EAAAA,KAAqBzqB,EAAQoB,EAAQgC,EAAM8L,GAAY,IAChElE,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQunB,iBAAiB,CAAExb,aAAY7K,cAGzC2H,EAAAA,EAAAA,IAAiB,mBAAoByI,MAAOzU,EAAQmD,EAAS4O,KAC3D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,IAAI3O,GAAOmjB,EAAAA,EAAAA,KAAkBvmB,EAAQqE,GAErC,GAAKjB,EAAL,CAEA,IAAKA,EAAKunB,eAAgB,OAClBpP,GAAoBvb,EAAQoD,EAAKd,IACvCtC,GAASoL,EAAAA,EAAAA,MACT,MAAMwf,EAAiBxnB,EAAKd,GAE5B,GADAc,GAAOmjB,EAAAA,EAAAA,KAAkBvmB,EAAQqE,IAC5BjB,GAAMunB,gBAAkBC,IAAmBxnB,EAAKd,GAAI,MAC3D,CAEAa,EAAQ4J,aAAa,CAAE3L,OAAQgC,EAAKd,GAAI4E,UAAW9D,EAAKunB,eAAe,GAAItmB,SAV1D,KAanB2H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,OAAE3Q,EAAM,SAAEyG,EAAWD,EAAAA,IAAmBmK,EAExC3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,GAAKgC,EAIL,OAFAiS,EAAAA,EAAAA,IAAQ,kBAAmB,CAAEjS,OAAMyE,SAAUA,IAAaD,EAAAA,QAAiB2B,EAAY1B,IAEnFA,IAAaD,EAAAA,IACR9E,EAAAA,EAAAA,KAAW9C,EAAQoD,EAAKd,GAAI,CACjCuoB,yBAAqBthB,EACrBohB,oBAAgBphB,SAHpB,KAWFyC,EAAAA,EAAAA,IAAiB,UAAW,CAAChM,EAAQmD,EAAS4O,KAC5C,MAAM,IACJ+Y,EAAG,gBAAEC,EAAe,gBAAEC,EAAe,YAAEC,EAAW,MAAE5mB,GAAQC,EAAAA,EAAAA,OAC1DyN,EACEmZ,GAAkBC,EAAAA,EAAAA,IAAeL,GACjCM,EAAY,IAAIC,IAAIH,GACpBI,GAAgBC,EAAAA,EAAAA,IAAiBL,GAEvC,IAAKF,IAAmBQ,EAAAA,EAAAA,IAAWN,GAKjC,OAJA/nB,EAAQsoB,iBAAiB,CAAEpnB,UAC3BlB,EAAQuoB,kBAAkB,CAAErnB,eAE5BlB,EAAQwoB,iBAAiB,CAAEb,MAAKG,cAAa5mB,UAI/C,MAAM,UAAE0e,EAAS,OAAE5L,GAAWnX,EAC9B,GAAImX,GAAQyU,gBAAkB7I,EAAU8I,iBAAiBpnB,SAAS2mB,EAAUU,UAG1E,OAFAV,EAAUW,aAAa3Q,IA3rEC,kBA2rEwBjE,EAAOyU,qBACvDI,OAAOC,KAAKb,EAAUc,KAAM,SAAU,YAIxC,GAAInJ,EAAUoJ,eAAe1nB,SAAS2mB,EAAUU,UAI9C,OAHA3oB,EAAQsoB,iBAAiB,CAAEpnB,eAE3BlB,EAAQipB,mBAAmB,CAAEtB,MAAKzmB,UAIpC,MAAMgoB,EAAgBtJ,EAAUuJ,mBAAmB7nB,SAAS2mB,EAAUU,UAE1CZ,EAAgBpX,MAAMyY,EAAAA,MAAsBxB,GAAoBsB,EAK1FL,OAAOC,KAAKb,EAAW,SAAU,YAFjCjoB,EAAQqpB,oBAAoB,CAAE1B,IAAKQ,EAAgBF,EAAUqB,WAAavB,EAAiB7mB,aAuC/F2H,EAAAA,EAAAA,IAAiB,kCAAmC,CAAChM,EAAQmD,EAAS4O,KACpE,MAAQ3Q,OAAQqU,EAAQ,QAAE1K,EAAO,MAAE1G,GAAQC,EAAAA,EAAAA,OAAsByN,EAEjE/R,GAASoL,EAAAA,EAAAA,MAET,MACMshB,GADWxsB,EAAAA,EAAAA,KAAeF,EAAQqE,GACVsoB,gBAE9B3sB,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B4X,0BAA0B,EAC1B+U,gBAAiB,CAAC,GACjBtoB,IACH2G,EAAAA,EAAAA,IAAUhL,GACVA,GAASoL,EAAAA,EAAAA,MAET,MAAMwhB,GAAcrG,EAAAA,EAAAA,KAAkBvmB,EAAQqE,GACxC+L,GAAkBtD,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAQwD,SAEjE,IAAK+kB,IAAgBxc,EAAiB,OAEtC,MAAMvI,EAAWkD,GAAWnD,EAAAA,GACtBiG,EAAgB+e,EAAYtqB,GAE5BuqB,EAAe,CACnBzqB,KAAM,UACN0E,aAAc4lB,EAAaxlB,UAC3B4lB,aAAcJ,EAAa7W,WAC3BkX,cAAelf,EACf8U,gBAAiB+J,EAAa7W,WAC9BmX,UAAWN,EAAaM,UACxBC,YAAaP,EAAaO,aAGtB1K,EAAmBmK,EAAaxlB,UAClC2lB,GAAepW,EAAAA,EAAAA,KAAYzW,EAAQ6N,EAAeuC,IAAkB1J,UACxE,IAAK6b,EAAkB,OAEvB,KAAK2K,EAAAA,EAAAA,KAA2BltB,EAAQyV,EAAU5H,EAAe0U,GAE/D,YADApf,EAAQwM,iBAAiB,CAAE3O,SAAS4gB,EAAAA,EAAAA,IAAa,2BAA4Bvd,UAI/E,IAAKke,EAAiBwK,eAAiBtX,IAAamX,EAAYtqB,GAAI,OAEpE,MAIMyqB,EAHCxK,GAAkBwK,cAChBxK,EAAiBwK,gBAAkBtX,OAAWlM,EAAYgZ,EAAiBwK,cADrClf,GAhEjD,SACE7N,EACA6H,EACAnB,EACA+O,GAEA,MAAMyM,GAAezL,EAAAA,EAAAA,KAAYzW,EAAQyV,EAAU5N,GAE9CnB,EAAUI,cAOf4N,GAAU,CACR1U,SAAQoB,OAAQqU,EAAU5N,WAAU8M,MANX,IACtBuN,EACHxb,aAIqDkO,aAAa,EAAMC,mBAAmB,GAE/F,CAwDEsY,CAAoBntB,EAAQ6H,EANe,IACtC0a,EACHwK,gBACA3qB,KAAM,WAGwCqT,GAChDtS,EAAQiqB,WAAW,CAAEhsB,OAAQqU,EAAU5N,WAAUxD,UACjDlB,EAAQkqB,iBAAiB,CAAEhpB,UAC3BlB,EAAQmqB,sBAAsB,CAAEjpB,UAChClB,EAAQuf,WAAW,CAAEthB,OAAQyM,EAAehG,SAAUuI,OAGxDpE,EAAAA,EAAAA,IAAiB,wBAAyByI,MAAOzU,EAAQmD,EAAS4O,KAChE,MAAM,OAAE3Q,EAAM,QAAE2J,EAAO,MAAE1G,GAAQC,EAAAA,EAAAA,OAAsByN,EACjD+C,GAAOC,EAAAA,EAAAA,KAAW/U,EAAQoB,IACamsB,EAAAA,EAAAA,IAAmCvtB,EAAQqE,IAC5CyQ,UAnG9CL,eACEzU,EACA8U,EACA1T,GAEA,IAAIsZ,GAAWC,EAAAA,EAAAA,KAAmB3a,EAAQoB,GAC1C,IAAKsZ,EAAU,CACb,MAAM,WAAE8S,GAAe1Y,EACjB8D,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE/S,GAAIlB,EAAQosB,eAC5D9S,EAAW9B,GAAQ8B,QACrB,CACA,OAAOnE,SAASmE,GAAU+S,gBAC5B,CAuF6DC,CAA4B1tB,EAAQ8U,EAAM1T,GACnG+B,EAAQwqB,WAAW,CACjBC,KAAM,CACJ5sB,SAAS4gB,EAAAA,EAAAA,IAAa,oCAAoCD,EAAAA,EAAAA,IAAgB7M,KAE5EzQ,WAIJrE,GAASoL,EAAAA,EAAAA,OAEJyiB,EAAAA,EAAAA,IAA8B7tB,EAAQoB,EAAQiD,IAKnDrE,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B8V,gBAAiB,KACZ5V,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOyR,gBACjCL,SAAUrU,EACVyU,WAAY9K,GAEd6M,0BAA0B,GACzBvT,IACH2G,EAAAA,EAAAA,IAAUhL,GACVmD,EAAQiqB,WAAW,CAAEhsB,SAAQyG,SAAUkD,GAAWnD,EAAAA,GAAgBvD,UAClElB,EAAQkqB,iBAAiB,CAAEhpB,UAC3BlB,EAAQmqB,sBAAsB,CAAEjpB,WAf9BlB,EAAQ4Q,oCAAoC,CAAE3S,SAAQiD,cAkB1D2H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD/R,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B8V,gBAAiB,KACZ5V,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOyR,gBACjCL,SAAUzV,EAAOiC,gBAElBoC,IACH2G,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQmqB,sBAAsB,CAAEjpB,UAChClB,EAAQ2S,gBAAgB,CAAEE,UAAU,EAAM3R,aAG5C2H,EAAAA,EAAAA,IAAiB,eAAgB,CAAChM,EAAQmD,EAAS4O,KACjD,MAAM,SAAE0D,EAAQ,MAAEpR,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,GAEtD,WAAEyD,EAAU,QAAE7I,IAAYzM,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOyR,gBACxDO,EAAWb,GAAahO,EAAAA,EAAAA,KAAWxH,EAAQwV,QAAcjM,EACzD+M,EAASb,GAAWjO,EAAAA,EAAAA,KAAWxH,EAAQyV,QAAYlM,EACnDukB,EAAQtY,GAAc7I,GACxBohB,EAAAA,EAAAA,KAAgB/tB,EAAQwV,EAAY7I,QACpCpD,EAEJ,IAAK8M,IAAaC,IAAWwX,GAAS,cAAeA,EACnD,OAGF,MAAM1mB,GAAgB+B,EAAAA,EAAAA,KAAwBnJ,EAAQyV,IAEhD,KAAE1H,EAAI,SAAE0J,GAAcqW,EAAmBloB,QAAQmI,MAAQ,CAAC,EAC3D8M,GAAY7a,EAAQ,CACvBoD,KAAMkT,EACNvI,OACA0J,WACAqW,QACA1mB,kBAGFpH,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B8V,gBAAiB,CAAC,EAClB8B,0BAA0B,GACzBvT,IACH2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,4BAA6B,CAAChM,EAAQmD,EAAS4O,KAC9D,MAAM,OACJ3Q,EAAM,GAAEkB,EAAE,eAAE2R,GAAiB+Z,EAAAA,EAAAA,KAA0BhuB,GAAO,MAAEqE,GAAQC,EAAAA,EAAAA,OACtEyN,EAOJ,OALA/R,GAASiuB,EAAAA,EAAAA,KAAkCjuB,EAAQoB,EAAQkB,EAAI2R,EAAgB5P,IACtE6pB,EAAAA,EAAAA,KAAgBluB,EAAQ,CAC/BmuB,oBAAqBla,OAMzBjI,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,OACJ3Q,EAAM,GAAEkB,EAAE,MAAE+B,GAAQC,EAAAA,EAAAA,OAClByN,EAIJ,OAFSqc,EAAAA,EAAAA,KAAkCpuB,EAAQoB,EAAQkB,EAAI+B,MAKjE2H,EAAAA,EAAAA,IAAiB,iCAAkC,CAAChM,EAAQmD,EAAS4O,KACnE,MAAM,OACJ3Q,EAAM,WAAE8N,EAAU,eAAE+E,GAAiBoa,EAAAA,EAAAA,KAAmBruB,IACtD+R,EAQJ,OANA7C,EAAWhN,QAASI,IAClBtC,GAASsuB,EAAAA,EAAAA,KAAyBtuB,EAAQoB,EAAQkB,EAAI2R,EAAgB,CACpEN,WAAW,MAIR3T,KAGTgM,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,OACJ3Q,EAAM,WAAE8N,EAAU,eAAE+E,GAAiBoa,EAAAA,EAAAA,KAAmBruB,IACtD+R,EAEE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,GAAKgC,EAUL,OARAD,EAAQorB,+BAA+B,CAAEntB,SAAQ8N,aAAY+E,oBAE7DoB,EAAAA,EAAAA,IAAQ,gBAAiB,CACvBjS,OACA8L,aACA+E,mBAGKjU,IAKT,IAAIwuB,GACAC,GAAmD,CAAC,EAExD,SAASC,KACHF,KACFG,aAAaH,IACbA,QAAwBjlB,GAG1B,MAAM,iBAAEqlB,IAAqB3O,EAAAA,EAAAA,MAC7BlY,OAAO8I,QAAQ4d,IAAqBvsB,QAAQ,EAAEd,EAAQ4I,MACpD4kB,EAAiB,CAAExtB,SAAQ4I,IAAKga,MAAMhK,KAAKhQ,GAAM6kB,iBAAiB,MAGpEJ,GAAsB,CAAC,CACzB,EACAziB,EAAAA,EAAAA,IAAiB,4BAA6B,CAAChM,EAAQmD,EAAS4O,KAC9D,MAAM,IAAE/H,EAAG,OAAE5I,GAAW2Q,EAEnByc,IACHrjB,WAAWujB,GArBY,KAwBpBD,GAAoBrtB,KACvBqtB,GAAoBrtB,GAAU,IAAI8I,KAGpCF,EAAI9H,QAASI,IACXmsB,GAAoBrtB,GAAQ+I,IAAI7H,QAIpC0J,EAAAA,EAAAA,IAAiB,mBAAoByI,MAAOzU,EAAQmD,EAAS4O,KAC3D,MAAM,OAAE3Q,EAAM,IAAE4I,EAAG,gBAAE6kB,GAAoB9c,EAEzC,IAAIiU,EAAAA,EAAAA,KAA0BhmB,GAAS,OAEvC,MAAMoD,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMwV,QAAevD,EAAAA,EAAAA,IAAQ,oBAAqB,CAChDjS,OACA4G,MACA6kB,oBAGGjW,IAEL5Y,GAASoL,EAAAA,EAAAA,MACTwN,EAAOkW,UAAU5sB,QAASW,IACxB7C,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQyB,EAAOP,GAAI,CACpDysB,WAAYlsB,EAAOmsB,MACnBC,cAAepsB,EAAOqsB,WACrB,GAECrsB,EAAO+D,aACT5G,GAAS4I,EAAAA,EAAAA,KAAiB5I,EAAQoB,EAAQyB,EAAOP,GAAIO,EAAO+D,gBAIhEoE,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,iBAAkByI,MAAOzU,EAAQmD,EAAS4O,KACzD,MAAM,OAAE3Q,EAAM,IAAE4I,GAAQ+H,EAElB3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMwV,QAAevD,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9CjS,OACA4G,QAGG4O,IAEL5Y,GAASoL,EAAAA,EAAAA,MACTwN,EAAO1W,QAAQ,CAACitB,EAAW9pB,KACzBrF,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ4I,EAAI3E,GAAI,CACjD8pB,iBAIJnkB,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,0BAA2B,MAC1CqJ,EAAAA,EAAAA,IAAQ,+BAIVrJ,EAAAA,EAAAA,IAAiB,qBAAsByI,MAAOzU,EAAQmD,EAAS4O,KAC7D,MAAM,OAAE3Q,EAAM,UAAE8F,GAAc6K,EAExB3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,GAAKgC,EAEL,IACE,MAAMwV,QAAevD,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEjS,OAAM8D,cACxD0R,GAAQzD,OACVnV,GAASoL,EAAAA,EAAAA,MACTpL,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ8F,EAAW,CAAEkoB,SAAUxW,EAAOzD,QACzEnK,EAAAA,EAAAA,IAAUhL,GAEd,CAAE,MAAO6T,GACP,MAAM,QAAE7S,GAAY6S,EAEpB,GAAgB,4BAAZ7S,GAAqD,4BAAZA,EAAuC,CAIlF,GAHAhB,GAASoL,EAAAA,EAAAA,QAEI2J,EAAAA,EAAAA,KAAW/U,EAAQoB,GACrB,OACX,MAAMiuB,GAAaC,EAAAA,EAAAA,KAAiBtvB,EAAQoB,GAC5C,IAAKiuB,EAAY,OAEjB,MAAME,EAA2B,4BAAZvuB,EACjB,CAAEwuB,sBAAsB,GACxB,CAAEC,0BAA0B,GAEhCzvB,GAAS0vB,EAAAA,EAAAA,KAAoB1vB,EAAQ,CACnC,CAACoB,GAAS,IAAKiuB,KAAeE,KAGhCvvB,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ8F,EAAW,CAAEkoB,cAAU7lB,KAClEyB,EAAAA,EAAAA,IAAUhL,EACZ,CACF,KAGFgM,EAAAA,EAAAA,IAAiB,mBAAoByI,UACnC,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,qBACxBuD,IAEL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAAS2vB,EAAAA,EAAAA,KAAyB3vB,GAAQqP,EAAAA,EAAAA,IAAqBuJ,EAAOnI,SAAU,OAChFzQ,GAASsP,EAAAA,EAAAA,KAAmBtP,EAAQ4Y,EAAOxJ,eAE3CpE,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,iBAAkB,CAAChM,EAAQmD,EAAS4O,KACnD,MAAM,OAAE3Q,EAAM,aAAEoO,GAAiBuC,EAC3B3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,OAAKgC,IACLiS,EAAAA,EAAAA,IAAQ,iBAAkB,CACxBjS,OACAwsB,WAAYpgB,IAGPxP,GANWA,KASpBgM,EAAAA,EAAAA,IAAiB,kBAAmByI,MAAOzU,EAAQmD,EAAS4O,KAC1D,MAAM,OACJ3Q,EAAM,UAAE8F,EAAS,oBAAE2oB,EAAmB,qBAAEC,EAAoB,MAAEzrB,GAAQC,EAAAA,EAAAA,OACpEyN,EACE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EAKH,YAJAD,EAAQwM,iBAAiB,CACvB3O,SAAS4gB,EAAAA,EAAAA,IAAa,iBACtBvd,UAIJ,MAAM0rB,EAAgCA,IAAM5sB,EAAQwM,iBAAiB,CACnE3O,SAAS4gB,EAAAA,EAAAA,IAAa,iBACtBvd,UAGF,KAAKof,EAAAA,EAAAA,IAAcrgB,MAAUsgB,EAAAA,EAAAA,IAAiBtgB,GAE5C,YADA2sB,IAGF,MAIMC,GAAkC3a,EAAAA,EAAAA,IAAQ,oBAAqB,CACnEjS,OAAMd,GAAI4E,EAAW2oB,sBAAqBC,+BAEtCG,EAAAA,EAAAA,IACJD,EARiCE,IAAM/sB,EAAQwM,iBAAiB,CAChE3O,SAAS4gB,EAAAA,EAAAA,IAAa,cACtBvd,UAM6D0rB,KAIjE,MAAMI,GAA8B,IAAI9b,IACxC,IAAI+b,GAmHJ,SAASvR,GAAkB3D,GACzB,MAAM,iBACJuE,EAAgB,SAAE4Q,GAChBnV,EACJ,OAAIoV,EAAAA,IAA8B3lB,IAAI0lB,GAAkB,QACpD5Q,EAAyB,OACzB4Q,IAAaE,EAAAA,IAAsB,MACnCC,EAAAA,IAA8B7lB,IAAI0lB,IAAaI,EAAAA,IAA8B9lB,IAAI0lB,GAAkB,QACnGnV,EAAWwV,MAAc,QACtB,MACT,EA5HA1kB,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,OAAE3Q,EAAM,UAAE8F,GAAc6K,EACxB4e,EAAaR,GAA4B3vB,IAAIY,IAAW,GAC9DuvB,EAAWjlB,KAAKxE,GAChBipB,GAA4B/U,IAAIha,EAAQuvB,GAEnCP,KAGHA,GAAwBpE,OAAO7gB,WAAW,KACxCilB,QAAwB7mB,EAExB4mB,GAA4BjuB,QAAQ,CAACgN,EAAY0hB,KAC/C,MAAMxtB,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQ4wB,GAC3BxtB,IAELiS,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEjS,OAAM8L,iBAE5CihB,GAA4BU,SAC3B,SAIP7kB,EAAAA,EAAAA,IAAiB,iCAAkCyI,MAAOzU,EAAQmD,EAAS4O,KACzE,MAAM,MACJ+e,EAAK,UAAE5pB,EAAS,UAAE6pB,EAAS,MAAE1sB,GAAQC,EAAAA,EAAAA,OACnCyN,EAEEif,GAAMjc,EAAAA,EAAAA,KAAW/U,EAAQ8wB,GAC/B,IAAKE,EAAK,OAEV,MAAMpY,QAAevD,EAAAA,EAAAA,IAAQ,6BAA8B,CACzD2b,MACA1uB,GAAI4E,IAED0R,GAYL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BixB,qBAAsB,CACpBjwB,QAAS4X,EACTmY,YACAD,UAEDzsB,IACH2G,EAAAA,EAAAA,IAAUhL,IAnBRmD,EAAQ+tB,gBAAgB,CACtBH,YACAI,MAAO,CACLC,UAAW,0BACXC,UAAW,CAAExd,MAAO,oBAEtBxP,aAgBN2H,EAAAA,EAAAA,IAAiB,gCAAiC,CAAChM,EAAQmD,EAAS4O,KAClE,MAAM,UACJgf,EAAS,QAAE/vB,EAAO,MAAEqD,GAAQC,EAAAA,EAAAA,OAC1ByN,EAEEuf,EAAmBtwB,EAAQuwB,WAAWzvB,OAAQM,GAAuC,SAATA,GAElFpC,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BwxB,0BAA2B,CACzBT,YACAjvB,OAAQwvB,EACRtwB,YAEDqD,IACH2G,EAAAA,EAAAA,IAAUhL,K,0BC5zFZ,MAGMyxB,IAAkBC,EAAAA,EAAAA,IAAUld,GAAOA,IAAM,KAAK,GAkjBpDC,eAAekd,GAA0C3xB,EAAW4xB,GAClE,MAAMC,QAAuBxc,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEuc,SACzDC,IAIL7xB,GAASoL,EAAAA,EAAAA,MAETpL,EAAS,IACJA,EACH8xB,SAAU,IACL9xB,EAAO8xB,SACVC,OAAQF,KAGZ7mB,EAAAA,EAAAA,IAAUhL,GACZ,CAEAyU,eAAeud,GACbhyB,EACAmD,EACA8uB,GAEA,IAAIC,EACJ,IACEA,QAAmB7c,EAAAA,EAAAA,IACjB,gBACA,CAAE4c,kBAEN,CAAE,MAAOpe,GACP,GAAoC,uBAA/BA,EAAmB7S,QAetB,YAdA+G,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAQ,EAAGI,GAAI+B,MAC3ClB,EAAQwM,iBAAiB,CACvB3O,SAAS4gB,EAAAA,EAAAA,IAAa,6BACtBvd,UAGE,cAAe4tB,IACd/xB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO8tB,4BAA8BF,EAAeG,YAC9EpyB,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BmyB,+BAA2B5oB,GAC1BlF,IACH2G,EAAAA,EAAAA,IAAUhL,KAKlB,CAGA,GAFAA,GAASoL,EAAAA,EAAAA,OAEJ8mB,EAEH,OAGF,MAAM,IAAE9W,EAAG,SAAE0W,EAAQ,MAAEO,GAAUH,EAI3BI,GAFNtyB,GAASuyB,EAAAA,EAAAA,KAAiBvyB,EAAQob,EAAI9Y,GAAI,IAAK8Y,EAAK0W,WAAUO,WAElCP,SAASU,SAASxkB,MAC1CskB,GAAgBD,EAAMC,KACxBtyB,GAASyyB,EAAAA,EAAAA,KAAwBzyB,KAGnCgL,EAAAA,EAAAA,IAAUhL,EACZ,CAmLAyU,eAAeie,GAAkC1yB,EAAW2yB,EAAeC,EAAsBjL,MAC3FtjB,GAAQC,EAAAA,EAAAA,QACZ,MAAMsU,QAAevD,EAAAA,EAAAA,IAAQ,aAAc,CAAEsd,QAAOhL,SAAQkL,SAAUD,IACjEha,IAIL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAAS8yB,EAAAA,EAAAA,KAAgB9yB,GAAS2nB,EAAQ/O,EAAOma,KAAMna,EAAOsP,WAAY7jB,IAC1E2G,EAAAA,EAAAA,IAAUhL,GACZ,EA9yBAgM,EAAAA,EAAAA,IAAiB,kBAAmByI,MAAOzU,EAAQmD,KACjD,MAAO6vB,EAAeC,SAA2B1R,QAAQC,IAAI,EAC3DnM,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEuc,KAAM5xB,EAAO8xB,SAASoB,MAAMtB,QAC1Dvc,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEuc,KAAM5xB,EAAO4oB,aAAasK,MAAMtB,SAE/DqB,GAAsBD,IAI3BhzB,GAASoL,EAAAA,EAAAA,MAETpL,GAASmzB,EAAAA,EAAAA,KACPnzB,EACA,QACAgzB,EAAcpB,KACdoB,EAAcI,MAGhBpzB,GAASqzB,EAAAA,EAAAA,KACPrzB,EACAizB,EAAkBrB,KAClBqB,EAAkBG,OAGpBpoB,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQmwB,iBAAiB,CACvBtpB,IAAKhK,EAAOuzB,yBAIhBvnB,EAAAA,EAAAA,IAAiB,oBAAqByI,MAAOzU,EAAQmD,KACnD,MACE+vB,OACEM,OAAQC,EAAc,IAExBC,SAAUC,GACR3zB,EAAO8xB,UAEToB,OACEM,OAAQI,EAAoB,KAE5B5zB,EAAO4oB,aACLiL,EAAe,IAAIJ,KAAgBG,GACzC,GAAKC,EAAahyB,OAIlB,IAAK,IAAIwD,EAAI,EAAGA,EAAIwuB,EAAahyB,OAAQwD,IAAK,CAC5C,MAAM/C,EAAKuxB,EAAaxuB,GACpBsuB,EAAOrxB,IAAKwvB,WAGhB3uB,EAAQ6uB,aAAa,CACnBC,eAAgB,CAAE3vB,KAAIkrB,WAAYmG,EAAOrxB,GAAIkrB,cAG3CnoB,EA7D0B,IA6DQ,GAAKA,EAAI,SACvCyuB,EAAAA,EAAAA,IA/DgB,KAiE1B,KAGF9nB,EAAAA,EAAAA,IAAiB,qBAAuBhM,IACtC,MAAM,KAAE4xB,GAAS5xB,EAAO8xB,SAASC,QAAU,CAAC,EACvCJ,GAAmB3xB,EAAQ4xB,MAGlC5lB,EAAAA,EAAAA,IAAiB,uBAAwByI,UACvC,MAAM,KAAEmd,GAAS5xB,EAAO8xB,SAASiC,UAAY,CAAC,EAExCC,QAAyB3e,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEuc,SAC7DoC,IAILh0B,GAASoL,EAAAA,EAAAA,MAETpL,EAAS,IACJA,EACH8xB,SAAU,IACL9xB,EAAO8xB,SACViC,SAAUC,KAGdhpB,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,sBAAuByI,UACtC,MAAM,KAAEmd,GAAS5xB,EAAO8xB,SAASmC,SAAW,CAAC,EAE7C,IAAIjO,EAAAA,EAAAA,KAA0BhmB,GAC5B,OAGF,MAAM4Y,QAAevD,EAAAA,EAAAA,IAAQ,wBAAyB,CAAErH,MAAO,OAAQ4jB,SAClEhZ,IAIL5Y,GAASoL,EAAAA,EAAAA,MAETpL,EAAS,IACJA,EACH8xB,SAAU,IACL9xB,EAAO8xB,SACVmC,QAAS,CACPrC,KAAMhZ,EAAOgZ,KACbE,SAAUlZ,EAAOkZ,aAIvB9mB,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,uBAAwByI,UACvC,MAAM,KAAEmd,GAAS5xB,EAAO8xB,SAASoC,UAAY,CAAC,EAE9C,IAAIlO,EAAAA,EAAAA,KAA0BhmB,GAC5B,OAGF,MAAMk0B,QAAiB7e,EAAAA,EAAAA,IAAQ,wBAAyB,CAAErH,MAAO,OAAQ4jB,SACpEsC,IAILl0B,GAASoL,EAAAA,EAAAA,MAETpL,EAAS,IACJA,EACH8xB,SAAU,IACL9xB,EAAO8xB,SACVoC,SAAU,CACRtC,KAAMsC,EAAStC,KACfE,SAAUoC,EAASpC,SAAShwB,OAAQkE,GAA8B,OAAlBA,EAAQgI,WAI9DhD,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,uBAAwByI,UACvC,MAAM,KAAEmd,GAAS5xB,EAAO8xB,SAASqC,UAAY,CAAC,EACxCC,QAAyB/e,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEuc,SAC7DwC,IAILp0B,GAASoL,EAAAA,EAAAA,MAETpL,GAASmzB,EAAAA,EAAAA,KACPnzB,EACA,WACAo0B,EAAiBxC,KACjBwC,EAAiBhB,OAEnBpoB,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,mBAAoByI,UACnC,MAAMyd,QAAmB7c,EAAAA,EAAAA,IAAQ,qBACjC,IAAK6c,EACH,OAGF,MAAM,IAAE9W,EAAG,SAAE0W,GAAaI,EAE1BlyB,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHq0B,aAAc,IAAKjZ,EAAK0W,cAE1B9mB,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,eAAgByI,UAC/B,MAAMyd,QAAmB7c,EAAAA,EAAAA,IAAQ,iBACjC,IAAK6c,EACH,OAGF,MAAM,IAAE9W,EAAG,SAAE0W,GAAaI,EAE1BlyB,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHs0B,SAAU,IAAKlZ,EAAK0W,cAEtB9mB,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,wBAAyByI,UACxC,MAAMyd,QAAmB7c,EAAAA,EAAAA,IAAQ,0BACjC,IAAK6c,EACH,OAEFlyB,GAASoL,EAAAA,EAAAA,MAET,MAAM,IAAEgQ,EAAG,SAAE0W,GAAaI,EAEpBqC,EAAU,IAAKnZ,EAAK0W,YAE1B9xB,GAASuyB,EAAAA,EAAAA,KAAiBvyB,EAAQu0B,EAAQjyB,GAAIiyB,GAC9Cv0B,EAAS,IACJA,EACHw0B,oBAAqBD,EAAQjyB,KAE/B0I,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,yBAA0ByI,UACzC,MAAMyd,QAAmB7c,EAAAA,EAAAA,IAAQ,4BACjC,IAAK6c,EACH,OAEFlyB,GAASoL,EAAAA,EAAAA,MAET,MAAM,IAAEgQ,EAAG,SAAE0W,GAAaI,EACpBqC,EAAU,IAAKnZ,EAAK0W,YAE1B9xB,GAASuyB,EAAAA,EAAAA,KAAiBvyB,EAAQu0B,EAAQjyB,GAAIiyB,GAC9Cv0B,EAAS,IAAKA,EAAQy0B,qBAAsBF,EAAQjyB,KACpD0I,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,8BAA+ByI,MAAOzU,EAAQmD,MAC7D6H,EAAAA,EAAAA,IAAUhL,GAEV,MAAM,KAAE4xB,GAAS5xB,EAAO00B,0BAA4B,CAAC,EAE/C9b,QAAevD,EAAAA,EAAAA,IAAQ,gCAAiC,CAAEuc,SAChE,IAAKhZ,EACH,OAGF5Y,GAASoL,EAAAA,EAAAA,MAETpL,EAAS,IACJA,EACH00B,yBAA0B,CACxB9C,KAAMhZ,EAAOgZ,KACb+C,SAAU/b,EAAO+b,YAGrB3pB,EAAAA,EAAAA,IAAUhL,GACV,MAAM40B,EAAchc,EAAO+b,SAAS5lB,IAAI,EAAG0Z,gBAAiBA,GAE5DtlB,EAAQmwB,iBAAiB,CAAEtpB,IAAK4qB,OAGlC5oB,EAAAA,EAAAA,IAAiB,eAAgB,CAAChM,EAAQmD,EAAS4O,KACjD,MAAM,eAAEkgB,GAAmBlgB,EACrB8iB,GAAYC,EAAAA,EAAAA,KAAiB90B,EAAQiyB,GACvC4C,GAAaA,EAAU/b,QAAU+b,GAAW/C,UAAUjwB,QACrDmwB,GAAahyB,EAAQmD,EAAS8uB,MAGrCjmB,EAAAA,EAAAA,IAAiB,qBAAsByI,UACrC,MAAOsgB,EAAQC,SAAiBzT,QAAQC,IAAI,EAC1CnM,EAAAA,EAAAA,IAAQ,wBACRA,EAAAA,EAAAA,IAAQ,+BAEL0f,GAAWC,IAIhBh1B,GAASoL,EAAAA,EAAAA,MAETpL,GAASi1B,EAAAA,EAAAA,KAAsBj1B,EAAQ,IAAK+0B,EAAO3Z,IAAK0W,SAAUiD,EAAOjD,WACzE9xB,EAAS,IACJA,EACHk1B,qBAAsB,IAAKF,EAAQ5Z,IAAK0W,SAAUkD,EAAQlD,YAG5D9mB,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,8BAA+ByI,UAC9C,MAAMsgB,QAAe1f,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C4c,eAAgB,CACdG,UAAW+C,EAAAA,OAGVJ,IAIL/0B,GAASoL,EAAAA,EAAAA,MAETpL,EAAS,IACJA,EACHo1B,gBAAiB,IAAKL,EAAO3Z,IAAK0W,SAAUiD,EAAOjD,YAGrD9mB,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,8BAA+ByI,UAC9C,MAAMsgB,QAAe1f,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C4c,eAAgB,CACdG,UAAWiD,EAAAA,OAGVN,IAIL/0B,GAASoL,EAAAA,EAAAA,MAETpL,EAAS,IACJA,EACHs1B,gBAAiB,IAAKP,EAAO3Z,IAAK0W,SAAUiD,EAAOjD,YAGrD9mB,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,0BAA2ByI,UAC1C,MAAMyd,QAAmB7c,EAAAA,EAAAA,IAAQ,4BACjC,IAAK6c,EACH,OAEFlyB,GAASoL,EAAAA,EAAAA,MAET,MAAM,IAAEgQ,EAAG,SAAE0W,GAAaI,EAE1BlyB,EAAS,IACJA,EACHu1B,oBAAqB,IAAKna,EAAK0W,cAEjC9mB,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,gBAAiByI,UAChC,MAAM,KAAEmd,GAAS5xB,EAAO+yB,KAAKyC,MAEvBC,QAAkBpgB,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEuc,SAC/C6D,IAILz1B,GAASoL,EAAAA,EAAAA,MAETpL,EAAS,IACJA,EACH+yB,KAAM,IACD/yB,EAAO+yB,KACVyC,MAAOC,KAGXzqB,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,UAAWyI,MAAOzU,EAAQmD,EAAS4O,KAClD,MAAM,IACJ0O,EAAG,aAAEiV,EAAY,MACjBrxB,GAAQC,EAAAA,EAAAA,OACNyN,EACElQ,EAAS7B,EAAO+yB,KAAKyC,MAAMzC,MAAMlxB,OAEjCgX,GAAQ8c,EAAAA,GAAAA,GAAmB31B,EAAQ,aACnC41B,GAAeC,EAAAA,GAAAA,GAAmB71B,EAAQ,aAC1C81B,GAAY3f,EAAAA,EAAAA,KAA2BnW,GAoB7C,IAlBK01B,GAAgB7zB,GAAUA,GAAUgX,GACvC1V,EAAQwM,iBAAiB,CACvBE,MAAOkmB,EAAAA,GAA0B,2BAA4Bld,EAAM4T,YACnEzrB,QAAS80B,EAAYC,EAAAA,GAA0B,2CAC3CA,EAAAA,GAA0B,mCAC1BH,EAAanJ,gBACZqJ,GAAa,CAChBxrB,OAAQ,CACNA,OAAQ,mBACRyH,QAAS,CAAE1N,WAGf2xB,UAAW,YACX3xB,iBAIiBgR,EAAAA,EAAAA,IAAQ,UAAW,CAAEoL,MAAKiV,iBAE7C,OAGF11B,GAASoL,EAAAA,EAAAA,MACT,MAAM2nB,EAAO/yB,EAAO+yB,KAAKyC,MAAMzC,MAAMjxB,OAAO,EAAGQ,QAASA,IAAOme,EAAIne,KAAO,GACpE2zB,EAAUP,EAAe3C,EAAO,CAACtS,KAAQsS,GAE/C/yB,EAAS,IACJA,EACH+yB,KAAM,IACD/yB,EAAO+yB,KACVyC,MAAO,IACFx1B,EAAO+yB,KAAKyC,MACfzC,KAAMkD,MAIZjrB,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,cAAe,CAAChM,EAAQmD,EAAS4O,KAChD,MAAM,QAAE/L,EAAO,MAAE3B,GAAQC,EAAAA,EAAAA,OAAsByN,EACzCmkB,EAAUl2B,EAAO8xB,SAASiC,SAASjC,SAASjwB,OAC5CgX,GAAQ8c,EAAAA,GAAAA,GAAmB31B,EAAQ,iBACnC41B,GAAeC,EAAAA,GAAAA,GAAmB71B,EAAQ,iBAC1C81B,GAAY3f,EAAAA,EAAAA,KAA2BnW,GAEzCk2B,GAAWrd,GACb1V,EAAQwM,iBAAiB,CACvBE,MAAOkmB,EAAAA,GAA0B,+BAAgCld,EAAM4T,YACvEzrB,QAAS80B,EAAYC,EAAAA,GAA0B,+CAC3CA,EAAAA,GAA0B,uCAC1BH,EAAanJ,gBACZqJ,GAAa,CAChBxrB,OAAQ,CACNA,OAAQ,mBACRyH,QAAS,CAAE1N,WAGf2xB,UAAW,YACX3xB,UAIA2B,IACGqP,EAAAA,EAAAA,IAAQ,cAAe,CAAErP,eAIlCgG,EAAAA,EAAAA,IAAiB,gBAAiB,CAAChM,EAAQmD,EAAS4O,KAClD,MAAM,QAAE/L,GAAY+L,EAEhB/L,IACFhG,GAASoL,EAAAA,EAAAA,MAITpL,EAAS,IACJA,EACH8xB,SAAU,IACL9xB,EAAO8xB,SACViC,SAAU,IACL/zB,EAAO8xB,SAASiC,SACnBjC,SAAU9xB,EAAO8xB,SAASiC,SAASjC,SAAShwB,OAAO,EAAGQ,QAASA,IAAO0D,EAAQ1D,QAIpF0I,EAAAA,EAAAA,IAAUhL,IAELqV,EAAAA,EAAAA,IAAQ,cAAe,CAAErP,UAASmwB,QAAQ,QAInDnqB,EAAAA,EAAAA,IAAiB,sBAAuByI,MAAOzU,EAAQmD,EAAS4O,KAC9D,MAAM,QAAE/L,GAAY+L,QAECsD,EAAAA,EAAAA,IAAQ,sBAAuB,CAAErP,aAKtD2rB,IADSvmB,EAAAA,EAAAA,UAIXY,EAAAA,EAAAA,IAAiB,sBAAuByI,gBACjBY,EAAAA,EAAAA,IAAQ,yBAI7BrV,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACH8xB,SAAU,IACL9xB,EAAO8xB,SACVC,OAAQ,CACND,SAAU,OAIhB9mB,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,aAAEqkB,GAAiBrkB,EACnBmgB,GAAa4C,EAAAA,EAAAA,KAAiB90B,EAAQo2B,GAC5C,IAAKlE,EACH,OAGF,MAAM,WAAE1E,EAAU,cAAE6I,EAAa,WAAEC,GAAepE,EAC5CqE,GAAeD,GAAc/f,QAAQ8f,IAEtChhB,EAAAA,EAAAA,IAASkhB,EAAoC,sBAAtB,oBAA6C,CAAEH,eAAc5I,kBAG3FxhB,EAAAA,EAAAA,IAAiB,oBAAqByI,MAAOzU,EAAQmD,EAAS4O,KAC5D,MAAM,SAAEykB,GAAazkB,EAErB,IAAI0kB,EAAuBz2B,EAAO02B,cAAcF,GAChD,GAAIC,GAAsBE,UACxB,OAGF32B,EAAS,IACJA,EACH02B,cAAe,IACV12B,EAAO02B,cACV,CAACF,GAAW,IACPC,EACHE,WAAW,MAIjB3rB,EAAAA,EAAAA,IAAUhL,GAEV,MAAM02B,QAAsBrhB,EAAAA,EAAAA,IAAQ,qBAAsB,CACxDmhB,WACAI,YAAaH,EAAuBA,EAAqBI,QAAU,IAMrE,GAFAJ,GADAz2B,GAASoL,EAAAA,EAAAA,OACqBsrB,cAAcF,IAEvCE,EAaH,OAZA12B,EAAS,IACJA,EACH02B,cAAe,IACV12B,EAAO02B,cACV,CAACF,GAAW,IACPC,EACHE,WAAW,UAIjB3rB,EAAAA,EAAAA,IAAUhL,GAKZA,EAAS,IACJA,EACH02B,cAAe,IACV12B,EAAO02B,cACV,CAACF,GAAW,CACVG,WAAW,EACXE,QAASH,EAAcG,QACvBC,SAAU,IACJL,GAAsBK,YACvBJ,EAAcI,cAKzB9rB,EAAAA,EAAAA,IAAUhL,MAsEZgM,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,MAAE4gB,EAAK,MAAEtuB,GAAQC,EAAAA,EAAAA,OAAsByN,EAEzC4gB,GACGlB,GAAgBhd,UACnB,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEsd,UACjD,IAAK/Z,EACH,OAGF5Y,GAASoL,EAAAA,EAAAA,MACT,MAAM,SAAEsoB,EAAQ,MAAER,GAAUlzB,EAAO8xB,SAE7BiF,EAAYne,EAAOwa,KAAKrkB,IAAI,EAAGzM,QAASA,GAE1C4wB,EAAMM,QACRN,EAAMM,OAAOtxB,QAASI,IACpB,IAAKy0B,EAAUtyB,SAASnC,GAAK,CAC3B,MAAM,MAAEuN,GAAU6jB,EAASpxB,IAAO,CAAC,EAC/BuN,IAASmnB,EAAAA,GAAAA,GAAYnnB,EAAO8iB,IAC9BoE,EAAU10B,QAAQC,EAEtB,IAIJtC,GAASmzB,EAAAA,EAAAA,KACPnzB,EACA,SACA4Y,EAAOgZ,KACPhZ,EAAOwa,MAGTpzB,GAASi3B,EAAAA,EAAAA,IAAoBj3B,EAAQ4Y,EAAOgZ,KAAMmF,EAAW1yB,IAC7D2G,EAAAA,EAAAA,IAAUhL,QAKhBgM,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,MAAE4gB,EAAK,MAAEtuB,GAAQC,EAAAA,EAAAA,OAAsByN,EAExB,iBAAV4gB,GACJlB,GAAgB,KAEnBiB,GADA1yB,GAASoL,EAAAA,EAAAA,MACUunB,EAAO3yB,EAAOmX,QAAQ+f,uBAAmB3tB,EAAWlF,QAK7E2H,EAAAA,EAAAA,IAAiB,iBAAkB,CAAChM,EAAQmD,EAAS4O,KACnD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,GAC5C,MAAE4gB,EAAK,OAAEhL,IAAWznB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO8yB,UAEnC,iBAAVxE,GACJlB,GAAgB,KAEnBiB,GADA1yB,GAASoL,EAAAA,EAAAA,MACUunB,EAAO3yB,EAAOmX,QAAQ+f,kBAAmBvP,EAAQtjB,QAK1E2H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,MAAE/D,GAAU+D,GACZ,KAAE6f,GAAS5xB,EAAO8xB,SAASU,SAE5Bf,GAAgBhd,UACnBzU,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACH8xB,SAAU,IACL9xB,EAAO8xB,SACVU,SAAU,IACLxyB,EAAO8xB,SAASU,SACnBxkB,YAINhD,EAAAA,EAAAA,IAAUhL,GAEV,MAAM4Y,QAAevD,EAAAA,EAAAA,IAAQ,wBAAyB,CAAErH,QAAO4jB,SAE/D5xB,GAASoL,EAAAA,EAAAA,MAEJwN,GAAU5Y,EAAO8xB,SAASU,SAASxkB,QAAUA,IAIlDhO,GAASo3B,EAAAA,EAAAA,KAAuBp3B,EAAQgO,EAAO4K,EAAOkZ,SAAUlZ,EAAOgZ,OAEvE5mB,EAAAA,EAAAA,IAAUhL,SAIdgM,EAAAA,EAAAA,IAAiB,wBAA0BhM,IAClC,IACFA,EACH8xB,SAAU,IACL9xB,EAAO8xB,SACVU,SAAU,CAAC,OAKjBxmB,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,MAAE/D,GAAU+D,EAElB,OAAOslB,EAAAA,EAAAA,KAA0Br3B,EAAQgO,MAG3ChC,EAAAA,EAAAA,IAAiB,2BAA6BhM,IACrC,IACFA,EACH4oB,aAAc,IACT5oB,EAAO4oB,aACV4J,SAAU,CAAC,OAKjBxmB,EAAAA,EAAAA,IAAiB,4BAA6ByI,UAC5C,MAAM2f,QAAyB/e,EAAAA,EAAAA,IAAQ,8BAClC+e,IAILp0B,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACH4oB,aAAc,IACT5oB,EAAO4oB,aACV0O,YAAalD,EAAiBhB,KAAKrkB,IAAI,EAAGzM,QAASA,GACnD2G,KAAM,IACDjJ,EAAO4oB,aAAa3f,SACpBoG,EAAAA,EAAAA,IAAqB+kB,EAAiBhB,KAAKmE,QAASnc,GAAQA,EAAI0W,UAAY,IAAK,QAGxFA,SAAU,IACL9xB,EAAO8xB,SACV4B,SAAU,IACL1zB,EAAO8xB,SAAS4B,aAChBrkB,EAAAA,EAAAA,IAAqB+kB,EAAiBhB,KAAM,UAIrDpoB,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,iBAAkByI,MAAOzU,EAAQmD,EAAS4O,KACzD,MAAM,eAAEkgB,EAAc,kBAAEuF,EAAiB,MAAEnzB,GAAQC,EAAAA,EAAAA,OAAsByN,GACrEylB,IAAsB1C,EAAAA,EAAAA,KAAiB90B,EAAQiyB,UAC3CD,GAAahyB,EAAQmD,EAAS8uB,GAGtCjyB,GAASoL,EAAAA,EAAAA,MACT,MAAMgQ,GAAM0Z,EAAAA,EAAAA,KAAiB90B,EAAQiyB,GAChC7W,GAAKgX,YAIVpyB,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BmyB,0BAA2B/W,EAAIgX,WAC9B/tB,IACH2G,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,0BAA2ByI,UAC1C,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,4BACxBuD,IAIL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASy3B,EAAAA,EAAAA,KAA+Bz3B,EAAQ4Y,EAAOgZ,KAAMhZ,EAAO8e,gBACpE1sB,EAAAA,EAAAA,IAAUhL,M,4BC1yBZ,MAAMyxB,IAAkBC,EAAAA,EAAAA,IAAUld,GAAOA,IAAM,KAAK,GAoVpDC,eAAekjB,GAA6B33B,EAAqBoD,EAAe8D,GAC9E,KAAK0wB,EAAAA,GAAAA,IAAYx0B,MAAUqgB,EAAAA,GAAAA,IAAcrgB,GACvC,OAEF,MAAMwX,GAAe3V,EAAAA,EAAAA,KAAkBjF,EAAQoD,EAAKd,GAAI4E,GACxD,GAAI0T,EACF,OAAOA,EAET,MAAMhC,QAAevD,EAAAA,EAAAA,IAAQ,eAAgB,CAAEjS,OAAM8D,cACrD,MAAkB,oBAAX0R,OAA+BrP,EAAYqP,GAAQ5X,OAC5D,EA5VAgL,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,MAAE4gB,EAAK,MAAEtuB,GAAQC,EAAAA,EAAAA,OAAsByN,GACvC,OAAE3Q,IAAWlB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOwzB,aAE7ClF,IAAUvxB,GACPqwB,GAAgBhd,UACnB,MAAOqjB,EAAcC,SAAyBxW,QAAQC,IAAI,EACxDnM,EAAAA,EAAAA,IAAQ,cAAe,CAAEsd,WACzBtd,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEsd,YAGlC3yB,GAASoL,EAAAA,EAAAA,MACT,MAAM4sB,GAAqBC,EAAAA,EAAAA,KAA+Bj4B,EAAQqE,GAClE,IAAKyzB,IAAiBE,GAAuBrF,IAAUqF,EAGrD,OAFAh4B,GAASk4B,EAAAA,EAAAA,KAAiCl4B,EAAQ,CAAEgJ,OAAO,GAAS3E,QACpE2G,EAAAA,EAAAA,IAAUhL,GAIZ,MAAM,iBACJm4B,EAAgB,gBAAEC,GAChBN,EAEJ93B,GAASk4B,EAAAA,EAAAA,KAAiCl4B,EAAQ,CAAEgJ,OAAO,GAAS3E,GACpErE,GAASgqB,EAAAA,EAAAA,KAAmBhqB,EAAQ,CAClCq4B,aAAc,CACZC,QAASH,GAEXI,cAAe,KACVr4B,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOwzB,aAAaU,cAC9CD,QAASF,GAEXnO,cAAe8N,GACd1zB,IAEH2G,EAAAA,EAAAA,IAAUhL,QAKhBgM,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,KAAEoD,EAAI,MAAE9Q,GAAQC,EAAAA,EAAAA,OAAsByN,EACtCymB,EAAUrjB,GAAOsjB,EAAAA,GAAAA,IAAiBtjB,GAAQA,EAEhDnV,GAASgqB,EAAAA,EAAAA,KAAmBhqB,EAAQ,CAClC04B,QAASvjB,EACTqjB,UACA7F,MAAO,GACPgG,cAAe,KACVz4B,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOwzB,aAAac,cAC9C5qB,KAAM,CACJ6qB,gBAAYrvB,EACZsvB,SAAU,GACVC,aAAc,KAGjBz0B,IACH2G,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQ41B,qBAAqB,CAAE32B,KAAM,OAAQiC,aAG/C2H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,KACJ3P,EAAI,QAAE42B,EAAO,yBAAEC,EAAwB,kCAAEC,EAAiC,MAAE70B,GAAQC,EAAAA,EAAAA,OAClFyN,EAEAmnB,IACFl5B,GAASk4B,EAAAA,EAAAA,KAAiCl4B,EAAQ,CAAEyQ,UAAU,GAAQpM,IACtE2G,EAAAA,EAAAA,IAAUhL,GACVA,GAASoL,EAAAA,EAAAA,OAGX,MAAM,MACJunB,EAAK,cAAEgG,EAAa,OAAEv3B,IACpBlB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOwzB,cAC5B,WACJe,EAAU,SAAEC,EAAQ,aAAEC,EAAY,iBAAEK,EAAgB,eAAEC,IAClDH,GAA4BN,IAAgBv2B,IAAU,CAAC,EAG7D,QAAmBmH,IAAfqvB,KAA8BA,GAAeC,GAAYA,EAASh3B,QAAU+2B,GAC9E,OAGF,MAAMx1B,EAAOhC,GAASkZ,EAAAA,EAAAA,KAAWta,EAAQoB,QAAUmI,GA8DrDkL,eAA2DzU,EAAW0X,GAapE,MAAM,MACJib,EAAQ,GAAE,KAAEvwB,EAAI,QAAE42B,EAAO,WAAEK,EAAU,SAAExhB,EAAQ,WAAEyhB,EAAU,KAC3Djf,EAAI,QAAEme,EAAO,QAAEE,EAAO,yBAAEO,EAAwB,MAAE50B,GAAQC,EAAAA,EAAAA,OACxDoT,EAOJ,IAAIkB,EAYA2gB,EAjBS,gBAATn3B,IACFpC,GAASk4B,EAAAA,EAAAA,KAAiCl4B,EAAQ,CAAEw5B,aAAa,GAAQn1B,IACzE2G,EAAAA,EAAAA,IAAUhL,IAiBZ,MAAMy5B,GAAsBv5B,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOwzB,aAAa6B,YAEvE,GAAIrf,EAAM,CACR,MAAMsf,GAAsBtkB,EAAAA,EAAAA,IAAQ,uBAAwB,CAC1DgF,OACAsY,QACAvwB,OACAyW,MAAO+gB,EAAAA,IACP/hB,WACA6gB,UACAF,YAGIqB,GADStf,EAAAA,EAAAA,IAAcF,IACGA,EAAKhR,SAAUgM,EAAAA,EAAAA,IAAQ,cAAe,CACpEjS,KAAMiX,EACNsY,QACA9Z,MAAOihB,EAAAA,WACJvwB,GAEEwwB,EAAcC,SAAgBzY,QAAQC,IAAI,CAACmY,EAAqBE,IAEvE,GAAIE,EAAc,CAChB,MAAM,SACJtpB,EAAQ,WAAEmoB,EAAU,aAAEE,GACpBiB,GAEIC,OAAQC,EAAW,MAAEnhB,GAAUkhB,GAAU,CAAC,EAElDphB,EAAS,CACPohB,OAAQC,EACRC,iBAAkBphB,EAClBrI,WACAmoB,aACAE,eAEJ,CACF,MAYE,GAXAlgB,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CAC7Csd,QACA0G,aACAxhB,WACAyhB,aACAzgB,MAAO+gB,EAAAA,IACPx3B,OACA42B,UACAR,UACAE,aAEElN,EAAAA,EAAAA,IAAWmH,GAAQ,CACrB,MAAMwH,GAAOC,EAAAA,EAAAA,IAAiBzH,GACX,sBAAfwH,GAAM/3B,KACRm3B,QAgFR9kB,eAAsCzU,EAAqBm6B,GACzD,MAAM,SAAEtH,EAAQ,UAAE3rB,GAAcizB,EAC1BE,GAAYC,EAAAA,EAAAA,KAAqBt6B,EAAQ6yB,GAC/C,GAAIwH,EACF,OAAO1C,GAA6B33B,EAAQq6B,EAAWnzB,GAEzD,MAAM,KAAE9D,SAAeiS,EAAAA,EAAAA,IAAQ,oBAAqBwd,IAAa,CAAC,EAClE,OAAKzvB,EAGEu0B,GAA6B33B,EAAQoD,EAAM8D,QAHlD,CAIF,CA3F4BqzB,CAAuBv6B,EAAQm6B,GAC3B,uBAAfA,GAAM/3B,OACfm3B,QA2FR,SAAiCv5B,EAAqBm6B,GACpD,MAAM,UAAEvnB,EAAS,UAAE1L,GAAcizB,EAC3BK,GAAoBC,EAAAA,EAAAA,IAAY7nB,GAChCxP,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQw6B,GAChC,GAAKp3B,EAGL,OAAOu0B,GAA6B33B,EAAQoD,EAAM8D,EACpD,CAnG4BwzB,CAAwB16B,EAAQm6B,GAExD,CAGFn6B,GAASoL,EAAAA,EAAAA,MAEL6tB,IACFj5B,GAASgqB,EAAAA,EAAAA,KAAmBhqB,EAAQ,CAClC24B,cAAe,MACTz4B,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOwzB,cAAgB,CAAC,GAAGc,cACtD,CAACv2B,QAAOmH,IAETlF,IAEL,MAAM2zB,GAAqBC,EAAAA,EAAAA,KAA+Bj4B,EAAQqE,GAClE,IAAKuU,GAAqB,KAAV+Z,GAAgBA,IAAUqF,EAGxC,OAFAh4B,GAASk4B,EAAAA,EAAAA,KAAiCl4B,EAAQ,CAAEyQ,UAAU,EAAO+oB,aAAa,GAASn1B,QAC3F2G,EAAAA,EAAAA,IAAUhL,GAIRu5B,IACF3gB,EAAOggB,WAAahgB,EAAOnI,SAASpO,QAAQk3B,IAG9C,MAAM,SACJ9oB,EAAQ,iBAAEkqB,EAAgB,WAAE/B,EAAU,eAAEQ,EAAc,aAAEN,EAAY,iBAAEK,GACpEvgB,EAEE8gB,EAAc9gB,EAAO8gB,aAAeD,EAEtCkB,IACF36B,GAAS46B,EAAAA,EAAAA,KAAgB56B,EAAQ26B,IAG/BlqB,EAAS5O,SACX7B,GAAS4N,EAAAA,EAAAA,KAAY5N,EAAQyQ,IAG/BzQ,GAAS66B,EAAAA,EAAAA,KACP76B,EACAyQ,EACAmoB,EACAx2B,EACAg3B,EACAN,EACAK,EACAO,EACAr1B,GAGEuU,EAAOohB,SACTh6B,GAAS86B,EAAAA,EAAAA,KAAa96B,EAAQqa,EAAM/X,GAAIsW,EAAOshB,iBAAmBthB,EAAOohB,SAG3E,MAAMe,EAAeniB,EAAOohB,QAAQjrB,IAAI,EAAGzM,QAASA,GAAIuC,KAAK,CAACC,EAAGC,IAAMA,EAAID,GAO3E,GANA9E,GAASgqB,EAAAA,EAAAA,KAAmBhqB,EAAQ,CAClCg7B,cAAeD,GACd12B,IAEH2G,EAAAA,EAAAA,IAAUhL,GAEG,gBAAToC,GAA0Bs3B,IAAgBA,EAAYuB,cAAgBpjB,GACpC,IAAjC4hB,GAAqByB,QAAe,CACvC,MAAMC,GAAOra,EAAAA,EAAAA,OACbb,EAAAA,EAAAA,MAAatQ,iBAAiB,CAC5BoR,KAAM,OACN/f,QAAS,CACP4O,IAAK,8BACL8Q,UAAW,CACTpD,OAAOuD,EAAAA,EAAAA,IAAkBsa,EAAMzB,EAAY0B,gBAInD,CACF,CAjOErC,CAAqB/4B,EAAQ,CAC3B2yB,QACAvwB,OACA42B,UACAC,2BACAI,WAAYD,EACZvhB,SAAUihB,EACVQ,WATiBH,GAAmB7e,EAAAA,EAAAA,KAAWta,EAAQm5B,QAAoB5vB,EAU3E8Q,KAAMjX,EACNiB,aAIJ2H,EAAAA,EAAAA,IAAiB,uBAAwByI,MAAOzU,EAAQmD,EAAS4O,KAC/D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5CspB,GAAiBn7B,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOwzB,aAAawD,eAC5D1T,EAAS0T,GAAgBnT,WAC/B,GAAImT,GAAgB/C,UAAY3Q,EAAQ,OAExC3nB,GAASk4B,EAAAA,EAAAA,KAAiCl4B,EAAQ,CAAEs7B,SAAS,GAAQj3B,IACrE2G,EAAAA,EAAAA,IAAUhL,GAEV,MAAM4Y,QAAevD,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEsS,WAGtD,GADA3nB,GAASoL,EAAAA,EAAAA,OACJwN,EAGH,OAFA5Y,GAASk4B,EAAAA,EAAAA,KAAiCl4B,EAAQ,CAAEs7B,SAAS,GAASj3B,QACtE2G,EAAAA,EAAAA,IAAUhL,GAIZA,GAASgqB,EAAAA,EAAAA,KAAmBhqB,EAAQ,CAClCq7B,eAAgB,CACd/C,QAAS,IAAK+C,GAAgB/C,SAAW,MAAQ1f,EAAO0f,SACxDpQ,WAAYtP,EAAOsP,aAEpB7jB,GACHrE,GAASk4B,EAAAA,EAAAA,KAAiCl4B,EAAQ,CAAEs7B,SAAS,GAASj3B,IAEtE2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,wBAAyByI,MAAOzU,EAAQmD,EAAS4O,KAChE,MAAM,MAAE4gB,EAAK,MAAEtuB,GAAQC,EAAAA,EAAAA,OAAsByN,EAEvC6G,QAAevD,EAAAA,EAAAA,IAAQ,wBAAyBsd,GAEtD3yB,GAASoL,EAAAA,EAAAA,MACJwN,IAIL5Y,GAASgqB,EAAAA,EAAAA,KAAmBhqB,EAAQ,CAClC05B,YAAa9gB,GACZvU,IAEH2G,EAAAA,EAAAA,IAAUhL,M,gBCkGZyU,eAAe8mB,GACbv7B,EACAqa,EACAxS,EACAzF,EACAyV,EACAG,GAAkB,EAClBU,MACIrU,GAAQC,EAAAA,EAAAA,QAEZ,MAAMk3B,EAAe9iB,EAAgB1Y,EAAOiC,cAAiBoY,EAAK/X,GAE5DsW,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CACnDgF,OACAjY,OACAyW,MAA4B,EAArB4iB,EAAAA,GACP5zB,WACAgQ,WACAa,kBAGF,IAAKE,EACH,OAGF,MAAM,iBACJ+hB,EAAgB,SAAElqB,EAAQ,WAAEmoB,EAAU,aAAEE,GACtClgB,EAEE3P,GAAOoG,EAAAA,EAAAA,IAAqBoB,EAAU,MACtCirB,EAAc3zB,OAAO8G,KAAK5F,GAAM8F,IAAIlE,QAE1C7K,GAASoL,EAAAA,EAAAA,OAEauwB,EAAAA,EAAAA,KAA+B37B,EAAQqE,KAK7DrE,GAAS46B,EAAAA,EAAAA,KAAgB56B,EAAQ26B,GACjC36B,GAASkZ,EAAAA,EAAAA,KAAoBlZ,EAAQw7B,EAAcvyB,GACnDjJ,GAAS47B,EAAAA,EAAAA,KACP57B,EAAQw7B,EAAc3zB,EAAUzF,EAAMs5B,EAAa9C,EAAYE,EAAcz0B,IAE/E2G,EAAAA,EAAAA,IAAUhL,GAELgY,GACEujB,GAAkBv7B,EAAQqa,EAAMxS,EAAUzF,EAAM02B,GAAc,EAAMpgB,EAAerU,GAE5F,EA5RA2H,EAAAA,EAAAA,IAAiB,sBAAuByI,MAAOzU,EAAQmD,EAAS4O,KAC9D,MAAM,MACJ4gB,EAAK,OAAEvxB,EAAM,SAAEyG,EAAWD,EAAAA,GAAc,MAAEvD,GAAQC,EAAAA,EAAAA,OAChDyN,GAAW,CAAC,EAEhB,IAAK3Q,EAAQ,OAEb,MAAMa,EAAgBjC,EAAOiC,cACvByW,GAAgB/M,EAAAA,EAAAA,IAAiBvK,EAAQyG,EAAU5F,GACnD0W,EAAaD,EAAgB5M,OAAOjE,GAAYzG,EAEhDiZ,EAAO1B,GAAa2B,EAAAA,EAAAA,KAAWta,EAAQ2Y,QAAcpP,EAC3D,IAAIsyB,GAAgBC,EAAAA,EAAAA,KAA0B97B,EAAQqE,GACtD,IAAKgW,EACH,OAGGwhB,IACH77B,GAAS+7B,EAAAA,EAAAA,KAAmB/7B,EAAQ2Y,EAAY9Q,EAAU,CAAC,EAAGxD,IAC9D2G,EAAAA,EAAAA,IAAUhL,GACVA,GAASoL,EAAAA,EAAAA,OAEXywB,GAAgBC,EAAAA,EAAAA,KAA0B97B,EAAQqE,GAElD,MAAM,QACJ9C,EAAO,SAAEy6B,EAAQ,KAAE55B,EAAI,UAAE65B,GACvBJ,EACEK,EAAoB36B,GAASoxB,QAAUA,EAEvC9a,EAAWqkB,EAAoB36B,GAASu3B,kBAAevvB,EACvD8vB,EAAa6C,EAAoB36B,GAAS63B,oBAAiB7vB,EAC3D4yB,EAAeD,EAAoB36B,GAAS43B,sBAAmB5vB,EAC/D+vB,EAAa4C,GAAqBC,GAAe30B,EAAAA,EAAAA,KAAWxH,EAAQm8B,QAAgB5yB,EAG1F,IADwB0yB,IAAcD,KACdrJ,EAKtB,OAJA3yB,GAAS+7B,EAAAA,EAAAA,KAAmB/7B,EAAQ2Y,EAAY9Q,EAAU,CACxDu0B,mBAAe7yB,GACdlF,QACH2G,EAAAA,EAAAA,IAAUhL,GASZ,IAAI4Y,EAmCJ,GAxCA5Y,GAAS+7B,EAAAA,EAAAA,KAAmB/7B,EAAQ2Y,EAAY9Q,EAAU,CACxDu0B,cAAezJ,GACdtuB,IACH2G,EAAAA,EAAAA,IAAUhL,GAGG,SAAToC,IACFwW,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CAC7CgF,OACAjY,KAAM,OACNuwB,MAAOsJ,EAAY,IAAItJ,IAAUA,EACjC9qB,WACAgR,MAAOwjB,EAAAA,IACPxkB,WACAa,gBACAsjB,cAIS,YAAT55B,IACFwW,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CAC7CjT,KAAM,OACNuwB,MAAOsJ,EAAY,IAAItJ,IAAUA,EACjC9Z,MAAOwjB,EAAAA,IACPxkB,WACAwhB,aACAC,gBAIS,aAATl3B,IACFwW,QAAevD,EAAAA,EAAAA,IAAQ,oBAAqB,CAC1CinB,QAAS3J,EACT9Z,MAAOwjB,EAAAA,IACPxkB,WACAyhB,aACAD,iBAICzgB,EACH,OAGF,MAAM,iBACJ+hB,EAAgB,SAAElqB,EAAQ,WAAEmoB,EAAU,aAAEE,EAAY,eAAEM,EAAc,iBAAED,GACpEvgB,EAEE8iB,EAAcjrB,EAAS1B,IAAIwtB,GAAAA,GAEjCv8B,GAASoL,EAAAA,EAAAA,MAETywB,GAAgBC,EAAAA,EAAAA,KAA0B97B,EAAQqE,GAClD,MAAMm4B,EAAgBX,GAAeG,YAAaS,EAAAA,EAAAA,IAAeT,EAAUH,EAAcG,UAEzF,IAAKH,GADoBA,GAAeO,gBAAkBzJ,GAChB6J,EACxC,OAGF,MAAMhB,EAAe9iB,EAAgBzW,EAAgBoY,EAAK/X,GAE1DtC,GAAS46B,EAAAA,EAAAA,KAAgB56B,EAAQ26B,GACjC36B,GAAS4N,EAAAA,EAAAA,KAAY5N,EAAQyQ,GAC7BzQ,GAAS+7B,EAAAA,EAAAA,KAAmB/7B,EAAQw7B,EAAc3zB,EAAU,CAC1Du0B,mBAAe7yB,GACdlF,GACHrE,GAAS08B,EAAAA,EAAAA,KAA0B18B,EAAQw7B,EAAc3zB,EAAU,CACjEgxB,SAAU6C,EACV9C,aACAE,eACAM,iBACAD,mBACAxG,MAAOA,GAAS,IACfqJ,EAAU33B,IACb2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,gBAAiB,CAAChM,EAAQmD,EAAS4O,KAClD,MAAM,QAAEuqB,EAAO,MAAEj4B,GAAQC,EAAAA,EAAAA,OAAsByN,EAEzCsK,GAAcvP,EAAAA,EAAAA,KAAyB9M,EAAQqE,GACrD,IAAKgY,EACH,OAGF,MAAMsgB,EAAaL,EAAQM,QAAQ,KAAM,IAEzCz5B,EAAQ44B,mBAAmB,CACzB36B,OAAQib,EAAYjb,OACpByG,SAAUwU,EAAYxU,SACtBhF,OAAQ,CACNo5B,WAAW,EACXY,eAAgBF,GAElBt4B,aAIJ2H,EAAAA,EAAAA,IAAiB,4BAA6B,CAAChM,EAAQmD,EAAS4O,KAC9D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,GAC5C,OAAE3Q,EAAM,SAAEyG,IAAaiF,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EACzE,IAAKjD,IAAWyG,EACd,OAGF,MAAM6Q,GAAgB/M,EAAAA,EAAAA,IAAiBvK,EAAQyG,EAAU7H,EAAOiC,eAC1D0W,EAAaD,EAAgB5M,OAAOjE,GAAYzG,EAEhDiZ,GAAOC,EAAAA,EAAAA,KAAWta,EAAQ2Y,GAC1BkjB,GAAgBF,EAAAA,EAAAA,KAA+B37B,EAAQqE,GAE7D,IAAKgW,IAASwhB,EACZ,OAGF,MAAQiB,YAAa16B,EAAI,cAAEu2B,GAAkBkD,EACvCkB,EAAiB36B,GAAQu2B,GAAiBA,EAAcv2B,GACxDyV,EAAWklB,GAAgBjE,aAE5B12B,GAIAm5B,GAAkBv7B,EAAQqa,EAAMxS,EAAUzF,EAAMyV,OAAUtO,EAAWmP,EAAerU,MAE3F2H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,OACJ3Q,EAAM,SAAEyG,EAAQ,sBAAEm1B,EAAqB,MAAEnkB,EAAK,UAAEf,EAAS,MAAEzT,GAAQC,EAAAA,EAAAA,OACjEyN,EACJ,IAAK3Q,IAAWyG,IAAam1B,EAC3B,OAGF,MAAMtkB,GAAgB/M,EAAAA,EAAAA,IAAiBvK,EAAQyG,EAAU7H,EAAOiC,eAC1D0W,EAAaD,EAAgB5M,OAAOjE,GAAYzG,EAEhDgC,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQ2Y,GAChC,IAAKvV,EACH,OAEF,IAAIy4B,GAAgBoB,EAAAA,EAAAA,KAA6Bj9B,EAAQqE,GAEzD,IAAKw3B,EAAe,CAIlB,GAHA77B,GAASk9B,EAAAA,EAAAA,KAAiCl9B,EAAQoB,EAAQyG,EAAUxD,IACpE2G,EAAAA,EAAAA,IAAUhL,GACV67B,GAAgBoB,EAAAA,EAAAA,KAA6Bj9B,EAAQqE,IAChDw3B,EACH,OAEF77B,GAASoL,EAAAA,EAAAA,KACX,EAwLFqJ,eACEzU,EACAqa,EACAxS,EACAm1B,EACAG,EACArlB,EACAY,EACAG,EAAQukB,EAAAA,QACJ/4B,GAAQC,EAAAA,EAAAA,QAEZ,MAAM,SAAE+4B,GAAar9B,EACrB,IAAKq9B,GAAYF,EAAsBxG,UACrC,OAEF,IAAI2G,EA1GN,SACE5lB,EACAslB,GAEA,IAAIO,EAAAA,EAAAA,IAAyBP,EAAuBtlB,EAAO4lB,eAAezE,UACxE,OAAOnhB,EAAO4lB,eAEhB,MAAM1jB,EAAQlC,EAAO8lB,SAAS3jB,UAC3B4jB,IAAYF,EAAAA,EAAAA,IAAyBP,EAAuBS,EAAQ5E,WAGvE,IAAe,IAAXjf,EAIF,YAHIlC,EAAO4lB,gBAAkB5lB,EAAO4lB,eAAezE,SAASh3B,QAC1D6V,EAAO8lB,SAAS9xB,KAAKgM,EAAO4lB,iBAIhC,MAAM1kB,EAASlB,EAAO8lB,SAASE,OAAO9jB,EAAO,GAAG,GAEhD,OADAlC,EAAO8lB,SAAS9xB,KAAKgM,EAAO4lB,gBACrB1kB,CACT,CAsFuB+kB,CAAoCR,EAAuBH,GAMhF,QAJkBzzB,IAAduO,IACFA,EAnEJ,SAA+B8lB,EAA0BN,GACvD,IAAKA,EAAgB,OAAOjlB,EAAAA,GAAkBE,OAC9C,MAAMslB,EAA8BP,EAAezE,SAASh3B,OAEtDi8B,EAAmBR,EAAezE,SAASkF,QAAQH,GACzD,IAA0B,IAAtBE,EAAyB,OAAOzlB,EAAAA,GAAkBE,OAEtD,GAAI+kB,EAAeU,aAAaC,4BAC3BX,EAAeU,aAAaE,0BAC/B,OAGF,MAEMC,EAxVqB,EAsVJx9B,KAAK6B,MAAMq7B,EAA8B,GAEF,EAxVnC,EAyVrBO,EAAiBP,EAA8B,EAErD,GAAIC,GAAoBK,EAAe,CACrC,GAAIb,EAAeU,aAAaC,2BAA4B,OAC5D,OAAO5lB,EAAAA,GAAkBC,SAC3B,CACA,GAAIwlB,GAAoBM,EAAiBD,EAAe,CACtD,GAAIb,EAAeU,aAAaE,0BAA2B,OAC3D,OAAO7lB,EAAAA,GAAkBI,QAC3B,CAEF,CAyCgB4lB,CAAsBrB,EAAuBM,SAGzC/zB,IAAduO,EACF,OAGF,MAAMD,EArFR,SACEC,EACA8lB,EACAH,GAEA,OAAKA,EACD3lB,IAAcO,EAAAA,GAAkBC,UAAkBmlB,EAAQ5E,SAAS,GACnE/gB,IAAcO,EAAAA,GAAkBI,SAAiBglB,EAAQ5E,SAAS4E,EAAQ5E,SAASh3B,OAAS,GACzF+7B,EAHcA,CAIvB,CA4EmBU,CAA4BxmB,EAAWklB,EAAuBM,GACzEplB,EA/FR,SACEJ,EACAe,GAEA,OAAIf,IAAcO,EAAAA,GAAkBC,UAAkB,EAClDR,IAAcO,EAAAA,GAAkBI,WAAmBI,EAAQ,KACtDlY,KAAK6X,MAAMK,EAAQ,GAAK,EACnC,CAwFoB0lB,CAA6BzmB,EAAWe,GAEpD2iB,EAAe9iB,EAAgB1Y,EAAOiC,cAAiBoY,EAAK/X,GAElEtC,GAASw+B,EAAAA,EAAAA,KAA0Bx+B,EAAQw7B,EAAc3zB,GAAU,EAAMxD,IACzE2G,EAAAA,EAAAA,IAAUhL,GAEV,MAAM4Y,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CACnDgF,OACAjY,KAAM,QACNyW,QACAhR,WACAgQ,WACAa,gBACAR,cAKF,GAFAlY,GAASoL,EAAAA,EAAAA,OAEJwN,EAGH,OAFA5Y,GAASw+B,EAAAA,EAAAA,KAA0Bx+B,EAAQw7B,EAAc3zB,GAAU,EAAOxD,QAC1E2G,EAAAA,EAAAA,IAAUhL,GAIZ,MAAM,SACJyQ,EAAQ,iBAAEkqB,GACR/hB,EAEE3P,GAAOoG,EAAAA,EAAAA,IAAqBoB,EAAU,MACtCirB,EAAc3zB,OAAO8G,KAAK5F,GAAM8F,IAAIlE,QAE1C7K,GAAS46B,EAAAA,EAAAA,KAAgB56B,EAAQ26B,GACjC36B,GAASkZ,EAAAA,EAAAA,KAAoBlZ,EAAQw7B,EAAcvyB,GAEnD,MAAM+0B,EAlFR,SACElmB,EACAe,EAAe4lB,EACfnB,GAEA,IAAIY,EAA4B3nB,QAAQ+mB,GAAgBU,aAAaE,2BACjED,EAA6B1nB,QAAQ+mB,GAAgBU,aAAaC,4BAStE,OAPIQ,EAAmB5lB,IACjBf,IAAcO,EAAAA,GAAkBI,SAClCylB,GAA4B,EACnBpmB,IAAcO,EAAAA,GAAkBC,YACzC2lB,GAA6B,IAG1B,CACLC,4BACAD,6BAEJ,CA+DuBS,CAAiB5mB,EAAWe,EAAO6iB,EAAY75B,OAAQy7B,GAEtEqB,GAAcC,EAAAA,EAAAA,IAAuB31B,EAAMyyB,GAAa,GAC9D4B,GAAiBuB,EAAAA,EAAAA,KACfF,EACAX,EACAV,GAGFt9B,GAAS8+B,EAAAA,EAAAA,KACP9+B,EAAQw7B,EAAc3zB,EAAUy1B,EAAgBH,EAAuB94B,GAEzErE,GAASw+B,EAAAA,EAAAA,KAA0Bx+B,EAAQw7B,EAAc3zB,GAAU,EAAOxD,IAC1E2G,EAAAA,EAAAA,IAAUhL,EACZ,CAjQO++B,CAAgB/+B,EACnBoD,EACAyE,EACAm1B,EACAnB,EACA/jB,EACAY,EACAG,EACAxU,MAGJ2H,EAAAA,EAAAA,IAAiB,uBAAwByI,MAAOzU,EAAQmD,EAAS4O,KAC/D,MAAM,UAAEitB,EAAS,MAAE36B,GAAQC,EAAAA,EAAAA,OAAsByN,GAE3C,OAAE3Q,IAAW0L,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EAC/D,IAAKjD,EACH,OAGF,MAAMgC,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAM8D,QAAkBmO,EAAAA,EAAAA,IAAQ,8BAA+B,CAC7DjS,OACA47B,cAGG93B,GAIL/D,EAAQ4J,aAAa,CACnB3L,OAAQgC,EAAKd,GACb4E,YACA7C,aC/PJ2H,EAAAA,EAAAA,IAAiB,kBAAmByI,MAAOzU,EAAQmD,EAAS4O,KAC1D,MAAM,SAAE8gB,EAAQ,MAAExuB,GAAQC,EAAAA,EAAAA,OAAsByN,GAE1C,OAAE3Q,IAAW0L,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EAC/D,IAAKjD,EACH,OAIF,IAAIlB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO46B,WAAW9jB,WAAa+jB,EAAAA,GAAmBC,WAC3E,OAGFn/B,GAASo/B,EAAAA,EAAAA,KACPp/B,EAAQoB,EAAQ,CAAEi+B,yBAAqB91B,EAAW+1B,qBAAiB/1B,GAAalF,IAElF2G,EAAAA,EAAAA,IAAUhL,GAEV,MAAM,OAAE4Y,EAAM,MAAE/E,SAAiBwB,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEwd,aAEhE7yB,GAASoL,EAAAA,EAAAA,MACTpL,GAASu/B,EAAAA,EAAAA,KACPv/B,GAAmB,IAAX4Y,EAAkBsmB,EAAAA,GAAmBM,SAAWN,EAAAA,GAAmBO,MAAOp7B,GAEpFrE,GAASo/B,EAAAA,EAAAA,KAAiBp/B,EAAQoB,EAAQ,CACxCi+B,qBAAgC,IAAXzmB,EACrB0mB,gBAAiBzM,EACjBhf,SACCxP,IACH2G,EAAAA,EAAAA,IAAUhL,QAEKuJ,IAAXqP,GACFzV,EAAQu8B,sBAAsB,CAAE7mB,MAAO,iBAAkBxU,aAI7D2H,EAAAA,EAAAA,IAAiB,mBAAoByI,MAAOzU,EAAQmD,EAAS4O,KAC3D,MAAM,SAAE8gB,EAAQ,uBAAE8M,EAAsB,MAAEt7B,GAAQC,EAAAA,EAAAA,OAAsByN,GAElE,OAAE3Q,IAAW0L,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EAC/D,IAAKjD,EACH,OAGF,MAAMgC,QAAaw8B,EAAAA,EAAAA,IAAmB5/B,EAAQmD,EAAS/B,EAAQiD,GAC/D,IAAKjB,EAAM,OAEXpD,GAASoL,EAAAA,EAAAA,MAETpL,GAASu/B,EAAAA,EAAAA,KAAyBv/B,EAAQk/B,EAAAA,GAAmBC,WAAY96B,IACzE2G,EAAAA,EAAAA,IAAUhL,GAEV,MAAM4Y,QAAevD,EAAAA,EAAAA,IAAQ,kBAAmB,CAAEjS,OAAMyvB,aACpD8M,SACItqB,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEjS,SAG5CpD,GAASoL,EAAAA,EAAAA,MACTpL,GAASu/B,EAAAA,EAAAA,KAAyBv/B,EAAQ4Y,EAASsmB,EAAAA,GAAmBM,SAAWN,EAAAA,GAAmBO,MAAOp7B,GAC3GrE,GAASo/B,EAAAA,EAAAA,KAAiBp/B,EAAQoD,EAAKd,GAAI,CACzC+8B,yBAAqB91B,EACrB+1B,qBAAiB/1B,EACjBsK,WAAOtK,GACNlF,IACH2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,GAC5C,OAAE3Q,IAAW0L,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EACzDjB,EAAOhC,IAAUoG,EAAAA,EAAAA,KAAWxH,EAAQoB,GACrCA,GAAWgC,IAIhBiS,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEjS,YAGjC4I,EAAAA,EAAAA,IAAiB,2BAA4B,CAAChM,EAAQmD,EAAS4O,KAC7D,MAAM,OAAE3Q,EAAM,OAAEy+B,EAAM,MAAEx7B,GAAQC,EAAAA,EAAAA,OAAsByN,EAEtD/R,GAASo/B,EAAAA,EAAAA,KAAiBp/B,EAAQoB,EAAQ,CAAE0+B,cAAeD,GAAUx7B,IACrE2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,OAAE3Q,EAAM,OAAEy+B,EAAM,MAAEx7B,GAAQC,EAAAA,EAAAA,OAAsByN,EAEhDlP,EAASg9B,EAAS,CAAEE,WAAY,CAAEF,WAAa,CAAEE,gBAAYx2B,GAEnEvJ,GAASo/B,EAAAA,EAAAA,KAAiBp/B,EAAQoB,EAAQyB,EAAQwB,IAClD2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,0BAA2ByI,MAAOzU,EAAQmD,EAAS4O,KAClE,IAAIiU,EAAAA,EAAAA,KAA0BhmB,GAAS,OAEvC,MAAM,OACJoB,EAAM,QAAE4+B,EAAO,UAAEC,EAAS,MAAEpnB,EAAK,MAAExU,GAAQC,EAAAA,EAAAA,OACzCyN,EACEsI,GAAO7S,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1B8+B,GAAQnrB,EAAAA,EAAAA,KAAW/U,EAAQggC,GAAWhgC,EAAOiC,eACnD,IAAKoY,IAAS6lB,EAAO,OAErB,MAAMtnB,QAAevD,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDgF,OAAM6lB,QAAOD,YAAWpnB,UAE1B,IAAKD,EACH,OAEF5Y,GAASoL,EAAAA,EAAAA,MACT,MAAM,QAAE+0B,GAAYvnB,EAEd/V,EAASo9B,EAAY,CAAEG,eAAgBD,GAAY,CAAEA,WAC3DngC,GAASo/B,EAAAA,EAAAA,KAAiBp/B,EAAQoB,EAAQyB,EAAQwB,IAClD2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,yBAA0ByI,MAAOzU,EAAQmD,EAAS4O,KACjE,MAAM,OACJ3Q,EAAM,KAAE+4B,EAAI,UAAE8F,EAAS,WAAEI,EAAU,WAAEC,EAAU,gBAAEC,EAAe,MAAE1wB,EAAK,MAAExL,GAAQC,EAAAA,EAAAA,OAC/EyN,EACEsI,GAAO7S,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKiZ,EAAM,OAEX,MAAMzB,QAAevD,EAAAA,EAAAA,IAAQ,yBAA0B,CACrDgF,OACA8f,OACA8F,YACAI,aACAC,aACAC,kBACA1wB,UAEF,IAAK+I,EACH,OAGF,MAAM,UAAE4nB,EAAS,UAAEC,GAAc7nB,EAEjC5Y,GAASoL,EAAAA,EAAAA,MACT,MAAM,WAAE6zB,IAAe/+B,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC87B,GAAWlB,EAAW9sB,SAAS/Q,GAAQ++B,SAAW,IACrDr+B,OAAQo0B,GAAYA,EAAQiE,OAASqG,EAAUrG,MAC5CiG,EAAiB,IAAKnB,EAAW9sB,SAAS/Q,GAAQg/B,gBAAkB,IAEtEK,EAAUR,UACZG,EAAe/9B,QAAQo+B,GAEvBN,EAAQz0B,KAAK+0B,GAGfzgC,GAASo/B,EAAAA,EAAAA,KAAiBp/B,EAAQoB,EAAQ,CACxC++B,UACAC,kBACC/7B,IACH2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,mBAAoByI,MAAOzU,EAAQmD,EAAS4O,KAC3D,MAAM,OACJ3Q,EAAM,WAAEi/B,EAAU,WAAEC,EAAU,gBAAEC,EAAe,MAAE1wB,EAAK,MAAExL,GAAQC,EAAAA,EAAAA,OAC9DyN,EACEsI,GAAO7S,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKiZ,EAAM,OAEX,MAAMzB,QAAevD,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/CgF,OACAgmB,aACAC,aACAC,kBACA1wB,UAEF,IAAK+I,EACH,OAGF5Y,GAASoL,EAAAA,EAAAA,MACT,MAAM+0B,GAAUjgC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO46B,WAAW9sB,SAAS/Q,GAAQ++B,SAAW,GACrFngC,GAASo/B,EAAAA,EAAAA,KAAiBp/B,EAAQoB,EAAQ,CACxC++B,QAAS,IAAIA,EAASvnB,IACrBvU,IACH2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,2BAA4ByI,MAAOzU,EAAQmD,EAAS4O,KACnE,MAAM,OACJ3Q,EAAM,KAAE+4B,EAAI,MAAE91B,GAAQC,EAAAA,EAAAA,OACpByN,EACEsI,GAAO7S,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKiZ,EAAM,OAMX,UAJqBhF,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDgF,OACA8f,SAGA,OAGFn6B,GAASoL,EAAAA,EAAAA,MACT,MAAMs1B,GAAkBxgC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO46B,WAAW9sB,SAAS/Q,GAC1EpB,GAASo/B,EAAAA,EAAAA,KAAiBp/B,EAAQoB,EAAQ,CACxC++B,QAASO,GAAiBP,SAASr+B,OAAQ+9B,GAAWA,EAAO1F,OAASA,GACtEiG,eAAgBM,GAAiBN,gBAAgBt+B,OAAQ+9B,GAAWA,EAAO1F,OAASA,IACnF91B,IACH2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,mCAAoCyI,MAAOzU,EAAQmD,EAAS4O,KAC3E,MAAM,OACJ3Q,EAAM,QAAE4+B,EAAO,MAAE37B,GAAQC,EAAAA,EAAAA,OACvByN,EACEsI,GAAO7S,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1B8+B,GAAQnrB,EAAAA,EAAAA,KAAW/U,EAAQggC,GAAWhgC,EAAOiC,eAC9CoY,GAAS6lB,SAEO7qB,EAAAA,EAAAA,IAAQ,mCAAoC,CAC/DgF,OACA6lB,YAMFlgC,GAASoL,EAAAA,EAAAA,MACTpL,GAASo/B,EAAAA,EAAAA,KAAiBp/B,EAAQoB,EAAQ,CACxCg/B,eAAgB,IACf/7B,IACH2G,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,0BAA2ByI,MAC1CzU,EAAQmD,EAAS4O,KAEjB,MAAM,OACJ3Q,EAAM,KAAE+4B,EAAI,WAAEwG,EAAU,aAAEC,EAAY,MAAE/nB,EAAK,MAAExU,GAAQC,EAAAA,EAAAA,OACrDyN,EACEsI,GAAO7S,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1By/B,EAAaD,GAAe7rB,EAAAA,EAAAA,KAAW/U,EAAQ4gC,QAAgBr3B,EACrE,IAAK8Q,GAASumB,IAAiBC,EAAa,OAE5C,MAAMjoB,QAAevD,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDgF,OACA8f,OACAwG,aACAE,aACAhoB,UAEF,IAAKD,EACH,OAEF,MAAM,UAAEkoB,GAAcloB,EAEtB5Y,GAASoL,EAAAA,EAAAA,MACT,MAAM21B,GAAoB7gC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO46B,WAAW9sB,SAAS/Q,IAAS2+B,WAChFgB,GAAmBlB,QAAUkB,EAAkBlB,OAAO1F,OAASA,IAIpEn6B,GAASo/B,EAAAA,EAAAA,KAAiBp/B,EAAQoB,EAAQ,CACxC2+B,WAAY,IACPgB,EACHD,cAEDz8B,IACH2G,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,2BAA4ByI,MAC3CzU,EAAQmD,EAAS4O,KAEjB,MAAM,OACJ3Q,EAAM,KAAE+4B,EAAI,WAAEwG,EAAU,aAAEC,EAAY,MAAE/nB,EAAK,MAAExU,GAAQC,EAAAA,EAAAA,OACrDyN,EACEsI,GAAO7S,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1By/B,EAAaD,GAAe7rB,EAAAA,EAAAA,KAAW/U,EAAQ4gC,QAAgBr3B,EACrE,IAAK8Q,GAASumB,IAAiBC,EAAa,OAE5C,MAAMjoB,QAAevD,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDgF,OACA8f,OACAwG,aACAE,aACAhoB,QACAmoB,aAAa,IAEf,IAAKpoB,EACH,OAEF,MAAM,UAAEkoB,GAAcloB,EAEtB5Y,GAASoL,EAAAA,EAAAA,MACT,MAAM21B,GAAoB7gC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO46B,WAAW9sB,SAAS/Q,IAAS2+B,WAChFgB,GAAmBlB,QAAUkB,EAAkBlB,OAAO1F,OAASA,IAGpEn6B,GAASo/B,EAAAA,EAAAA,KAAiBp/B,EAAQoB,EAAQ,CACxC2+B,WAAY,IACPgB,EACHE,WAAYH,IAEbz8B,IACH2G,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,uBAAwByI,MAAOzU,EAAQmD,EAAS4O,KAC/D,MAAM,OACJ3Q,EAAM,WAAEu/B,EAAa,EAAC,aAAEC,EAAY,MAAE/nB,EAAQ,GAC5C9G,EACEsI,GAAO7S,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1By/B,EAAaD,GAAe7rB,EAAAA,EAAAA,KAAW/U,EAAQ4gC,QAAgBr3B,EACrE,IAAK8Q,GAASumB,IAAiBC,EAAa,OAE5C,MAAMjoB,QAAevD,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDgF,OACAsmB,aACAE,aACAhoB,QACAmoB,aAAa,IAEf,IAAKpoB,EACH,OAEF,MAAM,UAAEkoB,GAAcloB,EAEtB5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAE8/B,aAAcJ,KACpD91B,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,sBAAuByI,MAAOzU,EAAQmD,EAAS4O,KAC9D,MAAM,OACJ3Q,EAAM,OAAEqgB,EAAM,WAAE0f,GACdpvB,EACEsI,GAAO7S,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1B0T,GAAOC,EAAAA,EAAAA,KAAW/U,EAAQyhB,GAChC,IAAKpH,IAASvF,EAAM,OAOpB,UALqBO,EAAAA,EAAAA,IAAQ,sBAAuB,CAClDgF,OACAvF,OACAqsB,eAEW,OAEbnhC,GAASoL,EAAAA,EAAAA,MACT,MAAMg2B,GAAa55B,EAAAA,EAAAA,KAAWxH,EAAQoB,GACjCggC,IAELphC,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClC8/B,aAAcE,EAAWF,cAAcp/B,OAAQu/B,GAAaA,EAAS5f,SAAWA,MAElFzW,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,0BAA2ByI,MAAOzU,EAAQmD,EAAS4O,KAClE,MAAM,OACJ3Q,EAAM,WAAE+/B,EAAU,KAAEhH,GAClBpoB,EACEsI,GAAO7S,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC3BiZ,SAEgBhF,EAAAA,EAAAA,IAAQ,0BAA2B,CACtDgF,OACA8mB,aACAhH,WAIFn6B,GAASoL,EAAAA,EAAAA,OACU5D,EAAAA,EAAAA,KAAWxH,EAAQoB,KAGtCpB,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAE8/B,aAAc,KACpDlhC,GAASkpB,EAAAA,EAAAA,KAAmBlpB,EAAQoB,EAAQ,CAC1CkgC,mBAAoB,GACpBC,gBAAiB,KAEnBv2B,EAAAA,EAAAA,IAAUhL,QAGZgM,EAAAA,EAAAA,IAAiB,sBAAuByI,MAAOzU,EAAQmD,EAAS4O,KAC9D,MAAM,OAAE/P,GAAW+P,EACb+C,GAAOC,EAAAA,EAAAA,KAAW/U,EAAQgC,GAC3B8S,SAEgBO,EAAAA,EAAAA,IAAQ,sBAAuBP,KAGpD9U,GAASoL,EAAAA,EAAAA,MACTpL,GAASoqB,EAAAA,EAAAA,KAAmBpqB,EAAQgC,EAAQ,CAC1Cw/B,cAAUj4B,KAEZyB,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,4BAA6ByI,MAAOzU,EAAQmD,EAAS4O,KACpE,MAAM,OACJ0P,EAAM,KAAEggB,EAAI,UAAEC,EAAS,MAAEr9B,GAAQC,EAAAA,EAAAA,OAC/ByN,EAEE+C,GAAOC,EAAAA,EAAAA,KAAW/U,EAAQyhB,GAChC,IAAK3M,EAAM,OAWX,GATA9U,GAASu/B,EAAAA,EAAAA,KAAyBv/B,EAAQk/B,EAAAA,GAAmBC,WAAY96B,IACzE2G,EAAAA,EAAAA,IAAUhL,UAEWqV,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDP,OACA2sB,OACAC,cAQA,OAJA1hC,GAASoL,EAAAA,EAAAA,MACTpL,GAASu/B,EAAAA,EAAAA,KAAyBv/B,EAAQk/B,EAAAA,GAAmBO,MAAOp7B,QACpE2G,EAAAA,EAAAA,IAAUhL,GAKZA,GAASoL,EAAAA,EAAAA,OACTJ,EAAAA,EAAAA,IAAUhL,GAEV,MAAM,GAAEsC,EAAE,WAAEkrB,GAAe1Y,EAE3B,UADsBO,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE/S,KAAIkrB,eAKnD,OAHAxtB,GAASoL,EAAAA,EAAAA,MACTpL,GAASu/B,EAAAA,EAAAA,KAAyBv/B,EAAQk/B,EAAAA,GAAmBO,MAAOp7B,QACpE2G,EAAAA,EAAAA,IAAUhL,GAIZmD,EAAQw+B,sBAAsB,CAAE3/B,OAAQyf,EAAQmgB,uBAAuB,IAEvE5hC,GAASoL,EAAAA,EAAAA,MACTpL,GAASu/B,EAAAA,EAAAA,KAAyBv/B,EAAQk/B,EAAAA,GAAmBM,SAAUn7B,IACvE2G,EAAAA,EAAAA,IAAUhL,GAENyhC,IAASC,GACXv+B,EAAQwM,iBAAiB,CACvB3O,QAAS+0B,EAAAA,GAA0B,4CAA4C8L,EAAAA,EAAAA,IAAuB/sB,IACtGzQ,aAKN2H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,OAAE3Q,EAAM,MAAEiD,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAE1D,OAAOqtB,EAAAA,EAAAA,KAAiBp/B,EAAQoB,EAAQ,CAAEyS,WAAOtK,GAAalF,K,4BCzahE,IAAIy9B,GAsPAC,GAjBJ,SAASC,GAAuChiC,EAAWoB,EAAgByG,GACzE,MAAM5F,EAAgBjC,EAAOiC,cACvByW,GAAgB/M,EAAAA,EAAAA,IAAiBvK,EAAQyG,EAAU5F,GACnD0W,EAAaD,EAAgB5M,OAAOjE,GAAYzG,EAEhDgC,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQ2Y,GAEhC,OAAOtD,EAAAA,EAAAA,IAAQ,gBAAiB,CAC9BjS,OACAyE,WACAgQ,SAAWa,OAA8CnP,EAA9BnG,EAAKmN,uBAChC2H,YAAavX,KAAK6X,MAAMJ,EAAAA,IAAqB,GAAK,GAClDS,MAAOT,EAAAA,IACPM,iBAEJ,EAlPA1M,EAAAA,EAAAA,IAAiB,OAAQ,CAAChM,EAAQmD,KAC5B8+B,EAAAA,KAEFC,QAAQC,IAAI,kBAGVL,IACFnT,aAAamT,IAGf9hC,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IAAKA,EAAQoiC,WAAW,IACjCp3B,EAAAA,EAAAA,IAAUhL,GAGV8hC,GAAuB9V,OAAO7gB,WAAW,KACvCnL,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IAAKA,EAAQoiC,WAAW,IACjCp3B,EAAAA,EAAAA,IAAUhL,GACV8hC,QAAuBv4B,GAvBI,MA0B7B,MAAM,aACJ84B,EAAY,uBAAEC,GACZn/B,GAEJo/B,EAAAA,GAAAA,MAEAF,EAAa,CACXG,SAAU,SACVC,mBAAoBhuB,gBAuBxBA,eAA6DzU,EAAWmD,GACtE,IAAIu/B,GAAoB,EAExB1iC,GAASoL,EAAAA,EAAAA,MAET,IAAIu3B,GAAW,EAGf,MACMC,EADe76B,OAAO8G,KAAK7O,EAAOyQ,SAAS0B,UACbuM,OAAwD,CAACC,EAAKvd,KAChGud,EAAIvd,GAAU2G,OACX8G,KAAK7O,EAAOyQ,SAAS0B,SAAS/Q,GAAQyhC,aACtCnkB,OAAwC,CAACokB,EAAMj7B,KAC9Ci7B,EAAKj4B,OAAOhD,KAAak7B,EAAAA,EAAAA,IAAc,CACrCpuB,OAAO8B,EAAAA,EAAAA,KAAYzW,EAAQoB,EAAQyJ,OAAOhD,IAC1C8b,WAAWC,EAAAA,EAAAA,KAAgB5jB,EAAQoB,EAAQyJ,OAAOhD,IAClDm7B,cAAcC,EAAAA,EAAAA,KAAmBjjC,EAAQoB,EAAQyJ,OAAOhD,MAGnDi7B,GACN,CAAC,GACCnkB,GACN,CAAC,GAGEukB,EAAen7B,OAAO8I,QAAQ7Q,EAAOgJ,MAAMm6B,eAAe3hB,KAAO,CAAC,GAAGzS,IAAI,EAAE3N,EAAQ8F,MACvFjC,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQyJ,OAAO3D,KACxCpF,OAAOyU,SACJ6sB,EAAoBr7B,OAAOC,OAAOhI,EAAOgJ,MAAMm6B,eAAe3N,OAAS,CAAC,GAAGzmB,IAAK7H,IACpFjC,EAAAA,EAAAA,KAAkBjF,EAAQA,EAAOiC,cAAgB4I,OAAO3D,KACvDpF,OAAOyU,SAEV,IAAK,MAAQjU,GAAI+B,KAAW0D,OAAOC,OAAOhI,EAAOiI,SAAU,CACzDjI,GAASoL,EAAAA,EAAAA,MACT,MAAQhK,OAAQyM,EAAehG,SAAUuI,IAAoBtD,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EACnGg/B,EAAiBjzB,GAAmBxI,EAAAA,GACpChB,EAAaiH,GAAiBuC,GAChC1F,EAAAA,EAAAA,KAAiB1K,EAAQ6N,EAAeuC,QAAmB7G,EACzDqjB,EAAc/e,EAAgB7N,EAAOgJ,MAAMC,KAAK4E,QAAiBtE,EACvE,GAAIsE,GAAiB+e,EAAa,CAChC,MAAOhU,EAAQ0qB,SAA0B/hB,QAAQC,IAAI,CACnDwgB,GACEhiC,EACA6N,EACAw1B,GAEFA,IAAmBz7B,EAAAA,KAAmB+D,EAAAA,EAAAA,IAAiBihB,EAAYtqB,GAAI+gC,EAAgBrjC,EAAOiC,oBAIvFsH,GAHH8L,EAAAA,EAAAA,IAAQ,yBAA0B,CAClCjS,KAAMwpB,EACN1lB,UAAW2D,OAAOw4B,OAGxBrjC,GAASoL,EAAAA,EAAAA,MACT,MAAQhK,OAAQmiC,IAAqBz2B,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EAEjF,GAAIuU,GAAU2qB,IAAqB11B,EAAe,CAChD,MAAM21B,GAAsB35B,EAAAA,EAAAA,KAAmB7J,EAAQ6N,GACjD6I,EAAgB7I,IAAkBuE,EAAAA,IACpCpS,EAAOqS,qBAAqBvQ,OAAO,EAAGyQ,gBAAiBA,GAAWxD,IAAI,EAAG/N,aAAcA,GACvF,GACEg5B,GAASyJ,EAAAA,EAAAA,KAAazjC,EAAQ6N,GAC9B61B,EAAoB1J,EAASjyB,OAAOC,OAAOgyB,GAC9CjrB,IAAI,EAAG3H,mBAAoBo8B,EAAoBp8B,IAC/CtF,OAAOyU,SACN,GAEEotB,EAAmB/qB,EAAOnI,SAAS1B,IAAI,EAAGzM,QAASA,GACnDshC,GAAsBC,EAAAA,EAAAA,IAAK7jC,EAAOyQ,SAAS0B,SAAStE,GAAeg1B,YAAac,GAKhF5qB,KAH2BH,EAAOnI,SAAS5O,QAC5C+W,EAAOnI,SAASkB,KAAK,EAAGrP,QAASA,IAAOghC,GAAkBQ,kBACPR,GAAkBS,aAAgB,IAClD9yB,OAAO2H,EAAOnI,SAAUiG,GAC1DstB,EAAmCjrB,EAAY9H,OAAOyyB,GACtDz6B,GAAOoG,EAAAA,EAAAA,IAAqB20B,EAAkC,MAC9Dl6B,GAAYiC,EAAAA,EAAAA,IAAOgN,EAAYhK,IAAI,EAAGzM,QAASA,IAEhDqgC,IACH3iC,EAAS,IACJA,EACHyQ,SAAU,IACLzQ,EAAOyQ,SACV0B,SAAU,CAAC,IAIfpK,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAQ,EAAGI,GAAI2hC,MAC3CjkC,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BkkC,WAAY,CAAC,GACZD,KAELtB,GAAW,GAGb3iC,GAASkZ,EAAAA,EAAAA,KAAoBlZ,EAAQ6N,EAAe5E,GACpDjJ,GAAS8H,EAAAA,EAAAA,KAAgB9H,EAAQ6N,EAAew1B,EAAgBv5B,GAEhE/B,OAAO8I,QAAQ+yB,GAAqB1hC,QAAQ,EAAEI,EAAI6N,MAC3CA,GAAQvJ,aACb5G,GAAS4I,EAAAA,EAAAA,KAAiB5I,EAAQ6N,EAAevL,EAAI6N,EAAOvJ,eAG1DA,IAAeA,EAAWu9B,gBAAkBd,IAAmBz7B,EAAAA,KACjE5H,GAAS4I,EAAAA,EAAAA,KAAiB5I,EAAQ6N,EAAew1B,EAAgB,KAC5DQ,EAAAA,EAAAA,IAAKj9B,EAAY,CAAC,gBAAiB,qBAI1CmB,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAQ,EAAGI,GAAI2hC,MAC3C,MAAQ7iC,OAAQgjC,EAAav8B,SAAUw8B,IAAkBv3B,EAAAA,EAAAA,KAAyB9M,EAAQikC,IAAe,CAAC,EACtGG,IAAgBv2B,GAAiBw2B,IAAkBhB,IACrDrjC,GAAS0Z,EAAAA,EAAAA,KAAuB1Z,EAAQ6N,EAAew1B,EAAgBv5B,EAAWm6B,MAGtFjkC,GAASskC,EAAAA,EAAAA,KAAYtkC,GAAQqP,EAAAA,EAAAA,IAAqBuJ,EAAO5P,MAAO,OAChEhJ,GAASukC,EAAAA,EAAAA,KAAYvkC,GAAQqP,EAAAA,EAAAA,IAAqBuJ,EAAO4rB,MAAO,OAEhE9B,GAAoB,CACtB,CACF,EAEA13B,EAAAA,EAAAA,IAAUhL,GAEN4sB,GAAavjB,UACflG,EAAQshC,WAAW,CAAErjC,OAAQyM,EAAgB9E,OAAO,IAChDqH,GAAmBA,IAAoBxI,EAAAA,IACzCzE,EAAQ2H,cAAc,CACpB1J,OAAQyM,EAAgB9C,QAASF,OAAOuF,GAAkBs0B,wBAAwB,IAI1F,CAEA1kC,GAASoL,EAAAA,EAAAA,MAEJs3B,IACH1iC,EAAS,IACJA,EACHyQ,SAAU,IACLzQ,EAAOyQ,SACV0B,SAAU,CAAC,IAIfpK,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAQ,EAAGI,GAAI2hC,MAC3CjkC,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BkkC,WAAY,CAAC,GACZD,MAMPl8B,OAAO8G,KAAK+zB,GAAgB1gC,QAASd,IACnC,MAAMujC,EAAU/B,EAAexhC,GAC/B2G,OAAO8G,KAAK81B,GAASziC,QAAS2F,IAC5B7H,GAAS4kC,EAAAA,EAAAA,KAAa5kC,EAAQoB,EAAQyJ,OAAOhD,GAAW+6B,EAAexhC,GAAQyJ,OAAOhD,SAK1F7H,GAAS4N,EAAAA,EAAAA,KAAY5N,EAAQkjC,GAC7BljC,GAAS4N,EAAAA,EAAAA,KAAY5N,EAAQojC,IAE7Bp4B,EAAAA,EAAAA,IAAUhL,GAEV+H,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAQ,EAAGI,GAAI+B,MAC3C,MAAQjD,OAAQyjC,EAAa39B,UAAW49B,IAAmB5kC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO0gC,YACrFF,GAAeC,KAAmB7/B,EAAAA,EAAAA,KAAkBjF,EAAQ6kC,EAAaC,IAC3E3hC,EAAQ6hC,iBAAiB,CAAE3gC,WAGjC,CAlMY4gC,CAAuBjlC,EAAQmD,GAErCnD,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHoiC,WAAW,EACX/E,UAAU,EACV6H,sBAAsB,IAExBl6B,EAAAA,EAAAA,IAAUhL,GAENiiC,EAAAA,KAEFC,QAAQC,IAAI,mBAGdE,EAAa,CAAEG,SAAU,aACzBF,UAsMN6C,EAAAA,GAAAA,IAAanlC,IACX,MAAM,gBAAE6lB,EAAe,UAAEuf,EAAS,SAAE/H,GAAar9B,GAC3C,YAAEqlC,IAAgBnlC,EAAAA,EAAAA,KAAeF,IAClCqlC,GAAehI,GAAa0E,IAAgBlc,kBAAoBA,GAChEkc,IAAgBqD,YAAcA,GAKX,yBAApBvf,GAA4D,4BAAduf,IAChDnlB,EAAAA,EAAAA,MAAaqlB,OALbvD,GAAiB/hC,KClSrBgM,EAAAA,EAAAA,IAAiB,aAAcyI,MAAOzU,EAAQmD,EAAS4O,KACrD,MAAM,OACJ3Q,EAAM,OACNmkC,EAAM,YACNxgB,EAAW,MACX1gB,GAAQC,EAAAA,EAAAA,OACNyN,EACJ,IAAK3Q,EACH,OAGF,MAAMgC,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMwV,QAAevD,EAAAA,EAAAA,IAAQ,aAAc,CACzCgF,KAAMjX,EACNmiC,SACAxgB,gBAGF5hB,EAAQwM,iBAAiB,CACvB3O,QAAS4X,GACLgJ,EAAAA,EAAAA,IAAa,2BACb,2EACJvd,aAIJ2H,EAAAA,EAAAA,IAAiB,qBAAsByI,MAAOzU,EAAQmD,EAAS4O,KAC7D,MAAM,OACJ3Q,EAAM,OACNmkC,EAAM,YACNxgB,EAAW,MACXjf,EAAK,MACLzB,GAAQC,EAAAA,EAAAA,OACNyN,EACJ,IAAK3Q,EACH,OAGF,MAAMgC,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,IAAS0C,EACZ,OAGF,MAAM8S,QAAevD,EAAAA,EAAAA,IAAQ,qBAAsB,CACjDgF,KAAMjX,EACN0C,QACAy/B,SACAxgB,gBAGF5hB,EAAQwM,iBAAiB,CACvB3O,QAAS4X,GACLgJ,EAAAA,EAAAA,IAAa,2BACb,2EACJvd,aAIJ2H,EAAAA,EAAAA,IAAiB,qBAAsByI,UACrC,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,uBACxBuD,IAIL5Y,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHwlC,eAAgB,CACdC,OAAQ7sB,EAAO8sB,eACfC,cAAe59B,OAAO8G,KAAK+J,EAAO8sB,gBAClCE,QAAShtB,EAAOgtB,WAGpB56B,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,yBAA0ByI,MAAOzU,EAAQmD,EAAS4O,KACjE,MAAM,KAAE6f,GAAS7f,EAGjB,UADqBsD,EAAAA,EAAAA,IAAQ,yBAA0Buc,GAErD,OAGF5xB,GAASoL,EAAAA,EAAAA,MAET,MAAQ,CAACwmB,GAAOiU,KAAoBC,GAAgB9lC,EAAOwlC,eAAeC,OAE1EzlC,EAAS,IACJA,EACHwlC,eAAgB,CACdC,OAAQK,EACRH,cAAe3lC,EAAOwlC,eAAeG,cAAc7jC,OAAQikC,GAAOA,IAAOnU,MAG7E5mB,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,6BAA8ByI,UAE7C,UADqBY,EAAAA,EAAAA,IAAQ,8BAE3B,OAIF,MAAM2wB,GADNhmC,GAASoL,EAAAA,EAAAA,OACyBo6B,eAAeG,cAC9CniC,KAAMouB,GAAS5xB,EAAOwlC,eAAeC,OAAO7T,GAAMqU,WACrD,IAAKD,EACH,OAEF,MAAME,EAAiBlmC,EAAOwlC,eAAeC,OAAOO,GAEpDhmC,EAAS,IACJA,EACHwlC,eAAgB,CACdC,OAAQ,CACN,CAACO,GAAqBE,GAExBP,cAAe,CAACK,MAGpBh7B,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,wBAAyByI,MAAOzU,EAAQmD,EAAS4O,KAChE,MAAM,KACJ6f,EAAI,gBAAEuU,EAAe,sBAAEC,EAAqB,YAAEC,GAC5Ct0B,QACiBsD,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDuc,OACAuU,kBACAC,wBACAC,kBAOFrmC,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHwlC,eAAgB,IACXxlC,EAAOwlC,eACVC,OAAQ,IACHzlC,EAAOwlC,eAAeC,OACzB,CAAC7T,GAAO,IACH5xB,EAAOwlC,eAAeC,OAAO7T,WACRroB,IAApB48B,EAAgC,CAAEA,wBAAoB58B,UAC5BA,IAA1B68B,EAAsC,CAAEA,8BAA0B78B,KAClE88B,GAAe,CAAEC,mBAAe/8B,QAK5CyB,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,mBAAoByI,MAAOzU,EAAQmD,EAAS4O,KAC3D,MAAM,KAAEw0B,GAASx0B,QAEIsD,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEkxB,WAMnDvmC,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHwlC,eAAgB,IACXxlC,EAAOwlC,eACVI,QAASW,KAGbv7B,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,wBAAyByI,UACxC,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,0BAC7B,IAAKuD,EACH,OAEF,MAAM,kBAAE4tB,GAAsB5tB,EAC9B5Y,GAASoL,EAAAA,EAAAA,MAETpL,EAAS,IACJA,EACHymC,kBAAmB,CACjBhB,OAAQe,EACRb,cAAe59B,OAAO8G,KAAK23B,MAG/Bx7B,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,4BAA6ByI,MAAOzU,EAAQmD,EAAS4O,KACpE,MAAM,KAAE6f,GAAS7f,EAGjB,UADqBsD,EAAAA,EAAAA,IAAQ,4BAA6Buc,GAExD,OAGF5xB,GAASoL,EAAAA,EAAAA,MAET,MAAQ,CAACwmB,GAAOiU,KAAoBC,GAAgB9lC,EAAOymC,kBAAkBhB,OAE7EzlC,EAAS,IACJA,EACHymC,kBAAmB,CACjBhB,OAAQK,EACRH,cAAe3lC,EAAOymC,kBAAkBd,cAAc7jC,OAAQikC,GAAOA,IAAOnU,MAGhF5mB,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,gCAAiCyI,gBAC3BY,EAAAA,EAAAA,IAAQ,mCAK7BrV,GAASoL,EAAAA,EAAAA,MAETpL,EAAS,IACJA,EACHymC,kBAAmB,CACjBhB,OAAQ,CAAC,EACTE,cAAe,MAGnB36B,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,qBAAsByI,MAAOzU,EAAQmD,EAAS4O,KAC7D,MAAM6G,QAAevD,EAAAA,EAAAA,IAAQ,mBACxBuD,IAEL5Y,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHwhC,SAAU,IACLxhC,EAAOwhC,SACVkF,eAAgB9tB,EAAO2tB,QAG3Bv7B,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,gBAAiByI,MAAOzU,EAAQmD,EAAS4O,KACxD,MAAM,KAAEw0B,EAAI,MAAEliC,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EACnDw0B,SAEgBlxB,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEkxB,WAGhDvmC,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHwhC,SAAU,IACLxhC,EAAOwhC,SACVkF,eAAgBH,KAGpBv7B,EAAAA,EAAAA,IAAUhL,GACVmD,EAAQwjC,wBAAwB,CAAEtiC,aCzOpC,MAEMuiC,IAAwBlV,EAAAA,EAAAA,IAAUld,GAAOA,IAAM,KAAK,IAE1DxI,EAAAA,EAAAA,IAAiB,eAAgByI,MAAOzU,EAAQmD,EAAS4O,KACvD,MAAM,OAAE0P,EAAM,WAAEolB,GAAe90B,EACzB+C,GAAOC,EAAAA,EAAAA,KAAW/U,EAAQyhB,GAChC,IAAK3M,EACH,OAGF,MAAM,GAAExS,EAAE,WAAEkrB,GAAe1Y,EACrB8D,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE/S,KAAIkrB,eACpD,IAAK5U,GAAQ9D,KAAM,OAEnB9U,GAASoL,EAAAA,EAAAA,MACT,MAAMsP,GAAWC,EAAAA,EAAAA,KAAmB3a,EAAQyhB,IACpC3M,KAAMgyB,EAASpsB,SAAUqsB,GAAgBnuB,EAC3CouB,GAAgBC,EAAAA,EAAAA,KAAiBjnC,EAAQyhB,GAKzCylB,EAJmBpyB,EAAKqyB,gBAAkBL,EAAQK,eACzBzsB,GAAU0sB,cAAc9kC,KAAOykC,GAAaK,cAAc9kC,IACzDoY,GAAU2sB,eAAe/kC,KAAOykC,GAAaM,eAAe/kC,IAC5DoY,GAAU4sB,eAAehlC,KAAOykC,GAAaO,eAAehlC,GAM5FtC,GAASunC,EAAAA,EAAAA,KAAWvnC,EAAQyhB,EAAQ7I,EAAO9D,MAC3C9U,GAASoqB,EAAAA,EAAAA,KAAmBpqB,EAAQyhB,EAAQ7I,EAAO8B,UACnD1a,GAASukC,EAAAA,EAAAA,KAAYvkC,GAAQqP,EAAAA,EAAAA,IAAqBuJ,EAAO4rB,MAAO,OAChExkC,GAASskC,EAAAA,EAAAA,KAAYtkC,GAAQqP,EAAAA,EAAAA,IAAqBuJ,EAAO5P,MAAO,QAEhEgC,EAAAA,EAAAA,IAAUhL,IACN6mC,GAAeG,GAAeluB,OAASouB,IACzC/jC,EAAQw+B,sBAAsB,CAAE3/B,OAAQyf,EAAQmgB,uBAAuB,OAI3E51B,EAAAA,EAAAA,IAAiB,WAAYyI,MAAOzU,EAAQmD,EAAS4O,KACnD,MAAM,OAAE0P,GAAW1P,EACb+C,GAAOC,EAAAA,EAAAA,KAAW/U,EAAQyhB,GAChC,IAAK3M,EACH,OAGF,MAAM8D,QAAevD,EAAAA,EAAAA,IAAQ,aAAc,CAAEmvB,MAAO,CAAC1vB,KACrD,IAAK8D,EACH,OAGF,MAAM,MAAE4rB,EAAK,iBAAE7J,GAAqB/hB,EAEpC5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASukC,EAAAA,EAAAA,KAAYvkC,GAAQqP,EAAAA,EAAAA,IAAqBm1B,EAAO,OACzDxkC,GAAS0vB,EAAAA,EAAAA,KAAoB1vB,EAAQ,IAChCA,EAAOwkC,MAAMgD,gBACb7M,KAEL3vB,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,eAAgByI,UAC/B,MAAQgzB,UAAU,gBAAEC,IAAsB1nC,EAE1C,GAAO0nC,MAAmBp6B,EAAAA,EAAAA,MAAkBo6B,EAhEX,IAiE/B,OAGF,MAAM9uB,QAAevD,EAAAA,EAAAA,IAAQ,iBAC7B,IAAKuD,EACH,OAGF,MAAM,IAAE5O,GAAQ4O,EAEhB5Y,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHynC,SAAU,IACLznC,EAAOynC,SACVvmB,QAASlX,EACT09B,iBAAiBp6B,EAAAA,EAAAA,SAGrBtC,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,kBAAmByI,UAClC,MAAMkzB,QAAoBtyB,EAAAA,EAAAA,IAAQ,oBAClC,IAAKsyB,EACH,OAGF3nC,GAASoL,EAAAA,EAAAA,MACTpL,GAAS46B,EAAAA,EAAAA,KAAgB56B,EAAQ2nC,EAAYhN,kBAG7C,MAAMiN,EAAoB9yB,GAAmBA,EAAK+yB,UAAY/yB,EAAKgzB,WAAa,GAC1EC,EAAW,IAAIC,KAAKC,SAAS,SAE7BC,EAAcP,EAAYnD,MAAM3/B,KAAK,CAACC,EAAGC,IAC7CgjC,EAASI,QAAQP,EAAiB9iC,GAAI8iC,EAAiB7iC,KACtDjD,OAAQgT,IAAUA,EAAKszB,QAE1BpoC,EAAS,IACJA,EACH2nC,YAAa,CACXzmB,QAASgnB,EAAYn5B,IAAK+F,GAASA,EAAKxS,OAG5C0I,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,kBAAmB,MAC7BqJ,EAAAA,EAAAA,IAAQ,uBAGfrJ,EAAAA,EAAAA,IAAiB,kBAAmByI,MAAOzU,EAAQmD,EAAS4O,KAC1D,MAAM,OAAE0P,GAAW1P,EAEnB,IAAIiU,EAAAA,EAAAA,KAA0BhmB,GAC5B,OAGF,MAAM8U,GAAOC,EAAAA,EAAAA,KAAW/U,EAAQyhB,GAC1B4mB,GAAcC,EAAAA,EAAAA,KAAsBtoC,EAAQyhB,GAClD,IAAK3M,IAAQgR,EAAAA,EAAAA,IAAUhR,IAASuzB,GAAaE,cAC3C,OAGF,MAAM3vB,QAAevD,EAAAA,EAAAA,IAAQ,mBAAoBP,EAAMuzB,GAAa/3B,OACpE,IAAKsI,EACH,OAGF,MAAM,QAAE4vB,EAAO,MAAE1vB,GAAUF,EAErB5O,GAAM+B,EAAAA,EAAAA,KAAQs8B,GAAar+B,KAAO,IAAIiH,OAAOu3B,IAEnDxoC,GAASoL,EAAAA,EAAAA,MACTpL,GAASyoC,EAAAA,EAAAA,KAAsBzoC,EAAQ8U,EAAKxS,GAAI,CAC9CgO,MAAOk4B,EAAQ3mC,OAAS2mC,EAAQA,EAAQ3mC,OAAS,QAAK0H,EACtDS,MACAu+B,cAAev+B,EAAInI,QAAUiX,KAG/B9N,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,gCAAiCyI,MAAOzU,EAAQmD,EAAS4O,KACxE,MAAM,OAAE0P,EAAM,oBAAEinB,GAAwB32B,EAClC+C,GAAOC,EAAAA,EAAAA,KAAW/U,EAAQyhB,GAC3B3M,SAIgBO,EAAAA,EAAAA,IAAQ,gCAC3B,CAAEP,OAAM4zB,0BAKV1oC,GAASoL,EAAAA,EAAAA,MACTpL,GAASoqB,EAAAA,EAAAA,KAAmBpqB,EAAQyhB,EAAQ,CAC1C+f,cAAUj4B,KAEZyB,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,sBAAuByI,MAAOzU,EAAQmD,EAAS4O,KAC9D,MAAM,OAAE0P,EAAM,MAAEpd,GAAQC,EAAAA,EAAAA,OAAsByN,EACxC+C,GAAOC,EAAAA,EAAAA,KAAW/U,EAAQyhB,GAChC,IAAK3M,EACH,OAGF,MAAMsmB,QAAoB/lB,EAAAA,EAAAA,IAAQ,2BAA4B,CAAEP,cAC5CvL,IAAhB6xB,IAEJp7B,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B2oC,gBAAiB,CACflnB,SACAmnB,cAAexN,IAEhB/2B,IAEH2G,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,gBAAiByI,MAAOzU,EAAQmD,EAAS4O,KACxD,MAAM,OACJ0P,EAAM,UAAEqmB,EAAS,SAAED,EAAQ,uBAAEgB,EAAsB,MACnDxkC,GAAQC,EAAAA,EAAAA,OACNyN,EAEE+C,GAAOC,EAAAA,EAAAA,KAAW/U,EAAQyhB,GAChC,IAAK3M,EACH,OAOF,IAAI8D,EACJ,GALA5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASu/B,EAAAA,EAAAA,KAAyBv/B,EAAQk/B,EAAAA,GAAmBC,WAAY96B,IACzE2G,EAAAA,EAAAA,IAAUhL,IAGL8U,EAAKg0B,WAAah0B,EAAKi0B,YAC1BnwB,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE2zB,MAAOl0B,EAAKi0B,YAAajB,YAAWD,iBACzE,CACL,MAAM,GAAEvlC,EAAE,WAAEkrB,GAAe1Y,EAC3B8D,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CACtC/S,KACAkrB,aACAub,YAAa,GACbjB,YACAD,WACAgB,0BAEJ,CAEIjwB,IACFzV,EAAQ8lC,iBAAiB,CAAEjnC,OAAQyf,IACnCte,EAAQ+lC,gBAAgB,CAAElnC,OAAQyf,IAElCzhB,GAASoL,EAAAA,EAAAA,MACTpL,GAASunC,EAAAA,EAAAA,KACPvnC,EACA8U,EAAKxS,GACL,CACEwlC,YACAD,cAGJ78B,EAAAA,EAAAA,IAAUhL,IAGZA,GAASoL,EAAAA,EAAAA,MACTpL,GAASu/B,EAAAA,EAAAA,KAAyBv/B,EAAQk/B,EAAAA,GAAmBM,SAAUn7B,GACvErE,GAASmpC,EAAAA,EAAAA,KAAsBnpC,EAAQqE,IACvC2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,gBAAiByI,MAAOzU,EAAQmD,EAAS4O,KACxD,MAAM,OAAE0P,GAAW1P,EAEb+C,GAAOC,EAAAA,EAAAA,KAAW/U,EAAQyhB,GAEhC,IAAK3M,EACH,OAGF,MAAM,GAAExS,EAAE,WAAEkrB,GAAe1Y,QAErBO,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE/S,KAAIkrB,kBAGvCxhB,EAAAA,EAAAA,IAAiB,wBAAyByI,MAAOzU,EAAQmD,EAAS4O,KAChE,IAAIiU,EAAAA,EAAAA,KAA0BhmB,GAAS,OAEvC,MAAM,OAAEgC,EAAM,sBAAE4/B,EAAqB,UAAEwH,GAAcr3B,EAC/CnO,GAAY0N,EAAAA,EAAAA,IAAStP,GAErB8S,EAAOlR,GAAYmR,EAAAA,EAAAA,KAAW/U,EAAQgC,QAAUuH,EAChDnG,EAAQQ,OAAyC2F,GAA7B/B,EAAAA,EAAAA,KAAWxH,EAAQgC,GACvCqY,EAAOvF,GAAQ1R,EAErB,GAAIA,IAAQwY,EAAAA,EAAAA,KAAuB5b,EAAQgC,GACzC,OAEF,MAAMglC,GAAgBC,EAAAA,EAAAA,KAAiBjnC,EAAQgC,GAC/C,IAAKqY,GAAM8sB,cACT,OAGF,GAAIH,IAAkBpF,IAA0BwH,IAAcpC,EAAc9e,YAAa,OAEzFloB,GAASqpC,EAAAA,EAAAA,KAA0BrpC,EAAQgC,GAAQ,IACnDgJ,EAAAA,EAAAA,IAAUhL,GAEVA,GAASoL,EAAAA,EAAAA,MAET,IAAIk+B,GAAe3uB,EAAAA,EAAAA,KAAmB3a,EAAQgC,GAC1Cmf,GAAeC,EAAAA,EAAAA,KAAmBphB,EAAQgC,GAC9C,GAAI8S,IAASw0B,EAAc,CACzB,MAAM,GAAEhnC,EAAE,WAAEkrB,GAAe1Y,EACrB8D,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE/S,KAAIkrB,eACpD,IAAK5U,GAAQ9D,KACX,OAEFw0B,EAAe1wB,EAAO8B,QACxB,CAEA,GAAItX,IAAS+d,EAAc,CACzB,MAAMvI,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiBjS,GAC9C,IAAKwV,GAAQ8B,SACX,OAGFyG,EAAevI,EAAO8B,QACxB,CAEA,MAAM6uB,EAAeD,GAAgBnoB,EACrC,IAAKooB,EAAc,OAEnB,MAAM5hB,EAASqf,GAAe9e,WACxBrP,GAAS8O,GAAUyhB,GAAaxH,EAlTA,QAkT0Dr4B,EAE1FqP,QAAevD,EAAAA,EAAAA,IAAQ,qBAAsB,CACjDgF,OACAsN,SACA9O,UAEF,IAAKD,IAAWA,EAAO4wB,OACrB,OAGFxpC,GAASoL,EAAAA,EAAAA,MAET,MAAM,OACJo+B,EAAM,MAAE1wB,EAAK,aAAEggB,GACblgB,EAEJ5Y,GAASypC,EAAAA,EAAAA,KAAiBzpC,EAAQgC,EAAQ,CACxC0nC,UAAWF,EACX1wB,QACAoP,WAAY4Q,EACZpe,SAAU6uB,EACV3H,2BAGF52B,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,qBAAsB,CAAChM,EAAQmD,EAAS4O,KACvD,MAAM,MAAE4gB,EAAK,MAAEtuB,GAAQC,EAAAA,EAAAA,OAAsByN,EAExC4gB,GAEAiU,GAAsBnyB,UACzB,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,cAAe,CAAEsd,UAE9C3yB,GAASoL,EAAAA,EAAAA,MACT,MAAM4sB,GAAqB93B,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOslC,WAAWhX,MAEpE,IAAK/Z,IAAWof,GAAuBrF,IAAUqF,EAG/C,OAFAh4B,GAAS4pC,EAAAA,EAAAA,KAA+B5pC,GAAQ,EAAOqE,QACvD2G,EAAAA,EAAAA,IAAUhL,GAIZ,MAAM,iBACJm4B,EAAgB,gBAAEC,GAChBxf,EAEEixB,EAAe1R,EAAiBr2B,OAAOwP,EAAAA,IACvCw4B,EAAgB1R,EAAgBt2B,OAAOwP,EAAAA,IAE7CtR,GAAS4pC,EAAAA,EAAAA,KAA+B5pC,GAAQ,EAAOqE,GACvDrE,GAAS+pC,EAAAA,EAAAA,KAAiB/pC,EAAQ,CAAE6pC,eAAcC,iBAAiBzlC,IAEnE2G,EAAAA,EAAAA,IAAUhL,QAIdgM,EAAAA,EAAAA,IAAiB,gBAAiByI,MAAOzU,EAAQmD,EAAS4O,KACxD,MACEg3B,YAAaC,EAAK,UAAElB,EAAS,SAAED,EAAQ,MACvCxjC,GAAQC,EAAAA,EAAAA,OACNyN,EAEE6G,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE2zB,QAAOlB,YAAWD,aAC7DjvB,GASLzV,EAAQkhB,SAAS,CAAE/hB,GAAIsW,EAAQvU,UAE/BrE,GAASoL,EAAAA,EAAAA,MACTpL,GAASmpC,EAAAA,EAAAA,KAAsBnpC,EAAQqE,IACvC2G,EAAAA,EAAAA,IAAUhL,IAZRmD,EAAQwM,iBAAiB,CACvB3O,QAAS+0B,EAAAA,GAA0B,qCACnC1xB,aAaN2H,EAAAA,EAAAA,IAAiB,aAAc,CAAChM,EAAQmD,EAAS4O,KAC/C,MAAM,OAAE3Q,GAAW2Q,EACbsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQoB,GAC3BiZ,IAIAhF,EAAAA,EAAAA,IAAQ,aAAcgF,MAG7BrO,EAAAA,EAAAA,IAAiB,iBAAkByI,MAAOzU,EAAQmD,EAAS4O,KACzD,MAAM,YACJi4B,EAAW,kBAAEC,EAAiB,MAAE5lC,GAAQC,EAAAA,EAAAA,OACtCyN,EAGJ,KAD6BoE,EAAAA,EAAAA,KAA2BnW,GAgBtD,OAdIiqC,GACF9mC,EAAQ+tB,gBAAgB,CACtBH,UAAWkZ,EACX9Y,MAAO,CACLC,UAAW,sBACXC,UAAW,CACTxd,MAAO,kBAGXxP,eAIJlB,EAAQymB,iBAAiB,CAAEC,eAAgB,eAAgBxlB,UAI7D,MAAMuU,QAAevD,EAAAA,EAAAA,IAAQ,oBAAqB20B,GAElD,GAAIC,EAAmB,CACrB,IAAKrxB,EAWH,YAVAzV,EAAQ+tB,gBAAgB,CACtBH,UAAWkZ,EACX9Y,MAAO,CACLC,UAAW,sBACXC,UAAW,CACTxd,MAAO,iBAGXxP,UAKJlB,EAAQ+tB,gBAAgB,CACtBH,UAAWkZ,EACX9Y,MAAO,CACLC,UAAW,oBAEb/sB,UAEFlB,EAAQwM,iBAAiB,CACvB3O,QAAS,CACP4O,IAAK,6BAEPs6B,kBAAmBF,EAAYvhB,WAC/BpkB,SAEJ,KAGF2H,EAAAA,EAAAA,IAAiB,mBAAoByI,MAAOzU,EAAQmD,EAAS4O,KAC3D,MAAM,QAAEmP,GAAYnP,QAECsD,EAAAA,EAAAA,IAAQ,mBAAoB6L,KAKjDlhB,GAASoL,EAAAA,EAAAA,MACTpL,EAAO2nC,aAAazmB,QAAQhf,QAASuf,IACnC,MAAM,cAAE0oB,GAAkBnqC,EAAOwkC,MAAMv7B,KAAKwY,IAAW,CAAC,EACpD0oB,IAAkBjpB,EAAQzc,SAASgd,KACrCzhB,GAASunC,EAAAA,EAAAA,KAAWvnC,EAAQyhB,EAAQ,CAClC0oB,mBAAe5gC,OAIrB2X,EAAQhf,QAASuf,IACfzhB,GAASunC,EAAAA,EAAAA,KAAWvnC,EAAQyhB,EAAQ,CAClC0oB,eAAe,OAGnBn/B,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,2BAA4ByI,MAAOzU,EAAQmD,EAAS4O,KACnE,MAAM,cACJq4B,EAAa,SAAEC,EAAQ,MAAEvZ,EAAK,UAAEC,EAAS,MAAE1sB,GAAQC,EAAAA,EAAAA,OACjDyN,EAEE4W,QAAoBtT,EAAAA,EAAAA,IAAQ,mBAAoB,CACpDoT,WAAY,CAAC2hB,KAEVzhB,IAAc,IAgBnB3oB,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BsqC,qBAAsB,CACpBF,gBACAC,WACAtZ,YACAD,UAEDzsB,IACH2G,EAAAA,EAAAA,IAAUhL,IAxBJ+wB,GACF5tB,EAAQ+tB,gBAAgB,CACtBH,YACAI,MAAO,CACLC,UAAW,sBACXC,UAAW,CACTxd,MAAO,4BAGXxP,aAkBR2H,EAAAA,EAAAA,IAAiB,mBAAoByI,MAAOzU,EAAQmD,EAAS4O,KAC3D,MAAM,OAAE/P,GAAW+P,EAEnB,IAAIiU,EAAAA,EAAAA,KAA0BhmB,GAAS,OAGvC,KADqB2a,EAAAA,EAAAA,KAAmB3a,EAAQgC,GAG9C,YADAmB,EAAQonC,aAAa,CAAE9oB,OAAQzf,IAIjC,MAAM8S,GAAOC,EAAAA,EAAAA,KAAW/U,EAAQgC,GAChC,IAAK8S,EACH,OAGF,MAAM8D,QAAevD,EAAAA,EAAAA,IAAQ,oBAAqBP,GAClD,IAAK8D,EAAQ,OAEb,MAAM,SAAE4oB,GAAa5oB,EAErB5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASoqB,EAAAA,EAAAA,KAAmBpqB,EAAQgC,EAAQ,CAAEw/B,cAC9Cx2B,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,+BAAgC,CAAChM,EAAQmD,EAAS4O,KACjE,MAAM,OAAE/P,GAAW+P,EAEby4B,EAAiBxqC,EAAOwhC,SAASiJ,4BACjCC,GAAa3+B,EAAAA,EAAAA,IAAO,CAAC/J,KAAWwoC,IAAiBlzB,MAAM,EAAGqzB,EAAAA,KAEhE3qC,EAAS,IACJA,EACHwhC,SAAU,IACLxhC,EAAOwhC,SACViJ,4BAA6BC,KAIjC1/B,EAAAA,EAAAA,IAAUhL,K,wCC9kBL,SAAS4qC,GACd5qC,EAAW6yB,EAAkBgY,MACzBxmC,GAAQC,EAAAA,EAAAA,QAEZ,MAAM2J,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,OAAO6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B8qC,WAAY,IACP78B,EAAS68B,WACZC,WAAY,IACP98B,EAAS68B,WAAWC,WACvB,CAAClY,GAAWgY,KAGfxmC,EACL,CAEO,SAAS2mC,GACdhrC,EAAW22B,MACPtyB,GAAQC,EAAAA,EAAAA,QAEZ,OAAO4J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B8qC,WAAY,KACP5qC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOymC,WACjCnU,cAEDtyB,EACL,CAEO,SAAS4mC,GACdjrC,EAAW4P,EAAas7B,MACpB7mC,GAAQC,EAAAA,EAAAA,QAEZ,MAAM6mC,GAAkBjrC,EAAAA,EAAAA,KAAeF,EAAQqE,GACzC+mC,EAAgBD,EAAgBE,QAAQD,cAExCE,EAAiBF,EAAcx7B,GAErC,IAAK07B,EAAgB,OAAOtrC,EAE5B,MAAMurC,EAAe,IAChBD,KACAJ,GAGCM,GAAmBC,EAAAA,GAAAA,IAAaF,GACtC,OAAKC,EAELxrC,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BqrC,QAAS,IACJF,EAAgBE,QACnBD,cAAe,IACVA,EACH,CAACI,GAAmBD,KAGvBlnC,GAV2BrE,CAahC,CAyBO,SAAS0rC,GACd1rC,EAAW2rC,EACXC,GAAsB,EAAMC,GAA8B,MACtDxnC,GAAQC,EAAAA,EAAAA,QAEZ,MAAM6mC,GAAkBjrC,EAAAA,EAAAA,KAAeF,EAAQqE,GAEzCuL,GAAM67B,EAAAA,GAAAA,IAAaE,GAEzB,IAAK/7B,EAAK,OAAO5P,EACjB,MAAM8rC,EAAgB,IAAIX,EAAgBE,QAAQU,mBAC7CD,EAAcrnC,SAASmL,IAAMk8B,EAAcpgC,KAAKkE,GAErD,MAAMo8B,EAAiB,IAAIb,EAAgBE,QAAQY,aAC9CD,EAAevnC,SAASmL,IAAMo8B,EAAetgC,KAAKkE,GAEvD,MAAMw7B,EAAgBD,EAAgBE,QAAQD,cAkB9C,OAhBSl9B,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BqrC,QAAS,IACJF,EAAgBE,WAChBO,GAAc,CAAEM,gBAAiBt8B,GACpCu8B,qBAAqB,EACrBC,YAAaP,EACbQ,WAAY,YACZjB,cAAe,IACVA,EACH,CAACx7B,GAAM+7B,GAETI,kBAAmBD,EACnBG,YAAaD,IAEd3nC,EAGL,CAaO,SAASioC,GACdtsC,EAAW4P,EAAa28B,MACpBloC,GAAQC,EAAAA,EAAAA,QAEZ,MAAM6mC,GAAkBjrC,EAAAA,EAAAA,KAAeF,EAAQqE,IACzC,cAAE+mC,EAAa,kBAAEW,EAAiB,gBAAEG,GAAoBf,EAAgBE,QACxEM,EAASP,EAAcx7B,GAC7B,IAAK+7B,EAAQ,OAAO3rC,EAEpB,IAAKusC,GAA2BZ,EAAOa,qBACrC,OAAOvB,GAAajrC,EAAQ4P,EAAK,CAAE68B,kBAAkB,GAAQpoC,GAG/D,MAAMqoC,EAAuB,IAAKtB,GAC5BuB,GAAoBlB,EAAAA,GAAAA,IAAaE,GAEvC,IAAIG,EAAgBC,EAEhBY,WACKD,EAAqBC,GAC5Bb,EAAgBC,EAAkBjqC,OAAQ8qC,GAAMA,IAAMD,IAGxD,MAAME,EAAqBX,KAAoBT,EAAAA,GAAAA,IAAaE,GAEtDmB,EAAoB/kC,OAAO8G,KAAK69B,GAChCK,EAAqBD,EAAkBjrC,OAiB7C,OAfSqM,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BqrC,QAAS,IACJF,EAAgBE,WAChBwB,GAAsB,CACvBX,gBAAiBa,EACbD,EAAkBC,EAAqB,QAAKxjC,GAElD6hC,cAAesB,EACfX,kBAAmBD,MACfiB,GAAsB,CACxBd,YAAa,MAGhB5nC,EAGL,CAuDO,SAAS2oC,GACdhtC,MAAeqE,GAAQC,EAAAA,EAAAA,QAEvB,OAAOyD,OAAO8G,MAAK3O,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOgnC,QAAQD,eAAevpC,OAAS,CACnF,CAqBO,SAASorC,GACdjtC,EAAWktC,MACP7oC,GAAQC,EAAAA,EAAAA,QAEZ,MAAM6mC,GAAkBjrC,EAAAA,EAAAA,KAAeF,EAAQqE,GAC/C,OAAO6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BqrC,QAAS,IACJF,EAAgBE,QACnBe,YAAac,IAEd7oC,EACL,C,gBC1MA,MACM8oC,IAAwB54B,EAAAA,EAAAA,IAAUC,GAAOA,IAAM,KAAK,GAC1D,IAAI44B,GAs4BG,SAASC,GACdrtC,EAAW8wB,EAAezsB,EAAeipC,EAAqBC,GAE9D,MAAMC,EAAiB,CAAE1c,QAAOwc,aAAYC,cAC5C,GAdK,SACLvtC,EAAW2rC,EAAyBtnC,GAEpC,MACM+mC,GADkBlrC,EAAAA,EAAAA,KAAeF,EAAQqE,GACTgnC,QAAQD,cACxCx7B,GAAM67B,EAAAA,EAAAA,IAAaE,GACzB,QAAK/7B,GACEw7B,EAAcx7B,EACvB,CAMM69B,CAAeztC,EAAQwtC,EAAgBnpC,GAAQ,CACjD,MAAMuL,GAAM67B,EAAAA,EAAAA,IAAa+B,GAKzB,OAJI59B,IACF5P,EDn5BC,SACLA,EAAW+wB,MACP1sB,GAAQC,EAAAA,EAAAA,QAEZ,MAAM6mC,GAAkBjrC,EAAAA,EAAAA,KAAeF,EAAQqE,GAG/C,OAFsB8mC,EAAgBE,QAAQD,cAE3Bra,GAInB/wB,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BqrC,QAAS,IACJF,EAAgBE,QACnBc,qBAAqB,EACrBD,gBAAiBnb,EACjBsb,WAAY,cAEbhoC,GAVMrE,CAaX,CC83Be0tC,CAAqB1tC,EAAQ4P,EAAKvL,IAC3C2G,EAAAA,EAAAA,IAAUhL,KAEL,CACT,CACA,OAAO,CACT,CA8LA,SAAS2tC,GACP3tC,EACAmD,EACA2nB,EAAalS,MACTvU,GAAQC,EAAAA,EAAAA,QAEZ,GAAoB,YAAhBsU,EAAOxW,KAAoB,CAC7BpC,GAASoL,EAAAA,EAAAA,MACT,MAAM6C,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,IAAK4J,EAAS2/B,QAAS,OACvB,MAAM,OAAEC,EAAM,IAAE7c,EAAG,yBAAE8c,GAA6Bl1B,EAYlD,OAXA5Y,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B4tC,QAAS,IACJ3/B,EAAS2/B,QACZG,QAAS,CACPF,SACA/c,MAAOE,EAAI1uB,GACXwrC,8BAGHzpC,QACH2G,EAAAA,EAAAA,IAAUhL,EAEZ,CAEA,MAAMguC,EAA0B,aAAhBp1B,EAAOxW,KAAsBwW,EAAOkS,IAAMA,EAC1DkB,OAAOC,KAAK+hB,EAAS,SAAU,YAC/B7qC,EAAQ8qC,kBAAkB,CAAE5pC,SAC9B,CAgEAoQ,eAAey5B,GACb9qC,EAAe+qC,EAAiBznC,EAAsC8P,EAAkBpP,SAElFiO,EAAAA,EAAAA,IAAQ,cAAe,CAC3BjS,OACAsD,YACAqH,KAAMogC,EACN33B,SACApP,iBAEJ,CAEAqN,eAAe25B,GACbpuC,EACAmD,EAAgCC,EAAe8D,EAAmBW,EAAqB+lB,EAAeygB,GAAS,MAC3GhqC,GAAQC,EAAAA,EAAAA,QAEZ,MAAM,WACJqpB,EAAU,iBAAEhe,EAAgB,QAAE2+B,EAAO,SAAEC,GACrCprC,EAEEyV,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CACnDjU,OAAQgC,EAAKd,GACbkrB,WAAYpqB,EAAKoqB,WACjBtmB,YACA0mB,OACAygB,WAGF,IAAKz1B,EACH,OAEF,MAAM,QAAE5X,EAASwtC,MAAOC,EAAO,IAAE3jB,GAAQlS,EAErC61B,EACF9gB,EAAW,CAAEC,KAAM,CAAE5sB,QAASA,GAAW,SAAWqD,UAC3CrD,EACT2O,EAAiB,CAAE3O,UAASqD,UACnBymB,IACLujB,EACFE,EAAS,CACPzjB,MAAK1pB,OAAQgC,EAAKd,GAAI4E,YAAW7C,UAGnCiqC,EAAQ,CAAExjB,MAAKzmB,QAAO4mB,YAAa,CAAE7oB,KAAM,UAAWhB,OAAQgC,EAAKd,GAAI4E,YAAWW,cAGxF,EA1tCAmE,EAAAA,EAAAA,IAAiB,8BAA+B,CAAChM,EAAQmD,EAAS4O,KAChE,MAAM,OACJ3Q,EAAM,UAAE8F,EAAS,OAAEwnC,EAAM,MAAErqC,GAAQC,EAAAA,EAAAA,OACjCyN,GAEE,WAAE48B,GAAeD,EACjB1tC,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAElD,OAAQynC,GACN,IAAK,iBACH,IAAK3tC,EAAS,MAEdmC,EAAQyrC,8BAA8B,CAAExtC,SAAQ8F,YAAW7C,cAKjE2H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,OACJ3Q,EAAM,UAAE8F,EAAS,SAAEW,EAAQ,OAAE6mC,EAAM,MAAErqC,GAAQC,EAAAA,EAAAA,OAC3CyN,EACE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAClD,GAAK9D,GAASpC,EAId,OAAQ0tC,EAAOtsC,MACb,IAAK,UACHe,EAAQ+qC,eAAe,CAAEC,QAASO,EAAO3gC,KAAM1J,UAC/C,MACF,IAAK,MAAO,CACV,MAAM,IAAEymB,GAAQ4jB,EAChBvrC,EAAQmrC,QAAQ,CAAExjB,MAAKzmB,QAAO4mB,YAAa,CAAE7oB,KAAM,UAAWhB,SAAQ8F,YAAWW,cACjF,KACF,CACA,IAAK,QACHgnC,EAAAA,EAAAA,IAAoBH,EAAOI,UAC3B3rC,EAAQwM,iBAAiB,CAAE3O,SAAS4gB,EAAAA,EAAAA,IAAa,kBAAmB8sB,EAAOI,UAAWzqC,UACtF,MAEF,IAAK,WACE+pC,GAAqBpuC,EAAQmD,EAASC,EAAM8D,EAAWW,EAAU6mC,EAAO9gB,UAAMrkB,EAAWlF,GAC9F,MAEF,IAAK,cACHlB,EAAQ4rC,cAAc,CAAEC,OAAQN,EAAOM,OAAQ3qC,UAC/C,MACF,IAAK,eAAgB,CACnB,MAAMyQ,EAAO9U,EAAOiC,eAAgB8S,EAAAA,EAAAA,KAAW/U,EAAQA,EAAOiC,oBAAiBsH,EAC/E,IAAKuL,EACH,OAEF3R,EAAQwqB,WAAW,CACjBC,KAAM,CACJmb,YAAaj0B,EAAKi0B,YAClBjB,UAAWhzB,EAAKgzB,WAAa,GAC7BD,SAAU/yB,EAAK+yB,UAAY,GAC3BpmB,OAAQ3M,EAAKxS,IAEf+B,UAEF,KACF,CACA,IAAK,UAAW,CACd,MAAM,iBAAE4qC,GAAqBP,EAC7BvrC,EAAQ+rC,WAAW,CACjB9tC,OAAQgC,EAAKd,GAAI4E,UAAW+nC,EAAkB5qC,UAEhD,KACF,CACA,IAAK,MACHlB,EAAQgsC,YAAY,CAClB/sC,KAAM,UACNhB,OAAQgC,EAAKd,GACb4E,YACA7C,UAEF,MAEF,IAAK,OACE+pC,GAAqBpuC,EAAQmD,EAASC,EAAM8D,EAAWW,OAAU0B,GAAW,EAAMlF,GACvF,MAEF,IAAK,kBAAmB,CACtB,MAAM,MAAEsuB,EAAK,WAAEyc,GAAeV,EAC9BvrC,EAAQksC,gBAAgB,CACtB1c,QAAOyc,aAAYloC,YAAW7C,UAEhC,KACF,CAEA,IAAK,cAAe,CAClB,MAAM,OAAEod,GAAWitB,EACnBvrC,EAAQmsC,iBAAiB,CAAEhtC,GAAImf,EAAQpd,UACvC,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,IAAEymB,GAAQ4jB,EACVa,GAASC,EAAAA,EAAAA,KAAaxvC,EAAQgB,GACpC,IAAKuuC,EACH,OAGF,MAAME,GAAQC,EAAAA,GAAAA,KACdvsC,EAAQwsC,qBAAqB,CAC3B7kB,MAAKgG,MAAOye,EAAOjtC,GAAImtC,QAAOG,WAAYlB,EAAO3gC,KAAM1J,UAEzD,KACF,CAEA,IAAK,UAAW,CACd,MAAM,IAAEymB,GAAQ4jB,EACVa,GAASC,EAAAA,EAAAA,KAAaxvC,EAAQgB,GAC9B8vB,EAAQ9vB,EAAQ6uC,UAAYN,GAAQjtC,GAC1C,IAAKwuB,EACH,OAEF,MAAM2e,GAAQC,EAAAA,GAAAA,KACdvsC,EAAQ2sC,eAAe,CACrBhlB,MACAgG,QACA9uB,OAAQoB,EAAKd,GACbmtC,QACAG,WAAYlB,EAAO3gC,KACnB1J,UAEF,KACF,CACA,IAAK,UAAW,CACd,MAAM,IAAEymB,GAAQ4jB,EAChBvrC,EAAQ4sC,kBAAkB,CACxB3uC,OAAQgC,EAAKd,GACb4E,YACA8oC,SAAUtB,EAAOsB,SACjBllB,MACAzmB,UAEF,KACF,MAIJ2H,EAAAA,EAAAA,IAAiB,iBAAkB,CAAChM,EAAQmD,EAAS4O,KACnD,MAAM,QAAEo8B,EAAO,OAAE/sC,EAAM,MAAEiD,GAAQC,EAAAA,EAAAA,OAAsByN,EACjD3O,EAAOhC,GAASoG,EAAAA,EAAAA,KAAWxH,EAAQoB,IAAUmlB,EAAAA,EAAAA,KAAkBvmB,EAAQqE,GACvEwI,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,GAE5D,IAAKjB,IAASyJ,EACZ,OAGF,MAAM,SAAEhF,GAAagF,EACrB1J,EAAQ8sC,oBAAoB,CAAE5rC,UAC9BlB,EAAQ+a,oBAAoB,CAAE7Z,UAE9B,MAAM+C,GAAgB+B,EAAAA,EAAAA,KAAwBnJ,EAAQoD,EAAKd,IAEtD4rC,GACH9qC,EAAM+qC,GAAS13B,EAAAA,EAAAA,KAAYzW,EAAQoD,EAAKd,GAAIuF,IAAWnB,WAAWhF,EAAAA,EAAAA,KAAa1B,EAAQoD,EAAKd,IAAK8E,MAIrG4E,EAAAA,EAAAA,IAAiB,aAAcyI,MAAOzU,EAAQmD,EAAS4O,KACrD,MAAM,OAAE3Q,EAAM,MAAEiD,GAAQC,EAAAA,EAAAA,OAAsByN,GACxC,cAAE9P,GAAkBjC,EACpBoD,GAAOmjB,EAAAA,EAAAA,KAAkBvmB,EAAQqE,GACjC2sB,EAAM/uB,IAAiBiuC,EAAAA,EAAAA,KAAUlwC,EAAQoB,GAC/C,IAAKa,IAAkBmB,IAAS4tB,EAC9B,OAGF,MAAM5pB,GAAgB+B,EAAAA,EAAAA,KAAwBnJ,EAAQoD,EAAKd,UAEtC+S,EAAAA,EAAAA,IAAQ,cAAe,CAAEP,KAAMkc,MAKpDhxB,GAASoL,EAAAA,EAAAA,MACTpL,GAASmwC,EAAAA,EAAAA,KAAkBnwC,EAAQgxB,EAAI1uB,KACvC0I,EAAAA,EAAAA,IAAUhL,GACLkuC,GAAe9qC,EAAM,cAAUmG,GAAW7H,EAAAA,EAAAA,KAAa1B,EAAQoB,GAASgG,OAG/E4E,EAAAA,EAAAA,IAAiB,oBAAqByI,UACpC,MAAM,gBAAEizB,GAAoB1nC,EAAOowC,cACnC,GAAI1I,IAAmBp6B,EAAAA,EAAAA,MAAkBo6B,EAhMR,GAiM/B,OAGF,MAAM9uB,QAAevD,EAAAA,EAAAA,IAAQ,sBAC7B,IAAKuD,EACH,OAGF,MAAM,IAAE5O,GAAQ4O,EAEhB5Y,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHowC,cAAe,IACVpwC,EAAOowC,cACVlvB,QAASlX,EACT09B,iBAAiBp6B,EAAAA,EAAAA,SAGrBtC,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,iBAAkByI,UACjC,MAAM,gBAAEizB,GAAoB1nC,EAAOqwC,WACnC,GAAI3I,IAAmBp6B,EAAAA,EAAAA,MAAkBo6B,EAzNR,GA0N/B,OAGF,MAAM9uB,QAAevD,EAAAA,EAAAA,IAAQ,mBAC7B,IAAKuD,EACH,OAGF,MAAM,IAAE5O,GAAQ4O,EAEhB5Y,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHqwC,WAAY,IACPrwC,EAAOqwC,WACVnvB,QAASlX,EACT09B,iBAAiBp6B,EAAAA,EAAAA,SAGrBtC,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,iBAAkByI,MAAOzU,EAAQmD,EAAS4O,KACzD,MAAM,OACJ3Q,EAAM,SAAEyxB,EAAQ,MAAEF,EAAK,OAAEhL,EAAM,MAC/BtjB,GAAQC,EAAAA,EAAAA,OACNyN,EAEJ,IAAIu+B,GAAgBpwC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOymC,WAAWC,WAAWlY,GACxE,IAAsB,IAAlByd,EAAJ,CAIA,QAAsB/mC,IAAlB+mC,EAA6B,CAC/B,MAAQx7B,KAAMy7B,EAAS,KAAEntC,SAAeiS,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEwd,cAAe,CAAC,EAEpF,GADA7yB,GAASoL,EAAAA,EAAAA,OACJmlC,IAAcntC,EAGjB,OAFApD,EAAS4qC,GAAyB5qC,EAAQ6yB,GAAU,EAAOxuB,QAC3D2G,EAAAA,EAAAA,IAAUhL,GAIZswC,EAAgB,CACdhuC,GAAIiuC,EAAUjuC,GACdqwB,MAAO,GACPhL,OAAQ,GACR6oB,cAAUjnC,EACVknC,aAAa,EACblvC,QAAS,GACTmvC,UAAW,GAGb1wC,EAAS4qC,GAAyB5qC,EAAQ6yB,EAAUyd,EAAejsC,IACnE2G,EAAAA,EAAAA,IAAUhL,EACZ,EAEI2yB,IAAU2d,EAAc3d,OAAU2d,EAAcG,cAI/CtD,GAAsB,MA21B7B14B,eAAsDzU,GAAW,SAC/D6yB,EAAQ,cACRyd,EAAa,OACblvC,EAAM,MACNuxB,EAAK,OACLhL,OAOKtjB,GAAQC,EAAAA,EAAAA,QACbtE,GAASoL,EAAAA,EAAAA,MACT,MAAM4lB,GAAMjc,EAAAA,EAAAA,KAAW/U,EAAQswC,EAAchuC,IACvCc,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAK4vB,IAAQ5tB,EACX,OAGF,MAAMutC,EAAwBL,EAAc3d,QAAUA,EAEtD3yB,EAAS4qC,GADT5qC,EAASgrC,GAA2BhrC,GAAQ,EAAMqE,GACRwuB,EAAU,IAC/Cyd,EACH3d,WACIge,GAAyB,CAAEhpB,YAAQpe,EAAWhI,QAAS,KAC1D8C,IACH2G,EAAAA,EAAAA,IAAUhL,GAEV,MAAM4Y,QAAevD,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD2b,MACA5tB,OACAuvB,QACAhL,OAAQgpB,OAAwBpnC,EAAYoe,IAG9C3nB,GAASoL,EAAAA,EAAAA,MACT,MAAMwlC,GAA2B1wC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOymC,WAAWC,WAAWlY,GAErF,GADA7yB,EAASgrC,GAA2BhrC,GAAQ,EAAOqE,IAC9CuU,IAAWg4B,GAA4Bje,IAAUie,EAAyBje,MAE7E,YADA3nB,EAAAA,EAAAA,IAAUhL,GAIZ,MAAM2wB,EAAa,IAAIzmB,KAAK0mC,EAAyBrvC,SAAW,IAAIwN,IAAK6e,GAASA,EAAKtrB,KACjFuuC,EAAaj4B,EAAOrX,QAAQO,OAAQ8rB,IAAU+C,EAAWhmB,IAAIijB,EAAKtrB,KAExEtC,EAAS4qC,GAAyB5qC,EAAQ6yB,EAAU,IAC/C+d,MACA/M,EAAAA,EAAAA,IAAKjrB,EAAQ,CAAC,OAAQ,WAAY,kBACrC83B,UAAWjuC,KAAKC,MAA2B,IAAnBkW,EAAO83B,aAC3BG,EAAWhvC,QAAU,CAAEivC,UAAWl4B,EAAOk4B,WAC7CL,YAAa73B,EAAOrX,QAAQM,OAAS,GAAK0U,QAAQqC,EAAOsP,YACzD3mB,QAA6C,KAApCqvC,EAAyBjpB,QAAiBipB,EAAyBjpB,SAAW/O,EAAOsP,WAC1FtP,EAAOrX,SACNqvC,EAAyBrvC,SAAW,IAAI0P,OAAO4/B,GACpDlpB,OAAQkpB,EAAWhvC,OAAS+W,EAAOsP,WAAa,IAC/C7jB,IAEH2G,EAAAA,EAAAA,IAAUhL,EACZ,CAt5BI+wC,CAAgB/wC,EAAQ,CACtB6yB,WACAyd,gBACAlvC,SACAuxB,QACAhL,UACCtjB,IApCL,KAwCF2H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,MACJ4gB,EAAK,WAAEyc,EAAU,UAAEloC,EAAS,OAAEpF,EAAM,MAAEuC,GAAQC,EAAAA,EAAAA,OAC5CyN,EACJ,IAAI,MACF+e,GACE/e,EACJ,MAAM3O,GAAOmjB,EAAAA,EAAAA,KAAkBvmB,EAAQqE,GACvC,IAAKjB,EACH,OAGF,IAAK0tB,GAAS5pB,EAAW,CACvB,MAAMlG,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoD,EAAKd,GAAI4E,GACnD,IAAKlG,EACH,OAEF,MAAMuuC,GAASC,EAAAA,EAAAA,KAAaxvC,EAAQgB,GACpC8vB,EAAQ9vB,EAAQ6uC,UAAYN,GAAQjtC,EACtC,CAEA,IAAKwuB,EACH,OAGF,MAAMkgB,GAAYj8B,EAAAA,EAAAA,KAAW/U,EAAQ8wB,GAChCkgB,GAIL7tC,EAAQ8tC,kBAAkB,CACxBljC,KAAM,CACJA,KAAM,KAAImjC,EAAAA,EAAAA,IAAgBF,MAAcre,KAE1CvxB,OAAQguC,EAAahsC,EAAKd,QAAKiH,EAC/BzH,SACAuC,aAKJ2H,EAAAA,EAAAA,IAAiB,yBAA0ByI,MAAOzU,EAAQmD,EAAS4O,KACjE,MAAM,KACJ3O,EAAI,GAAEd,EAAE,QAAE6uC,EAAO,UAAEzqC,EAAS,OAAE8P,EAAM,SAAER,EAAQ,YAAEC,EAAW,eAAEm7B,GAC3Dr/B,QAEEsD,EAAAA,EAAAA,IAAQ,sBAAuB,CACnCjS,OACAiuC,SAAU/uC,EACV6uC,UACAzqC,YACA8P,SACAR,WACA4M,aAAc3M,EACdm7B,mBAGEA,GAAgBjuC,EAAQ0lB,oBAG9B7c,EAAAA,EAAAA,IAAiB,sBAAuByI,MAAOzU,EAAQmD,EAAS4O,KAC9D,MAAM,GACJzP,EAAE,QAAE6uC,EAAO,SAAEn7B,EAAQ,YAAEC,EAAW,SAAEpO,EAAQ,OAAEzG,EAAM,MACpDiD,GAAQC,EAAAA,EAAAA,OACNyN,EACJ,IAAKzP,EACH,OAGF,MAAMc,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1Bub,GAAiBlG,EAAAA,EAAAA,KAAYzW,EAAQoB,EAAQyG,IAAWnB,UAExDA,GAAYuO,EAAAA,EAAAA,KAAuBjV,EAAQoB,EAAQyG,EAAU8U,GAEnExZ,EAAQ8sC,oBAAoB,CAAE5rC,UAC9BlB,EAAQ+a,oBAAoB,CAAE7Z,UAE9B,MAAM2b,QAA2B5F,GAAuBpa,EAAQoB,GAC1DsW,EAAS,CACbtU,OACAd,KACA6uC,UACAzqC,YACA8P,QAAQ9U,EAAAA,EAAAA,KAAa1B,EAAQoB,GAC7B4U,WACAC,cACAm7B,eAAgBpxB,GAEbA,GAKL7c,EAAQmuC,uBAAuB,IAAK55B,IAEpCvU,EAAQwM,iBAAiB,CACvBF,QAAS0hC,EACTthC,MAAO,CAAED,IAAK,4BAA6B8Q,UAAW,CAAE5H,MAAO,GAAK/F,QAAS,CAAE4N,YAAa,IAC5F3f,QAAS,CACP4O,IAAK,2BAA4B8Q,UAAW,CAAErD,QAAQwD,EAAAA,EAAAA,KAAkBC,EAAAA,EAAAA,MAAoBd,KAG9Fe,KAAM,OACNC,qBAAqB,EACrB5e,KAAM,cACNiC,WAhBAlB,EAAQmuC,uBAAuB55B,MAoBnC1L,EAAAA,EAAAA,IAAiB,iBAAkB,CAAChM,EAAQmD,EAAS4O,KACnD,MAAM,SAAE8gB,EAAQ,MAAE9pB,EAAK,MAAE1E,GAAQC,EAAAA,EAAAA,OAAsByN,EAEvD,IAAIu+B,GAAgBpwC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOymC,WAAWC,WAAWlY,GAEnEyd,KAIAvnC,GAAStG,KAAKC,MAAQ4tC,EAAcI,YAEzCJ,EAAgB,CACdhuC,GAAIguC,EAAchuC,GAClBqwB,MAAO,GACPhL,OAAQ,GACR6oB,cAAUjnC,EACVknC,aAAa,EACblvC,QAAS,GACTmvC,UAAW,GAGb1wC,EAAS4qC,GAAyB5qC,EAAQ6yB,EAAUyd,EAAejsC,IACnE2G,EAAAA,EAAAA,IAAUhL,QAGZgM,EAAAA,EAAAA,IAAiB,qBAAsB,CAAChM,EAAQmD,EAAS4O,KACvD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5C+4B,GAAa5qC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOymC,WAAWC,WAE5DhjC,OAAO8G,KAAKi8B,GAAY5oC,QAAS2wB,IAC/B1vB,EAAQouC,eAAe,CAAE1e,WAAUxuB,eAIvC2H,EAAAA,EAAAA,IAAiB,WAAYyI,MAAOzU,EAAQmD,EAAS4O,KACnD,MAAM,MAAE+e,EAAK,MAAE0gB,GAAUz/B,EAEnBif,GAAMjc,EAAAA,EAAAA,KAAW/U,EAAQ8wB,GAC/B,IAAKE,EACH,OAGF,IAAItW,GAAWC,EAAAA,EAAAA,KAAmB3a,EAAQ8wB,GAC1C,IAAKpW,EAAU,CACb,MAAM9B,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE/S,GAAI0uB,EAAI1uB,GAAIkrB,WAAYwD,EAAIxD,aAC5E9S,EAAW9B,GAAQ8B,QACrB,CAEIA,GAAU+2B,iBACNp8B,EAAAA,EAAAA,IAAQ,cAAe,CAAEP,KAAMkc,UAGjC3b,EAAAA,EAAAA,IAAQ,WAAY,CACxB2b,MACA0gB,WAAYF,OAIhBxlC,EAAAA,EAAAA,IAAiB,oBAAqByI,MAAOzU,EAAQmD,EAAS4O,KAC5D,MAAM,MAAE+e,GAAU/e,EACZif,GAAMjc,EAAAA,EAAAA,KAAW/U,EAAQ8wB,GAC/B,IAAKE,EACH,OAGF,IAAItW,GAAWC,EAAAA,EAAAA,KAAmB3a,EAAQ8wB,GAC1C,IAAKpW,EAAU,CACb,MAAM9B,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE/S,GAAI0uB,EAAI1uB,GAAIkrB,WAAYwD,EAAIxD,aAC5E9S,EAAW9B,GAAQ8B,QACrB,CAEIA,GAAU+2B,iBACNp8B,EAAAA,EAAAA,IAAQ,cAAe,CAAEP,KAAMkc,IAGvChxB,GAASoL,EAAAA,EAAAA,MACT,MAAMhI,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQ8wB,GAC1B6gB,GAAc58B,EAAAA,EAAAA,KAAW/U,EAAQA,EAAOiC,eAE9C,IAAKmB,EAAM,OACX,MAAMgE,GAAgB+B,EAAAA,EAAAA,KAAwBnJ,EAAQoD,EAAKd,UAErD+S,EAAAA,EAAAA,IAAQ,cAAe,CAC3BjS,OACAwuC,QAAS,CACPr+B,UAAW,UACXu0B,UAAW6J,EAAY7J,WAAa,GACpCD,SAAU8J,EAAY9J,UAAY,GAClCkB,YAAa4I,EAAY5I,aAAe,GACxCtnB,OAAQkwB,EAAYrvC,IAEtB8E,qBAIJ4E,EAAAA,EAAAA,IAAiB,uBAAwByI,MAAOzU,EAAQmD,EAAS4O,KAC/D,MAAM,IACJ+Y,EAAG,MAAEgG,EAAK,MAAE2e,EAAK,WAAEG,EAAU,eAAEiC,EAAc,oBAAEC,EAAmB,WAAEJ,EAAU,MAC9ErtC,GAAQC,EAAAA,EAAAA,OACNyN,EAEJ,GAAIs7B,GAAsBrtC,EAAQ8wB,EAAOzsB,EAAOymB,GAAM,OAEtD,MAAMkG,GAAMjc,EAAAA,EAAAA,KAAW/U,EAAQ8wB,GAC/B,IAAKE,EAAK,OAEV,KAAK+gB,EAAAA,EAAAA,KAAmB/xC,EAAQ8wB,GAY9B,OAXA9wB,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BgyC,gBAAiB,CACflhB,QACA1uB,KAAM,SACN6vC,UAAW,CACT3nC,OAAQ,uBACRyH,aAGH1N,QACH2G,EAAAA,EAAAA,IAAUhL,GAIZ,MAAMkyC,QAAmB78B,EAAAA,EAAAA,IAAQ,uBAAwB,CACvDyV,MACAkG,MACAye,QACAiC,aACAG,iBACAC,wBAEGI,IAYLlyC,EAAS0rC,GART1rC,GAASoL,EAAAA,EAAAA,MACoB,CAC3BkiC,WAAYxiB,EACZqnB,QAASnhB,EAAI8W,UACbhd,IAAKonB,EACLphB,QACA8e,eAEiD,GAAM,EAAMvrC,IAC/D2G,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,iBAAkByI,MAAOzU,EAAQmD,EAAS4O,KACzD,MAAM,IACJ+Y,EAAG,MAAEgG,EAAK,OAAE9uB,EAAM,MAAEytC,EAAK,SAAEz5B,EAAQ,WAAE45B,EAAU,cAAEwC,EAAa,WAAEV,EAAU,aAAE/nB,EAAY,MACxFtlB,GAAQC,EAAAA,EAAAA,OACNyN,EAEJ,GAAIs7B,GAAsBrtC,EAAQ8wB,EAAOzsB,EAAOymB,GAAM,OAEtD,MAAMkG,GAAMjc,EAAAA,EAAAA,KAAW/U,EAAQ8wB,GAC/B,IAAKE,EAAK,OACV,MAAM3W,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EAAM,OAEX,KAAK03B,EAAAA,EAAAA,KAAmB/xC,EAAQ8wB,GAY9B,OAXA9wB,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BgyC,gBAAiB,CACflhB,QACA1uB,KAAM,SACN6vC,UAAW,CACT3nC,OAAQ,iBACRyH,aAGH1N,QACH2G,EAAAA,EAAAA,IAAUhL,GAIZ,MAAM6M,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAEtD,OAAEjD,EAAM,SAAEyG,EAAWD,EAAAA,IAAmBiF,GAAsB,CAAC,EAC/D8P,EAAiBvb,GAASqV,EAAAA,EAAAA,KAAYzW,EAAQoB,EAAQyG,IAAWnB,eAAY6C,EAC7E7C,EAAYtF,GAAS6T,EAAAA,EAAAA,KAAuBjV,EAAQoB,EAAQyG,EAAU8U,QAAkBpT,EAExFiN,EAASpV,GAASM,EAAAA,EAAAA,KAAa1B,EAAQoB,QAAUmI,EACjDqP,QAAevD,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7CyV,MACAkG,MACA3W,OACAo1B,QACAz5B,WACAtP,YACA0rC,gBACAV,aACAl7B,SACAmT,iBAEF,IAAK/Q,EACH,OAGF,MAAQkS,IAAKonB,EAAU,QAAEf,EAAO,aAAEkB,GAAiBz5B,EAanD5Y,EAAS0rC,GAXT1rC,GAASoL,EAAAA,EAAAA,MACoB,CAC3BkiC,WAAYxiB,EACZA,IAAKonB,EACLC,QAASnhB,EAAI8W,UACbhX,QACA9uB,SACAmvC,UACAzqC,YACAkpC,eAEiD,GAAM,EAAMvrC,IAC/D2G,EAAAA,EAAAA,IAAUhL,GAENqyC,IAAgBC,EAAAA,EAAAA,OAClBnvC,EAAQovC,uBAAuB,CAAEC,MAAO,aAAcnuC,aAI1D2H,EAAAA,EAAAA,IAAiB,qBAAsByI,MAAOzU,EAAQmD,EAAS4O,KAC7D,MAAM,MACJ+e,EAAK,OAAE9uB,EAAM,MAAEytC,EAAK,WAAEiC,EAAU,KAAEe,EAAI,qBAAEC,EAAoB,MAC5DruC,GAAQC,EAAAA,EAAAA,OACNyN,EAEJ,IAAIiU,EAAAA,EAAAA,KAA0BhmB,GAE5B,YADAmD,EAAQwvC,uBAAuB,CAAEtuC,UAInC,GAAIgpC,GAAsBrtC,EAAQ8wB,EAAOzsB,GAAQ,OAEjD,MAAM2sB,GAAMjc,EAAAA,EAAAA,KAAW/U,EAAQ8wB,GAC/B,IAAKE,EAAK,OACV,MAAM3W,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EAAM,OAEX,KAAK03B,EAAAA,EAAAA,KAAmB/xC,EAAQ8wB,GAAQ,CACtC,IAAI4hB,EAcF,OAXA1yC,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BgyC,gBAAiB,CACflhB,QACA1uB,KAAM,SACN6vC,UAAW,CACT3nC,OAAQ,qBACRyH,aAGH1N,QACH2G,EAAAA,EAAAA,IAAUhL,GAZVmD,EAAQyvC,eAAe,CAAE9hB,QAAO+hB,gBAAgB,EAAMxuC,SAe1D,CAEA,MAAMuU,QAAevD,EAAAA,EAAAA,IAAQ,qBAAsB,CACjD2b,MACA3W,OACAo1B,QACAiC,aACAe,SAEF,IAAK75B,EACH,OAGF,MAAQkS,IAAKonB,EAAU,QAAEf,EAAO,aAAExnB,GAAiB/Q,EAWnD5Y,EAAS0rC,GATT1rC,GAASoL,EAAAA,EAAAA,MACoB,CAC3B0f,IAAKonB,EACLC,QAASnhB,EAAI8W,UACbhX,QACA9uB,SACAmvC,UACAvB,WAAY,KAEqC,GAAM,EAAMvrC,IAC/D2G,EAAAA,EAAAA,IAAUhL,GAEN2pB,IAAgB2oB,EAAAA,EAAAA,OAClBnvC,EAAQovC,uBAAuB,CAAEC,MAAO,aAAcnuC,aAI1D2H,EAAAA,EAAAA,IAAiB,oBAAqByI,MAAOzU,EAAQmD,EAAS4O,KAC5D,MAAM,MACJ+e,GACE/e,EACEif,GAAMjc,EAAAA,EAAAA,KAAW/U,EAAQ8wB,GAC/B,IAAKE,EAAK,OAEV,MAAM8hB,QAAez9B,EAAAA,EAAAA,IAAQ,qBAAsB,CACjD2b,QAGFhxB,GAASoL,EAAAA,EAAAA,MACL0nC,IACF9yC,EAAS,IACJA,EACHwkC,MAAO,IACFxkC,EAAOwkC,MACVuO,oBAAqB,IAChB/yC,EAAOwkC,MAAMuO,oBAChB,CAACjiB,GAAQgiB,MAKf9nC,EAAAA,EAAAA,IAAUhL,OAIdgM,EAAAA,EAAAA,IAAiB,oCAAqC,CAAChM,EAAQmD,EAAS4O,KACtE,MAAM,MACJ1N,GAAQC,EAAAA,EAAAA,OACNyN,GAAW,CAAC,EAEhB,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BgzC,qCAAqC,GACpC3uC,MAGL2H,EAAAA,EAAAA,IAAiB,qCAAsC,CAAChM,EAAQmD,EAAS4O,KACvE,MAAM,mBAAEkhC,EAAkB,MAAE5uC,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAMtE,OAJA/R,GAASkzC,EAAAA,EAAAA,KAAqBlzC,EAAQ,CACpCmzC,kCAAmC58B,QAAQ08B,MAGtC/kC,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BgzC,yCAAqCzpC,GACpClF,MAGL2H,EAAAA,EAAAA,IAAiB,oBAAqByI,MAAOzU,EAAQmD,EAAS4O,KAC5D,MAAM,MACJ+e,EAAK,QAAEqhB,EAAO,SAAEiB,EAAQ,KAAEX,EAAI,MAAEhD,EAAK,eAAEoD,EAAc,cAAEQ,EAAa,0BAAEC,EAAyB,MAC/FjvC,GAAQC,EAAAA,EAAAA,OACNyN,EAEJ,GAAIs7B,GAAsBrtC,EAAQ8wB,EAAOzsB,EAAO8tC,GAAU,OAE1D,MAAMnhB,GAAMjc,EAAAA,EAAAA,KAAW/U,EAAQ8wB,GAC/B,IAAKE,EAAK,OAGV,MAAMuiB,EAAuBh9B,QAAQvW,EAAOwzC,WAAWC,KAAKziB,EAAI1uB,KAChE,GAAI0uB,EAAI0iB,cAAgBL,IAAkBE,EAAsB,CAC9D,MAAM36B,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C2b,QAEF,GAAIpY,EAAQ,CACV5Y,GAASoL,EAAAA,EAAAA,MAET,MAAMuoC,EAAY/6B,EAAOoY,IAGzB,GAFwB2iB,EAAUC,oBAAsBD,EAAUE,iBAAmBF,EAAUG,cAgB7F,OAbA9zC,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B+zC,0BAA2B,CACzB/iB,IAAK2iB,EACL1B,UAAW,CACT3nC,OAAQ,oBACRyH,QAAS,IACJA,EACHshC,eAAe,MAIpBhvC,QACH2G,EAAAA,EAAAA,IAAUhL,EAGd,CACF,CAEA,MAAMg0C,QAAe3+B,EAAAA,EAAAA,IAAQ,cAAe,CAC1C2b,MACAmhB,YAIF,GAFAnyC,GAASoL,EAAAA,EAAAA,OAEJ4oC,EAEH,YADA7wC,EAAQwM,iBAAiB,CAAE3O,SAAS4gB,EAAAA,EAAAA,IAAa,8BAA+Bvd,UAMlF,IAF+BivC,IAA8BU,EAAOC,cAAelC,EAAAA,EAAAA,KAAmB/xC,EAAQ8wB,IAgB5G,OAbA/e,EAAQuhC,2BAA4B,EACpCtzC,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BgyC,gBAAiB,CACflhB,QACAgd,yBAA0BkG,EAAOlG,yBACjC1rC,KAAM,SACN6vC,UAAW,CACT3nC,OAAQ,oBACRyH,aAGH1N,QACH2G,EAAAA,EAAAA,IAAUhL,GAIZ,MAAMqa,GAAOkM,EAAAA,EAAAA,KAAkBvmB,EAAQqE,IAEjC,IAAEymB,EAAG,aAAEnB,SAAuBtU,EAAAA,EAAAA,IAAQ,oBAAqB,CAC/DgF,KAAMA,GAAQ2W,EACdkjB,IAAKF,EACLtC,WAAY0B,EACZX,OACAI,iBACApD,UAIF,GAFAzvC,GAASoL,EAAAA,EAAAA,OAEJ0f,EAAK,OAEV9qB,GAASoL,EAAAA,EAAAA,MAET,MAAMpJ,EAAUqY,EAAOA,EAAK/X,GAAK0uB,EAAI1uB,GASrCtC,EAAS0rC,GAAoB1rC,EAPA,CAC3B8qB,MACAqnB,QAASA,GAAWnhB,EAAI8W,UACxB9lC,SACA8uB,QACA8e,WAAY,KAEqC,GAAM,EAAMvrC,IAC/D2G,EAAAA,EAAAA,IAAUhL,GAEN2pB,IAAgB2oB,EAAAA,EAAAA,OAClBnvC,EAAQovC,uBAAuB,CAAEC,MAAO,aAAcnuC,aAI1D2H,EAAAA,EAAAA,IAAiB,iBAAkByI,MAAOzU,EAAQmD,EAAS4O,KACzD,MAAM,MACJ+e,EAAK,OAAE9uB,EAAM,SAAEgU,EAAQ,UAAEtP,EAAS,QAAEyqC,EAAO,MAAE9sC,GAAQC,EAAAA,EAAAA,OACnDyN,EAEEif,GAAMjc,EAAAA,EAAAA,KAAW/U,EAAQ8wB,GAC/B,IAAKE,EAAK,OACV,MAAM3W,GAAO7S,EAAAA,EAAAA,KAAWxH,EAAQgC,GAChC,IAAKqY,EAAM,OAEX,MAAM7D,GAAS9U,EAAAA,EAAAA,KAAa1B,EAAQgC,SAEfqT,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7C2b,MACA3W,OACArE,WACAtP,YACAyqC,UACA36B,YAIArT,EAAQgxC,kBAAkB,CAAE9vC,aAIhC2H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,IACJif,EAAG,KAAEpD,EAAI,WAAEgiB,GACT79B,GAEJsD,EAAAA,EAAAA,IAAQ,kBAAmB,CACzB2b,MACApD,OACAgiB,kBAIJ5jC,EAAAA,EAAAA,IAAiB,iBAAkByI,gBA4CnCA,eAAqDzU,GACnD,MAAM4Y,QAAevD,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEuc,UA5C3CwiB,IA6CN,GAAKx7B,EAcL,OAVA5Y,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHwzC,WAAY,CACV5hB,KAAMhZ,EAAOgZ,KACb6hB,KAAM76B,EAAO66B,QAGjBzoC,EAAAA,EAAAA,IAAUhL,GAEH4Y,CACT,CA5DQw7B,CAAep0C,IAErBq0C,EAAAA,GAAAA,GAAqB,CACnB/pC,OAAQ,iBACRyH,aAASxI,GACR+qC,EAAAA,QAGLtoC,EAAAA,EAAAA,IAAiB,kBAAmByI,MAAOzU,EAAQmD,EAAS4O,KAC1D,MAAM,MAAE+e,EAAK,eAAE+hB,EAAc,UAAE0B,GAAcxiC,EAEvCif,GAAMjc,EAAAA,EAAAA,KAAW/U,EAAQ8wB,GAE1BE,SAEC3b,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE2b,MAAK6hB,iBAAgB0B,iBA+C1DvoC,EAAAA,EAAAA,IAAiB,gBAAiB,CAAChM,EAAQmD,EAAS4O,KAClD,MAAM,IACJif,EAAG,WAAE0gB,EAAU,cAAE2B,EAAa,MAAEhvC,GAAQC,EAAAA,EAAAA,OACtCyN,EACE8/B,EAAiB,mBAAoB9/B,GAAWA,EAAQ8/B,eAExDO,GAAiBphB,EACjBwjB,GAA4BpC,IAAkBpyC,EAAOwzC,WAAWC,KAAKziB,EAAI1uB,KAC1E0uB,GAAKijB,YAAcjjB,GAAK4iB,mBAE7B,IAAKP,GAAiBmB,EACpB,OAAOtmC,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B+zC,0BAA2B,CACzB/iB,MACAihB,UAAW,CACT3nC,OAAQ,gBACRyH,QAAS,IACJA,EACHshC,eAAe,MAIpBhvC,GAGL,MAAMorC,GAAQC,EAAAA,GAAAA,KAYd,GAXImC,GACF1uC,EAAQwsC,qBAAqB,CAC3B7e,MAAOE,EAAK1uB,GACZstC,WAAY,GACZiC,gBAAgB,EAChBH,aACAjC,QACAprC,UAIA,WAAY0N,EAAS,CACvB,MAAM,OAAE3Q,EAAM,SAAEyG,EAAWD,EAAAA,GAAc,IAAEkjB,GAAQ/Y,EACnD5O,EAAQiqB,WAAW,CAAEhsB,SAAQyG,WAAUxD,UACvClB,EAAQ2sC,eAAe,CACrBhlB,MACA9oB,OAAQZ,EACR0vB,MAAQshB,EAAgBhxC,EAAS4vB,EAAI1uB,GACrCmtC,QACAG,WAAY,GACZwC,gBACAV,aACArtC,SAEJ,KAKF2H,EAAAA,EAAAA,IAAiB,0BAA2ByI,MAAOzU,EAAQmD,EAAS4O,KAClE,MAAM,eAAE8gC,EAAc,MAAExuC,GAAQC,EAAAA,EAAAA,OAAsByN,GAChD,0BAAEgiC,IAA8B7zC,EAAAA,EAAAA,KAAeF,EAAQqE,IAEvD,IAAE2sB,EAAG,UAAEihB,GAAc8B,EAE3B/zC,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B+zC,+BAA2BxqC,GAC1BlF,IACH2G,EAAAA,EAAAA,IAAUhL,GAEV,MAAMy0C,GAAU1/B,EAAAA,EAAAA,KAAW/U,EAAQgxB,EAAI1uB,IACvC,GAAKmyC,IAELtxC,EAAQyvC,eAAe,CAAE9hB,MAAOE,EAAI1uB,GAAIuwC,iBAAgBxuC,gBAClDgR,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE2b,IAAKyjB,EAAS5B,iBAAgB0B,WAAW,IACxEtC,GAAW,CACb,MAAM,OAAE3nC,EAAQyH,QAAS2iC,GAAkBzC,EAE3C9uC,EAAQmH,GAAQoqC,EAClB,KAGF1oC,EAAAA,EAAAA,IAAiB,oBAAqByI,MAAOzU,EAAQmD,EAAS4O,KAC5D,MAAM,OACJ3Q,EAAM,SAAE4uC,EAAQ,UAAE9oC,EAAS,IAAE4jB,EAAG,MAAEzmB,GAAQC,EAAAA,EAAAA,OACxCyN,EAEE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMwV,QAAevD,EAAAA,EAAAA,IAAQ,oBAAqB,CAChDjS,OACA4sC,WACA9oC,cAGG0R,IACL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B4tC,QAAS,CACP9iB,MACA4jB,OAAQ,CACNsB,WACA9oC,YACA9F,OAAQgC,EAAKd,MAGhB+B,IACH2G,EAAAA,EAAAA,IAAUhL,GACV2tC,GAAoB3tC,EAAQmD,EAAS2nB,EAAKlS,EAAQvU,OAGpD2H,EAAAA,EAAAA,IAAiB,mBAAoByI,MAAOzU,EAAQmD,EAAS4O,KAC3D,MAAM,eAAE8gC,EAAc,MAAExuC,GAAQC,EAAAA,EAAAA,OAAsByN,EAChD9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,IAAK4J,EAAS2/B,SAASc,OAAQ,OAC/B,MAAM,OACJA,EAAM,IAAE5jB,GACN7c,EAAS2/B,SACP,OAAExsC,EAAM,UAAE8F,EAAS,SAAE8oC,GAAatB,EAElCtrC,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMwV,QAAevD,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/CjS,OACA8D,YACA8oC,WACA6C,mBAEGj6B,GAEL+0B,GADA3tC,GAASoL,EAAAA,EAAAA,MACmBjI,EAAS2nB,EAAKlS,EAAQvU,MAGpD2H,EAAAA,EAAAA,IAAiB,qBAAsByI,MAAOzU,EAAQmD,EAAS4O,KAC7D,MAAM,IAAE+Y,EAAG,MAAEzmB,GAAQC,EAAAA,EAAAA,OAAsByN,EAErC6G,QAAevD,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEyV,QAChDlS,IACL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B4tC,QAAS,CACP9iB,QAEDzmB,IACH2G,EAAAA,EAAAA,IAAUhL,GACV2tC,GAAoB3tC,EAAQmD,EAAS2nB,EAAKlS,EAAQvU,OAGpD2H,EAAAA,EAAAA,IAAiB,oBAAqByI,MAAOzU,EAAQmD,EAAS4O,KAC5D,MAAM,eAAE8gC,EAAc,MAAExuC,GAAQC,EAAAA,EAAAA,OAAsByN,EAChD9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,IAAK4J,EAAS2/B,SAAS9iB,IAAK,OAC5B,MAAM,IAAEA,GAAQ7c,EAAS2/B,QAEnBh1B,QAAevD,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEyV,MAAK+nB,mBACpDj6B,GAEL+0B,GADA3tC,GAASoL,EAAAA,EAAAA,MACmBjI,EAAS2nB,EAAKlS,EAAQvU,MAGpD2H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B4tC,aAASrkC,GACRlF,MAgJL2H,EAAAA,EAAAA,IAAiB,aAAcyI,MAAOzU,EAAQmD,EAAS4O,KACrD,MAAM,IACJif,EAAG,KAAE2jB,EAAM5vB,YAAa6vB,EAAK,MAC7BvwC,GAAQC,EAAAA,EAAAA,OACNyN,EAEJ,IAAI,SAAE8iC,GAAa9iC,EACd8iC,IAAUA,GAAWC,EAAAA,GAAAA,GAAqB90C,GAAQw2B,UAEvD,MAAM,cAAEv0B,GAAkBjC,EACrBiC,GAAkB+uB,IAIvBhxB,GAASoL,EAAAA,EAAAA,MACTpL,GAASu/B,EAAAA,EAAAA,KAAyBv/B,EAAQk/B,EAAAA,GAAmBC,WAAY96B,IACzE2G,EAAAA,EAAAA,IAAUhL,IAEN20C,GAAQC,UACWv/B,EAAAA,EAAAA,IAAQ,aAAc,CACzC2b,MAAK6jB,WAAUF,OAAMC,YAIrB50C,GAASoL,EAAAA,EAAAA,MACTpL,GAASunC,EAAAA,EAAAA,KACPvnC,EACAgxB,EAAI1uB,GACJ,CACEwlC,UAAW6M,IAGf30C,GAASoqB,EAAAA,EAAAA,KAAmBpqB,EAAQgxB,EAAI1uB,GAAI,CAAEyyC,IAAKH,KACnD5pC,EAAAA,EAAAA,IAAUhL,IAIdA,GAASoL,EAAAA,EAAAA,MACTpL,GAASu/B,EAAAA,EAAAA,KAAyBv/B,EAAQk/B,EAAAA,GAAmBM,SAAUn7B,IACvE2G,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,kCAAmCyI,MAAOzU,EAAQmD,EAAS4O,KAC1E,MAAM,MACJ+e,EAAK,UAAEyjB,EAAS,wBAAES,GAChBjjC,EAEEif,GAAMkf,EAAAA,EAAAA,KAAUlwC,EAAQ8wB,GAEzBA,GAAUE,SAIM3b,EAAAA,EAAAA,IAAQ,kCAAmC,CAC9D2b,MAAKujB,gBAKPv0C,GAASoL,EAAAA,EAAAA,MACTpL,GAASoqB,EAAAA,EAAAA,KAAmBpqB,EAAQ8wB,EAAO,CACzCmkB,0BAA2BV,EAC3BS,6BAEFhqC,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,+BAAgC,CAAChM,EAAQmD,EAAS4O,KACjE,MAAM,MACJ+e,EAAK,gBAAEokB,GACLnjC,EAEEif,GAAMjc,EAAAA,EAAAA,KAAW/U,EAAQ8wB,GAC1BE,IAELhxB,GAASoL,EAAAA,EAAAA,MACTpL,GAASm1C,EAAAA,EAAAA,KAAwBn1C,EAAQgxB,EAAI1uB,GAAI,CAAE8yC,YAAaF,KAChElqC,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,6BAA8ByI,MAAOzU,EAAQmD,EAAS4O,KACrE,MAAM,MACJy/B,EAAK,MACLntC,GAAQC,EAAAA,EAAAA,OACNyN,EAEJ,IAAKq7B,GAAa,CAChB,MAAMhqC,QAAaiyC,EAAAA,EAAAA,IAAoBr1C,EAAQs1C,EAAAA,KAC/C,IAAKlyC,EACH,OAEFgqC,GAAchqC,EAAKd,EACrB,CAEIkvC,GACFruC,EAAQoyC,SAAS,CAAEzkB,MAAOsc,GAAaoE,UAGzCruC,EAAQkhB,SAAS,CAAE/hB,GAAI8qC,GAAa/oC,aAGtC2H,EAAAA,EAAAA,IAAiB,sBAAuByI,UACtC,MAAM+gC,EAASx1C,EAAO+iB,UAAU0yB,gBAChC,IAAKD,EAAQ,OACb,MAAME,EAAoBF,GAASG,EAAAA,EAAAA,IAAwBH,QAAUjsC,EACrE,IAAKmsC,EAAmB,OACxB,MAAMtyC,QAAaiyC,EAAAA,EAAAA,IAAoBr1C,EAAQ01C,GAC/C11C,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACH41C,kBAAmBxyC,GAAMd,KAE3B0I,EAAAA,EAAAA,IAAUhL,K,UCn5CZgM,EAAAA,EAAAA,IAAiB,mBAAoByI,UACnC,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,mBACxBuD,IAIL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASkuB,EAAAA,EAAAA,KAAgBluB,EAAQ,CAAE61C,YAAaj9B,EAAOi9B,cACvD71C,GAAS81C,EAAAA,EAAAA,KAAoB91C,EAAQ,CAAE+1C,KAAMn9B,EAAOm9B,QACpD/qC,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,gBAAiByI,MAAOzU,EAAQmD,EAAS4O,KACxD,MAAM,gBAAEikC,EAAe,UAAEC,GAAclkC,EAEvC/R,GAAS81C,EAAAA,EAAAA,KAAoB91C,EAAQ,CAAE22B,WAAW,EAAMuf,cAAU3sC,KAClEyB,EAAAA,EAAAA,IAAUhL,GAEV,MAAMm2C,QAAkB9gC,EAAAA,EAAAA,IAAQ,gBAAiB2gC,GAEjDh2C,GAASoL,EAAAA,EAAAA,MACTpL,GAAS81C,EAAAA,EAAAA,KAAoB91C,EAAQ,CAAE22B,WAAW,KAClD3rB,EAAAA,EAAAA,IAAUhL,GAENm2C,GACFF,OAIJjqC,EAAAA,EAAAA,IAAiB,gBAAiByI,MAAOzU,EAAQmD,EAAS4O,KACxD,MAAM,gBAAEikC,EAAe,UAAEC,GAAclkC,EAEvC/R,GAAS81C,EAAAA,EAAAA,KAAoB91C,EAAQ,CAAE22B,WAAW,EAAMuf,cAAU3sC,KAClEyB,EAAAA,EAAAA,IAAUhL,GAEV,MAAMm2C,QAAkB9gC,EAAAA,EAAAA,IAAQ,gBAAiB2gC,GAEjDh2C,GAASoL,EAAAA,EAAAA,MACTpL,GAAS81C,EAAAA,EAAAA,KAAoB91C,EAAQ,CAAE22B,WAAW,KAClD3rB,EAAAA,EAAAA,IAAUhL,GAENm2C,GACFF,OAIJjqC,EAAAA,EAAAA,IAAiB,iBAAkByI,MAAOzU,EAAQmD,EAAS4O,KACzD,MAAM,gBACJikC,EAAe,SAAEI,EAAQ,KAAEL,EAAI,MAAEM,EAAK,UAAEJ,GACtClkC,EAEJ/R,GAAS81C,EAAAA,EAAAA,KAAoB91C,EAAQ,CAAE22B,WAAW,EAAMuf,cAAU3sC,KAClEyB,EAAAA,EAAAA,IAAUhL,GAEV,MAAMm2C,QAAkB9gC,EAAAA,EAAAA,IAAQ,iBAAkB2gC,EAAiBI,EAAUL,EAAMM,GAEnFr2C,GAASoL,EAAAA,EAAAA,MACTpL,GAAS81C,EAAAA,EAAAA,KAAoB91C,EAAQ,CAAE22B,WAAW,KAClD3rB,EAAAA,EAAAA,IAAUhL,GAENm2C,GACFF,OAIJjqC,EAAAA,EAAAA,IAAiB,sBAAuByI,MAAOzU,EAAQmD,EAAS4O,KAC9D,MAAM,gBACJikC,EAAe,MAAEK,EAAK,UAAEJ,EAAS,MACjC5xC,GAAQC,EAAAA,EAAAA,OACNyN,EAEJ/R,GAAS81C,EAAAA,EAAAA,KAAoB91C,EAAQ,CAAE22B,WAAW,EAAMuf,cAAU3sC,IAClEvJ,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9Bs2C,cAAeD,GACdhyC,IACH2G,EAAAA,EAAAA,IAAUhL,GAEV,MAAMm2C,QAAkB9gC,EAAAA,EAAAA,IAAQ,sBAAuB2gC,EAAiBK,GAExEr2C,GAASoL,EAAAA,EAAAA,MACTpL,GAAS81C,EAAAA,EAAAA,KAAoB91C,EAAQ,CAAE22B,WAAW,EAAO4f,4BAAwBhtC,IACjFvJ,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9Bs2C,mBAAe/sC,GACdlF,IACH2G,EAAAA,EAAAA,IAAUhL,GAENm2C,GACFF,OAIJjqC,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,KAAEykC,GAASzkC,GAEZsD,EAAAA,EAAAA,IAAQ,2BAA4BmhC,MAG3CxqC,EAAAA,EAAAA,IAAiB,kBAAoBhM,IAC5B81C,EAAAA,EAAAA,KAAoB91C,EAAQ,CAAEk2C,cAAU3sC,KCxGjD,MAAMktC,GAA+C,CACnDC,4BAA6B,CAC3BC,MAAO,aACP31C,QAAS,yBAEX41C,eAAgB,CACdD,MAAO,aACP31C,QAAS,yBAEX61C,OAAQ,CACNF,MAAO,aACP31C,QAAS,yBAEX81C,SAAU,CACRH,MAAO,SACP31C,QAAS,kBAEX+1C,UAAW,CACTJ,MAAO,SACP31C,QAAS,mBAEXg2C,oBAAqB,CACnBL,MAAO,SACP31C,QAAS,kBAEXi2C,qBAAsB,CACpBN,MAAO,SACP31C,QAAS,mBAEXk2C,IAAK,CACHP,MAAO,MACP31C,QAAS,iBAEXm2C,YAAa,CACXR,MAAO,MACP31C,QAAS,kB,gBC0hCbyT,eAAe2iC,GACbp3C,EAAWq3C,EAA+Br6B,MACtC3Y,GAAQC,EAAAA,EAAAA,QAEZ,MAAMnB,GAAU8c,EAAAA,EAAAA,MACVq3B,EAA8B,mBAAtBD,EAAaj1C,MAA6Bi1C,EAAan6B,WAAaS,EAAAA,IAC5EJ,EAAU+5B,EAAQt3C,EAAO4d,KAAKL,QAAUvd,EAAOsd,OAAOC,QACtDL,EAAWo6B,EAAQ35B,EAAAA,IAAoBR,EAAAA,IAE7C,QAAgB5T,IAAZgU,EAAuB,OAE3B,GAAIA,EAAQF,OAASL,EAEnB,YADA7Z,EAAQqa,sBAAsB,CAAEN,WAAU7Y,UAI5C,MAAMkzC,GAAsBC,EAAAA,GAAAA,IAAuBx3C,EAAQq3C,GAC3D,IAAKE,EACH,OAGFv3C,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9By3C,sBAAsB,GACrBpzC,IACH2G,EAAAA,EAAAA,IAAUhL,GAEV,MAAMyvC,GAAQC,EAAAA,GAAAA,KACRgI,QAAariC,EAAAA,EAAAA,IAAQ,iBAAkBkiC,EAAqB9H,GAElE,IAAKiI,EACH,OAUF,GAPA13C,GAASoL,EAAAA,EAAAA,MAETpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9By3C,sBAAsB,GACrBpzC,IACH2G,EAAAA,EAAAA,IAAUhL,GAEN,UAAW03C,EAEb,YADAC,GAAuBD,EAAK7jC,MAAOxP,GAIrC,MAAMuzC,EAAYF,EAAKrkC,QAAQwkC,YAC3BD,IAAc56B,EAclB7Z,EAAQ20C,oBAAoB,CAC1BC,WAAY,CACVV,eACAW,OAAQN,EAAKM,QAEf3zC,UAlBAlB,EAAQ80C,sBAAsB,CAC5BC,eAAgBl7B,EAChBm7B,UAAWP,EACX16B,WACA66B,WAAY,CACVV,eACAW,OAAQN,EAAKM,QAEf3zC,SAYN,CAsEA,SAASszC,GAAuB9jC,EAAexP,GAC/B,iBAAVwP,GAUJoM,EAAAA,EAAAA,MAAa0N,WAAW,CAAEC,KAAM,CAAE5sB,QAAS6S,EAAOukC,aAAa,GAAQ/zC,WATrE4b,EAAAA,EAAAA,MAAatQ,iBAAiB,CAC5B3O,QAAS,CACP4O,IAAK,0BAEPvL,SAMN,EA3pCA2H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,YAAEsmC,EAAW,SAAEC,EAAQ,MAAEj0C,GAAQC,EAAAA,EAAAA,OAAsByN,EAEvDslC,GAAekB,EAAAA,EAAAA,KAA0Bv4C,EAAQqE,GACvD,IAAKgzC,EACH,OAGF,MAAME,GAAsBC,EAAAA,GAAAA,IAAuBx3C,EAAQq3C,GACtDE,GAmiBP9iC,eACEzU,EAAWq3C,EAAsCgB,EAAkBG,MAC/Dn0C,GAAQC,EAAAA,EAAAA,QAEZ,MAAMsU,QAAevD,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDgiC,eAAcgB,cAAaG,eAE7B,IAAK5/B,EACH,OAGF,MAAM,GAAEtW,EAAE,gBAAEm2C,GAAoB7/B,EAChC5Y,GAASoL,EAAAA,EAAAA,MAETpL,GAAS04C,EAAAA,EAAAA,KAAiB14C,EAAQsC,EAAI+B,GAClCo0C,GAAiB52C,QACnB7B,GAAS24C,EAAAA,EAAAA,KAAsB34C,EAAQy4C,EAAiBp0C,GACxDrE,GAAS44C,EAAAA,EAAAA,KAAe54C,EAAQ64C,EAAAA,GAAYC,SAAUz0C,IAEtDrE,GAAS44C,EAAAA,EAAAA,KAAe54C,EAAQ64C,EAAAA,GAAYE,SAAU10C,IAExD2G,EAAAA,EAAAA,IAAUhL,EACZ,CArjBEg5C,CAAsBh5C,EAAQu3C,EAAqBc,EAAaC,EAAUj0C,MAG5E2H,EAAAA,EAAAA,IAAiB,cAAeyI,MAAOzU,EAAQmD,EAAS4O,KACtD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,SAAsB+yC,GAAiBtlC,EAEjDwlC,GAAsBC,EAAAA,GAAAA,IAAuBx3C,EAAQq3C,GAC3D,IAAKE,EACH,OAGFv3C,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9By3C,sBAAsB,GACrBpzC,IACH2G,EAAAA,EAAAA,IAAUhL,GAEV,MAAMyvC,GAAQC,EAAAA,GAAAA,KACRgI,QAAariC,EAAAA,EAAAA,IAAQ,iBAAkBkiC,EAAqB9H,GAElE,GAAKiI,EAAL,CAUA,GANA13C,GAASoL,EAAAA,EAAAA,MAETpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9By3C,sBAAsB,GACrBpzC,GAEC,UAAWqzC,EAIb,OAHA1sC,EAAAA,EAAAA,IAAUhL,QAEV23C,GAAuBD,EAAK7jC,MAAOxP,GAInB,YAAdqzC,EAAKt1C,OACPpC,GAASi5C,EAAAA,EAAAA,KAAcj5C,EAAQ,CAC7Bq3C,aAActlC,EACd2lC,OACAwB,oBAAoB,EACpBC,gBAAkBpnC,EAAgBonC,gBAClCC,YAAQ7vC,GACPlF,GACHrE,GAAS44C,EAAAA,EAAAA,KAAe54C,EAAQ64C,EAAAA,GAAYE,SAAU10C,IAGtC,UAAdqzC,EAAKt1C,OACPpC,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9Bq5C,aAAc,CACZhC,eACAK,OACA0B,OAAQ,YAET/0C,KAGL2G,EAAAA,EAAAA,IAAUhL,EApCV,KAuCFgM,EAAAA,EAAAA,IAAiB,eAAgB,CAAChM,EAAQmD,EAAS4O,KACjD,MAAM,KACJunC,EAAI,OAAEt3C,EAAM,QAAEhB,EAAO,eAAEu4C,EAAc,cAAEC,EAAa,MAAEn1C,GAAQC,EAAAA,EAAAA,OAC5DyN,EAWJqlC,GAAoBp3C,EAT0B,CAC5CoC,KAAM,WACNJ,SACAy3C,OAAQH,EAAKh3C,GACbtB,UACAu4C,iBACAC,cAAeA,QAAiBjwC,GAGQ+vC,EAAKh8B,MAAOjZ,MAGxD2H,EAAAA,EAAAA,IAAiB,cAAe,CAAChM,EAAQmD,EAAS4O,KAChD,MAAM,KACJ2nC,EAAI,OAAE13C,EAAM,MAAEgb,EAAK,MAAE3Y,GAAQC,EAAAA,EAAAA,OAC3ByN,EASJqlC,GAAoBp3C,EAPgC,CAClDoC,KAAM,iBACNs3C,OACA13C,SACAkb,SAAUF,EAAME,UAGwBF,EAAMK,OAAQhZ,MAG1D2H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,OACJ0P,EAAM,OAAEk4B,EAAM,OAAEt8B,EAAM,QAAErc,EAAO,MAAEqD,GAAQC,EAAAA,EAAAA,OACvCyN,EASJqlC,GAAoBp3C,EAPkC,CACpDoC,KAAM,mBACNqf,SACAk4B,SACA34C,WAGwCqc,EAAQhZ,MAGpD2H,EAAAA,EAAAA,IAAiB,aAAcyI,MAAOzU,EAAQmD,EAAS4O,KACrD,MAAM,OACJ3Q,EAAM,UAAE8F,EAAS,MAAE7C,GAAQC,EAAAA,EAAAA,OACzByN,EACE3O,EAAOhC,IAAUoG,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1C,IAAK8F,IAAc9D,EACjB,OAGF,MAAMwV,QAAevD,EAAAA,EAAAA,IAAQ,aAAcjS,EAAM8D,GAC5C0R,IAIL5Y,GAASoL,EAAAA,EAAAA,MAEPpL,EAD0B,UAAxB4Y,EAAOghC,QAAQx3C,MACRy3C,EAAAA,EAAAA,KAAgC75C,EAAQ4Y,EAAOghC,QAASv1C,IAExDy1C,EAAAA,EAAAA,KAAW95C,EAAQ4Y,EAAOghC,QAASv1C,IAE9C2G,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD/R,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B+5C,QAAS,KACJ75C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO01C,QACjClmC,WAAOtK,IAERlF,IACH2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,eAAgB,CAAChM,EAAQmD,EAAS4O,KACjD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B+5C,QAAS,KACJ75C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO01C,QACjCH,aAASrwC,IAEVlF,MAGL2H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,YAAEioC,EAAW,MAAE31C,GAAQC,EAAAA,EAAAA,OAAsByN,GAE7C,eAAEkoC,IAAmB/5C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO01C,QAAQrC,MAC3D,KAAE9pB,GAASosB,EAEjB,GAAuB,WAAnBC,EAA6B,CAC/B,MAAMC,GAAiBC,EAAAA,EAAAA,KAA6Bn6C,EAAQqE,GAC5D,IAAK61C,EACH,QAkHNzlC,eACEzU,EACA4tB,EACAssB,MACI71C,GAAQC,EAAAA,EAAAA,QAEZ,MAAMquB,EC9VD,SAA0B/E,GAC/B,MAAM+E,EAAQ5qB,OAAO8G,KAAK+e,GAAM7e,IAAK69B,GAAM,GAAGA,KAAKhf,EAAKgf,MAAM/qB,KAAK,KACnE,OAAO8Q,EAAM9wB,OAAS,EAAI,IAAI8wB,IAAU,EAC1C,CD2VgBynB,CAAiB,CAC7B,eAAgBxsB,EAAKysB,WACrB,kBAAmBzsB,EAAK0sB,YACxB,iBAAkB1sB,EAAK2sB,WACvB,YAAa3sB,EAAK4sB,IAClB,oBAAqB5sB,EAAK6sB,IAC1B,wBAAyB7sB,EAAK8sB,UAG1Bz1B,QAAiB01B,MAAM,mCAAmChoB,IAAS,CACvEioB,OAAQ,OACRZ,YAAa,cACba,QAAS,CACP,eAAgB,oCAChBC,cAAe,UAAUZ,OAGvBthC,QAAeqM,EAAS81B,OAC9B,GAAIniC,EAAO/E,MAAO,CAChB,MAAMA,EDxUH,SAAwBA,GAK7B,MAAQ7S,QAAS+jB,EAAW,KAAEyxB,EAAI,MAAEhF,GAAU39B,GACxC,MAAE8iC,EAAK,QAAE31C,GAAYwwC,EAAQiF,GAAcjF,GAASiF,GAAcD,GAExE,MAAO,CAAEG,QAAO31C,UAAS+jB,cAC3B,CC+TkBi2B,CAAepiC,EAAO/E,OAYpC,OAXA7T,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B+5C,QAAS,KACJ75C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO01C,QACjCX,OAAQ,SACRvlC,MAAO,IACFA,KAGNxP,QACH2G,EAAAA,EAAAA,IAAUhL,EAEZ,CACAA,GAASoL,EAAAA,EAAAA,MACTpL,GAASi7C,EAAAA,EAAAA,KAAkBj7C,EAAQ,CACjCoC,KAAMwW,EAAOxW,KACbE,GAAIsW,EAAOtW,IACV+B,GACHrE,GAAS44C,EAAAA,EAAAA,KAAe54C,EAAQ64C,EAAAA,GAAYE,SAAU10C,IACtD2G,EAAAA,EAAAA,IAAUhL,EACZ,CA9JSk7C,CAAsBl7C,EAAQ4tB,EAAMssB,EAAgB71C,EAC3D,MAAO,GAAuB,gBAAnB41C,EAAkC,CAC3C,MAAMkB,GAAcC,EAAAA,EAAAA,KAA0Bp7C,EAAQqE,GACtD,IAAK82C,EACH,QA4JN1mC,eACEzU,EACA4tB,EACAutB,MACI92C,GAAQC,EAAAA,EAAAA,QAEZ,MAAMoT,EAAS,CACb2jC,KAAM,CACJxE,OAAQjpB,EAAKysB,WAAWzd,QAAQ,OAAQ,IACxC0e,iBAAkB1tB,EAAK0sB,YACvBiB,gBAAiB3tB,EAAK2sB,WACtBiB,cAAe5tB,EAAK4sB,IAAI5d,QAAQ,OAAQ,MAItC6e,GAAcv7C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO01C,QAAQrC,MAAMgE,aAAaD,YAE7E,IAAI3wB,EAEFA,EADE6wB,EAAAA,IACI,+DAEA,oDAGJF,GAAaG,WAAW,aACvBH,EAAYI,SAAS,4CACxB/wB,EAAM2wB,GAGR,MAAMx2B,QAAiB01B,MAAM7vB,EAAK,CAChC8vB,OAAQ,OACRC,QAAS,CACPiB,OAAQ,mBACR,eAAgB,mBAChB,iBAAkBX,GAEpBY,KAAMC,KAAKC,UAAUvkC,KAEjBkB,QAAeqM,EAAS81B,OAE9B,GAAsB,OAAlBniC,EAAOwgC,OAAiB,CAE1B,MAAMvlC,EAAQ,CAAEqoC,eAAgB,CAAEtsC,IAAK,oBAYvC,OAXA5P,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B+5C,QAAS,KACJ75C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO01C,QACjCX,OAAQ,SACRvlC,MAAO,IACFA,KAGNxP,QACH2G,EAAAA,EAAAA,IAAUhL,EAEZ,CAEAA,GAASoL,EAAAA,EAAAA,MACTpL,GAASm8C,EAAAA,EAAAA,KAAuBn8C,EAAQ,CACtCoC,KAAM,OACNg6C,MAAOxjC,EAAOgV,KAAKwuB,OAClB/3C,GACHrE,GAAS44C,EAAAA,EAAAA,KAAe54C,EAAQ64C,EAAAA,GAAYE,SAAU10C,IACtD2G,EAAAA,EAAAA,IAAUhL,EACZ,CA1NSq8C,CAA2Br8C,EAAQ4tB,EAAMutB,EAAa92C,EAC7D,KAGF2H,EAAAA,EAAAA,IAAiB,kBAAmByI,MAAOzU,EAAQmD,EAAS4O,KAC1D,MAAM,iBACJuqC,EAAgB,gBAAEC,EAAe,kBAAEC,EAAiB,UAAEC,EAAS,MAC/Dp4C,GAAQC,EAAAA,EAAAA,OACNyN,EACE2qC,GAAgBC,EAAAA,EAAAA,KAAuB38C,EAAQqE,GAC/Cu4C,GAAe18C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO01C,SAC7C,KAAErC,EAAI,kBAAEmF,EAAiB,aAAExF,GAAiBuF,EAElD,IAAKvF,IAAiBK,EACpB,OAGF,MAAM,eAAEuC,EAAc,OAAEjC,GAAWN,EAE7BH,GAAsBC,EAAAA,GAAAA,IAAuBx3C,EAAQq3C,GAC3D,IAAKE,EACH,OAGFv3C,GAASi5C,EAAAA,EAAAA,KAAcj5C,EAAQ,CAAEo5C,OAAQ,WAAa/0C,IACtD2G,EAAAA,EAAAA,IAAUhL,GAEV,MAAMg6C,EAAc,CAClB8C,KAAMP,EACN3uB,KAAyB,WAAnBqsB,GACF8C,EAAAA,EAAAA,KAAwB/8C,EAAQqE,IAAS24C,EAAAA,EAAAA,KAA6Bh9C,EAAQqE,UAE/DgR,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9CgiC,aAAcE,EACdS,SACAgC,cACAiD,gBAAiBP,EACjBJ,mBACAE,oBACAK,kBAAmBA,GAAmB3P,MACtCuP,gBAOFz8C,GAASoL,EAAAA,EAAAA,MACTpL,GAASi5C,EAAAA,EAAAA,KAAcj5C,EAAQ,CAAEo5C,OAAQ,QAAU/0C,GACnDrE,GAASk9C,EAAAA,EAAAA,KAAal9C,EAAQqE,IAC9B2G,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQyL,UAAU,CAChB,QAAS,8BACTguC,eACAv4C,cAIJ2H,EAAAA,EAAAA,IAAiB,sBAAuByI,MAAOzU,EAAQmD,EAAS4O,KAC9D,MAAM,WAAEgmC,EAAU,MAAE1zC,GAAQC,EAAAA,EAAAA,OAAsByN,EAC5CorC,GAAcC,EAAAA,EAAAA,KAAmBp9C,EAAQqE,GACzCgzC,EAAe8F,GAAa9F,cAAgBU,GAAYV,aAC9D,IAAKA,EAAc,OAEnB,MAAME,GAAsBC,EAAAA,GAAAA,IAAuBx3C,EAAQq3C,GAC3D,IAAKE,EACH,OAGF,MAAMS,EAAUmF,EAAYzF,MAAMM,QAAUmF,EAAYE,kBAAkBC,oBAAsBvF,GAAYC,OAE5Gh4C,GAASu9C,EAAAA,EAAAA,KAAmBv9C,EAAQ,CAAEo5C,OAAQ,WAAa/0C,IAC3D2G,EAAAA,EAAAA,IAAUhL,GAEV,MAAM4Y,QAAevD,EAAAA,EAAAA,IAAQ,sBAAuB,CAClDgiC,aAAcE,EACdS,WAGF,IAAKp/B,EAMH,OALA5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASu9C,EAAAA,EAAAA,KAAmBv9C,EAAQ,CAAEo5C,OAAQ,UAAY/0C,IAC1D2G,EAAAA,EAAAA,IAAUhL,GACVmD,EAAQq6C,uBAAuB,CAAEn5C,eACjClB,EAAQs6C,eAAe,CAAEp5C,UAI3BrE,GAASoL,EAAAA,EAAAA,MACTpL,GAASu9C,EAAAA,EAAAA,KAAmBv9C,EAAQ,CAAEo5C,OAAQ,QAAU/0C,IACxD2G,EAAAA,EAAAA,IAAUhL,GACVmD,EAAQq6C,uBAAuB,CAAEn5C,UAE7B,cAAeuU,GACjBzV,EAAQkhB,SAAS,CAAE/hB,GAAIsW,EAAOhG,UAAWvO,UAG3ClB,EAAQyL,UAAU,CAChB,QAAS,kCACTguC,aAAc7E,EAAa,CAAEV,gBAAiB8F,EAC9C94C,UAEFlB,EAAQ0lB,oBAqHV7c,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,MAAiB,KAAElC,EAAI,MAAEg6C,GAAUrqC,EACnD,OAAOoqC,EAAAA,EAAAA,KAAuBn8C,EAAQ,CACpCoC,OACAg6C,SACC/3C,MAGL2H,EAAAA,EAAAA,IAAiB,iBAAkB,CAAChM,EAAQmD,EAAS4O,KACnD,MAAM,KAAE2rC,EAAI,MAAEr5C,GAAQC,EAAAA,EAAAA,OAAsByN,EAC5C,OAAO6mC,EAAAA,EAAAA,KAAe54C,EAAQ09C,GAAQ7E,EAAAA,GAAYE,SAAU10C,MAG9D2H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAE5C9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,GAAK4J,EAAS0vC,aACd,OAAOzvC,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B29C,aAAc,CACZC,MAAO3vC,EAAS0vC,aAAaC,MAC7BC,QAAQ,IAETx5C,MAGL2H,EAAAA,EAAAA,IAAiB,mBAAoByI,MAAOzU,EAAQmD,EAAS4O,KAC3D,MAAM,eACJ8X,EAAc,WAAEi0B,EAAU,UAAE3H,EAAS,OAAE4H,EAAM,aAAEC,EAAY,SAAEC,EAAQ,KAAE3E,EAAI,MAC3Ej1C,GAAQC,EAAAA,EAAAA,OACNyN,GAAW,CAAC,EAEhB5O,EAAQ+6C,sBAER,MAAMtlC,QAAevD,EAAAA,EAAAA,IAAQ,qBACxBuD,IAEL5Y,GAASoL,EAAAA,EAAAA,MAETpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B29C,aAAc,CACZC,MAAOhlC,EAAOglC,MACd/zB,iBACAg0B,QAAQ,EACRC,aACAG,WACAF,SACAC,eACA7H,YACAmD,SAEDj1C,IACH2G,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQg7C,oBAAoB,CAAE95C,cAGhC2H,EAAAA,EAAAA,IAAiB,oBAAqByI,MAAOzU,EAAQmD,EAAS4O,KAC5D,MAAM,OACJ3Q,EAAM,gBAAEg9C,EAAe,MACvB/5C,GAAQC,EAAAA,EAAAA,OACNyN,EAEE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMwV,QAAevD,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDjS,SAGIi7C,QAAoBhpC,EAAAA,EAAAA,IAAQ,6BAE7BuD,GAAWylC,IAIhBr+C,GAASoL,EAAAA,EAAAA,MAETpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9Bs+C,cAAe,CACbl9C,SACAm9C,MAAO3lC,EACPilC,QAAQ,EACRO,kBACAC,gBAEDh6C,IACH2G,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,gBAAiByI,MAAOzU,EAAQmD,EAAS4O,KACxD,MAAM,UACJysC,EAAS,mBAAEC,EAAkB,MAAEp6C,GAAQC,EAAAA,EAAAA,OACrCyN,EAEJ,IAAIiU,EAAAA,EAAAA,KAA0BhmB,GAE5B,YADAmD,EAAQwvC,uBAAuB,CAAEtuC,UAInC,MAAMk6C,QAAclpC,EAAAA,EAAAA,IAAQ,4BAA6B,CAAC,GACrDkpC,IAELv+C,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B0+C,UAAW,CACTC,UAAWH,EACXD,QACAE,uBAEDp6C,IACH2G,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,qBAAsByI,MAAOzU,EAAQmD,EAAS4O,KAC7D,MAAM,UACJysC,EAAS,MACTn6C,GAAQC,EAAAA,EAAAA,OACNyN,GAAW,CAAC,EAEhB,IAAIiU,EAAAA,EAAAA,KAA0BhmB,GAE5B,YADAmD,EAAQwvC,uBAAuB,CAAEtuC,UAInC,MAAMu6C,QAAyBvpC,EAAAA,EAAAA,IAAQ,sBAAuB,CAAC,GAE/DrV,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B6+C,eAAgB,CACdhB,QAAQ,EACRW,YACAI,qBAEDv6C,IACH2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,0BAA2ByI,MAAOzU,EAAQmD,EAAS4O,KAClE,MAAM,SAAEqkC,EAAQ,MAAE/xC,GAAQC,EAAAA,EAAAA,OAAsByN,EAC1C6G,QAAevD,EAAAA,EAAAA,IAAQ,gCAAiC+gC,GAE9Dp2C,GAASoL,EAAAA,EAAAA,MAKPpL,EAHG4Y,EAEM,UAAWA,GACXqgC,EAAAA,EAAAA,KAAcj5C,EAAQ,CAAE6T,MAAO,CAAE5P,WAAY2U,EAAO3U,WAAY0yC,MAAO,aAAgBtyC,IAEvF40C,EAAAA,EAAAA,KAAcj5C,EAAQ,CAAE68C,kBAAmBjkC,EAAQ8kC,KAAM7E,EAAAA,GAAYE,UAAY10C,IAJjF40C,EAAAA,EAAAA,KAAcj5C,EAAQ,CAAE6T,MAAO,CAAE5P,WAAY,CAAE2L,IAAK,mBAAqB+mC,MAAO,aAAgBtyC,IAO3G2G,EAAAA,EAAAA,IAAUhL,MA2BZgM,EAAAA,EAAAA,IAAiB,iBAAkByI,MAAOzU,EAAQmD,EAAS4O,KACzD,MAAM,OAAE3Q,EAAM,MAAEiD,GAAQC,EAAAA,EAAAA,OAAsByN,EACxC3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,KAAUqgB,EAAAA,EAAAA,IAAcrgB,MAASsgB,EAAAA,EAAAA,IAAiBtgB,GAAQ,OAE/DpD,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B8+C,WAAY,CACV19C,WAEDiD,IACH2G,EAAAA,EAAAA,IAAUhL,GAEV,MAAM4Y,QAAevD,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/CjS,SAGF,IAAKwV,EAEH,YADAzV,EAAQ47C,gBAAgB,CAAE16C,UAI5BrE,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B8+C,WAAY,CACV19C,SACA49C,YAAapmC,IAEdvU,IACH2G,EAAAA,EAAAA,IAAUhL,GAEV,MAAMi/C,QAAiB5pC,EAAAA,EAAAA,IAAQ,iBAE/B,IAAK4pC,EAAU,OAEfj/C,GAASoL,EAAAA,EAAAA,MACT,MAAM6C,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACnC4J,EAAS6wC,aAEd9+C,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B8+C,WAAY,IACP7wC,EAAS6wC,WACZG,SAAUA,EAASC,SAEpB76C,IACH2G,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,sBAAuByI,MAAOzU,EAAQmD,EAAS4O,KAC9D,MAAM,OAAE3Q,EAAM,MAAEiD,GAAQC,EAAAA,EAAAA,OAAsByN,EAExC3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EAAM,OAEXpD,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9Bm/C,gBAAiB,CACf/9C,WAEDiD,IACH2G,EAAAA,EAAAA,IAAUhL,GAEV,MAAOo/C,EAAiBC,EACtBC,SAA2B/9B,QAAQC,IAAI,EACvCnM,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEjS,UAC5BiS,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEjS,OAAMm8C,SAAS,KAC3ClqC,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEjS,WAIhC,GADApD,GAASoL,EAAAA,EAAAA,OACJg0C,IAAoBC,IAAwBC,EAK/C,OAJAt/C,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9Bm/C,qBAAiB51C,GAChBlF,QACH2G,EAAAA,EAAAA,IAAUhL,GAIZA,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9Bm/C,gBAAiB,CACf/9C,SACA49C,YAAaM,EACbp3B,WAAYk3B,EAAgBl3B,WAC5Bg3B,OAAQ,CACNpmC,MAAOsmC,EAAgBtmC,MACvB0mC,KAAMJ,EAAgBK,WAExBC,aAAc,CACZ5mC,MAAOumC,GAAqBvmC,MAC5B0mC,KAAMH,GAAqBI,aAG9Bp7C,IACH2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,6BAA8B,CAAChM,EAAQmD,EAAS4O,KAC/D,MAAM,OAAE3Q,EAAM,MAAEiD,GAAQC,EAAAA,EAAAA,OAAsByN,GAEjCvK,EAAAA,EAAAA,KAAWxH,EAAQoB,KAGhCpB,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B2/C,uBAAwB,CACtBv+C,WAEDiD,IACH2G,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,mBAAoByI,MAAOzU,EAAQmD,EAAS4O,KAC3D,MAAM,QAAEwtC,EAAO,MAAEl7C,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC3D,IAAI9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACtC,IAAK4J,EAASkxC,gBAAiB,OAE/B,MAAM/7C,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQiO,EAASkxC,gBAAgB/9C,QACzD,IAAKgC,EAAM,OAEXpD,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9Bm/C,gBAAiB,IACZlxC,EAASkxC,gBACZS,mBAAmB,IAEpBv7C,IACH2G,EAAAA,EAAAA,IAAUhL,GAEV,MAAM4Y,QAAevD,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7CjS,OACAukB,OAAQ1Z,EAASkxC,gBAAgBj3B,WACjCq3B,YAEF,IAAK3mC,EAAQ,OAKb,GAHA5Y,GAASoL,EAAAA,EAAAA,MAET6C,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,IAC7B4J,EAASkxC,gBAAiB,OAE/B,MAAMU,GAAoBN,EACtBtxC,EAASkxC,gBAAgBO,cAAcF,MAAQ,GAC/CvxC,EAASkxC,gBAAgBD,QAAQM,MAAQ,IAAIvuC,OAAO2H,EAAO6mC,WAE/Dz/C,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9Bm/C,gBAAiB,IACZlxC,EAASkxC,gBACZj3B,WAAYtP,EAAOsP,WACnB03B,mBAAmB,EACnB,CAACL,EAAU,eAAiB,UAAW,CACrCzmC,MAAOF,EAAOE,MACd0mC,KAAMK,KAGTx7C,IACH2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,aAAcyI,MAAOzU,EAAQmD,EAAS4O,KACrD,MAAM,OAAE3Q,EAAM,MAAE0+C,EAAK,MAAEz7C,GAAQC,EAAAA,EAAAA,OAAsByN,EAE/C3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAM28C,GAAkB3+B,EAAAA,EAAAA,KAAmBphB,EAAQoB,GAC7C4+C,EAAmBD,GAAiBE,eAAiB,EAErDC,EAAqBJ,EAAMj+C,OAEjC,IAAIoM,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACtC,MAAM87C,EAAYlyC,EAAS6wC,YAAYE,YAEvC,GAAImB,EAAW,CACb,MAAMC,EAAiBD,EAAUE,gBAAkBF,EAAUE,gBAAkBF,EAAUG,mBAAqB,EACxGC,EAAYJ,EAAUjB,OAASgB,EAC/BM,EAAYL,EAAUE,iBAAmBE,GAAaJ,EAAUE,gBAChEI,EAAwBD,EAAYL,EAAUE,gBAAmBF,EAAUG,mBAC3EI,EAAqBF,EAAYL,EAAUE,gBAAmBD,EAAiBD,EAAUE,gBAE/FrgD,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B8+C,WAAY,IACP7wC,EAAS6wC,WACZE,YAAa,IACRmB,EACHQ,MAAOH,EAAYL,EAAUQ,MAAQ,EAAIR,EAAUQ,MACnDL,mBAAoBG,EACpBJ,gBAAiBK,EACjBE,YAAY,EACZ1B,OAAQqB,KAGXl8C,IACH2G,EAAAA,EAAAA,IAAUhL,EACZ,CAEAA,GAASoL,EAAAA,EAAAA,MACT6C,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAClC,MAAMw8C,EAAc5yC,EAAS6wC,YAAYG,SAEzC,GAAI4B,EAAa,CACf,MAAMC,GAAUxzC,EAAAA,EAAAA,MACVyzC,EAAcF,EAAY9xC,IAAKiyC,GAC/BlB,EAAMr7C,SAASu8C,EAAMC,MAChB,IACFD,EACH5/C,SACA+T,KAAM2rC,EACNI,cAAeJ,EAjxBI,OAoxBhBE,GAGThhD,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B8+C,WAAY,IACP7wC,EAAS6wC,WACZG,SAAU8B,IAEX18C,IACH2G,EAAAA,EAAAA,IAAUhL,EACZ,CAEA,MAAM4Y,QAAevD,EAAAA,EAAAA,IAAQ,aAAc,CACzCyqC,QACA18C,SAKF,GAFApD,GAASoL,EAAAA,EAAAA,MAEJwN,EAgBL3K,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAC9B07C,IACF//C,GAASkpB,EAAAA,EAAAA,KAAmBlpB,EAAQoB,EAAQ,CAC1C6+C,cAAeD,EAAmBF,EAAMj+C,UAIxCoM,EAAS6wC,aACX9+C,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B8+C,WAAY,IACP7wC,EAAS6wC,WACZG,SAAUrmC,EAAOsmC,SAElB76C,KAEL2G,EAAAA,EAAAA,IAAUhL,OA/BV,CAEE,MAAM8+C,GAAa5+C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOy6C,WAC7CA,IACF9+C,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B8+C,WAAY,IACPA,EACHE,YAAamB,EACblB,SAAU4B,IAEXx8C,IACH2G,EAAAA,EAAAA,IAAUhL,GAGd,KAoBFgM,EAAAA,EAAAA,IAAiB,gBAAiByI,MAAOzU,EAAQmD,EAAS4O,KACxD,MAAM,KAAE2nC,EAAI,QAAE14C,EAAO,MAAEqD,GAAQC,EAAAA,EAAAA,OAAsByN,EAE/C6G,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5CqkC,SAGG9gC,GAQL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BmhD,cAAe,CACbzH,OACA0H,KAAMxoC,EAAO49B,KACbx1C,YAEDqD,IACH2G,EAAAA,EAAAA,IAAUhL,IAfRmD,EAAQwM,iBAAiB,CACvB3O,QAAS+0B,EAAAA,GAA0B,yBACnC1xB,aAgBN2H,EAAAA,EAAAA,IAAiB,gBAAiByI,MAAOzU,EAAQmD,EAAS4O,KACxD,MAAM,KAAE2nC,EAAI,MAAEr1C,GAAQC,EAAAA,EAAAA,OAAsByN,QAEvBsD,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5CqkC,WAMFv2C,EAAQk+C,gBAAgB,CAAEC,WAAW,EAAMj9C,UAC3ClB,EAAQo+C,mBAAmB,CAAEl9C,cAG/B2H,EAAAA,EAAAA,IAAiB,wBAAyByI,MAAOzU,EAAQmD,EAAS4O,KAChE,MAAM,OACJ3Q,EAAM,WAAEogD,EAAU,eAAEC,EAAc,MAAEp9C,GAAQC,EAAAA,EAAAA,OAC1CyN,EAEE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMs+C,EAAqBD,GAAgBE,sBAAsB5yC,IAAKzM,IAAOkF,EAAAA,EAAAA,KAAWxH,EAAQsC,IAAKR,OAAOyU,eAEvFlB,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDjS,OACAo+C,aACAC,eAAgB,CACdr/C,KAAM,WACNgB,OACAw+C,kBAAmBH,GAAgBG,kBACnCF,qBACAG,UAAWJ,GAAgBI,UAC3BC,iBAAkBL,EAAeK,iBACjCC,UAAWN,EAAeM,UAC1B7kC,SAAUukC,EAAevkC,SACzBG,OAAQokC,EAAepkC,WAQ3Bla,EAAQ6+C,oBAAoB,CAAE5gD,SAAQiD,aAGxC2H,EAAAA,EAAAA,IAAiB,6BAA8ByI,MAAOzU,EAAQmD,EAAS4O,KACrE,MAAM,OACJ3Q,EAAM,WAAEogD,EAAU,eAAEC,EAAc,MAAEp9C,GAAQC,EAAAA,EAAAA,OAC1CyN,EAEE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMs+C,EAAqBD,GAAgBE,sBAAsB5yC,IAAKzM,IAAOkF,EAAAA,EAAAA,KAAWxH,EAAQsC,IAAKR,OAAOyU,eAEvFlB,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDjS,OACAo+C,aACAC,eAAgB,CACdr/C,KAAM,gBACNgB,OACAw+C,kBAAmBH,GAAgBG,kBACnCF,qBACAG,UAAWJ,GAAgBI,UAC3BC,iBAAkBL,EAAeK,iBACjCC,UAAWN,EAAeM,UAC1B7kC,SAAUukC,EAAevkC,SACzBG,OAAQokC,EAAepkC,OACvBC,MAAOmkC,EAAenkC,MACtBknB,MAAOid,EAAejd,UAQ1BrhC,EAAQ6+C,oBAAoB,CAAE5gD,SAAQiD,aAGxC2H,EAAAA,EAAAA,IAAiB,cAAeyI,MAAOzU,EAAQmD,EAAS4O,KACtD,MAAM,KACJunC,EAAI,0BAAE2I,EAAyB,aAAEC,EAAY,MAAE79C,GAAQC,EAAAA,EAAAA,OACrDyN,EAEEowC,GAAmBC,EAAAA,GAAAA,IAA6BpiD,EAAQs5C,GAC9D,GAAK6I,EAAL,CAcA,GAVAniD,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BqiD,6BAA6B,GAC5Bh+C,IAEH2G,EAAAA,EAAAA,IAAUhL,GACVA,GAASoL,EAAAA,EAAAA,MAETjI,EAAQm/C,sBAAsB,CAAEj+C,UAChClB,EAAQo/C,mBAAmB,CAAEl+C,WAExB69C,EAAc,CACjB,MAAMtpC,QAAevD,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9CmtC,eAAgBL,EAChBF,0BAA2BA,QAA6B14C,IAQ1D,OALAvJ,GAASoL,EAAAA,EAAAA,WACLwN,GAAU5Y,EAAOiC,eACnBkB,EAAQs/C,qBAAqB,CAAEzgD,OAAQhC,EAAOiC,gBAIlD,CAQAm1C,GAAoBp3C,EANa,CAC/BoC,KAAM,kBACNogD,eAAgBlJ,EAChB2I,0BAA2BA,QAA6B14C,GAGrB24C,EAAc79C,EAhCnD,KAmCF2H,EAAAA,EAAAA,IAAiB,eAAgB,CAAChM,EAAQmD,EAAS4O,KACjD,MAAM,KACJunC,EAAI,YAAEoJ,EAAW,cAAEC,EAAa,MAAEt+C,GAAQC,EAAAA,EAAAA,OACxCyN,EAEEsI,GAAO7S,EAAAA,EAAAA,KAAWxH,EAAQ0iD,GAE1BP,GAAmBC,EAAAA,GAAAA,IAA6BpiD,EAAQs5C,GACzDj/B,GAAS8nC,IAIdniD,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B4iD,8BAA8B,GAC7Bv+C,IAEH2G,EAAAA,EAAAA,IAAUhL,GACVA,GAASoL,EAAAA,EAAAA,MAETjI,EAAQ0/C,uBAAuB,CAAEx+C,UACjClB,EAAQo/C,mBAAmB,CAAEl+C,UAExBs+C,EAeLvL,GAAoBp3C,EANa,CAC/BoC,KAAM,mBACNogD,eAAgBlJ,EAChBoJ,eAGmCC,EAAet+C,IAdlDgR,EAAAA,EAAAA,IAAQ,mBAAoB,CAC1BmtC,eAAgBL,EAChBW,OAAQzoC,QAoFdrO,EAAAA,EAAAA,IAAiB,uBAAwByI,MAAOzU,EAAQmD,EAAS4O,KAC/D,MAAM,KACJ2nC,EAAI,MAAEr1C,GAAQC,EAAAA,EAAAA,OACZyN,EAEEunC,QAAajkC,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEqkC,SAE/CJ,EAULn2C,EAAQ4/C,kBAAkB,CAAEzJ,OAAMj1C,UAThClB,EAAQwM,iBAAiB,CACvB3O,QAAS,CACP4O,IAAK,mBAEPvL,aAQN2H,EAAAA,EAAAA,IAAiB,4BAA6ByI,MAAOzU,EAAQmD,EAAS4O,KACpE,MAAM,KACJunC,EAAI,SAAElD,EAAQ,MAAE/xC,GAAQC,EAAAA,EAAAA,OACtByN,EAEJ,IAAIixC,GAAoB9iD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO2+C,kBACtD,IAAKA,EAAmB,OAExBhjD,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BgjD,kBAAmB,IACdA,EACHrsB,WAAW,EACXuf,cAAU3sC,IAEXlF,IACH2G,EAAAA,EAAAA,IAAUhL,GAEV,MAAMijD,GAAYb,EAAAA,GAAAA,IAA6BpiD,EAAQs5C,GACvD,IAAK2J,EACH,OAGF,MAAMrqC,QAAevD,EAAAA,EAAAA,IAAQ,6BAA8B,CAAE4tC,YAAW7M,aAExE,GAAKx9B,IAIL5Y,GAASoL,EAAAA,EAAAA,MACT43C,GAAoB9iD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO2+C,kBAC7CA,GAAL,CAEA,GAAI,UAAWpqC,EASb,OARA5Y,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BgjD,kBAAmB,IACdA,EACHrsB,WAAW,EACXuf,SAAUt9B,EAAO3U,aAElBI,QACH2G,EAAAA,EAAAA,IAAUhL,GAIZmD,EAAQmrC,QAAQ,CAAExjB,IAAKlS,EAAOkS,IAAKzmB,UACnClB,EAAQ+/C,uBAAuB,CAAE7+C,SAfH,I,iBEnpChC2H,EAAAA,EAAAA,IAAiB,iBAAkByI,UACjC,MAAM0uC,EAAqBnjD,EAAOsd,MAC5B8lC,GAAqBD,GAAoBE,cAExCC,EAAaC,EAAWF,SAAsB9hC,QAAQC,IAAI,EAC/DnM,EAAAA,EAAAA,IAAQ,qBACRA,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEiiC,OAAO,IACrC8L,GAAoB/tC,EAAAA,EAAAA,IAAQ,+BAA4B9L,KAGpD+5C,IAAeC,GAAeH,IAAsBC,IAI1DrjD,GAASoL,EAAAA,EAAAA,MAELk4C,GAAeA,EAAY/lC,QAAQL,WAAaC,EAAAA,MAClDnd,EAAS,IACJA,EACHsd,MAAO,IACF6lC,EACH5lC,QAAS+lC,EAAY/lC,QACrB8lC,aAAcA,GAAgBF,EAAoBE,aAClDG,QAAS,CACPhiC,SAAKjY,EACLk6C,aAASl6C,EACTm6C,cAAUn6C,GAEZo6C,mBAAep6C,IAIf+5C,EAAYE,UACdxjD,GAAS4jD,EAAAA,EAAAA,KAAwB5jD,EAAQ,MAAOsjD,EAAYE,QAASF,EAAYO,oBAG/EP,EAAYK,gBACd3jD,GAAS8jD,EAAAA,EAAAA,KAAyB9jD,EAAQsjD,EAAYK,cAAeL,EAAYS,0BAIjFR,GAAWhmC,QAAQL,WAAaS,EAAAA,MAClC3d,EAAS,IACJA,EACH4d,IAAK,IACA2lC,EACHhmC,QAASgmC,EAAUhmC,QACnBimC,QAAS,CACPhiC,SAAKjY,EACLk6C,aAASl6C,EACTm6C,cAAUn6C,KAKhBvJ,GAASgkD,EAAAA,EAAAA,KAAmBhkD,EAAQujD,EAAUhmC,SAE1CgmC,EAAUC,UACZxjD,GAAS4jD,EAAAA,EAAAA,KAAwB5jD,EAAQ,MAAOujD,EAAUC,QAASD,EAAUM,mBAAmB,MAIpG74C,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,wBAAyByI,MAAOzU,EAAQmD,EAAS4O,KAChE,MAAM,KAAE3P,EAAI,MAAEk1C,GAAUvlC,EAElByxC,EAAUlM,EAAQt3C,EAAO4d,KAAK4lC,QAAQphD,GAAQpC,EAAOsd,OAAOkmC,QAAQphD,GACpEulB,EAAS67B,GAASt7B,WACxB,GAAIs7B,IAAY77B,EAAQ,OAExB,MAAM/O,QAAevD,EAAAA,EAAAA,IAAQ,yBAA0B,CACrD4uC,UAAoB,YAAT7hD,EACX8hD,WAAqB,aAAT9hD,EACZulB,OAAQA,GAAU,GAClB2vB,UAGG1+B,IAIL5Y,GAASoL,EAAAA,EAAAA,MAETpL,GAASgkD,EAAAA,EAAAA,KAAmBhkD,EAAQ4Y,EAAO2E,SACvC3E,EAAO4qC,UACTxjD,GAAS4jD,EAAAA,EAAAA,KAAwB5jD,EAAQoC,EAAMwW,EAAO4qC,QAAS5qC,EAAOsP,WAAYovB,KAEpFtsC,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,gBAAiByI,UAChC,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,kBAE7B,IAAKuD,EACH,OAGF5Y,GAASoL,EAAAA,EAAAA,MAET,MAAMnC,GAAOoG,EAAAA,EAAAA,IAAqBuJ,EAAO2lC,MAAO,MAE1C4F,EAAwD,CAC5D3iC,IAAK,GACL4iC,MAAO,GACPC,QAAS,GACTC,OAAQ,IAGJC,EAAiBx8C,OAAO8G,KAAK5F,GAC7Bu7C,EAAez8C,OAAOC,OAAOiB,GAE7Bw7C,EAAqBD,EAAaz1C,IAAKuqC,GAAUA,EAAKoL,UAAYpL,EAAKh3C,QAAKiH,GAC/EzH,OAAOyU,SAEJouC,EAAqBH,EAAaz1C,IAAKuqC,GAC3CA,EAAKsL,sBAAwBtL,EAAKuL,kBAAoBvL,EAAKh3C,QAAKiH,GAC/DzH,OAAOyU,SAEJuuC,EAAoBN,EAAaz1C,IAAKuqC,GAAUA,EAAKyL,mBAAqBzL,EAAKh3C,QAAKiH,GACvFzH,OAAOyU,SAEV4tC,EAAkB3iC,IAAM+iC,EACxBJ,EAAkBE,QAAUI,EAC5BN,EAAkBC,MAAQO,EAC1BR,EAAkBG,OAASQ,EAE3BN,EAAatiD,QAASo3C,IACpB,MAAM0L,EAAgB1L,EAAKh8B,MACtB6mC,EAAkBa,KACrBb,EAAkBa,GAAiB,IAErCb,EAAkBa,GAAet5C,KAAK4tC,EAAKh3C,MAG7CtC,EAAS,IACJA,EACHilD,UAAW,CACTh8C,OACAi8C,cAAef,KAGnBn5C,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,OACJjQ,EAAM,MAAEuC,GAAQC,EAAAA,EAAAA,OACdyN,EAEE9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxCrE,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BmlD,YAAa,IACRl3C,EAASk3C,YACZrjD,WAEDuC,GACC4J,EAASk3C,YAAY1L,QACvBt2C,EAAQiiD,gBAAgB,CAAE3L,OAAQxrC,EAASk3C,YAAY1L,OAAQ4L,eAAe,EAAMhhD,WAGtF2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,kBAAmByI,MAAOzU,EAAQmD,EAAS4O,KAC1D,MAAM,OACJ0nC,EAAM,cAAE4L,EAAa,MAAEhhD,GAAQC,EAAAA,EAAAA,OAC7ByN,EAEJ,IAAI9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACtC,GAAI4J,EAASk3C,YAAYxuB,WAAc1oB,EAASk3C,YAAYG,cAAgBD,EAAgB,OAE5FrlD,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BmlD,YAAa,IACRl3C,EAASk3C,YACZxuB,WAAW,KACP0uB,GAAiB,CACnBvsC,MAAO,EACPoP,gBAAY3e,EACZ+7C,aAAa,KAGhBjhD,IACH2G,EAAAA,EAAAA,IAAUhL,GAEVA,GAASoL,EAAAA,EAAAA,MACT6C,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAClC,MAAM6jB,EAAaja,EAASk3C,YAAYj9B,WAClCq9B,EAAiBt3C,EAASk3C,YAAYI,eACtCzjD,EAASmM,EAASk3C,YAAYrjD,OAE9B8W,QAAevD,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/CokC,SACA9xB,OAAQO,EACRrP,MAAO2sC,GAAAA,GACPD,iBACAzjD,WAGF,IAAK8W,EACH,OAGF,MAAM,MACJ5P,EAAK,MACLw7B,GACE5rB,EAEJ5Y,GAASoL,EAAAA,EAAAA,MACT6C,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAElC,MAAMohD,EAAex3C,EAASk3C,YAAY5G,MACpCmH,EAAYL,EAAoDzsC,EAAO2lC,MAA3CkH,EAAax0C,OAAO2H,EAAO2lC,OACvDoH,EAAyB13C,EAASk3C,YAAYS,gBAE9CA,EADwB33C,EAASk3C,YAAY1L,SAAWA,GAAU4L,EACxBM,EAAyB,EAAIA,EAC7E3lD,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BmlD,YAAa,IACRl3C,EAASk3C,YACZ1L,SACA3gC,MAAOF,EAAOE,OAAS7K,EAASk3C,YAAYrsC,MAC5CylC,MAAOmH,EACPG,WAAYjtC,EAAOitC,YAAc53C,EAASk3C,YAAYU,WACtDC,SAAUltC,EAAOktC,UAAY73C,EAASk3C,YAAYW,SAClDP,eAAgB3sC,EAAO2sC,eACvBr9B,WAAYtP,EAAOsP,WACnByO,WAAW,EACX2uB,aAAc1sC,EAAOsP,WACrB09B,oBAEDvhD,GAEHrE,GAASukC,EAAAA,EAAAA,KAAYvkC,GAAQqP,EAAAA,EAAAA,IAAqBm1B,EAAO,OACzDxkC,GAASskC,EAAAA,EAAAA,KAAYtkC,GAAQqP,EAAAA,EAAAA,IAAqBrG,EAAO,QAEzDgC,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,MACJ1N,GAAQC,EAAAA,EAAAA,OACNyN,GAAW,CAAC,EAEV9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,OAAO6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BmlD,YAAa,CACXS,gBAAiB33C,EAASk3C,YAAYS,gBAAkB,EACxD9jD,OAAQikD,EAAAA,IACRjtC,MAAO,EACPylC,MAAO,KAERl6C,MAGL2H,EAAAA,EAAAA,IAAiB,qBAAsByI,MAAOzU,EAAQmD,EAAS4O,KAC7D,MAAM,OACJ/P,EAAM,cAAEqjD,EAAa,MAAEhhD,GAAQC,EAAAA,EAAAA,OAC7ByN,EAEEsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EAAM,OAEXra,GAASoL,EAAAA,EAAAA,MAET,MAAM46C,GAAuBC,EAAAA,EAAAA,KAA8BjmD,EAAQgC,EAAQqC,GACrEohD,GAAeS,EAAAA,EAAAA,KAA+BlmD,EAAQgC,EAAQgkD,EAAsB3hD,GACpF8hD,EAAkBV,GAAcv9B,WAEtC,IAAKm9B,GAAiBI,IAAiBU,EAAiB,OAExD,MAAMC,GAAiBC,EAAAA,EAAAA,KAAwBrmD,EAAQgC,EAAQqC,GAEzDuU,QAAevD,EAAAA,EAAAA,IAAQ,sBAAuB,CAClDgF,OACAsN,OAAS09B,EAAkC,GAAlBc,EACzBrkD,OAAQskD,EACRE,aAAuC,QAAzBN,OAAiCz8C,EAAYy8C,IAG7DhmD,GAASoL,EAAAA,EAAAA,MACT,MAAMm7C,GAAgBF,EAAAA,EAAAA,KAAwBrmD,EAAQgC,EAAQqC,GACxDmiD,GAAsBP,EAAAA,EAAAA,KAA8BjmD,EAAQgC,EAAQqC,GAE1E,IAAKuU,GAAU4tC,IAAwBR,GAAwBO,IAAkBH,EAC/E,OAGF,MAAMV,EAAWD,IAAiBJ,EAAgBI,EAAalH,MAAMttC,OAAO2H,EAAO2lC,OAAS3lC,EAAO2lC,MAEnGv+C,GAASymD,EAAAA,EAAAA,KAAsBzmD,EAAQgC,EAAQ0jD,EAAU9sC,EAAOsP,WAAY7jB,IAC5E2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,OACJ/P,GACE+P,EAEJhK,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAS+L,IACrC,MAAMy4C,GAAqBT,EAAAA,EAAAA,KAA8BjmD,EAAQgC,EAAQiM,EAAS3L,KAC9E4jD,EAAAA,EAAAA,KAA+BlmD,EAAQgC,EAAQ0kD,EAAoBz4C,EAAS3L,KAC9Ea,EAAQwjD,mBAAmB,CAAE3kD,SAAQqjD,eAAe,EAAMhhD,MAAO4J,EAAS3L,UAKhF0J,EAAAA,EAAAA,IAAiB,yBAA0ByI,UACzC,MAAMkvC,EAAgB3jD,EAAOsd,OAAOqmC,cAC9Bh8B,EAASg8B,GAAez7B,WAC9B,GAAIy7B,IAAkBh8B,EAAQ,OAE9B3nB,GAAS4mD,EAAAA,EAAAA,KAA+B5mD,GAAQ,IAChDgL,EAAAA,EAAAA,IAAUhL,GAEV,MAAM4Y,QAAevD,EAAAA,EAAAA,IAAQ,0BAA2B,CACtDsS,OAAQA,GAAU,KAGf/O,GAAUA,EAAO2E,QAAQL,WAAaC,EAAAA,MAI3Cnd,GAASoL,EAAAA,EAAAA,MAETpL,GAASgkD,EAAAA,EAAAA,KAAmBhkD,EAAQ4Y,EAAO2E,SAC3Cvd,GAAS8jD,EAAAA,EAAAA,KAAyB9jD,EAAQ4Y,EAAO+qC,cAAe/qC,EAAOsP,aACvEld,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,0BAA2ByI,MAAOzU,EAAQmD,EAAS4O,KAClE,MAAM,OAAE/P,EAAM,GAAEM,EAAE,YAAEukD,GAAgB90C,EAE9BsI,EAAOrY,GAASsY,EAAAA,EAAAA,KAAWta,EAAQgC,QAAUuH,EAE/CvH,IAAWqY,UAEThF,EAAAA,EAAAA,IAAQ,0BAA2B,CACvCgF,OACAysC,eAAgBxkD,EAChBukD,gBAGF1jD,EAAQ0lB,qBAGV7c,EAAAA,EAAAA,IAAiB,2BAA4ByI,MAAOzU,EAAQmD,EAAS4O,KACnE,MAAM,OAAE/P,EAAM,GAAEM,GAAOyP,EAEjBsI,EAAOrY,GAASsY,EAAAA,EAAAA,KAAWta,EAAQgC,QAAUuH,EAE/CvH,IAAWqY,UAEThF,EAAAA,EAAAA,IAAQ,2BAA4B,CACxCgF,OACAysC,eAAgBxkD,IAGlBa,EAAQ0lB,qBAGV7c,EAAAA,EAAAA,IAAiB,uBAAwByI,MAAOzU,EAAQmD,EAAS4O,KAC/D,MAAM,KAAEunC,EAAI,aAAE5jB,EAAY,MAAErxB,GAAQC,EAAAA,EAAAA,OAAsByN,EAEpD/P,EAAuB,SAAds3C,EAAKl3C,KAAkBpC,EAAOiC,cAAiBq3C,EAAKl4C,OAE7D2lD,GAAmB3E,EAAAA,GAAAA,IAA6BpiD,EAAQs5C,GAC9D,IAAKyN,EAAkB,OAEvB,MAAML,GAAqBT,EAAAA,EAAAA,KAA8BjmD,EAAQgC,EAAQqC,GACnE2iD,GAAW9mD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO4iD,WAAWC,oBAAoBllD,KAAU0kD,GACxF,GAAIM,GAAUzI,OAAO18C,OAAQ,CAC3B,MAAM6jD,EAAWsB,EAASzI,MAAMxvC,IAAKo4C,GAC/BA,EAAElE,YAAamE,EAAAA,GAAAA,IAAwBD,EAAElE,UAAW3J,GAC/C,IACF6N,EACHE,UAAW3xB,GAGRyxB,GAETnnD,GAASymD,EAAAA,EAAAA,KAAsBzmD,EAAQgC,EAAQ0jD,EAAUsB,EAAS9+B,WAAY7jB,IAC9E2G,EAAAA,EAAAA,IAAUhL,EACZ,CAEA,MAAM4Y,QAAevD,EAAAA,EAAAA,IAAQ,eAAgB,CAC3C4tC,UAAW8D,EACXrxB,iBAIF,GAFA11B,GAASoL,EAAAA,EAAAA,OAEJwN,EAGH,OAFA5Y,GAASymD,EAAAA,EAAAA,KAAsBzmD,EAAQgC,EAAQglD,EAASzI,MAAOyI,EAAS9+B,WAAY7jB,QACpF2G,EAAAA,EAAAA,IAAUhL,GAIZmD,EAAQs/C,qBAAqB,CAAEzgD,cAGjCgK,EAAAA,EAAAA,IAAiB,qBAAsByI,MAAOzU,EAAQmD,EAAS4O,KAC7D,MAAM,KAAEunC,EAAI,MAAEj1C,GAAQC,EAAAA,EAAAA,OAAsByN,EAEtCg1C,GAAmB3E,EAAAA,GAAAA,IAA6BpiD,EAAQs5C,GAC9D,IAAKyN,EAAkB,OAMvB,UAJqB1xC,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9CmtC,eAAgBuE,IAIhB,OAGF,MAAM/kD,EAAuB,SAAds3C,EAAKl3C,KAAkBpC,EAAOiC,cAAiBq3C,EAAKl4C,OACnE+B,EAAQs/C,qBAAqB,CAAEzgD,WAC/BmB,EAAQqa,sBAAsB,CAAEnZ,aAGlC2H,EAAAA,EAAAA,IAAiB,uBAAwByI,MAAOzU,EAAQmD,EAAS4O,KAC/D,MAAM,OACJ0nC,EAAM,KAAEH,EAAI,OAAEt3C,EAAM,MAAEqC,GAAQC,EAAAA,EAAAA,OAC5ByN,EAEEu1C,QAAgBjyC,EAAAA,EAAAA,IAAQ,8BAA+B,CAC3DokC,WAGG6N,IAELtnD,GAASoL,EAAAA,EAAAA,MAETpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BunD,iBAAkB,CAChB7E,YAAa1gD,EACbs3C,OACAkO,iBAAkBF,IAEnBjjD,IAEH2G,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,wBAAyByI,MAAOzU,EAAQmD,EAAS4O,KAChE,MAAM,KAAEunC,EAAI,OAAEt3C,EAAM,MAAEqC,GAAQC,EAAAA,EAAAA,OAAsByN,EAE9CsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EAAM,OAEX,MAAM4sC,GAAaQ,EAAAA,EAAAA,KAAqBznD,EAAQgC,EAAQqC,GACxD,IAAK4iD,EAAY,OACjB,MAAMS,EAAW1nD,EAAO+iB,UAAU4kC,kBAC5BC,EAAqBX,EAAW1I,MAAMz8C,OAAQqlD,GAAMA,EAAE32C,UACtDq3C,EAAiBvO,EAAK9oC,SACxBo3C,EAAmB9lD,OAAQqlD,GAAOA,EAAE7N,KAA2BI,OAAUJ,EAAKA,KAA2BI,MACzG,IAAIkO,EAAoBtO,GAItBwO,GAFqBJ,EAAWG,EAAevwC,OAAOowC,GAAYG,GAE7B94C,IAAKo4C,IAAM/E,EAAAA,GAAAA,IAA6BpiD,EAAQmnD,EAAElE,YAC1FnhD,OAAOyU,eAEWlB,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDyyC,kBACAztC,UAKFlX,EAAQs/C,qBAAqB,CAAEzgD,cAGjCgK,EAAAA,EAAAA,IAAiB,sBAAuByI,MAAOzU,EAAQmD,EAAS4O,KAC9D,MAAM,KACJunC,EAAI,MAAEt8B,GACJjL,EAEEowC,GAAmBC,EAAAA,GAAAA,IAA6BpiD,EAAQs5C,GAEzD6I,SAIgB9sC,EAAAA,EAAAA,IAAQ,sBAAuB,CAClDmtC,eAAgBL,EAChBnlC,WAKF7Z,EAAQs/C,qBAAqB,CAAEzgD,OAAQhC,EAAOiC,mBAGhD+J,EAAAA,EAAAA,IAAiB,0BAA2ByI,MAAOzU,EAAQmD,EAAS4O,KAClE,MAAM,OACJ/P,EAAM,KACN4vB,GACE7f,EAEEsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EAAM,OAEX,MAAMzB,QAAevD,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDgF,OACAuX,SAGGhZ,IAEL5Y,GAASoL,EAAAA,EAAAA,MAETpL,GAAS+nD,EAAAA,EAAAA,KAA8B/nD,EAAQgC,EAAQ4W,EAAOovC,cAC9Dh9C,EAAAA,EAAAA,IAAUhL,M,gBCzfZ,IAAIioD,GAAqB,GAEzBj8C,EAAAA,EAAAA,IAAiB,yBAA0ByI,UACzC,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,2BACxBuD,IAKLA,EAAO1W,QAASgmD,IACVA,EAAkBC,iBACpBC,GAAAA,GAAkB,UAAUF,EAAkBC,gBAAgB7lD,KAAM+lD,EAAAA,GAAeC,SAEjFJ,EAAkBK,YACpBH,GAAAA,GAAkB,UAAUF,EAAkBK,WAAWjmD,KAAM+lD,EAAAA,GAAeC,SAE5EJ,EAAkBM,iBACpBJ,GAAAA,GAAkB,UAAUF,EAAkBM,gBAAgBlmD,KAAM+lD,EAAAA,GAAeC,SAEjFJ,EAAkBO,iBACpBL,GAAAA,IAAkBM,EAAAA,EAAAA,IAAqBR,EAAkBO,gBAAiB,QAAUJ,EAAAA,GAAeC,WAIvGtoD,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACVqnD,mBAAoB/vC,KAGxB5N,EAAAA,EAAAA,IAAUhL,IAEVq0C,EAAAA,GAAAA,GAAqB,CACnB/pC,OAAQ,yBACRyH,aAASxI,GACR+qC,EAAAA,SAGLtoC,EAAAA,EAAAA,IAAiB,uBAAwByI,UACvC,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,yBAC7B,IAAKuD,EACH,OAGF,MAAM,QAAEoc,EAAO,OAAED,EAAM,SAAEjD,GAAalZ,EAChCtX,EAAgC,GAEhCsnD,GAAav5C,EAAAA,EAAAA,IAAqB2lB,EAAS,MAEjD,IAAK,MAAM6zB,KAAU7zB,EACnB,GAAI6zB,EAAOC,kBAAmB,CAC5B,MAAM3mD,EAA6B,CACjCC,KAAM,QACN2mD,SAAUF,EAAOE,UAEnBznD,EAAUoK,KAAKvJ,EACjB,CAGFnC,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHgpD,oBAAqBJ,EACrB92B,SAAU,IACL9xB,EAAO8xB,SACV+2B,OAAQ,CACN/2B,WACAiD,WAGJzzB,UAAW,IACNtB,EAAOsB,UACV2nD,gBAAiB3nD,KAGrB0J,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,4BAA6B,CAAChM,EAAQmD,EAAS4O,KAC9D,MAAM,MACJ/D,EAAK,EAAE/N,EAAC,EAAEipD,EAAC,UAAEC,EAAS,WAAEC,EAAU,MAAE/kD,GAAQC,EAAAA,EAAAA,OAC1CyN,EAEEs3C,EAAyB,CAC7B/mD,GAAI2lD,KACJ55C,eAAgBL,EAChB/N,EAAGF,EAA6BC,EAAQC,GA1FV,GA0FeU,KAAKyN,SACpBk7C,GAC9BJ,EAAGA,EA5F2B,GA4FvBvoD,KAAKyN,SAAuCk7C,GACnDH,YACAC,cAGF,OAAOl7C,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BmO,wBAAyB,KAAKjO,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO8J,yBAA2B,GAAKk7C,IAC3FhlD,MAGL2H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,UACJ7K,EAAS,OAAE9F,EAAM,MAAE4M,EAAK,aAAEu7C,GACxBx3C,EACJ,GAA+B,yBAA3B/R,EAAO6lB,gBAA4C,OAEvD,MAAMziB,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAE3BgC,GAAS4K,KAAS7M,EAAAA,EAAAA,KAAqBnB,EAAQoB,KAI/CiU,EAAAA,EAAAA,IAAQ,uBAAwB,CACnCjS,OACA8D,YACA6hD,SAAU/6C,EACVw7C,WAAYD,OAIhBv9C,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,OACJ3Q,EAAM,UAAE8F,EAAS,MAAE7C,GAAQC,EAAAA,EAAAA,OACzByN,EACE5P,GAAWsnD,EAAAA,EAAAA,KAAsBzpD,EAAQoB,GACzCJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAE7C/E,GAAanB,KAAW0H,EAAAA,EAAAA,IAAe1H,IAE5CmC,EAAQumD,eAAe,CACrBtoD,SACA8F,YACA/E,WACAkC,aAIJ2H,EAAAA,EAAAA,IAAiB,iBAAkByI,MAAOzU,EAAQmD,EAAS4O,KACzD,MAAM,OACJ3Q,EAAM,SACNe,EAAQ,kBACRwnD,EAAiB,MACjBtlD,GAAQC,EAAAA,EAAAA,OACNyN,EACJ,IAAI,UAAE7K,GAAc6K,EAEpB,MAAM3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAIJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAEhD,IAAK9D,IAASpC,EACZ,OAGF,MAAM4oD,GAAYzoD,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAEzCyoD,EAAoBtzC,QAAQvV,EAAQqe,aAAere,EAAQ8oD,UAC3DC,EAA8BF,GAChCG,EAAAA,EAAAA,KAA0BhqD,EAAQoB,EAAQJ,EAAQqe,WAAa,QAC/D9V,EACJvI,EAAU6oD,IACN5kD,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ2oD,IAClC/oD,EACJkG,EAAYlG,GAASsB,IAAM4E,EAE3B,MAAMjG,GAAgBgpD,EAAAA,EAAAA,IAAiBjpD,GACjCkpD,EAAcjpD,EAAc0Q,KAAMw4C,IAAiB1tB,EAAAA,EAAAA,IAAe0tB,EAAchoD,IAEhFioD,EAAmBF,EACrBjpD,EAAca,OAAQqoD,KAAkB1tB,EAAAA,EAAAA,IAAe0tB,EAAchoD,IAAa,IAAIlB,EAAekB,GAEnG0W,GAAQwxC,EAAAA,EAAAA,KAAuBrqD,IAC9BsqD,EAAeC,IAAoB1zC,EAAAA,EAAAA,IAAUuzC,EAAmB3mD,GAAiB,SAAXA,EAAErB,MACzEooD,EAA0BD,EAAiBjzC,OAAOuB,GAClD4xC,EAAiB,IAAIH,KAAkBE,GACvCvmD,GAAaC,EAAAA,EAAAA,IAAclD,IAE7BgD,EAAAA,EAAAA,KAA+BhE,EAAQ,qBACrCkqD,EACF/mD,EAAQunD,mBAAmB,CAAEtmD,YAAaH,EAAY9B,WAAUkC,UAEhElB,EAAQgB,oBAAoB,CAAEC,YAAaH,EAAY9B,WAAUkC,WAIrErE,EAASe,EAAmBf,EAAQgB,EAASypD,IAC7Cz/C,EAAAA,EAAAA,IAAUhL,GAEV,UACQqV,EAAAA,EAAAA,IAAQ,eAAgB,CAC5BjS,OACA8D,YACA5F,UAAWkpD,EACXb,sBAGEC,GACFzmD,EAAQwnD,uBAEZ,CAAE,MAAO92C,GAEP7T,EAASe,EADTf,GAASoL,EAAAA,EAAAA,MAC2BpK,EAASC,IAC7C+J,EAAAA,EAAAA,IAAUhL,EACZ,KAGFgM,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,OACJ3Q,EAAM,UAAE8F,EAAS,MAAE4R,EAAK,2BAAE8xC,GAA6B,EAAK,MAAEvmD,GAAQC,EAAAA,EAAAA,OACpEyN,EACE84C,EAAiB7qD,EAAOwhC,SAASspB,oBACjClnD,EAAagnD,EAAoE74C,EAAQnO,UAAtB,cAAzBinD,GAAgBzoD,KAC1DJ,EAAU4oD,EAC4D74C,EAAQ/P,OAAtD,SAAzB6oD,GAAgBzoD,KAAkByoD,EAAe7oD,YAASuH,EAEzDnG,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAElD,IAAK9D,IAASpC,EACZ,OAGF,MAAMK,EAAmBL,EAAQM,WAAWC,SAAW,GACjDwpD,GAAejnD,EAAAA,EAAAA,IAAgBzC,EAAkByX,EAAOlV,EAAW5B,GACzEhC,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQgB,EAAQI,OAAQJ,EAAQsB,GAAI,CAC7DhB,UAAW,IACND,EACHE,QAASwpD,MAGb//C,EAAAA,EAAAA,IAAUhL,GAEV,MAAMiE,GAAaC,EAAAA,EAAAA,IAAclD,IAC7BgD,EAAAA,EAAAA,KAA+BhE,EAAQ,oBACzCmD,EAAQgB,oBAAoB,CAC1BC,YAAaH,EACb9B,SAAU,CACRC,KAAM,QAERiC,aAKN2H,EAAAA,EAAAA,IAAiB,mBAAoByI,MAAOzU,EAAQmD,EAAS4O,KAC3D,MAAM,OACJ3Q,EAAM,UAAE8F,EAAS,aAAE8jD,EAAY,MAAE3mD,GAAQC,EAAAA,EAAAA,OACvCyN,EACE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAElD,IAAK9D,IAASpC,EACZ,OAGF,MAAMiqD,EAAejqD,EAAQM,WAAWC,SAASiC,KAAMC,GAA0B,SAApBA,EAAEtB,SAASC,MAClE0W,EAAQkyC,GAAgBC,GAAcvnD,aAAe,EAC3D,GAAKoV,EAAL,CAGA3V,EAAQ+nD,wBAAwB,CAAE9pD,SAAQ8F,cAE1C,UACQmO,EAAAA,EAAAA,IAAQ,mBAAoB,CAChCjS,OACA8D,YACA4R,QACAlV,UAAWqnD,GAActnD,eACzB3B,OAAQipD,GAAcpnD,aAE1B,CAAE,MAAOgQ,GAC6B,oBAA/BA,EAAmB7S,SACtBmC,EAAQqa,sBAAsB,CAAE2tC,eAAgB,CAAE/pD,SAAQ8F,YAAWmW,OAAQvE,GAASzU,SAE1F,CAfA,KAkBF2H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,YAAE3N,EAAW,SAAEjC,EAAQ,MAAEkC,GAAQC,EAAAA,EAAAA,OAAsByN,EACvD9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,KAAKL,EAAAA,EAAAA,KAA+BhE,EAAQ,mBAAoB,OAEhE,MAAMorD,EAAyBn9C,EAASo9C,gBAAgBjnD,IAAgB,GACxE,GAAIgnD,EAAuBz5C,KAAM25C,IAAW7uB,EAAAA,EAAAA,IAAe6uB,EAAQnpD,IACjE,OAGF,MAAMopD,EAAqBH,EAAuBn6C,OAAO9O,GAEzD,OAAO+L,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BqrD,gBAAiB,IACZp9C,EAASo9C,gBACZ,CAACjnD,GAAcmnD,IAEhBlnD,MAGL2H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAChM,EAAQmD,EAAS4O,KACvD,MAAM,YAAE3N,EAAW,SAAEjC,EAAQ,MAAEkC,GAAQC,EAAAA,EAAAA,OAAsByN,EAEvD9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAElC+mD,EAAyBn9C,EAASo9C,gBAAgBjnD,IAAgB,GAElEonD,EAA4BrpD,EAC9BipD,EAAuBtpD,OAAQwpD,KAAY7uB,EAAAA,EAAAA,IAAe6uB,EAAQnpD,IAAa,GAE7EopD,EAAqBC,EAA0B3pD,OAAS,IACzDoM,EAASo9C,gBACZ,CAACjnD,GAAconD,IACbt7C,EAAAA,EAAAA,IAAKjC,EAASo9C,gBAAiB,CAACjnD,IAEpC,OAAO8J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BqrD,gBAAiBE,GAChBlnD,MAGL2H,EAAAA,EAAAA,IAAiB,qBAAsByI,MAAOzU,EAAQmD,EAAS4O,KAC7D,MAAM,SAAE5P,GAAa4P,QAEAsD,EAAAA,EAAAA,IAAQ,qBAAsB,CAAElT,gBAKrDnC,GAASoL,EAAAA,EAAAA,OAEG+L,QAKZnX,EAAS,IACJA,EACHmX,OAAQ,IACHnX,EAAOmX,OACVs0C,gBAAiBtpD,KAGrB6I,EAAAA,EAAAA,IAAUhL,IAXRmD,EAAQuoD,iBAcZ1/C,EAAAA,EAAAA,IAAiB,6BAA8B,CAAChM,EAAQmD,EAAS4O,KAC/D,MAAM,GAAEzP,EAAE,MAAE+B,GAAQC,EAAAA,EAAAA,OAAsByN,EAE1C,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BmO,yBAAyBjO,EAAAA,EAAAA,KAAeF,EAAQqE,GAC7C8J,yBAAyBrM,OAAQwpD,GAAWA,EAAOhpD,KAAOA,IAC5D+B,MAGL2H,EAAAA,EAAAA,IAAiB,eAAgByI,MAAOzU,EAAQmD,EAAS4O,KACvD,IAAIiU,EAAAA,EAAAA,KAA0BhmB,GAAS,OAEvC,MAAM,OAAEoB,EAAM,UAAE8F,EAAS,SAAE/E,GAAa4P,EAClC3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAClD,IAAK9D,IAASpC,EACZ,OAGF,MAAM2mB,EAAS3mB,EAAQ2qD,UAAUzjC,WAC3BtP,QAAevD,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDlT,WACAiB,OACA8D,YACAygB,WAGG/O,IAIL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ8F,EAAW,CACpDykD,SAAU/yC,KAEZ5N,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,IAAIiU,EAAAA,EAAAA,KAA0BhmB,GAAS,OAEvC,MAAM,IAAEgK,EAAG,OAAE5I,GAAW2Q,EAElB3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAE3BgC,GAAmC,yBAA3BpD,EAAO6lB,kBAIpBxQ,EAAAA,EAAAA,IAAQ,wBAAyB,CAAErL,MAAK5G,YAG1C4I,EAAAA,EAAAA,IAAiB,+BAAgC,CAAChM,EAAQmD,EAAS4O,KACjE,MAAM,OACJ3Q,EAAM,SAAE2nD,EAAQ,EAAE9oD,EAAC,EAAEipD,EAAC,UAAEC,EAAS,WAAEC,EAAU,GAAE9mD,EAAE,MAAE+B,GAAQC,EAAAA,EAAAA,OACzDyN,EAEE3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAE1B6M,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,GAAKjB,GAAS6K,EAASE,yBAAyBwD,KAAMi6C,GAAgBA,EAAYtpD,KAAOA,MACpFnB,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAQlC,MAJ+B,yBAA3BpB,EAAO6lB,kBACTxQ,EAAAA,EAAAA,IAAQ,+BAAgC,CAAEjS,OAAM2lD,cAG3C76C,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BmO,wBAAyBF,EAASE,wBAAwBY,IAAKs6C,GACzDA,EAAuB/mD,KAAOA,EACzB,IACF+mD,EACHppD,EAAGF,EAA6BC,EAAQC,GACxCipD,IACAC,YACAC,cAGGC,IAERhlD,MAGL2H,EAAAA,EAAAA,IAAiB,uBAAwByI,MAAOzU,EAAQmD,EAAS4O,KAC/D,MAAM,OAAE3Q,EAAM,SAAEyW,GAAa9F,EACvB3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMwV,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEjS,OAAMyU,WAAUK,UAAWL,GAAY,OAAItO,IAGlG,IAAKqP,IAAWA,EAAOnI,SAAS5O,OAO9B,OALA7B,EAAS4C,EADT5C,GAASoL,EAAAA,EAAAA,MAC8BhK,EAAQ,CAC7CwD,qBAAsB,SAGxBoG,EAAAA,EAAAA,IAAUhL,GAIZ,MAAM,SAAEyQ,GAAamI,EAEf3P,GAAOoG,EAAAA,EAAAA,IAAqBoB,EAAU,MACtCzG,EAAMjC,OAAO8G,KAAK5F,GAAM8F,IAAIlE,QAElC7K,GAASoL,EAAAA,EAAAA,MAETpL,EAAS4C,EADT5C,GAASkZ,EAAAA,EAAAA,KAAoBlZ,EAAQoD,EAAKd,GAAI2G,GACP7H,EAAQ,CAC7CoD,iBAAiBuH,EAAAA,EAAAA,IAAO,IAAK3I,EAAKoB,iBAAmB,MAAQwF,IAAMnF,KAAK,CAACC,EAAGC,IAAMA,EAAID,MAGxFkG,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,WAAE7C,EAAU,MAAE7K,GAAQC,EAAAA,EAAAA,OAAsByN,EAE5C3O,GAAOmjB,EAAAA,EAAAA,KAAkBvmB,EAAQqE,GACvC,IAAKjB,EAAM,OAEX,IAAKA,EAAKwB,qBACR,OAAOhC,EAAsB5C,EAAQoD,EAAKd,GAAI,CAC5CkC,gBAAiB,KAIrB,MAAMI,EAAuBjE,KAAKE,IAAIuC,EAAKwB,qBAAuBsK,EAAWrN,OAAQ,GAC/E2C,GAAmBpB,EAAKoB,iBAAmB,IAAI1C,OAAQQ,IAAQ4M,EAAWzK,SAASnC,IAEzFtC,EAAS4C,EAAsB5C,EAAQoD,EAAKd,GAAI,CAC9CkC,kBACAI,0BAGFoG,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQunB,iBAAiB,CAAExb,aAAYoX,4BAA4B,EAAMjiB,WAEpEL,EAAAA,EAAAA,KAA+BhE,EAAQ,qBAE5CA,GAASoL,EAAAA,EAAAA,MAET8D,EAAWhN,QAASI,IAClB,MAAMtB,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoD,EAAKd,GAAIA,GACnD,IAAKtB,EAAS,OAEd,MAAM,SAAEmB,EAAQ,MAAEJ,EAAK,SAAEgC,GAAa/C,EAAQM,WAAWM,kBAAkB,IAAM,CAAC,EAClF,GAAIO,GAAY4B,IAAahC,EAAO,CAClC,MAAMkC,GAAaC,EAAAA,EAAAA,IAAclD,GACjCmC,EAAQgB,oBAAoB,CAAEC,YAAaH,EAAY9B,WAAUkC,OAAOC,EAAAA,EAAAA,OAC1E,QAMJ0H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5C3O,GAAOmjB,EAAAA,EAAAA,KAAkBvmB,EAAQqE,GAEvC,IAAKjB,GAAMoB,gBACT,OAAIpB,GAAMwB,sBACD9B,EAAAA,EAAAA,KAAW9C,EAAQoD,EAAKd,GAAI,CACjCsC,qBAAsB,SAG1B,EAGFzB,EAAQ4J,aAAa,CACnB3L,OAAQgC,EAAKd,GAAI4E,UAAW9D,EAAKoB,gBAAgB,GAAIH,QAAOwnD,qBAAsB,QAEpF1oD,EAAQunB,iBAAiB,CAAExb,WAAY,CAAC9L,EAAKoB,gBAAgB,IAAKH,aAIpE2H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,OAAE3Q,EAAM,SAAEyG,EAAWD,EAAAA,IAAmBmK,EACxC3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,GAAKgC,EAIL,OAFAiS,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEjS,OAAMyE,SAAUA,IAAaD,EAAAA,QAAiB2B,EAAY1B,IAEpFA,IAAaD,EAAAA,GACRhF,EAAsB5C,EAAQoD,EAAKd,GAAI,CAC5CsC,0BAAsB2E,EACtB/E,qBAAiB+E,SAHrB,KAWFyC,EAAAA,EAAAA,IAAiB,mBAAoByI,UACnC,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,oBAAqB,CAChDuc,KAAM5xB,EAAOsB,UAAUswB,KAAKk6B,eAEzBlzC,IAIL5Y,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACVwqD,aAAclzC,EAAOtX,UACrBswB,KAAM,IACD5xB,EAAOsB,UAAUswB,KACpBk6B,aAAclzC,EAAOgZ,SAI3B5mB,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,sBAAuByI,UACtC,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CACnDuc,KAAM5xB,EAAOsB,UAAUswB,KAAKhwB,kBAEzBgX,IAIL5Y,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACVM,gBAAiBgX,EAAOtX,UACxBswB,KAAM,IACD5xB,EAAOsB,UAAUswB,KACpBhwB,gBAAiBgX,EAAOgZ,SAI9B5mB,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,uBAAwByI,gBAClBY,EAAAA,EAAAA,IAAQ,0BAK7BrV,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACVM,gBAAiB,MAGrBoJ,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,0BAA2ByI,UAC1C,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDuc,KAAM5xB,EAAOsB,UAAUswB,KAAKm6B,cAEzBnzC,IAIL5Y,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACVyqD,YAAanzC,EAAOtX,UACpBswB,KAAM,IACD5xB,EAAOsB,UAAUswB,KACpBm6B,YAAanzC,EAAOgZ,SAI1B5mB,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,wBAAyByI,UACxC,MAAM,KAAEmd,GAAS5xB,EAAOgsD,mBAAqB,CAAC,EAExCpzC,QAAevD,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEuc,SACzD,IAAKhZ,EACH,OAGF5Y,GAASoL,EAAAA,EAAAA,MAET,MAAM6gD,GAAYC,EAAAA,EAAAA,IAA0BtzC,EAAOuzC,KAAOC,GAAS,EAACC,EAAAA,EAAAA,IAAeD,EAAIjqD,UAAWiqD,IAElGpsD,EAAS,IACJA,EACHgsD,kBAAmB,CACjBp6B,KAAMhZ,EAAOgZ,KACb06B,MAAOL,KAGXjhD,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,uBAAwByI,MAAOzU,EAAQmD,EAAS4O,KAC/D,MAAM,SAAE5P,EAAQ,MAAE0N,GAAUkC,EAI5B,UAFqBsD,EAAAA,EAAAA,IAAQ,yBAA0B,CAAElT,WAAU0N,UAGjE,OAGF7P,GAASoL,EAAAA,EAAAA,MACT,MAAM6gD,EAAYjsD,EAAOgsD,mBAAmBM,MAC5C,IAAKL,EAAW,OAEhB,MAAMr8C,GAAMy8C,EAAAA,EAAAA,IAAelqD,GAGrBoqD,EAAS,IAFHN,EAAUr8C,GAIpBC,SAGF7P,EAAS,IACJA,EACHgsD,kBAAmB,IACdhsD,EAAOgsD,kBACVM,MAAO,IACFL,EACH,CAACr8C,GAAM28C,MAIbvhD,EAAAA,EAAAA,IAAUhL,MC5rBZgM,EAAAA,EAAAA,IAAiB,iBAAkByI,MAAOzU,EAAQmD,EAAS4O,KACzD,MAAM,OAAE3Q,EAAM,QAAEorD,EAAO,MAAEnoD,GAAQC,EAAAA,EAAAA,OAAsByN,EACjD3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BsZ,GAAW0G,EAAAA,EAAAA,KAAmBphB,EAAQoB,GAC5C,IAAKgC,IAASsX,EACZ,OAGF,MAAM9B,QAAevD,EAAAA,EAAAA,IACnBm3C,EAAU,uBAAyB,yBACnC,CAAEppD,OAAMqpD,KAAM/xC,EAASgyC,iBAEzB,IAAK9zC,EACH,OAGF,MAAM,MAAE+zC,GAAU/zC,EAKlB,GAJA5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAAS4sD,EAAAA,EAAAA,KAAiB5sD,EAAQoB,EAAQurD,EAAOtoD,IACjD2G,EAAAA,EAAAA,IAAUhL,GAES,YAAf2sD,EAAMvqD,KAAoB,CAC5B,MAAMyqD,EAAsBF,EAAMG,YAAYhrD,OAAQirD,GAAuB,YAAdA,EAAK3qD,MAC9D4qD,EAAoBL,EAAMG,YAAYhrD,OAAQirD,GAAuB,UAAdA,EAAK3qD,MAE9DyqD,EAAoBhrD,OAAS,GAC/BsB,EAAQ8pD,iBAAiB,CACvB7rD,SACA8N,WAAY29C,EAAoB99C,IAAK68C,GAAgBA,EAAYsB,SAIjEF,EAAkBnrD,OAAS,GAC7BsB,EAAQgqD,qBAAqB,CAC3BnrD,OAAQZ,EACRgsD,SAAUJ,EAAkBj+C,IAAK68C,GAAgBA,EAAYj/C,UAGnE,KAGFX,EAAAA,EAAAA,IAAiB,oCAAqCyI,MAAOzU,EAAQmD,EAAS4O,KAC5E,MAAM,OACJ/P,EAAM,MAAEqC,GAAQC,EAAAA,EAAAA,OACdyN,EACEsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAC1Bmf,GAAeC,EAAAA,EAAAA,KAAmBphB,EAAQgC,GAChD,IAAKqY,EACH,OAGF,MAAMoyC,EAAOtrC,GAAcurC,eACrBC,QAAct3C,EAAAA,EAAAA,IAAQ,qCAAsC,CAAEgF,OAAMoyC,SAErEE,IAIL3sD,GAASoL,EAAAA,EAAAA,MACTpL,GAASqtD,EAAAA,EAAAA,KAAoCrtD,EAAQ2sD,EAAOtoD,IAC5D2G,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,wBAAyByI,MAAOzU,EAAQmD,EAAS4O,KAChE,MAAM,OAAE3Q,EAAM,UAAE8F,EAAS,MAAE7C,GAAQC,EAAAA,EAAAA,OAAsByN,EACnD3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BsZ,GAAW0G,EAAAA,EAAAA,KAAmBphB,EAAQoB,GAC5C,IAAKgC,IAASsX,EACZ,OAGF,MAAM+xC,EAAO/xC,EAASgyC,eACtB,IAAI9zC,QAAevD,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEjS,OAAM8D,YAAWulD,SACnE7zC,IACHA,EAAS,CAAC,GAGZ5Y,GAASoL,EAAAA,EAAAA,MAET,MAAM,WACJ2jB,EAAU,cACVE,EAAa,UACb3tB,IACEuI,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAAQ8F,IAAc,CAAC,EACtD0R,EAAOmW,WAAaA,EACpBnW,EAAOqW,cAAgBA,EACvBrW,EAAO00C,eAAiBhsD,GAAWC,QAC/BD,GAAWC,QAAQmd,OAAO,CAACC,EAAKxc,IAAawc,EAAMxc,EAAS2W,MAAO,QACnEvP,EAEJvJ,GAASutD,EAAAA,EAAAA,KAAwBvtD,EAAQ4Y,EAAQvU,IACjD2G,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQqqD,0BAA0B,CAChCpsD,SACA8F,YACA7C,aAIJ2H,EAAAA,EAAAA,IAAiB,4BAA6ByI,MAAOzU,EAAQmD,EAAS4O,KACpE,MAAM,OAAE3Q,EAAM,UAAE8F,EAAS,MAAE7C,GAAQC,EAAAA,EAAAA,OAAsByN,EACnD3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BsZ,GAAW0G,EAAAA,EAAAA,KAAmBphB,EAAQoB,GAC5C,IAAKgC,IAASsX,EACZ,OAGF,MAAM+xC,EAAO/xC,EAASgyC,eAChBC,GAAQzsD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOopD,WAAW/nD,gBAAkB,CAAC,EAE1E,GAAIinD,GAAOe,iBAAmBf,EAAMzkC,WAAY,OAEhD,MAAMwlC,QAAuBr4C,EAAAA,EAAAA,IAAQ,6BAA8B,CACjEjS,OAAM8D,YAAWulD,OAAM9kC,OAAQglC,EAAMzkC,cAEjC,SACJgH,EAAQ,WACRhH,EAAU,MACVpP,GACE40C,GAAkB,CAAC,EAEvB1tD,GAASoL,EAAAA,EAAAA,MACTpL,GAASutD,EAAAA,EAAAA,KAAwBvtD,EAAQ,IACpC2sD,EACHe,eAAgB50C,GAASoW,GAAUrtB,OACnC8rD,oBAAqBhB,EAAMgB,oBAAsB,IAAI18C,OAAQie,GAAY,IACzEhH,cACC7jB,IACH2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,2BAA4ByI,MAAOzU,EAAQmD,EAAS4O,KACnE,MAAM,OACJ3Q,EAAM,MAAEg7C,EAAK,KAAEzH,EAAI,aAAEiZ,EAAY,MAAEvpD,GAAQC,EAAAA,EAAAA,OACzCyN,EACE2I,GAAW0G,EAAAA,EAAAA,KAAmBphB,EAAQoB,GAC5C,IAAKsZ,EACH,OAGF,MAAM+xC,EAAO/xC,EAASgyC,eAChB9zC,QAAevD,EAAAA,EAAAA,IAAQ,4BAA6B,CAAE+mC,QAAOqQ,OAAMmB,iBAEpEh1C,IAIL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAAS6tD,EAAAA,EAAAA,KAAsB7tD,EAAQoB,EAAQuzC,EAAM/7B,EAAQvU,IAC7D2G,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,sBAAuByI,MAAOzU,EAAQmD,EAAS4O,KAC9D,MAAM,OAAE3Q,EAAM,QAAEuL,EAAO,MAAEtI,GAAQC,EAAAA,EAAAA,OAAsByN,EACjD3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BsZ,GAAW0G,EAAAA,EAAAA,KAAmBphB,EAAQoB,GAC5C,IAAKgC,IAASsX,EACZ,OAGF,MAAM+xC,EAAO/xC,EAASgyC,eACtB,IAAI9zC,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEjS,OAAMuJ,UAAS8/C,SAC/D7zC,IACHA,EAAS,CAAC,GAEZ5Y,GAASoL,EAAAA,EAAAA,MAET,MAAM0iB,GAAQC,EAAAA,EAAAA,KAAgB/tB,EAAQoB,EAAQuL,IACxC,cACJsiB,EAAgB,EAAC,WACjBF,EAAa,EAAC,eACdu+B,EAAiB,GACfx/B,GAAS,UAAWA,GAASA,EAAMkB,MAAQlB,EAAMkB,MAAQ,CAAC,EAC9DpW,EAAOmW,WAAaA,EACpBnW,EAAOqW,cAAgBA,EACvBrW,EAAO00C,eAAiBA,EACxBttD,GAASoL,EAAAA,EAAAA,MACTpL,GAAS8tD,EAAAA,EAAAA,KAAsB9tD,EAAQ4Y,EAAQvU,IAC/C2G,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQ4qD,wBAAwB,CAC9B3sD,SACAuL,UACAtI,aAIJ2H,EAAAA,EAAAA,IAAiB,0BAA2ByI,MAAOzU,EAAQmD,EAAS4O,KAClE,MAAM,OAAE3Q,EAAM,QAAEuL,EAAO,MAAEtI,GAAQC,EAAAA,EAAAA,OAAsByN,EACjD3O,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BsZ,GAAW0G,EAAAA,EAAAA,KAAmBphB,EAAQoB,GAC5C,IAAKgC,IAASsX,EACZ,OAGF,MAAM+xC,EAAO/xC,EAASgyC,eAChBC,GAAQzsD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOopD,WAAWO,cAAgB,CAAC,EAExE,GAAIrB,GAAOe,iBAAmBf,EAAMzkC,WAAY,OAEhD,MAAM,eACJwlC,EAAc,MACd50C,EAAK,WACLoP,SACQ7S,EAAAA,EAAAA,IAAQ,2BAA4B,CAC5CjS,OAAMuJ,UAAS8/C,OAAM9kC,OAAQglC,EAAMzkC,cAC/B,CAAC,EAEPloB,GAASoL,EAAAA,EAAAA,MACTpL,GAAS8tD,EAAAA,EAAAA,KAAsB9tD,EAAQ,IAClC2sD,EACHe,eAAgB50C,GAAS40C,GAAgB7rD,OACzC8rD,oBAAqBhB,EAAMgB,oBAAsB,IAAI18C,OACnDy8C,GAAkB,IAEpBxlC,cACC7jB,IACH2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,0CAA2CyI,MAAOzU,EAAQmD,EAAS4O,KAClF,MAAM,OACJ/P,EAAM,gBAAEg0C,EAAe,MAAE3xC,GAAQC,EAAAA,EAAAA,OAC/ByN,EAEJ/R,GAASiuD,EAAAA,EAAAA,KAA8BjuD,EAAQ,CAC7C22B,WAAW,GACVtyB,IACH2G,EAAAA,EAAAA,IAAUhL,GAEV,MAAMqa,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EACH,OAGF,MAAMzB,QAAevD,EAAAA,EAAAA,IAAQ,wCAAyC,CAAEgF,OAAM27B,oBAEzEp9B,IAIL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASiuD,EAAAA,EAAAA,KAA8BjuD,EAAQ,CAC7C22B,WAAW,EACXuf,SAAU,UAAWt9B,EAASA,EAAO3U,gBAAasF,GACjDlF,IACH2G,EAAAA,EAAAA,IAAUhL,GAEN,QAAS4Y,IACXzV,EAAQmrC,QAAQ,CACdxjB,IAAKlS,EAAOkS,IACZzmB,QACA2mB,iBAAiB,IAEnB7nB,EAAQ+qD,mCAAmC,CAAE7pD,c,gBC9OjD2H,EAAAA,EAAAA,IAAiB,iBAAkByI,UACjC,IAAIpP,EAAI,EAER,KAAOrF,EAAOmuD,QAAQC,SAAS,CAC7B,GAAI/oD,KANqB,IAYvB,YALI48B,EAAAA,KAEFC,QAAQruB,MAAM,qDAMlB7T,GAASoL,EAAAA,EAAAA,MACT,MAAM,UAAEijD,EAAS,QAAED,GAAYpuD,EAAOmuD,QACtC,GAAIE,IAAcD,EAChB,OAGF,MAAMx1C,QAAevD,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9Ci5C,gBAAiBD,EACjBA,cAGF,IAAKz1C,EACH,QAGF5Y,GAASoL,EAAAA,EAAAA,OACF+iD,QAAQE,UAAYz1C,EAAO45B,MAE9B,gBAAiB55B,IACnB5Y,GAASuuD,EAAAA,EAAAA,KAAWvuD,EAAQ4Y,EAAO41C,aACnCxuD,GAASyuD,EAAAA,EAAAA,KAAuBzuD,EAAQ4Y,EAAO41C,cAC/CxuD,GAAS0uD,EAAAA,EAAAA,KAAkB1uD,EAAQ4Y,EAAO+1C,cACnCR,QAAQC,QAAUx1C,EAAOg2C,UAGlC5jD,EAAAA,EAAAA,IAAUhL,EACZ,KAGFgM,EAAAA,EAAAA,IAAiB,uBAAwByI,UACvC,IAAIpP,EAAI,EAER,KAAOrF,EAAOmuD,QAAQU,kBAAkB,CACtC,GAAIxpD,KAhDqB,IAsDvB,YALI48B,EAAAA,KAEFC,QAAQruB,MAAM,2DAMlB7T,GAASoL,EAAAA,EAAAA,MACT,MAAM,iBAAE0jD,EAAgB,iBAAED,GAAqB7uD,EAAOmuD,QACtD,GAAIW,IAAqBD,EACvB,OAGF,MAAMj2C,QAAevD,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9Ci5C,gBAAiBQ,EACjBT,UAAWS,EACXC,UAAU,IAGZ,IAAKn2C,EACH,QAGF5Y,GAASoL,EAAAA,EAAAA,OACF+iD,QAAQW,iBAAmBl2C,EAAO45B,MAErC,gBAAiB55B,IACnB5Y,GAASuuD,EAAAA,EAAAA,KAAWvuD,EAAQ4Y,EAAO41C,aACnCxuD,GAASyuD,EAAAA,EAAAA,KAAuBzuD,EAAQ4Y,EAAO41C,cAC/CxuD,GAAS0uD,EAAAA,EAAAA,KAAkB1uD,EAAQ4Y,EAAO+1C,cACnCR,QAAQU,iBAAmBj2C,EAAOg2C,UAG3C5jD,EAAAA,EAAAA,IAAUhL,EACZ,KAGFgM,EAAAA,EAAAA,IAAiB,yBAA0ByI,MAAOzU,EAAQmD,EAAS4O,KACjE,MAAM,OAAE/P,GAAW+P,EACbsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAC1BwsD,GAAcQ,EAAAA,EAAAA,KAAkBhvD,EAAQgC,GAC9C,IAAKqY,IAASm0C,EACZ,OAEF,MAAMS,EAAkBlnD,OAAOC,OAAOwmD,EAAYvlD,MAAMyV,OAAO,CAACC,EAAKmP,KAC7D,YAAaA,GACjBnP,EAAIjT,KAAKoiB,EAAMxrB,IAGVqc,GACN,IAEH,GAA+B,IAA3BswC,EAAgBptD,OAClB,OAGF,MAAM+W,QAAevD,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDgF,OACArQ,IAAKilD,IAGFr2C,IAIL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASkvD,EAAAA,EAAAA,KAAkBlvD,EAAQgC,EAAQ4W,EAAOu1C,QAASv1C,EAAO9H,YAClE9F,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,YAAayI,MAAOzU,EAAQmD,EAAS4O,KACpD,MAAM,OAAE/P,EAAM,QAAE2K,EAAO,MAAEtI,GAAQC,EAAAA,EAAAA,OAAsByN,EACjDsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAC1B8rB,GAAQC,EAAAA,EAAAA,KAAgB/tB,EAAQgC,EAAQ2K,GAC9C,IAAK0N,IAASyT,KAAW,YAAaA,GACpC,OAGF9tB,GAASmvD,EAAAA,EAAAA,KAA6BnvD,EAAQgC,EAAQ2K,EAAStI,IAC/D2G,EAAAA,EAAAA,IAAUhL,GAEV,MAAMovD,GAAa9hD,EAAAA,EAAAA,MAEfwgB,EAAMuS,WAAa+uB,GAActhC,EAAMuhC,cACpCh6C,EAAAA,EAAAA,IAAQ,YAAa,CAAEgF,OAAM1N,aAGlB3M,EAAOmuD,QAAQmB,SAASttD,GAAQutD,YAAc,GAAKzhC,EAAMxrB,UAKtD+S,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5CgF,OACA1N,cAOF3M,GAASoL,EAAAA,EAAAA,MACTpL,GAASwvD,EAAAA,EAAAA,KAA2BxvD,EAAQgC,EAAQ2K,IACpD3B,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,cAAeyI,MAAOzU,EAAQmD,EAAS4O,KACtD,MAAM,OAAE/P,EAAM,QAAE2K,GAAYoF,EAEtBsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAC3BqY,SAIgBhF,EAAAA,EAAAA,IAAQ,cAAe,CAAEgF,OAAM1N,cAMpD3M,GAASoL,EAAAA,EAAAA,MACTpL,GAASyvD,EAAAA,EAAAA,KAAgBzvD,EAAQgC,EAAQ2K,IACzC3B,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,uBAAwByI,MAAOzU,EAAQmD,EAAS4O,KAC/D,MAAM,OAAE/P,EAAM,QAAE2K,EAAO,YAAE0iD,GAAgBt9C,EAEnCsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EACH,OAGF,MAAMyT,GAAQC,EAAAA,EAAAA,KAAgB/tB,EAAQgC,EAAQ2K,GACxC+iD,EAAkB5hC,GAAS,YAAaA,EAAQA,EAAMuhC,iBAAc9lD,EAC1EvJ,GAAS2vD,EAAAA,EAAAA,KAAgB3vD,EAAQgC,EAAQ2K,EAAS,CAAE0iD,gBACpDrvD,GAAS4vD,EAAAA,EAAAA,KAAuB5vD,EAAQgC,EAAQ2K,EAAS0iD,IACzDrkD,EAAAA,EAAAA,IAAUhL,GAEV,MAAM4Y,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEgF,OAAM1N,UAAS0iD,gBACjEz2C,GAAQ/W,SACX7B,GAASoL,EAAAA,EAAAA,MACTpL,GAAS2vD,EAAAA,EAAAA,KAAgB3vD,EAAQgC,EAAQ2K,EAAS,CAAE0iD,YAAaK,IACjE1vD,GAAS4vD,EAAAA,EAAAA,KAAuB5vD,EAAQgC,EAAQ2K,EAAS+iD,IACzD1kD,EAAAA,EAAAA,IAAUhL,OAIdgM,EAAAA,EAAAA,IAAiB,yBAA0ByI,MAAOzU,EAAQmD,EAAS4O,KACjE,MAAM,OAAE/P,EAAM,QAAE2K,GAAYoF,EACtBsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAC1BwsD,GAAcQ,EAAAA,EAAAA,KAAkBhvD,EAAQgC,GAC9C,IAAKqY,IAASm0C,EACZ,OAGF,MAAMqB,GAAeC,EAAAA,EAAAA,KAAoB9vD,EAAQgC,IAAS+M,IAAKghD,GAAMA,EAAEztD,KAAO,GAExE0O,EADa6+C,EAAaprD,SAASkI,GACPkjD,EAAa/tD,OAAQQ,GAAOA,IAAOqK,GAAW,IAAIkjD,EAAcljD,GAElG3M,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHmuD,QAAS,IACJnuD,EAAOmuD,QACVmB,SAAU,IACLtvD,EAAOmuD,QAAQmB,SAClB,CAACttD,GAAS,IACLwsD,EACH19C,UAAWE,EAAanM,KAAK,CAACC,EAAGC,IAAMA,EAAID,QAKnDkG,EAAAA,EAAAA,IAAUhL,SACWqV,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEgF,OAAM+yC,SAAUp8C,MAGvEhR,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHmuD,QAAS,IACJnuD,EAAOmuD,QACVmB,SAAU,IACLtvD,EAAOmuD,QAAQmB,SAClB,CAACttD,GAAS,IACLwsD,EACH19C,UAAW++C,OAKnB7kD,EAAAA,EAAAA,IAAUhL,OAIdgM,EAAAA,EAAAA,IAAiB,kBAAmByI,MAAOzU,EAAQmD,EAAS4O,KAC1D,IAAIiU,EAAAA,EAAAA,KAA0BhmB,GAAS,OAEvC,MAAM,OAAEgC,GAAW+P,EACbsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EAAM,OAEX,MAAMzB,QAAevD,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEgF,SAC9CzB,IAIL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASkvD,EAAAA,EAAAA,KAAkBlvD,EAAQgC,EAAQ4W,EAAOu1C,SAC9Cv1C,EAAOo3C,kBACThwD,GAASwvD,EAAAA,EAAAA,KAA2BxvD,EAAQgC,EAAQ4W,EAAOo3C,mBAE7DhlD,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,yBAA0ByI,MAAOzU,EAAQmD,EAAS4O,KACjE,IAAIiU,EAAAA,EAAAA,KAA0BhmB,GAAS,OAEvC,MAAM,OAAEgC,EAAM,SAAE6V,EAAQ,MAAExT,GAAQC,EAAAA,EAAAA,OAAsByN,EAClDsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAIwsD,GAAcQ,EAAAA,EAAAA,KAAkBhvD,EAAQgC,GAC5C,IAAKqY,GAAQm0C,GAAajmB,cACxB,OAGF,MAAM0nB,GAAkBC,EAAAA,GAAAA,IAAgClwD,EAAQqE,GAChE,GAAwB,QAApB4rD,EAA2B,CAC7B,IAAIE,EAAY3B,GAAa4B,eAAeH,GAC5C,GAAIE,GAAW5nB,cACb,OAGF,MAAM3vB,QAAevD,EAAAA,EAAAA,IAAQ,oBAAqB,CAChDgF,OACAg2C,QAASJ,EACTtoC,OAAQ9P,GAAY,IAEtB,IAAKe,EACH,OAaF,OAVA5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASkvD,EAAAA,EAAAA,KAAkBlvD,EAAQgC,EAAQ4W,EAAOu1C,QAASv1C,EAAO9H,WAAW,EAAOm/C,GACpFzB,GAAcQ,EAAAA,EAAAA,KAAkBhvD,EAAQgC,GAExCmuD,EAAY3B,GAAa4B,eAAeH,IACK,IAAzCloD,OAAOC,OAAO4Q,EAAOu1C,SAAStsD,QAC5BsuD,GAAWnmD,KAAKnI,QAAUsuD,EAAUnmD,IAAInI,QAAU+W,EAAOE,SAC7D9Y,GAASswD,EAAAA,EAAAA,KAA6BtwD,EAAQgC,GAAQ,GAAM,EAAOiuD,SAErEjlD,EAAAA,EAAAA,IAAUhL,EAEZ,CAEA,MAAM4Y,QAAevD,EAAAA,EAAAA,IAAQ,0BAA2B,CAAEgF,OAAMxC,aAC3De,IAIL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASkvD,EAAAA,EAAAA,KAAkBlvD,EAAQgC,EAAQ4W,EAAOu1C,QAASv1C,EAAO9H,WAClE09C,GAAcQ,EAAAA,EAAAA,KAAkBhvD,EAAQgC,IACK,IAAzC+F,OAAOC,OAAO4Q,EAAOu1C,SAAStsD,QAC5B2sD,GAAa+B,YAAY1uD,QAAU2sD,GAAa+B,WAAW1uD,QAAU+W,EAAOE,SAChF9Y,GAASswD,EAAAA,EAAAA,KAA6BtwD,EAAQgC,GAAQ,KAGxDgJ,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,qBAAsByI,MAAOzU,EAAQmD,EAAS4O,KAC7D,IAAIiU,EAAAA,EAAAA,KAA0BhmB,GAAS,OAEvC,MAAM,OAAEgC,EAAM,SAAE6V,GAAa9F,EACvBsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAIwsD,GAAcQ,EAAAA,EAAAA,KAAkBhvD,EAAQgC,GAC5C,IAAKqY,GAAQm0C,GAAagC,qBAAsB,OAEhD,MAAM53C,QAAevD,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEgF,OAAMxC,aACvDe,IAIL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASkvD,EAAAA,EAAAA,KAAkBlvD,EAAQgC,EAAQ4W,EAAOu1C,aAAS5kD,GAAW,GAEtEilD,GAAcQ,EAAAA,EAAAA,KAAkBhvD,EAAQgC,IACK,IAAzC+F,OAAOC,OAAO4Q,EAAOu1C,SAAStsD,QAC5B2sD,GAAaiC,YAAY5uD,QAAU2sD,GAAaiC,WAAW5uD,QAAU+W,EAAOE,SAChF9Y,GAASswD,EAAAA,EAAAA,KAA6BtwD,EAAQgC,GAAQ,GAAM,KAE9DgJ,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,uBAAwByI,MAAOzU,EAAQmD,EAAS4O,KAC/D,MAAM,OAAE/P,EAAM,SAAEorD,GAAar7C,EACvBsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EACH,OAGF,MAAMzB,QAAevD,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEgF,OAAMrQ,IAAKojD,IAC9Dx0C,IAIL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASkvD,EAAAA,EAAAA,KAAkBlvD,EAAQgC,EAAQ4W,EAAOu1C,UAClDnjD,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,iBAAkByI,MAAOzU,EAAQmD,EAAS4O,KACzD,MAAM,OAAE/P,EAAM,QAAE2K,GAAYoF,EACtBsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EACH,OAGF,MAAMzB,QAAevD,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEgF,OAAM+yC,SAAU,CAACzgD,KAEhEiM,IAIL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAAS0wD,EAAAA,EAAAA,KAAqB1wD,EAAQgC,EAAQ2K,EAASiM,EAAOoW,QAC9DhkB,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,oBAAqByI,MAAOzU,EAAQmD,EAAS4O,KAC5D,MAAM,OACJ/P,EAAM,QACN2K,EAAO,OACPgb,EAAM,kBACNgpC,EAAiB,gBACjBC,EAAe,MACfj+B,EAAK,MACL9Z,EAAK,MACLxU,GAAQC,EAAAA,EAAAA,OACNyN,EAEEsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EACH,OAGFra,GAAS6wD,EAAAA,EAAAA,KAAwB7wD,GAAQ,EAAMqE,IAC/C2G,EAAAA,EAAAA,IAAUhL,GAEV,MAAM4Y,QAAevD,EAAAA,EAAAA,IAAQ,qBAAsB,CACjDgF,OACA1N,UACAgb,SACAgpC,oBACAC,kBACA/3C,QACA8Z,UAEF,IAAK/Z,EAIH,OAHA5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAAS6wD,EAAAA,EAAAA,KAAwB7wD,GAAQ,EAAOqE,QAChD2G,EAAAA,EAAAA,IAAUhL,GAIZA,GAASoL,EAAAA,EAAAA,MACTpL,GAAS8wD,EAAAA,EAAAA,KAAiB9wD,EAAQ2M,EAASiM,EAAOoW,MAAOpW,EAAOsP,WAAY7jB,IAC5E2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,cAAeyI,MAAOzU,EAAQmD,EAAS4O,KACtD,MAAM,OACJ/P,EAAM,QACN2K,EAAO,YACPoY,EAAc,GAAE,OAChBC,EAAS,GAAE,MACX3gB,GAAQC,EAAAA,EAAAA,OACNyN,EACEsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EACH,OAGF,MAAM4K,QAAiB5P,EAAAA,EAAAA,IAAQ,cAAe,CAC5CgF,OACA1N,UACAoY,cACAC,WAGF,IAAKC,EAAU,OAEf,MAAM,OAAErM,EAAM,MAAE/E,GAAUoR,EAE1B,GAAIpR,IAAUqR,EAAAA,IAMZ,OALA/hB,EAAQwM,iBAAiB,CACvB3O,SAAS4gB,EAAAA,EAAAA,IAAa,qCACtBvd,eAEFlB,EAAQgiB,iBAAiB,CAAE9gB,UAI7B,GAAKuU,EAAL,CAEA,GAAoB,aAAhBA,EAAOxW,KAQT,OAPAe,EAAQwM,iBAAiB,CACvB3O,QAAS4X,GACLgJ,EAAAA,EAAAA,IAAa,2BACb,2EACJvd,eAEFlB,EAAQgiB,iBAAiB,CAAE9gB,UAI7B,GAAoB,iBAAhBuU,EAAOxW,KAAyB,CAClCpC,GAASoL,EAAAA,EAAAA,MACT,MAAMga,GAAcllB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOghB,aAAaC,SACzDC,EAAiBH,IAAcA,EAAYvjB,OAAS,IAAIkR,SAASvP,KAAMgiB,GAAMA,EAAER,SAAWA,GAC1FS,EAAa,CACjB5V,MAAO+I,EAAO/I,MACdkD,QAAS6F,EAAO7F,QAChB2S,SAAUH,GAAgBxX,MAE5B/N,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BqlB,YAAa,CACXnW,WAAY,CAACvC,GACbgZ,QAAS,QACT3jB,SACA+iB,cACAO,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzDphB,IACH2G,EAAAA,EAAAA,IAAUhL,EACZ,CAEA,GAAoB,YAAhB4Y,EAAOxW,KAAoB,CAC7BpC,GAASoL,EAAAA,EAAAA,MACT,MAAMga,GAAcllB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOghB,aAAaC,SACzDC,EAAiBH,IAAcA,EAAYvjB,OAAS,IAAIkR,SAASvP,KAAMgiB,GAAMA,EAAER,SAAWA,GAC1FS,EAAa,CACjBG,WAAYhN,EAAOgN,WACnBZ,OAAQpM,EAAOoM,OACfnV,MAAO0V,GAAgBxX,MAEzB/N,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BqlB,YAAa,CACXnW,WAAY,CAACvC,GACboY,cACA/iB,SACA2jB,QAAS,QACTL,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzDphB,IACH2G,EAAAA,EAAAA,IAAUhL,EACZ,CArDmB,KAwDrBgM,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,OACJ/P,EAAM,QACN2K,EAAO,QACPokD,GACEh/C,EAEEsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EACH,OAGF,MAAM22C,EAAa,IAAID,EAAQE,gBAAiBF,EAAQG,cAClDC,EAAa,IAAIJ,EAAQK,gBAAiBL,EAAQM,cAElDC,GAAeC,EAAAA,EAAAA,IAA0BvxD,EAAQ,CACrDwxD,WAAYT,EAAQS,WACpBC,cAAeV,EAAQU,cACvBT,aACAG,aACAO,YAAa,UAGVr8C,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/BgF,OACA/X,GAAIqK,EACJokD,QAASO,OAIbtlD,EAAAA,EAAAA,IAAiB,sBAAuByI,MAAOzU,EAAQmD,EAAS4O,KAC9D,MAAM,OAAE/P,EAAM,SAAE+sD,GAAah9C,EACvBsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAC3BqY,SAEgBhF,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEgF,OAAM00C,eAG5D/uD,GAASoL,EAAAA,EAAAA,MACTpL,GAAS2xD,EAAAA,EAAAA,KAAwB3xD,EAAQgC,EAAQ+sD,IACjD/jD,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,oBAAqByI,MAAOzU,EAAQmD,EAAS4O,KAC5D,MAAM,QAAEumB,GAAYvmB,EACd6/C,EAAQt5B,EAAQvpB,IAAK/M,IAAWsY,EAAAA,EAAAA,KAAWta,EAAQgC,IAASF,OAAOyU,SACzE,IAAKq7C,EAAM/vD,OAAQ,OAEnB,MAAM+W,QAAevD,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEu8C,UACrD,IAAKh5C,EAAQ,OAEb,MAAMi5C,EAA0B,GAEhC7xD,GAASoL,EAAAA,EAAAA,MACTwN,EAAO1W,QAAQ,CAACoO,EAAOjL,KACrB,MAAMgV,EAAOu3C,EAAMvsD,GACnBrF,GAAS8xD,EAAAA,EAAAA,KAAW9xD,EAAQqa,EAAK/X,GAAI,CACnCyvD,WAAYzhD,EACZ0hD,WAAsB,IAAV1hD,IAGA,IAAVA,GACFuhD,EAAcnmD,KAAK2O,EAAK/X,OAG5B0I,EAAAA,EAAAA,IAAUhL,GAEV6xD,GAAe3vD,QAASF,GAAWmB,EAAQ+lC,gBAAgB,CAAElnC,eAG/DgK,EAAAA,EAAAA,IAAiB,oBAAqByI,MAAOzU,EAAQmD,EAAS4O,KAC5D,MAAM,OACJ/P,EAAM,QAAE2K,EAAO,YAAEvI,EAAW,SAAEjC,EAAQ,kBAAEwnD,EAAiB,MAAEtlD,GAAQC,EAAAA,EAAAA,OACjEyN,EACEsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EAAM,OAEX,MAAMyT,GAAQC,EAAAA,EAAAA,KAAgB/tB,EAAQgC,EAAQ2K,GAC9C,IAAKmhB,KAAW,YAAaA,GAAQ,OAErC,MAAMmkC,EAAmBnkC,EAAMokC,aAC/BlyD,GAASmyD,EAAAA,EAAAA,KAAwBnyD,EAAQgC,EAAQ2K,EAASxK,IAC1D6I,EAAAA,EAAAA,IAAUhL,GAENmC,EACFgB,EAAQgB,oBAAoB,CAAEC,cAAajC,WAAUkC,UAErDlB,EAAQunD,mBAAmB,CAAEtmD,cAAaC,UAG5C,MAAMuU,QAAevD,EAAAA,EAAAA,IAAQ,oBAAqB,CAChDgF,OAAM1N,UAASxK,WAAUwnD,sBAG3B3pD,GAASoL,EAAAA,EAAAA,MACJwN,IACH5Y,GAASmyD,EAAAA,EAAAA,KAAwBnyD,EAAQgC,EAAQ2K,EAASslD,KAE5DjnD,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,UAAEqgD,GAAY,EAAI,YAAEC,GAAc,GAAStgD,GAAW,CAAC,GAE7DsD,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE+8C,UAAWA,IAAa,EAAMC,YAAaA,IAAe,OAG7FrmD,EAAAA,EAAAA,IAAiB,kBAAmByI,MAAOzU,EAAQmD,EAAS4O,KAC1D,MAAM,OAAE/P,GAAW+P,EACbsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EAAM,OAEX,MAAMi4C,QAAej9C,EAAAA,EAAAA,IAAQ,cAAe,CAAEgF,SACzCi4C,IAELtyD,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACHmuD,QAAS,IACJnuD,EAAOmuD,QACVoE,eAAgB,IACXvyD,EAAOmuD,QAAQoE,eAClB,CAACvwD,GAASswD,MAIhBtnD,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,OAAE/P,EAAM,QAAEquD,EAAO,MAAEhsD,GAAQC,EAAAA,EAAAA,OAAsByN,EAEnDs+C,GAAWruD,IACbhC,GAASswD,EAAAA,EAAAA,KAA6BtwD,EAAQgC,GAAQ,IAGxDhC,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BwyD,qBAAsBnC,QAAW9mD,GAChClF,IAEH2G,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQsvD,uBAAuB,CAAEzwD,SAAQqC,aAG3C2H,EAAAA,EAAAA,IAAiB,mBAAoByI,MAAOzU,EAAQmD,EAAS4O,KAC3D,MAAM,OAAE/P,EAAM,QAAEquD,EAAO,SAAEx4C,GAAa9F,EAChCsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EAAM,OAEX,MAAMzB,QAAevD,EAAAA,EAAAA,IAAQ,oBAAqB,CAChDgF,OACAg2C,UACA1oC,OAAQ9P,GAAY,IAEjBe,IAEL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASkvD,EAAAA,EAAAA,KAAkBlvD,EAAQgC,EAAQ4W,EAAOu1C,QAASv1C,EAAO9H,YAClE9F,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BwyD,0BAAsBjpD,GACrBlF,K,0BCzrBL2H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,OACJ3Q,EAAM,SACNyG,EAAWD,EAAAA,GAAc,KACzBxF,EAAO,SAAQ,qBACfswD,GAAuB,EAAK,kBAC5BC,GAAoB,EAAK,kBACzBC,EAAiB,MACjBvuD,GAAQC,EAAAA,EAAAA,OACNyN,EAEElF,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,GAEtD4J,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GA8CxC,GA7CI4J,EAAS0vC,cAAcC,OAAS3vC,EAAS0vC,cAAcE,SACzD79C,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B29C,aAAc,IACT1vC,EAAS0vC,aACZE,QAAQ,IAETx5C,IAELlB,EAAQ0vD,qBAAqB,CAAExuD,UAE/BlB,EAAQsoB,iBAAiB,CAAEpnB,UAC3BlB,EAAQ2vD,uBAAuB,CAAEzuD,UACjClB,EAAQ4vD,2BAA2B,CAAE1uD,UACrClB,EAAQo/C,mBAAmB,CAAEl+C,UAExBwI,GACHA,EAAmBzL,SAAWA,GAC3ByL,EAAmBhF,WAAaA,GAChCgF,EAAmBzK,OAASA,IAE3BhB,IACFpB,GAASgzD,EAAAA,EAAAA,KAAsBhzD,EAAQoB,EAAQyG,EAAU,aAAc,GAAIxD,GAE3ErE,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BqrD,gBAAiB,CAAC,EAClB4H,gCAAgC,GAC/B5uD,GAEHrE,GAASkzD,EAAAA,EAAAA,KAAkBlzD,EAAQoB,EAAQyG,EAAUxD,IAGvDrE,GAASstB,EAAAA,EAAAA,KAAsBttB,EAAQqE,GAEvCrE,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BmzD,mBAAmB,EACnBxT,4BAAwBp2C,EACxB41C,qBAAiB51C,EACjBkT,0BAAsBlT,KAClBnI,KAAWlB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOyR,gBAAgBL,UAAY,CACvEK,gBAAiB,CAAC,EAClB8B,0BAA0B,IAE3BvT,IAGDjD,EAAQ,CACV,MAAMgC,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAE5BgC,GAAMiG,UAAYupD,EACpBzvD,EAAQiwD,eAAe,CAAEhyD,SAAQiD,UACxBjD,KAAWlB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOgvD,kBAClDlwD,EAAQmwD,gBAAgB,CAAEjvD,SAE9B,CAIA,OAFAlB,EAAQowD,gBAAgB,CAAElvD,WAEnBmvD,EAAAA,EAAAA,KAAyBxzD,EAAQoB,EAAQyG,EAAUzF,EAAMswD,EAAsBC,EAAmBtuD,MAG3G2H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,OAAE3Q,EAAM,SAAEyG,EAAWD,EAAAA,IAAmBmK,EAExC0hD,GAAUC,EAAAA,GAAAA,IAAqBtyD,EAAQ,SAAUyG,GAEvDmkB,OAAOC,KAAKwnC,EAAS,aAGvBznD,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OADA5O,EAAQowD,gBAAgB,CAAElvD,WACnBmvD,EAAAA,EAAAA,KAAyBxzD,OAAQuJ,OAAWA,OAAWA,OAAWA,OAAWA,EAAWlF,MAGjG2H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,WAAE4hD,EAAU,sBAAEC,GAAwB,EAAK,MAAEvvD,GAAQC,EAAAA,EAAAA,OAAsByN,EAEjF/R,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,KAC3BE,EAAAA,EAAAA,KAAeF,EAAQqE,GAC1BwvD,iBAAiB,EACjBC,eAAgBH,EAChBC,yBACCvvD,GACHrE,EAAS,IAAKA,EAAQ+zD,qBAAqB,IAC3C/oD,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQkhB,SAAS,IAAKtS,EAAS1N,aAGjC2H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAChM,EAAQmD,EAAS4O,KACvD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,EAEtC/R,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,KAC3BE,EAAAA,EAAAA,KAAeF,EAAQqE,GAC1BwvD,iBAAiB,GAChBxvD,GACHrE,EAAS,IAAKA,EAAQ+zD,qBAAqB,IAC3C/oD,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQiqB,WAAW,IAAKrb,EAAS1N,aAGnC2H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,OACJ3Q,EAAM,KAAE2M,EAAI,SAAElG,EAAWD,EAAAA,GAAc,MAAEosD,EAAK,OAAElyD,EAAM,MAAEuC,GAAQC,EAAAA,EAAAA,OAC9DyN,EAMJ,OAJI3Q,GACF+B,EAAQiqB,WAAW,CAAEhsB,SAAQyG,WAAUxD,WAGlC6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bi0D,eAAgB,CACd7yD,SACA2M,OACAimD,QACAlyD,WAEDuC,MAGL2H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bk0D,kBAAc3qD,GACblF,MAGL2H,EAAAA,EAAAA,IAAiB,+BAAgC,CAAChM,EAAQmD,EAAS4O,KACjE,MAAM,uBAAEoiD,EAAsB,MAAE9vD,GAAQC,EAAAA,EAAAA,OAAsByN,EAC9D,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bm0D,0BACC9vD,MAGL2H,EAAAA,EAAAA,IAAiB,eAAgB,CAAChM,EAAQmD,EAAS4O,KACjD,MAAM,iBAAEqiD,EAAgB,WAAEC,EAAU,MAAEhwD,GAAQC,EAAAA,EAAAA,OAAsByN,GAE9D,OAAE3Q,IAAW0L,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EAE/D,IAAKjD,EAEH,YADA+B,EAAQkhB,SAAS,CAAE/hB,GAAI+xD,EAAW,GAAIhwD,UAIxC,MAAMiwD,EAAWD,EAAWt2B,QAAQ38B,GAEpC,IAAkB,IAAdkzD,EACF,OAEF,MAAMC,EAASF,EAAWC,EAAWF,GAErCjxD,EAAQkhB,SAAS,CAAE/hB,GAAIiyD,EAAQ7B,sBAAsB,EAAMruD,aAG7D2H,EAAAA,EAAAA,IAAiB,6BAA8B,CAAChM,EAAQmD,EAAS4O,KAC/D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bw0D,6BAAyBjrD,GACxBlF,MAGL2H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAChM,EAAQmD,EAAS4O,KACvD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5By0D,mBAAelrD,GACdlF,MAGL2H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,OAAE3Q,EAAM,eAAE6S,EAAc,MAAE5P,GAAQC,EAAAA,EAAAA,OAAsByN,EAC9D,OAAO2iD,EAAAA,EAAAA,KAA+B10D,EAAQoB,EAAQ6S,EAAgB5P,MAGxE2H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B20D,qBAAiBprD,GAChBlF,MCvLL2H,EAAAA,EAAAA,IAAiB,gBAAiB,CAAChM,EAAQmD,EAAS4O,KAClD,MAAM,OACJ45B,EAAM,MAAEtnC,GAAQC,EAAAA,EAAAA,OACdyN,EAEC45B,IAGL3rC,EAAS0rC,GADT1rC,GAASoL,EAAAA,EAAAA,MAC4BugC,GAAQ,GAAM,EAAMtnC,IACzD2G,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,eAAgB,CAAChM,EAAQmD,EAAS4O,KACjD,MAAM,IACJnC,EAAG,OAAE/M,EAAM,MAAEwB,GAAQC,EAAAA,EAAAA,OACnByN,EACJ,OAAOk5B,GAAajrC,EAAQ4P,EAAK/M,EAAQwB,MAG3C2H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAGlD,OADA/R,EXqFK,SACLA,MAAeqE,GAAQC,EAAAA,EAAAA,QAEvB,MACM4nC,GADkBhsC,EAAAA,EAAAA,KAAeF,EAAQqE,GACPgnC,QAAQa,gBAEhD,OAAKA,EAEEI,GAAyBtsC,EAAQksC,GAAiB,EAAO7nC,GAFnCrE,CAG/B,CW9FW40D,CAA+B50D,EAAQqE,GAC3C2oC,GAAiBhtC,EAAQqE,GAEvBrE,EAFsCitC,GAAyBjtC,GAAQ,EAAOqE,MAKvF2H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAE5C9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GASxC,OARS6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BqrC,QAAS,IACJp9B,EAASo9B,QACZa,qBAAiB3iC,EACjB4iC,qBAAqB,IAEtB9nC,MAKL2H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAE5C9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAElC+mC,EAAgBn9B,EAASo9B,QAAQD,cAEjC0B,EAAoB/kC,OAAO8G,KAAKu8B,GAChC2B,EAAqBD,EAAkBjrC,OAW7C,OATSqM,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BqrC,QAAS,IACJp9B,EAASo9B,QACZc,qBAAqB,EACrBD,gBAAiBa,EAAqBD,EAAkBC,EAAqB,QAAKxjC,EAClF6iC,YAAaW,EAAqB,IAEnC1oC,MAKL2H,EAAAA,EAAAA,IAAiB,cAAe,CAAChM,EAAQmD,EAAS4O,KAChD,MAAM,IAAEnC,EAAG,wBAAE28B,EAAuB,MAAEloC,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAGhF,OAAKi7B,GADLhtC,EAASssC,GAAyBtsC,EAAQ4P,EAAK28B,EAAyBloC,GAC1CA,GAEvBrE,EAFsCitC,GAAyBjtC,GAAQ,EAAOqE,MAKvF2H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,uBAAE8iD,EAAsB,MAAExwD,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAEpE+iD,GAA0BD,KAC1B/f,EAAAA,GAAAA,GAAqB90C,GAAQmzC,mCXiJ9B,SACLnzC,MAAeqE,GAAQC,EAAAA,EAAAA,QAEvB,OAAOyD,OAAO8G,MAAK3O,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOgnC,QAAQD,eAAevpC,OAAS,CACnF,CWrJ0EkzD,CAA4B/0D,EAAQqE,GAE5G,OAAIywD,GACF3xD,EAAQ6xD,kCAAkC,CAAE3wD,UACrCrE,IAGTA,EX+EK,SACLA,MACIqE,GAAQC,EAAAA,EAAAA,QAEZ,MAAM6mC,GAAkBjrC,EAAAA,EAAAA,KAAeF,EAAQqE,GAEzC4wD,EAA2BltD,OAAOmtD,YACtCntD,OAAO8I,QAAQs6B,EAAgBE,QAAQD,eAAetpC,OACpD,EAAE,CAAE6pC,KAAYA,EAAOa,uBAIrB2oB,EAAiCptD,OAAOC,OAAOitD,GAGrD,KAFiCE,EAA+BtzD,OAAS,GAGvE,OAAOqM,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BqrC,QAAS,IACJF,EAAgBE,QACnBa,qBAAiB3iC,EACjB6hC,cAAe,CAAC,EAChBW,kBAAmB,GACnBE,YAAa,KAEd5nC,GAGL,MAAM+wD,GAAsBC,EAAAA,EAAAA,KAAmBr1D,EAAQqE,GAEjDixD,EAAkBF,GAAqB5oB,qBACzC4oB,EAAsBD,EAA+B,GAEnDI,GAAqB9pB,EAAAA,GAAAA,IAAa6pB,GAEpCC,IACFN,EAAyBM,GAAsB,IAC1CD,EACH7oB,kBAAkB,IAGtB,MAAMX,EAAgBX,EAAgBE,QAAQU,kBAAkBjqC,OAAQ8qC,GAAMqoB,EAAyBroB,IAEvG,OAAO1+B,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BqrC,QAAS,IACJF,EAAgBE,QACnBa,gBAAiBqpB,EACjBppB,qBAAqB,EACrBf,cAAe6pB,EACflpB,kBAAmBD,IAEpBznC,EACL,CWlIWmxD,CAAmBx1D,EAAQqE,GAC/B2oC,GAAiBhtC,EAAQqE,GAEvBrE,EAFsCitC,GAAyBjtC,GAAQ,EAAOqE,OAKvF2H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,MAAEygC,EAAK,MAAEnuC,GAAQC,EAAAA,EAAAA,OAAsByN,EAE7C,OXuIK,SACL/R,EAAWqsC,MACPhoC,GAAQC,EAAAA,EAAAA,QAEZ,MAAM6mC,GAAkBjrC,EAAAA,EAAAA,KAAeF,EAAQqE,GAC/C,OAAO6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BqrC,QAAS,IACJF,EAAgBE,QACnBgB,eAEDhoC,EACL,CWlJSoxD,CAAwBz1D,EAAQwyC,EAAOnuC,MAGhD2H,EAAAA,EAAAA,IAAiB,8BAA+B,CAAChM,EAAQmD,EAAS4O,KAChE,MAAM,SAAEuiD,GAAaviD,EAKrB,OAHSmhC,EAAAA,EAAAA,KAAqBlzC,EAAQ,CACpC01D,uBAAwBpB,OAK5BtoD,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,KAAE4jD,GAAS5jD,EAMjB,OAJSmhC,EAAAA,EAAAA,KAAqBlzC,EAAQ,CACpC41D,mBAAoBD,OAMxB3pD,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,EAChC8jD,GAAeR,EAAAA,EAAAA,KAAmBr1D,EAAQqE,GAChD,GAAKwxD,GAAc/qC,IAInB,OAAOmgB,GAAajrC,GAFRyrC,EAAAA,EAAAA,IAAaoqB,GAEQ,CAAEnc,KAAM3nC,EAAQ2nC,MAAQr1C,MAG3D2H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BgyC,qBAAiBzoC,GAChBlF,MAGL2H,EAAAA,EAAAA,IAAiB,iBAAkB,CAAChM,EAAQmD,EAAS4O,KACnD,MAAM,MAAE+e,EAAK,eAAE+hB,EAAc,MAAExuC,GAAQC,EAAAA,EAAAA,OAAsByN,GACvD,cAAE+jD,GAAkB91D,EAEpB+1D,EAAmB,IAAI7rD,IAAI4rD,GACjCC,EAAiB5rD,IAAI2mB,GAErB9wB,EAAS,IACJA,EACH81D,cAAe9xC,MAAMhK,KAAK+7C,IAG5B,MAAM9nD,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,GAAI4J,EAAS+jC,iBAAiBC,UAAW,CACvC,MAAM,OAAE3nC,EAAQyH,QAASikD,GAAoB/nD,EAAS+jC,gBAAgBC,UAEtE9uC,EAAQmH,GAAQ,IACV0rD,EACJnjB,kBAEJ,CAEA7yC,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BgyC,qBAAiBzoC,GAChBlF,IAEH2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,MAAEof,EAAK,UAAEJ,EAAS,MAAE1sB,GAAQC,EAAAA,EAAAA,OAAsByN,EAClD45B,GAASsqB,EAAAA,EAAAA,KAAaj2D,EAAQ+wB,EAAW1sB,GAC/C,IAAKsnC,EAAQ,OAAO3rC,EAEpB,MAAMk2D,EAAmBvqB,EAAOwqB,cAAgB,IAAIxqB,EAAOwqB,cAAehlC,GAAS,CAACA,GAUpF,OARAhuB,EAAQ8nC,aAAa,CACnBr7B,IAAKmhB,EACLluB,OAAQ,CACNszD,cAAeD,GAEjB7xD,UAGKrE,KAGTgM,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B+zC,+BAA2BxqC,GAC1BlF,MAGL2H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,IACJif,EAAG,OAAElvB,EAAM,WAAE4vC,EAAU,MAAErtC,GAAQC,EAAAA,EAAAA,OAC/ByN,EACElE,GAAgBf,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAQjD,OAEzDkwB,EAAmBN,EAAIolC,qBAAqBt0D,OAAQM,GAC/C,SAATA,GAAmBN,EAAO2C,SAASrC,IAGhCkvB,GAAkBzvB,QAUvB7B,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9Bq2D,yBAA0B,CACxBrlC,MACAlvB,OAAQwvB,EACRogB,eAEDrtC,IACH2G,EAAAA,EAAAA,IAAUhL,IAhBRmD,EAAQmzD,cAAc,CACpBl1D,OAAQyM,GAAiBmjB,EAAI1uB,GAC7B0uB,MACA0gB,aACArtC,aAeN2H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bq2D,8BAA0B9sD,GACzBlF,MAGL2H,EAAAA,EAAAA,IAAiB,6BAA8B,CAAChM,EAAQmD,EAAS4O,KAC/D,MAAM,IACJif,EAAG,UAAED,EAAS,MAAE1sB,GAAQC,EAAAA,EAAAA,OACtByN,EAECif,GAAQD,IAEb/wB,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9Bu2D,uBAAwB,CACtBvlC,MACAD,cAED1sB,IACH2G,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,8BAA+B,CAAChM,EAAQmD,EAAS4O,KAChE,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bu2D,4BAAwBhtD,GACvBlF,MAGL2H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,IACJif,EAAG,UAAED,EAAS,MAAE1sB,GAAQC,EAAAA,EAAAA,OACtByN,EAECif,GAAQD,IAEb/wB,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9Bw2D,oBAAqB,CACnBxlC,MACAD,cAED1sB,IACH2G,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,2BAA4B,CAAChM,EAAQmD,EAAS4O,KAC7D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bw2D,yBAAqBjtD,GACpBlF,K,uCCjSE,SAASoyD,GACd9hB,EAAkB/kC,IAGlB5D,EAAAA,EAAAA,IAAiB2oC,EAAM,CAAC30C,EAAQmD,EAAS4O,KACvC,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B,CAAC4P,QAAMrG,GACNlF,IAEP,C,wCC2DA,MACMqyD,GAA8BC,EAAAA,IAAsBC,EAAAA,IAK1D,IAAIC,GAu8BJ,SAASC,GAAoB92D,EAAqBoB,EAAgB8N,GAChE,MAAQ9M,KAAM0N,EAAe,SAAEjI,IAAaiF,EAAAA,EAAAA,KAAyB9M,IAAW,CAAC,EAC3Em7B,GAAOra,EAAAA,EAAAA,MAEP1d,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAE1B8Q,EAAmC,cAApBpC,GACjBhB,EAAAA,EAAAA,KAA4B9O,EAAQoB,IACpCyI,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAE/B,IAAKgC,IAAS8O,IAAiBrK,EAAU,OAEzC,MAAM4I,EAAWvB,EACdH,IAAKzM,GAAO4P,EAAa5P,IACzBR,OAAQd,IAAY+1D,EAAAA,EAAAA,KAAgC/2D,EAAQgB,EAAS6G,GAAUmvD,SAC/EnyD,KAAK,CAACoyD,EAAUC,IAAaD,EAAS30D,GAAK40D,EAAS50D,IAEjD60D,EAAuB,GACvBC,EAAuB,GAE7B3mD,EAASvO,QAASlB,IAChB,MAAMuuC,GAAS9rB,EAAAA,EAAAA,IAAcrgB,GAAQA,GAAOosC,EAAAA,EAAAA,KAAaxvC,EAAQgB,GAC3Dq2D,EAAc,KAAK9nB,GAAS+nB,EAAAA,EAAAA,IAAan8B,EAAMoU,GAAUvuC,EAAQu2D,aAAaC,gBAAkB,MAChGC,GAAkBC,EAAAA,EAAAA,IAA0B13D,EAAQgB,GAE1Dm2D,EAAWzrD,KAAK2rD,GAChBF,EAAWzrD,KAAK,GC3iCb,SACLyvB,EACAn6B,GAEA,MAAMhB,GAASoL,EAAAA,EAAAA,MACT4C,GAAQ2pD,EAAAA,GAAAA,IAAuB32D,GAC/B42D,EAAiB5pD,EAAQ,GAAGA,KAAW,GACvCD,GAAQ8pD,EAAAA,GAAAA,GAAkB,CAAE72D,UAAS82D,oBAAoB,KAAsBj2C,KAAK,IAEpF41C,GAAkBC,EAAAA,GAAAA,IAA0B13D,EAAQgB,GAI1D,MAAO,GAAG42D,KAFUG,EAAAA,GAAAA,IAA6B58B,EAAMn6B,EAASy2D,EAAiB1pD,GAAM,IAGzF,CD6hCuBiqD,CAAyB78B,EAAMn6B,QAElDo2D,EAAW1rD,KAAK2rD,GAChBD,EAAW1rD,KAAK,IAAGusD,EAAAA,GAAAA,IAAsB98B,EAAMn6B,EAASy2D,GAAiB,EAAO,GAAG,WAGrFS,EAAAA,EAAAA,GAAoBf,EAAWt1C,KAAK,MAAOu1C,EAAWv1C,KAAK,MAC7D,EAt+BA7V,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,OACJ3Q,EAAM,SAAEyG,EAAQ,aAAEswD,EAAY,MAAE9zD,GAAQC,EAAAA,EAAAA,OACtCyN,EAIJ,OAFA/R,GAASyI,EAAAA,EAAAA,KAAmBzI,EAAQoB,EAAQyG,EAAU,mBAAoBswD,IAEnEnF,EAAAA,EAAAA,KAAsBhzD,EAAQoB,EAAQyG,EAAU,eAAgBswD,EAAc9zD,MAGvF2H,EAAAA,EAAAA,IAAiB,eAAgB,CAAChM,EAAQmD,EAAS4O,KACjD,MAAM,UAAE7K,EAAS,MAAE7C,GAAQC,EAAAA,EAAAA,OAAsByN,EAC3ClF,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,GAC5D,IAAKwI,EACH,OAGF,MAAM,OAAEzL,EAAM,SAAEyG,EAAQ,KAAEzF,GAASyK,EAC7BurD,EAAqB,cAATh2D,EAAuB,qBAAuB,YAEhE,OAAOqG,EAAAA,EAAAA,KAAmBzI,EAAQoB,EAAQyG,EAAUuwD,EAAWlxD,MAGjE8E,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,KACJhE,EAAI,OAAE3M,EAAM,SAAEyG,EAAQ,KAAEzF,GACtB2P,EAEEqmD,EAAqB,cAATh2D,EAAuB,wBAA0B,eAEnE,OAAOqG,EAAAA,EAAAA,KAAmBzI,EAAQoB,EAAQyG,EAAUuwD,EAAWrqD,MAGjE/B,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,GAC5C,OAAE3Q,EAAM,SAAEyG,IAAaiF,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EACzE,IAAKjD,IAAWyG,EACd,OAGF,MAAMqK,GAAerI,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAC1Cya,GAAcrT,EAAAA,EAAAA,KAAkBxI,EAAQoB,EAAQyG,EAAUxD,GAChE,IAAK6N,IAAiB2J,EACpB,OAGF,MAAMw8C,GAA2BC,EAAAA,EAAAA,IAASz8C,EAAcvZ,GAC/CiU,QAAQrE,EAAa5P,KAAOy0D,EAAAA,EAAAA,KAAgC/2D,EAAQkS,EAAa5P,GAAKuF,GAAU0wD,UAGzG,OAAKF,GAIE5vD,EAAAA,EAAAA,KAAmBzI,EAAQoB,EAAQyG,EAAU,YAAawwD,QAJjE,KAOFrsD,EAAAA,EAAAA,IAAiB,qBAAsB,CAAChM,EAAQmD,EAAS4O,KACvD,MAAM,iBAAEqiD,EAAgB,MAAE/vD,GAAQC,EAAAA,EAAAA,OAAsByN,GAClD,OAAE3Q,EAAM,SAAEyG,IAAaiF,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EACzE,IAAKjD,IAAWyG,EACd,OAGF,MAAMqK,GAAerI,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAC1Cya,GAAcrT,EAAAA,EAAAA,KAAkBxI,EAAQoB,EAAQyG,EAAUxD,GAChE,IAAK6N,IAAiB2J,EACpB,OAGF,MAAMnV,GAAY+P,EAAAA,EAAAA,KAAYzW,EAAQoB,EAAQyG,IAAWnB,UAGzD,IAAIQ,EAEJ,IAJiBgB,EAAAA,EAAAA,KAAuBlI,EAAQoB,EAAQyG,EAAUxD,IAIhDqC,GAAWI,aAQtB,CACL,MAAM0xD,EAAkBzwD,OAAO8G,KAAKqD,GAE9BumD,EADiBD,EAAgBz6B,QAAQr3B,EAAUI,aAAa2lB,YACpC2nC,EAClCltD,EAAYuxD,GAAYD,EAAgB32D,OAAS,GAAK42D,GAAY,EAC9D5tD,OAAO2tD,EAAgBC,SACvBlvD,CACN,MAdE,GAAI1B,IAAaD,EAAAA,GACfV,GAAYiC,EAAAA,EAAAA,KAAwBnJ,EAAQoB,OACvC,CACL,MAAMwF,GAAa8D,EAAAA,EAAAA,KAAiB1K,EAAQoB,EAAQyG,GAEpDX,EAAYN,GAAYQ,aAC1B,CASFjE,EAAQ+J,qBAAqB,CAC3BpG,aAAcI,EAAW6lB,mBAAexjB,EAAWyjB,eAAWzjB,EAAWlF,UAE3ElB,EAAQ4J,aAAa,CACnB3L,SACAyG,WACAX,UAAWA,EACX7C,aAIJ2H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,OACJ3Q,EAAM,SAAEyG,EAAQ,UAAEX,EAAS,OAAEwxD,EAAM,OAAEC,EAAM,aAAEC,EAAY,QAAEC,EAAO,UAAE75B,EAAS,MAC7E36B,GAAQC,EAAAA,EAAAA,OACNyN,EAEE9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,OAAO6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B+kC,YAAa,CACX3jC,SACAyG,WACAX,YACA83B,YACA05B,OAAQA,GAAUzqD,EAAS82B,YAAY2zB,OACvCC,OAAQA,GAAU1qD,EAAS82B,YAAY4zB,OACvCC,aAAcA,GAAgB3qD,EAAS82B,YAAY6zB,cAAgB54D,EAAO+kC,YAAY+zB,iBACtFC,0BAAqExvD,IAA9C0E,EAAS82B,YAAYg0B,qBACxC/4D,EAAO+kC,YAAYi0B,yBACnB/qD,EAAS82B,YAAYg0B,qBACzBF,QAASA,GAAW5qD,EAAS82B,YAAY8zB,UAE1Cx0D,MAGL2H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,OACJ4mD,EAAM,MAAEt0D,GAAQC,EAAAA,EAAAA,OACdyN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B+kC,YAAa,KACR7kC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO0gC,YACjC4zB,SACAE,SAAS,IAEVx0D,MAGL2H,EAAAA,EAAAA,IAAiB,6BAA8B,CAAChM,EAAQmD,EAAS4O,KAC/D,MAAM,aACJ6mD,EAAY,qBAAEG,EAAoB,MAAE10D,GAAQC,EAAAA,EAAAA,OAC1CyN,EAWJ,OATA/R,EAAS,IACJA,EACH+kC,YAAa,IACR/kC,EAAO+kC,YACV+zB,iBAAkBF,EAClBI,yBAA0BD,KAIvB7qD,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B+kC,YAAa,KACR7kC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO0gC,YACjC6zB,eACAG,yBAED10D,MAGL2H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,QACJ8mD,EAAO,MAAEx0D,GAAQC,EAAAA,EAAAA,OACfyN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B+kC,YAAa,KACR7kC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO0gC,YACjC8zB,YAEDx0D,MAGL2H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,OACJ2mD,EAAM,MAAEr0D,GAAQC,EAAAA,EAAAA,OACdyN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B+kC,YAAa,KACR7kC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO0gC,YACjC2zB,WAEDr0D,MAGL2H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5C9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,OAAO6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B+kC,YAAa,CACX4zB,OAAQ1qD,EAAS82B,YAAY4zB,OAC7BC,aAAc3qD,EAAS82B,YAAY6zB,aACnCG,qBAAsB9qD,EAAS82B,YAAYg0B,qBAC3CF,QAAS5qD,EAAS82B,YAAY8zB,UAE/Bx0D,MAGL2H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,OAAE3Q,EAAM,UAAE8F,EAAS,MAAE7C,GAAQC,EAAAA,EAAAA,OAAsByN,EAEnDknD,GAAsBC,EAAAA,EAAAA,KAAyBl5D,GAAQI,EAAAA,EAAAA,MAAeiE,GACtE4J,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,GAAK40D,GAaE,GAAI73D,IAAW6M,EAAS4Z,YAAYzmB,QAAU8F,IAAc+G,EAAS4Z,YAAY3gB,UACtF,OAAOgH,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B6nB,YAAa,CACXzmB,SACA8F,YACA4gB,OAAQ,CAAC,IAEVzjB,QAnBH2nB,OAAO7gB,WAAW,KAChBnL,GAASoL,EAAAA,EAAAA,MAETpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B6nB,YAAa,CACXzmB,SACA8F,YACA4gB,OAAQ,CAAC,IAEVzjB,IACH2G,EAAAA,EAAAA,IAAUhL,IAjOkB,QAgPlCgM,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B6nB,YAAa,CAAC,GACbxjB,MAGL2H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5ClF,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,GAC5D,IAAKwI,EACH,OAGF,MAAM,OAAEzL,EAAM,SAAEyG,EAAQ,KAAEzF,GAASyK,EAE7B6L,GAAgB/M,EAAAA,EAAAA,IAAiBvK,EAAQyG,EAAU7H,EAAOiC,eAEhE,IAAImF,EACJ,GAAIS,IAAaD,EAAAA,GACf,GAAa,WAATxF,EAAmB,CACrB,MAAM+2D,GAAmBpoD,EAAAA,EAAAA,KAAgB/Q,EAAQoB,EAAQwG,EAAAA,IACzD,IAAKuxD,GAAkBt3D,OACrB,OAGFuF,EAAgB+xD,EAAiBA,EAAiBt3D,OAAS,EAC7D,MACEuF,GAAgB+B,EAAAA,EAAAA,KAAwBnJ,EAAQoB,QAE7C,GAAIsX,EACTtR,GAAgB+B,EAAAA,EAAAA,KAAwBnJ,EAAQ8L,OAAOjE,GAAW,aAC7D,CACL,MAAMjB,GAAa8D,EAAAA,EAAAA,KAAiB1K,EAAQoB,EAAQyG,GAEpDT,EAAgBR,GAAYQ,aAC9B,CAEKA,GAILjE,EAAQ4J,aAAa,CACnB3L,SACAyG,WACAiI,gBAAiB1N,EACjB8E,UAAWE,EACX4F,aAAa,EACb4lD,mBAAmB,EACnBvuD,aAIJ2H,EAAAA,EAAAA,IAAiB,iBAAkB,CAAChM,EAAQmD,EAAS4O,KACnD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5ClF,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,GAC5D,IAAKwI,EACH,OAGF,MAAM,OAAEzL,EAAM,SAAEyG,GAAagF,EAEvBusD,GAAaC,EAAAA,EAAAA,KAAiBr5D,EAAQoB,EAAQyG,EAAUxD,GAE9D,GAAK+0D,GAAoC,IAAtBA,EAAWv3D,OAEvB,CACL,MAAMqF,EAAYkyD,EAAWE,MAE7Bt5D,GAASgzD,EAAAA,EAAAA,KAAsBhzD,EAAQoB,EAAQyG,EAAU,aAAc,IAAIuxD,GAAa/0D,IAExF2G,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQ4J,aAAa,CACnB3L,SACAyG,WACAX,UAAWA,EACX7C,QACAuuD,mBAAmB,GAEvB,MAfEzvD,EAAQo2D,iBAAiB,CAAEl1D,aAoB/B2H,EAAAA,EAAAA,IAAiB,eAAgB,CAAChM,EAAQmD,EAAS4O,KACjD,MAAM,OACJ3Q,EAAM,SAAEyG,EAAWD,EAAAA,GAAc,gBAAEkI,EAAkB,SAAQ,YAAE9C,EAAW,UAAEqS,EAAS,cAAEm6C,EAAa,eACpGC,EAAc,oBAAExsD,EAAmB,qBAAEylD,EAAoB,kBAAEE,EAAiB,MAAE8G,EAAK,YAAEzsC,EAAW,qBAChG4+B,EAAoB,UAAE7sB,EAAS,MAAE36B,GAAQC,EAAAA,EAAAA,OACvCyN,EAEJ,IAAI,UAAE7K,GAAc6K,EAGpB,KADavK,EAAAA,EAAAA,KAAWxH,EAAQoB,GAG9B,YADA+B,EAAQwM,iBAAiB,CAAE3O,QAAS,CAAE4O,IAAK,iCAAmCvL,UAIhF,MAAMs1D,EAAiB36B,EACnB,IAAM77B,EAAQy2D,uBAAuB,CACrCx4D,SAAQyG,WAAUX,YAAW83B,YAAW36B,eACrCkF,EAEP,QAAkBA,IAAd8V,EAAyB,CAC3B,MAAMrV,GAAM6vD,EAAAA,EAAAA,KAAmC75D,EAAQw5D,EAAgBn6C,GACnErV,GAAKnI,UACLqF,IAAa4yD,EAAAA,EAAAA,IAAQ9vD,GAE3B,CAEA,MAAM6C,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,GACtD01D,GAAoBltD,GACxBzL,IAAWyL,EAAmBzL,QAC3ByG,IAAagF,EAAmBhF,UAChCiI,IAAoBjD,EAAmBzK,KA2B5C,GAxBIy0D,KACFloC,aAAakoC,IACbA,QAActtD,GAEhBstD,GAAc7qC,OAAO7gB,WAAW,KAC9BnL,GAASoL,EAAAA,EAAAA,MACTpL,GAASg6D,EAAAA,EAAAA,KAAqB,CAAEh6D,UAAUqE,GAC1CrE,GAASi6D,EAAAA,EAAAA,KAAqBj6D,OAAQuJ,EAAWlF,IACjD2G,EAAAA,EAAAA,IAAUhL,IACTgN,EAAc0pD,GAlXI,MAoXrB12D,GAASg6D,EAAAA,EAAAA,KAAqB,CAC5Bh6D,SACAoB,SACA8F,YACAW,WACAmF,cACAC,sBACAysD,QACAzsC,cACA4+B,wBACCxnD,GACHrE,GAASi6D,EAAAA,EAAAA,KAAqBj6D,OAAQuJ,EAAWlF,GAE7Co1D,EAAgB,CAClB,MAAML,GAAaC,EAAAA,EAAAA,KAAiBr5D,EAAQoB,EAAQyG,EAAUxD,IAAU,GACxErE,GAASgzD,EAAAA,EAAAA,KAAsBhzD,EAAQoB,EAAQyG,EAAU,aAAc,IAAIuxD,EAAYK,GAAiBp1D,EAC1G,CAEI01D,IACF/5D,GAASi6D,EAAAA,EAAAA,KAAqBj6D,EAAQk6D,EAAAA,GAAeC,OAAQ91D,IAG/D,MAAMwX,GAAcrT,EAAAA,EAAAA,KAAkBxI,EAAQoB,EAAQyG,EAAUxD,GAChE,GAAIwX,GAAeA,EAAYpX,SAASyC,GAWtC,OAVA8D,EAAAA,EAAAA,IAAUhL,EAAQ,CAAEic,uBAAuB,IAC3C9Y,EAAQiqB,WAAW,CACjBhsB,SACAyG,WACAzF,KAAM0N,EACN4iD,uBACAE,oBACAvuD,eAEFs1D,MAQF,GAJII,IACF/5D,GAASgzD,EAAAA,EAAAA,KAAsBhzD,EAAQoB,EAAQyG,EAAU,mBAAe0B,EAAWlF,IAGjFwX,IAAgBk+C,EAAkB,CACpC,MAAMjiD,EAAY5Q,EAAY2U,EAAY,GAAKq+C,EAAAA,GAAeE,KAAOF,EAAAA,GAAeG,GACpFr6D,GAASi6D,EAAAA,EAAAA,KAAqBj6D,EAAQ8X,EAAWzT,EACnD,EAEIi2D,EAAAA,GAAAA,QACFC,EAAAA,GAAAA,OAGFvvD,EAAAA,EAAAA,IAAUhL,EAAQ,CAAEic,uBAAuB,IAE3C9Y,EAAQiqB,WAAW,CACjBhsB,SACAyG,WACAzF,KAAM0N,EACN4iD,uBACAE,oBACAvuD,UAEFlB,EAAQqO,qBAAqB,CAC3BpQ,SACAyG,WACAxD,QACAoX,mBAAmB,EACnBxD,SAAU0hD,OAKd3tD,EAAAA,EAAAA,IAAiB,oCAAqC,CAAChM,EAAQmD,EAAS4O,KACtE,MAAM,+BAAEkhD,EAA8B,MAAE5uD,GAAQC,EAAAA,EAAAA,OAAsByN,EACtE,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BizD,kCACC5uD,MAGL2H,EAAAA,EAAAA,IAAiB,gBAAiB,CAAChM,EAAQmD,EAAS4O,KAClD,MAAM,WACJyD,EAAU,UAAEtO,EAAS,UAAE8lB,EAAS,YAAEC,EAAW,MAAE5oB,GAAQC,EAAAA,EAAAA,OACrDyN,EACJ,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B2sB,gBAAiB,CACfnX,aACAtO,YACA8lB,YACAC,eAEFrV,0BAA0B,GACzBvT,MAGL2H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,WACJyD,EAAU,WAAEtG,EAAU,QAAEvC,EAAO,UAAE0S,EAAS,YAAE3J,EAAW,MAAErR,GAAQC,EAAAA,EAAAA,OAC/DyN,EACJ,IAAIyoD,EAIJ,OAHIn7C,IACFm7C,GAAoBxQ,EAAAA,EAAAA,KAA0BhqD,EAAQwV,EAAY6J,KAE7DnR,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B8V,gBAAiB,CACfN,aACAtG,WAAYsrD,GAAqBtrD,EACjCvC,UACA+I,eAEFkC,0BAA0B,GACzBvT,MAGL2H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B8V,gBAAiB,KACZ5V,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOyR,gBACjCL,cAAUlM,EACVoM,WAAW,EACXC,YAAY,GAEdgC,0BAA0B,GACzBvT,MAGL2H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,UAAE4D,EAAS,MAAEtR,GAAQC,EAAAA,EAAAA,OAAsByN,EAC3C9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,OAAO6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B8V,gBAAiB,IACZ7H,EAAS6H,gBACZH,YAEAC,WAAYD,GAAa1H,EAAS6H,gBAAgBF,aAEnDvR,MAGL2H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,WAAE6D,EAAU,MAAEvR,GAAQC,EAAAA,EAAAA,OAAsByN,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B8V,gBAAiB,KACZ5V,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOyR,gBACjCF,aACAD,UAAWC,IAEZvR,MAGL2H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD/R,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B4X,0BAA0B,EAC1B9B,gBAAiB,CAAC,EAClB6W,gBAAiB,CAAC,GACjBtoB,IACH2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,qCAAsC,CAAChM,EAAQmD,EAAS4O,KACvE,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5C9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,IAAK4J,EAASwsD,iBACZ,OAGF,MAAQr5D,OAAQoU,EAAU,WAAEtG,GAAejB,EAASwsD,iBAE9CC,EAAwBxrD,EAAWpN,OAAQQ,IAC/C,MAAMtB,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQwV,EAAYlT,GACtD,OAAOtB,IAAWiW,EAAAA,EAAAA,KAAwBjX,EAAQgB,KAG/C05D,EAAsB74D,QAI3BsB,EAAQw3D,gBAAgB,CAAEnlD,aAAYtG,WAAYwrD,EAAuBr2D,aAG3E2H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,MAAEuB,EAAK,MAAEjP,GAAQC,EAAAA,EAAAA,OAAsByN,EAEvC6f,GAAOgpC,EAAAA,EAAAA,IAAatnD,EAAO,YACjC,GAAKse,EAGL,OADSipC,EAAAA,EAAAA,KAA2B76D,EAAQ,CAAC4xB,GAAOvtB,MAItD2H,EAAAA,EAAAA,IAAiB,2BAA4B,CAAChM,EAAQmD,EAAS4O,KAC7D,MAAM,YAAE+oD,EAAW,MAAEz2D,GAAQC,EAAAA,EAAAA,OAAsByN,EAInD,OAFS8oD,EAAAA,EAAAA,KAA2B76D,EAAQ86D,EAAaz2D,MAK3D2H,EAAAA,EAAAA,IAAiB,gBAAiB,CAAChM,EAAQmD,EAAS4O,KAClD,MAAM,MAAEuB,EAAK,cAAEvM,EAAa,MAAE1C,GAAQC,EAAAA,EAAAA,OAAsByN,EAEtD6f,GAAOgpC,EAAAA,EAAAA,IAAatnD,EAAO,YACjC,IAAKse,EAAM,OAEX,MACMmpC,EAAW,CACfpF,KAFW,SAAUriD,EAAQA,EAAMqiD,KAAO,EAG1CqF,QAAQC,EAAAA,EAAAA,IAAe3nD,EAAO,YAC9B4nD,UAAUC,EAAAA,EAAAA,IAAiB7nD,GAC3B8nD,aAAcr0D,GAAe3F,OAC7Bi6D,gBAAiBt0D,GAAezE,IAGlC,OAAOg5D,EAAAA,EAAAA,KAAuBt7D,EAAQ4xB,EAAMmpC,EAAU12D,MAGxD2H,EAAAA,EAAAA,IAAiB,2BAA4B,CAAChM,EAAQmD,EAAS4O,KAC7D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5C9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,IAAK4J,EAASwsD,iBACZ,OAGF,MAAM,OAAEr5D,EAAM,WAAE8N,GAAejB,EAASwsD,kBAClC,SAAE5yD,IAAaiF,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EAE3D6N,GAAerI,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAC3C8Q,GAAiBrK,GACLqH,EAAWH,IAAKzM,GAAO4P,EAAa5P,IAClDR,OAAQd,IAAY+1D,EAAAA,EAAAA,KAAgC/2D,EAAQgB,EAAS6G,GAAU0zD,aACzEr5D,QAASlB,IAChB,MAAMsS,GAAQkoD,EAAAA,GAAAA,IAA+Bx7D,EAAQgB,GAChDsS,GACLnQ,EAAQs4D,cAAc,CAAEnoD,QAAOvM,cAAe/F,EAASqD,eAI3D2H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,UAAE7K,EAAS,MAAE7C,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EACvDsS,GAAWkC,EAAAA,EAAAA,KAAkBvmB,EAAQqE,GAC3C,OAAKggB,GAIEq3C,EAAAA,EAAAA,KAAuB17D,EAAQqkB,EAAS/hB,GAAI4E,EAAW7C,GAHrDrE,KAMXgM,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,UACJ7K,EAAS,UACTmY,EAAS,gBACTs8C,EAAe,UACfC,EAAS,MACTv3D,GAAQC,EAAAA,EAAAA,OACNyN,EACElF,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,GAC5D,IAAKwI,EACH,OAGF,MAAM,OAAEzL,EAAM,SAAEyG,EAAUzF,KAAM0N,GAAoBjD,EAEpD7M,GAAS67D,EAAAA,EAAAA,KACP77D,EAAQoB,EAAQyG,EAAUiI,EAAiB5I,EAAWmY,EAAWs8C,EAAiBC,EAAWv3D,IAG/F2G,EAAAA,EAAAA,IAAUhL,GAENA,EAAO87D,4BACT34D,EAAQ44D,yBACR54D,EAAQwM,iBAAiB,CACvB3O,QAAS,CACP4O,IAAKosD,EAAAA,GAAe,uBAAyB,wBAE/C33D,cAKN2H,EAAAA,EAAAA,IAAiB,yBAA2BhM,IAC1C,GAAKA,EAAO87D,0BAIZ,MAAO,IACF97D,EACH87D,2BAA2B,MAI/B9vD,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAOub,EAAAA,EAAAA,KAAsBttB,EAAQqE,MAGvC2H,EAAAA,EAAAA,IAAiB,gBAAiB,CAAChM,EAAQmD,EAAS4O,KAClD,MAAM,OAAEi9B,EAAM,MAAE3qC,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAE1D,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bi8D,UAAW,CACTpe,QAAQ,EACR7O,WAED3qC,MAGL2H,EAAAA,EAAAA,IAAiB,iBAAkB,CAAChM,EAAQmD,EAAS4O,KACnD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bi8D,UAAW,CACTpe,QAAQ,IAETx5C,MAGL2H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,OACJ3Q,EAAM,UAAE8F,EAAS,WAAEg1D,EAAU,MAAE73D,GAAQC,EAAAA,EAAAA,OACrCyN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bm8D,cAAe,CACb/6D,SACA8F,YACAg1D,eAED73D,KAGLoyD,GAA0B,qBAAsB,kBAEhDzqD,EAAAA,EAAAA,IAAiB,2BAA4B,CAAChM,EAAQmD,KACpD,GAA0BV,KAAKC,MAAQ05D,cACrC,OAGF,MAAMC,EAAiBC,UAAYn9C,MAAM,KAAK7H,MAAM,EAAG,GAAGuK,KAAK,MACzD,qBAAExP,GAAyBrS,EAEjC,GAAIqS,EAAqB7O,KAAK,EAAGqzB,aAAcA,IAAYwlC,GACzD,OAGF,MAAMr7D,EAAkC,CACtCI,OAAQgR,EAAAA,IACR+C,MAAM7H,EAAAA,EAAAA,MACN1H,QAAS,CACPmI,MAAMwuD,EAAAA,GAAAA,I,8jHAA8C,IAEtDl5D,YAAY,GAGdF,EAAQ+P,0BAA0B,CAChClS,QAASA,EACT61B,QAASwlC,OAIbrwD,EAAAA,EAAAA,IAAiB,4BAA6B,CAAChM,EAAQmD,EAAS4O,KAC9D,MAAM,QAAE/Q,EAAO,QAAE61B,GAAY9kB,GACvB,qBAAEM,GAAyBrS,EAE3BsQ,EAAQ3P,KAAKE,KACjBsI,EAAAA,EAAAA,KAAwBnJ,EAAQoS,EAAAA,MAAkC,KAC/DC,EAAqBtD,IAAI,EAAGzM,QAASA,IAEpCk6D,GAAkBnqD,EAAqBxQ,OAAS,GA/tBf,IAiuBjCS,EAAK3B,KAAK6B,MAAM8N,GAASksD,EAE/Bx7D,EAAQ2I,gBAAkB3I,EAAQsB,GAClCtB,EAAQsB,GAAKA,EAEb,MAAMm6D,EAAsB,CAC1Bn6D,KACAtB,UACA61B,UACA9yB,UAAU,GAGZ/D,EAAS,IACJA,EACHqS,qBAAsB,IACjBA,EAAqBiF,OAhvBW,KAivBnCmlD,KAGJzxD,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQyL,UAAU,CAChB,QAAS,aACTtM,GAAItB,EAAQsB,GACZlB,OAAQJ,EAAQI,OAChBJ,eAIJgL,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,OAAE3Q,EAAM,UAAE8F,EAAS,MAAE7C,GAAQC,EAAAA,EAAAA,OAAsByN,EAEzD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B08D,aAAc,CAAEt7D,SAAQ8F,cACvB7C,MAGL2H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B08D,kBAAcnzD,GACblF,MAGL2H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,OAAE3Q,EAAM,UAAE8F,EAAS,MAAE7C,GAAQC,EAAAA,EAAAA,OAAsByN,EAEzD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B28D,YAAa,CAAEv7D,SAAQ8F,cACtB7C,MAGL2H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B28D,iBAAapzD,GACZlF,MAGL2H,EAAAA,EAAAA,IAAiB,iCAAkC,CAAChM,EAAQmD,EAAS4O,KACnE,MAAM,OAAE3Q,EAAM,WAAEw7D,EAAU,MAAEv4D,GAAQC,EAAAA,EAAAA,OAAsByN,EAE1D,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B68D,2BAA4B,CAAEz7D,SAAQw7D,eACrCv4D,MAGL2H,EAAAA,EAAAA,IAAiB,kCAAmC,CAAChM,EAAQmD,EAAS4O,KACpE,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B68D,gCAA4BtzD,GAC3BlF,MAGL2H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,OAAE3Q,EAAM,UAAE8F,EAAS,MAAE7C,GAAQC,EAAAA,EAAAA,OAAsByN,EAEnD+qD,EAAiB51D,GACnB61D,EAAAA,EAAAA,KAA0C/8D,EAAQoB,EAAQ8F,EAAW7C,IACrE24D,EAAAA,EAAAA,KAAuCh9D,EAAQoB,EAAQiD,GAE3D,OAAO6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bi9D,kBAAmB,CAAE77D,SAAQ8F,YAAW41D,mBACvCz4D,MAGL2H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bi9D,uBAAmB1zD,GAClBlF,MAGL2H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5C9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,IAAK4J,EAASwsD,iBACZ,OAGF,MAAM,OAAEr5D,EAAM,WAAE8N,GAAejB,EAASwsD,iBACxC3D,GAAoB92D,EAAQoB,EAAQ8N,MAGtClD,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,WAAE7C,EAAU,MAAE7K,GAAQC,EAAAA,EAAAA,OAAsByN,EAC5C3O,GAAOmjB,EAAAA,EAAAA,KAAkBvmB,EAAQqE,GAClC6K,GAAoC,IAAtBA,EAAWrN,QAAiBuB,GAI/C0zD,GAAoB92D,EAAQoD,EAAKd,GAAI4M,MAGvClD,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,QAAE/Q,EAAO,MAAEqD,GAAQC,EAAAA,EAAAA,OAAsByN,EAC/C/R,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9Bk9D,kBAAmB,CACjBl8D,YAEDqD,IACH2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD/R,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9Bk9D,uBAAmB3zD,GAClBlF,IACH2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,qBAAsB,CAAChM,EAAQmD,EAAS4O,KACvD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BkqB,mBAAe3gB,GACdlF,MAGL2H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BqlB,iBAAa9b,GACZlF,MAGL2H,EAAAA,EAAAA,IAAiB,4BAA6B,CAAChM,EAAQmD,EAAS4O,KAC9D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5CmY,GAAgBhqB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO6lB,cACpD,GAAKA,EAAL,CAIA,GAAsC,IAAlCA,EAAc5E,SAASzjB,OAK3B,OAAOqM,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BkqB,cAAe,IACVA,EACH5E,SAAU4E,EAAc5E,SAAShO,MAAM,GAAI,KAE5CjT,GATDlB,EAAQ2mB,mBAAmB,CAAEzlB,SAH/B,KAeF2H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5CsT,GAAcnlB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOghB,YAClD,GAAKA,EAAL,CAIA,GAAoC,IAAhCA,EAAYC,SAASzjB,OAKzB,OAAOqM,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BqlB,YAAa,IACRA,EACHC,SAAUD,EAAYC,SAAShO,MAAM,GAAI,KAE1CjT,GATDlB,EAAQgiB,iBAAiB,CAAE9gB,SAH7B,KAeF2H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,OAAE3Q,EAAM,UAAE8F,EAAS,MAAE7C,GAAQC,EAAAA,EAAAA,OAAsByN,EACzD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bm9D,kBAAmB,CAAE/7D,SAAQ8F,cAC5B7C,MAGL2H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bm9D,uBAAmB5zD,GAClBlF,MAGL2H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,OAAE3Q,EAAM,UAAE8F,EAAS,MAAE7C,GAAQC,EAAAA,EAAAA,OAAsByN,EACzD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bo9D,oBAAqB,CAAEh8D,SAAQ8F,cAC9B7C,MAGL2H,EAAAA,EAAAA,IAAiB,2BAA4B,CAAChM,EAAQmD,EAAS4O,KAC7D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bo9D,yBAAqB7zD,GACpBlF,MAGL2H,EAAAA,EAAAA,IAAiB,iCAAkC,CAAChM,EAAQmD,EAAS4O,KACnE,MAAM,OAAE3Q,EAAM,UAAE8F,EAAS,MAAE7C,GAAQC,EAAAA,EAAAA,OAAsByN,EACzD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bq9D,2BAA4B,CAAEj8D,SAAQ8F,cACrC7C,MAGL2H,EAAAA,EAAAA,IAAiB,kCAAmC,CAAChM,EAAQmD,EAAS4O,KACpE,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bq9D,gCAA4B9zD,GAC3BlF,MAsCL2H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,OACJ3Q,EAAM,WAAE8N,EAAU,WAAEouD,EAAU,MAC9Bj5D,GAAQC,EAAAA,EAAAA,OACNyN,EAEJ/R,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9Bu9D,mBAAoB,CAClBn8D,SACA8N,aACAouD,eAEDj5D,IACH2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bu9D,wBAAoBh0D,GACnBlF,MAGL2H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,SACJ0X,EAAQ,eAAE+zC,EAAc,UAAEC,EAAS,YAAEC,EAAW,MAAEr5D,GAAQC,EAAAA,EAAAA,OACxDyN,GAAW,CAAC,EAEhB,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B29D,cAAe,CACbl0C,WACAg0C,YACAD,iBACAE,gBAEDr5D,MAGL2H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAChM,EAAQmD,EAAS4O,KACvD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B29D,mBAAep0D,GACdlF,MAGL2H,EAAAA,EAAAA,IAAiB,kCAAmC,CAAChM,EAAQmD,EAAS4O,KACpE,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BixB,0BAAsB1nB,GACrBlF,MAGL2H,EAAAA,EAAAA,IAAiB,iCAAkC,CAAChM,EAAQmD,EAAS4O,KACnE,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BwxB,+BAA2BjoB,GAC1BlF,MAGL2H,EAAAA,EAAAA,IAAiB,0CAA2CyI,MAAOzU,EAAQmD,EAAS4O,KAClF,MAAM,KAAE6rD,EAAI,MAAEv5D,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,IAAK4J,EAASujB,0BACZ,OAGF,IAAKosC,EAQH,OAPA59D,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BwxB,0BAA2B,IACtBvjB,EAASujB,0BACZqsC,qBAAiBt0D,IAElBlF,QACH2G,EAAAA,EAAAA,IAAUhL,GAIZ,MAAM89D,QAA4B1jD,GAAuBpa,EAAQ49D,EAAK57D,QAEtEhC,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BwxB,0BAA2B,IACtBvjB,EAASujB,0BACZqsC,gBAAiB,CACf77D,OAAQ47D,EAAK57D,OACb6F,SAAU+1D,EAAK/1D,SACfi2D,yBAGHz5D,IACH2G,EAAAA,EAAAA,IAAUhL,MElpCZgM,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,MAAE4gB,EAAK,MAAEtuB,GAAQC,EAAAA,EAAAA,OAAsByN,GACvC,OAAE3Q,EAAM,eAAE28D,IAAmB79D,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOwzB,aAE3DmmC,EAAiBrrC,GAClBorC,IAAmBE,EAAAA,GAAoBC,SAAWH,IAAmBE,EAAAA,GAAoBE,YAC1F,CAAEn1D,OAAQ5H,EAAQqP,UAAU,QAASlH,EAIzC,OAFApG,EAAQi7D,sBAAsB,CAAEzrC,QAAOtuB,WAEhC2lB,EAAAA,EAAAA,KAAmBhqB,EAAQ,CAChCu4B,cAAe,CAAC,EAChBF,aAAc,CAAC,EACfM,mBAAepvB,EACfy0D,iBACArrC,SACCtuB,MAGL2H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,MAAiB,UAAE+5D,GAActsD,GAAW,CAAC,EAC7D,OAAOiY,EAAAA,EAAAA,KAAmBhqB,EAAQ,CAChCq+D,aACCh6D,MAGL2H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,GAAEzP,GAAOyP,GACT,qBAAEusD,GAAyBt+D,EAEjC,IAAKs+D,EACH,MAAO,IACFt+D,EACHs+D,qBAAsB,CAACh8D,IAI3B,MAAMi8D,EAAeD,EAAqBx8D,OAAQV,GAAWA,IAAWkB,GAMxE,OALAi8D,EAAal8D,QAAQC,GACjBi8D,EAAa18D,OAzCY,IA0C3B08D,EAAajF,MAGR,IACFt5D,EACHs+D,qBAAsBC,MAI1BvyD,EAAAA,EAAAA,IAAiB,0BAA4BhM,IACpC,IACFA,EACHs+D,0BAAsB/0D,MAI1ByC,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,QAAEnM,EAAO,MAAEvB,GAAQC,EAAAA,EAAAA,OAAsByN,EAE/C,OAAOysD,EAAAA,EAAAA,IAA0Bx+D,EAAQ4F,EAASvB,MAGpD2H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,GAAEzP,EAAE,MAAE+B,GAAQC,EAAAA,EAAAA,OAAsByN,EAE1C,OAAOiY,EAAAA,EAAAA,KAAmBhqB,EAAQ,CAAEoB,OAAQkB,EAAIqwB,WAAOppB,EAAWovB,mBAAepvB,GAAalF,MC9DhG2H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,GAC5C,OAAE3Q,EAAM,SAAEyG,IAAaiF,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EACzE,GAAKjD,GAAWyG,EAIhB,OAAOk0B,EAAAA,EAAAA,KAAmB/7B,EAAQoB,EAAQyG,EAAU,CAAC,EAAGxD,MAG1D2H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,GAC5C,OAAE3Q,EAAM,SAAEyG,IAAaiF,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EACzE,GAAKjD,GAAWyG,EAIhB,OAAOqrD,EAAAA,EAAAA,KAAkBlzD,EAAQoB,EAAQyG,EAAUxD,MAGrD2H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAChM,EAAQmD,EAAS4O,KACvD,MAAM,OACJlP,EAAM,MAAEwB,GAAQC,EAAAA,EAAAA,OACdyN,EAEJ,IAAI3Q,EACAyG,EACJ,GAAIkK,EAAQ3Q,OACVA,EAAS2Q,EAAQ3Q,OACjByG,EAAWkK,EAAQlK,UAAYD,EAAAA,OAC1B,CACL,MAAMiF,GAAqBC,EAAAA,EAAAA,KAAyB9M,EAAQqE,GAC5D,IAAKwI,EACH,OAEFzL,EAASyL,EAAmBzL,OAC5ByG,EAAWgF,EAAmBhF,QAChC,CAIA,OAFSk0B,EAAAA,EAAAA,KAAmB/7B,EAAQoB,EAAQyG,EAAUhF,EAAQwB,MAKhE2H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,GAC5C,OAAE3Q,EAAM,SAAEyG,IAAaiF,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EACzE,GAAKjD,GAAWyG,EAIhB,OAAO42D,EAAAA,EAAAA,KAAkBz+D,EAAQoB,EAAQyG,EAAUxD,MAGrD2H,EAAAA,EAAAA,IAAiB,2BAA4B,CAAChM,EAAQmD,EAAS4O,KAC7D,MAAM,UAAEwB,EAAS,MAAElP,GAAQC,EAAAA,EAAAA,OAAsByN,GAC3C,OAAE3Q,EAAM,SAAEyG,IAAaiF,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EACzE,GAAKjD,GAAWyG,EAIhB,OAAO62D,EAAAA,EAAAA,KAA4B1+D,EAAQoB,EAAQyG,EAAU0L,EAAWlP,MCpE1E2H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,MAAE4gB,EAAK,MAAEtuB,GAAQC,EAAAA,EAAAA,OAAsByN,EAE7C,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B2+D,cAAe,CACbhsC,QACAoE,eAAWxtB,IAEZlF,MAGL2H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,MAAE4gB,EAAK,MAAEtuB,GAAQC,EAAAA,EAAAA,OAAsByN,EAE7C,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bm3B,UAAW,CACTxE,QACAhL,YAAQpe,EAERhI,aAASgI,IAEVlF,MCpBL2H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B4+D,0BAA0B,GACzBv6D,MAGL2H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B4+D,0BAA0B,GACzBv6D,MAGL2H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,KAAEw0B,EAAI,MAAEliC,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EACnDw0B,IAELvmC,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,KAC3BE,EAAAA,EAAAA,KAAeF,EAAQqE,GAC1Bw6D,mBAAoB,CAClBC,wBAAyBv4B,IAE1BliC,IACH2G,EAAAA,EAAAA,IAAUhL,OAGZgM,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B6+D,wBAAoBt1D,GACnBlF,MAGL2H,EAAAA,EAAAA,IAAiB,2BAA4B,CAAChM,EAAQmD,EAAS4O,KAC7D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B++D,4BAA4B,GAC3B16D,MAGL2H,EAAAA,EAAAA,IAAiB,4BAA6B,CAAChM,EAAQmD,EAAS4O,KAC9D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B++D,4BAA4B,GAC3B16D,MChDL2H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAChM,EAAQmD,EAAS4O,KACvD,MAAM,MACJ4gB,EAAK,MACLtuB,GAAQC,EAAAA,EAAAA,OACNyN,EAEJ,OAAOg4B,EAAAA,EAAAA,KAAiB/pC,EAAQ,CAC9B8pC,mBAAevgC,EACfsgC,kBAActgC,EACdy0D,eAAgBznD,QAAQoc,GACxBA,SACCtuB,MAGL2H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,OAAE0P,EAAM,MAAEpd,GAAQC,EAAAA,EAAAA,OAAsByN,EAE9C,OAAIiU,EAAAA,EAAAA,KAA0BhmB,IAC5BmD,EAAQwvC,uBAAuB,CAAEtuC,UAC1BrE,IAGFkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bg/D,WAAY,CAAEv9C,WACbpd,MAGL2H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAIiU,EAAAA,EAAAA,KAA0BhmB,IAC5BmD,EAAQwvC,uBAAuB,CAAEtuC,UAC1BrE,IAGFkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bg/D,WAAY,CACVC,iBAAiB,IAElB56D,MAGL2H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAOo3B,EAAAA,EAAAA,KAAsBnpC,EAAQqE,MAGvC2H,EAAAA,EAAAA,IAAiB,4BAA6B,CAAChM,EAAQmD,EAAS4O,KAC9D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BsqC,0BAAsB/gC,GACrBlF,KAGLoyD,GAA0B,uBAAwB,oBAElDzqD,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,OAAE0P,EAAM,MAAEk/B,EAAK,MAAEt8C,GAAQC,EAAAA,EAAAA,OAAsByN,EAErD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bk/D,mBAAoB,CAClBz9C,SACAk/B,UAEDt8C,KAGLoyD,GAA0B,0BAA2B,sB,qCC9ErD,MAAM0I,GAAoB,qB,gBCAX,SAASC,GAAWC,GACjCp5D,SAASq5D,iBAAkC,gDACxCp9D,QAASi4B,IACJklC,EACGllC,EAAKjO,KAAKznB,SAAS,oBACtB01B,EAAKjO,KAAOiO,EAAKjO,KAAK0Q,QAAQ,UAAW,mBAG3CzC,EAAKjO,KAAOiO,EAAKjO,KAAK0Q,QAAQ,iBAAkB,YAGxD,CCJOnoB,eAAe8qD,GAAoBC,GACpCC,GAAAA,SACIzzC,OAAO0zC,OAAOC,eAAeH,IAKjCv5D,SAAS4J,QAAU2vD,IACrBv5D,SAAS4J,MAAQ2vD,EAErB,CAGO,MAAMI,IAAerrD,EAAAA,EAAAA,IAASgrD,GAjBV,KAiBmD,GCuuB9E,IAAIM,GA+IAC,IAv1BJ9zD,EAAAA,EAAAA,IAAiB,iBAAkB,CAAChM,EAAQmD,EAAS4O,KACnD,MAAM,MAAEhJ,EAAK,MAAE1E,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EACnD8hD,OAA4BtqD,IAAVR,EAAsBA,IAAS7I,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOwvD,gBAKrF,OAHA7zD,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAAE6zD,mBAAmBxvD,GAC5C,IAAKrE,EAAQ+zD,oBAAqBF,MAK7C7nD,EAAAA,EAAAA,IAAiB,qBAAsB,CAAChM,EAAQmD,EAAS4O,KACvD,MAAM,gBAAE1R,GAAoB0R,EAE5B,MAAO,IACF/R,EACHK,sBAIJ2L,EAAAA,EAAAA,IAAiB,uBAAyBhM,IACjC,IACFA,EACHK,qBAAiBkJ,MAIrByC,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,MAAEhJ,EAAK,MAAE1E,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,GACnD,OAAE3Q,IAAW0L,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EAE/D,IAAKjD,EACH,OAGF,MAAM6M,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bi/B,WAAY,CACV9sB,SAAU,IACLlE,EAASgxB,WAAW9sB,SACvB,CAAC/Q,GAAS,IACL6M,EAASgxB,WAAW9sB,SAAS/Q,GAChC2+D,cAAoBx2D,IAAVR,EAAsBA,IAAUkF,EAASgxB,WAAW9sB,SAAS/Q,IAAW,CAAC,GAAG2+D,aAI3F17D,MAGL2H,EAAAA,EAAAA,IAAiB,8BAA+B,CAAChM,EAAQmD,EAAS4O,KAChE,MAAM,OAAEiuD,EAAM,MAAE37D,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,GACpD,OAAE3Q,IAAW0L,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EAE/D,IAAKjD,EACH,OAGF,MAAM6M,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bi/B,WAAY,CACV9sB,SAAU,IACLlE,EAASgxB,WAAW9sB,SACvB,CAAC/Q,GAAS,IACL6M,EAASgxB,WAAW9sB,SAAS/Q,GAChC2+D,UAAU,EACVE,WAAYD,MAIjB37D,MAGL2H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,GAC5C,OAAE3Q,IAAW0L,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EAE/D,IAAKjD,EACH,OAGF,MAAM6M,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bi/B,WAAY,CACV9sB,SAAU,IACLlE,EAASgxB,WAAW9sB,SACvB,CAAC/Q,GAAS,IACL6M,EAASgxB,WAAW9sB,SAAS/Q,GAChC2+D,UAAU,MAIf17D,MAGL2H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,EACtC,IAAK3R,EAAAA,EAAAA,QAAkB8/D,EAAAA,EAAAA,MAIvB,OAAOhyD,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BG,kBAAyE,KAAtDD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO87D,aAAat+D,QAC7DwC,MAGL2H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,GAC5C,OAAE3Q,IAAW0L,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EAE/D,GAAKjD,EAIL,OAAO8M,EAAAA,EAAAA,GAAelO,EAAQ,CAAE8zD,oBAAgBvqD,EAAWqqD,uBAAuB,GAASvvD,MAG7F2H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5C9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,OAAO6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BmzD,mBAAoBllD,EAASklD,kBAC7B1F,WAAY,IACPx/C,EAASw/C,WACZ7vB,sBAAkBr0B,EAClB62D,oBAAgB72D,IAEjBlF,MAGL2H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,MAAiB,UAAE4C,GAAc6K,GAAW,CAAC,EAC7D,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BytD,WAAY,KACPvtD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOopD,WACjC7vB,iBAAkB12B,EAClBxB,oBAAgB6D,EAChB62D,oBAAgB72D,EAChBykD,kBAAczkD,IAEflF,MAGL2H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,MAAiB,QAAEqI,GAAYoF,GAAW,CAAC,EAC3D,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BytD,WAAY,KACPvtD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOopD,WACjC2S,eAAgBzzD,EAChBixB,sBAAkBr0B,EAClB7D,oBAAgB6D,EAChBykD,kBAAczkD,IAEflF,MAGL2H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BG,oBAAoBD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOlE,mBACjDkE,MAGL2H,EAAAA,EAAAA,IAAiB,iBAAkB,CAAChM,EAAQmD,EAAS4O,KACnD,MAAM,MAAE/D,GAAU+D,GACZ,aAAEsuD,GAAiBrgE,EACzB,IAAKqgE,EACH,MAAO,IACFrgE,EACHqgE,aAAc,CAACryD,IAInB,MAAMsyD,EAAYD,EAAav+D,OAAQy+D,GAAMA,IAAMvyD,GAMnD,OALAsyD,EAAUj+D,QAAQ2L,GACdsyD,EAAUz+D,OAlLU,IAmLtBy+D,EAAUhH,MAGL,IACFt5D,EACHqgE,aAAcC,MAIlBt0D,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,QAAE/L,GAAY+L,GACd,OAAEggB,GAAW/xB,EAAO8xB,SAC1B,IAAKC,EACH,MAAO,IACF/xB,EACH8xB,SAAU,IACL9xB,EAAO8xB,SACVC,OAAQ,CACNH,KAAM,IACNE,SAAU,CAAC9rB,MAMnB,MAAMw6D,EAAczuC,EAAOD,SAAShwB,OAAQiuD,GAAMA,EAAEztD,KAAO0D,EAAQ1D,IAGnE,OAFAk+D,EAAYn+D,QAAQ2D,GAEb,IACFhG,EACH8xB,SAAU,IACL9xB,EAAO8xB,SACVC,OAAQ,IACHA,EACHD,SAAU0uC,QAMlBx0D,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,WAAE0W,GAAe1W,GACjB,mBAAEwhB,GAAuBvzB,EAC/B,IAAKuzB,EACH,MAAO,IACFvzB,EACHuzB,mBAAoB,CAAC9K,IAIzB,MAAM63C,EAAY/sC,EAAmBzxB,OAAQQ,GAAOA,IAAOmmB,GAM3D,OALA63C,EAAUj+D,QAAQomB,GACd63C,EAAUz+D,OAvOU,IAwOtBy+D,EAAUhH,MAGL,IACFt5D,EACHuzB,mBAAoB+sC,MAIxBt0D,EAAAA,EAAAA,IAAiB,yBAA2BhM,IACnC,IACFA,EACHuzB,mBAAoB,OAIxBvnB,EAAAA,EAAAA,IAAiB,qBAAsB,CAAChM,EAAQmD,EAAS4O,KACvD,MAAM,MAAE0uD,EAAK,cAAEC,GAAkB3uD,EACjC,MAAO,IACF/R,EACH8xB,SAAU,IACL9xB,EAAO8xB,SACVoB,MAAO,CACLM,OAAUktC,EAAwB1gE,EAAO8xB,SAASoB,MAAMM,OAA9BitC,IAG9B73C,aAAc,IACT5oB,EAAO4oB,aACVsK,MAAO,CACLM,OAASktC,EAAgBD,EAAQzgE,EAAO4oB,aAAasK,MAAMM,aAMnExnB,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,SAAsBgO,GAAiBP,EACjD4uD,EAAaruD,EAAa7C,QAChC6C,EAAa7C,WAAYmxD,EAAAA,GAAAA,KAEzB,MAAMC,EAAmB,KAAI3gE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOyf,eACrDg9C,EAA4BD,EAAiBhnD,UAAWknD,GAC5DJ,EAAaI,EAAEtxD,UAAY6C,EAAa7C,QAAUsxD,EAAE//D,UAAYsR,EAAatR,SAQ/E,OANmC,IAA/B8/D,GACFD,EAAiBnjC,OAAOojC,EAA2B,GAGrDD,EAAiBn1D,KAAK4G,IAEfpE,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B8jB,cAAe+8C,GACdx8D,MAGL2H,EAAAA,EAAAA,IAAiB,sCAAuC,CAAChM,EAAQmD,EAAS4O,KACxE,MAAM,OAAE3Q,EAAM,gBAAE0O,EAAe,MAAEzL,GAAQC,EAAAA,EAAAA,OAAsByN,EAI/D,IAF0BivD,EAAAA,EAAAA,KAA4BhhE,EAAQoB,IAEjB,cAApB0O,EAOvB,YANA3M,EAAQwM,iBAAiB,CACvB3O,QAAS,CACP4O,IAAK,8CAEPvL,UAKJ,MAAMjB,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,EAAM,OACX,MAAM+d,GAAeC,EAAAA,EAAAA,KAAmBphB,EAAQoB,GAC1C6/D,EAAkB7/D,GAASD,EAAAA,EAAAA,KAAqBnB,EAAQoB,QAAUmI,EAClE23D,EAAgB9/D,GAAS+/D,EAAAA,EAAAA,KAAoBnhE,EAAQoD,QAAQmG,GAE7D,iBACJ63D,EAAgB,cAAEC,EAAa,cAAEC,EAAa,iBAAEC,EAAgB,cAAEC,EAAa,gBAC/EC,EAAe,mBAAEC,EAAkB,cAAEC,IACnCC,EAAAA,EAAAA,IAA4Bx+D,EAAM+d,EAAc+/C,EAAeD,GAC7DY,GAAiB/H,EAAAA,EAAAA,IAAQ,CAC7BsH,EAAmB,uCAAoC73D,EACvD83D,EAAgB,wCAAqC93D,EACrD+3D,EAAgB,wCAAqC/3D,EACrDo4D,EAAgB,+CAA4Cp4D,EAC5Dm4D,EAAqB,+CAA4Cn4D,EACjEg4D,EAAmB,uCAAoCh4D,EACvDi4D,EAAgB,wCAAqCj4D,EACrDk4D,EAAkB,0CAAuCl4D,IACxDwF,IAAKoX,GAAM4P,EAAAA,GAA0B5P,IAExC,IAAK07C,EAAehgE,OAKlB,YAJAsB,EAAQwM,iBAAiB,CACvB3O,QAAS+0B,EAAAA,GAA0B,2BACnC1xB,UAKJ,MAAMy9D,EAAgB/rC,EAAAA,GAA0B,sCAC1CgsC,EAAuBF,EAAehgD,KAAK,MAAM+a,QAAQ,YAAa,GAAGklC,OAE/E3+D,EAAQwM,iBAAiB,CACvB3O,QAAS+0B,EAAAA,GAA0B,8BAA+BgsC,GAClE19D,aAIJ2H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,EAChC8uD,GAAmB3gE,EAAAA,EAAAA,KAAeF,EAAQqE,GAC7Cyf,cAAchiB,OAAO,EAAG2N,aAAcA,IAAYsC,EAAQtC,SAE7D,OAAOvB,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B8jB,cAAe+8C,GACdx8D,MAGL2H,EAAAA,EAAAA,IAAiB,aAAc,CAAChM,EAAQmD,EAAS4O,KAC/C,MAAM,KAAE6b,EAAI,MAAEvpB,GAAQC,EAAAA,EAAAA,OAAsByN,EAG5C,GAAI,YAAa6b,GAAQA,EAAKwqB,eAAgB4pB,EAAAA,GAAAA,IAAqBp0C,GACjE,OAAO5tB,EAGT,MAAMiiE,EAAa,KAAI/hE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO69D,SACrD,GAAI,YAAat0C,EAAM,CACrB,MAAMu0C,EAAqBF,EAAWpoD,UAAWuoD,GAASA,EAAiBphE,UAAY4sB,EAAK5sB,UAChE,IAAxBmhE,GACFF,EAAWvkC,OAAOykC,EAAoB,EAE1C,CAIA,OAFAF,EAAWv2D,KAAKkiB,IAET1f,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BkiE,QAASD,GACR59D,MAGL2H,EAAAA,EAAAA,IAAiB,gBAAiB,CAAChM,EAAQmD,EAAS4O,KAClD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5CkwD,EAAa,KAAI/hE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO69D,SAIrD,OAFAD,EAAW3I,OAEJprD,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BkiE,QAASD,GACR59D,MAGL2H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAQ+Y,IAAKu3C,EAAgB,MAAEh+D,GAAQC,EAAAA,EAAAA,OAAsByN,EAE7D,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BqiE,oBACCh+D,MAGL2H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,WAAEuwD,EAAU,MAAEj+D,GAAQC,EAAAA,EAAAA,OAAsByN,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BuiE,0BAA2BD,GAC1Bj+D,MAGL2H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BuiE,+BAA2Bh5D,GAC1BlF,MAGL2H,EAAAA,EAAAA,IAAiB,WAAY,CAAChM,EAAQmD,EAAS4O,KAC7C,MAAM,IACJ+Y,EAAG,OAAE1pB,EAAM,UAAE8F,EAAS,MAAE7C,GAAQC,EAAAA,EAAAA,OAC9ByN,EAEE/Q,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAClD,IAAKlG,EAAS,OAEd,MAAM8vB,EAAQ9vB,EAAQ6uC,WAAYL,EAAAA,EAAAA,KAAaxvC,EAAQgB,IAAUsB,GACjE,GAAKwuB,EAAL,CAEA,KAAKihB,EAAAA,EAAAA,KAAmB/xC,EAAQ8wB,GAY9B,OAXA9wB,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BgyC,gBAAiB,CACflhB,QACA1uB,KAAM,OACN6vC,UAAW,CACT3nC,OAAQ,WACRyH,aAGH1N,QACH2G,EAAAA,EAAAA,IAAUhL,GAIZA,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BwiE,WAAY,CACV13C,MACA1pB,SACA8F,cAED7C,IACH2G,EAAAA,EAAAA,IAAUhL,EAxBQ,KA2BpBgM,EAAAA,EAAAA,IAAiB,YAAa,CAAChM,EAAQmD,EAAS4O,KAC9C,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BwiE,gBAAYj5D,GACXlF,MAGL2H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,MACJ1N,GAAQC,EAAAA,EAAAA,SAAsBm+D,GAC5B1wD,EAEJ,IAAK2wD,EAAAA,EAAAA,KAA0B1iE,GAE/B,OAAOkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B2iE,SAAU,CACRC,iBAAkBngE,KAAKC,SACpB+/D,IAEJp+D,MAGL2H,EAAAA,EAAAA,IAAiB,cAAe,CAAChM,EAAQmD,EAAS4O,KAChD,MAAM,OACJ8wD,EAAM,OAAEC,EAAM,MAAEz+D,GAAQC,EAAAA,EAAAA,OACtByN,EAEJ,IAAKgxD,EAAAA,MAAgCL,EAAAA,EAAAA,KAA0B1iE,GAAS,OAExE,MAAMiO,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAClC2+D,EAAkB/0D,EAASg1D,MAAMC,cAAgB,EACvD,OAAIzgE,KAAKC,MAAQsgE,EAAkBG,EAAAA,SAAnC,GAEOj1D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BijE,KAAM,CACJC,aAAczgE,KAAKC,MACnBmgE,SACAC,WAEDz+D,MAGL2H,EAAAA,EAAAA,IAAiB,2BAA4B,CAAChM,EAAQmD,EAAS4O,KACtD,IACF/R,EACHojE,mBAAoB,IACfpjE,EAAOojE,sBACPrxD,OAKT/F,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,EAEtC,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BqjE,4BAA4B,GAC3Bh/D,MAGL2H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,EAEtC,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BqjE,gCAA4B95D,GAC3BlF,MAGL2H,EAAAA,EAAAA,IAAiB,4BAA8BhM,IACpC,IACJA,EACHwhC,SAAU,IACLxhC,EAAOwhC,SACV8qB,MAAO,IACFtsD,EAAOwhC,SAAS8qB,MACnBgX,8BAA8B,QAQtCt3D,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,OACJ3Q,EAAM,SAAEyG,EAAQ,SAAE1F,EAAQ,MAAEkC,GAAQC,EAAAA,EAAAA,OAClCyN,EAEEg3C,EAA8B,UAAnB5mD,GAAUC,MAAoBD,EAAS4mD,SACxD,IAAKA,EAAU,OAEf,MAAMF,EAAS9gD,OAAOC,OAAOhI,EAAOgpD,qBACjCxlD,KAAM+/D,GAAkBA,EAAcza,mBAAqBya,EAAcxa,WAAaA,GAEnF3mC,EAAWymC,GAAQvmD,GAEnB4T,GAAuBC,EAAAA,EAAAA,KAA2BnW,IACpD6oD,GAAQ/yB,WAAc5f,EAQrBkM,IAELjf,EAAQqgE,wBAAwB,CAAEn/D,UAElClB,EAAQsgE,kBAAkB,CAAEriE,SAAQyG,WAAUua,cAX5Cjf,EAAQymB,iBAAiB,CACvBC,eAAgB,UAChBxlB,aAYN2H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,MAAE8G,EAAK,MAAExU,GAAQC,EAAAA,EAAAA,OAAsByN,EAE7C,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B0jE,kBAAmB,CACjB7qD,UAEDxU,MAGL2H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B0jE,uBAAmBn6D,GAClBlF,MAGL2H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BmyB,+BAA2B5oB,GAC1BlF,MAGL2H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,OAAEyhB,EAAM,MAAEnvB,GAAQC,EAAAA,EAAAA,OAAsByN,EAC9C,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B2jE,wBAAyBnwC,GACxBnvB,MAGL2H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B2jE,6BAAyBp6D,GACxBlF,MAGL2H,EAAAA,EAAAA,IAAiB,iCAAkC,CAAChM,EAAQmD,EAAS4O,KACnE,MAAM,IAAE/H,GAAQ+H,GACV,aAAE6xD,GAAiB5jE,EAAO4oB,aAEhC,MAAO,IACF5oB,EACH4oB,aAAc,IACT5oB,EAAO4oB,aACVg7C,cAAc73D,EAAAA,EAAAA,IAAO,IAAI63D,KAAiB55D,IAAMsN,MAAM,EAAGusD,EAAAA,UAK/D73D,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,OAAE3Q,EAAM,MAAEiD,GAAQC,EAAAA,EAAAA,OAAsByN,EAM9C,OAHoBwU,EAAAA,EAAAA,KAAkBvmB,EAAQqE,IAC5BlB,EAAQkhB,SAAS,CAAE/hB,GAAIlB,EAAQiD,WAE1C6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B8jE,iBAAkB,CAChB1iE,WAEDiD,MAGL2H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B8jE,sBAAkBv6D,GACjBlF,MAGL2H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAChM,EAAQmD,EAAS4O,KACvD,MAAM,OAAE3Q,EAAM,QAAE2J,EAAO,MAAE1G,GAAQC,EAAAA,EAAAA,OAAsByN,EAMvD,OAHoBwU,EAAAA,EAAAA,KAAkBvmB,EAAQqE,IAC5BlB,EAAQkhB,SAAS,CAAE/hB,GAAIlB,EAAQiD,WAE1C6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B+jE,eAAgB,CACd3iE,SACA2J,YAED1G,MAGL2H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B+jE,oBAAgBx6D,GACflF,MAGL2H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,gBAAEiyD,GAAoBhkE,GACtB,SAAE+uD,EAAWiV,EAAgBjV,SAAQ,YAAEkV,EAAcD,EAAgBC,aAAgBlyD,EAE3F,MAAO,IACF/R,EACHgkE,gBAAiB,CACfjV,WACAkV,mBAKNj4D,EAAAA,EAAAA,IAAiB,eAAgB,CAAChM,EAAQmD,EAAS4O,KACjD,MAAM,SAAEmyD,EAAQ,KAAEC,EAAI,MAAE9/D,GAAQC,EAAAA,EAAAA,OAAsByN,EAEtD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BokE,SAAU,CACRC,MAAOH,EACPC,SAED9/D,MAGL2H,EAAAA,EAAAA,IAAiB,gBAAiB,CAAChM,EAAQmD,EAAS4O,KAClD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BokE,cAAU76D,GACTlF,MAGL2H,EAAAA,EAAAA,IAAiB,kBAAoBhM,IACnC26C,MAAM,eAAsBl4C,KAAKC,SAC9B8jB,KAAMvB,GAAaA,EAASlX,QAC5ByY,KAAMqQ,KHhuBI,SAA8BytC,EAAuBC,GAClE,MAAMC,EAAyBF,EAAcG,OAE7C,QAAKtF,GAAkBuF,KAAKF,IAQrBA,IAA2BD,CACpC,EGutBUI,CAFJ9tC,EAAUA,EAAQ4tC,OAEgBnI,aAChCt8D,GAASoL,EAAAA,EAAAA,MACTpL,EAAS,IACJA,EACH4kE,sBAAsB,IAExB55D,EAAAA,EAAAA,IAAUhL,MAGb6kE,MAAOzC,IACFngC,EAAAA,KAEFC,QAAQruB,MAAM,4BAA6BuuD,QAKnDp2D,EAAAA,EAAAA,IAAiB,cAAgBhM,KAC1BE,EAAAA,EAAAA,KAAeF,GAAQsE,EAAAA,EAAAA,OAAmBwgE,qBAC/CC,EAAAA,EAAAA,QAOF/4D,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,UAAEizD,EAAS,MAAE3gE,GAAQC,EAAAA,EAAAA,OAAsByN,EAmBjD,OAjBIizD,GACEnF,IAAsBoF,cAAcpF,IAExCA,GAAuB7zC,OAAOk5C,YAAY,KACxC/hE,EAAQowD,gBAAgB,CACtBlvD,WAVsB,OAc1B4gE,cAAcpF,IACdA,QAAuBt2D,GAGzBvJ,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BglE,aACC3gE,GAEI,IACFrE,EACHmlE,2BAA4BH,GAAYI,EAAAA,GAAAA,WAA6B77D,MAIzEyC,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,GAC5C,sBAAEszD,IAA0BvwB,EAAAA,GAAAA,GAAqB90C,GACjDiC,EAAgBjC,EAAOiC,cACvBqjE,EAAetlE,EAAOmX,QAAQmuD,aAC9BC,EAASD,EAAe,OAAS,GAEjCE,EAAe/F,GAAAA,GAAWgG,EAAAA,IAAmBC,EAAAA,IAEnD,GAAIz/D,SAAS4J,MAAMpL,SAASkhE,EAAAA,KAG1B,OAFAvG,IAAW,QACXG,GAAoB,GAAGgG,IAASC,KAAgBG,EAAAA,OAKlD,IAAKlG,GAAAA,IAAYz/D,EAAOmlE,4BAA8BxkE,KAAK6X,MAAM/V,KAAKC,MAAQ,KAAQ,GAAM,EAAG,CAC7F,MAEMkjE,GAFoBR,EAAAA,GAAAA,MAEYplE,EAAOmlE,2BAE7C,GAAIS,EAAY,EAGd,OAFArG,GAAoB,GAAGgG,IAASK,iBAAyBA,EAAY,EAAI,IAAM,WAC/ExG,IAAW,EAGf,CAEAA,IAAW,GAEX,MAAM/iD,GAAcvP,EAAAA,EAAAA,KAAyB9M,EAAQqE,GAErD,GAAIgY,GAAegpD,IAA0BrlE,EAAO6lE,SAASC,eAAgB,CAC3E,MAAM,OAAE1kE,EAAM,SAAEyG,GAAawU,EACvBuQ,GAAcplB,EAAAA,EAAAA,KAAWxH,EAAQoB,GACvC,GAAIwrB,EAAa,CACf,MAAM/c,GAAQk2D,EAAAA,EAAAA,IAAahwC,EAAAA,GAA2BnJ,EAAaxrB,IAAWa,GACxEmH,GAAQgB,EAAAA,EAAAA,KAAYpK,EAAQoB,EAAQyG,GAC1C,OAAI+kB,EAAYvjB,SAAWD,OACzBw2D,GAAa,GAAG2F,IAAS11D,OAAWzG,EAAMyG,cAI5C+vD,GAAa,GAAG2F,IAAS11D,IAE3B,CACF,CAEA0vD,GAAoB,GAAGgG,IAASC,QAGlCx5D,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BgmE,wBAAoBz8D,GACnBlF,MAGL2H,EAAAA,EAAAA,IAAiB,4BAA6B,CAAChM,EAAQmD,EAAS4O,KAC9D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BimE,0BAAsB18D,GACrBlF,MAGL2H,EAAAA,EAAAA,IAAiB,4BAA6B,CAAChM,EAAQmD,EAAS4O,KAC9D,MAAM,MAAEm7B,EAAK,MAAE7oC,GAAQC,EAAAA,EAAAA,OAAsByN,EAC7C,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BkmE,uBAAwBh5B,GACvB7oC,MAGL2H,EAAAA,EAAAA,IAAiB,2BAA4B,CAAChM,EAAQmD,EAAS4O,MAC7Do0D,EAAAA,EAAAA,IAAiBp0D,EAAQ8iC,aAG3B7oC,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,SAAEq0D,GAAar0D,GACf,gCACJs0D,EAA+B,8BAC/BC,EAA6B,6BAC7BC,GACEvmE,EAAO+iB,WACHyjD,oCAAqCC,GAAmBzmE,EAAOwhC,SAEvE,GAAK6kC,GAAoCC,GAAkCC,KAGvEE,GAAkBhkE,KAAKC,MAAQ+jE,EAAgD,IAA/BF,GAgBpD,OAdwBx+D,OAAOC,OAAOhI,EAAOiI,SAASnG,OAAQqkB,IAAOA,EAAE6+C,WAAWj2D,IAAKoX,GAAMA,EAAE7jB,IAE/EJ,QAASmC,IACvBlB,EAAQwM,iBAAiB,CACvBE,MAAOkmB,EAAAA,GAA0BqwC,EAAW,qBAAuB,wBACnEplE,QAAS+0B,EAAAA,GACPqwC,EAAW,4BAA8B,8BACzCA,EAAWE,EAAgCD,GAE7Ch8B,SA50B2C,IA60B3ChmC,YAIG,IACFrE,EACHwhC,SAAU,IACLxhC,EAAOwhC,SACVglC,oCAAqC/jE,KAAKC,UAMhD,IACIgkE,GADAC,GAA+B,GAGnCxhC,EAAAA,GAAAA,IAAanlC,IACX,MAAM,gBAAEuzD,EAAe,eAAEqT,IAAmB3mD,EAAAA,EAAAA,MAEtC4mD,EAAkB7mE,EAAO6lE,SAASC,iBAAmBhG,GACrDgH,EAAmB/+D,OAAOC,OAAOhI,EAAOiI,SAASnG,OAAQqkB,GAAMA,EAAE6+C,WAAWnjE,OAC5EwjC,GAAcnlC,EAAAA,EAAAA,KAAeF,GAAQsE,EAAAA,EAAAA,OAAmB+gC,YAE1DwhC,GACFtT,IAGEuT,IAAqBH,IAAwBthC,IAC3CqhC,IAAe/3C,aAAa+3C,IAEhCA,GAAgB16C,OAAO7gB,WAAW,KAChCnL,GAASoL,EAAAA,EAAAA,MACT,MAAM27D,EAAsBh/D,OAAOC,OAAOhI,EAAOiI,SAASnG,OAAQqkB,GAAMA,EAAE6+C,WAAWnjE,OACrF+kE,EAAe,CAAEI,SAAUD,KAAwBE,EAAAA,EAAAA,MAAuBplE,UAlBzD,MAsBrBi+D,GAAqB9/D,EAAO6lE,SAASC,eACrCa,GAAuBG,KCr5BzB96D,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAE5CqnC,GADUl5C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO01C,QACvBX,QAAU,YAC3B8tB,GAAoBhnE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO6iE,kBAaxD,OAXA/jE,EAAQgkE,0BAA0B,CAChCC,WAAYF,EACZ9tB,SACA/0C,UAGFrE,GAASqnE,EAAAA,EAAAA,KAAarnE,EAAQqE,IACrB40C,EAAAA,EAAAA,KAAcj5C,EAAQ,CAC7Bo5C,UACC/0C,MAKL2H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAChM,EAAQmD,EAAS4O,KACvD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAIlD,OAFA/R,GAASi5C,EAAAA,EAAAA,KAAcj5C,EAAQ,CAAEo5C,YAAQ7vC,GAAalF,IAC7Ck5C,EAAAA,EAAAA,KAAmBv9C,EAAQ,CAAEo5C,YAAQ7vC,GAAalF,MAI7D2H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,MAAE8B,EAAK,MAAExP,GAAQC,EAAAA,EAAAA,OAAsByN,EAE7C,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B+5C,QAAS,KACJ75C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO01C,QACjCX,OAAQ,SACRvlC,UAEDxP,MAGL2H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAChM,EAAQmD,EAAS4O,KACvD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bs+C,mBAAe/0C,GACdlF,MAGL2H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAChM,EAAQmD,EAAS4O,KACvD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BmhD,mBAAe53C,GACdlF,MAGL2H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,OAAEjQ,EAAM,OAAEE,EAAM,MAAEqC,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5D9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAElCijE,EAAar5D,EAASg5C,WAAWnlD,OACvC,IAAIylE,EAAgB,IACfD,KACAxlE,GAGAylE,EAAcC,wBACbD,EAAcE,sBACdF,EAAcG,qBACdH,EAAcI,0BAClBJ,EAAgB,IACXD,EACHE,wBAAwB,EACxBC,sBAAsB,EACtBC,qBAAqB,EACrBC,yBAAyB,KACtB7lE,IAIFylE,EAAcK,wBAA2BL,EAAcM,sBAC1DN,EAAgB,IACXD,EACHM,wBAAwB,EACxBC,qBAAqB,KAClB/lE,IAIP,MAAM4kD,GAAqBT,EAAAA,EAAAA,KAA8BjmD,EAAQgC,EAAQqC,GAEzErE,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BinD,WAAY,IACPh5C,EAASg5C,WACZC,oBAAqB,CACnB,CAACllD,GAAS,CACR,CAAC0kD,GAAqBz4C,EAASg5C,WAAWC,oBAAoBllD,KAAU0kD,KAG5E5kD,OAAQylE,IAETljE,IACH2G,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQwjD,mBAAmB,CACzB3kD,SAAQqjD,eAAe,EAAMhhD,MAAO4J,EAAS3L,QAIjD0J,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,OAAE/P,EAAM,MAAEqC,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EACpD9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAElCqiD,GAAqBT,EAAAA,EAAAA,KAA8BjmD,EAAQgC,EAAQqC,GAEzErE,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BinD,WAAY,IACPh5C,EAASg5C,WACZC,oBAAqB,CACnB,CAACllD,GAAS,CACR,CAAC0kD,GAAqBz4C,EAASg5C,WAAWC,oBAAoBllD,KAAU0kD,KAG5E5kD,OAAQ,IACHgmE,EAAAA,OAGNzjE,IACH2G,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQwjD,mBAAmB,CACzB3kD,SAAQqjD,eAAe,EAAMhhD,MAAO4J,EAAS3L,QAIjD0J,EAAAA,EAAAA,IAAiB,sCAAuC,CAAChM,EAAQmD,EAAS4O,KACxE,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B+nE,mCAAmC,GAClC1jE,MAGL2H,EAAAA,EAAAA,IAAiB,uCAAwC,CAAChM,EAAQmD,EAAS4O,KACzE,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B+nE,mCAAmC,GAClC1jE,MAGL2H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,eACJmmC,EAAc,UACdC,EAAS,SACTj7B,EAAQ,WACR66B,EAAU,MACV1zC,GAAQC,EAAAA,EAAAA,OACNyN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BgoE,kBAAmB,CACjB9vB,iBACAC,YACAj7B,WACA66B,eAED1zC,MAGL2H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BgoE,uBAAmBz+D,GAClBlF,K,iBClLL2H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,OACJ3Q,EAAM,SAAEyG,EAAWD,EAAAA,GAAc,UAAEV,EAAS,UAAE83B,EAAS,WAAEipC,EAAU,aAAEC,EAAY,mBAAEC,EAAkB,OAAEzP,EAAM,mBAC7G0P,EAAkB,gBAAEC,EAAe,MAAEhkE,GAAQC,EAAAA,EAAAA,OAC3CyN,EAEE9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BsoE,YAAa,IACRr6D,EAASq6D,YACZlnE,SACAyG,WACAX,YACA+gE,WAAYA,GAAc,EAC1BC,eACAC,qBACAzP,SACA2P,kBACAtZ,UAAU,EACVqZ,qBACAppC,aAEFlpB,gBAAiB,CAAC,EAClB8B,0BAA0B,GACzBvT,MAGL2H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,GAC5C,OACJ4mD,EAAM,QAAEE,EAAO,aAAED,EAAY,SAAE7J,IAC7B7uD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOikE,YAElC,OAAOp6D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BsoE,YAAa,CACX3P,SACAE,UACA9J,WACA6J,iBAEDv0D,MAGL2H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,OACJ3Q,EAAM,UAAE8F,EAAS,SAAEW,EAAQ,UAAEm3B,EAAS,MAAE36B,GAAQC,EAAAA,EAAAA,OAC9CyN,EAEE/Q,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAClD,IAAKlG,EAAS,OAEd,MAAM0F,GAAYC,EAAAA,EAAAA,GAAoB3F,GAChCob,GAAemsD,EAAAA,EAAAA,KAAmBvoE,EAAQgB,GAE1CwnE,GAAeC,EAAAA,GAAAA,IAAyBzoE,EAAQgB,GAChD0nE,EAAqBF,GAAcn+B,SACzC,GAAIq+B,EAAoB,CACtB,GAAIA,GAAsB1pC,EAAW,OAErC,MAA+B,UAA3BwpC,EAAaj1D,eACfpQ,EAAQwlE,gBAAgB,CACtBvnE,SACA8F,YACAW,WACA6wD,OAAQkQ,EAAAA,GAAkBC,OAC1B7pC,YACA36B,eAKJlB,EAAQ2lE,gBAAgB,CACtB1nE,SACA8F,YACAW,WACA6wD,OAAQqQ,EAAAA,GAAYF,OACpB7pC,YACA36B,SAGJ,CAEA,MAAM2kE,EAAoB5sD,GAAeqsD,EAAAA,GAAAA,IAAyBzoE,EAAQoc,QAAgB7S,EACpF0/D,EAA0BD,GAAmB3+B,UAC9C4+B,GAA2BA,GAA2BjqC,IAEvB,UAAhCgqC,EAAkBz1D,UAYtBpQ,EAAQ2lE,gBAAgB,CACtB1nE,OAAQgb,EAAchb,OACtB8F,UAAWkV,EAAc9Z,GACzBuF,SAAUnB,GAAWomB,aACrB4rC,OAAQqQ,EAAAA,GAAYF,OACpB7pC,YACA36B,UAjBAlB,EAAQwlE,gBAAgB,CACtBvnE,OAAQgb,EAAchb,OACtB8F,UAAWkV,EAAc9Z,GACzBuF,SAAUnB,GAAWomB,aACrB4rC,OAAQkQ,EAAAA,GAAkBC,OAC1B7pC,YACA36B,cAeN2H,EAAAA,EAAAA,IAAiB,8BAA+B,CAAChM,EAAQmD,EAAS4O,KAChE,MAAM,OAAE3Q,EAAM,UAAE8F,EAAS,UAAE83B,GAAcjtB,EAEnCm3D,EAAuBlpE,EAAOyQ,SAAS04D,iBAAiB/nE,IAAS6H,MAAQ,CAAC,EAEhF,OAAK+1B,EAeE,IACFh/B,EACHyQ,SAAU,IACLzQ,EAAOyQ,SACV04D,iBAAkB,IACbnpE,EAAOyQ,SAAS04D,iBACnB,CAAC/nE,GAAS,CACR6H,KAAM,IACDigE,EACH,CAAChiE,GAAY83B,OAvBd,IACFh/B,EACHyQ,SAAU,IACLzQ,EAAOyQ,SACV04D,iBAAkB,IACbnpE,EAAOyQ,SAAS04D,iBACnB,CAAC/nE,GAAS,CACR6H,MAAMiH,EAAAA,EAAAA,IAAKg5D,EAAsB,CAAChiE,WAwB9C8E,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,OACJ4mD,EAAM,MACNt0D,GAAQC,EAAAA,EAAAA,OACNyN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BsoE,YAAa,KACRpoE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOikE,YACjC3P,SACAE,SAAS,IAEVx0D,MAGL2H,EAAAA,EAAAA,IAAiB,6BAA8B,CAAChM,EAAQmD,EAAS4O,KAC/D,MAAM,aACJ6mD,EAAY,MACZv0D,GAAQC,EAAAA,EAAAA,OACNyN,EAUJ,OARA/R,EAAS,IACJA,EACHsoE,YAAa,IACRtoE,EAAOsoE,YACVxP,iBAAkBF,KAIf1qD,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BsoE,YAAa,KACRpoE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOikE,YACjC1P,iBAEDv0D,MAGL2H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,QACJ8mD,EAAO,MACPx0D,GAAQC,EAAAA,EAAAA,OACNyN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BsoE,YAAa,KACRpoE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOikE,YACjCzP,YAEDx0D,MAGL2H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,SAAEg9C,EAAQ,MAAE1qD,GAAQC,EAAAA,EAAAA,OAAsByN,EAEhD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BsoE,YAAa,KACRpoE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOikE,YACjCvZ,aAED1qD,K,oDCzML,IAAI+kE,IAAiB,GACrBC,EAAAA,EAAAA,IAAe,KACb,MAAMrpE,GAASoL,EAAAA,EAAAA,MACVpL,EAAOspE,UACRtpE,EAAO6lE,SAAS0D,cAAgBH,IAAyD,IAAvCrhE,OAAO8G,KAAK7O,EAAOiI,SAASpG,SAChF2nE,EAAAA,GAAAA,SAIJx9D,EAAAA,EAAAA,IAAiB,cAAeyI,MAAOzU,EAAQmD,EAAS4O,KACtD,MAAM,SAAE8zD,EAAQ,MAAExhE,GAAQC,EAAAA,EAAAA,OAAsByN,EAChD/R,GAASypE,EAAAA,EAAAA,KAAuBzpE,EAAQ,CACtC22B,WAAW,KAEb3rB,EAAAA,EAAAA,IAAUhL,SACJ0pE,EAAAA,GAAAA,IAAc7D,GAEpB,MAAM8D,EAAc3tB,KAAKC,UAAU,KAAK2tB,EAAAA,GAAAA,MAAqBnoD,OAAQzhB,EAAOiC,gBAC5EjC,GAASoL,EAAAA,EAAAA,MACT,MAAMy+D,GAAaC,EAAAA,GAAAA,KAAgBL,EAAAA,EAAAA,KAAuBzpE,EAAQ,CAChEupE,aAAa,EACb11D,WAAOtK,EACPotB,WAAW,KAGb,UACQozC,EAAAA,GAAAA,IAAeJ,EAAaE,IAElCG,EAAAA,EAAAA,MACAhqE,GAASoL,EAAAA,EAAAA,MACTpL,GAASypE,EAAAA,EAAAA,KAAuBzpE,EAAQ,CACtCupE,aAAa,EACb11D,WAAOtK,EACPotB,WAAW,KAEb3rB,EAAAA,EAAAA,IAAUhL,IAEViqE,EAAAA,GAAAA,KAAiB,EACnB,CAAE,MAAO7H,IACP8H,EAAAA,GAAAA,KAEAlqE,GAASoL,EAAAA,EAAAA,MACTpL,GAASypE,EAAAA,EAAAA,KAAuBzpE,EAAQ,CACtC22B,WAAW,KAEb3rB,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQwM,iBAAiB,CACvB3O,QAAS,yBACTqD,UAEFlB,EAAQgnE,mBAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBC,iBAAkBhmE,SACzE,KAGF2H,EAAAA,EAAAA,IAAiB,gBAAkBhM,KAC5BsqE,EAAAA,GAAAA,MAELC,aAAaC,WAAWC,EAAAA,MACjBC,EAAAA,EAAAA,KAAsB1qE,MAG/BgM,EAAAA,EAAAA,IAAiB,eAAgB,CAAChM,EAAQmD,EAAS4O,KACjD,MAAM44D,EAAkB5iE,OAAOC,OAAOhI,EAAOiI,UACvC,YAAE0hE,EAAW,WAAEE,GAAe93D,EAC9B64D,EAAU5uB,KAAK6uB,MAAMlB,IAC3BmB,EAAAA,GAAAA,IAAaF,GAEb,MAAM7oC,EAAiB/hC,GACvBA,EAASg8C,KAAK6uB,MAAMhB,IACb5hE,QAAU85B,EAAe95B,SAChC8iE,EAAAA,GAAAA,GAAa/qE,GAAQgrE,EAAAA,EAAAA,IAAUC,GAAAA,KAE/BjrE,GAASypE,EAAAA,EAAAA,KACPzpE,EACA,CACE8lE,gBAAgB,EAChBjyD,WAAOtK,EACP2hE,qBAAsB,KAG1BlgE,EAAAA,EAAAA,IAAUhL,IAEVgqE,EAAAA,EAAAA,MAEAW,EAAgBzoE,QAAQ,EAAGI,GAAI+B,EAAOghC,iBAAkBliC,EAAQgoE,KAAK,CAAE9mE,QAAOghC,iBAC9EliC,EAAQioE,aAMVp/D,EAAAA,EAAAA,IAAiB,0BAA4BhM,IAC3C,MAAMkrE,GAAwBlrE,EAAO6lE,UAAUqF,sBAAwB,GAAK,EAE5E,OAAOzB,EAAAA,EAAAA,KAAuBzpE,EAAQ,CACpCkrE,uBACAG,aAAeH,GARU,EASrBzoE,KAAKC,MAR6B,UAQe6G,OAIzDyC,EAAAA,EAAAA,IAAiB,6BAA+BhM,IACvCypE,EAAAA,EAAAA,KAAuBzpE,EAAQ,CACpCkrE,qBAAsB,EACtBG,kBAAc9hE,MAIlByC,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,MAAE8B,GAAU9B,EAElB,OAAO03D,EAAAA,EAAAA,KAAuBzpE,EAAQ,CAAE6T,aAG1C7H,EAAAA,EAAAA,IAAiB,qBAAuBhM,IAC/BypE,EAAAA,EAAAA,KAAuBzpE,EAAQ,CAAE6T,WAAOtK,MAGjDyC,EAAAA,EAAAA,IAAiB,mBAAoB,KACnCo9D,IAAiB,KCnHnBp9D,EAAAA,EAAAA,IAAiB,4BAA6B,CAAChM,EAAQmD,EAAS4O,KAC9D,MAAM,WAAEq1D,EAAU,OAAEhuB,EAAM,MAAE/0C,GAAQC,EAAAA,EAAAA,OAAsByN,GACpD,mBACJu5D,EAAkB,eAAEngB,EAAc,WAAEogB,EAAU,MAAE9tD,GAC9C2pD,GAAc,CAAC,EAEnB,IAAKkE,GAAuBngB,GAAmBogB,GAAe9tD,KAI9Dta,EAAQ2vD,uBAAuB,CAAEzuD,UAElB,SAAX+0C,GA2BJ,OAtBIkyB,IACFtrE,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9Bq5C,aAAciyB,GACbjnE,IAGD8mD,GACFhoD,EAAQqoE,iBAAiB,CACvBpqE,OAAQ+pD,EAAe/pD,OACvB8F,UAAWikD,EAAejkD,UAC1B8jD,aAAcG,EAAe9tC,OAC7BhZ,UAIAknE,GACFpoE,EAAQsoE,aAAa,IAChBF,EACHlnE,UAIGrE,KAGTgM,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,MACJ1N,GAAQC,EAAAA,EAAAA,OACNyN,GAAW,CAAC,EAEhB,OAAIiU,EAAAA,EAAAA,KAA0BhmB,IAC5BmD,EAAQwvC,uBAAuB,CAAEtuC,UAC1BrE,IAGFkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B0rE,2BAA2B,GAC1BrnE,KAGLoyD,GAA0B,2BAA4B,8BAEtDzqD,EAAAA,EAAAA,IAAiB,8BAA+B,CAAChM,EAAQmD,EAAS4O,KAChE,MAAM,MACJ1N,GAAQC,EAAAA,EAAAA,OACNyN,GAAW,CAAC,EAEhB,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B2rE,wBAAyB,CACvB9tB,QAAQ,IAETx5C,KAGLoyD,GAA0B,+BAAgC,4BAE1DzqD,EAAAA,EAAAA,IAAiB,wCAAyC,CAAChM,EAAQmD,EAAS4O,KAC1E,MAAM,OACJ3Q,EAAM,UACN8F,EAAS,MACT7C,GAAQC,EAAAA,EAAAA,OACNyN,GAAW,CAAC,EAEV/Q,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAClD,IAAKlG,EAAS,OAEd,MAAM4qE,GAAcC,EAAAA,GAAAA,IAAqC7qE,GACzD,OAAK4qE,GAEEE,EAAAA,EAAAA,KAA0B9rE,EAAQ4rE,EAAavnE,QAFtD,KAKF2H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,mBACJu5D,EAAkB,eAClBngB,EAAc,WACdogB,EAAU,MACV9tD,EAAK,oBACLsuD,EAAmB,SACnB7uD,EAAWC,EAAAA,IAAmB,MAC9B9Y,GAAQC,EAAAA,EAAAA,OACNyN,GAAW,CAAC,EAEVi6D,EAAchsE,EAAOsd,OAAOC,QAElC,MAAKwuD,GAAuBC,GAAevuD,GAASA,EAAMC,eAAiBsuD,EAAY3uD,QAmBvF,OALArd,GAASisE,EAAAA,EAAAA,KAAiBjsE,EAAQqE,GAGlClB,EAAQ0lB,kBAED3a,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BknE,kBAAmB,CACjBoE,qBACAngB,iBACAogB,aACA9tD,QACAP,aAED7Y,GA1BDlB,EAAQwM,iBAAiB,CACvB3O,QAAS+0B,EAAAA,GAA0B,wBACnCjkB,WAAYikB,EAAAA,GAA0B,6BACtCzrB,OAAQ,CACNA,OAAQ,wBACRyH,QAAS,CAAE0L,QAAOsuD,qBAAqB,EAAM1nE,UAE/C0c,KAAM,OACN1c,YAqBNoyD,GAA0B,yBAA0B,sBAEpDzqD,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAE5CsnC,GAAe+D,EAAAA,EAAAA,KAAmBp9C,EAAQqE,GAChD,IAAI+0C,EAASC,GAAcD,OAK3B,OAJKA,GAAqB,YAAXA,IACbA,EAAS,cAGJlrC,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bq5C,aAAc,CACZD,WAED/0C,MAGL2H,EAAAA,EAAAA,IAAiB,4BAA6B,CAAChM,EAAQmD,EAAS4O,KAC9D,MAAM,YAAE65D,EAAW,MAAEvnE,GAAQC,EAAAA,EAAAA,OAAsByN,EACnD,OAAO+5D,EAAAA,EAAAA,KAA0B9rE,EAAQ4rE,EAAavnE,MAGxD2H,EAAAA,EAAAA,IAAiB,+BAAgC,CAAChM,EAAQmD,EAAS4O,KACjE,MAAM,OACJ3Q,EAAM,UACN8F,EAAS,MACT7C,GAAQC,EAAAA,EAAAA,OACNyN,GAAW,CAAC,EAEV/Q,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAClD,IAAKlG,EAAS,OAEd,MAAM4qE,GAAcM,EAAAA,GAAAA,IAA4BlrE,GAChD,OAAK4qE,GAEEE,EAAAA,EAAAA,KAA0B9rE,EAAQ4rE,EAAavnE,QAFtD,IAKFoyD,GAA0B,6BAA8B,0BAExDzqD,EAAAA,EAAAA,IAAiB,6BAA8B,CAAChM,EAAQmD,EAAS4O,KAC/D,MAAM,aAAEo6D,EAAY,MAAE9nE,GAAQC,EAAAA,EAAAA,OAAsByN,EAEpD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BosE,uBAAwB,CACtBD,iBAED9nE,KAGLoyD,GAA0B,8BAA+B,0BAEzDA,GAA0B,iBAAkB,cAE5CzqD,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B6+C,eAAgB,CAAEhB,QAAQ,IACzBx5C,MAGL2H,EAAAA,EAAAA,IAAiB,+BAAgCyI,MAAOzU,EAAQmD,EAAS4O,KACvE,MAAM,OACJ3Q,EAAM,UAAE8F,EAAS,MAAE7C,GAAQC,EAAAA,EAAAA,OACzByN,EAGJ,KADavK,EAAAA,EAAAA,KAAWxH,EAAQoB,GACrB,aAELirE,EAAAA,EAAAA,MAAoBplE,YAAY,CAAE7F,SAAQ8F,cAEhDlH,GAASoL,EAAAA,EAAAA,MACT,MAAMpK,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAElD,IAAKlG,IAAYA,EAAQ4E,QAAQ0E,OAAQ,OAEzC,MAAMA,EAAStJ,EAAQ4E,QAAQ0E,OAC/B,GAAoB,aAAhBA,EAAOlI,MAAuC,mBAAhBkI,EAAOlI,KAA2B,OAEpE,MAAMkqE,EAA2B,aAAhBhiE,EAAOlI,KAAsBkI,OAASf,EACjDgjE,EAA6B,mBAAhBjiE,EAAOlI,KAA4BkI,OAASf,EAEzDijE,EAAiBliE,EAAOtI,SAAWhB,EAAQqC,WAAarC,EAAQI,OAASpB,EAAOiC,eAEhFghD,EAAmC34C,EAAOmiE,QAC5C,CAAErqE,KAAM,OAAQhB,SAAQqrE,QAASniE,EAAOmiE,SACxC,CAAErqE,KAAM,OAAQ8E,aAEdwlE,EAASpiE,EAAOoiE,SAAW1rE,EAAQqC,WAAarD,EAAOiC,cAAiBjB,EAAQI,QAEhFk4C,EAAyB,CAC7BnkC,KAAMnU,EAAQmU,KACdmkC,KAAMhvC,EAAOgvC,KACbt4C,QAASsrE,GAAUtrE,QACnB2rE,eAAgBL,GAAUK,eAC1BC,aAAcN,GAAUM,aACxBvlB,WAAY/8C,EAAOuiE,QACnBH,SACAxlE,UAAWlG,EAAQsB,GACnBwqE,YAAaR,GAAUQ,YACvBC,aAAcT,GAAUS,aACxBC,WAAYV,GAAUU,WACtBC,wBAAyBX,GAAUW,wBACnChqB,YACAiqB,YAAaX,GAAYW,YACzBT,QAASniE,EAAOmiE,QAChB9pB,cAAe4pB,GAAY5pB,eAG7Bx/C,EAAQ4/C,kBAAkB,CAAE/gD,OAAQwqE,EAAgBlzB,OAAMj1C,aAG5D2H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,KACJunC,EAAI,MAAEj1C,GAAQC,EAAAA,EAAAA,OACZyN,EAEE/P,EAAS,WAAY+P,EAAUA,EAAQ/P,YAASuH,EAChDm5C,EAAc,gBAAiB3wC,EAAUA,EAAQ2wC,iBAAcn5C,EAErE,OAAO2E,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BmtE,cAAe,CACbnrE,SACAs3C,OACAoJ,gBAEDr+C,MAGL2H,EAAAA,EAAAA,IAAiB,mCAAoC,CAAChM,EAAQmD,EAAS4O,KACrE,MAAM,KACJunC,EAAI,OAAEt3C,EAAM,MAAEqC,GAAQC,EAAAA,EAAAA,OACpByN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BotE,6BAA8B,CAC5BprE,SACAs3C,SAEDj1C,MAGL2H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,KAAEunC,EAAI,MAAEj1C,GAAQC,EAAAA,EAAAA,OAAsByN,EAEtC2sC,GAAYx+C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOq6C,UAKhD,OAHAv7C,EAAQkqE,wBAAwB,CAAEhpE,UAClClB,EAAQo/C,mBAAmB,CAAEl+C,UAEzBq6C,GACKxwC,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B0+C,UAAW,IACNA,EACHD,mBAAoBnF,IAErBj1C,IAGLlB,EAAQmqE,cAAc,CACpB9uB,UAAWx+C,EAAOiC,cAClBw8C,mBAAoBnF,EACpBj1C,UAGKrE,MAGTgM,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD5O,EAAQoqE,iBAAiB,CAAElpE,UAE3B,MAAMq6C,GAAYx+C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOq6C,UAEhD,OAAIA,GACKxwC,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B0+C,UAAW,IACNA,EACHD,wBAAoBl1C,IAErBlF,GAGErE,KAGTgM,EAAAA,EAAAA,IAAiB,yBAA0ByI,MAAOzU,EAAQmD,EAAS4O,KACjE,MAAM,KAAEunC,EAAI,MAAEj1C,GAAQC,EAAAA,EAAAA,OAAsByN,EAEtC6G,QAAevD,EAAAA,EAAAA,IAAQ,+BAAgC,CAAEqkC,KAAMJ,EAAKI,OACrE9gC,IAEL5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BwtE,mBAAoB,CAClBC,UAAW70D,EACX0gC,SAEDj1C,IACH2G,EAAAA,EAAAA,IAAUhL,MAGZy2D,GAA0B,qBAAsB,iBAEhDA,GAA0B,0BAA2B,sBAErDA,GAA0B,oCAAqC,gCAE/DA,GAA0B,wBAAyB,qBAEnDzqD,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,KAAEunC,EAAI,MAAEj1C,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAExD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BgjD,kBAAmB,CACjB1J,SAEDj1C,KAGLoyD,GAA0B,yBAA0B,sBAEpDzqD,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,YAAEi4B,EAAW,MAAE3lC,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAE/D,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B0tE,oBAAqB,CACnB1jC,gBAED3lC,MAGL2H,EAAAA,EAAAA,IAAiB,2BAA4B,CAAChM,EAAQmD,EAAS4O,KAC7D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B0tE,yBAAqBnkE,GACpBlF,MAGL2H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5C9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAClC2+C,EAAoB/0C,GAAU+0C,kBACpC,GAAKA,EAEL,OAAO90C,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BgjD,kBAAmB,IACdA,EACH9M,cAAU3sC,IAEXlF,MAGL2H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAChM,EAAQmD,EAAS4O,KAC1D,MAAM,KAAEunC,EAAI,MAAEj1C,GAAQC,EAAAA,EAAAA,OAAsByN,EAE5C,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B2tE,kBAAmB,CACjBr0B,SAEDj1C,KAGLoyD,GAA0B,yBAA0B,sBAEpDzqD,EAAAA,EAAAA,IAAiB,+BAAgC,CAAChM,EAAQmD,EAAS4O,KACjE,MAAM,OAAE/P,EAAM,aAAEskD,EAAY,MAAEjiD,GAAQC,EAAAA,EAAAA,OAAsByN,EACtD9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExCrE,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BinD,WAAY,IACPh5C,EAASg5C,WACZ2mB,yBAA0B,IACrB3/D,EAASg5C,WAAW2mB,yBACvB,CAAC5rE,GAASskD,KAGbjiD,IACH2G,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQwjD,mBAAmB,CACzB3kD,SAAQqjD,eAAe,EAAMhhD,MAAO4J,EAAS3L,QAIjD0J,EAAAA,EAAAA,IAAiB,8BAA+B,CAAChM,EAAQmD,EAAS4O,KAChE,MAAM,OAAE/P,EAAM,MAAEqC,GAAQC,EAAAA,EAAAA,OAAsByN,EACxC9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExCrE,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BinD,WAAY,IACPh5C,EAASg5C,WACZ2mB,yBAA0B,IACrB3/D,EAASg5C,WAAW2mB,yBACvB,CAAC5rE,QAASuH,KAGblF,IACH2G,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQwjD,mBAAmB,CACzB3kD,SAAQqjD,eAAe,EAAMhhD,MAAO4J,EAAS3L,QChcjD0J,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,OACJ3Q,EAAM,MACNiD,GAAQC,EAAAA,EAAAA,OACNyN,EAEJ,OAAI3Q,GACK8M,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B6tE,eAAgB,CACdzsE,SACA8F,eAAWqC,EACX+qD,cAAU/qD,IAEXlF,IAGE6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B6tE,oBAAgBtkE,GACflF,MAGL2H,EAAAA,EAAAA,IAAiB,4BAA6B,CAAChM,EAAQmD,EAAS4O,KAC9D,MAAM,OACJ3Q,EAAM,UACN8F,EAAS,SACTotD,EAAQ,MACRjwD,GAAQC,EAAAA,EAAAA,OACNyN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B6tE,eAAgB,CACdzsE,SACA8F,YACAotD,aAEDjwD,MAGL2H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,OACJ/P,EAAM,QACN2K,EAAO,SACP2nD,EAAQ,cACRwZ,EAAa,MACbzpE,GAAQC,EAAAA,EAAAA,OACNyN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B6tE,eAAgB,CACdvxD,YAAata,EACb2K,UACAmhE,gBACAxZ,aAEDjwD,MAGL2H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,SACJuiD,EAAQ,OACRlzD,EAAM,MACNiD,GAAQC,EAAAA,EAAAA,OACNyN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B6tE,eAAgB,CACdvZ,WACAlzD,SACA2sE,cAAc,IAEf1pE,MAGL2H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5C9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B6tE,eAAgB,IACX5/D,EAAS4/D,eACZ3mE,eAAWqC,EACX+qD,cAAU/qD,EACVoD,aAASpD,EACT+S,iBAAa/S,EACbwkE,kBAAcxkE,IAEflF,MAGL2H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,OAAE3Q,EAAM,UAAE8F,GAAc6K,EACxB/Q,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,GAClD,IAAKlG,EACH,OAGF,MAAM,UAAEM,GAAcN,EAEtB,IAAKM,EACH,OAGF,MAAM0sE,EAAiB1sE,EAAUC,QAAQwN,IAAK5M,IAC5C,GAAIA,EAASuB,YAAa,CACxB,IAAKvB,EAAS2W,MAAO,OACrB,MAAO,IACF3W,EACHuB,iBAAa6F,EACb0kE,8BAA0B1kE,EAC1B2kE,YAAa/rE,EAAS8rE,yBAE1B,CACA,OAAO9rE,IACNL,OAAOyU,SAUV,OARAxO,OAAOC,OAAOhI,EAAOiI,SAClB/F,QAAQ,EAAGI,GAAI+B,MACdlB,EAAQ+gB,oBAAoB,CAC1BzU,SAASvL,EAAAA,EAAAA,IAAclD,GACvBqD,aAIC1B,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ8F,EAAW,CAClD5F,UAAW,IACNA,EACHC,QAASysE,QCjHfhiE,EAAAA,EAAAA,IAAiB,kBAAmByI,MAAOzU,EAAQmD,EAAS4O,KAC1D,MAAM,OACJ/P,EAAM,QAAE2K,EAAO,aAAEwhE,EAAY,cAAEC,EAAa,UAAExqE,EAAS,UAAEyqE,EAAS,OAAE3V,EAAM,MAAEr0D,GAAQC,EAAAA,EAAAA,OAClFyN,EAEEsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EACH,OAGF,MAAMpM,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAClCmqD,GAAcQ,EAAAA,EAAAA,KAAkBhvD,EAAQgC,GAE9C,GAAI2K,KAAa6hD,IAAgBA,EAAYvlD,KAAK0D,IAAW,CAC3D,MAAMiM,QAAevD,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEgF,OAAMrQ,IAAK,CAAC2C,KAEpE,IAAKiM,EACH,OAEF5Y,GAASoL,EAAAA,EAAAA,MACTpL,GAASkvD,EAAAA,EAAAA,KAAkBlvD,EAAQgC,EAAQ4W,EAAOu1C,QACpD,CAEA,MAAMmgB,EAAYrgE,EAASsgE,YAAYD,YAClCE,EAAAA,EAAAA,KAAyBxuE,EAAQgC,EAAQ2K,EAASyhE,EAAeD,EAAcvqE,EAAWyqE,GAE/FruE,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BuuE,YAAa,IACRtgE,EAASsgE,YACZvsE,SACA2K,QAASA,IAAW8hE,EAAAA,EAAAA,KAA6BzuE,EAAQgC,KAAW0sE,EAAAA,EAAAA,KAAuB1uE,EAAQgC,GACnGmsE,eACAvqE,YACAyqE,YACAD,gBACAO,eAAWplE,EACXmvD,SACA4V,cAEDjqE,IACH2G,EAAAA,EAAAA,IAAUhL,MAGZgM,EAAAA,EAAAA,IAAiB,4BAA6ByI,MAAOzU,EAAQmD,EAAS4O,KACpE,MAAM,SACJ8gB,EAAQ,QAAElmB,EAAO,OAAE+rD,EAAM,MAAEr0D,GAAQC,EAAAA,EAAAA,OACjCyN,EAEE3O,QAAaiyC,EAAAA,EAAAA,IAAoBr1C,EAAQ6yB,GAE1CzvB,GAILD,EAAQyrE,gBAAgB,CACtB5sE,OAAQoB,EAAKd,GACbqK,UACAwhE,cAAc,EACdC,eAAe,EACf1V,SACAr0D,aAIJ2H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAChM,EAAQmD,EAAS4O,KACrD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,GAC5C,QACJ8mD,EAAO,cAAEgW,EAAa,sBAAEC,EAAqB,QAAEniE,IAC7CzM,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOkqE,YAElC,OAAK5hE,EAEL3M,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BuuE,YAAa,CACX1V,UACAgW,gBACAC,wBACAC,wBAAoBxlE,EACpB+kE,eAAW/kE,IAEZlF,GAVkBrE,KAevBgM,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,QACJ8mD,EAAO,MACPx0D,GAAQC,EAAAA,EAAAA,OACNyN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BuuE,YAAa,KACRruE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOkqE,YACjC1V,YAEDx0D,MAGL2H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,QAAEi9D,EAAO,WAAE14C,EAAU,MAAEjyB,GAAQC,EAAAA,EAAAA,OAAsByN,EAErDsiD,EAAar0D,EAAOmuD,QAAQ8gB,eAAe34C,EAAa,WAAa,UAC3E,OAAK+9B,GAAYxyD,QAIVqM,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BuuE,YAAa,KACRruE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOkqE,YACjC,CAACj4C,EAAa,wBAA0B,iBAAkB04C,IAE3D3qE,GARMrE,KAWXgM,EAAAA,EAAAA,IAAiB,oBAAqB,CAAChM,EAAQmD,EAAS4O,KACtD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5C9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,IAClC,OACJrC,EAAM,QAAE2K,EAAO,aAAEwhE,EAAY,cAAEC,EAAa,UAAEE,GAC5CrgE,EAASsgE,YAEb,GAAIH,IAAkBE,EAEpB,YADAnrE,EAAQsoB,iBAAiB,CAAEpnB,UAI7B,IAAKrC,IAAW2K,EACd,OAGF,MAAM0N,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAEhC,KADoBgtD,EAAAA,EAAAA,KAAkBhvD,EAAQgC,KACzBqY,EACnB,OAGF,MAAQie,QAAS22C,EAAc,iBAAEC,GAAqBZ,EAEhDa,GADeD,EAAiBltE,IAAW,IACV+7B,QAAQpxB,GAC/C,IAAIyiE,EACAC,EAEJ,GAAIF,EAAoB,EACtBC,EAAqBD,EAAoB,EACzCE,EAAiBrtE,MACZ,CACL,MAAMstE,EAAsBL,EAAelxC,QAAQ/7B,GAAU,EAC7D,GAAImsE,GAAgBmB,EAAsB,EACxC,OAGFD,EAAiBJ,EAAeK,GAChCF,GAAsBF,IAAmBG,IAAiBxtE,QAAU,GAAK,CAC3E,CAEA,MAAM0tE,EAAkBL,IAAmBG,KAAkBD,GAC7D,OAAKG,GAIErhE,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BuuE,YAAa,IACRtgE,EAASsgE,YACZvsE,OAAQqtE,EACR1iE,QAAS4iE,IAEVlrE,QAVH,KAaF2H,EAAAA,EAAAA,IAAiB,gBAAiB,CAAChM,EAAQmD,EAAS4O,KAClD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5C9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,IAClC,OACJrC,EAAM,QAAE2K,EAAO,aAAEwhE,EAAY,cAAEC,EAAa,UAAEE,GAC5CrgE,EAASsgE,YACb,GAAIH,IAAkBE,EAEpB,YADAnrE,EAAQsoB,iBAAiB,CAAEpnB,UAI7B,IAAKrC,IAAW2K,EACd,OAGF,MAAM0N,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAEhC,KADoBgtD,EAAAA,EAAAA,KAAkBhvD,EAAQgC,KACzBqY,EACnB,OAGF,MAAQie,QAAS22C,EAAc,iBAAEC,GAAqBZ,EAChDkB,EAAeN,EAAiBltE,IAAW,GAC3CmtE,EAAoBK,EAAazxC,QAAQpxB,GAC/C,IAAI8iE,EACAC,EAEJ,GAAIP,EAAoBK,EAAa3tE,OAAS,EAC5C4tE,EAAiBN,EAAoB,EACrCO,EAAa1tE,MACR,CACL,MAAM2tE,EAAkBV,EAAelxC,QAAQ/7B,GAAU,EACzD,GAAImsE,GAAgBwB,EAAkBV,EAAeptE,OAAS,EAE5D,YADAsB,EAAQsoB,iBAAiB,CAAEpnB,UAI7BqrE,EAAaT,EAAeU,GAC5BF,EAAiB,CACnB,CAEA,MAAMG,EAAcV,IAAmBQ,KAAcD,GACrD,OAAKG,GAIE1hE,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BuuE,YAAa,IACRtgE,EAASsgE,YACZvsE,OAAQ0tE,EACR/iE,QAASijE,IAEVvrE,QAVH,KAaF2H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAChM,EAAQmD,EAAS4O,KACvD,MAAM,QAAEpF,EAAO,MAAEtI,GAAQC,EAAAA,EAAAA,OAAsByN,EACzC9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BuuE,YAAa,IACRtgE,EAASsgE,YACZI,UAAW,CACThiE,UACAub,WAAY,GACZyO,WAAW,KAGdtyB,MAGL2H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5C9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BuuE,aAAar+D,EAAAA,EAAAA,IAAKjC,EAASsgE,YAAa,CAAC,eACxClqE,MAGL2H,EAAAA,EAAAA,IAAiB,gBAAiByI,MAAOzU,EAAQmD,EAAS4O,KACxD,MAAM,OAAE/P,EAAM,QAAE2K,EAAO,MAAEtI,GAAQC,EAAAA,EAAAA,OAAsByN,EAEjDsI,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EACH,OAGF,MAAM8f,QAAa9kB,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEgF,OAAM1N,YAChDwtB,KAIL0U,EAAAA,EAAAA,IAAoB1U,GACpBh3B,EAAQwM,iBAAiB,CACvB3O,QAAS+0B,EAAAA,GAA0B,cACnC1xB,cAIJ2H,EAAAA,EAAAA,IAAiB,cAAeyI,MAAOzU,EAAQmD,EAAS4O,KACtD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAChC,QAAEpF,EAAS3K,OAAQsa,IAAgBC,EAAAA,EAAAA,KAAyBvc,EAAQqE,GAG1E,IAFqBkS,QAAQ5J,GAAW2P,GAGtC,OAGF,QAA4B/S,UADM6Q,GAAuBpa,EAAQsc,GAC1B,OAEvC,MAAM,IAAEmE,EAAG,QAAEza,EAAO,WAAEZ,GAAe2M,EAErC,IAAI/Q,EAEFA,EADEyf,EACQ,wBACDza,EACC,4BACDZ,EACC,6BAEA,4BAGZjC,EAAQwM,iBAAiB,CACvB3O,QAAS+0B,EAAAA,GAA0B/0B,GACnC8Q,WAAYikB,EAAAA,GAA0B,yBACtCzrB,OAAQ,CAAC,CACPA,OAAQ,mBACRyH,aAASxI,GACR,CACDe,OAAQ,WACRyH,QAAS,CAAEzP,GAAIga,KAEjBjY,aAIJ2H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAChM,EAAQmD,EAAS4O,KAC3D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5C9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BuuE,YAAa,IACRtgE,EAASsgE,YACZsB,oBAAoB,IAErBxrE,MAGL2H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAChM,EAAQmD,EAAS4O,KAC5D,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAC5C9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BuuE,YAAa,IACRtgE,EAASsgE,YACZsB,oBAAoB,IAErBxrE,MAGL2H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAChM,EAAQmD,EAAS4O,KACvD,MAAM,OAAE8rC,EAAM,MAAEx5C,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EACpD9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO6J,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BuuE,YAAa,IACRtgE,EAASsgE,YACZuB,mBAAoBjyB,IAErBx5C,MAGL2H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,UAAE4kB,EAAS,MAAEtyB,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAEvD9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAK4J,EAASsgE,YAAYI,WAEnBzgE,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BuuE,YAAa,IACRtgE,EAASsgE,YACZI,UAAW,IACN1gE,EAASsgE,YAAYI,UACxB3/C,WAAOzlB,EACPotB,YACAzO,WAAY,MAGf7jB,GAZyCrE,KAe9CgM,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,OACJ0P,EAAM,cAAEsuD,EAAa,kBAAEC,EAAiB,MAAE3rE,GAAQC,EAAAA,EAAAA,OAChDyN,EAEE9D,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,IAClC,UAAEsqE,GAAc1gE,EAASsgE,YAC/B,IAAKI,GAAWhiE,QAAS,OAEzB,MAAMsjE,EAAetB,GAAW3/C,OAAOjgB,IAAKmhE,GACtCA,EAAKluE,SAAWyf,EACX,IACFyuD,EACHH,cAAeA,QAAiBxmE,EAChCymE,kBAAmBA,QAAqBzmE,GAIrC2mE,GAGT,OAAOhiE,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BuuE,YAAa,IACRtgE,EAASsgE,YACZI,UAAW,IACNA,EACH3/C,MAAOihD,KAGV5rE,MAGL2H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B8+C,gBAAYv1C,GACXlF,MAGL2H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAChM,EAAQmD,EAAS4O,KACzD,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bm/C,qBAAiB51C,GAChBlF,MCxaL2H,EAAAA,EAAAA,IAAiB,oCAAqC,CAAChM,EAAQmD,EAAS4O,KACtE,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,MAAiB,OAAElD,GAAW2Q,GAAW,CAAC,EAE1D,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BmwE,8BAA+B,CAC7B/uE,WAEDiD,MAGL2H,EAAAA,EAAAA,IAAiB,qCAAsC,CAAChM,EAAQmD,EAAS4O,KACvE,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5BmwE,mCAA+B5mE,GAC9BlF,MAGL2H,EAAAA,EAAAA,IAAiB,qCAAsC,CAAChM,EAAQmD,EAAS4O,KACvE,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAOk8C,EAAAA,EAAAA,KAA8BjuD,EAAQ,CAAEk2C,cAAU3sC,GAAalF,MAGxE2H,EAAAA,EAAAA,IAAiB,8BAA+B,CAAChM,EAAQmD,EAAS4O,KAChE,MAAM,MAAE1N,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAelO,EAAQ,CAC5B2/C,4BAAwBp2C,GACvBlF,MC9BL2H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAChM,EAAQmD,EAAS4O,KACpD,MAAM,MAAEhJ,EAAK,MAAE1E,GAAQC,EAAAA,EAAAA,OAAsByN,GAAW,CAAC,EACnDq+D,OAA6B7mE,IAAVR,EAAsBA,IAAS7I,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO+rE,iBAKtF,OAHApwE,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAAEowE,oBAAoB/rE,GAC7C,IAAKrE,EAAQqwE,qBAAsBD,MAK9CpkE,EAAAA,EAAAA,IAAiB,iBAAkB,CAAChM,EAAQmD,EAAS4O,KACnD,MAAM,OAAE3Q,EAAM,UAAE8F,GAAc6K,EACxB9N,EAAa,GAAG7C,KAAU8F,IAE1BopE,EAAoBtwE,EAAOuwE,UAAUrhE,WAC3C,OAAIohE,EAAkB7rE,SAASR,GACtBjE,EAGF,IACFA,EACHuwE,UAAW,IACNvwE,EAAOuwE,UACVrhE,WAAY,IAAIohE,EAAmBrsE,QAKzC+H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxD,MAAM,OAAE3Q,EAAM,UAAE8F,GAAc6K,EACxB9N,EAAa,GAAG7C,KAAU8F,IAEhC,MAAO,IACFlH,EACHuwE,UAAW,IACNvwE,EAAOuwE,UACVrhE,WAAYlP,EAAOuwE,UAAUrhE,WAAWpN,OAAOQ,GAAMA,IAAO2B,O,QCElE,MACMusE,GAA8B,IAAItmE,IAAmB,CACzD,aAAc,UAAW,uBAAwB,WAAY,qBAAsB,eAAgB,gBACnG,UAGF8B,EAAAA,EAAAA,IAAiB,YAAa,CAAChM,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAMw3B,GAAY7yB,EAAAA,EAAAA,KAAWxH,EAAQ6C,EAAOP,KACpC+G,QAASonE,EAAW,wBAAEC,GAA4Br2C,GAAa,CAAC,EAEpEx3B,EAAOO,KAAKstE,yBAA2BA,GACtC7tE,EAAOO,KAAKstE,wBAA0BA,IACzC7tE,EAAS,IACJA,EACHO,MAAM8M,EAAAA,EAAAA,IAAKrN,EAAOO,KAAM,CAAC,6BAI7BpD,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQ6C,EAAOP,GAAIO,EAAOO,MAE1Ci3B,GAAWs2C,mBAAqB9tE,EAAOO,KAAKutE,mBAC9C3wE,GAAS2xD,EAAAA,EAAAA,KAAwB3xD,EAAQ6C,EAAOP,GAAIO,EAAOO,KAAKutE,mBAAoB,KAGtF3lE,EAAAA,EAAAA,IAAUhL,GAEV,MAAM4wE,GAAcppE,EAAAA,EAAAA,KAAWxH,EAAQ6C,EAAOP,IA2B9C,GA1BKO,EAAOguE,oBAAsBpjE,EAAAA,EAAAA,KAAmBzN,EAAQ6C,EAAOP,KAC9DsuE,GAAapjE,aAEjBrK,EAAQuK,eAGN7K,EAAOO,KAAKd,KACdwuE,EAAAA,EAAAA,IAA0B,CACxB1vE,OAAQyB,EAAOO,KAAKd,GACpBiO,uBAAwB1N,EAAOO,KAAKmN,yBAIxCxI,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAQ,EAAGI,GAAI+B,MAC3C,MAAQjD,OAAQyM,IAAkBf,EAAAA,EAAAA,KAAyB9M,EAAQqE,IAAU,CAAC,EACxE0sE,EAAaluE,EAEfgL,IAAkBkjE,EAAWzuE,IAC5B,YAAayuE,EAAW3tE,MAAQqtE,IAAgBM,EAAW3tE,KAAKiG,UAC/DonE,GACFttE,EAAQmwD,gBAAgB,CAAEjvD,UAE5BlB,EAAQkhB,SAAS,CAAE/hB,GAAIuL,EAAexJ,aAItCg2B,EAAW,CACb,MAAM02C,EAAaluE,EAAOO,KACH2E,OAAO8G,KAAKkiE,GAChCjvE,OAAQ8N,GAAQyqB,EAAUzqB,KAASmhE,EAAWnhE,IAC/B+B,KAAM/B,GAAQ4gE,GAA4B7lE,IAAIiF,KAC9DzM,EAAQ6tE,mBAAmB,CAAEhvE,OAAQa,EAAOP,IAEhD,CAEA,MACF,CAEA,IAAK,iBAAkB,CACrB,MAAMkgC,GAAWyuC,EAAAA,EAAAA,KAAmBjxE,EAAQ6C,EAAOP,IAC7Cc,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQ6C,EAAOP,IAWvC,GATAtC,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQ6C,EAAOP,GAAI,CAAEkL,aAAa,KACtDxC,EAAAA,EAAAA,IAAUhL,GAENoD,GACFD,EAAQqH,kBAAkB,CAAEpJ,OAAQgC,EAAKd,KAG3Ca,EAAQoO,aAAa,CAAEnQ,OAAQyB,EAAOP,GAAIyG,OAAO,KAE5Cy5B,EACH,OAOF,OAJAxiC,GAASoL,EAAAA,EAAAA,MACTpL,GAASkxE,EAAAA,EAAAA,KAAelxE,EAAQwiC,EAAU,CAAC3/B,EAAOP,UAClD0I,EAAAA,EAAAA,IAAUhL,EAGZ,CAEA,IAAK,kBAAmB,CACtBA,GAASmxE,EAAAA,EAAAA,KAAUnxE,EAAQ6C,EAAOP,IAClC,MAAMc,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQ6C,EAAOP,IACvC,GAAIc,IAAQqgB,EAAAA,EAAAA,IAAcrgB,GAAO,CAC/B,MAAM8O,GAAerI,EAAAA,EAAAA,KAAmB7J,EAAQ6C,EAAOP,IACvD,GAAI4P,EAAc,CAChB,MAAMk/D,EAAkBrpE,OAAO8G,KAAKqD,GAAcnD,IAAIlE,QAAQ/I,OAAO+D,EAAAA,IACrE7F,GAASsL,EAAAA,EAAAA,KAAmBtL,EAAQoD,EAAKd,GAAI8uE,EAC/C,CACF,CAEA,OAAOpxE,CACT,CAEA,IAAK,kBACH,OAAO8C,EAAAA,EAAAA,KAAW9C,EAAQ6C,EAAOP,GAAIO,EAAOO,MAG9C,IAAK,yBAA0B,CAC7B,MAAM,GAAEd,EAAE,SAAEuF,EAAWD,EAAAA,GAAc,aAAEypE,GAAiBxuE,EAaxD,OAZA7C,GAASyI,EAAAA,EAAAA,KAAmBzI,EAAQsC,EAAIuF,EAAU,eAAgBwpE,IAClErmE,EAAAA,EAAAA,IAAUhL,QAEVmL,WAAW,KACTnL,GAASoL,EAAAA,EAAAA,MACT,MAAMkmE,GAAsBC,EAAAA,EAAAA,KAAkBvxE,EAAQsC,EAAIuF,EAAU,gBAChEwpE,GAAgBC,GAAuBD,EAAaryC,YAAcsyC,EAAoBtyC,YACxFh/B,GAASyI,EAAAA,EAAAA,KAAmBzI,EAAQsC,EAAIuF,EAAU,oBAAgB0B,IAClEyB,EAAAA,EAAAA,IAAUhL,KAvHc,IA4H9B,CAEA,IAAK,aAAc,CACjB,MAAM,QAAEgB,GAAY6B,EAGpB,IADc7B,EAAQ0R,SAAW1R,EAAQ0R,WAAa1S,EAAOiC,cAAgBjB,EAAQqC,cACvErC,EAAQwwE,gBACpB,OAGF,MAAMhlE,GAAU3G,EAAAA,EAAAA,IAAiB7E,EAAQsB,IAEnCc,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQ6C,EAAOzB,QACvC,IAAKgC,EACH,OAGF,MAAMquE,EAAal7D,QAAQ1T,EAAO7B,QAAQsB,IAAMO,EAAO7B,QAAQ0wE,kBAE/D,IAAKllE,GAAWpJ,EAAKd,KAAO8P,EAAAA,IAA+B,CACzDpS,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQ6C,EAAOzB,OAAQ,CACzCsG,YAAatE,EAAKsE,YAActE,EAAKsE,YAAc,EAAI,IAGrD+pE,IACFzxE,GAASwb,EAAAA,EAAAA,KAAkBxb,EAAQ6C,EAAOzB,OAAQgC,EAAM,CAACP,EAAO7B,QAAQsB,KAAM,IAGhF,MAAM8G,EAAQhG,EAAKiG,SAAUC,EAAAA,EAAAA,KAAuBtJ,EAAQgB,QAAyBuI,EACjFH,IACFpJ,GAASwJ,EAAAA,EAAAA,KAAYxJ,EAAQ6C,EAAOzB,OAAQgI,EAAM9G,GAAI,CACpDoF,YAAa0B,EAAM1B,YAAc0B,EAAM1B,YAAc,EAAI,IAG/D,CASA,OAPAsD,EAAAA,EAAAA,IAAUhL,QAEVmF,EAAAA,EAAAA,IAAmB,CACjB/B,OACApC,WAIJ,CAEA,IAAK,0BACL,IAAK,wBAAyB,CAC5B,MAAM,IAAEgJ,EAAG,cAAExE,GAAkB3C,EAmB/B,OAjBAmH,EAAI9H,QAASI,IACX,MAAMlB,EAAU,cAAeyB,EAASA,EAAO+P,WAAYnH,EAAAA,EAAAA,KAAsBzL,EAAQsC,GACnFc,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAE5BoE,EAAclE,WAAa8B,GAAMwB,wBAC/BD,EAAAA,EAAAA,IAA0B3E,EAAQwF,EAAclE,aACpDtB,EAAS4C,EAAsB5C,EAAQoB,EAAQ,CAC7CwD,qBAAsBjE,KAAKE,IAAIuC,EAAKwB,qBAAuB,EAAG,SAAM2E,EACpE/E,gBAAiBpB,EAAKoB,iBAAiB1C,OAAQuD,GAAMA,IAAM/C,OAI1DkD,EAAcksE,kBAAoBtuE,GAAMynB,sBAC3C7qB,GAASyqB,EAAAA,EAAAA,KAAqBzqB,EAAQoB,EAAQgC,EAAM,CAACd,IAAK,MAIvDtC,CACT,CAEA,IAAK,qBACH,OAAOkpB,EAAAA,EAAAA,KAAmBlpB,EAAQ6C,EAAOP,GAAIO,EAAO6X,UAGtD,IAAK,sBAAuB,CAC1B,MAAM,IAAE1Q,EAAG,SAAE2nE,GAAa9uE,EACpB2/B,EAAWmvC,IAAaC,EAAAA,IAAqB,WAAa,SAChE,OAAK5nE,EAKE,IACFhK,EACHgJ,MAAO,IACFhJ,EAAOgJ,MACV6oE,iBAAkB,IACb7xE,EAAOgJ,MAAM6oE,iBAChB,CAACrvC,GAAWx4B,EAAInI,OAASmI,OAAMT,MAVnCpG,EAAQ2uE,kBAAkB,CAAEtvC,aACrBxiC,EAaX,CAEA,IAAK,6BAA8B,CACjC,MAAM,IAAEgK,GAAQnH,EAEhB,MAAO,IACF7C,EACHgJ,MAAO,IACFhJ,EAAOgJ,MACV6oE,iBAAkB,IACb7xE,EAAOgJ,MAAM6oE,iBAChBr8C,MAAOxrB,EAAInI,OAASmI,OAAMT,IAIlC,CAEA,IAAK,mBAAoB,CACvB,MAAM,GAAEjH,EAAE,SAAEkO,GAAa3N,EACnB2/B,GAAWyuC,EAAAA,EAAAA,KAAmBjxE,EAAQsC,GAC5C,IAAKkgC,EACH,OAGF,MAAQ,CAACA,GAAWqvC,GAAqB7xE,EAAOgJ,MAAM6oE,iBAEtD,IAAIE,EAAsBF,GAAoB,GAC9C,GAAKrhE,GAEE,IAAKuhE,EAAoBttE,SAASnC,GAAK,CAK5C,GAAiB,WAAbkgC,GAAyBuvC,EAAoBlwE,QAAUmwE,EAAAA,IAAyB,CAClF,MAAMC,EAAUjyE,EAAOgJ,MAAMipE,QAAQ3mB,OACrCymB,EAAsBA,EAAoBjwE,OAAQowE,GAAaD,GAAWA,EAAQxtE,SAASytE,GAC7F,CAEAH,EAAsB,CAACzvE,KAAOyvE,EAChC,OAZEA,EAAsBA,EAAoBjwE,OAAQowE,GAAaA,IAAa5vE,GAc9E,MAAO,IACFtC,EACHgJ,MAAO,IACFhJ,EAAOgJ,MACV6oE,iBAAkB,IACb7xE,EAAOgJ,MAAM6oE,iBAChB,CAACrvC,GAAWuvC,EAAoBlwE,OAASkwE,OAAsBxoE,IAIvE,CAEA,IAAK,0BAA2B,CAC9B,MAAM,GAAEjH,EAAE,SAAEkO,GAAa3N,GAEjB2yB,MAAOq8C,GAAqB7xE,EAAOgJ,MAAM6oE,iBAEjD,IAAIE,EAAsBF,GAAoB,GAO9C,OANKrhE,EAEOuhE,EAAoBttE,SAASnC,KACvCyvE,EAAsB,CAACzvE,KAAOyvE,IAF9BA,EAAsBA,EAAoBjwE,OAAQowE,GAAaA,IAAa5vE,GAKvE,IACFtC,EACHgJ,MAAO,IACFhJ,EAAOgJ,MACV6oE,iBAAkB,IACb7xE,EAAOgJ,MAAM6oE,iBAChBr8C,MAAOu8C,EAAoBlwE,OAASkwE,OAAsBxoE,IAIlE,CAEA,IAAK,qBAAsB,CACzB,MAAM,GAAEjH,EAAE,SAAEqvE,GAAa9uE,EAEzB,OAAOsvE,EAAAA,EAAAA,KAAmBnyE,EAAQsC,EAAIqvE,EACxC,CAEA,IAAK,mBAAoB,CACvB,MAAM,GAAErvE,EAAE,OAAEkiB,GAAW3hB,GACfoG,KAAMmpE,EAAe,WAAE/d,GAAer0D,EAAOukB,YAE/ChS,OAAuBhJ,IAAXib,EAElBzc,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAQ,EAAGI,GAAI+B,MAC3C,MAAM4J,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GACjB0D,OAAOC,OAAOoqE,GAAiBnkE,EAASokE,iBAAmB,IAAI/vE,KAAOA,IAG3FtC,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAAEqyE,iBAAkB,GAAKhuE,MAI7D,MAAMiuE,EAAsB//D,GAAmDrC,EAAAA,EAAAA,IAAKkiE,EAAiB,CAAC9vE,IAA9D,IAAK8vE,EAAiB,CAAC9vE,GAAKkiB,GAC9D+tD,EAAiBhgE,EAEnB8hD,GAAYvyD,OAAQ0wE,GAAcA,IAAclwE,GADhD+xD,GAAY5vD,SAASnC,GAAM+xD,EAAa,IAAKA,GAAc,GAAK/xD,GAGpE,MAAO,IACFtC,EACHukB,YAAa,IACRvkB,EAAOukB,YACVtb,KAAMqpE,EACNje,WAAYke,EACZpyC,SAASjwB,EAAAA,EAAAA,IAAKlQ,EAAOukB,YAAY4b,QAAS,CAAC79B,KAGjD,CAEA,IAAK,yBAA0B,CAC7B,MAAM,WAAE+xD,GAAexxD,EAEvB,MAAO,IACF7C,EACHukB,YAAa,IACRvkB,EAAOukB,YACV8vC,cAGN,CAEA,IAAK,+BAAgC,CACnC,MAAM,QAAE/vC,GAAYzhB,EAEpB,MAAO,IACF7C,EACHukB,YAAa,IACRvkB,EAAOukB,YACVkuD,YAAanuD,GAGnB,CAEA,IAAK,oBAAqB,CACxB,MAAMouD,GAAqBtxD,EAAAA,EAAAA,KAAmBphB,EAAQ6C,EAAOP,KACvD,gBAAEqwE,EAAe,YAAEC,EAAW,gBAAEC,GAAoBhwE,EAC1D,IAAK6vE,EACH,OAGF,IAAII,GAAe,EACfC,EAAUL,GAAoBK,QAC9B,IAAIL,EAAmBK,SACvB,GAEJ,GAAIJ,EACFI,EAAUJ,EACVG,GAAe,OACV,GAAIF,EAENG,EAAQlxE,QACLkxE,EAAQphE,KAAMmF,GAAMA,EAAE2K,SAAWmxD,EAAYnxD,UAEjDsxD,EAAQrnE,KAAKknE,GACbE,GAAe,QAEZ,GAAIC,EAAQlxE,QAAUgxE,EAAiB,CAC5C,MAAMG,EAAcD,EAAQl5D,UAAW/C,GAAMA,EAAE2K,SAAWoxD,GACtDG,GAAe,IACjBD,EAAQz7D,MAAM07D,EAAa,GAC3BF,GAAe,EAEnB,CAEA,GAAIA,EAAc,CAChB,MAAMG,EAAeF,EAAQjxE,OAAO,EAAGoxE,UAASC,aAAcD,GAAWC,GASzE,OANAnzE,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQ6C,EAAOP,GAAI,CAAE8wE,aAAcL,EAAQlxE,SAC/D7B,GAASkpB,EAAAA,EAAAA,KAAmBlpB,EAAQ6C,EAAOP,GAAI,CAC7CywE,UACAM,kBAAkBhkE,EAAAA,EAAAA,IAAqB4jE,EAAc,WAIzD,CAEA,MACF,CAEA,IAAK,eAAgB,CACnB,MAAM,OACJ7xE,EAAM,SAAEyG,EAAQ,MAAE8M,GAChB9R,EAEJ,IADa7C,EAAOgJ,MAAMC,KAAK7H,GAE7B,OAKF,OAFApB,GAASyI,EAAAA,EAAAA,KAAmBzI,EAAQoB,EAAQyG,GAAYD,EAAAA,GAAgB,QAAS+M,GACjF3U,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAEgU,UAAWT,GAAOQ,MAE1D,CAEA,IAAK,4BAA6B,CAChC,MAAM,OAAE/T,EAAM,gBAAEmgC,EAAe,mBAAED,GAAuBz+B,EAExD,IADa7C,EAAOgJ,MAAMC,KAAK7H,GAE7B,OAUF,OAPApB,GAASkpB,EAAAA,EAAAA,KAAmBlpB,EAAQoB,EAAQ,CAC1CmgC,kBACAD,wBAEFt2B,EAAAA,EAAAA,IAAUhL,QAEVmD,EAAQmwE,qBAAqB,CAAElyE,UAEjC,CAEA,IAAK,oBAAqB,CACxB,MAAM,OAAEA,EAAM,QAAE2J,EAAO,SAAEyF,GAAa3N,EAGtC,IADa7C,EAAOgJ,MAAMC,KAAK7H,GAE7B,OAQF,OALApB,GAASwJ,EAAAA,EAAAA,KAAYxJ,EAAQoB,EAAQ2J,EAAS,CAC5CyF,kBAEFxF,EAAAA,EAAAA,IAAUhL,EAGZ,CAEA,IAAK,0BAA2B,CAC9B,MAAM,OAAEoB,EAAM,MAAEq/D,GAAU59D,EAG1B,IADa7C,EAAOgJ,MAAMC,KAAK7H,GACpB,OAKX,OAHApB,GAASuzE,EAAAA,EAAAA,KAAsBvzE,EAAQoB,EAAQq/D,QAC/Cz1D,EAAAA,EAAAA,IAAUhL,EAGZ,CAEA,IAAK,cAAe,CAClB,MAAM,OAAEoB,EAAM,QAAE2J,GAAYlI,EAEtBO,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,GAAMiG,QAAS,OAIpB,YAFAlG,EAAQ2H,cAAc,CAAE1J,SAAQ2J,WAGlC,CAEA,IAAK,eAAgB,CACnB,MAAM,OAAE3J,GAAWyB,EAEbO,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,GAAMiG,QAAS,OAIpB,YAFAlG,EAAQshC,WAAW,CAAErjC,SAAQ2H,OAAO,GAGtC,CAEA,IAAK,4BAA6B,CAChC,MAAM,OAAE3H,EAAM,UAAEmzC,GAAc1xC,EAExBO,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAChC,IAAKgC,GAAMiG,QAAS,OAEpBrJ,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClCoyE,kBAAmBj/B,KAErBvpC,EAAAA,EAAAA,IAAUhL,GACV,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,OAAEgC,EAAM,MAAE8D,GAAUjD,EAE1B7C,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQgC,EAAQ,CAClCmlC,cAAerhC,EAAMxD,MAEvB0I,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQw+B,sBAAsB,CAAE3/B,SAAQ4/B,uBAAuB,IAE/D,KACF,CAEA,IAAK,2BAA4B,CAC/B,MAAM,OAAE5/B,EAAM,QAAEyxE,GAAY5wE,EAEtBwX,GAAOC,EAAAA,EAAAA,KAAWta,EAAQgC,GAChC,IAAKqY,EACH,OAGGo5D,GAAWp5D,EAAK8sB,gBAAkBssC,EAMrCzzE,GAASuK,EAAAA,EAAAA,KAAgBvK,EAAQgC,EAAQyxE,IALzCzzE,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQgC,EAAQ,CAClCmlC,mBAAe59B,IAEjBvJ,GAAS0zE,EAAAA,EAAAA,KAAkB1zE,EAAQgC,OAAQuH,KAI7CyB,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQw+B,sBAAsB,CAAE3/B,SAAQ4/B,uBAAuB,IAE/D,KACF,KC5iBJ,MAAM+xC,IAA4BC,E,QAAAA,IAIlC,WACE,IAAI5zE,GAASoL,EAAAA,EAAAA,MAEbpL,GAAS0vB,EAAAA,EAAAA,KAAoB1vB,EAAQ,IAChCA,EAAOwkC,MAAMgD,gBACbqsC,MAEL7oE,EAAAA,EAAAA,IAAUhL,GAEV6zE,GAAuB,CAAC,CAC1B,GAZA,IAAIA,GAAsD,CAAC,GAc3D7nE,EAAAA,EAAAA,IAAiB,YAAa,CAAChM,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,gBACH,OAAOixE,EAAAA,EAAAA,KAAc9zE,EAAQ6C,EAAOP,IAGtC,IAAK,aAAc,CACjByF,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAQ,EAAGI,GAAI+B,OACvClD,EAAAA,EAAAA,KAAqBnB,EAAQ6C,EAAOP,KAAOO,EAAOiS,KAAKghB,aAAc3f,EAAAA,EAAAA,KAA2BnW,KAC9F6C,EAAOiS,KAAKghB,WAAa91B,EAAOiI,QAAQ5D,GAAOs5C,cACjDx6C,EAAQymB,iBAAiB,CAAEusB,WAAW,EAAM9xC,UAI9CrE,EAAS,IACJA,EACHkU,aAAc,CACZ/B,SAAU,CAAC,OAMnB,MAAM4hE,GAAYh/D,EAAAA,EAAAA,KAAW/U,EAAQ6C,EAAOP,IAW5C,OATAtC,GAASunC,EAAAA,EAAAA,KAAWvnC,EAAQ6C,EAAOP,GAAIO,EAAOiS,MAC1CjS,EAAO6X,WACT1a,GAASoqB,EAAAA,EAAAA,KAAmBpqB,EAAQ6C,EAAOP,GAAIO,EAAO6X,WAGpDq5D,GAAWpD,mBAAqB9tE,EAAOiS,KAAK67D,mBAC9C3wE,GAAS2xD,EAAAA,EAAAA,KAAwB3xD,EAAQ6C,EAAOP,GAAIO,EAAOiS,KAAK67D,mBAAoB,IAG/E3wE,CACT,CAEA,IAAK,0BACHmD,EAAQonC,aAAa,CAAE9oB,OAAQ5e,EAAOP,KACtC,MAGF,IAAK,wBAGH,OAFAtC,GAASunC,EAAAA,EAAAA,KAAWvnC,EAAQ6C,EAAO4e,OAAQ,CAAEuoB,YAAannC,EAAOmnC,cACjEhqC,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQ6C,EAAO4e,OAAQ,CAAEuoB,YAAannC,EAAOmnC,cAInE,IAAK,mBAIH,OAFA6pC,GAAqBhxE,EAAO4e,QAAU5e,EAAOu2C,YAC7Cu6B,KAIF,IAAK,qBAAsB,CACzB,MAAM,GAAErxE,EAAE,SAAEoY,GAAa7X,EAEzB,OAAOunB,EAAAA,EAAAA,KAAmBpqB,EAAQsC,EAAIoY,EACxC,CAEA,IAAK,sBAAuB,CAC1B,MAAM,MAAEoW,EAAK,OAAE4d,GAAW7rC,EAEpBmxE,GAAqBr5D,EAAAA,EAAAA,KAAmB3a,EAAQ8wB,GACtD,IAAKkjD,GAAoBC,QACvB,OAGF,OAAO7pD,EAAAA,EAAAA,KAAmBpqB,EAAQ8wB,EAAO,CACvCmjD,QAAS,IACJD,EAAmBC,QACtBC,WAAYxlC,IAGlB,CAEA,IAAK,oBAAqB,CACxB,MAAM,MAAE5d,EAAK,SAAEqjD,GAAatxE,EACtBmxE,GAAqBr5D,EAAAA,EAAAA,KAAmB3a,EAAQ8wB,GACtD,IAAKkjD,GAAoBC,QACvB,OAGF,OAAO7pD,EAAAA,EAAAA,KAAmBpqB,EAAQ8wB,EAAO,CACvCmjD,QAAS,IACJD,EAAmBC,QACtBE,aAGN,CAEA,IAAK,qBAAsB,CACzB,MAAM,GAAE7xE,EAAE,SAAEk/B,GAAa3+B,EAEnBmxE,GAAqBr5D,EAAAA,EAAAA,KAAmB3a,EAAQsC,GACtD,OAAK0xE,GAAoBC,QAKzBj0E,GAASoqB,EAAAA,EAAAA,KAAmBpqB,EAAQsC,EAAI,CACtCk/B,kBALAr+B,EAAQonC,aAAa,CAAE9oB,OAAQnf,GAQnC,MCtIJ0J,EAAAA,EAAAA,IAAiB,YAAa,CAAChM,EAAQmD,EAASN,KAC9C,GACO,qBADCA,EAAO,SAEX,OAAO0vB,EAAAA,EAAAA,KAAiBvyB,EAAQ6C,EAAOP,GAAIO,EAAOqvB,eCyBxDlmB,EAAAA,EAAAA,IAAiB,YAAa,CAAChM,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,iBAAkB,CACrB,MAAM,MACJ2hC,EAAK,MAAEx7B,EAAK,YAAEorE,EAAW,MAAEC,EAAK,SAAEC,GAChCzxE,EACA2hC,IAAOxkC,GAASu0E,EAAAA,EAAAA,KAASv0E,EAAQwkC,IACjCx7B,IAAOhJ,GAASw0E,EAAAA,EAAAA,KAASx0E,EAAQgJ,IACjCorE,IAAap0E,GAASkR,EAAAA,EAAAA,KAAkBlR,EAAQo0E,IAChDC,GACFA,EAAMnyE,QAASiK,IACbnM,GAASmN,EAAAA,EAAAA,KAAWnN,EAAQmM,EAAK7J,GAAI6J,KAGrCmoE,GACFA,EAASpyE,QAASkK,IAEdpM,EAD0B,SAAxBoM,EAAQqoE,aACDC,EAAAA,EAAAA,KAAkB10E,EAAQoM,EAAQ9J,GAAI8J,IAEtCgB,EAAAA,EAAAA,KAAepN,EAAQoM,EAAQ9J,GAAI8J,MAIlDpB,EAAAA,EAAAA,IAAUhL,GACV,KACF,CAEA,IAAK,oBACH,OAAI6C,EAAO4uC,WACFkjC,EAAAA,EAAAA,KAAe30E,EAAQ6C,EAAOP,IAC5BO,EAAO+xE,qBACT50E,GAEAmwC,EAAAA,EAAAA,KAAkBnwC,EAAQ6C,EAAOP,IAG5C,IAAK,yBACHtC,EAAS,IACJA,EACH2nC,YAAa,CACXzmB,QAAS,MAGblW,EAAAA,EAAAA,IAAUhL,GACV,MAEF,IAAK,eACHmD,EAAQuoD,aACR,MAEF,IAAK,yBAEHvoD,EAAQ0xE,qBACR,MAGF,IAAK,yBACH1xE,EAAQ2xE,uBACR,MAEF,IAAK,uBACH3xE,EAAQwuB,qBACR,MAEF,IAAK,wBACHxuB,EAAQ4xE,sBACR,MAEF,IAAK,4BACH5xE,EAAQ6xE,0BACR,MAEF,IAAK,0BACH7xE,EAAQwnD,wBACR,MAEF,IAAK,4BAA6B,CAChC,MAAMsqB,EAAWpyE,EAAO69D,cAAgB1gE,EAAO4oB,aAAasK,MAAMM,OAASxzB,EAAO8xB,SAASoB,MAAMM,OACjG,IAAKyhD,GAAUtjE,KAAMrP,GAAOA,IAAOO,EAAOP,IAAK,OAAOtC,EACtD,MAAMk1E,EAAW,CAACryE,EAAOP,MAAO2yE,EAASnzE,OAAQQ,GAAOA,IAAOO,EAAOP,KACtEa,EAAQgyE,mBAAmB,CAAE1U,MAAOyU,EAAUxU,cAAe79D,EAAO69D,gBACpE,KACF,CAEA,IAAK,oBACHv9D,EAAQiyE,kBACR,MAEF,IAAK,yBAA0B,CAE7B,MAAM3U,EAAQ59D,EAAO49D,MAAM3+D,OAAQuzE,GAAU9+D,QAAQvW,EAAO8xB,SAAS4B,SAAS2hD,KAE9ElyE,EAAQgyE,mBAAmB,CAAE1U,QAAOC,cAAe79D,EAAO69D,gBAC1D,KACF,CAEA,IAAK,kBACHv9D,EAAQmyE,gBACR,MAEF,IAAK,gBACHt1E,EAAS,IACJA,EACHwhC,SAAU,IACLxhC,EAAOwhC,SACVuvB,QAAS,IACJ/wD,EAAOwhC,SAASuvB,QACnB,CAACluD,EAAO+M,KAAM/M,EAAO0yE,UAI3BvqE,EAAAA,EAAAA,IAAUhL,GACV,MAEF,IAAK,kCACH+H,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAQ,EAAGI,GAAI+B,MAC3CrE,GAASw1E,EAAAA,EAAAA,KAAqBx1E,EAAQ6C,EAAOioB,IAAKzmB,GAClDrE,GAAS44C,EAAAA,EAAAA,KAAe54C,EAAQ64C,EAAAA,GAAY48B,eAAgBpxE,MAE9D2G,EAAAA,EAAAA,IAAUhL,GACV,MAEF,IAAK,0BACH+H,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAS+L,IACrClG,OAAO8I,QAAQ5C,EAASo9B,QAAQD,eAAelpC,QAAQ,EAAE6uB,EAAW4a,MAC9DA,EAAOwF,UAAYtuC,EAAOsuC,UAC5BhuC,EAAQ8sC,oBAAoB,CAAE5rC,MAAO4J,EAAS3L,KAC9Ca,EAAQuyE,YAAY,CAAE9lE,IAAKmhB,EAAW1sB,MAAO4J,EAAS3L,UAI5D,MAEF,IAAK,gBAAiB,CACpB,MAAM,QAAE8J,GAAYvJ,EAElB7C,EAD0B,SAAxBoM,EAAQqoE,aACDC,EAAAA,EAAAA,KAAkB10E,EAAQoM,EAAQ9J,GAAI8J,IAEtCgB,EAAAA,EAAAA,KAAepN,EAAQoM,EAAQ9J,GAAI8J,IAE9CpB,EAAAA,EAAAA,IAAUhL,GACV,KACF,CAEA,IAAK,cACHA,GAASkvD,EAAAA,EAAAA,KAAkBlvD,EAAQ6C,EAAOb,OAAQ,CAAE,CAACa,EAAOirB,MAAMxrB,IAAKO,EAAOirB,QAC9E9tB,GAASyuD,EAAAA,EAAAA,KAAuBzuD,EAAQ,CAAE,CAAC6C,EAAOb,SAASgtD,EAAAA,EAAAA,KAAkBhvD,EAAQ6C,EAAOb,WAC5FgJ,EAAAA,EAAAA,IAAUhL,GACV,MAEF,IAAK,cACHA,GAASyvD,EAAAA,EAAAA,KAAgBzvD,EAAQ6C,EAAOb,OAAQa,EAAO8J,UACvD3B,EAAAA,EAAAA,IAAUhL,GACV,MAEF,IAAK,oBACHA,GAASwvD,EAAAA,EAAAA,KAA2BxvD,EAAQ6C,EAAOb,OAAQa,EAAO0sD,aAClEvkD,EAAAA,EAAAA,IAAUhL,GACV,MAEF,IAAK,0BAA2B,CAC9B,MAAM,OAAEgC,EAAM,QAAE2K,EAAO,SAAExK,GAAaU,EAEtC,KADckrB,EAAAA,EAAAA,KAAgB/tB,EAAQgC,EAAQ2K,GAClC,OAAO3M,EACnBA,GAAS2vD,EAAAA,EAAAA,KAAgB3vD,EAAQgC,EAAQ2K,EAAS,CAAEulD,aAAc/vD,KAClE6I,EAAAA,EAAAA,IAAUhL,GACV,KACF,CAEA,IAAK,oBACHA,GAAS0uD,EAAAA,EAAAA,KAAkB1uD,EAAQ6C,EAAO8rD,cAC1C3jD,EAAAA,EAAAA,IAAUhL,GACV,MAEF,IAAK,uBACHmD,EAAQixC,iBACR,MAEF,IAAK,yBACHjxC,EAAQwyE,wBAAwB,CAC9BvP,SAAUvjE,EAAOujE,WAEnB,MAGF,IAAK,4BACHpmE,EAAS,IACJA,EACHwhC,SAAU,IACLxhC,EAAOwhC,SACVspB,oBAAqBjoD,EAAO+yE,WAGhC5qE,EAAAA,EAAAA,IAAUhL,GACV,MAGF,IAAK,yBACH61E,EAAAA,EAAAA,IAA0BhzE,EAAOgyC,UACjC,MAGF,IAAK,kBACHihC,EAAAA,EAAAA,IAAwBjzE,EAAOg0B,QAASh0B,EAAOkzE,QAASlzE,EAAOmzE,cAC/D,MAGF,IAAK,aAAc,CACjB,MAAM1rE,EAASzH,EAAO7B,QAAQ4E,SAAS0E,OACvC,IAAKzH,EAAO7B,QAAQqC,YAAcR,EAAO7B,QAAQI,SAAWgR,EAAAA,IAA+B,OAC3F,GAAqB,mBAAjB9H,GAAQlI,KAA2B,OACvC,MAAM6zE,EAAiB3rE,EAAOgvC,KAE9BvxC,OAAOC,OAAOhI,EAAOiI,SAAS/F,QAAQ,EAAGI,GAAI+B,MAC3C,MAAM4J,GAAW/N,EAAAA,EAAAA,KAAeF,EAAQqE,GAoBxC,GAnBI4J,EAASo0C,8BACXl/C,EAAQ+yE,qBAAqB,CAC3Bx8B,KAAMu8B,EAAev8B,KACrBr1C,UAGFlB,EAAQwM,iBAAiB,CACvBE,MAAO,CAAED,IAAK,qBACd5O,QAAS,CAAE4O,IAAK,2BAChBvL,UAGFlB,EAAQk+C,gBAAgB,CAAEC,WAAW,EAAMj9C,UAE3CrE,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9BqiD,iCAA6B94C,GAC5BlF,IAGD4J,EAAS20C,6BAA8B,CACzC,MAAMxhD,EAASyB,EAAO7B,QAAQI,OACxB+0E,EAAW/0E,GAASkZ,EAAAA,EAAAA,KAAWta,EAAQoB,QAAUmI,EACnD4sE,IACFhzE,EAAQ4J,aAAa,CACnB3L,OAAQ+0E,EAAS7zE,GACjB4E,UAAWrE,EAAO7B,QAAQsB,GAC1B+B,UAGFlB,EAAQwM,iBAAiB,CACvB3O,QAAS,CACP4O,IAAK,6BACL8Q,UAAW,CACT44B,KAAM,CACJ1pC,IAAK,aACL8Q,UAAW,CACT7Q,MAAOomE,EAAepmE,MACtBgnC,OAAQo/B,EAAep/B,SAG3Bx8B,MAAMi9C,EAAAA,EAAAA,KAAax2C,EAAAA,EAAAA,MAAoBq1D,KAG3C9xE,WAIJlB,EAAQk+C,gBAAgB,CAAEC,WAAW,EAAMj9C,UAE3CrE,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B4iD,kCAA8Br5C,GAC7BlF,EACL,KAGF2G,EAAAA,EAAAA,IAAUhL,EACZ,MCvSJgM,EAAAA,EAAAA,IAAiB,YAAa,CAAChM,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,8BACH,OAAOuzE,EAAAA,EAAAA,KAAqBp2E,EAAQ6C,EAAOwzE,SAAUxzE,EAAO2+B,UAG9D,IAAK,2BAA4B,CAC/B,MAAM,OACJpgC,EAAM,SAAEogC,GACN3+B,EAEJ7C,GAASs2E,EAAAA,EAAAA,KAAmBt2E,EAAQoB,EAAQogC,IAC5Cx2B,EAAAA,EAAAA,IAAUhL,GACV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,OACJoB,EAAM,QAAE2J,EAAO,SAAEy2B,GACf3+B,EAEJ7C,GAASwJ,EAAAA,EAAAA,KAAYxJ,EAAQoB,EAAQ2J,EAAS,CAAEwrE,eAAgB/0C,KAEhEx2B,EAAAA,EAAAA,IAAUhL,GACV,KACF,MC9BJgM,EAAAA,EAAAA,IAAiB,YAAa,CAAChM,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,2BACH,MAAO,IACF7C,EACHw2E,cAAe,IACVx2E,EAAOw2E,cACV7/C,WAAW,EACX4f,uBAAwB1zC,EAAOhB,SAKrC,IAAK,mBACH,MAAO,IACF7B,EACHw2E,cAAe,IACVx2E,EAAOw2E,cACVtgC,SAAUrzC,EAAOoB,gB,6BCP3B+H,EAAAA,EAAAA,IAAiB,YAAa,CAAChM,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,kBAAmB,CACtB,GAAoC,cAAhCA,EAAO4zE,KAAK5wD,gBACd,OAAI7lB,EAAO02E,WAAWC,uBAChB,mBAAoBxzE,GAASA,EAAQyzE,eAAe,CAAEC,cAAc,EAAMxyE,OAAOC,EAAAA,EAAAA,UAG9EwyE,EAAAA,GAAAA,IAAgB92E,EAAQ6C,EAAO4zE,KAAKn0E,IAI/C,MAAMy0E,GAAYC,EAAAA,GAAAA,IAAgBh3E,EAAQ6C,EAAO4zE,KAAKn0E,IAChDlB,EAAS21E,GAAW31E,OAO1B,OANIA,IACFpB,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClC61E,eAAiBF,EAAUG,kBAAoB,GAAK3gE,QAAQwgE,EAAUI,cAAct1E,YAIjFu1E,EAAAA,GAAAA,IACLp3E,EACA6C,EAAO4zE,KAAKn0E,IACZ4N,EAAAA,EAAAA,IAAKrN,EAAO4zE,KAAM,CAAC,yBACnBltE,EACA1G,EAAO4zE,KAAKS,kBAEhB,CACA,IAAK,wBAOH,OANa1vE,EAAAA,EAAAA,KAAWxH,EAAQ6C,EAAOzB,UAErCpB,GAASkpB,EAAAA,EAAAA,KAAmBlpB,EAAQ6C,EAAOzB,OAAQ,CACjDi2E,YAAax0E,EAAO4zE,KAAKn0E,MAGtBtC,EAET,IAAK,8BAA+B,CAClC,MAAM,YAAEq3E,EAAW,aAAEF,EAAY,WAAEjvD,GAAerlB,GAC5C,cAAEZ,GAAkBjC,EAG1BA,GAASoL,EAAAA,EAAAA,MACT+rE,EAAaj1E,QAASo1E,IAChBA,EAAYh1E,KACdtC,GAASu3E,EAAAA,GAAAA,IACPv3E,EAAQq3E,EAAaC,EAAYh1E,GAAIg1E,EAAa/gE,QAAQ2R,IAAejmB,IAAkBq1E,EAAYh1E,OAIzG4lB,IACFloB,GAASo3E,EAAAA,GAAAA,IAAgBp3E,EAAQq3E,EAAa,CAC5CnvD,gBAIJ,MAAM6uD,GAAYC,EAAAA,GAAAA,IAAgBh3E,EAAQq3E,GACpCj2E,EAAS21E,GAAW31E,OAM1B,OALIA,IACFpB,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClC61E,eAAiBF,EAAUG,kBAAoB,GAAK3gE,QAAQwgE,EAAUI,cAAct1E,WAGjF7B,CACT,CACA,IAAK,kBAAmB,CACtB,IAAKw3E,EAAAA,GAAqB,OAE1B,MAAM,UACJC,EAAS,cACTx1E,GACEjC,GAEE,KAAEy2E,GAAS5zE,EAEjB,GAAI40E,EACF,MAAmB,cAAfhB,EAAKjkC,OACPrvC,EAAQu0E,mBAAmB,CAAEC,MAAO,QAChC,WAAYx0E,GAASA,EAAQy0E,OAAO,CAAEvzE,OAAOC,EAAAA,EAAAA,QAE1C,IACFtE,KACCy2E,EAAKoB,YAAc,CAAEC,gBAAiBrB,UAI9C,EAKF,GAFmBA,GAAMz2C,UAAY/9B,GAEH,cAAfw0E,EAAKjkC,MAkBtB,OAjBAttC,EAAAA,EAAAA,IAAU,KACRlF,GAASoL,EAAAA,EAAAA,MACT,MAAM0J,GAAOijE,EAAAA,GAAAA,IAAoB/3E,GAC5B8U,IACLkjE,EAAAA,EAAAA,IAAgB,CACdvB,OACA3hE,YAIJmjE,EAAAA,GAAAA,OACKC,EAAAA,GAAAA,IAAmCl4E,EAAQmD,EAASszE,EAAK0B,SAAS7zE,EAAAA,EAAAA,OACvEtE,EAAS,IACJA,EACHy3E,UAAWhB,IAGNvoE,EAAAA,EAAAA,GAAelO,EAAQ,CAC5Bo4E,oBAAoB,IACnB9zE,EAAAA,EAAAA,MAEP,K,gBC1HJ,SAAS+zE,GACPr4E,EAAW+R,GAUX,OARA/R,EAAS,IACJA,EACHs4E,WAAY,IACPt4E,EAAOs4E,cACPvmE,KAGP/G,EAAAA,EAAAA,IAAUhL,GACHA,CACT,ECTAgM,EAAAA,EAAAA,IAAiB,YAAa,CAAChM,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,8BAA+B,CAClC,MAAM,aAAE+5C,EAAY,MAAEv4C,GAAUxB,EAC1B60C,EAAOkF,EAAalF,MACpB,QAAErkC,GAAYqkC,GAEd,YAAEG,EAAW,SAAE36B,GAAa7J,EAC5BgkC,EAAeuF,EAAavF,aAClC,GAA2B,UAAvBA,GAAcj1C,KAChBe,EAAQ2vD,uBAAuB,CAAEzuD,UACjClB,EAAQwM,iBAAiB,CACvB3O,QAAS+0B,EAAAA,GAA0B,oBAAqBshB,EAAa/5B,OACrEzN,MAAOkmB,EAAAA,GAA0B,iBACjChV,KAAM,OACN1c,UAEFlB,EAAQk+C,gBAAgB,CAAEC,WAAW,EAAMj9C,eACtC,GAA2B,aAAvBgzC,GAAcj1C,KAAqB,CAC5C,MAAMm2E,GAAiBr4E,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOq6C,UAEjD65B,GAAkBlhC,GAAcn2B,QAAQ,KAAOq3D,EAAe55B,YAChEx7C,EAAQwM,iBAAiB,CACvB3O,QAAS,CACP4O,IAAK,YAEPvL,UAEFlB,EAAQk+C,gBAAgB,CAAEC,WAAW,EAAMj9C,UAC3ClB,EAAQs6C,eAAe,CAAEp5C,UAE7B,MACElB,EAAQwM,iBAAiB,CACvBtL,QACArD,QAAS+0B,EAAAA,GAA0B,kBAAmB,EACpDyiD,EAAAA,GAAAA,IAAuB3gC,EAAa36B,EAAU6Y,EAAAA,KAAgCygB,MAC9EkB,EAAK7nC,WAKX7E,EAAAA,EAAAA,IAAUhL,GAEV,KACF,CAEA,IAAK,kCAAmC,CACtC,MAAM,aAAE48C,EAAY,MAAEv4C,GAAUxB,GAC1B,aAAEw0C,EAAY,iBAAEgG,EAAgB,KAAE3F,GAASkF,EACjD,GAA2B,2BAAvBvF,GAAcj1C,MAAqCi7C,EAAkB,CACvE,MAAMhgC,EAASggC,EAAiBo7B,oBAAqBp7D,OAErDla,EAAQwM,iBAAiB,CACvBtL,QACAwL,MAAOkmB,EAAAA,GAA0B,8BACjC/0B,QAAS+0B,EAAAA,GAA0B,iCAAkC,CACnE1Y,EACAggC,EAAiBxtC,YAChBtG,EAAW8T,GACd0D,KAAM,QAEV,CAEA,GAAI22B,GAAMrkC,QAAQqlE,mBAAoB,CACpC,MAAMr7D,EAASq6B,EAAKrkC,QAAQwkC,YAC5B10C,EAAQwM,iBAAiB,CACvBtL,QACAwL,MAAOkmB,EAAAA,GAA0B,8BACjC/0B,QAAS+0B,EAAAA,GAA0B,iCAAkC,CACnE1Y,EACAq6B,EAAK7nC,YACJtG,EAAW8T,GACd0D,KAAM,QAEV,CAEA,GAA2B,aAAvBs2B,GAAcj1C,KAAqB,CACrC,IAAKi1C,EAAan2B,QAChB,OAEF,MAAMq3D,GAAiBr4E,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOq6C,UAEjD65B,GAAkBlhC,EAAan2B,QAAQ,KAAOq3D,EAAe55B,YAC/Dx7C,EAAQwM,iBAAiB,CACvB3O,QAAS,CACP4O,IAAK,sBAEPvL,UAEFlB,EAAQk+C,gBAAgB,CAAEC,WAAW,EAAMj9C,UAC3ClB,EAAQs6C,eAAe,CAAEp5C,UAE7B,CAEA,GAA2B,qBAAvBgzC,GAAcj1C,KAA6B,CAC7C,MAAMm2E,GAAiBr4E,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOq6C,UAEjD65B,GAAkBlhC,EAAa51B,SAAW82D,EAAe55B,YAC3Dx7C,EAAQwM,iBAAiB,CACvB3O,QAAS,CACP4O,IAAK,sBAEPvL,UAEFlB,EAAQk+C,gBAAgB,CAAEC,WAAW,EAAMj9C,UAC3ClB,EAAQs6C,eAAe,CAAEp5C,UAE7B,CAEA,GAA2B,cAAvBgzC,GAAcj1C,KAAsB,CACtC,IAAKi1C,EAAa51B,OAChB,OAEF,MAAMk3D,GAAkBz4E,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOw6C,eAElD85B,GAAiB96B,QAAUxG,EAAa51B,SAAWk3D,EAAgBn6B,YACrEx+C,GAASkO,EAAAA,EAAAA,GAAelO,EAAQ,CAC9B6+C,eAAgB,IACX85B,EACHC,aAAa,IAEdv0E,GAEP,CAEA,GAA2B,aAAvBgzC,GAAcj1C,KAAqB,CACrC,IAAKi1C,EAAar1C,OAChB,OAGF,MAAM62E,GAAqB34E,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOq6C,UAErDm6B,GAAsBxhC,EAAar1C,SAAW62E,EAAmBl6B,YACnEx7C,EAAQwM,iBAAiB,CACvB3O,QAAS,CACP4O,IAAK,sBAEPvL,UAEFlB,EAAQk+C,gBAAgB,CAAEC,WAAW,EAAMj9C,UAC3ClB,EAAQs6C,eAAe,CAAEp5C,UAE7B,CAEA,GAA2B,mBAAvBgzC,GAAcj1C,KAA2B,CAC3C,MAAMy2E,GAAqB34E,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO8oE,cAErD0L,IACF11E,EAAQwM,iBAAiB,CACvB3O,QAAS,CACP4O,IAAK,mBAEPvL,UAEEw0E,EAAmB72E,QACrBmB,EAAQs/C,qBAAqB,CAAEzgD,OAAQ62E,EAAmB72E,SAE5DmB,EAAQs/C,qBAAqB,CAAEzgD,OAAQq1C,EAAar1C,SACpDmB,EAAQk+C,gBAAgB,CAAEC,WAAW,EAAMj9C,UAC3ClB,EAAQo/C,mBAAmB,CAAEl+C,UAEjC,CAE2B,oBAAvBgzC,GAAcj1C,MAA8BpC,EAAOiC,eACrDkB,EAAQs/C,qBAAqB,CAAEzgD,OAAQhC,EAAOiC,gBAGhD,KACF,CAEA,IAAK,qBACHjC,GAASgkD,EAAAA,EAAAA,KAAmBhkD,EAAQ6C,EAAO0a,UAE3CvS,EAAAA,EAAAA,IAAUhL,GAEVmD,EAAQ0lB,qBDpKd7c,EAAAA,EAAAA,IAAiB,uBAAyBhM,IACxCq4E,GAAwBr4E,EAAQ,CAAE84E,eAAe,EAAMC,wBAAoBxvE,OAG7EyC,EAAAA,EAAAA,IAAiB,sBAAuB,CAAChM,EAAQmD,EAAS4O,KACxDsmE,GAAwBr4E,EAAQ,CAAE84E,eAAe,EAAMC,mBAAoBhnE,GAASinE,iBAGtFhtE,EAAAA,EAAAA,IAAiB,wBAA0BhM,IACzCq4E,GAAwBr4E,EAAQ,CAAE84E,eAAe,EAAOC,wBAAoBxvE,M,oJEzB9E,MAAM0vE,GAAehzE,SAASizE,cAAc,yBACtCC,GAAyBF,IAAcG,aAAa,YAAc,GAkCxE,SAASC,GAAa9Y,GACpBA,EAAE+Y,gBACJ,C,wFC/BA,MAOA,GAP6CC,IAC3C,MAAM,SAAExZ,GAAawZ,EACfC,GAAmBC,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,oBAAqB5Z,GAE7E,OAAOyZ,GAAmBI,EAAAA,GAAAA,GAACJ,EAAgB,SAAMjwE,GCCnD,GAPsCgwE,IACpC,MAAM,YAAElC,GAAgBkC,EAClBM,GAAYJ,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,aAActC,GAE/D,OAAOwC,GAAYD,EAAAA,GAAAA,GAACC,EAAS,IAAKN,SAAYhwE,GCKhD,GAPsCgwE,IACpC,MAAM,SAAExZ,GAAawZ,EACfO,GAAYL,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,aAAc5Z,GAE/D,OAAO+Z,GAAYF,EAAAA,GAAAA,GAACE,EAAS,SAAMvwE,GCCrC,GAP+CgwE,IAC7C,MAAM,OAAE17B,GAAW07B,EACbQ,GAAqBN,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,sBAAuB97B,GAEjF,OAAOk8B,GAAqBH,EAAAA,GAAAA,GAACG,EAAkB,IAAKR,SAAYhwE,GCGlE,GAPiDgwE,IAC/C,MAAM,kBAAE3lD,GAAsB2lD,EACxBS,GAAuBP,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,wBAAyBrmD,GAErF,OAAOomD,GAAuBJ,EAAAA,GAAAA,GAACI,EAAoB,IAAKT,SAAYhwE,GCGtE,GAP+CgwE,IAC7C,MAAM,OAAE17B,GAAW07B,EACbW,GAAqBT,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,sBAAuBp8B,GAEjF,OAAOq8B,GAAqBN,EAAAA,GAAAA,GAACM,EAAkB,IAAKX,SAAYhwE,GCGlE,GAP4CgwE,IAC1C,MAAM,OAAE17B,GAAW07B,EACbY,GAAkBV,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,mBAAoBp8B,GAE3E,OAAOs8B,GAAkBP,EAAAA,GAAAA,GAACO,EAAe,IAAKZ,SAAYhwE,G,wCCE5D,MAqBA,IAAe6wE,EAAAA,GAAAA,IArBqBC,EAAGC,qBACrCC,EAAAA,GAAAA,MACA,MAAMC,GAA2BpV,EAAAA,GAAAA,MAE3BjqC,GAAOs/C,EAAAA,GAAAA,KAQb,IANAC,EAAAA,GAAAA,IAAU,KACJJ,IACFK,EAAAA,GAAAA,GAAeH,IAEhB,CAACF,EAAeE,KAEfF,GAAkBE,EAItB,OACEZ,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,sBAAqB4kD,UAAEC,EAAAA,GAAAA,IAAqB1/C,EAAMq/C,O,+GCrBrE,MAMA,GAN0CjB,IACxC,MAAMuB,GAAgBrB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAErD,OAAOa,GAAgBlB,EAAAA,GAAAA,GAACkB,EAAa,IAAKvB,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,K,wFCYhE,MAsEA,GAtEoCC,EAClChM,UACAiM,mBACAC,eACAC,aACAC,sBAEA,MAAOC,EAAYC,IAAiBC,EAAAA,GAAAA,KAAS,IACvC,uBAAE5oC,IAA2B1yB,EAAAA,EAAAA,OAEnCy6D,EAAAA,GAAAA,IAAU,KACH1L,GACHsM,GAAc,IAEf,CAACtM,IAEJ,MAAM7zC,GAAOqgD,EAAAA,GAAAA,KAEPC,GAAeC,EAAAA,GAAAA,GACnB,gBACA1M,GAAW,WACXqM,GAAc,gBAGVM,GAAmBC,EAAAA,GAAAA,IAAY,KAC/BR,EACFzoC,IAGF2oC,GAAeD,IACd,CAACA,EAAYD,IAEVS,GAAcD,EAAAA,GAAAA,IAAY,KAC9BN,GAAc,IACb,IAEGQ,GAAYC,EAAAA,GAAAA,IAAQ,KACxBC,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CAACn7D,KAAK,UAAUo7D,QAASjB,EAAaN,SAAEz/C,EAAK,iBACtDy+C,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CAACn7D,KAAK,QAAQo7D,QAAShB,EAAWP,SAAEz/C,EAAK,eAClDy+C,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CAACn7D,KAAK,OAAOo7D,QAASlB,EAAiBL,SAAEz/C,EAAK,wBAExD,CAACA,EAAM+/C,EAAcC,EAAYF,IAEpC,OACEe,EAAAA,GAAAA,IAAA,OAAKhmD,UAAWylD,EAAcW,IAAKjhD,EAAKkhD,MAAQ,WAAQ9yE,EAAUqxE,SAAA,EAChEoB,EAAAA,GAAAA,IAACM,GAAAA,EAAM,CACL9jE,OAAK,EACL+jE,MAAM,UACNvmD,UAAWqlD,EAAa,SAAW,GACnCc,QAASR,EACTa,UAAWrhD,EAAKkgD,EAAa,QAAU,mBACvCoB,UAAW,EAAE7B,SAAA,EAEbhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,qBACXilC,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,cAEbilC,EAAAA,GAAAA,GAAC+C,GAAAA,EAAI,CACH9+B,OAAQw9B,EACRuB,UAAWzhD,EAAKkhD,MAAQ,OAAS,QACjCQ,UAAU,SACVC,WAAS,EACTC,QAASlB,EAAYjB,SAEpBkB,QCzET,GANuCvC,IACrC,MAAMyD,GAAavD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,cAElD,OAAO+C,GAAapD,EAAAA,GAAAA,GAACoD,EAAU,IAAKzD,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,K,oGCqD1D,MA0YA,IAAeX,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBj9E,IACC,MACEukB,aACEtb,KAAMmpE,EACN/d,WAAY6oB,EACZ/8C,QAASg9C,GAEXn0E,OACEipE,SAAS,SACPmL,IAGJjvB,SACE8gB,gBACEmO,SAAUC,IAGd73C,gBACEC,OAAQ63C,GACT,cACDr7E,EAAa,gBACb+hE,GACEhkE,GACE,eAAEu9E,IAAmBzoC,EAAAA,GAAAA,GAAqB90C,IAC1C,4BAAEw9E,EAA2B,iBAAEnL,IAAqBnyE,EAAAA,EAAAA,KAAeF,IACjEuuE,aAAeM,cAAe4O,KAAyBv9E,EAAAA,EAAAA,KAAeF,GACxEo7E,GAAkBp1D,EAAAA,EAAAA,KAA0BhmB,GAElD,MAAO,CACLoyE,kBACA+K,oBACAD,mBACA7K,mBACApwE,gBACAs7E,iBACAC,8BACAE,iBAAkBnnE,QAAQ6mE,GAAUv7E,QACpC87E,mBAAoBpnE,QAAQ8mE,GAAiBx7E,QAC7C+7E,YAAYjoD,EAAAA,GAAAA,GAAmB31B,EAAQ,iBACvC69E,kBAAkBloD,EAAAA,GAAAA,GAAmB31B,EAAQ,mBAC7C89E,cAAcnoD,EAAAA,GAAAA,GAAmB31B,EAAQ,kBACzCgkE,kBACAyZ,qBACAH,WACAlC,oBA7Cc6B,CAvY2Bc,EAC7CC,kBACA5L,kBACA8K,mBACA7K,mBACApwE,gBACAg8E,mBACAV,iBACAC,8BACAI,aACAE,eACAI,uBACAf,oBACAU,mBACAH,mBACAC,qBACA3Z,kBACAyZ,qBACAH,WACAlC,sBAEA,MAAM,gBACJ+C,EAAe,oBACfC,EAAmB,SACnB/5D,EAAQ,yBACRg6D,EAAwB,0BACxBC,EAAyB,mBACzBC,EAAkB,sBAClB7+C,EAAqB,qBACrB8+C,EAAoB,mBACpBrU,IACElqD,EAAAA,EAAAA,MAEEw+D,GAAgBC,EAAAA,GAAAA,MAEhBvjD,GAAOs/C,EAAAA,GAAAA,MAEbC,EAAAA,GAAAA,IAAU,KACRyD,KACC,IAEH,MAAM,IACJQ,EACAC,aAAcC,EACdC,aAAcC,IACZC,EAAAA,GAAAA,GAAkB,CACpBnhC,OAAQ4/B,EACRznD,WAAW,EACXipD,kBAAkB,IAIdC,IAFuBC,EAAAA,GAAAA,GAAgBJ,IAEzBK,EAAAA,GAAAA,GAAgB,KAClC,MAAMC,EAAaV,EAAIzoD,SAASgjD,cAA2B,sCAC3DmG,GAAYC,SAAS,CACnBC,IAAK,EACLC,SAAU,cAIRC,GAAgC1D,EAAAA,GAAAA,IAAQ,KACrC,CACLz5E,GAAIo9E,EAAAA,IACJ7vE,MAAO,CAAE9B,KAAMmvE,IAAmB,KAAOwC,EAAAA,IAAgBvkD,EAAK,uBAAyBA,EAAK,mBAC5F1W,gBAAiBk7D,GAAAA,EACjBC,gBAAiBD,GAAAA,IAElB,CAACzC,EAAkB/hD,KAEhB,mBAAE0kD,EAAkB,gBAAEC,EAAe,uBAAEC,IAA2BC,EAAAA,GAAAA,KAClEC,EAAsB,CAAE39E,GAAI,IAAKqyC,KAAM,WAAYurC,WAAY,IAC/DC,EAAmBL,EAAgBt8E,KAAM48E,GAAcA,EAAU99E,KAAOu9E,IAAuBI,EAE/FI,GAAmBtE,EAAAA,GAAAA,IAAQ,KAC/B,GAAKmB,EAEL,OAAOA,EACJnuE,IAAKzM,IACJ,GAAIA,IAAOo9E,EAAAA,KAAiBG,IAAuBI,EAAoB39E,GACrE,OAAOm9E,EAGT,GAAII,IAAuBI,EAAoB39E,IAAMy9E,GAA0BD,EAAgBnuE,KAAK2uE,GAAKA,EAAEJ,WAAWz7E,SAASnC,IAC7H,OAAO,KAGT,MAAMkiB,EAAS4tD,EAAgB9vE,IAAOm9E,EACtC,OAAIj7D,IAAWq7D,IAAuBI,EAAoB39E,IAAM69E,EAAiBD,WAAWz7E,SAASnC,IAC5FkiB,EAGF,OAER1iB,OAAOyU,UACT,CAAC67D,EAAiBqN,EAAgBvC,EAAkB2C,EAAoBM,EAAiBD,WAAYH,IAElGQ,EAAsBF,GAAkBxmE,UAAW2K,GAAWA,EAAOliB,KAAOo9E,EAAAA,KAC5Ec,EAAqBD,IAAwBlO,EAC7CoO,EApGmB,IAoGsBpO,EAEzCqO,GAAgCC,EAAAA,GAAAA,MAChCC,GAAqBxB,EAAAA,GAAAA,GAAiBzN,IAC1C,MAAMkP,EAAgBH,EAA8B/O,GAC/CkP,GAAeh/E,QAEpBg/E,EAAc3+E,QAASd,IACrBo9E,EAAqB,CAAEl8E,GAAIlB,QAIzB0/E,GAAqBvG,EAAAA,GAAAA,MAErBwG,GAA6BhF,EAAAA,GAAAA,IAAQ,KAEzC,GADgC8D,IAAuBI,EAAoB39E,KAAMy9E,EAE/E,OAAOe,EAGT,MAAME,EAAuBlB,EAAgBvoD,QAAQ+oD,GAAKA,EAAEJ,YACtDe,EAAW,IAAKH,GAEhBI,EAAuBR,EAA8BhB,EAAAA,KAC3D,GAAIwB,EAAsB,CACxB,MAAMC,EAAsBD,EAAqBp/E,OAAQV,IACtD4/E,EAAqBrvE,KAAKggE,IAAYyP,EAAAA,GAAAA,IAAczP,IAAWltE,SAASrD,KAGvE6/E,EAASvB,EAAAA,OACXuB,EAASvB,EAAAA,KAAiB,IACrBuB,EAASvB,EAAAA,KACZ2B,WAAYF,EAAoBt/E,QAGtC,CAEA,OAAOo/E,GACN,CACDH,EACAjB,EACAE,EACAD,EACAY,EACAT,EAAoB39E,KAGhBg/E,GAAavF,EAAAA,GAAAA,IAAQ,KACzB,GAAKsE,GAAqBA,EAAiBx+E,OAI3C,OAAOw+E,EAAiBtxE,IAAI,CAACyV,EAAQnf,KACnC,MAAM,GAAE/C,EAAE,MAAEuN,GAAU2U,EAChBitB,EAAYnvC,IAAOo9E,EAAAA,KAAiBr6E,EAAIu4E,EAAa,EAErD2D,EAA0C,GAyEhD,OA1EuBC,EAAAA,EAAAA,MAAqBp2E,EAAAA,EAAAA,MAAa9I,IAIvDi/E,EAAe71E,KAAK,CAClBmE,MAAOsrB,EAAK,eACZpa,KAAM,OACN0gE,QAASA,KACe15E,OAAOC,OAAOoqE,GAAiB1zD,OAAO,CAACC,EAAKonB,IAAOpnB,GAAOonB,EAAG27C,WAAa,EAAI,GAAI,IACnF5D,IAAiBt5D,EAAOk9D,WAC3ChiD,EAAsB,CACpB7mB,MAAO,mBAMPskE,EAAkB76E,IAAKT,QAAUg8E,EACnCn+C,EAAsB,CACpB7mB,MAAO,oBAKXwlE,EAAyB,CACvB1M,SAAUrvE,OAMdA,IAAOo9E,EAAAA,KACT6B,EAAe71E,KAAK,CAClBmE,MAAOsrB,EAAK,qBACZpa,KAAM,OACN0gE,QAASA,KACPtX,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBuX,aAI7CjB,EAA8Bp+E,IAAKT,QACrC0/E,EAAe71E,KAAK,CAClBmE,MAAOsrB,EAAK,yBACZpa,KAAM,YACN0gE,QAASA,IAAMb,EAAmBp8D,EAAOliB,QAI7Ci/E,EAAe71E,KAAK,CAClBmE,MAAOsrB,EAAK,cACZpa,KAAM,OACN0gE,QAASA,KACPlD,EAAmB,CAAE5M,SAAUrvE,OAI/Bo+E,EAA8Bp+E,IAAKT,QACrC0/E,EAAe71E,KAAK,CAClBmE,MAAOsrB,EAAK,yBACZpa,KAAM,YACN0gE,QAASA,IAAMb,EAAmBp8D,EAAOliB,MAI7Ci/E,EAAe71E,KAAK,CAClBmE,MAAOsrB,EAAK,oBACZpa,KAAM,SACN6gE,aAAa,EACbH,QAASA,KACPnD,EAA0B,CAAE3M,SAAUrvE,QAKrC,CACLA,KACAuN,OAAOgyE,EAAAA,GAAAA,IAAuB,CAC5B9zE,KAAM8B,EAAM9B,KACZ0J,SAAU5H,EAAM4H,SAChBqqE,sBAAuBt9D,EAAOu9D,oBAEhCC,WAAYjB,EAA2Bz+E,IAAK++E,WAC5CY,cAAe1rE,QAAQwqE,EAA2Bz+E,IAAK4/E,oBACvDzwC,YACA8vC,eAAgBA,GAAgB1/E,OAAS0/E,OAAiBh4E,MAG7D,CACD82E,EAAkBzC,EAAYmD,EAA4B5lD,EAAMi3C,EAAiB0L,EAAcX,EAC/FU,EAAkB6C,EAA+BvW,IAG7CgY,IAAkB/C,EAAAA,GAAAA,GAAiBxlE,IACvCwkE,EAAoB,CAAE/L,iBAAkBz4D,GAAS,CAAEqC,uBAAuB,IACtEo2D,IAAqBz4D,GACvBslE,OAKJxE,EAAAA,GAAAA,IAAU,KACH4G,GAAYz/E,QAIbwwE,GAAoBiP,EAAWz/E,QACjCu8E,EAAoB,CAAE/L,iBArQD,KAuQtB,CAACA,EAAkBiP,EAAYlD,KAElC1D,EAAAA,GAAAA,IAAU,KACR,GAAK1e,EAAAA,IAAiBslB,GAAYz/E,SAAUo8E,EAI5C,OAAOmE,EAAAA,GAAAA,IAAc3D,EAAcvoD,QAAU,CAC3CmsD,wBAAyB,aACzBC,QAASA,CAAC/hB,EAAGzoD,IACPA,IAAcyqE,GAAAA,GAAeC,MAC/BpE,EACE,CAAE/L,iBAAkB1xE,KAAKC,IAAIyxE,EAAmB,EAAGiP,EAAWz/E,OAAS,IACvE,CAAEoa,uBAAuB,KAEpB,GACEnE,IAAcyqE,GAAAA,GAAeE,QACtCrE,EAAoB,CAAE/L,iBAAkB1xE,KAAKE,IAAI,EAAGwxE,EAAmB,IAAM,CAAEp2D,uBAAuB,KAC/F,MAMZ,CAACo2D,EAAkBiP,EAAYrD,EAAkBG,IAEpD,MAAMsE,IAAwBhE,EAAAA,GAAAA,MAC9BgE,GAAsBxsD,SAAWuqD,GACjC/F,EAAAA,GAAAA,IAAU,IAAOgI,GAAsBxsD,SAAUysD,EAAAA,GAAAA,GAAsB,KACjED,GAAsBxsD,SACxBkoD,EAAoB,CAAE/L,iBArSD,WAuSpB9oE,EAAY,CAAC8oE,EAAkB+L,KAEpCwE,EAAAA,GAAAA,GAAe,CACb7iB,UAAW0gB,EACXoC,OAAQA,IAAMzE,EAAoB,CAAE/L,iBA3Sb,GA2SqD,CAAEp2D,uBAAuB,OAGvGy+D,EAAAA,GAAAA,IAAU,KACR,MAAMoI,EAAiBviB,IACrB,GAAIA,EAAEwiB,SAAWxiB,EAAEyiB,UAAYziB,EAAE/pB,KAAKoF,WAAW,UAAY0lC,EAAY,CACvE,MAAO,CAAE2B,GAAS1iB,EAAE/pB,KAAK1iC,MAAM,cAAgB,GAC/C,IAAKmvE,EAAO,OAEZ,GArTsB,MAqTlBA,EAEF,YADA5+D,EAAS,CAAE/hB,GAAIL,EAAeywD,sBAAsB,IAItD,MAAMluC,EAAS3Z,OAAOo4E,GAAS,EAC/B,GAAIz+D,EAAS88D,EAAWz/E,OAAS,EAAG,OAEpCu8E,EAAoB,CAAE/L,iBAAkB7tD,GAAU,CAAEvI,uBAAuB,IAC3EskD,EAAE+Y,gBACJ,GAKF,OAFArzE,SAASi9E,iBAAiB,UAAWJ,GAAe,GAE7C,KACL78E,SAASk9E,oBAAoB,UAAWL,GAAe,KAExD,CAAC7gF,EAAeq/E,EAAYj9D,EAAU+5D,IAEzC,MACEO,IAAKyE,GACLxE,aAAcyE,KACZrE,EAAAA,GAAAA,GAAkB,CACpBnhC,QAASq/B,EACToG,mBAAmB,EACnBrE,kBAAkB,IA0BdsE,GAAsBjC,GAAcA,EAAWz/E,OAAS,EAE9D,OACEm6E,EAAAA,GAAAA,IAAA,OACE2C,IAAKA,EACL3oD,WAAW0lD,EAAAA,GAAAA,GACT,cACA6H,IAAuBrF,GAAwB,2BAC/CW,GAA2B,qBAC3BjE,SAAA,CAED2I,IACC3J,EAAAA,GAAAA,GAAC4J,GAAAA,EAAO,CACNC,2BAA2B,cAC3BC,KAAMpC,EACNqC,UAAWtR,EACXuR,YAAazB,KAEbkB,IACFzJ,EAAAA,GAAAA,GAAA,OAAK+E,IAAKyE,GAAgBptD,UAAU,0BAClCzsB,GACJqwE,EAAAA,GAAAA,GAACiK,GAAAA,GAAU,CACTlF,IAAKF,EACL9pC,MAAMmvC,EAAAA,GAAAA,GAAsB,iBAAkBvG,EAAgBC,EAA6BriD,EAAKkhD,OAChG0H,UAAW1R,EACX2R,YAAaT,GAAsBjC,EAAWz/E,YAAS0H,EAAUqxE,SAhDvE,SAA0B7a,GACxB,MAAMkkB,EAAel8E,OAAOC,OAAOoqE,GAChC5uE,KAAK,EAAGlB,QAASA,IAAOg/E,EAAYjP,GAAkB/vE,IACnD4hF,EAAWD,IAAiBzD,EAElC,OACE5G,EAAAA,GAAAA,GAACuK,GAAAA,EAAQ,CAEPC,WAAYF,EAAW,SAAW,MAClCvS,SAAUuS,EAAWD,EAAa3hF,QAAKiH,EACvCw2D,SAAUA,EACVke,iBAAkBA,EAClBD,gBAAiBA,EACjBqG,YAAU,EACVC,mBAAoB5G,GAAoBC,KAAwB3Z,EAAgBjV,SAChFiV,gBAAiBA,EACjBsZ,SAAUA,EACVlC,gBAAiBA,EACjBmJ,UAAQ,GAXH,GAAG1E,KAAsBxN,IAcpC,UCzZF,GANwCkH,IACtC,MAAMiL,GAAc/K,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,eAEnD,OAAOuK,GAAc5K,EAAAA,GAAAA,GAAC4K,EAAW,IAAKjL,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,K,gBCRrD,IAAK0J,GAAgB,SAAhBA,GAAgB,OAAhBA,EAAAA,EAAgB,yCAAhBA,EAAAA,EAAgB,qBAAhBA,EAAAA,EAAgB,mBAAhBA,CAAgB,MAYb,SAASC,GACtBvpD,EACAtV,EACAuc,EACAuiD,EACA1gB,EACA2gB,GAEA,IAAIxrC,EAUAkb,EAWAvmD,EAWJ,OA3BEqrC,EC5BW,WACb,MAAO4tB,EAAU6d,IAAetJ,EAAAA,GAAAA,IAASvvD,OAAO84D,UAAUC,QAgB1D,OAdArK,EAAAA,GAAAA,IAAU,KACR,SAASsK,IACPH,EAAY74D,OAAO84D,UAAUC,OAC/B,CAKA,OAHA/4D,OAAOk3D,iBAAiB,SAAU8B,GAClCh5D,OAAOk3D,iBAAiB,UAAW8B,GAE5B,KACLh5D,OAAOm3D,oBAAoB,UAAW6B,GACtCh5D,OAAOm3D,oBAAoB,SAAU6B,KAEtC,IAEIhe,CACT,CDM0Bie,IACoB,8BAApBp/D,EAEbuc,EACAqiD,GAAiBS,QAEjBT,GAAiBU,OAJjBV,GAAiBW,kBAS1B9wB,EADElb,IAAWqrC,GAAiBU,QAAUP,EAC7B,OACFD,EACE,eACF1gB,EACE,YAEA,UAIT7qB,IAAWqrC,GAAiBW,kBAC9Br3E,EAAOotB,EAAK,qBACHie,IAAWqrC,GAAiBS,UACrCn3E,EAAOotB,EAAK,aAGG,iBAAbm5B,IACFvmD,EAAOA,EAAMs3E,cAAczoD,QAAQ,OAAQ,KAGtC,CACL0oD,iBAAkBlsC,EAClBmsC,yBAA0BjxB,EAC1BkxB,qBAAsBz3E,EAE1B,C,wFE1CA,MA0BA,IAAeqsE,EAAAA,GAAAA,IA1B+BqL,EAC5CH,mBACAE,uBACArJ,cAEA,MAAMhhD,GAAOqgD,EAAAA,GAAAA,KAEb,OACEQ,EAAAA,GAAAA,IAAA,OAAK15E,GAAG,0BAA0B85E,IAAKjhD,EAAKkhD,MAAQ,WAAQ9yE,EAAW4yE,QAASA,EAAQvB,SAAA,EACtFhB,EAAAA,GAAAA,GAAC8L,GAAAA,EAAO,CAACnJ,MAAM,WACf3C,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,aAAY4kD,UACzBhB,EAAAA,GAAAA,GAACiK,GAAAA,GAAU,CAACE,UAAWuB,EAAkB3wC,KAAK,YAAWimC,SACtD4K,OAGL5L,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACLm9C,KAAK,OACL4mB,MAAM,oBAAmB3B,UAEzBhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,iB,iGCfnB,MAiGA,IAAeylC,EAAAA,GAAAA,IA/FUuL,EACvBh0C,cACAi0C,aACAC,sBAEA,MAAM,iBAAEl2E,IAAqBsQ,EAAAA,EAAAA,MACvBkb,GAAOs/C,EAAAA,GAAAA,KACPqL,GAAWC,EAAAA,GAAAA,GAAoBp0C,GAE/Bq0C,GAAeC,EAAAA,EAAAA,MACfC,GAAWC,EAAAA,EAAAA,MAEXC,GAAqBrK,EAAAA,GAAAA,IAAQ,IAC1Bh0E,OAAOC,OAAO89E,GAAUtiF,KAAM6iF,GAAYA,EAAQ5kE,SAAWkwB,EAAYrvC,IAC/E,CAACwjF,EAAUn0C,EAAYrvC,KAEpBgkF,EAAkBN,GAAgBE,EAElCK,GAAmBnH,EAAAA,GAAAA,GAAgB,KACvCzvE,EAAiB,CACfE,MAAOsrB,EAAK,6BACZn6B,QAAS2wC,EAAY7b,UAAYqF,EAAK,wBAA0BA,EAAK,iCACrEkP,SAxBwB,QA4BtBm8C,GAAgBzK,EAAAA,GAAAA,IAAQ,KAC5B,IAAKh0E,OAAOC,OAAO89E,GAAUjkF,OAC3B,OAGF,GAAImkF,IAAiBJ,EACnB,OAGF,IAAIa,EAAY,EAChB,KAAOX,EAASW,IACdA,GAAa,EAGf,OAAOC,EAAAA,GAAAA,IAAkBD,GAAW,IACnC,CAACX,EAAUE,EAAcJ,IAE5B,OACE5J,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,CACG7yE,OAAO8I,QAAQi1E,GAAY,CAAC,GAC1BjhF,KAAK,EAAE,CAAEwhF,KAAcA,EAAQ5kE,SAAWkwB,EAAYrvC,IAAM,EAAI,GAChEyM,IAAI,EAAEkyC,EAAMolC,GAAUzsE,EAAOgF,KAC5B,MAAM+nE,EAAeN,EAAQO,SAAWR,GAAoBQ,OACtDC,EAAuB,CAC3Bh3E,MAAO,CAACw2E,EAAQv+C,UAAWu+C,EAAQx+C,UAAU/lC,OAAOyU,SAASsL,KAAK,KAClEilE,cAAc,EACdC,YAAaV,EAAQ9J,MACrByK,cAAeL,EAAeN,EAAQW,mBAAgBz9E,EACtDusB,UAAWuwD,EAAQvwD,WAGfmxD,EAAeZ,EAAQ5kE,SAAWkwB,EAAYrvC,KAAOkkF,GAAiB5nE,EAAI/c,OAAS,GAEzF,OACEm6E,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEoB,EAAAA,GAAAA,IAACE,GAAAA,EAAQ,CACPlmD,UAAU,oBACVkxD,YACEtN,EAAAA,GAAAA,GAACuN,GAAAA,EAAM,CACLxxB,KAAK,OACL3/B,UAAU,iBACV3b,KAAMwsE,EACNO,WAAYf,EAAQgB,YAGxBlL,QAASkK,EAAQ5kE,SAAWkwB,EAAYrvC,GAAKujF,OAAkBt8E,EAC/D2iB,KAAMm6D,EAAQ5kE,SAAWkwB,EAAYrvC,IAAKokF,EAAAA,GAAAA,IAAkB77E,OAAOo2C,SAAS13C,EAAUqxE,SAAA,CAErFyL,EAAQO,SAAUhN,EAAAA,GAAAA,GAAA,QAAM5jD,UAAU,yBAAwB4kD,SAAC,OAC5DhB,EAAAA,GAAAA,GAAC0N,GAAAA,EAAa,CAACjtE,KAAMwsE,EAAUU,iBAAe,EAACC,gBAAiB9nF,EAAAA,OAEjEunF,IAAgBrN,EAAAA,GAAAA,GAAC6N,GAAAA,EAAa,SAItCjB,IACC5M,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPn7D,KAAK,MACL2mE,IAAI,WACJx7D,KAAOo6D,OAAkC/8E,EAAhBi9E,EACzBrK,QAASmK,EAAkBC,OAAmBh9E,EAAUqxE,SAEvDz/C,EAAK,yBCkEhB,IAAei/C,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBj9E,IACC,MAAM,cACJiC,EAAa,gBAAE+hE,GACbhkE,GACE,eAAEu9E,IAAmBzoC,EAAAA,GAAAA,GAAqB90C,GAC1C2nF,EAAa3nF,EAAOwzC,WAAWC,KAErC,MAAO,CACLxxC,gBACA0vC,aAAa58B,EAAAA,EAAAA,KAAW/U,EAAQiC,GAChCwtC,OAAOm4C,EAAAA,EAAAA,KAAY5nF,GACnBu9E,iBACAvZ,kBACA2jB,aACAE,oBAAoBhyD,EAAAA,GAAAA,GAAmB71B,EAAQ,kBAfjCi9E,CAjIM6K,EACxB9jB,kBACAuZ,iBACA9tC,QACAk4C,aACAh2C,cACAk2C,qBACAE,mBACAC,mBACAC,mBACAC,kBACAC,sBAEA,MAAM,uBACJC,EAAsB,0BACtBC,IACEpoE,EAAAA,EAAAA,MACEkb,GAAOs/C,EAAAA,GAAAA,KAEP6N,EAAsB/K,IAAmBgL,EAAAA,IAC1ChL,IAAmBiL,EAAAA,IAAsB,MAAQ,MAAS,MAEzDC,GAA2BlO,EAAAA,GAAAA,MAAoC3I,EAAAA,MAAqByP,YAAc,EAElG5tC,GAAOsoC,EAAAA,GAAAA,IAAQ,IAAMh0E,OAAOC,OAAO2/E,GAAY7lF,OAAQkvB,GAAQA,EAAI8iB,eAAgB,CAAC6zC,IAEpFe,GAAuBtJ,EAAAA,GAAAA,GAAiB7e,IAC5CA,EAAEooB,kBAGFP,EAAuB,CAAE34C,MAFE,UAAVA,EAAoB,OAAS,UAG9C24C,EAAuB,CAAEQ,sBAAsB,MAG3CC,GAA6BzJ,EAAAA,GAAAA,GAAiB7e,IAClDA,EAAEooB,kBAEF,IAAIG,EAAWvL,EAAiB,EAC5BuL,EAAWN,EAAAA,MACbM,EAAWP,EAAAA,KAEb,MAAMQ,EAAsBD,IAAaP,EAAAA,IACrCS,GAAAA,GACCF,IAAaN,EAAAA,IAAsBS,GAAAA,GAAgCC,GAAAA,GAExEd,EAAuB,CAAE7K,eAAgBuL,EAA4BK,8BAA8B,IACnGd,EAA0BU,KAGtBK,GAAuBhK,EAAAA,GAAAA,GAAgB,KAC3CpzD,OAAOC,KAAKo9D,EAAAA,IAAoB,SAAU,yBAG5C,OACErN,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,CACG0O,GAAAA,IAA6B33C,IAC5BqqC,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAC+L,GAAgB,CACfh0C,YAAaA,EACbi0C,WAAYiC,EACZhC,gBAAiBoC,KAEnBrO,EAAAA,GAAAA,GAAC6N,GAAAA,EAAa,OAGjBzjB,EAAgBjV,WACfitB,EAAAA,GAAAA,IAACE,GAAAA,EAAQ,CACPn7D,KAAK,UACLo7D,QAAS4L,EAAiBnN,SAAA,EAE1BhB,EAAAA,GAAAA,GAAA,QAAM5jD,UAAU,iBAAgB4kD,SAAEz/C,EAAK,uBACtCstD,EAA2B,IAC1B7O,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,cAAa4kD,SAAE6N,QAIpC7O,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPn7D,KAAK,QACLo7D,QAAS6L,EAAiBpN,SAEzBz/C,EAAK,kBAEPsY,EAAK1kC,IAAKiiB,IACT4oD,EAAAA,GAAAA,GAAC2P,GAAAA,EAAa,CACZv4D,IAAKA,EACLye,MAAOA,EACP+5C,cAAY,EACZC,YAAU,EACVC,aAAcxB,EACdyB,aAAcxB,MAGlBvO,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPn7D,KAAK,WACLo7D,QAAS8L,EAAiBrN,SAEzBz/C,EAAK,mBAER6gD,EAAAA,GAAAA,IAACE,GAAAA,EAAQ,CACPn7D,KAAK,WACLo7D,QAASuM,EAAqB9N,SAAA,EAE9BhB,EAAAA,GAAAA,GAAA,QAAM5jD,UAAU,iBAAgB4kD,SAAEz/C,EAAK,oBACvCy+C,EAAAA,GAAAA,GAACgQ,GAAAA,EAAQ,CACPtnF,GAAG,WACHunF,MAAO1uD,EAAe,SAAVsU,EAAmB,2BAA6B,2BAC5Dq6C,QAAmB,SAAVr6C,EACTs6C,aAAW,QAGf/N,EAAAA,GAAAA,IAACE,GAAAA,EAAQ,CACPn7D,KAAK,aACLo7D,QAAS0M,EAA2BjO,SAAA,EAEpChB,EAAAA,GAAAA,GAAA,QAAM5jD,UAAU,4BAA2B4kD,SAAEz/C,EAAK,2BAClDy+C,EAAAA,GAAAA,GAACoQ,GAAAA,EAAM,CAAC98C,MAAOo7C,OAEhB2B,EAAAA,MACCrQ,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPn7D,KAAK,cACLo7D,QAASiN,EAAqBxO,SAE7Bz/C,EAAK,6B,+DCtKhB,MAOA,GAP6Co+C,IAC3C,MAAM,OAAE17B,GAAW07B,EACb2Q,GAAmBzQ,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,oBAAqBp8B,GAE7E,OAAOqsC,GAAmBtQ,EAAAA,GAAAA,GAACsQ,EAAgB,IAAK3Q,SAAYhwE,GCuG9D,IAAe6wE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAAYj9E,IAC9B,MAAM,cAAEiC,GAAkBjC,EACpB2xC,EAAc1vC,GAAgB8S,EAAAA,EAAAA,KAAW/U,EAAQiC,QAAiBsH,EAClE4gF,EAAsBnqF,EAAO00B,0BAA0BC,SACvDymD,GAAkBp1D,EAAAA,EAAAA,KAA0BhmB,GAElD,MAAO,CACLgqC,YAAa2H,GAAa3H,YAC1BmgD,sBACA/O,oBATgB6B,CApFiBmN,EAAGpgD,cAAamgD,sBAAqB/O,sBACxE,MAAM,eAAEiP,EAAc,gBAAEC,EAAe,uBAAE33C,IAA2B1yB,EAAAA,EAAAA,MAE9DsqE,GAAY7L,EAAAA,GAAAA,OACX8L,EAAkBC,EAAsBC,IAA0BC,EAAAA,GAAAA,IAAQ,IAC1EC,EAAeC,EAAYC,IAAcH,EAAAA,GAAAA,IAAQ,IACjDI,EAAoBC,EAAkBC,IAAqBN,EAAAA,GAAAA,IAAQ,IACpE,SAAEO,IAAaC,EAAAA,EAAAA,MAEfC,EAA+C,gBAAtBphD,GAAa5nC,KAAyB4nC,OAAczgC,EAE7E8hF,EAAQrhD,GAAashD,MAAgD,KAAvCthD,EAAYshD,OAAQh+E,EAAAA,EAAAA,YAA0B/D,GAClFgiF,EAAAA,GAAAA,GAAWjB,EAAiBe,IAE5BG,EAAAA,GAAAA,GAAsB,EAAEC,MAClBjB,GAAoBxgD,GAAeA,EAAYvhB,aAAegjE,GAAiBhjE,aACjFoiE,IACAH,MAED,CAAC1gD,EAAawgD,EAAkBK,EAAYH,IAE/C,MAAMgB,GAAuB9P,EAAAA,GAAAA,IAAa51E,IACxC,MAAM2lF,EAAoBxB,GAAqB3mF,KAC5C41C,GAAW,kBAAmBA,GAAUA,EAAO3wB,aAAeziB,EAAQ1D,IAEzEmoF,IACAJ,EAAe,CACbrgD,YAAa2hD,GAAqB,CAAEvpF,KAAM,UAAWqmB,WAAYziB,EAAQ1D,OAE1E,CAACmoF,EAAsBJ,EAAgBF,KAE1CoB,EAAAA,GAAAA,GAAWT,EAAYF,EAlCE,UAkCmCrhF,GAE5D,MAAMqiF,GAAyBhQ,EAAAA,GAAAA,IAAY,KACrCR,EACFzoC,IAGFq4C,KACC,CAACA,EAAkB5P,IAEtB,OACEY,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,6BAA4B4kD,SAAA,CACxCrkE,QAAQq0E,GAAiB5gD,KACxB4vC,EAAAA,GAAAA,GAACiS,GAAAA,EAAiB,CAChB1pF,SAAU6nC,EACV8hD,UAAQ,EACR91D,UAAU,yBAGd4jD,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACLmmE,IAAK4L,EACLwB,QAASb,EACTv1B,KAAK,UACL4mB,MAAM,cACNvmD,UAAU,eACVmmD,QAASyP,EAAuBhR,SAE/B5wC,GACC4vC,EAAAA,GAAAA,GAACoS,GAAAA,EAAiB,CAChBC,aAAc11E,QAAQ60E,GACtBc,kBAAkB,iBAClBC,cAAef,GAAwBgB,UAAUxR,UAEjDhB,EAAAA,GAAAA,GAACyS,GAAAA,EAAW,CAEV5jE,WAAYuhB,EAAYvhB,WACxBktC,KAtEY,GAuEZ22B,UAAWC,EAAAA,KAHNviD,EAAYvhB,eAMnBmxD,EAAAA,GAAAA,GAAC4S,GAAAA,EAAQ,OAEf5S,EAAAA,GAAAA,GAACsQ,GAAgB,CACfuC,gBAAiBlC,EACjB1sC,OAAQktC,EACR2B,oBAAqBhB,EACrB3O,QAASkO,UC7BX0B,GAA0B,CAAEx3E,UAAM5L,GAClCqjF,GAA0B,CAAEtqF,QAAIiH,GA8QtC,IAAe6wE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBj9E,IACC,MAAMiO,GAAW/N,EAAAA,EAAAA,KAAeF,IAE9B2yB,MAAOk6D,EAAW,eAAE7uB,EAAc,OAAE58D,EAAM,QAAEs3B,GAC1CzqB,EAAS4pB,cACP,gBACJhS,EAAe,UAAEuc,EAAS,qBAAE8C,GAC1BllC,GACE,4BAAE8sF,IAAgCh4C,EAAAA,GAAAA,GAAqB90C,GAE7D,MAAO,CACL6sF,cACAl2D,YAAWqnC,GAAiBznD,QAAQynD,EAAeh1D,OAC9Cg1D,EAAevtD,UAAYutD,EAAexkC,aAC/CuzD,mBAAoB3rF,EACpB4rF,WAAYt0D,EACZ+W,OAAOm4C,EAAAA,EAAAA,KAAY5nF,GACnB6lB,kBACAuc,YACA8C,uBACA+nD,kBAAmB12E,SAAQzJ,EAAAA,EAAAA,KAAyB9M,IACpD8sF,8BACA52E,sBAAsBC,EAAAA,EAAAA,KAA2BnW,GACjDktF,eAAgB32E,QAAQvW,EAAOgJ,MAAMipE,QAAQ3mB,QAC7Cie,YAAahzD,QAAQvW,EAAO6lE,SAAS0D,aACrC4jB,gBAAgBC,EAAAA,EAAAA,KAAqBptF,KA1BvBi9E,CA5Q8BoQ,EAChDC,mBACA1nF,UACA2nF,iBACAC,kBACAX,cACAl2D,YACAzgB,uBACAu3E,uBACAV,qBACAC,aACAv9C,QACA5pB,kBACAuc,YACA8C,uBACA+nD,oBACAH,8BACAI,iBACA3jB,cACA4jB,iBACAO,gBACAzF,mBACAD,mBACAD,mBACA4F,cAEA,MAAM,oBACJC,EAAmB,uBACnBxF,EAAsB,sBACtByF,EAAqB,WACrBC,EAAU,mBACV3jB,EAAkB,qBAClBpxC,IACE9Y,EAAAA,EAAAA,MAEE8tE,GAAUvS,EAAAA,GAAAA,KACVrgD,GAAOs/C,EAAAA,GAAAA,MACP,SAAEyQ,IAAaC,EAAAA,EAAAA,OAEd6C,EAAeC,EAAiBC,IAAqBvD,EAAAA,GAAAA,KAGtDwD,GADiCC,EAAAA,GAAkBC,SACzCzoF,IAAYwoF,EAAAA,GAAkBjK,UAExCmK,GAAqBvS,EAAAA,GAAAA,IAAQ,IAC1BiR,GACHuB,EAAAA,GAAAA,GAAmB,IAAI9rF,KAAkB,IAAbuqF,SAC5BzjF,EACH,CAACyjF,KAEE,iBAAE1H,EAAgB,qBAAEE,EAAoB,yBAAED,GAA6Bb,GAC3EqJ,EACAloE,EACAuc,GAAa8C,EACb+nD,EACAH,GACCI,GAGGsB,GAAyBpP,EAAAA,GAAAA,GAAiB7e,IAC9CA,EAAE+Y,iBACF/Y,EAAEooB,kBACEpf,EACFukB,IAEA3jB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBC,sBAIjDokB,EAAAA,GAAAA,IAAW1S,EAAAA,GAAAA,IAAQ,IAAOoR,EAAiB,CACzC,eAAgBqB,EAChB,cAAeA,EACf,eAAgBA,KACZE,EAAAA,IAAU,CAAE,QAASF,SACvBjlF,EAAY,CAAC4jF,KAEjB,MAAMwB,GAA8D5S,EAAAA,GAAAA,IAAQ,IACnE,EAAG6S,YAAW/wC,aACnB+7B,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACLuzE,OAAQoC,IAAYjD,EACpBv1B,KAAK,UACL4mB,MAAM,cACNvmD,UAAW6nB,EAAS,SAAW,GAE/Bs+B,QAASgS,EAAUS,EAAY,IAAMjB,IACrCnR,UAAW2R,EAAUJ,EAAQ,qBAAuB,sBAAsBnT,UAE1EhB,EAAAA,GAAAA,GAAA,OAAK5jD,WAAW0lD,EAAAA,GAAAA,GACd,sBACCyS,GAAW,aACZV,GAAwB,oBAK7B,CAACU,EAASjD,EAAU6C,EAASJ,EAASF,IAEnCoB,GAAoBzP,EAAAA,GAAAA,GAAgB,KACnCyN,GACHa,EAAc,MAIZoB,GAAyB1P,EAAAA,GAAAA,GAAgB,KAC7CgJ,EAAuB,CAAE0E,6BAA8BA,MAGnDiC,GAAmB3P,EAAAA,GAAAA,GAAgB,KACvC0O,MAGIkB,GAAoB5P,EAAAA,GAAAA,GAAgB,KACpCyN,GAAejnF,IAAYwoF,EAAAA,GAAkBa,cAC/Cl2D,EAAqB,CACnB32B,KAAM,cACN62B,0BAA0B,MAK1Bi2D,EAAmB34E,QAAQw2E,IAC5BnnF,IAAYwoF,EAAAA,GAAkBa,cAC9BrpF,IAAYwoF,EAAAA,GAAkBC,SAE7Bc,EAAkBjE,GAAY+B,GAAqBiC,EAAmBA,GAE5ExU,EAAAA,GAAAA,IAAU,IAAOyU,GAAkBxM,EAAAA,GAAAA,GAAsB,IAAMgL,UAAapkF,EAAY,CAAC4lF,EAAiBxB,IAE1G,MAAMyB,GAAyBxpF,IAAYwoF,EAAAA,GAAkBC,SACzDlzD,EAAK,iBACLA,EAAK,UAEHk0D,GAAgBpF,EAAAA,IAAU,gCAA2ChoD,EAAAA,IAAQqtD,iBAAehzB,UAE5F3yC,IAAe4lE,EAAAA,GAAAA,OAGf,uCACJC,GAAsC,gCACtCC,KACEC,EAAAA,GAAAA,GAAsCpC,GAIpCqC,IAAgB5T,EAAAA,GAAAA,IAAQ,KAE1BC,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,CACG0T,IACC1U,EAAAA,GAAAA,GAACgW,GAAAA,EAAQ,CACP7uE,KAAK,WACLlR,MAAOy+E,EACPuB,UAAQ,EACR5rB,YAAa1tD,QAAQw2E,GACrB/2D,UAAU,0BACVmmD,QAASyR,EACTkC,uBAAqB,EACrBC,SAAUpD,KAGbI,IACCnT,EAAAA,GAAAA,GAACgW,GAAAA,EAAQ,CACP55D,UAAU,0BACVh0B,OAAQ+qF,EACR5Q,QAAS0R,EACTgC,UAAQ,EACR5rB,aAAW,EACX8rB,SAAUnD,QAKjB,CAACG,EAAoBuB,IAElBz3D,IAAUklD,EAAAA,GAAAA,IAAQ,KACtB,IAAIiU,EAAc,GAOlB,OANIvwB,GAAAA,IAAYzzC,OAAO0zC,MAAM7oC,UAC3Bm5D,EAAc,SAAShkE,OAAO0zC,MAAM7oC,cAGtCm5D,GAAe,GAAGC,EAAAA,OAAYZ,KAEvBW,GACN,CAACX,KAEJ,OACEzV,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,iBAAgB4kD,UAC7BoB,EAAAA,GAAAA,IAAA,OACE15E,GAAG,iBACH0zB,UAAU,cACV,4BAAwBypC,GAAAA,KAAYywB,EAAAA,UAAmB3mF,EAAUqxE,SAAA,CAEhEmT,EAAQ1R,QAASzC,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,wBACjC4jD,EAAAA,GAAAA,GAACuW,GAAAA,EAAY,CACXC,QAASzB,EACT0B,OAAQx5D,GACRb,WAAW0lD,EAAAA,GAAAA,GACT,YACAqS,EAAQ1R,OAAS,MACjBiR,GAAoBS,EAAQ1R,OAAS,gBACrCmT,GAAuCt5D,SAAW63D,EAAQ1R,OAAS,sBAErEiU,UAAWtC,EACXpR,UAAW0Q,GAAoBS,EAAQ1R,MAAQ,QAAU,OACzDkU,iBAAkB9wB,GAAAA,IAAYywB,EAAAA,KAAcvmE,GAAe,QAAKpgB,EAChEinF,gBAAiBzC,EAAQ1R,MAAQoT,QAAkClmF,EAAUqxE,UAE7EhB,EAAAA,GAAAA,GAACkO,GAAiB,CAChBC,iBAAkBA,EAClBC,iBAAkBA,EAClBC,iBAAkBA,EAClBC,gBAAiB+F,EACjB9F,gBAAiB+F,OAGrBtU,EAAAA,GAAAA,GAAC6W,GAAAA,EAAW,CACVC,QAAQ,wBACRC,oBAAoB,+BACpB36D,WAAW0lD,EAAAA,GAAAA,GACRqR,GAAsBC,EAAc,wBAAqBzjF,EAC1D+jF,GAAoB,uBAEtBpgD,MAAOsgD,OAAkBjkF,EAAagkF,GAAkBV,EACxD+D,QAASzB,EACTx4D,UAAWA,GAA0C,cAA7B4uD,EACxBsL,aAA2C,cAA7BtL,EAA2C,cAAWh8E,EACpEunF,uBAAqD,cAA7BvL,GAAsD,UAAV91C,EAAoB,aAAUlmC,EAClGwnF,YAAa3B,GACb4B,aAAa,MACbnB,SAAUt5E,QAAQw2E,GAAsBC,GACxCiE,SAAUvD,EACVC,QAASA,EACTuD,QAASrC,EACTsC,eAA6C,cAA7B5L,EAA2CuJ,OAAyBvlF,EACpF6nF,QAASpC,EAAkBpU,SAE1B+U,KAEFz5E,IAAwB0jE,EAAAA,GAAAA,GAACwQ,GAAY,IACrC7gB,IACCqQ,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACLuzE,QAASb,EACTv1B,KAAK,UACL4mB,MAAM,cACNC,UAAW,GAAGuR,EAAQ,8DACtB5R,QAAS4S,EACT/4D,WAAW0lD,EAAAA,GAAAA,IAAgBxlE,GAAwB,iBAAiB0kE,UAEpEhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,YAGfilC,EAAAA,GAAAA,GAACyX,GAAAA,EAAc,CACbxzC,OAAqC,YAA7B0nC,EACR+L,UAAQ,EACRt7D,UAAU,2BAA0B4kD,UAEpChB,EAAAA,GAAAA,GAAC6L,GAAuB,CACtBH,iBAAkBA,EAClBE,qBAAsBA,EACtBrJ,QAAS2S,c,gBC5UrB,MAQA,IAAe1U,EAAAA,GAAAA,IARuBmX,EAAGnR,YAAWzuC,cAAagkB,UACjC,MAEvByqB,EAAU99E,IACbs3E,EAAAA,GAAAA,GAACuN,GAAAA,EAAM,CAACqK,eAAa,EAACn3E,KAAMs3B,EAAagkB,KAAMA,KAC/CikB,EAAAA,GAAAA,GAACuN,GAAAA,EAAM,CAACqK,eAAa,EAAC77B,KAAMA,EAAM5nD,KAAMqyE,EAAUzrC,QC4FxD,IAAeylC,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBj9E,IACQ,CACL2xC,aAAa58B,EAAAA,GAAAA,IAAW/U,EAAQA,EAAOiC,iBAHzBg7E,CAtFqBwU,EAAG9/C,kBAC1C,MAAM,qBAAE+/C,EAAoB,oBAAEC,EAAmB,oBAAEvT,IAAwBn+D,EAAAA,EAAAA,OACrE,gBACJ6/D,EAAe,mBACfD,EAAkB,sBAClB+R,EAAqB,uBACrB7R,EAAsB,0BACtB8R,IACE7R,EAAAA,GAAAA,KAEEC,EAAiC,CAAE39E,GAAI,IAAKqyC,KAAM,WAAYurC,WAAY,IAC1E4R,EAAoBhS,EAAgBt8E,KAAK48E,GAAaA,EAAU99E,KAAOu9E,IAAuBI,EAE9F8R,GAAwBnW,EAAAA,GAAAA,IAAawE,IACzCwR,EAAsBxR,EAAU99E,IAChC87E,EAAoB,CAAE/L,iBAAkB,GAAK,CAAEp2D,uBAAuB,KACrE,CAAC21E,EAAuBxT,IAErB4T,GAAwBpW,EAAAA,GAAAA,IAAY,KACxC8V,KACC,CAACA,IAEEO,GAAuBrW,EAAAA,GAAAA,IAAarb,IACxCA,EAAEooB,kBACFkJ,GAA2B9R,IAC1B,CAACA,EAAwB8R,IAEtBK,GAAgBtW,EAAAA,GAAAA,IAAY,EAAGgT,YAAW/wC,aAC9Cm+B,EAAAA,GAAAA,IAAA,OAEEG,QAASyS,EACT54D,WAAW0lD,EAAAA,GAAAA,GAAe,2BAA4B79B,GAAU,UAAU+8B,SAAA,EAE1EhB,EAAAA,GAAAA,GAAC2X,GAAe,CAACnR,UAAW0R,EAAmBngD,YAAaA,EAAagkB,KAAK,SAC7Em8B,EAAkBn9C,OALdm9C,GAAmBxvF,IAOzB,CAACwvF,IAEJ,OACE9V,EAAAA,GAAAA,IAACmU,GAAAA,EAAY,CACXn6D,UAAU,4BACVo6D,QAAS8B,EACTtV,UAAU,OAAMhC,SAAA,CAEf,CAACqF,KAAwBH,GAAiB/wE,IAAKqxE,IAC9CpE,EAAAA,GAAAA,IAACE,GAAAA,EAAQ,CAEPC,QAASA,IAAM4V,EAAsB3R,GACrCpqD,UAAU,6BACVkxD,YAAYtN,EAAAA,GAAAA,GAAC2X,GAAe,CAACnR,UAAWA,EAAWzuC,YAAaA,EAAagkB,KAAK,SAAUilB,SAAA,CAE3FwF,EAAUzrC,KACVyrC,EAAU99E,KAAOu9E,IAAsBjG,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,YAN9CyrC,EAAU99E,MASnBs3E,EAAAA,GAAAA,GAAC6N,GAAAA,EAAa,KACd7N,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPn7D,KAAK,MACLo7D,QAAS6V,EAAsBpX,SAChC,kBAGAkX,EAAkBxvF,KAAO29E,EAAoB39E,KAC5Cs3E,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPn7D,KAAK,WACLo7D,QAASA,IAAMwV,EAAoB,CAAE3Y,YAAa8Y,EAAkBxvF,KAAMs4E,SAC3E,uBAIFkX,EAAkBxvF,KAAO29E,EAAoB39E,IAAMw9E,EAAgBj+E,OAAS,IAC3Em6E,EAAAA,GAAAA,IAACE,GAAAA,EAAQ,CACPlmD,UAAU,gCACVmmD,QAAS8V,EAAqBrX,SAAA,EAE9BhB,EAAAA,GAAAA,GAACgQ,GAAAA,EAAQ,CACPE,QAAS/J,EACT8J,MAAM,oDACN,0BCrEZ,IAAezP,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBj9E,IACC,MAAMiC,EAAgBjC,EAAOiC,cACvB2qB,GAAcrG,EAAAA,EAAAA,KAAkBvmB,GAGtC,MAAO,CACLiC,gBACA89D,WAJqBnzC,IAAczrB,EAAAA,EAAAA,KAAqBnB,EAAQ4sB,EAAYtqB,MAJ9D26E,CAjBkBkV,EAAGlwF,gBAAe89D,eACtD,MAAM,SAAE17C,EAAQ,iBAAEk1C,IAAqBt5C,EAAAA,EAAAA,MAEvC,OACE+7D,EAAAA,GAAAA,IAAA,OACEG,QAASA,KACP93D,EAAS,CAAE/hB,GAAIL,IACfs3D,KAEFvjC,WAAW0lD,EAAAA,GAAAA,GAAe,wBAAyB3b,GAAY,UAAU6a,SAAA,EAEzEhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,mBAAmB,cCIpC,IAAeylC,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBj9E,IACC,MAAM,iBAAEowE,IAAqBlwE,EAAAA,EAAAA,KAAeF,GAE5C,MAAO,CACL+/D,SAAUqQ,EACVt3D,OAAOs5E,EAAAA,EAAAA,KAAqBpyF,KANdi9E,CAfoBoV,EAAGtyB,WAAUjnD,YACnD,MAAM,gBAAEw5E,IAAoBryE,EAAAA,EAAAA,MAE5B,OACE+7D,EAAAA,GAAAA,IAAA,OACEG,QAASA,IAAMmW,IACft8D,WAAW0lD,EAAAA,GAAAA,GAAe,0BAA2B3b,GAAY,UAAU6a,SAAA,EAE3EhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,SAAS,YAEpBilC,EAAAA,GAAAA,GAAA,QAAM5jD,UAAU,QAAO4kD,SAAE9hE,UCL/B,IAAeshE,EAAAA,GAAAA,IAZWmY,KAEtBvW,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,gBAAe4kD,SAAA,EAC5BhB,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,oBAAmB4kD,UAChChB,EAAAA,GAAAA,GAAC6X,GAAgB,OAEnB7X,EAAAA,GAAAA,GAACuY,GAAa,KACdvY,EAAAA,GAAAA,GAACyY,GAAe,QCmChBG,GAA0BzqF,OAAO8G,KAAKu/E,EAAAA,IAAmBvsF,OAAS,EAIxE,IAAI4wF,GAEJ,MA4NA,IAAerY,EAAAA,GAAAA,IA5NgBsY,EAC7B9sF,UACAinF,cACAG,aACAQ,kBACAD,iBACAE,uBACAzP,kBACApZ,uBACAqZ,mBACAyP,gBACAC,UACAgF,gBACAvX,sBAEA,MAAM,gBAAE9nB,EAAe,sBAAEs/B,IAA0B3yE,EAAAA,EAAAA,OAC5C4yE,EAAsBC,IAA2BvX,EAAAA,GAAAA,IAASvf,EAAAA,KAC1D+2B,EAAaC,IAAkBzX,EAAAA,GAAAA,OAC/B0X,EAA0BC,IAA+B3X,EAAAA,GAAAA,KAAS,IAEnE,uBACJ4X,EAAsB,6BAAEC,EAA4B,+BACpDC,EAA8B,mBAAEC,IAC9BC,EAAAA,GAAAA,GAAoBtV,GAClBuV,EAAuBvV,GAAoBr4E,IAAYwoF,EAAAA,GAAkBjK,SACzEsP,EAAsBD,GAAwBF,GAGlD1U,aAAc8U,EACdC,qBAAsBC,IACpBC,EAAAA,GAAAA,GAA4BjvB,GAAwBruD,QAAQw8E,IAE1De,GAAgBpV,EAAAA,GAAAA,KAAO,GAEvBqV,GAAmB3U,EAAAA,GAAAA,GAAgB,KACnCx5E,IAAYwoF,EAAAA,GAAkBjK,WAGlC2P,EAAc59D,SAAU,EACxB48D,GAAwB,MAGpBkB,GAAmB5U,EAAAA,GAAAA,GAAgB,KACvC0U,EAAc59D,SAAU,EAEpBu8D,KACF9jE,aAAa8jE,IACbA,QAAelpF,GAGjBkpF,GAAezmE,OAAO7gB,WAAW,KAC1B2oF,EAAc59D,SACjB48D,GAAwB,IAzDF,OA8DtBmB,GAAuB7U,EAAAA,GAAAA,GAAgB,KAC3CwT,EAAsB,CAAEsB,WAAY9F,EAAAA,GAAkB+F,aAGlDC,GAAuBhV,EAAAA,GAAAA,GAAgB,KAC3CwT,EAAsB,CAAEsB,WAAY9F,EAAAA,GAAkBC,aAGlDgG,GAAuBjV,EAAAA,GAAAA,GAAgB,KAC3CwT,EAAsB,CAAEsB,WAAY9F,EAAAA,GAAkBkG,WACtDhhC,MAGIihC,GAAoBnV,EAAAA,GAAAA,GAAgB3qE,UACxC,GAAIs+E,EACF,IACEG,GAA4B,SACtBH,EAAYyB,qBAClBtB,GAA4B,SAEtBlnE,OAAO0zC,OAAO+0B,WACtB,CAAE,MAAOl0B,GAEPr+B,QAAQruB,MAAM,8CAA+C0sD,EAC/D,CAAE,QACA2yB,GAA4B,EAC9B,MAEAlnE,OAAO0oE,SAASC,WAIdC,GAAyBxV,EAAAA,GAAAA,GAAgB,KAC7CwT,EAAsB,CAAEsB,WAAY9F,EAAAA,GAAkByG,oBAGlDC,GAAuB1V,EAAAA,GAAAA,GAAgB,KAC3CwT,EAAsB,CAAEsB,WAAY9F,EAAAA,GAAkB2G,mBAGxDra,EAAAA,GAAAA,IAAU,KACR,IAAIsa,EASJ,OARIpvF,IAAYwoF,EAAAA,GAAkBjK,SAChC6Q,EAAmBhpE,OAAO7gB,WAAW,KACnC2nF,GAAwB,IA1GF,MA4GfgB,EAAc59D,SAAW8lC,EAAAA,KAClC82B,GAAwB,GAGnB,KACDkC,IACFrmE,aAAaqmE,GACbA,OAAmBzrF,KAGtB,CAAC3D,IAEJ,MAAMqvF,GAAmB7V,EAAAA,GAAAA,GAAgB,KACvCpzD,OAAO0zC,OAAOw1B,cACX1uE,KAAM3jB,GAAWmwF,EAAenwF,QAAU0G,IAC1Cs7D,MAAOtE,IAENr+B,QAAQruB,MAAM,6BAA8B0sD,QAIlDma,EAAAA,GAAAA,IAAU,KACRua,KACC,KAEHE,EAAAA,GAAAA,GACEF,EACCx1B,GAAAA,KAAax9B,EAAAA,IAtIkB,SAsIqB14B,GAGvD,MAAM4xB,GAAOqgD,EAAAA,GAAAA,KAEb,OACEQ,EAAAA,GAAAA,IAAA,OACE15E,GAAG,kBACH8yF,aAAep5B,EAAAA,QAAkCzyD,EAAnBwqF,EAC9BsB,aAAer5B,EAAAA,QAAkCzyD,EAAnByqF,EAA6BpZ,SAAA,EAE3DhB,EAAAA,GAAAA,GAACyT,GAAc,CACbC,iBAAkBmG,EAClB7tF,QAASA,EACT2nF,eAAgBA,EAChBG,cAAeA,EACfzF,iBAAkBgM,EAClBjM,iBAAkBoM,EAClBrM,iBAAkBsM,EAClB1G,QAASA,EACTF,qBAAsBA,EACtBD,gBAAiBA,KAEnB5T,EAAAA,GAAAA,GAAC2Y,GAAa,KACd3Y,EAAAA,GAAAA,GAACiK,GAAAA,GAAU,CACTlvC,KAAM84C,EAAuB,OAAS,WACtCzJ,YAAawO,GACbzO,UAAWn+E,EACX0vF,eAAa,EACbC,oBAAqBnH,EAAAA,GAAkBjK,SACvCqR,YAAU,EACVC,iBAAkBrH,EAAAA,GAAkBjK,SAASvJ,SAE3C7a,IACA,OAAQn6D,GACN,KAAKwoF,EAAAA,GAAkBjK,SACrB,OACEvK,EAAAA,GAAAA,GAACmE,GAAW,CACVG,qBAAsBuV,EACtBzV,gBAAiBA,EACjBC,iBAAkBwV,IAGxB,KAAKrF,EAAAA,GAAkBa,aACrB,OACErV,EAAAA,GAAAA,GAACoD,GAAU,CACT6P,YAAaA,EACbG,WAAYA,EACZjtB,SAAUA,EACV4tB,QAASA,IAGf,KAAKS,EAAAA,GAAkBC,SACrB,OAAOzU,EAAAA,GAAAA,GAAC4K,GAAW,CAAC1iF,OAAQyrF,EAAgBxtB,SAAUA,EAAU4tB,QAASA,IAC3E,QACE,WAIP+F,IACC9Z,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLoZ,OAAK,EACLC,OAAK,EACL3/D,WAAW0lD,EAAAA,GAAAA,GAAe,aAAckY,GACxCzX,QAASoY,EACT59D,UAAWs8D,EAAyBrY,SAEnCz/C,EAAK,yBAGTg4D,IACCvZ,EAAAA,GAAAA,GAACgc,GAAAA,EAAU,CACT/3C,OAAQogC,EACRlvB,UAAWykC,EACXb,cAAeA,EACfkD,qBAAsBxC,EACtByC,oBAAqB1C,KAGzBxZ,EAAAA,GAAAA,GAACoB,GAAa,CACZhM,QAAS6jB,EACT5X,iBAAkBmZ,EAClBlZ,aAAc0Z,EACdzZ,WAAY2Z,EACZ1Z,gBAAiBA,SC7PzB,GANoC7B,IAClC,MAAMwc,GAAUtc,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,WAE/C,OAAO8b,GAAUnc,EAAAA,GAAAA,GAACmc,EAAO,IAAKxc,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KCGpD,GANqCxB,IACnC,MAAM4a,GAAW1a,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,YAEhD,OAAOka,GAAWva,EAAAA,GAAAA,GAACua,EAAQ,IAAK5a,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KCuB3B,IA2BtBib,GAAW,SAAXA,GAAW,OAAXA,EAAAA,EAAW,eAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,2BAAXA,CAAW,EAAXA,IAAW,IAYhB,MAAMC,GAAeluF,OAAO8G,KAAKmnF,IAAan0F,OAAS,EA2evD,IAAeu4E,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBj9E,IACC,MAAMiO,GAAW/N,EAAAA,EAAAA,KAAeF,IAE9B63B,cAAc,MACZlF,EAAK,QACL+F,GACD,4BACD8kD,EAA2B,iBAC3BnL,EAAgB,WAChB6jB,EAAU,kBACVC,EACA5nB,aAAa,sBACXO,IAEA7gE,GACE,cACJhM,EACA4jE,UAAU,YACR0D,GACD,qBACD3E,EAAoB,gBACpBZ,GACEhkE,GAEE,eAAEu9E,IAAmBzoC,EAAAA,GAAAA,GAAqB90C,GAC1C4sB,GAAcrG,EAAAA,EAAAA,KAAkBvmB,GAChCo2F,EAAa7/E,QAAQqW,GAAatqB,IAClC27E,GAAmBoY,EAAAA,EAAAA,KAAuBr2F,GAC1CqzD,EAAmBplD,EAASolD,iBAC5B+nB,GAAkBp1D,EAAAA,EAAAA,KAA0BhmB,GAElD,MAAO,CACL6sF,YAAal6D,EACbq6D,WAAYt0D,EACZ49D,wBAA8C,IAArBjkB,EACzBkL,iBACAC,8BACAv7E,gBACAsnE,cACA4sB,oBACAC,aACAxxB,uBACAqZ,mBACA5qB,mBACAm6B,gBAAiBv/E,EAAS4pB,aAAawmC,UACvC2F,kBACAuyB,2BAA4BznB,EAC5BsM,kBACA8Y,WAAYgC,EAAWhC,WACvBsC,eAAgBN,EAAWM,iBAlDbvZ,CAxepB,UAAoB,IAClB0B,EAAG,WACHuV,EAAU,eACVsC,EAAc,YACd3J,EAAW,WACXG,EAAU,wBACVsJ,EAAuB,eACvB/Y,EAAc,4BACdC,EAA2B,cAC3Bv7E,EAAa,YACbsnE,EAAW,kBACX4sB,EAAiB,WACjBC,EAAU,qBACVxxB,EAAoB,iBACpBqZ,EAAgB,iBAChB5qB,EAAgB,gBAChBm6B,EAAe,gBACfxpB,EAAe,2BACfuyB,EAA0B,gBAC1Bnb,IAEA,MAAM,qBACJqb,EAAoB,uBACpBC,EAAsB,sBACtB7I,EAAqB,kBACrB8I,EAAiB,oBACjB/I,EAAmB,iBACnBgJ,EAAgB,gBAChBC,EAAe,SACfxyE,EAAQ,sBACRuuE,EAAqB,mBACrBzoB,IACElqD,EAAAA,EAAAA,OAEGstE,EAAgBuJ,IAAqBvb,EAAAA,GAAAA,IAAiB,KACtDwb,EAAc/Y,IAAmBgZ,EAAAA,GAAAA,MAGjCC,EAAeC,IAAoB3b,EAAAA,GAAAA,IAAiB,GAE3D,IAAI4b,EAA2BnB,GAAYoB,KAC3C,OAAQlD,GACN,KAAK9F,EAAAA,GAAkBkG,SACrB6C,EAAcnB,GAAY1B,SAC1B,MACF,KAAKlG,EAAAA,GAAkB+F,SACrBgD,EAAcnB,GAAY7B,SAC1B,MACF,KAAK/F,EAAAA,GAAkByG,gBACvB,KAAKzG,EAAAA,GAAkBiJ,gBACrBF,EAAcnB,GAAYsB,WAC1B,MACF,KAAKlJ,EAAAA,GAAkB2G,cACvB,KAAK3G,EAAAA,GAAkBmJ,cACrBJ,EAAcnB,GAAYwB,SAI9B,MAAMC,GAAcrY,EAAAA,GAAAA,GAAiBsY,IACnC,SAASC,IACP/E,EAAsB,CAAEsB,gBAAY3qF,IACpC4gE,EAAmB,CAAEnK,YAAQz2D,IAC7ButF,EAAkB,IAClBJ,EAAuB,CAAEr4B,WAAW,IACpCs4B,IACAxrF,WAAW,KACTsrF,EAAqB,CAAE9jE,MAAO,KAC9Bi7D,EAAoB,CAAEz4E,UAAM5L,IAC5BskF,EAAsB,CAAEvrF,QAAIiH,IAC5BmtF,EAAuB,CAAEr4B,WAAW,IACpC64B,EAAiBz0F,KAAKC,QAxEI,IA0E9B,CAEA,IAA8B,IAA1Bg1F,EAKJ,GAAIxD,IAAe9F,EAAAA,GAAkBmJ,cAKrC,GAAIrD,IAAe9F,EAAAA,GAAkBiJ,gBAArC,CAKA,GAAInD,IAAe9F,EAAAA,GAAkB2G,cAAe,CAClD,MAAM6C,EAAoB3xF,SAAS4xF,eAAe,2BAC9CD,GACFA,EAAkBE,MAEtB,CAEA,GAAI5D,IAAe9F,EAAAA,GAAkB+F,SACnC,OAAQqC,GACN,KAAKpsB,EAAAA,GAAgB2tB,YACrB,KAAK3tB,EAAAA,GAAgBuX,QACrB,KAAKvX,EAAAA,GAAgB4tB,QACrB,KAAK5tB,EAAAA,GAAgB6tB,cACrB,KAAK7tB,EAAAA,GAAgB8tB,YACrB,KAAK9tB,EAAAA,GAAgB+tB,QACrB,KAAK/tB,EAAAA,GAAgBguB,YACrB,KAAKhuB,EAAAA,GAAgBiuB,eACrB,KAAKjuB,EAAAA,GAAgBkuB,SACrB,KAAKluB,EAAAA,GAAgBmuB,SACrB,KAAKnuB,EAAAA,GAAgBouB,aAEnB,YADAruB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBgtB,OAG/C,KAAKhtB,EAAAA,GAAgBquB,sBAEnB,YADAtuB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgB4tB,UAE/C,KAAK5tB,EAAAA,GAAgBsuB,2BAEnB,YADAvuB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBquB,wBAG/C,KAAKruB,EAAAA,GAAgBuuB,mBACrB,KAAKvuB,EAAAA,GAAgBwuB,kBACrB,KAAKxuB,EAAAA,GAAgByuB,gBACrB,KAAKzuB,EAAAA,GAAgB0uB,oBACrB,KAAK1uB,EAAAA,GAAgB2uB,WACrB,KAAK3uB,EAAAA,GAAgB4uB,gBACrB,KAAK5uB,EAAAA,GAAgB6uB,aACrB,KAAK7uB,EAAAA,GAAgB8uB,iBACrB,KAAK9uB,EAAAA,GAAgB+uB,gBACrB,KAAK/uB,EAAAA,GAAgBgvB,kBACrB,KAAKhvB,EAAAA,GAAgBivB,kBACrB,KAAKjvB,EAAAA,GAAgBkvB,qBACrB,KAAKlvB,EAAAA,GAAgBmvB,gBACrB,KAAKnvB,EAAAA,GAAgBovB,oBACrB,KAAKpvB,EAAAA,GAAgBqvB,eACrB,KAAKrvB,EAAAA,GAAgBsvB,cACrB,KAAKtvB,EAAAA,GAAgBuvB,aACrB,KAAKvvB,EAAAA,GAAgBwvB,qBACrB,KAAKxvB,EAAAA,GAAgBC,iBACrB,KAAKD,EAAAA,GAAgByvB,gBACrB,KAAKzvB,EAAAA,GAAgB0vB,wBAEnB,YADA3vB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgB+tB,UAG/C,KAAK/tB,EAAAA,GAAgB2vB,oBAInB,YAHA5vB,EAAmB,CACjBnK,OAAQuJ,EAAca,EAAAA,GAAgByvB,gBAAkBzvB,EAAAA,GAAgBC,mBAI5E,KAAKD,EAAAA,GAAgB4vB,8BACrB,KAAK5vB,EAAAA,GAAgB6vB,gBAEnB,YADA9vB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgByvB,kBAG/C,KAAKzvB,EAAAA,GAAgB8vB,2BAEnB,YADA/vB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgB2vB,sBAG/C,KAAK3vB,EAAAA,GAAgB+vB,0BAEnB,YADAhwB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgB4vB,gCAG/C,KAAK5vB,EAAAA,GAAgBgwB,8BAEnB,YADAjwB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgB+vB,4BAG/C,KAAK/vB,EAAAA,GAAgBiwB,kCACrB,KAAKjwB,EAAAA,GAAgBkwB,iCAEnB,YADAnwB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBuuB,qBAE/C,KAAKvuB,EAAAA,GAAgBmwB,+BACrB,KAAKnwB,EAAAA,GAAgBowB,8BAEnB,YADArwB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgByuB,kBAE/C,KAAKzuB,EAAAA,GAAgBqwB,mCACrB,KAAKrwB,EAAAA,GAAgBswB,kCAEnB,YADAvwB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgB0uB,sBAE/C,KAAK1uB,EAAAA,GAAgBuwB,0BACrB,KAAKvwB,EAAAA,GAAgBwwB,yBAEnB,YADAzwB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgB2uB,aAE/C,KAAK3uB,EAAAA,GAAgBywB,+BACrB,KAAKzwB,EAAAA,GAAgB0wB,8BAEnB,YADA3wB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgB4uB,kBAE/C,KAAK5uB,EAAAA,GAAgB2wB,4BACrB,KAAK3wB,EAAAA,GAAgB4wB,2BAEnB,YADA7wB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgB6uB,eAE/C,KAAK7uB,EAAAA,GAAgB6wB,gCACrB,KAAK7wB,EAAAA,GAAgB8wB,+BAEnB,YADA/wB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgB8uB,mBAE/C,KAAK9uB,EAAAA,GAAgB+wB,+BACrB,KAAK/wB,EAAAA,GAAgBgxB,8BAEnB,YADAjxB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgB+uB,kBAE/C,KAAK/uB,EAAAA,GAAgBixB,iCACrB,KAAKjxB,EAAAA,GAAgBkxB,gCAEnB,YADAnxB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBgvB,oBAE/C,KAAKhvB,EAAAA,GAAgBmxB,oCACrB,KAAKnxB,EAAAA,GAAgBoxB,mCAEnB,YADArxB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBkvB,uBAE/C,KAAKlvB,EAAAA,GAAgBqxB,iCACrB,KAAKrxB,EAAAA,GAAgBsxB,gCAEnB,YADAvxB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBivB,oBAE/C,KAAKjvB,EAAAA,GAAgBuxB,iBAEnB,YADAxxB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBsvB,gBAE/C,KAAKtvB,EAAAA,GAAgBwxB,wBAEnB,YADAzxB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBuxB,mBAE/C,KAAKvxB,EAAAA,GAAgByxB,qBAEnB,YADA1xB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBwxB,0BAE/C,KAAKxxB,EAAAA,GAAgB0xB,sBAEnB,YADA3xB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgByxB,uBAE/C,KAAKzxB,EAAAA,GAAgB2xB,0BAEnB,YADA5xB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgB0xB,wBAE/C,KAAK1xB,EAAAA,GAAgB4xB,2BACrB,KAAK5xB,EAAAA,GAAgB6xB,aACrB,KAAK7xB,EAAAA,GAAgB8xB,kCAEnB,YADA/xB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBuvB,eAE/C,KAAKvvB,EAAAA,GAAgB+xB,uBAEnB,YADAhyB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgB4xB,6BAE/C,KAAK5xB,EAAAA,GAAgBgyB,2BAEnB,YADAjyB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgB+xB,yBAE/C,KAAK/xB,EAAAA,GAAgBiyB,wBAEnB,YADAlyB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBgyB,6BAE/C,KAAKhyB,EAAAA,GAAgBkyB,mBAEnB,YADAnyB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgB8xB,oCAE/C,KAAK9xB,EAAAA,GAAgBmyB,uBAEnB,YADApyB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBkyB,qBAG/C,KAAKlyB,EAAAA,GAAgBoyB,oBACrB,KAAKpyB,EAAAA,GAAgBqyB,kBAEnB,YADAtyB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBuX,UAG/C,KAAKvX,EAAAA,GAAgBsyB,aAEnB,YADAvyB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBqyB,oBAG/C,KAAKryB,EAAAA,GAAgBuyB,iCACrB,KAAKvyB,EAAAA,GAAgBwyB,iCAEnB,YADAzyB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgByyB,gCAG/C,KAAKzyB,EAAAA,GAAgByyB,8BACrB,KAAKzyB,EAAAA,GAAgB0yB,yBAGnB,OAFAlK,EAAsB,CAAEsB,WAAY9F,EAAAA,GAAkBjK,gBACtDha,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBgtB,OAG/C,KAAKhtB,EAAAA,GAAgB2yB,cACrB,KAAK3yB,EAAAA,GAAgBiiB,YAEnB,YADAliB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBmuB,WAG/C,KAAKnuB,EAAAA,GAAgB4yB,eAEnB,YADA7yB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBkuB,WAG/C,KAAKluB,EAAAA,GAAgB6yB,sBAEnB,YADA9yB,EAAmB,CAAEnK,OAAQoK,EAAAA,GAAgBmvB,kBAQ/CrF,IAAe9F,EAAAA,GAAkBjK,UAAYmS,EAC/C1D,EAAsB,CAAEsB,WAAY9F,EAAAA,GAAkBa,eAKxD0I,GA3MA,MAFE/E,EAAsB,CAAEsB,WAAY9F,EAAAA,GAAkByG,uBALtDjC,EAAsB,CAAEsB,WAAY9F,EAAAA,GAAkB2G,qBALtD4C,MA0NEuF,GAAoB9d,EAAAA,GAAAA,GAAiBzsD,IACrCuhE,IAAe9F,EAAAA,GAAkBC,UAKrCuE,EAAsB,CAAEsB,WAAY9F,EAAAA,GAAkBa,eAElDt8D,IAAUk6D,GACZ4J,EAAqB,CAAE9jE,WAPvBmkE,EAAkBnkE,KAWhBwqE,GAAoB/d,EAAAA,GAAAA,GAAgB,KACxCwT,EAAsB,CAAEsB,WAAY9F,EAAAA,GAAkBa,eACtDwH,EAAqB,CAAE9jE,MAAO,KAC9Bk7D,EAAsB,CAAEvrF,GAAI+wD,OAG9BqnB,EAAAA,GAAAA,IACE,KACE,MAAMpkD,EAAa49D,IAAe9F,EAAAA,GAAkBkG,SAC9C5S,EAAawS,IAAe9F,EAAAA,GAAkBjK,SAC9CiZ,GAAqBhH,IAAenY,EAK1C,OAAK3nD,GAAc8mE,IAAwB1b,IAAeprD,GACpDggE,GAA2B8G,GACxBza,EAAAA,GAAAA,GAAsB,KAC3B8U,WAGF,GAGJ,CAACnB,EAAyBpC,EAAYuD,EAAarB,EAAYnY,IAGjE,MAAMof,GAAqBje,EAAAA,GAAAA,GAAiB7e,IACtC2zB,IAAe9F,EAAAA,GAAkBa,eAIrC1uB,EAAE+Y,iBACFsZ,EAAsB,CAAEsB,WAAY9F,EAAAA,GAAkBa,kBAGlDqO,GAA4Ble,EAAAA,GAAAA,GAAiB7e,IACjDA,EAAE+Y,iBACFj1D,EAAS,CAAE/hB,GAAIL,EAAeywD,sBAAsB,MAGhD6qC,GAAsBne,EAAAA,GAAAA,GAAiB7e,IAC3CA,EAAE+Y,iBACFsZ,EAAsB,CAAEsB,WAAY9F,EAAAA,GAAkBkG,aAGlDkJ,GAAuBpe,EAAAA,GAAAA,GAAiB7e,IAC5CA,EAAE+Y,iBACFsZ,EAAsB,CAAEsB,WAAY9F,EAAAA,GAAkB+F,cAGxD1F,EAAAA,GAAAA,IAAW1S,EAAAA,GAAAA,IAAQ,KAAM,CACvB,cAAeshB,MAEVI,EAAAA,IAAc,CACjB,cAAeH,MAEb5O,EAAAA,IAAU,CACZ,QAAS4O,EACT,QAASC,MAEPrN,EAAAA,IAAaxB,EAAAA,IAAU,CAAE,QAAS8O,KACpC,MAEJ9iB,EAAAA,GAAAA,IAAU,KACRmc,IAEIL,IAAmBpsB,EAAAA,GAAgB+tB,SACrCvB,KAED,CAACC,EAAiBD,EAAkBJ,KAEvCkH,EAAAA,GAAAA,GAAc,KACRvH,GACFnY,EAAgBmY,IAEjB,CAACnY,EAAiBmY,IAErB,MAAMwH,GAAwBC,EAAAA,GAAAA,IAAYC,EAAAA,GAAAA,GAAY1G,IAAgBnB,GAAY7B,SAAWqC,GAAkB,IAsF/G,OApFA9b,EAAAA,GAAAA,IAAU,KACR,GAAK1e,EAAAA,GAIL,OAAO8hC,EAAAA,GAAAA,GAAuBnf,EAAIzoD,QAAU,CAC1C6nE,wBAAyB,2CACzB1b,wBAAyB,2BACzB2b,kBAAmBvG,EACnBwG,SAAUA,KACRrL,EAAsB,CAAEsB,WAAY9F,EAAAA,GAAkB+F,WACtDhqB,EAAmB,CAAEnK,OAAQ29B,EAAsBznE,cAGtD,CAACynE,EAAuBhf,KAuEzB/E,EAAAA,GAAAA,GAACiK,GAAAA,GAAU,CACTlF,IAAKA,EACLhqC,MAAMmvC,EAAAA,GAAAA,GAAsB,SAAUvG,EAAgBC,GACtDwG,YAAaiS,GACblS,UAAWoT,EACX7B,eAAa,EACbC,oBAAqBS,GAAYoB,KACjC5B,YAAU,EACVC,iBAAkBO,GAAYoB,KAC9B90F,GAAG,aACH47F,kBAAgB,EAAAtjB,SA/EpB,SAAuB7a,GACrB,OAAQo3B,GACN,KAAKnB,GAAY1B,SACf,OACE1a,EAAAA,GAAAA,GAACkB,GAAa,CACZ/a,SAAUA,EACV4tB,QAAS8J,EACT9E,cAAewK,EACfnf,gBAAiBA,EACjBC,iBAAkBA,EAClBja,gBAAiBA,EACjByZ,mBAAoB8Y,IAG1B,KAAKP,GAAY7B,SACf,OACEva,EAAAA,GAAAA,GAACua,GAAQ,CACPp0B,SAAUA,EACVo+B,cAAe3H,EACfO,aAAcA,EACd/Y,gBAAiBA,EACjBT,eAAgBA,EAChBkQ,qBAAsBjQ,EACtBmQ,QAAS8J,IAGf,KAAKzB,GAAYsB,WACf,OACE1d,EAAAA,GAAAA,GAACmc,GAAO,CAENh2B,SAAUA,EACVq+B,WAAS,EACTx4F,QAASsuF,EACT3W,eAAgBA,EAChBoQ,QAAS8J,GALJR,GAQX,KAAKjB,GAAYwB,SACf,OACE5d,EAAAA,GAAAA,GAACmc,GAAO,CAENh2B,SAAUA,EACVn6D,QAASsuF,EACT3W,eAAgBA,EAChBoQ,QAAS8J,GAJJR,GAOX,QACE,OACErd,EAAAA,GAAAA,GAAC8Y,GAAQ,CACP9sF,QAASsuF,EACT1G,gBAAiBA,EACjBX,YAAaA,EACbG,WAAYA,EACZO,eAAgBA,EAChBvP,gBAAiBA,EACjB0P,cAAewP,EACfvP,QAAS8J,EACThK,qBAAsBjQ,EACtB5Y,qBAAsBA,EACtBqZ,iBAAkBA,EAClB0U,cAAewK,EACf/hB,gBAAiBA,IAI3B,GAkBF,ICpiBA,GANuCijB,EAAGxgD,aACxC,MAAMygD,GAAc7kB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,eAAgBp8B,GAEnE,OAAOygD,GAAc1kB,EAAAA,GAAAA,GAAC0kB,EAAW,SAAM/0F,GCEzC,GAP2CgwE,IACzC,MAAM,OAAE17B,GAAW07B,EACbglB,GAAiB9kB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,kBAAmBp8B,GAEzE,OAAO0gD,GAAiB3kB,EAAAA,GAAAA,GAAC2kB,EAAc,IAAKhlB,SAAYhwE,GCkC1D,IAAe6wE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBj9E,IACQ,CACLmgE,cAAcjgE,EAAAA,EAAAA,KAAeF,GAAQmgE,eAHvB8c,CA7B8BuhB,EAAGr+B,mBACnD,MAAM,SAAE97C,IAAapE,EAAAA,EAAAA,MAEfw+E,EAAYA,KAChBp6E,EAAS,CAAE/hB,QAAIiH,GAAa,CAAEm1F,gBAAgB,KAG1CC,EAA8CA,EAAGv9F,SAAQgB,OAAMyF,gBACnE+6E,EAAAA,GAAAA,GAAe,CACb7iB,UAAU,EACVnuC,MAAMgtE,EAAAA,GAAAA,IAAmBx9F,EAAQgB,EAAMyF,GACvCg7E,OAAQ4b,KAIZ,OACE7kB,EAAAA,GAAAA,GAAA,OAAAgB,SACGza,GAAcpxD,IAAI,CAACsN,EAAahX,KAC/Bu0E,EAAAA,GAAAA,GAAC+kB,EAAoB,IAIftiF,GAFC,GAAGA,EAAYjb,UAAUib,EAAYxU,YAAYwU,EAAYja,QAAQiD,W,wFCnBpF,IAAIw5F,GACAC,GAwHJ,SAASC,GAAWz8F,GAClB,OAAO3B,KAAKE,IAAI,EAAGyB,EACrB,C,4BCrIA,MAOA,GAPuDi3E,IACrD,MAAM,OAAE17B,GAAW07B,EACbylB,GAA6BvlB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,8BAA+Bp8B,GAEjG,OAAOmhD,GAA6BplB,EAAAA,GAAAA,GAAColB,EAA0B,IAAKzlB,SAAYhwE,GCGlF,GAPwCgwE,IACtC,MAAM,OAAE17B,GAAW07B,EACb0lB,GAAcxlB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,eAAgBp8B,GAEnE,OAAOohD,GAAcrlB,EAAAA,GAAAA,GAACqlB,EAAW,IAAK1lB,SAAYhwE,GCGpD,GAPkDgwE,IAChD,MAAM,OAAE17B,GAAW07B,EACb2lB,GAAwBzlB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,yBAA0Bp8B,GAEvF,OAAOqhD,GAAwBtlB,EAAAA,GAAAA,GAACslB,EAAqB,IAAK3lB,SAAYhwE,GCGxE,GAP8CgwE,IAC5C,MAAM,OAAE17B,GAAW07B,EACb4lB,GAAoB1lB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,qBAAsBp8B,GAE/E,OAAOshD,GAAoBvlB,EAAAA,GAAAA,GAACulB,EAAiB,IAAK5lB,SAAYhwE,G,gBCJhE,MASA,GATsDgwE,IACpD,MAAM,uBAAElwB,GAA2BkwB,EAC7B6lB,GAA4B3lB,EAAAA,GAAAA,GAChCC,GAAAA,GAAQO,MAAO,6BAA8B5wB,GAG/C,OAAO+1C,GAA4BxlB,EAAAA,GAAAA,GAACwlB,EAAyB,IAAK7lB,SAAYhwE,G,gBCbhF,MC2EA,IAAe6wE,EAAAA,GAAAA,IAhDwBilB,EACrCt+E,OACAu+E,gBACA53F,cACAy0E,UACAojB,YACAvpE,gBAEA,MAAM+3D,GAAUvS,EAAAA,GAAAA,KACVrgD,GAAOs/C,EAAAA,GAAAA,KAEPkE,GAAMD,EAAAA,GAAAA,OACN,kBACJ8gB,EAAiB,kBACjBC,EAAiB,uBACjBC,EAAsB,sBACtBC,IACEC,EAAAA,GAAAA,GAAuBjhB,GAAM4gB,GAEjC,OACEvjB,EAAAA,GAAAA,IAAA,OAAKhmD,WAAW0lD,EAAAA,GAAAA,GD/CG,WC+CyB1lD,GAAY2oD,IAAKA,EAAI/D,SAAA,EAC/DhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLC,MAAM,YACN/jE,OAAK,EACLwd,UDnDmC,WCoDnCmmD,QAASA,EACT0jB,cAAeJ,EACfjjB,UAAWuR,EAAQuR,GAAe1kB,UAElChB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAM5zB,EAAMiV,UDxDmC,eC0DtDzf,QAAQ7O,KAAgBkyE,EAAAA,GAAAA,GAAA,OAAK5jD,UD1D4E,WC0D9C4kD,UAAEC,EAAAA,GAAAA,IAAqB1/C,EAAMzzB,KACxF63F,IACC3lB,EAAAA,GAAAA,GAAC+C,GAAAA,EAAI,CACH9+B,OAAQ2hD,EACRziB,QAAS2iB,EACT5J,oBAAqB6J,EACrB7iB,WAAS,EACTF,UAAU,QACVC,UAAU,SAAQjC,UAElBhB,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CAACn7D,KAAK,YAAYo7D,QAASojB,EAAU3kB,SAAEmT,EAAQ,0BCpElE,GAA2C,WCiK3C,IAAe3T,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBj9E,IACC,MAAM6M,GAAqBC,EAAAA,EAAAA,KAAyB9M,GACpD,IAAK6M,EACH,MAAO,CAAC,EAGV,MAAM,OAAEzL,EAAM,SAAEyG,EAAUzF,KAAM0N,GAAoBjD,EAC9CzJ,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1B0+F,EAAwBvpF,SAAQulB,EAAAA,EAAAA,KAA0B97B,IAE1D+/F,EAAkB38F,GAAQyE,IAAaD,EAAAA,IAAsC,WAApBkI,IACzDgwF,EAEN,MAAO,CACLhwF,kBACA1O,SACAyG,WACAylD,eAAgByyC,EAAkB38F,EAAKwB,0BAAuB2E,EAC9D/E,gBAAiBu7F,EAAkB38F,EAAKoB,qBAAkB+E,EAC1DohB,eAAgBo1E,EAAkB38F,EAAKunB,oBAAiBphB,EACxDy2F,cAAeD,EAAkB38F,EAAKynB,yBAAsBthB,EAC5D7B,YAAaq4F,EAAkB38F,EAAKsE,iBAAc6B,IAtBpC0zE,CA9HqCgjB,EACvDC,iBACAC,UACArwF,kBACA1O,SACAyG,WACAH,cACAlD,kBACAmmB,iBACA2iC,iBACA0yC,gBACAI,qBAEA,MAAM,eACJC,EAAc,kBAAEC,EAAiB,iBAAEC,EAAgB,qBAAE95E,EAAoB,gBACzE+5E,EAAe,iBAAEC,EAAgB,oBAAEllF,IACjC0E,EAAAA,EAAAA,MAEEygF,GAAahiB,EAAAA,GAAAA,MAEbiiB,EAAqBpqF,QAAQ+2C,GAC7BszC,EAAoBrqF,QAAQypF,GAE5Ba,GAAyBzhB,EAAAA,GAAAA,GAAgB,KACxCh+E,GACLq/F,EAAiB,CAAEr/F,SAAQyG,eAGvBi5F,GAAwB1hB,EAAAA,GAAAA,GAAgB,KACvCh+E,GACLo/F,EAAgB,CAAEp/F,SAAQyG,gBAG5B6yE,EAAAA,GAAAA,IAAU,KACJimB,GAAsBv/F,IAAWoD,GAAiB3C,QACpD4kB,EAAqB,CAAErlB,YAExB,CAACA,EAAQqlB,EAAsBk6E,EAAoBn8F,GAAiB3C,UAEvE64E,EAAAA,GAAAA,IAAU,KACJimB,GAAsBv/F,GACxBqlB,EAAqB,CAAErlB,YAExB,CAACA,EAAQqlB,EAAsBk6E,KAElCjmB,EAAAA,GAAAA,IAAU,KACJkmB,GAAqBx/F,IAAWupB,GAAgB9oB,QAClD0Z,EAAoB,CAAEna,YAEvB,CAACA,EAAQma,EAAqBqlF,EAAmBj2E,GAAgB9oB,UAEpE64E,EAAAA,GAAAA,IAAU,KACJkmB,GAAqBx/F,GACvBma,EAAoB,CAAEna,YAEvB,CAACA,EAAQma,EAAqBqlF,IAEjC,MAAMG,GAAwB3hB,EAAAA,GAAAA,GAAgB,KAC5C,GAAK8gB,EAIL,GAAwB,WAApBpwF,EACFuwF,QACK,CACL,MAAMW,EAAoBN,EAAWxqE,QAAS+qE,cAAe/nB,cAC3D,2CAEIgoB,EAAkBF,EAAkB1hC,iBAAiC,sBACrE6hC,EAAqBD,EAAgBA,EAAgBr/F,OAAS,GACpE,IAAKs/F,EACH,QAGFC,EAAAA,GAAAA,IAAc,CACZC,UAAWL,EACXM,QAASH,EACT7sC,SAAU,MACVitC,OAhFa,IAkFjB,IAGI9lB,GAAeC,EAAAA,GAAAA,GDtHA,YCwHlBwkB,GAAkB3pF,QAAQ+2C,IAAmB/2C,QAAQypF,KDxHyG,YCyH9JzpF,QAAQ+2C,IAAmB/2C,QAAQypF,MAAoBE,GDzHwQ,YC0H/TC,GD1H+M,YC2H/MC,GD3HqQ,YC8HxQ,OACEpkB,EAAAA,GAAAA,IAAA,OAAK2C,IAAK+hB,EAAY1qE,UAAWylD,EAAab,SAAA,EAC5ChB,EAAAA,GAAAA,GAACylB,GAAgB,CACft+E,KAAK,gBACLu+E,cAAc,8BACdnjB,QAASmkB,EACTf,UAAWsB,EACXn5F,YAAa4lD,EACbt3B,WAAW0lD,EAAAA,GAAAA,GDtI+C,YCwIvDilB,GAAsBa,IACtBZ,GDzI8G,eC6InHhnB,EAAAA,GAAAA,GAACylB,GAAgB,CACft+E,KAAK,UACLu+E,cAAc,sBACdnjB,QAASokB,EACThB,UAAWuB,EACXp5F,YAAas4F,EACbhqE,WAAY4qE,GAAqBY,MAGnC5nB,EAAAA,GAAAA,GAACylB,GAAgB,CACft+E,KAAK,aACLu+E,cAAc,mBACdnjB,QAAS4kB,EACTr5F,YAAaA,EACbsuB,UD3JqI,mBE2B7I,IAAeokD,EAAAA,GAAAA,IApBf,WACE,MAAMj/C,GAAOs/C,EAAAA,GAAAA,MAEP,uBAAE9nC,IAA2B1yB,EAAAA,EAAAA,MAE7BwhF,GAAcriB,EAAAA,GAAAA,GAAgB,KAClCzsC,MAGF,OACEqpC,EAAAA,GAAAA,IAAA,OACEhmD,UClBiB,WDmBjBmmD,QAASslB,EAAY7mB,SAAA,EAErBhB,EAAAA,GAAAA,GAAA,OAAK5jD,UCrB+B,WDqBP4kD,SAAEz/C,EAAK,iCACpCy+C,EAAAA,GAAAA,GAAA,OAAK5jD,UCtBqD,WDsB1B4kD,SAAEz/C,EAAK,qCAG7C,G,mDEVO,SAASumE,GAAQC,GACtB,MAAO,YAAaA,CACtB,CAEO,SAASC,GACdnxF,EAAwBtI,EAAwB05F,EAAuBC,EAA0BC,GAOjG,IAAIC,EAEJ,MAAMC,EAAiC,CAPC,CACtCC,aAAczxF,EAAS,GAAG0E,KAC1BgtF,UAAUC,EAAAA,GAAAA,IAAiC,IAAnB3xF,EAAS,GAAG0E,MACpCktF,aAAc,CAAC,MAwFjB,OAlFA5xF,EAASvO,QAAQ,CAAClB,EAAS4Y,KACzB,MAAM0oF,EAAmBL,EAAWA,EAAWpgG,OAAS,GAClD0gG,EAAqBD,EAAiBD,aAAaC,EAAiBD,aAAaxgG,OAAS,GAC5Fb,EAAQ8oD,UACLk4C,GAQHA,EAAavxF,SAAS/E,KAAK1K,GACvBA,EAAQwhG,cACVR,EAAaS,gBAAkBzhG,GAE7BA,EAAQ4E,QAAQmI,OAASi0F,EAAaU,sBACpCV,EAAaW,gBACfX,EAAaU,qBAAsB,EACnCV,EAAaW,oBAAiBp5F,GAE9By4F,EAAaW,eAAiB3hG,IAhBlCghG,EAAe,CACb3xC,QAASrvD,EAAQqe,UACjB5O,SAAU,CAACzP,GACX4hG,YAAa5hG,EACb0hG,qBAAqB,IAgBf1hG,EAAQ4E,QAAQ4N,WAAWL,cAActR,QAAU,GAAK,EAClE0gG,EAAmB72F,KAAK,CACtB2kD,QAAS,QAAQrvD,EAAQsB,KACzBmO,SAAU,CAACzP,GACX4hG,YAAa5hG,EACb0hG,qBAAqB,EACrBG,aAAa,IAGfN,EAAmB72F,KAAK1K,GAG1B,MAAM8hG,EAAcryF,EAASmJ,EAAQ,IAGnCooF,GACKc,GAAgBA,EAAYzjF,WAAayjF,EAAYzjF,YAAc2iF,EAAa3xC,UAErFkyC,EAAmB72F,KAAKs2F,GACxBA,OAAez4F,GAGjB,MAAMw5F,EAA2BR,EAAmBA,EAAmB1gG,OAAS,GAChF,GAAIihG,IAAgBd,EAAc,CAChC,MAAMgB,GAAyBZ,EAAAA,GAAAA,IAAiC,IAAnBU,EAAY3tF,MACzD,GAAImtF,EAAiBH,WAAaa,EAAwB,CACxD,MAAMC,EAAiC,CACrCf,aAAcY,EAAY3tF,KAC1BgtF,SAAUa,EACVX,aAAc,CAAC,KAEjBJ,EAAWv2F,KAAKu3F,EAClB,MACEH,EAAYxgG,KAAO6F,GAChBnH,EAAQ0R,WAAaowF,EAAYpwF,WAC/BqvF,GAAa/gG,EAAQkiG,kBACtBJ,EAAYjmF,mBACb7b,EAAQqC,aAAey/F,EAAYz/F,YACnCrC,EAAQmiG,kBAAoBL,EAAYK,kBACvCx6F,EAAAA,EAAAA,IAAgB3H,IAA6C,cAAjCA,EAAQ4E,QAAQ0E,QAAQlI,OACpDuG,EAAAA,EAAAA,IAAgBm6F,IAAqD,cAArCA,EAAYl9F,QAAQ0E,QAAQlI,MAC7DpB,EAAQoiG,eACRN,EAAYM,eACXN,EAAY3tF,KAAOnU,EAAQmU,KA5FR,KA6FnB0sF,IACE7gG,EAAQsB,KAAOu/F,GACbkB,GACC,gBAAiBA,GACjBA,EAAyBH,aAAatgG,KAAOu/F,IAC/CiB,EAAYxgG,KAAOu/F,GACpBC,GAAkB9gG,EAAQu2D,aAAamV,SAAWo2B,EAAYvrC,aAAamV,SAEjF41B,EAAiBD,aAAa32F,KAAK,GAEvC,IAGKu2F,CACT,C,oFClHA,MC0HA,IAAe7nB,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GAAUyhB,aACT,MAAM,SAAEqQ,GAAa9xB,EAAO8xB,SAASoC,SAC/B9wB,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQyhB,GAChC,IAAKre,EACH,MAAO,CAAC,EAGV,MAAM0R,GAAOC,EAAAA,EAAAA,KAAW/U,EAAQyhB,GAC1B/G,GAAWC,EAAAA,EAAAA,KAAmB3a,EAAQyhB,GAEtC9T,GAAc01F,EAAAA,EAAAA,KAAsBrjG,EAAQoD,EAAKd,IAEvD,MAAO,CACLghG,gBAAiBxxE,EACjByxE,oBAAqB51F,GAAeA,EAAYrL,KAAOc,EAAKmN,uBACxD5C,EAAYrL,QACZiH,EACJsc,gBAAiB7lB,EAAO6lB,gBACxBhZ,oBAAoBC,EAAAA,EAAAA,KAAyB9M,GAC7CwjG,cAAe9oF,GAAU8oF,cACzB1uF,SArBcmoE,CAnF+BwmB,EACjDH,kBACAz9E,kBACA09E,sBACA12F,qBACA22F,gBACA1uF,WAEA,MAAM,qBACJ4uF,EAAoB,YACpB7oF,EAAW,oBACXxK,IACE4P,EAAAA,EAAAA,MAEEkb,GAAOqgD,EAAAA,GAAAA,KAEPmoB,GAAejlB,EAAAA,GAAAA,MAEf14E,GAAU+1E,EAAAA,GAAAA,IAAQ,KACtB,GAAIynB,GAAex9F,QAAS,OAAOw9F,EAAcx9F,QACjD,IAAKs9F,GAAiBzhG,OAAQ,OAE9B,MAAM+hG,EAAcjjG,KAAK6B,MAAM7B,KAAKyN,SAAWk1F,EAAgBzhG,QAC/D,OAAOyhG,EAAgBM,IACtB,CAACJ,GAAex9F,QAASs9F,KAE5B5oB,EAAAA,GAAAA,IAAU,KACJ4oB,GAAiBzhG,QAA8B,yBAApBgkB,GAI/B69E,KACC,CAAC79E,EAAiB69E,EAAsBJ,KAE3C5oB,EAAAA,GAAAA,IAAU,KACgB,yBAApB70D,GAA8C09E,GAChDlzF,EAAoB,CAAEC,MAAOizF,KAE9B,CAAC19E,EAAiBxV,EAAqBkzF,IAE1C,MAAMM,GAAsBzkB,EAAAA,GAAAA,GAAgB,KACrCvyE,GAILgO,EAAY,CACV7U,QAAS,IACJA,EACHK,qBAAqB,GAEvBgW,YAAaxP,MAIXgD,EAAQ2zF,GAAe3zF,OAASsrB,EAAK,iCACrCpW,EAAcy+E,GAAez+E,aAAeoW,EAAK,6BAEvD,OACE6gD,EAAAA,GAAAA,IAAA,OAAKhmD,UDjGc,WCiGS4kD,SAAA,EAC1BoB,EAAAA,GAAAA,IAAA,OAAKhmD,UDlGiC,WCkGP4kD,SAAA,EAC7BhB,EAAAA,GAAAA,GAAA,KAAG5jD,UDnG2E,WCmGlDomD,IAAI,OAAMxB,SAAE/qE,KACxC+pE,EAAAA,GAAAA,GAAA,KAAG5jD,UDpGoG,WCoGrEomD,IAAI,OAAMxB,SAAE71D,KAE9C60D,EAAAA,GAAAA,GAAA,OAAK+E,IAAKglB,EAAc3tE,UDtGoG,WCsGzEmmD,QAAS0nB,EAAoBjpB,SAC7E50E,IACC4zE,EAAAA,GAAAA,GAACkqB,GAAAA,EAAW,CACVH,aAAcA,EACd39F,QAASA,EACT2vD,KAAM,IACNouC,YAAU,SAKjBP,IACC5pB,EAAAA,GAAAA,GAAA,OAAK5jD,UDlHsD,WCkH1B4kD,SAC9Bz/C,EAAK,8BAA8BxZ,EAAAA,EAAAA,IAAgB7M,Y,2HCnH9D,SAA6C,WAA7C,GAAsK,WAAtK,GAA+O,WAA/O,GAAme,WCuPne,IAAeslE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GAAUoB,aACT,MACE4iG,aAAeC,WAAYC,IACzBlkG,EACEoD,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BkoC,GAAe3uB,EAAAA,EAAAA,KAAmB3a,EAAQoB,GAC1CinC,GAAcC,EAAAA,EAAAA,KAAsBtoC,EAAQoB,GAGlD,IACI6yE,EADAkwB,GAAoB,EAUxB,OAZgBj0D,EAAAA,EAAAA,KAAUlwC,EAAQoB,KAK5BkoC,EACF2qC,EAAU3qC,EAAa2qC,QAEvBkwB,GAAoB,GAIjB,CACL/gG,OACAkmC,eACA2qC,UACAkwB,oBACAD,gBACA77D,gBA1Bc40C,CA5LsCmnB,EACxDhhG,OACAhC,SACA6yE,UACAkwB,oBACAD,gBACA77D,cACAiB,eACA+6D,kBAEA,MAAM,gBAAEC,EAAe,iBAAEh1D,IAAqBrvB,EAAAA,EAAAA,MACxC8tE,GAAUvS,EAAAA,GAAAA,KACVrgD,GAAOs/C,EAAAA,GAAAA,MAEP,aACJ8pB,EAAY,kBACZC,EAAiB,eACjBC,EAAc,gBACdC,GACEp7D,GAAc9H,UAAY,CAAC,GAE/Bk5C,EAAAA,GAAAA,IAAU,KACR4pB,EAAgB,CAAE7iF,OAAQrgB,KACzB,CAACA,IAEJ,MAAMs5C,GAAUqhC,EAAAA,GAAAA,IAAQ,KACtB,GAAKmoB,GAAkBK,EACvB,OAAOI,EAAAA,GAAAA,IAAoBT,EAAeK,IACzC,CAACL,EAAeK,IAEbK,GAAkBC,EAAAA,GAAAA,GAAS5wB,GAASnuE,OAAQg/F,EAAAA,EAAAA,IAAqB7wB,EAAQnuE,YAASyD,GAClFw7F,GAAgBF,EAAAA,GAAAA,GAAS5wB,GAASxzD,KAAMukF,EAAAA,EAAAA,IAAkB/wB,EAAQxzD,IAAK,aAAUlX,GACjF07F,EAAoBhxB,GAASnuE,OAAQo/F,EAAAA,EAAAA,IAAuBjxB,EAAQnuE,OAASmuE,GAASxzD,KACxF0kF,EAAAA,EAAAA,IAAmBlxB,EAAQxzD,UAAOlX,EAChC67F,EAAiBnxB,IAAYA,EAAQlvD,cAAgBkvD,EAAQxzD,MAAQwzD,EAAQnuE,MAC7Eu/F,GAAmB3qD,IAAY8pD,EAE/Bc,GAAgBC,EAAAA,EAAAA,IAA+BnkG,IAE/C,MAAEX,EAAK,OAAE+kG,GAAWP,GAAqB,CAAC,EAE1CxD,GAAcriB,EAAAA,GAAAA,GAAiB7e,KACnCklC,EAAAA,GAAAA,GAAUllC,GACVjxB,EAAiB,CACfhtC,GAAIlB,EAAQsxD,sBAAsB,EAAMiB,WAAY,cAAeC,uBAAuB,MAIxF8xC,EAAmBjB,GAAkBrhG,GACzCw2E,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,uBAAsB4kD,UACnChB,EAAAA,GAAAA,GAAA,QAAAgB,SACGz/C,EAAK,kBAAmB,CACvBrmB,KAAM1R,EAAKyM,MACX81F,MAAMC,EAAAA,GAAAA,IAAmBzqE,EAAMspE,IAC9B,CAAEoB,WAAW,EAAMC,cAAc,OALE,8BAQxCv8F,EAEEw8F,EAAoBrB,GAAmBthG,GAC3Cw2E,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,uBAAsB4kD,UACnChB,EAAAA,GAAAA,GAAA,QAAAgB,SACGz/C,EAAK,mBAAoB,CACxBrmB,KAAM1R,EAAKyM,MACX81F,MAAMC,EAAAA,GAAAA,IAAmBzqE,EAAMupE,IAC9B,CAAEmB,WAAW,EAAMC,cAAc,OALE,+BAQxCv8F,EAEEy8F,GAAYjqB,EAAAA,GAAAA,IAAQ,KACxB,MAAMlrE,EAAwB,GAkB9B,GAjBI6pC,GACF7pC,EAAQnF,KAAK,CACXqiF,EAAQ,iBACR/R,EAAAA,GAAAA,IAAA,QAAMhmD,UDtIuT,WCsIrR4kD,SAAA,EACtChB,EAAAA,GAAAA,GAAA,QAAM5jD,UDvI0U,WCuIhT4kD,UAC7BqrB,EAAAA,GAAAA,IAAWC,EAAAA,GAAAA,IAAWxrD,GAASyrD,SAEjCzrD,GAAS0rD,iBAIZ5B,GACF3zF,EAAQnF,KAAK,CACXyvB,EAAK,4BACLkrE,EAAAA,GAAAA,IAAwBlrE,EAAKqb,KAAMguD,KAGnCl7D,GAAcg9D,iBAAkB,CAClC,MAAMtmG,GAASoL,EAAAA,EAAAA,MACTwmD,EAAQvpB,GAAar+B,IAAIsN,MAAM,EAAG,GAAGvI,IAAKzM,IAAOgY,EAAAA,EAAAA,KAAWta,EAAQsC,IAAMR,OAAOyU,SACvF1F,EAAQnF,KAAK,CACXyvB,EAAK,6BACL6gD,EAAAA,GAAAA,IAACuqB,GAAAA,EAAI,CAACvwE,UDzJsZ,WCyJ9XmmD,QAASslB,EAAY7mB,SAAA,EACjDhB,EAAAA,GAAAA,GAAA,QAAM5jD,UD1J0a,WC0J/Y4kD,SAC9Bz/C,EAAK,aAAc,CAClBriB,MAAOwwB,EAAag9D,kBACnB,CACD3lF,YAAa2oB,EAAag9D,qBAG7B/vF,QAAQq7C,GAAO/vD,UAAW+3E,EAAAA,GAAAA,GAAC4sB,GAAAA,EAAU,CAAC7wC,KAAK,QAAQ/D,MAAOA,KAC3DgoB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,OAAO3e,UDlKgb,iBCqKxc,CACA,OAAOnlB,GACN,CAACsqB,EAAM4yD,EAASrzC,EAAS8pD,EAAmBn8D,EAAaiB,IAE5D,OACE0yC,EAAAA,GAAAA,IAAA,OAAKhmD,WAAW0lD,EAAAA,GAAAA,GD1KG,WC0KyB,SAASd,SAAA,CAClDupB,GAAqBkB,IAAmBzrB,EAAAA,GAAAA,GAAA,QAAAgB,SAAOmT,EAAQ,aACtDqX,GAAkBC,IAAqBlB,IAAsBE,IAC7DzqB,EAAAA,GAAAA,GAAA,QAAAgB,SAAOmT,EAAQ,gBAEhB9Z,IACC+H,EAAAA,GAAAA,IAAA,OACEhmD,WAAW0lD,EAAAA,GAAAA,GAAe8lB,GDjLgE,YCkL1FiF,OAAOC,EAAAA,GAAAA,GACLjmG,EAAQ,UAAUA,WAAY8I,GAC9BqxE,SAAA,CAEDgqB,IACChrB,EAAAA,GAAAA,GAAA,OACE5jD,UAAWwrE,GACXmF,IAAK/B,EACLnkG,MAAOA,EACP+kG,OAAQA,EACRoB,IAAI,aAGP7B,IACCnrB,EAAAA,GAAAA,GAACitB,GAAAA,EAAc,CACbC,SAAO,EACP9wE,UAAWwrE,GACXmF,IAAK5B,EACLgC,MAAI,EACJC,yBAAuB,EACvBC,OAAK,EACLC,aAAW,EACXT,OAAOC,EAAAA,GAAAA,GAAWnwF,QAAQ9V,IAAU,UAAUA,MAAW8V,QAAQivF,IAAW,WAAWA,SAG1FP,IAAsBL,IAAoBG,IACzCnrB,EAAAA,GAAAA,GAACutB,GAAAA,EAAQ,CACPnxE,UAAWwrE,GACX/gG,MAAOA,EACP+kG,OAAQA,EACR4B,kBAAgB,IAGnB9B,IACC1rB,EAAAA,GAAAA,GAAA,OAAK5jD,UAAWwrE,GAA0B5mB,SACvCmT,EAAQ,qBAGXuX,GAAiBrxB,EAAQlvD,cACzBi3D,EAAAA,GAAAA,IAAA,OAAKhmD,UAAWwrE,GAA0B5mB,SAAA,EACxChB,EAAAA,GAAAA,GAAA,KAAG5jD,UD1N2M,WC0N5K4kD,SAAEmT,EAAQ,mBAC3CkY,EAAAA,GAAAA,GAAWhyB,EAAQlvD,YAAa,CAAC,KAAM,QAAS,iBAKvDsgF,GAAmBjiG,IACnB44E,EAAAA,GAAAA,IAAA,OACEhmD,WAAW0lD,EAAAA,GAAAA,GAAe8lB,GDlOqC,YCkOG5mB,SAAA,EAElEhB,EAAAA,GAAAA,GAAA,MAAI5jD,UDpO4P,WCoO5N4kD,UAAEqrB,EAAAA,GAAAA,IAAWlgC,EAAAA,EAAAA,IAAa5qC,EAAM/3B,OACpEw2E,EAAAA,GAAAA,GAAA,KAAG5jD,WAAW0lD,EAAAA,GAAAA,GDrOgR,WCqOxO8lB,IAAkB5mB,SACrEz/C,EAAK,iCAERy+C,EAAAA,GAAAA,GAACytB,GAAAA,EAAS,CAACC,aAAc9F,GAAkB5zE,KAAMo4E,KAC/C5iG,GAAMmkG,aACNvrB,EAAAA,GAAAA,IAAA,OAAKhmD,WAAW0lD,EAAAA,GAAAA,GD1O2V,WC0OpT8lB,IAAkB5mB,SAAA,EACvEhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,iBACXilC,EAAAA,GAAAA,GAAA,KAAG5jD,UD5OiY,WC4OjW4kD,SAAEz/C,EAAK,kCAKjDuqE,EACAK,Q,0BCvOP,MACMyB,GAAkCC,EAAAA,GAAa,IAAO,I,mDCZ5D,SAAuG,WCyNvG,IAAertB,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,EAAQ0nG,KACP,MAAM,QACJ1mG,EAAO,WAAE2mG,GACPD,GACE,OAAEtmG,GAAWJ,EAEb8gG,GAAiB3gG,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAC9CwmG,GAAkBC,EAAAA,EAAAA,IAAYzmG,GAC9B0mG,GAAsBC,EAAAA,EAAAA,IAAwB3mG,GAE9C4mG,GAAmBlG,IAAkBmG,EAAAA,EAAAA,IAAsBjnG,GAC3DknG,EAAgBP,GAAcK,EAIpC,MAAO,CACLz4D,QAJaC,EAAAA,EAAAA,KAAaxvC,EAAQgB,GAKlCknG,gBACAC,cALmBC,EAAAA,EAAAA,KAAsBpoG,EAAQgB,GAMjD8gG,iBACAuG,cAAeT,EACfE,wBAtBc7qB,CA3JoCqrB,EACtDtnG,UACA2mG,aACA/sB,WACAt4E,KACAimG,kBACAh5D,SACA24D,gBACAC,eACArG,iBACAuG,gBACAP,sBACA3H,UACAqI,oBAEA,MAAM,SAAEnkF,EAAQ,6BAAEokF,IAAiCxoF,EAAAA,EAAAA,OAE7C,YAAEs3C,GAAgBv2D,EAElB0nG,EAAgBR,EAAgB34D,OAAShmC,EACzC4xB,GAAOs/C,EAAAA,GAAAA,KAEPkuB,EAAwBJ,GAAmB,GAC1Cv5B,EAAS45B,IAAaje,EAAAA,GAAAA,GAAQge,IACrCjuB,EAAAA,GAAAA,IAAU,KACJiuB,GAIJx9F,WAAWy9F,EAAWL,EAAkBM,EAAAA,MACvC,CAACN,EAAiBK,EAAWD,IAEhC,MAEMG,EAF2BvxC,IAC3BuqC,GAAkBuG,GAAiBP,IAAwBY,GACnBP,EAAeO,EACvDK,EAAmBD,IAAcx/E,EAAAA,EAAAA,IAAcw/E,GAE/CE,GAAiB5pB,EAAAA,GAAAA,GAAgB,KAChC0pB,GAILzkF,EAAS,CAAE/hB,GAAIwmG,EAAWxmG,OAGtB2mG,GAAgB7pB,EAAAA,GAAAA,GAAgB,KAC/B0pB,GAIgB7iG,SAASizE,cAA8BgwB,EAAAA,MAE1DT,EAA6B,CAAEzmG,OAAQ8mG,EAAWxmG,OAIhD6mG,GAAoB/pB,EAAAA,GAAAA,GAAgB,KACxC4pB,OAIArqB,IAAKyqB,EAAS,aACdxqB,IACEI,EAAAA,GAAAA,GAAkB,CACpBnhC,OAAQ8pD,GAAc34B,EACtBsU,kBAAmBtU,EACnBiQ,kBAAkB,KAGd,kBACJugB,EAAiB,kBAAE6J,EAAiB,kBACpC5J,EAAiB,uBAAEC,EAAsB,sBACzCC,IACEC,EAAAA,GAAAA,GAAuBwJ,GAErBE,GAAoBlqB,EAAAA,GAAAA,GAAgB,IAAMgqB,EAAUlzE,SACpDqzE,GAAiBnqB,EAAAA,GAAAA,GAAgB,IAAMn5E,SAASizE,cAAc,4CAC9DswB,GAAiBpqB,EAAAA,GAAAA,GACrB,IAAMgqB,GAAWlzE,SAASgjD,cAAc,IAAIsoB,eAExCiI,GAAYrqB,EAAAA,GAAAA,GAAgB,KAAM,CAAGsqB,YAAY,KAEjDC,EAAaxJ,GAAW2I,IAAeC,GAAoBxyF,SAAQ26B,EAAAA,EAAAA,IAAgB43D,KACnFc,EAA0BrzF,QAAQ8yF,KAAuBN,GAAoBY,KAAgBnB,EAsD7FxyE,GAAY0lD,EAAAA,GAAAA,GAChB,yBDxMmB,YC4MrB,OACEM,EAAAA,GAAAA,IAAA,OAAK15E,GAAIA,EAAI0zB,UAAWA,EAAU4kD,SAAA,CAC/BgE,IACC5C,EAAAA,GAAAA,IAAA,OAAK2C,IAAKyqB,EAAWpzE,UD/MuB,WC+MW4kD,SAAA,CAvB7D,WACE,MAAMivB,GAAef,GAAcvxC,EAAeA,EAAYC,oBAAiBjuD,EAE/E,OACEqwE,EAAAA,GAAAA,GAACuN,GAAAA,EAAM,CACLxxB,KAAK,QACL3/B,UD9LsE,WC+LtE3b,KAAMyuF,EACN/6F,KAAM87F,EACN1tB,QAAS2sB,EAAaK,OAAoB5/F,EAC1Cs2F,cAAeJ,GAGrB,CAWSqK,GACAF,IA5DLhwB,EAAAA,GAAAA,GAAC+C,GAAAA,EAAI,CACH9+B,OAAQ2hD,EACRuK,OAAQV,EACRC,kBAAmBA,EACnBC,eAAgBA,EAChBE,UAAWA,EACXD,eAAgBA,EAChBxzE,UAAWwrE,GACXzkB,QAAS2iB,EACT5J,oBAAqB6J,EACrB+J,YAAU,EACV5sB,WAAS,EAAAlC,UAEToB,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,CACGmuB,IACCnvB,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPn7D,KAAK,WACLo7D,QAAS6sB,EAAepuB,SAEvBz/C,EAAK,iBAGTwuE,IACC/vB,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPn7D,KAAK,UACLo7D,QAAS8sB,EAAcruB,SAEtBz/C,EAAK,oCAoCby/C,Q,gEC7MP,MASA,GAT0DrB,IACxD,MAAM,OAAE17B,GAAW07B,EACbywB,GAAgCvwB,EAAAA,GAAAA,GACpCC,GAAAA,GAAQO,MAAO,iCAAkCp8B,GAGnD,OAAOmsD,GAAgCpwB,EAAAA,GAAAA,GAACowB,EAA6B,IAAKzwB,SAAYhwE,G,gBC8CxF,MAuRA,IAAe6wE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GAAUoB,aACT,MAAMJ,GAAUipG,EAAAA,EAAAA,KAAuBjqG,EAAQoB,GAEzC8oG,GAAkBC,EAAAA,EAAAA,KAAsBnqG,GACxCoqG,EAAoBppG,GAAUw6D,EAAAA,GAAAA,IAA+Bx7D,EAAQgB,QAAWuI,EAChF8gG,EAAgBD,IAAqBE,EAAAA,EAAAA,IAAiBJ,EAAiBE,GAE7E,MAAO,CACLppG,UACAyuC,OAAOm4C,EAAAA,EAAAA,KAAY5nF,GACnBqqG,gBACAE,iBAAkBvpG,GAAUwpG,EAAAA,EAAAA,KAAuBxqG,EAAQgB,QAAWuI,EACtEkhG,iBAAkBzpG,GAAU0pG,EAAAA,EAAAA,KAAuB1qG,EAAQgB,QAAWuI,IAbxD0zE,CArRgC0tB,EAClDvpG,SACAJ,UACA2iG,eACAl0D,QACAm7D,gCACAC,gCACAR,gBACAE,mBACAE,uBAEA,MAAM,cACJK,EAAa,QACbx8D,EAAO,cACPy8D,EAAa,eACbC,EAAc,gBACdriC,EAAe,kBACfsiC,IACEhrF,EAAAA,EAAAA,MAEEkb,GAAOqgD,EAAAA,GAAAA,KACP0vB,GAAaxsB,EAAAA,GAAAA,MACbC,GAAMD,EAAAA,GAAAA,MACNysB,EAAgB50F,QAAQvV,IAExB,SAAEkqF,IAAaC,EAAAA,EAAAA,OAEnBigB,QAASC,IACPC,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS5H,EACT6H,WAhC6B,IAiC7BC,UAAW,KAEP,kBACJjM,EAAiB,kBAAE6J,EAAiB,wBACpCqC,EAAuB,kBAAEjM,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBjhB,OAAKp1E,GAAW,EAAMk+F,EAAAA,KAEjD/sB,EAAAA,GAAAA,IAAU,IACDywB,EAAgBE,EAAoBH,EAAWh1E,QAAWy1E,IAC3DA,EAAOC,gBAAkB5qG,GAASyoB,UACpCqhF,EAAc,CAAErhF,SAAUzoB,EAAQyoB,kBAEjClgB,EACJ,CAACvI,GAASyoB,SAAU0hF,EAAeE,EAAqBP,IAE3D,MAKMe,GAA6BzsB,EAAAA,GAAAA,GAAgB,KACjD2rB,MAGInlG,EAAU5E,IAAWkF,EAAAA,EAAAA,IAAkBlF,IACvC,MACJ8E,EAAK,MAAEC,EAAK,KAAEgI,GACZnI,GAAW,CAAC,EAEVkmG,EAAQ/lG,GAAO+lG,MACfC,EAAWx1F,QAAQzQ,GAASC,GAE5B07F,GAAcriB,EAAAA,GAAAA,GAAgB,KAC7Bp+E,IAELgqG,EAAe,CAAEvhF,SAAUzoB,EAAQyoB,SAAUC,WAAS5jB,IAASgmG,SAAeviG,IAC9E+kC,EAAQ,CAAExjB,IAAK9pB,EAAQ8pB,IAAKC,iBAAiB,OAGzCihF,GAAkB5sB,EAAAA,GAAAA,GAAgB,KACjCp+E,IACLgqG,EAAe,CAAEvhF,SAAUzoB,EAAQyoB,SAAUC,SAAS,IACtDi/C,EAAgB,CACdjQ,OAAQkQ,EAAAA,GAAkB+hC,iBAC1BvpG,SACA+mE,oBAAoB,OAIlB8jC,GAA0B7sB,EAAAA,GAAAA,GAAgB,KACzCp+E,GACLiqG,EAAkB,CAChBxhF,SAAUzoB,EAAQyoB,SAClBg0C,UAAWz8D,EAAQy8D,UACnBD,eAAgBx8D,EAAQw8D,eACxBE,YAAa18D,EAAQ08D,gBAMnBwuC,GAAmBnwB,EAAAA,GAAAA,IAAQ,KAC/B,IAAIowB,EACAC,EAEA3F,EAAQ,GAEZ,GAAI3gG,GAASC,EAAO,CAClB,IAAItF,EACAqF,EACFrF,GAAQ4rG,EAAAA,GAAAA,IAAyB,CAC/B/4F,MAAOxN,EACPolF,aACCzqF,MACMsF,IACTtF,GAAQ4rG,EAAAA,GAAAA,IAAyB,CAC/B/4F,MAAOvN,EACPmlF,aACCzqF,OAGDA,IACEA,GAAQ6rG,EAAAA,GAAAA,IAAyBphB,KACnCkhB,EAAe3rG,GAEjB0rG,EAAkBxrG,KAAKE,KAAI0rG,EAAAA,GAAAA,IAAiBx+F,GAAMA,KAAMm9E,GAAWzqF,GAEvE,CAMA,OAJI0rG,IACF1F,EAAQ,UAAU0F,EA/BD,OAkCZ,CACLC,eAAcI,gBA9BO,EA8BS/F,UAE/B,CAAC3gG,EAAOC,EAAOmlF,EAAUn9E,GAAMA,QAE5B,aACJq+F,EAAY,MAAE3F,GACZyF,EAEJ,GAAKlrG,GAAYA,EAAQ4E,QAqEzB,OACEo2E,EAAAA,GAAAA,IAAA,OACE2C,IAAKA,EAEL3oD,UAAU,wDAAuD4kD,SAAA,EAEjEoB,EAAAA,GAAAA,IAAA,OACEhmD,UAAU,qEACVomD,IAAI,OACJqqB,MAAOA,EACPgG,YAtKmBlsC,KACvBmsC,EAAAA,GAAAA,GAAwBnsC,GACxBmrC,EAAwBnrC,IAqKpBs/B,cAAeJ,EAAkB7kB,SAAA,EAEjCoB,EAAAA,GAAAA,IAAC2wB,GAAAA,EAAgB,CAACC,UAAW5rG,EAAQ4rG,UAAW52E,UAAU,gBAAgBomD,IAAI,OAAMxB,SAAA,CAjD1F,WACE,GAAK55E,EAEL,OAAI8E,GAEA8zE,EAAAA,GAAAA,GAACizB,GAAAA,EAAK,CACJ/mG,MAAOA,EACP2pC,MAAOA,EACPq9D,YAAavC,EACbF,cAAeA,EACfgB,oBAAqBT,EACrBmC,WAAS,EACT5wB,QAASslB,EACTuL,YAAaZ,IAIfrmG,GAEA6zE,EAAAA,GAAAA,GAACqzB,GAAAA,EAAK,CACJlnG,MAAOA,EACP6kG,8BAA+BA,EAC/BC,8BAA+BA,EAC/BkC,WAAS,EACTD,YAAavC,EACb2C,YAAazC,EACbJ,cAAeA,EACfluB,QAAS2vB,EAAQrK,EAAcuK,EAC/BgB,YAAaZ,SAXnB,CAiBF,CAgBSe,GACAnsG,EAAQ8E,QACP8zE,EAAAA,GAAAA,GAACuN,GAAAA,EAAM,CACLxxB,KAAK,QACL7vD,MAAO9E,EAAQ8E,MACfkwB,WAAW0lD,EAAAA,GAAAA,GAAe,iBAAkBvgD,EAAKkhD,OAAS,aAG9DL,EAAAA,GAAAA,IAAA,QAAMhmD,WAAW0lD,EAAAA,GAAAA,GAAe,6BAA8BqwB,GAAY,aAAanxB,SAAA,CACpF55E,EAAQosG,cAAgBjyE,EAAK,4BAA8BA,EAAK,qBACjEy+C,EAAAA,GAAAA,GAACyzB,GAAAA,EAAW,CAAClxB,QAAS8vB,EAAyBj2E,UAAU,WAAU4kD,SAChEz/C,EAAK,qCA1FlB,WACE,GAAKn6B,EACL,OACEg7E,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,6BAA6BomD,IAAI,OAAMxB,SAAE55E,EAAQ6O,QAC/D0G,QAAQvV,EAAQ4E,SAASmI,QACxB6rE,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,yBAAyBomD,IAAI,OAAOuC,IAAKusB,EAAWtwB,UACjEhB,EAAAA,GAAAA,GAAA,QAAM5jD,UAAU,qBAAqBomD,IAAI,OAAMxB,UAC5CiH,EAAAA,GAAAA,IAAuB,CACtB9zE,KAAM/M,EAAQ4E,QAAQmI,KAAKA,KAC3B0J,SAAUzW,EAAQ4E,QAAQmI,KAAK0J,gBAMvCmiE,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLtmD,UAAU,2BACV2/B,KAAK,OACL4mB,MAAM,cACNiV,eAAa,EACbrV,QAASslB,EAAY7mB,SAEpB55E,EAAQ4uC,eAIjB,CAkES09D,OAEH1zB,EAAAA,GAAAA,GAAC2zB,GAAAA,EAAe,KAChBvxB,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,yBAAwB4kD,SAAA,EACrChB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLtmD,UAAU,wBACVumD,MAAM,oBACN/jE,OAAK,EACLm9C,KAAK,OACL6mB,UAAWrhD,EAAK,SAChBghD,QAAS0vB,EAA2BjxB,UAEpChB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,QAAQ3e,UAAU,4BAE9Bh1B,EAAQy8D,YACPmc,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLtmD,UAAU,wBACVumD,MAAM,oBACN/jE,OAAK,EACLm9C,KAAK,OACL6mB,UAAWrhD,EAAK,QAChBghD,QAASsjB,EACTI,cAAeJ,EAAkB7kB,UAEjChB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,OAAO3e,UAAU,kCAKnCqzE,IACCzvB,EAAAA,GAAAA,GAACowB,GAA6B,CAC5BnsD,OAAQ2hD,EACRuK,OAAQV,EACRmE,WAAY7uB,EACZl1D,SAAUzoB,EAAQyoB,SAClBg0C,UAAWz8D,EAAQy8D,UACnBC,YAAa18D,EAAQ08D,YACrBF,eAAgBx8D,EAAQw8D,eACxBuf,QAAS2iB,EACT5J,oBAAqB6J,MAhErB,wB,gBC1LV,MAoYA,IAAevlB,EAAAA,GAAAA,IAlY0BqzB,EACvCC,aACAtsG,SACAyG,WACAqH,aACAy+F,gBACAC,qBACAC,mBACA9pG,WACA+pG,aACAC,gBACAhM,YACAiM,gBACAC,kBACAlB,YACApJ,eACAuK,cACAC,+BACAC,uBACAhsG,OACAisG,UACAC,gBACAhxC,aACAixC,0BACA9J,iBACAC,kBACAiE,wBACAjwF,gBACA81F,qBACAC,gBACAC,2BACAvO,cAEA,MAAM,oBAAEwO,IAAwB1uF,EAAAA,EAAAA,MAE1B2uF,EAAuBC,GAAAA,GACvBC,GAAaC,EAAAA,GAAAA,GAAiB,IAAMV,IAAYO,IAAwB,CAACP,EAASO,IAElFI,GAAqBt2F,IAAkB4kD,GAEvC,8BACJ2xC,EAA6B,8BAC7BrE,EAA6B,8BAC7BC,GLhHW,SACbzoG,EACAuhG,EACAyK,EACAM,EACAttG,GAEA,MAAM,oBACJiP,EAAmB,iBAAE6+F,EAAgB,sBAAEC,EAAqB,0BAC5DC,IACEnvF,EAAAA,EAAAA,OAEE,SAAEirE,IAAaC,EAAAA,EAAAA,MACfkkB,EAAkCnkB,EAAW,IAAM,KAGvDkgB,QAAS6D,EAA+BK,OAAQC,EAAkBC,SAAUC,IAC1EnE,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS5H,EACT+L,WAtBsC,KAuBpC7+F,IACF,GAAa,WAATzO,IAAqButG,EAAAA,GAAAA,MACvB,OAGF,IAAIr/F,EAAQ,EACZ,MAAMs/F,EAAuB,GACvBC,EAAwB,GACxBC,EAAmC,GACnCC,EAAsC,GACtCC,EAAmC,GAEzCn/F,EAAQ3O,QAAS+tG,IACf,MAAM,eAAErE,EAAc,OAAED,GAAWsE,GAE7B,QAAEC,GAAYvE,EACdzkG,EAAY2D,OAAOqlG,EAAQ9oG,eAAiB8oG,EAAQhpG,WACpDipG,EAAkD,SAA9BD,EAAQC,kBAC5BC,EAAcF,EAAQE,YAAcvlG,OAAOqlG,EAAQE,kBAAe7mG,EAEnEqiG,GAOD1kG,EAAYoJ,IACdA,EAAQpJ,GAGNgpG,EAAQx+B,kBACVk+B,EAAWlkG,KAAKxE,GAGdgpG,EAAQG,mBACVR,EAAYnkG,KAAKxE,GAGfgpG,EAAQ1/F,UACVs/F,EAAuBpkG,KAAK0kG,GAAelpG,GAGzCipG,GACFH,EAAuBtkG,KAAK0kG,GAAelpG,IAvBvCgpG,EAAQ1/F,UACVu/F,EAA0BrkG,KAAK0kG,GAAelpG,KA0BhDknG,EAAqBl4E,SAAW5lB,GAAS89F,EAAqBl4E,SAChE7lB,EAAoB,CAAEC,UAGpBs/F,EAAW/tG,QACbqtG,EAAiB,CAAE9tG,SAAQ8N,WAAY0gG,IAGrCC,EAAYhuG,QACdstG,EAAsB,CAAEjgG,WAAY2gG,KAGlCC,EAAuBjuG,QAAUkuG,EAA0BluG,SAC7D6sG,EAAyB,CAAEoB,yBAAwBC,8BAGjDC,EAAuBnuG,QACzButG,EAA0B,CAAEhuG,SAAQ4I,IAAKgmG,OAI7CM,EAAAA,GAAAA,IAAkBf,EAAkBE,GAEpC,MACErE,QAASR,IACPU,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS5H,EACT+L,WAAYlI,GACZjG,OAAQ8N,KAGFjE,QAASP,IAAkCS,EAAAA,GAAAA,IAAwB,CACzEC,QAAS5H,EACT+L,WAAYlI,KAGd,MAAO,CACLyH,gCACArE,gCACAC,gCAEJ,CKIM0F,CAAoBnuG,EAAMuhG,EAAcyK,EAAsBM,EAA0BttG,IAEtF,oBACJovG,EAAmB,oBACnBC,EAAmB,mBACnBC,EAAkB,cAClBC,GC/GW,SACbvuG,EACAuhG,EACAz0F,EACA0+F,EACAC,EACA9pG,EACAyqG,EACAC,EACAJ,GAEA,MAAM,qBAAE78F,IAAyByO,EAAAA,EAAAA,OAE1B2wF,EAAmBC,IAAoB90B,EAAAA,GAAAA,IAC5C,IAAgB,WAAT35E,EAAoB,EACzBmS,EAAAA,EAAAA,IAAS,IAAM/C,EAAqB,CAAEsG,UAAWO,EAAAA,GAAkBC,YAAc,KAAM,GAAM,IAC7F/D,EAAAA,EAAAA,IAAS,IAAM/C,EAAqB,CAAEsG,UAAWO,EAAAA,GAAkBI,WAAa,KAAM,GAAM,IAC1F,GAEJ,CAACjH,EAAsBtC,IAGnBuhG,GAAsB/xB,EAAAA,GAAAA,MACtBgyB,GAAqBhyB,EAAAA,GAAAA,MACrBiyB,GAAgBjyB,EAAAA,GAAAA,MAEhBoyB,GAAoB1xB,EAAAA,GAAAA,GAAgB,KACxC,IAAKivB,EAAS,OAEd,IAAKn/F,GAAYrN,OAGf,OAFA2sG,GAAmB,QACnBC,GAAc,GAIhB,IAAKZ,EAGH,OAFAW,GAAmB,QACnBC,GAAc,GAIhB,MAAMpN,EAAYsC,EAAaztE,QACzB66E,EAAaJ,EAAcz6E,QACjC,IAAKmrE,IAAc0P,EAAY,OAE/B,MAAM,aAAEC,EAAY,aAAEC,EAAY,UAAEC,GAAc7P,EAC5C8P,EAAeJ,EAAWK,UAC1BC,EAAe1wG,KAAK6X,MAAM24F,EAAeD,EAAYF,GAErDM,EAAaD,GArDC,EAuDC,IAAjBJ,IAEJzC,EAAmBzqG,GAAYutG,IALVD,GArDH,KA2DlB5C,GAAe6C,OAIflG,QAASmG,IACPjG,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS5H,EACTpC,OAAQiQ,EAAAA,IACN3gG,IACGggG,GAAqBD,GAI1B//F,EAAQ3O,QAAQ,EAAG0pG,iBAAgBD,aAC5BC,IAEoB,sBAArBD,EAAO31E,WACT46E,IAGuB,qBAArBjF,EAAO31E,WACT66E,SAKAL,EAAsBthG,GAAcA,EAAWrN,OAAS,GAE9D4vG,EAAAA,GAAAA,IAAehB,EAAqBD,EAAsBe,OAAgChoG,IAC1FkoG,EAAAA,GAAAA,IAAef,EAAoBF,EAAsBe,OAAgChoG,GAEzF,MACE6hG,QAASsG,EACTpC,OAAQqC,EACRnC,SAAUoC,IACRtG,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS5H,EACTpC,OAAQsQ,IACRC,kBAAmBC,GAAAA,IAClBjB,IAEHW,EAAAA,GAAAA,IAAed,EAAee,GAE9B,MACEtG,QAAS4G,EACT1C,OAAQ2C,EACRzC,SAAU0C,IACR5G,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS5H,EACTpC,OA3GoB,EA4GpBuQ,kBAAmBC,GAAAA,IAClBjB,IAEHW,EAAAA,GAAAA,IAAed,EAAeqB,IAE9Bt3B,EAAAA,GAAAA,IAAU,KACJ2zB,GACFyC,KAED,CAACzC,EAASyC,IAEb,MAAMqB,GAAgB/yB,EAAAA,GAAAA,GAAgB,KACpCuyB,IACAM,IAEA9mG,WAAW,KACT+mG,IACAN,KA3HuB,QAgI3BlU,EAAAA,GAAAA,GAAcyU,EAAe,CAACA,EAAejjG,IAG7C,MAAMkjG,GAA8BC,EAAAA,GAAAA,IAAmBzE,EApIvB,KAuIhC,OAFA0E,EAAAA,GAAAA,GAAgBH,EAAe,CAACA,EAAeC,IAExC,CACL5B,sBACAC,sBACAC,qBACAC,gBAEJ,CD1BM4B,CACFnwG,EACAuhG,EACAz0F,EACA0+F,EACAC,EACA9pG,EACAyqG,EACAC,EACAJ,GAGItgB,IAAUvS,EAAAA,GAAAA,KACVrgD,IAAOs/C,EAAAA,GAAAA,KAEP+3B,IACJ54B,EAAAA,GAAAA,GAAA,OAAK5jD,WAAW0lD,EAAAA,GAAAA,GArES,iBAqE4B,wBAAwBd,UAC3EhB,EAAAA,GAAAA,GAAA,QAAAgB,SAAOmT,GAAQ,qBADiE,mBAI9E0kB,GAA0BA,CAACzxG,EAAqB0xG,KACpD,GAAI1xG,EAAQkiG,iBAAkB,CAC5B,MAAMyP,EAAiBD,GAAOjiG,UAAU5O,QAAU,EAC5Cwb,EAASrc,EAAQkiG,iBAAmByP,EAC1C,OACE/4B,EAAAA,GAAAA,GAAA,OACE5jD,WAAW0lD,EAAAA,GAAAA,GAAe,wBAAwBd,UAGlDhB,EAAAA,GAAAA,GAAA,QAAAgB,SAEI55E,EAAQqC,WACJ83B,GAAK,+BAAgC,CACrC9d,QAAQwD,EAAAA,EAAAA,IAAkBsa,GAAM9d,KAEhC,MACA,MAAMkyB,GAASC,EAAAA,EAAAA,MAAapkC,EAAAA,EAAAA,MAAapK,GACnC4xG,EAAYrjE,GAAS+nB,EAAAA,EAAAA,IAAan8B,GAAMoU,GAAU,GACxD,OAAOpU,GAAK,+BAAgC,CAC1CrmB,KAAM89F,EACNv1F,QAAQwD,EAAAA,EAAAA,IAAkBsa,GAAM9d,IAEnC,EAPC,MARH,wBAAwBrc,EAAQsB,KAoB3C,GAIIuwG,GAAiC7xG,IACrC,GAAIA,EAAQ6b,kBAAmB,CAC7B,MAAM,MAAEG,EAAK,aAAE4F,GAAiB5hB,EAAQ6b,kBAClC0yB,GAASC,EAAAA,EAAAA,MAAapkC,EAAAA,EAAAA,MAAapK,GACnC4xG,EAAYrjE,GAAS+nB,EAAAA,EAAAA,IAAan8B,GAAMoU,GAAU,GAClDujE,GAAWC,EAAAA,GAAAA,IAAexjE,GAAQjtC,GAAIswG,GAAaz3E,GAAK,uBAExD63E,EAA8C,YAA5BhyG,EAAQ0F,WAAWtE,MAAsBpB,EAAQ0F,UAAUI,cAC/E7B,EAAAA,EAAAA,MAAkBmG,EAAAA,EAAAA,MAAapK,EAAQI,OAAQJ,EAAQ0F,UAAUI,mBACjEyC,EAGE0pG,GAFcC,EAAAA,EAAAA,IAAwBlyG,EAASgyG,IAGjDG,EAAAA,EAAAA,IAA8Bh4E,GAAMn6B,EAASgyG,EAAiBhyG,EAAQqC,WAAYyvG,GAClF9xG,EAAQqC,WACN83B,GAAK,mCAA+B5xB,EAAW,CAAEs8F,WAAW,EAAMC,cAAc,IAChF3qE,GAAK,8BAA+B,CAAErmB,KAAMg+F,GAAY,CAAEjN,WAAW,EAAMC,cAAc,IAEzFE,GAA0BlsC,EAAAA,EAAAA,IAAQ,CACtC,CAAC3+B,GAAK,cAAene,EAA4B,QAAnBA,EAAME,UAChCk2F,EAAAA,EAAAA,IAAgBj4E,IAAMk4E,EAAAA,GAAAA,IAAoBr2F,EAAMK,UAChDwD,EAAAA,EAAAA,IAAkBsa,GAAMne,EAAMK,QAAW8d,GAAK,0BAClD,CAACA,GAAK,aACJvY,GACI0wF,EAAAA,GAAAA,IAAwB1wF,EAAcuY,GAAM4yD,IAC5C5yD,GAAK,4BAIb,OACEy+C,EAAAA,GAAAA,GAAA,OACE5jD,WAAW0lD,EAAAA,GAAAA,GAAe,wBAAwBd,UAGlDoB,EAAAA,GAAAA,IAAA,QAAMhmD,UAAWu9E,GAAAA,EAAoBC,uBAAuB54B,SAAA,EAC1DhB,EAAAA,GAAAA,GAAA,OACE5jD,UAAWu9E,GAAAA,EAAoBE,mBAAmB74B,SAEjDq4B,IAEF18F,QAAQyvF,EAAUnkG,UACjB+3E,EAAAA,GAAAA,GAACytB,GAAAA,EAAS,CACRrxE,UAAWu9E,GAAAA,EAAoB12F,kBAC/B+Q,KAAMo4E,QAXP,yBAAyBhlG,EAAQsB,KAiB5C,GAIIoxG,GAAwB/K,EAAwB,EAAIgF,EAAcjvF,OAAO,CAACC,EAAKg1F,IAC5Eh1F,EAAMg1F,EAAatR,aAAauR,OAAO/xG,OAC7C,GACH,IAAIgyG,GAAkB,EAEtB,MAAMC,IAAiBC,EAAAA,GAAAA,GAAsB7kG,GACvC8kG,GAAez9F,QACnBrH,GAAc4kG,IAAkB5kG,EAAWA,EAAWrN,OAAS,KAAOiyG,GAAeA,GAAejyG,OAAS,IA6JzGogG,GAAa0L,EAAc5+F,IAAI,CACnCklG,EACAC,EACAC,KAEA,MAAM9R,EA/JR,SACE4R,EAA6BC,EAAwBC,GAErD,OAAOF,EAAU5R,aAAatzF,IAAI,CAChCqlG,EACAC,EACAC,KAEA,GACyB,IAAvBF,EAAYvyG,SACR6/F,GAAQ0S,EAAY,MACrBzrG,EAAAA,EAAAA,IAAgByrG,EAAY,KACY,cAAxCA,EAAY,GAAGxuG,QAAQ0E,QAAQlI,KAClC,CACA,MAAMpB,EAAUozG,EAAY,GACtBG,EACJF,IAAqBC,EAAkBzyG,OAAS,GAC7CqyG,IAAmBC,EAAgBtyG,OAAS,EAGjD,OAAOi4D,EAAAA,EAAAA,IAAQ,CACb94D,EAAQsB,KAAO6rG,EAA6Bj4E,SAAWs8E,IACvD54B,EAAAA,GAAAA,GAAC46B,GAAAA,EAAa,CAEZxzG,QAASA,EACT6G,SAAUA,EACV4sG,6BAA8BxF,EAC9BrE,8BAA+BA,EAC/BC,8BAA+BA,EAC/BuD,qBAAsBA,EACtB7F,gBAAiBmL,KAA0BG,GAC3Ca,YAAaH,GAAgBP,GAC7BO,aAAcA,EACdI,sBAAuB7F,EACvBJ,yBAA0BA,GAXrB1tG,EAAQsB,KAcnB,CAEA,IAAIsyG,EAEJ,MAAMC,EAAsBT,EAAYrlG,IAAI,CAC1C4yF,EACAmT,KAEA,MAAM9zG,EAAU0gG,GAAQC,GAAkBA,EAAeiB,YAAcjB,EACjE+Q,EAAQhR,GAAQC,GAAkBA,OAAiBp4F,EACnDxH,GAAQgzG,EAAAA,EAAAA,IAAa/zG,GACrBg0G,EAAiBtT,GAAQC,GACzBmB,EAAcsR,EAAYU,EAAe,GAE3C9zG,EAAQ2I,iBAAmBukG,EAAYh4E,WAAY++E,EAAAA,EAAAA,IAAiBj0G,EAAQ2I,mBAC9EukG,EAAYh4E,SAAU++E,EAAAA,EAAAA,IAAiBj0G,EAAQsB,KAGjD,MAAM4yG,GAAmBF,GAAkBh0G,EAAQqe,UAAYre,EAAQqe,eAAY9V,EAC7E4rG,EAAsBrS,IAAgBpB,GAAQoB,GAAeA,EAAYzjF,eAAY9V,EACrF6rG,EAAoBp0G,EAAQsB,KAAOuF,EAEnCysD,EAAW,CACf+gD,eAAiC,IAAjBP,EAChBQ,cAAeR,IAAiBV,EAAYvyG,OAAS,EACrD0zG,uBAAwBh/F,QAAQ2+F,GAAmBA,IAAoBN,GACvEY,sBAAuBj/F,QAAQ2+F,GAAmBA,IAAoBC,GACtEZ,aACEO,IAAiBV,EAAYvyG,OAAS,GACnCwyG,IAAqBC,EAAkBzyG,OAAS,GAChDqyG,IAAmBC,EAAgBtyG,OAAS,GAInD+yG,EAAyBM,EAEzB,MAAMO,GAAaC,EAAAA,EAAAA,IAAqB10G,GAElC4O,GAAMmH,EAAAA,EAAAA,IAA6B/V,GAAW,GAAGA,EAAQmU,QAAQsgG,IAAeA,EAEhFE,GAA+B,IAAlBrH,IAA4BN,GAAiBz3F,QAAQ03F,GAExE,OAAOn0C,EAAAA,EAAAA,IAAQ,CACb94D,EAAQsB,KAAO6rG,EAA6Bj4E,SAAWs8E,GACvDxxG,EAAQkiG,mBAAqBnB,GAAa0Q,GAAwBzxG,EAAS0xG,GAC3E1xG,EAAQ6b,mBAAqBg2F,GAA8B7xG,IAC3D44E,EAAAA,GAAAA,GAACg8B,GAAAA,EAAO,CAEN50G,QAASA,EACTyzG,6BAA8BxF,EAC9BrE,8BAA+BA,EAC/BC,8BAA+BA,EAC/B6H,MAAOA,EACP3F,UAAWA,EACXpF,WAAYrzC,EAASghD,eAAiBvT,IAAchgG,KAAWqzG,IAAsBtH,GACrF+H,eAAgBvhD,EAAS+gD,gBAAkBtT,IAAchgG,EACzD8F,SAAUA,EACViI,gBAAiB1N,EACjBuzG,WAAYA,EACZG,WAAYH,GAAc9tG,IAAaD,EAAAA,IAA2B,cAATxF,EACzDmmG,gBAAiBmL,KAA0BG,GAC3Ca,YAAapgD,EAASigD,cAAgBP,GACtCqB,eAAgB/gD,EAAS+gD,eACzBC,cAAehhD,EAASghD,cACxBC,uBAAwBjhD,EAASihD,uBACjCC,sBAAuBlhD,EAASkhD,sBAChCjB,aAAcjgD,EAASigD,aACvBnG,qBAAsBA,EACtBM,yBAA0BA,EAC1BiG,sBAAuB7F,GAtBlBl/F,GAwBP5O,EAAQsB,KAAOuF,IAEb+xE,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,uBAAsB4kD,UACnChB,EAAAA,GAAAA,GAAA,QAAAgB,SACGmT,GAAQggB,EACJD,EAAa,aAAe,YAAe,wBAHV,0BAQ7C8F,OAEH,IAAK7R,EAAW,OAAO8S,EAEvB,MAAMkB,EAAqB3B,EAAYA,EAAYvyG,OAAS,GACtD8L,EAAc+zF,GAAQqU,GAAsBA,EAAmBnT,YAAcmT,EAC7E3uG,GAAgBsuG,EAAAA,EAAAA,IAAqB/nG,GACrCqoG,EAAsBtC,GAAwBG,GAE9CuB,EAAoBznG,EAAYrL,KAAOuF,EACvC9F,GAAQgzG,EAAAA,EAAAA,IAAapnG,GAErBsoG,EAAsB7B,EAAY,GAClC9zF,EAAeohF,GAAQuU,GAAuBA,EAAoBrT,YAAcqT,EAChFnyE,GAAiB4xE,EAAAA,EAAAA,IAAqBp1F,GAEtC1Q,EAAM,GAAGk0B,KAAkB18B,IAC3B9E,EAAMwhC,IAAmB18B,EAAiB,iBAAiB08B,IAC7D,iBAAiBA,KAAkB18B,IAEjCugG,EAAa5F,IAAchgG,KAAWqzG,IAAsBtH,GAClE,OACEl0B,EAAAA,GAAAA,GAAC0uB,GAAoB,CAEnBhmG,GAAIA,EACJtB,QAAS2M,EACTg6F,WAAYA,EACZY,gBAAiByN,EACjB7V,QAASA,EAAQvlB,SAEhBi6B,GAPIjlG,IAWb,CAOuBsmG,CAAsBjC,EAAWC,EAAgBC,GAEtE,OACEn4B,EAAAA,GAAAA,IAAA,OACEhmD,WAAW0lD,EAAAA,GAAAA,GAAe,uBAAwB+oB,GAAkBC,IAC9C,IAAnBwP,GAAwB,4BAE3BzH,YAAaC,GAAAA,EACbyJ,eAAa,EAAAv7B,SAAA,EAEbhB,EAAAA,GAAAA,GAAA,OACE5jD,WAAW0lD,EAAAA,GAAAA,GAAe,cAAeszB,GAAqB,eAE9DvC,YAAaC,GAAAA,EACbvwB,QAAS6yB,EAAoB,IAAML,EAAoB,CAAErsC,WAAY2xC,EAAU9R,gBAAc54F,EAAUqxE,UAEvGoB,EAAAA,GAAAA,IAAA,QAAMI,IAAI,OAAMxB,SAAA,CACbtd,GAAc22C,EAAU/R,eAAiBkU,EAAAA,KACxCroB,GAAQ,+BAETzwB,GAAc22C,EAAU/R,eAAiBkU,EAAAA,KACxCroB,GAAQ,sBAAsBsoB,EAAAA,GAAAA,IAAgBtoB,GAASkmB,EAAU9R,cAAU54F,GAAW,KAEtF+zD,IAAc+4C,EAAAA,GAAAA,IAAgBtoB,GAASkmB,EAAU9R,cAXjD,eAcLE,EAAauR,SApBTK,EAAU9R,YAyBrB,OACEnmB,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,qBAAqBmgF,eAAa,EAAAv7B,SAAA,CAC9C41B,IAAuB52B,EAAAA,GAAAA,GAAA,OAAK+E,IAAK8xB,EAA6Cz6E,UAAU,qBAA9B,qBAC1Du4E,IACI30B,EAAAA,GAAAA,GAACwqB,GAAsB,CAAgChjG,OAAQA,EAAQijG,aAAW,GAArD,gBAAgBjjG,KACjD6gG,GAAW2R,OACXpD,IACC52B,EAAAA,GAAAA,GAAA,OACE+E,IAAK+xB,EAEL16E,UAAU,oBADN,qBAIR4jD,EAAAA,GAAAA,GAAA,OACE+E,IAAKgyB,EAEL36E,UAAU,eADN,eAGL03E,GAAcG,IACbj0B,EAAAA,GAAAA,GAAC+wB,GAAgB,CAEfvpG,OAAQA,EACRuiG,aAAcA,EACdiH,8BAA+BA,EAC/BC,8BAA+BA,GAJ1BzpG,Q,gBE1bf,MAAMk1G,GAAY,EAAI52G,EAAAA,EA+FtB,IAAe06E,EAAAA,GAAAA,IArFkBm8B,EAC/BzU,iBACA1/F,OACAo0G,yBACAptG,YAEA,MAAM+xB,GAAOqgD,EAAAA,GAAAA,KAEb,MAAa,cAATp5E,EAqCN,SAAyB+4B,GACvB,OACEy+C,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,QAAO4kD,UAAChB,EAAAA,GAAAA,GAAA,QAAAgB,SAAOz/C,EAAK,yCAEvC,CAxCWs7E,CAAgBt7E,GAGrB2mE,EAuCN,SAA6B3mE,GAC3B,OACEy+C,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,aAAY4kD,UACzBoB,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,UAAS4kD,SAAA,EACtBhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,iBAAiB3e,UAAU,sBACtC4jD,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEz/C,EAAK,0CAC5B6gD,EAAAA,GAAAA,IAAA,MAAIhmD,UAAU,cAAa4kD,SAAA,EACzBhB,EAAAA,GAAAA,GAAA,MAAAgB,SAAKz/C,EAAK,iDACVy+C,EAAAA,GAAAA,GAAA,MAAAgB,SAAKz/C,EAAK,iDACVy+C,EAAAA,GAAAA,GAAA,MAAAgB,SAAKz/C,EAAK,iDACVy+C,EAAAA,GAAAA,GAAA,MAAAgB,SAAKz/C,EAAK,uDAKpB,CArDWu7E,CAAoBv7E,GAGzBq7E,EAoDN,SAAqBr7E,GACnB,OACEy+C,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,aAAY4kD,UACzBoB,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,UAAUomD,IAAKjhD,EAAKkhD,MAAQ,WAAQ9yE,EAAUqxE,SAAA,EAC3DhB,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEz/C,EAAK,2BAC5By+C,EAAAA,GAAAA,GAAA,KAAG5jD,UAAU,cAAa4kD,SAAEz/C,EAAK,8BACjC6gD,EAAAA,GAAAA,IAAA,MAAIhmD,UAAU,kBAAiB4kD,SAAA,EAC7BhB,EAAAA,GAAAA,GAAA,MAAAgB,SAAKz/C,EAAK,2BACVy+C,EAAAA,GAAAA,GAAA,MAAAgB,SAAKz/C,EAAK,2BACVy+C,EAAAA,GAAAA,GAAA,MAAAgB,SAAKz/C,EAAK,2BACVy+C,EAAAA,GAAAA,GAAA,MAAAgB,SAAKz/C,EAAK,iCAKpB,CAlEWw7E,CAAYx7E,GAGjB/xB,EASN,SAAqB+xB,EAAiB/xB,GACpC,OACEwwE,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,aAAY4kD,UACzBoB,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,UAAS4kD,SAAA,EACtBhB,EAAAA,GAAAA,GAACg9B,GAAAA,EAAS,CACRxtG,MAAOA,EACPusD,KAAM2gD,GACNtgF,UAAU,iCAEZ4jD,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEz/C,EAAK,uCAC5By+C,EAAAA,GAAAA,GAAA,KAAG5jD,UAAU,gCAA+B4kD,UAAEqrB,EAAAA,GAAAA,GAAW9qE,EAAK,mCAAoC,CAAC,aAI3G,CAtBW07E,CAAY17E,EAAM/xB,IAIzBwwE,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,QAAO4kD,UAAChB,EAAAA,GAAAA,GAAA,QAAAgB,SAAOz/C,EAAK,oB,wCCnDvC,MCoGA,IAAei/C,EAAAA,GAAAA,KACb6C,EAAAA,EAAAA,IAAqB,CAACj9E,GAAUgC,OAAQyf,MACtC,MAAMguB,GAAQm4C,EAAAA,EAAAA,KAAY5nF,IACpB,aAAE82G,IAAiBC,EAAAA,EAAAA,KAAkB/2G,EAAQyvC,IAAU,CAAC,EAG9D,MAAO,CACLqnE,eACAz8F,MAJWC,EAAAA,EAAAA,KAAWta,EAAQyhB,KAHlCw7D,CAtEF,UAAqC,aACnC65B,EAAY,KAAEz8F,EAAI,kBAAEI,IAEpB,MAAMszE,GAAUvS,EAAAA,GAAAA,KACVrgD,GAAOs/C,EAAAA,GAAAA,MACP,iBAAE7wD,EAAgB,sBAAEpM,IAA0ByC,EAAAA,EAAAA,MAE9C+2F,GAAyB53B,EAAAA,GAAAA,GAAgB,IAAMx1D,KAE/CqtF,GAAqB73B,EAAAA,GAAAA,GAAgB,KACzC5hE,EAAsB,CAAC,KAGzB,GAAKnD,EAEL,OACEu/D,EAAAA,GAAAA,GAAA,OAAK5jD,UD/Cc,WC+CS4kD,UAC1BoB,EAAAA,GAAAA,IAAA,OAAKhmD,UDhDyE,WCgDjD4kD,SAAA,EAC3BoB,EAAAA,GAAAA,IAAA,OAAKhmD,UDjDgI,WCiD/F4kD,SAAA,EACpChB,EAAAA,GAAAA,GAACs9B,GAAAA,EAAuB,CACtBC,OAAQC,GAAAA,EAAeC,OACvB1hD,KAAM,GACN4mB,MAAOu6B,EACP9gF,UDtD0L,cCwD5L4jD,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,mBAAmB3e,UDxDmN,iBC0DnP4jD,EAAAA,GAAAA,GAAA,QAAM5jD,UD1DsQ,WC0DxO4kD,SAEhCngE,EACI0gB,GAAK7R,EAAAA,EAAAA,IAAcjP,GAAQ,8BAAgC,iCAAkC,CAC7FA,MAAMi9C,EAAAA,EAAAA,IAAan8B,EAAM9gB,GACzBgD,QAAQi6F,EAAAA,EAAAA,IAAkBn8E,EACxB1gB,EACA,CACE88F,QAAQ,EACRvhF,UDnEqT,WCoErTwhF,mBDpE+R,cCsElS,CACD3R,WAAW,EACXC,cAAc,KAEdG,EAAAA,GAAAA,GAAWlY,EAAQ,wBAAwBz2B,EAAAA,EAAAA,IAAan8B,EAAM9gB,IAAQ,CAAC,uBAG/Eu/D,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLC,MAAM,oBACN5mB,KAAK,UACL8hD,MAAI,EACJt7B,QAAS1hE,EAAoBw8F,EAAqBD,EAClDhhF,UDlFiC,WCkFR4kD,SAGvBngE,GAEIuhE,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,CACGz/C,EAAK,mBACNy+C,EAAAA,GAAAA,GAAC89B,GAAAA,EAAQ,CAACC,OAAO,cAGnB5pB,EAAQ,8BAMxB,ICd4B,IA6DvB6pB,GAAO,SAAPA,GAAO,OAAPA,EAAAA,EAAO,qBAAPA,EAAAA,EAAO,2BAAPA,EAAAA,EAAO,iCAAPA,EAAAA,EAAO,qCAAPA,EAAAA,EAAO,6BAAPA,EAAAA,EAAO,qCAAPA,EAAAA,EAAO,2BAAPA,EAAAA,EAAO,6BAAPA,CAAO,EAAPA,IAAO,IAcZ,MAYMC,IAAwBtjG,EAAAA,EAAAA,IAAUC,GAAOA,IANvB,KAM8C,GAqoBtE,IAAe4lE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GAAUoB,SAAQyG,WAAUzF,WAC3B,MAAMH,EAAgBjC,EAAOiC,cACvBmB,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BkoC,GAAe3uB,EAAAA,EAAAA,KAAmB3a,EAAQoB,GAChD,IAAKgC,EACH,MAAO,CAAEnB,iBAGX,MAAMiN,GAAa4oG,EAAAA,EAAAA,KAAwB93G,EAAQoB,EAAQyG,EAAUzF,GAC/DiP,EAAwB,cAATjP,GACjB0M,EAAAA,EAAAA,KAA4B9O,EAAQoB,IACpCyI,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAEzBsX,GAAgB/M,EAAAA,EAAAA,IAAiBvK,EAAQyG,EAAU5F,GAEzD,KACE4F,IAAaD,EAAAA,IAAmB8Q,GAAkBtV,GAAMiG,SACnDgI,GAAgBxJ,GAAYwJ,EAAaxG,OAAOhD,KAErD,MAAO,CAAE5F,iBAGX,MAAM0Z,GAAeC,EAAAA,GAAAA,IAAuB5b,EAAQoB,GAC9C22G,GAAqBC,EAAAA,GAAAA,IAA+Bh4G,EAAQoD,GAAM20G,oBAClEpqG,GAAc01F,EAAAA,EAAAA,KAAsBrjG,EAAQoB,EAAQsX,EAAgB,QAAU,OAC9Eu/F,GAAal8F,EAAAA,EAAAA,KAAuB/b,EAAQoB,GAE5C82G,EACJrwG,IAAaD,EAAAA,KACTsH,IAAe9L,EAAKsE,cAAgBuwG,GAActqG,IAAgBA,EAAY0R,UAG9E84F,GAAUjoE,EAAAA,EAAAA,KAAUlwC,EAAQoB,GAC5Bg3G,EAAe7hG,QAAQ+yB,GAAc9H,UAAU62E,eAC/C5T,EAAiBn7D,GAAc9H,UAAUijE,eACzCC,EAAkBp7D,GAAc9H,UAAUkjE,gBAE1Ct7F,GAAQgB,EAAAA,EAAAA,KAAYpK,EAAQoB,EAAQyG,GACpCsZ,GAAgB7P,EAAAA,EAAAA,IAASlQ,QAA+CmI,GAArC6X,EAAAA,EAAAA,KAAmBphB,EAAQoB,GAC9D2sG,IAAiBrjG,EAAAA,EAAAA,KAAiB1K,EAAQoB,EAAQyG,IAAWgB,cAG7DwhB,IADuBlU,EAAAA,EAAAA,KAA2BnW,KACT2a,EAAAA,EAAAA,KAAmB3a,EAAQiC,IAAgBooB,cACpF+wD,GAAkBp1D,EAAAA,EAAAA,KAA0BhmB,GAE5Cs4G,EAAoB/hG,QAAQ+yB,GAAck6D,eAC1C+U,EAAoBv4G,EAAOu4G,kBAE3BC,GAAqBC,EAAAA,EAAAA,KAAuBz4G,EAAQoB,IAASkB,GAC7Do2G,GAAeC,EAAAA,EAAAA,KAAuB34G,EAAQoB,KAAY+f,GAAcy3F,sBACxEC,EAAsBz1G,GAAM01G,mBAC5B3qF,GAAsBH,EAAAA,EAAAA,KAA0BhuB,GAEtD,MAAO,CACLqqB,gBACA0uF,cAAc,EACdp9F,eACAo8F,qBACA/J,eAAevqF,EAAAA,EAAAA,IAAcrgB,GAC7B6qG,iBAAiBA,EAAAA,EAAAA,IAAgB7qG,GACjC41G,aAAaphF,EAAAA,EAAAA,IAAYx0B,GACzB61G,qBAAsB71G,EAAK81G,iBAC3BC,UAAW/1G,EAAK+1G,UAChBrX,gBAAgB3gG,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAC7CwmG,iBAAiBC,EAAAA,EAAAA,IAAYzmG,GAC7B0mG,qBAAqBC,EAAAA,EAAAA,IAAwB3mG,GAC7Cg4G,MAAO7iG,QAAQ4hG,GACfC,eACA3T,iBACAC,kBACArnE,SAAUr9B,EAAOq9B,SACjBnuB,aACAmC,eACAlJ,eAAeC,EAAAA,EAAAA,KAAoBpI,EAAQoB,EAAQyG,GACnDgmG,iBAA2B,WAATzrG,IAAqB8F,EAAAA,EAAAA,KAAuBlI,EAAQoB,EAAQyG,GAC9EowG,aACAoB,oBAAoBC,EAAAA,EAAAA,KAAqBt5G,GACzCsuG,cAAentF,EAAe5K,QAAQ4K,EAAao4F,mBAAgBhwG,EACnEiwG,gBAAiBr4F,GAAcs4F,SAC/BrwG,QACAswG,4BAA4B11G,EAAAA,EAAAA,KAA+BhE,EAAQ,4BACnE25G,2BAA4Bv4G,IAAWgR,EAAAA,IACvC/I,QAASjG,EAAKiG,QACd0kG,gBACA9rG,gBACA23G,iBAAiBC,EAAAA,EAAAA,KAAsB75G,EAAQoB,GAC/CuM,YAAauqG,EAAgCvqG,OAAcpE,EAC3D6xE,kBACAk9B,oBACAC,oBACAC,qBACAE,eACAvqF,sBACA0qF,wBA9Fc57B,CAnoB2B68B,EAC7C14G,SACAyG,WACAzF,OACA22G,eACA1vG,UACA2kG,gBACAgL,cACAC,uBACA9Y,UACA9iE,WAEA4wE,kBACAI,UACAvM,iBACA8F,kBACAE,sBACAqR,YACAC,QACAhB,eACA3T,iBACAC,kBACAx1F,aACAmC,eACAlJ,gBACA2lG,aACAD,mBACAlyF,eACAo8F,qBACAhK,gBACAkK,aACAoB,qBACA1rG,cACA2gG,gBACAyL,kBACAC,gBACA5wG,QACAswG,4BACAC,6BACA13G,gBACAg4G,0BACAx/F,oBACA4P,gBACAmvF,kBACAI,kBACAx+B,kBACAk9B,qBACAE,sBACAD,qBACAG,gBACAvqF,uBACA0qF,uBACAnK,4BACAF,sBACAC,qBAEA,MAAM,qBACJj9F,GAAoB,gBAAE0oG,GAAe,sBAAEC,GAAqB,qBAAEC,GAAoB,kBAAEC,GAAiB,iBACrGzrF,GAAgB,qBAAEu+B,GAAoB,eAAEmtD,GAAc,uBAAEC,KACtDt6F,EAAAA,EAAAA,MAEE0jF,IAAejlB,EAAAA,GAAAA,MAIf87B,IAAkB97B,EAAAA,GAAAA,IACZ,WAATt8E,IAAqBq4G,EAAAA,EAAAA,MAAmBrvG,EAAAA,EAAAA,MAAahK,EAAQyG,KAC3D6yG,EAAAA,EAAAA,MAAuBtvG,EAAAA,EAAAA,MAAahK,EAAQyG,IAC5C,GAGCqmG,IAAcxvB,EAAAA,GAAAA,MACdi8B,IAAej8B,EAAAA,GAAAA,MACfk8B,IAAsBl8B,EAAAA,GAAAA,MACtB0vB,IAAuB1vB,EAAAA,GAAAA,MACvByvB,IAA+BzvB,EAAAA,GAAAA,MAC/Bm8B,IAAoBn8B,EAAAA,GAAAA,MACpBo8B,IAA4Bp8B,EAAAA,GAAAA,KAAO,GACnCq8B,IAA6Br8B,EAAAA,GAAAA,IAAOnoE,QAAQ5I,IAE5C+K,IAAgB/M,EAAAA,EAAAA,IAAiBvK,EAAQyG,EAAU5F,GACnD+4G,GAAoBtiG,IAAiB7Q,IAAaozG,EAAAA,IAElDv4E,GAAoBnsB,QAAQrH,GAE5BtL,IAAY0N,EAAAA,EAAAA,IAASlQ,GACrB2gG,GAAYxrF,SAAU3S,KAAcoqG,GACrClM,GAAkB8F,GAAmBE,GAAuBmR,IAEjEvb,EAAAA,GAAAA,GAAc,KAERh7D,KACFx9B,EAAAA,EAAAA,IAAU,KACR61G,GAA2B7kF,SAAU,KAGxC,CAACwM,MAGJg7D,EAAAA,GAAAA,GAAc,KACZ0Q,GAAqBl4E,QAAU/tB,GAC9B,CAACA,KAEJuyE,EAAAA,GAAAA,IAAU,KAEJrwD,IADe2jF,GAAiBoL,IACD/7E,GAAYgxE,GAAWkK,IACxD4B,GAAsB,CAAEn4G,OAAQZ,KAEjC,CAACA,EAAQi8B,EAAUgxE,EAASL,EAAeoL,EAAO/uF,EAAekuF,MAGpE7a,EAAAA,GAAAA,GAAc,KACRh7D,KACFyrE,GAA6Bj4E,QAAUk4E,GAAqBl4E,UAE7D,CAACwM,MAEJg7D,EAAAA,GAAAA,GAAc,KACZmd,GAAkB3kF,QAAU+hF,GAC3B,CAACA,KAGJv9B,EAAAA,GAAAA,IAAU,KACHm+B,IAAwBH,IAC7B6B,GAAuB,CAAEn5G,SAAQ6S,eAAgBka,MAChD,CAAC0qF,GAAqBH,GAAcvqF,GAAqB/sB,ICrSvBi5G,KACrC,MAAMa,GAAa97B,EAAAA,GAAAA,GAAiB7e,IAClC,MAAMrxD,GAAaisG,EAAAA,GAAAA,KAEfjsG,GAAcA,EAAWrN,OAAS,IACpC0+D,EAAE+Y,iBACF+gC,EAAkB,CAAEnrG,mBAIxBu/E,EAAAA,GAAAA,IAAW1S,EAAAA,GAAAA,IAAQ,KAAM,CACvB,QAASm/B,IACP,MD2RJE,CAA8Bf,IAE9B,MAAM1M,IAAgB5xB,EAAAA,GAAAA,IAAQ,KAC5B,IAAK7sE,GAAYrN,SAAWwP,EAC1B,OAGF,MAAMgqG,EAA+B,GACrCnsG,EAAWhN,QAAQ,CAACI,EAAIsX,EAAOgF,KAC7B,MAAM08F,EAAcD,EAAeA,EAAex5G,OAAS,GAErDb,EAAUqQ,EAAa/O,GAC7B,IAAKtB,EACH,OAGF,MAAM,wBAAEu6G,EAAuB,oCAAEC,GAAwC,MACvE,GAAKhC,GAA4B,WAATp3G,EACxB,OAAIk5G,GACCA,EAAYnmG,KAAOqkG,EAAgBiC,YAAcjC,EAAgBiC,YAAcz6G,EAAQmU,KACnF,CAAEomG,yBAAyB,EAAMC,qCAAqC,GAG3E5hG,IAAUgF,EAAI/c,OAAS,GAAKb,EAAQmU,KAAOqkG,EAAgBiC,WACtD,CACLF,yBAAyB,EACzBC,qCAAqC,QAHzC,CAQD,EAfwE,IAejE,CAAC,EAMT,GAJIA,GACFH,EAAe3vG,KAAK1K,GAGlBu6G,EAAyB,CAC3B,MAAMn0G,EAAgBo0G,EAAsCx6G,EAAQsB,GAAMg5G,GAAah5G,IAAOtB,EAAQsB,GAAK,EAC3G+4G,EAAe3vG,KAAK,CAClBpJ,GAAIo5G,GAA6Bt0G,GACjChG,OAAQJ,EAAQI,OAChB+T,KAAMqkG,EAAiBiC,WACvBp4G,YAAY,EACZuC,QAAS,CACP0E,OAAQ,CACNiJ,UAAW,SACXnR,KAAM,gBACNu5G,UAAWnC,GAAiBmC,UAC5BC,aAAcpC,GAAiBoC,mBAAgBryG,KAIvD,CAEKiyG,GACHH,EAAe3vG,KAAK1K,KAKxB,MAAM66G,EAA2C,cAATz5G,GAAwBu3G,EAC5D,CAAC,OAAQ,MACT,CAAC,MAEL,OAAO0B,EAAex5G,OAClB+/F,IACAka,EAAAA,EAAAA,IAAQT,EAAgBQ,GACxB1N,GAA6Bj4E,QAC5B7sB,OAA6BE,EAAnBsB,OAAOhD,GAClBi6F,EACAC,SAEAx4F,GACH,CAACw4F,GACF7yF,EAAYmC,EAAcjP,EAC1Bu3G,EAA4BtwG,EAC5BxB,EAAUi6F,EAAgB0X,KAE5BrkB,EAAAA,GAAAA,GAAY,KACV,IAAKjmF,IAAemC,GAAyB,cAATjP,GAAwBg5E,EAAiB,OAC7E,IAAK4yB,IAAkBgL,EAAa,OAEpC,MAAMhvG,EAAMkF,EAAWpN,OAAQQ,IAC7B,MAAMtB,EAAUqQ,EAAa/O,GAC7B,OAAOtB,GAAWA,EAAQM,YAAcN,EAAQ4E,QAAQ0E,SAGrDN,EAAInI,QAETu4G,GAAqB,CAAEh5G,SAAQ4I,SAvOQ,MA0OzCmrF,EAAAA,GAAAA,GAAY,KACV,IAAKjmF,IAAemC,GAAyB,cAATjP,EAClC,OAEF,MAAM25G,EAAgB7sG,EAAWH,IAAKzM,GAAO+O,EAAa/O,IAAKsD,QAAQgH,WAAW9K,OAAOyU,SAEzF,IAAKwlG,EAAcl6G,OAAQ,OAE3B,MAAMm6G,EAAmBD,EAAcr9F,OAAO,CAACC,EAAK/R,KAClD,MAAM,OAAE5K,EAAM,GAAEM,GAAOsK,EAKvB,OAJK+R,EAAI3c,KACP2c,EAAI3c,GAAU,IAEhB2c,EAAI3c,GAAQ0J,KAAKpJ,GACVqc,GACN,CAAC,GAEJ5W,OAAO8I,QAAQmrG,GAAkB95G,QAAQ,EAAEF,EAAQorD,MACjDD,GAAqB,CAAEnrD,SAAQorD,gBAzPE,MA6PrC+nC,EAAAA,GAAAA,GAAY,KACV,IAAKjmF,IAAemC,GAAgBxJ,IAAaD,EAAAA,IAA2B,cAATxF,EACjE,OAEF,MAAMpC,GAASoL,EAAAA,EAAAA,MACTpB,EAAMkF,EAAWpN,OAAQQ,IAAOoI,EAAAA,EAAAA,KAAiB1K,EAAQoB,EAAQkB,IAAK6hC,qBACtC56B,IAAjC8H,EAAa/O,IAAKysB,YAElB/kB,EAAInI,QAET+sB,GAAiB,CAAExtB,SAAQ4I,SAzQW,KA0QF,IAEtCmrF,EAAAA,GAAAA,GAAY,KACV,IAAKjmF,IAAemC,GAAgBxJ,IAAaD,EAAAA,IAA2B,cAATxF,EACjE,OAEF,MAAM4H,EAAMkF,EAAWpN,OAAQQ,GAAO+O,EAAa/O,IAAK6sB,WAAW8sF,aAE9DjyG,EAAInI,QAETy4G,GAAe,CAAEl5G,SAAQ4I,SAnRc,KAsRzC,MAAMkyG,IAAiBngC,EAAAA,GAAAA,IAAQ,KAC7B,GAAa,WAAT35E,EAIJ,OAAOmS,EAAAA,EAAAA,IAAS,IAAM/C,GAAqB,CAAEsG,UAAWO,EAAAA,GAAkBE,SAAW,KAAM,GAAM,IAEhG,CAAC/G,GAAsBtC,KAEpB,WAAEitG,GAAU,kBAAEC,IExbP,WAGb,MAAOD,EAAYE,IAAkB1xB,EAAAA,GAAAA,IAAQ,GAEvC2xB,GAAeC,EAAAA,GAAAA,GARN,KAQgC,GA6B/C,MAAO,CACLJ,aACAC,mBA7BwBh9B,EAAAA,GAAAA,GAAiBiiB,IACzCgb,IAEKp2G,SAAS81C,KAAKygE,UAAUC,SAAS,2BACpCC,EAAAA,GAAAA,IAAgB,KACdz2G,SAAS81C,KAAKygE,UAAUryG,IAAI,2BAIhCmyG,EAAa,KACX,MAAMK,EAuBZ,SAAuBtb,GACrB,MAAMub,EAAcvb,EAAU/hC,iBAAiC,gBACzDu9C,EAAexb,EAAU6P,UAEzB4L,EAAgBC,iBAAiB1b,GACjC2b,EAAsBC,SAASH,EAAcI,iBAAiB,gCAAiC,IAErG,OAAOl5F,MAAMhK,KAAK4iG,GAAap5G,KAAMuiC,IACnC,MAAM,UAAEqrE,EAAS,aAAEJ,GAAiBjrE,EAC9Bw5C,EAAM6xB,EAAYyL,EACxB,OAAQ7L,GAAgBzxB,GAAOA,GAAOy9B,EApDvB,IAsDnB,CAnC0BG,CAAc9b,IAElCqb,EAAAA,GAAAA,IAAgB,KACd,MAAMU,EAAen3G,SAASizE,cAAc,UACxCkkC,GACFA,EAAaZ,UAAUa,OAAO,SAG5BV,GACFA,EAAYH,UAAUryG,IAAI,SAG5BlE,SAAS81C,KAAKygE,UAAUa,OAAO,+BASvC,CFkZ4CC,GAEpCC,IAAen+B,EAAAA,GAAAA,GAAgB,KACnC,GAAI07B,GAA0B5kF,QAE5B,YADA4kF,GAA0B5kF,SAAU,GAItC,MAAMmrE,EAAYsC,GAAaztE,QAC1BmrE,IAIAwZ,GAAkB3kF,SACrBkmF,GAAkB/a,GAGpBwW,GAAsB,KACpB,MAAM73G,GAASoL,EAAAA,EAAAA,MAEImL,SAAQrW,EAAAA,EAAAA,KAAeF,GAAQw9G,gBAAgBp8G,SAEhEstG,GAAyB,CAAE+O,qBAAqB,IAG7Cpc,EAAUJ,gBAIfuZ,GAAgBtkF,QAAUmrE,EAAU4P,aAAe5P,EAAU6P,UAEhD,WAAT9uG,GACF83G,GAAgB,CAAE94G,SAAQyG,WAAUswD,aAAcqiD,GAAgBtkF,iBAKjE03E,GAAoB8P,IGhed,SAA4B/Z,EAA0Cga,GACnF,MAAO/P,EAAoBgQ,IAAsBC,EAAAA,GAAAA,MAG3CC,GAAe1+B,EAAAA,GAAAA,GAAiB6wB,IACpC2N,EAAmB3N,EAAM8N,YAAYvY,WAGvCwY,EAAAA,GAAAA,GAAkBra,EAAcma,IAEhCpjC,EAAAA,GAAAA,IAAU,KACR,MAAMujC,EAAsBpzG,OAAO84F,EAAaztE,QAASg6E,QAAQgO,eAAiB,EAC5EC,EAAkBvQ,IAEpBuQ,GAAmBA,EAAkBF,GAAuBN,IAC9Dha,EAAaztE,QAASg6E,QAAQgO,aAAepyG,OAAOqyG,KAErD,CAACR,EAAmBha,EAAciK,IAErC,MAAMwQ,GAAsB1/B,EAAAA,GAAAA,MAE5B,MAAO,CAACkvB,EAAoBwQ,EAC9B,CH0cuDC,CAAmB1a,GAAcxD,IAAYkZ,IAGlG3+B,EAAAA,GAAAA,IAAU,KACR,IAAKwhC,KAAmBnD,GAAgBp9F,GAAgBs8F,EACtD,OAKF,GAD2B/oG,IAAcrJ,EAAAA,EAAAA,IAAiBqJ,EAAWA,EAAWrN,OAAS,IAEvF,OAGF,MAAMw/F,EAAYsC,GAAaztE,UAE1BhnB,GAAoC,IAAtBA,EAAWrN,QAC5BqN,EAAWrN,OAASuW,EAAAA,IAAqB,GACrCipF,EAAUid,kBAAqCC,cAAgBld,EAAU2P,eAE7EkL,MAED,CAACnD,EAAc7pG,EAAYgtG,GAAgBjE,EAAYt8F,IAE1D,MAAM6iG,IAA4B5gB,EAAAA,GAAAA,GAAY,KAC5C,IAAK1uF,IAAe0rG,GAAoB1kF,QACtC,OAGF,MAAMuoF,EAAwB7D,GAAoB1kF,QAC/Cp0B,OAAQw/F,GAAYpyF,EAAWzK,SAASoG,OAAOy2F,EAAQ4O,QAAQhpG,aAI5D6iG,EAAS0U,EAAsB,IAAMA,EAAsB,GAC5D1U,IAILmE,GAAYh4E,QAAU6zE,EAAOznG,GAC7Bq4G,GAAazkF,QAAU6zE,EAAO2U,wBAAwBn/B,QAGxDme,EAAAA,GAAAA,GACE,KAAMihB,EAAAA,GAAAA,IAAa,IAAMH,GAA0BtoF,WAEnD,CAAChnB,EAAY2+F,EAAkB2Q,MAEjC9jC,EAAAA,GAAAA,IACE,IAAM8jC,GAA0BtoF,UAEhC,CAAC03E,GAAoB4Q,MAIvBI,EAAAA,GAAAA,GAA4B,EAAE9K,EAAgB+K,MAM5C,MAAMV,EAAkBvQ,KAClBwQ,EAAsBV,GAAuBxnF,QAInD,GAHAwnF,GAAuBxnF,QAAUioF,EAI/BjvG,IAAe4kG,GACZjG,IAAqBgR,GACrBV,IAAoBC,QACI70G,IAAxB60G,EAEH,OAGF,MAAM/c,EAAYsC,GAAaztE,QAC/B0kF,GAAoB1kF,QAAUlS,MAAMhK,KAAKqnF,EAAU/hC,iBAAiC,uBACpF,MAAMw/C,EAAkBlE,GAAoB1kF,QAAQ0kF,GAAoB1kF,QAAQr0B,OAAS,GACnFk9G,EAAqB3Q,GAAqBl4E,QAC5CmrE,EAAUnoB,cAA8B,KAAI+7B,EAAAA,EAAAA,IAAiB7G,GAAqBl4E,iBAClF3sB,EAEEy1G,EACJ9vG,GAAc4kG,GAAkB5kG,EAAWA,EAAWrN,OAAS,KAAOiyG,EAAeA,EAAejyG,OAAS,GAEzGo9G,EACJ/vG,IAAa,KAAO4kG,IAAiB,IAAM5kG,GAAYrN,SAAYuW,EAAAA,IAAqB,EAAI,EAExF8mG,EAAkBF,IAA0BC,EAIhDpR,GACGqR,GACChwG,GAAcA,EAAWrN,OAASuW,EAAAA,IAAqB,IACvDipF,EAAUJ,cAAeub,UAAUC,SAAS,2BAC7CkC,EAAAA,GAAAA,IAAa,IACbtd,EAAUid,kBAAqCC,cAAyC,EAAzBld,EAAU2P,iBAG5EmO,EAAAA,GAAAA,IAAc9d,EAAUJ,cAAgB,yBACxCI,EAAUJ,cAAeub,UAAUryG,IAAI,yBAEvCgB,WAAW,KACLk2F,EAAUJ,gBACZme,EAAAA,GAAAA,IAAiB/d,EAAUJ,cAAe,0BAxajB,OA6a/Boe,EAAAA,GAAAA,IAAoB,KAClB,MAAM,UAAEnO,EAAS,aAAED,EAAY,aAAED,GAAiB3P,EAC5ClpC,EAAeqiD,GAAgBtkF,QAErC,IAAIopF,EAAennD,GAAgBimD,GAAuBpN,GACtDkO,IAKFI,GADuBR,EAAkBA,EAAgB9N,aAAe,GAG1E,MAAMM,EAAazD,GAAoBgR,GAAwBS,GA5b5C,GA6bbC,EAAoBrwG,GAAc2rG,GAAkB3kF,UAAYhnB,EAAWA,EAAWrN,OAAS,GAGjGq9G,GAAmB5N,IAAeiO,IAEpCxN,EAAAA,GAAAA,IAAe,KACb,MAAMyN,IAAwB7P,EAAAA,GAAAA,QAA6BoP,GAC3D3d,EAAAA,GAAAA,IAAc,CACZC,YACAC,QAASke,EAAuBV,EAAkBC,EAClDzqD,SAAUkrD,EAAuB,MAAQ,QACzCje,OApcgB,GAqchBke,cAAe/F,EAA4B,OAAInwG,MAKrD,MAAMm2G,OAAoCn2G,IAAxB60G,GAAqCA,IAAwBD,EAC/E,GAAIuB,IAAaplD,EAAAA,GAAAA,MACf,OAGF,MAAMyvC,EAASmE,GAAYh4E,SAAWmrE,EAAUnoB,cAAc,IAAIg1B,GAAYh4E,WACxEs8E,GACHzI,GACEoE,GAA6Bj4E,SAC7BmrE,EAAUnoB,cAA8B,mBAG7C,IAAIymC,EACJ,GAAIrO,GAAcoO,EAChBC,EAAe1O,EAAeD,OACzB,GAAIjH,EAAQ,CACjB,MAAM6V,EAAe7V,EAAO2U,wBAAwBn/B,IACpDogC,EAAezO,GAAa0O,GAAgBjF,GAAazkF,SAAW,GACtE,MACEypF,EADSnN,EACM7xG,KAAKC,KAClBi/G,EAAAA,GAAAA,GAAqBrN,EAAenR,GAAW9hB,IAje9B,GAkejB0xB,EAAe94C,GAGF84C,EAAe94C,EAGhC,MAAO,MACL2nD,EAAAA,GAAAA,GAAYze,EAAW1gG,KAAKo/G,KAAKJ,KACjCK,EAAAA,GAAAA,MAEAxF,GAAgBtkF,QAAUv1B,KAAKE,IAAIF,KAAKo/G,KAAK9O,EAAe0O,GAAe3O,GAEtE6J,GAAkB3kF,UACrB4kF,GAA0B5kF,SAAU,GAEpC67E,EAAAA,GAAAA,IAAe,KACb+I,GAA0B5kF,SAAU,SAW3C,CAAChnB,EAAY2+F,EAAkBD,GAAoB8P,GAAwBhE,KAE9EluB,EAAAA,GAAAA,GAAsB,EAAEy0B,WACS12G,IAA3B02G,IACFC,EAAAA,GAAAA,IA7fiC,IA6foBtpD,EAAAA,MAEtD,CAACyiD,IAEJ,MAAMtM,GAAYx2F,SAASwrF,IAAciM,IAAkBiL,GACrDkH,IAAuB7uG,EAAAA,EAAAA,IAASlQ,KAAY0gG,IAAmBsX,IAAUtR,GACjE,WAAT1lG,KAGEurG,KAAkBhgG,GAAeuB,KAE7B0rG,GAAoB1kF,SAAkD,IAAvC0kF,GAAoB1kF,QAAQr0B,SAEvC,IAAvBqN,GAAYrN,QAAwE,kBAAxDwP,IAAenC,EAAW,KAAKtJ,QAAQ0E,QAAQlI,MACpC,kBAAvCuL,GAAa/H,SAAS0E,QAAQlI,MAGhCo0G,GAAyBwC,GAAeG,GAClB,IAAvBjqG,GAAYrN,QAAwE,eAAxDwP,IAAenC,EAAW,KAAKtJ,QAAQ0E,QAAQlI,KAC1Eg+G,GAAsC,IAAvBlxG,GAAYrN,QAC4B,gBAAxDwP,IAAenC,EAAW,KAAKtJ,QAAQ0E,QAAQlI,KAE9C4zB,IAAY0lD,EAAAA,GAAAA,GAChB,4BACAqxB,IAAa,cACZ5M,GAAW,cACH,WAAT/9F,GAAqB,cACrB23G,GAAmB,oBACnBC,GAAiB,kBACjBX,GAAsB,qBACtB8C,IAAc,YACb9N,GAAW,eACZ2M,IAAqB,eACrBpB,GAAmB,iBAGfvV,GAAc9tF,QAASrH,GAAcy+F,IAAkBhgG,IAE7D+sE,EAAAA,GAAAA,IAAU,KACJ2pB,IAEJmK,IAAmB,IAClB,CAACnK,GAAamK,KAEjB,MAAMzqB,GAAYpoE,EAChBi8F,GAAQyI,YACN5lG,GAAsB4pF,IAAgBiU,GAEtC2B,IAA4B5V,GAC9BuT,GAAQ0I,iBACLlH,IAAShB,GAAkB/T,GAE5B8b,GACFvI,GAAQnU,gBACNv0F,KAAgBy+F,IAAiB6I,IAA0B4J,IAC7DxI,GAAQrB,WACNlS,GACFuT,GAAQkC,YAERlC,GAAQ78B,QARR68B,GAAQ2I,YAJR3I,GAAQ4I,cA6EV,OACE5mC,EAAAA,GAAAA,GAACiK,GAAAA,GAAU,CACTlF,IAAKglB,GACL3tE,UAAWA,GACX2e,KAAK,OACLovC,UAAWA,GACXuR,eAAa,EACbmrB,SAAUlD,GACV9Q,YAAaC,GAAAA,EAAwB9xB,SArEhCmJ,KAAc6zB,GAAQyI,YAC3BzmC,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,QAAO4kD,UACpBhB,EAAAA,GAAAA,GAAA,QAAAgB,SACGm9B,IAAqB,IAAIhqG,MAAQ,sBAAqBigG,EAAgB,UAAY,YAGrFjqB,KAAc6zB,GAAQ4I,eACxB5mC,EAAAA,GAAAA,GAAC8mC,GAA2B,CAACjmG,kBAAmBA,EAAmBzY,OAAQw2G,IAAsBp3G,IAC/F2iF,KAAc6zB,GAAQ0I,iBACxB1mC,EAAAA,GAAAA,GAAC8mC,GAA2B,CAAC1+G,OAAQZ,IACnC2iF,KAAc6zB,GAAQ2I,aACxB3mC,EAAAA,GAAAA,GAACwqB,GAAsB,CAAChjG,OAAQA,EAAQijG,YAAaA,KACnDtgB,KAAc6zB,GAAQnU,iBACxB7pB,EAAAA,GAAAA,GAAC6pB,GAAe,CAAchiF,OAAQrgB,GAAhBA,GACpB2iF,KAAc6zB,GAAQrB,YACxB38B,EAAAA,GAAAA,GAAC28B,GAAU,CACTn1G,OAAQA,EACRgI,MAAOA,EACPhH,KAAMA,EACN0/F,eAAgBA,EAChB0U,uBAAwBA,KAExBzyB,KAAc6zB,GAAQkC,aACxBlgC,EAAAA,GAAAA,GAAC6zB,GAAkB,CACjBC,WAAYrjF,GAAiB2jF,EAC7B5sG,OAAQA,EACR0sG,WAAYA,EACZE,cAAeA,EACfC,gBAAiBA,EACjBv1F,cAAeA,GACfxJ,WAAYA,GAAc,CAACvB,EAAarL,IACxCqrG,cAAeA,IAAiB/L,GAAc,CAACj0F,IAC/CigG,mBAAoBA,GACpBC,iBAAkBt3F,QAAQs3F,GAC1B9pG,SAAUwS,QAAQpO,GAClB4lG,cAAeA,EACfhM,UAAWA,GACXgL,UAAWA,GACXpJ,aAAcA,GACduK,YAAaA,GACbC,6BAA8BA,GAC9BC,qBAAsBA,GACtBvmG,SAAUA,EACVzF,KAAMA,EACNisG,QAASA,EACTC,cAAeA,EACfhxC,aAAYqwC,IAAyB,cAATvrG,EAC5BmsG,wBAAyB6K,GAAShB,EAClC3T,eAAgBA,EAChBC,gBAAiBA,EACjBiE,uBAAwBgF,KAAkBoN,GAA2B7kF,QACrEs4E,mBAAoBA,GACpBC,cAAeA,GACfC,yBAA0BA,GAC1BvO,QAASA,KAGXvmB,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,CAACwB,MAAM,QAAQokC,gBAAgB,cAsH7C,SAASjF,GAA6Bt0G,GACpC,OAAOA,EAAgB,IACzB,CI94BA,MAOA,GAPiDmyE,IAC/C,MAAM,SAAExZ,GAAawZ,EACfqnC,GAAuBnnC,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,wBAAyBla,GAErF,OAAO6gD,GAAuBhnC,EAAAA,GAAAA,GAACgnC,EAAoB,IAAKrnC,SAAYhwE,G,kMCQhEs3G,GAAkB,CAAEpgH,MAAO,IAAK+kG,OAAQ,KACxCsb,GAAe,I,wCC6CrB,MAAMC,GAAyC,CAC7C,GAAK,IACL,IAAM,GACN,EAAG,EACH,IAAK,IACL,EAAG,KAECC,GAAuBj5G,OAAO8G,KAAKkyG,IAAgBl8G,OAAOkK,IAAIlE,QAkTpE,SAASo2G,GAAYC,GACnB,MAAM,MAAErxG,EAAK,UAAEsxG,EAAS,SAAEC,GAAaF,EAEvC,OACEllC,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,QAAQomD,IAAI,OAAMxB,UAAEqrB,EAAAA,GAAAA,GAAWp2F,GAASuxG,KACtDD,IACCvnC,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,WAAWomD,IAAI,OAAMxB,UAAEqrB,EAAAA,GAAAA,GAAWkb,OAIzD,CAEA,SAASE,GAAY37F,EAAkB47F,GACrC,OACEtlC,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,QAAQomD,IAAI,OAAMxB,SAAE0mC,IAAcrb,EAAAA,GAAAA,GAAWqb,MAC5D1nC,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,WAAWomD,IAAI,OAAMxB,SAAEl1D,MAG5C,CAsBA,UAAeu3D,EAAAA,EAAAA,IACb,CAACj9E,GAAU+uD,eACT,MAAM,YAAEhqB,IAAgB7kC,EAAAA,EAAAA,KAAeF,IACjC,OAAEoB,EAAM,UAAE8F,GAAc69B,EACxB/jC,GAAW+tD,GAAY3tD,GAAU8F,GAAYjC,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8F,QAAaqC,EAE5FgmC,EAASvuC,IAAWwuC,EAAAA,EAAAA,KAAaxvC,EAAQgB,GACzCoC,EAAOpC,IAAWwG,EAAAA,EAAAA,KAAWxH,EAAQgB,EAAQI,SAC7C,OACJu3D,EAAM,aAAEC,EAAY,QAAEC,EAAO,qBAAEE,EAAoB,UAAE/5B,IACnD9+B,EAAAA,EAAAA,KAAeF,GAAQ+kC,YAI3B,MAAO,CACL/jC,UACAuuC,SACAnsC,OACAu1D,SACAC,eACAG,uBACAF,UACA75B,YACAuiF,cAXoBvgH,GAAUwgH,EAAAA,GAAAA,IAA2BxhH,EAAQgB,QAAWuI,IAZlF,CAvV+Ck4G,EAC7CzgH,UACAugH,gBACAvrF,YACA0rF,OACAnyE,SACAnsC,OACAu1D,SACAC,eACAG,uBACAF,UACA8oD,cACA3iF,YACA4iF,wBAEA,MAAM,qBACJC,EAAoB,2BACpBC,EAA0B,oBAC1BC,EAAmB,aACnBh1G,EAAY,iBACZi4B,IACE/kB,EAAAA,EAAAA,MAEEkb,GAAOqgD,EAAAA,GAAAA,MAEP,SAAE0P,IAAaC,EAAAA,EAAAA,MACf62B,GAAmBC,EAAAA,GAAAA,GAAiBjhH,IAEpC,MAAEkgH,EAAK,MAAExwF,EAAK,MAAE3qB,GAAUi8G,GAAmB97G,EAAAA,EAAAA,IAAkB87G,GAAoB,CAAC,EACpFE,EAAU3rG,QAAQma,GAAS3qB,GAC3Bo8G,EAA6BD,IAAYhB,GAAO72E,UAAY,GAAK+3E,EAAAA,IACjEd,EAAa/xE,GAAS+nB,EAAAA,EAAAA,IAAan8B,EAAMoU,QAAUhmC,EAEnD84G,GAAYC,EAAAA,GAAAA,GAAoBN,EAAkB,UAClDO,EAAYF,GAAaj6D,GAAAA,GAA0Bi6D,GACnDG,EDzFwBC,EAC9BzhH,EAAsBuuC,EAAkBnsC,KAExC,MAAM+3B,GAAOqgD,EAAAA,GAAAA,MAEP,MAAE0lC,EAAK,MAAExwF,GAAU1vB,GAAUkF,EAAAA,EAAAA,IAAkBlF,GAAW,CAAC,EAC3D6O,EAAQqxG,EAASA,EAAMrxG,OAASqxG,EAAME,SAAY1wF,EAAQ,gBAAkB,GAC5EgyF,EAASxB,GAAOC,WAAc5xE,IAAU+nB,EAAAA,EAAAA,IAAan8B,EAAMoU,GAC3DmjE,EAAStvG,IAAQ2iE,EAAAA,EAAAA,IAAa5qC,EAAM/3B,IAAU,WAE9Cu/G,EAAkBzB,IAAS0B,EAAAA,EAAAA,IAAiB1B,KAAUtmD,EAAAA,EAAAA,IAAasmD,EAAO,aAC1E2B,EAAatzE,IAAUuzE,EAAAA,EAAAA,IAAkBvzE,EAAQ,OACjD3d,EAAQsvF,GAASyB,GAAoBjyF,GAASmyF,EAC9CvvG,GAAQuxF,EAAAA,GAAAA,GAASjzE,GAEjB+jC,GAAOomB,EAAAA,GAAAA,IAAQ,IA2BvB,SAAsBmlC,EAAkBxwF,EAAkB5F,GACxD,IAAKA,EAAK,OAAO+1F,GACjB,GAAIK,EAAO,CACT,IAAKA,EAAM6B,gBAAgBlhH,OAAQ,OACnC,MAAMmhH,EAAY9B,EAAM6B,eAAev/G,KAAMmyD,GAAuB,MAAdA,EAAKvzD,MAC3D,OAAO4gH,GAAa9B,EAAM6B,eAAe,EAC3C,CAEA,OAAIryF,EACKuyF,EAAAA,QADT,CAKF,CAvCWC,CAAahC,EAAOxwF,EAAOpd,GACjC,CAAC4tG,EAAO5tG,EAAOod,KACV9X,OAAQkS,IAAQq4F,EAAAA,GAAAA,GAAS,IAanC,SAAyBr4F,EAAc6qC,GACrC,IAAK7qC,EAAK,OAAOvJ,QAAQ6hG,QAAQC,IACjC,IAAK1tD,EAAM,OAAO2tD,EAAAA,GAAAA,GAAYx4F,EAAKg2F,GAAcA,IACjD,MAAMlgH,EAAMD,KAAKC,IAAI+0D,EAAKl1D,MAAOk1D,EAAK6vC,QACtC,GAAI5kG,EAAMkgH,GAAc,CACtB,MAAMyC,EAAQzC,GAAelgH,EAC7B,OAAO4iH,EAAAA,GAAAA,GAAW14F,EAAKy4F,EACzB,CACA,OAAOhiG,QAAQ6hG,QAAQt4F,EACzB,CArBI24F,CAAgBnwG,EAAOqiD,GACtB,CAACriD,EAAOqiD,GAAO0tD,IAClB,OAAOtnC,EAAAA,GAAAA,IAAQ,KACN2nC,EAAAA,GAAAA,IAAmB,CACxB7zG,QACA6yG,SACAhQ,QACAiR,QAAS,CAAC,CAAEhd,IAAK77E,MAElB,CAAC4nF,EAAOgQ,EAAQ7yG,EAAOib,KC6DJ23F,CAAwBT,EAAkBzyE,EAAQnsC,IAElE,UACJwgH,EAAS,KACTC,EAAI,UACJC,EAAS,iBACTC,EAAgB,qBAChBC,EAAoB,QACpB1kG,EAAO,OACPC,EAAM,UACN0kG,EAAS,YACTC,EAAW,gBACXC,EAAe,eACfC,IACEC,EAAAA,GAAAA,GACFrjH,IAAWsjH,EAAAA,GAAAA,IAAYtjH,GACvBugH,GAAiB,EACjBW,EAAU,QAAU,QACpBK,OACAh5G,EACAi5G,OACAj5G,GACA,OACAA,OACAA,EACAvI,IAAW0H,EAAAA,EAAAA,IAAe1H,IAC1B,GAGI68C,EAAStnC,QAAQvV,IAErB29E,IAAKF,IACHO,EAAAA,GAAAA,GAAkB,CACpBnhC,SACA0mE,gBAAiB5C,KAGb,IAAEhjC,EAAG,aAAEC,IAAiB4lC,EAAAA,GAAAA,GAAc,CAC1C3mE,SACA+mC,YAAa+8B,EACbhjC,IAAKF,EACLgmC,cAAe7C,KAGX,kBACJpiB,EAAiB,wBACjBkM,EAAuB,kBAAEjM,GAAiB,uBAC1CC,GAAsB,sBAAEC,KACtBC,EAAAA,GAAAA,GAAuBnhB,GAAgBG,IAE3ClE,EAAAA,GAAAA,IAAU,KACJ17C,GACFolF,EAAeplF,IAEhB,CAACA,EAAWolF,KAEf1pC,EAAAA,GAAAA,IAAU,KACJopC,GAAa9iH,GAASyF,YACxBm9G,KAED,CAACE,EAAW9iH,GAASyF,WAAYm9G,IAEpC,MAAMniB,IAAcriB,EAAAA,GAAAA,GAAgB,KAClC,MAAM,OAAEh+E,EAAM,GAAEkB,GAAO0/G,EACvBj1G,EAAa,CAAE3L,SAAQ8F,UAAW5E,MAG9Bu5E,IAAcuD,EAAAA,GAAAA,GAAgB,KAC7BykC,IAGDC,GACFF,IAEF5+E,KACA0/E,EAAAA,GAAAA,MACAb,OAGIc,IAAqBvlC,EAAAA,GAAAA,GAAiBlyC,IACrC+2E,IAGLpC,EAAqB,CAAElpD,OAAQzrB,EAAQ,MACvC+2E,EAAU/2E,EAAQ,QAGd03E,IAAoBxlC,EAAAA,GAAAA,GAAgB,KACpCpjB,EAAAA,KAAiBjhD,EAAAA,IAChBmpG,IAGLA,IACAnC,EAAoB,CAAElpD,SAAUA,OAG5BgsD,IAAqBzlC,EAAAA,GAAAA,GAAgB,CAAC0lC,EAAiB/kD,GAAW,KACtE,IAAKokD,EACH,OAEF,MAAMY,EAAOhE,GAAe+D,GACtBE,EA3IoB,IA2IHF,GAAqC/kD,EAC5D+hD,EAA2B,CAAElpD,aAAcmsD,EAAMhsD,qBAAsBisD,IACvEb,EAAgBa,EAAiBD,EA7IP,KAgJtBE,IAAsB7lC,EAAAA,GAAAA,GAAgB,KAC1CsgB,KACA,MAAMwlB,EAAUr6G,OAAO9C,OAAO8I,QAAQkwG,IAAgBv9G,KAAK,EAAE,CAAEuhH,KAAUA,IAASnsD,KAAgB,KAlJxE,EAoJpBusD,GAAepsD,EAErB8rD,GACEM,GAvJwB,IAuJTD,EAtJc,EAsJmDA,EAChFC,KAIEC,IAAqBhmC,EAAAA,GAAAA,GAAgB,KACzC,MAAMimC,EAAct9G,OAAO8I,QAAQkwG,IAAgBv9G,KAAK,EAAE,CAAEuhH,KAAUA,IAASnsD,KAAgB,IA7JrE,EA+JpB7qD,EAAO,GA/Ja,IA+JV6qD,EA9Je,EA8JuDysD,KACtF,OACErpC,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,mBAAkB4kD,SAAA,CAC9B4kB,IAAqB5lB,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,oBAAoBmmD,QAASujB,MAElE9lB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACLwd,WAAW0lD,EAAAA,GAAAA,GACT,kBAAmB3iB,GAAwB,UAAWymC,GAAqB,UAE7EjjB,MAAM,cACN5mB,KAAK,UACL6mB,UAAU,gBACVuP,QAASb,EACTkK,aAAcqK,GACdtjB,QAAS8oC,GACTxY,YAAaf,EACb7L,cAAeJ,GAAkB7kB,UAEjChB,EAAAA,GAAAA,GAAA,QAAM5jD,WAAW0lD,EAAAA,GAAAA,GACf,wBACgB,IAAhB3tE,EAAKlM,QAAgB,QACL,IAAhBkM,EAAKlM,QAAgB,QACrB+4E,SAEC7sE,WAOLu3G,IAAuBvpC,EAAAA,GAAAA,IAAQ,IACpB,IAAXpjB,GAAgBE,EAAgB,QAChCF,EAAS,GAAY,WACrBA,EAAS,GAAY,WAClB,WACN,CAACA,EAAQE,IAEZ,IAAI6oD,GAAS9iC,EAIb,OACE5C,EAAAA,GAAAA,IAAA,OACEhmD,WAAW0lD,EAAAA,GAAAA,GAAe,cAAeimC,EAAc,oBAAsB,cAAe3rF,GAC5FomD,IAAKjhD,EAAKkhD,MAAQ,WAAQ9yE,EAC1Bo1E,IAAKA,EAAI/D,SAAA,EAEToB,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,sBAAsBmmD,QAASslB,GAAY7mB,SAAA,CACvDsmC,EAAQD,GAAYC,GAASG,GAAYlmF,EAAK,eAAgBmmF,IAC/D1nC,EAAAA,GAAAA,GAAC2rC,GAAAA,EAAY,QAGf3rC,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACLuzE,QAASb,EACT3O,MAAM,cACN5mB,KAAK,UACL3/B,UAAU,gBACVwvF,SAAUlmG,MACV68D,QAAS6nC,EACTxnC,UAAU,iBAAgB5B,UAE1BhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,qBAEbqnC,EAAAA,GAAAA,IAACM,GAAAA,EAAM,CACL9jE,OAAK,EACLuzE,QAASb,EACT3O,MAAM,cACN5mB,KAAK,UACL3/B,WAAW0lD,EAAAA,GAAAA,GAAe,cAAe,gBAAiBooC,EAAY,QAAU,QAChF3nC,QAASynC,EACTpnC,UAAWsnC,EAAY,cAAgB,aAAalpC,SAAA,EAEpDhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,UACXilC,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,cAEbilC,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACLuzE,QAASb,EACT3O,MAAM,cACN5mB,KAAK,UACL3/B,UAAU,gBACVwvF,SAAUjmG,MACV48D,QAAS4nC,EACTvnC,UAAU,aAAY5B,UAEtBhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,iBAGbqnC,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,wBAAuB4kD,SAAA,EACpChB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACLwd,UAAU,8BACVumD,MAAM,cACN5mB,KAAK,UACL6mB,UAAU,SACVL,QAASyoC,GACT74B,QAASb,EAAStQ,UAElBhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAM2wE,QAGZvqG,EAAAA,KACAihE,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,wBAAuB4kD,SAAA,EACpChB,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,0BACf4jD,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,gBAAe4kD,UAC5BhB,EAAAA,GAAAA,GAAC6rC,GAAAA,EAAW,CAACC,MAAI,EAACx4E,MAAO2rB,EAAU,EAAa,IAATF,EAAcs4B,SAAU0zB,aAMtExC,IACCvoC,EAAAA,GAAAA,GAACuW,GAAAA,EAAY,CACXG,UAAWkP,EACX5iB,UAAU,QACVC,UAAU,MACV7mD,UAAU,qBACVo6D,QAASg1B,GACTroC,QAAS2iB,GACTimB,OAAQhmB,GACRimB,qBAAsBlmB,GAAuB9kB,SAE5ComC,GAAqBjyG,IAAKg2G,GA0CrC,SACEA,EAAcc,EAAqB1pC,EACnCpjB,GAEA,MAAM+sD,EAAcD,IAAgB9E,GAAegE,IAAShsD,GA1UhC,IA2UtBgsD,IAAmChsD,EACzC,OACEijB,EAAAA,GAAAA,IAACE,GAAAA,EAAQ,CAGPC,QAASA,IAAMA,EAAQ4oC,GACvBhkG,KAAM+kG,EAAa,aAAUv8G,EAC7B29E,WAAa4+B,OAA2Cv8G,GAA9BqwE,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,gBAA6BimC,SAAA,CAEjEmqC,EAAK,MANDA,EAUX,CA3DmBgB,CAA2BhB,EAAMnsD,EAAcisD,GAAoB9rD,OAKhF6gB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACLwd,UAAU,eACVumD,MAAM,cACN5mB,KAAK,UACLwmB,QAASN,GACTW,UAAU,eAAc5B,UAExBhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,iB,+GCpXnB,UAAgB,wBAAwB,WAAW,oBAAsB,WAAW,kCAAkC,WAAW,4BAA8B,WAAW,gCAAgC,WAAW,2BAA6B,WAAW,6BAA6B,WAAW,wBAA0B,YC0L/T,SAASqxE,GAAS/lH,EAAWipD,EAAWzoD,EAAe+kG,EAAgBygB,GACrE,MAAO,IAAIhmH,KAAKipD,EAAI+8D,KAAUA,KAAUA,eACtCxlH,OAAW+kG,EAAS,EAAIygB,KAAUA,KAAUA,YAAiBxlH,MACjE,CAoCA,UAAe25E,EAAAA,GAAAA,IA/M+B8rC,EAC5CptG,QAAOc,YAEP,MAAM+pF,GAAejlB,EAAAA,GAAAA,MAEfynC,GAAepqC,EAAAA,GAAAA,IAAQ,IAmF/B,SAAyBjjE,EAAec,GACtC,MAAMwsG,EAAettG,EAAQc,EAAQ,EAC/BysG,EAmBR,SAAsBvtG,GACpB,IAAIutG,EAAY,EAahB,OAZc,IAAVvtG,EACFutG,EAAY,GACO,IAAVvtG,EACTutG,EAAY,GACO,IAAVvtG,EACTutG,EAAY,IACO,IAAVvtG,GAEAA,EAAQ,KADjButG,EAAY,KAKPA,CACT,CAlCoBC,CAAaxtG,GACzBytG,EAmCR,SAAuBztG,EAAec,GACpC,IAAIysG,EAAY,GAahB,OAZc,IAAVvtG,EACFutG,EAAY,GACO,IAAVvtG,EACTutG,EAAY,GACO,IAAVvtG,EACTutG,EAAsB,IAAVzsG,EAAc,GAAK,IACZ,IAAVd,GAEAA,EAAQ,KADjButG,EAAY,KAKPA,CACT,CAlDqBG,CAAc1tG,EAAOstG,GAClCK,EAmDR,SAAwB3tG,EAAeutG,GACrC,OAAOvtG,GAAS,EAAI,GAAKutG,EAAYvtG,EAAQ,GAAKA,EAAQ,EAC5D,CArDsB4tG,CAAe5tG,EAAOutG,GAEpCM,EAAa,WAAW7tG,IACxB8tG,EAoDR,SAAqBtkH,EAAY+jH,EAAmBvtG,GAGlD,IAAI+tG,EAAI,GACR,GAAc,IAAV/tG,EACF+tG,EAAIb,GAAS,EAAG,EAAG,EAAGK,EAJT,GAKTL,GAAS,EAAG,GAAI,EAAGK,EAAY,EALtB,GAMTL,GAAS,EAAG,GAAI,EAAGK,EANV,QAQb,IAAK,IAAIhhH,EAAI,EAAGA,EAAIyT,EAAOzT,IACzBwhH,GAAKb,GAAS,GAAIK,EAAY,GAAKhhH,EAAG,EAAGghH,EAT9B,GAaf,MACE,iBAAiB/jH,uBACJukH,wBAGjB,CAvEmBC,CAAYH,EAAYN,EAAWvtG,GAE9CiuG,EA4ER,SAA2BntG,EAAeysG,EAAmBvtG,GAC3D,OAAc,IAAVA,EACK,EACY,IAAVA,EACQ,IAAVc,EAAc,EAAIysG,EAAY,EAGzB,IAAVvtG,EACY,IAAVc,EACK,EACY,IAAVA,EACF,GAGF,IAECysG,EAAY,GAAKzsG,CAE7B,CA9FyBotG,CAAkBZ,EAAcC,EAAWvtG,GAC5DmuG,EA+FR,SAA4BrtG,EAAed,EAAeutG,EAAmBI,GAC3E,OAAI3tG,GAAS,GAITc,GAAS,EAHJ,EAKEA,GAASd,EAAQ,EACnB2tG,EAAc,IAGfJ,EAAY,GAAK,GAAKzsG,EAAQ,IAAMysG,EAAY,EAC1D,CA3G0Ba,CAAmBd,EAActtG,EAAOutG,EAAWI,GAC3E,MAAO,CACLF,aACAK,WACAG,iBACAE,kBACAR,cACAE,aAEJ,CArGWQ,CAAgBruG,EAAOc,GAC7B,CAACd,EAAOc,IAyCX,IAvCAwtG,EAAAA,GAAAA,IAAgB,KACd,IAAKzjB,EAAaztE,QAChB,OAGF,MAAM,YACJuwF,EAAW,gBACXQ,EAAe,WACfV,EAAU,eACVQ,EAAc,WACdJ,EAAU,SACVC,GACET,EAEEkB,EAAa1jB,EAAaztE,QAAQooF,kBACxC,GAAI3a,GAAcztE,QAAS,CACzB,MAAMoxF,EAAiB3jB,EAAaztE,SAC9B,MAAEuwE,GAAU6gB,EAClB7gB,EAAMjB,OAAS,GAAGihB,MAClBhgB,EAAM8gB,UAAY,eAAeN,OACjCxgB,EAAMmgB,SAAW,SAASD,MAC1B,MAAMa,EAAMF,EAAepuC,cAAc,OACnCuuC,EAAMH,EAAepuC,cAAc,OACnCwuC,EAAOJ,EAAepuC,cAAc,QACrCsuC,GACCH,IACFA,EAAWM,UAAY,oCAAoCf,mBAG3Dc,IACFA,EAAKC,UAAYf,GAEfa,IACFA,EAAIhhB,MAAMjB,OAAS,GAAG+gB,MACtBkB,EAAIhhB,MAAM8gB,UAAY,cAAcR,OAExC,GACC,CAACZ,IAEU,IAAVrtG,EACF,OACE8gE,EAAAA,GAAAA,GAAA,OAAK5jD,UAAWwrE,GAAOomB,oBAAoBhtC,UACzChB,EAAAA,GAAAA,GAAA,OACE5jD,UAAWwrE,GAAOqmB,4BAClBlpC,IAAKglB,MAMb,MAAM,YACJ8iB,EAAW,gBAAEQ,EAAe,WAAEV,EAAU,eAAEQ,EAAc,WAAEJ,GACxDR,EAEJ,OACEvsC,EAAAA,GAAAA,GAAA,OAAK5jD,WAAW0lD,EAAAA,GAAAA,GACd8lB,GAAOomB,oBACP9uG,EApEoB,GAoES0oF,GAAOsmB,yBACpCltC,UAEAoB,EAAAA,GAAAA,IAAA,OACEhmD,UAAWwrE,GAAOumB,2BAClBppC,IAAKglB,EACL8C,MACE,oBAAoBkgB,uCACVF,+BAAyCQ,QACpDrsC,SAAA,EAEDhB,EAAAA,GAAAA,GAAA,YACAA,EAAAA,GAAAA,GAAA,OACE5jD,UAAWwrE,GAAOwmB,wBAClBvhB,MAAO,aAAa8f,uBAAgCQ,2BAC1BE,gBCnGpC,GAAkK,WAAlK,GAAiM,WAAjM,GAAgc,WC2D1bgB,GAAa,MAAQvoH,EAAAA,EAyR3B,IAAe06E,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GACCoB,SAAQyG,WAAUiI,sBAElB,MAAM1M,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAE1Bi8B,EAAWr9B,EAAOq9B,SAClB3kB,GAAgB/M,EAAAA,EAAAA,IAAiBvK,EAAQyG,EAAU7H,EAAOiC,eAE1DoP,GAAexH,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAE1CoxC,EAAQ,CACZpvC,OACAi6B,YAGF,GAAwB,WAApBvtB,IAAiCuB,EACnC,OAAOmhC,EAGT,GAAI3qC,IAAaD,EAAAA,KAAmB8Q,IAAkBtV,GAAMiG,QAAS,CACnE,MAAM6+G,EAAkBr9G,OAAOhD,GACzB7G,EAAUknH,GAAkBjjH,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ8mH,QAAmB3+G,EACjF4+G,EAAmBnnH,GAAUonG,EAAAA,EAAAA,KAAsBpoG,EAAQgB,QAAWuI,EAE5E,MAAO,IACFipC,EACH2mB,iBAAkB+uD,EAClB72G,eACA+2G,UAAU,EACVD,mBAEJ,CAEA,MAAMhvD,EAAoBzgD,OAA4DnP,GAA5CwH,EAAAA,EAAAA,KAAgB/Q,EAAQoB,EAAQyG,GAC1E,GAAIsxD,GAAkBt3D,OAAQ,CAC5B,MAAMwmH,EAAqBh3G,EAAa8nD,EAAiB,KACnD,SACJivD,GAAW,GAEXC,GAC+B,IAA5BlvD,EAAiBt3D,SACjBk1D,EAAAA,EAAAA,KAAgC/2D,EAAQqoH,EAAoBxgH,IAC5D,CAAC,EAEN,MAAO,IACF2qC,EACH2mB,mBACA9nD,eACA+2G,WAEJ,CAEA,OAAO51E,GArDSyqC,CAhQQqrC,EAC1BlnH,SACAyG,WACAugH,WACAG,qBACApvD,mBACA9nD,eACAswG,cACAwG,mBACAK,wBACAxyF,YACA5yB,OACAi6B,WACAorF,aACA7G,oBACA8G,2BAEA,MAAM,qBACJC,EAAoB,aAAE57G,EAAY,WAAEqgB,EAAU,WAAEw7F,EAAU,mBAAEC,IAC1D5oG,EAAAA,EAAAA,MACEkb,GAAOs/C,EAAAA,GAAAA,KAEPquC,GAAqB3pC,EAAAA,GAAAA,GAAgBqpC,GACrCN,EAAkBlkG,MAAMC,QAAQk1C,GAAoBA,EAAiB2vD,GAAsB3vD,EAC3F4vD,EAAgB13G,GAAgB62G,EAAkB72G,EAAa62G,QAAmB3+G,EAClFy/G,EAAsBhlG,MAAMC,QAAQk1C,GACtCA,EAAiBt3D,OAAUs3D,EAAmB,EAAI,EAChD8vD,EAAsBtoH,KAAKE,IAAImoH,EAAsBF,EAAoB,GAEzEI,EAAkBf,GAAmB7wD,EAAAA,EAAAA,IAAan8B,EAAMgtF,QAAoB5+G,EAE5ExD,EAAQgjH,IAAiBI,EAAAA,EAAAA,IAAgBJ,GACzCtoG,EAAM1a,GAAO+lG,MAAQ/lG,OAAQwD,EAC7B6/G,EAAmB7yG,QAAQkK,IAAQA,EAAI4oG,mBAAmBxnH,QAE1DynH,GAAiBC,EAAAA,GAAAA,GAAaR,GAC9B1G,GAAYC,EAAAA,GAAAA,GAAoByG,EAAeK,EAAmB,OAAS,aAC3EI,GAAe3kB,EAAAA,GAAAA,GAASwd,GACxBoH,EAAYV,IAAiBW,EAAAA,EAAAA,IAAoBX,GAEjDpyF,EAAYpgB,SAAQ4oE,EAAAA,GAAAA,GAAgBopC,IAEpCoB,GADkBC,EAAAA,GAAAA,GAAkB,CAACjzF,GAnEnB,MAoEoBA,EAEtCkzF,GAAyB5H,EAAAA,GAAAA,GAAiB8G,GAAe,IAE/DruC,EAAAA,GAAAA,IAAU,KACJr9C,IAAax1B,IAAaD,EAAAA,IAAkBxE,GAAMiG,UACpDw/G,EAAmB,CAAEznH,SAAQyG,cAE9B,CAACzG,EAAQyG,EAAUw1B,EAAUj6B,GAAMiG,WAEtCygH,EAAAA,GAAAA,GAAiB1oH,EAAQ8mH,EAAiBa,GAE1C,MAAMlrE,EAAStnC,QAAQwyG,KAAmBN,GAExC9pC,IAAKF,IACHO,EAAAA,GAAAA,GAAkB,CACpBnhC,SACAksE,kBAAkB,EAClBxF,gBAAiB5C,KAGb,IAAEhjC,EAAG,aAAEC,IAAiB4lC,EAAAA,GAAAA,GAAc,CAC1C3mE,SACA+mC,YAAa+8B,EACbhjC,IAAKF,EACLgmC,cAAe7C,KAGVoI,EAAmBC,EAAiBC,IAAoBv/B,EAAAA,GAAAA,KAEzDw/B,GAAqB/qC,EAAAA,GAAAA,GAAgB,KACzC8qC,IACAtB,EAAW,CAAExnH,SAAQ8F,UAAW6hH,EAAezmH,GAAI8gB,SAAS,MAGxDgnG,EAAerB,IAAiBsB,EAAAA,EAAAA,IAA6BtB,GAE7DuB,GAA0BlrC,EAAAA,GAAAA,GAAgB,KAC1CgrC,GACFzB,EAAqB,CAAEvnH,OAAQ2nH,EAAc3nH,OAAQ8F,UAAW6hH,EAAczmH,GAAIosC,OAAQ07E,MAIxFG,GAAuBnrC,EAAAA,GAAAA,GAAgB,KAC3ChyD,EAAW,CAAEhsB,SAAQyG,WAAUzF,KAAM,aAGjCooH,IAAqBprC,EAAAA,GAAAA,GAAiB7e,IAC1C,MAAMkqD,EAAgBlqD,EAAEyiB,UAAYh/D,MAAMC,QAAQk1C,GAC9CA,GAAiBuxD,EAAAA,GAAAA,GAAcvxD,EAAiBt3D,OAAQs3D,EAAiBp7B,QAAQmqF,GAAoB,IACrGA,EAECK,MACHx7G,EAAa,CACX3L,SAAQyG,WAAUX,UAAWujH,EAAe73D,mBAAmB,IAEjE81D,EAAqB+B,OAIlBE,GAAcC,GAAkBC,KAAsBlgC,EAAAA,GAAAA,MAEvD,YAAE8W,GAAW,gBAAEqpB,KAAoBC,EAAAA,GAAAA,GAAaP,IAmCtD,GAAK5rC,GAAiBirC,EAEtB,OACE7tC,EAAAA,GAAAA,IAAA,OACE2C,IAAKA,EACL3oD,WAAW0lD,EAAAA,GAAAA,GACT,6BDrOe,WCqO4BimC,EDrOa,WAAvB,WCqOwD3rF,GACzF4kD,SAAA,EAEAouC,EAAsB,GAAKW,KAC3B3tC,EAAAA,GAAAA,IAACM,GAAAA,EAAM,CACL9jE,OAAK,EACLm9C,KAAK,UACL4mB,MAAM,cACNC,UAAWrhD,EAAK,gCAChBghD,QAAUwtC,OAA0CpgH,EAAvBghH,EAAiC3vC,SAAA,CAE7DjkD,IACCijD,EAAAA,GAAAA,GAAC8L,GAAAA,EAAO,CACNnJ,MAAM,OACNvmD,WAAW0lD,EAAAA,GAAAA,GDnPgH,WCoPzG8lB,IAAqBmoB,GAAoBnoB,OAI/D5nB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CACH/nC,KAAK,WACL3e,WAAW0lD,EAAAA,GAAAA,GACT8lB,GAAoBmoB,GAAoBnoB,SAK/C4mB,IACCxuC,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACLm9C,KAAK,UACL4mB,MAAM,cACNC,UAAWrhD,EAAK,0BAChBghD,QAAS8tC,EAAgBrvC,UAEzBhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,aAGfilC,EAAAA,GAAAA,GAACoxC,GAAAA,EAAa,CACZntE,OAAQmsE,EACRjtC,QAASmtC,EACTn8G,KAAMotB,EAAK,sBACX8vF,aAAc9vF,EAAK,eACnB+vF,eAAgBf,KAElBnuC,EAAAA,GAAAA,IAAA,OACEhmD,WAAW0lD,EAAAA,GAAAA,GDnRwE,WCmRnCivC,IDnRoL,YCoRpOxuC,QAASslB,GACTgL,YAAaqe,GACb1uC,IAAKjhD,EAAKkhD,MAAQ,WAAQ9yE,EAAUqxE,SAAA,EAEpChB,EAAAA,GAAAA,GAACssC,GAAuB,CACtBptG,MAAOkwG,EACPpvG,MAAOkvG,KAETlvC,EAAAA,GAAAA,GAACiK,GAAAA,GAAU,CAACE,UAAW8lC,EAAuBvnH,GAAIqyC,KAAK,gBAAgB3e,UD5R0T,WC4RpR4kD,SA9FnH,SAAyBuwC,EAAuBhlH,EAAkBilH,EAAuBC,GACvF,MAAM,MAAE5qH,EAAK,OAAE+kG,IAAW8lB,EAAAA,EAAAA,MACpBC,EAASplH,GAAWglH,EACpBK,EAAoBJ,GAAejlH,EAEzC,OACE61E,EAAAA,GAAAA,IAAA,OAAKhmD,UDpMuZ,WCoMzX4kD,SAAA,CAChCuwC,IAAiBE,IAAcG,IAC9B5xC,EAAAA,GAAAA,GAAA,OACE5jD,UAAWwrE,GACXmF,IAAK4kB,EACL9qH,MAAOA,EACP+kG,OAAQA,EACRoB,IAAI,GACJ6kB,WAAW,IAGdD,IAAsBH,IACrBzxC,EAAAA,GAAAA,GAAA,SACE+sB,IAAKxgG,EACL1F,MAAOA,EACP+kG,OAAQA,EACR0B,aAAW,EACXF,yBAAuB,EACvBhxE,UAAWwrE,KAGd2pB,IACIvxC,EAAAA,GAAAA,GAAC8xC,GAAAA,EAAY,CAACP,aAAcI,EAAQI,UAAWp1G,QAAQ80G,GAAY5qH,MAAOA,EAAO+kG,OAAQA,MAGpG,CAgESomB,CACCtC,EACAE,EACAJ,EACAK,MAGJztC,EAAAA,GAAAA,IAAA,OACEhmD,WAAW0lD,EAAAA,GAAAA,GDrS+F,WCqS5D4tC,GDrS8O,YCsS5RltC,IAAKjhD,EAAKkhD,MAAQ,WAAQ9yE,EAAUqxE,SAAA,EAEpCoB,EAAAA,GAAAA,IAAA,OAAKhmD,UDxS0S,WCwSjRomD,IAAKjhD,EAAKkhD,MAAQ,WAAQ9yE,EAAUqxE,SAAA,EAC9DsuC,IACAtvC,EAAAA,GAAAA,GAACiyC,GAAAA,EAAe,CACd99G,KAA8B,IAAxBi7G,EACF7tF,EAAK,4BACLA,EAAK,qBAAsB,CAAEvhB,MAAOqvG,GAAuB,CAAEtoG,YAAaqoG,MAIjFE,IAAmBjjB,EAAAA,GAAAA,GAAWijB,OAEjCtvC,EAAAA,GAAAA,GAACiK,GAAAA,GAAU,CACTE,UAAW8lC,EAAuBvnH,GAClCqyC,KAAK,oBACL3e,UDtTmQ,WCsT3N4kD,UAExChB,EAAAA,GAAAA,GAAA,KAAGwC,IAAI,OAAOpmD,UDxToT,WCwT1R4kD,UACtChB,EAAAA,GAAAA,GAACkyC,GAAAA,EAAc,CACb9qH,QAAS6oH,EACTkC,eAlQG,IAmQHC,QAASz1G,QAAQ+yG,GACjB2C,UAAWhE,aAKnBruC,EAAAA,GAAAA,GAAC2rC,GAAAA,EAAY,IACZ6E,IACCxwC,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL3mB,KAAK,OACL3/B,UDtU4V,WCuU5VmmD,QAASmuC,EACT4B,uBAAqB,EACrB92B,aAAep5B,EAAAA,QAAkCzyD,EAAnBqhH,GAC9Bv1B,aAAer5B,EAAAA,QAAoCzyD,EAArBshH,GAA+BjwC,UAE5DuxC,EAAAA,GAAAA,GAAyBhxF,EAAMivF,cCmD5C,IAAehwC,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GACCoB,SAAQyG,WAAUiI,kBAAiBo7E,eAEnC,MAAM,kBACJ/qF,EAAiB,4BAAEq9E,EAA2B,YAAEz4C,EAAW,aAAEo7B,IAC3DjgE,EAAAA,EAAAA,KAAeF,GACboD,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BiZ,GAAOC,EAAAA,EAAAA,KAAWta,EAAQoB,IAExBA,OAAQyjC,EAAa39B,UAAW49B,GAAmBC,EACrDqnF,EAAevnF,GAAeC,GAChC7/B,EAAAA,EAAAA,KAAkBjF,EAAQ6kC,EAAaC,QACvCv7B,EAEJ,IAAIV,EACJ,GAAwB,WAApBiH,EAA8B,CAChC,MAAMgB,GAAYC,EAAAA,EAAAA,KAAgB/Q,EAAQoB,EAAQyG,GAClDgB,EAAgBiI,GAAWjP,MAC7B,MAAO,GAAwB,cAApBiO,EAAiC,CAC1C,MAAMxB,GAAeC,EAAAA,EAAAA,KAAmBvO,EAAQoB,EAAQyG,GACxDgB,EAAgByF,GAAczM,MAChC,MAAO,GAAwB,WAApBiO,GAAgCjI,IAAaD,EAAAA,GAAgB,CACtE,MAAMhB,GAAa8D,EAAAA,EAAAA,KAAiB1K,EAAQoB,EAAQyG,GACpDgB,EAAgBjC,GAAYiC,eAAiB,CAC/C,CAEA,MAAMwoE,GAAeE,EAAAA,EAAAA,KAAkBvxE,EAAQoB,EAAQyG,EAAU,gBAE3DmiC,EAAc3vB,GAAM2vB,YACpBqiF,EAAqBriF,IAAethB,EAAAA,EAAAA,KAAkB1oB,EAAQgqC,EAAYvhB,YAC1E6jG,EAAwC,gBAAtBtiF,GAAa5nC,KAAyB4nC,EAAY0P,UAAOnwC,EAE3EmP,GAAgB/M,EAAAA,EAAAA,IAAiBvK,EAAQyG,EAAU7H,EAAOiC,eAC1Dg/D,GAAkB9/D,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAErD,MAAO,CACLiwE,eACAlxE,oBACAosH,oBAAoBrzD,EAAAA,EAAAA,KAAyBl5D,EAAQkrF,GACrDmuB,oBAAoBC,EAAAA,EAAAA,KAAqBt5G,GACzCosH,eACAhpH,OACAyF,gBACAi5F,gBAAgB3gG,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAC7Co8E,8BACAgvC,qBAAsB7rH,KAAKE,IAAI,EAAGs/D,EAAat+D,OAAS,GACxDgkB,gBAAiB7lB,EAAO6lB,gBACxBuc,UAAWpiC,EAAOoiC,UAClB8C,qBAAsBllC,EAAOklC,qBAC7BmnF,qBACAC,kBACA5zG,gBACAuoD,oBArDcgc,CAhS4BwvC,EAC9CrrH,SACAyG,WACAiI,kBACAo7E,WACA7Z,eACAgoC,qBACAl5G,oBACAisH,eACAhpH,OACAyF,gBACAilG,aACAhM,iBACAtkB,8BACAgvC,uBACA3mG,kBACAuc,YACA8C,uBACAsjF,wBACAD,qBACA8D,qBACAC,kBACA5zG,gBACAgwG,uBACAznD,sBAEA,MAAM,mBACJyrD,EAAkB,SAClBroG,EAAQ,iBACRsoG,EAAgB,iBAChBC,EAAgB,sBAChBt/F,EAAqB,iBACrB1D,EAAgB,eAChBijG,EAAc,mBACd9wF,EAAkB,gBAClB+wF,EAAe,iBACfvzD,EAAgB,qBAChB2c,IACEj2D,EAAAA,EAAAA,MAEEkb,GAAOqgD,EAAAA,GAAAA,KACPuxC,GAAqBruC,EAAAA,GAAAA,KAAO,IAC5B,UAAEsuC,EAAS,SAAEC,IAAa9hC,EAAAA,EAAAA,OAExB1qF,MAAOH,IAAgB4sH,EAAAA,GAAAA,KAEzBC,EAAuB7sH,GAAeQ,EAAAA,IACtCssH,EAAwBH,GAAY9sH,EAEpCktH,GAAe3uC,EAAAA,GAAAA,MAEf4uC,GAAmBluC,EAAAA,GAAAA,GAAgB,KACvCrjD,EAAmB,CAAE36B,SAAQyG,WAAUhF,OAAQ,CAAC,MAG5CmmG,GAAiB5pB,EAAAA,GAAAA,GAAiBjuD,IACjCA,EAAMw6E,OAAmB4hB,QAAQ,2BAEtCb,EAAmB,CAAEtrH,SAAQyG,gBAI7B4kG,YAAa+gB,EACbC,UAAWC,EACXr4B,aAAcs4B,EACdC,aAAcC,GACdC,WAAYC,KACVC,EAAAA,GAAAA,GAAa,CACfC,QAASX,EACTnxC,QAAS6sB,EACTyC,UAvG6B,MA0GzByiB,IAA0B9uC,EAAAA,GAAAA,GAAgB,KAC9C0tC,EAAgB,CAAE1rH,WAClBm4D,MAGI40D,IAAsB/uC,EAAAA,GAAAA,GAAgB,KAC1Cj0E,WAAW,KACT4hH,EAAmB72F,SAAU,GAnHD,OAuH1Bk4F,IAAwBhvC,EAAAA,GAAAA,GAAgB,KACxCktC,EACFp2C,EAAqB,CAAEx8B,KAAM4yE,IAG/B1iG,EAAiB,CAAEk0B,WAAY18C,MAG3BitH,IAA2BjvC,EAAAA,GAAAA,GAAgB,KAC3CktC,EACFp2C,EAAqB,CAAEx8B,KAAM4yE,IAG/BO,EAAe,CACb56F,eAAgBo6F,EAAoBp6F,mBAIlCq8F,IAAkBlvC,EAAAA,GAAAA,GAAiB7e,IACvC,GAAKwsD,EAAmB72F,QAAxB,CAIA,GADA62F,EAAmB72F,SAAU,EACzBg1D,EAAU,CACZ,MAAMqjC,EAAetoH,SAASizE,cAA8BgwB,EAAAA,KAC5DqlB,GAAcz2B,MAChB,CAEA,GAAIuhB,EAGF,OAFA/rF,SACA6gG,KAIF,GAAwB,WAApBr+G,GAAyD,IAAzB08G,EAUlC,OATKS,GAAYG,GACf7sD,EAAEooB,kBACFtkE,EAAS,CAAE/hB,QAAIiH,GAAa,CAAE0S,uBAAuB,KAErD2wG,SAGFuB,KAKFxB,IACAwB,IA7BuC,IAgCnCK,IAAoBza,EAAAA,GAAAA,GAAsByY,GAC1Cj3B,QACkBhsF,IAAtBilH,IAAmCA,GAAoBhC,EAAuBgC,QAAoBjlH,EAG9FklH,GAAsBl4G,QAAQ61G,GAC9BsC,GAAyB1B,GAAayB,GACtCE,GAA4BF,KAAwBzB,GAEpD,qBAAExnC,IAAyBd,GAAoBvpD,EAAMtV,EAAiBuc,GAAa8C,GAAsB,GAoF/G,SAAS0pF,GAAiBC,GAAU,EAAOC,GAAoB,GAC7D,OACE9yC,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,cAAa4kD,SAAA,EAC1BhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACLm9C,KAAK,UACL4mB,MAAM,cACNJ,QAASmyC,GACT9xC,UAAWrhD,EAAK0zF,EAAU,QAAU,QAAQj0C,UAE5ChB,EAAAA,GAAAA,GAAA,OAAK5jD,WAAW0lD,EAAAA,GAAAA,GAAe,uBAAwBmzC,GAAW,kBAEnEC,IAAqBl1C,EAAAA,GAAAA,GAACS,GAAa,MAG1C,CAEA,OACE2B,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,eAAe2oD,IAAK0uC,EAAc,4BAAwB5tD,GAAAA,KAAYywB,EAAAA,UAAmB3mF,EAAUqxE,SAAA,EAC9GsQ,IAAajqB,IAAoBvoD,IACnCkhE,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CAACtmD,UAAU,wBAAwBxd,OAAK,EAACm9C,KAAK,UAAU4mB,MAAM,cAAcJ,QAAS+xC,GAAyB1xC,UAAU,iBAAgB5B,UAC3IhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,sBAGfilC,EAAAA,GAAAA,GAACiK,GAAAA,GAAU,CACTlvC,KAAM6oC,EAA8B,OAAS,YAC7CuG,UAAWyoC,EACXl3B,eAAa,EACbC,oBAAqBA,GAAoB3a,SA7GrB,WAApB9qE,IACEjI,IAAaD,EAAAA,IAAkB8Q,GAAiBtV,GAAMiG,SAwB9D,WAEE,MAAM0lH,EAAsBr2G,EAAgByiB,EAAK,sBAAmB5xB,EAE9DoP,EAAaD,EAAgB5M,OAAOjE,GAAYzG,EAEhD4tH,EAAgB5rH,GAAM+e,YAAc/e,EAAK6rH,kBAAqBt2G,EACpE,OACEqjE,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACIuyC,GAAwBX,EAAuB,IAAMoC,GAAiBxB,GAAwB10G,IAChGkhE,EAAAA,GAAAA,GAAA,OACE5jD,UAAU,oBACVy2E,YAAa+gB,EACbC,UAAWC,EACXr4B,aAAcs4B,EACdC,aAAcC,GACdC,WAAYC,GAAwBnzC,UAEnCtpE,EAAAA,EAAAA,IAAS09G,IACRp1C,EAAAA,GAAAA,GAACs1C,GAAAA,EAAe,CAEdztG,OAAQutG,EACR39C,aAAcA,EACdj4B,OAAQosC,IAAwBupC,EAChCI,SAAU54G,QAAQivE,IAClB4pC,cAAY,EACZC,iBAAe,EACfC,oBAAkB,EAClB52G,cAAeA,EACf8uE,gBA3OY,GA4OZ+nC,OAAK,EACLC,mBAAoBpB,IAXfY,IAcPp1C,EAAAA,GAAAA,GAAC61C,GAAAA,EAAa,CAEZruH,OAAQ4tH,EACRnnH,SAAW6Q,OAA2BnP,EAAX1B,EAC3BwpE,aAAcA,EACdq+C,oBAAqBtsH,GAAM+e,YAC3Bi3B,OAAQosC,IAAwBupC,EAChCI,SAAU54G,QAAQivE,IAClB6pC,gBAAiBxnH,IAAaD,EAAAA,GAC9BwnH,aAAcvnH,IAAaD,EAAAA,GAC3B0nH,oBAAkB,EAClB52G,cAAeA,EACf8uE,gBA5PY,GA6PZgoC,mBAAoBnB,GACpBkB,OAAK,GAbAP,OAmBjB,CA7EaW,IAKT3zC,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,CACGg0C,MACDh1C,EAAAA,GAAAA,GAAA,MAAAgB,cACqBrxE,IAAlBV,EACqB,WAApBiH,EACGjH,EACGsyB,EAAK2yE,EAAa,WAAa,UAAWjlG,EAAe,KACzDsyB,EAAK2yE,EAAa,gBAAkB,gBAClB,WAApBh+F,EAAgCqrB,EAAK,sBAAuBtyB,EAAe,KACrD,cAApBiH,EACAgyF,EAAiB3mE,EAAK,aAAeA,EAAK,WAAYtyB,EAAe,UACnEU,EACN4xB,EAAK,mBA8FXwzF,KACA/0C,EAAAA,GAAAA,GAAC0uC,GAAmB,CAElBlnH,OAAQA,EACRyG,SAAUA,EACViI,gBAAiBA,EACjB44G,qBAAsBA,EACtBH,mBAAoBA,EACpBC,sBAAuBA,GANlBpnH,IAUT46E,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,eAAc4kD,SAAA,CAC1B8zC,KACC90C,EAAAA,GAAAA,GAAC6nC,GAAW,KAEd7nC,EAAAA,GAAAA,GAACg2C,GAAAA,EAAa,CACZxuH,OAAQA,EACRyG,SAAUA,EACViI,gBAAiBA,EACjBo7E,SAAUA,EACV2kC,kBAAmBnB,c,oDCxX7B,MC+JA,IAAet0C,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GAAUoB,aACT,MAAM4vB,GAAMkf,EAAAA,EAAAA,KAAUlwC,EAAQoB,GACxB0uH,GAAmB7lB,EAAAA,EAAAA,KAAuBjqG,EAAQoB,GACxD,MAAO,CACLg4G,MAAO7iG,QAAQya,GACf8+F,qBANc7yC,CA7HF8yC,EAChB3uH,SACAg4G,QACAtpG,kBACAggH,mBACAlO,wBAEA,MAAM,cACJ9W,EAAa,QACbx8D,EAAO,eACP08D,EAAc,kBACdC,IACEhrF,EAAAA,EAAAA,MAEEkb,GAAOs/C,EAAAA,GAAAA,KAEP58B,EAAStnC,QAAQ6iG,GAAS0W,GAAwC,WAApBhgH,GAE9CkgH,GAA4B/N,EAAAA,GAAAA,GAAiB6N,IAE7C,IAAEnxC,EAAG,aAAEC,IAAiB4lC,EAAAA,GAAAA,GAAc,CAC1C3mE,SACAoyE,oBAAoB,EACpBxL,cAAe7C,KAGX,kBACJpiB,EAAiB,kBAAE6J,EAAiB,wBACpCqC,EAAuB,kBAAEjM,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBjhB,GAAMC,GAAc,GAEzC6iB,GAAcriB,EAAAA,GAAAA,GAAgB,KAC7B4wC,IAELhlB,EAAe,CAAEvhF,SAAUumG,EAA0BvmG,WACrD6kB,EAAQ,CAAExjB,IAAKklG,EAA0BllG,IAAKC,iBAAiB,OAG3DmlG,GAAmB9wC,EAAAA,GAAAA,GAAiB7e,IACxC,IAAKyvD,EAA2B,OAChC,MAAM,SACJvmG,EAAQ,eAAE+zC,EAAc,UAAEC,EAAS,YAAEC,GACnCsyD,EACJzvD,EAAEooB,kBACFsiB,EAAkB,CAChBxhF,WACA+zC,iBACAC,YACAC,kBAUJ,IANAgd,EAAAA,GAAAA,IAAU,KACJkE,GAAgBoxC,GAClBllB,EAAc,CAAErhF,SAAUumG,EAA0BvmG,YAErD,CAACm1D,EAAcoxC,EAA2B5uH,KAExCw9E,IAAiBoxC,EACpB,OAGF,MAAM,SACJvmG,EAAQ,UAAEg0C,EAAS,eAAED,EAAc,YAAEE,GACnCsyD,GAEE,UACJpjB,EAAS,QACThnG,EAAO,MACPE,EAAK,MACL+J,GACEmgH,EAEJ,OACEh0C,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEoB,EAAAA,GAAAA,IAAA,OACE2C,IAAKA,EACL3oD,UDhHe,WCiHfmmD,QAASslB,EACTgL,YAAaf,EACb7L,cAAeJ,EAAkB7kB,SAAA,EAEjCoB,EAAAA,GAAAA,IAAA,OAAKhmD,WAAW0lD,EAAAA,GAAAA,GDrHoB,WCqHWkxB,IAAaujB,EAAAA,GAAAA,GAAqBvjB,IAAYhyB,SAAA,EAC3FoB,EAAAA,GAAAA,IAAA,QAAMhmD,UDtH8C,WCsHvB4kD,SAAA,CAC1Bz/C,EAAK,uBACNy+C,EAAAA,GAAAA,GAACyzB,GAAAA,EAAW,CAAClxB,QAAS+zC,EAAkBl6F,UDxHwF,WCwH9D4kD,SAC/Dz/C,EAAK,sCAGVy+C,EAAAA,GAAAA,GAAA,OAAK5jD,UD5HsF,WC4H9D4kD,SAAE/qE,IAC9BjK,EAAQmI,OACP6rE,EAAAA,GAAAA,GAAA,OAAK5jD,UD9HsG,WC8H/E4kD,UACzBiH,EAAAA,GAAAA,IAAuB,CACtB9zE,KAAMnI,EAAQmI,KAAKA,KACnB0J,SAAU7R,EAAQmI,KAAK0J,gBAK9B3R,IACC8zE,EAAAA,GAAAA,GAACuN,GAAAA,EAAM,CACLxxB,KAAK,QACL7vD,MAAOA,EACPkwB,UD1IsE,gBC8I3EqzE,IACCzvB,EAAAA,GAAAA,GAACw2C,GAAAA,EAAoC,CACnCvyE,OAAQ2hD,EACRuK,OAAQV,EACRmE,WAAY7uB,EACZl1D,SAAUA,EACV+zC,eAAgBA,EAChBC,UAAWA,EACXC,YAAaA,EACbqf,QAAS2iB,EACT5J,oBAAqB6J,UCtF/B,IAAevlB,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GAAUgC,aACT,MAAMunC,GAAe8mF,EAAAA,EAAAA,KAAmBrwH,EAAQgC,GAE1CsuH,EAAkB/mF,GAAc+mF,gBAGtC,MAAO,CACLA,kBACAC,SAJevwH,EAAOwhC,SAASiJ,4BAA4BhmC,SAASzC,KALtDi7E,CArCmCuzC,EACrDxuH,SACAuuH,WACAD,kBACA1O,wBAEA,MAAM/jE,EAAStnC,SAASg6G,GAAYD,IAE9B,6BACJG,IACExwG,EAAAA,EAAAA,OAEE,IAAE0+D,EAAG,aAAEC,IAAiB4lC,EAAAA,GAAAA,GAAc,CAC1C3mE,SACA4mE,cAAe7C,IAGX8O,GAAetxC,EAAAA,GAAAA,GAAgB,KACnCqxC,EAA6B,CAAEzuH,aAIjC,IAFAupF,EAAAA,GAAAA,GAAWmlC,EAAeH,OAAiChnH,EAtBjC,KAwBrBq1E,GAAiB0xC,EAEtB,OACEt0C,EAAAA,GAAAA,IAAA,OAAK2C,IAAKA,EAAK3oD,UCtDI,WDsDmB4kD,SAAA,EACpChB,EAAAA,GAAAA,GAAA,QAAM5jD,UCvD6B,WDuDN4kD,UAC3BhB,EAAAA,GAAAA,GAACyS,GAAAA,EAAW,CACV5jE,WAAY6nG,EAAgBK,OAC5Bh7D,KAhCyB,OAmC5B26D,EAAgBvrG,kB,gBErBvB,MA2KA,IAAeq1D,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GAAUoB,aAAQ,CACjBa,cAAejC,EAAOiC,cACtBoY,MAAMC,EAAAA,EAAAA,KAAWta,EAAQoB,KAHT67E,CA3K8B2zC,EAChDxvH,SACA40B,YACA66F,iBACAC,gBACAzY,gBACA0Y,kBACA12G,OACApY,gBACA2/G,wBAEA,MAAM,qBACJoP,EAAoB,UACpBC,EAAS,WACTC,EAAU,WACVC,EAAU,aACVC,EAAY,eACZC,EAAc,cACdC,EAAa,mBACbC,EAAkB,oBAClBC,IACEvxG,EAAAA,EAAAA,MAEEkb,GAAOqgD,EAAAA,GAAAA,MACNi2C,EAAsBC,EAAoBC,IAAuBhnC,EAAAA,GAAAA,MACjEinC,EAAkBC,IAAuBt2C,EAAAA,GAAAA,KAAkB,IAC3Du2C,EAAkBC,IAAuBx2C,EAAAA,GAAAA,KAAkB,GAE5Dy2C,GAAgB/P,EAAAA,GAAAA,GAAiB5nG,GACjCjX,EAAO4uH,IAAiBz3G,EAAAA,EAAAA,IAAcy3G,GAAiBA,OAAgBzoH,EACvEuL,EAAOk9G,IAAiB1oG,EAAAA,EAAAA,IAAc0oG,GAAiBA,OAAgBzoH,EACvE0oH,EAAe7uH,IAAQ8uH,EAAAA,EAAAA,IAAiB9uH,GAExC+uH,GAAyBlQ,EAAAA,GAAAA,GAAiB5J,GAC1C+Z,GAA2BnQ,EAAAA,GAAAA,GAAiB8O,GAC5CsB,GAAyBpQ,EAAAA,GAAAA,GAAiB6O,GAC1CwB,GAA0BrQ,EAAAA,GAAAA,GAAiB4O,GAE3C0B,GAAmBnzC,EAAAA,GAAAA,GAAgB,KACvC4xC,EAAqB,CAAEvvG,OAAQrgB,IAC3BkxH,GACFf,EAAmB,CAAEjvH,GAAIlB,MAIvBoxH,GAAqBpzC,EAAAA,GAAAA,GAAgB,KACzCuyC,IACAV,EAAU,CAAExvG,OAAQrgB,IAChBixH,GAA0BT,GAC5BV,EAAW,CAAE9vH,WAEX0wH,GACFX,EAAW,CAAE/vH,aAIXqxH,GAAwBrzC,EAAAA,GAAAA,GAAgB,KAC5CoyC,EAAoB,CAAExvH,OAAQZ,MAG1BsxH,GAAuBtzC,EAAAA,GAAAA,GAAgB,KAC3CuyC,IACAT,EAAW,CAAE9vH,WACT6wH,GACFZ,EAAe,CAAEjwH,SAAQqgB,OAAQxf,IACjCqvH,EAAc,CAAElwH,SAAQkiB,oBAAoB,KAE5C8tG,EAAa,CAAEhwH,aAMbuxH,EAAcp8G,SAFC8hG,GAAiB0Y,GAAmBD,IAEbz2G,IAE5CqgE,EAAAA,GAAAA,IAAU,KACHi4C,GACHhB,KAED,CAACgB,IAEJ,MAAM,IAAEh0C,EAAG,aAAEC,IAAiB4lC,EAAAA,GAAAA,GAAc,CAC1C3mE,OAAQ80E,EACRlO,cAAe7C,IAGjB,GAAKhjC,EAEL,OACE5C,EAAAA,GAAAA,IAAA,OACE2C,IAAKA,EACL3oD,WAAW0lD,EAAAA,GAAAA,GAAe,iBAAkB1lD,GAC5ComD,IAAKjhD,EAAKkhD,MAAQ,WAAQ9yE,EAAUqxE,SAAA,CAEnCu3C,IACCv4C,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLs2C,QAAM,EACNl9B,OAAK,EACL//B,KAAK,OACL3/B,UAAU,yBACVmmD,QAASo2C,EAAiB33C,SAEzBz/C,EAAK,yBAGTi3F,IACCx4C,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLC,MAAM,SACNq2C,QAAM,EACNl9B,OAAK,EACL//B,KAAK,OACL3/B,UAAU,yBACVmmD,QAASu1C,EAAmB92C,SAE3Bz/C,EAAK,2BAGTk3F,IAA2BD,IAC1Bx4C,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLC,MAAM,SACNq2C,QAAM,EACNl9B,OAAK,EACL//B,KAAK,OACL3/B,UAAU,yBACVmmD,QAASu1C,EAAmB92C,SAE3Bz/C,EAAK,gCAGVy+C,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACLuzE,QAAM,EACNp2B,KAAK,UACL4mB,MAAM,cACNJ,QAASs2C,EACTj2C,UAAWrhD,EAAK,SAASy/C,UAEzBhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,aAEbqnC,EAAAA,GAAAA,IAACgvC,GAAAA,EAAa,CACZntE,OAAQ4zE,EACR10C,QAAS40C,EACT9hH,MAAOsrB,EAAK,iBAAkBrmB,GAAO+sB,EAAAA,EAAAA,IAAuB/sB,IAAQixD,EAAAA,EAAAA,IAAa5qC,EAAM/3B,IACvF2K,KAAM+G,EACFqmB,EAAK,mCAAmCxZ,EAAAA,EAAAA,IAAgB7M,IACxDqmB,EAAK,mCACT03F,sBAAoB,EACpB5H,aAAc9vF,EAAK,SACnB+vF,eAAgBp2G,EAAO09G,EAAqBE,EAAqB93C,SAAA,CAEhE9lE,IACC8kE,EAAAA,GAAAA,GAACk5C,GAAAA,EAAQ,CACP98F,UAAU,kBACV6zD,MAAO1uD,EAAK,kBACZ2uD,QAASgoC,EACTiB,QAAShB,IAGZj9G,GAAQg8G,IACPl3C,EAAAA,GAAAA,GAACk5C,GAAAA,EAAQ,CACP98F,UAAU,2CACV6zD,MAAO1uD,EAAK,cACZ2uD,QAAS8nC,EACTmB,QAASlB,aC3MrB,IAAgB,KAAO,WAAW,QAAU,WAAW,aAAe,WAAW,gBAAkB,YC4FnG,IAAez3C,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GAAUgC,aACT,MAAMoB,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQgC,GAC1BunC,GAAe5uB,EAAAA,EAAAA,KAAmB3a,EAAQgC,GAC1CgxH,EAA0BzpF,GAAc/H,UAAUwxF,wBAExD,MAAO,CACLA,0BACA5vH,SARc65E,CAxDqCg2C,EACvDD,0BACA5vH,OACApB,SACA4/G,wBAEA,MAAM/jE,EAAStnC,QAAQy8G,GACjB73F,GAAOs/C,EAAAA,GAAAA,MAEP,oBACJy4C,IACEjzG,EAAAA,EAAAA,OAEE,IAAE0+D,EAAG,aAAEC,IAAiB4lC,EAAAA,GAAAA,GAAc,CAC1C3mE,SACA4mE,cAAe7C,IAGXuR,GAAe/zC,EAAAA,GAAAA,GAAgB,KACnC8zC,EAAoB,CAAEzxG,OAAQzf,MAGhC,IAAK48E,IAAiBo0C,EAAyB,OAE/C,MAEMhyH,EAAUm6B,EAAK,+BAAgC,CACnD9gB,KAHejX,GAAOk0D,EAAAA,EAAAA,IAAan8B,EAAM/3B,QAAQmG,EAIjD8T,QAAQi6F,EAAAA,EAAAA,IAAkBn8E,EACxB63F,EACA,CAAEzb,QAAQ,EAAMvhF,UAAWwrE,GAAO4xB,gBAAiB5b,mBAAoBhW,GAAO6xB,gBAC/E,CACDvtB,cAAc,EACdD,WAAW,IAGb,OACE7pB,EAAAA,GAAAA,IAAA,OAAK2C,IAAKA,EAAK3oD,UAAWwrE,GAAO8xB,KAAK14C,SAAA,EACpChB,EAAAA,GAAAA,GAAA,OAAK5jD,UAAWwrE,GAAOxgG,QAAQ45E,SAC5B55E,KAEH44E,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLs2C,QAAM,EACNW,mBAAiB,EACjB9b,MAAI,EACJ/hB,OAAK,EACL//B,KAAK,OACL3/B,UAAWwrE,GAAO9yD,OAClBytC,QAASg3C,EAAav4C,SAErBz/C,EAAK,0BClCRq4F,GAAsB,CAAEhuB,OAAQ,GAkItC,IAAeprB,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GACCoB,aAEA,MAAM,YAAE2jC,IAAgB7kC,EAAAA,EAAAA,KAAeF,GACjCoD,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1BkoC,GAAe3uB,EAAAA,EAAAA,KAAmB3a,EAAQoB,IAExCA,OAAQyjC,EAAa39B,UAAW49B,GAAmBC,EACrDqnF,EAAevnF,GAAeC,GAChC7/B,EAAAA,EAAAA,KAAkBjF,EAAQ6kC,EAAaC,QACvCv7B,EAEEkqH,EAAqBl9G,SAAQulB,EAAAA,EAAAA,KAA0B97B,IAE7D,MAAO,CACLoD,OACAkmC,eACAoqF,sBAAuBn9G,QAAQ61G,GAC/BqH,qBACAE,0BAA0BC,EAAAA,EAAAA,KAA4B5zH,KApBxCi9E,CAhIM42C,EACxB79F,YACA50B,SACAyG,WACAiI,kBACA1M,OACAkmC,eACAk/E,wBACAD,qBACAmL,wBACAD,qBACAE,2BACAjL,2BAEA,MAAM,SAAElnF,GAAa8H,GAAgB,CAAC,GAEhC,UAAE0jF,IAAc7hC,EAAAA,EAAAA,OACf2oC,EAAqBC,IAAuBlW,EAAAA,GAAAA,IAAqB2V,KACjEQ,EAAgBC,IAAkBpW,EAAAA,GAAAA,IAAqB2V,KACvDU,EAAmBC,IAAqBtW,EAAAA,GAAAA,IAAqB2V,KAC7DY,EAAoBC,IAAsBxW,EAAAA,GAAAA,IAAqB2V,KAC/Dc,EAAeC,IAAiB1W,EAAAA,GAAAA,IAAqB2V,KACrDgB,EAAyBC,IAA2B5W,EAAAA,GAAAA,IAAqB2V,KACzEkB,EAA2BC,IAA6B9W,EAAAA,GAAAA,IAAqB2V,IAE9E7E,EAA4B+E,IAA0B1G,EAEtD4H,GAAmBl2C,EAAAA,GAAAA,KAAO,IAC1B,aACJE,EAAY,IACZD,IACEK,EAAAA,GAAAA,GAAkB,CACpBnhC,QAAS41E,EACTx0C,kBAAkB,EAClBqE,mBAAmB,IAkCrB,IA/BAuxC,EAAAA,GAAAA,GAAc,KACZD,EAAiB1+F,SAAU,KAG7Bo8E,EAAAA,GAAAA,GAAgB,KACd,MAAMwiB,EAAmBhB,IACnBiB,EAAuBP,IACvBQ,EAAchB,IAOdiB,EAAa,CAACH,EANGZ,IACCE,IAMLW,EAAsBC,EALtBV,IACMI,KAMnBQ,EAAgBN,EAAiB1+F,QACjCi/F,EAAcF,EAAWv2G,OAAO,CAACC,EAAK6zB,IAAU7zB,EAAM6zB,EAAMgzD,OAAQ,GAEpE4vB,EAAenvH,SAAS4xF,eAAe,gBACxCu9B,KAELC,EAAAA,GAAAA,GAAoBJ,EAAYC,IAEhCI,EAAAA,GAAAA,IAAeF,EAAc,CAC3B,+BAAgC,GAAGD,UAEpC,CAACrB,EAAqBI,EAAmBF,EAC1CI,EAAoBE,EAAeE,EAAyBE,IAEzD91C,EAEL,OACE5C,EAAAA,GAAAA,IAAA,OACE2C,IAAKA,EACL3oD,WACE0lD,EAAAA,GAAAA,GChIe,WDkIbi4C,GClIwD,WDmIxD39F,GAEH4kD,SAAA,EAEDhB,EAAAA,GAAAA,GAAC6nC,GAAW,CACVE,aAAW,EACXC,kBAAmBmS,EACnBhlE,SAAUi+D,IAEXnlH,IAAaD,EAAAA,KAAmBxE,GAAMiG,UACrCuwE,EAAAA,GAAAA,GAAC27C,GAAAA,EAAgB,CACfn0H,OAAQA,EACRwgH,kBAAmBuS,KAGvBv6C,EAAAA,GAAAA,GAACg3C,GAAc,CACbxvH,OAAQA,EACRi3G,cAAe72E,GAAU62E,cACzB0Y,gBAAiBvvF,GAAUuvF,gBAC3BD,cAAetvF,GAAUsvF,cACzBD,eAAgBrvF,GAAUqvF,eAC1BjP,kBAAmByS,KAErBz6C,EAAAA,GAAAA,GAAC42C,GAAmB,CAClBxuH,OAAQZ,EACRwgH,kBAAmB6S,KAErB76C,EAAAA,GAAAA,GAACq5C,GAAqB,CACpBjxH,OAAQZ,EACRwgH,kBAAmB+S,KAErB/6C,EAAAA,GAAAA,GAAC0uC,GAAmB,CAClBlnH,OAAQA,EACRyG,SAAUA,EACViI,gBAAiBA,EACjB44G,qBAAsBA,EACtBH,mBAAoBA,EACpBC,sBAAuBA,EACvB5G,kBAAmBqS,EACnBtS,aAAW,EACX8G,YAAakG,KAEf/0C,EAAAA,GAAAA,GAACm2C,GAAS,CACR3uH,OAAQA,EACR0O,gBAAiBA,EACjB8xG,kBAAmB2S,UEhJ3B,IAAen6C,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GAAUyhB,aACT,MAAM3M,GAAOC,EAAAA,EAAAA,KAAW/U,EAAQyhB,GAEhC,MAAO,CACL+zG,UAAU3zF,EAAAA,EAAAA,IAAuB/sB,KALnBmoE,CAdpB,UAAoC,SAAEu4C,IACpC,MAAMr6F,GAAOqgD,EAAAA,GAAAA,MACP,iBAAE5xD,IAAqB3J,EAAAA,EAAAA,MAEvB+2F,GAAyB53B,EAAAA,GAAAA,GAAgB,IAAMx1D,KAErD,OACEoyD,EAAAA,GAAAA,IAAA,OAAApB,SAAA,EACEhB,EAAAA,GAAAA,GAAA,OAAAgB,SAAMz/C,EAAK,sCAAuCq6F,MAClD57C,EAAAA,GAAAA,GAAC2sB,GAAAA,EAAI,CAACkvB,WAAS,EAACt5C,QAAS66B,EAAuBp8B,SAAEz/C,EAAK,iDAG7D,IChBA,GAP6Co+C,IAC3C,MAAM,OAAE17B,GAAW07B,EACbm8C,GAAmBj8C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,oBAAqBp8B,GAE7E,OAAO63E,GAAmB97C,EAAAA,GAAAA,GAAC87C,EAAgB,IAAKn8C,SAAYhwE,GCG9D,GAPyCgwE,IACvC,MAAM,SAAExZ,GAAawZ,EACfo8C,GAAel8C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,gBAAiBla,GAAU,GAE/E,OAAO41D,GAAe/7C,EAAAA,GAAAA,GAAC+7C,EAAY,IAAKp8C,SAAYhwE,GCiKhDqsH,GAA8B,IAAMh/D,EAAAA,IA0jB1C,IAAewjB,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GAAUkrF,eACT,MAAMz7C,GAAQm4C,EAAAA,EAAAA,KAAY5nF,IAExBglE,UAAW6wD,EAAqBC,WAAYC,EAAgB,gBAAEpV,EAAe,aAAE7J,IAC7EC,EAAAA,EAAAA,KAAkB/2G,EAAQyvC,IAAU,CAAC,GAEnC,aACJ0wB,EAAY,kBAAEhgE,EAAiB,wBAAEgO,EAAuB,YACxDwuD,EAAW,aAAED,EAAY,4BAAE8gB,EAA2B,kBACtDvgB,EAAiB,2BAAEJ,IACjB38D,EAAAA,EAAAA,KAAeF,GACb6M,GAAqBC,EAAAA,EAAAA,KAAyB9M,IAC9C,gBAAEK,GAAoBL,EAEtBwyC,EAAoB,CACxB/C,QACAsmF,mBACApV,kBACA7J,eACA32G,oBACAosH,oBAAoBrzD,EAAAA,EAAAA,KAAyBl5D,EAAQkrF,GACrD2qC,sBACA/1B,sBAAuBvpF,SAAQulB,EAAAA,EAAAA,KAA0B97B,IACzDq5G,oBAAoBC,EAAAA,EAAAA,KAAqBt5G,GACzCg2H,kBAAmBz/G,QAAQomD,GAC3Bs5D,iCAAkC1/G,QAAQsmD,GAC1Cq5D,uBAAwB3/G,QAAQmmD,GAChCy5D,wBAAyB5/G,QAAQ0mD,GACjCsgB,gBAAgBzoC,EAAAA,GAAAA,GAAqB90C,GAAQu9E,eAC7C64C,yBAAyB1zD,EAAAA,EAAAA,KAA0B1iE,GACnD2zH,0BAA0BC,EAAAA,EAAAA,KAA4B5zH,GACtDwsH,qBAAsB7rH,KAAKE,IAAI,EAAGs/D,EAAat+D,OAAS,GACxDsM,0BACA9N,mBAGF,IAAKwM,EACH,OAAO2lC,EAGT,MAAM,OAAEpxC,EAAM,SAAEyG,EAAUzF,KAAM0N,GAAoBjD,EAC9CjJ,GAAY0N,EAAAA,EAAAA,IAASlQ,GACrBgC,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1B4vB,GAAMkf,EAAAA,EAAAA,KAAUlwC,EAAQoB,GACxB0P,GAAYC,EAAAA,EAAAA,KAAgB/Q,EAAQoB,EAAQyG,GAC5CsZ,EAAe/f,GAASggB,EAAAA,EAAAA,KAAmBphB,EAAQoB,QAAUmI,EAC7D+/B,EAAeloC,GAASuZ,EAAAA,EAAAA,KAAmB3a,EAAQoB,QAAUmI,EAE7Doa,GAAYC,EAAAA,EAAAA,KAAgB5jB,EAAQoB,EAAQyG,GAE5CjB,GAAa8D,EAAAA,EAAAA,KAAiB1K,EAAQoB,EAAQyG,GAC9CwuH,EAAkB9/G,SAAS3P,GAAYu9B,gBAAkBv9B,GAAY0vH,eACrEltH,GAAQgB,EAAAA,EAAAA,KAAYpK,EAAQoB,EAAQyG,GACpCs4F,EAAU/8F,IAAQmzH,EAAAA,EAAAA,IAAiBnzH,EAAMgG,EAAOitH,EAAiBl1G,GACjEq1G,GAAkBjtG,EAAAA,EAAAA,KAA0BvpB,EAAQoB,GACpDq1H,EAA0C,WAApB3mH,EACtB4mH,EAAmC,WAApB5mH,GAAgCjI,IAAaD,EAAAA,GAC5Dw2F,EAAY7nF,QAAQnT,IAAQqgB,EAAAA,EAAAA,IAAcrgB,IAC1CuzH,EAAepgH,QACnBnT,GAAQszH,IAAiBt4B,IAAa16E,EAAAA,EAAAA,IAAiBtgB,KAAUA,EAAKoK,cAAgBpK,EAAK89B,eACvF99B,EAAK+e,aAELy0G,EAAmBrgH,QAAQnT,GAAMoK,aAAepK,EAAKyzH,cACrDC,EAAwBvgH,QAAQnT,GAAMoK,aAAepK,EAAK2zH,eAC1DhnD,IAAgBnsE,IAAYozH,EAAAA,EAAAA,KAAoBh3H,EAAQoB,GACxD61H,EAAgB1gH,QAAQya,GAAO++C,GAC/BmnD,GAAeD,GAAiBT,EAChCW,EAAapnD,IAAkB/+C,EAC/BomG,EAAqB7gH,QACzBnT,IAAQw0B,EAAAA,EAAAA,IAAYx0B,KAAU+d,GAE1BxE,GAAiBlG,EAAAA,EAAAA,KAAYzW,EAAQoB,EAAQyG,IAAWnB,UACxD2wH,IAAyBj0H,GAAMiG,SACjCxB,IAAaD,EAAAA,KAAmB+U,IAAmBvS,EAAAA,EAAAA,KAAYpK,EAAQoB,EAAQk2H,EAAAA,MAAmBC,SAEhGC,GAAmBh9G,EAAAA,EAAAA,KAAuBxa,EAAQoB,GAClDq2H,EAA6BlhH,QAAQnT,GAAM+e,cAAgBxF,GAAkB66G,IAAqB7zG,GAClGqW,GAASyJ,EAAAA,EAAAA,KAAazjC,EAAQoB,GAE9BsX,IAAgB/M,EAAAA,EAAAA,IAAiBvK,EAAQyG,EAAU7H,EAAOiC,eAC1Dy1H,GAAwBh/G,IAAiB7Q,IAAaozG,EAAAA,IAEtDmN,GAAWhlH,IACfQ,GACER,GAAM+1G,YAAe/a,KAAcu5B,EAAAA,EAAAA,IAAkBv0H,EAAM,iBACxDw0H,EAAAA,EAAAA,IAAiBx0H,EAAM,gBAIxBy0H,IAAWl9G,EAAAA,EAAAA,KAAmB3a,EAAQoB,GAEtC64G,GAA0B4d,IAAU5d,wBACpCx/F,IAAoBumD,EAAAA,EAAAA,KAA4BhhE,EAAQoB,GACxDg6E,IAAkBp1D,EAAAA,EAAAA,KAA0BhmB,GAC5C41C,GAAoB51C,EAAO41C,kBAC3BkiF,GAAmBliF,IACrBpuC,EAAAA,EAAAA,KAAWxH,EAAQ41C,SAAqBrsC,EAE5C,MAAO,IACFipC,EACHpxC,SACAyG,WACAiI,kBACA1M,OACAuZ,iBACA/Y,YACAm0H,sBAAuBxhH,QAAQ+yB,GAAc9H,UAC7CssE,WAAYuoB,EACZl2B,SACGs2B,KACIrzH,GAAQ+8F,KACTq2B,KACCI,GAAoBxzH,GAAMoK,eAC3B6pH,IACAI,IACA/+G,MACC0iE,IAAmB08C,IAAkBx1H,KAAOlB,GACnDq1H,sBACAuB,wBAAyB50H,GAAM40H,wBAC/BC,oBAAqB70H,GAAM60H,oBAC3BjP,oBAAqBl4G,EAAYA,EAAUjP,OAAS,EACpD27E,8BACA4gB,YACAu4B,eACAO,cACAD,gBACAL,mBACAE,wBACAM,qBACAtmH,YACAs3G,YACA+O,aACAz+G,iBACAg/G,yBACAzd,2BACAjgF,SACAvf,qBACA2gE,mBACA08C,oBACAL,+BA5Icx6C,CAxjBpB,UAAsB,cACpBi7C,EAAa,OACb92H,EAAM,SACNyG,EAAQ,WACRimG,EAAU,gBACVh+F,EAAe,SACfo7E,EAAQ,KACR9nF,EAAI,eACJuZ,EAAc,UACd/Y,EAAS,oBACT6yH,EAAmB,QACnBt2B,EAAO,wBACP63B,EAAuB,oBACvBC,EAAmB,oBACnBjP,EAAmB,iBACnB+M,EAAgB,MAChBtmF,EAAK,gBACLkxE,EAAe,aACf7J,EAAY,kBACZ32G,EAAiB,mBACjBosH,EAAkB,oBAClBsJ,EAAmB,gBACnBx1H,EAAe,sBACfy/F,EAAqB,mBACrBuZ,EAAkB,kBAClB2c,EAAiB,iCACjBC,EAAgC,uBAChCC,EAAsB,wBACtBC,EAAuB,eACvB54C,EAAc,wBACd64C,EAAuB,yBACvBzC,EAAwB,4BACxBn2C,EAA2B,qBAC3BgvC,EAAoB,UACpBpuB,EAAS,sBACT25B,EAAqB,aACrBpB,EAAY,YACZO,EAAW,cACXD,EAAa,wBACb9oH,EAAuB,iBACvByoH,EAAgB,sBAChBE,EAAqB,mBACrBM,GAAkB,UAClBtmH,GAAS,SACTs3G,GAAQ,WACR+O,GAAU,cACVz+G,GAAa,sBACbg/G,GAAqB,wBACrBzd,GAAuB,OACvBjgF,GAAM,kBACNvf,GAAiB,gBACjB2gE,GAAe,iBACf08C,GAAgB,2BAChBL,KAEA,MAAM,SACJpzG,GAAQ,iBACRsoG,GAAgB,iBAChBwL,GAAgB,SAChBC,GAAQ,iBACRnvF,GAAgB,sBAChB3b,GAAqB,YACrB+qG,GAAW,eACXnqF,GAAc,WACdoqF,GAAU,iBACV3oH,GAAgB,aAChB4B,GAAY,mBACZgnH,GAAkB,qBAClBC,GAAoB,YACpBC,KACEx4G,EAAAA,EAAAA,OAEIxf,MAAOH,KAAgB4sH,EAAAA,GAAAA,MACzB,SAAED,GAAQ,UAAED,KAAc7hC,EAAAA,EAAAA,MAE1B4C,IAAUvS,EAAAA,GAAAA,KACVrgD,IAAOs/C,EAAAA,GAAAA,MACNi+C,GAAeC,KAAoBp9C,EAAAA,GAAAA,IAASq9C,GAAAA,EAAcC,OAC1DC,GAAoBC,KAAwBx9C,EAAAA,GAAAA,KAAS,GACtDy9C,GAAoBF,MAAwB5tC,IAAa4U,IACxDm5B,GAAcC,KAAmB39C,EAAAA,GAAAA,OACjC49C,GAAkBC,KAAuB79C,EAAAA,GAAAA,KAAS,IAEnD,6BACJ89C,GAA4B,yBAC5BC,GAAwB,sBACxB9Q,GAAqB,mBACrBD,InDjPW,SACbnnH,EAAiByG,EAAqBiJ,GAEtC,MAAOyoH,EAAqBC,IAAuB3b,EAAAA,GAAAA,IAAkC,CAAC,IAC/E0K,EAAoBkR,IAAsB5b,EAAAA,GAAAA,MAC3CjuG,EAAMxO,EAAS,GAAGA,KAAUyG,SAAa0B,EACzCi/G,GAAwBzZ,EAAAA,GAAAA,GAC5B,IAAOwqB,IAAsB3pH,IAAS,EACtC,CAAC2pH,EAAqB3pH,IAsGxB,OAlGA8qE,EAAAA,GAAAA,IAAU,KACRmkB,QAAoBt1F,EACpBkwH,OAAmBlwH,IAClB,CACDnI,EAAQo4H,EAAqBC,EAAoB5xH,KAGnD6yE,EAAAA,GAAAA,IAAU,KACR,IAAK9qE,EAAK,OACV,MAAMk5G,EAAqByQ,IAAsB3pH,GAC3C8pH,EAAe5oH,GAAWjP,QAAU,EACtCinH,GAAsB4Q,GACxBF,EAAoB,IACfD,IACH,CAAC3pH,GAAMmvF,GAAW26B,EAAe,MAGpC,CAACH,EAAqB3pH,EAAKkB,GAAWjP,OAAQ23H,IAiF1C,CACLH,8BAhF6Dj6C,EAAAA,GAAAA,GAAgB,EAC7E0wB,yBAAyB,GACzBC,4BAA4B,GAC5B0N,0BAEA,KAAKr8G,GAAWyG,GAAa+H,GAAQkB,GAAWjP,QAAQ,OAExD,GAAI47G,EAGF,OAFA3e,QAAgBv1F,OAChBkwH,OAAmBlwH,GAIrB,MAAMowH,EAAkBpR,IACxB,GAAIoR,EAAiB,CACnB,MAAMC,EAAiB9oH,EAAUitB,QAAQ47F,GACzCH,EAAoB,IACfD,IACH,CAAC3pH,GAAMmvF,GAAW66B,KAEpBH,OAAmBlwH,EACrB,CAEAs1F,IAAoB9yF,EAAAA,EAAAA,KACjB8yF,IAAmB/8F,OAAQQ,IAAQytG,EAA0BtrG,SAASnC,KAAQ,IAC5E2O,OAAO6+F,IAIZ,MAAM+pB,GAAmB99G,EAAAA,EAAAA,MAAuB3Q,EAAAA,EAAAA,MAAahK,IAAW09F,GAMxE,GAJIA,IAAiBD,GAAkBp6F,SAASq6F,MAC9CA,QAAgBv1F,GAGdswH,EAAkB,CACpB,MAAMC,EAA0BhpH,EAAU+I,UAAWvX,GAAOA,EAAKu3H,GAEjEL,EAAoB,IACfD,IACH,CAAC3pH,GAAMmvF,GAAW+6B,IAEtB,MAAO,GAAIj7B,GAAkBh9F,OAAQ,CACnC,MAAMk4H,EAAsBp5H,KAAKE,OAAOg+F,IAClCpmC,EAAW3nD,EAAUitB,QAAQg8F,GAEnCP,EAAoB,IACfD,IACH,CAAC3pH,GAAMmvF,GAAWtmC,IAEtB,IA+BA6gE,0BA5B+Bl6C,EAAAA,GAAAA,GAAiBl4E,IAEhD,IAAK9F,IAAWyG,IAAaiJ,GAAWjP,OACtC,OAGFi9F,GAAgB53F,EAEhB,MAAMlH,GAASoL,EAAAA,EAAAA,MACTtB,GAAYnC,EAAAA,EAAAA,KAAgB3H,EAAQoB,EAAQyG,GAC5CmyH,EAAkBlwH,GAAWrF,SAASyC,KACvCmS,EAAAA,EAAAA,KAA8BrZ,EAAQoB,EAAQyG,EAAUX,GAEvD+yH,EAAenpH,EAAUitB,QAAQ72B,GACjCuxD,GAAWiyD,EAAAA,GAAAA,GAAc55G,EAAUjP,OAAQo4H,EAAe,GAE5DD,EACFR,EAAoB,IACfD,IACH,CAAC3pH,GAAO6oD,IAGVghE,EAAmB3oH,EAAU2nD,MAO/B+vD,wBACAD,qBAEJ,CmD8HM2R,CAAiB94H,EAAQyG,EAAUiJ,IAEjCqpH,GAAyBjvC,EAAW0qC,QAA8BrsH,EAElE6wH,IAAkBC,EAAAA,GAAAA,GAAuBj5H,EAAQ+4H,IACjDG,IAAoBD,EAAAA,GAAAA,GAAuBxyH,EAAUsyH,IACrDI,IAA2BF,EAAAA,GAAAA,GAAuBvqH,EAAiBqqH,IACnEK,IAAwBH,EAAAA,GAAAA,GAAuB1D,EAAcwD,IAC7DM,IAAuBJ,EAAAA,GAAAA,GAAuBnD,EAAaiD,IAC3DO,IAAyBL,EAAAA,GAAAA,GAAuBpD,EAAekD,IAC/DQ,IAAsBN,EAAAA,GAAAA,GAAuBlD,GAAYgD,IACzDS,IAAmBP,EAAAA,GAAAA,GAAuBl6B,EAASg6B,MACnDO,KAA2BD,KAAyBD,KAA0BG,IAC/Ev5H,IAAWy5H,EAAAA,MAAgB5gB,GAC1B6gB,IAA6BT,EAAAA,GAAAA,GACjCrB,GAAmBmB,KAChB/4H,IAAWy5H,EAAAA,IACVE,IAAqBV,EAAAA,GAAAA,GAAuBj8B,EAAW+7B,IACvDa,IAA4BX,EAAAA,GAAAA,GAAuBzD,EAAkBuD,IACrEc,IAAiCZ,EAAAA,GAAAA,GAAuBvD,EAAuBqD,IAC/Ee,IAAwCb,EAAAA,GAAAA,GAC5Cj5H,EAASi4H,QAA+B9vH,EACxC4wH,IAGI3L,IAAoBza,EAAAA,GAAAA,GAAsByY,GAE1Cj3B,QACkBhsF,IAAtBilH,IAAmCA,GAAoBhC,EAAuBgC,QAAoBjlH,GAG9F,QAAE8kG,GAAO,uBAAE8sB,GAAsB,0BAAEC,IAklB3C,SACEC,EACA7O,EACAgC,EACAptH,EACA8pF,GAEA,MAAOmjB,EAASitB,IAAc//C,EAAAA,GAAAA,KAAU2P,GAClCqwC,GAAcC,EAAAA,GAAAA,KAEdC,OAA8ClyH,IAAtBilH,GAAmCA,IAAsBhC,EA8BvF,OA7BIiP,IACEJ,GACFC,GAAW,GAGXnwH,WAAW,KACTmwH,GAAW,IACV1F,KAEH2F,MAIJ79B,EAAAA,GAAAA,GAAc,KACP29B,GACHC,GAAW,IAEZ,CAACD,IAYG,CACLhtB,QAASA,IAAYotB,EACrBN,uBAAwBE,EAZ1B,SAAgC96D,GACP,cAAnBA,EAAEm7D,cAAgCn7D,EAAEorC,SAAWprC,EAAEo7D,eACnDL,EAAW/kH,QAAQnV,GAEvB,OAQoEmI,EAClE6xH,0BAA2BC,EAP7B,WACEC,GAAW,EACb,OAK0E/xH,EAE5E,CA/nByEqyH,EACpEp+C,GAA+B44C,EAChC5J,EACAgC,GACAptH,EACA8pF,IAGFxQ,EAAAA,GAAAA,IAAU,IACDt5E,GACHuhF,EAAAA,GAAAA,GAAsB,KACtBt+D,GAAS,CAAE/hB,QAAIiH,WAEfA,EACH,CAACnI,EAAQijB,MAEZq5E,EAAAA,GAAAA,GAAc,KACZi7B,GAAiBC,GAAAA,EAAcC,MAC/BK,QAAgB3vH,IACf,CAACnI,KAGJs5E,EAAAA,GAAAA,IAAU,KACR,IAAK3/D,EAAAA,KAAW0sF,EAAAA,GACd,OAGF,MAAM,eAAEo0B,GAAmB7vG,OAC3B,IAAK6vG,EACH,OAGF,MAAM/d,EAAeA,KACnB,MAAMge,EAAcD,EAAer2B,SAAWv/F,SAAS81H,gBAAgBxd,cAEvE7B,EAAAA,GAAAA,IAAgB,KACdz2G,SAAS81C,KAAKygE,UAAUwf,OAAO,mBAAoBF,IAEnD/pB,EAAAA,GAAAA,IAAe,MACR+pB,GAAeD,EAAezqB,YACjCsL,EAAAA,GAAAA,IAAgB,KACd1wF,OAAOszD,SAAS,CAAEC,IAAK,WASjC,OAFAs8C,EAAe34C,iBAAiB,SAAU46B,GAEnC,KACL+d,EAAe14C,oBAAoB,SAAU26B,KAE9C,KAEHpjC,EAAAA,GAAAA,IAAU,KACJ92E,GACFw0H,GAAS,CAAE32G,OAAQrgB,KAEpB,CAACA,EAAQwC,EAAWw0H,MAEvB19C,EAAAA,GAAAA,IAAU,KACHq9C,GACH9uF,GAAiB,CAAEjnC,OAAQZ,KAE5B,CAACA,EAAQwC,EAAWm0H,KAEvBr9C,EAAAA,GAAAA,IAAU,KACJt5E,GAAUg2H,IAAsB/oB,IAClC98F,GAAa,CAAEnQ,YAEhB,CAACg2H,GAAoBh2H,EAAQitG,GAAS98F,KAEzC,MAAM,WACJ0qH,GAAU,YAAEC,GAAW,cAAEC,ICzWtB,SACLz7B,EACA07B,EACAzuC,EACA0uC,EACAC,GAEA,MAAOv8D,EAAUw8D,EAAcC,IAAkB7xC,EAAAA,GAAAA,MAC1C8xC,EAAeC,IAAoBnhD,EAAAA,GAAAA,IAAiB,IACpDohD,EAAqBC,IAA0BrhD,EAAAA,GAAAA,IAAiB,GAEjEshD,GAAkBz9C,EAAAA,GAAAA,GAAiB3+E,KACvCi8G,EAAAA,GAAAA,IAAgB,KACd,IAAKhc,EAAWxqE,QACd,OAGF,MAAM4mG,EAAUr8H,EAAQ,GAAGA,MAAY,GACvCigG,EAAWxqE,QAAQuwE,MAAMhmG,MAAQq8H,EAC7BR,GACF57B,EAAWxqE,QAAQuwE,MAAMs2B,YAAYT,EAAiBQ,OAa5D,SAASX,KACPzf,EAAAA,GAAAA,IAAgB,KACdz2G,SAAS81C,KAAKygE,UAAUa,OAAO,qBAEnC,CAgDA,OA5DA+J,EAAAA,GAAAA,IAAgB,KACT1mB,EAAWxqE,SAAYmmG,GAI5BQ,EAAgBR,IACf,CAACC,EAAiB57B,EAAY27B,EAAcQ,KA0B/CniD,EAAAA,GAAAA,IAAU,KACR,IAAK3a,EAAU,OAEf,MAAMi9D,EAAmBz8D,IACvB,MAAM08D,EAAWt8H,KAAKo/G,KAAK4c,EAAsBp8D,EAAE28D,QAAUT,GAC7DI,EAAgBI,IAGlB,SAASE,IACPC,IACAhB,EAAS17B,EAAWxqE,QAASmnG,YAC/B,CAEA,SAASD,IACPjB,IACAl2H,SAASk9E,oBAAoB,YAAa65C,GAAiB,GAC3D/2H,SAASk9E,oBAAoB,UAAWg6C,GAAU,GAClDl3H,SAASk9E,oBAAoB,OAAQg6C,GAAU,GAC/CX,GACF,CAMA,OAJAv2H,SAASi9E,iBAAiB,YAAa85C,GAAiB,GACxD/2H,SAASi9E,iBAAiB,UAAWi6C,GAAU,GAC/Cl3H,SAASi9E,iBAAiB,OAAQi6C,GAAU,GAErCC,GACN,CAACT,EAAqBF,EAAe/7B,EAAY07B,EAAUr8D,EAAUy8D,EAAgBK,IAEjF,CAAEZ,WA9CT,SAAoB17D,GAClBA,EAAE+Y,kBAEFojC,EAAAA,GAAAA,IAAgB,KACdz2G,SAAS81C,KAAKygE,UAAUryG,IAAI,sBAG9BuyH,EAAiBn8D,EAAE28D,SACnBN,EAAuBl8B,EAAWxqE,QAASmnG,aAC3Cd,GACF,EAoCqBL,YAlCrB,SAAqB37D,GACnBA,EAAE+Y,iBACFujD,OAAgBtzH,GAChBokF,GACF,EA8BkCwuC,gBACpC,CDoRMmB,CAAUpF,EAAgBn3D,GAAMw3D,GAAmB,CACrDl4H,gBAAiB0gE,IACfy3D,GAAsBn4H,EAAiB,uBAErCk9H,IAAkBn+C,EAAAA,GAAAA,GAAiB7e,IACvC,MAAM,MAAE94C,GAAU84C,EAAEi9D,cAAgB,CAAC,EAG/BC,EAAkBC,EAAAA,IAAcj2G,GAASA,EAAM5lB,OAAS,GAAKmiB,MAAMhK,KAAKyN,GAG3E3lB,OAAQ67H,GAAuB,kBAAdA,EAAKv7H,MACtBw7H,MAAOD,GAxNd,SAAiBA,GACf,MAAqB,SAAdA,EAAKE,MAAmBF,EAAKv7H,MAAQouB,EAAAA,IAA8B7lB,IAAIgzH,EAAKv7H,KACrF,CAsNuB07H,CAAQH,IApN/B,SAAiBA,GACf,MAAqB,SAAdA,EAAKE,MAAmBF,EAAKv7H,MAAQquB,EAAAA,IAA8B9lB,IAAIgzH,EAAKv7H,KACrF,CAkNwC+1E,CAAQwlD,IAE5ChF,GAAiB8E,EAAkB7E,GAAAA,EAAcmF,UAAYnF,GAAAA,EAAcoF,YAGvEC,IAAqB7+C,EAAAA,GAAAA,GAAgB,KACzCu5C,GAAiBC,GAAAA,EAAcC,QAG3BqF,IAAuB9+C,EAAAA,GAAAA,GAAgB,KAC3Cg6C,IAAoB,KAGhB+E,IAAkB/+C,EAAAA,GAAAA,GAAgB,KACtCg6C,IAAoB,KAGhBgF,IAA0Bh/C,EAAAA,GAAAA,GAAgB,KAC9C/6D,GAAS,CAAE/hB,GAAIwJ,OAAOjE,OAGlBw2H,IAAyBj/C,EAAAA,GAAAA,GAAgB,KAC7C+4C,GAAiB,CAAE/2H,OAAQA,EAASyG,SAAUA,IAC9Cs2H,KACAxR,OAGI2R,IAAoBl/C,EAAAA,GAAAA,GAAgB,KACxC/6D,GAAS,CAAE/hB,GAAIlB,MAGXm9H,IAAuBn/C,EAAAA,GAAAA,GAAgB,KAC3Ci5C,GAAY,CAAEj3H,OAAQA,IAClB65H,IACFtrH,GAAiB,CACf3O,QACI+sF,GADKqQ,EACG,sCAAiD,yCAK7DogC,IAAiBp/C,EAAAA,GAAAA,GAAgB,KACrClxC,GAAe,CAAEC,QAAS,aAGtBswF,IAAmBr/C,EAAAA,GAAAA,GAAgB,KACvCk5C,GAAW,CAAEl3H,OAAQA,MAGjBs9H,IAAgBt/C,EAAAA,GAAAA,GAAgB,KACpCq5C,GAAY,CAAEh3G,OAAQrgB,MAGlBu9H,IAAwBC,EAAAA,GAAAA,GAAoBnvF,EAAOsmF,GAEnD//F,IAAY0lD,EAAAA,GAAAA,GAChBmjD,EAAAA,GAAsB,sBAAwB,sBAG1CC,IAAcpjD,EAAAA,GAAAA,GEvbO,WFybzBi4C,GEzb2G,WF0b3GoC,GE1boD,WF2bpDpV,GE3b+E,WF4b/EoV,GAAoBF,GE5b4G,WF6bhItJ,GE7b6J,YFgczJwS,IAA6BrjD,EAAAA,GAAAA,GACjC,sBACC29B,GAAsB,SAGnB2lB,IAAkCC,EAAAA,EAAAA,IACtClxC,GAASiqC,EAAyBC,GAE9BiH,IAA2BC,EAAAA,EAAAA,IAC/BpxC,GAAS3qF,EAAMyE,EAAUmyB,GAAQzjB,QAAQoG,IAGrCyiH,GAA6BJ,IAC9BE,KACCzH,GAA6Bt8F,GAAK,qCAAkC5xB,KACpE0wG,IAA0BrgC,EAAAA,GAAAA,GAACylD,GAA0B,CAAC59G,OAAQrgB,SAAcmI,KAC5E6xE,IAAmB08C,IAAkBx1H,KAAOlB,GAASw4E,EAAAA,GAAAA,GAAC0lD,GAAwB,SAAM/1H,IAGpF,oBACJg2H,GAAmB,mBAAEC,GAAkB,mBACvCC,GAAkB,kBAAEC,GAAiB,iBACrCC,GAAgB,2BAAEC,KAChB7jD,EAAAA,GAAAA,IACF,IzI5cW,SAAyCz7E,EAAqB6/F,GAC3E,MAAM0/B,EAAcv/H,GAAew/H,EAAAA,IAC/BpgI,EAAAA,EACA,EAAIA,EAAAA,EACFqgI,EAiCR,SAA6Bz/H,GAC3B,GAAIA,EAAcI,EAAAA,IAA0C,CAC1D,MAAML,EAAkBM,KAAKC,IAC3BD,KAAKE,IAAkB,IAAdP,EAAoBT,GAC7BD,GAGIogI,EAAmBr/H,KAAKC,IACd,IAAdN,EACAV,GAGF,OAAOe,KAAKC,IACVN,EAAcD,EAAkB2/H,EAChCrgI,EAEJ,CAEA,GAAIW,EAAcQ,EAAAA,IAAyC,CACzD,MAAMT,EAAkBM,KAAKC,IAC3BD,KAAKE,IAAkB,GAAdP,EAAmBT,GAC5BD,GAGF,OAAOe,KAAKC,IACVN,EAAcD,EACdV,EAEJ,CAEA,OAAIW,EAAcX,EACTA,EAGFW,CACT,CApE2B2/H,CAAoB3/H,GACvC4/H,EAAkB,EAAIxgI,EAAAA,EAEtBygI,EAAgBhgC,EAClB4/B,EAAmBF,EAAcK,EACjCH,EAAmBF,EACjBO,EAAe9/H,EAAcw/H,EAAAA,IAC/Bn/H,KAAKC,IAAIm/H,EAAmBF,EAAapgI,GACzCsgI,EAAmBF,EAEjBN,EAAsBa,EAAeD,EACrCX,EAAqBW,EAAgBC,EAY3C,MAAO,CACLb,sBACAC,qBACAC,mBAXyBt/B,EACtB+/B,EAAkB,EAAKV,EACxB,EAUFE,kBARwBv/B,EACrB+/B,EAAkB,GAAM,EAAIX,EAC7B,EAOFI,iBAhBuBS,EAAetgI,EAiBtC8/H,2BAhBiC9/H,EAAqBsgI,EAkB1D,CyIyaUC,CAAgC//H,GAAas6H,IACnD,CAACA,GAAkBt6H,KAGfggI,IAAkB5kD,EAAAA,GAAAA,GACtB,wBACCk/C,IAAoB,cACrBA,IAAoB3B,KAAiB5f,GAAsB,eAG7Dz2B,EAAAA,GAAAA,GAAe,CACb7iB,SAAUs5C,EACVx2B,OAAQv1D,MAIVizG,EAAAA,GAAAA,GAAyBzpB,GAEzB,MAAM0pB,GAAsBjqH,SACzBkgH,IAAwB/9G,KAAkBkiH,KAAqBF,KAA2BD,KACvFD,IAAyB4E,KACzBhkD,IAAmB08C,IAAkBx1H,KAAOlB,EAC5Cq/H,GAA6BlqH,QACjCmkH,IAA0BF,IAAyBS,IAAkCR,IACjFhE,GAAuBrO,IAAasP,IAAyBiD,IAE7Dv6B,GAAiB7pF,QAAQiqH,IAAuBnnB,GAEtD,OACEr9B,EAAAA,GAAAA,IAAA,OACE15E,GAAG,eACH0zB,UAAWA,GACXw6D,gBAAiB2qC,GACjB10B,OAAOC,EAAAA,GAAAA,GACL,4BAA4B64B,KAC5B,2BAA2BC,KAC3B,yBAAyBG,KACzB,iCAAiCC,KACjC,2BAA2BH,OAC3B,0BAA0BC,OAC1B,oBAAoB5oB,IACpB6J,GAAmB,6BAA6BA,KAElDxkC,QAAU8wC,IAAY9sH,EAAqBm+H,QAAoB/0H,EAAUqxE,SAAA,CAExEoyC,KACCpzC,EAAAA,GAAAA,GAAA,OACE5jD,UAAU,gBACVy2E,YAAawvB,GACbxO,UAAW0O,GACXuE,cAAexE,MAGnBtiD,EAAAA,GAAAA,GAAA,OACE5jD,UAAW8oG,GACXr4B,MAAOk4B,GAAwB,wBAAwBA,UAA0Bp1H,EACjF,4BAAwBk2D,GAAAA,KAAYywB,EAAAA,IAAekqC,IAAmBE,UAA4B/wH,KAEpGqwE,EAAAA,GAAAA,GAAA,OAAKt3E,GAAG,0BACPiU,QAAQ6jH,IAAmBE,MAC1Bt+C,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEoB,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,kBAAkB2qG,YAAa/F,GAAmB2C,QAAkBh0H,EAAUqxE,SAAA,EAC3FhB,EAAAA,GAAAA,GAACi6C,GAAiB,CAEhBzyH,OAAQg5H,GACRvyH,SAAUyyH,GACVxqH,gBAAiByqH,GACjB/R,sBAAuBA,GACvBD,mBAAoBA,GACpBG,qBAAsB4Q,IANjBc,KAQPxgD,EAAAA,GAAAA,GAAC6yC,GAAY,CACXrrH,OAAQg5H,GACRvyH,SAAUyyH,GACVxqH,gBAAiByqH,GACjBzsB,WAAYA,EACZ5iB,SAAUA,EACVs9B,sBAAuBA,GACvBD,mBAAoBA,GACpBG,qBAAsB4Q,MAExBt9C,EAAAA,GAAAA,IAAC6H,GAAAA,GAAU,CACTlvC,MAAMmvC,EAAAA,GAAAA,GACJ,QACAvG,EACAC,IAAgC44C,GAElCryC,UAAWyoC,EACXl3B,eAAa,EACbC,oBAAqBA,GACrBqrC,qBAAmB,EACnBC,OAAQzF,GAA0BxgD,SAAA,EAElChB,EAAAA,GAAAA,GAACkgC,GAAW,CAEV14G,OAAQg5H,GACRvyH,SAAUyyH,GACVl4H,KAAMm4H,GACNzsB,WAAYA,EACZ3N,QAASy6B,GACTpsB,mBAAoBuqB,GACpBtqB,cAAeyqB,GACf7qB,QAASA,GACT4L,wBAAyBA,GACzBx/F,kBAAmBA,GACnBs/F,gBAAiB0mB,GACjBzmB,cAAezjG,SAASw/G,IAAqBpV,GAC7CjS,yBAA0BwsB,IAbrB,GAAGd,MAAmBE,MAAqBC,OAelDv+C,EAAAA,GAAAA,IAAA,OAAKhmD,UAAWsqG,GAAgB1lD,SAAA,EAC9BhB,EAAAA,GAAAA,GAACqmB,GAAqB,CACpBC,eAAgB46B,GAChB36B,QAASy6B,GACTx6B,eAAgBA,KAEjBw6B,KACChhD,EAAAA,GAAAA,GAACknD,GAAAA,EAAQ,CACP1+H,KAAK,cACLhB,OAAQg5H,GACRvyH,SAAUyyH,GACVxqH,gBAAiByqH,GACjB7B,cAAeA,GACfqI,WAAY9C,GACZ5vB,QAASA,GACTnjB,SAAUA,EACV81C,gBAAiBC,EAAAA,IACjBC,yBAA0Bh4B,EAAAA,IAC1BxY,QAAQ,uBAGX+lC,GAAuBrO,KACtBxuC,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,wCAAwComD,IAAK2R,GAAQ1R,MAAQ,WAAQ9yE,EAAUqxE,UAC5FoB,EAAAA,GAAAA,IAACM,GAAAA,EAAM,CACL3mB,KAAK,OACL+/B,OAAK,EACLnZ,MAAM,YACNvmD,UAAU,mCACVmmD,QAAS+hD,GAAqBtjD,SAAA,EAE9BhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,WACXilC,EAAAA,GAAAA,GAAA,QAAAgB,SAAOmT,GAAQ,uBAAwBi7B,EAAqB,YAIjE0O,KACC99C,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,wCAAwComD,IAAK2R,GAAQ1R,MAAQ,WAAQ9yE,EAAUqxE,UAC5FhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL3mB,KAAK,OACL+/B,OAAK,EACLnZ,MAAM,YACNvmD,UAAU,mCACVmmD,QAASiiD,GAAwBxjD,UAEjChB,EAAAA,GAAAA,GAAA,QAAAgB,SAAOmT,GAAQ,uBAIpByyC,KACC5mD,EAAAA,GAAAA,GAAA,OAAK5jD,UAAW+oG,GAA2BnkD,UACzChB,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,2BAA0B4kD,UACvChB,EAAAA,GAAAA,GAAA,QAAAgB,SACGwkD,SAMPl0C,IAAasvC,IAA0BQ,KAA8BC,MAErErhD,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,wCAAwComD,IAAK2R,GAAQ1R,MAAQ,WAAQ9yE,EAAUqxE,UAC5FhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL3mB,KAAK,OACL+/B,OAAK,EACL3J,QAAM,EACN/1D,UAAU,wCACVmmD,QAASoiD,GAAqB3jD,SAE7BmT,GAAQgtC,GAAqB,qBAAuB,wBAI1D7vC,GAAY+vC,KACXrhD,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,wCAAwComD,IAAK2R,GAAQ1R,MAAQ,WAAQ9yE,EAAUqxE,UAC5FhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL3mB,KAAK,OACL+/B,OAAK,EACL3J,QAAM,EACN/1D,UAAU,wCACVmmD,QAASoiD,GAAqB3jD,SAE7BmT,GAAQ,0BAId7C,GAAYuvC,KACX7gD,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,wCAAwComD,IAAK2R,GAAQ1R,MAAQ,WAAQ9yE,EAAUqxE,UAC5FhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL3mB,KAAK,OACL+/B,OAAK,EACL3J,QAAM,EACN/1D,UAAU,wCACVmmD,QAASqiD,GAAe5jD,SAEvBmT,GAAQ,gBAId7C,GAAYwvC,KACX9gD,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,wCAAwComD,IAAK2R,GAAQ1R,MAAQ,WAAQ9yE,EAAUqxE,UAC5FhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL3mB,KAAK,OACL+/B,OAAK,EACL3J,QAAM,EACN/1D,UAAU,wCACVmmD,QAASsiD,GAAiB7jD,SAEzBmT,GAAQ,kBAId7C,GAAYyvC,KACX/gD,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,wCAAwComD,IAAK2R,GAAQ1R,MAAQ,WAAQ9yE,EAAUqxE,UAC5FhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL3mB,KAAK,OACL+/B,OAAK,EACL3J,QAAM,EACN/1D,UAAU,wCACVmmD,QAASuiD,GAAc9jD,SAEtBmT,GAAQ,gBAIfnU,EAAAA,GAAAA,GAACgnC,GAAoB,CACnB9wG,gBAAiByqH,GACjBx6D,SAAUs5C,EACVlZ,QAASy6B,MAEXhhD,EAAAA,GAAAA,GAACqlB,GAAW,CAACphD,OAAQm4E,KACrBp8C,EAAAA,GAAAA,GAAColB,GAA0B,CAACnhD,OAAQo4E,KACpCr8C,EAAAA,GAAAA,GAAC87C,GAAgB,CAAC73E,OAAQq4E,IACzBiL,EAAAA,KAA4BvnD,EAAAA,GAAAA,GAACulB,GAAiB,CAACthD,OAAQs4E,cAI9Dv8C,EAAAA,GAAAA,GAAC+7C,GAAY,CAAC51D,SAAUxpD,QAAQupF,QAGnC1+F,IACCw4E,EAAAA,GAAAA,GAACslB,GAAqB,CACpBrhD,OAAQs7E,GACR/3H,OAAQA,EACR4nH,oBAAqBA,EACrBjsC,QAASohD,GACTiD,QAAS/C,MAGbzkD,EAAAA,GAAAA,GAAA,OAAKu8B,eAAa,EAAAv7B,SACfzsE,GAAyBY,IAAI,CAACs6C,EAAwBhkD,KACrDu0E,EAAAA,GAAAA,GAACwlB,GAAyB,CACxBiiC,cAAeh8H,EAEfgkD,uBAAwBA,GADnBA,EAAuB/mD,SAOxC,IGnnBMg/H,GAAwB,CAC5BngF,cC3GwCo4B,IACxC,MAAM,MAAEgoD,GAAUhoD,EACZioD,GAAgB/nD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAAkBsnD,GAEvE,OAAOC,GAAgB5nD,EAAAA,GAAAA,GAAC4nD,EAAa,IAAKjoD,SAAYhwE,GDwGtDu1C,WE5GqCy6B,IACrC,MAAM,MAAEgoD,GAAUhoD,EACZkoD,GAAahoD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,cAAesnD,GAEjE,OAAOE,GAAa7nD,EAAAA,GAAAA,GAAC6nD,EAAU,IAAKloD,SAAYhwE,GFyGhDkrD,cG7GwC8kB,IACxC,MAAM,MAAEgoD,GAAUhoD,EACZmoD,GAAgBjoD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAAkBsnD,GAEvE,OAAOG,GAAgB9nD,EAAAA,GAAAA,GAAC8nD,EAAa,IAAKnoD,SAAYhwE,GH0GtDqkC,QI9GuC2rC,IACvC,MAAM,MAAEgoD,GAAUhoD,EACZooD,GAAeloD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,gBAAiBsnD,GAErE,OAAOI,GAAe/nD,EAAAA,GAAAA,GAAC+nD,EAAY,IAAKpoD,SAAYhwE,GJ2GpD2zD,kBK/G4Cqc,IAC5C,MAAM,MAAEgoD,GAAUhoD,EACZqoD,GAAoBnoD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,qBAAsBsnD,GAE/E,OAAOK,GAAoBhoD,EAAAA,GAAAA,GAACgoD,EAAiB,IAAKroD,SAAYhwE,GL4G9Dy8D,mBMhH6CuT,IAC7C,MAAM,MAAEgoD,GAAUhoD,EACZsoD,GAAqBpoD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,sBAAuBsnD,GAEjF,OAAOM,GAAqBjoD,EAAAA,GAAAA,GAACioD,EAAkB,IAAKtoD,SAAYhwE,GN6GhEwqC,0BOjHgDwlC,IAChD,MAAM,MAAEgoD,GAAUhoD,EACZuoD,GAAwBroD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,yBAA0BsnD,GAEvF,OAAOO,GAAwBloD,EAAAA,GAAAA,GAACkoD,EAAqB,IAAKvoD,SAAYhwE,GP8GtE2gB,cQlHwCqvD,IACxC,MAAM,MAAEgoD,GAAUhoD,EACZwoD,GAAgBtoD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAAkBsnD,GAEvE,OAAOQ,GAAgBnoD,EAAAA,GAAAA,GAACmoD,EAAa,IAAKxoD,SAAYhwE,GR+GtD8b,YSnHsCk0D,IACtC,MAAM,MAAEgoD,GAAUhoD,EACZyoD,GAAcvoD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,eAAgBsnD,GAEnE,OAAOS,GAAcpoD,EAAAA,GAAAA,GAACooD,EAAW,IAAKzoD,SAAYhwE,GTgHlD8hC,QUpHsCkuC,IACtC,MAAM,MAAEgoD,GAAUhoD,EACZ0oD,GAAcxoD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,eAAgBsnD,GAAOn1F,aAE1E,OAAO61F,GAAcroD,EAAAA,GAAAA,GAACqoD,EAAW,IAAK1oD,SAAYhwE,GViHlD08D,qBWrH+CsT,IAC/C,MAAM,MAAEgoD,GAAUhoD,EACZ2oD,GAAuBzoD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,wBAAyBsnD,GAErF,OAAOW,GAAuBtoD,EAAAA,GAAAA,GAACsoD,EAAoB,IAAK3oD,SAAYhwE,GXkHpE66D,SYtHmCmV,IACnC,MAAM,MAAEgoD,GAAUhoD,EACZ4oD,GAAW1oD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,YAAasnD,GAE7D,OAAOY,GAAWvoD,EAAAA,GAAAA,GAACuoD,EAAQ,IAAK5oD,SAAYhwE,GZmH5C8vC,aavH2CkgC,IAC3C,MAAM,MAAEgoD,GAAUhoD,EACZ6oD,GAAmB3oD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ2oD,MAAO,oBAAqBd,GAAOlqF,cAEpF,OAAO+qF,GAAmBxoD,EAAAA,GAAAA,GAACwoD,EAAgB,IAAK7oD,SAAYhwE,GboH5D29D,kBcxH4CqS,IAC5C,MAAM,MAAEgoD,GAAUhoD,EACZ+oD,GAAoB7oD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ2oD,MAAO,qBAAsBd,GAE/E,OAAOe,GAAoB1oD,EAAAA,GAAAA,GAAC0oD,EAAiB,IAAK/oD,SAAYhwE,GdqH9Dg5H,sBezHgDhpD,IAChD,MAAM,MAAEgoD,GAAUhoD,EACZipD,GAAwB/oD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ2oD,MAAO,6BAA8Bd,GAE3F,OAAOiB,GAAwB5oD,EAAAA,GAAAA,GAAC4oD,EAAqB,IAAKjpD,SAAYhwE,GfsHtEorD,gBgB1H0C4kB,IAC1C,MAAM,MAAEgoD,GAAUhoD,EACZkpD,GAAkBhpD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,mBAAoBsnD,GAE3E,OAAOkB,GAAkB7oD,EAAAA,GAAAA,GAAC6oD,EAAe,IAAKlpD,SAAYhwE,GhBuH1D4zD,kBiB3H4Coc,IAC5C,MAAM,MAAEgoD,GAAUhoD,EACZmpD,GAAoBjpD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ2oD,MAAO,qBAAsBd,GAE/E,OAAOmB,GAAoB9oD,EAAAA,GAAAA,GAAC8oD,EAAiB,IAAKnpD,SAAYhwE,GjBwH9D6zD,oBkB5H8Cmc,IAC9C,MAAM,MAAEgoD,GAAUhoD,EACZopD,GAAsBlpD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,uBAAwBsnD,GAEnF,OAAOoB,GAAsB/oD,EAAAA,GAAAA,GAAC+oD,EAAmB,IAAKppD,SAAYhwE,GlByHlE8zD,2BmB7HqDkc,IACrD,MAAM,MAAEgoD,GAAUhoD,EACZqpD,GAA6BnpD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,8BAA+BsnD,GAEjG,OAAOqB,GAA6BhpD,EAAAA,GAAAA,GAACgpD,EAA0B,IAAKrpD,SAAYhwE,GnB0HhF6iE,uBoB9HiDmN,IACjD,MAAM,MAAEgoD,GAAUhoD,EACZspD,GAAyBppD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ2oD,MAAO,0BAA2Bd,GAEzF,OAAOsB,GAAyBjpD,EAAAA,GAAAA,GAACipD,EAAsB,IAAKtpD,SAAYhwE,GpB2HxEs1C,eqB/HyC06B,IACzC,MAAM,MAAEgoD,GAAUhoD,EACZupD,GAAiBrpD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ2oD,MAAO,kBAAmBd,GAEzE,OAAOuB,GAAiBlpD,EAAAA,GAAAA,GAACkpD,EAAc,IAAKvpD,SAAYhwE,GrB4HxDm1C,UsBhIoC66B,IACpC,MAAM,MAAEgoD,GAAUhoD,EACZwpD,GAAYtpD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ2oD,MAAO,aAAcd,GAE/D,OAAOwB,GAAYnpD,EAAAA,GAAAA,GAACmpD,EAAS,IAAKxpD,SAAYhwE,GtB6H9CmiE,0BuBjI8C6N,IAC9C,MAAM,MAAEgoD,GAAUhoD,EACZypD,GAAsBvpD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ2oD,MAAO,uBAAwBd,GAEnF,OAAOyB,GAAsBppD,EAAAA,GAAAA,GAACopD,EAAmB,IAAKzpD,SAAYhwE,GvB8HlEypC,oCwBpI8CumC,IAC9C,MAAM,MAAEgoD,GAAUhoD,EACZ0pD,GAAgCxpD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iCAAkCsnD,GAEvG,OAAO0B,GAAgCrpD,EAAAA,GAAAA,GAACqpD,EAA6B,CAACplF,OAAQ0jF,SAAYh4H,GxBiI1F4jE,cyBnIwCoM,IACxC,MAAM,MAAEgoD,GAAUhoD,EACZ2pD,GAAgBzpD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ2oD,MAAO,iBAAkBd,GAEvE,OAAO2B,GAAgBtpD,EAAAA,GAAAA,GAACspD,EAAa,IAAK3pD,SAAYhwE,GzBgItDikE,mB0BpI6C+L,IAC7C,MAAM,MAAEgoD,GAAUhoD,EACZ4pD,GAAqB1pD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ2oD,MAAO,sBAAuBd,GAEjF,OAAO4B,GAAqBvpD,EAAAA,GAAAA,GAACupD,EAAkB,IAAK5pD,SAAYhwE,G1BiIhE6jE,6B2BrIuDmM,IACvD,MAAM,MAAEgoD,GAAUhoD,EACZ6pD,GAA+B3pD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ2oD,MAAO,gCAAiCd,GAErG,OAAO6B,GAA+BxpD,EAAAA,GAAAA,GAACwpD,EAA4B,IAAK7pD,SAAYhwE,G3BkIpF+gC,qB4BtI+CivC,IAC/C,MAAM,MAAEgoD,GAAUhoD,EACZ8pD,GAAuB5pD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,wBAAyBsnD,GAErF,OAAO8B,GAAuBzpD,EAAAA,GAAAA,GAACypD,EAAoB,IAAK9pD,SAAYhwE,G5BmIpEgtD,uB6BvIiDgjB,IACjD,MAAM,MAAEgoD,GAAUhoD,EACZ+pD,GAAyB7pD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,0BAA2BsnD,GAEzF,OAAO+B,GAAyB1pD,EAAAA,GAAAA,GAAC0pD,EAAsB,IAAK/pD,SAAYhwE,G7BoIxEitD,oB8BxI8C+iB,IAC9C,MAAM,MAAEgoD,GAAUhoD,EACZgqD,GAAsB9pD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,uBAAwBsnD,GAEnF,OAAOgC,GAAsB3pD,EAAAA,GAAAA,GAAC2pD,EAAmB,IAAKhqD,SAAYhwE,G9BqIlEo0D,c+BzIwC4b,IACxC,MAAM,MAAEgoD,GAAUhoD,EACZiqD,GAAgB/pD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAAkBsnD,GAEvE,OAAOiC,GAAgB5pD,EAAAA,GAAAA,GAAC4pD,EAAa,IAAKjqD,SAAYhwE,G/BsItDg+C,iBgC1I2CgyB,IAC3C,MAAM,MAAEgoD,GAAUhoD,EACZkqD,GAAmBhqD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ2oD,MAAO,oBAAqBd,GAE7E,OAAOkC,GAAmB7pD,EAAAA,GAAAA,GAAC6pD,EAAgB,IAAKlqD,SAAYhwE,GhCuI5D4mE,8BiC3IwDoJ,IACxD,MAAM,MAAEgoD,GAAUhoD,EACZmqD,GAAgCjqD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iCAAkCsnD,GAEvG,OAAOmC,GAAgC9pD,EAAAA,GAAAA,GAAC8pD,EAA6B,IAAKnqD,SAAYhwE,GjCwItFy5C,kBkC5I4Cu2B,IAC5C,MAAM,MAAEgoD,GAAUhoD,EACZoqD,GAAoBlqD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ2oD,MAAO,qBAAsBd,GAE/E,OAAOoC,GAAoB/pD,EAAAA,GAAAA,GAAC+pD,EAAiB,IAAKpqD,SAAYhwE,GlCyI9DmkE,oBmC7I8C6L,IAC9C,MAAM,MAAEgoD,GAAUhoD,EACZqqD,GAAsBnqD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ2oD,MAAO,uBAAwBd,GAEnF,OAAOqC,GAAsBhqD,EAAAA,GAAAA,GAACgqD,EAAmB,IAAKrqD,SAAYhwE,GnC0IlE0nB,qBoC9I+CsoD,IAC/C,MAAM,MAAEgoD,GAAUhoD,EACZsqD,GAAuBpqD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,wBAAyBsnD,GAErF,OAAOsC,GAAuBjqD,EAAAA,GAAAA,GAACiqD,EAAoB,IAAKtqD,SAAYhwE,GpC2IpEioB,0BqC/IoD+nD,IACpD,MAAM,MAAEgoD,GAAUhoD,EACZuqD,GAA4BrqD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,6BAA8BsnD,GAE/F,OAAOuC,GAA4BlqD,EAAAA,GAAAA,GAACkqD,EAAyB,IAAKvqD,SAAYhwE,GrC4I9EokE,kBsChJ4C4L,IAC5C,MAAM,MAAEgoD,GAAUhoD,EACZwqD,GAAoBtqD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ2oD,MAAO,qBAAsBd,GAE/E,OAAOwC,GAAoBnqD,EAAAA,GAAAA,GAACmqD,EAAiB,IAAKxqD,SAAYhwE,GtC6I9Do/B,gBuCjJ0C4wC,IAC1C,MAAM,MAAEgoD,GAAUhoD,EACZyqD,GAAkBvqD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ2oD,MAAO,mBAAoBd,GAE3E,OAAOyC,GAAkBpqD,EAAAA,GAAAA,GAACoqD,EAAe,IAAKzqD,SAAYhwE,GvC8I1Dy+D,kBwC9I2Ci8D,EAAG1C,YAC9C,MAAM2C,GAAoBzqD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ2oD,MAAO,qBAAsBd,GAE/E,OAAO2C,GAAoBtqD,EAAAA,GAAAA,GAACsqD,EAAiB,CAAC3C,MAAOA,SAAYh4H,GxC4IjEq1D,yByCnJ6C2a,IAC7C,MAAM,MAAEgoD,GAAUhoD,EACZ4qD,GAAqB1qD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,sBAAuBsnD,GAEjF,OAAO4C,GAAqBvqD,EAAAA,GAAAA,GAACuqD,EAAkB,IAAK5qD,SAAYhwE,GzCgJhEs1D,mB0CpJ6C0a,IAC7C,MAAM,MAAEgoD,GAAUhoD,EACZ6qD,GAAqB3qD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,sBAAuBsnD,GAEjF,OAAO6C,GAAqBxqD,EAAAA,GAAAA,GAACwqD,EAAkB,IAAK7qD,SAAYhwE,G1CiJhEw1D,4B2CpJ8Cqb,EAAAA,GAAAA,IAAMb,IACpD,MAAM,MAAEgoD,GAAUhoD,EAEZ8qD,GAAuB5qD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,wBAAyBsnD,GAErF,OAAO8C,GAAuBzqD,EAAAA,GAAAA,GAACyqD,EAAoB,IAAK9qD,SAAYhwE,I3CgJpE21D,mB4CtJ6Cqa,IAC7C,MAAM,MAAEgoD,GAAUhoD,EACZ+qD,GAAqB7qD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,sBAAuBsnD,GAEjF,OAAO+C,GAAqB1qD,EAAAA,GAAAA,GAAC0qD,EAAkB,IAAK/qD,SAAYhwE,I5CoJ5Dg7H,GAAax8H,OAAO8G,KAAKyyH,IACzBkD,GAAgBz8H,OAAO8I,QAAQywH,IASrC,IAAelnD,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBj9E,IACC6jC,EAAAA,EAAAA,KAAK3jC,EAAAA,EAAAA,KAAeF,GAASukI,IAFbtnD,CAPIwnD,GACfD,GAAcz1H,IAAI,EAAEa,EAAK80H,MAE9B9qD,EAAAA,GAAAA,GAAC8qD,EAAc,CAAWnD,MAAOkD,EAAW70H,IAAvBA,M6CvJzB,GAPyC2pE,IACvC,MAAM,OAAE17B,GAAW07B,EACborD,GAAelrD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,gBAAiBp8B,GAErE,OAAO8mF,GAAe/qD,EAAAA,GAAAA,GAAC+qD,EAAY,IAAKprD,SAAYhwE,GCGtD,GAPyCgwE,IACvC,MAAM,OAAE17B,GAAW07B,EACbqrD,GAAenrD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,gBAAiBp8B,GAErE,OAAO+mF,GAAehrD,EAAAA,GAAAA,GAACgrD,EAAY,IAAKrrD,SAAYhwE,G,oDCqCtD,MA6GA,IAAe6wE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GAAUoB,aACT,MAAMgC,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,IACxB8f,QAAS2jH,GAAoB7kI,EAAO2nC,aAAe,CAAC,GACtD,uBAAEwsB,IAA2Bj0D,EAAAA,EAAAA,KAAeF,IAC5C,cAAEiC,GAAkBjC,EACpBo+F,EAAYh7F,IAAQqgB,EAAAA,EAAAA,IAAcrgB,IAGtCuvB,MAAOk6D,EAAW,eAClB7uB,EAAc,cACdl0B,EAAa,aACbD,IACE3pC,EAAAA,EAAAA,KAAeF,GAAQ2pC,WAE3B,MAAO,CACLy0D,YACArrB,SAAS3xD,EAAAA,EAAAA,KAAmBphB,EAAQoB,IAAS2xE,QAC7C9wE,gBACA4iI,kBACAh4C,cACAi4C,YAAa9mE,EACbrnC,UAAWw9B,IAA2B4wE,EAAAA,GAAuBhqD,QAC7DjxC,gBACAD,iBAxBcozC,CA7G8B+nD,EAChD5mC,YACArrB,UACAkyD,aACAhjI,gBACA4iI,kBACAluG,YACAk2D,cACAi4C,cACAj7F,eACAC,gBACAizC,UACAhd,eAEA,MAAM,mBAAEmlE,IAAuBjlH,EAAAA,EAAAA,MAEzBkb,GAAOqgD,EAAAA,GAAAA,MACN2pD,EAAmBC,IAAwB7pD,EAAAA,GAAAA,IAAmB,IAE/D8pD,GADwBtxB,EAAAA,GAAAA,GAAsBoxB,KACIA,GAExDviD,EAAAA,GAAAA,GAAe,CACb7iB,WACA8iB,OAAQ9F,IAGV,MAAMuoD,GAAYvpD,EAAAA,GAAAA,IAAQ,IACjBhJ,EAAUA,EAAQhkE,IAAKw2H,GAAWA,EAAO9jH,QAAU,GACzD,CAACsxD,IAEEyyD,GAAqB5pD,EAAAA,GAAAA,IAAajpD,IACtCuyG,EAAmB,CAAEvyG,WACpB,CAACuyG,IAEEO,GAAe1pD,EAAAA,GAAAA,IAAQ,KAE3B,MAAM2pD,GAAYt6H,EAAAA,EAAAA,MAAYo5B,MAAMv7B,KAC9B01B,GAAcgnG,EAAAA,EAAAA,IAAmB,CACrC37H,KAAK+B,EAAAA,EAAAA,IAAO,IACN84H,GAAmB,MACnBh7F,GAAgB,MAChBC,GAAiB,KAEvBnX,MAAOk6D,EACPzqF,KAAM,SAGR,OAAOwjI,EAAAA,GAAAA,GACLjnG,EAAY78B,OAAQ2f,IAClB,MAAM3M,EAAO4wH,EAAUjkH,GAOvB,OACG6jH,EAAU7gI,SAASgd,IACjBA,IAAWxf,KACT6S,KAASgR,EAAAA,EAAAA,IAAUhR,KAAWspF,GAAatpF,EAAK+wH,yBAI1D,CAAChB,EAAiBh4C,EAAahjD,EAAcC,EAAe7nC,EAAeqjI,EAAWlnC,IAEnF0nC,GAAiBlqD,EAAAA,GAAAA,IAAY,KAC7BupD,EAAkBtjI,SACpBqjI,EAAmB,CAAEvyG,MAAO,KAC5BsyG,EAAWE,KAEZ,CAACA,EAAmBD,EAAoBD,IAE3C,OACErrD,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,iBAAgB4kD,UAC7BoB,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,uBAAsB4kD,SAAA,EACnChB,EAAAA,GAAAA,GAACmsD,GAAAA,EAAU,CACTC,QAASP,EACTQ,YAAad,EACbe,YAAar5C,EACbs5C,kBAAmBhrG,EAAK,yBACxBirG,cAAc,4BACdzvG,UAAWmuG,EACXuB,oBAAqBjB,EACrBkB,eAAgBd,EAChBe,cAAY,EACZC,oBAAkB,EAClBC,gBAAiBpB,EACjBqB,eAAa,EACbC,YAAU,EACVC,cAAc,cAGhBhtD,EAAAA,GAAAA,GAACitD,GAAAA,EAAoB,CACnB73D,QAASz4D,QAAQ4uH,EAAkBtjI,QACnC2jH,SAAU7uF,EACV6lD,UAAWrhD,EAAK,yBAChBghD,QAAS2pD,EAAelrD,SAEvBjkD,GACCijD,EAAAA,GAAAA,GAAC8L,GAAAA,EAAO,CAACnJ,MAAM,WAEf3C,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,0BCtIvB,GANwC4kC,IACtC,MAAMutD,GAAcrtD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,eAEnD,OAAO6sD,GAAcltD,EAAAA,GAAAA,GAACktD,EAAW,IAAKvtD,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KCG5D,GANsCxB,IACpC,MAAMwtD,GAAYttD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,aAEjD,OAAO8sD,GAAYntD,EAAAA,GAAAA,GAACmtD,EAAS,IAAKxtD,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KCCxD,GAN2BisD,KACzB,MAAMC,GAAYxtD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,aAEjD,OAAOgtD,GAAYrtD,EAAAA,GAAAA,GAACqtD,EAAS,KAAMrtD,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KCK7C,GANuCxB,IACrC,MAAM2tD,GAAaztD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,cAElD,OAAOitD,GAAattD,EAAAA,GAAAA,GAACstD,EAAU,IAAK3tD,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KCC1D,GAN6BosD,KAC3B,MAAMC,GAAc3tD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,eAEnD,OAAOmtD,GAAcxtD,EAAAA,GAAAA,GAACwtD,EAAW,KAAMxtD,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,K,4BCX1C,MAAMssD,GACMC,UAAsB,GAEvCC,WAAAA,CAAYC,GACVC,KAAKH,UAAY,IAAKE,GAAS,GACjC,CAEAE,KAAKtlI,GACH,OAAO,IAAIilI,GAAQ,IAAII,KAAKH,UAAWllI,GACzC,CAEAulI,QAAAA,GACE,OAAOF,KAAKH,SACd,EAIK,MAAMM,GAAmB,IAAIP,GAAQ,CAAC,gBAChCQ,GAA2BD,GAAiBF,KAAK,iBACjDI,GAA2BD,GAAyBH,KAAK,iBACzDK,GAA6BF,GAAyBH,KAAK,mBAE3DM,GAAoBJ,GAAiBF,KAAK,gB,oDCNvD,MAGMO,GAA6B,gBAC7BC,GAA2B,WAI3BC,GAAkD,CACtDC,WAAY,IAAIpkH,MATO,GASiBqkH,KAAK,GAC7CC,iBAAkB,EAClBC,gBAAgB,EAChBC,qBAAiBj/H,EACjBk/H,aAASl/H,GCfLm/H,IAAwBh3G,EAAAA,EAAAA,IAAUld,GAAOA,IAAM,KAAK,GAE1D,IAAIm0H,IAA8B,EAoHlC,SAASC,GAAoBC,GAC3B,OAAQA,GACN,IAAK,UACH,OAAOC,EAAAA,GAAaC,WACtB,IAAK,QACH,OAAOD,EAAAA,GAAaE,SACtB,IAAK,UACH,OAAOF,EAAAA,GAAaG,UACtB,IAAK,UACH,OAAOH,EAAAA,GAAaI,aACtB,QACE,OAAOJ,EAAAA,GAAaK,YAE1B,C,gBC0DA,SAASC,GACPC,EACArD,GAEA,MAAOnqH,EAAaytH,IAAWC,EAAAA,GAAAA,GAC7BF,EACArD,OACAz8H,EACAigI,EAAAA,KAKF,MAAO,CAAC3tH,EAAaytH,KAFJztH,IAAgBmqH,GAAWnqH,EAAY,KAAOmqH,EAAQ,IAGzE,CAEA,SAASyD,GACPC,EACAC,EACAN,EACAn3H,EACA2mB,EACAhxB,GAEA,MAAM+hI,GAAgBlrD,EAAAA,GAAAA,OAEtBgf,EAAAA,GAAAA,GAAc,KACZksC,EAAc1zG,aAAU3sB,GACvB,CAAC1B,KAEJ61F,EAAAA,GAAAA,GAAc,KACRisC,IAAsBD,GAAsBx3H,GAAgB2mB,IAC9D+wG,EAAc1zG,SAAU2zG,EAAAA,EAAAA,IACtB33H,EACA2mB,EACA6wG,KAGH,CAACx3H,EAAc2mB,EAAU8wG,EAAmBD,IAE/C,MAAO7tH,EAAaytH,IAAWC,EAAAA,GAAAA,GAC7BF,EACAO,EAAc1zG,aACd3sB,EACuB,UAAvBmgI,EAAiCjuG,EAAAA,GAAqBY,EAAAA,KAKxD,MAAO,CAACxgB,EAAaytH,KAFJztH,IAAgB+tH,EAAc1zG,SAAWra,EAAY,KAAO+tH,EAAc1zG,QAAQ,IAGrG,C,wFC5PA,SAAyC,WAAzC,GAAsF,WCwOtF,IAAekkD,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GAAUgC,SAAQs3C,WACjB,MAAMwwF,EAAWxwF,EAAKozB,QAASpyD,EAAAA,EAAAA,KAAWta,EAAQs5C,EAAKozB,aAAUnjE,EAC3DnG,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQgC,GAC1B+nI,EAAiB3mI,IAAQw0H,EAAAA,EAAAA,IAAiBx0H,EAAM,gBAEhDnB,EAAgBjC,EAAOiC,cACvB0vC,EAAc1vC,GAAgB8S,EAAAA,EAAAA,KAAW/U,EAAQiC,QAAiBsH,EAClEygI,EAAyBr4F,GAAa3H,YACtCtV,EAA2B10B,EAAO00B,0BAA0BC,SAElE,MAAO,CACLm1G,WACAC,iBACA9nI,gBACA+nI,yBACAt1G,6BAhBcuoD,CAvLFgtD,EAChBjoI,SACAs3C,OACAmtD,QACAqjC,WACA7nI,gBACA8nI,iBACAr1G,2BACAs1G,yBACAh0G,YACAq1E,0BAEA,MAAM,kBAAEtoD,IAAsB9iC,EAAAA,EAAAA,MAExB0+D,GAAMD,EAAAA,GAAAA,MACNwrD,GAAaxrD,EAAAA,GAAAA,MAEbvjD,GAAOs/C,EAAAA,GAAAA,MAEN0vD,EAASC,EAAWC,IAAe1/C,EAAAA,GAAAA,KAEpC2/C,EAAYtoI,IAAWC,GAAiB8nI,EACxCQ,GAAcC,EAAAA,GAAAA,IAAyBlxF,EAAKA,MAC5CgzB,EAAWhzB,EAAKA,KAChBmxF,EAAmC,mBAAlBn+D,EAASlqE,KAA4BkqE,OAAW/iE,EAEjEmhI,GAAc3uD,EAAAA,GAAAA,IAAQ,KAC1B,GAAK0uD,GAAgBC,YAErB,OAAID,EAAeE,cACVF,EAAeC,YAAYlnI,KAAM6Z,GAAWA,EAAOH,WAAaS,EAAAA,KAGlE8sH,EAAeC,YAAYlnI,KAAM6Z,GAAWA,EAAOH,WAAaC,EAAAA,MACtE,CAACstH,IAEEG,EACAH,GAAgBC,YACXvvG,EAAK,kBAEVme,EAAK9oC,UAAYi6H,EACZtvG,EAAK,kBAAmB,CAAE0b,OAAQ4zF,EAAe5zF,SAEtD0zF,EACKpvG,EAAK,8BAA+B,CAAE0vG,OAAOhwD,EAAAA,GAAAA,IAAqB1/C,EAAMovG,UADjF,EAMIO,EAAcL,GAAgBC,YAAc,QAAU,QAEtD,kBACJlrC,EAAiB,kBAAE6J,EAAiB,wBACpCqC,EAAuB,kBAAEjM,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBjhB,GAErB2qB,GAAoBlqB,EAAAA,GAAAA,GAAgB,IAAMT,EAAIzoD,SAC9CqzE,GAAiBnqB,EAAAA,GAAAA,GAAgB,IAAMT,EAAIzoD,QAASq3F,QAAQ,mBAC5D/jB,GAAiBpqB,EAAAA,GAAAA,GAAgB,IACrCn5E,SAASizE,cAAc,aAAaA,cAAc,qCAE9CuwB,GAAYrqB,EAAAA,GAAAA,GAAgB,KAAM,CAAGsqB,YAAY,KAEjDjI,GAAcriB,EAAAA,GAAAA,GAAgB,KAClCr8B,EAAkB,CAChB/gD,SACAs3C,WAIEwvD,EAAcxvD,EAAKszB,eAAiBk9D,EAAYiB,GAAAA,GAAqBjB,EAErE9jI,GAAUglI,EAAAA,GAAAA,IAAmB1xF,EAAKA,MAElC2xF,GAAiBlvD,EAAAA,GAAAA,IAAQ,KAAMmvD,EAAAA,GAAAA,IAAkB5xF,EAAKA,MAAO,CAACA,EAAKA,QACnE,SAAE6xF,EAAQ,QAAEC,GAAYH,GAAkB,CAAC,EAE3CI,GAAwBtvD,EAAAA,GAAAA,IAAQ,KACpC,IAAKovD,IAAaC,EAChB,OAGF,MAAME,EAAiB,CAACH,EAASI,YAAaJ,EAASK,WACjD10B,EAAeq0B,EAASr0B,aAE9B,OACEl9B,EAAAA,GAAAA,GAAC6xD,GAAAA,EAAuB,CACtBz1G,UDzIiI,WC0IjI01G,iBAAkBJ,EAClBx0B,aAAcA,EACd60B,YAAaP,EAAQplI,WAGxB,CAACmlI,EAAUC,IAEd,GAAKplI,EAEL,OACEg2E,EAAAA,GAAAA,IAAA,OACE2C,IAAKA,EACL3oD,WAAW0lD,EAAAA,GAAAA,GAAe,+BDtJT,WCsJsD1lD,GACvEywE,MAAOA,EACPtqB,QAASslB,EACT5B,cAAeJ,EACfgN,YAAaf,EACbtW,aAAep5B,EAAAA,QAA2BzyD,EAAZ6gI,EAC9B/0C,aAAer5B,EAAAA,QAA6BzyD,EAAd8gI,EAAwBzvD,SAAA,CAErDywD,GACCA,IAAyBzxD,EAAAA,GAAAA,GAACuN,GAAAA,EAAM,CAACnxD,UAAWwrE,GAAgBnnF,KAAMyuF,EAAYnzC,KAAK,UACpFrc,EAAK9oC,WAAYopE,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,iBAAiB3e,UAAWwrE,MACzD5nB,EAAAA,GAAAA,GAAA,OACE+E,IAAKurD,EACLl0G,UDnK6J,WCoK7JywE,MAAO,4BAAgE7rB,SAEtE50E,IACC4zE,EAAAA,GAAAA,GAACkqB,GAAAA,EAAW,CACVH,aAAcumC,EACdlkI,QAASA,EACT2vD,KA3Hc,GA4HdouC,WAAYomC,EACZyB,sBAAoB,EACpB/gC,8BAA+BQ,EAC/BT,8BAA+BS,MAKpC/xD,EAAK+N,YACJuyB,EAAAA,GAAAA,GAAA,OAAK5jD,UDpLiG,WCoLpE4kD,UAChChB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,0BAGd+1F,IACC9wD,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLtmD,UD1LuD,WC2LvD61G,gBAAc,EACdl2E,KAAK,OACLm2E,mBAAiB,EACjBC,oBAAkB,EAClBt0B,MAAI,EACJ/hB,OAAK,EAAA9a,SAEqB,QAAzB8vD,EAAYxtH,UACT8uH,EAAAA,EAAAA,IAAgB7wG,EAAMuvG,EAAYrtH,OAAQ,CAAE4uH,wBAAwB,EAAMj2G,UAAWwrE,MACrF8V,EAAAA,EAAAA,IAAkBn8E,EAAMuvG,EAAYrtH,OAAQ,CAAEk6F,QAAQ,EAAMvhF,UAAWwrE,OAG9EopC,IACChxD,EAAAA,GAAAA,GAACsyD,GAAAA,EAAU,CACT3vD,MAAOuuD,EACP/8H,KAAM68H,SAGarhI,IAAtB8/F,IACCzvB,EAAAA,GAAAA,GAAC+C,GAAAA,EAAI,CACH9+B,OAAQ2hD,EACRuK,OAAQV,EACRrzE,UAAU,0BACV8mD,WAAS,EACT4sB,YAAU,EACVF,eAAgBA,EAChBF,kBAAmBA,EACnBC,eAAgBA,EAChBE,UAAWA,EACX1sB,QAAS2iB,EACT5J,oBAAqB6J,EAAsB/kB,UAE3ChB,EAAAA,GAAAA,GAACuyD,GAAAA,EAAa,CACZnqI,OAAQA,EACRs3C,KAAMA,EACNgxF,UAAWA,EACX51G,yBAA0BA,EAC1Bs1G,uBAAwBA,Y,wCCrMpC,MAoDA,IAAe5vD,EAAAA,GAAAA,IApDoBgyD,EACjC94H,QACA+4H,WAAW,gBACXC,cACAjhC,sBACAlvB,UACAviE,YAEA,MAAM+kE,GAAMD,EAAAA,GAAAA,MAENktB,GAAiB2gC,EAAAA,GAAAA,IAAkB5tD,EAAK0sB,GACxC8f,GAAe5B,EAAAA,GAAAA,GAAaj2G,GAE5B+uG,GAAYC,EAAAA,GAAAA,GAAoBhvG,EAAO,WACvCk2G,GAAe3kB,EAAAA,GAAAA,GAASwd,GAAYzW,GACpCjY,GAAuB64C,EAAAA,GAAAA,GAA6BhjB,GAEpDzjH,EAAQuN,EAAM1N,QAAQG,MAEtB07F,GAAcriB,EAAAA,GAAAA,GAAgB,KAClCjD,EAAQviE,KAGV,OACEoiE,EAAAA,GAAAA,IAAA,OACE2C,IAAKA,EACLr8E,GAAI,GAAG+pI,IAAWzyH,IAClBoc,UAAU,oBACVmmD,QAASslB,EAAY7mB,SAAA,EAErBhB,EAAAA,GAAAA,GAAA,OACE+sB,IAAKwkB,EACLn1F,UAAU,kBACV4wE,IAAI,GACJ6kB,WAAY6gB,EACZG,SAAS,QACT5sC,cAAeysC,EAAc7mC,GAAAA,OAAYl8F,KAE3CqwE,EAAAA,GAAAA,GAAA,OACE+sB,IAAK6iB,EACLxzF,WAAW0lD,EAAAA,GAAAA,GAAe,aAAc,kBAAmBiY,GAC3DiT,IAAI,GACJ6kB,WAAY6gB,EACZG,SAAS,QACT5sC,cAAeysC,EAAc7mC,GAAAA,OAAYl8F,IAE1CxD,IAAS6zE,EAAAA,GAAAA,GAAA,QAAM5jD,UAAU,iBAAgB4kD,SAAE70E,EAAM+lG,MAAQ,OAAQ4gC,EAAAA,GAAAA,IAAoB3mI,EAAMskC,YAC3FiiG,IAAe1yD,EAAAA,GAAAA,GAAA,QAAM5jD,UAAU,mB,oDC1EtC,SAAiH,WC2LjH,IAAeokD,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAAqB,CAACj9E,GAAU8tB,YAClD,MAAM1qB,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQ8tB,EAAM9rB,QAChCsqI,EAAclpI,GAAMkpI,aAEpB,sBAAEK,GAA0B3sI,EAAO+iB,UACnChhB,EAAQ,UAAW+rB,GAASA,EAAM8+G,MAClCC,GAAgB/8E,EAAAA,EAAAA,KAAoB9vD,EAAQ8tB,EAAM9rB,QAClDwO,EAAWq8H,GAAel7H,KAAMm7H,GAAgBA,EAAYxqI,KAAOwrB,EAAMxrB,IAG/E,MAAO,CACLgqI,cACA97H,WACAu8H,OALiBhrI,KAAW4qI,IAA0BE,GAAehrI,QAAU,GAAK8qI,KARpE1vD,CAtJpB,UAAoB,MAClBnvD,EAAK,YAAEw+G,EAAW,UAAEj+D,EAAS,SAAE79D,EAAQ,OAAEu8H,IAEzC,MAAM,gBACJn+D,EAAe,uBACfo+D,EAAsB,qBACtBC,EAAoB,uBACpBC,EAAsB,iBACtBv9H,IACEsQ,EAAAA,EAAAA,MAEEkb,GAAOqgD,EAAAA,GAAAA,KACPmoB,GAAejlB,EAAAA,GAAAA,MAEf4qB,GAAoBlqB,EAAAA,GAAAA,GAAgB,IAAMukB,EAAaztE,SACvDqzE,GAAiBnqB,EAAAA,GAAAA,GAAgB,IAAMn5E,SAAS81C,MAChDytD,GAAiBpqB,EAAAA,GAAAA,GAAgB,IAAMn5E,SAASizE,cAAc,yCAC9DuwB,GAAYrqB,EAAAA,GAAAA,GAAgB,KAAM,CAAGsqB,YAAY,EAAMyjC,SAAS,KAEhEnrI,EAAS8rB,GAASA,EAAM9rB,OACxBumC,EAAgBza,GAAS,YAAaA,EACtC/rB,EAAQwmC,GAAiBza,EAAM8+G,MAC/Br6H,EAAYub,GAAS,cAAeA,EACpC/nB,EAAQwiC,EAAiBza,EAAOloB,QAAQG,WAAQwD,EAChD8gC,EAAWtkC,IAAS2mI,EAAAA,GAAAA,IAAoB3mI,EAAMskC,UAC9C+iG,EAAY7kG,GAAgB8kG,EAAAA,EAAAA,IAAkBv/G,QAASvkB,EAEvD+jI,GADazoC,EAAAA,GAAAA,GAASuoC,IACGrnI,GAAOK,WAAWmnI,SAEjD7yD,EAAAA,GAAAA,IAAU,MACJ5sD,GAAWya,GAAiBh2B,GAC9By6H,EAAuB,CAAEhrI,OAAQ8rB,EAAM9rB,UAExC,CAACuQ,EAAWg2B,EAAeza,IAE9B,MAAM,kBACJ0xE,EAAiB,kBAAE6J,EAAiB,wBACpCqC,EAAuB,kBAAEjM,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuB+D,GAAe5hG,GAEpC0/F,GAAc7lB,EAAAA,GAAAA,IAAY,KAC9BhN,EAAgB,CACd5sE,OAAQ8rB,EAAM9rB,OACd2K,QAASmhB,EAAMxrB,GACf6rE,cAAc,EACdvqE,WAAW,EACXyqE,eAED,CAACA,EAAWvgD,EAAMxrB,GAAIwrB,EAAM9rB,SAEzB8oH,GAAkB1rC,EAAAA,GAAAA,GAAiB7e,KACvCitE,EAAAA,GAAAA,GAAoCjtE,GACpCmrC,EAAwBnrC,KAGpBktE,GAAuBruD,EAAAA,GAAAA,GAAiB7e,KAC5CklC,EAAAA,GAAAA,GAAUllC,GAEV0sE,EAAqB,CAAEjrI,SAAQ2K,QAASmhB,EAAMxrB,GAAI+sD,aAAa,IAC/D1/C,EAAiB,CACf3O,QAASm6B,EAAK,mCAEhBukE,MAGIguC,GAAqBtuD,EAAAA,GAAAA,GAAiB7e,KAC1CklC,EAAAA,GAAAA,GAAUllC,GAEV0sE,EAAqB,CAAEjrI,SAAQ2K,QAASmhB,EAAMxrB,GAAI+sD,aAAa,IAC/D1/C,EAAiB,CACf3O,QAASm6B,EAAK,uCAEhBukE,MAGIiuC,GAAqBvuD,EAAAA,GAAAA,GAAgB,KACzC8tD,EAAuB,CAAElrI,SAAQ2K,QAASmhB,EAAMxrB,KAChDo9F,MAGF,OACE1jB,EAAAA,GAAAA,IAAA,OACE2C,IAAKglB,EACL3tE,WAAW0lD,EAAAA,GAAAA,GDzHM,WCyHsB,eACvC+wB,YAAaqe,EACb3uC,QAASslB,EACT5B,cAAeJ,EAAkB7kB,SAAA,CAEhCroE,IACCypE,EAAAA,GAAAA,IAAA,QAAApB,SAAA,EACEhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC1mD,UDhIwE,WCgIzC2e,KAAK,kBACzCxZ,EAAK,mBAGT3qB,IAAYopE,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC1mD,WAAW0lD,EAAAA,GAAAA,GAAe8lB,GDpIsF,YCoI9C7sD,KAAK,cACzFpM,GAAiBhyB,QAAQuX,EAAMkB,OAAOD,cACrCitD,EAAAA,GAAAA,IAAA,QAAMhmD,WAAW0lD,EAAAA,GAAAA,GAAe8lB,GDtIyH,YCsIlF5mB,SAAA,EACrEhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,QACV7mB,EAAMkB,MAAMD,cAGhBsb,IAAYuvC,EAAAA,GAAAA,GAAA,QAAM5jD,WAAW0lD,EAAAA,GAAAA,GAAe8lB,GD3IoI,YC2I/F5mB,SAAEvwC,KACpF2xC,EAAAA,GAAAA,IAAA,OAAKhmD,UD5IiC,WC4IP4kD,SAAA,CAC5B0yD,IACC1zD,EAAAA,GAAAA,GAAA,OAAK+sB,IAAK2mC,EAAU1mC,IAAI,GAAG5wE,UD9I0B,WC8IDy1F,WAAW,IAEhEljF,IAAiBqxC,EAAAA,GAAAA,GAACg0D,GAAAA,EAAgB,CAAC9/G,MAAOA,IAC1Cw+G,IAAe1yD,EAAAA,GAAAA,GAAA,QAAM5jD,UAAU,sBAEXzsB,IAAtB8/F,IACCrtB,EAAAA,GAAAA,IAACW,GAAAA,EAAI,CACH9+B,OAAQ2hD,EACRuK,OAAQV,EACRC,kBAAmBA,EACnBC,eAAgBA,EAChBC,eAAgBA,EAChBC,UAAWA,EACXzzE,WAAW0lD,EAAAA,GAAAA,GD3J2L,WC2JxJ,sBAC9CoB,WAAS,EACTC,QAAS2iB,EACT5J,oBAAqB6J,EACrB+J,YAAU,EAAA9uB,SAAA,CAETvM,IACCuL,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CAACn7D,KAAK,UAAUo7D,QAASsxD,EAAqB7yD,SACpDz/C,EAAK,8BAGRkzC,IACAuL,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CAACn7D,KAAK,UAAUo7D,QAASuxD,EAAmB9yD,SAClDz/C,EAAK,sCAGRkzC,IAAc79D,GAAYu8H,IAC1BnzD,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CAACn7D,KAAK,MAAMo7D,QAASwxD,EAAmB/yD,SAC9Cz/C,EAAK,+BAGRkzC,GAAa79D,IACbopE,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CAACn7D,KAAK,QAAQo7D,QAASwxD,EAAmB/yD,SAChDz/C,EAAK,qCAOpB,I,8DCzLA,MC4CA,IAAei/C,EAAAA,GAAAA,IA5BSyzD,EACtBvrI,KACAuN,QACA7J,UACAm2E,cAEA,MAAMslB,GAAcriB,EAAAA,GAAAA,GAAgB,KAClCjD,IAAU75E,KAGZ,OACE05E,EAAAA,GAAAA,IAAA,OACEhmD,UD5BiB,WC6BjBmmD,QAASslB,EAAY7mB,SAAA,CAEpB50E,IACC4zE,EAAAA,GAAAA,GAACk0D,GAAAA,EAAuB,CACtB93G,UDjC+B,WCkC/BhwB,QAASA,EACT2vD,KAAM,GACNo4E,cAAY,IAGfl+H,OCyEP,IAAeuqE,EAAAA,GAAAA,IApFS4zD,EACtBvmH,QACAwmH,iBACA1wD,iBACA2wD,eACAl4G,gBAEA,MAAM2tE,GAAejlB,EAAAA,GAAAA,MACfyvD,GAAuBzvD,EAAAA,GAAAA,MACvB0vD,EAAgB3mH,EAAM5N,UAAW8jH,GAASA,EAAKr7H,KAAO2rI,IAAmB,GACxErnB,EAAUynB,IAAe9yD,EAAAA,GAAAA,IAAiB,IAC3C+yD,EAAgB/wD,EAAiB,GAEvCgxD,EAAAA,GAAAA,GAAoB5qC,GAAel8E,EAAM5lB,QAAQ,GAEjD,MAAM2sI,GAAiBpvD,EAAAA,GAAAA,GAAgB,KACrC,MAAMqvD,EAAoBN,EAAqBj4G,QACzCytD,EAAYyqD,GAAiB,GAAKK,GAAmBC,WAAWN,GAEtE,GAAIK,GAAqB9qD,GAAa8qD,EAAkBpR,YAAc,EAAG,CACvE,MAAM,WAAEsR,EAAU,YAAEtR,GAAgB15C,EAC9BirD,EAAiBH,EAAkBpR,YACnCwR,GAAQF,EAAaC,EAAiB,KAAKE,QAAQ,GACnDC,IAAUH,GAAkBD,EAAatR,IAAgBuR,EAAiB,KAAKE,QAAQ,GAG7FT,EADoB,WAAWU,QAAYF,iBAE7C,IASF,IANAn0D,EAAAA,GAAAA,IAAU,KACR8zD,KACC,CAACJ,EAAe3mH,KAEnBu2F,EAAAA,GAAAA,GAAkBmwB,EAAsBK,GAEnC/mH,EAAM5lB,OAEX,OACEm6E,EAAAA,GAAAA,IAAA,OACE2C,IAAKglB,EACL3tE,WACE0lD,EAAAA,GAAAA,GCtEoB,WDwElB,eACA1lD,EACA4wF,GC1EwE,YD4E3EhsC,SAAA,CAEAnzD,EAAM1Y,IAAK4uH,IACV/jD,EAAAA,GAAAA,GAACi0D,GAAe,CAEdvrI,GAAIq7H,EAAKr7H,GACTuN,MAAO8tH,EAAK9tH,MACZ7J,QAAS23H,EAAK33H,QACdm2E,QAAS+xD,GAJJvQ,EAAKr7H,MAQds3E,EAAAA,GAAAA,GAAA,OACE+E,IAAKwvD,EACLn4G,WAAW0lD,EAAAA,GAAAA,GC1FwC,WD4FjD,uBACC4yD,GC7FgG,YD+FnG7nC,MAAOmgB,EAAW,cAAcA,SAAar9G,EAC7C,iBAAWqxE,SAEVnzD,EAAM1Y,IAAI,CAAC4uH,EAAMt4H,KAChBu0E,EAAAA,GAAAA,GAACi0D,GAAe,CAEdvrI,GAAIq7H,EAAKr7H,GACTuN,MAAO8tH,EAAK9tH,MACZ7J,QAAS23H,EAAK33H,QACdm2E,QAAS+xD,GAJJvQ,EAAKr7H,YExBtB,IAAe83E,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GAAUgC,aACT,MAAM,oBAAEgtI,GAAwBhvI,EAC1BgoD,EAAcgnF,GAAqB1/E,WAAWttD,GAGpD,MAAO,CACLgmD,cACAtB,oBAJyBT,EAAAA,EAAAA,KAA8BjmD,EAAQgC,GAK/Du7E,gBAAgBzoC,EAAAA,GAAAA,GAAqB90C,GAAQu9E,iBAT/BN,CAhDWgyD,EAC7BjtI,SACAg0B,YACAgyB,cACAtB,qBACA62B,qBAEA,MAAM,6BAAE2xD,EAA4B,4BAAEC,IAAgClvH,EAAAA,EAAAA,MAChEkb,GAAOs/C,EAAAA,GAAAA,KAEP20D,GAAmBhwD,EAAAA,GAAAA,GAAiBj4D,IACxC,GAAe,QAAXA,EACFgoH,EAA4B,CAAEntI,eACzB,CACL,MAAMskD,EAAez7C,OAAOsc,GAC5B+nH,EAA6B,CAAEltI,SAAQskD,gBACzC,IAGF,IAAK0B,GAAsC,IAAvBA,EAAYnmD,OAC9B,OAGF,MAAM4lB,GAAmBs0D,EAAAA,GAAAA,IAAQ,IAAM,CACrC,CACEz5E,GAAI,MACJuN,MAAOsrB,EAAK,wBAEX6sB,EAAYj5C,IAAKsgI,IAAU,CAC5B/sI,GAAIwJ,OAAOujI,EAAW/oF,cACtBz2C,MAAOw/H,EAAWx/H,MAClB7J,QAASqpI,EAAWtuH,SAErB,CAACinC,EAAa7sB,IAEX8yG,EAAiBvnF,EAAqB56C,OAAO46C,GAAsB,MAEzE,OACEkzB,EAAAA,GAAAA,GAACo0D,GAAe,CACdvmH,MAAOA,EACPwmH,eAAgBA,EAChB1wD,eAAgBA,EAChB2wD,aAAckB,EACdp5G,WAAW0lD,EAAAA,GAAAA,GCvES,WDuEsB1lD,QEKhD,IAAeokD,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GAAUgC,aACT,MAAM,QAAEmsD,GAAYnuD,EACdsyD,EAASnE,GAASoE,iBAAiBvwD,GAGzC,MAAO,CACLswD,SACArC,iBAJsBC,EAAAA,GAAAA,IAAgClwD,GAKtDu9E,gBAAgBzoC,EAAAA,GAAAA,GAAqB90C,GAAQu9E,iBAT/BN,CA/CGqyD,EACrBttI,SACAg0B,YACAs8B,SACArC,kBACAstB,qBAEA,MAAM,iBAAEgyD,EAAgB,wBAAEC,IAA4BvvH,EAAAA,EAAAA,MAChDkb,GAAOs/C,EAAAA,GAAAA,KAEP20D,GAAmBhwD,EAAAA,GAAAA,GAAiBj4D,IACxC,GAAe,QAAXA,EACFqoH,QACK,CACL,MAAMn/E,EAAUxlD,OAAOsc,GACvBooH,EAAiB,CAAEvtI,SAAQquD,WAC7B,IAGF,IAAKiC,GAAQzwD,OACX,OAGF,MAAM4lB,GAAmBs0D,EAAAA,GAAAA,IAAQ,IAAM,CACrC,CACEz5E,GAAI,MACJuN,MAAOsrB,EAAK,0BAEXm3B,EAAOvjD,IAAK2jG,IAAK,CAClBpwG,GAAIwJ,OAAO4mG,EAAMriD,SACjBxgD,MAAO6iG,EAAM7iG,UAEd,CAACyiD,EAAQn3B,IAEN8yG,EAAiBh+E,EAAkBnkD,OAAOmkD,GAAmB,MAEnE,OACE2pB,EAAAA,GAAAA,GAACo0D,GAAe,CACdvmH,MAAOA,EACPwmH,eAAgBA,EAChB1wD,eAAgBA,EAChB2wD,aAAckB,EACdp5G,WAAW0lD,EAAAA,GAAAA,GCvES,WDuEsB1lD,QEqH1Cy5G,GAAmB,CACvB,CAAErtI,KAAM,QAASwN,IAAK,mBACtB,CAAExN,KAAM,YAAawN,IAAK,mBAC1B,CAAExN,KAAM,QAASwN,IAAK,mBACtB,CAAExN,KAAM,QAASwN,IAAK,oBAg9BxB,IAAewqE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GACCoB,SAAQyG,WAAUqjF,eAElB,MAAMp2E,GAAOC,EAAAA,EAAAA,KAAW/U,EAAQoB,GAC1BgC,GAAOoE,EAAAA,EAAAA,KAAWxH,EAAQoB,GAC1B+f,GAAeC,EAAAA,EAAAA,KAAmBphB,EAAQoB,GAC1CkoC,GAAe3uB,EAAAA,EAAAA,KAAmB3a,EAAQoB,GAC1CiQ,GAAexH,EAAAA,EAAAA,KAAmB7J,EAAQoB,IAE1C,eAAEm8E,EAAc,qBAAEmyD,IAAyB56F,EAAAA,GAAAA,GAAqB90C,IAE9D88B,YAAa6yG,EAAe,cAAEh3G,IAAkBgD,EAAAA,EAAAA,KAA+B37B,IAAW,CAAC,GAC7F,SAAE64B,GAAcF,GAAiBg3G,GAAmBh3G,EAAcg3G,IAAqB,CAAC,EAExFC,EAAcr5H,QAAQnT,GAAMiG,SAAWxB,GAAYA,IAAaD,EAAAA,KAE9DqB,KAAMy8H,EAAWl+F,aAAc7M,GAAqB36B,EAAOwkC,OAC3Dv7B,KAAM4mI,GAAc7vI,EAAOgJ,MAE7B0P,GAAgB/M,EAAAA,EAAAA,IAAiBvK,EAAQyG,EAAU7H,EAAOiC,eAE1DuqD,EAAUppD,IAAQw0B,EAAAA,EAAAA,IAAYx0B,GAC9Bg7F,EAAYh7F,IAAQqgB,EAAAA,EAAAA,IAAcrgB,GAClCg2G,EAAQtkG,IAAQgR,EAAAA,EAAAA,IAAUhR,GAC1Bg7H,GAAiBF,IAAgBl3H,IACjC8zC,GAAY4xC,IAAa2xC,EAAAA,EAAAA,IAAY3sI,MAAYA,GAAM+e,YACvD4wD,EAAU5xD,GAAc4xD,QACxBM,EAAmBlyD,GAAckyD,iBACjC28D,EAAmBF,GAAiB1sI,IACpCA,EAAK6sI,aAAgB9uH,IAAiBA,EAAa+uH,gBACnDC,EAAgBL,GAAiB1sI,KACjCw0H,EAAAA,EAAAA,IAAiBx0H,EAAM,iBAAoBg7F,KAAcu5B,EAAAA,EAAAA,IAAkBv0H,EAAM,gBAChFA,EAAK+1G,WACNi3B,EAAmBN,GAAiB1sI,KAASw0H,EAAAA,EAAAA,IAAiBx0H,EAAM,aAAeA,EAAK+1G,WACxFjP,GAAkBC,EAAAA,EAAAA,KAAsBnqG,IACxC,kBAAEqwI,IAAsBC,EAAAA,EAAAA,KAAwBtwI,EAAQoB,IAAW,CAAC,GACpE,eAAEmvI,IAAmBC,EAAAA,EAAAA,KAAqBxwI,EAAQoB,IAAW,CAAC,EAC9D8U,GAAuBC,EAAAA,EAAAA,KAA2BnW,GAElDqa,EAAOvF,GAAQ1R,EACfmmC,EAAeD,GAAgBnoB,EAE/BsvH,EAAoB37H,IAASA,EAAKszB,UAAWtiB,EAAAA,EAAAA,IAAUhR,KAAU4D,GAClEnC,QAAQ+yB,GAAcg9D,kBACrBj+D,GAAcC,EAAAA,EAAAA,KAAsBtoC,EAAQoB,GAE5CsvI,EAAqBpnG,GAAc2qC,SAAS08D,gBAC5CC,EAAkB5wI,EAAOwkC,MAAMuO,oBAAoB3xC,GAEnDyvI,EAAgBx2H,IAASvF,GAAMszB,SAAY/tB,EAAKs2D,kBAAoBpnC,GAAcunG,oBAClFp4H,EACA81C,EAAcqiF,GAAgB7hF,EAAAA,EAAAA,KAAkBhvD,EAAQqa,EAAK/X,SAAMiH,EACnE0E,GAAW/N,EAAAA,EAAAA,KAAeF,IAC1B,eAAE8zD,EAAc,sBAAEF,EAAqB,WAAE3M,GAAeh5C,EACxDukD,GAAuBtC,EAAAA,GAAAA,IAAgClwD,GACvDotD,EAAoC,QAAzBoF,EACbhE,GAAa4B,eAAeoC,IAAuBxoD,IACnDwkD,GAAa+B,WACXwgF,EAAiBviF,GAAa19C,UAC9BkgI,EAAaxiF,GAAavlD,KAC1BgoI,EAAkBziF,GAAaiC,WAE/BygF,EAAc36H,QAAQgzB,GAAc4nG,iBAAmBz4H,EACvDguC,GAAqBT,EAAAA,GAAAA,IAA8BjmD,EAAQoB,GAC3DgwI,GAAYnqF,EAAWC,oBAAoB9lD,KAAUslD,GAErD2qF,GAAcrxI,EAAOmuD,QAAQoE,iBAAiBnxD,GAC9CkwI,GAAkBtxI,EAAOgvI,qBAAqB1/E,WAAWluD,GAEzDmwI,IAAmB94B,EAAAA,EAAAA,KAAuBz4G,EAAQoB,GAClDua,GAAevY,IAAQwY,EAAAA,EAAAA,KAAuB5b,EAAQoD,EAAKd,IAC3DkvI,GAAYj7H,QAAQ8D,GAAM8sB,eAEhC,MAAO,CACLsI,OAAOm4C,EAAAA,EAAAA,KAAY5nF,GACnBo+F,YACAgb,QACA/nG,eACAwnB,WACA82G,kBACAc,oBACAI,gBACAf,gBACAY,qBACAV,mBACAG,gBACAC,mBACAnuI,cAAejC,EAAOiC,cACtBsqH,oBAAoBrzD,EAAAA,EAAAA,KAAyBl5D,EAAQkrF,GACrDvvE,gBACAuuF,kBACAw7B,YACA/qG,mBACAk1G,YACAziF,WACA8jF,cACA3yF,MAAO6yF,IAAW7yF,MAClB8yF,eACAC,mBACAP,iBACAE,kBACAD,aACAx+E,uBACA9L,qBACA+qF,YAAaxqF,EAAWnlD,OACxB83G,gBAAiBx2G,GAAMkpI,YACvBx4E,iBACAF,wBACA2pB,iBACAmyD,uBACAgC,gBAAiBrB,EACjBsB,YAAapB,EACbK,kBACA16H,uBACA05H,cACAl3H,gBACA2kB,SAAUr9B,EAAOq9B,SACjBu0G,mBAAmB/7G,EAAAA,GAAAA,GAAmB71B,EAAQ,uBAC9C+yE,QAAS+8D,EAAgB/8D,OAAUxpE,EACnC8pE,iBAAkBy8D,EAAgBz8D,OAAmB9pE,EACrDsoI,cAAexpG,GAAar+B,IAC5BunI,oBACAC,eA3Hcv0D,CA18BuB60D,EACzC1wI,SACA2+D,WACAl4D,WACAkqI,eACAtiG,QACA8hG,mBACAnzC,YACAgb,QACAn3G,gBACAoP,eACAwnB,WACAu0B,WACA2jF,iBACAE,kBACAD,aACAx+E,uBACA9L,qBACA+qF,cACA9B,kBACAc,oBACAI,gBACAf,gBACAY,qBACAQ,cACA3yF,QACA8yF,cACAC,kBACAV,kBACAZ,mBACAG,gBACAC,mBACAyB,gBACA9+D,UACAM,mBACAqyD,YACA/qG,mBACAk1G,YACAtjB,qBACA5wG,eACAuuF,kBACA0P,kBACA9lD,iBACAypB,iBACAmyD,uBACAgC,kBACAC,cACAz7H,wBACA07H,qBACAhC,eACAl3H,iBACAk7C,yBACAv2B,YACAm0G,aACAQ,4BAEA,MAAM,yBACJC,GAAwB,gBACxBC,GAAe,gBACf5tC,GAAe,SACfjgF,GAAQ,0BACR8tH,GAAyB,gBACzBxpE,GAAe,gBACfG,GAAe,aACf/7D,GAAY,6BACZqlI,GAA4B,uBAC5B3/E,GAAsB,mBACtB4/E,GAAkB,iBAClBzoH,GAAgB,2BAChB0oH,GAA0B,uBAC1BC,GAAsB,kBACtBC,GAAiB,mBACjB7rF,GAAkB,uBAClB8rF,GAAsB,wBACtBC,GAAuB,gBACvBC,GAAe,wBACfnD,KACEvvH,EAAAA,EAAAA,MAEE0jF,IAAejlB,EAAAA,GAAAA,MACfD,IAAgBC,EAAAA,GAAAA,MAEhBqP,IAAUvS,EAAAA,GAAAA,KACVrgD,IAAOs/C,EAAAA,GAAAA,MAENm4D,GAAgBC,KAAqBt3D,EAAAA,GAAAA,OACrCu3D,GAAyBC,GAAsBC,KAAyBroD,EAAAA,GAAAA,KAEzEsoD,GAAYv6H,GAAgB5M,OAAOjE,GAAYzG,EAC/C6/D,GAAkBgyE,KAAchxI,IAAkByW,IACjDw6H,GAAmBC,GAAeC,KAAmBzoD,EAAAA,GAAAA,MAErD0oD,GAAyBC,KAA8B/3D,EAAAA,GAAAA,IAAS,GAEjEmI,IAAO3H,EAAAA,GAAAA,IAAQ,KACnB,MAAMn9D,EAAkB,GA4CxB,OA3CIqiD,KAAoBvoD,IACtBkG,EAAIlT,KAAK,CAAEtJ,KAAM,UAAWwN,IAAK,2BAG/BihI,GACFjyH,EAAIlT,KAAK,CAAEtJ,KAAM,UAAWwN,IAAK,sBAG/BihI,GAAiB5vE,IACnBriD,EAAIlT,KAAK,CAAEtJ,KAAM,iBAAkBwN,IAAK,6BAGtCshI,GACFtyH,EAAIlT,KAAK,CAAEtJ,KAAM,QAASwN,IAAK,oBAG7BkgI,GACFlxH,EAAIlT,KAAK,CAAEtJ,KAAM,UAAWwN,IAAKwuF,EAAY,wBAA0B,sBAGrEsyC,GACF9xH,EAAIlT,KAAK,CAAEtJ,KAAM,eAAgBwN,IAAK,yBAGxCgP,EAAIlT,QAAQ+jI,IAGPG,IACHhxH,EAAIlT,KAAK,CAAEtJ,KAAM,QAASwN,IAAK,oBAG7B6gI,GACF7xH,EAAIlT,KAAK,CAAEtJ,KAAM,cAAewN,IAAK,2BAGnCwuF,GAAaszC,GAAiB7vI,QAChC+c,EAAIlT,KAAK,CAAEtJ,KAAM,kBAAmBwN,IAAK,8BAGvCwpG,GAASu4B,GAAa9vI,QACxB+c,EAAIlT,KAAK,CAAEtJ,KAAM,cAAewN,IAAK,0BAGhCgP,EAAI7P,IAAKwkI,IAAG,CACjBnxI,KAAMmxI,EAAInxI,KACVyN,MAAOsrB,GAAKo4G,EAAI3jI,SAEjB,CACDqxD,GAAiBvoD,GAAem4H,EAAeK,EAAapB,EAAeY,EAAoBd,GAC/Fa,EAAmBryC,EAAWgb,EAAOs4B,GAAiB7vI,OAAQ8vI,GAAa9vI,OAAQs5B,KAG/Eq4G,IAAaz3D,EAAAA,GAAAA,IAAQ,KACzB,IAAKjoB,EACH,OAAO,EAGT,MAAMl6C,EAAQ8pE,GAAK7pE,UAAU,EAAGzX,UAAWA,IAAS0xD,GACpD,OAAkB,IAAXl6C,EAAe,EAAIA,GACzB,CAACk6C,EAAgB4vB,MAEb+vD,GAAuBC,GAA+BC,KAAwBhpD,EAAAA,GAAAA,IAAQ,IAEtFhH,GAAWiwD,KAAgBr4D,EAAAA,GAAAA,IAASi4D,KAE3C94D,EAAAA,GAAAA,IAAU,KACR,IAAK5mB,EAAgB,OACrB,MAAMl6C,EAAQ8pE,GAAK7pE,UAAU,EAAGzX,UAAWA,IAAS0xD,IAErC,IAAXl6C,GACJg6H,GAAah6H,IACZ,CAACk6C,EAAgB4vB,KAEpB,MAAMvB,IAAkBvG,EAAAA,GAAAA,IAAahiE,IACnC85H,KACAE,GAAah6H,IACZ,KAEH8gE,EAAAA,GAAAA,IAAU,KACJg2D,IAAuBE,GACzB4B,GAAkB,CAAE1hH,MAAO1vB,KAE5B,CAACA,EAAQwvI,EAAiBF,KAE7Bh2D,EAAAA,GAAAA,IAAU,KACJ0jB,IAAcszC,GAAmBr0G,IACnCi1G,GAA2B,CAAElxI,YAE9B,CAACA,EAAQg9F,EAAWszC,EAAiBr0G,MAExCq9C,EAAAA,GAAAA,IAAU,KACJ0+B,IAAUu4B,GAAet0G,IAC3Bk1G,GAAuB,CAAE9wH,OAAQrgB,KAElC,CAACA,EAAQg4G,EAAOu4B,EAAat0G,MAEhCq9C,EAAAA,GAAAA,IAAU,KACR80D,MACC,CAACpuI,KAEJs8F,EAAAA,GAAAA,GAAc,KACZq1C,MACC,CAACtB,KAEJ/zC,EAAAA,GAAAA,GAAc,KACZs1C,MACC,CAACz0F,KAEJm8B,EAAAA,GAAAA,IAAU,KACJw2D,GAAe7zG,KACjBq1G,GAAwB,CAAE1wI,OAAQZ,IAClCuxI,GAAgB,CAAE3wI,OAAQZ,MAE3B,CAACA,EAAQ8vI,EAAa7zG,KAEzB,MAAOw2G,GAAgBC,KAAqBv4D,EAAAA,GAAAA,IAASh9B,IAC/C,oBAAEw1F,KAAwBC,EAAAA,GAAAA,MAC1B,eAAEC,KAAmBC,EAAAA,GAAAA,KAErBC,IAAUp4D,EAAAA,GAAAA,IAAQ,IAAM83D,IAAgB9kI,IAAKuqC,IAAS86F,EAAAA,GAAAA,GAAgB96F,IAAQ,CAACu6F,KAE/EQ,GAAqB1wD,GAAYD,GAAK7hF,OAAS,EAAI6hF,GAAK7hF,OAAS,EAAI8hF,GACrEklD,GAAUnlD,GAAK2wD,IAAoBjyI,KACnCkyI,IAAwB14D,EAAAA,GAAAA,IAAY,KACxC0oB,GAAgB,CAAE7iF,OAAQrgB,KACzB,CAACA,IACEmzI,IAAwB34D,EAAAA,GAAAA,IAAY,EAAG/jE,eAC3C46C,GAAuB,CAAEzwD,OAAQZ,EAAQyW,cACxC,CAACzW,IACEozI,IAA2B54D,EAAAA,GAAAA,IAAY,EAAG/jE,eAC9Cw6H,GAAmB,CAAErwI,OAAQZ,EAAQyW,cACpC,CAACzW,IACEqzI,IAAkB74D,EAAAA,GAAAA,IAAY,KAClCj1B,GAAmB,CAAE3kD,OAAQZ,KAC5B,CAACA,IAEEszI,IAAwB94D,EAAAA,GAAAA,IAAY,KACxCs2D,GAAgB,CAAE9wI,YACjB,CAACA,EAAQ8wI,MAEZ1mD,EAAAA,GAAAA,GAAsB,EAAEmpD,MACtB,IAAIrxI,EAAAA,EAAAA,GAAai7C,EAAOo2F,GACtB,OAGF,IAAKp2F,IAAUo2F,IAAc7B,GAE3B,YADAgB,GAAkBv1F,GAIpB,MAAMq2F,EAAcD,EAAU5lI,IAAKuqC,IAAS86F,EAAAA,GAAAA,GAAgB96F,IACtDu7F,EAAat2F,EAAMxvC,IAAKuqC,IAAS86F,EAAAA,GAAAA,GAAgB96F,IAC/Bs7F,EAAYjjI,KAAK,CAACrP,EAAIsX,IAAUtX,IAAOuyI,EAAWj7H,IAGxEm6H,GAAoB/L,GAAmB,KACrC8L,GAAkBv1F,KAGpBu1F,GAAkBv1F,IAEnB,CAACA,EAAOw1F,GAAqBjB,KAEhC,MAAOgC,GAAYj5H,GAAaytH,GAASyL,Id5b5B,UAA+B,gBAC5C7C,EAAe,gBACf5tC,EAAe,eACf0wC,EAAc,YACdC,EAAW,mBACX5C,EAAkB,cAClB6C,EAAa,QACbrM,EAAO,gBACP8G,EAAe,iBACfwF,EAAgB,cAChBtD,EAAa,UACbnM,EAAS,iBACT/qG,EAAgB,UAChBk1G,EAAS,aACT39H,EAAY,SACZ2mB,EAAQ,SACRhxB,EAAQ,SACRulD,EAAQ,QACR+mF,EAAO,eACPpD,EAAc,gBACdE,EAAe,gBACfS,EAAe,YACfC,IAyBA,MAAMmD,EAAyB,YAAZjM,GAA0B8G,EAA4BA,EAAV9G,EAEzDvD,GAAYvpD,EAAAA,GAAAA,IAAQ,KACxB,GAAKo5D,GAAqBzP,GAAc/qG,EAIxC,OAAOy6G,EAAAA,EAAAA,IACLD,EAAiBpmI,IAAI,EAAG0S,YAAaA,GACrCikH,EACA/qG,IAED,CAACw6G,EAAkBzP,EAAW/qG,IAE3B6N,GAAUuzC,EAAAA,GAAAA,IAAQ,KACtB,GAAK81D,GAAkBhC,EAIvB,OAAOjK,EAAAA,GAAAA,GAAYiM,GAAe,IACjC,CAAChC,EAAWgC,KAERwD,EAAmBC,EAAgBC,GAA2BnM,GACnE8I,EAAiB5M,IAGZkQ,EAAkBC,EAAcC,GAAyBjM,GAC9D,QAASqL,EAAYE,EAAgB9iI,EAAc2mB,EAAUhxB,IAGxD8tI,EAAqBC,EAAkBC,GAA6BpM,GACzE,YAAaqL,EAAYE,EAAgB9iI,EAAc2mB,EAAUhxB,IAG5DiuI,EAAiBC,EAAcC,GAAyBvM,GAC7D,QAASqL,EAAYE,EAAgB9iI,EAAc2mB,EAAUhxB,IAGxDouI,EAAkBC,EAAcC,GAAyB1M,GAC9D,QAASqL,EAAYE,EAAgB9iI,EAAc2mB,EAAUhxB,IAGxDuuI,EAAkBC,EAAeC,GAA0B7M,GAChE,QAASqL,EAAYE,EAAgB9iI,EAAc2mB,EAAUhxB,IAGxD0uI,EAAuBC,EAAoBC,GAA+BrN,GAC/E9kC,EAAiB97D,GAGbkuG,GAAiB36D,EAAAA,GAAAA,IAAQ,KAC7B,IAAK3uB,GAAUvrD,OAAQ,OAAOurD,EAC9B,MAAMupF,EAAoB,IAAIzsI,IAAI6mI,GAClC,OAAO3jF,EAAS91C,QAAQzS,KAAK,CAACC,EAAGC,KAC/B,MAAM6xI,EAAYD,EAAkBhsI,IAAI7F,GAClC+xI,EAAYF,EAAkBhsI,IAAI5F,GACxC,OAAI6xI,IAAcC,GAAmB,GAChCD,GAAaC,EAAkB,EAC7B9xI,EAAID,KAEZ,CAACsoD,EAAU2jF,KAEP+F,EAAkBC,EAAgBC,GAA2B5N,GAClE6L,EAAayB,IAIbO,EACAC,EACAC,GACE/N,GACFiJ,EAAoBpB,GAGtB,IAAIp1H,GACAytH,GACAyL,IAAgB,EAEpB,OAAQD,GACN,IAAK,UACHj5H,GAAcw5H,EACd/L,GAAUgM,EACVP,GAAgBQ,EAChB,MACF,IAAK,cACH15H,GAAc06H,EACdjN,GAAUkN,EACVzB,GAAgB0B,EAChB,MACF,IAAK,QACH56H,GAAc25H,EACdlM,GAAUmM,EACVV,GAAgBW,EAChB,MACF,IAAK,YACH75H,GAAc85H,EACdrM,GAAUsM,EACVb,GAAgBc,EAChB,MACF,IAAK,QACHh6H,GAAci6H,EACdxM,GAAUyM,EACVhB,GAAgBiB,EAChB,MACF,IAAK,QACHn6H,GAAco6H,EACd3M,GAAU4M,EACVnB,GAAgBoB,EAChB,MACF,IAAK,QACHt6H,GAAcu6H,EACd9M,GAAU+M,EACVtB,GAAgBuB,EAChB,MACF,IAAK,UACHz6H,GAAci7H,EACdxN,GAAUyN,EACVhC,GAAgBiC,EAChB,MACF,IAAK,iBACHn7H,GAAco7H,EACd3N,GAAU4N,EACVnC,GAAgBoC,EAChB,MACF,IAAK,kBACHt7H,GAAc61H,EACd,MACF,IAAK,cACH71H,GAAc81H,EACd,MACF,IAAK,QACH91H,GAAcs4H,EACd7K,GAAU4L,EACV,MACF,IAAK,UACHH,IAAgB,EAIpB,MAAO,CAACD,EAAYj5H,GAAaytH,GAASyL,GAC5C,CciQ4DqC,CAAsB,CAC9ElF,gBAAiBwC,GACjBM,eAAgB7C,GAChB8C,YAAaV,GACblC,mBAAoBmC,GACpBU,cAAeT,GACfnwC,gBAAiBgwC,GACjBzL,WACA8G,kBACAwF,iBAAkBpiE,EAClB8+D,gBACAnM,YACA/qG,mBACAk1G,YACA39H,aAAcb,EACdwnB,WACAhxB,WACAulD,WACA+mF,WACApD,iBACAE,kBACAS,kBACAC,gBAGI0F,GAAcp2E,IAAkC,YAAf6zE,IACjCjE,GAAgC,YAAfiE,IACH,YAAfA,KACEhF,GAAgC,UAAfgF,GAClB/wD,GAAYL,GAAK7pE,UAAU,EAAGzX,UAAWA,IAAS0yI,KAEjDwC,GAAyBC,GAA2BC,KAA+B7sD,EAAAA,GAAAA,IAAQ,IAC3F8sD,GAAqBC,GAAuBC,KAAqBhtD,EAAAA,GAAAA,IAAQ,GAE1EitD,GAAsBtG,GAAmBA,EAAgBzvI,OAAS,EAClEg2I,GAAiBxG,GAAeA,EAAYxvI,OAAS,EAGrDi2I,GAF+B,UAAfhD,IAE2B8C,IADV,YAAf9C,IACqE+C,IAE7Fn9D,EAAAA,GAAAA,IAAU,KACJk9D,GACFzsI,WAAW,KACTosI,MA3dyB,KA8d3BC,KAGEK,GACF1sI,WAAW,KACTusI,MAneyB,KAse3BC,MAED,CAACC,GAAqBC,GAAgBN,GAA2BG,MAEpEK,EAAAA,GAAAA,GAAqC,YAAfjD,GAA2Bj5H,QAA0BtS,GAE3E,MAAMyuI,IAA6B54D,EAAAA,GAAAA,GAAgB,KACjDu0D,OAGIsE,IAAsB74D,EAAAA,GAAAA,GAAgB,KACtC8zD,IACJa,GAAoBjM,GAA0B,KAC5CqL,SAIE+E,IAAwB94D,EAAAA,GAAAA,GAAgB,KACvC8zD,IACLa,GAAoBhM,GAA4B,KAC9CqL,UAIE,aAAE71B,IftgBK,UAAyB,aACtC5Z,EAAY,QACZklC,EAAO,aACPkJ,EAAY,qBACZC,EAAoB,sBACpBp+E,GAAwB,EAAK,sBAC7B6/E,GAAwB,EAAK,2BAC7BuE,KAWAxsD,EAAAA,GAAAA,GAAsB,EAAE2sD,MACtB,GAAKA,GAAeA,IAAgBtP,GAAW4K,GAA2B5K,GAAWj1E,EAAwB,CAC3G,MAAMytC,EAAYsC,EAAaztE,QACzBkiH,EAAS/2C,EAAUnoB,cAA8B,YACvD8+D,IACI32C,EAAU6P,UAAYknC,EAAOhnC,YAC/B4gC,EAAqBpJ,GAAoBC,IACzCF,IAA8B,GAC9BvnC,EAAAA,GAAAA,IAAc,CACZC,YACAC,QAAS82C,EACT9jF,SAAU,QACVmrD,cArCkB,MAuCpBt0G,WAAW,KACTw9H,IAA8B,GAvCD,KA0CnC,GACC,CACDE,EAASmJ,EAAsBruC,EAAc/vC,EAC7C6/E,EAAuBuE,KAIzBxsD,EAAAA,GAAAA,GAAsB,EAAE6sD,MACtB,GAAItG,IAAiBjJ,EAAAA,GAAagJ,SAAWC,IAAiBsG,EAC5D,OAGF,MAAMh3C,EAAYsC,EAAaztE,QAC/B,IAAKmrE,EACH,OAGF,MAAMi3C,EAAYj3C,EAAUnoB,cAA8B,aACrDo/D,GAAaA,EAAUlnC,UAAY/P,EAAU6P,YAIlDy3B,IAA8B,GAE9BvnC,EAAAA,GAAAA,IAAc,CACZC,YACAC,QAASD,EAAUid,kBACnBhqD,SAAU,QACVikF,YAAsC,EAAzBl3C,EAAU2P,eAGzB7lG,WAAW,KACTw9H,IAA8B,GA1EG,OA4ElC,CAACoJ,EAAcpuC,IAElB,MAAM60C,GAAwBp5D,EAAAA,GAAAA,GAAgB,KAC5C,MAAMiiB,EAAYsC,EAAaztE,QAC/B,IAAKmrE,EACH,OAGF,MAAMi3C,EAAYj3C,EAAUnoB,cAA8B,YAC1D,IAAKo/D,EACH,OAGF,IAAI9lG,EAAsBs2F,EAAAA,GAAagJ,QACnCnxI,KAAKo/G,KAAK1e,EAAU6P,YAAconC,EAAUlnC,YAC9C5+D,EAAQo2F,GAAoBC,IAG1Br2F,IAAUu/F,GACZC,EAAqBx/F,KAsBzB,OAjBAkoC,EAAAA,GAAAA,IAAU,KACJiuD,IAIJ6P,KACC,CAACA,EAAuB3P,IAWpB,CAAEtrB,cARYn+B,EAAAA,GAAAA,GAAgB,KAC/BupD,IAIJD,GAAsB8P,KAI1B,CesZ2BC,CAAgB,CACvC90C,gBACAklC,QAASiM,GACT/C,eACAn+E,yBACA6/E,yBACAzB,wBACAgG,iCAGI,mBAAEU,GAAkB,qBAAEC,IC3hBf,SACbh1C,EACAi1C,EAAuB,uCAgDvB,OA7CAl+D,EAAAA,GAAAA,IAAU,KACR,SAASm+D,IACP,MAAMx3C,EAAYsC,EAAaztE,QACzB4iH,EAAez3C,EAAUnoB,cAA8B0/D,GACvDR,EAAS/2C,EAAUnoB,cAA8B,YACvD,GAAI4/D,GAAgBV,EAAQ,CAC1B,MAAMW,EAAY13C,EAAUkd,aAAe65B,EAAOpnC,cAElD0L,EAAAA,GAAAA,IAAgB,KACdo8B,EAAaryC,MAAMuyC,UAAY,GAAGD,OAEtC,CACF,CAMA,OAJAF,IAEA7sH,OAAOk3D,iBAAiB,SAAU21D,GAAc,GAEzC,KACL7sH,OAAOm3D,oBAAoB,SAAU01D,GAAc,KAEpD,CAACl1C,EAAci1C,IAwBX,CAAEF,oBArBkBt5D,EAAAA,GAAAA,GAAgB,MAEzC2yB,EAAAA,GAAAA,IAAe,KACb,MAAM1Q,EAAYsC,EAAaztE,QAC/B,GAAkC,WAA9BmrE,EAAUoF,MAAMwyC,UAAwB,OAE5C,MAAMC,EAAiB73C,EAAUg8B,YAAch8B,EAAU83C,aAEzDz8B,EAAAA,GAAAA,IAAgB,KACdrb,EAAUoF,MAAMwyC,UAAY,SAC5B53C,EAAUoF,MAAM2yC,aAAe,GAAGF,YAWXP,sBANAv5D,EAAAA,GAAAA,GAAgB,KAC3C,MAAMiiB,EAAYsC,EAAaztE,QAC/BmrE,EAAUoF,MAAMwyC,UAAY,SAC5B53C,EAAUoF,MAAM2yC,aAAe,MAInC,CDweuDC,CAAmB11C,KAEjE21C,GAAaC,IEliBCC,MACrB,MAAOF,EAAaG,IAAkBl+D,EAAAA,GAAAA,IAAS,GAM/C,MAAO,CAAC+9D,GAJkB19D,EAAAA,GAAAA,IAAY,KACpC69D,EAAgBvjH,GAAYA,EAAU,IACrC,MF6hBqCsjH,IAEhCpuC,QAASsuC,KAAgCpuC,EAAAA,GAAAA,IAAwB,CACvEC,QAAS5H,GACT+L,WAnW0B,MAsWtBiqC,IAAuBv6D,EAAAA,GAAAA,GAAgB,KAC3Cu5D,KACAY,OAGIK,IAA4Bx6D,EAAAA,GAAAA,GAAgB,KAChDgzD,GAA6B,CAAEj+E,uBAAwB4wE,EAAAA,GAAuB5lG,gBAIhFu7C,EAAAA,GAAAA,IAAU,KACRu3D,GAAyB,CAAE1+H,UAAWs1H,MACrC,CAACoJ,GAA0BpJ,GAAShhI,IAEvC,MAAMgyI,IAAoBz6D,EAAAA,GAAAA,GAAiBl4E,IACzCyhE,GAAgB,CACdvnE,OAAQ6xI,GACRprI,SAAUD,EAAAA,GACVV,YACAwxD,OAAQkQ,EAAAA,GAAkBugE,gBAIxB2Q,IAA2B16D,EAAAA,GAAAA,GAAiBxlE,IAChD+uD,GAAgB,CACdN,gBAAiBuoE,GAAiBr5G,QAASomG,GAASA,GAAM/3H,QAAQE,OAC7D63H,GAAM/3H,QAAQG,OAAOjE,OAAOyU,SACjCmiD,OAAQkQ,EAAAA,GAAkBwjE,aAC1BnkE,WAAYruD,MAIVmgI,IAAkB36D,EAAAA,GAAAA,GAAiBl4E,IACvC4hE,GAAgB,CAAE1nE,OAAQ6xI,GAAW/rI,gBAGjC8yI,IAAoB56D,EAAAA,GAAAA,GAAiB98E,IACzC+hB,GAAS,CAAE/hB,SAGP23I,IAAqB76D,EAAAA,GAAAA,GAAiBp+E,IAC1C+L,GAAa,CAAE3L,OAAQJ,EAAQI,OAAQ8F,UAAWlG,EAAQsB,OAGtD43I,IAAgC96D,EAAAA,GAAAA,GAAgB,KACpDyzD,QAAkBtpI,MAGpBiiF,EAAAA,GAAAA,GAAsB,EAAE2uD,MACtB,QAA0B5wI,IAAtB4wI,GAAiD,IAAdx2D,IAAmBw2D,IAAsBrK,EAC9E,OAGF,MAAMsK,EAAez2D,IAAamsD,EAAgB,GAAK,GAEvD8D,GAAajzI,KAAKC,IAAIw5I,EAAc12D,GAAK7hF,OAAS,KACjD,CAACiuI,EAAensD,GAAWD,KAE9B,MAAM22D,IAAyBj7D,EAAAA,GAAAA,GAAgB,KAC7CqzD,GAAuB,CAAEzwI,OAAQZ,MA4BnC,IAAIk5I,IhBlmBS,SACb32C,EACA42C,EACA5sD,EACA/I,GAEA,MAAO41D,EAAUC,IAAY58B,EAAAA,GAAAA,IAAiB,UACxC68B,GAAkBh8D,EAAAA,GAAAA,IAA4B,IAAKypD,KACnDwS,GAAuBj8D,EAAAA,GAAAA,MACvBk8D,GAAiBl8D,EAAAA,GAAAA,MAEjBm8D,GAAoBz7D,EAAAA,GAAAA,GAAgB,KACxCzwD,aAAagsH,EAAqBzkH,SAClCukH,EAAS,cACTF,QAGIO,GAAe17D,EAAAA,GAAAA,GAAgB,KACnCq7D,EAAS,aACTE,EAAqBzkH,QAAUlK,OAAO7gB,WAAW,KAC/CsvI,EAAS,WA/Ba,KAiCxB9sD,QAGIotD,GAA4B37D,EAAAA,GAAAA,GAAiBqpD,IACjD95G,aAAa+rH,EAAgBxkH,QAAQuyG,SACrCiS,EAAgBxkH,QAAQuyG,QAAUz8G,OAAO7gB,WAAW,KAClDuvI,EAAgBxkH,QAAU,IAAKiyG,KAC9BM,KAGCuS,GAAc57D,EAAAA,GAAAA,GAAiB7e,IACnC,MAAM8gC,EAAYsC,EAAaztE,QAC/B,IAAKmrE,GAAa9gC,EAAE06E,iBAClB,OAGF,MAAM,OAAEC,GAAW36E,GACb,UAAE2wC,GAAc7P,EAChB7uD,EAAQgoG,IAERW,EAAeT,EAAgBxkH,QAC/BoyG,EAAmB6S,EAAa7S,iBAEhC8S,EAAgD,IAAnCD,EAAa/S,WAAWiT,IAAI,IACzCF,EAAa3S,iBAAmB/lI,KAAKC,OAASy4I,EAAa3S,gBAC/C,IAAdt3B,GAAmBkqC,IACrBD,EAAa5S,gBAAiB,EAC9B4S,EAAa3S,qBAAkBj/H,GAGjC,MAAM6+H,EAAasS,EAAgBxkH,QAAQkyG,WAAW9wH,QACtD8wH,EAAW18H,KAAKwvI,GACZ9S,EAAWvmI,OAtEM,GAuEnBumI,EAAWkT,QAEbZ,EAAgBxkH,QAAQkyG,WAAaA,EACrC,MAAMmT,EAAsBnT,EAAW1pH,OAAO,CAAC5Z,EAAGC,IAAMD,EAAIC,EAAG,GAAKqjI,EAAWvmI,OAC/E64I,EAAgBxkH,QAAQoyG,iBAAmBiT,EAE3C,MAAMC,EAAa76I,KAAK86I,IAAIF,GAAuB56I,KAAK86I,IAAInT,GA3E9B,EAgF9B,OAHAyS,EA9EgC,KAiFd,IAAd7pC,GAAmBgqC,EAAS,GAAe,eAAV1oG,GAC9B2oG,EAAa3S,kBAEhB2S,EAAa3S,gBAAkB/lI,KAAKC,MApFR,UAwF1B84I,GAAcL,EAAa5S,gBAC7BsS,MAMU,cAAVroG,GAAyB0oG,EAAS,OACpCz1C,EAAAA,GAAAA,GAAUllC,GAKE,eAAV/tB,GAA0B0oG,EAAS,GACrCJ,SACAr1C,EAAAA,GAAAA,GAAUllC,SAFZ,IAOIm7E,GAAmBt8D,EAAAA,GAAAA,GAAiB7e,IACxC,MAAM8gC,EAAYsC,EAAaztE,QAC/B,IAAKmrE,GAAkC,IAArB9gC,EAAEo7E,QAAQ95I,OAAc,OAE1C,MAAM,UAAEqvG,GAAc7P,EAChB7uD,EAAQgoG,IAGI,IAAdtpC,GAA6B,eAAV1+D,IACrBooG,EAAe1kH,QAAUqqC,EAAEo7E,QAAQ,GAAGC,WAIpCC,GAAkBz8D,EAAAA,GAAAA,GAAiB7e,IACvC,MAAM8gC,EAAYsC,EAAaztE,QACzB4sC,EAAS83E,EAAe1kH,QAC9B,IAAKmrE,QAAwB93F,IAAXu5D,GAA6C,IAArBvC,EAAEo7E,QAAQ95I,OAAc,OAElE,MAAM,UAAEqvG,GAAc7P,EAChB7uD,EAAQgoG,IAERU,EADW36E,EAAEo7E,QAAQ,GAAGC,QACJ94E,EAE1B,MAAc,cAAVtwB,EAKc,IAAd0+D,GAAmBgqC,EAnIG,IAmIyC,eAAV1oG,GACvDqoG,SACAD,EAAe1kH,aAAU3sB,IAKb,eAAVipC,GAA0B0oG,GA1IJ,IA2IxBJ,SACAF,EAAe1kH,aAAU3sB,SAF3B,OAZA,IAmBIuyI,GAAiB18D,EAAAA,GAAAA,GAAgB,KACrCw7D,EAAe1kH,aAAU3sB,KAG3BmxE,EAAAA,GAAAA,IAAU,KACR,MAAM2mB,EAAYsC,EAAaztE,QAC/B,IAAI0uD,GAAeyc,EAKnB,OAJAqb,EAAAA,GAAAA,IAAgB,KACdrb,EAAUmb,UAAUryG,IAAI89H,MAGnB,MACLvrB,EAAAA,GAAAA,IAAgB,KACdrb,EAAUmb,UAAUa,OAAO4qB,QAG9B,CAACtkC,EAAc/e,KAElBlK,EAAAA,GAAAA,IAAU,KACR,MAAM2mB,EAAYsC,EAAaztE,QAC/B,IAAI0uD,GAAeyc,EAKnB,OAJAqb,EAAAA,GAAAA,IAAgB,KACdrb,EAAUmb,UAAUwf,OAAOkM,GAAyC,WAAfsS,OAGhD,MACL99B,EAAAA,GAAAA,IAAgB,KACdrb,EAAUmb,UAAUa,OAAO6qB,QAG9B,CAACvkC,EAAc/e,EAAY41D,KAE9B9/D,EAAAA,GAAAA,IAAU,KACR,MAAM2mB,EAAYsC,EAAaztE,QAC/B,IAAI0uD,GAAeyc,EAUnB,OANAA,EAAUne,iBAAiB,QAAS83D,EAAa,CAAEe,QAAwB,WAAfvB,MAC5Dn5C,EAAUne,iBAAiB,aAAcw4D,EAAkB,CAAEK,SAAS,IACtE16C,EAAUne,iBAAiB,YAAa24D,EAAiB,CAAEE,SAAS,IACpE16C,EAAUne,iBAAiB,WAAY44D,EAAgB,CAAEC,SAAS,IAClE16C,EAAUne,iBAAiB,cAAe44D,EAAgB,CAAEC,SAAS,IAE9D,KACL16C,EAAUle,oBAAoB,QAAS63D,GACvC35C,EAAUle,oBAAoB,aAAcu4D,GAC5Cr6C,EAAUle,oBAAoB,YAAa04D,GAC3Cx6C,EAAUle,oBAAoB,WAAY24D,GAC1Cz6C,EAAUle,oBAAoB,cAAe24D,GAE7C,MAAMX,EAAeT,EAAgBxkH,QACjCilH,GAAc1S,SAAS95G,aAAawsH,EAAa1S,WAEtD,CAAC9kC,EAAcq3C,EAAaU,EAAkBG,EAAiBC,EAAgBtB,EAAU51D,GAC9F,CgB2YEo3D,CACEr4C,GAAcs0C,GAAqBC,IAAwB1G,KAG7D92D,EAAAA,GAAAA,IAAU,KACR,GAAK+D,GAAcvoD,SAAY8lC,EAAAA,GAI/B,OAAOomB,EAAAA,GAAAA,IAAc3D,GAAcvoD,QAAS,CAC1CmsD,wBAAyB,WACzBC,QAASA,CAAC/hB,EAAGzoD,IACPA,IAAcyqE,GAAAA,GAAeC,MAC/BoxD,GAAajzI,KAAKC,IAAIyzI,GAAqB,EAAG3wD,GAAK7hF,OAAS,KACrD,GACEiW,IAAcyqE,GAAAA,GAAeE,QACtCmxD,GAAajzI,KAAKE,IAAI,EAAGwzI,GAAqB,KACvC,MAMZ,CAACA,GAAoB3wD,GAAK7hF,SAIzBw1I,GACFiD,GAAkB/tB,EAA2C,EAjcrC,MAmcb1wG,KAAgB+0H,IAAsBryF,GAAO18C,QAAyB,UAAfizI,MAClEwF,GAAiB2B,EAAAA,KAGnB,MAAMC,IAAmBtyB,EAAAA,GAAAA,GAAkB,CAACxoH,EAAQyG,EAAUitI,GAC5DT,GAAoB3tF,EAAoB8L,GAAuB8nF,IAgXjE,MAAM6B,GAA+C,YAAfrH,IAA2C,UAAfA,GAC5DsH,GACe,YAAftH,GAC8B,QAAzBtiF,EAAiC,EAAIA,EAE3B,UAAfsiF,GAC4B,QAAvBpuF,EAA+B,EAAIA,EAErC,EAGH21F,IAAej9D,EAAAA,GAAAA,GAAgB,KACnCk0D,GAA2BD,GAA0B,KAqBvD,SAASiJ,GAAuBC,EAAoBC,GAClD,MAAMC,EA9TR,SAAoCF,EAAoBC,GACtD,GAAID,EAAW,CACb,MAAMG,EAA2BnmI,QAAuB,YAAfu+H,IAA4B9E,GAErE,OACEh0D,EAAAA,GAAAA,IAAA,OACEhmD,UAAU,qBAAoB4kD,SAAA,EAE5B4hE,IAAcE,IAA4B9iE,EAAAA,GAAAA,GAAC8L,GAAAA,EAAO,IACnDg3D,IAA4B9iE,EAAAA,GAAAA,GAAC+iE,GAAAA,EAAY,CAAC5uI,KAAMotB,GAAK,8BAG5D,CAEA,MAAMyhH,EAAqB/gI,KAAgBA,IAAaha,OAExD,GAAI+6I,GAAqC,UAAf9H,GACxB,OAvFA94D,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,sBAAqB4kD,SAAA,EAClChB,EAAAA,GAAAA,GAACs9B,GAAAA,EAAuB,CACtBvhD,KAAM,IACNwhD,OAAQC,GAAAA,EAAeylC,cACvBhR,gBAAc,EACdiR,QAAM,KAERljE,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,cAAa4kD,SACzBz/C,GAAK,sBAERy+C,EAAAA,GAAAA,GAAC2sB,GAAAA,EAAI,CACHvwE,UAAU,OACVmmD,QAASk+D,GAAuBz/D,SAE/Bz/C,GAAK,wBA4EZ,GAAIyhH,EAAoB,CACtB,IAAI7uI,EAEJ,OAAQ+mI,IACN,IAAK,UACH/mI,EAA0BotB,GAAnB60G,EAAwB,yBAAiC,kBAChE,MACF,IAAK,cACHjiI,EAAOggF,GAAQ,oBACf,MACF,IAAK,YACHhgF,EAAOggF,GAAQ,wBACf,MACF,IAAK,QACHhgF,EAAOggF,GAAQ,wBACf,MACF,IAAK,QACHhgF,EAAOggF,GAAQ,wBACf,MACF,IAAK,QACHhgF,EAAOggF,GAAQ,yBACf,MACF,IAAK,UACHhgF,EAAOggF,GAAQ,mCACf,MACF,IAAK,iBACHhgF,EAAOggF,GAAQ,sCACf,MACF,QACEhgF,EAAOggF,GAAQ,0BAGnB,OACEnU,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,qBAAoB4kD,UACjChB,EAAAA,GAAAA,GAAC+iE,GAAAA,EAAY,CAAC5uI,KAAMA,KAG1B,CAEA,IAAKsD,EAEH,OAGF,MAAM0rI,EAA8B,UAAfjI,GAAyBwC,GAC3B,YAAfxC,IAA2B2C,GAC/B,OACE79D,EAAAA,GAAAA,GAAA,OACE5jD,WAAW0lD,EAAAA,GAAAA,GACT,WAAWo5D,UACXgD,IAA0B,mBAC1BiF,GAAgB,gBAElB3gE,IAAK2R,GAAQ1R,OAAwB,UAAfy4D,GAAyB,WAAQvrI,EACvD4sG,eAAa,EAAAv7B,SAEG,UAAfk6D,GACEj5H,GAAyB9M,IAAKzM,GAAO+O,EAAa/O,KACjDs3E,EAAAA,GAAAA,GAACojE,GAAAA,EAAK,CAEJh8I,QAASqQ,EAAa/O,GACtBgqI,YAAa1yB,GAAmBvoG,EAAa/O,GAAIgqI,YACjDjhC,oBAAqBquC,GACrBv9D,QAAS09D,IAJJv3I,IAOS,YAAfwyI,IAA2C,mBAAfA,GAC9Bj5H,GAAyB9M,IAAI,CAACzM,EAAI+C,IAAM2rI,IAAa1uI,KACpDs3E,EAAAA,GAAAA,GAACqjE,GAAU,CACT5b,cAAeh8H,EAEfyoB,MAAOkjH,EAAW1uI,GAClB+rE,UAA0B,mBAAfymE,IAFN,GAAGA,MAAcxyI,MAKT,cAAfwyI,GACDj5H,GAAyB9M,IAAKzM,GAAO+O,EAAa/O,KACjDs3E,EAAAA,GAAAA,GAACokD,GAAAA,EAAQ,CAEP/3H,UAAUi3I,EAAAA,EAAAA,IAAmB7rI,EAAa/O,IAC1C66I,UAAQ,EACRC,SAAO,EACPpnH,UAAU,cACVq0E,eAAeC,EAAAA,EAAAA,IAAiBJ,GAAiBgzC,EAAAA,EAAAA,IAAmB7rI,EAAa/O,KACjF+oG,oBAAqBquC,GACrB2D,YAAapD,GACbj5I,QAASqQ,EAAa/O,GACtBotI,qBAAsBA,GATjBptI,IAYQ,UAAfwyI,GACDj5H,GAAyB9M,IAAKzM,GAAO+O,EAAa/O,KACjDs3E,EAAAA,GAAAA,GAAC0jE,GAAAA,EAAO,CAENt8I,QAASqQ,EAAa/O,GACtBgqI,YAAa1yB,GAAmBvoG,EAAa/O,GAAIgqI,YACjDjhC,oBAAqBquC,GACrB6D,eAAgBtD,IAJX33I,IAOQ,UAAfwyI,GACDj5H,GAAyB9M,IAAKzM,GAAO+O,EAAa/O,KACjDs3E,EAAAA,GAAAA,GAAC4jE,GAAAA,GAAK,CAEJ/tG,MAAOA,EACPzuC,QAASqQ,EAAa/O,GACtBo2D,OAAQqQ,EAAAA,GAAYogE,YACpBh0H,KAAM9D,EAAa/O,GAAI6S,KACvB6gB,UAAU,cACVynH,OAAQ1D,GACRsD,YAAapD,GACb1+E,aAAcq+C,IAAoBvoG,EAAa/O,GAAIgqI,YACnDjiC,eAAeC,EAAAA,EAAAA,IAAiBJ,EAAiB74F,EAAa/O,GAAIsD,QAAQs7G,QATrE5+G,IAYQ,UAAfwyI,GACDj5H,GAAyB9M,IAAKzM,IAC7B,MAAMtC,GAASoL,EAAAA,EAAAA,MACTpK,EAAUqQ,EAAa/O,GAC7B,IAAKtB,EAAS,OAEd,MAAMsS,GAAQkoD,EAAAA,GAAAA,IAA+Bx7D,EAAQgB,GACrD,OAAOqQ,EAAa/O,KAClBs3E,EAAAA,GAAAA,GAAC4jE,GAAAA,GAAK,CAEJ/tG,MAAOA,EACPzuC,QAASA,EACTq2D,aAAaqmF,EAAAA,GAAAA,GAAc3vD,GAAS/sF,EAAS6uI,EAAWnK,GACxDhtE,OAAQqQ,EAAAA,GAAYogE,YACpBh0H,KAAMnU,EAAQmU,KACd6gB,UAAU,cACVynH,OAAQ1D,GACRsD,YAAapD,GACb1+E,aAAcq+C,IAAoB54G,EAAQsrI,YAC1CjiC,eAAeC,EAAAA,EAAAA,IAAiBJ,EAAiB52F,IAV5ChR,KAcM,YAAfwyI,GACDj5H,GAAyB9M,IAAI,CAACzM,EAAI+C,KACjCu0E,SAAAA,GAAAA,GAAC+jE,GAAAA,EAAQ,CAEPtc,cAAeh8H,EACf2wB,UAAU,+DAEVmmD,QAASA,IAAM69D,GAAkB13I,GACjCi/E,gBAxPoBq8D,EAwPmBt7I,EAvP1Cs7I,IAAa37I,GAAkBmuI,EAA+B,CAAC,CACpEvgI,MAAOk+E,GAAQ,iCACfhtE,KAAM,OACN0gE,QAASA,KACPoxD,GAAkB+K,WAJmCr0I,GAuPJqxE,UAE3ChB,EAAAA,GAAAA,GAACs1C,GAAAA,EAAe,CAACztG,OAAQnf,EAAIu7I,YAAaxqE,IAAmB/wE,GAAKw7I,eAAa,KAP1Ex7I,GAnPjB,IAAgCs7I,IA6PP,gBAAf9I,GACDj5H,GAAyB9M,IAAI,CAACzM,EAAI+C,KACjCu0E,EAAAA,GAAAA,GAAC+jE,GAAAA,EAAQ,CAEPtc,cAAeh8H,EACf2wB,UAAU,6CAEVmmD,QAASA,IAAM93D,GAAS,CAAE/hB,OAAMs4E,UAEhChB,EAAAA,GAAAA,GAAC61C,GAAAA,EAAa,CAACruH,OAAQkB,KANlBA,IASQ,iBAAfwyI,GACFlE,EAAiB7hI,IAAI,CAACuE,EAAOjO,KAC3Bu0E,EAAAA,GAAAA,GAACwyD,GAAY,CAEX94H,MAAOA,EACPg5H,YAAa1yB,EACbvO,oBAAqBquC,GACrBv9D,QAAS29D,GACTlgI,MAAOvU,GALFiO,EAAM6B,OAQE,oBAAf2/H,IACF94D,EAAAA,GAAAA,IAAA,OAAApB,SAAA,CACI/+D,GAAyB9M,IAAI,CAAC6D,EAAWvN,KACzCu0E,EAAAA,GAAAA,GAAC+jE,GAAAA,EAAQ,CAEPtc,cAAeh8H,EACf2wB,WAAW0lD,EAAAA,GAAAA,GACT,qCACCxlE,IAAwB7Q,IAAMqsI,EAAiB7vI,OAAS,GAAK,UAGhEs6E,QAASA,IAAM93D,GAAS,CAAE/hB,GAAIsQ,IAAagoE,UAE3ChB,EAAAA,GAAAA,GAAC61C,GAAAA,EAAa,CAACsuB,WAAW,QAAQ38I,OAAQwR,EAAWw8G,cAAY,KAT5Dx8G,KAYPsD,KACA8lE,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EAEEoB,EAAAA,GAAAA,IAACM,GAAAA,EAAM,CAACtmD,UAAU,qBAAqBmmD,QAASA,IAAMvyD,KAAmBgxD,SAAA,CACtEmT,GAAQ,kBACTnU,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,qBAEbilC,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,eAAc4kD,UAC1BqrB,EAAAA,GAAAA,GAAWlY,GAAQ,kBAAmB6jD,IAAoB,CAAC,2BAvB1DkD,IA4BO,gBAAfA,IACF94D,EAAAA,GAAAA,IAAA,OAAApB,SAAA,CACI/+D,GAAyB9M,IAAI,CAAC0S,EAAQpc,KACtCu0E,EAAAA,GAAAA,GAAC+jE,GAAAA,EAAQ,CAEPtc,cAAeh8H,EACf2wB,WAAW0lD,EAAAA,GAAAA,GACT,qCACCxlE,IAAwB7Q,IAAMssI,EAAa9vI,OAAS,GAAK,UAG5Ds6E,QAASA,IAAM93D,GAAS,CAAE/hB,GAAImf,IAAUm5D,UAEvCtpE,EAAAA,EAAAA,IAASmQ,IACRm4D,EAAAA,GAAAA,GAACs1C,GAAAA,EAAe,CACdztG,OAAQA,EACRs8H,WAAW,YAGbnkE,EAAAA,GAAAA,GAAC61C,GAAAA,EAAa,CACZruH,OAAQqgB,EACRs8H,WAAW,YAjBVt8H,KAsBPvL,KACA8lE,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EAEEoB,EAAAA,GAAAA,IAACM,GAAAA,EAAM,CAACtmD,UAAU,iBAAiBmmD,QAASA,IAAMvyD,KAAmBgxD,SAAA,CAClEz/C,GAAK,0BACNy+C,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,qBAEbilC,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,eAAc4kD,UAC1BqrB,EAAAA,GAAAA,GAAW9qE,GAAK,6BAA8B,CAAEriB,MAAO84H,IAAqB,CAC3E/rC,WAAW,EACXC,cAAc,EACdnlF,YAAaixH,aApCbkD,IA0CO,UAAfA,GACDjB,IAAgB9kI,IAAKuqC,IAElBsgC,EAAAA,GAAAA,GAACqwD,GAAS,CACRjoI,OAAQZ,EAER40B,UAAU,aACVywE,MAAOwtC,IAAeG,EAAAA,GAAAA,GAAgB96F,IACtCA,KAAMA,EACN+xD,oBAAqBquC,KAJhBtF,EAAAA,GAAAA,GAAgB96F,UAQzB/vC,GAGV,CAoCsBy0I,CAA2BzB,EAAWC,GAEpDyB,EAAY1B,IAAcC,EAEhC,OAAIL,IAEAviE,EAAAA,GAAAA,GAACiK,GAAAA,GAAU,CACT7tD,UAAW,GAAG8+G,UACd/wD,UAAWq4D,GACXznG,MAAMmvC,EAAAA,GAAAA,GAAsB,iBAAkBvG,OAAgBh0E,EAAWwkF,GAAQ1R,OACjFiZ,eAAa,EACb4oD,qBAAmB,EACnBC,iBAAkB9K,GAClB+K,gBAAgB,oDAAmDxjE,UAEnEhB,EAAAA,GAAAA,GAACiK,GAAAA,GAAU,CACTE,UAAWk6D,EAAY,EAAI,EAC3BtpG,KAAK,OACL2gD,eAAa,EACb4oD,qBAAmB,EACnBC,iBAAkB9K,GAClB+K,gBAAgB,WAChBvd,OAAQwb,GAAazhE,SAEpB6hE,OAOP7iE,EAAAA,GAAAA,GAACiK,GAAAA,GAAU,CACTE,UAAWk6D,EAAY,EAAI,EAC3BtpG,KAAK,OACL2gD,eAAa,EACb4oD,qBAAmB,EAAAtjE,SAElB6hE,GAGP,CAEA,MAAM4B,GAAqB,sDACrBC,GAAgBnC,GAGlB,GAAGkC,oHAFH,GAAGA,OAAuBvJ,yBAI9B,OACE94D,EAAAA,GAAAA,IAACuiE,GAAAA,EAAc,CACb5/D,IAAKglB,GACL3tE,UAAU,wBACVsoH,aAAcA,GACd72H,MAAOy0H,GAAmBrgI,QAActS,EACxC+vI,YAAaA,GACbkF,cAAeC,EAAAA,IACfC,iBAAkBxC,GAAmC,YAAfpH,GAA2BtL,EAAAA,IAAgB/tG,EAAAA,GAAsB,EAEvGkjH,sBAAoB,EACpBC,YAAU,EACVC,WAAYvV,GACZ7oB,SAAUlD,GAAa3iC,SAAA,EAErBm6D,KAAkB9zE,KAlFGj/D,GAoFnBuvI,GAAkBjvI,IAAM2wI,GApFW5kC,GAqFnCke,GAAsB2vB,IAnF1BlgE,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,eAAc4kD,SAAA,EAC3BhB,EAAAA,GAAAA,GAACklE,GAAAA,EAAW,CACVC,WAAY7L,GACZlxI,OAAQA,GACRg9I,aAAc3wC,GACd4wC,eAAgB1oI,QAAQg7H,MAE1B33D,EAAAA,GAAAA,GAACslE,GAAAA,EAAS,CACRC,aAAclM,GACdv6H,cAAeA,GACf+tF,MAAOwtC,GAAe,oBA4ExBt4H,IACAqgE,EAAAA,GAAAA,IAAA,OACEhmD,UAAU,eACVywE,MAAOwtC,GAAe,eAAer5D,SAAA,EAErChB,EAAAA,GAAAA,GAACiK,GAAAA,GAAU,CACTlF,IAAKF,GACL9pC,MAAMmvC,EAAAA,GAAAA,GAAsB,iBAAkBvG,OAAgBh0E,EAAWwkF,GAAQ1R,OACjF0H,UAAWA,GACXC,YAAaN,GAAK7hF,OAClBq8I,qBAAmB,EACnBloH,UAAU,0BACVi4F,QAASyqB,GACT7X,OAAQ8Y,GACRwE,iBAAkBhC,GAAgC9I,QAA0B9pI,EAC5E60I,gBAAiBjC,GACb,kGACA5yI,EAAUqxE,SAtcxB,WACE,GAAmB,YAAfk6D,GACF,OACEl7D,EAAAA,GAAAA,GAACuK,GAAAA,EAAQ,CAACnuD,UAAU,gBAAgBouD,WAAW,QAAQrkB,UAAQ,IAInE,MAAMw8E,GAAc1gI,KAAgB+0H,IAAqBsL,KAAqB7qI,EACxEmrI,EAAYnF,KAAe6E,GAEjC,OACElgE,EAAAA,GAAAA,IAAA,OAAApB,SAAA,CAQiB,UAAfk6D,IAEAl7D,EAAAA,GAAAA,GAAA,OACE5jD,WAAW0lD,EAAAA,GAAAA,GACT,0BACCo8D,IAA0B,cAC3BR,IAA2B,gBAC3B18D,UAEFhB,EAAAA,GAAAA,GAACq1D,GAAsB,CAACjtI,OAAQZ,MAKnB,YAAf0zI,IAEAl7D,EAAAA,GAAAA,GAAA,OACE5jD,WAAW0lD,EAAAA,GAAAA,GACT,0BACCo8D,IAA0B,cAC3BL,IAAuB,gBACvB78D,UAEFhB,EAAAA,GAAAA,GAAC01D,GAAc,CAACttI,OAAQZ,WAT9B,EApBKk7I,GAAuBC,EAAWC,KAGzC,CAwbWlvC,MAEH1zB,EAAAA,GAAAA,GAAC4J,GAAAA,EAAO,CAACG,UAAW0wD,GAAoB3wD,KAAMA,GAAME,YAAazB,QAIpEguD,IACCv2D,EAAAA,GAAAA,GAACitD,GAAAA,EAAoB,CACnB7wG,WAAW0lD,EAAAA,GAAAA,IAAgB3b,GAAY,UACvCiP,QAASktE,GACT//D,QAASy9D,GACTp9D,UAAWuR,GAAQ,yBAAyBnT,UAE5ChB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,sBAGdy7F,IACCx2D,EAAAA,GAAAA,GAACwlE,GAAAA,EAAiB,CAChBvhG,OAAQtnC,QAAQq8H,IAChBnxH,OAAQmxH,GACR71D,QAASm9D,QA/HjB,IAA2Bl4I,GAAgBqsG,MGx6BvCgxC,GAA4B,IAAMzoF,EAAAA,IAAoB,IAEvD0oF,GAAa,SAAbA,GAAa,OAAbA,EAAAA,EAAa,qBAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,uBAAbA,EAAAA,EAAa,6BAAbA,EAAAA,EAAa,yBAAbA,EAAAA,EAAa,mBAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,yCAAbA,EAAAA,EAAa,qCAAbA,EAAAA,EAAa,qCAAbA,EAAAA,EAAa,oDAAbA,EAAAA,EAAa,4BAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,wDAAbA,EAAAA,EAAa,wDAAbA,EAAAA,EAAa,kDAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,oDAAbA,EAAAA,EAAa,sDAAbA,EAAAA,EAAa,0DAAbA,EAAAA,EAAa,wEAAbA,EAAAA,EAAa,4DAAbA,EAAAA,EAAa,wDAAbA,EAAAA,EAAa,oDAAbA,EAAAA,EAAa,0DAAbA,EAAAA,EAAa,4CAAbA,EAAAA,EAAa,gDAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,0BAAbA,EAAAA,EAAa,8BAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,sCAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,4CAAbA,EAAAA,EAAa,8BAAbA,EAAAA,EAAa,0BAAbA,EAAAA,EAAa,gCAAbA,EAAAA,EAAa,4CAAbA,EAAAA,EAAa,0BAAbA,CAAa,EAAbA,IAAa,IA4ClB,MA4kBA,IAAeriE,EAAAA,EAAAA,IACb,CAACj9E,GACCoB,SAAQm+I,YAAWC,eAAc33I,eAEjC,MAAMoG,GAAW/N,EAAAA,EAAAA,KAAeF,IACxB2yB,MAAO8sH,IAAuBC,EAAAA,EAAAA,KAA2B1/I,IAAW,CAAC,GACrE2yB,MAAOgtH,IAAmBC,EAAAA,EAAAA,KAAuB5/I,IAAW,CAAC,EAC/DoD,EAAOhC,GAASoG,EAAAA,EAAAA,KAAWxH,EAAQoB,QAAUmI,EAC7CuL,EAAOyqI,GAAan+I,IAAUkQ,EAAAA,EAAAA,IAASlQ,IAAU2T,EAAAA,EAAAA,KAAW/U,EAAQoB,QAAUmI,EAC9E60F,EAAYh7F,IAAQqgB,EAAAA,EAAAA,IAAcrgB,GAClCy8I,EAAgBz8I,GAAMiG,SAAWkN,QAAQ1O,GAAYA,IAAaD,EAAAA,IAClEwB,EAAQy2I,GAAgBz1I,EAAAA,EAAAA,KAAYpK,EAAQoB,EAASyG,QAAa0B,EAClEu2I,EAAeD,GAAiBz2I,IAAS22I,EAAAA,EAAAA,IAAkB38I,EAAMgG,GACjEgwG,EAAQtkG,IAAQgR,EAAAA,EAAAA,IAAUhR,GAC1BmsD,EAAkB7/D,GAASD,EAAAA,EAAAA,KAAqBnB,EAAQoB,QAAUmI,EAClEy2I,EAAa5mC,GAAStkG,GAAMkrI,WAE5B3nC,EAAgBvjG,IAAQmrI,EAAAA,EAAAA,IAAiBnrI,GACzCw1H,EAAY/zH,SAASipI,GAAgBD,GAAan+I,IAAU8+I,EAAAA,EAAAA,KAAgBlgJ,EAAQoB,IAEpF++I,EAAkB5pI,QAAQnV,GAAU6M,EAASgxB,WAAW9sB,SAAS/Q,IAAS0+B,eAC1EsgH,GAAqBP,GAAiBz+I,GACxCggB,EAAAA,EAAAA,KAAmBphB,EAAQoB,IAASg/I,uBACpC72I,EACEw3B,EAAoB3/B,EACtB6M,EAASgxB,WAAW9sB,SAAS/Q,IAAS2+B,YAAYF,YAASt2B,EAEzD82I,EAAoBpyI,EAASg5C,WAAWnlD,OACxCw+I,IAAmBl/I,IAASm/I,EAAAA,EAAAA,KAA8BvgJ,EAAQoB,GAClEo/I,IAAwBp/I,IAASq/I,EAAAA,EAAAA,KAAmCzgJ,EAAQoB,GAElF,MAAO,CACLkpI,YACAjyB,gBACA+nC,oBACAhiD,YACAgb,QACAymC,gBACAC,eACAr+H,OAAQ3M,GAAMxS,GACd8lC,OAAQtzB,GAAMszB,OACdq3G,qBACAE,iBACAQ,kBACAp/G,oBACAkgC,kBACAuc,4BAA6BvvE,EAASuvE,4BACtCwiE,aACAK,oBACAC,mBACAE,0BAlDN,CA5kB+CE,EAC7Ct/I,SACAyG,WACA84I,eACApB,YACAC,eACAoB,eACAC,sBACAC,oBACAC,2BACAC,oBACAC,kBACAC,cACAC,gBACAC,kBACAC,iBACAC,sBACAC,cACAxP,eACAyP,mBACAnpC,gBACA52F,SACA2mB,SACAkiG,YACAlsC,YACAqhD,qBACAE,iBACAQ,kBACAC,oBACAr/G,oBACAy8C,8BACA47B,QACAymC,gBACAC,eACA7+E,kBACA++E,aACAK,oBACAC,mBACAE,wBACAzjE,UACA0kE,qBAEA,MAAM,sBACJC,EAAqB,kBACrBC,EAAiB,iBACjBC,EAAgB,qBAChB5wB,EAAoB,iBACpB6wB,EAAgB,yBAChBC,EAAwB,yBACxBC,EAAwB,mBACxBC,EAAkB,wBAClBC,IACEhiI,EAAAA,EAAAA,OAEGiiI,GAAoBC,GAAkBC,KAAqBz3D,EAAAA,GAAAA,MAC5D,SAAEO,KAAaC,EAAAA,EAAAA,OACf,eAAE8oD,KAAmBC,EAAAA,GAAAA,MAGzBmO,SAAUC,GACV96E,uBAAwB+6E,GACxB96E,qBAAsB+6E,GACtB76E,wBAAyB86E,GACzB/6E,oBAAqBg7E,GACrB96E,uBAAwB+6E,GACxB96E,oBAAqB+6E,IACnBvC,EAEEwC,IAAmBC,EAAAA,GAAAA,MAEnBC,IAAwB3jE,EAAAA,GAAAA,GAAgB,KAC5C0iE,EAAyB,CAAE1gJ,OAAQA,EAASy+B,OAAQkB,IACpD0gH,EAAeuB,EAAAA,GAAkBC,cAG7BC,IAA0B9jE,EAAAA,GAAAA,GAAgB,KAC9C2iE,EAAyB,CAAE3gJ,OAAQA,EAAS+4B,KAAM4G,EAAmB5G,OACrEsnH,EAAeuB,EAAAA,GAAkBG,SACjCf,OAGIgB,IAAiChkE,EAAAA,GAAAA,GAAiBzsD,IACtD+uH,EAAsB,CAAE/uH,YAGpB0wH,IAA6BjkE,EAAAA,GAAAA,GAAiBzsD,IAClDgvH,EAAkB,CAAEhvH,YAGhB4/F,IAAmBnzC,EAAAA,GAAAA,GAAgB,KACvC4xC,EAAqB,CAAEvvG,aAGnB6hI,IAAkBlkE,EAAAA,GAAAA,GAAgB,KACjCh+E,GAAWyG,GAChBm6I,EAAmB,CAAE5gJ,SAAQ2J,QAASF,OAAOhD,OAGzC07I,IAAyBnkE,EAAAA,GAAAA,GAAgB,KAC7CwiE,MAGI4B,IAAyBpkE,EAAAA,GAAAA,GAAgB,KAC7CyiE,MAGIhmE,IAAcuD,EAAAA,GAAAA,GAAgB,KAClCrC,GAAS9b,MAGJwsB,GAAsBg2D,KAA2BloE,EAAAA,GAAAA,KAAUolE,IAElEjmE,EAAAA,GAAAA,IAAU,KACRvvE,WAAW,KACTs4I,IAAyB9C,IACxBtB,KACF,CAACsB,IAEJ,MAAM5yD,IAAUvS,EAAAA,GAAAA,KACVrgD,IAAOs/C,EAAAA,GAAAA,KACPyZ,GAAaqrD,EACjBxN,IAAiBjJ,EAAAA,GAAagJ,QAC5BwN,GAAcxN,QACZC,IAAiBjJ,EAAAA,GAAaK,YAChCmW,GAAcnW,YACZ4I,IAAiBjJ,EAAAA,GAAaC,WAChCuW,GAAcvW,WACZgJ,IAAiBjJ,EAAAA,GAAaE,SAChCsW,GAActW,SACZ+I,IAAiBjJ,EAAAA,GAAaG,UAChCqW,GAAcrW,UACZ8I,IAAiBjJ,EAAAA,GAAaI,aAChCoW,GAAcpW,cACX,EACHiY,EACF7B,GAAclY,YACZ6Z,EACF3B,GAAcoE,cACZxC,EACF5B,GAAcrY,UACZqa,EACFhC,GAAcqE,cACZnE,EACFgC,IAAqBwB,EAAAA,GAAkBY,QACrCtE,GAAcuE,cACZrC,IAAqBwB,EAAAA,GAAkBc,gBACzCxE,GAAcyE,sBACZvC,IAAqBwB,EAAAA,GAAkBgB,WACzC1E,GAAc2E,iBACZzC,IAAqBwB,EAAAA,GAAkBkB,mBACzC5E,GAAc6E,yBACZ3C,IAAqBwB,EAAAA,GAAkBoB,iBACzC9E,GAAc+E,uBACZ7C,IAAqBwB,EAAAA,GAAkBsB,mBACzChF,GAAciF,yBACZ/C,IAAqBwB,EAAAA,GAAkBwB,kBACzClF,GAAcmF,wBACZjD,IAAqBwB,EAAAA,GAAkB0B,oBACzCpF,GAAcqF,0BACZnD,IAAqBwB,EAAAA,GAAkB4B,2BACzCtF,GAAcuF,iCACZrD,IAAqBwB,EAAAA,GAAkB8B,qBACzCxF,GAAcyF,2BACZvD,IAAqBwB,EAAAA,GAAkBgC,mBACzC1F,GAAc2F,yBACZzD,IAAqBwB,EAAAA,GAAkBkC,gBACzC5F,GAAc6F,uBACZ3D,IAAqBwB,EAAAA,GAAkBoC,mBACzC9F,GAAc+F,0BACZ7D,IAAqBwB,EAAAA,GAAkBsC,aACzChG,GAAciG,mBACZ/D,IAAqBwB,EAAAA,GAAkBG,QACzC7D,GAAckG,cACZhE,IAAqBwB,EAAAA,GAAkBC,WACzC3D,GAAcmG,iBACZjE,IAAqBwB,EAAAA,GAAkB0C,eACzCpG,GAAcqG,qBACZnE,IAAqBwB,EAAAA,GAAkB4C,UACzCtG,GAAcuG,gBACZrE,IAAqBwB,EAAAA,GAAkB8C,WACzCxG,GAAcyG,iBACZvE,IAAqBwB,EAAAA,GAAkBgD,aACzC1G,GAAc2G,mBACZzE,IAAqBwB,EAAAA,GAAkBkD,mBACzC5G,GAAc4G,wBACZ38I,EACFq3I,EACFtB,GAAc6G,WACZtF,EACFvB,GAAc8G,kBACZtF,EACFxB,GAAc+G,gBACZrF,EACF1B,GAAcgH,gBACZlF,EACF9B,GAAcxY,YACZua,EACF/B,GAAcvY,UACZga,EACFzB,GAAciH,uBACZhF,EACFjC,GAAckH,eACZj9I,EAEEk9I,IAAsBxkC,EAAAA,GAAAA,GAAiB/tB,IAAY,KAAU,EAsB7DwyD,IAAyE3qE,EAAAA,GAAAA,IAAQ,IAC9E,EAAG6S,YAAW/wC,aACnB+7B,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACLuzE,QAASb,GACTv1B,KAAK,UACL4mB,MAAM,cACNvmD,UAAW6nB,EAAS,SAAW,GAC/Bs+B,QAASyS,EACTpS,UAAWrhD,GAAK,qBAAqBy/C,UAErChB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,WAGd,CAACu2C,GAAU/vD,KA+SRwrH,GAAez7D,KAClBjqB,IACCizB,KAAeorD,GAAcnW,aAC1Bj1C,KAAeorD,GAActW,UAC7B90C,KAAeorD,GAAcvW,YAC7B70C,KAAeorD,GAAcrW,WAC7B/0C,KAAeorD,GAAcqE,eAC7BzvD,KAAeorD,GAAc8G,mBAC7BlyD,KAAeorD,GAAc+G,iBAC7B7G,GAIDoH,IAAkBlrE,EAAAA,GAAAA,GACtB,sBACAirE,IAAgB,cACfl5D,IAAwBjQ,IAAgC,iBAG3D,OACExB,EAAAA,GAAAA,IAAA,OACEhmD,UAAU,cACV,4BAAwBypC,GAAAA,KAAYywB,EAAAA,UAAmB3mF,EACvDk9F,MAAOwtC,GAAe,eAAe,GAAMr5D,SAAA,EAE3ChB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLtmD,UAAU,eACVxd,OAAK,EACL+jE,MAAM,cACN5mB,KAAK,UACLwmB,QAASN,GACTW,UAA0BuR,GAAf44D,GAAuB,cAAyB,gBAAgB/rE,UAE3EhB,EAAAA,GAAAA,GAAA,OAAK5jD,UAAW4wH,QAElBhtE,EAAAA,GAAAA,GAACiK,GAAAA,GAAU,CACTlvC,KAAO84C,IAAwBjQ,EAA+B,OAAS,YACvEuG,UAAW0iE,GAAoB7rE,SAlVrC,WACE,IAA6B,IAAzB6rE,GAIJ,OAAQA,IACN,KAAKnH,GAAclY,YACjB,OAAOxtD,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,iBACxC,KAAKuxD,GAAcqE,cACjB,OAAO/pE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQqQ,EAAY,wBAA0B,qBAC9E,KAAKkhD,GAAcuE,cACjB,OAAOjqE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,UACxC,KAAKuxD,GAAcyE,sBACjB,OAAOnqE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQqQ,EAAY,oBAAsB,qBAC1E,KAAKkhD,GAAc2E,iBACjB,OAAOrqE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,gBACxC,KAAKuxD,GAAciF,yBACjB,OAAO3qE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,2BACxC,KAAKuxD,GAAc2F,yBACjB,OAAOrrE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,yBACxC,KAAKuxD,GAAc6F,uBACjB,OAAOvrE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,qBACxC,KAAKuxD,GAAc+F,0BACjB,OAAOzrE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,gBACxC,KAAKuxD,GAAc+E,uBACjB,OAAOzqE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,wBACxC,KAAKuxD,GAAcmF,wBACjB,OAAO7qE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,kBACxC,KAAKuxD,GAAcqF,0BACjB,OAAO/qE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,yBACxC,KAAKuxD,GAAcuF,iCACjB,OAAOjrE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,yBACxC,KAAKuxD,GAAcyF,2BACjB,OAAOnrE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,sBACxC,KAAKuxD,GAAckG,cACjB,OAAO5rE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,4BACxC,KAAKuxD,GAAcmG,iBACjB,OAAO7rE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAoBmT,GAAlBoyD,EAA0B,WAAsB,aAChF,KAAKb,GAAcyG,iBACjB,OACE/pE,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,iBAC/B/R,EAAAA,GAAAA,IAAA,WAAShmD,UAAU,QAAO4kD,SAAA,CACvB75C,IAAsBA,EAAkBd,YACvC25C,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACL+jE,MAAM,cACN5mB,KAAK,UACL6mB,UAAWuR,GAAQ,QACnB5R,QAAS4mE,GAAsBnoE,UAE/BhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,WAGd5T,GAAqBA,EAAkBd,YACtC+7C,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACL+jE,MAAM,SACN5mB,KAAK,UACL6mB,UAAWuR,GAAQ,UACnB5R,QAASgmE,GAAiBvnE,UAE1BhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,cAEbilC,EAAAA,GAAAA,GAACoxC,GAAAA,EAAa,CACZntE,OAAQqkG,GACRnlE,QAASqlE,GACTvyI,MAAOk+E,GAAQ,cACfhgF,KAAMggF,GAAQ,kBACd8kC,sBAAoB,EACpB5H,aAAcl9B,GAAQ,UACtBm9B,eAAgBg4B,cAO9B,KAAK5D,GAAc2G,mBACjB,OAAOrsE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAcmT,GAAZqQ,EAAoB,oBAA+B,oBACnF,KAAKkhD,GAAcqG,qBACjB,OAAO/rE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,qCACxC,KAAKuxD,GAAcoE,cACjB,OACE9pE,EAAAA,GAAAA,GAAC6W,GAAAA,EAAW,CACVvjD,MAAOuyG,EACP1uD,YAAahD,GAAQ,sBACrB84D,iBAAe,EACf51D,SAAUmyD,KAGhB,KAAK9D,GAAcrY,UACjB,OACErtD,EAAAA,GAAAA,GAAC6W,GAAAA,EAAW,CACVvjD,MAAOyyG,EACP5uD,YAAahD,GAAQ,mBACrB84D,iBAAe,EACf51D,SAAUoyD,KAGhB,KAAK/D,GAAc6G,WACjB,OAAOvsE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQqQ,EAAY,qBAAuB,sBAC3E,KAAKkhD,GAAc8G,kBACjB,OAAOxsE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,wBACxC,KAAKuxD,GAAc+G,gBACjB,OAAOzsE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,sBACxC,KAAKuxD,GAAcgH,gBACjB,OAAO1sE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,YACxC,KAAKuxD,GAAciH,uBACjB,OAAO3sE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,4BACxC,KAAKuxD,GAAcnW,YACjB,OAAOvvD,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,iBACxC,KAAKuxD,GAAc6E,yBACjB,OAAOvqE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,wBACxC,KAAKuxD,GAAcvW,WACnB,KAAKuW,GAAciG,mBACjB,OAAO3rE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,kBACxC,KAAKuxD,GAAcrW,UACjB,OAAOrvD,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ3lD,EAAS,qBAAuB,0BACxE,KAAKk3G,GAAcpW,aACjB,OACEltD,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,SAAQ4kD,SAAA,EACrBhB,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,uBAC/BnU,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,WAAU4kD,SAAEmT,GAAQ,QAAS80D,GAAiBiE,EAAAA,WAGnE,KAAKxH,GAAcuG,gBACjB,OAAOjsE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,eACxC,KAAKuxD,GAAcxY,YACjB,OAAOltD,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,cACxC,KAAKuxD,GAAcvY,UACjB,OAAOntD,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,eACxC,KAAKuxD,GAAckH,UACjB,OAAO5sE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAC,aAC/B,KAAK0kE,GAActW,SACjB,OACEhtD,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEz/C,GAAK,qBAC3BmlH,GAAoBl/I,IACnBw4E,EAAAA,GAAAA,GAAA,WAAS5jD,UAAU,QAAO4kD,UACxBoB,EAAAA,GAAAA,IAACmU,GAAAA,EAAY,CACXC,QAASs2D,GACT9pE,UAAU,QACVE,WAAW,EAAMlC,SAAA,EAEjBhB,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPn7D,KAAwB,WAAlBuhI,GAA6B,cAAgB,kBAEnDnmE,QAASA,IAAM8lE,EACb,CAAEjgJ,OAAQZ,EAAQU,OAAQ,CAAEugJ,SAA4B,WAAlBC,GAA6B,UAAY,YAC/E1nE,SAEDz/C,GAAuB,WAAlBmnH,GAA6B,kBAAoB,qBAGzD1oE,EAAAA,GAAAA,GAAC6N,GAAAA,EAAa,KAEd7N,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPn7D,KAAMwhI,GAA8B,QAAU,cAE9CpmE,QAASA,IAAM8lE,EACb,CAAEjgJ,OAAQZ,EAAQU,OAAQ,CAAE0lE,wBAAyB+6E,MACrD3nE,SAEDz/C,GAAK,0BAGRy+C,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPn7D,KAAMyhI,GAA4B,QAAU,cAE5CrmE,QAASA,IAAM8lE,EACb,CAAEjgJ,OAAQZ,EAAQU,OAAQ,CACxB2lE,sBAAuB+6E,MAEzB5nE,SAEDz/C,GAAK,wBAGRy+C,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPn7D,KAAM0hI,GAA+B,QAAU,cAE/CtmE,QAASA,IAAM8lE,EACb,CAAEjgJ,OAAQZ,EAAQU,OAAQ,CACxB6lE,yBAA0B86E,MAE5B7nE,SAEDz/C,GAAK,2BAGRy+C,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPn7D,KAAM2hI,GAA2B,QAAU,cAE3CvmE,QAASA,IAAM8lE,EACb,CAAEjgJ,OAAQZ,EAAQU,OAAQ,CAAE4lE,qBAAsBg7E,MAClD9nE,SAEDz/C,GAAK,sBAGPqlH,IACCxkE,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAC6N,GAAAA,EAAa,KACd7N,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPn7D,KAAM4hI,GAA8B,QAAU,cAE9CxmE,QAASA,IAAM8lE,EACb,CAAEjgJ,OAAQZ,EAAQU,OAAQ,CAAE8lE,wBAAyB+6E,MACrD/nE,SAEDz/C,GAAK,0BAGRy+C,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPn7D,KAAM6hI,GAA2B,QAAU,cAE3CzmE,QAASA,IAAM8lE,EACb,CAAEjgJ,OAAQZ,EAAQU,OAAQ,CAAE+lE,qBAAsB+6E,MAClDhoE,SAEDz/C,GAAK,iCASxB,KAAKmkH,GAAc4G,mBACjB,OAAOtsE,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SAAEmT,GAAQ,cACxC,QACE,OACE/R,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,QAAO4kD,SA9QpBmT,GADL9sB,EACa,gBAGb4+E,EACa,gBAGbzhD,EACa,oBAGb38E,EACa23F,EAAQ,qBAAuB,sBAGjC,sBAkQPp9B,EAAAA,GAAAA,IAAA,WAAShmD,UAAU,QAAO4kD,SAAA,CACvBy9B,IACCz+B,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACL+jE,MAAM,cACN5mB,KAAK,UACL6mB,UAAWuR,GAAQ,cACnB5R,QAASo2C,GAAiB33C,UAE1BhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,eAGd21F,IAAcuV,IACbjmE,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACL+jE,MAAM,cACN5mB,KAAK,UACL6mB,UAAWuR,GAAQ,QACnB5R,QAASonE,GAAuB3oE,UAEhChB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,WAGdqrG,IACCpmE,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACL+jE,MAAM,cACN5mB,KAAK,UACL6mB,UAAWuR,GAAQ,QACnB5R,QAASonE,GAAuB3oE,UAEhChB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,WAGdmrG,IACClmE,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACL+jE,MAAM,cACN5mB,KAAK,UACL6mB,UAAWuR,GAAQ,aACnB5R,QAASmnE,GAAgB1oE,UAEzBhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,WAGdyrG,IACCxmE,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jE,OAAK,EACL+jE,MAAM,cACN5mB,KAAK,UACL6mB,UAAWuR,GAAQ,cACnB5R,QAASqnE,GAAuB5oE,UAEhChB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,kBAO3B,CAyCOoyG,U,oDCttBT,UAAgB,KAAO,WAAW,UAAY,WAAW,iBAAiB,WAAW,cAAgB,WAAW,QAAU,WAAW,KAAO,WAAW,MAAQ,WAAW,KAAO,WAAW,gBAAkB,WAAW,OAAS,WAAW,KAAO,WAAW,MAAQ,WAAW,SAAW,WAAW,cAAgB,WAAW,yBAA2B,WAAW,qBAAuB,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,mBAAqB,WAAW,QAAU,WAAW,aAAe,WAAW,eAAiB,WAAW,aAAe,WAAW,YAAc,WAAW,KAAO,WAAW,UAAY,Y,oDC8CvoB,MAAMC,GAAqD,CACzD,EAAGC,GACH,EAAGC,GACH,GAAIC,IAGAC,GAAoE,CACxEtgE,cAAc,EACdugE,WAAY,OACZtgE,YAAa,GAGTugE,GAA4C,CAChDxgE,cAAc,EACdlmE,SAAU,0BACVymI,WAAY,OACZE,qBAAqB,GAwWvB,IAAentE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBj9E,IACC,MACMm/C,GADWj/C,EAAAA,EAAAA,KAAeF,GACCm/C,gBAC3BqoG,GAAsBC,EAAAA,EAAAA,IAAuCznJ,GAC7DoB,EAAS+9C,GAAmBA,EAAgB/9C,OAC5CgC,EAAOhC,GAASoG,EAAAA,EAAAA,KAAWxH,EAAQoB,QAAUmI,EAC7C60F,EAAYh7F,IAAQqgB,EAAAA,EAAAA,IAAcrgB,GAClCskJ,EAA2B1nJ,EAAO+iB,UAAU2kI,0BAC5C,eAAEnqE,IAAmBzoC,EAAAA,GAAAA,GAAqB90C,GAEhD,MAAO,CACLm/C,kBACAqoG,sBACApmJ,OAAQA,EACRsmJ,2BACAtpD,YACA7gB,mBAjBcN,CArWIqpE,EACtBnnG,kBACAqoG,sBACApmJ,SACAsmJ,2BACAtpD,YACA7gB,qBAEA,MAAM,SACJl5D,EAAQ,iBAAEsjI,EAAgB,qBAAEC,EAAoB,kBAAEC,EAAiB,iBAAEl4I,IACnEsQ,EAAAA,EAAAA,MACEkb,GAAOqgD,EAAAA,GAAAA,KACPiD,GAAgBC,EAAAA,GAAAA,MAEhBopE,EAAW3oG,GAAiBH,YAC5B5F,EAAS0uG,EAAW3oG,EAAgBH,iBAAcz1C,EAIlDw+I,IAFkB5oG,GAAmBA,GAAiBD,QAAQpmC,QAC9DqmC,GAAiBO,cAAc5mC,QACaqmC,GAAiBO,cAC9DP,GAAiBO,cAAcF,MAAM39C,OAAS,GAE7C,aACJmmJ,EAAY,aACZC,EAAY,OACZ/oG,EAAM,cACNgpG,EAAa,gBACbC,IACEpsE,EAAAA,GAAAA,IAAQ,IACL3iC,GAUEgvG,EAAAA,GAAAA,GAAqBhvG,GATnB,CACL4uG,aAAc,EACdC,cAAc,EACd/oG,OAAQ,EACRgpG,cAAe,EACfC,gBAAiB,EACjBE,iBAAkB,IAIrB,CAACjvG,IAEEkvG,GAAgBvsE,EAAAA,GAAAA,IAAQ,KAC5B,GAAK3iC,EAEL,MAAO,CACLuH,MAAOqnG,EACP9oG,SACAqpG,mBAAoBnvG,EAAOmvG,mBAC3BJ,kBACAE,iBAAkBjvG,EAAOivG,mBAE1B,CAACjvG,EAAQ8F,EAAQ8oG,EAAcG,IAE5BzkE,GAAO3H,EAAAA,GAAAA,IAAQ,IACfgsE,EACK,CACL,CACE3lJ,KAAM,YACNyN,MAAOsrB,EAAK,sBAAuBgkB,GAAiBD,QAAQpmC,MAAO,MAErE,CACE1W,KAAM,kBACNyN,MAAOsrB,EAAK,qBAAsBgkB,GAAiBO,cAAc5mC,MAAO,OAIvE,GACN,CAACivI,EAAuB5sH,EAAMgkB,GAAiBD,QAAQpmC,MAAOqmC,GAAiBO,cAAc5mC,QAE1F06H,GAAaz3D,EAAAA,GAAAA,IAAQ,IAClB58B,GAAiBD,QAAUC,EAAgBD,QAAQM,KAAK39C,OAAS,EAAI,EAAI,EAC/E,CAACs9C,KAEGwkC,EAAWiwD,IAAgBr4D,EAAAA,GAAAA,IAASi4D,GAErCa,EAAqB1wD,EAAYD,EAAK7hF,OAAS,EAAI6hF,EAAK7hF,OAAS,EAAI8hF,EAErEklD,EAAUnlD,EAAK2wD,IAAqBjyI,KAEpC2hF,EAAYL,EAAK7pE,UAAU,EAAGzX,UAAWA,IAASymI,GAElD2f,GAAsBzsE,EAAAA,GAAAA,IAAQ,KAClC,IAAK58B,EAAiB,OAEtB,MAAMK,EAAOuoG,EAAqC,cAAZlf,EAClC1pF,EAAgBD,OAASC,EAAgBO,aAAgBP,EAAgBD,OAC7E,IAAKM,GAAM1mC,MAAO,OAElB,MAAM2vI,EAAoBjpG,EAAKA,KAAK9gC,OAAO,CAACmsH,EAAO7pF,IAC1C6pF,GAAS7pF,EAAM0nG,YAAc,GACnC,GAGGC,EADanpG,EAAK1mC,MACS2vI,EAEjC,OAAOE,EAAc,EAAIA,OAAcp/I,GACtC,CAACw+I,EAAuB5oG,EAAiB0pF,IAEtC+f,GAAkBxpE,EAAAA,GAAAA,GAAiBspE,IACvC9uE,EAAAA,GAAAA,GAAA,OAAK5jD,UAAWwrE,GAAOqnD,SAASjuE,UAC9BoB,EAAAA,GAAAA,IAAA,OAAKhmD,WAAW0lD,EAAAA,GAAAA,GAAe8lB,GAAOsnD,cAAetnD,GAAOunD,0BAA0BnuE,SAAA,EACpFhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,QAAQ3e,UAAWwrE,GAAOwnD,qBACrCpvE,EAAAA,GAAAA,GAAA,OAAK5jD,UAAWwrE,GAAOynD,mBAAmBruE,SAAE8tE,UAK5CQ,GAAsB9pE,EAAAA,GAAAA,GAAiBp+B,IAC3C,GAAKA,EAAMmoG,gBAAmBnoG,EAAMjD,OAIpC,OACE67B,EAAAA,GAAAA,GAAA,OAAK5jD,UAAWwrE,GAAOqnD,SAASjuE,UAC9BoB,EAAAA,GAAAA,IAAA,OAAKhmD,WAAW0lD,EAAAA,GAAAA,GAAe8lB,GAAOsnD,eACnC9nG,EAAMmoG,gBAAkB3nD,GAAO4nD,qBAChC5nD,GAAOunD,yBACPvnD,GAAO6nD,qBAAqBzuE,SAAA,EAE5BhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,OAAO3e,UAAWwrE,GAAOwnD,qBACpCpvE,EAAAA,GAAAA,GAAA,OAAK5jD,UAAWwrE,GAAOynD,mBAAmBruE,SACvCz/C,EAAK6lB,EAAMmoG,eACR,mBAAqB,yBAO7BG,GAAqBlqE,EAAAA,GAAAA,GAAiB39D,IACrCA,GAML4C,EAAS,CAAE/hB,GAAImf,IACfmmI,KANEj4I,EAAiB,CACf3O,QAASm6B,EAAK,uCAQdouH,GAAkBnqE,EAAAA,GAAAA,GAAiBp+B,IAGvC,IAAIwoG,EAYJ,OAdiBjzI,QAAQyqC,GAAO1jC,SAI9BksI,EAAa,IACRpC,GACHv3I,MAAOsrB,EAAK,QAAS6lB,EAAM1jC,SAI1B0jC,EAAMv/B,SACT+nI,EAAalC,KAIb1tE,EAAAA,GAAAA,GAAC+jE,GAAAA,EAAQ,CACP3nH,WAAW0lD,EAAAA,GAAAA,GAAe8lB,GAAOioD,UAAW,uBAC5CttE,QAASA,IAAMmtE,EAAmBtoG,EAAMv/B,QAAQm5D,UAEhDhB,EAAAA,GAAAA,GAACs1C,GAAAA,EAAe,CACdl5F,UAAWwrE,GAAO1sF,KAClB2M,OAAQu/B,EAAMv/B,OACd+nI,WAAYA,EACZpwG,OAAQje,EAAK,iBAAiBuuH,EAAAA,GAAAA,GAAiBvuH,EAAsB,IAAhB6lB,EAAM2oG,UAC3DC,eAAa,EACb9L,eAAa,EACb+L,QAAM,EACNC,YAAU,EACVC,YAAa/oG,EAAM0nG,WAAaE,EAAgB5nG,EAAM0nG,iBAAcn/I,EACpEygJ,aAAcd,EAAoBloG,SAMpCipG,GAAsB7qE,EAAAA,GAAAA,GAAgB,KAC1CyoE,EAAkB,CAAEzmJ,aAGhBioI,GAAiBjqD,EAAAA,GAAAA,GAAiB7e,IACtCA,EAAE+Y,iBACFquE,EAAiB,CAAEpoG,QAAqB,oBAAZspF,MAGxBqhB,GAA+B9qE,EAAAA,GAAAA,GAAiBhhC,IACpDypG,EAAkB,CAAEzmJ,SAAQg9C,sBAsB9B,OACE49B,EAAAA,GAAAA,IAAA,OAAKhmD,WAAW0lD,EAAAA,GAAAA,GAAe8lB,GAAO8xB,KAAM,+BAA+B14C,SAAA,EACvEktE,IAAYluE,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,IACrB+sE,GAAYQ,IACXtsE,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEoB,EAAAA,GAAAA,IAAA,OAAKhmD,UAAWwrE,GAAO2oD,QAAQvvE,SAAA,EAC7BhB,EAAAA,GAAAA,GAACwwE,GAAAA,EAAe,CACdC,SAAUlvH,EAAK,cAAe6sH,GAC9BsC,UAAWrC,EAAe9sH,EAAK,cAAe6sH,EAAe,QAAKz+I,EAClE4R,SAAU+sI,EACVqC,mBAAmBC,EAAAA,GAAAA,IAActrG,GACjC8pG,kBAAkB,WAEpBpvE,EAAAA,GAAAA,GAAC6wE,GAAAA,EAAkB,CAACz0H,UAAWwrE,GAAO70C,MAAOc,WAAY66F,EAAelmJ,KAAK,aAE9EkmJ,EAAcD,mBACbrsE,EAAAA,GAAAA,IAAA,OAAKhmD,UAAWwrE,GAAO2oD,QAAQvvE,SAAA,EAC7BhB,EAAAA,GAAAA,GAAA,MAAI5jD,UAAWwrE,GAAOkpD,cAAetuE,IAAKjhD,EAAKkhD,MAAQ,WAAQ9yE,EAAUqxE,SACtEz/C,EAAK,+BAEPmtH,GAAeD,kBAAkBt5I,IAAKqvC,IACrC,MAAMusG,EAAkB,UAAWvsG,EAEnC,OACEw7B,EAAAA,GAAAA,GAAC+jE,GAAAA,EAAQ,CAEP3nH,UAAU,sBAEVmmD,QAASA,IAAM+tE,EAA6B9rG,GAAiBw8B,UAE7DoB,EAAAA,GAAAA,IAAA,OAAKhmD,WAAW0lD,EAAAA,GAAAA,GAAe8lB,GAAOpoD,OAAQ,oBAAoBwhC,SAAA,EAChEhB,EAAAA,GAAAA,GAAA,OAAAgB,SACG+vE,GAEG/wE,EAAAA,GAAAA,GAAA,OACE+sB,IAAKikD,GACL50H,UAAWwrE,GAAOqpD,aAClBjkD,IAAKzrE,EAAK,eAGZy+C,EAAAA,GAAAA,GAAA,OACE+sB,IAAKqgD,GAAkB5oG,EAAgBzE,SAAWqtG,GAAkB,GACpEhxH,UAAWwrE,GAAOqpD,aAClBjkD,IAAKzrE,EAAK,iBAIlB6gD,EAAAA,GAAAA,IAAA,OAAKhmD,UAAWwrE,GAAOpgD,KAAKw5B,SAAA,EAC1BhB,EAAAA,GAAAA,GAAA,MAAAgB,SACG+vE,EACGxvH,EAAK,+BAAgCijB,EAAgB9gC,OACrD6d,EAAK,qCAAsCijB,EAAgByqG,aAEjEjvE,EAAAA,GAAAA,GAAA,KAAG5jD,UAAWwrE,GAAOspD,MAAMlwE,SAEvB+vE,EAAkBxvH,EAAK,8BAA+BijB,EAAgByqG,UAClE1tH,EAAK,wBAAyBijB,EAAgBzE,cAIxDigC,EAAAA,GAAAA,GAAA,OAAK5jD,UAAWwrE,GAAOqnD,SAASjuE,UAC9BoB,EAAAA,GAAAA,IAAA,OAAKhmD,WAAW0lD,EAAAA,GAAAA,GAAe8lB,GAAOsnD,cACpCtnD,GAAOunD,yBACPvnD,GAAO6nD,qBAAqBzuE,SAAA,EAE5BhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,QAAQ3e,UAAWwrE,GAAOwnD,qBACrCpvE,EAAAA,GAAAA,GAAA,OAAK5jD,UAAWwrE,GAAOynD,mBAAoB7sE,IAAKjhD,EAAKkhD,MAAQ,WAAQ9yE,EAAUqxE,SAC5E+vE,EAAkBvsG,EAAgBc,OAC/Bd,EAAgByqG,UAAYnB,GAA4BqD,EAAAA,gBA3C/D3sG,EAAgB97C,OAmD3Bs3E,EAAAA,GAAAA,GAAA,KAAG5jD,UAAU,kBAAiB4kD,SAAmBz/C,EAAK,+BAAnB,kBAGvC6gD,EAAAA,GAAAA,IAAA,OAAKhmD,UAAWwrE,GAAO2oD,QAAQvvE,SAAA,CAC5BmtE,GACC/rE,EAAAA,GAAAA,IAAA,OACEhmD,WAAW0lD,EAAAA,GAAAA,GAAe8lB,GAAOwpD,aAAcxpD,GAAO57F,SAASg1E,SAAA,EAE/DhB,EAAAA,GAAAA,GAACiK,GAAAA,GAAU,CACTlF,IAAKF,EACL9pC,MAAMmvC,EAAAA,GAAAA,GAAsB,iBAAkBvG,OAAgBh0E,EAAW4xB,EAAKkhD,OAC9E0H,UAAWA,EACXC,YAAaN,EAAK7hF,OAClBq8I,qBAAmB,EAAAtjE,SA5GnC,WACE,IAAIqwE,EAOJ,GANgB,cAAZpiB,EACFoiB,EAAe9rG,GAAiBD,QAAQM,KACnB,oBAAZqpF,IACToiB,EAAe9rG,GAAiBO,cAAcF,OAG5CyrG,GAAiBA,GAAcppJ,OAInC,OACE+3E,EAAAA,GAAAA,GAAA,OAAK5jD,UAAWwrE,GAAO2oD,QAAQvvE,SAC5BqwE,GAAcl8I,IAAKiyC,GAAUuoG,EAAgBvoG,KAGpD,CA6FiBssD,MAEH1zB,EAAAA,GAAAA,GAAC4J,GAAAA,EAAO,CAACG,UAAW0wD,EAAoB3wD,KAAMA,EAAME,YAAagwD,QAGnE53D,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAA,MAAI5jD,UAAWwrE,GAAOkpD,cAAetuE,IAAKjhD,EAAKkhD,MAAQ,WAAQ9yE,EAAUqxE,SACtEz/C,EAAK,sBAAuBgkB,GAAiBD,QAAQpmC,UAEtDqmC,GAAiBD,QAAQM,MAAM39C,SAC/B+3E,EAAAA,GAAAA,GAAA,OAAK5jD,UAAWwrE,GAAO0pD,UAAUtwE,SAC9Bz/C,EAAKijE,EAAY,iBAAmB,yBAGxCj/C,GAAiBD,QAAQM,MAAMzwC,IAAKiyC,GAAUuoG,EAAgBvoG,OAGlEzqC,QAAQiyI,KACPxsE,EAAAA,GAAAA,IAAC2hE,GAAAA,EAAQ,CAEP3nH,UAAWwrE,GAAO2pD,SAClB3lC,SAAUrmE,GAAiBS,kBAC3Bu8B,QAASktD,EAAezuD,SAAA,CAEvBz7B,GAAiBS,mBAChBg6B,EAAAA,GAAAA,GAAC8L,GAAAA,EAAO,CAAC1vD,UAAWwrE,GAAO4pD,mBAE3BxxE,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,OAAO3e,UAAWwrE,GAAO6pD,OAErClwH,EAAK,YAAaqtH,EAAqB,OAVpC,iBAcV5uE,EAAAA,GAAAA,GAAC0xE,GAAAA,EAAS,CAACt1H,UAAWwrE,GAAO2oD,QAAShwH,KAAMif,EAAQmyG,SAAUC,WAAS,EAAC37I,MAAOsrB,EAAK,qBACnFqsH,IACCxrE,EAAAA,GAAAA,IAAA,OAAKhmD,UAAWwrE,GAAO2oD,QAAQvvE,SAAA,EAC7BhB,EAAAA,GAAAA,GAAC+jE,GAAAA,EAAQ,CAEP58H,KAAK,OACLo7D,QAAS8tE,EACTj0H,UAAWwrE,GAAOiqD,eAAe7wE,SAEhCz/C,EAAK,8BALF,cAONy+C,EAAAA,GAAAA,GAAA,KAAG5jD,UAAU,kBAAiB4kD,SAC3Bz/C,EACCijE,EAAY,wBAA0B,+BAFP,0BC1YjD,GAN8C7kB,IAC5C,MAAM6sE,GAAoB3sE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,qBAEzD,OAAOmsE,GAAoBxsE,EAAAA,GAAAA,GAACwsE,EAAiB,IAAK7sE,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,K,gBCLxE,MAOA,GAPmDxB,IACjD,MAAM,OAAE17B,GAAW07B,EACbmyE,GAAyBjyE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,0BAA2Bp8B,GAEzF,OAAO6tG,GAAyB9xE,EAAAA,GAAAA,GAAC8xE,EAAsB,IAAKnyE,SAAYhwE,G,gBCX1E,UAAgB,KAAO,WAAW,MAAQ,WAAW,OAAS,WAAW,MAAQ,WAAW,QAAU,WAAW,QAAU,WAAW,gBAAkB,WAAW,YAAc,WAAW,YAAc,WAAW,QAAU,WAAW,eAAiB,WAAW,YAAc,WAAW,WAAa,YC6B5S,IAAIoiJ,GACAC,GAWJ,MAAMC,GAA6B,CACjCC,cAAe,kCACfC,aAAc,kCAEVC,GAAsBjkJ,OAAO8G,KAAKg9I,IA8OxC,IAAezxE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBj9E,IACC,MAAMiO,GAAW/N,EAAAA,EAAAA,KAAeF,IAE9BwhC,UACE8qB,OAAO,YACLzW,KAGF71C,EACE2/C,EAAyB1xC,EAAS0xC,uBAClCv+C,EAASu+C,GAA0BA,EAAuBv+C,OAC1DgC,EAAOhC,GAASoG,EAAAA,EAAAA,KAAWxH,EAAQoB,QAAUmI,EAC7CkjD,GAAOrrC,EAAAA,EAAAA,KAAmBphB,EAAQoB,IAAUsrD,eAC5CysD,EAAY5iG,QAAQnT,GAAM+1G,WAMhC,MAAO,CACL/3G,OAAQA,EACRqrD,OACAgB,WAPiBx/C,EAASw/C,WAAWw+F,aAQrC9yC,YACA+yC,kCAPwClsJ,EAAO+iB,UAAUmpI,kCAQzDr2G,gBA1BconC,CAnOWspE,EAC7BnlJ,SACAqrD,OACAgB,aACA0rD,YACA+yC,oCACAr2G,kBAEA,MAAM,kCAAEs2G,EAAiC,kCAAEC,EAAiC,iBAAEx1D,IAAqB32E,EAAAA,EAAAA,MAC7F8tE,GAAUvS,EAAAA,GAAAA,KACVrgD,GAAOs/C,EAAAA,GAAAA,KAEPkpB,GAAejlB,EAAAA,GAAAA,OACd2vB,EAASitB,IAAc//C,EAAAA,GAAAA,KAAS,GACjC8wE,GAAe3tE,EAAAA,GAAAA,IAAoB,IAAIx0E,KACvCoiJ,GAAc5tE,EAAAA,GAAAA,IAAoB,IAAIx0E,KAEtCqxH,GAAcC,EAAAA,GAAAA,MACb+wB,EAA8BC,EAA4BC,IAA+B9hE,EAAAA,GAAAA,IAAQ,IACjG+hE,EAA6BC,EAA+BC,IAAkCjiE,EAAAA,GAAAA,KAC/FkiE,EAAmBp/F,GAAYq/F,UAAUD,iBACzCE,EAAsBt/F,GAAYq/F,UAAUC,oBAC5CC,EAAc7zC,GAAa+yC,GAAqC31I,QAAQs2I,IACzEE,GAELryE,EAAAA,GAAAA,IAAU,KACJt5E,IACF+qJ,EAAkC,CAAEnqJ,OAAQZ,IAC5Cw1F,MAED,CAACx1F,EAAQ+qJ,KAEZzxE,EAAAA,GAAAA,IAAU,KACR,iBAzDJjmE,iBAME,OALKk3I,KACHA,GAAqB,gCACrBC,SAAoBD,IAGfA,EACT,CAmDYsB,GAED5+C,GAKD1K,EAAaztE,SACflS,MAAMhK,KAAK2pF,EAAaztE,QAAQ0kD,UAAU14E,QAASgrJ,IACjDA,EAAMvlC,UAAY,GAClBulC,EAAM1wC,UAAUryG,IAAIq3F,GAAO2rD,UAI/Bd,EAAan2H,QAAQrF,QACrBy7H,EAAYp2H,QAAQrF,QAEf48B,GAAek2C,EAAaztE,UAIjC81H,GAAoB9pJ,QAAQ,CAACyyC,EAAM/6B,KACjC,MAAMwzI,EAAQ3/F,EAAW9Y,GACzB,KAAK04G,EAAAA,GAAAA,GAAQD,GACX,OAEF,MAAME,EAA8B,UAApBF,EAAMG,UAChB9+G,EAA8B,UAApB2+G,EAAMG,UAEtB,IAAID,IAAWjB,EAAan2H,QAAQvrB,IAAIgqC,GAAxC,CAIA,GAAIlG,EAIF,OAHA49G,EAAan2H,QAAQ/rB,IAAIwqC,QACzB23G,EAAYp2H,QAAQ/rB,IAAIwqC,GAK1Bi3G,GAAY4B,OAAO7pD,EAAaztE,QAAS0kD,SAAShhE,GAAuB,CACvE/J,MAAOk+E,EAAS89D,GAAsDl3G,OACnEy4G,IAGLf,EAAan2H,QAAQ/rB,IAAIwqC,GAEzBgvD,EAAaztE,QAAS0kD,SAAShhE,GAAO4iG,UAAUa,OAAO7b,GAAO2rD,OAhB9D,IAmBF5xB,MA/CED,GAAW,EAgDd,EApDD,IAqDC,CAACjtB,EAAS5gD,EAAYsgC,EAAS3sF,EAAQqrD,EAAM8uE,IAoChD,MAAMkyB,GAAU1xE,EAAAA,GAAAA,IAAQ,KACtB,MAAM2xE,EAAW3/D,EAAQ,aACzB,OAAO5yD,EACL,mBACA,CACEhB,MACE6hD,EAAAA,GAAAA,IAACuqB,GAAAA,EAAI,CAACkvB,WAAS,EAACt5C,QAASqwE,EAA2B5xE,SAAA,CACjD8yE,GACD9zE,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,aAIjB,CACEkxD,WAAW,KAGd,CAAC1qE,EAAM4yD,IAEJ4/D,GAAc5xE,EAAAA,GAAAA,IAAQ,KAC1B,MAAM2xE,EAAW3/D,EAAQ,aACzB,OAAO5yD,EACL,8BACA,CACEhB,MACE6hD,EAAAA,GAAAA,IAAC4xE,GAAAA,EAAQ,CAAC9iI,IAAKijE,EAAQ,gCAAiChgF,KAAM2/I,EAAS9yE,SAAA,CACpE8yE,GACD9zE,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,aAIjB,CACEkxD,WAAW,KAGd,CAAC1qE,EAAM4yD,IAEJ8/D,GAAkCzuE,EAAAA,GAAAA,GAAgB,KAClDvpC,EACFu2G,EAAkC,CAChChrJ,WAGFurJ,MAIJ,OAAKt+C,GAAY5gD,GAKfuuB,EAAAA,GAAAA,IAAA,OAAKhmD,WAAW0lD,EAAAA,GAAAA,GAAe8lB,GAAO8xB,KAAM,gBAAiBjlB,GAAW7M,GAAOssD,OAAOlzE,SAAA,EACpFhB,EAAAA,GAAAA,GAAA,OAAK5jD,WAAW0lD,EAAAA,GAAAA,GAAe8lB,GAAO2oD,QAAS3oD,GAAOisD,SAAS7yE,SAAE6yE,KAEjE7zE,EAAAA,GAAAA,GAAC6wE,GAAAA,EAAkB,CACjBh9F,WAAYA,EACZsgG,WAAS,EACT3rJ,KAAK,eACLyN,MAAOk+E,EAAQ,wBACfroE,UACEk0D,EAAAA,GAAAA,GAAA,OAAK5jD,UAAWwrE,GAAOwsD,WAAWpzE,SAAEmT,EAAQ,oCAI9Cs+D,EAAan2H,QAAQy/B,OAAQikB,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KAEvCnB,EAAAA,GAAAA,GAAA,OAAK+E,IAAKglB,EAAc3tE,UAAWwrE,GAAO2oD,QAAQvvE,SAC/CoxE,GAAoBlqJ,OAAOyU,SAASxH,IAAKq+I,IACxCxzE,EAAAA,GAAAA,GAAA,OAAiB5jD,WAAW0lD,EAAAA,GAAAA,GAAe8lB,GAAO4rD,MAAO5rD,GAAO2rD,SAAtDC,OAIdpxE,EAAAA,GAAAA,IAAA,OAAKhmD,UAAWwrE,GAAO2oD,QAAQvvE,SAAA,CAC5BmT,EAAQ,kCA3Gf,WACE,MAAOkgE,EAAgBC,GAAkBrB,EAAmBA,EAAiB/d,QAAQ,GAAG3vH,MAAM,KAAO,CAAC,IAC/FgvI,EAAgBC,GAAkBvB,GACpCp/F,GAAY4gG,SAAWxB,EAAmBp/F,EAAW4gG,SAASvf,QAAQ,GAAG3vH,MAAM,KAAO,CAAC,GAE5F,OACE68D,EAAAA,GAAAA,IAAA,OAAKhmD,UAAWwrE,GAAO8sD,gBAAgB1zE,SAAA,EACrCoB,EAAAA,GAAAA,IAAA,OAAKhmD,UAAWwrE,GAAO+sD,QAAQ3zE,SAAA,EAC7BhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC1mD,UAAWwrE,GAAOgtD,YAAa75G,KAAK,aAC1CqnC,EAAAA,GAAAA,IAAA,KAAGhmD,UAAWwrE,GAAOitD,YAAY7zE,SAAA,CAC9BqzE,EACAC,GACClyE,EAAAA,GAAAA,IAAA,QAAMhmD,UAAWwrE,GAAOktD,YAAY9zE,SAAA,CAAC,IAElCszE,UAED3kJ,QAGP,KACDyyE,EAAAA,GAAAA,IAAA,QAAMhmD,UAAWwrE,GAAOmtD,QAAQ/zE,SAAA,CAAC,MAE9BuzE,EACAC,GACCpyE,EAAAA,GAAAA,IAAA,QAAMhmD,UAAWwrE,GAAO4sD,eAAexzE,SAAA,CAAC,IAErCwzE,UAED7kJ,OAIZ,CA6EOqlJ,IAEDh1E,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLl6E,KAAK,SACL+5E,QAAS0xE,EACTroC,UAAWwnC,EAAYpyE,SAEtBmT,EAAQ,2BAGXnU,EAAAA,GAAAA,GAAA,OAAK5jD,UAAWwrE,GAAOwsD,WAAWpzE,SAAE+yE,QAGtC/zE,EAAAA,GAAAA,GAAC8xE,GAAsB,CACrB7tG,OAAQ0uG,EACRxvE,QAAS0vE,KAEX7yE,EAAAA,GAAAA,GAACoxC,GAAAA,EAAa,CACZ6jC,eAAa,EACbhxG,OAAQ6uG,EACR3vE,QAAS6vE,EACT1hC,eAAgB0hC,EAChB3hC,aAAc9vF,EAAK,MAAMy/C,UAEzBhB,EAAAA,GAAAA,GAAA,KAAAgB,UAAIqrB,EAAAA,GAAAA,GAAWlY,EAAQ,oCAAqC,CAAC,eApD1DnU,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,OClNnB,GANuCxB,IACrC,MAAM4sE,GAAa1sE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,cAElD,OAAOksE,GAAavsE,EAAAA,GAAAA,GAACusE,EAAU,IAAK5sE,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KCG1D,GAN4CxB,IAC1C,MAAM8sE,GAAkB5sE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,mBAEvD,OAAOosE,GAAkBzsE,EAAAA,GAAAA,GAACysE,EAAe,IAAK9sE,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KCCpE,GAN+B+zE,KAC7B,MAAMpL,GAAgBjqE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAErD,OAAOypE,GAAgB9pE,EAAAA,GAAAA,GAAC8pE,EAAa,KAAM9pE,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KCwFrD,IAAeX,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBj9E,IAAM,CACL+uJ,eAAeC,EAAAA,EAAAA,KAAwBhvJ,KAFvBi9E,CAzEyBupE,EAC3CzmF,WACAgvF,oBAEA,MAAM,aAAEhiJ,IAAiBkT,EAAAA,EAAAA,MAEnBuqG,GAAqBprC,EAAAA,GAAAA,GAAiBp+E,IAC1C+L,EAAa,CAAE3L,OAAQJ,EAAQI,OAAQ8F,UAAWlG,EAAQsB,OAG5D,GAAKy9D,EAIL,OACE6Z,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,YAAW4kD,UACxBhB,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,mCAAkC4kD,SACrB,IAAzBm0E,EAAcltJ,QACb+3E,EAAAA,GAAAA,GAAC+iE,GAAAA,EAAY,CACX5uI,KAAK,0BACLgX,YAAY,mEAGd60D,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,sBAAqB4kD,SACjCm0E,EAAchgJ,IAAI,CAAC/N,EAASqE,KAC3B,MAAM6B,GAAYwuG,EAAAA,GAAAA,IAAqB10G,GACjC2mG,GAAa,EAEnB,OACE/tB,EAAAA,GAAAA,GAAA,OAA6C5jD,UAAU,0BAAyB4kD,UAC9EhB,EAAAA,GAAAA,GAAA,OACE5jD,UAAU,6BACVmmD,QAASA,IAAMquC,EAAmBxpH,GAAS45E,UAE3ChB,EAAAA,GAAAA,GAAC0uB,GAAoB,CAEnBhmG,GAAI,uBAAuB4E,IAC3BlG,QAASA,EACT2mG,WAAYA,EACZY,iBAAkB,EAClBC,eAAa,EAAA5tB,UAEbhB,EAAAA,GAAAA,GAACg8B,GAAAA,EAAO,CACN50G,QAASA,EACT2mG,WAAYA,EACZkO,gBAAc,EACdhuG,SAAUD,EAAAA,GACVkI,gBAAgB,SAChB6lG,YAAU,EACVG,WAAS,EACTm5C,aAAW,EACXC,gBAAc,EACd3mD,iBAAkB,EAClBmM,aAAa,EACbW,gBAAc,EACdC,eAAa,EACbC,wBAAsB,EACtBC,uBAAqB,EACrBjB,aAAclvG,IAAM0pJ,EAAcltJ,OAAS,EAC3C2mG,eAAa,KAxBV,UAAUthG,QANX,GAAGlG,EAAQI,UAAUJ,EAAQsB,iBCSjD6sJ,GAAqB,IAAMv4F,EAAAA,IAC3Bw4F,GAAqBrnJ,OAAO8G,KAAKwgJ,EAAAA,IAAoBxtJ,OAAS,EAC9DytJ,GAA2BvnJ,OAAO8G,KAAKm0I,EAAAA,IAAmBnhJ,OAAS,EAEzE,SAAS0tJ,KACP,MAAMC,EAAcvpJ,SAASizE,cAAc,mCACvCs2E,GACFA,EAAY13D,MAEhB,CAEA,MAmWA,IAAe1d,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GAAUkrF,eACT,MAAM,OAAE9pF,EAAM,SAAEyG,IAAaiF,EAAAA,EAAAA,KAAyB9M,IAAW,CAAC,EAE5DyvJ,GAAuBC,EAAAA,EAAAA,KAA2B1vJ,IAClD,eAAEu9E,IAAmBzoC,EAAAA,GAAAA,GAAqB90C,IAC1C,WACJi/B,EAAU,4BAAEu+C,EAA2B,eAAE1pB,EAAc,uBAAEoS,IACvDhmE,EAAAA,EAAAA,KAAeF,GACb2vJ,EAAuBvuJ,EAAS69B,EAAW9sB,SAAS/Q,IAAS6+D,gBAAa12D,EAE1E03D,EAAkB7/D,GAASD,EAAAA,EAAAA,KAAqBnB,EAAQoB,QAAUmI,EAClEmP,EAAgBtX,GAASuK,EAAAA,EAAAA,IAAiBvK,EAAQyG,EAAU7H,EAAOiC,oBAAiBsH,EAE1F,MAAO,CACL2qF,YAAY07D,EAAAA,EAAAA,KAA4B5vJ,EAAQkrF,GAChD9pF,SACAyG,WACAgoJ,eAAgBt5I,QAAQnV,GAAUquJ,GAClClyE,iBACAC,8BACAmyE,uBACA77F,iBACAoS,yBACAjF,kBACAvoD,kBAzBcukE,CAnW2B6yE,EAC7C57D,aACA9yF,SACAyG,WACAqjF,WACA2kE,iBACAtyE,iBACAC,8BACAmyE,uBACA77F,iBACAoS,yBACAjF,kBACAvoD,oBAEA,MAAM,eACJq3I,EAAc,iBACdnO,EAAgB,sBAChBF,EAAqB,kBACrBC,EAAiB,iBACjBqO,EAAgB,eAChBC,EAAc,6BACd7d,EAA4B,yBAC5B0P,EAAwB,iBACxBD,EAAgB,wBAChBqO,EAAuB,sBACvBC,EAAqB,oBACrBC,EAAmB,4BACnBC,EAA2B,oBAC3BC,EAAmB,sBACnBC,EAAqB,oBACrBC,EAAmB,qBACnB5I,EAAoB,0BACpB6I,EAAyB,4BACzBC,EAA2B,gBAC3Bp+D,IACEryE,EAAAA,EAAAA,MAEE0jF,GAAejlB,EAAAA,GAAAA,OAEbj+E,MAAOH,IAAgB4sH,EAAAA,GAAAA,MACxB6kB,EAAc4e,IAAmBp1E,EAAAA,GAAAA,IACtCta,IAAoBvoD,EAAgBowH,EAAAA,GAAaI,aAAeJ,EAAAA,GAAagJ,UAExE0P,EAAkBoP,IAAuBr1E,EAAAA,GAAAA,IAA4BynE,EAAAA,GAAkBY,UACvFiN,EAAsBC,IAA2Bv1E,EAAAA,GAAAA,OACjDw1E,EAAyBC,IAA8Bz1E,EAAAA,GAAAA,MACxD01E,EAAiBlf,IAAiBjJ,EAAAA,GAAagJ,QAE/Cj0F,OAAwBt0C,IAAf2qF,EACTqrD,EAAYrrD,IAAem7D,EAAAA,GAAmB6B,SAC9C1R,EAAetrD,IAAem7D,EAAAA,GAAmBnoB,WACjD0Z,EAAe1sD,IAAem7D,EAAAA,GAAmBlJ,WACjDtF,EAAsB3sD,IAAem7D,EAAAA,GAAmBjJ,kBACxDtF,EAAoB5sD,IAAem7D,EAAAA,GAAmBhJ,gBACtDrF,EAAoB9sD,IAAem7D,EAAAA,GAAmB/I,gBACtDvF,EAA2B7sD,IAAem7D,EAAAA,GAAmB9I,uBAC7DtF,GAAkB/sD,IAAem7D,EAAAA,GAAmB3L,cACpDxC,GAAchtD,IAAem7D,EAAAA,GAAmBpoB,UAChDka,GAAgBjtD,IAAem7D,EAAAA,GAAmBjoB,YAClDka,GAAsBptD,IAAem7D,EAAAA,GAAmB1L,cACxDvC,GAAkBltD,IAAem7D,EAAAA,GAAmBvoB,YACpDua,GAAiBntD,IAAem7D,EAAAA,GAAmBtoB,UACnDwa,GAAcrtD,IAAem7D,EAAAA,GAAmB7I,UAChD2K,GAAe7wJ,GAAeI,EAAAA,KAE7B+sF,GAAsBg2D,KAA2BloE,EAAAA,GAAAA,KAAU19B,GAE5D4oG,IAAsBxkC,EAAAA,GAAAA,GAAiB/tB,GAAY,GAAO27D,KAAoB,GAEpFuB,EAAAA,GAAAA,GAAe,CACbztD,eACA0tD,SAAU,gDACT,CAACn9D,EAAYstD,EAAkBpgJ,EAAQyG,IAE1C,MAAMypJ,IAAQlyE,EAAAA,GAAAA,GAAgB,CAACmyE,GAAiB,KAC9C,OAAQr9D,GACN,KAAKm7D,EAAAA,GAAmB1L,cACtBvR,EAA6B,CAAEj+E,uBAAwB4wE,EAAAA,GAAuBysB,SAC9E,MACF,KAAKnC,EAAAA,GAAmB6B,SACtB,GAAID,GAAkBM,IAAmBtwF,EAAiB,CACxD0vF,EAAgB7nB,EAAAA,GAAagJ,SAC7B,KACF,CACAie,EAAe,CAAEhnJ,OAAO,GAAS,CAAE21F,gBAAgB,IACnD,MACF,KAAK2wD,EAAAA,GAAmBnoB,WACtB,OAAQsa,GACN,KAAKwB,EAAAA,GAAkBY,QACrBhC,IACA,MACF,KAAKoB,EAAAA,GAAkBc,gBACvB,KAAKd,EAAAA,GAAkBgB,WACvB,KAAKhB,EAAAA,GAAkBoB,iBACvB,KAAKpB,EAAAA,GAAkByO,UACvB,KAAKzO,EAAAA,GAAkBsB,mBACvB,KAAKtB,EAAAA,GAAkBkB,mBACvB,KAAKlB,EAAAA,GAAkBsC,aACvB,KAAKtC,EAAAA,GAAkBG,QACvB,KAAKH,EAAAA,GAAkB4C,UACvB,KAAK5C,EAAAA,GAAkBgD,aACvB,KAAKhD,EAAAA,GAAkB0B,oBACrBkM,EAAoB5N,EAAAA,GAAkBY,SACtC,MACF,KAAKZ,EAAAA,GAAkB4B,2BACvB,KAAK5B,EAAAA,GAAkBwB,kBACvB,KAAKxB,EAAAA,GAAkB8B,qBACrB8L,EAAoB5N,EAAAA,GAAkBoB,kBACtC0M,OAAwBvnJ,GACxBynJ,OAA2BznJ,GAC3B,MACF,KAAKy5I,EAAAA,GAAkBkD,mBACrB0K,EAAoB5N,EAAAA,GAAkBgB,YACtC,MACF,KAAKhB,EAAAA,GAAkBkC,gBACvB,KAAKlC,EAAAA,GAAkBoC,mBACvB,KAAKpC,EAAAA,GAAkB0C,eACvB,KAAK1C,EAAAA,GAAkBgC,mBACrB4L,EAAoB5N,EAAAA,GAAkBsB,oBACtC,MACF,KAAKtB,EAAAA,GAAkBC,WACvB,KAAKD,EAAAA,GAAkB8C,WACrB8K,EAAoB5N,EAAAA,GAAkBG,SACtCiN,EAAoB,CAAEhvJ,OAAQA,EAASy+B,YAAQt2B,IAC/Cu4I,EAAyB,CAAE1gJ,OAAQA,EAASy+B,YAAQt2B,IAIxD,MAEF,KAAK8lJ,EAAAA,GAAmBjJ,kBACtB8J,IACA,MACF,KAAKb,EAAAA,GAAmBhJ,gBACtB8J,IACA,MACF,KAAKd,EAAAA,GAAmBlJ,WACtBtE,IACA,MACF,KAAKwN,EAAAA,GAAmB/I,gBACtBsB,IACA,MACF,KAAKyH,EAAAA,GAAmB9I,uBACtBmK,IACA,MACF,KAAKrB,EAAAA,GAAmB3L,cACtB6L,KACA7N,EAAsB,CAAE/uH,WAAOppB,IAC/B,MACF,KAAK8lJ,EAAAA,GAAmBpoB,UACtBsoB,KACA5N,EAAkB,CAAEhvH,WAAOppB,IAC3B,MAEF,KAAK8lJ,EAAAA,GAAmBjoB,YACtB4oB,IACA,MACF,KAAKX,EAAAA,GAAmBvoB,YACtBypB,IACA,MACF,KAAKlB,EAAAA,GAAmBtoB,UACtBypB,IACA,MACF,KAAKnB,EAAAA,GAAmB7I,UACtBl0D,EAAgB,CAAEvpF,OAAO,OAKzB2oJ,IAAyBtyE,EAAAA,GAAAA,GAAgB,CAACw+D,EAAU+T,KACxDb,EAAwBlT,GACxBoT,EAA2BW,KAGvBC,IAA6BxyE,EAAAA,GAAAA,GAAiBkmD,IAClD2qB,EAAe,CAAE7uJ,OAAQA,EAASkkI,gBAiIpC,OA9HA5qD,EAAAA,GAAAA,IAAU,IAAO78B,GAAUz8C,GAASuhF,EAAAA,GAAAA,GAAsB2uE,SAAS/nJ,EAAY,CAACs0C,EAAQyzG,GAAOlwJ,KAE/Fs5E,EAAAA,GAAAA,IAAU,KACRvvE,WAAW,KACTs4I,IAAyB5lG,IACxBsxG,KACF,CAACtxG,KAEJ68B,EAAAA,GAAAA,IAAU,KACJi1E,IACFiB,EAAoBjB,GACpBU,OAA4B9mJ,KAE7B,CAAComJ,KAEJj1E,EAAAA,GAAAA,IAAU,KACH5mB,GAELw8F,KACC,CAACx8F,KAEJ4mB,EAAAA,GAAAA,IAAU,KACJxU,IACForF,KACAb,EAA0B,CAAEvjH,WAAO3jC,MAEpC,CAAC28D,KAGJwU,EAAAA,GAAAA,IAAU,KACJ78B,GAAUszG,IACZG,MAGD,CAACH,MAGJvyC,EAAAA,GAAAA,GAA4B,EAAEizC,EAAYC,MACpCD,IAAezwJ,GAAU0wJ,IAAiBjqJ,IAC5C8oJ,EACE1vF,IAAoBvoD,EAAgBowH,EAAAA,GAAaI,aAAeJ,EAAAA,GAAagJ,SAE/E8e,EAAoB5N,EAAAA,GAAkBY,WAEvC,CAACxiJ,EAAQyG,EAAU6Q,EAAeuoD,KAErC2hB,EAAAA,GAAAA,GAAe,CACb7iB,SAAU8vF,IACR37D,IAAem7D,EAAAA,GAAmB6B,UAC/Bh9D,IAAem7D,EAAAA,GAAmBnoB,YAClChzC,IAAem7D,EAAAA,GAAmB1L,eAClCzvD,IAAem7D,EAAAA,GAAmBvoB,aAClC5yC,IAAem7D,EAAAA,GAAmBtoB,WACvClkD,OAAQA,IAAMyuE,IAAM,MA0EpBt1E,EAAAA,GAAAA,IAAA,OACE15E,GAAG,sBACH0zB,UAAa65H,GAAmBtO,QAA6Bh4I,EAAd,YAAwBqxE,SAAA,CAEtEu2E,KACCv3E,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,mBAAmBmmD,QAASm1E,MAE7Ct1E,EAAAA,GAAAA,IAAA,OAAK15E,GAAG,cAAas4E,SAAA,EACnBhB,EAAAA,GAAAA,GAAC8mE,GAAW,CACVt/I,OAAQA,EACRyG,SAAUA,EACV84I,aAAc9iG,EACd0hG,UAAWA,EACXC,aAAcA,EACdoB,aAAcA,EACdI,kBAAmBA,EACnBD,yBAA0BA,EAC1BF,oBAAqBA,EACrBC,kBAAmBA,EACnBG,gBAAiBA,GACjBC,YAAaA,GACbC,cAAeA,GACfC,gBAAiBA,GACjBC,eAAgBA,GAChBC,oBAAqBA,GACrBC,YAAaA,GACbxP,aAAcA,EACdyP,iBAAkBA,EAClBzkE,QAASu0E,GACT7P,eAAgBmP,KAElBh3E,EAAAA,GAAAA,GAACiK,GAAAA,GAAU,CACTlF,IAAKglB,EACLhvD,MAAMmvC,EAAAA,GAAAA,GAAsB,SAAUvG,EAAgBkQ,IAAwBjQ,GAC9EwG,YAAaorE,GAAqBE,GAClCvrE,UAAWy7D,EAAe4P,GAAqB5N,EAAmBiF,GAClEnxD,eAAa,EACbC,oBACGkxD,KAAwB4I,EAAAA,GAAmBjJ,mBACvCK,KAAwB4I,EAAAA,GAAmBhJ,gBAC5CgJ,EAAAA,GAAmBlJ,gBAAa58I,EACrCqxE,SAhHT,SAAuB7a,GACrB,IAA6B,IAAzB0mF,GAIJ,OAAQA,IACN,KAAK4I,EAAAA,GAAmB1L,cACtB,OACE/pE,EAAAA,GAAAA,GAACorD,GAAc,CAEb5jI,OAAQA,EACR2+D,SAAUliB,GAAUkiB,EACpBklE,WAAY2sB,GACZ70E,QAASu0E,IAJJ,oBAAoBlwJ,KAO/B,KAAKiuJ,EAAAA,GAAmB6B,SACtB,OACEt3E,EAAAA,GAAAA,GAACk4D,GAAO,CAEN1wI,OAAQA,EACRyG,SAAUA,EACVkqI,aAAcA,EACd7mD,SAAUA,EACVnrB,SAAUliB,GAAUkiB,EACpBiyE,qBAAsB2e,GANjB,WAAWvvJ,KAAWyG,KASjC,KAAKwnJ,EAAAA,GAAmBnoB,WACtB,OACEttD,EAAAA,GAAAA,GAACstD,GAAU,CAET9lI,OAAQA,EACR+8F,cAAeqjD,EACfuP,wBAAyBA,EACzBF,qBAAsBA,EACtB9wF,SAAUliB,GAAUkiB,EACpB0hF,eAAgBmP,EAChBmB,mBAAoBL,GACpB30E,QAASu0E,IARJ,cAAclwJ,KAAWogJ,KAYpC,KAAK6N,EAAAA,GAAmBlJ,WACtB,OAAOvsE,EAAAA,GAAAA,GAACusE,GAAU,CAAC/kJ,OAAQA,IAC7B,KAAKiuJ,EAAAA,GAAmB/I,gBACtB,OAAO1sE,EAAAA,GAAAA,GAAC0sE,GAAe,IACzB,KAAK+I,EAAAA,GAAmB9I,uBACtB,OAAO3sE,EAAAA,GAAAA,GAAC2sE,GAAsB,IAChC,KAAK8I,EAAAA,GAAmBjJ,kBACtB,OAAOxsE,EAAAA,GAAAA,GAACwsE,GAAiB,CAAChlJ,OAAQA,EAAS2+D,SAAUliB,GAAUkiB,IACjE,KAAKsvF,EAAAA,GAAmBhJ,gBACtB,OAAOzsE,EAAAA,GAAAA,GAACysE,GAAe,CAACjlJ,OAAQA,EAAS2+D,SAAUliB,GAAUkiB,IAC/D,KAAKsvF,EAAAA,GAAmB3L,cACtB,OAAO9pE,EAAAA,GAAAA,GAAC8pE,GAAa,CAAC3mE,QAASu0E,GAAOvxF,SAAUliB,GAAUkiB,IAC5D,KAAKsvF,EAAAA,GAAmBpoB,UACtB,OAAOrtD,EAAAA,GAAAA,GAACqtD,GAAS,CAAClqD,QAASu0E,GAAOvxF,SAAUliB,GAAUkiB,IACxD,KAAKsvF,EAAAA,GAAmBjoB,YACtB,OAAOxtD,EAAAA,GAAAA,GAACwtD,GAAW,CAACrqD,QAASu0E,GAAOvxF,SAAUliB,GAAUkiB,IAC1D,KAAKsvF,EAAAA,GAAmBvoB,YACtB,OAAOltD,EAAAA,GAAAA,GAACktD,GAAW,CAAC/pD,QAASu0E,GAAOvxF,SAAUliB,GAAUkiB,IAC1D,KAAKsvF,EAAAA,GAAmBtoB,UACtB,OAAOntD,EAAAA,GAAAA,GAACmtD,GAAS,CAAChqD,QAASu0E,GAAOvxF,SAAUliB,GAAUkiB,IACxD,KAAKsvF,EAAAA,GAAmB7I,UACtB,OAAO5sE,EAAAA,GAAAA,GAAC4sE,GAAS,CAACzmF,SAAUliB,GAAUkiB,IAI5C,aCxWF,IAAeqa,EAAAA,GAAAA,IANwB43E,EAAGn0G,aACxC,MAAMo0G,GAAcx4E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,eAAgBp8B,GAEnE,OAAOo0G,GAAcr4E,EAAAA,GAAAA,GAACq4E,EAAW,SAAM1oJ,ICGzC,GATqDgwE,IACnD,MAAM,yBAAEljB,GAA6BkjB,EAC/B24E,GAA2Bz4E,EAAAA,GAAAA,GAC/BC,GAAAA,GAAQO,MAAO,4BAA6B5jB,GAG9C,OAAO67F,GAA2Bt4E,EAAAA,GAAAA,GAACs4E,EAAwB,IAAK34E,SAAYhwE,GCC9E,GAP0CgwE,IACxC,MAAM,IAAEvoD,GAAQuoD,EACV44E,GAAgB14E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAAkBjpD,GAEvE,OAAOmhI,GAAgBv4E,EAAAA,GAAAA,GAACu4E,EAAa,IAAK54E,SAAYhwE,GCGxD,GAP+CgwE,IAC7C,MAAM,OAAE/0D,GAAW+0D,EACb64E,GAAqB34E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,sBAAuBz1D,GAEjF,OAAO4tI,GAAqBx4E,EAAAA,GAAAA,GAACw4E,EAAkB,IAAK74E,SAAYhwE,GCAlE,GANyB8oJ,EAAGx0G,aAC1B,MAAMy0G,GAAU74E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,WAAYp8B,GAE3D,OAAOy0G,GAAU14E,EAAAA,GAAAA,GAAC04E,EAAO,SAAM/oJ,G,gBCWjC,MAEMgpJ,GAAkB,IAAIroJ,IACtBsoJ,GAAmB,IAAItoJ,IA8E7B,IAAekwE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBj9E,IAGQ,CACLkqG,iBAHsBhqG,EAAAA,EAAAA,KAAeF,GAAQkqG,kBAF/BjtB,CA5EoBw1E,EACtCvoD,sBAEA,MAAM,yBAAEwoD,EAAwB,iBAAE/iJ,IAAqBsQ,EAAAA,EAAAA,MAEjDq8F,GAAeC,EAAAA,GAAAA,GAVQ,KAUgC,GAEvDo2C,GAAwBvzE,EAAAA,GAAAA,GAAiBxtD,IAC7C4gI,GAAiBroJ,IAAIynB,GACrB0qF,EAAa,KACPk2C,GAAiB78F,OACnB+8F,EAAyB,CAAE53F,YAAa92C,MAAMhK,KAAKw4I,MACnDA,GAAiB3hI,cAKvB6pD,EAAAA,GAAAA,IAAU,KACH3yE,OAAO8G,KAAKq7F,GAAiBroG,OAKlCkG,OAAO8I,QAAQq5F,GAAiBhoG,QAAQ,EAAEmgH,EAAWtnD,MACnD,GAAIw3F,GAAgB5nJ,IAAI03G,GACtB,OAEFkwC,GAAgBpoJ,IAAIk4G,GAEpB,MAAM,KAAE1sD,EAAI,SAAEuF,EAAUF,OAAQ43F,GAAgB73F,EAE1CwnD,EAAYn6D,GAAAA,GAA0Bi6D,GAE5C,GAAIE,EAGF,OAFAswC,EAAAA,GAAAA,GAAStwC,EAAWrnD,QACpBy3F,EAAsBtwC,GAIxB,GAAI1sD,EAAOm9F,EAAAA,KAAoBC,EAAAA,KAAsBC,EAAAA,GAKnD,OAJArjJ,EAAiB,CACf3O,QAAS,6EAEX2xJ,EAAsBtwC,GAIxB,MAAM4wC,EAAiBA,MACI/yJ,EAAAA,EAAAA,MAAekL,EAAAA,EAAAA,OAAa8+F,gBAC/BmY,IACpBj6D,GAAAA,GAA2B6qG,IAI/B7qG,GAAAA,GAAkBi6D,EAAWuwC,GAAa,EAAMK,GAAgBryF,EAAAA,GAAAA,MAAoBp6C,KAAM5N,IACxF,GAAIg6I,IAAgBvqG,EAAAA,GAAe6qG,YAAa,CAC9C,MAAMpoI,EAAM,IAAIO,IAAIzS,EAAQoT,OAAO/lB,SAASktJ,SAC5CroI,EAAIiB,aAAa3Q,IAAI,WAAYg4I,mBAAmBl4F,IACpD,MAAMm4F,EAAiBrnI,OAAOC,KAAKnB,EAAI2B,YACvC4mI,GAAgBnwE,iBAAiB,eAAgB,KAC/CvzE,EAAiB,CACf3O,QAAS,2EAGf,MAAW4X,IACTi6I,EAAAA,GAAAA,GAASj6I,EAAQsiD,GAGnBy3F,EAAsBtwC,OAjDxBkwC,GAAgB1hI,SAoDjB,CAACq5E,OCjFN,GAPiD3wB,IAC/C,MAAM,eAAEtlB,GAAmBslB,EACrB+5E,GAAuB75E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,wBAAyBhmB,GAErF,OAAOq/F,GAAuB15E,EAAAA,GAAAA,GAAC05E,EAAoB,IAAK/5E,SAAYhwE,GCGtE,GAPmDgwE,IACjD,MAAM,OAAE17B,GAAW07B,EACbg6E,GAAyB95E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,0BAA2Bp8B,GAEzF,OAAO01G,GAAyB35E,EAAAA,GAAAA,GAAC25E,EAAsB,IAAKh6E,SAAYhwE,G,4BCQ1E,MAuEA,IAAe6wE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GAAUwiE,iBACT,MAAM,OAAEphE,GAAWohE,GAAc,CAAC,EAC5Bp/D,EAAOhC,IAAUoG,EAAAA,EAAAA,KAAWxH,EAAQoB,GACpC+f,EAAe/f,GAASggB,EAAAA,EAAAA,KAAmBphB,EAAQoB,QAAUmI,EAGnE,MAAO,CACL42F,QAHc5pF,QAAQnT,KAASmzH,EAAAA,EAAAA,IAAiBnzH,OAAMmG,OAAWA,EAAW4X,KAL9D87D,CA5DyBu2E,EAAGhxF,aAAYixF,YAAWtzD,cACrE,MAAM,UAAEuzD,EAAS,gBAAE/4F,IAAoB16C,EAAAA,EAAAA,MACjCkb,GAAOqgD,EAAAA,GAAAA,MACP,IAAE1wD,EAAG,OAAE1pB,EAAM,UAAE8F,GAAcs7D,GAAc,CAAC,EAC5C3kB,EAAStnC,QAAQuU,GAEjB6oI,GAAoBC,EAAAA,GAAAA,GAAqBxyJ,IAC/C+zF,EAAAA,GAAAA,GAAY,KACVw+D,EAAkB,CAAEvxJ,KAAM,iBACzBy7C,GAAUsiD,EApBmB,SAoBmB52F,GAEnD,MAAMsqJ,GAAgBj4E,EAAAA,GAAAA,IAAazqD,IACjC,GAAK/vB,GAAW8F,EAChB,IACE,MAAM0mB,EAAOouB,KAAK6uB,MAAM15C,EAAMvD,MACP,gBAAnBA,EAAKwD,YACPupC,EAAgB,CAAEnlD,WAAYpU,EAAQ8N,WAAY,CAAChI,GAAYwO,aAAa,IAC5Eg+I,KAGqB,eAAnB9lI,EAAKwD,YACPupC,EAAgB,CAAEnlD,WAAYpU,EAAQ8N,WAAY,CAAChI,KACnDwsJ,IAEJ,CAAE,MAAOnzF,GACP,GAED,CAACn/D,EAAQsyJ,EAAWxsJ,EAAWyzD,IAE5Bm5F,GAAal4E,EAAAA,GAAAA,IAAazqD,IAC9BA,EAAMwqG,cAAco4B,SACnB,IAOH,OALAr5E,EAAAA,GAAAA,IAAU,KACR1uD,OAAOk3D,iBAAiB,UAAW2wE,GAC5B,IAAM7nI,OAAOm3D,oBAAoB,UAAW0wE,IAClD,CAACA,KAGFj6E,EAAAA,GAAAA,GAACo6E,GAAAA,EAAK,CACJh+H,UAAU,YACV6nB,OAAQA,EACRk/B,QAAS22E,EACT7jJ,MAAO4jJ,EACPQ,gBAAc,EAAAr5E,SAEb/8B,IACC+7B,EAAAA,GAAAA,GAAA,UACE5jD,UAAU,aACVk+H,OAAQJ,EACRntD,IAAK77E,EACLjb,MAAOsrB,EAAK,cACZg5H,QAAQ,yDACRC,MAAM,oBCrEhB,GAP4C76E,IAC1C,MAAM,OAAE17B,GAAW07B,EACb86E,GAAkB56E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,mBAAoBp8B,GAE3E,OAAOw2G,GAAkBz6E,EAAAA,GAAAA,GAACy6E,EAAe,IAAK96E,SAAYhwE,GCG5D,GAP4CgwE,IAC1C,MAAM,OAAE17B,GAAW07B,EACb+6E,GAAkB76E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,mBAAoBp8B,GAE3E,OAAOy2G,GAAkB16E,EAAAA,GAAAA,GAAC06E,EAAe,IAAK/6E,SAAYhwE,GCA5D,GAN+BgrJ,EAAG12G,aAChC,MAAMo6C,GAAgBxe,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAAkBp8B,GAEvE,OAAOo6C,GAAgBre,EAAAA,GAAAA,GAACqe,EAAa,SAAM1uF,GCM7C,GAPqDgwE,IACnD,MAAM,MAAE1gE,GAAU0gE,EACZi7E,GAA2B/6E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,4BAA6BphE,GAE7F,OAAO27I,GAA2B56E,EAAAA,GAAAA,GAAC46E,EAAwB,IAAKj7E,SAAYhwE,GCG9E,GAP0CgwE,IACxC,MAAM,OAAE17B,GAAW07B,EACbk7E,GAAgBh7E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAAkBp8B,GAEvE,OAAO42G,GAAgB76E,EAAAA,GAAAA,GAAC66E,EAAa,IAAKl7E,SAAYhwE,GCGxD,GAP6CgwE,IAC3C,MAAM,OAAE17B,GAAW07B,EACbm7E,GAAmBj7E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,oBAAqBp8B,GAE7E,OAAO62G,GAAmB96E,EAAAA,GAAAA,GAAC86E,EAAgB,IAAKn7E,SAAYhwE,GCG9D,GAPoDgwE,IAClD,MAAM,OAAE17B,GAAW07B,EACbo7E,GAA0Bl7E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ2oD,MAAO,2BAA4BxkF,GAE3F,OAAO82G,GAA0B/6E,EAAAA,GAAAA,GAAC+6E,EAAuB,IAAKp7E,SAAYhwE,GCG5E,GAP0CgwE,IACxC,MAAM,IAAEzuD,GAAQyuD,EACVq7E,GAAgBn7E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAAkBnvD,GAEvE,OAAO8pI,GAAgBh7E,EAAAA,GAAAA,GAACg7E,EAAa,IAAKr7E,SAAYhwE,G,gBCQxD,MAsIA,GAtIqCsrJ,EACnCh3G,SACAm7B,kBAEA,MAAMh5E,GAASoL,EAAAA,EAAAA,OACT,oBAAEgzE,EAAmB,sBAAE02E,IAA0B70I,EAAAA,EAAAA,MAEjDmyD,EAAkBpyE,EAAOukB,YAAYtb,KACrCi0E,EAAmBl9E,EAAOukB,YAAY8vC,WACtC/vC,EAAU44D,EAAmBA,EAAiBnuE,IAAKzM,GAAO8vE,EAAgB9vE,IAAKR,OAAOyU,SAAW,IAEhGw+I,EAAeC,IAAoBz5E,EAAAA,GAAAA,IAAS,KAC5C05E,EAAmBC,IAAwB35E,EAAAA,GAAAA,IAAmB,KAC/D,gBAAEuE,EAAe,mBAAEq1E,EAAkB,sBAAEvjE,IAA0B5R,EAAAA,GAAAA,KAEjE7kD,GAAOs/C,EAAAA,GAAAA,KACPoF,EAAqB7G,GAE3B0B,EAAAA,GAAAA,IAAU,KACR,GAAImF,EAAoB,CACtB,MAAMO,EAAYN,EAAgBt8E,KAAK88E,GAAKA,EAAEh+E,KAAOu9E,GACjDO,IACF40E,EAAiB50E,EAAUzrC,MAC3BugH,EAAqB90E,EAAUF,YAAc,IAEjD,MACE80E,EAAiB,IACjBE,EAAqB,KAEtB,CAACr1E,EAAoBC,IAExB,MAAMs1E,EAAcH,EAAkBpzJ,OAAS,GAA8B,KAAzBkzJ,EAActwF,OAE5D4wF,GAAez5E,EAAAA,GAAAA,IAAYrb,IAC/BA,EAAE+Y,iBACF,MAAMg8E,EAAcP,EAActwF,OAElC,GAAI2wF,EAAa,CACf,GAAIv1E,EACFs1E,EACEr1E,EAAgB/wE,IAAIuxE,GAClBA,EAAEh+E,KAAOu9E,EAAqB,IAAKS,EAAG3rC,KAAM2gH,EAAap1E,WAAY+0E,GAAsB30E,QAG1F,CACL,MAAMi1E,EAA0B,CAC9BjzJ,GAAIG,KAAKC,MAAM+pB,WACfkoB,KAAM2gH,EACNp1E,WAAY+0E,GAEdE,EAAmB,IAAIr1E,EAAiBy1E,IACxC3jE,EAAsB2jE,EAAajzJ,GACrC,CAEA87E,EAAoB,CAAE/L,iBAAkB,GAAK,CAAEp2D,uBAAuB,IACtE64I,GACF,GACC,CAACC,EAAeE,EAAmBp1E,EAAoBs1E,EAAoBr1E,EAAiBs1E,EAAah3E,EAAqB02E,IAE3HU,GAAmB55E,EAAAA,GAAAA,IAAYrb,IACnCy0F,EAAiBz0F,EAAEorC,OAAOz+D,QACzB,IAEGuoH,GAAqB75E,EAAAA,GAAAA,IAAajK,GAAsBpR,IAC5D20F,EAAqBQ,GACnBA,EAAQjxJ,SAASktE,GACb+jF,EAAQ5zJ,OAAOQ,GAAMA,IAAOqvE,GAC5B,IAAI+jF,EAAS/jF,KAElB,IAEGgkF,GAAwB/5E,EAAAA,GAAAA,IAAY,KACpCiE,IACFs1E,EAAmBr1E,EAAgBh+E,OAAOw+E,GAAKA,EAAEh+E,KAAOu9E,IACxD+R,EAAsB,KACtBkjE,MAED,CAACj1E,EAAoBC,EAAiBq1E,EAAoBvjE,EAAuBkjE,IAE9Ej5E,GAAcD,EAAAA,GAAAA,IAAY,KAC9Bk5E,KACC,CAACA,IAEEc,GAAeh6E,EAAAA,GAAAA,IAAY,KAC/B,MAAMi6E,EAAah2E,EAAqB,iBAAmB,mBAC3D,OACE7D,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,yBAAwB4kD,SAAA,EACrChB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CAAC9jE,OAAK,EAAC+jE,MAAM,cAAc5mB,KAAK,UAAU6mB,UAAWrhD,EAAK,UAAWghD,QAASN,EAAYjB,UAC/FhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC/nC,KAAK,aAEbilC,EAAAA,GAAAA,GAAA,OAAK5jD,UAAU,cAAa4kD,SAAEi7E,KAC9Bj8E,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLC,MAAM,UACN5mB,KAAK,UACL3/B,UAAU,sBACVmmD,QAASk5E,EACT7vC,UAAW4vC,EAAYx6E,SAEtBiF,EAAqB,OAAS,eAIpC,CAACA,EAAoBu1E,EAAaC,EAAcx5E,EAAa1gD,IAEhE,OACEy+C,EAAAA,GAAAA,GAACo6E,GAAAA,EAAK,CAACn2G,OAAQA,EAAQk/B,QAASlB,EAAai6E,OAAQF,IAAgB5/H,UAAU,iBAAgB4kD,UAC7FoB,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,iBAAgB4kD,SAAA,EAC7BhB,EAAAA,GAAAA,GAACm8E,GAAAA,EAAS,CACRzzJ,GAAG,iBACH4qC,MAAO6nH,EACP9jE,SAAUukE,EACV3rE,MAAM,oBAGR7N,EAAAA,GAAAA,IAAA,OAAKhmD,UAAU,6BAA4B4kD,SAAA,EACzChB,EAAAA,GAAAA,GAAA,MAAI5jD,UAAU,mCAAkC4kD,SAAC,oBAChDt2D,EAAQvV,IAAKyV,IACZo1D,EAAAA,GAAAA,GAACk5C,GAAAA,EAAQ,CAEPjpC,MAAOrlE,EAAO3U,MAAM9B,KACpB+7E,QAASmrE,EAAkBxwJ,SAAS+f,EAAOliB,IAC3C2uF,SAAUwkE,EAAmBjxI,EAAOliB,KAH/BkiB,EAAOliB,QAQjBu9E,IACCjG,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CAACC,MAAM,SAASJ,QAASw5E,EAAsB/6E,SAAC,2BClJjE,IAAgB,KAAO,YC2CjBo7E,GAAkB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAE1EC,GAAY,IAAIC,OAAO,qjCAyK7B,IAAe97E,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBj9E,IAAiC6jC,EAAAA,EAAAA,KAAK3jC,EAAAA,EAAAA,KAAeF,GAAS,CAAC,aAD9Ci9E,CAtKMk5E,EAAGxzF,eAC3B,MAAMyzF,GAAY13E,EAAAA,GAAAA,MACZ23E,GAAc33E,EAAAA,GAAAA,IAAmB,IACjC43E,GAAkB53E,EAAAA,GAAAA,KAAO,GACzBn+E,GAAa2sH,EAAAA,GAAAA,KACbqO,GAAcC,EAAAA,GAAAA,MACd,SAAEtwC,IAAaC,EAAAA,EAAAA,MAEforE,EAAwBrrE,EAAW,GAAK,KACxC,iBACJtoB,EAAgB,IAAE2c,EAAG,MAAE9+E,EAAK,KAAEouI,EAAI,OAAErpC,EAAM,MAAEiB,EAAQ,WAClD9jC,GAAY,CAAC,EAEX6zF,GAAmBp3E,EAAAA,GAAAA,GAAgB,CAACkB,EAAWm2E,EAAWp5I,EAASk5I,KACvE,IAAK,IAAIlxJ,EAAI,EAAGA,EAAIgY,EAAQhY,IAAK,CAC/B,MAAM,SACJivD,EAAQ,SAAEoiG,GACRC,GAA2BlwD,EAAOnmB,EAAGm2E,EAAGpxJ,GAEtCswD,EAzBkB,GAyBaihG,GAAuBC,GAEtDC,EAAcd,GAAgBr1J,KAAK6B,MAAM7B,KAAKyN,SAAW4nJ,GAAgBn0J,SAC/Ew0J,EAAYngI,QAAQxqB,KAAK,CACvBqrJ,IAAKziG,EACLqB,OACA4mB,MAAOu6E,EACPJ,WACAM,QAASrhG,EACTshG,iBAAkC,GAAhBt2J,KAAKyN,SACvB8oJ,SAAU,EACVC,YAAa10J,KAAKC,MAClB00J,WAAY,EACZC,OAAQ10F,GAAUrhB,WAAa3gD,KAAKyN,SAAW,IAEnD,IAGIkpJ,GAAel4E,EAAAA,GAAAA,GAAgB,KACnC,IAAKg3E,EAAUlgI,UAAYogI,EAAgBpgI,QACzC,OAEF,MAAMqhI,EAASnB,EAAUlgI,QAEnBshI,EAAMD,EAAOE,WAAW,MAC9B,IAAKD,EACH,OAGF,MAAQ/2J,MAAOi3J,EAAalyD,OAAQmyD,GAAiBJ,EACrDC,EAAII,UAAU,EAAG,EAAGF,EAAaC,GAEjC,MAAME,EAA+B,GACrCxB,EAAYngI,QAAQh0B,QAAQ,CAACglB,EAAG7hB,KAC9B,MAAM,IACJ0xJ,EAAG,SACHL,EAAQ,KACR/gG,EAAI,MACJ4mB,EAAK,QACLy6E,EAAO,iBACPC,EAAgB,SAChBC,EAAQ,YACRC,EAAW,WACXC,GACElwI,EACE4wI,GAAQr1J,KAAKC,MAAQy0J,GAAe,IAEpCY,EAAS,CACb93J,EAAG82J,EAAI92J,EAAIy2J,EAASz2J,EAAI63J,EACxB5uG,EAAG6tG,EAAI7tG,EAAIwtG,EAASxtG,EAAI4uG,GAGpBE,EAAc,CAClB/3J,EAAGy2J,EAASz2J,EAAI,KAAQ63J,EAAO,GAC/B5uG,EAAGwtG,EAASxtG,GAAY,IAAP4uG,GAGbG,EAAatiG,EAAOh1D,KAAK86I,IAAI96I,KAAKu3J,IAAId,EAAaH,IACnDkB,EAAc,EAAIf,EAAaH,GAAoBt2J,KAAKy3J,GAAK,KAE7DC,EAAgBjB,EAAa,EAC7BkB,EAAiB71J,KAAKC,MAG5B,GADqBq1J,EAAO7uG,EAAIyuG,EAAezwI,EAAEyuC,KAG/C,YADAkiG,EAAiBnsJ,KAAKwb,GAIxB,MAAMqxI,EAAc,IACfrxI,EACH6vI,IAAKgB,EACLrB,SAAUsB,EACVhB,QAASiB,EACTf,SAAUiB,EACVhB,YAAamB,EACblB,WAAYiB,GAGdhC,EAAYngI,QAAQ7wB,GAAKkzJ,EACzBf,EAAIgB,UAAYj8E,EACZr1D,EAAEmwI,QACJG,EAAI16G,OACJ06G,EAAIiB,UAAU1B,EAAI92J,EAAG82J,EAAI7tG,GACzBsuG,EAAIkB,MACD/iG,EA9GmB,GAID,IA2GlBA,EA/GmB,GAID,KA6GrB6hG,EAAImB,OAAOzB,GACXM,EAAInvB,KAAK4tB,IACTuB,EAAIoB,YAEJpB,EAAIqB,YACJrB,EAAIsB,QACF/B,EAAI92J,EACJ82J,EAAI7tG,EACJyM,EACAqhG,EACAE,EACA,EACA,EAAIv2J,KAAKy3J,IAEXZ,EAAInvB,UAGRguB,EAAYngI,QAAUmgI,EAAYngI,QAAQp0B,OAAQolB,IAAO2wI,EAAiBpzJ,SAASyiB,IAC/EmvI,EAAYngI,QAAQr0B,QACtBkwG,EAAAA,GAAAA,IAAeulD,GAEfhB,EAAgBpgI,SAAU,IAoB9B,IAhBAwnE,EAAAA,GAAAA,GAAc,EAAEq7D,MACd,IAAIC,EASJ,OARID,IAAqBn2F,IACvB4zF,EAAiB/1J,GAASF,EAAWE,MAAO+kG,GAAUjlG,EAAWilG,QACjEwzD,EAAc7tJ,WAAWowH,EA/IE,KAgJtB+6B,EAAgBpgI,UACnBogI,EAAgBpgI,SAAU,GAC1B67E,EAAAA,GAAAA,IAAeulD,KAGZ,KACL3oI,aAAaqqI,KAGd,CAACp2F,EAAkB24D,EAAa+7B,KAE9B10F,GAAoBngE,KAAKC,MAAQkgE,EA3JP,IA4J7B,OAGF,MAAMq2F,GAAiBvyD,EAAAA,GAAAA,GACrBnwF,QAAQgpE,IAAQ,QAAQA,MACxBhpE,QAAQs4H,IAAS,SAASA,MAC1Bt4H,QAAQ9V,IAAU,UAAUA,MAC5B8V,QAAQivF,IAAW,WAAWA,OAGhC,OACE5rB,EAAAA,GAAAA,GAAA,OAAKt3E,GAAG,WAAW0zB,UAAWwrE,GAAO8xB,KAAM7sB,MAAOwyD,EAAer+E,UAC/DhB,EAAAA,GAAAA,GAAA,UAAQ+E,IAAKy3E,EAAWpgI,UAAWwrE,GAAO+1D,OAAQ92J,MAAOF,EAAWE,MAAO+kG,OAAQjlG,EAAWilG,cASpG,SAASmxD,GACPlwD,EAAsBmoC,EAAwBzwB,EAAyBvkG,GAEvE,GAAc,YAAV6sF,EAAqB,CACvB,MAAMyyD,EAAWt/I,EAAQ,EACnB06C,EAAW,CACfr0D,EAAG2uI,GAAkBsqB,GAAY,GAAM,KACvChwG,EAAqB,IAAlBi1D,GAECg7C,EAAUx4J,KAAKyN,SAAWwgI,EAOhC,MAAO,CACLt6E,WACAoiG,SAPe,CACfz2J,EAAGi5J,EAAWC,GAAqB,EAAXA,EACxBjwG,GAHei1D,EAAkBy4C,GAAyC,IAAlBz4C,IAU5D,CAYE,MAAO,CACL7pD,SAZe,CACfr0D,EAAGU,KAAKyN,SAAWwgI,EACnB1lF,GAAG,IAWHwtG,SAPe,CACfz2J,EAHc22J,GAAuBhoB,GAIrC1lF,GAHei1D,EAAkBx9G,KAAKyN,SAAW,MAWvD,CAEA,SAASwoJ,GAAuB/1J,EAAc,GAC5C,OAAOF,KAAKyN,SAAWvN,EAAMA,EAAM,CACrC,C,4BCnQA,M,8CC+BMu4J,GAAY,cAsElB,IAAeh/E,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBj9E,IAEQ,CACLq5J,UAFen5J,EAAAA,EAAAA,KAAeF,GAEXijE,OAJLga,CAlEEq8E,EAAGD,eACvB,MAAOE,EAAOC,IAAYj+E,EAAAA,GAAAA,IAAiB,IAErCk+E,GAAUr6E,EAAAA,GAAAA,GAAiBs6E,IAC3BH,EAAM13J,QANW,GAQrB23J,EAAUG,GAAc,IAAIA,EAAWD,MA0CzC,OAvCAh/E,EAAAA,GAAAA,IAAU,KACR,IAAK2+E,EAAU,OAEf,MAAM,OAAEx2F,EAAM,OAAEC,GAAWu2F,GACrB,MAAE54J,EAAK,OAAE+kG,GAAWjlG,EAAAA,EAAWC,MAG/Bo5J,EArBmB,KAoBTj5J,KAAKE,IAAIJ,EAAQoiE,EAAQ2iC,EAAS1iC,EAAQD,EAAQC,GAE5Dyc,EAAMzc,EAAS82F,EAAc,EAC7B/qB,EAAOhsE,EAAS+2F,EAAc,EAEpCH,EAAQ,CACNI,UAAWR,EAASn2F,aACpB42F,UAAWF,EACXr6E,MACAsvD,UAED,CAACwqB,KAEJ3+E,EAAAA,GAAAA,IAAU,MACRq/E,EAAAA,GAAAA,IACE/9E,EAAAA,GAAAA,IAAA,UAAQ/7E,EAAE,IAAIipD,EAAE,IAAIzoD,MAAM,IAAI+kG,OAAO,IAAI,8BAA4B,OAAOw0D,MAAOC,EAAAA,IAAcr/E,SAAA,EAC/FhB,EAAAA,GAAAA,GAAA,WAAS1tD,KAAMguI,GAAYthJ,OAAO,eAClCghE,EAAAA,GAAAA,GAAA,qBACEugF,GAAG,gBACHC,IAAI,YACJ1B,MAtCW,KAuCX2B,iBAAiB,IACjBC,iBAAiB,SAGrBlB,IAGK,MACLmB,EAAAA,GAAAA,GAAoBnB,MAErB,KAGDx/E,EAAAA,GAAAA,GAAA,OAAK5jD,WAAW0lD,EAAAA,GAAAA,GDpFG,YCoF0By6B,eAAa,EAAAv7B,SACvD2+E,EAAMxqJ,IAAKk0D,IACV2W,EAAAA,GAAAA,GAAA,OACE5jD,UDvF+B,WCwF/BywE,OAAOC,EAAAA,GAAAA,GACL,iBAAiBzjC,EAAK62F,cACtB,mBAAmB72F,EAAKsc,QACxB,oBAAoBtc,EAAK4rE,UAG3B2rB,eAAgBA,IAAMhB,EAAUG,GAAcA,EAAU73J,OAAQw+E,GAAMA,IAAMrd,KADvEA,EAAK42F,iBC8DpB,IAAIY,IAAiB,EAErB,MA4cA,IAAergF,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACj9E,GAAUkrF,eACT,MAAM,cACJjpF,GACEjC,GAEE,gBACJgyC,EAAe,yBACfqkB,EAAwB,eACxBpC,EAAc,iBACdoO,EAAgB,0BAChBlwC,EAAyB,wBACzBwxC,EAAuB,4BACvB6Z,EAA2B,WAC3Bhb,EAAU,kBACVriE,EAAiB,0BACjBoiE,EAAyB,cACzBz+C,EAAa,QACbo+C,EAAO,WACPlD,EAAU,gBACV8Y,EAAe,aACfn6B,EAAY,cACZW,EAAa,mBACbif,EAAkB,wBAClBoO,EAAuB,YACvBtmC,EAAW,QACX0U,EAAO,kBACP2pB,EAAiB,wBACjBlP,IACEt0D,EAAAA,EAAAA,KAAeF,IAEb,yBAAE06J,IAA6B5lH,EAAAA,GAAAA,GAAqB90C,GAEpD26J,EAAcn4F,IAAcv9D,EAAAA,EAAAA,KAAkBjF,EAAQwiE,EAAWphE,OAAQohE,EAAWt7D,WACpFusJ,EAAYkH,GAAa/0J,QAAQg1J,MAAM/qJ,OACvC,OAAEzO,IAAW0L,EAAAA,EAAAA,KAAyB9M,IAAW,CAAC,EAClD66J,IAA0B72J,EAAAA,EAAAA,KAA+BhE,EAAQ,4BACjE0iE,EAAAA,EAAAA,KAA0B1iE,GAE1B86J,EAAqBtmG,GAA0BumG,EAAAA,EAAAA,KAAiB/6J,EAAQw0D,QAA2BjrD,EACnG6xE,GAAkBp1D,EAAAA,EAAAA,KAA0BhmB,GAElD,MAAO,CACLiC,gBACA+4J,iBAAkB76J,EAClB86J,mBAAoB1kJ,QAAQnV,GAC5B85J,mBAAmBhiG,EAAAA,EAAAA,KAAyBl5D,EAAQkrF,GACpDiwE,iBAAiBj7J,EAAAA,EAAAA,KAAeF,GAAQowE,iBACxCgrF,mBAAmBC,EAAAA,EAAAA,KAAwBr7J,GAC3Cs7J,mBAAmBC,EAAAA,EAAAA,KAAwBv7J,GAC3Cw7J,oBAAoBC,EAAAA,EAAAA,KAAyBz7J,GAC7C07J,sBAAsBC,EAAAA,EAAAA,KAA2B37J,GACjD47J,iBAAkBrlJ,QAAQuN,EAAcjiB,QACxCg6J,WAAYtlJ,QAAQ2rD,EAAQrgE,QAC5BwgE,mBACAy5F,sBAAuBvlJ,QAAQgsD,GAC/Bib,8BACArrD,4BACAwxC,0BACAo4F,oBAAoB9oJ,EAAAA,EAAAA,KAAyBjT,GAC7C22E,kBAAmBtxC,EAAcrlC,EAAO02E,WAAWC,uBAAoBptE,EACvE6sH,yBAAyB1zD,EAAAA,EAAAA,KAA0B1iE,GACnD06J,2BACAsB,kBAAmB32H,EAAc9uB,QAAQvW,EAAOy3E,gBAAaluE,EAC7DkqB,YAAazzB,EAAO8xB,SAASoB,MAAMM,OACnCyoI,oBAAqBj8J,EAAO4oB,aAAasK,MAAMM,OAC/C0oI,iBAAkBl9F,GAAYv9C,OAC9B06I,wBAAyBn9F,GAAYC,gBACrCuD,aACAixF,YACA2I,yBAA0B7lJ,QAAQuhE,GAClC9lC,kBACAqqH,mBAAoBrqH,IAAmBj9B,EAAAA,EAAAA,KAAW/U,EAAQgyC,EAAgBlhB,OAC1EulC,2BACAngD,sBAAsBC,EAAAA,EAAAA,KAA2BnW,GACjDs8J,mBAAoB3+G,GAAcE,OAClC0+G,oBAAqBj+G,GAAeT,OACpC2+G,yBAA0BjmJ,QAAQgnD,GAClCk/F,0BAA2B9wF,GAAyB9tB,OACpD6+G,aAAch5F,GAAmB7qD,MACjCqgC,mBAAoBa,EAAQb,mBAC5ByjH,mBAAoBpmJ,QAAQwjC,EAAQH,SACpCkhH,qBACAz1H,cACA4uB,iBACA4mG,yBACAx9H,SAAUr9B,EAAOq9B,SACjB+9C,kBACAm9B,kBAAmBv4G,EAAOu4G,kBAC1BqkD,uBAAwB58J,EAAOs4E,WAAWQ,cAC1CC,mBAAoB/4E,EAAOs4E,WAAWS,qBA1FxBkE,CA5cPma,EACXlM,WACA8vE,mBACAC,qBACAE,kBACAD,oBACAE,oBACAE,oBACAE,qBACAI,mBACAC,aACAllF,oBACAtU,mBACAy5F,wBACAt+E,8BACAk/E,eACAvqI,4BACAwxC,0BACAo4F,qBACA3lC,0BACAskC,2BACAjnI,cACAwoI,sBACAD,oBACAE,mBACAC,0BACA35F,aACAixF,YACA2I,2BACApqH,kBACAqqH,qBACAhmG,2BACApC,iBACAqoG,qBACAC,sBACAC,2BACAC,4BACAvjH,qBACAyjH,qBACAjB,uBACAxlJ,uBACA4kJ,qBACAz1H,cACAw1H,yBACAx9H,WACAp7B,gBACAm5E,kBACAm9B,oBACAqkD,yBACA7jF,yBAEA,MAAM,SACJ8jF,GAAQ,mBACRC,GAAkB,4BAClBC,GAA2B,4BAC3BC,GAA2B,yBAC3BC,GAAwB,2BACxBC,GAA0B,eAC1Bt2F,GAAc,iBACdu2F,GAAgB,kBAChBC,GAAiB,kBACjBC,GAAiB,gBACjBC,GAAe,uBACfC,GAAsB,gBACtBnoF,GAAe,iBACfooF,GAAgB,aAChBC,GAAY,cACZC,GAAa,sBACbC,GAAqB,kBACrBC,GAAiB,qBACjB9oF,GAAoB,uBACpB+oF,GAAsB,iBACtBC,GAAgB,qBAChBC,GAAoB,qBACpBC,GAAoB,yBACpBC,GAAwB,WACxBvyG,GAAU,cACVwyG,GAAa,eACb9pH,GAAc,gBACd+pH,GAAe,iBACf7qI,GAAgB,wBAChB8qI,GAAuB,kBACvB1yI,GAAiB,aACjB2yI,GAAY,gBACZC,GAAe,WACflxI,GAAU,iBACVw/F,GAAgB,wBAChB53C,GAAuB,4BACvBupF,GAA2B,gBAC3BhrG,GAAe,iBACfirG,GAAgB,oBAChBzpF,GAAmB,wBACnB0pF,GAAuB,0BACvBC,GAAyB,mBACzB7pF,GAAkB,eAClB8pF,GAAc,sBACdh0G,GAAqB,cACrBi0G,GAAa,iBACbC,GAAgB,eAChBh2I,GAAc,qBACdi2I,GAAoB,eACpBC,GAAc,wBACdC,GAAuB,iBACvBpoE,GAAgB,oBAChBqoE,GAAmB,aACnB58H,GAAY,eACZ68H,GAAc,qBACdC,GAAoB,oBACpBC,KACEn/I,EAAAA,EAAAA,MAEAgiB,EAAAA,MAAUw4H,KACZA,IAAiB,EAEjBv4H,QAAQC,IAAI,oBAGd,MAAMhH,IAAOs/C,EAAAA,GAAAA,MAGb8Q,EAAAA,GAAAA,GAAW,MACJ8zE,EAAAA,GAAAA,IAAW3lF,GAAAA,GAAQC,QA7HS,KAgInC,MAAMgqB,IAAejlB,EAAAA,GAAAA,MACfw5C,IAAgBx5C,EAAAA,GAAAA,OAEhB,UAAEsuC,KAAc7hC,EAAAA,EAAAA,MCxRT,IAA0Bx2C,GAAc2qH,IDyRrD5kF,EAAAA,GAAAA,IAAU,KACHsgF,GAAqBC,GAAuBjuC,GAGtCguC,GAAoBC,GAAsB/vE,GAEnD0hC,KAHAA,MAKD,CAACI,GAAWguC,EAAkBC,EAAoB/vE,EAAU0hC,MAE/Dz3B,EAAAA,GAAAA,GAAYmpE,GAAiBj5H,EA/IC,SA+IuC97B,GAAW,IAGhFmxE,EAAAA,GAAAA,IAAU,KACJr1C,GAAehI,IACjBupC,GAAe,CAAEI,UAAU,IAC3Btb,KACAwyG,KACAS,KACA9B,KACAsB,KACAG,KACAzpF,KACA+hB,OAED,CAACvxD,EAAahI,KAGjBq9C,EAAAA,GAAAA,IAAU,KACJr1C,GAAehI,GAAYk7E,IAAsBn9B,IACnD/4C,GAAa,CAAEG,SAAU,UACzB08H,KACAC,KACAC,KACArqF,KACA0pF,KACArqH,KACA6oH,KACAC,KACAE,KACAoB,KACA31I,KACAw0I,GAAkB,CAAE7mI,SAAU+oI,EAAAA,MAC9Bb,KACA/zG,KACAo0G,KACAC,KACArB,KACAb,KACAS,KACAgB,KACAH,KACAZ,KACAC,KACAC,KACAoB,KACA/B,KACAC,KACA6B,KACAD,OAED,CAACv5H,EAAahI,EAAUk7E,EAAmBn9B,KAG9CV,EAAAA,GAAAA,IAAU,KACJr1C,GAAenvB,GAAwBqiG,IAAsBn9B,IAC/DyiF,KACA7oF,OAED,CAAC9+D,EAAsBmvB,EAAakzE,EAAmBn9B,KAG1DV,EAAAA,GAAAA,IAAU,KACJr1C,IACElK,GAAKqb,OAAS+oH,EAAAA,KAChBlC,GAAkB,CAAE7mI,SAAU2E,GAAKqb,OAGrC8mH,GAAgB,CAAEzoH,SAAU1Z,GAAKqb,SAElC,CAACrb,GAAMkK,KAGVq1C,EAAAA,GAAAA,IAAU,KACJr1C,GACF/R,GAAiB,CACftpB,IAAKjC,OAAO8G,MAAKzD,EAAAA,EAAAA,MAAYwd,aAAa3f,MAC1Csf,aAAa,KAGhB,CAAC8c,KAGJq1C,EAAAA,GAAAA,IAAU,KACJr1C,GAAehI,GAAYk7E,IAAsBn9B,IAC9C3nD,GAAgBwoI,IACnB7mF,KACAN,MAGErhD,GAAewoI,GACjB2B,OAGH,CAACnqI,EAAawoI,EAAqB52H,EAAahI,EAAUk7E,EAAmBn9B,KAEhFV,EAAAA,GAAAA,IAAU,KACRukF,MACC,CAAC1mD,KAGJ79B,EAAAA,GAAAA,IAAU,KACJqhF,GAAsB12H,GACxB44H,MAED,CAAClC,EAAoB12H,KAGxBq1C,EAAAA,GAAAA,IAAU,KACHggF,GACHoD,MAED,CAACpD,KAGJhgF,EAAAA,GAAAA,IAAU,KACR,IAAKr9C,EAAU,OACfk2B,KAEA,MAAMisG,GAA4BC,EAAAA,GAAAA,MAC9BD,GAA2BE,SAC7BC,EAAAA,GAAAA,GAAgBC,mBAAmBJ,EAA0BE,UAE9D,CAACriI,IC9ZmCsX,GDgajB,WCha+B2qH,GDgalBnuI,IACjC,IACE,MAAMrG,EAAMqG,EAAMpf,SAAW,GACvB8tJ,EAAaD,mBAAmB90I,IACtC60I,EAAAA,GAAAA,GAAgBE,EAClB,CAAE,MAAOt/F,GACHt+B,EAAAA,KAEFC,QAAQruB,MAAM,8BAA+B0sD,EAEjD,ICzaKma,EAAAA,GAAAA,IAAU,KACf,IAAKjb,GAAAA,GACH,OAGF,IAAIqgG,EAcJ,MAZsBrrJ,WACpB,MAAM,OAAEsrJ,SAAiB,+BACzBD,QAAuBC,EAAUprH,GAAOxjB,IACtCmuI,GAASnuI,MAIb6uI,GAAgBn7F,MAAOhxD,IAErBquB,QAAQruB,MAAM,2CAA2CA,OAGpD,KACLisJ,QAED,CAACnrH,GAAM2qH,MDsZV5kF,EAAAA,GAAAA,IAAU,KACR,MAAMulF,GAAqBC,EAAAA,GAAAA,IAAkBj+J,GACxCg+J,GAEL7yI,GAAW,CACThsB,OAAQ6+J,EAAmB7+J,OAC3ByG,SAAUo4J,EAAmBp4J,SAC7BzF,KAAM69J,EAAmB79J,QAE1B,CAACH,KAGJmlH,EAAAA,GAAAA,IAAgB,KACd,MAAM/lB,EAAYsC,GAAaztE,QACiB,IAA5CmrE,EAAU8+D,WAAYC,oBACxBjhD,EAAAA,GAAAA,IAAc9d,EAAW,4BAE1B,KAEHriB,EAAAA,GAAAA,GAAkB,CAChBL,IAAKglB,GACL9lD,OAAQm9G,EACRqF,kBAAmB7iF,EACnBjY,OAAQ,iBAEV,MAAM+6F,IAA2B5hF,EAAAA,GAAAA,KAAO,GAClC68C,IAAcC,EAAAA,GAAAA,MAGpB99B,EAAAA,GAAAA,GAAc,EAAE6iE,MACd,QAA6Bh3J,IAAzBg3J,GAAsCvF,IAAqBuF,IAAyBnqC,EACtF,OAGFkqC,GAAyBpqI,SAAU,EAE/BuxE,EAAAA,KACF+4D,EAAAA,GAAAA,IAAoB,KAClBv6J,SAAS81C,KAAKygE,UAAUwf,OAAO,8BAA+Bg/B,KAIlE,MAAMyF,GAAoBvgD,EAAAA,GAAAA,OAE1BwgD,EAAAA,GAAAA,GAAqBz6J,SAAS4xF,eAAe,gBAAkB,KAC7D4oE,IACAH,GAAyBpqI,SAAU,EACnCqlG,QAED,CAACy/B,EAAkB5kC,EAAyBmF,MAE/Cv8C,EAAAA,GAAAA,GAAkB,CAChBL,IAAKglB,GACL9lD,OAAQq9G,EACRmF,kBAAmB7iF,EACnBjY,OAAQ,kBAEV,MAAMo7F,IAA4BjiF,EAAAA,GAAAA,KAAO,IAClCkiF,GAAqBC,KAA0BtlF,EAAAA,GAAAA,IAAS2/E,GAEzDvxI,IAAe4lE,EAAAA,GAAAA,OAGrBmO,EAAAA,GAAAA,GAAc,EAAEojE,EAAwBC,MACtC,QAA8Bx3J,IAA1Bw3J,GAAuC7F,IAAsB6F,EAC/D,OAGF,IAAKD,GAA0BjG,EAE7B,YADAgG,GAAuB3F,GAIzByF,GAA0BzqI,SAAU,EAEpC,MAAMuqI,GAAoBvgD,EAAAA,GAAAA,OAE1BwgD,EAAAA,GAAAA,GAAqBz6J,SAAS4xF,eAAe,eAAiB,KAC5D4oE,IACAE,GAA0BzqI,SAAU,EACpCqlG,KACAslC,GAAuB3F,MAExB,CAACD,EAAoBC,EAAmBL,EAAwBt/B,KAEnE,MAAMvlG,IAAY0lD,EAAAA,GAAAA,GAChB4kF,GAAyBpqI,SAAW,wBACpCyqI,GAA0BzqI,SAAW,yBACrC0qI,IAAuB,sBACvBpjF,GAA+B,6BAC/B7zD,IAAgB,gBAChBwxI,GAAmB,mBAGf6F,IAAa5hF,EAAAA,GAAAA,GAAgB,KACjC+9E,GAAiB,CAAEn4F,WAAW,MAG1Bi8F,IAAc7hF,EAAAA,GAAAA,GAAgB,KAClC+9E,GAAiB,CAAEn4F,WAAW,IAEzB/+D,SAAS4J,MAAMpL,SAASkhE,EAAAA,MAC3BpS,KAGF6L,IAAW,KAGP8hG,IAA6B9hF,EAAAA,GAAAA,GAAgB,KACjD2+E,OAGIoD,IAAkC/hF,EAAAA,GAAAA,GAAgB,KACtD4+E,OAQF,OAJA1tD,EAAAA,GAAAA,IAAkB0wD,GAAYC,GAAaxhG,GAAAA,KAC3C2hG,EAAAA,GAAAA,GAAgBJ,InMhiBH,SAAoCp8E,GAAa,IAC9DlK,EAAAA,GAAAA,IAAU,KACR,GAAK1e,EAAAA,GAAL,CAIA,IAAI4oB,EAgBJ,OATA3L,IAAcooF,aAAa,UAAWloF,IAKlCp+D,EAAAA,KAAWumJ,EAAAA,IACbr7J,SAASi9E,iBAAiB,eAAgB7J,IAGrC,KACLJ,IAAcooF,aAAa,UAAW,yDAClCtmJ,EAAAA,KAAWumJ,EAAAA,IACbr7J,SAASk9E,oBAAoB,eAAgB9J,KAhB/CJ,IAAcooF,aAAa,UAXE,4EAM/B,GAwBC,CAACz8E,GACN,CmMogBE28E,CAA2BnG,GAAqBE,IAG9Ct/E,EAAAA,GAAAA,IAAA,OAAK2C,IAAKglB,GAAcrhG,GAAG,OAAO0zB,UAAWA,GAAU4kD,SAAA,EACrDhB,EAAAA,GAAAA,GAAC4nF,GAAU,CAAC7iF,IAAKu5C,MACjBt+C,EAAAA,GAAAA,GAAC6nF,GAAY,CAACvpC,cAAeA,GAAehtC,SAAUA,KACtDtR,EAAAA,GAAAA,GAACk2E,GAAW,CAAC5kE,SAAUA,KACvBtR,EAAAA,GAAAA,GAAC0kB,GAAW,CAACzgD,OAAQu9G,KACrBxhF,EAAAA,GAAAA,GAACq4E,GAAW,CAACp0G,OAAQy9G,KACrB1hF,EAAAA,GAAAA,GAAC25E,GAAsB,CAAC11G,OAAQ29G,KAChC5hF,EAAAA,GAAAA,GAAC05E,GAAoB,CAACr/F,eAAgBA,KACtC2lB,EAAAA,GAAAA,GAACqe,GAAa,CAACp6C,OAAQ+9G,KACvBhiF,EAAAA,GAAAA,GAAC04E,GAAO,CAACz0G,OAAQg+G,KACjBjiF,EAAAA,GAAAA,GAAC6nC,GAAW,CAACC,MAAI,KACjB9nC,EAAAA,GAAAA,GAAC8nF,GAAc,KACf9nF,EAAAA,GAAAA,GAACg7E,GAAa,CAAC9pI,IAAKu3C,KACpBuX,EAAAA,GAAAA,GAACy6E,GAAe,CAACx2G,OAAQi+G,KACzBliF,EAAAA,GAAAA,GAACO,GAAe,CACdt8B,OAAQtnC,QAAQ4b,GAChB4qD,QAASmkF,GACTS,oBAAqBxvI,KAEvBynD,EAAAA,GAAAA,GAACI,GAAoB,CACnBpmD,kBAAmB+vC,EACnBoZ,QAASokF,KAEVxqF,IAAqBiD,EAAAA,GAAAA,GAACC,GAAS,CAACxC,YAAaV,KAC9CiD,EAAAA,GAAAA,GAACJ,GAAgB,CAACzZ,SAAUxpD,QAAQogE,GAAqBqlF,MACzDpiF,EAAAA,GAAAA,GAAC06E,GAAe,CACdz2G,OAAQtnC,QAAQ2lJ,GAAoBC,GACpC16I,OAAQy6I,EACRj9F,gBAAiBk9F,KAEnBviF,EAAAA,GAAAA,GAAC45E,GAAS,CAAChxF,WAAYA,EAAYixF,UAAWA,KAC9C75E,EAAAA,GAAAA,GAAC64E,GAAe,KAChB74E,EAAAA,GAAAA,GAACu8E,GAAiB,IACjBpzF,EAAAA,KAA+B6W,EAAAA,GAAAA,GAAC0/E,GAAa,KAC9C1/E,EAAAA,GAAAA,GAACgoF,GAAAA,EAAmB,KACpBhoF,EAAAA,GAAAA,GAACE,GAAS,CAAC/Z,SAAUi8F,KACrBpiF,EAAAA,GAAAA,GAACioF,GAAW,CAACvnF,eAAa,KAC1BV,EAAAA,GAAAA,GAACG,GAAkB,CAACl8B,OAAQu+G,KAC5BxiF,EAAAA,GAAAA,GAACu4E,GAAa,CACZnhI,IAAKqrI,EACLj6J,KAAM4vC,GAAiB5vC,KACvB0rC,yBAA0BkE,GAAiBlE,4BAE7C8rC,EAAAA,GAAAA,GAACs4E,GAAwB,CAAC77F,yBAA0BA,KACpDujB,EAAAA,GAAAA,GAAC4kB,GAAyB,KAC1B5kB,EAAAA,GAAAA,GAAC86E,GAAgB,CAAC72G,OAAQy+G,KAC1B1iF,EAAAA,GAAAA,GAAC66E,GAAa,CAAC52G,OAAQ0+G,KACvB3iF,EAAAA,GAAAA,GAAC+6E,GAAuB,CAAC92G,OAAQ4+G,KACjC7iF,EAAAA,GAAAA,GAAC46E,GAAwB,CAAC37I,MAAO6jJ,KACjC9iF,EAAAA,GAAAA,GAAC+qD,GAAY,CAAC9mF,OAAQ3E,EAAoB6jC,QAASrxD,MACnDkuD,EAAAA,GAAAA,GAACgrD,GAAY,CAAC/mF,OAAQ8+G,EAAoB5/E,QAASshF,MACnDzkF,EAAAA,GAAAA,GAACw4E,GAAkB,CAAC5tI,OAAQs2I,KAC5BlhF,EAAAA,GAAAA,GAAC2kB,GAAc,CAAC1gD,OAAQ69G,KACxB9hF,EAAAA,GAAAA,GAACM,GAAkB,CAACr8B,OAAQ2+G,KAC5B5iF,EAAAA,GAAAA,GAACi7E,GAAc,CACbh3G,OAAQtnC,QAAQqmJ,GAChB5jF,YAAaD,U,gCElkBrB,MA0HA,IAAeqB,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBj9E,IACQ,CACL8hK,iBAAkB9hK,EAAO6lE,WAHXoX,CAxH0B8kF,EAC5CC,WACAF,uBAEA,MAAM,aACJG,EAAY,QACZC,EAAO,wBACPC,EAAuB,2BACvBC,IACEniJ,EAAAA,EAAAA,OAEE,qBACJirD,EAAoB,aACpBG,EAAY,UACZ10C,GACEmrI,EAEE3mI,GAAOqgD,EAAAA,GAAAA,MACN6mF,EAAiBC,IAAsB/mF,EAAAA,GAAAA,IAAiB,KACxDgnF,EAAoBC,IAAyBjnF,EAAAA,GAAAA,KAAS,IACtDknF,EAAqBC,EAAyBC,IAA4Bh4E,EAAAA,GAAAA,IAAQ,IACnF,aAAE/L,IAAiBiV,EAAAA,GAAAA,GAA4BmuE,IAErDz2E,EAAAA,GAAAA,GAAW62E,EAA4B/2F,EAAeA,EAAe5oE,KAAKC,WAAQ6G,GAElF,MAAMq5J,GAAmBhnF,EAAAA,GAAAA,IAAY,KACnC0mF,EAAmB,KAClB,IAEGjN,GAAez5E,EAAAA,GAAAA,IAAa/V,SACXt8D,IAAjB8hE,GAKJi3F,EAAmB,KACnBO,EAAAA,GAAAA,IAAeh9F,GAAUr/C,KAAKy7I,EAAe7/F,IACvCA,aAAe0gG,GAAAA,IACjBZ,EAAQ,CAAEa,cAAc,IAG1BZ,IACAG,EAAmBnnI,EAAK,0BAXxBmnI,EAAmBnnI,EAAK,eAazB,CAACA,EAAMkwC,KAEVqP,EAAAA,GAAAA,IAAU,UACanxE,IAAjB8hE,EACFi3F,EAAmBnnI,EAAK,cACU,IAAzB+vC,GACTo3F,EAAmB,KAEpB,CAACj3F,EAAclwC,EAAM+vC,IAExB,MAAM83F,GAAuBpnF,EAAAA,GAAAA,IAAY,KACvC+mF,IACAT,EAAQ,CAAEa,cAAc,KACvB,CAACJ,EAA0BT,IAE9B,GAAKtjF,EAqBL,OACE5C,EAAAA,GAAAA,IAAA,OAAKhmD,UCpHmB,WDoHS4kD,SAAA,EAC/BoB,EAAAA,GAAAA,IAAA,OAAKhmD,UCrHsC,WDqHXomD,IAAKjhD,EAAKkhD,MAAQ,WAAQ9yE,EAAUqxE,SAAA,EAClEhB,EAAAA,GAAAA,GAACs9B,GAAAA,EAAuB,CACtBC,OAAQC,GAAAA,EAAe6rD,KACvB77E,WAAY87E,GACZvtG,KAxFQ,IAyFR3/B,UC1HyD,cD6H3D4jD,EAAAA,GAAAA,GAACupF,GAAAA,EAAY,CAEXC,kBAAgB,EAChBC,8BAA4B,EAC5B1sI,UAAWA,EACX9iB,MAAOwuJ,EACPtxE,YAAa51D,EAAK,qCAClBmoI,YAAanoI,EAAK,QAClBooI,aAAcX,EACdY,kBAAmBjB,EACnBkB,UAAQ,EACRC,2BAA4BlB,EAC5BmB,SAAUtO,GAXN,kBA1BRr5E,EAAAA,GAAAA,IAAA,OAAKhmD,UCpG0E,WDoGnD4kD,SAAA,EAC1BoB,EAAAA,GAAAA,IAAA,KAAApB,SAAA,EACEhB,EAAAA,GAAAA,GAAC2sB,GAAAA,EAAI,CAACpqB,QAASumF,EAAwB9nF,SAAC,YACvC,IAAI,2CAGPhB,EAAAA,GAAAA,GAAA,KAAAgB,UACEhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CAACC,MAAM,cAAc5mB,KAAK,OAAOi9D,QAAM,EAACz2C,QAASumF,EAAwB9nF,SAC7Ez/C,EAAK,qCAmCZy+C,EAAAA,GAAAA,GAACoxC,GAAAA,EAAa,CACZntE,OAAQ4kH,EACR1lF,QAAS4lF,EACT50J,KAAMotB,EAAK,mBACX8vF,aAAc9vF,EAAK,0BACnB+vF,eAAgB83C,EAChBnwC,sBAAoB,UEjJxB5wF,EAAAA,KAEFC,QAAQC,IAAI,8B","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/account.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/ui/focusList.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/ui/workspaces.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/AccountMenuItems.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/WorkspaceAvatar.tsx","webpack://telegram-t/./src/components/left/main/WorkspaceManager.tsx","webpack://telegram-t/./src/components/left/main/SavedMessages.tsx","webpack://telegram-t/./src/components/left/main/FocusListButton.tsx","webpack://telegram-t/./src/components/left/main/CustomButtons.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/value/GiftInfoValueModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/resale/GiftResalePriceComposerModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://telegram-t/./src/components/modals/priceConfirm/PriceConfirmModal.async.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.async.tsx","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.async.tsx","webpack://telegram-t/./src/components/modals/profileRating/ProfileRatingModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/util/animations/viewTransitionTypes.ts","webpack://telegram-t/./src/hooks/scroll/useTopOverscroll.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/common/AnimatedTabItem.module.scss?3313","webpack://telegram-t/./src/components/common/AnimatedTabItem.tsx","webpack://telegram-t/./src/components/common/AnimatedTabList.tsx","webpack://telegram-t/./src/components/common/AnimatedTabList.module.scss?5731","webpack://telegram-t/./src/components/right/gifts/StarGiftCollectionList.tsx","webpack://telegram-t/./src/components/right/gifts/StarGiftCollectionList.module.scss?00be","webpack://telegram-t/./src/components/right/stories/StoryAlbumList.tsx","webpack://telegram-t/./src/components/right/stories/StoryAlbumList.module.scss?ff67","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/FocusList.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/workspace/WorkspaceModal.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/hooks/tauri/useTauriEvent.ts","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = 3 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  replaceWebPage,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll, webPage,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, true, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, true, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newScheduledMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message as ApiMessage,\n            poll: update.poll,\n            webPage: update.webPage,\n          });\n        }\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, false, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message,\n            poll: update.poll,\n            webPage: update.webPage,\n            shouldForceReply,\n          });\n        }\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, false, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll, webPage } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateScheduledMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateScheduledMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'failedMessageTranslations': {\n      const { chatId, messageIds, toLanguageCode } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, []);\n\n      setGlobal(global);\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nexport function updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  isNew: boolean,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  if (!currentMessage && !isNew) return global;\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const threadId = selectThreadIdFromMessage(global, message);\n  global = updateThreadInfo(global, chatId, threadId, {\n    lastMessageId: message.id,\n  });\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiInputSuggestedPostInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n  MediaContent,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  STARS_CURRENCY_CODE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectCustomEmoji,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsMonoforumAdmin,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectSavedDialogIdFromMessage,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { updateWithLocalMedia } from '../apiUpdaters/messages';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  const isRestricted = selectIsChatRestricted(global, chatId);\n  // TODO Revise if `isRestricted` check is needed\n  if (!chat || isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadMessagesById', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageIds } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messages = await callApi('fetchMessagesById', {\n    chat,\n    messageIds,\n  });\n  if (!messages) return;\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chatId, buildCollectionByKey(messages, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n  const draftSuggestedPostInfo = !isForwarding && !isStoryReply\n    ? draft?.suggestedPostInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const threadInfo = selectThreadInfo(global, chatId!, threadId!);\n  const lastMessageId = threadId === MAIN_THREAD_ID\n    ? selectChatLastMessageId(global, chatId!) : threadInfo?.lastMessageId;\n\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const suggestedPostPrice = draftSuggestedPostInfo?.price;\n  const suggestedPostCurrency = suggestedPostPrice?.currency || STARS_CURRENCY_CODE;\n  const suggestedPostAmount = suggestedPostPrice?.amount || 0;\n  if (suggestedPostAmount && !draftReplyInfo) {\n    if (suggestedPostCurrency === STARS_CURRENCY_CODE) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n\n      if (suggestedPostAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: suggestedPostAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else if (suggestedPostCurrency === TON_CURRENCY_CODE) {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (suggestedPostAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const suggestedMessage = draftReplyInfo && draftSuggestedPostInfo\n    ? selectChatMessage(global, chatId!, draftReplyInfo.replyToMsgId) : undefined;\n  let suggestedMedia: MediaContent | undefined;\n  if (draftSuggestedPostInfo && suggestedMessage?.content) {\n    suggestedMedia = suggestedMessage.content;\n  }\n\n  const params: SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    suggestedPostInfo: draftSuggestedPostInfo,\n    suggestedMedia,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n    ...suggestedMessage && { isInvertedMedia: suggestedMessage?.isInvertedMedia },\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group, MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('editTodo', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, todo, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('editTodo', {\n    chat,\n    message,\n    todo,\n  });\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!text || !chat) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  if (chat.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n    suggestedPostInfo: currentDraft?.suggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply, shouldKeepSuggestedPost,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = (shouldKeepReply && currentReplyInfo)\n    || (shouldKeepSuggestedPost && currentDraft.suggestedPostInfo) ? {\n      replyInfo: shouldKeepReply ? currentReplyInfo : undefined,\n      suggestedPostInfo: shouldKeepSuggestedPost ? currentDraft.suggestedPostInfo : undefined,\n    } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n    suggestedPostInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('updateDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedSuggestedPostInfo = {\n    ...currentDraft?.suggestedPostInfo,\n    ...update,\n  } as ApiInputSuggestedPostInfo;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    suggestedPostInfo: updatedSuggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  saveDraft({\n    global, chatId, threadId, draft: undefined, isLocalOnly: false,\n  });\n});\n\naddActionHandler('initDraftFromSuggestedMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n\n  actions.clearDraft({\n    chatId,\n    threadId,\n    isLocalOnly: true,\n  });\n\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId,\n    monoforumPeerId: selectSavedDialogIdFromMessage(global, message),\n    tabId,\n  });\n\n  if (message.suggestedPostInfo) {\n    const { scheduleDate, ...messageSuggestedPost } = message.suggestedPostInfo;\n    const now = getServerTime();\n    const futureMin = global.appConfig.starsSuggestedPostFutureMin;\n\n    const validScheduleDate = scheduleDate && scheduleDate > now + futureMin ? scheduleDate : undefined;\n\n    actions.updateDraftSuggestedPostInfo({\n      ...messageSuggestedPost,\n      scheduleDate: validScheduleDate,\n      tabId,\n    });\n  }\n\n  actions.saveDraft({\n    chatId,\n    threadId,\n    text: message.content.text,\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('updateInsertingPeerIdMention', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    insertingPeerIdMention: peerId,\n  }, tabId);\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n}: {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n\n  messageIdsToDelete.forEach((messageId) => {\n    actions.removeFromFocusList({ chatId, messageId });\n  });\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || chat.isMonoforum) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreviewId: webPagePreview?.id,\n  }, tabId);\n  setGlobal(global);\n\n  if (!webPagePreview) return;\n\n  actions.apiUpdate({\n    '@type': 'updateWebPage',\n    webPage: webPagePreview,\n  });\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webPagePreviewId: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('toggleTodoCompleted', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, completedIds, incompletedIds } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const currentUserId = global.currentUserId;\n\n  const currentTodo = message?.content.todo;\n  if (!currentTodo || !currentUserId || !chat) {\n    return;\n  }\n\n  const currentCompletions = currentTodo.completions || [];\n  const currentCompletionIds = currentCompletions.map((c) => c.itemId);\n\n  const newCompletions = [...currentCompletions];\n  const now = getServerTime();\n\n  completedIds.forEach((itemId) => {\n    if (!currentCompletionIds.includes(itemId)) {\n      newCompletions.push({\n        itemId,\n        completedBy: currentUserId,\n        completedAt: now,\n      });\n    }\n  });\n\n  const finalCompletions = newCompletions.filter((c) => !incompletedIds.includes(c.itemId));\n\n  const newContent = {\n    ...message.content,\n    todo: {\n      ...currentTodo,\n      completions: finalCompletions,\n    },\n  };\n\n  const messageUpdate: Partial<ApiMessage> = {\n    ...message,\n    content: newContent,\n  };\n\n  global = updateWithLocalMedia(global, chatId, message.id, false, messageUpdate);\n  setGlobal(global);\n\n  callApi('toggleTodoCompleted', { chat, messageId: message.id, completedIds, incompletedIds });\n});\naddActionHandler('appendTodoList', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, items, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('appendTodoList', {\n    chat,\n    message,\n    items,\n  });\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !selectCustomEmoji(global, documentId)));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    if (selectIsMonoforumAdmin(global, peerId)) {\n      return undefined;\n    }\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n    || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  getActions().sendMessages({ sendParams });\n\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\naddActionHandler('approveSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, scheduleDate, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const isAdmin = selectIsMonoforumAdmin(global, chatId);\n\n  if (!isAdmin && message?.suggestedPostInfo?.price?.amount) {\n    const neededAmount = message.suggestedPostInfo.price.amount;\n    const isCurrencyStars = message.suggestedPostInfo.price.currency === STARS_CURRENCY_CODE;\n\n    if (isCurrencyStars) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n      if (neededAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: neededAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (neededAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: false,\n    scheduleDate,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostApproved' },\n    tabId,\n  });\n});\n\naddActionHandler('rejectSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, rejectComment, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: true,\n    rejectComment,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostRejectedNotification' },\n    tabId,\n  });\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, linkContext, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url);\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, linkContext, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n    parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n    window.open(parsedUrl.href, '_blank', 'noopener');\n    return;\n  }\n\n  if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n    actions.closeStoryViewer({ tabId });\n\n    actions.requestLinkUrlAuth({ url, tabId });\n    return;\n  }\n\n  const isWhitelisted = appConfig.whitelistedDomains.includes(parsedUrl.hostname);\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal && !isWhitelisted;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    monoforumPeerId: replyingInfo.toThreadId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTonGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchTonGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    tonGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiSearchPostsFlood, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { toChannelId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('checkSearchPostsFlood', async (global, actions, payload): Promise<void> => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkSearchPostsFlood', query);\n\n  global = getGlobal();\n  if (!result) {\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    searchFlood: result,\n  }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n\n  if (type === 'publicPosts') {\n    global = updateGlobalSearchFetchingStatus(global, { publicPosts: true }, tabId);\n    setGlobal(global);\n  }\n\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n    searchFlood?: ApiSearchPostsFlood;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  const previousSearchFlood = selectTabState(global, tabId).globalSearch.searchFlood;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false, publicPosts: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  const searchFlood = result.searchFlood || previousSearchFlood;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    searchFlood,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n\n  if (type === 'publicPosts' && searchFlood && !searchFlood.queryIsFree && !offsetId\n    && previousSearchFlood?.remains === 0) {\n    const lang = getTranslationFn();\n    getActions().showNotification({\n      icon: 'star',\n      message: {\n        key: 'NotificationPaidExtraSearch',\n        variables: {\n          stars: formatStarsAsText(lang, searchFlood.starsAmount),\n        },\n      },\n    });\n  }\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchPublicPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, savedTag, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n): number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction: LoadMoreDirection,\n  limit: number, newFoundIdsCount: number,\n  currentSegment?: ChatMediaSearchSegment,\n): LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }));\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadAccountDaysTtl', async (global, actions, payload): Promise<void> => {\n  const result = await callApi('fetchAccountTTL');\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: result.days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('setAccountTTL', async (global, actions, payload): Promise<void> => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  const result = await callApi('setAccountTTL', { days });\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: days,\n    },\n  };\n  setGlobal(global);\n  actions.closeDeleteAccountModal({ tabId });\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatRestricted,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('toggleNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n\n  if (chat && selectIsChatRestricted(global, peerId)) {\n    return;\n  }\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp<T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings, ThreadId } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { pick } from '../../../util/iteratees.ts';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  getWebAppKey,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickSuggestedMessageButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { buttonType } = button;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  switch (buttonType) {\n    case 'suggestChanges':\n      if (!message) break;\n\n      actions.initDraftFromSuggestedMessage({ chatId, messageId, tabId });\n      break;\n  }\n});\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId, linkContext: { type: 'message', chatId, messageId, threadId } });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, threadId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, threadId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${getMainUsername(botSender)} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  actions.sendInlineBotApiResult({ ...params });\n\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId,\n      botId: (isFromBotMenu ? chatId : bot.id),\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const currentInlineBotSettings = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !currentInlineBotSettings || query !== currentInlineBotSettings.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((currentInlineBotSettings.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...currentInlineBotSettings,\n    ...pick(result, ['help', 'switchPm', 'switchWebview']),\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: currentInlineBotSettings.offset === '' || currentInlineBotSettings.offset === result.nextOffset\n      ? result.results\n      : (currentInlineBotSettings.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, threadId?: ThreadId, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      openGame({\n        url, chatId: chat.id, messageId, tabId,\n      });\n    } else {\n      openUrl({ url, tabId, linkContext: { type: 'message', chatId: chat.id, messageId, threadId } });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiInputInvoiceStarGiftResale,\n  ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL, STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('buyStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    slug, peerId, price, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGiftResale = {\n    type: 'stargiftResale',\n    slug,\n    peerId,\n    currency: price.currency,\n  };\n\n  payInputStarInvoice(global, inputInvoice, price.amount, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n    && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId, gift,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n      gift,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, selectedResaleGift, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n      selectedResaleGift,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = getServerTime();\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    const result = await callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    global = getGlobal();\n    if (result && global.currentUserId) {\n      actions.reloadPeerSavedGifts({ peerId: global.currentUserId });\n    }\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const actions = getActions();\n  const isTon = inputInvoice.type === 'stargiftResale' && inputInvoice.currency === TON_CURRENCY_CODE;\n  const balance = isTon ? global.ton?.balance : global.stars?.balance;\n  const currency = isTon ? TON_CURRENCY_CODE : STARS_CURRENCY_CODE;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ currency, tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  const formPrice = form.invoice.totalAmount;\n  if (formPrice !== price) {\n    actions.openPriceConfirmModal({\n      originalAmount: price,\n      newAmount: formPrice,\n      currency,\n      directInfo: {\n        inputInvoice,\n        formId: form.formId,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n\nfunction handlePaymentFormError(error: string, tabId: number) {\n  if (error === 'SLUG_INVALID') {\n    getActions().showNotification({\n      message: {\n        key: 'PaymentInvoiceNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  getActions().showDialog({ data: { message: error, hasErrorKey: true }, tabId });\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { RESALE_GIFTS_LIMIT } from '../../../limits';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateChats,\n  updatePeerStarGiftCollections,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveGiftsCollectionId,\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerCollectionSavedGifts,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStarsStatus = global.stars;\n  const needsTopupOptions = !currentStarsStatus?.topupOptions;\n\n  const [starsStatus, tonStatus, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    callApi('fetchStarsStatus', { isTon: true }),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!(starsStatus || tonStatus) || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (starsStatus && starsStatus.balance.currency === STARS_CURRENCY_CODE) {\n    global = {\n      ...global,\n      stars: {\n        ...currentStarsStatus,\n        balance: starsStatus.balance,\n        topupOptions: topupOptions || currentStarsStatus!.topupOptions,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n        subscriptions: undefined,\n      },\n    };\n\n    if (starsStatus.history) {\n      global = appendStarsTransactions(global, 'all', starsStatus.history, starsStatus.nextHistoryOffset);\n    }\n\n    if (starsStatus.subscriptions) {\n      global = appendStarsSubscriptions(global, starsStatus.subscriptions, starsStatus.nextSubscriptionOffset);\n    }\n  }\n\n  if (tonStatus?.balance.currency === TON_CURRENCY_CODE) {\n    global = {\n      ...global,\n      ton: {\n        ...tonStatus,\n        balance: tonStatus.balance,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n      },\n    };\n\n    global = updateStarsBalance(global, tonStatus.balance);\n\n    if (tonStatus.history) {\n      global = appendStarsTransactions(global, 'all', tonStatus.history, tonStatus.nextHistoryOffset, true);\n    }\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type, isTon } = payload;\n\n  const history = isTon ? global.ton?.history[type] : global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound',\n    isOutbound: type === 'outbound',\n    offset: offset || '',\n    isTon,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset, isTon);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const byId = buildCollectionByKey(result.gifts, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n    resale: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean);\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean);\n\n  const resaleStarGiftIds = allStarGifts.map((gift) => (gift.availabilityResale ? gift.id : undefined))\n    .filter(Boolean);\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n  idsByCategoryName.resale = resaleStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('updateResaleGiftsFilter', (global, actions, payload): ActionReturnType => {\n  const {\n    filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      filter,\n    },\n  }, tabId);\n  if (tabState.resaleGifts.giftId) {\n    actions.loadResaleGifts({ giftId: tabState.resaleGifts.giftId, shouldRefresh: true, tabId });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadResaleGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  let tabState = selectTabState(global, tabId);\n  if (tabState.resaleGifts.isLoading || (tabState.resaleGifts.isAllLoaded && !shouldRefresh)) return;\n\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      isLoading: true,\n      ...(shouldRefresh && {\n        count: 0,\n        nextOffset: undefined,\n        isAllLoaded: false,\n      }),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const nextOffset = tabState.resaleGifts.nextOffset;\n  const attributesHash = tabState.resaleGifts.attributesHash;\n  const filter = tabState.resaleGifts.filter;\n\n  const result = await callApi('fetchResaleGifts', {\n    giftId,\n    offset: nextOffset,\n    limit: RESALE_GIFTS_LIMIT,\n    attributesHash,\n    filter,\n  });\n\n  if (!result) {\n    return;\n  };\n\n  const {\n    chats,\n    users,\n  } = result;\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n\n  const currentGifts = tabState.resaleGifts.gifts;\n  const newGifts = !shouldRefresh ? currentGifts.concat(result.gifts) : result.gifts;\n  const currentUpdateIteration = tabState.resaleGifts.updateIteration;\n  const shouldUpdateIteration = tabState.resaleGifts.giftId !== giftId || shouldRefresh;\n  const updateIteration = shouldUpdateIteration ? currentUpdateIteration + 1 : currentUpdateIteration;\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      giftId,\n      count: result.count || tabState.resaleGifts.count,\n      gifts: newGifts,\n      attributes: result.attributes || tabState.resaleGifts.attributes,\n      counters: result.counters || tabState.resaleGifts.counters,\n      attributesHash: result.attributesHash,\n      nextOffset: result.nextOffset,\n      isLoading: false,\n      isAllLoaded: !result.nextOffset,\n      updateIteration,\n    },\n  }, tabId);\n\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  setGlobal(global);\n});\n\naddActionHandler('resetResaleGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    resaleGifts: {\n      updateIteration: tabState.resaleGifts.updateIteration + 1,\n      filter: DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n      count: 0,\n      gifts: [],\n    },\n  }, tabId);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  global = getGlobal();\n\n  const fetchingCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n  const currentGifts = selectPeerCollectionSavedGifts(global, peerId, fetchingCollectionId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n    collectionId: fetchingCollectionId === 'all' ? undefined : fetchingCollectionId,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n  const currentCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n\n  if (!result || currentCollectionId !== fetchingCollectionId || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reloadPeerSavedGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n  } = payload;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    const activeCollectionId = selectActiveGiftsCollectionId(global, peerId, tabState.id);\n    if (selectPeerCollectionSavedGifts(global, peerId, activeCollectionId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result || result.balance.currency !== STARS_CURRENCY_CODE) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const activeCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n  const oldGifts = selectTabState(global, tabId).savedGifts.collectionsByPeerId[peerId]?.[activeCollectionId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.reloadPeerSavedGifts({ peerId });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  actions.reloadPeerSavedGifts({ peerId });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  actions.reloadPeerSavedGifts({ peerId });\n});\n\naddActionHandler('updateStarGiftPrice', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, price,\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n\n  if (!requestSavedGift) {\n    return;\n  }\n\n  const result = await callApi('updateStarGiftPrice', {\n    inputSavedGift: requestSavedGift,\n    price,\n  });\n\n  if (!result) return;\n\n  actions.reloadPeerSavedGifts({ peerId: global.currentUserId! });\n});\n\naddActionHandler('loadStarGiftCollections', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    hash,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchStarGiftCollections', {\n    peer,\n    hash,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updatePeerStarGiftCollections(global, peerId, result.collections);\n  setGlobal(global);\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions: ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n    * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n\n  if (stats.type === 'channel') {\n    const messageInteractions = stats.recentPosts.filter((post) => post.type === 'message');\n    const storyInteractions = stats.recentPosts.filter((post) => post.type === 'story');\n\n    if (messageInteractions.length > 0) {\n      actions.loadMessagesById({\n        chatId,\n        messageIds: messageInteractions.map((interaction) => interaction.msgId),\n      });\n    }\n\n    if (storyInteractions.length > 0) {\n      actions.loadPeerStoriesByIds({\n        peerId: chatId,\n        storyIds: storyInteractions.map((interaction) => interaction.storyId),\n      });\n    }\n  }\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat((forwards || [])),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\nimport { selectActiveStoriesCollectionId } from '../../selectors/stories';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const selectedAlbumId = selectActiveStoriesCollectionId(global, tabId);\n  if (selectedAlbumId !== 'all') {\n    let albumData = peerStories?.idsByAlbumId?.[selectedAlbumId];\n    if (albumData?.isFullyLoaded) {\n      return;\n    }\n\n    const result = await callApi('fetchAlbumStories', {\n      peer,\n      albumId: selectedAlbumId,\n      offset: offsetId || 0,\n    });\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds, false, selectedAlbumId);\n    peerStories = selectPeerStories(global, peerId);\n\n    albumData = peerStories?.idsByAlbumId?.[selectedAlbumId];\n    if (Object.values(result.stories).length === 0\n      || (albumData?.ids?.length && albumData.ids.length >= result.count)) {\n      global = updatePeerStoriesFullyLoaded(global, peerId, true, false, selectedAlbumId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n\naddActionHandler('loadStoryAlbums', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const albums = await callApi('fetchAlbums', { peer });\n  if (!albums) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      albumsByPeerId: {\n        ...global.stories.albumsByPeerId,\n        [peerId]: albums,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('selectStoryAlbum', (global, actions, payload): ActionReturnType => {\n  const { peerId, albumId, tabId = getCurrentTabId() } = payload;\n\n  if (albumId && peerId) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, false);\n  }\n\n  global = updateTabState(global, {\n    selectedStoryAlbumId: albumId || undefined,\n  }, tabId);\n\n  setGlobal(global);\n\n  actions.loadPeerProfileStories({ peerId, tabId });\n});\n\naddActionHandler('loadAlbumStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, albumId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchAlbumStories', {\n    peer,\n    albumId,\n    offset: offsetId || 0,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('resetSelectedStoryAlbum', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    selectedStoryAlbumId: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  window.open(hashUrl, '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n    && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-expect-error -- No idea how to type this properly\n    actions[action]({\n      ...(callbackPayload),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getTranslationFn } from '../../../util/localization';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { selectMessageDownloadableMedia } from '../../selectors/media';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: { key: 'ErrorFocusInaccessibleMessage' }, tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = selectMessageDownloadableMedia(global, message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      message: {\n        key: IS_TOUCH_ENV ? 'ContextMenuHintTouch' : 'ContextMenuHintMouse',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openTodoListModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, forNewTask, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    todoListModal: {\n      chatId,\n      messageId,\n      forNewTask,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeTodoListModal', 'todoListModal');\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (CHANGELOG_DATETIME && Date.now() > CHANGELOG_DATETIME + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestMessageModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestedPostApprovalModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestedPostApprovalModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = getTranslationFn();\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ApiMessage } from '../../api/types';\n\nimport { type LangFn } from '../../util/localization';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = (renderMessageText({ message, shouldRenderAsHtml: true }) as string[])?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true) as string;\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query\n    && currentContent !== GlobalSearchContent.BotApps && currentContent !== GlobalSearchContent.PublicPosts\n    ? { chats: !chatId, messages: true } : undefined;\n\n  actions.checkSearchPostsFlood({ query, tabId });\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    deleteAccountModal: {\n      selfDestructAccountDays: days,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteAccountModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n\naddActionHandler('openProfileRatingModal', (global, actions, payload): ActionReturnType => {\n  const { userId, level, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    profileRatingModal: {\n      userId,\n      level,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeProfileRatingModal', 'profileRatingModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_TAURI } from './browser/globalEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport async function setPageTitleInstant(nextTitle: string) {\n  if (IS_TAURI) {\n    await window.tauri?.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n  PAGE_TITLE_TAURI,\n} from '../../../config';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentMessage: undefined,\n      currentStoryId: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n      currentMessage: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n  const isChatWithBot = chatId ? selectIsChatWithBot(global, chat) : undefined;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  return {\n    ...global,\n    attachmentSettings: {\n      ...global.attachmentSettings,\n      ...payload,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  const defaultTitle = IS_TAURI ? PAGE_TITLE_TAURI : PAGE_TITLE;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${defaultTitle} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  // Show blinking title in browser tab\n  if (!IS_TAURI && global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(`${prefix}${defaultTitle}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig;\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline({ isOnline: newBlurredTabsCount !== getAllMultitabTokens().length });\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ApiSavedGifts } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { selectActiveGiftsCollectionId } from '../../../global/selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique\n    && !updatedFilter.shouldIncludeUpgradable) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      shouldIncludeUpgradable: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  const activeCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      collectionsByPeerId: {\n        [peerId]: {\n          [activeCollectionId]: tabState.savedGifts.collectionsByPeerId[peerId]?.[activeCollectionId],\n        } as Record<number | 'all', ApiSavedGifts>,\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const activeCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      collectionsByPeerId: {\n        [peerId]: {\n          [activeCollectionId]: tabState.savedGifts.collectionsByPeerId[peerId]?.[activeCollectionId],\n        } as Record<number | 'all', ApiSavedGifts>,\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openPriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originalAmount,\n    newAmount,\n    currency,\n    directInfo,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    priceConfirmModal: {\n      originalAmount,\n      newAmount,\n      currency,\n      directInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    priceConfirmModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\nimport { selectTimestampableMedia } from '../../selectors/media';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = selectTimestampableMedia(global, message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? selectTimestampableMedia(global, replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import { getPromiseActions } from '../../../global';\n\nimport type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { selectChat } from '../../../global/selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    currency = STARS_CURRENCY_CODE,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n      currency,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await getPromiseActions().loadMessage({ chatId, messageId });\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n  const recipientId = 'recipientId' in payload ? payload.recipientId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n      recipientId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftResalePriceComposerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    giftResalePriceComposerModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftInMarket', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const giftModal = selectTabState(global, tabId).giftModal;\n\n  actions.closeGiftInfoValueModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (giftModal) {\n    return updateTabState(global, {\n      giftModal: {\n        ...giftModal,\n        selectedResaleGift: gift,\n      },\n    }, tabId);\n  }\n\n  actions.openGiftModal({\n    forUserId: global.currentUserId!,\n    selectedResaleGift: gift,\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('closeResaleGiftsMarket', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  actions.resetResaleGifts({ tabId });\n\n  const giftModal = selectTabState(global, tabId).giftModal;\n\n  if (giftModal) {\n    return updateTabState(global, {\n      giftModal: {\n        ...giftModal,\n        selectedResaleGift: undefined,\n      },\n    }, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftInfoValueModal', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('fetchUniqueStarGiftValueInfo', { slug: gift.slug });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftInfoValueModal: {\n      valueInfo: result,\n      gift,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftInfoValueModal', 'giftInfoValueModal');\n\naddTabStateResetterAction('closeGiftResalePriceComposerModal', 'giftResalePriceComposerModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n\naddActionHandler('updateSelectedGiftCollection', (global, actions, payload): ActionReturnType => {\n  const { peerId, collectionId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      activeCollectionByPeerId: {\n        ...tabState.savedGifts.activeCollectionByPeerId,\n        [peerId]: collectionId,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetSelectedGiftCollection', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      activeCollectionByPeerId: {\n        ...tabState.savedGifts.activeCollectionByPeerId,\n        [peerId]: undefined,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerId: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\r\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\r\nimport { updateTabState } from '../../reducers/tabs';\r\nimport { addActionHandler } from '../../index';\r\nimport { selectTabState } from '../../selectors';\r\n\r\naddActionHandler('toggleFocusList', (global, actions, payload): ActionReturnType => {\r\n  const { force, tabId = getCurrentTabId() } = payload ?? {};\r\n  const isFocusListShown = force !== undefined ? force : !selectTabState(global, tabId).isFocusListShown;\r\n\r\n  global = updateTabState(global, { isFocusListShown }, tabId);\r\n  global = { ...global, lastIsFocusListShown: isFocusListShown };\r\n\r\n  return global;\r\n});\r\n\r\naddActionHandler('addToFocusList', (global, actions, payload): ActionReturnType => {\r\n  const { chatId, messageId } = payload;\r\n  const messageKey = `${chatId}_${messageId}`;\r\n  \r\n  const currentMessageIds = global.focusList.messageIds;\r\n  if (currentMessageIds.includes(messageKey)) {\r\n    return global;\r\n  }\r\n\r\n  return {\r\n    ...global,\r\n    focusList: {\r\n      ...global.focusList,\r\n      messageIds: [...currentMessageIds, messageKey],\r\n    },\r\n  };\r\n});\r\n\r\naddActionHandler('removeFromFocusList', (global, actions, payload): ActionReturnType => {\r\n  const { chatId, messageId } = payload;\r\n  const messageKey = `${chatId}_${messageId}`;\r\n  \r\n  return {\r\n    ...global,\r\n    focusList: {\r\n      ...global.focusList,\r\n      messageIds: global.focusList.messageIds.filter(id => id !== messageKey),\r\n    },\r\n  };\r\n});\r\n","import type { ApiChat, ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\nconst INVALIDATE_FULL_CHAT_FIELDS = new Set<keyof ApiChat>([\n  'boostLevel', 'isForum', 'isLinkedInDiscussion', 'fakeType', 'restrictionReasons', 'isJoinToSend', 'isJoinRequest',\n  'type',\n]);\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n        && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      if (localChat) {\n        const chatUpdate = update.chat;\n        const changedFields = (Object.keys(chatUpdate) as (keyof ApiChat)[])\n          .filter((key) => localChat[key] !== chatUpdate[key]);\n        if (changedFields.some((key) => INVALIDATE_FULL_CHAT_FIELDS.has(key))) {\n          actions.invalidateFullInfo({ peerId: update.id });\n        }\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      const isOur = message.senderId ? message.senderId === global.currentUserId : message.isOutgoing;\n      if (isOur && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal || chat.id === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n          && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n      if (!ids) {\n        actions.loadPinnedDialogs({ listType });\n        return global;\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updateChat,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      global = updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n      global = updateChat(global, update.userId, { emojiStatus: update.emojiStatus });\n      return global;\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  replaceWebPage,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateFullWebPage,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls, webPages,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      if (webPages) {\n        webPages.forEach((webPage) => {\n          if (webPage.webpageType === 'full') {\n            global = updateFullWebPage(global, webPage.id, webPage);\n          } else {\n            global = replaceWebPage(global, webPage.id, webPage);\n          }\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateWebPage': {\n      const { webPage } = update;\n      if (webPage.webpageType === 'full') {\n        global = updateFullWebPage(global, webPage.id, webPage);\n      } else {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          const user = selectPhoneCallUser(global);\n          if (!user) return;\n          notifyAboutCall({\n            call,\n            user,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType, GlobalState } from '../../types';\r\n\r\nimport { addActionHandler, setGlobal } from '../..';\r\n\r\ntype UpdateWorkspaceSettingsPayload = Partial<GlobalState['workspaces']>;\r\n\r\nfunction updateWorkspaceSettings<T extends GlobalState>(\r\n  global: T, payload: UpdateWorkspaceSettingsPayload,\r\n) {\r\n  global = {\r\n    ...global,\r\n    workspaces: {\r\n      ...global.workspaces,\r\n      ...payload,\r\n    },\r\n  };\r\n  setGlobal(global);\r\n  return global;\r\n}\r\n\r\naddActionHandler('openWorkspaceCreator', (global): ActionReturnType => {\r\n  updateWorkspaceSettings(global, { isCreatorOpen: true, editingWorkspaceId: undefined });\r\n});\r\n\r\naddActionHandler('openWorkspaceEditor', (global, actions, payload?: { workspaceId: string }): ActionReturnType => {\r\n  updateWorkspaceSettings(global, { isCreatorOpen: true, editingWorkspaceId: payload?.workspaceId });\r\n});\r\n\r\naddActionHandler('closeWorkspaceCreator', (global): ActionReturnType => {\r\n  updateWorkspaceSettings(global, { isCreatorOpen: false, editingWorkspaceId: undefined });\r\n});","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftResale') {\n        const starGiftModalState = selectTabState(global, tabId).giftInfoModal;\n\n        if (starGiftModalState) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftBought',\n            },\n            tabId,\n          });\n          if (starGiftModalState.peerId) {\n            actions.reloadPeerSavedGifts({ peerId: starGiftModalState.peerId });\n          }\n          actions.reloadPeerSavedGifts({ peerId: inputInvoice.peerId });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftInfoModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftUpgrade' && global.currentUserId) {\n        actions.reloadPeerSavedGifts({ peerId: global.currentUserId });\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { AnimationLevel, Workspace } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useWorkspaceStorage } from '../../../hooks/useWorkspaceStorage';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n    openSettingsScreen,\n  } = getActions();\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const { currentWorkspaceId, savedWorkspaces, excludeOtherWorkspaces } = useWorkspaceStorage();\n  const everythingWorkspace = { id: '0', name: 'Personal', foldersIds: [] } satisfies Workspace;\n  const currentWorkspace = savedWorkspaces.find((workspace) => workspace.id === currentWorkspaceId) || everythingWorkspace;\n\n  const displayedFolders = useMemo(() => {\n    if (!orderedFolderIds) return undefined;\n\n    return orderedFolderIds\n      .map((id) => {\n        if (id === ALL_FOLDER_ID && currentWorkspaceId === everythingWorkspace.id) {\n          return allChatsFolder;\n        }\n        \n        if (currentWorkspaceId === everythingWorkspace.id && excludeOtherWorkspaces && savedWorkspaces.some(w => w.foldersIds.includes(id))) {\n          return null;\n        }\n\n        const folder = chatFoldersById[id] || allChatsFolder;\n        if (folder && (currentWorkspaceId === everythingWorkspace.id || currentWorkspace.foldersIds.includes(id))) {\n          return folder;\n        }\n\n        return null;\n      })\n      .filter(Boolean);\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds, currentWorkspaceId, currentWorkspace.foldersIds, excludeOtherWorkspaces]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  \n  const adjustedFolderCountersById = useMemo(() => {\n    const shouldFilterByWorkspace = currentWorkspaceId === everythingWorkspace.id && excludeOtherWorkspaces;\n    if (!shouldFilterByWorkspace) {\n      return folderCountersById;\n    }\n\n    const folderFromWorkspaces = savedWorkspaces.flatMap(w => w.foldersIds);\n    const adjusted = { ...folderCountersById };\n    \n    const allFolderUnreadChats = folderUnreadChatsCountersById[ALL_FOLDER_ID];\n    if (allFolderUnreadChats) {\n      const filteredUnreadChats = allFolderUnreadChats.filter((chatId) => \n        !folderFromWorkspaces.some(folderId => getOrderedIds(folderId)?.includes(chatId))\n      );\n      \n      if (adjusted[ALL_FOLDER_ID]) {\n        adjusted[ALL_FOLDER_ID] = {\n          ...adjusted[ALL_FOLDER_ID],\n          chatsCount: filteredUnreadChats.length,\n        };\n      }\n    }\n    \n    return adjusted;\n  }, [\n    folderCountersById, \n    currentWorkspaceId, \n    excludeOtherWorkspaces, \n    savedWorkspaces, \n    folderUnreadChatsCountersById,\n    everythingWorkspace.id,\n  ]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            openSettingsScreen({ screen: SettingsScreens.Folders });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount: adjustedFolderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(adjustedFolderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, adjustedFolderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, openSettingsScreen,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        key={`${currentWorkspaceId}-${activeChatFolder}`}\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        isMainList\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n        withTags\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={resolveTransitionName('slideOptimized', animationLevel, shouldSkipHistoryAnimations, lang.isRtl)}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { animationLevel } = selectSharedSettings(global);\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const currentAccountInfo = useMemo(() => {\n    return Object.values(accounts).find((account) => account.userId === currentUser.id);\n  }, [accounts, currentUser.id]);\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const isSameServer = account.isTest === currentAccountInfo?.isTest;\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: isSameServer ? account.emojiStatusId : undefined,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                {account.isTest && <span className=\"account-menu-item-test\">T</span>}\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","import type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  IS_BETA,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MED,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  currentUser?: ApiUser;\n  theme: ThemeKey;\n  attachBots: GlobalState['attachMenu']['bots'];\n  accountsTotalLimit: number;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  archiveSettings,\n  animationLevel,\n  theme,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    setSharedSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MED);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel, wasAnimationLevelSetManually: true });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener,noreferrer');\n  });\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('MenuArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"group\"\n        onClick={onSelectContacts}\n      >\n        {lang('MenuContacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('MenuSettings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('MenuNightMode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'AriaMenuDisableNightMode' : 'AriaMenuEnableNightMode')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('MenuAnimationsSwitch')}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport GiftEffectWrapper from '../../common/gift/GiftEffectWrapper';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  const buttonRef = useRef<HTMLButtonElement>();\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const collectibleEmojiStatus = emojiStatus?.type === 'collectible' ? emojiStatus : undefined;\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      (status) => 'collectibleId' in status && status.documentId === sticker.id,\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <GiftEffectWrapper\n            withSparkles={Boolean(collectibleEmojiStatus)}\n            sparklesClassName=\"statusSparkles\"\n            sparklesColor={collectibleEmojiStatus?.textColor}\n          >\n            <CustomEmoji\n              key={emojiStatus.documentId}\n              documentId={emojiStatus.documentId}\n              size={EMOJI_STATUS_SIZE}\n              loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            />\n          </GiftEffectWrapper>\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { IS_APP, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?: boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSharedSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    openSettingsScreen,\n    searchMessagesGlobal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const handleSearchEnter = useLastCallback(() => {\n    if (searchQuery && content === LeftColumnContent.GlobalSearch) {\n      searchMessagesGlobal({\n        type: 'publicPosts',\n        shouldResetResultsByType: true,\n      });\n    }\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const withStoryToggler = !isSearchFocused && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  const version = useMemo(() => {\n    let fullVersion = '';\n    if (IS_TAURI && window.tauri.version) {\n      fullVersion = `Tauri ${window.tauri.version} | `;\n    }\n\n    fullVersion += `${APP_NAME} ${versionString}`;\n\n    return fullVersion;\n  }, [versionString]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div\n        id=\"LeftMainHeader\"\n        className=\"left-header\"\n        data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}\n      >\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={version}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_TAURI && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n          onEnter={handleSearchEnter}\n        >\n          {searchContent}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats\n        || fetchingStatus.messages || fetchingStatus.publicPosts) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import { ApiUser } from '../../../api/types';\r\nimport { FC, memo } from '../../../lib/teact/teact';\r\nimport { Workspace } from '../../../types';\r\nimport Avatar, { AvatarSize } from '../../common/Avatar';\r\n\r\ntype OwnProps = {\r\n  workspace: Workspace;\r\n  currentUser?: ApiUser;\r\n  size?: AvatarSize;\r\n};\r\n\r\nconst WorkspaceAvatar: FC<OwnProps> = ({ workspace, currentUser, size }) => {\r\n  const everythingWorkspaceId = '0';\r\n\r\n  return workspace.id === everythingWorkspaceId\r\n    ? <Avatar isRectangular peer={currentUser} size={size} />\r\n    : <Avatar isRectangular size={size} text={workspace.name} />\r\n};\r\n\r\nexport default memo(WorkspaceAvatar);","import type { FC } from '../../../lib/teact/teact';\r\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\r\nimport { getActions, withGlobal } from '../../../global';\r\nimport { Workspace } from '../../../types';\r\nimport { useWorkspaceStorage } from '../../../hooks/useWorkspaceStorage';\r\n\r\nimport DropdownMenu from '../../ui/DropdownMenu';\r\nimport MenuItem from '../../ui/MenuItem';\r\n\r\nimport './WorkspaceManager.scss';\r\nimport buildClassName from '../../../util/buildClassName';\r\nimport Icon from '../../common/icons/Icon';\r\nimport MenuSeparator from '../../ui/MenuSeparator';\r\nimport Switcher from '../../ui/Switcher';\r\nimport { ApiUser } from '../../../api/types';\r\nimport { selectUser } from '../../../global/selectors/users';\r\nimport WorkspaceAvatar from './WorkspaceAvatar';\r\n\r\ntype StateProps = {\r\n  currentUser?: ApiUser;\r\n};\r\n\r\nconst WorkspaceManager: FC<StateProps> = ({ currentUser }) => {\r\n  const { openWorkspaceCreator, openWorkspaceEditor, setActiveChatFolder } = getActions();\r\n  const {\r\n    savedWorkspaces,\r\n    currentWorkspaceId,\r\n    setCurrentWorkspaceId,\r\n    excludeOtherWorkspaces,\r\n    setExcludeOtherWorkspaces,\r\n  } = useWorkspaceStorage();\r\n\r\n  const everythingWorkspace: Workspace = { id: '0', name: 'Personal', foldersIds: [] };\r\n  const selectedWorkspace = savedWorkspaces.find(workspace => workspace.id === currentWorkspaceId) || everythingWorkspace;\r\n\r\n  const handleWorkspaceSelect = useCallback((workspace: Workspace) => {\r\n    setCurrentWorkspaceId(workspace.id);\r\n    setActiveChatFolder({ activeChatFolder: 0 }, { forceOnHeavyAnimation: true });\r\n  }, [setCurrentWorkspaceId, setActiveChatFolder]);\r\n\r\n  const handleCreateWorkspace = useCallback(() => {\r\n    openWorkspaceCreator();\r\n  }, [openWorkspaceCreator]);\r\n\r\n  const handleSwitcherChange = useCallback((e) => {\r\n    e.stopPropagation();\r\n    setExcludeOtherWorkspaces(!excludeOtherWorkspaces);\r\n  }, [excludeOtherWorkspaces, setExcludeOtherWorkspaces]);\r\n\r\n  const renderTrigger = useCallback(({ onTrigger, isOpen }: { onTrigger: () => void; isOpen?: boolean }) => (\r\n    <div\r\n      key={selectedWorkspace?.id}\r\n      onClick={onTrigger}\r\n      className={buildClassName('WorkspaceManager-trigger', isOpen && 'active')}\r\n    >\r\n      <WorkspaceAvatar workspace={selectedWorkspace} currentUser={currentUser} size=\"tiny\" />\r\n      {selectedWorkspace.name}\r\n    </div>\r\n  ), [selectedWorkspace]);\r\n\r\n  return (\r\n    <DropdownMenu\r\n      className=\"WorkspaceManager-dropdown\"\r\n      trigger={renderTrigger}\r\n      positionX=\"left\"\r\n    >\r\n      {[everythingWorkspace, ...savedWorkspaces].map((workspace) => (\r\n        <MenuItem\r\n          key={workspace.id}\r\n          onClick={() => handleWorkspaceSelect(workspace)}\r\n          className=\"WorkspaceManager-workspace\"\r\n          customIcon={<WorkspaceAvatar workspace={workspace} currentUser={currentUser} size=\"mini\" />}\r\n        >\r\n          {workspace.name}\r\n          {workspace.id === currentWorkspaceId && <Icon name=\"check\" />}\r\n        </MenuItem>\r\n      ))}\r\n      <MenuSeparator />\r\n      <MenuItem\r\n        icon=\"add\"\r\n        onClick={handleCreateWorkspace}\r\n      >\r\n        New Workspace\r\n      </MenuItem>\r\n      {selectedWorkspace.id !== everythingWorkspace.id && (\r\n        <MenuItem\r\n          icon=\"settings\"\r\n          onClick={() => openWorkspaceEditor({ workspaceId: selectedWorkspace.id })}\r\n        >\r\n          Workspace settings\r\n        </MenuItem>\r\n      )}\r\n      {selectedWorkspace.id === everythingWorkspace.id && savedWorkspaces.length > 0 && (\r\n        <MenuItem\r\n          className=\"WorkspaceManager-excludeOther\"\r\n          onClick={handleSwitcherChange}\r\n        >\r\n          <Switcher\r\n            checked={excludeOtherWorkspaces}\r\n            label=\"Exclude folders and chats from other workspaces\"\r\n          />\r\n          Exclude others\r\n        </MenuItem>\r\n      )}\r\n    </DropdownMenu>\r\n  );\r\n};\r\n\r\nexport default memo(withGlobal<StateProps>(\r\n  (global): StateProps => {\r\n    return {\r\n      currentUser: selectUser(global, global.currentUserId!),\r\n    };\r\n  },\r\n)(WorkspaceManager));","import { getActions, withGlobal } from '../../../global';\r\nimport { selectCurrentChat, selectIsChatWithSelf } from '../../../global/selectors';\r\nimport type { FC } from '../../../lib/teact/teact';\r\nimport React, { memo } from '../../../lib/teact/teact';\r\nimport buildClassName from '../../../util/buildClassName';\r\nimport Icon from '../../common/icons/Icon';\r\n\r\nimport './SavedMessages.scss';\r\n\r\ntype StateProps = {\r\n  currentUserId?: string;\r\n  isActive?: boolean;\r\n}\r\n\r\nconst SavedMessages: FC<StateProps> = ({ currentUserId, isActive }) => {\r\n  const { openChat, focusLastMessage } = getActions();\r\n\r\n  return (\r\n    <div\r\n      onClick={() => {\r\n        openChat({ id: currentUserId });\r\n        focusLastMessage();\r\n      }}\r\n      className={buildClassName('SavedMessages-trigger', isActive && 'active')}\r\n    >\r\n      <Icon name=\"saved-messages\" />  \r\n      Saved\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(withGlobal<StateProps>(\r\n  (global): StateProps => {\r\n    const currentUserId = global.currentUserId!;\r\n    const currentChat = selectCurrentChat(global);\r\n    const isChatWithSelf = currentChat ? selectIsChatWithSelf(global, currentChat.id) : false;\r\n\r\n    return {\r\n      currentUserId,\r\n      isActive: isChatWithSelf,\r\n    }\r\n  }\r\n)(SavedMessages));","import { getActions, withGlobal } from '../../../global';\r\nimport { selectFocusListCount, selectTabState } from '../../../global/selectors';\r\nimport type { FC } from '../../../lib/teact/teact';\r\nimport React, { memo } from '../../../lib/teact/teact';\r\nimport buildClassName from '../../../util/buildClassName';\r\nimport Icon from '../../common/icons/Icon';\r\n\r\nimport './FocusListButton.scss';\r\n\r\ntype StateProps = {\r\n  isActive?: boolean;\r\n  count?: number;\r\n}\r\n\r\nconst FocusListButton: FC<StateProps> = ({ isActive, count }) => {\r\n  const { toggleFocusList } = getActions();\r\n\r\n  return (\r\n    <div\r\n      onClick={() => toggleFocusList()}\r\n      className={buildClassName('FocusListButton-trigger', isActive && 'active')}\r\n    >\r\n      <Icon name=\"next\" />  \r\n      Priority\r\n      <span className=\"count\">{count}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(withGlobal<StateProps>(\r\n  (global): StateProps => {\r\n    const { isFocusListShown } = selectTabState(global);\r\n\r\n    return {\r\n      isActive: isFocusListShown,\r\n      count: selectFocusListCount(global),\r\n    }\r\n  }\r\n)(FocusListButton));\r\n","import type { FC } from '../../../lib/teact/teact';\r\nimport React, { memo } from '../../../lib/teact/teact';\r\nimport WorkspaceManager from './WorkspaceManager';\r\nimport SavedMessages from './SavedMessages';\r\nimport FocusListButton from './FocusListButton';\r\nimport './CustomButtons.scss';\r\n\r\nconst CustomButtons: FC = () => {\r\n  return (\r\n    <div className=\"CustomButtons\">\r\n      <div className=\"workspace-manager\">\r\n        <WorkspaceManager />\r\n      </div>\r\n      <SavedMessages />\r\n      <FocusListButton />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(CustomButtons);","import type { Update } from '@tauri-apps/plugin-updater';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport { LeftColumnContent } from '../../../types';\n\nimport { DEBUG } from '../../../config';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\nimport CustomButtons from './CustomButtons';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst TAURI_CHECK_UPDATE_INTERVAL = 10 * 60 * 1000;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel, openLeftColumnContent } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [tauriUpdate, setTauriUpdate] = useState<Update>();\n  const [isTauriUpdateDownloading, setIsTauriUpdateDownloading] = useState(false);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || Boolean(tauriUpdate));\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Contacts });\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(async () => {\n    if (tauriUpdate) {\n      try {\n        setIsTauriUpdateDownloading(true);\n        await tauriUpdate.downloadAndInstall();\n        setIsTauriUpdateDownloading(false);\n\n        await window.tauri?.relaunch();\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('Failed to download and install Tauri update', e);\n      } finally {\n        setIsTauriUpdateDownloading(false);\n      }\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const checkTauriUpdate = useLastCallback(() => {\n    window.tauri?.checkUpdate()\n      .then((update) => setTauriUpdate(update ?? undefined))\n      .catch((e) => {\n        // eslint-disable-next-line no-console\n        console.error('Tauri update check failed:', e);\n      });\n  });\n\n  useEffect(() => {\n    checkTauriUpdate();\n  }, []);\n\n  useInterval(\n    checkTauriUpdate,\n    (IS_TAURI && !DEBUG) ? TAURI_CHECK_UPDATE_INTERVAL : undefined,\n  );\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <CustomButtons />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n          isLoading={isTauriUpdateDownloading}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type {\n  ElementRef } from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { type AnimationLevel, LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { resolveTransitionName } from '../../util/resolveTransitionName';\nimport { captureControlledSwipe } from '../../util/swipeController';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: ElementRef<HTMLDivElement>;\n}\n\ntype StateProps = {\n  contentKey: LeftColumnContent;\n  settingsScreen: SettingsScreens;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n\n  NewGroup,\n\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  contentKey,\n  settingsScreen,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    openLeftColumnContent,\n    openSettingsScreen,\n  } = getActions();\n\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (contentKey) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      openLeftColumnContent({ contentKey: undefined });\n      openSettingsScreen({ screen: undefined });\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewChannelStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (contentKey === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          openSettingsScreen({ screen: SettingsScreens.General });\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          openSettingsScreen({ screen: SettingsScreens.Privacy });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          openSettingsScreen({\n            screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeEnabled });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber });\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen });\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto });\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBio });\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday });\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGifts });\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall });\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneP2P });\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding });\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages });\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats });\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaDisabled });\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaEnabled });\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent });\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          openSettingsScreen({ screen: SettingsScreens.Folders });\n          return;\n\n        case SettingsScreens.FoldersShare:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolderFromChatList });\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          openLeftColumnContent({ contentKey: LeftColumnContent.ChatList });\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          openSettingsScreen({ screen: SettingsScreens.Stickers });\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          openSettingsScreen({ screen: SettingsScreens.Language });\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyMessages });\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (contentKey === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (contentKey === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = contentKey === LeftColumnContent.Archived;\n      const isChatList = contentKey === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, contentKey, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (contentKey === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction]);\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n        openSettingsScreen({ screen: prevSettingsScreenRef.current! });\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            animationLevel={animationLevel}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={contentKey}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onSearchQuery={handleSearchQuery}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={resolveTransitionName('layers', animationLevel, shouldSkipHistoryAnimations)}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      leftColumn,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const { animationLevel } = selectSharedSettings(global);\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n      contentKey: leftColumn.contentKey,\n      settingsScreen: leftColumn.settingsScreen,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const ref = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  const elementRef = useRef<HTMLDivElement>();\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {} as Complete<StateProps>;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || (nextMessage.suggestedPostInfo)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n            && nextMessage.id !== topMessageId)\n          || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {} as Complete<StateProps>;\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasMessages?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n  hasMessages,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>\n        {lang('UserUpdatedName', {\n          user: chat.title,\n          time: formatPastDatetime(lang, nameChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>\n        {lang('UserUpdatedPhoto', {\n          user: chat.title,\n          time: formatPastDatetime(lang, photoChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && !hasMessages && (\n        <span>{oldLang('NoMessages')}</span>\n      )}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ chatId, messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\",\"contextMenu\":\"FHxnbOg6\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MESSAGE_APPEARANCE_DELAY,\n} from '../../../config';\nimport {\n  getMainUsername,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n    canPost?: boolean;\n    isInFocusList?: boolean;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  canPost,\n  isInFocusList,\n}) => {\n  const { openChat, updateInsertingPeerIdMention } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const isAvatarPeerUser = avatarPeer && isApiPeerUser(avatarPeer);\n\n  const handleOpenChat = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleMention = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (messageInput) {\n      updateInsertingPeerIdMention({ peerId: avatarPeer.id });\n    }\n  });\n\n  const handleAvatarClick = useLastCallback(() => {\n    handleOpenChat();\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    noMountTransition: isShown,\n    withShouldRender: true,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(avatarRef);\n\n  const getTriggerElement = useLastCallback(() => avatarRef.current);\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n  const getMenuElement = useLastCallback(\n    () => avatarRef?.current?.querySelector(`.${styles.contextMenu} .bubble`),\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const canMention = canPost && avatarPeer && (isAvatarPeerUser || Boolean(getMainUsername(avatarPeer)));\n  const shouldRenderContextMenu = Boolean(contextMenuAnchor) && (isAvatarPeerUser || canMention) && !isInFocusList;\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n        getMenuElement={getMenuElement}\n        className={styles.contextMenu}\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        withPortal\n        autoClose\n      >\n        <>\n          {isAvatarPeerUser && (\n            <MenuItem\n              icon=\"comments\"\n              onClick={handleOpenChat}\n            >\n              {lang('SendMessage')}\n            </MenuItem>\n          )}\n          {canMention && (\n            <MenuItem\n              icon=\"mention\"\n              onClick={handleMention}\n            >\n              {lang('ContextMenuItemMention')}\n            </MenuItem>\n          )}\n        </>\n      </Menu>\n    );\n  }\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n        onContextMenu={handleContextMenu}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {renderAvatar()}\n          {shouldRenderContextMenu && renderContextMenu()}\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): Complete<StateProps> => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, getMinMediaWidthWithText } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: ElementRef<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const contentRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const content = message && getMessageContent(message);\n  const {\n    photo, video, text,\n  } = content || {};\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < getMinMediaWidthWithText(isMobile)) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMobile), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile, text?.text]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? selectMessageDownloadableMedia(global, message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { ElementRef, FC } from '../../lib/teact/teact';\nimport { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  getSuggestedChangesActionText,\n  getSuggestedChangesInfo,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectChatMessage, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate, formatScheduledDateTime } from '../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../util/formatCurrency';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText, formatTonAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport { renderPeerLink } from './message/helpers/messageActions';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\nimport actionMessageStyles from './message/ActionMessage.module.scss';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isChatMonoforum?: boolean;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: ElementRef<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  canPost?: boolean;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  isChatMonoforum,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n  canPost,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>\n            {\n              message.isOutgoing\n                ? lang('ActionPaidOneMessageOutgoing', {\n                  amount: formatStarsAsText(lang, amount),\n                })\n                : (() => {\n                  const sender = selectSender(getGlobal(), message);\n                  const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                  return lang('ActionPaidOneMessageIncoming', {\n                    user: userTitle,\n                    amount: formatStarsAsText(lang, amount),\n                  });\n                })()\n            }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const renderSuggestedPostInfoAction = (message: ApiMessage) => {\n    if (message.suggestedPostInfo) {\n      const { price, scheduleDate } = message.suggestedPostInfo;\n      const sender = selectSender(getGlobal(), message);\n      const userTitle = sender ? getPeerTitle(lang, sender) : '';\n      const userLink = renderPeerLink(sender?.id, userTitle || lang('ActionFallbackUser'));\n\n      const originalMessage = message.replyInfo?.type === 'message' && message.replyInfo.replyToMsgId\n        ? selectChatMessage(getGlobal(), message.chatId, message.replyInfo.replyToMsgId)\n        : undefined;\n      const changesInfo = getSuggestedChangesInfo(message, originalMessage);\n\n      const titleText = changesInfo\n        ? getSuggestedChangesActionText(lang, message, originalMessage, message.isOutgoing, userLink)\n        : message.isOutgoing\n          ? lang('ActionSuggestedPostOutgoing', undefined, { withNodes: true, withMarkdown: true })\n          : lang('ActionSuggestedPostIncoming', { user: userLink }, { withNodes: true, withMarkdown: true });\n\n      const tableData: TableEntry[] = compact([\n        [lang('TitlePrice'), price ? (price.currency === 'TON'\n          ? formatTonAsText(lang, convertTonFromNanos(price.amount))\n          : formatStarsAsText(lang, price.amount)) : lang('SuggestMessageNoPrice')],\n        [lang('TitleTime'),\n          scheduleDate\n            ? formatScheduledDateTime(scheduleDate, lang, oldLang)\n            : lang('SuggestMessageAnytime'),\n        ],\n      ]);\n\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`suggested-post-action-${message.id}`}\n        >\n          <span className={actionMessageStyles.suggestedPostContainer}>\n            <div\n              className={actionMessageStyles.suggestedPostTitle}\n            >\n              {titleText}\n            </div>\n            {Boolean(tableData.length) && (\n              <MiniTable\n                className={actionMessageStyles.suggestedPostInfo}\n                data={tableData}\n              />\n            )}\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat || Boolean(isChatMonoforum);\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          message.suggestedPostInfo && renderSuggestedPostInfoAction(message),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            // eslint-disable-next-line react-x/no-duplicate-key\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>\n                {oldLang(isEmptyThread\n                  ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n          canPost={canPost}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n        && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} hasMessages />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const backwardsTriggerRef = useRef<HTMLDivElement>();\n  const forwardsTriggerRef = useRef<HTMLDivElement>();\n  const fabTriggerRef = useRef<HTMLDivElement>();\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPeer } from '../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../global/helpers/peers';\nimport { selectPeer, selectTheme, selectThemeValues } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  peer?: ApiPeer;\n};\n\nfunction RequirementToContactMessage({\n  patternColor, peer, paidMessagesStars,\n}: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  if (!peer) return undefined;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang(isApiPeerUser(peer) ? 'MessagesPlaceholderPaidUser' : 'MessagesPlaceholderPaidChannel', {\n                peer: getPeerTitle(lang, peer),\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', getPeerTitle(lang, peer)), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { peerId: userId }): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, userId);\n\n    return {\n      patternColor,\n      peer,\n    };\n  })(RequirementToContactMessage),\n);\n","import type { FC } from '@teact';\nimport { beginHeavyAnimation, memo, useEffect, useMemo, useRef } from '@teact';\nimport { addExtraClass, removeExtraClass } from '@teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic } from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatMonoforum,\n  isSystemBot,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectMonoforumChannel,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectIsChatRestricted } from '../../global/selectors/chats';\nimport { selectActiveRestrictionReasons } from '../../global/selectors/messages';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport Transition from '../ui/Transition.tsx';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatMonoforum?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReasons?: ApiRestrictionReason[];\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n  monoforumChannelId?: string;\n  canTranslate?: boolean;\n  translationLanguage?: string;\n  shouldAutoTranslate?: boolean;\n};\n\nenum Content {\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Loading,\n  Restricted,\n  StarsRequired,\n  PremiumRequired,\n  AccountInfo,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  ContactGreeting,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  NoMessages,\n  MessageList,\n}\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  isChatMonoforum,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReasons,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  isAccountFrozen,\n  hasCustomGreeting,\n  monoforumChannelId,\n  isAppConfigLoaded,\n  canTranslate,\n  translationLanguage,\n  shouldAutoTranslate,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks, requestChatTranslation,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  // Enable auto translation for the chat if it's available\n  useEffect(() => {\n    if (!shouldAutoTranslate || !canTranslate) return;\n    requestChatTranslation({ chatId, toLanguageCode: translationLanguage });\n  }, [shouldAutoTranslate, canTranslate, translationLanguage, chatId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement : firstUnreadElement,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = Boolean((messageIds && messageGroups) || lastMessage);\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  const activeKey = isRestricted ? (\n    Content.Restricted\n  ) : paidMessagesStars && !hasMessages && !hasCustomGreeting ? (\n    Content.StarsRequired\n  ) : isContactRequirePremium && !hasMessages ? (\n    Content.PremiumRequired\n  ) : (isBot || isNonContact) && !hasMessages ? (\n    Content.AccountInfo\n  ) : shouldRenderGreeting ? (\n    Content.ContactGreeting\n  ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n    Content.NoMessages\n  ) : hasMessages ? (\n    Content.MessageList\n  ) : (\n    Content.Loading\n  );\n\n  function renderContent() {\n    return activeKey === Content.Restricted ? (\n      <div className=\"empty\">\n        <span>\n          {restrictionReasons?.[0]?.text || `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n        </span>\n      </div>\n    ) : activeKey === Content.StarsRequired ? (\n      <RequirementToContactMessage paidMessagesStars={paidMessagesStars} peerId={monoforumChannelId || chatId} />\n    ) : activeKey === Content.PremiumRequired ? (\n      <RequirementToContactMessage peerId={chatId} />\n    ) : activeKey === Content.AccountInfo ? (\n      <MessageListAccountInfo chatId={chatId} hasMessages={hasMessages} />\n    ) : activeKey === Content.ContactGreeting ? (\n      <ContactGreeting key={chatId} userId={chatId} />\n    ) : activeKey === Content.NoMessages ? (\n      <NoMessages\n        chatId={chatId}\n        topic={topic}\n        type={type}\n        isChatWithSelf={isChatWithSelf}\n        isGroupChatJustCreated={isGroupChatJustCreated}\n      />\n    ) : activeKey === Content.MessageList ? (\n      <MessageListContent\n        canShowAds={areAdsEnabled && isChannelChat}\n        chatId={chatId}\n        isComments={isComments}\n        isChannelChat={isChannelChat}\n        isChatMonoforum={isChatMonoforum}\n        isSavedDialog={isSavedDialog}\n        messageIds={messageIds || [lastMessage!.id]}\n        messageGroups={messageGroups || groupMessages([lastMessage!])}\n        getContainerHeight={getContainerHeight}\n        isViewportNewest={Boolean(isViewportNewest)}\n        isUnread={Boolean(firstUnreadId)}\n        isEmptyThread={isEmptyThread}\n        withUsers={withUsers}\n        noAvatars={noAvatars}\n        containerRef={containerRef}\n        anchorIdRef={anchorIdRef}\n        memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n        memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n        threadId={threadId}\n        type={type}\n        isReady={isReady}\n        hasLinkedChat={hasLinkedChat}\n        isSchedule={messageGroups ? type === 'scheduled' : false}\n        shouldRenderAccountInfo={isBot || isNonContact}\n        nameChangeDate={nameChangeDate}\n        photoChangeDate={photoChangeDate}\n        noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n        onScrollDownToggle={onScrollDownToggle}\n        onNotchToggle={onNotchToggle}\n        onIntersectPinnedMessage={onIntersectPinnedMessage}\n        canPost={canPost}\n      />\n    ) : (\n      <Loading color=\"white\" backgroundColor=\"dark\" />\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      className={className}\n      name=\"fade\"\n      activeKey={activeKey}\n      shouldCleanup\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {renderContent()}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): Complete<StateProps> => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId } as Complete<StateProps>;\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId } as Complete<StateProps>;\n    }\n\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    const restrictionReasons = selectActiveRestrictionReasons(global, chat?.restrictionReasons);\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    const monoforumChannelId = selectMonoforumChannel(global, chatId)?.id;\n    const canTranslate = selectCanTranslateChat(global, chatId) && !chatFullInfo?.isTranslationDisabled;\n    const shouldAutoTranslate = chat?.hasAutoTranslation;\n    const translationLanguage = selectTranslationLanguage(global);\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReasons,\n      isChannelChat: isChatChannel(chat),\n      isChatMonoforum: isChatMonoforum(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      lastMessage: withLastMessageWhenPreloading ? lastMessage : undefined,\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n      monoforumChannelId,\n      canTranslate,\n      translationLanguage,\n      shouldAutoTranslate,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: ElementRef<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMessageContent, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { selectMessageMediaDuration } from '../../../global/selectors/media';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  mediaDuration?: number;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  mediaDuration,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = useMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    mediaDuration || 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  useEffect(() => {\n    if (isPlaying && message?.isDeleting) {\n      playPause();\n    }\n  }, [isPlaying, message?.isDeleting, playPause]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}\n      X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): Complete<StateProps> => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    const mediaDuration = message ? selectMessageMediaDuration(global, message) : undefined;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n      mediaDuration,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = useMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state as Complete<StateProps>;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      } as Complete<StateProps>;\n    }\n\n    return state as Complete<StateProps>;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCustomEmoji,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPeer,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_MAC_OS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\nimport Icon from '../common/icons/Icon';\n \nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  isSavedMessages?: boolean;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n  isSavedMessages,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openSavedDialog,\n    focusLastMessage,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isDesktop, isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  const componentRef = useRef<HTMLDivElement>();\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const handleOpenSavedMessages = useLastCallback(() => {\n    openSavedDialog({ chatId });\n    focusLastMessage();\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n    const displayChatId = chat?.isMonoforum ? chat.linkedMonoforumId! : realChatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(displayChatId) ? (\n            <PrivateChatInfo\n              key={displayChatId}\n              userId={displayChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={displayChatId}\n              chatId={displayChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              withMonoforumStatus={chat?.isMonoforum}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef} data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}>\n      {!isMobile && !isSavedMessages && !isSavedDialog && (\n      <Button className=\"saved-messages-button\" round size=\"smaller\" color=\"translucent\" onClick={handleOpenSavedMessages} ariaLabel=\"Saved Messages\">\n          <Icon name=\"saved-messages\" />\n        </Button>\n      )}\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): Complete<StateProps> => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const peer = selectPeer(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = peer?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && selectCustomEmoji(global, emojiStatus.documentId);\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n      isSavedMessages,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import { memo, useRef, useSignal } from '@teact';\nimport { setExtraStyles } from '@teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectCanAnimateRightColumn,\n  selectChat,\n  selectChatMessage,\n  selectCurrentMiddleSearch,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n  withRightColumnAnimation?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  withRightColumnAnimation,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={\n        buildClassName(\n          styles.root,\n          withRightColumnAnimation && styles.root_withRightColumnAnimation,\n          className,\n        )\n      }\n    >\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): Complete<StateProps> => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\",\"root_withRightColumnAnimation\":\"YPrc0luK\",\"rootWithRightColumnAnimation\":\"YPrc0luK\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import type React from '@teact';\nimport type { ElementRef } from '@teact';\nimport { memo, useEffect, useMemo, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic } from '../../api/types';\nimport type { ActiveEmojiInteraction, AnimationLevel, MessageListType, ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface, selectCanAnimateRightColumn,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectEditingId,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsMonoforumAdmin,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport {\n  IS_ANDROID, IS_IOS, IS_MAC_OS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: ElementRef<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  withInterfaceAnimations?: boolean;\n  withRightColumnAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  shouldBlockSendInMonoforum?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  animationLevel,\n  withInterfaceAnimations,\n  withRightColumnAnimation,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  shouldBlockSendInMonoforum,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel\n          ? oldLang('RequestToJoinChannelSentDescription') : oldLang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    withRightColumnAnimation && styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    oldLang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(\n    oldLang, chat, threadId, topics, Boolean(draftReplyInfo),\n  );\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    || forumComposerPlaceholder\n    || (shouldBlockSendInMonoforum ? lang('MonoforumComposerPlaceholder') : undefined)\n    || (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    || (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale}`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        data-tauri-drag-region={IS_TAURI && IS_MAC_OS && !(renderingChatId && renderingThreadId) ? true : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={resolveTransitionName(\n                'slide',\n                animationLevel,\n                shouldSkipHistoryAnimations || !withInterfaceAnimations,\n              )}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                paidMessagesStars={paidMessagesStars}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                <FloatingActionButtons\n                  withScrollDown={renderingIsScrollDownShown}\n                  canPost={renderingCanPost}\n                  withExtraShift={withExtraShift}\n                />\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{oldLang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{oldLang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {oldLang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {oldLang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {oldLang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      animationLevel: selectSharedSettings(global).animationLevel,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state as Complete<StateProps>;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const editingId = selectEditingId(global, chatId, threadId);\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests\n      && !chat.isMonoforum,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const isMonoforumAdmin = selectIsMonoforumAdmin(global, chatId);\n    const shouldBlockSendInMonoforum = Boolean(chat?.isMonoforum && !draftReplyInfo && isMonoforumAdmin && !editingId);\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n        || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !shouldBlockSendInMonoforum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n      shouldBlockSendInMonoforum,\n    } as Complete<StateProps>;\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: ElementRef<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AgeVerificationModal from './ageVerification/AgeVerificationModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport DeleteAccountModal from './deleteAccount/DeleteAccountModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftResalePriceComposerModal from './gift/resale/GiftResalePriceComposerModal.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftInfoValueModal from './gift/value/GiftInfoValueModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport PriceConfirmModal from './priceConfirm/PriceConfirmModal.async';\nimport ProfileRatingModal from './profileRating/ProfileRatingModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedPostApprovalModal from './suggestedPostApproval/SuggestedPostApprovalModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport SuggestMessageModal from './suggestMessage/SuggestMessageModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n  'giftCodeModal' |\n  'boostModal' |\n  'chatlistModal' |\n  'urlAuth' |\n  'mapModal' |\n  'oneTimeMediaModal' |\n  'inviteViaLinkModal' |\n  'requestedAttachBotInstall' |\n  'collectibleInfoModal' |\n  'reportAdModal' |\n  'reportModal' |\n  'starsBalanceModal' |\n  'starsPayment' |\n  'starsTransactionModal' |\n  'paidReactionModal' |\n  'suggestMessageModal' |\n  'suggestedPostApprovalModal' |\n  'webApps' |\n  'chatInviteModal' |\n  'starsSubscriptionModal' |\n  'starsGiftModal' |\n  'giftModal' |\n  'isGiftRecipientPickerOpen' |\n  'isWebAppsCloseConfirmationModalOpen' |\n  'giftInfoModal' |\n  'giftInfoValueModal' |\n  'giftResalePriceComposerModal' |\n  'suggestedStatusModal' |\n  'emojiStatusAccessModal' |\n  'locationAccessModal' |\n  'aboutAdsModal' |\n  'giftUpgradeModal' |\n  'monetizationVerificationModal' |\n  'giftWithdrawModal' |\n  'preparedMessageModal' |\n  'sharePreparedMessageModal' |\n  'giftStatusInfoModal' |\n  'giftTransferModal' |\n  'chatRefundModal' |\n  'priceConfirmModal' |\n  'isFrozenAccountModalOpen' |\n  'deleteAccountModal' |\n  'isAgeVerificationModalOpen' |\n  'profileRatingModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  suggestMessageModal: SuggestMessageModal,\n  suggestedPostApprovalModal: SuggestedPostApprovalModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  giftInfoValueModal: GiftInfoValueModal,\n  giftResalePriceComposerModal: GiftResalePriceComposerModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n  priceConfirmModal: PriceConfirmModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n  deleteAccountModal: DeleteAccountModal,\n  isAgeVerificationModalOpen: AgeVerificationModal,\n  profileRatingModal: ProfileRatingModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => (\n    pick(selectTabState(global), MODAL_KEYS) as Complete<StateProps>\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal?.isModalOpen);\n\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal?.inputInvoice);\n\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestMessageModal = useModuleLoader(Bundles.Extra, 'SuggestMessageModal', !modal);\n\n  return SuggestMessageModal ? <SuggestMessageModal {...props} /> : undefined;\n};\n\nexport default SuggestMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedPostApprovalModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedPostApprovalModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedPostApprovalModal = useModuleLoader(Bundles.Extra, 'SuggestedPostApprovalModal', !modal);\n\n  return SuggestedPostApprovalModal ? <SuggestedPostApprovalModal {...props} /> : undefined;\n};\n\nexport default SuggestedPostApprovalModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoValueModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoValueModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoValueModal = useModuleLoader(Bundles.Stars, 'GiftInfoValueModal', !modal);\n\n  return GiftInfoValueModal ? <GiftInfoValueModal {...props} /> : undefined;\n};\n\nexport default GiftInfoValueModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftResalePriceComposerModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftResalePriceComposerModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftResalePriceComposerModal = useModuleLoader(Bundles.Stars, 'GiftResalePriceComposerModal', !modal);\n\n  return GiftResalePriceComposerModal ? <GiftResalePriceComposerModal {...props} /> : undefined;\n};\n\nexport default GiftResalePriceComposerModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { TabState } from '../../../global/types';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nexport type OwnProps = {\n  modal: TabState['priceConfirmModal'];\n};\n\nconst PriceConfirmModalAsync: FC<OwnProps> = ({ modal }) => {\n  const PriceConfirmModal = useModuleLoader(Bundles.Stars, 'PriceConfirmModal', !modal);\n\n  return PriceConfirmModal ? <PriceConfirmModal modal={modal} /> : undefined;\n};\n\nexport default PriceConfirmModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', !modal);\n\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DeleteAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const DeleteAccountModal = useModuleLoader(Bundles.Extra, 'DeleteAccountModal', !modal);\n\n  return DeleteAccountModal ? <DeleteAccountModal {...props} /> : undefined;\n};\n\nexport default DeleteAccountModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AgeVerificationModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AgeVerificationModalAsync: FC<OwnProps> = memo((props) => {\n  const { modal } = props;\n\n  const AgeVerificationModal = useModuleLoader(Bundles.Extra, 'AgeVerificationModal', !modal);\n\n  return AgeVerificationModal ? <AgeVerificationModal {...props} /> : undefined;\n});\n\nexport default AgeVerificationModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ProfileRatingModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ProfileRatingModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ProfileRatingModal = useModuleLoader(Bundles.Extra, 'ProfileRatingModal', !modal);\n\n  return ProfileRatingModal ? <ProfileRatingModal {...props} /> : undefined;\n};\n\nexport default ProfileRatingModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","export class VTTypes {\n  private readonly hierarchy: string[] = [];\n\n  constructor(types: readonly string[]) {\n    this.hierarchy = [...(types || [])];\n  }\n\n  with(type: string): VTTypes {\n    return new VTTypes([...this.hierarchy, type]);\n  }\n\n  getTypes(): readonly string[] {\n    return this.hierarchy;\n  }\n}\n\n// View transition types\nexport const VTT_RIGHT_COLUMN = new VTTypes(['rightColumn']);\nexport const VTT_RIGHT_PROFILE_AVATAR = VTT_RIGHT_COLUMN.with('profileAvatar');\nexport const VTT_RIGHT_PROFILE_EXPAND = VTT_RIGHT_PROFILE_AVATAR.with('profileExpand');\nexport const VTT_RIGHT_PROFILE_COLLAPSE = VTT_RIGHT_PROFILE_AVATAR.with('profileCollapse');\n\nexport const VTT_PROFILE_GIFTS = VTT_RIGHT_COLUMN.with('profileGifts');\n","import { type ElementRef, useEffect, useRef, useSignal } from '@teact';\n\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport stopEvent from '../../util/stopEvent';\nimport useLastCallback from '../useLastCallback';\n\ntype State = 'overscroll' | 'animating' | 'normal';\n\ntype ActiveScrollContext = {\n  lastDeltas: number[];\n  lastAverageDelta: number;\n  isStartedAtTop: boolean;\n  resetStartTopAt?: number;\n  timeout: number | undefined;\n};\n\nconst LAST_DELTA_COUNT = 7;\nconst ACTIVE_SCROLL_RESET_TIMEOUT = 100;\nconst NEW_INPUT_DELTA_THRESHOLD = 7;\nconst OVERSCROLL_CONTAINER_CLASS = 'no-overscroll';\nconst NO_TOUCH_CONTAINER_CLASS = 'no-touch';\nconst TRANSITION_DURATION = 350;\nconst DRAG_TRIGGER_DISTANCE = 75;\n\nconst initialActiveScrollContext: ActiveScrollContext = {\n  lastDeltas: new Array(LAST_DELTA_COUNT).fill(0),\n  lastAverageDelta: 0,\n  isStartedAtTop: false,\n  resetStartTopAt: undefined,\n  timeout: undefined,\n};\n\nexport default function useTopOverscroll(\n  containerRef: ElementRef<HTMLDivElement>,\n  onOverscroll?: AnyToVoidFunction,\n  onReset?: AnyToVoidFunction,\n  isDisabled?: boolean,\n) {\n  const [getState, setState] = useSignal<State>('normal');\n  const activeScrollRef = useRef<ActiveScrollContext>({ ...initialActiveScrollContext });\n  const transitionTimeoutRef = useRef<number | undefined>();\n  const touchStartYRef = useRef<number | undefined>();\n\n  const triggerOverscroll = useLastCallback(() => {\n    clearTimeout(transitionTimeoutRef.current);\n    setState('overscroll');\n    onOverscroll?.();\n  });\n\n  const triggerReset = useLastCallback(() => {\n    setState('animating');\n    transitionTimeoutRef.current = window.setTimeout(() => {\n      setState('normal');\n    }, TRANSITION_DURATION);\n    onReset?.();\n  });\n\n  const scheduleResetActiveScroll = useLastCallback((timeout: number) => {\n    clearTimeout(activeScrollRef.current.timeout);\n    activeScrollRef.current.timeout = window.setTimeout(() => {\n      activeScrollRef.current = { ...initialActiveScrollContext };\n    }, timeout);\n  });\n\n  const handleWheel = useLastCallback((e: WheelEvent) => {\n    const container = containerRef.current;\n    if (!container || e.defaultPrevented) {\n      return;\n    }\n\n    const { deltaY } = e;\n    const { scrollTop } = container;\n    const state = getState();\n\n    const activeScroll = activeScrollRef.current;\n    const lastAverageDelta = activeScroll.lastAverageDelta;\n\n    const isStarting = activeScroll.lastDeltas.at(-1) === 0\n      || (activeScroll.resetStartTopAt && Date.now() >= activeScroll.resetStartTopAt);\n    if (scrollTop === 0 && isStarting) {\n      activeScroll.isStartedAtTop = true;\n      activeScroll.resetStartTopAt = undefined;\n    }\n\n    const lastDeltas = activeScrollRef.current.lastDeltas.slice(); // Copy\n    lastDeltas.push(deltaY);\n    if (lastDeltas.length > LAST_DELTA_COUNT) {\n      lastDeltas.shift();\n    }\n    activeScrollRef.current.lastDeltas = lastDeltas;\n    const currentAverageDelta = lastDeltas.reduce((a, b) => a + b, 0) / lastDeltas.length;\n    activeScrollRef.current.lastAverageDelta = currentAverageDelta;\n\n    const isNewInput = Math.abs(currentAverageDelta) - Math.abs(lastAverageDelta) > NEW_INPUT_DELTA_THRESHOLD;\n\n    scheduleResetActiveScroll(ACTIVE_SCROLL_RESET_TIMEOUT);\n\n    // If we're at the top and scrolling up\n    if (scrollTop === 0 && deltaY < 0 && state !== 'overscroll') {\n      if (!activeScroll.resetStartTopAt) {\n        // Schedule delta reset, so we would respond to new input with `isStartedAtTop` flag set\n        activeScroll.resetStartTopAt = Date.now() + ACTIVE_SCROLL_RESET_TIMEOUT;\n      }\n\n      // Only trigger overscroll on new input, ignore momentum events\n      if (isNewInput && activeScroll.isStartedAtTop) {\n        triggerOverscroll();\n      }\n      return;\n    }\n\n    // Ignore scroll events during collapse animation\n    if (state === 'animating' && deltaY > 0) {\n      stopEvent(e);\n      return;\n    }\n\n    // If we're overscrolled, any down wheel event should reset\n    if (state === 'overscroll' && deltaY > 0) {\n      triggerReset();\n      stopEvent(e);\n      return;\n    }\n  });\n\n  const handleTouchStart = useLastCallback((e: TouchEvent) => {\n    const container = containerRef.current;\n    if (!container || e.touches.length !== 1) return;\n\n    const { scrollTop } = container;\n    const state = getState();\n\n    // Register touch start position when at top or in overscroll state\n    if (scrollTop === 0 || state === 'overscroll') {\n      touchStartYRef.current = e.touches[0].clientY;\n    }\n  });\n\n  const handleTouchMove = useLastCallback((e: TouchEvent) => {\n    const container = containerRef.current;\n    const startY = touchStartYRef.current;\n    if (!container || startY === undefined || e.touches.length !== 1) return;\n\n    const { scrollTop } = container;\n    const state = getState();\n    const currentY = e.touches[0].clientY;\n    const deltaY = currentY - startY;\n\n    if (state === 'animating') {\n      return;\n    }\n\n    // If we're at the top and dragging down by more than trigger distance\n    if (scrollTop === 0 && deltaY > DRAG_TRIGGER_DISTANCE && state !== 'overscroll') {\n      triggerOverscroll();\n      touchStartYRef.current = undefined; // Reset to prevent multiple triggers\n      return;\n    }\n\n    // If we're overscrolled and dragging up by more than trigger distance, reset\n    if (state === 'overscroll' && deltaY < -DRAG_TRIGGER_DISTANCE) {\n      triggerReset();\n      touchStartYRef.current = undefined; // Reset to prevent multiple triggers\n      return;\n    }\n  });\n\n  const handleTouchEnd = useLastCallback(() => {\n    touchStartYRef.current = undefined;\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (isDisabled || !container) return;\n    requestMutation(() => {\n      container.classList.add(OVERSCROLL_CONTAINER_CLASS);\n    });\n\n    return () => {\n      requestMutation(() => {\n        container.classList.remove(OVERSCROLL_CONTAINER_CLASS);\n      });\n    };\n  }, [containerRef, isDisabled]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (isDisabled || !container) return;\n    requestMutation(() => {\n      container.classList.toggle(NO_TOUCH_CONTAINER_CLASS, getState() !== 'normal');\n    });\n\n    return () => {\n      requestMutation(() => {\n        container.classList.remove(NO_TOUCH_CONTAINER_CLASS);\n      });\n    };\n  }, [containerRef, isDisabled, getState]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (isDisabled || !container) {\n      return undefined;\n    }\n\n    container.addEventListener('wheel', handleWheel, { passive: getState() === 'normal' });\n    container.addEventListener('touchstart', handleTouchStart, { passive: true });\n    container.addEventListener('touchmove', handleTouchMove, { passive: true });\n    container.addEventListener('touchend', handleTouchEnd, { passive: true });\n    container.addEventListener('touchcancel', handleTouchEnd, { passive: true });\n\n    return () => {\n      container.removeEventListener('wheel', handleWheel);\n      container.removeEventListener('touchstart', handleTouchStart);\n      container.removeEventListener('touchmove', handleTouchMove);\n      container.removeEventListener('touchend', handleTouchEnd);\n      container.removeEventListener('touchcancel', handleTouchEnd);\n\n      const activeScroll = activeScrollRef.current;\n      if (activeScroll?.timeout) clearTimeout(activeScroll.timeout);\n    };\n  }, [containerRef, handleWheel, handleTouchStart, handleTouchMove, handleTouchEnd, getState, isDisabled]);\n}\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState({\n  containerRef,\n  tabType,\n  profileState,\n  onProfileStateChange,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs,\n}: {\n  containerRef: ElementRef<HTMLDivElement>;\n  tabType: ProfileTabType;\n  profileState: ProfileState;\n  forceScrollProfileTab?: boolean;\n  allowAutoScrollToTabs?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n  handleStopAutoScrollToTabs: NoneToVoidFunction;\n}) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [\n    tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs,\n  ]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    if (state !== profileState) {\n      onProfileStateChange(state);\n    }\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n}: {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"star\":\"LLQBJODm\",\"priceBadge\":\"haa6STaT\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\",\"stickerWrapper\":\"NYuBBB9j\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon, formatTonAsIcon } from '../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StickerView from '../../common/StickerView';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  className?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  className,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const starGift = gift.gift;\n  const starGiftUnique = starGift.type === 'starGiftUnique' ? starGift : undefined;\n\n  const resellPrice = useMemo(() => {\n    if (!starGiftUnique?.resellPrice) return undefined;\n\n    if (starGiftUnique.resaleTonOnly) {\n      return starGiftUnique.resellPrice.find((amount) => amount.currency === TON_CURRENCY_CODE);\n    }\n\n    return starGiftUnique.resellPrice.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n  }, [starGiftUnique]);\n\n  const ribbonText = (() => {\n    if (starGiftUnique?.resellPrice) {\n      return lang('GiftRibbonSale');\n    }\n    if (gift.isPinned && starGiftUnique) {\n      return lang('GiftSavedNumber', { number: starGiftUnique.number });\n    }\n    if (totalIssued) {\n      return lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) });\n    }\n    return undefined;\n  })();\n\n  const ribbonColor = starGiftUnique?.resellPrice ? 'green' : 'blue';\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const giftAttributes = useMemo(() => getGiftAttributes(gift.gift), [gift.gift]);\n  const { backdrop, pattern } = giftAttributes || {};\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [backdrop, pattern]);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('interactive-gift scroll-item', styles.root, className)}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldLoop={isHover}\n            shouldPreloadPreview\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n          />\n        )}\n\n      </div>\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {resellPrice && (\n        <Button\n          className={styles.priceBadge}\n          nonInteractive\n          size=\"tiny\"\n          withSparkleEffect\n          noSparkleAnimation\n          pill\n          fluid\n        >\n          {resellPrice.currency === 'TON'\n            ? formatTonAsIcon(lang, resellPrice.amount, { shouldConvertFromNanos: true, className: styles.star })\n            : formatStarsAsIcon(lang, resellPrice.amount, { asFont: true, className: styles.star })}\n        </Button>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color={ribbonColor}\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): Complete<StateProps> => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport useMessageMediaHash from '../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../hooks/media/useThumbnail';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = useThumbnail(media);\n\n  const mediaHash = useMessageMediaHash(media, 'preview');\n  const mediaBlobUrl = useMedia(mediaHash, !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): Complete<StateProps> => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig;\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"_KBrROQt\",\"icon\":\"Y3vEed9M\"};","import { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from './AnimatedIconFromSticker';\n\nimport styles from './AnimatedTabItem.module.scss';\n\ntype OwnProps = {\n  id: string;\n  title: string;\n  sticker?: ApiSticker;\n  onClick?: (id: string) => void;\n};\n\nconst AnimatedTabItem = ({\n  id,\n  title,\n  sticker,\n  onClick,\n}: OwnProps) => {\n  const handleClick = useLastCallback(() => {\n    onClick?.(id);\n  });\n\n  return (\n    <div\n      className={styles.item}\n      onClick={handleClick}\n    >\n      {sticker && (\n        <AnimatedIconFromSticker\n          className={styles.icon}\n          sticker={sticker}\n          size={20}\n          forcePreview\n        />\n      )}\n      {title}\n    </div>\n  );\n};\n\nexport default memo(AnimatedTabItem);\n","import { memo, useEffect, useRef, useState } from '../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport AnimatedTabItem from './AnimatedTabItem';\n\nimport styles from './AnimatedTabList.module.scss';\n\nexport type TabItem = {\n  id: string;\n  title: string;\n  sticker?: ApiSticker;\n};\n\ntype OwnProps = {\n  items: TabItem[];\n  selectedItemId?: string;\n  className?: string;\n  animationLevel: AnimationLevel;\n  onItemSelect?: (itemId: string) => void;\n};\n\nconst AnimatedTabList = ({\n  items,\n  selectedItemId,\n  animationLevel,\n  onItemSelect,\n  className,\n}: OwnProps) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const clipPathContainerRef = useRef<HTMLDivElement>();\n  const selectedIndex = items.findIndex((item) => item.id === selectedItemId) || 0;\n  const [clipPath, setClipPath] = useState<string>('');\n  const shouldAnimate = animationLevel > 0;\n\n  useHorizontalScroll(containerRef, !items.length, true);\n\n  const updateClipPath = useLastCallback(() => {\n    const clipPathContainer = clipPathContainerRef.current;\n    const activeTab = selectedIndex >= 0 && clipPathContainer?.childNodes[selectedIndex] as HTMLElement | null;\n\n    if (clipPathContainer && activeTab && clipPathContainer.offsetWidth > 0) {\n      const { offsetLeft, offsetWidth } = activeTab;\n      const containerWidth = clipPathContainer.offsetWidth;\n      const left = (offsetLeft / containerWidth * 100).toFixed(1);\n      const right = ((containerWidth - (offsetLeft + offsetWidth)) / containerWidth * 100).toFixed(1);\n\n      const newClipPath = `inset(0 ${right}% 0 ${left}% round 1rem)`;\n      setClipPath(newClipPath);\n    }\n  });\n\n  useEffect(() => {\n    updateClipPath();\n  }, [selectedIndex, items]);\n\n  useResizeObserver(clipPathContainerRef, updateClipPath);\n\n  if (!items.length) return undefined;\n\n  return (\n    <div\n      ref={containerRef}\n      className={\n        buildClassName(\n          styles.container,\n          'no-scrollbar',\n          className,\n          clipPath && styles.isVisible,\n        )\n      }\n    >\n      {items.map((item) => (\n        <AnimatedTabItem\n          key={item.id}\n          id={item.id}\n          title={item.title}\n          sticker={item.sticker}\n          onClick={onItemSelect}\n        />\n      ))}\n\n      <div\n        ref={clipPathContainerRef}\n        className={buildClassName(\n          styles.clipPathContainer,\n          'clip-path-container',\n          !shouldAnimate && styles.noAnimation,\n        )}\n        style={clipPath ? `clip-path: ${clipPath}` : undefined}\n        aria-hidden\n      >\n        {items.map((item, i) => (\n          <AnimatedTabItem\n            key={item.id}\n            id={item.id}\n            title={item.title}\n            sticker={item.sticker}\n            onClick={onItemSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(AnimatedTabList);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"UQ6pUmuC\",\"clipPathContainer\":\"c397ZVz4\",\"isVisible\":\"_Nw3GzkO\",\"noAnimation\":\"zNFdzcTe\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarGiftCollection } from '../../../api/types';\nimport type { ProfileCollectionKey } from '../../../global/selectors/payments';\nimport type { AnimationLevel } from '../../../types';\nimport type { TabItem } from '../../common/AnimatedTabList';\n\nimport { selectActiveGiftsCollectionId } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedTabList from '../../common/AnimatedTabList';\n\nimport styles from './StarGiftCollectionList.module.scss';\ntype OwnProps = {\n  peerId: string;\n  className?: string;\n};\n\ntype StateProps = {\n  collections?: ApiStarGiftCollection[];\n  activeCollectionId: ProfileCollectionKey;\n  animationLevel: AnimationLevel;\n};\n\nconst StarGiftCollectionList = ({\n  peerId,\n  className,\n  collections,\n  activeCollectionId,\n  animationLevel,\n}: StateProps & OwnProps) => {\n  const { updateSelectedGiftCollection, resetSelectedGiftCollection } = getActions();\n  const lang = useLang();\n\n  const handleItemSelect = useLastCallback((itemId: string) => {\n    if (itemId === 'all') {\n      resetSelectedGiftCollection({ peerId });\n    } else {\n      const collectionId = Number(itemId);\n      updateSelectedGiftCollection({ peerId, collectionId });\n    }\n  });\n\n  if (!collections || collections.length === 0) {\n    return undefined;\n  }\n\n  const items: TabItem[] = useMemo(() => [\n    {\n      id: 'all',\n      title: lang('AllGiftsCategory'),\n    },\n    ...collections.map((collection) => ({\n      id: String(collection.collectionId),\n      title: collection.title,\n      sticker: collection.icon,\n    })),\n  ], [collections, lang]);\n\n  const selectedItemId = activeCollectionId ? String(activeCollectionId) : 'all';\n\n  return (\n    <AnimatedTabList\n      items={items}\n      selectedItemId={selectedItemId}\n      animationLevel={animationLevel}\n      onItemSelect={handleItemSelect}\n      className={buildClassName(styles.tabList, className)}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const { starGiftCollections } = global;\n    const collections = starGiftCollections?.byPeerId?.[peerId];\n    const activeCollectionId = selectActiveGiftsCollectionId(global, peerId);\n\n    return {\n      collections,\n      activeCollectionId,\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(StarGiftCollectionList));\n","// extracted by mini-css-extract-plugin\nexport default {\"tabList\":\"pvf61Tbm\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStoryAlbum } from '../../../api/types';\nimport type { ProfileCollectionKey } from '../../../global/selectors/payments';\nimport type { AnimationLevel } from '../../../types';\nimport type { TabItem } from '../../common/AnimatedTabList';\n\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { selectActiveStoriesCollectionId } from '../../../global/selectors/stories';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedTabList from '../../common/AnimatedTabList';\n\nimport styles from './StoryAlbumList.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  className?: string;\n};\n\ntype StateProps = {\n  albums?: ApiStoryAlbum[];\n  selectedAlbumId: ProfileCollectionKey;\n  animationLevel: AnimationLevel;\n};\n\nconst StoryAlbumList = ({\n  peerId,\n  className,\n  albums,\n  selectedAlbumId,\n  animationLevel,\n}: StateProps & OwnProps) => {\n  const { selectStoryAlbum, resetSelectedStoryAlbum } = getActions();\n  const lang = useLang();\n\n  const handleItemSelect = useLastCallback((itemId: string) => {\n    if (itemId === 'all') {\n      resetSelectedStoryAlbum();\n    } else {\n      const albumId = Number(itemId);\n      selectStoryAlbum({ peerId, albumId });\n    }\n  });\n\n  if (!albums?.length) {\n    return undefined;\n  }\n\n  const items: TabItem[] = useMemo(() => [\n    {\n      id: 'all',\n      title: lang('AllStoriesCategory'),\n    },\n    ...albums.map((album) => ({\n      id: String(album.albumId),\n      title: album.title,\n    })),\n  ], [albums, lang]);\n\n  const selectedItemId = selectedAlbumId ? String(selectedAlbumId) : 'all';\n\n  return (\n    <AnimatedTabList\n      items={items}\n      selectedItemId={selectedItemId}\n      animationLevel={animationLevel}\n      onItemSelect={handleItemSelect}\n      className={buildClassName(styles.tabList, className)}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const { stories } = global;\n    const albums = stories?.albumsByPeerId?.[peerId];\n    const selectedAlbumId = selectActiveStoriesCollectionId(global);\n\n    return {\n      albums,\n      selectedAlbumId,\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(StoryAlbumList));\n","// extracted by mini-css-extract-plugin\nexport default {\"tabList\":\"GgK8T6WN\"};","import type { FC } from '@teact';\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiStarGiftCollection,\n  ApiStoryAlbum,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { ProfileCollectionKey } from '../../global/selectors/payments';\nimport type { TabState } from '../../global/types';\nimport type { AnimationLevel, ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId } from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport { MEMBERS_SLICE, PROFILE_SENSITIVE_AREA, SHARED_MEDIA_SLICE, SLIDE_TRANSITION_DURATION } from '../../config';\nimport { selectActiveGiftsCollectionId } from '../../global/selectors/payments';\n\nconst CONTENT_PANEL_SHOW_DELAY = 300;\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getSavedGiftKey } from '../../global/helpers/stars';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsChatRestricted,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectMonoforumChannel,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectMessageDownloadableMedia } from '../../global/selectors/media';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { selectActiveStoriesCollectionId } from '../../global/selectors/stories';\nimport {\n  VTT_PROFILE_GIFTS,\n  VTT_RIGHT_PROFILE_COLLAPSE,\n  VTT_RIGHT_PROFILE_EXPAND,\n} from '../../util/animations/viewTransitionTypes.ts';\nimport { areDeepEqual } from '../../util/areDeepEqual';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport { useVtn } from '../../hooks/animations/useVtn.ts';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useTopOverscroll from '../../hooks/scroll/useTopOverscroll.tsx';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/profile/ProfileInfo.tsx';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport StarGiftCollectionList from './gifts/StarGiftCollectionList';\nimport StoryAlbumList from './stories/StoryAlbumList';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  isActive: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  monoforumChannel?: ApiChat;\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  storyAlbums?: ApiStoryAlbum[];\n  giftCollections?: ApiStarGiftCollection[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  selectedStoryAlbumId: ProfileCollectionKey;\n  activeCollectionId: ProfileCollectionKey;\n  giftsFilter?: any;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  animationLevel: AnimationLevel;\n  shouldWarnAboutFiles?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia?: ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n  hasAvatar?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  monoforumChannel,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  selectedStoryAlbumId,\n  activeCollectionId,\n  giftsFilter,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  storyAlbums,\n  giftCollections,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  animationLevel,\n  shouldWarnAboutFiles,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  hasAvatar,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n    loadStarGiftCollections,\n    loadStoryAlbums,\n    resetSelectedStoryAlbum,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n  const [isGiftTransitionEnabled, enableGiftTransition, disableGiftTransition] = useFlag();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n  const [isProfileExpanded, expandProfile, collapseProfile] = useFlag();\n\n  const [restoreContentHeightKey, setRestoreContentHeightKey] = useState(0);\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  useEffect(() => {\n    resetSelectedStoryAlbum();\n  }, [chatId]);\n\n  useSyncEffect(() => {\n    enableGiftTransition();\n  }, [giftsFilter]);\n\n  useSyncEffect(() => {\n    disableGiftTransition();\n  }, [gifts]);\n\n  useEffect(() => {\n    if (hasGiftsTab && isSynced) {\n      loadStarGiftCollections({ peerId: chatId });\n      loadStoryAlbums({ peerId: chatId });\n    }\n  }, [chatId, hasGiftsTab, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition } = useViewTransition();\n  const { createVtnStyle } = useVtn();\n\n  const giftIds = useMemo(() => renderingGifts?.map((gift) => getSavedGiftKey(gift)), [renderingGifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n\n  const handleLoadMoreMembers = useCallback(() => {\n    loadMoreMembers({ chatId });\n  }, [chatId, loadMoreMembers]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (areDeepEqual(gifts, prevGifts)) {\n      return;\n    }\n\n    if (!gifts || !prevGifts || !isGiftTransitionEnabled) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map((gift) => getSavedGiftKey(gift));\n    const newGiftIds = gifts.map((gift) => getSavedGiftKey(gift));\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(VTT_PROFILE_GIFTS, () => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition, isGiftTransitionEnabled]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers: handleLoadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const [isGiftCollectionsShowed, markGiftCollectionsShowed, unmarkGiftCollectionsShowed] = useFlag(false);\n  const [isStoryAlbumsShowed, markStoryAlbumsShowed, unmarkStoryAlbums] = useFlag(false);\n\n  const hasGiftsCollections = giftCollections && giftCollections.length > 0;\n  const hasStoryAlbums = storyAlbums && storyAlbums.length > 0;\n  const isGiftsResult = resultType === 'gifts';\n  const isStoriesResult = resultType === 'stories';\n  const shouldShowContentPanel = (isGiftsResult && hasGiftsCollections) || (isStoriesResult && hasStoryAlbums);\n\n  useEffect(() => {\n    if (hasGiftsCollections) {\n      setTimeout(() => {\n        markGiftCollectionsShowed();\n      }, CONTENT_PANEL_SHOW_DELAY);\n    } else {\n      unmarkGiftCollectionsShowed();\n    }\n\n    if (hasStoryAlbums) {\n      setTimeout(() => {\n        markStoryAlbumsShowed();\n      }, CONTENT_PANEL_SHOW_DELAY);\n    } else {\n      unmarkStoryAlbums();\n    }\n  }, [hasGiftsCollections, hasStoryAlbums, markGiftCollectionsShowed, markStoryAlbumsShowed]);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const handleExpandProfile = useLastCallback(() => {\n    if (isProfileExpanded) return;\n    startViewTransition(VTT_RIGHT_PROFILE_EXPAND, () => {\n      expandProfile();\n    });\n  });\n\n  const handleCollapseProfile = useLastCallback(() => {\n    if (!isProfileExpanded) return;\n    startViewTransition(VTT_RIGHT_PROFILE_COLLAPSE, () => {\n      collapseProfile();\n    });\n  });\n\n  const { handleScroll } = useProfileState({\n    containerRef,\n    tabType: resultType,\n    profileState,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    onProfileStateChange,\n    handleStopAutoScrollToTabs,\n  });\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n        || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useTopOverscroll(\n    containerRef, handleExpandProfile, handleCollapseProfile, !hasAvatar,\n  );\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if ((!viewportIds && !botPreviewMedia) || (!gifts?.length && resultType === 'gifts')) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType,\n    renderingActiveTab, activeCollectionId, selectedStoryAlbumId], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    const noContent = (!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById;\n    const noSpinner = isFirstTab && !canRenderContent;\n\n    return (\n      <div>\n        {renderCategories()}\n        {renderSpinnerOrContent(noContent, noSpinner)}\n      </div>\n    );\n  }\n\n  function renderCategories() {\n    if (resultType === 'gifts') {\n      return (\n        <div\n          className={buildClassName(\n            'contentCategoriesPanel',\n            !shouldShowContentPanel && 'hiddenPanel',\n            isGiftCollectionsShowed && 'noTransition',\n          )}\n        >\n          <StarGiftCollectionList peerId={chatId} />\n        </div>\n      );\n    }\n\n    if (resultType === 'stories') {\n      return (\n        <div\n          className={buildClassName(\n            'contentCategoriesPanel',\n            !shouldShowContentPanel && 'hiddenPanel',\n            isStoryAlbumsShowed && 'noTransition',\n          )}\n        >\n          <StoryAlbumList peerId={chatId} />\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSpinnerOrContentBase(noContent: boolean, noSpinner: boolean) {\n    if (noContent) {\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text={lang('ChatMemberListNoAccess')} />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? lang('ChatMemberListNoAccess') : lang('NoMembersFound');\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    if (!messagesById) {\n      // A TypeScript assertion, should never be really reached\n      return;\n    }\n\n    const noTransition = resultType === 'gifts' ? isGiftCollectionsShowed\n      : resultType === 'stories' ? isStoryAlbumsShowed : false;\n    return (\n      <div\n        className={buildClassName(\n          `content ${resultType}-list`,\n          shouldShowContentPanel && 'showContentPanel',\n          noTransition && 'noTransition',\n        )}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[]).map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutFiles={shouldWarnAboutFiles}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[]).map((id) => {\n            const global = getGlobal();\n            const message = messagesById[id];\n            if (!message) return undefined;\n\n            const media = selectMessageDownloadableMedia(global, message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={message}\n                senderTitle={getSenderName(oldLang, message, chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={message.date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !message.isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-channels\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-bots\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getSavedGiftKey(gift)}\n                className=\"saved-gift\"\n                style={createVtnStyle(getSavedGiftKey(gift))}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const shouldUseTransitionForContent = resultType === 'stories' || resultType === 'gifts';\n  const contentTransitionKey = (() => {\n    if (resultType === 'stories') {\n      return selectedStoryAlbumId === 'all' ? 0 : selectedStoryAlbumId;\n    }\n    if (resultType === 'gifts') {\n      return activeCollectionId === 'all' ? 0 : activeCollectionId;\n    }\n    return 0;\n  })();\n\n  const handleOnStop = useLastCallback(() => {\n    setRestoreContentHeightKey(restoreContentHeightKey + 1);\n  });\n\n  function renderProfileInfo(peerId: string, isReady: boolean) {\n    return (\n      <div className=\"profile-info\">\n        <ProfileInfo\n          isExpanded={isProfileExpanded}\n          peerId={peerId}\n          canPlayVideo={isReady}\n          isForMonoforum={Boolean(monoforumChannel)}\n        />\n        <ChatExtra\n          chatOrUserId={profileId}\n          isSavedDialog={isSavedDialog}\n          style={createVtnStyle('chatExtra')}\n        />\n      </div>\n    );\n  }\n\n  function renderSpinnerOrContent(noContent: boolean, noSpinner: boolean) {\n    const baseContent = renderSpinnerOrContentBase(noContent, noSpinner);\n\n    const isSpinner = noContent && !noSpinner;\n\n    if (shouldUseTransitionForContent) {\n      return (\n        <Transition\n          className={`${resultType}-list`}\n          activeKey={contentTransitionKey}\n          name={resolveTransitionName('slideOptimized', animationLevel, undefined, oldLang.isRtl)}\n          shouldCleanup\n          shouldRestoreHeight\n          restoreHeightKey={restoreContentHeightKey}\n          contentSelector=\".Transition > .Transition_slide-active > .content\"\n        >\n          <Transition\n            activeKey={isSpinner ? 0 : 1}\n            name=\"fade\"\n            shouldCleanup\n            shouldRestoreHeight\n            restoreHeightKey={restoreContentHeightKey}\n            contentSelector=\".content\"\n            onStop={handleOnStop}\n          >\n            {baseContent}\n          </Transition>\n        </Transition>\n      );\n    }\n\n    return (\n      <Transition\n        activeKey={isSpinner ? 0 : 1}\n        name=\"fade\"\n        shouldCleanup\n        shouldRestoreHeight\n      >\n        {baseContent}\n      </Transition>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active`;\n  const itemSelector = !shouldUseTransitionForContent\n    ? `${activeListSelector} .${resultType}-list > .scroll-item`\n    /* eslint-disable @stylistic/max-len */\n    : `${activeListSelector} > .Transition > .Transition_slide-active > .Transition > .Transition_slide-active > .gifts-list > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(\n          monoforumChannel?.id || profileId,\n          isRightColumnShown && canRenderContent,\n        )\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n          style={createVtnStyle('sharedMedia')}\n        >\n          <Transition\n            ref={transitionRef}\n            name={resolveTransitionName('slideOptimized', animationLevel, undefined, oldLang.isRtl)}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n            restoreHeightKey={shouldUseTransitionForContent ? restoreContentHeightKey : undefined}\n            contentSelector={shouldUseTransitionForContent\n              ? '.Transition > .Transition_slide-active > .Transition > .Transition_slide-active > .content'\n              : undefined}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): Complete<StateProps> => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { animationLevel, shouldWarnAboutFiles } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog\n      && (isGroup || (isChannel && isChatAdmin(chat))) && !chat?.isMonoforum;\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const tabState = selectTabState(global);\n    const { nextProfileTab, forceScrollProfileTab, savedGifts } = tabState;\n    const selectedStoryAlbumId = selectActiveStoriesCollectionId(global);\n    const storyIds = selectedStoryAlbumId !== 'all'\n      ? peerStories?.idsByAlbumId?.[selectedStoryAlbumId]?.ids\n      : peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const activeCollectionId = selectActiveGiftsCollectionId(global, chatId);\n    const peerGifts = savedGifts.collectionsByPeerId[chatId]?.[activeCollectionId];\n\n    const storyAlbums = global.stories.albumsByPeerId?.[chatId];\n    const giftCollections = global.starGiftCollections?.byPeerId?.[chatId];\n\n    const monoforumChannel = selectMonoforumChannel(global, chatId);\n    const isRestricted = chat && selectIsChatRestricted(global, chat.id);\n    const hasAvatar = Boolean(peer?.avatarPhotoId);\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      storyAlbums,\n      giftCollections,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      selectedStoryAlbumId,\n      activeCollectionId,\n      giftsFilter: savedGifts.filter,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab,\n      forceScrollProfileTab,\n      animationLevel,\n      shouldWarnAboutFiles,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      members: hasMembersTab ? members : undefined,\n      adminMembersById: hasMembersTab ? adminMembersById : undefined,\n      commonChatIds: commonChats?.ids,\n      monoforumChannel,\n      hasAvatar,\n    };\n  },\n)(Profile));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: ElementRef<HTMLDivElement>,\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.clientHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_MAC_OS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport { useVtn } from '../../hooks/animations/useVtn';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  isFocusList?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  NewDiscussionGroup,\n  FocusList,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  isFocusList,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n  const { createVtnStyle } = useVtn();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUpgradable: shouldIncludeUpgradableGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : managementScreen === ManagementScreens.NewDiscussionGroup ? (\n      HeaderContent.NewDiscussionGroup\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : isFocusList ? (\n    HeaderContent.FocusList\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.FocusList:\n        return <h3 className=\"title\">Priority</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: {\n                        shouldIncludeLimited: !shouldIncludeLimitedGifts,\n                      } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUpgradableGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: {\n                        shouldIncludeUpgradable: !shouldIncludeUpgradableGifts,\n                      } },\n                    )}\n                  >\n                    {lang('GiftFilterUpgradable')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.NewDiscussionGroup:\n        return <h3 className=\"title\">{oldLang('NewGroup')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div\n      className=\"RightHeader\"\n      data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}\n      style={createVtnStyle('rightHeader', true)}\n    >\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\",\"boostInfo\":\"BhoA3MT6\"};","import { memo, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { AnimationLevel, CustomPeer } from '../../../types';\n\nimport { GIVEAWAY_BOOST_PER_PREMIUM } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectIsGiveawayGiftsPurchaseAvailable, selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n  animationLevel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>\n            {lang(boost.isFromGiveaway\n              ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className={buildClassName(styles.boostInfo, 'chat-item-clickable')}\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months] || GIVEAWAY_IMG_LIST[3]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>\n                          {\n                            isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                              : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                          }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>\n                    {lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">\n                {lang(\n                  isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n                )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig.giveawayBoostsPerPremium;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n      animationLevel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { isGraph } from './helpers/isGraph';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index] as HTMLElement, {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph,\n        });\n\n        loadedCharts.current.add(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n      && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? (\n              <span className={styles.decimalPart}>\n                .\n                {decimalTonPart}\n              </span>\n            ) : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ $\n          {integerUsdPart}\n          {decimalUsdPart ? (\n            <span className={styles.decimalUsdPart}>\n              .\n              {decimalUsdPart}\n            </span>\n          ) : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '@teact';\nimport { memo } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { selectFocusListMessages } from '../../global/selectors';\nimport { getMessageOriginalId } from '../../global/helpers/messages';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport NothingFound from '../common/NothingFound';\nimport SenderGroupContainer from '../middle/message/SenderGroupContainer';\n\nimport './FocusList.scss';\nimport Message from '../middle/message/Message';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  focusMessages: ApiMessage[];\n};\n\nconst FocusList: FC<OwnProps & StateProps> = ({\n  isActive,\n  focusMessages,\n}) => {\n  const { focusMessage } = getActions();\n\n  const handleMessageClick = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  if (!isActive) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"FocusList\">\n      <div className=\"FocusList__content custom-scroll\">\n        {focusMessages.length === 0 ? (\n          <NothingFound\n            text=\"No messages in Priority\"\n            description=\"Add important messages to your Priority list for quick access\"\n          />\n        ) : (\n          <div className=\"FocusList__messages\">\n            {focusMessages.map((message, i) => {\n              const messageId = getMessageOriginalId(message);\n              const withAvatar = true;\n\n              return (\n                <div key={`${message.chatId}_${message.id}`} className=\"FocusList__message-item\">\n                  <div\n                    className=\"FocusList__message-content\"\n                    onClick={() => handleMessageClick(message)}\n                  >\n                    <SenderGroupContainer\n                      key={`sender-${messageId}`}\n                      id={`focus-message-group-${messageId}`}\n                      message={message}\n                      withAvatar={withAvatar}\n                      appearanceOrder={-1}\n                      isInFocusList\n                    >\n                      <Message\n                        message={message}\n                        withAvatar={withAvatar}\n                        withSenderName\n                        threadId={MAIN_THREAD_ID}\n                        messageListType='thread'\n                        noComments\n                        noReplies\n                        noReactions\n                        appearAsNotOwn\n                        appearanceOrder={-1}\n                        isJustAdded={false}\n                        isFirstInGroup\n                        isLastInGroup\n                        isFirstInDocumentGroup\n                        isLastInDocumentGroup\n                        isLastInList={i === focusMessages.length - 1}\n                        isInFocusList\n                      />\n                    </SenderGroupContainer>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    focusMessages: selectFocusListMessages(global),\n  }),\n)(FocusList));\n","import type { FC } from '@teact';\nimport { memo, useEffect, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { AnimationLevel, ProfileTabType, ThreadId } from '../../types';\nimport { ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent } from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useScrollNotch from '../../hooks/useScrollNotch.ts';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport FocusList from './FocusList';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isChatSelected: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n    toggleFocusList,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isFocusList = contentKey === RightColumnContent.FocusList;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useScrollNotch({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.NewDiscussionGroup:\n            setManagementScreen(ManagementScreens.Discussion);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n      case RightColumnContent.FocusList:\n        toggleFocusList({ force: false });\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.FocusList:\n        return <FocusList isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={(!isChatSelected && !isFocusList) ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          isFocusList={isFocusList}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={resolveTransitionName('layers', animationLevel, shouldSkipTransition || shouldSkipHistoryAnimations)}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): Complete<StateProps> => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { animationLevel } = selectSharedSettings(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): Complete<StateProps> => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\r\nimport { useState, useCallback, useEffect } from '../../../lib/teact/teact';\r\nimport { getGlobal, getActions } from '../../../global';\r\n\r\nimport { useWorkspaceStorage } from '../../../hooks/useWorkspaceStorage';\r\nimport { Workspace } from '../../../types';\r\nimport Button from '../../ui/Button';\r\nimport InputText from '../../ui/InputText';\r\nimport Checkbox from '../../ui/Checkbox';\r\nimport Icon from '../../common/icons/Icon';\r\nimport Modal from '../../ui/Modal';\r\nimport useLang from '../../../hooks/useLang';\r\n\r\nimport './WorkspaceModal.scss';\r\n\r\ntype OwnProps = {\r\n  isOpen: boolean;\r\n  workspaceId?: string;\r\n};\r\n\r\nconst WorkspaceModal: FC<OwnProps> = ({\r\n  isOpen,\r\n  workspaceId,\r\n}) => {\r\n  const global = getGlobal();\r\n  const { setActiveChatFolder, closeWorkspaceCreator } = getActions();\r\n\r\n  const chatFoldersById = global.chatFolders.byId;\r\n  const orderedFolderIds = global.chatFolders.orderedIds;\r\n  const folders = orderedFolderIds ? orderedFolderIds.map((id) => chatFoldersById[id]).filter(Boolean) : [];\r\n\r\n  const [workspaceName, setWorkspaceName] = useState('');\r\n  const [selectedFolderIds, setSelectedFolderIds] = useState<number[]>([]);\r\n  const { savedWorkspaces, setSavedWorkspaces, setCurrentWorkspaceId } = useWorkspaceStorage();\r\n\r\n  const lang = useLang();\r\n  const currentWorkspaceId = workspaceId;\r\n\r\n  useEffect(() => {\r\n    if (currentWorkspaceId) {\r\n      const workspace = savedWorkspaces.find(w => w.id === currentWorkspaceId);\r\n      if (workspace) {\r\n        setWorkspaceName(workspace.name);\r\n        setSelectedFolderIds(workspace.foldersIds || []);\r\n      }\r\n    } else {\r\n      setWorkspaceName('');\r\n      setSelectedFolderIds([]);\r\n    }\r\n  }, [currentWorkspaceId, savedWorkspaces]);\r\n\r\n  const isFormValid = selectedFolderIds.length > 0 && workspaceName.trim() !== '';\r\n\r\n  const handleSubmit = useCallback(e => {\r\n    e.preventDefault();\r\n    const trimmedName = workspaceName.trim();\r\n\r\n    if (isFormValid) {\r\n      if (currentWorkspaceId) {\r\n        setSavedWorkspaces(\r\n          savedWorkspaces.map(w =>\r\n            w.id === currentWorkspaceId ? { ...w, name: trimmedName, foldersIds: selectedFolderIds } : w\r\n          )\r\n        );\r\n      } else {\r\n        const newWorkspace: Workspace = {\r\n          id: Date.now().toString(),\r\n          name: trimmedName,\r\n          foldersIds: selectedFolderIds,\r\n        };\r\n        setSavedWorkspaces([...savedWorkspaces, newWorkspace]);\r\n        setCurrentWorkspaceId(newWorkspace.id);\r\n      }\r\n\r\n      setActiveChatFolder({ activeChatFolder: 0 }, { forceOnHeavyAnimation: true });\r\n      closeWorkspaceCreator();\r\n    }\r\n  }, [workspaceName, selectedFolderIds, currentWorkspaceId, setSavedWorkspaces, savedWorkspaces, isFormValid, setActiveChatFolder, closeWorkspaceCreator]);\r\n\r\n  const handleNameChange = useCallback(e => {\r\n    setWorkspaceName(e.target.value);\r\n  }, []);\r\n\r\n  const handleFolderSelect = useCallback((folderId: number) => (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSelectedFolderIds(prevIds =>\r\n      prevIds.includes(folderId)\r\n        ? prevIds.filter(id => id !== folderId)\r\n        : [...prevIds, folderId]\r\n    );\r\n  }, []);\r\n\r\n  const handleDeleteWorkspace = useCallback(() => {\r\n    if (currentWorkspaceId) {\r\n      setSavedWorkspaces(savedWorkspaces.filter(w => w.id !== currentWorkspaceId));\r\n      setCurrentWorkspaceId('0');\r\n      closeWorkspaceCreator();\r\n    }\r\n  }, [currentWorkspaceId, savedWorkspaces, setSavedWorkspaces, setCurrentWorkspaceId, closeWorkspaceCreator]);\r\n\r\n  const handleClose = useCallback(() => {\r\n    closeWorkspaceCreator();\r\n  }, [closeWorkspaceCreator]);\r\n\r\n  const renderHeader = useCallback(() => {\r\n    const modalTitle = currentWorkspaceId ? 'Edit Workspace' : 'Create Workspace';\r\n    return (\r\n      <div className=\"modal-header-condensed\">\r\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Cancel')} onClick={handleClose}>\r\n          <Icon name=\"close\" />\r\n        </Button>\r\n        <div className=\"modal-title\">{modalTitle}</div>\r\n        <Button\r\n          color=\"primary\"\r\n          size=\"smaller\"\r\n          className=\"modal-action-button\"\r\n          onClick={handleSubmit}\r\n          disabled={!isFormValid}\r\n        >\r\n          {currentWorkspaceId ? 'Save' : 'Create'}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }, [currentWorkspaceId, isFormValid, handleSubmit, handleClose, lang]);\r\n\r\n  return (\r\n    <Modal isOpen={isOpen} onClose={handleClose} header={renderHeader()} className=\"WorkspaceModal\">\r\n      <div className=\"workspace-form\">\r\n        <InputText\r\n          id=\"workspace-name\"\r\n          value={workspaceName}\r\n          onChange={handleNameChange}\r\n          label=\"Workspace name\"\r\n        />\r\n        \r\n        <div className=\"workspace-folder-selection\">\r\n          <h3 className=\"workspace-folder-selection-title\">Select folders:</h3>\r\n          {folders.map((folder) => (\r\n            <Checkbox\r\n              key={folder.id}\r\n              label={folder.title.text}\r\n              checked={selectedFolderIds.includes(folder.id)}\r\n              onChange={handleFolderSelect(folder.id)}\r\n            />\r\n          ))}\r\n        </div>\r\n\r\n        {currentWorkspaceId && (\r\n          <Button color=\"danger\" onClick={handleDeleteWorkspace}>Delete workspace</Button>\r\n        )}\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default WorkspaceModal;","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line @stylistic/max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => pick(selectTabState(global), ['confetti']) as Complete<StateProps>,\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_ANDROID, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useTauriEvent from '../../hooks/tauri/useTauriEvent';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport WorkspaceModal from './workspace/WorkspaceModal';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isFocusListOpen?: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n  isWorkspaceCreatorOpen?: boolean;\n  editingWorkspaceId?: string;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isFocusListOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n  isWorkspaceCreatorOpen,\n  editingWorkspaceId,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadTonGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n    loadContentSettings,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const containerRef = useRef<HTMLDivElement>();\n  const leftColumnRef = useRef<HTMLDivElement>();\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline({ isOnline: true });\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadContentSettings();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadTonGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useTauriEvent<string>('deeplink', (event) => {\n    try {\n      const url = event.payload || '';\n      const decodedUrl = decodeURIComponent(url);\n      processDeepLink(decodedUrl);\n    } catch (e) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('Failed to process deep link', e);\n      }\n    }\n  });\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n    isFocusListOpen && 'focus-list-open',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, IS_TAURI);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n      <WorkspaceModal \n        isOpen={Boolean(isWorkspaceCreatorOpen)} \n        workspaceId={editingWorkspaceId}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): Complete<StateProps> => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n      || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isFocusListOpen: selectTabState(global).isFocusListShown,\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n      isWorkspaceCreatorOpen: global.workspaces.isCreatorOpen,\n      editingWorkspaceId: global.workspaces.editingWorkspaceId,\n    };\n  },\n)(Main));\n","import type { Event } from '@tauri-apps/api/event';\nimport { useEffect } from '../../lib/teact/teact';\n\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\n\nexport default function useTauriEvent<T>(name: string, callback: (event: Event<T>) => void) {\n  return useEffect(() => {\n    if (!IS_TAURI) {\n      return undefined;\n    }\n\n    let removeListener: VoidFunction | undefined;\n\n    const setUpListener = async () => {\n      const { listen } = await import('@tauri-apps/api/event');\n      removeListener = await listen<T>(name, (event) => {\n        callback(event);\n      });\n    };\n\n    setUpListener().catch((error) => {\n      // eslint-disable-next-line no-console\n      console.error(`Could not set up window event listener. ${error}`);\n    });\n\n    return () => {\n      removeListener?.();\n    };\n  }, [name, callback]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>\n          {' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          onClearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","isNew","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","undefined","updateTopic","selectThreadIdFromMessage","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","webPage","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","replaceWebPage","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","text","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","isFromNew","apiUpdate","keys","selectChatScheduledMessages","map","clearMessageTranslation","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","Boolean","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","peer","selectPeer","isApiPeerChat","selectIsMonoforumAdmin","paidMessagesStars","fullInfo","selectUserFullInfo","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","selectIsChatRestricted","viewportIds","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","draftSuggestedPostInfo","suggestedPostInfo","messageReplyInfo","suggestedPostPrice","price","suggestedPostCurrency","currency","STARS_CURRENCY_CODE","suggestedPostAmount","amount","stars","balance","openStarsBalanceModal","topup","balanceNeeded","TON_CURRENCY_CODE","ton","suggestedMessage","suggestedMedia","noWebPage","selectNoWebPage","isInvertedMedia","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","getActions","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","variables","pluralValue","titleKey","formatStarsAsText","getTranslationFn","icon","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","todo","cancelApiProgress","currentDraft","isMonoforum","effectId","shouldKeepReply","shouldKeepSuggestedPost","currentReplyInfo","updatedReplyInfo","updatedSuggestedPostInfo","clearDraft","monoforumPeerId","scheduleDate","messageSuggestedPost","futureMin","appConfig","starsSuggestedPostFutureMin","validScheduleDate","updateDraftSuggestedPostInfo","insertingPeerIdMention","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","removeFromFocusList","notifications","dismissAction","Array","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectIsCurrentUserFrozen","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","webPagePreviewId","completedIds","incompletedIds","currentTodo","currentCompletions","completions","currentCompletionIds","c","itemId","newCompletions","completedBy","completedAt","finalCompletions","newContent","items","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","selectCustomEmoji","customEmoji","customEmojis","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","neededAmount","reject","rejectComment","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","linkContext","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","isWhitelisted","whitelistedDomains","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","quoteOffset","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","tonGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","searchResult","sponsoredResult","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","publicPosts","previousSearchFlood","searchFlood","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","queryIsFree","remains","lang","starsAmount","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","shouldReuseParams","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","accountDaysTtl","closeDeleteAccountModal","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","chatRefundModal","starsToRefund","shouldSharePhoneNumber","isContact","phoneNumber","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","buttonType","initDraftFromSuggestedMessage","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","currentInlineBotSettings","newResults","isGallery","searchInlineBot","botSender","openChatWithDraft","getMainUsername","queryId","allowPaidStars","resultId","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","openFrozenAccountModal","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","selectSharedSettings","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","botUrl","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","isTon","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","handlePaymentFormError","formPrice","totalAmount","sendStarPaymentForm","directInfo","formId","openPriceConfirmModal","originalAmount","newAmount","hasErrorKey","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","slug","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","selectedResaleGift","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","reloadPeerSavedGifts","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStarsStatus","needsTopupOptions","topupOptions","starsStatus","tonStatus","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","updateStarsBalance","isInbound","isOutbound","idsByCategoryName","stock","limited","resale","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","resaleStarGiftIds","availabilityResale","starsCategory","starGifts","idsByCategory","resaleGifts","loadResaleGifts","shouldRefresh","isAllLoaded","attributesHash","RESALE_GIFTS_LIMIT","currentGifts","newGifts","currentUpdateIteration","updateIteration","attributes","counters","DEFAULT_RESALE_GIFTS_FILTER_OPTIONS","fetchingCollectionId","selectActiveGiftsCollectionId","selectPeerCollectionSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","collectionId","currentFilter","currentCollectionId","replacePeerSavedGifts","activeCollectionId","loadPeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","savedGifts","collectionsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","samples","giftUpgradeModal","sampleAttributes","selectPeerSavedGifts","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","updatePeerStarGiftCollections","collections","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","byKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","messageInteractions","recentPosts","post","storyInteractions","loadMessagesById","msgId","loadPeerStoriesByIds","storyIds","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","lastReadStoryId","selectedAlbumId","selectActiveStoriesCollectionId","albumData","idsByAlbumId","albumId","updatePeerStoriesFullyLoaded","profileIds","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","albums","albumsByPeerId","selectedStoryAlbumId","loadPeerProfileStories","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","addTabStateResetterAction","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","isMuted","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","selectMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","forNewTask","todoListModal","CHANGELOG_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","suggestMessageModal","suggestedPostApprovalModal","isSchedule","deleteMessageModal","additionalInfo","canReport","sponsorInfo","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","currentContent","fetchingStatus","GlobalSearchContent","BotApps","PublicPosts","checkSearchPostsFlood","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","isFrozenAccountModalOpen","deleteAccountModal","selfDestructAccountDays","isAgeVerificationModalOpen","newContact","isByPhoneNumber","profileRatingModal","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","IS_TAURI","tauri","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","isSavedMessages","isChatWithBot","selectIsChatWithBot","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","attachmentSettings","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","defaultTitle","PAGE_TITLE_TAURI","PAGE_TITLE","INACTIVE_MARKER","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","isOnline","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeUpgradable","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","priceConfirmModal","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","selectTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","openSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","getPromiseActions","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","giftResalePriceComposerModal","closeGiftInfoValueModal","openGiftModal","resetResaleGifts","giftInfoValueModal","valueInfo","giftStatusInfoModal","giftTransferModal","activeCollectionByPeerId","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerId","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","isFocusListShown","lastIsFocusListShown","currentMessageIds","focusList","INVALIDATE_FULL_CHAT_FIELDS","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","invalidateFullInfo","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","loadPinnedDialogs","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","commands","threadInfos","polls","webPages","addUsers","addChats","webpageType","updateFullWebPage","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","selectPhoneCallUser","notifyAboutCall","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","updateWorkspaceSettings","workspaces","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","isCreatorOpen","editingWorkspaceId","workspaceId","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","_jsx","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useLang","useEffect","updateAppBadge","children","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isAccountFrozen","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","_jsxs","_Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","animationLevel","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","scrollToTop","useDerivedState","useLastCallback","activeList","scrollTo","top","behavior","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","currentWorkspaceId","savedWorkspaces","excludeOtherWorkspaces","useWorkspaceStorage","everythingWorkspace","foldersIds","currentWorkspace","workspace","displayedFolders","w","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","unreadChatIds","folderCountersById","adjustedFolderCountersById","folderFromWorkspaces","adjusted","allFolderUnreadChats","filteredUnreadChats","getOrderedIds","chatsCount","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","Folders","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","badgeCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","shouldRenderFolders","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","Transition","resolveTransitionName","activeKey","renderCount","activeFolder","isFolder","ChatList","folderType","isMainList","canDisplayArchive","withTags","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","AccountMenuItems","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","currentAccountInfo","account","shouldShowLimit","handleLimitClick","newAccountUrl","freeIndex","getAccountSlotUrl","isSameServer","isTest","mockUser","isCustomPeer","peerColorId","emojiStatusId","hasSeparator","customIcon","Avatar","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","emojiStatusSize","MenuSeparator","rel","attachBots","selectTheme","accountsTotalLimit","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSharedSettingOption","updatePerformanceSettings","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","archivedUnreadChatsCount","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MED","wasAnimationLevelSetManually","handleChangelogClick","BETA_CHANGELOG_URL","IS_MULTIACCOUNT_SUPPORTED","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","StatusPickerMenu","collectibleStatuses","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","collectibleEmojiStatus","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","GiftEffectWrapper","withSparkles","sparklesClassName","sparklesColor","textColor","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","oldLang","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","Contacts","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","handleSearchEnter","GlobalSearch","isSearchRelevant","isSearchFocused","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","fullVersion","APP_NAME","IS_MAC_OS","DropdownMenu","trigger","footer","forceOpen","transformOriginX","onTransitionEnd","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","onEnter","ShowTransition","isCustom","WorkspaceAvatar","isRectangular","WorkspaceManager","openWorkspaceCreator","openWorkspaceEditor","setCurrentWorkspaceId","setExcludeOtherWorkspaces","selectedWorkspace","handleWorkspaceSelect","handleCreateWorkspace","handleSwitcherChange","renderTrigger","SavedMessages","selectFocusListCount","FocusListButton","toggleFocusList","CustomButtons","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onTopicSearch","openLeftColumnContent","isNewChatButtonShown","setIsNewChatButtonShown","tauriUpdate","setTauriUpdate","isTauriUpdateDownloading","setIsTauriUpdateDownloading","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","contentKey","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","downloadAndInstall","relaunch","location","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","checkTauriUpdate","checkUpdate","useInterval","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","leftColumn","nextFoldersAction","isChatOpen","selectIsForumPanelOpen","isFirstChatFolderActive","isArchivedStoryRibbonShown","settingsScreen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","blur","EditProfile","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","prevSettingsScreenRef","useStateRef","usePrevious","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","withSwipeControl","currentScreen","isChannel","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","viewportPinnedIds","lastFocusedId","clampIndex","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","styles","handleClick","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","paidMessageStars","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","countryList","phoneCodes","phoneCodeList","isLoadingFullUser","MessageListAccountInfo","hasMessages","loadCommonChats","phoneCountry","registrationMonth","nameChangeDate","photoChangeDate","getCountryCodeByIso","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","height","stopEvent","securityNameInfo","time","formatPastDatetime","withNodes","withMarkdown","securityPhotoInfo","tableData","renderText","isoToEmoji","iso2","defaultName","formatRegistrationMonth","commonChatsCount","Link","AvatarList","style","buildStyle","src","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","MiniTable","keyClassName","isVerified","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","ownProps","withAvatar","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","isRepliesChat","SenderGroupContainer","appearanceOrder","isInFocusList","updateInsertingPeerIdMention","messageSender","noAppearanceAnimation","markShown","MESSAGE_APPEARANCE_DELAY","avatarPeer","isAvatarPeerUser","handleOpenChat","handleMention","EDITABLE_INPUT_CSS_SELECTOR","handleAvatarClick","avatarRef","contextMenuAnchor","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","canMention","shouldRenderContextMenu","hiddenName","renderAvatar","anchor","SponsoredContextMenuContainer","selectSponsoredMessage","activeDownloads","selectActiveDownloads","downloadableMedia","isDownloading","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","SponsoredMessage","observeIntersectionForLoading","observeIntersectionForPlaying","viewSponsored","hideSponsored","clickSponsored","openAboutAdsModal","contentRef","shouldObserve","observe","observeIntersection","useIntersectionObserver","rootRef","debounceMs","threshold","handleBeforeContextMenu","target","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleOpenMedia","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","getMinMediaWidthWithText","getMinMediaWidth","noMediaCorners","onMouseDown","preventMessageInputBlur","PeerColorWrapper","peerColor","Photo","canAutoLoad","noAvatars","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","BadgeButton","renderContent","MessageAppendix","triggerRef","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","isChannelChat","isChatMonoforum","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isReady","hasLinkedChat","shouldRenderAccountInfo","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","hasUnreadReaction","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","offsetHeight","scrollHeight","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","requestMeasure","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","renderPaidMessageAction","album","messagesLength","userTitle","renderSuggestedPostInfoAction","userLink","renderPeerLink","originalMessage","titleText","getSuggestedChangesInfo","getSuggestedChangesActionText","formatTonAsText","convertTonFromNanos","formatScheduledDateTime","actionMessageStyles","suggestedPostContainer","suggestedPostTitle","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","usePreviousDeprecated","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","Message","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","calculateSenderGroups","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","selectThemeValues","handleOpenPremiumModal","handleGetMoreStars","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","formatStarsAsIcon","asFont","containerClassName","pill","Sparkles","preset","Content","runDebouncedForScroll","selectCurrentMessageIds","restrictionReasons","selectActiveRestrictionReasons","focusingId","withLastMessageWhenPreloading","chatBot","isNonContact","canAddContact","hasCustomGreeting","isAppConfigLoaded","monoforumChannelId","selectMonoforumChannel","canTranslate","selectCanTranslateChat","isTranslationDisabled","shouldAutoTranslate","hasAutoTranslation","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","selectIsInSelectMode","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","isChatProtected","selectIsChatProtected","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadFactChecks","requestChatTranslation","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","orderBy","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","classList","contains","requestMutation","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","remove","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","prevContainerHeight","useContainerHeight","firstElementChild","clientHeight","rememberScrollPositionRef","preservedItemElements","getBoundingClientRect","forceMeasure","useLayoutEffectWithPrevDeps","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","Restricted","PremiumRequired","AccountInfo","StarsRequired","onScroll","RequirementToContactMessage","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","renderAudio","audio","performer","fileName","renderVoice","senderName","mediaDuration","selectMessageMediaDuration","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","mediaHash","useMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","artist","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","draggable","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","currentTransitionKey","MiddleHeader","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","openSavedDialog","isBackButtonActive","isDesktop","isTablet","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","closest","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","handleOpenSavedMessages","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","displayChatId","linkedMonoforumId","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","onEmojiStatusClick","GroupChatInfo","withMonoforumStatus","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","SponsoredMessageContextMenuContainer","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","Checkbox","onCheck","chargedPaidMessageStars","PaidMessageChargePane","openChatRefundModal","handleRefund","messageStarIcon","messageStars","root","noForcedUpperCase","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","withRightColumnAnimation","selectCanAnimateRightColumn","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isFirstRenderRef","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","userName","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","isMonoforumAdmin","shouldBlockSendInMonoforum","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","userFull","freezeAppealChat","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","currentTarget","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","handleMouseMove","newWidth","clientX","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","dataTransfer","shouldDrawQuick","IS_SAFARI","item","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","FrozenAccountPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","onDoubleClick","onDragEnter","isBlockingAnimation","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","SuggestMessageModal","SuggestedPostApprovalModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","GiftInfoValueModal","GiftResalePriceComposerModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","ChatRefundModal","PriceConfirmModalAsync","PriceConfirmModal","FrozenAccountModal","DeleteAccountModal","AgeVerificationModal","ProfileRatingModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filterPeersByQuery","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","VTTypes","hierarchy","constructor","types","this","with","getTypes","VTT_RIGHT_COLUMN","VTT_RIGHT_PROFILE_AVATAR","VTT_RIGHT_PROFILE_EXPAND","VTT_RIGHT_PROFILE_COLLAPSE","VTT_PROFILE_GIFTS","OVERSCROLL_CONTAINER_CLASS","NO_TOUCH_CONTAINER_CLASS","initialActiveScrollContext","lastDeltas","fill","lastAverageDelta","isStartedAtTop","resetStartTopAt","timeout","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","hasAdminRights","currentUserEmojiStatus","SavedGift","stickerRef","isHover","markHover","unmarkHover","canManage","totalIssued","getTotalGiftAvailability","starGiftUnique","resellPrice","resaleTonOnly","ribbonText","total","ribbonColor","CUSTOM_PEER_HIDDEN","getStickerFromGift","giftAttributes","getGiftAttributes","backdrop","pattern","radialPatternBackdrop","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","shouldPreloadPreview","nonInteractive","withSparkleEffect","noSparkleAnimation","formatTonAsIcon","shouldConvertFromNanos","GiftRibbon","GiftMenuItems","PreviewMedia","idPrefix","isProtected","useIsIntersecting","useMediaTransitionDeprecated","decoding","formatMediaDuration","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","isDense","imageHash","getStoryMediaHash","thumbUrl","dataUri","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","AnimatedTabItem","AnimatedIconFromSticker","forcePreview","AnimatedTabList","selectedItemId","onItemSelect","clipPathContainerRef","selectedIndex","setClipPath","shouldAnimate","useHorizontalScroll","updateClipPath","clipPathContainer","childNodes","offsetLeft","containerWidth","left","toFixed","right","starGiftCollections","StarGiftCollectionList","updateSelectedGiftCollection","resetSelectedGiftCollection","handleItemSelect","collection","StoryAlbumList","selectStoryAlbum","resetSelectedStoryAlbum","TABS","shouldWarnAboutFiles","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","storyAlbums","giftCollections","monoforumChannel","hasAvatar","giftsFilter","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","searchSharedMediaMessages","setNewChatMembersDialogState","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","loadStarGiftCollections","loadStoryAlbums","deletingUserId","setDeletingUserId","isGiftTransitionEnabled","enableGiftTransition","disableGiftTransition","profileId","isProfileExpanded","expandProfile","collapseProfile","restoreContentHeightKey","setRestoreContentHeightKey","tab","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","renderingGifts","setRenderingGifts","startViewTransition","useViewTransition","createVtnStyle","useVtn","giftIds","getSavedGiftKey","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","handleLoadMoreMembers","prevGifts","prevGiftIds","newGiftIds","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","isGiftCollectionsShowed","markGiftCollectionsShowed","unmarkGiftCollectionsShowed","isStoryAlbumsShowed","markStoryAlbumsShowed","unmarkStoryAlbums","hasGiftsCollections","hasStoryAlbums","shouldShowContentPanel","usePeerStoriesPolling","handleStopAutoScrollToTabs","handleExpandProfile","handleCollapseProfile","prevTabType","tabsEl","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","onOverscroll","getState","setState","activeScrollRef","transitionTimeoutRef","touchStartYRef","triggerOverscroll","triggerReset","scheduleResetActiveScroll","handleWheel","defaultPrevented","deltaY","activeScroll","isStarting","at","shift","currentAverageDelta","isNewInput","abs","handleTouchStart","touches","clientY","handleTouchMove","handleTouchEnd","passive","useTopOverscroll","SLIDE_TRANSITION_DURATION","canRenderContent","shouldUseTransitionForContent","contentTransitionKey","handleOnStop","renderSpinnerOrContent","noContent","noSpinner","baseContent","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","SearchingDuck","noLoop","noTransition","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","Audio","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","renderSpinnerOrContentBase","isSpinner","shouldRestoreHeight","restoreHeightKey","contentSelector","activeListSelector","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","isExpanded","canPlayVideo","isForMonoforum","ChatExtra","chatOrUserId","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","RightHeader","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","isFocusList","managementScreen","onScreenSelect","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUpgradableGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","NewDiscussionGroup","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","FocusList","renderingContentKey","PrimaryLinkMenuButton","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","avatarIcon","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","isLoaded","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","boostInfo","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","errorCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","isGraph","isAsync","graphType","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","focusMessages","selectFocusListMessages","noReactions","appearAsNotOwn","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useScrollNotch","selector","close","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","prevChatId","prevThreadId","onChatMemberSelect","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","focus","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","WorkspaceModal","closeWorkspaceCreator","workspaceName","setWorkspaceName","selectedFolderIds","setSelectedFolderIds","setSavedWorkspaces","isFormValid","handleSubmit","trimmedName","newWorkspace","handleNameChange","handleFolderSelect","prevIds","handleDeleteWorkspace","renderHeader","modalTitle","header","InputText","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","diff","newPos","newVelocity","newFlicker","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","xmlns","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isFocusListOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","isWorkspaceCreatorOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadTonGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBotFreezeAppeal","loadAllStories","loadAllHiddenStories","loadContentSettings","loadBundle","callback","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","decodedUrl","removeListener","listen","setUpListener","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","onClearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit"],"sourceRoot":""}
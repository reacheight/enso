{"version":3,"file":"9451.5d271fcecea7651fb56a.js","mappings":"qNAmBA,MACMA,EAAuC,CAAC,EAAG,IAC3CC,EAAwC,CAAC,EAAG,IAC5CC,EAAsC,CAAC,GAAI,GAoCjD,GAAeC,EAAAA,EAAAA,IAlCsBC,EAAGC,oBAAmBC,YACzD,MAAOC,EAAqBC,IAAyBC,EAAAA,EAAAA,IAAQ,IACtDC,EAAaC,IAAiBF,EAAAA,EAAAA,IAAQ,IACvC,SAAEG,IAAaC,EAAAA,EAAAA,MAEfC,EAAaF,EAAWG,EAAAA,IAA2BC,EAAAA,KAEzDC,EAAAA,EAAAA,GAAWN,EAZkB,KAa7B,MAAMO,GAAwBC,EAAAA,EAAAA,IAAYX,EAAuB,CAACA,IAElE,OACEY,EAAAA,EAAAA,IAAA,OAAKC,GAAG,SAASC,UAAWhB,EAAQ,MAAQ,GAAGiB,SAAA,EAC3ChB,IACAiB,EAAAA,EAAAA,GAAA,OAAKF,UAAU,oBAEjBE,EAAAA,EAAAA,GAACC,EAAAA,EAAe,CACdC,KAAMpB,EAAQqB,EAAAA,IAAsBb,EACpCQ,UAAWZ,EAAc,SAAW,QACpCkB,OAAQC,EAAAA,EAAeC,YACvBC,YAAa/B,EACbgC,QAAM,EACNC,OAAQf,KAEVM,EAAAA,EAAAA,GAACC,EAAAA,EAAe,CACdC,KAAMpB,EAAQqB,EAAAA,IAAsBb,EACpCQ,UAAWZ,EAAc,QAAU,SACnCkB,OAAQC,EAAAA,EAAeK,WACvBH,YAAa1B,EAAoBJ,EAAsBC,EACvD8B,QAAM,Q,08EClBP,SAASG,GAAmB,QACjCC,EAAO,YAAEC,EAAW,cAAEC,EAAa,gBAAEC,EAAe,WAAEC,EAAU,iBAAEC,IASlE,OAAIJ,GAAeC,EACV,CACLI,KAAM,SACNL,cACAC,gBACAE,WAAYA,GAIZD,EACK,CACLG,KAAM,aACNC,MAAOJ,EACPC,WAAYA,GAIZJ,EACK,CACLM,KAAM,UACNN,UACAI,cAIAC,EACK,CACLC,KAAM,mBACNN,QAASK,EACTD,mBAJJ,CASF,CAEe,SAASI,EACtBC,EAAqBC,EAA4BC,GAEjD,IAAKA,EAAQ,OAEb,GAAoB,eAAhBA,EAAOL,KAAuB,CAChC,MAAMC,EAAQI,EAAOJ,MAAMI,EAAOP,YAClC,MAAO,CACLG,QACAK,MAA2B,UAApBL,EAAMM,WAAyBN,EAAMK,MAC5CE,SAAkC,IAAxBH,EAAOJ,MAAMQ,OAE3B,CAEA,GAAoB,WAAhBJ,EAAOL,KAAmB,CAC5B,MAAMU,EAASL,EAAOT,eAAee,OAAON,EAAOP,YACnD,OAAIY,EACK,CACLT,MAAOS,QAGX,CACF,CAEA,MAAM,OACJE,EAAM,SAAEC,EAAQ,MAAEC,EAAK,MAAEC,EAAK,UAAEC,IAC9BC,EAAAA,EAAAA,IAAkBZ,EAAOX,SAE7B,GAAqB,kBAAjBkB,GAAQZ,MAA6C,wBAAjBY,GAAQZ,KAC9C,MAAO,CACLC,MAAOW,EAAOE,MACdN,UAAU,GAId,GAAIK,KAAaK,EAAAA,EAAAA,IAAgBL,KAAaM,EAAAA,EAAAA,IAAgBN,IAC5D,MAAO,CACLZ,MAAOY,GAIX,MAAMO,GAAUC,EAAAA,EAAAA,KAAyBlB,EAAQE,EAAOX,SACxD,GAA6B,SAAzB0B,GAASE,YAAwB,CACnC,MAAQR,MAAOS,EAAcR,MAAOS,EAAcX,SAAUY,GAAoBL,EAC1EM,EAAkBD,KAAoBP,EAAAA,EAAAA,IAAgBO,KAAoBN,EAAAA,EAAAA,IAAgBM,IAE1FxB,EAAQuB,IADQE,EAAkBD,OAAkBE,IACXJ,EAC/C,GAAItB,EACF,MAAO,CACLA,QACAO,UAAU,EAGhB,CAEA,GAAIQ,EAAW,CACb,MAAMY,EAAgBZ,EAAUY,cAAcvB,EAAOP,YAAc,GACnE,KAAM,cAAe8B,GAAgB,CACnC,MAAQd,MAAOe,EAAed,MAAOe,GAAkBF,EACvD,MAAO,CACL3B,MAAQ4B,GAAiBC,EACzBxB,MAAOwB,GAAexB,MAE1B,CACF,CAEA,MAAML,EAAQc,GAASD,EAEvB,OAAIb,EACK,CACLA,QACAK,MAAOS,GAAOT,MACdE,SAAUO,GAAOT,OAASF,IAAW2B,EAAAA,GAAkBC,kBAJ3D,CASF,C,2DCwDA,SAASC,EAAYC,EAAsD9B,GACzE,MAAM+B,EAAQtB,SAASuB,cAAc,OACrCD,EAAME,UAAUC,IAAI,SAEpB,MAAMC,EAAM,IAAIC,MAchB,GAbAD,EAAIE,WAAY,EAChBF,EAAIG,cAAgBC,EAAAA,EAEE,iBAAXT,EACTK,EAAIK,IAAMV,EACDA,aAAkBW,iBAC3BN,EAAIK,IAAMV,EAAOY,OAEjBP,EAAIK,IAAMV,EAAOU,IAGnBT,EAAMY,YAAYR,GAEdnC,IAAW2B,EAAAA,GAAkBiB,eAAiB5C,IAAW2B,EAAAA,GAAkBkB,eAAgB,CAC7Fd,EAAME,UAAUC,IAAI,eAChBlC,IAAW2B,EAAAA,GAAkBkB,gBAC/Bd,EAAME,UAAUC,IAAI,QAEtB,MAAMY,EAAcrC,SAASsC,cAC3B/C,IAAW2B,EAAAA,GAAkBiB,cACzB,kCACA,gCAEFE,GACFf,EAAMY,YAAYG,EAAYE,WAAU,GAE5C,CAEA,OAAOjB,CACT,CA2CA,SAASkB,EAASjD,EAA2BV,EAAsB4D,GACjE,IAAIC,EACAC,EAEJ,OAAQpD,GACN,KAAK2B,EAAAA,GAAkB0B,MACvB,KAAK1B,EAAAA,GAAkB2B,eAErBH,EAAoB,yDAAwDI,EAAAA,EAAAA,IAAiBjE,EAASf,GAAI2E,KAC1GE,EAAgB,cAChB,MAEF,KAAKzB,EAAAA,GAAkB6B,aACrBL,EAAoB,iBAAiBD,IACrCE,EAAgB,MAChB,MAEF,KAAKzB,EAAAA,GAAkBC,YACrBuB,EAAoB,iBAAgBI,EAAAA,EAAAA,IAAiBjE,EAASf,GAAI2E,KAClEE,EAAgB,MAChB,MAEF,KAAKzB,EAAAA,GAAkB8B,aACrBN,EAAoB,iBAAgBI,EAAAA,EAAAA,IAAiBjE,EAASf,GAAI2E,KAClEE,EAAgB,MAChB,MAEF,KAAKzB,EAAAA,GAAkB+B,mBACrBP,EAAoB,2DACpBC,EAAgB,gBAChB,MAEF,KAAKzB,EAAAA,GAAkBkB,eACrBM,EAAoB,gEACpBC,EAAgB,gBAChB,MAEF,KAAKzB,EAAAA,GAAkBiB,cACrBO,EAAoB,mEACpBC,EAAgB,gBAChB,MAEF,KAAKzB,EAAAA,GAAkBgC,cACvB,KAAKhC,EAAAA,GAAkBiC,gBACrBT,EAAoB,6CAA4CI,EAAAA,EAAAA,IAAiBjE,EAASf,GAAI2E,KAC9FE,EAAgB,cAChB,MAEF,KAAKzB,EAAAA,GAAkBkC,iBACrBV,EAAoB,6BACpBC,EAA0B,IAAVF,EAAc,4BAA4BA,yBAA0B3B,EACpF,MAEF,KAAKI,EAAAA,GAAkBmC,iBACrBX,EAAoB,mEACpBC,EAAgB,GAAGW,EAAAA,mBAAwCA,EAAAA,kCAC3D,MAEF,KAAKpC,EAAAA,GAAkBqC,gBACvB,KAAKrC,EAAAA,GAAkBsC,OACvB,QACEd,EAAoB,6CAA4CI,EAAAA,EAAAA,IAAiBjE,EAASf,GAAI2E,KAC9FE,EAAgB,GAAGW,EAAAA,mBAAwCA,EAAAA,kCAG/D,MAAMG,EAAYzD,SAASsC,cAA2BI,GAChDgB,EAAWf,EACbc,GAAWE,iBAAsDhB,QAAiB7B,EAEtF,MAAO,CACL2C,YACAG,QAASF,IAAW,GAExB,CAEA,SAASG,EAAWvC,EAAuB/B,GACzC,OAAQA,GACN,KAAK2B,EAAAA,GAAkB0B,MACvB,KAAK1B,EAAAA,GAAkB2B,eACvB,KAAK3B,EAAAA,GAAkBsC,OACvB,KAAKtC,EAAAA,GAAkBqC,gBACvB,KAAKrC,EAAAA,GAAkBkC,iBACvB,KAAKlC,EAAAA,GAAkB6B,aACrBzB,EAAME,UAAUC,IAAI,mBACpB,MAEF,KAAKP,EAAAA,GAAkBC,YACvB,KAAKD,EAAAA,GAAkBkB,eACvB,KAAKlB,EAAAA,GAAkBiB,cACvB,KAAKjB,EAAAA,GAAkB8B,aACpB1B,EAAMwC,WAA2BC,MAAMC,UAAY,QACpD,MAEF,KAAK9C,EAAAA,GAAkB+B,mBACvB,KAAK/B,EAAAA,GAAkBiC,gBACvB,KAAKjC,EAAAA,GAAkBgC,cACrB5B,EAAME,UAAUC,IAAI,UAG1B,C,iFC1XA,MAAMwC,GAASC,EAAAA,EAAAA,KAAa,GACtBC,EAAwBF,EAAO,GA8ErC,SAASG,EAAuBlE,GAE9B,GAAIA,EAAMmE,gCAA6E,mBAApCnE,EAAMoE,0BAEvD,OAAOpE,EAAMoE,0BAA0BC,KAAKrE,EAGhD,CAeO,SAASsE,IACd,GAAIxE,SAASyE,wBACX,IACEzE,SAAS0E,sBACX,CAAE,MAAOC,GACHC,EAAAA,KAEFC,QAAQC,IAAI,8BAA+BH,EAE/C,CAEJ,C,2DCrHA,MAIMI,EAAQ,IAAIC,I,yCCclB,MAAMC,EAAsBC,EAAAA,GASfC,EAAgBA,EAC3B/F,QACAgG,WACA7F,SACA8F,YAEA,MAAMC,EAAgBF,GAAiC,UAArBhG,GAAOM,YAA0BN,EAAMmG,QACnEC,EAAgBJ,GAAiC,UAArBhG,GAAOM,WAAyBN,EAAMmG,QAClEE,EAAkC,aAArBrG,GAAOM,UACpB6F,EAAgC,UAArBnG,GAAOM,YAA0BN,EAAMsG,SAAaD,IAAcnF,EAAAA,EAAAA,IAAgBlB,GAC7FuG,EAA+B,UAArBvG,GAAOM,WAA0B+F,IAAcpF,EAAAA,EAAAA,IAAgBjB,GACzEK,EAA6B,UAArBL,GAAOM,WAAyBN,EAAMK,MAC9CmG,EAAoBrG,IAAW2B,EAAAA,GAAkBC,YACjD0E,EAAetG,IAAW2B,EAAAA,GAAkB8B,aAE5C8C,EAAoCrG,EAAQ,MAAQ,QAEpDsG,GAAuBC,EAAAA,EAAAA,IAAQ,IAAOC,IAC1C,GAAK7G,EAEL,OAAKkG,IAAiBE,GAAmBS,EAIrCT,GAAiBS,GACZC,EAAAA,EAAAA,IAA8B9G,IAGhC+G,EAAAA,EAAAA,IAAa/G,EAAO6G,EAAS,OAAS,YAPpCG,EAAAA,EAAAA,IAAyBhH,IAQjC,CAACoG,EAAeF,EAAelG,IAE5BiH,GAAmBC,EAAAA,EAAAA,GACvBlH,IAEIwG,GAAqBC,GAAgBJ,KACtCU,EAAAA,EAAAA,IAAa/G,EAAO,kBACvB0B,EACAyF,EAAAA,GAAeC,QACfnB,GAEIoB,EAAmBV,IACnBW,GAAiBJ,EAAAA,EAAAA,GACrBG,OACA3F,EACAyF,EAAAA,GAAeC,QACfnB,IAGAsB,UAAWC,EAAgB,aAC3BC,IACEC,EAAAA,EAAAA,GACFf,GAAqB,QACrBjF,EACA1B,IAAS2H,EAAAA,EAAAA,IAAe3H,EAAO,QAC/BiG,GAGI2B,EAAe5H,GAAS,YAAaA,EAAQA,EAAM6H,aAAUnG,EACnE,IAAIoG,GAAkB3B,IAAYyB,GAAgBJ,IAAsBF,GAAkBL,EAC1F,MAAMc,EClFO,SAAqBC,GAClC,MAAMC,GAAaC,EAAAA,EAAAA,MAEnB,IAAIC,GAAY,GAEhBC,EAAAA,EAAAA,GAAc,KAMZ,GAJAD,GAAY,EAEZF,EAAWI,aAAU3G,GAEhBsG,EACH,OAGF,MAAM1F,EAAM,IAAIC,MAEhB,GADAD,EAAIK,IAAMqF,GACL1F,EAAIgG,MACP,OAGF,MAAMC,GAASC,EAAAA,EAAAA,IAAYlG,IAC3BmG,EAAAA,EAAAA,GAASF,EAAOG,WAAW,MAAO,EAAG,EAAGH,EAAOD,MAAOC,EAAOI,OAzBlD,EACI,GA0BfV,EAAWI,QAAUE,EAAOK,aAC3B,CAACZ,IAIJ,MAAMa,EF3BO,SAAiBb,EAAkBc,GAAa,EAAO7C,GACpE,MAAMgC,GAAaC,EAAAA,EAAAA,IAA2BF,EAAUrC,EAAMoD,IAAIf,QAAWtG,GACvEsH,GAAad,EAAAA,EAAAA,MACbe,GAAcC,EAAAA,EAAAA,KAqCpB,OAnCIF,EAAWX,SAAWS,IACxBK,aAAaH,EAAWX,SACxBW,EAAWX,aAAU3G,IAGvB0H,EAAAA,EAAAA,IAAU,KACR,IAAKpB,GAAWC,EAAWI,SAAWS,EACpC,OAGF,MAAMxG,EAAM,IAAIC,MAEhBD,EAAI+G,OAAS,KACX,MAAMd,GAASC,EAAAA,EAAAA,IAAYlG,IAC3BmG,EAAAA,EAAAA,GAASF,EAAOG,WAAW,MAAO,EAAG,EAAGH,EAAOD,MAAOC,EAAOI,OAzBpD,EACI,GAyBb,MAAMW,EAAiBf,EAAOK,YAE9BX,EAAWI,QAAUiB,EACrBL,IAEItD,EAAM5G,MA7BO,KA8Bf4G,EAAM4D,QAER5D,EAAM6D,IAAIxB,EAASsB,IAGjBrD,EACF+C,EAAWX,QAAUoB,OAAOC,WAAW,KACrCpH,EAAIK,IAAMqF,GACT/B,GAEH3D,EAAIK,IAAMqF,GAEX,CAACA,EAAS/B,EAAOgD,EAAaH,IAE1Bb,EAAWI,OACpB,CEduBsB,CAAQ3B,QAAWtG,EAAWkI,QAAQ3B,EAAWI,UAEtE,OAAOJ,EAAWI,UAAaF,GAAaU,GAAiBb,QAAWtG,CAC1E,CDkDuBmI,EAAa/B,GAAiB9H,IAAS8J,EAAAA,EAAAA,IAAiB9J,IACxE8H,GAAiB3H,IAAW2B,EAAAA,GAAkB8B,eACjDkE,EAAgBC,GAEd3B,GAAiBkB,IACnBQ,EAAgBR,GAElB,MAAMyC,EAAWnC,GAAgBJ,IAC7BpB,GAAkBD,OAAmEzE,EAAvD4F,GAAkBL,GAAoBa,GAGlEkC,EAAYhK,IAASiK,EAAAA,EAAAA,IAAiBjK,GAEtCkK,EAAUN,QAAQhC,GAElBuC,GAAavD,EAAAA,EAAAA,IAAQ,IACrBZ,EACKI,EAAgBgE,EAAAA,GAA+BtE,EAAAA,GAGpDO,EACKrG,EAAMgK,WAAanE,EAGxBU,GACK8D,EAAAA,EAAAA,IAAuBrK,GAG5BmG,GACKmE,EAAAA,EAAAA,IAAmBtK,GAGrB6F,EACN,CAACG,EAAUK,EAAYE,EAASJ,EAASC,EAAepG,IAE3D,MAAO,CACL+G,aAAcJ,EACd3G,QACAmG,UACAI,UACAlG,QACAgG,aACAyB,gBACAiC,WACAI,aACAzD,cACAN,gBACA8D,UACAzC,eACAuC,c,uEEtHJ,MA6EA,IAAexM,EAAAA,EAAAA,IA7EyB+M,EACtCC,SACAC,SACA5J,QACA6J,UACAC,0BAEA,MAAM,mBAAEC,IAAuBC,EAAAA,EAAAA,OAExBC,EAAgBC,IAAqBC,EAAAA,EAAAA,IAA0B,SAC/DC,EAAaC,IAAkBF,EAAAA,EAAAA,IAAS,IAEzCG,GAAeC,EAAAA,EAAAA,GAAgB,KACnCR,EAAmB,CACjBS,OAAQZ,EAAQ5J,QAAOyK,OAAQR,EAAgBG,gBAEjDP,MAGIa,GAAqBH,EAAAA,EAAAA,GAAiBI,IAC1CT,EAAkBS,KAGdC,GAA0BL,EAAAA,EAAAA,GAAiBM,IAC/CR,EAAeQ,EAAEC,OAAOH,SAGpBI,GAAOC,EAAAA,EAAAA,KAEPC,GAA8DlF,EAAAA,EAAAA,IAAQ,IAAM,CAChF,CAAE4E,MAAO,OAAQO,MAAOH,EAAK,2BAC7B,CAAEJ,MAAO,WAAYO,MAAOH,EAAK,+BACjC,CAAEJ,MAAO,cAAeO,MAAOH,EAAK,kCACpC,CAAEJ,MAAO,aAAcO,MAAOH,EAAK,kCACnC,CAAEJ,MAAO,YAAaO,MAAOH,EAAK,+BAClC,CAAEJ,MAAO,eAAgBO,MAAO,iBAChC,CAAEP,MAAO,kBAAmBO,MAAO,oBACnC,CAAEP,MAAO,QAASO,MAAOH,EAAK,6BAC7B,CAACA,IAEJ,IAAKnB,IAAW5J,EACd,OAGF,MAAMmL,EAAQJ,EAAK,qBAEnB,OACEnN,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASA,EACTwB,QAAS1B,EAASW,OAAezJ,EACjCiJ,oBAAqBA,EACrBhM,UAAU,SACVqN,MAAOA,EAAMpN,SAAA,EAEbC,EAAAA,GAAAA,GAACsN,GAAAA,EAAU,CACTxN,UAAU,wBACVyN,KAAK,iBACLC,QAASP,EACTQ,SAAUf,EACVgB,SAAUzB,KAEZjM,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRT,MAAOH,EAAK,iCACZJ,MAAOP,EACPqB,SAAUb,KAEZhN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACC,MAAM,SAAS/N,UAAU,wBAAwBgO,QAAM,EAACC,QAASzB,EAAavM,SACnFgN,EAAK,wBAER/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC9N,UAAU,wBAAwBgO,QAAM,EAACC,QAASlC,EAAQ9L,SAAEgN,EAAK,oB,4BC1FjF,MAAOiB,GAAeC,KAAiBhI,EAAAA,EAAAA,IAAa,GAErC,SAASiI,KAKtB,OAJAC,EAAAA,EAAAA,IAAkB,KAChBF,GAAc,KAGT,CAACD,GAAeC,GACzB,CCSA,MA6CA,IAAetP,EAAAA,EAAAA,IA7C+ByP,EAC5CzC,SACA3J,QACAqM,YACAxC,UACAyC,gBAEA,MAAM,mBACJC,EAAkB,gBAClBC,IACExC,EAAAA,EAAAA,MAEEyC,GAAoB9O,EAAAA,EAAAA,IAAY,KACpC2O,OACII,EAAAA,EAAAA,IAASL,GACXE,EAAmB,CAAEvM,UAErBwM,EAAgB,CACdxM,QACAwK,OAAQ6B,IAGZxC,KACC,CAACyC,EAAWD,EAAWxC,EAAS0C,EAAoBvM,EAAOwM,IAExDzB,GAAOC,EAAAA,EAAAA,KAEb,OACEhN,EAAAA,GAAAA,GAACoN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASA,EACTwB,QAASoB,EACT3O,UAAU,+BACVqN,MAAOJ,EAAK,cAAchN,UAE1BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,sBAAqBC,SAAA,EAClCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACC,MAAM,SAAS/N,UAAU,wBAAwBgO,QAAM,EAACC,QAASU,EAAkB1O,SACxFgN,EAAK,0BAER/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC9N,UAAU,wBAAwBgO,QAAM,EAACC,QAASlC,EAAQ9L,SAAEgN,EAAK,mB,wCCQjF,MAmUA,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GACCuN,OAAMC,qBAEN,MAAMC,GAAWC,EAAAA,EAAAA,KAAe1N,IAC1B,OAAEC,GAAWwN,EAASE,YAEtBpO,EAAyB,YAAfgO,GAAM1N,KAAqB0N,EAAKhO,aAAUiC,EACpDhC,EAA6B,WAAf+N,GAAM1N,KAAoB0N,EAAK/N,iBAAcgC,EAC3DoM,EAA6B,WAAfL,GAAM1N,MAAqB0N,EAAK9N,cAAce,OAAO+M,EAAK5N,YAExEkO,GAAOC,EAAAA,EAAAA,KAAkB9N,GACzB+N,GAAqBC,EAAAA,EAAAA,KAAyBhO,IAC9C,SAAEiO,IAAaD,EAAAA,EAAAA,KAAyBhO,IAAW,CAAC,EACpDkO,GAAcC,EAAAA,EAAAA,KAAyBnO,EAAQT,GAC/C6O,GAAkBC,EAAAA,EAAAA,KAAsBrO,GACxCsO,EAAkB/O,IAAWgP,EAAAA,EAAAA,KAAsBvO,EAAQT,GAAS4L,SAClEqD,UAAWC,GAAsBR,GACpC1O,IAAWmP,EAAAA,EAAAA,KAAgC1O,EAAQT,EAAS0O,IAAc,CAAC,EAC1EU,EAAkBf,GAAgBA,EAAYpP,KAAOgB,GAAaoP,cAClEC,EAAkBrB,GAAkB9D,QAAQkE,GAC5CY,EAAYC,GAAoBI,EAChCC,EAAYtB,GAAkB9D,QAAQkE,KAAiBe,EACvDI,EAAkBhB,GAAoBlO,KAG5C,MAAO,CACLuO,kBACAF,cACAL,OACAS,kBACAE,YACAM,YACAC,kBACA9O,SACA+O,cAXoBjP,EAAoBC,EAAQC,EAAQsN,KAxB1CD,CAnUkC2B,EACpD1B,OACAlG,YACApB,UACA4H,OACAS,kBACAJ,cACAgB,kBACAV,YACAM,YACAC,kBACAX,kBACAnO,SACA+O,gBACAG,eAAgBC,EAChBC,qBACAC,iBACAC,gBAEA,MAAOC,EAAmBC,EAAiBC,IAAoB9R,EAAAA,EAAAA,IAAQ,IAChE+O,EAAeC,GAAiBC,MACjC,SAAE9O,IAAaC,EAAAA,EAAAA,OAEf,cACJ2R,EAAa,oBACbC,EAAmB,mBACnBC,EAAkB,gBAClBC,EAAe,gBACfC,EAAe,uBACfC,IACErF,EAAAA,EAAAA,MAEEsF,EAA2B,YAAf1C,GAAM1N,MAElB,MAAEC,GAAUkP,GAAiB,CAAC,EAC9BkB,EAAWpQ,IAASqQ,EAAAA,EAAAA,IAAiBrQ,GACrCsQ,EAAgBtQ,IAASuQ,EAAAA,EAAAA,IAAiBjC,EAAiBtO,IAEzDyH,aAAc+I,IAAqB9I,EAAAA,EAAAA,GACzC1H,IAAS+G,EAAAA,EAAAA,IAAa/G,EAAO,aAC5BsQ,EACDtQ,IAAS2H,EAAAA,EAAAA,IAAe3H,EAAO,aAG3ByQ,GAAsBrF,EAAAA,EAAAA,GAAgB,KAC1C,GAAKpL,EAEL,GAAIsQ,EACFR,EAAoB,CAAE9P,cACjB,CACL,MAAMP,EAAyB,YAAfgO,GAAM1N,KAAqB0N,EAAKhO,aAAUiC,EAC1DmO,EAAc,CAAE7P,QAAO0Q,cAAejR,GACxC,IAGIkR,GAAgBvF,EAAAA,EAAAA,GAAgB,KACpC,MAAMwF,EAAa/D,IAEnBC,GADe8D,EAAa,EAAIA,EAAa,GACtB,KAGnBC,GAAezF,EAAAA,EAAAA,GAAgB,KACnC,MAAMwF,EAAa/D,IAEnBC,GADe8D,EAAa,EAAIA,EAAa,GACtB,KAGnBE,GAAe1F,EAAAA,EAAAA,GAAgB,KACnC,GAAmB,WAAfqC,GAAM1N,KAAmB,OAC7B,MAAM,YAAEL,EAAW,cAAEC,EAAa,WAAEE,GAAe4N,EAC7CK,EAAcnO,GAAee,OAAOb,IACtC0N,EAAAA,EAAAA,IAAS7N,EAAYhB,IACvBqR,EAAmB,CAAElP,MAAOiN,IAE5BkC,EAAgB,CAAE3E,OAAQ3L,EAAYhB,GAAImC,MAAOiN,IAGnDmC,EAAgB,CACd9P,OAAQA,EACRkL,OAAQ3L,EAAYhB,GACpBmB,WAAY,EACZkR,cAAc,GACb,CACDC,uBAAuB,MAIrBpF,GAAOC,EAAAA,EAAAA,KAEPoF,GAA8DrK,EAAAA,EAAAA,IAAQ,IACnE,EAAGsK,YAAW1G,aACnB3L,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACL2N,MAAM,cACN/N,UAAW6L,EAAS,cAAW9I,EAC/BkL,QAASsE,EACTE,UAAU,eAAcxS,UAExBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,WAGd,IAEH,SAASkF,IACP,MAAuB,WAAf7D,GAAM1N,MACZlB,EAAAA,GAAAA,GAACoO,GAAuB,CACtBzC,OAAQkF,EACRhF,QAASkF,EACTzC,UAAWqC,EACXtC,UAAWO,EAAK/N,YAAYhB,GAC5BmC,MAAO4M,EAAK9N,cAAce,OAAO+M,EAAK5N,mBAEtC6B,CACN,CAmCA,MAAM6P,GAAyBnG,EAAAA,EAAAA,GAAgB,KAC1B,YAAfqC,GAAM1N,MAAsBgO,EAC9BmC,EAAuB,CACrB7E,OAAQ0C,GAAMrP,GACd8S,WAAY,CAAC/D,EAAKhO,QAAQf,IAC1B+S,WAAgC,cAApBxC,EACZ9B,UAAWqC,IAGbG,MAIJ,GAAI1R,EAAU,CACZ,MAAMyT,EAA6B,GAkDnC,GAjDIvB,GAAa1C,EAAKhO,QAAQkS,sBAAwBlE,EAAKhO,QAAQmS,QAAQjR,SAAW6N,GACpFkD,EAAUG,KAAK,CACbC,KAAM,UACNlF,QAAS6C,EACT7Q,SAAUgN,EAAK,aAGdwC,IACCjI,EACFuL,EAAUG,KAAK,CACbC,KAAMxB,EAAgB,QAAU,WAChC1D,QAAS6D,EACT7R,SAAU0R,EAAgB,GAAGyB,KAAKZ,MAAyB,IAAnBX,qBAA4C,aAGtFkB,EAAUG,KAAK,CACbC,KAAM,WACNE,KAAMzK,EACN0K,SAAU7B,EACVxR,SAAUgN,EAAK,wBAKjBwD,GACFsC,EAAUG,KAAK,CACbC,KAAM,OACNlF,QAAS0C,EACT1Q,SAAUgN,EAAK,uBAIfoD,GACF0C,EAAUG,KAAK,CACbC,KAAM,aACNlF,QAASkE,EACTlS,SAAUgN,EAAK,+BAIf8C,GACFgD,EAAUG,KAAK,CACbC,KAAM,SACNlF,QAAS2E,EACT3S,SAAUgN,EAAK,UACfsG,aAAa,IAIQ,IAArBR,EAAUlR,OACZ,OAGF,OACE/B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,4BAA2BC,SAAA,EACxCC,EAAAA,GAAAA,GAACsT,GAAAA,EAAY,CACXC,QAASnB,EACToB,UAAU,QAAOzT,SAEhB8S,EAAUY,IAAI,EACbR,OAAMlF,UAASoF,OAAMC,WAAUrT,WAAUsT,kBAEzCrT,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAEPT,KAAMA,EACNE,KAAMA,EACNC,SAAUA,EACVrF,QAASA,EACTsF,YAAaA,EAAYtT,SAExBA,GAPIkT,MAWVxB,IAAiBzR,EAAAA,GAAAA,GAAC2T,GAAAA,EAAe,CAACC,SAAUjC,EAAkBzR,KAAK,IAAI2T,SAAO,IAC9EhE,GAAa4C,MAGpB,CAEA,OACE7S,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,CAChCuR,GAAa1C,EAAKhO,QAAQkS,sBAAwBnD,IACjD3P,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACL2N,MAAM,oBACN0E,UAAWxF,EAAK,WAChBgB,QAAS6C,EAAU7Q,UAEnBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,cA1InB,WACE,IAAIgC,GAA8B,eAAfX,GAAM1N,KAIzB,MAAsB,qBAAf0N,GAAM1N,OAAgCoG,GAC3CtH,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACL2N,MAAM,oBACN0E,UAAWxF,EAAK,qBAChBgB,QAAS6D,EAAoB7R,SAE5B0R,GACCzR,EAAAA,GAAAA,GAAC2T,GAAAA,EAAe,CAACC,SAAUjC,EAAkBzR,KAAK,IAAI6N,QAAS6D,KAE/D5R,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,gBAIfvN,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLuF,KAAMzK,EACN0K,SAAU7B,EACVe,OAAK,EACLpS,KAAK,UACL2N,MAAM,oBACN0E,UAAWxF,EAAK,qBAAqBhN,UAErCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,eAGjB,CA8GKuG,IACD9T,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACL2N,MAAM,oBACN0E,UAAWxF,EAAK,gBAChBgB,QAAS+D,EAAc/R,UAEvBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,gBAEbvN,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACL2N,MAAM,oBACN0E,UAAWxF,EAAK,eAChBgB,QAASiE,EAAajS,UAEtBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,cAEZgD,IACCvQ,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACL2N,MAAM,oBACN0E,UAAWxF,EAAKzF,EAAU,8BAAgC,+BAC1DyG,QAAS0C,EAAS1Q,UAElBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,WAGd4C,IACCnQ,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACL2N,MAAM,oBACN0E,UAAWxF,EAAK,6BAChBgB,QAASkE,EAAalS,UAEtBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,iBAGdsC,IACC7P,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACL2N,MAAM,oBACN0E,UAAWxF,EAAK,UAChBgB,QAAS2E,EAAuB3S,UAEhCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,cAGfvN,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACL2N,MAAM,oBACN0E,UAAWxF,EAAK,SAChBgB,QAAS2C,EAAmB3Q,UAE5BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,YAEZsC,GAAa4C,U,gHC3Xb,SAASsB,GAAgBC,GAC9B,MAAMC,GAAM5K,EAAAA,EAAAA,IAAU2K,KAQtB,OANAE,EAAAA,GAAAA,GAAc,IACLF,EAASG,UAAU,KACxBF,EAAIzK,QAAUwK,OAIXC,CACT,C,wCCbA,MAAOG,GAAoBC,KAAsBpO,EAAAA,EAAAA,KAAa,IACvDqO,GAAaC,KAAetO,EAAAA,EAAAA,KAAa,GAEjC,SAASuO,KAOtB,MAAO,EANYC,EAAAA,GAAAA,GACjB,IAAML,OAAyBE,KAE/B,CAACF,GAAoBE,KAGHD,GAAoBE,GAC1C,C,gBCXO,MAAOG,GAAgBC,KAAkB1O,EAAAA,EAAAA,IAAa,GAE9C,SAAS2O,KAKtB,OAJAzG,EAAAA,EAAAA,IAAkB,KAChBwG,GAAe,KAGV,CAACD,GAAgBC,GAC1B,C,qCCQA,MAmFA,GAvEwCE,EACtCC,OAAO,GAAIC,aAAYC,aAAYjH,UAASkH,uBAAsB1F,cAAa2F,2BAE/E,MAAOC,EAAaC,IAAkBjJ,EAAAA,EAAAA,KAAS,IACzC,SAAE/M,IAAaC,EAAAA,EAAAA,OACdgW,GAAgBb,KACjBc,GAAWC,EAAAA,GAAAA,GAAgB,MAAOC,EAAAA,KAAgBH,IAAyB,CAACA,KAElF9K,EAAAA,EAAAA,IAAU,KACR,MAAMkL,EAAgB1T,SAASsC,cAAc,kCAEvCqR,EAAmBA,KACvB,MAAM5L,EAAS2L,EAAgBA,EAAcE,aAAe,EAE5DP,EAAetL,EAAe,EAAN8L,EAAAA,IAI1BF,IAEA,MAAMG,GAAeC,EAAAA,GAAAA,IAASJ,EAhCP,KAgC6C,GAIpE,OAFA9K,OAAOmL,iBAAiB,SAAUF,GAAc,GAEzC,KACLjL,OAAOoL,oBAAoB,SAAUH,GAAc,KAEpD,IAQH,MAAMI,GAAgB1J,EAAAA,EAAAA,GAAgB,KACpC0I,MAGIiB,GAAaC,EAAAA,GAAAA,GACjB,oBACAnB,GAAc,eACdM,GAAY,YACZ/F,GAAe,eACf2F,GAAwB,UAG1B,OACEtV,EAAAA,GAAAA,IAAA,OAAKE,UAAWoW,EAAYnI,QAnB9B,SAAmBlB,GACbiI,GACFjI,EAAEuJ,iBAEN,EAeiDrW,SAAA,CAC5CgL,QAAQ+J,KACP9U,EAAAA,GAAAA,GAAA,OAAKF,UAAU,8BAA8BiO,QAAU3O,OAAqByD,EAAVkL,EAAoBhO,UACpFC,EAAAA,GAAAA,GAAA,KAAGF,UAAW,6CAA4CqV,EAAc,YAAc,IAAMkB,IAAI,OAAMtW,SACnG+U,MAIN/J,QAAQgK,KACP/U,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,GAAe,8BAA+B,uBACzDjW,KAAK,UACL2N,MAAM,UACNyI,eAAa,EACbvI,QAASkI,EAAclW,SAEtBgV,Q,gEC5FJ,MAAOwB,GAAmBC,KAAqBvQ,EAAAA,EAAAA,KAAa,GAEpD,SAASwQ,KAKtB,OAJAtI,EAAAA,EAAAA,IAAkB,KAChBqI,IAAkB,KAGb,CAACD,GAAmBC,GAC7B,C,2ECLA,MAAME,GAAYC,EAAAA,IAAcC,EAAAA,GAC1BC,GAAsBF,EAAAA,IAAcC,EAAAA,GAAU,GAAM,IACpDE,GAAaJ,GAAY,GAAK,GAC9BK,GAAmB,IAEnBC,IAAcC,EAAAA,GAAAA,MAEpB,IAAIC,GAEG,MAAMC,GACXC,OAAS,IAAIrQ,IAEbsQ,YAAc,EAIdC,WAAAA,CAAYC,EAAa7N,GACvB8N,KAAK9N,OAASA,EACdsN,GAAYS,QAAQ,EAAGC,aAAalT,KAC7BkT,EAAUC,QAAQ,CACrBpK,KAAM,qBACNqK,KAAM,CACJL,EACAT,GACAtS,EACAqT,GAAAA,GACAL,KAAKM,QAAQxR,KAAKkR,UAI1B,CAEQM,OAAAA,CAAQC,EAAcC,GAC5BR,KAAKJ,OAAOzM,IAAIoN,EAAMC,GAClBD,IAASP,KAAKH,aAChBG,KAAKS,OAAOF,EAEhB,CAEQG,UAAAA,GACNV,KAAKJ,OAAOK,QAASO,IACnBA,EAAMG,UAERX,KAAKJ,OAAO1M,OACd,CAEAuN,MAAAA,CAAOF,GACLP,KAAKH,YAAcU,EACnB,MAAMC,EAAQR,KAAKJ,OAAOlN,IAAI6N,GAC9B,QAAKC,KACLI,EAAAA,EAAAA,IAAgB,KACdZ,KAAK9N,OAAOD,MAAQuO,EAAMvO,MAC1B+N,KAAK9N,OAAOI,OAASkO,EAAMlO,OACf0N,KAAK9N,OAAOG,WAAW,MAC/BwO,UAAUL,EAAO,EAAG,EAAGR,KAAK9N,OAAOD,MAAO+N,KAAK9N,OAAOI,WAErD,EACT,CAEAwO,OAAAA,GACEd,KAAKU,aACLlB,GAAYS,QAAQ,EAAGC,gBAChBA,EAAUC,QAAQ,CACrBpK,KAAM,wBACNqK,KAAM,MAGZ,EAkBFZ,GAAYS,QAAQ,EAAGc,aACrBA,EAAOxC,iBAAiB,UAAWyC,UACjC,MAAM,KAAEtX,EAAI,UAAEuX,EAAS,OAAElX,GAAWsL,EAAE6L,KAMtC,GAAa,gBAATxX,EACF,OAGF,MAAMyX,QAAeC,EAAAA,GAAAA,IAAQ,gBAAiB,CAAEC,YAAavQ,EAAAA,GAAewQ,eAAgBvX,IAC5F,IAAKoX,EACH,OAGF,MAAM,YAAEI,GAAgBJ,EAExBJ,EAAOS,YAAY,CACjB9X,KAAM,eACNuX,YACAE,OAAQI,GACP,CAACA,Q,gBClHR,SAAqJ,WCyCrJ,IAAIE,GAEJ,MA+OA,IAAeta,EAAAA,EAAAA,IA/OgBua,EAC7BC,WACAC,iBACAC,UACAC,aACAC,eACAhC,MACAiC,WACAC,YACAC,oBACAC,SACAC,kBAEA,MAAMC,GAAYxQ,EAAAA,EAAAA,OACXyQ,GAAwBlF,MACxBmF,GAAgBtD,KACjB/B,GAAiBsF,EAAAA,GAAAA,IAAmBF,EAnBvB,MAoBZG,EAAiBC,IAAmBC,EAAAA,EAAAA,IAAUzF,MAC9C0F,EAAkBC,IAAoBF,EAAAA,EAAAA,IAAU,IAChDG,EAAgBC,IAAkBJ,EAAAA,EAAAA,IAAU,GAC7CK,GAAcnR,EAAAA,EAAAA,KAAgB,IAC7BoR,EAAkBC,IAAqBvO,EAAAA,EAAAA,KAAS,IAChDwO,EAAWC,IAAgBzO,EAAAA,EAAAA,KAAS,GACrC0O,GAAmBxR,EAAAA,EAAAA,MACnByR,GAAazR,EAAAA,EAAAA,MACb0R,GAAc1R,EAAAA,EAAAA,MACd2R,GAAiB3R,EAAAA,EAAAA,MAEjB4R,GAAclT,EAAAA,EAAAA,IAAQ,IFKvB,SAA8B0B,EAAeK,GAGlD,MAAMoR,GAFNzR,EAAQyJ,KAAKZ,MAAM7I,EAAQoN,MAC3B/M,EAASoJ,KAAKZ,MAAMxI,EAAS+M,KAU7B,OARIpN,EAAQsN,KACVtN,EAAQsN,GACRjN,EAASoJ,KAAKZ,MAAM7I,EAAQyR,IAE1BpR,EAASiN,KACXjN,EAASiN,GACTtN,EAAQyJ,KAAKZ,MAAMxI,EAASoR,IAEvB,CAAEzR,QAAOK,SAClB,CEjBWqR,CAAqB7B,GAAY7P,OAAS,EAAG6P,GAAYxP,QAAU,GACzE,CAACwP,IAEE8B,GAAa7O,EAAAA,EAAAA,GAAiBwL,IAClCA,EAAO7E,KAAKmI,MAAMtD,GAClBwC,EAAexC,GFoDZ,SAA4BA,GAC5Bb,IACEA,GAAae,OAAOF,EAC7B,CEtDIuD,CAAmBvD,KAqKrB,OAlKAxN,EAAAA,EAAAA,IAAU,KACR,IAAImP,GAAsBnC,GAAQ8B,EAClC,OFmCG,SAA6B9B,EAAa7N,GAK/C,OAJIwN,IACFA,GAAaoB,UAEfpB,GAAe,IAAIC,GAAaI,EAAK7N,GAC9B,KACLwN,IAAcoB,UACdpB,QAAerU,EAEnB,CE5CW0Y,CAAoBhE,EAAKsD,EAAiBrR,UAChD,CAAC+N,EAAK8B,EAASK,KAElBnP,EAAAA,EAAAA,IAAU,KACRmQ,GAAkB,IACjB,CAAClB,KAEJjP,EAAAA,EAAAA,IAAU,KAGR,GAFI0O,IAAiBA,KACrBA,QAAkBpW,GACb2X,EAAYhR,UAAYmR,EAAW,CACtC,MAAM5C,EAAOrD,IACP8G,EAAYrC,EAAWpB,EAC7BkB,IAAkBwC,EAAAA,EAAAA,IAAc,CAC9BC,KAAM3D,EACN4D,GAAIxC,EACJA,SAAuB,IAAZqC,EAAoBjC,EAC/BqC,SAAU1B,GAEd,GACC,CAACxF,EAAgBiG,EAAWT,EAAiBX,EAAcJ,KAE9D5O,EAAAA,EAAAA,IAAU,KACHkP,IAAaM,MACZd,IAAiBA,KACrBA,QAAkBpW,IAEnB,CAAC4W,EAAWQ,EAAiBF,KAEhCxP,EAAAA,EAAAA,IAAU,KACR,GAAIkP,EAAW,CACTR,IAAiBA,KACrBA,QAAkBpW,EAClB,MAAMkV,EAAOrD,IACP8G,EAAYrC,EAAWpB,EAC7BkB,IAAkBwC,EAAAA,EAAAA,IAAc,CAC9BC,KAAM3D,EACN4D,GAAIxC,EACJA,SAAuB,IAAZqC,EAAoBjC,EAC/BqC,SAAU1B,GAEd,GAEC,CAACT,EAAWF,EAAcJ,KAE7B0C,EAAAA,EAAAA,IAAgB,KACd,IAAKd,EAAYvR,QAAS,OAC1B,MAAMoK,GAAWtB,EAAAA,GAAAA,IAAO2H,IAAoBd,EAAY,IAAK,GAC7D4B,EAAYvR,QAAQ1D,MAAM2D,MAAQ,GAAGmK,MACpC,CAACqG,EAAiBd,KAErB0C,EAAAA,EAAAA,IAAgB,KACTf,EAAWtR,UAChBsR,EAAWtR,QAAQ1D,MAAMgW,KAAO,GAAG1B,UAClC,CAACA,KAEJyB,EAAAA,EAAAA,IAAgB,KACTb,EAAexR,UACpBwR,EAAexR,QAAQuS,WAAYC,EAAAA,GAAAA,IAAoB1B,OACtD,CAACA,KAEJ/P,EAAAA,EAAAA,IAAU,KACR,IAAKsP,EAAUrQ,UAAYgQ,EAAU,OACrC,MAAMyC,EAASpC,EAAUrQ,QACzB,IAAI0S,EAAaD,EAAOE,wBAEpBpE,EAAO,EACPqE,EAAS,EAEb,MAAMC,EAAmBxP,IACvB,MAAMyP,GAAQC,EAAAA,GAAAA,GAAmB1P,GAAG2P,EAC9BC,GAAIC,EAAAA,GAAAA,IAAMvD,IAAamD,EAAQJ,EAAWJ,MAAQI,EAAWzS,OAAQ,EAAG0P,GAC9E,GAAIO,EAAmB,MAAO,CAAC+C,EAAG,GAC7BP,EAAWzS,QAAOyS,EAAaD,EAAOE,yBAC3C,MAAMQ,EAAU7B,EAAWtR,QAI3B,MAAO,CAACiT,GAHEC,EAAAA,GAAAA,IACRJ,EAAQJ,EAAWJ,KAAOa,EAAQC,YAAc,GAAI,EAAGV,EAAWzS,MAAQkT,EAAQC,YAAc,KAK9FC,EAAgBA,KAChB5D,IAAiBA,KACrBA,QAAkBpW,GAmBdia,EAAiBA,KACrBD,IACArC,EAAYhR,SAAU,EACtBkR,GAAkB,GAClBE,GAAa,GACbV,EAAgBnC,GAChB4B,EAAO5B,GAEPlN,WAAW,KACT2P,EAAYhR,SAAU,GA1JT,MA8JXuT,GAAUC,EAAAA,GAAAA,IAAcf,EAAQ,CACpCgB,UArBsBC,KACtBL,IACAnC,GAAkB,GAClBE,GAAa,GACbhB,KAkBAuD,UAAWL,EACX/O,QAAS+O,EACTM,OAjCkBvQ,IAClBgQ,IACAnC,GAAkB,IAChB3C,EAAMqE,GAAUC,EAAgBxP,GAC7BuO,EAAWrD,GAChBsC,EAAiB+B,GACjBlC,EAAgBnC,MA8BlB,GAAIvC,EAAAA,IAAgBkE,EAClB,OAAOqD,EAGT,MAAMM,EAAuBxQ,IAC3B6N,GAAkB,IAChB3C,EAAMqE,GAAUC,EAAgBxP,GAClCwN,EAAiB+B,GACZhB,EAAWrD,IAGZuF,EAAuBA,KAC3B5C,GAAkB,IAOpB,OAJAuB,EAAOlG,iBAAiB,YAAasH,GACrCpB,EAAOlG,iBAAiB,aAAcsH,GACtCpB,EAAOlG,iBAAiB,aAAcuH,GAE/B,KACLP,IACAd,EAAOjG,oBAAoB,YAAaqH,GACxCpB,EAAOjG,oBAAoB,aAAcqH,GACzCpB,EAAOjG,oBAAoB,aAAcsH,KAE1C,CACDnE,EACAiC,EACA5B,EACAG,EACAC,EACAS,EACAH,EACAU,EACAlB,EACAH,KAIA3Z,EAAAA,GAAAA,IAAA,OAAKE,UDpPmB,WCoPUmU,IAAK4F,EAAU9Z,SAAA,EAC7C2Z,IACA9Z,EAAAA,GAAAA,IAAC2d,GAAAA,EAAc,CACb5R,QAAM,EACN2J,UAAWmF,EACX3a,UDzPuC,WC0PvCgG,MAAO,UAAUmV,EAAYxR,oBAAoBwR,EAAYnR,WAC7DmK,IAAK6G,EAAW/a,SAAA,EAEhBC,EAAAA,GAAAA,GAAA,UAAQF,UD7P0D,WC6PzBmU,IAAK4G,KAC9C7a,EAAAA,GAAAA,GAAA,OAAKF,UD9PsF,WC8PxDC,UACjCC,EAAAA,GAAAA,GAAA,QAAMF,UD/PgH,WC+P7EmU,IAAK+G,UAIpDhb,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAazd,SAC1BqZ,EAAe3F,IAAI,EAClBgK,QACAC,UAEA1d,EAAAA,GAAAA,GAAA,OAEEF,UD1Q+J,WC4Q/JgG,MAAO,SAAiB,IAAR2X,cAAwB,IAAY,IAANC,MAHzC,GAAGD,KAASC,SAOvB1d,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAazd,UAC3BC,EAAAA,GAAAA,GAAA,OACEiU,IAAK8G,EACLjb,WAAWqW,EAAAA,GAAAA,GDnR0K,WCmR5IwE,GDnRiK,qBE8D9M9W,GAAagJ,IACjBA,EAAEuJ,mBAGEuH,GAAiB,CACrB,GACA,EACA,IACA,GA0MF,SAASC,GAAWvG,EAAqB8B,GACvC,OACEnZ,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SACzB,IAAGic,EAAAA,GAAAA,IAAoB3E,SAAkB2E,EAAAA,GAAAA,IAAoB7C,MAGpE,CAEA,UAAexa,EAAAA,EAAAA,IA7M2Bkf,EACxCtG,MACA6B,iBACA0E,mBACA3E,WACAE,UACA0E,WACA7I,uBACAuE,YACAuE,wBACAC,eACAC,aACAxE,oBACAyE,SACAC,UACA7E,eACAD,aACA+E,qBACAC,gBACAC,iBACAC,uBACAC,8BACAC,2BACAC,cACAhF,SACAiF,sBAEA,MAAOC,EAAoBC,EAAkBC,IAAqB9f,EAAAA,EAAAA,MAC3DyV,GAAkBE,KACnByC,GAAc9B,EAAAA,GAAAA,GAAgB,IAAMrC,KAAK8L,MAAMtK,KAAmB,CAACA,KAClEuK,EAAcrE,IAAgBT,EAAAA,EAAAA,KAAU,GAEzC+E,GAAkB7V,EAAAA,EAAAA,OAElB,SAAEjK,IAAaC,EAAAA,EAAAA,OACdgW,EAAc8J,GAAiB3K,KAChC4K,GAAY7J,EAAAA,GAAAA,GAAgBF,IAElC9K,EAAAA,EAAAA,IAAU,KACR,GAAKiL,EAAAA,IAAiBN,EAAtB,CACA,GAAKkK,GAAc3F,IAAaoF,IAAsBI,IAOtD,OAHAC,EAAgB1V,QAAUoB,OAAOC,WAAW,KAC1CsU,GAAc,IA/Ca,KAiDtB,KACDD,EAAgB1V,SAASoB,OAAON,aAAa4U,EAAgB1V,UAP7D0V,EAAgB1V,SAASoB,OAAON,aAAa4U,EAAgB1V,QAFP,GAW3D,CAACiQ,EAAW2F,EAAWD,EAAeN,EAAoBI,EAAc/J,KAE3E2G,EAAAA,EAAAA,IAAgB,KACVuD,EACFrd,SAASsd,KAAK9b,UAAUC,IAAI,0BAE5BzB,SAASsd,KAAK9b,UAAU+b,OAAO,0BAE1B,KACLvd,SAASsd,KAAK9b,UAAU+b,OAAO,4BAEhC,CAACF,KAEJ7U,EAAAA,EAAAA,IAAU,KACH6U,GACHL,KAED,CAACA,EAAmBK,IAEvB,MAAMrS,GAAOC,EAAAA,EAAAA,KAEPuS,GAAahT,EAAAA,EAAAA,GAAiBiT,IAClC5E,GAAa,GACbjB,EAAO6F,GACPZ,GAAgB,KAGZa,GAAkBlT,EAAAA,EAAAA,GAAgB,KACtCqO,GAAa,GACbgE,GAAgB,KAGZc,GAAuB3X,EAAAA,EAAAA,IAAQ,IACpB,IAAXoW,GAAgBC,EAAgB,QAChCD,EAAS,GAAY,WACrBA,EAAS,GAAY,WAClB,WACN,CAACA,EAAQC,IAEZ,OACExe,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GAAe,sBAAuBjB,GAAwB,SAAUkK,GAAa,UAChGrR,QAASlK,GAAU9D,SAAA,EAEnBC,EAAAA,GAAAA,GAACkZ,GAAQ,CACP3B,IAAKA,EACL4B,SAAUA,EACVE,QAASA,EACTI,UAAWA,EACXC,kBAAmBA,EACnBJ,WAAYA,EACZF,eAAgBA,EAChBG,aAAcA,EACdI,OAAQ4F,EACR3F,YAAa6F,EACbjG,SAAU4F,KAEZxf,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL2E,UAAWxF,EAAK,iBAChB7M,KAAK,OACLyf,QAASvgB,EACTyO,MAAM,oBACN/N,UAAU,OACVwS,OAAK,EACLvE,QAAS4Q,EAAY5e,UAErBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAMkM,EAAY,QAAU,YAEpCzZ,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL2E,UAAU,SACVrS,KAAK,OACL2N,MAAM,oBACN/N,UAAU,SACVwS,OAAK,EACLvE,QAASuQ,EAAcve,UAEvBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAMmS,OAEZ9I,EAAAA,KACA5W,EAAAA,GAAAA,GAAC4f,GAAAA,EAAW,CAACC,MAAI,EAAC/f,UAAU,gBAAgB6M,MAAOyR,EAAU,EAAa,IAATD,EAAc1Q,SAAU8Q,IAE1FX,GAAWvG,EAAa8B,IACvB+E,IACAle,EAAAA,GAAAA,GAAA,OAAKF,UAAU,mBAAkBC,SAC9B,IAAG+f,EAAAA,GAAAA,IAAe/S,EAAMgR,EAAWD,SAAuBgC,EAAAA,GAAAA,IAAe/S,EAAMgR,QAGpF/d,EAAAA,GAAAA,GAAA,OAAKF,UAAU,YACfE,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL2E,UAAU,gBACVrS,KAAK,OACL2N,MAAM,oBACN/N,UAAU,gBACVwS,OAAK,EACLvE,QAAS+Q,EAAiB/e,SAEzB,GAAGwZ,OAELkF,IACCze,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL2E,UAAU,qBACVrS,KAAK,OACL2N,MAAM,oBACN/N,UAAU,aACVwS,OAAK,EACLvE,QAAS2Q,EAAyB3e,UAElCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,UAGdyQ,IACChe,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL2E,UAAU,aACVrS,KAAK,OACL2N,MAAM,oBACN/N,UAAU,aACVwS,OAAK,EACLvE,QAASsQ,EAAmBte,UAE5BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAM0Q,EAAe,cAAgB,qBAIjDje,EAAAA,GAAAA,GAAC+f,GAAAA,EAAI,CACHpU,OAAQkT,EACR/e,WAAWqW,EAAAA,GAAAA,GACT,sBACC6H,GAAyB,iBACzBS,GAA+B,UAElCjL,UAAU,QACVwM,UAAU,SACVC,WAAS,EACTpU,QAASkT,EAAkBhf,SAE1B4d,GAAelK,IAAKyM,IAEnBlgB,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACyM,SAAU5G,IAAiB2G,EAAMnS,QAASA,IAAMyQ,EAAqB0B,GAAMngB,SAClF,GAAGmgB,eCqJhB,IAAevhB,EAAAA,EAAAA,IAhWmByhB,EAChC7I,MACA/V,QACA6e,aACA/G,aACA1Q,eACAmV,WACAuC,oBACAC,SACApC,SACAC,UACA7E,eACArE,uBACAsL,qBACAjR,cACAkR,kBACA/G,oBACAgH,qBACAC,YACA1L,uBACApJ,cAEA,MAAM,qBACJ+U,EAAoB,oBACpBC,EAAmB,2BACnBC,EAA0B,qBAC1BC,IACE/U,EAAAA,EAAAA,MACEgV,GAAW3X,EAAAA,EAAAA,OACVoQ,EAAWwH,IAAgB9U,EAAAA,EAAAA,KAAUqJ,EAAAA,KAAiBoB,EAAAA,KACtDqH,EAAciD,EAAeC,IAAkBC,EAAAA,GAAAA,IAAcJ,EAAUC,IACxE,SAAE7hB,IAAaC,EAAAA,EAAAA,MACf8Z,EAAW6H,EAASxX,SAAS2P,UAAY,EACzCkI,EAAW7f,GAAS2X,GArCF,GAuClBmI,GAAwB/U,EAAAA,EAAAA,GAAgB,KAExCgV,EAAAA,IACJR,EAAqB,CAAEzL,UAAU,MAG7BkM,GAAwBjV,EAAAA,EAAAA,GAAgB,KACxCgV,EAAAA,IACJR,EAAqB,CAAEzL,UAAU,OAIjCmJ,EACAgD,EACAC,GjB7FW,SACbC,EACAtU,EACAuU,GAEA,MAAOC,EAAaC,IAAkB3V,EAAAA,EAAAA,KAAS,IACxCqN,EAAUuI,IAAe5V,EAAAA,EAAAA,KAAS,IAEzC0P,EAAAA,EAAAA,IAAgB,KAEd,GAAKjF,EAAAA,IAAUoL,EAAAA,KAAYL,EAAMnY,QAAS,OAC1C,MAAMvH,EAAQ0f,EAAMnY,QACdyY,EAAU9b,EAAuBlE,GAGvC,KAFmBF,SAASmgB,yBAA4BP,EAAMnY,SAAS2Y,+BACtDtf,IAAZof,EACW,OAEhBhgB,EAAMmgB,sBAAuB,EAC7BN,GAAe,GACf,MAAMO,EAAkBA,KACtBhV,IACA0U,GAAY,GACZ7b,GAAsB,IAElBoc,EAAkBA,KACtBpc,GAAsB,GACtB6b,GAAY,GACZH,KAIF,OAFA3f,EAAM8T,iBAAiB,wBAAyBsM,GAChDpgB,EAAM8T,iBAAiB,wBAAyBuM,GACzC,KACLrgB,EAAM+T,oBAAoB,wBAAyBqM,GACnDpgB,EAAM+T,oBAAoB,wBAAyBsM,KAEpD,CAACX,EAAOtU,EAASuU,IAEpB,MAAMnb,GAAuB9G,EAAAA,EAAAA,IAAY,KACvC,IAAKgiB,EAAMnY,QAAS,OACpB,MACMyY,EAAU9b,EADFwb,EAAMnY,SAEhByY,EACFA,EAAQ,UAER1b,KAED,CAACob,IAEEF,GAAwB9hB,EAAAA,EAAAA,IAAY,KACxC,IAAKgiB,EAAMnY,QAAS,OACpB/C,IACA,MAAMxE,EAAQ0f,EAAMnY,QACdiQ,GAAY8I,EAAAA,EAAAA,GAAkBtgB,GAC9BggB,EAAU9b,EAAuBlE,GACnCggB,EACFA,EAAQ,sBA0Bd,SAAiChgB,GAC/B,GAAIA,EAAMugB,wBACR,IACEvgB,EAAMugB,yBACR,CAAE,MAAO9b,GACHC,EAAAA,KAEFC,QAAQC,IAAI,8BAA+BH,EAE/C,CAEJ,CAnCM8b,CAAwBvgB,GAGtBwX,IACFgJ,EAAAA,EAAAA,GAASxgB,IAEV,CAAC0f,EAAOlb,IAEX,OAAKob,EAIE,CAACA,EAAaJ,EAAuBjI,GAHnC,EAAC,EAIZ,CiBwBMkJ,CAAoB1B,EAAUM,EAAuBE,IAElD,CAAEmB,EAAgBC,GAAgBpO,MAClCyK,EAAcrE,KAAgBT,EAAAA,EAAAA,KAAU,GACzC0I,IAAoBxZ,EAAAA,EAAAA,IAAO,CAAEmT,EAAG,EAAGsG,EAAG,KAE5CvY,EAAAA,EAAAA,IAAU,KACR,MAAMwY,EAAuBlW,IAC3BgW,GAAkBrZ,SAAU+S,EAAAA,GAAAA,GAAmB1P,IAMjD,OAHAjC,OAAOmL,iBAAiB,YAAagN,GACrCnY,OAAOmL,iBAAiB,YAAagN,GAE9B,KACLnY,OAAOoL,oBAAoB,YAAa+M,GACxCnY,OAAOoL,oBAAoB,YAAa+M,KAEzC,IAEH,MAAMC,IAAsCzW,EAAAA,EAAAA,GAAgB,CAAC0W,EAAiBC,KAC5E,MAAMC,EAASnC,EAASxX,SAAS2S,wBAC5BgH,IACDF,GAAWE,EAAOrH,MAAQmH,GAAWE,EAAOC,OAC3CF,GAAWC,EAAOE,KAAOH,GAAWC,EAAOG,UACzCrE,KACH0D,GAAe,MAKfY,IAAkBhX,EAAAA,EAAAA,GAAgB,KACtCoW,GAAe,KAGXa,IAAmBjX,EAAAA,EAAAA,GAAiBM,IACxCmW,GAAoCnW,EAAEoW,QAASpW,EAAEqW,WAG7CO,IAAsBlX,EAAAA,EAAAA,GAAiBoO,IAE3C,GADAC,GAAaD,IACRA,EAAW,CACd,MAAM,EAAE6B,EAAC,EAAEsG,GAAMD,GAAkBrZ,QACnCwZ,GAAoCxG,EAAGsG,EACzC,KAGI,QACJzJ,GAAO,WAAE6E,GAAU,eAAE9E,GAAc,kBAAEsK,GAAiB,iBAAE5F,KACtD6F,EAAAA,GAAAA,KACEC,IAAgBC,EAAAA,GAAAA,GAAoB7C,OAAUne,GAAY0U,IAG9DuM,aAAcC,GACdC,qBAAsBC,KACpBC,EAAAA,GAAAA,IACDhG,KAAe0F,QAAe/gB,OAAWA,EAAW,SAGrDihB,aAAcK,GACdH,qBAAsBI,KACpBF,EAAAA,GAAAA,GACFtN,EAAAA,KAAW6C,IAAcsK,KAAwBH,QAAe/gB,OAAWA,EAAW,SAGjF,CAAE8R,IAAkBC,MACpB,CAAE4B,IAAqBC,MAE9BlM,EAAAA,EAAAA,IAAU,KACRqY,EAAamB,KACZ,CAACnB,EAAcmB,MAElBxZ,EAAAA,EAAAA,IAAU,KACJgW,IAAWD,GAAqBsD,GAClC5C,EAASxX,QAAS6a,QACT9M,IAAQ/B,EAAAA,KAIjBiN,EAAAA,EAAAA,GAASzB,EAASxX,UAEnB,CAAC+W,EAAQD,EAAmB/I,EAAKsJ,EAAqB+C,MAEzDrZ,EAAAA,EAAAA,IAAU,KACRyW,EAASxX,QAAS2U,OAASA,GAC1B,CAACA,KAEJ5T,EAAAA,EAAAA,IAAU,KACRyW,EAASxX,QAAS+P,aAAeA,GAChC,CAACA,KAEJhP,EAAAA,EAAAA,IAAU,KACHoW,IACLK,EAASxX,QAAS6N,YAAcsJ,EAChChM,GAAegM,KACd,CAAChM,GAAgBgM,IAEpB,MAAM2D,IAAkB/X,EAAAA,EAAAA,GAAiBM,IACvCA,EAAEuJ,kBACEqD,GACFuH,EAASxX,QAAS6a,QAClBpD,GAAa,MAEbwB,EAAAA,EAAAA,GAASzB,EAASxX,SAClByX,GAAa,MAIXsD,IAAchY,EAAAA,EAAAA,GAAiBM,IAC/B6T,IACFzL,KAAuB,GACvBpJ,EAAQgB,IAEN4T,IAGAD,EACF3U,EAAQgB,GAERyX,GAAgBzX,OAIpB2X,EAAAA,GAAAA,GAAgBxD,EAAU0C,IAE1B,MAAMe,IAAmBlY,EAAAA,EAAAA,GAAiBM,IACxC,MAAM5K,EAAQ4K,EAAE6X,cACZziB,EAAM0iB,YApLU,IAqLlBnO,IAAkB,GAClB7B,GAAe1S,EAAMoV,cAElBgK,GAAYpf,EAAMoV,cAAgBpV,EAAMkX,WAC3CxE,GAAe,GACfsM,GAAa,MAIX2D,IAAcrY,EAAAA,EAAAA,GAAgB,KAC9B8U,IACJ1M,GAAe,GACfsM,GAAa,GACb0B,GAAe,MAGXkC,IAAyBtY,EAAAA,EAAAA,GAAgB,KACzC0R,GAAgBkD,EAClBA,KACUlD,GAAgBiD,GAC1BA,MAIE3B,IAAahT,EAAAA,EAAAA,GAAiBiT,IAClCwB,EAASxX,QAAS6N,YAAcmI,IAG5BsF,IAAqBvY,EAAAA,EAAAA,GAAiBwY,IAC1CnE,EAAqB,CAAEzC,OAAQ4G,EAAY,QAGvCC,IAAoBzY,EAAAA,EAAAA,GAAgB,KAExCyU,EAASxX,QAASyb,OAASjE,EAASxX,QAASyb,MAC7CpE,EAAoB,CAAEzC,SAAUA,MAG5B8G,IAA2B3Y,EAAAA,EAAAA,GAAiB4Y,IAChDrE,EAA2B,CAAEvH,aAAc4L,OAG7C5a,EAAAA,EAAAA,IAAU,KACR,IAAK+V,EAAmB,OACxB,MAAM8E,EAAU/O,IACd,IAAK4H,EAAc,OACnB,MAAMhc,EAAQ+e,EAASxX,QACjB6b,GAAU3I,EAAAA,GAAAA,IAAMza,EAAMoV,YAnOd,EAmO4BhB,EAAmB,EAAGpU,EAAMkX,UAClEmM,OAAOC,SAASF,KAClBpjB,EAAMoV,YAAcgO,IAGlBG,EAAiB3Y,IACrB,IAAI6U,EACJ,OAAQ7U,EAAE4Y,KACR,IAAK,IACL,IAAK,QACH5Y,EAAE6Y,iBACFpB,GAAgBzX,GAChB,MACF,IAAK,OACL,IAAK,YACHA,EAAE6Y,iBACFN,GAAQ,GACR,MACF,IAAK,QACL,IAAK,aACHvY,EAAE6Y,iBACFN,EAAO,KAOb,OAFArjB,SAASgU,iBAAiB,UAAWyP,GAAe,GAE7C,KACLzjB,SAASiU,oBAAoB,UAAWwP,GAAe,KAExD,CAAClB,GAAiBhE,EAAmBrC,EAAcyD,IAEtD,MAAMiE,GAAerM,GAAc,UAAUA,EAAW7P,oBAAoB6P,EAAWxP,WACjF8b,GAAa,yBAAyBvF,KACtCwF,IAAwBrQ,EAAAA,KAAiBN,EAE/C,OACEtV,EAAAA,GAAAA,IAAA,OACEE,UAAU,cACVgmB,YAAaD,GAAuBtC,QAAkB1gB,EACtDkjB,aAAcF,GAAuBrC,QAAmB3gB,EAAU9C,SAAA,EAElEH,EAAAA,GAAAA,IAAA,OACEkG,MAAO6f,GAAa5lB,SAAA,CAEnBwP,IACCvP,EAAAA,GAAAA,GAAA,OACEgmB,cAAeniB,EAAAA,EACfoiB,cAAgBzQ,EAAAA,QAAwC3S,EAAzBgiB,GAC/B9W,QAAU3O,OAA6ByD,EAAlByhB,GACrBxkB,UAAU,eAGdE,EAAAA,GAAAA,GAAA,SACEiU,IAAK+M,EACLkF,SAAU1Q,EAAAA,GACV2Q,aAAa,aACbC,aAAW,EACXC,KAAMhF,EAEN4D,MAAOzjB,GAAS4c,EAChBve,GAAG,qBACHiG,MAAO8f,GACPU,UAAWA,IAAM9P,IAAkB,GACnC+P,OAAQA,IAAMtF,GAAa,GAC3BuF,QAAS5B,GACT7W,QAAU3O,GAAa6e,OAA6Bpb,EAAd0hB,GACtC0B,cAAgBzQ,EAAAA,QAAwC3S,EAAzBgiB,MAE3BnB,GACJ+C,QAAU5Z,IACRoU,GAAa,GACbyC,GAAkB+C,QAAQ5Z,IAE5B6Z,aAAcjC,GACd3gB,IAAKyT,OAGR4M,KACCnkB,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC0E,OAAK,EAACxS,UAAW,eAAeskB,KAAwBrW,QAASuW,GAAgBvkB,UACvFC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,WAGdwW,KACCnkB,EAAAA,GAAAA,IAAA,OAAKE,UAAW,CAAC,oBAAqBmkB,IAAmB0C,KAAK,KAAK5mB,SAAA,EAC/Dme,KAAcle,EAAAA,GAAAA,GAAA,OAAKF,UAAU,YAAWC,SAAC,kBAC3CC,EAAAA,GAAAA,GAAC2T,GAAAA,EAAe,CACdzT,KAAK,KACL0T,SAAUsK,GAAa,EAAItV,EAC3BmF,QAASlC,QAIbrK,IAAUkf,IAAuBkD,KACjC5jB,EAAAA,GAAAA,GAAC6d,GAAmB,CAClBtG,IAAKA,EACLkC,UAAWA,EACXL,eAAgBA,GAChB0E,iBAAkBA,GAClBI,WAAYA,GACZF,sBAAuBjT,QAAQmW,GAC/BzC,4BAA6BA,EAC7BR,aAAcA,EACdvE,kBAAmBA,EACnBqE,SAAUA,EACV5E,SAAUA,EACVE,QAASA,GACTC,WAAYA,EACZpE,qBAAsBA,EACtByE,OAAQ4F,GACRlB,mBAAoBwG,GACpBnG,yBAA0B+C,EAC1B9C,YAAa2F,GACbnG,OAAQA,EACR5E,aAAcA,EACd6E,QAASA,EACTE,cAAe0G,GACfzG,eAAgBuG,GAChBtG,qBAAsB0G,GACtBtG,gBAAiB6E,UClK3B,IAAe9kB,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUuN,WACT,MAAM,OACJuP,EAAM,QACNC,EAAO,aACP7E,EAAY,SACZjE,EAAQ,OACRhU,EAAM,UACNqf,EAAS,SACTrR,IACEP,EAAAA,EAAAA,KAAe1N,GAAQ2N,YACrBpO,EAAwB,YAAdgO,EAAK1N,KAAqB0N,EAAKhO,aAAUiC,EACnD5B,EAAiC,qBAAd2N,EAAK1N,KAA8B0N,EAAKhO,aAAUiC,EACrE+jB,EAAchmB,GAAWK,EACzBoP,EAAgBjP,EAAoBC,EAAQC,EAAQsN,GAEpDiY,EAAejmB,IAAWkmB,EAAAA,GAAAA,IAAmCzlB,EAAQT,GAAS,GAEpF,MAAO,CACLU,SACAslB,cACArX,YAAa3O,IAAW4O,EAAAA,EAAAA,KAAyBnO,EAAQT,GACzDud,SACAC,UACA9I,WACAiE,eACAjK,WACAqR,YACAkG,eACAxW,kBA7Bc1B,CAnLOoY,EACzBnY,OACAyB,gBACAmJ,WACAoN,cACAtlB,SACA0lB,gBACAzX,cACA4O,SACA5E,eACA6E,UACA9I,WACA2R,WACA3X,WACAqR,YACAkG,eACAhb,UACAqb,gBACAjS,2BAEA,MAAM,4BAAEkS,IAAgCnb,EAAAA,EAAAA,MAElCe,GAAOC,EAAAA,EAAAA,KAEP7F,EAAyB,WAAdyH,EAAK1N,KAChBwf,EAAmC,qBAAd9R,EAAK1N,MAC1B,MAAEC,GAAUkP,GAAiB,CAAC,GAE9B,QACJ/I,EAAO,QACPI,EAAO,cACPuB,EAAa,SACbiC,EAAQ,WACRI,EAAU,MACV9J,EAAK,QACL6J,EAAO,cACP9D,EAAa,UACb4D,EAAS,aACTvC,GACE1B,EAAc,CAChB/F,QAAOgG,WAAU7F,SAAQ8F,QAAO4f,GA5CT,OA+ClB,CAAErE,GAAkBnO,MACpBE,GAAkBE,KAEnBjJ,EAASZ,QAAQ5J,IACjB,SAAE/B,IAAaC,EAAAA,EAAAA,MAEf+nB,GAAuB7a,EAAAA,EAAAA,GAAgB,KAC3CoW,GAAe,KAGX0E,GAA0BC,EAAAA,GAAAA,GAAqB,KACnD,IAAK9N,IAAaoN,GAAoC,UAArBzlB,GAAOM,UAAuB,OAC/D,GAAIN,EAAMgY,SAAWoO,EAAAA,IAAuC,OAE5D,MAAM3mB,EAAU,OAAQgmB,EAAcA,OAAc/jB,EAC9CwU,EAAc3C,IACpB,IAAK2C,IAAgBzW,GAAWA,EAAQ4mB,UAAW,OAGnD,MAAMC,EAAetmB,EAAMgY,SAAW9B,EAAcqQ,EAAgCrQ,OAAcxU,EAClGskB,EAA4B,CAAE3a,OAAQ5L,EAAQ4L,OAAQiM,UAAW7X,EAAQf,GAAI8gB,UAAW8G,KACvF,CAAC/S,EAAgB8E,EAAUrY,EAAOylB,GAlER,KAsE7B,IAFAe,EAAAA,GAAAA,GAAgBN,EAAyB,CAAC3S,KAErCvT,EAAO,OAEZ,GAAkB,WAAdyN,EAAK1N,KACP,OAAKqG,GAaDvH,EAAAA,GAAAA,GAAA,OAAoBF,UAAU,qBAAoBC,UAChDC,EAAAA,GAAAA,GAACogB,GAAW,CAEV7I,IAAKrM,EACL1J,OAAK,EACL6e,WAAYpX,EACZqQ,YAAYsO,EAAAA,EAAAA,IAA+Btc,GAAa,GAAO,GAC/D1C,aAAcA,EACdmV,SAAU5S,EACVmV,kBAAmB3U,GAAU6N,EAC7BjK,YAAaA,EACbmK,mBAAoBmO,EAAAA,IAA2Bxc,EAC/CkV,QAAS/G,EACT3N,QAASA,EACTuS,SAAO,EACPoC,oBAAkB,EAClBrC,OAAQ,EACRsC,gBAAiBwG,EACjB1N,aAAc,EACdmH,mBAAoBA,EACpBzL,qBAAsBA,GAlBjB9T,EAAMtB,KAFLsB,EAAMtB,KAXhBG,EAAAA,GAAAA,GAAA,OAAoBF,UAAU,qBAAoBC,SAC/C+nB,GACC5c,GACA0c,EAAAA,EAAAA,IAA+Btc,GAAa,IAC3ClM,IAAamQ,EACdA,IALMpO,EAAMtB,IAsCtB,MAAMkoB,EAAYnB,IAChBA,EAAY7T,QAAQjR,OACqB,wBAApC8kB,EAAY7T,QAAQjR,OAAOZ,KAC1B6L,EAAK,yCAAsClK,GAC7CmlB,EAAAA,EAAAA,GAAkB,CAClBpnB,QAASgmB,EAAaC,eAAcvX,WAAU2Y,eAAe,EAAMC,kBAAkB,KAErFnT,EAAa6R,GAAe,eAAgBA,EAAcA,EAAY7R,gBAAalS,EACnFslB,EAAYpd,QAAQgd,GACpBzO,GAAasO,EAAAA,EAAAA,IAA+Btc,EAAa6c,EAAW7gB,GACpE4N,EAAuB9V,GAkJ/B,SAAkCka,GAChC,QAAKA,GACEA,EAAW7P,MAhRiB,GAiRrC,CArJ2C2e,CAAyB9O,GAElE,OACE1Z,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GAAe,qBAAsBgS,GAAa,cAC7DrC,YAAa5Q,IAAyBM,EAAAA,GAAe4R,OAAuBvkB,EAAU9C,SAAA,CAErF2H,GAAWogB,GACV5c,EACAoO,GACCla,IAAamQ,EACdA,GAEDjI,IAAakS,GAMZxZ,EAAAA,GAAAA,GAACogB,GAAW,CAEV7I,IAAKrM,EACL1J,MAAOA,EACP6e,WAAYpX,EACZqQ,WAAYA,EACZ1Q,aAAcA,EACdmV,SAAU5S,EACVmV,kBAAmB3U,GAAU6N,EAC7B+G,QAAS/G,EACTE,mBAAoBmO,EAAAA,IAA2Bxc,EAC/CQ,QAASA,EACTuS,QAASA,EACT9I,SAAUA,EACVJ,qBAAsBA,EACtB3F,YAAaA,EACb4O,OAAQA,EACRsC,gBAAiBwG,EACjB1N,aAAcA,EACdmH,mBAAoBA,EACpBzL,qBAAsBA,EACtB0L,UAAWA,GApBNxf,EAAMtB,IAPUyb,GACvBrS,EACAqQ,GACCla,IAAamQ,EACdA,IA0BDwY,IACC/nB,EAAAA,GAAAA,GAAC6U,GAAiB,CAChBC,KAAMiT,EACNhT,WAAYA,EACZhH,QAASmZ,EACT3X,YAAaA,EACb2F,qBAAsBA,EACtBF,WAAY1N,IAAY9F,EACxByT,qBAAsBA,UAyChC,SAAS6S,GAAY9e,EAAkBqf,EAA2BC,EAAmB/Y,GACnF,OAAOvG,GAEHpJ,EAAAA,GAAAA,IAAA,OAAKkG,MAAM,sBAAqB/F,SAAA,CAC7BwP,IAAevP,EAAAA,GAAAA,GAAA,OAAKgmB,cAAeniB,EAAAA,EAAW/D,UAAU,eACzDE,EAAAA,GAAAA,GAAA,OACE8D,IAAKkF,EACLuf,IAAI,GACJzoB,WAAWqW,EAAAA,GAAAA,GAAe5G,GAAe,gBACzCzJ,MAAOuiB,EAAY,UAAUA,EAAU5e,UAAY,GACnD9F,UAAWoH,QAAQud,SAKvBtoB,EAAAA,GAAAA,GAAA,OACEF,UAAU,kBACVgG,MAAOuiB,EAAY,UAAUA,EAAU5e,UAAY,GAAG1J,UAEtDC,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAM,WAGvB,CAEA,SAASyN,GAAmBtS,EAAkBqf,EAA2BC,EAAmB/Y,GAC1F,MAAMoW,EAAe0C,GAAa,UAAUA,EAAU5e,oBAAoB4e,EAAUve,WAC9E8b,EAAa,yBAAyB5c,KAC5C,OAAOA,GAEHpJ,EAAAA,GAAAA,IAAA,OACEE,UAAU,cAAaC,SAAA,CAEtBwP,IAAevP,EAAAA,GAAAA,GAAA,OAAKgmB,cAAeniB,EAAAA,EAAW/D,UAAU,eACzDE,EAAAA,GAAAA,GAAA,OACE8F,MAAO6f,EAAa5lB,UAEpBC,EAAAA,GAAAA,GAAA,SACE8F,MAAO8f,EACP9lB,WAAWqW,EAAAA,GAAAA,GAAe5G,GAAe,gBACzC5L,UAAWoH,QAAQud,WAMzBtoB,EAAAA,GAAAA,GAAA,OACEF,UAAU,kBACVgG,MAAOuiB,EAAY,UAAUA,EAAU5e,UAAY,GAAG1J,UAEtDC,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAM,WAGvB,CCrSA,MAAM,aAAE4a,GAAY,aAAEC,IAAiBC,EAAAA,GA2BjCC,GAAapT,EAAAA,GAAe,GAAK,EACjCqT,GAAqB,IAS3B,IAAI5P,GACA6P,GAAkE,IAQjEC,GAAc,SAAdA,GAAc,OAAdA,EAAAA,EAAc,2BAAdA,EAAAA,EAAc,uBAAdA,CAAc,EAAdA,IAAc,IAKnB,MAwrBA,IAAepqB,EAAAA,EAAAA,IAxrByBqqB,EACtCpa,OACAtH,UACA9F,QACAmK,SACAqb,gBACA1R,WACA2T,qBACAC,WACAC,wBACAC,cACAC,aACAxd,UACAqb,gBACAjS,2BAEA,MAAMqU,GAAejgB,EAAAA,EAAAA,MACfkgB,GAAiBlgB,EAAAA,EAAAA,MACjBmgB,GAAengB,EAAAA,EAAAA,MACfogB,GAAgBpgB,EAAAA,EAAAA,MAChBqgB,GAAmBrgB,EAAAA,EAAAA,IAAkB,CAAEmT,EAAG,EAAGsG,EAAG,EAAG6G,MAAO,IAC1DC,GAAoBvgB,EAAAA,EAAAA,SAAmCxG,GACvDgnB,GAAwBxgB,EAAAA,EAAAA,SAA4BxG,GACpDinB,GAAgBzgB,EAAAA,EAAAA,KAAO,IACtBmQ,EAAUuI,IAAe5V,EAAAA,EAAAA,KAAS,IAClC6B,GAAiBE,KAClB6b,GAAoB1gB,EAAAA,EAAAA,IAAO2E,KAC3BiQ,GAAe+L,EAAAA,GAAAA,OACdC,EAAaC,IAAkB/d,EAAAA,EAAAA,KAAS,IACxCge,EAAcC,IAAgBjQ,EAAAA,EAAAA,IAAqB,CAAEqC,EAAG,EAAGsG,EAAG,EAAG6G,MAAO,IACzEU,EAAetW,GAAaoW,IAC3BG,EAAeC,IAAiBpQ,EAAAA,EAAAA,IAAuCvL,GACxE4b,EAAgBzW,GAAauW,GAC7BG,GAAWlV,EAAAA,GAAAA,GAAgB,IAA+B,IAAzB4U,IAAeR,MAAa,CAACQ,IAC9DO,GAAanV,EAAAA,GAAAA,GAAgB+U,IAC3BxgB,OAAQ6gB,EAAclhB,MAAOmhB,EAAW,WAAEC,IAAeC,EAAAA,GAAAA,MAC1D1W,EAAoBC,EAAoBuO,GAAgBpO,KAEzDzH,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,SAAU7N,EACVqf,OAAQnf,EACRof,kBAAkB,IAGpB,MAAMC,GAAsBC,EAAAA,GAAAA,GAAqB9B,EAAY,CAACA,GApElC,KAoEsE,GAC5F+B,GAA+BD,EAAAA,GAAAA,GAAqB,KACxDvB,EAAkBpgB,aAAU3G,GAC3B,GAtEkB,KAsEE,GAEjBwoB,GAAuBF,EAAAA,GAAAA,GAAsBxe,GAAUoV,EAAYpV,GAAQ,GAvE3D,KAuEgF,GAEhG2e,EAAqBvgB,QAAQvJ,IAAUoV,EAAAA,IACvC2U,EAAkB/V,EAAAA,GAAe,GAAKoV,EAAc,GAEpDY,IAA2Bjf,EAAAA,EAAAA,GAAiBM,IAChD,IAAK2I,EAAAA,GAAc,OACnB,MAAMiW,EAAWd,EAAe9d,EAAE6e,MA5EZ,IA6EjBD,GAAY5e,EAAEyP,MAAQiP,IACtBE,GAAY5e,EAAEyP,MAAQsO,EAAcW,GACzClX,GAAoBD,QAGtB3U,EAAAA,GAAAA,GAAW,IAAM4U,GAAmB,GAAOwU,KAE3Cte,EAAAA,EAAAA,IAAU,KACR,MAAM,MAAEof,EAAK,EAAEnN,EAAC,EAAEsG,GAAMuH,EAAa7gB,QAE3B,IAANgT,GAAiB,IAANsG,GAAqB,IAAV6G,GACxBY,EAAc3b,IAEf,CAACA,EAAM2b,EAAeF,KAEzB9f,EAAAA,EAAAA,IAAU,KACH2e,GAAawB,IAAczB,GAChCE,EAAsBuB,IACrB,CAACA,EAAYvB,EAAuBD,EAAUD,KAEjDpN,EAAAA,EAAAA,IAAgB,KACd,MAAM,EAAEW,EAAC,EAAEsG,EAAC,MAAE6G,GAAUQ,IACxBvH,EAAuB,IAAV+G,GACTH,EAAahgB,UACfggB,EAAahgB,QAAQ1D,MAAM6lB,UAAYC,IAAmBhB,EAAcpO,EAAIoM,KAE1EW,EAAe/f,UACjB+f,EAAe/f,QAAQ1D,MAAM6lB,UAAYC,GAAkBpP,EAAGsG,EAAG6G,IAE/DF,EAAcjgB,UAChBigB,EAAcjgB,QAAQ1D,MAAM6lB,UAAYC,GAAkBhB,EAAcpO,EAAIoM,MAE7E,CAACuB,EAAcvH,EAAcgI,KAEhCrgB,EAAAA,EAAAA,IAAU,KACR,IAAK+e,EAAa9f,cAAqC3G,IAA1B2nB,EAAchhB,SAAyB8L,GAAY2I,EAC9E,OAEF,IAAI4N,EAAgBnC,EAAiBlgB,QACrC,MAAMsiB,EAAiB,CACrBtP,EAAG,EACHsG,EAAG,GAECiJ,EAAiB,CACrBvP,EAAG,EACHsG,EAAG,GAECkJ,EAAW,CACfxP,EAAG,EACHsG,EAAG,GAEL,IACI/P,EADAkZ,EAAkBC,KAAKC,MAE3B,MAAMC,GAAqBC,EAAAA,GAAAA,IAAS,KAClCJ,EAAkBC,KAAKC,OACtB,KAAK,GAAO,GAETG,EAAeC,IACnB,MAAMC,EAAchC,EAAchhB,QAClC,QAAoB3G,IAAhB2pB,EAA2B,OAAO,EACtC,MAAMC,EAAWrD,EAAYoD,EAAaD,GAC1C,QAAiB1pB,IAAb4pB,EAAwB,CAC1B,MAAMrQ,GAAUwO,EAAchC,IAAc2D,EAEtC/P,EADY6N,EAAa7gB,QACXgT,EAAIJ,EAMxB,OALA2F,GAAY,GACZwI,EAAckC,GACdvB,EAAoBuB,GACpBpB,GAAqB,GACrBQ,EAAgB,CAAErP,EAAG,EAAGsG,EAAG,EAAG6G,MAAO,GAChC3C,GAIL/N,IAAkBwC,EAAAA,EAAAA,IAAc,CAC9BC,KAAMc,EACNb,GAAI,EACJxC,SAAU0P,GACV6D,OAAQjE,GACR7M,SAAWjP,GAAUyd,EAAa,CAChCtH,EAAG,EACHtG,EAAG7P,EACHgd,MAAO,OAGJ,IAdLS,EAAayB,IACN,EAcX,CACA,OAAO,GAGHc,EAAsB9f,IAC1B,MAAM,MAAE8c,GAAUU,EAAa7gB,QAC/B,GAAc,IAAVmgB,EAAa,MAAO,EAAC,GAAO,GAChC,GAAK9c,EAAEC,OAAuB8f,QAAQ,2BACpC,MAAO,EAAC,GAAO,GAEjB,IAAIL,EAAY,EAChB,OAAI5B,EAAe9d,EAAE6e,MA9KD,GA+KX,EAAC,GAAO,IAEb7e,EAAEyP,MAAQiP,EACZgB,GAAa,EACJ1f,EAAEyP,MAAQsO,EAAcW,IACjCgB,EAAY,GAIP,CAD6B,IAAdA,EADDD,EAAYC,MAK7B/G,EAAiB3Y,IACrB,MAAM,MAAE8c,GAAUU,EAAa7gB,QAC/B,GAAc,IAAVmgB,EACJ,OAAQ9c,EAAE4Y,KACR,IAAK,OACL,IAAK,YACH6G,GAAa,GACb,MAEF,IAAK,QACL,IAAK,aACHA,EAAY,KAKZO,EAA4BA,EAC9BrQ,IAAGsG,IAAG6G,SACRmD,EAAY,KAEZ,MAAMC,EAAqBlD,EAAsBrgB,QACjD,IAAKujB,EAAoB,MAAO,CAAC,CAAEvQ,IAAGsG,IAAG6G,UAAS,GAAM,GAExD,IAAIqD,GAAY,EACZC,GAAY,EAEhB,MAAMC,GAAWtC,EAAcA,EAAcjB,GAAS,EAChDwD,GAAWxC,EAAeA,EAAehB,GAAS,EAIlDyD,EAAala,KAAKma,KAAKN,EAAmBjR,KAAO6N,EAAOuD,GACxDI,EAAa1C,EAAcmC,EAAmB3J,MAAQuG,EAC5DqD,GAAYO,EAAAA,GAAAA,IAAU/Q,EAAG8Q,EAAYF,GACrC5Q,GAAIE,EAAAA,GAAAA,IAAMF,EAAG8Q,EAAYF,GAEzB,MAAMI,EAAata,KAAKma,KAAKN,EAAmB1J,IAAMsG,EAAQmD,EAAWK,GACnEM,EAAa9C,EAAeoC,EAAmBzJ,OAASqG,EAI9D,OAHAsD,GAAYM,EAAAA,GAAAA,IAAUzK,EAAG2K,EAAYD,GAG9B,CAAC,CAAEhR,IAAGsG,EAFbA,GAAIpG,EAAAA,GAAAA,IAAMoG,EAAG2K,EAAYD,GAET7D,SAASqD,EAAWC,IAGhC9P,EAAatQ,IAGjB,GAAIid,EAActgB,QAEhB,YADAsgB,EAActgB,SAAU,GAGX,YAAXqD,EAAE3L,MACJgpB,GAAe,GAEjB,MAAMyB,EAAYtB,EAAa7gB,SACzB,EAAEsZ,EAAC,MAAE6G,GAAUgC,EACrB,IAAInP,EAAImP,EAAUnP,EAClB,MAAMkR,EAAOxa,KAAKya,IAAInR,GAChBoR,EAAO1a,KAAKya,IAAI7K,GAMtB,GAJAsI,IACAC,GAAqB,GAGjB1B,EAAQ,EAaV,OAZAkC,EAAgB,CAAErP,EAAG,EAAGsG,EAAG,EAAG6G,MAAO,QACrC1Q,IAAkBwC,EAAAA,EAAAA,IAAc,CAC9BC,KAAM,CAACc,EAAGsG,EAAG6G,GACbhO,GAAI,CAAC,EAAG,EAAG,GACXxC,SAAU0P,GACV6D,OAAQjE,GACR7M,SAAWjP,GAAUyd,EAAa,CAChC5N,EAAG7P,EAAM,GACTmW,EAAGnW,EAAM,GACTgd,MAAOhd,EAAM,QAKnB,GAAIgd,EAAQ,EAAG,CAEb,MAAMkE,EAAK3a,KAAK4a,IAAInE,EA1QX,GA2QHoE,EAAcF,EAAKlE,EAIzB,IAAIqE,EAAKxR,EAAIuR,GAAehC,EAAevP,EAAIuR,EAAchC,EAAevP,GACxEyR,EAAKnL,EAAIiL,GAAehC,EAAejJ,EAAIiL,EAAchC,EAAejJ,GAG5E,MAAMoL,EAAI,IAGV,GAAe,UAAXrhB,EAAE3L,MAAoB2qB,EAAclC,QAAUA,EAAO,CAEvD,MAAMwE,EAAKjb,KAAKya,IAAI7B,EAAetP,IAAM0P,KAAKC,MAAQF,GAChDmC,EAAKlb,KAAKya,IAAI7B,EAAehJ,IAAMoJ,KAAKC,MAAQF,GAGtD+B,GAAM9a,KAAKya,IAAI7B,EAAetP,GAAK2R,EAAKD,EAAIlC,EAASxP,EACrDyR,GAAM/a,KAAKya,IAAI7B,EAAehJ,GAAKsL,EAAKF,EAAIlC,EAASlJ,CACvD,CAcA,OAZC+I,GAAiBgB,EAA0B,CAAErQ,EAAGwR,EAAIlL,EAAGmL,EAAItE,MAAOkE,GAjSrD,SAkSd5U,IAAkBwC,EAAAA,EAAAA,IAAc,CAC9BC,KAAM,CAACc,EAAGsG,EAAG6G,GACbhO,GAAI,CAACkQ,EAAcrP,EAAGqP,EAAc/I,EAAG+I,EAAclC,OACrDxQ,SAAU0P,GACV6D,OAAQjE,GACR7M,SAAWjP,GAAUyd,EAAa,CAChC5N,EAAG7P,EAAM,GACTmW,EAAGnW,EAAM,GACTgd,MAAOhd,EAAM,OAInB,CAMA,GALAkf,EAAgB,CACdrP,IACAsG,IACA6G,SAEEiE,GA5TgB,GA8TlB,YADA/hB,IAIF,GAAI+hB,EAAO,EAYT,YAXA3U,IAAkBwC,EAAAA,EAAAA,IAAc,CAC9BC,KAAMoH,EACNnH,GAAI,EACJxC,SAAU0P,GACV6D,OAAQjE,GACR7M,SAAWjP,GAAUyd,EAAa,CAChC5N,EAAG,EACHsG,EAAGnW,EACHgd,aAMN,MAAM4C,EAAY/P,EAAI,EAAI,GAAK,EACzBgQ,EAAchC,EAAchhB,QAC5BijB,EAAWD,GAAepD,EAAYoD,EAAahQ,EAAI,EAAI,GAAK,GAKhE6R,EAAOrC,EAASxP,EAAI,GAAK,EAAI,OAClB3Z,IAAb4pB,GAA0BiB,GAzVV,IAyVuCnB,IAAc8B,IAIvE7R,IAHgBoO,EAAchC,IAAc2D,EAI5ChC,EAAckC,GACdvB,EAAoBuB,IAGtBxT,IAAkBwC,EAAAA,EAAAA,IAAc,CAC9BC,KAAMc,EACNb,GAAI,EACJxC,SAAU0P,GACV6D,OAAQjE,GACR7M,SAAWjP,GAAUyd,EAAa,CAChCtH,EAAG,EACHtG,EAAG7P,EACHgd,MAAOA,GAAS,OAKhB5M,GAAUC,EAAAA,GAAAA,IAAcsM,EAAa9f,QAAS,CAClD8kB,cAAc,EACdC,gBAAgB,EAChBC,wBAAyB,0DACzBC,QAxWW,EAyWXC,QA1WW,EA2WXC,cA9WkB,EA+WlBC,eAAe,EACf3R,UAAYpQ,IACV,GAAIgiB,GAAqBhiB,GAAI,OAC7B,MAAM,EAAE2P,EAAC,EAAEsG,EAAC,MAAE6G,GAAUU,EAAa7gB,QACrC,GAAe,cAAXqD,EAAE3L,OACJgpB,GAAe,GACD,IAAVP,IAMN,GADAsC,EAAkBC,KAAKC,MACb,IAAN3P,GAAiB,IAANsG,GAAqB,IAAV6G,EAAa,CACrC,IAAKJ,EAAe/f,QAAS,OAE7B,GADAuJ,EAAUwW,EAAe/f,QAAQnF,cAAc,eAC1C0O,EAAS,OAEd8W,EAAsBrgB,QAAUuJ,EAAQoJ,uBAC1C,OAXItP,EAAE6Y,kBAaRtI,OAAQA,CAAC0R,EAAOC,GACdC,cACAC,eACCC,KACD,GAAIpF,EAActgB,SAAWqlB,GAAqBC,GAAQ,OAE1D,GAAIlY,EAAAA,IAAgC,eAAtBmY,EAAa7tB,KAAuB,CAChD,MAAM,MAAEob,GAAWyS,EAAgCI,QAAQ,GAC3D,GAAI7S,GAAS8S,GAAAA,IAA6B9S,GAASsO,EAAcwE,GAAAA,GAC/D,MAEJ,CACInW,KACFA,KACAA,QAAkBpW,GAEpBmpB,EAASxP,EAAIsP,EAAetP,EAAIwS,EAChChD,EAASlJ,EAAIgJ,EAAehJ,EAAImM,EAChCnD,EAAetP,EAAIwS,EACnBlD,EAAehJ,EAAImM,EACnB,MAAMI,EAAanc,KAAKya,IAAIqB,GACtBM,EAAapc,KAAKya,IAAIsB,IACtB,EAAEzS,EAAC,EAAEsG,EAAC,MAAE6G,GAAUU,EAAa7gB,QAOrC,GAHA4iB,IAGc,IAAVzC,GAkBJ,GAAmB,cAAfmF,EAAM5tB,KAAV,CACA,GAAI0oB,EAAkBpgB,UAAYuf,GAAewG,WAG3C3F,EAAkBpgB,UAAYuf,GAAeyG,YAC5Ctc,KAAKya,IAAInR,GAAKiT,GAAAA,IAA6BJ,EAAaC,EAAaI,GAAAA,IAA2B,CACnG9F,EAAkBpgB,QAAUuf,GAAeyG,WAC3CzN,GAAY,GACZ,MAAM4N,EAAQ/E,EAAchC,GACtBoF,GAAKtR,EAAAA,GAAAA,IAAMsS,GAAcW,EAAOA,GAatC,OAZAvF,EAAa,CACX5N,EAAGwR,EACHlL,EAAG,EACH6G,eAKiB,UAAfmF,EAAM5tB,MAAoBgS,KAAKya,IAAIK,GAAM4B,MAC3CzS,EAAU2R,GACVhF,EAActgB,SAAU,GAG5B,CAGF,GAAIogB,EAAkBpgB,UAAYuf,GAAewG,UAC5Crc,KAAKya,IAAI7K,GAAK2M,GAAAA,IAA6BH,EAAaD,EAAaK,GAAAA,GAA2B,CACnG9F,EAAkBpgB,QAAUuf,GAAewG,SAC3C,MAAMI,EAAQhF,EACRsD,GAAKvR,EAAAA,GAAAA,IAAMuS,GAAcU,EAAOA,GACtCvF,EAAa,CACX5N,EAAG,EACHsG,EAAGmL,EACHtE,UAEiB,UAAfmF,EAAM5tB,MAAoBgS,KAAKya,IAAIM,GAAM4B,MAC3C1S,EAAU2R,GACVhF,EAActgB,SAAU,EAE5B,CAxCsC,MAlBtC,CACE,MAAMwkB,EAAKnC,EAAcrP,EAAIwS,EACvBf,EAAKpC,EAAc/I,EAAImM,EAC7B,GAAI,CAAC,QAAS,aAAaa,SAAShB,EAAM5tB,MAAO,CAC/C,MAAOyqB,EAAWqB,EAAWC,GAAaJ,EAA0B,CAAErQ,EAAGwR,EAAIlL,EAAGmL,EAAItE,SAla1E,IAqaV,OAFIuF,GAAYA,GAAYlC,GAAYC,QACxC7C,EAAauB,EAEf,CACI,YAAamD,GAAkC,IAAzBA,EAAMK,QAAQxtB,QACtCyoB,EAAa,CACX5N,EAAGwR,EACHlL,EAAGmL,EACHtE,SAIN,GA2CFoG,OAAQA,CAACljB,GACPmjB,OACAC,aACAC,iBACAC,iBACAnB,cACAC,cACAmB,iBACAC,qBAEIpX,IAAiBA,KACrBiX,EAAiBA,GAAkBtF,EAAc,EACjDuF,EAAiBA,GAAkBxF,EAAe,EAClDyF,EAAiBA,GAAkBxF,EAAc,EACjDyF,EAAiBA,GAAkB1F,EAAe,EAGlD,MAAMhB,EAAQqG,IAAQtT,EAAAA,GAAAA,IAAMmP,EAAclC,MAAQsG,EAAaK,GAAgBC,IACzExC,EAAcpE,EAAQkC,EAAclC,MACpC6G,EAAUtd,KAAKya,IAAIza,KAAK4a,IAAIjC,EAAcrP,EAAG,IAC7CiU,EAAUvd,KAAKya,IAAIza,KAAK4a,IAAIjC,EAAc/I,EAAG,IAGnDiJ,EAAevP,EAAI4T,EACnBrE,EAAejJ,EAAIuN,EAGnB,MAAMK,EAAgBF,EAAUN,EAC1BS,EAAgBF,EAAUN,EAG1BS,EAAgBF,EAAgB3C,EAAc2C,EAC9CG,EAAgBF,EAAgB5C,EAAc4C,GAE7ChF,GAAakB,EAA0B,CAC5CrQ,EAAGqP,EAAcrP,EAAIoU,EAAe5B,EACpClM,EAAG+I,EAAc/I,EAAI+N,EAAe5B,EACpCtF,UAGFS,EAAauB,IAEf5d,OAAAA,CAAQlB,GACNqd,GAAe,GACf,MAAO4G,EAAeC,GAAgBpE,EAAmB9f,GACzD,GAAIikB,EAAJ,CAGE,GAFAjkB,EAAE6Y,iBACF7Y,EAAEuJ,kBACEZ,EAAAA,GAAc,OACbub,GAAcllB,GAErB,MAC4B,IAAxBggB,EAAclC,OAAenU,EAAAA,KAC7B8V,GAAuB0F,GAAsBnkB,EAAEC,OAAuB,iBACxEjB,GAEJ,EACAoa,aAAAA,CAAcpZ,GAAG,QACfqgB,EAAO,QACPC,IAEA,MAAO2D,GAAiBnE,EAAmB9f,GAC3C,GAAIikB,EAGF,OAFAjkB,EAAE6Y,sBACF7Y,EAAEuJ,kBAGJ,IAAKZ,EAAAA,IAA2B,UAAX3I,EAAE3L,KAAkB,OACzC,MAAM,EAAEsb,EAAC,EAAEsG,EAAC,MAAE6G,GAAUU,EAAa7gB,QAIrC,GAAc,IAAVmgB,EAAa,CACf,GAAU,IAANnN,GAAiB,IAANsG,EAAS,OACxB+I,EAAgBgB,EAA0B,CACxCrQ,EALkB0Q,EAliBN,EAkiBkCA,EAM9CpK,EALkBqK,EAniBN,EAmiBkCA,EAM9CxD,MAziBY,IA0iBX,EACL,MACEkC,EAAgB,CACdrP,EAAG,EACHsG,EAAG,EACH6G,MAAO,GAGX1Q,IAAkBwC,EAAAA,EAAAA,IAAc,CAC9BC,KAAM,CAACc,EAAGsG,EAAG6G,GACbhO,GAAI,CAACkQ,EAAcrP,EAAGqP,EAAc/I,EAAG+I,EAAclC,OACrDxQ,SAAU0P,GACV6D,OAAQjE,GACR7M,SAAWjP,IACT,MAAMgf,EAAY,CAChBnP,EAAG7P,EAAM,GACTmW,EAAGnW,EAAM,GACTgd,MAAOhd,EAAM,IAEfyd,EAAauB,KAGnB,EACAxO,cAGF,OADApb,SAASgU,iBAAiB,UAAWyP,GAAe,GAC7C,KACLzI,IACAhb,SAASiU,oBAAoB,UAAWwP,GAAe,KAG3D,CACEgF,EACAY,EACAG,EACAnC,EACAnL,EACA3I,EACAzJ,EACAqf,EACAX,EACAc,EACAjB,EACAkB,EACAjB,EACAM,EACAC,EACA5D,KAGFzc,EAAAA,EAAAA,IAAU,KACR,MAAMwH,EAAa/D,IACbijB,OAA+CpuB,IAA9BknB,EAAkBvgB,SACpCugB,EAAkBvgB,UAAYuI,EACnC,IAAKuX,EAAa9f,UAAYynB,GAAkB3b,GAAY2I,EAAc,OAC1E8L,EAAkBvgB,QAAUuI,EAC5B,MAAM,MAAE4X,GAAUU,EAAa7gB,QACzB6M,EAAMtE,EAAa,GAAK,EAAI,EAGlC,IAAImf,EAAQ,IACRC,EAAY,EACZxH,GAJY2G,IAIQja,EAAM,GAC1BsT,GAJY4G,IAIQla,EAAM,IAChB,IAAVsT,GAAetT,EAAM,IAAG6a,EAAQ,IAChCpI,IAAqBA,KACzBA,IAAsBrN,EAAAA,EAAAA,IAAc,CAClCC,KAAMrF,EACNsF,GAAItF,EAAM6a,EACV/X,SAAU0P,GACV6D,OAAQhE,GACR9M,SAAWjP,IACT,IAAK2c,EAAa9f,QAAS,OAC3B,MAAM4nB,GAAQ9e,EAAAA,GAAAA,IAAM3F,EAAQwkB,EAAW,GACvCA,EAAYxkB,EAEZ,MAAM0kB,EAAa,IAAIC,WAAW,QAAS,CACzCC,OAAQH,EACRI,SAAS,IAEXlI,EAAa9f,QAAQioB,cAAcJ,QAGtC,CAACrjB,EAAesH,EAAU2I,EAAcoM,IAE3C,MAAOqH,GAAUjF,KAAY1kB,EAAAA,EAAAA,IAAQ,SAChBlF,IAAf6nB,EAAiC,MAAC7nB,OAAWA,GAC1C,CAACumB,EAAYsB,GAAa,GAAItB,EAAYsB,EAAY,IAC5D,CAACA,EAAYtB,IAEhB,QAAmBvmB,IAAf6nB,EAA0B,OAE9B,MAAMiH,QAAuB9uB,IAAb6uB,GACVE,QAAuB/uB,IAAb4pB,GACVxF,GAAWgD,GAAeQ,EAEhC,OACE7qB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oBAAoBmU,IAAKqV,EAAavpB,SAAA,EACnDC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,mBAAmBmU,IAAKuV,EAAazpB,SACjD4xB,KAAYlH,IAAaI,IACxB7qB,EAAAA,GAAAA,GAAC+mB,GAAkB,CACjBC,cAAeA,EACfC,SAAUA,GACVrY,KAAM8iB,GACN7lB,QAASA,EACTqb,cAAeA,EACfjS,qBAAsBA,OAI5BjV,EAAAA,GAAAA,GAAA,OACEF,WAAWqW,EAAAA,GAAAA,GACT,mBACA,2BACA8Q,IAAY,4BAEdlZ,QAASyd,GACTvX,IAAKsV,EAAexpB,UAEpBC,EAAAA,GAAAA,GAAC+mB,GAAkB,CACjBnY,KAAM8b,EACN1D,cAAeA,EACfxN,SAAUA,EACVyN,SAAUA,GACVpb,QAASA,EACTqb,cAAeA,EACfjS,qBAAsBA,OAG1BjV,EAAAA,GAAAA,GAAA,OAAKF,UAAU,mBAAmBmU,IAAKwV,EAAc1pB,SAClD6xB,KAAYnH,IAAaI,IACxB7qB,EAAAA,GAAAA,GAAC+mB,GAAkB,CACjBC,cAAeA,EACfC,SAAUA,GACVrY,KAAM6d,GACN5gB,QAASA,EACTqb,cAAeA,EACfjS,qBAAsBA,MAI3B0c,KAAYlH,IAAajV,EAAAA,KACxBxV,EAAAA,GAAAA,GAAA,UACEkB,KAAK,SACLpB,UAAW,mBAAmBwH,IAAY9F,GAAS,WACnD,aAAYuL,EAAK,oBACjBsJ,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,IAG7B+uB,KAAYnH,IAAajV,EAAAA,KACxBxV,EAAAA,GAAAA,GAAA,UACEkB,KAAK,SACLpB,UAAW,mBAAmBwH,IAAY9F,GAAS,WACnD,aAAYuL,EAAK,QACjBsJ,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,SASpC,SAAS+oB,GAAkBpP,EAAI,EAAGsG,EAAI,EAAG6G,EAAQ,GAC/C,MAAO,eAAenN,EAAEsV,QAAQ,SAAShP,EAAEgP,QAAQ,oBAAoBnI,EAAMmI,QAAQ,KACvF,CAEA,SAASd,GAAsBe,EAAsBC,GACnD,QAAKD,MACDA,EAAQE,QAAQD,IACbjnB,QAAQgnB,EAAQnF,QAAQoF,IACjC,CAEA,SAASnD,GAAqBhiB,GAC5B,MAAMC,EAASD,EAAEC,OACjB,QAAIkkB,GAAsBlkB,EAAQ,0BAC5BkkB,GACFlkB,EACA,gGAIFD,EAAE6Y,kBAFO,EAMb,C,uCCxwBA,MA8FA,IAAe/W,EAAAA,EAAAA,IACb,CAACtN,GAAUuN,WACT,MAAMhO,EAAyB,YAAfgO,GAAM1N,KAAqB0N,EAAKhO,aAAUiC,EACpDqvB,EAAgBtxB,IAAWuxB,EAAAA,EAAAA,KAAa9wB,EAAQT,GAItD,MAAO,CACLwxB,MAH2B,WAAfxjB,GAAM1N,KAAoB0N,EAAK/N,YAAcqxB,IAL/D,CA3F8CG,EAC5CD,QACAxjB,WAEA,MAAM,iBACJ0jB,EAAgB,aAChBC,EAAY,eACZC,IACExmB,EAAAA,EAAAA,OAEE,SAAE5M,IAAaC,EAAAA,EAAAA,MAEfozB,GAAqBlmB,EAAAA,EAAAA,GAAgB,KAGzC,GAFA+lB,IAEmB,YAAf1jB,GAAM1N,KAAoB,OAE9B,MAAMN,EAAUgO,EAAKhO,QAEjBxB,EACFyL,WAAW,KACT2nB,EAAe,CAAEE,OAAO,GAAS,CAAEC,gBAAgB,IACnDJ,EAAa,CAAE/lB,OAAQ5L,EAAQ4L,OAAQiM,UAAW7X,EAAQf,MAxBvC,KA2BrB0yB,EAAa,CAAE/lB,OAAQ5L,EAAQ4L,OAAQiM,UAAW7X,EAAQf,OAIxDkN,GAAOC,EAAAA,EAAAA,KAEP4lB,GAAW7qB,EAAAA,EAAAA,IAAQ,KACvB,IAAK6G,GAAsB,eAAdA,EAAK1N,KAAuB,OAEzC,MAAML,EAA4B,WAAd+N,EAAK1N,KAAoB0N,EAAK/N,iBAAcgC,EAC1D/B,EAA8B,WAAd8N,EAAK1N,KAAoB0N,EAAK9N,mBAAgB+B,EAC9DjB,EAASd,GAAee,OAAO+M,EAAK5N,YACpC6xB,EAAmBjxB,GAAQ/B,KAAOiB,GAAegyB,eAAejzB,GAChEkzB,EAAmBnxB,GAAQ/B,KAAOiB,GAAekyB,eAAenzB,GAChEozB,EAAqB,YAAdrkB,EAAK1N,KAAqB0N,EAAKhO,QAAQqyB,KAAOrxB,GAAQqxB,KACnE,IAAKA,EAAM,OAEX,MAAMC,GAAgBC,EAAAA,GAAAA,IAAoBpmB,EAAa,IAAPkmB,GAAa,GACvDG,EAAQtyB,GAAesyB,OACvBtyB,EAAcsyB,OAAStyB,GAAegyB,cAAgB,EAAI,GAC1DO,EAAezkB,EAAK5N,WAAc,GAAKF,GAAekyB,eAAiB,EAAI,GAC3EM,EAAYF,GAASrmB,EAAK,KAAM,CAACsmB,EAAcD,IAE/CG,EAAkB,GACxB,GAAI3xB,EAAQ,CACV,MAAMsN,GAAQR,EAAAA,EAAAA,IAAS7N,EAAahB,SAA+BgD,EAAzBhC,EACpC2yB,EAAYtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,GAClCwkB,EAAUxkB,IAAQykB,EAAAA,EAAAA,IAAYzkB,GACpCqkB,EAAMvgB,KAAKjG,EACTgmB,EAAmB,qCACfF,EAAmB,qCACjBW,EAAY,8BACVE,EAAU,4BAA8B,+BAEpD,CAQA,OANIJ,GAAcP,GAAqBF,GACrCU,EAAMvgB,KAAKsgB,GAGbC,EAAMvgB,KAAKkgB,GAEJK,EAAM5M,KAAK,QACjB,CAAC/X,EAAM7B,IAEV,IAAKqlB,EACH,OAGF,MAAMwB,GAAcC,EAAAA,GAAAA,IAAa9mB,EAAMqlB,GAEvC,OACExyB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAaiO,QAAS0kB,EAAmB1yB,SAAA,EACtDC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CAAgB5zB,KAAK,SAAS6zB,KAAM3B,GAA9BA,EAAMvyB,KACnBD,EAAAA,GAAAA,IAAA,OAAKE,UAAU,OAAMC,SAAA,EACnBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,QAAQuW,IAAI,OAAMtW,SAC9B6zB,IAAeI,EAAAA,GAAAA,GAAWJ,MAE7B5zB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,OAAOuW,IAAI,OAAMtW,SAC7B6yB,YCxBL/J,GAAqB,IAyY3B,IAAelqB,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,YAAE2N,EAAW,4BAAEilB,IAAgCllB,EAAAA,EAAAA,KAAe1N,IAC9D,OACJmL,EAAM,SACN8C,EAAQ,UACRmJ,EAAS,OACTnX,EAAM,SACNgU,EAAQ,mBACR4e,EAAkB,gBAClBnzB,EAAe,WACfC,EAAU,aACVkR,EAAY,mBACZwO,GACE1R,EACEgY,GAAgBmN,EAAAA,EAAAA,KAA+B9yB,EAAQ,0BAEvD,cAAE+yB,EAAa,SAAElL,GAAa7nB,EAC9BgzB,EAAiBtpB,QAAQyB,KAAW8nB,EAAAA,EAAAA,KAAqBjzB,EAAQmL,GAEvE,GAAI0F,EAAc,CAChB,MAAMrR,GAAc0zB,EAAAA,EAAAA,KAAWlzB,EAAQmL,GACvC,IAAIqC,GAAiB,EACjBhO,IACFgO,GAAiBH,EAAAA,EAAAA,IAAS7N,EAAYhB,IAClCgB,EAAYhB,KAAOu0B,GAAgBI,EAAAA,EAAAA,IAAY3zB,IAGrD,MAAMC,GAAgB2zB,EAAAA,EAAAA,KAAiBpzB,EAAQmL,GAEzCkoB,EAAc/zB,EAAmB,CACrCE,cAAaE,kBAAiBD,gBAAeE,eAEzCqP,EAAgBjP,EAAoBC,EAAQC,EAAQozB,GAE1D,MAAO,CACL5zB,gBACAc,OAAQd,GAAee,OAAOb,GAC9BH,cACAooB,mBAAoBnoB,GAAe6zB,UACnCN,iBACAxlB,iBACAmY,gBACA1lB,SACA2yB,8BACA3e,WACAvU,kBACAC,aACAkoB,WACAwL,cACArkB,gBACA7D,SACA8C,WACAmJ,YACA7X,aAASiC,EACT+xB,yBAAqB/xB,EACrBgyB,kBAAchyB,EACd5B,sBAAkB4B,EAClBqxB,qBAEJ,CAEA,IAAItzB,EASAK,EARAuL,GAAUiM,IAEV7X,EADEU,GAAU,CAAC2B,EAAAA,GAAkB2B,eAAgB3B,EAAAA,GAAkBqC,iBAAiBwqB,SAASxuB,IACjFwzB,EAAAA,EAAAA,KAAuBzzB,EAAQmL,EAAQiM,IAEvCsc,EAAAA,EAAAA,KAAkB1zB,EAAQmL,EAAQiM,IAK5CiI,GAAsBlU,GACpBlL,IAAW2B,EAAAA,GAAkBmC,mBAC/BnE,GAAmB+zB,EAAAA,EAAAA,KAAuB3zB,EAAQmL,IAItD,MAAMkoB,EAAc/zB,EAAmB,CACrCC,UAASG,kBAAiBC,aAAYC,qBAElCoP,EAAgBjP,EAAoBC,EAAQC,EAAQozB,GAE1D,IAAIG,EAEAroB,IAEAqoB,EADEvzB,GAAU,CAAC2B,EAAAA,GAAkB2B,eAAgB3B,EAAAA,GAAkBqC,iBAAiBwqB,SAASxuB,IAC5E2zB,EAAAA,EAAAA,KAA4B5zB,EAAQmL,IAEpC0oB,EAAAA,EAAAA,KAAmB7zB,EAAQmL,IAI9C,IAAIyc,GAAqB,EACzB,MAAMkM,EAAiB7zB,IAAW2B,EAAAA,GAAkBsC,OAC9C6vB,EAAgB9zB,IAAW2B,EAAAA,GAAkB0B,MACnD,IAAIiwB,EAEJ,GAAIpoB,GAAU8C,GAAYmJ,EACxB,GAAIyb,IAAuBiB,GAAkBC,GAAgB,CAC3D,MAAMC,GAAgBC,EAAAA,EAAAA,KAA6Bj0B,GACnD4nB,EAAqBle,QAAQsqB,GAAeV,WAC5C,MAAM,SAAEY,GAAcF,GAAeG,gBAAmB,CAAC,EACzDZ,EAAsBW,CACxB,MAAO,GAAIj0B,IAAW2B,EAAAA,GAAkBC,YAAa,CACnD,MAAMmyB,GAAgBI,EAAAA,EAAAA,KAA+Bp0B,GAC/Cq0B,EAAgBL,GAAeK,eAC/B,SAAEH,IAAcllB,GAAe7O,MAAQk0B,GAAeC,IAAMD,GAAev0B,QAAU,CAAC,EAC5FyzB,EAAsBW,CACxB,MAAWJ,GAAkBC,KAE3BR,GADqBgB,EAAAA,EAAAA,KAA8Bv0B,EAAQmL,EAAQ8C,EAAUmJ,KACvCod,EAAAA,EAAAA,KAAgBx0B,EAAQmL,EAAQ8C,IAI1E,MAAO,CACL9C,SACA8C,WACAmJ,YACA4b,iBACA/yB,SACAV,UACAi0B,eACA5zB,mBACA2zB,sBACA5N,gBACA1R,WACA2e,8BACAC,qBACAnzB,kBACAC,aACAioB,qBACAC,WACAwL,cACArkB,gBACAxB,oBAAgBhM,EAChBjB,YAAQiB,EACRhC,iBAAagC,EACb/B,mBAAe+B,IA1ID8L,CAtYAmnB,EAClBtpB,SACA8C,WACAmJ,YACA7X,UACAg0B,sBACAP,iBACAxlB,iBACAvN,SACAM,SACAf,cACAC,gBACA+zB,eACA5zB,mBACAF,kBACAC,aACAgmB,gBACA1R,WACA2e,8BACAC,qBACAjL,qBACAC,WACAwL,eACArkB,qBAEA,MAAM,gBACJe,GAAe,iBACfkhB,GAAgB,gBAChByD,GAAe,aACfxD,GAAY,eACZC,GAAc,wBACdwD,GAAuB,sBACvBC,GAAqB,eACrBC,GAAc,QACdC,KACEnqB,EAAAA,EAAAA,MAEEL,GAASZ,QAAQlK,GAAeD,GAAWG,GAAmBE,IAC9D,SAAE7B,KAAaC,EAAAA,EAAAA,OAEf,MAAE8B,GAAK,SAAEO,IAAa2O,IAAiB,CAAC,EAGxC+lB,IAAe/sB,EAAAA,EAAAA,MACfgtB,GAAWz1B,GAASy1B,UAAYx1B,GAAahB,IAAMe,GAAS4L,OAC5D8pB,IAAeC,EAAAA,EAAAA,GAA0CF,IACzDG,GAAkBxP,EAAgB,YAAc,OAChDyP,GAAmB1rB,QAAQic,IAAkBiN,IAG5CyC,GAAyBC,GAAuBC,KAA0B33B,EAAAA,EAAAA,MAE3E,QACJqI,GAAO,QACPI,GAAO,cACPuB,GAAa,SACbiC,GAAQ,WACRI,GAAU,MACV9J,GAAK,YACLqG,IACEX,EAAc,CAChB/F,SAAOgG,SAAU4D,QAAQlK,GAAcS,SAAQ8F,MAAOqvB,IAAoB5N,KAGtEtY,GAAkB,MACtB,GAAI8jB,EAAgB,OAAO,EAC3B,GAA0B,WAAtBK,IAAaxzB,OAAsBL,EAAa,OAAO,EAC3D,MAAMg2B,EAAOnC,GAAY5zB,cACzB,OAAIK,KAAU01B,EAAK7D,aAEpB,EANuB,GAOlB5T,IAAa9J,GAAY3J,GAEzBmrB,IAAkB/uB,EAAAA,EAAAA,IAAQ,IACvBmsB,EACHU,GACAmC,EAAAA,EAAAA,IAAqBlC,GAAgB,CAAC,EAAGD,GAAuB,GAAI/sB,IACvE,CAACgtB,EAAcD,EAAqB/sB,GAAaqsB,KAEhDvoB,IAAY2qB,IAAgBA,KAAiBD,SAAqCxzB,IAAzBuzB,GAAa5sB,UACxE4sB,GAAa5sB,QAAU9H,GAAW,EAAK+W,GAAazX,GAGtD,MAAOg2B,IrBxKAhxB,GqB0KPuE,EAAAA,EAAAA,IAAU,KACR,IAAKoB,IAAUqrB,KACb,QAGFC,EAAAA,EAAAA,MACA,MAAMC,GAAuBC,EAAAA,EAAAA,MAE7B,MAAO,KACLD,KACAE,EAAAA,EAAAA,QAED,CAACzrB,GAAQqrB,MAEZzsB,EAAAA,EAAAA,IAAU,KACJ6U,IACF7Y,KAED,CAAC6Y,MAEJ7U,EAAAA,EAAAA,IAAU,KACJnL,KACFgZ,EAAAA,EAAAA,IAAgB,KACdrW,SAASsd,KAAK9b,UAAU8zB,OAAO,uBAAwB1rB,OAG1D,CAACvM,GAAUuM,KAEd,MAAMvB,IAAcC,EAAAA,EAAAA,MACpBE,EAAAA,EAAAA,IAAU,KACR,MAAM+sB,EAAM1sB,OAAO2sB,WAAWC,EAAAA,IAG9B,OAFAF,EAAIvhB,iBAAiB,SAAU3L,IAExB,KACLktB,EAAIthB,oBAAoB,SAAU5L,MAEnC,CAACA,KAEJ,MAAMqtB,IAAclB,EAAAA,EAAAA,GAA8C31B,GAC5D82B,IAAenB,EAAAA,EAAAA,GAA2CjhB,GAC1DqiB,IAAapB,EAAAA,EAAAA,GAAsBj1B,GACnCowB,IAAW6E,EAAAA,EAAAA,GAAsB7B,IACjCkD,IAAoBrB,EAAAA,EAAAA,GAAsBttB,IAC1C8e,GAAYnnB,GAAUonB,EAAAA,EAAAA,GAAkB,CAAEpnB,UAASqnB,eAAe,EAAMC,kBAAkB,SAAUrlB,EACpGslB,GAAYpd,QAAQgd,IACpB8P,GAAuBH,IAAgBhG,KAAagD,IAE1DnqB,EAAAA,EAAAA,IAAU,KACJksB,IAAoB9qB,KAAWksB,KAAyBnG,OAC1DoG,EAAAA,EAAAA,IAAoBjP,GAAqBkP,EAAAA,KtBrNxC,SACL5P,EACA7mB,EACA2H,EACAqC,EACAhE,EACA1G,EACAI,GAEA,MAAQ2E,QAASqyB,GAAczzB,EAASjD,EAAQV,EAASI,GACzD,IAAKg3B,EACH,OAGF,MAAQvuB,MAAOmhB,GAAgBqN,EAAAA,EAAW/tB,OAExCT,MAAOyuB,EAAgBpuB,OAAQquB,IAC7BC,EAAAA,EAAAA,IAAkCjQ,EAAW7gB,IACzCmC,MAAO4uB,EAASvuB,OAAQwuB,IAAaC,EAAAA,EAAAA,IAC3CL,EAAgBC,EAAiB7sB,EAAW7B,MAAO6B,EAAWxB,QAE1D0uB,GAAU5N,EAAcyN,GAAW,EACnCI,EA6OR,SAAsBtQ,GACpB,MAAMmP,EAAM1sB,OAAO2sB,WAAWC,EAAAA,IAC9B,IAAIkB,EAAe,MAKnB,OAJIvQ,IAAc3S,EAAAA,KAChBkjB,GAAgBpB,EAAIrF,QAAU,KAAQ,OAGjCyG,EAAe9iB,EAAAA,CACxB,CArPgB+iB,CAAaxQ,IAAcgQ,EAAkBG,GAAY,EAEvE,IACEjV,IAAKuV,EAAS9c,KAAM+c,EAAUpvB,MAAOqvB,EAAWhvB,OAAQivB,GACtDf,EAAU7b,wBAEd,GAAI,CACFlZ,EAAAA,GAAkBC,YAClBD,EAAAA,GAAkB0B,MAClB1B,EAAAA,GAAkB2B,eAClB3B,EAAAA,GAAkB8B,cAClB+qB,SAASxuB,GAAS,CAClB,MAAM03B,EAkMV,SAAiBC,EAAmBC,EAAoB7V,EAAavH,EAAcrS,EAAeK,GAChG,GAAImvB,IAAcC,EAAY,CAC5B,MAAMh5B,EAAOgT,KAAKma,IAAI5jB,EAAOK,IAAWmvB,EAAYC,GACpDpd,IAAS5b,EAAOuJ,GAAS,EACzB4Z,IAAQnjB,EAAO4J,GAAU,EACzBL,EAAQvJ,EACR4J,EAAS5J,CACX,MAAO,GAAI+4B,EAAYC,EAAY,CACjC,MAAMC,EAAW1vB,EAEjBqS,KADArS,EAAQK,GAAUmvB,EAAYC,IACbC,GAAY,CAC/B,MAAO,GAAID,EAAaD,EAAW,CACjC,MAAMG,EAAYtvB,EAElBuZ,KADAvZ,EAASL,GAASyvB,EAAaD,IACdG,GAAa,CAChC,CAEA,MAAO,CACL/V,MAAKvH,OAAMrS,QAAOK,SAEtB,CAtNsBuvB,CAAQhB,EAASC,EAAUM,EAASC,EAAUC,EAAWC,GAC3EH,EAAUI,EAAU3V,IACpBwV,EAAWG,EAAUld,KACrBgd,EAAYE,EAAUvvB,MACtBsvB,EAAaC,EAAUlvB,MACzB,CAEA,MAAMwvB,EAAkBT,EAAWC,EAAY,GAAMN,EAASH,EAAU,GAClEkB,EAAkBX,EAAUG,EAAa,GAAMN,EAAQH,EAAW,GAClEkB,EAAaV,EAAYT,EACzBoB,EAAaV,EAAaT,GAEhClgB,EAAAA,EAAAA,IAAgB,KACd,MAAM/U,EAAQF,EAAY8F,GAAiB+uB,IAC3C0B,EAAAA,EAAAA,IAAYr2B,EAAO,CACjBggB,IAAK,GAAGoV,MACR3c,KAAM,GAAG0c,MACT/uB,MAAO,GAAG4uB,MACVvuB,OAAQ,GAAGwuB,MACX3M,UAAW,eAAe2N,QAAqBC,iBAA8BC,MAAeC,OAE9F7zB,EAAWvC,EAAO/B,GAElBS,SAASsd,KAAKpb,YAAYZ,GAC1BtB,SAASsd,KAAK9b,UAAUC,IAAI,oBAE5B4U,EAAAA,EAAAA,IAAgB,KACd/U,EAAMyC,MAAM6lB,UAAY,GAqT9B,SAAoBtoB,GACjBA,EAAMwC,WAA2BC,MAAMC,UAAY,UACpD1C,EAAME,UAAU+b,OAAO,kBAAmB,SAC5C,CAvTMqa,CAAWt2B,GAEXwH,WAAW,MACTuN,EAAAA,EAAAA,IAAgB,KACVrW,SAASsd,KAAKua,SAASv2B,IACzBtB,SAASsd,KAAKwa,YAAYx2B,GAE5BtB,SAASsd,KAAK9b,UAAU+b,OAAO,sBAvEd,IAyEGyY,EAAAA,QAG9B,CsB4IM+B,CAAe3R,GAAW7mB,EAAS2H,GAAgBqC,GAAahE,GAAS1G,EAASI,IAGhFy1B,KAAqB9qB,IAAU+lB,MACjCoG,EAAAA,EAAAA,IAAoBjP,GAAqBkP,EAAAA,KtB9IxC,SACLz2B,EAA2B2H,EAAuBrI,EAAsBI,GAExE,MAAM,UAAEwE,EAAWG,QAASo0B,GAAYx1B,EAASjD,EAAQV,EAASI,GAClE,IAAK+4B,EACH,OAGF,MAAM/B,EAAYj2B,SAASi4B,eAAe,eAAgB31B,cACxD,kEAEF,IAAK2zB,EACH,OAGF,MACE3U,IAAKuV,EAAS9c,KAAM+c,EAAUpvB,MAAOqvB,EAAWhvB,OAAQivB,GACtDf,EAAU7b,yBAEZkH,IAAK4W,EAAWne,KAAM0c,EAAQ/uB,MAAO4uB,EAASvuB,OAAQwuB,GACpDyB,EAAQ5d,wBAEZ,IAAIsc,EAAQwB,EACZ,KAAKC,EAAAA,EAAAA,GAAoB10B,GAAY,CACnC,MAAQsE,OAAQ6gB,GAAiBsN,EAAAA,EAAW/tB,MAC5CuuB,EAAQwB,EAAYrB,GAAWN,EAAW3N,CAC5C,CAEA,MAAM2O,EAAkBT,EAAWC,EAAY,GAAMN,EAASH,EAAU,GAClEkB,EAAkBX,EAAUG,EAAa,GAAMN,EAAQH,EAAW,GACxE,IAAIkB,EAAaV,EAAYT,EACzBoB,EAAaV,EAAaT,EAE9B,MAAM6B,EACJ,CACEl3B,EAAAA,GAAkBsC,OAClBtC,EAAAA,GAAkBqC,gBAClBrC,EAAAA,GAAkB0B,MAClB1B,EAAAA,GAAkB2B,gBAClBkrB,SAASxuB,KAuIf,SAAoC84B,GAClC,MAAMC,EAAqBt4B,SAASsC,cAA8B,4CAE5D,IAAEgf,IAAQiX,EAAAA,EAAAA,GAAqBF,EAASC,GAE9C,OAAOhX,EAAMgX,EAAmBE,WAC3BlX,EAAM+W,EAAQI,aAAeH,EAAmBE,UAAYF,EAAmBG,YACtF,CA7IQC,CAA2BV,GAG7B,CACF92B,EAAAA,GAAkBC,YAClBD,EAAAA,GAAkB0B,MAClB1B,EAAAA,GAAkB2B,eAClB3B,EAAAA,GAAkB8B,cAClB+qB,SAASxuB,KACLk4B,EAAaC,EACfD,EAAaC,EACJA,EAAaD,IACtBC,EAAaD,IAIjB,MAAMkB,EAAgB34B,SAAS44B,uBAAuB,SAAS,GACzDt3B,EAAQq3B,GAAiBv3B,EAAY8F,GAAiB8wB,EAASz4B,GAErE,IAAIkc,EACJ,GAAIkd,EAAe,CACjB,MAAM,IACJrX,EAAG,KAAEvH,EAAI,MAAErS,EAAK,OAAEK,GAChB4wB,EAAcve,wBAIlBqB,EAAS,CACPod,WAAY,OACZvX,IAAK,GAAGoV,MACR3c,KAAM,GAAG0c,MACTqC,gBAAiB,WACjBlP,UAAW,eAAe7P,EAAO0c,QAAanV,EAAMoV,iBARvChvB,EAAQ4uB,MACRvuB,EAASwuB,KAQtB7uB,MAAO,GAAG4uB,MACVvuB,OAAQ,GAAGwuB,MAEf,MACE9a,EAAS,CACP6F,IAAK,GAAGoV,MACR3c,KAAM,GAAG0c,MACT/uB,MAAO,GAAG4uB,MACVvuB,OAAQ,GAAGwuB,MACX3M,UAAW,eAAe2N,QAAqBC,iBAA8BC,MAAeC,OAIhGrhB,EAAAA,EAAAA,IAAgB,MACdshB,EAAAA,EAAAA,IAAYr2B,EAAOma,GACdkd,GAAe34B,SAASsd,KAAKpb,YAAYZ,GAC9CtB,SAASsd,KAAK9b,UAAUC,IAAI,oBAE5B4U,EAAAA,EAAAA,IAAgB,KACVsiB,IACFA,EAAc50B,MAAM80B,WAAa,IAGnCv3B,EAAMyC,MAAM6lB,UAAY,GAEpBwO,IACF92B,EAAMyC,MAAMg1B,QAAU,KAGxBl1B,EAAWvC,EAAO/B,GAElBuJ,WAAW,MACTuN,EAAAA,EAAAA,IAAgB,KACVrW,SAASsd,KAAKua,SAASv2B,IACzBtB,SAASsd,KAAKwa,YAAYx2B,GAE5BtB,SAASsd,KAAK9b,UAAU+b,OAAO,sBA3Ld,IA6LGyY,EAAAA,QAG9B,CsB6BMgD,CAAepD,GAAaC,GAAoBH,GAAa/F,IAAU1wB,cAExE,CACDiI,GAAeqC,GAAY6c,GAAWsO,GAAkB9qB,GAAQrE,GAAS1G,EAASU,EAClFs2B,GAAmBlG,GAAU+F,GAAaE,GAAYE,GAAsB72B,IAG9E,MAAMg6B,IAAczuB,EAAAA,EAAAA,GAAgB,IAAM+lB,MAEpC2I,IAAoB1uB,EAAAA,EAAAA,GAAiBM,IACrCA,EAAEC,kBAAkBouB,aAAeruB,EAAEC,OAAO8f,QAAQ,OAExDoO,KAEKxuB,GAAWiM,IAEZrZ,GACFyL,WAAW,KACT2nB,GAAe,CAAEE,OAAO,GAAS,CAAEC,gBAAgB,IACnDJ,GAAa,CAAE/lB,SAAQ8C,WAAUmJ,eAChCoQ,IAEH0J,GAAa,CAAE/lB,SAAQ8C,WAAUmJ,kBAI/BxD,IAAuB1I,EAAAA,EAAAA,GAAiB4uB,IACvCl6B,GAAqBuL,IAE1B0pB,GAAe,CAAEkF,QAASD,EAAald,cAAc,EAAMod,SAAUp6B,EAAiBo6B,WACtFlF,GAAQ,CAAE5e,IAAKtW,EAAiBsW,MAChC+a,QAGIgJ,IAAgB/uB,EAAAA,EAAAA,GAAgB,KACpCwpB,GAAgB,CACdwF,WAAY/uB,EACZmG,WAAY,CAAC8F,QAIjBlO,EAAAA,EAAAA,IAAU,IAAOoB,IAAS6vB,EAAAA,EAAAA,GAAsB,KAC9CR,YACGn4B,EAAY,CAACm4B,GAAarvB,MAE/BpB,EAAAA,EAAAA,IAAU,KACJjD,KAAY9F,KACdi6B,EAAAA,EAAAA,OAED,CAACj6B,GAAO8F,KAEX,MAAM6hB,IAAwB5c,EAAAA,EAAAA,GAAiBqC,IAC7C,GAAKA,IAAQqa,EAAb,CAEA,GAAkB,WAAdra,EAAK1N,KAAmB,CAE1B,KADkB0N,EAAK5N,YAAc4N,EAAK9N,cAAce,OAAOF,OArMzC,GAsMN,OAChBs0B,GAAsB,CAAErqB,OAAQgD,EAAK/N,YAAYhB,IACnD,CAEkB,YAAd+O,EAAK1N,MAAsBgzB,GAC7B8B,GAAwB,CAAExpB,SAAQ8C,WAAUosB,sBAAuB9sB,EAAKhO,QAAQf,IAT3C,IAanCupB,IAAc7c,EAAAA,EAAAA,GAAgB,CAACmP,EAAuB6Q,KAC1D,GAAkB,IAAdA,GAAmB7qB,GAAU,OAEjC,GAAkB,eAAdga,EAAKxa,KAAuB,CAC9B,MAAQC,MAAOw6B,EAAW36B,WAAY46B,GAAmBlgB,EACnDmgB,EAAYD,EAAiBrP,EACnC,OAAIsP,GAAa,GAAKA,EAAYF,EAAUh6B,OACnC,CAAET,KAAM,aAAcC,MAAOw6B,EAAW36B,WAAY66B,QAG7D,CACF,CAEA,GAAkB,WAAdngB,EAAKxa,KAAmB,CAC1B,MAAQL,YAAai7B,EAAiBh7B,cAAei7B,EAAmB/6B,WAAY46B,GAAmBlgB,EACjGmgB,EAAYD,EAAiBrP,EACnC,OAAIsP,GAAa,GAAKE,GAAqBF,EAAYE,EAAkBl6B,OAAOF,OACvE,CACLT,KAAM,SACNL,YAAai7B,EACbh7B,cAAei7B,EACf/6B,WAAY66B,QAIhB,CACF,CAEA,GAAkB,qBAAdngB,EAAKxa,KAA6B,CACpC,MAAQN,QAASo7B,EAAsBh7B,WAAYi7B,GAA8BvgB,EAC3EmgB,EAAYI,EAA6B1P,EAC/C,OAAIsP,GAAa,GAAKG,EACb,CAAE96B,KAAM,mBAAoBN,QAASo7B,EAAsBh7B,WAAY66B,QAGhF,CACF,CAEA,MAAQj7B,QAASs7B,EAAal7B,WAAY46B,GAAmBlgB,EAEvDxZ,GAAYi6B,EAAAA,EAAAA,IAAoBD,GACtC,GAAIh6B,EAAW,CACb,MAAM25B,EAAYD,EAAkBrP,EAEpC,GAAIsP,GAAa,GAAKA,EAAY35B,EAAUY,cAAcnB,OACxD,MAAO,CAAET,KAAM,UAAWN,QAASs7B,EAAal7B,WAAY66B,EAEhE,CAEA,MAAMr3B,EAAQsyB,IAAiBsF,QAAQF,EAAYr8B,IACnD,QAAcgD,IAAV2B,EAAqB,OACzB,MACM63B,EAAgBvF,GADJtyB,EAAQ+nB,GAEpB+P,EAAczH,IAAewH,GACnC,OAAIC,EACK,CAAEp7B,KAAM,UAAWN,QAAS07B,QADrC,IAOIC,IAAsBhwB,EAAAA,EAAAA,GAAiBqC,IAC3C,IAAKA,EAEH,YADAosB,KAIF,MAAMwB,EAA2B,WAAd5tB,EAAK1N,KACpB0N,EAAK/N,YAAYhB,GAAmB,YAAd+O,EAAK1N,KACzB0N,EAAKhO,QAAQ4L,YAAS3J,EACtB45B,EAA8B,YAAd7tB,EAAK1N,KAAqB0N,EAAKhO,QAAQf,QAAKgD,EAC5D65B,EAAoC,eAAd9tB,EAAK1N,KAAwB0N,EAAKzN,WAAQ0B,EAEtEuO,GAAgB,CACd9P,OAAQA,EACRkL,OAAQgwB,EACR/jB,UAAWgkB,EACX17B,gBAAiB27B,EACjB17B,WAAY4N,EAAK5N,WACjBkR,aAA4B,WAAdtD,EAAK1N,KACnBgzB,sBACC,CACD/hB,uBAAuB,MAIrBwqB,IAAqBpwB,EAAAA,EAAAA,GAAgB,KAGzC,IAFmBzL,GAAee,OAAOF,QACpCZ,GAAiBY,QAAUm1B,IAAiBn1B,QAAU,IACzC,IAAM+yB,GAEtB,YADAsG,KAIF,MAAM4B,EAAYxT,GAAYsL,IAAc,GACxCkI,EACFL,GAAoBK,GAII,WAArBlI,GAAYxzB,OAAqBwN,EAAAA,EAAAA,IAASgmB,GAAY7zB,YAAYhB,KAA6B,eAArB60B,GAAYxzB,MAK3F85B,OAGIjuB,IAAOC,EAAAA,EAAAA,KAEb,OACEpN,EAAAA,GAAAA,IAAC2d,GAAAA,EAAc,CACb1d,GAAG,cACH8L,OAAQA,GACR2J,SAAUA,EACVunB,0BAAwB,EACxBC,kBAAmB7I,EAA4Bl0B,SAAA,EAE/CH,EAAAA,GAAAA,IAAA,OACEE,UAAU,oBACVuW,IAAKtJ,GAAK8kB,MAAQ,WAAQhvB,EAC1B,4BAAwBk6B,EAAAA,KAAYC,EAAAA,UAAmBn6B,EAAU9C,SAAA,CAEhEX,KACCY,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,qBACVwS,OAAK,EACLpS,KAAK,UACL2N,MAAM,oBACN0E,UAAWxF,GAAK,SAChBgB,QAASitB,GAAYj7B,UAErBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAGfvN,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CAACC,UAAW9G,GAAa5sB,QAAU+D,KAAMipB,GAAgBz2B,UAClEC,EAAAA,GAAAA,GAACqyB,GAAU,CAETzjB,KAAM8lB,IADDvzB,IAAOtB,OAIhBG,EAAAA,GAAAA,GAACsQ,GAAkB,CACjB5H,UAAWwC,GACX5D,QAASA,GACTsH,KAAM8lB,GACN7lB,eAAgBA,EAChB0B,gBAAiBA,GACjBI,eAAgBgsB,GAChBnsB,eAAgBmmB,GAChBjmB,mBAAoBsqB,GACpBpqB,UAAW0qB,MAEbt7B,EAAAA,GAAAA,GAAC0L,GAAiB,CAChBC,OAAQ+qB,GACR7qB,QAAS+qB,GACT50B,MAAOJ,EACPgK,OAAQ/K,GAAahB,SAGzBG,EAAAA,GAAAA,GAACgpB,GAAiB,CAChBpa,KAAM8lB,GACNvL,sBAAuBA,GACvBF,mBAAoBA,EACpBC,SAAUA,EACVE,YAAaA,GACb5c,OAAQA,EACR9E,QAASA,GACTlG,MAAOA,GACP8N,SAAUA,EACV6tB,cAAet8B,GAAahB,GAC5ByB,OAAQA,EACRqK,OAAQA,GACRwc,UAAWA,GACX7gB,QAASA,GACT0f,cAAeA,EACfnb,QAASmvB,GACT3R,WAAYkT,GACZjnB,SAAUA,EACV4R,cAAe+T,GACfhmB,qBAAsBA,WCne9B,GAAuB,WAAvB,GAAkF,WCAlF,GAA6C,WAA7C,GAA4K,WAA5K,GAAwM,WAAxM,GAA4O,WAA5O,GAAiQ,WAAjQ,GAAuS,WAAvS,GAA2Z,WAA3Z,GAA+c,WAA/c,GAAie,WAAje,GAAof,WAApf,GAA6gB,WAA7gB,GAAgkB,WAAhkB,GAAwlB,WAAxlB,GAAm1B,WAAn1B,GAAy+B,WAAz+B,GAAopC,WAAppC,GAAiuC,WAAjuC,GAA+yC,WAA/yC,GAAy7C,WCgBn7CmoB,GAAgB,IAAMxnB,EAAAA,EACtBynB,GAAgB,GAAMznB,EAAAA,EAsJ5B,SAASzS,GAAYC,EAAgBk6B,GAAU,EAAOC,GAAW,GAC/D,MAAMl6B,EAAQtB,SAASuB,cAAc,OACrCD,EAAME,UAAUC,IAAK+5B,EDzK+zC,WAApB,YC2Kh0C,MAAM95B,EAAM,IAAIC,MAKhB,GAJAD,EAAIE,WAAY,EAChBF,EAAIG,cAAgBC,EAAAA,EACpBJ,EAAIF,UAAUC,ID9K81C,YCgLx2C85B,EAAS,CACX,MAAM5zB,EAAS3H,SAASuB,cAAc,UACtCoG,EAAOnG,UAAUC,IAAIga,IACrB/Z,EAAI+G,OAAS,KACX,MAAMgzB,EAAM9zB,EAAOG,WAAW,KAAM,CAAE4zB,OAAO,KACvC,MACJh0B,EAAK,OACLK,GACErG,GAEJ2U,EAAAA,EAAAA,IAAgB,KACd1O,EAAOD,MAAQA,EACfC,EAAOI,OAASA,EAEZ4zB,EAAAA,KACFF,EAAIG,OAAS,aAGfH,EAAInlB,UAAU5U,GAAK,GAAa,EAAagG,EAAQm0B,EAAY9zB,EAAS8zB,GAErEF,EAAAA,KACH9zB,EAAAA,EAAAA,GAAS4zB,EAAK,EAAG,EAAG/zB,EAAOK,EAjCtB,EACI,MAoCfrG,EAAIK,IAAMV,EACVC,EAAMY,YAAYyF,EACpB,MACEjG,EAAIK,IAAMV,EACVC,EAAMY,YAAYR,GAGpB,OAAOJ,CACT,CAEA,SAASkB,GAASjD,EAA2Bu8B,GAC3C,IAAIp5B,EACJ,MAAMC,EAAgB,KAAIo5B,EAAAA,EAAAA,IAAmBD,KAE7C,OAAQv8B,GACN,KAAKy8B,EAAAA,GAAkBC,YACrBv5B,EAAoB,gBAAgBw5B,KACpC,MACF,KAAKF,EAAAA,GAAkB/4B,mBACrBP,EAAoB,mDACpB,MACF,KAAKs5B,EAAAA,GAAkBG,SACrBz5B,EAAoB,yBACpB,MACF,KAAKs5B,EAAAA,GAAkBh5B,aACrBN,EAAoB,qCAIxB,MAAMe,EAAYzD,SAASsC,cAA2BI,GAChDgB,EAAWD,GAAaA,EAAUE,iBAAmC,GAAGhB,SAE9E,MAAO,CACLc,YACAG,QAASF,IAAW,GAExB,CCrMO,SAAS04B,IAAiB,MAC/BxU,EAAK,YACLyU,EAAW,kBACXC,EAAiB,yBACjBC,EAAwB,WACxBC,IAQA,MAAMC,EA1Ce,IA0CgBH,EA9CP,IAEP,KA6CjBI,GAAoBvrB,KAAKya,IAAIyQ,GAAe,IA3C7B,IA4CfE,EAhDwB,IAEP,MA+CjBI,GAAcC,EAAAA,GAAAA,KAAoBH,EAAaC,GAAoB9U,GAEzE,OAAO4U,GAAcG,EAAcA,CACrC,CCtDe,SAASE,KACtB,MAAQn1B,MAAOmhB,EAAa9gB,OAAQ6gB,IAAiBG,EAAAA,GAAAA,KACrD,OAAO/iB,EAAAA,EAAAA,IAAQ,IDMV,SAA6B6iB,EAAqBD,GAOvD,MAAMhB,EAyCR,SAAwBkV,EAAmBC,EAAoBC,EAAkBC,GAC/E,MAAMC,EAAaF,EAzDK,KA0DlBG,EAAcF,EAzDK,IA2DzB,OAAO9rB,KAAK4a,IAAImR,EAAYC,EAC9B,CA9CgBC,CAfU,EACC,EAc2CvU,EAAaD,GAE3EyU,GAAmBT,EAAAA,GAAAA,IAfK,IAewChV,GAChE0V,GAAaV,EAAAA,GAAAA,IAdI,IAckChV,GAEzD,MAAO,CACL2V,YAAa,CACX71B,MAAO21B,EACPt1B,QAAQ60B,EAAAA,GAAAA,IApBmB,IAoB2BhV,IAExD4V,MAAO,CACL91B,MAAO41B,EACPv1B,QAAQ60B,EAAAA,GAAAA,IAtBY,IAsB2BhV,IAEjDA,QACA6V,cAAeJ,EAAmBC,EAClCI,gBAAiBJ,EAAaD,EAElC,CC/BuBM,CAAoB9U,EAAaD,GAAe,CAACC,EAAaD,GACrF,CCFe,SAASgV,GACtBC,EAAsBC,GAAuB,EAAOC,GAAqB,GAEzE,MAAMC,EAAgBH,GAAS,YAAaA,EACtCI,EAAiBJ,GAAS,cAAeA,EACzCK,IAAUF,IAAgBG,EAAAA,EAAAA,IAAeN,GACzCO,EAAiBJ,GAAiBh1B,QAAQ60B,EAAMQ,aAEtD,IAAIC,EACAN,IACEH,EAAM7sB,QAAQ/Q,OAAOq+B,YACvBA,EAAYT,EAAM7sB,QAAQ/Q,MAAMq+B,UAAUl3B,SAExCy2B,EAAM7sB,QAAQ9Q,OAAOo+B,WAAWl3B,UAClCk3B,EAAYT,EAAM7sB,QAAQ9Q,MAAMo+B,UAAUl3B,UAI9C,MAAMm3B,EAAcP,GAAgBQ,EAAAA,EAAAA,IAAkBX,QAAS/8B,EACzD4F,GAAiBJ,EAAAA,EAAAA,GAASi4B,GAC1Bh5B,EAAUyD,QAAQg1B,GAAiBH,EAAM7sB,QAAQ9Q,OACjDu+B,EAAUT,GAAiBH,EAAM7sB,QAAQ9Q,OAAOu+B,QAChDC,EAAgBV,GAAgBQ,EAAAA,EAAAA,IAAkBX,EAAO,aAAU/8B,EACnE69B,GAAgBr4B,EAAAA,EAAAA,GAASo4B,GAAgBb,EAAOt4B,EAAUgB,EAAAA,GAAewQ,YAAcxQ,EAAAA,GAAeC,SACtGo4B,EAAer5B,GAAWy4B,GAAgBQ,EAAAA,EAAAA,IAAkBX,EAAO,QAAQ,QAAQ/8B,EACnF+9B,GAAev4B,EAAAA,EAAAA,GAASs4B,GAAef,EAAOt3B,EAAAA,GAAewQ,aAE7D+nB,EAAc91B,QAAQ21B,GAAiBE,GACvC33B,EAAgB3B,EAAUmB,EAAiBi4B,GAAiBj4B,EAC5Dq4B,GAAYr4B,IAAmBo4B,EAE/BE,EAAclB,GAAwBE,IAAkBH,EAAMoB,WAC9DC,EAAelB,GAAgBQ,EAAAA,EAAAA,IAAkBX,EAAO,iBAAc/8B,EAG5E,MAAO,CACLk9B,gBACAC,iBACAC,UACAE,iBACAE,YACAC,cACA73B,iBACAnB,UACAk5B,UACAC,gBACAC,gBACAC,eACAC,eACAC,cACA53B,gBACA63B,WACAC,cACAG,mBApBwB74B,EAAAA,EAAAA,GAAS44B,GAAeF,IAAgBjB,GAsBpE,C,wCC7DA,SAA2I,WAA3I,GAA6J,WAA7J,GAAuM,WC6HvM,IAAenhC,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAYtN,IAC9B,MAAMyN,GAAWC,EAAAA,EAAAA,KAAe1N,GAEhC,MAAO,CACLsK,OAAQmD,EAASqyB,aAAaC,mBAC9BC,YAAahgC,EAAOigC,QAAQD,YAC5BxB,sBAAsB0B,EAAAA,EAAAA,KAA2BlgC,KANjCsN,CApGK6yB,EAAG71B,SAAQ01B,cAAaxB,2BAC/C,MAAM,mBACJ4B,EAAkB,oBAClBC,EAAmB,iBACnBC,EAAgB,iBAChBC,IACE51B,EAAAA,EAAAA,OACG61B,EAAcC,IAAmB31B,EAAAA,EAAAA,KAAS,IAEjD5B,EAAAA,EAAAA,IAAU,KACR,IAAK82B,EAAa,OAClB,MAAMU,GAAaC,EAAAA,GAAAA,MACfX,EAAYY,eAAiBZ,EAAYY,cAAgBF,GAC3DD,GAAgB,IAEjB,CAACT,EAAa11B,IAEjB,MAAMoB,GAAOC,EAAAA,EAAAA,KAEPk1B,GAAkB31B,EAAAA,EAAAA,GAAgB,KACtCu1B,GAAgB,KAGZ9G,GAAczuB,EAAAA,EAAAA,GAAgB,KAClCk1B,EAAmB,CAAE91B,QAAQ,MAGzBw2B,GAAiB51B,EAAAA,EAAAA,GAAgB,KAChCszB,GAKL6B,IACAC,EAAiB,CACfx0B,MAAOJ,EAAK,iBACZnM,QAASmM,EAAK,uBAEhB00B,EAAmB,CAAE91B,QAAQ,KAT3Bi2B,EAAiB,CAAEQ,eAAgB,cAYvC,OACExiC,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJtN,UAAU,uBACVuiC,iBDrEiB,WCsEjB12B,OAAQA,EACR22B,QAAM,EACNz2B,QAASmvB,EAAYj7B,SAAA,EAErBC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN3N,KAAK,UACLJ,UD9EwC,WC+ExCyS,UAAWxF,EAAK,SAChBgB,QAASitB,EAAYj7B,UAErBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAEbvN,EAAAA,GAAAA,GAAA,OAAKF,UDpF8D,WCoFhCC,UACjCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,2BAEbvN,EAAAA,GAAAA,GAAA,OAAKF,UDvFiF,WCuFzDC,SAAEgN,EAAK,kBACpC/M,EAAAA,GAAAA,GAAA,OAAKF,UDxF0G,WCwF5EC,SAChCgN,EAAK8yB,EAAuB,kBAAoB,6BAEnDjgC,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPziC,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAiB,gBAC3CglB,WAAS,EACTC,UAAQ,EACRC,aAAa1iC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,eAAezN,UAAW0d,KAAgBzd,SAAA,EAElEC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,EAAK,sBAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,WAAWqW,EAAAA,GAAAA,GAAe,WAAYqH,IAAiBzd,SAAEgN,EAAK,oCAEtEnN,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPziC,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAiB,gBAC3CglB,WAAS,EACTC,UAAQ,EACRC,aAAa1iC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,iBAAiBzN,UAAW0d,GAAa,mBAAezd,SAAA,EAEhFC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,EAAK,oBAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,WAAWqW,EAAAA,GAAAA,GAAe,WAAYqH,IAAiBzd,SAAEgN,EAAK,kCAEtE/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UD9GyK,WC+GzKqgB,SAAU0hB,EACVc,SAAU9C,EACV+C,qBAAsB/C,EACtB9xB,QAASo0B,EAAepiC,SAEtB8/B,EACEgC,GACG7hC,EAAAA,GAAAA,GAAC6iC,GAAAA,EAAS,CAACC,QAAQ,cAAcC,OAAQ1B,EAAaY,cAAgBe,MAAOd,IAC9En1B,EAAK,qBAHcA,EAAK,6B,gBCvEtC,UAAepO,EAAAA,EAAAA,IA/Bf,UAAiC,OAC/BgN,EAAM,MAAEi0B,EAAK,QAAE/zB,IAEf,MAAM,YAAEo3B,EAAW,cAAEC,IAAkBl3B,EAAAA,EAAAA,MAEjCe,GAAOC,EAAAA,EAAAA,KAEPm2B,GAAyBxjC,EAAAA,EAAAA,IAAY,KACpCigC,IAILsD,IACAD,EAAY,CAAEr3B,OAAQg0B,EAAMh0B,OAAQw3B,QAASxD,EAAM//B,KACnDgM,MACC,CAACA,EAAS+zB,IAEb,OACE5/B,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQA,EACRE,QAASA,EACTsB,MAAOJ,EAAK,oBACZ+H,KAAM/H,EAAK,uBACXu2B,aAAcv2B,EAAK,UACnBw2B,eAAgBJ,EAChBK,sBAAoB,EACpB1jC,UAAU,wBAGhB,G,gECYA,UAAenB,EAAAA,EAAAA,IArCf,UAAuB,GACrBkB,EAAE,eACF4jC,EAAc,cACdrP,EAAa,YACbsP,EAAW,UACXC,EAAS,SACTC,IAEA,MAAM72B,GAAOC,EAAAA,EAAAA,MAEN62B,EAAaC,IAAkB33B,EAAAA,EAAAA,IAAiB,IACjD43B,GAAeh8B,EAAAA,EAAAA,IAAQ,KAC3B,MAAMi8B,GAAcP,GAAkB,IAAI9F,OAAQE,GAAWA,IAAWzJ,GACxE,OAAO6P,EAAAA,GAAAA,KAAOC,EAAAA,GAAAA,IAAmB,CAAEC,IAAK,IAAIT,GAAe,MAAOM,GAAaI,MAAOP,EAAa3iC,KAAM,WACxG,CAACuiC,EAAgBrP,EAAeyP,EAAaH,IAEhD,OACE1jC,EAAAA,GAAAA,GAACqkC,GAAAA,EAAU,CAETC,QAASP,EACTL,YAAaA,GAAea,GAAAA,EAC5BC,kBAAmBb,EACnBc,YAAaZ,EACba,kBAAmB33B,EAAK,UACxB43B,cAAe,GAAG9kC,kBAClB+kC,cAAY,EACZC,oBAAkB,EAClBC,eAAa,EACbC,oBAAqBnB,EACrBoB,eAAgBlB,EAChBmB,eAAa,EACbC,YAAU,EACVC,cAAc,YAdTtlC,EAiBX,G,4BCrDA,MC8FA,IAAelB,EAAAA,EAAAA,IAlEf,UAAsB,SACpB6a,EAAQ,eAAEiqB,EAAc,UAAE2B,EAAS,cAAEhR,EAAa,QAAEvoB,IAEpD,MAAM,iBAAEw5B,IAAqBr5B,EAAAA,EAAAA,MAEvBe,GAAOC,EAAAA,EAAAA,MACN62B,EAAaC,IAAkB33B,EAAAA,EAAAA,IAAiB,KAChDm5B,EAAeC,IAAoBp5B,EAAAA,EAAAA,KAAkB,IACrDq5B,EAAuBC,IAA4Bt5B,EAAAA,EAAAA,IAAmB,IAEvEu5B,GAAiB39B,EAAAA,EAAAA,IAAQ,KACrB07B,GAAkB,IAAI9F,OAAQE,GAAWuH,EAAUvH,IAAS8H,eACnE,CAAClC,EAAgB2B,IAEdrB,GAAeh8B,EAAAA,EAAAA,IAAQ,KAC3B,MAAMi8B,GAAcP,GAAkB,IAAI9F,OAAQ99B,GAAOA,IAAOu0B,GAChE,OAAO6P,EAAAA,GAAAA,KAAOC,EAAAA,GAAAA,IAAmB,CAAEC,IAAK,IAAIuB,KAAmB1B,GAAaI,MAAOP,EAAa3iC,KAAM,WACrG,CAACwkC,EAAgBjC,EAAgBrP,EAAeyP,KAEnD+B,EAAAA,GAAAA,GAAsB,EAAEC,OACjBA,GAAgBrsB,IACnB+rB,GAAiB,GACjBE,EAAyBC,KAE1B,CAAClsB,EAAUksB,IAEd,MAAMI,GAAiCnmC,EAAAA,EAAAA,IAAagN,IAClD84B,EAAyB94B,GACzB44B,GAAiB,IAChB,IAEGQ,GAAex5B,EAAAA,EAAAA,GAAgB,KACnC84B,EAAiB,CAAEW,QAASR,IAC5B35B,MAGF,OACEjM,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAACqkC,GAAAA,EAAU,CACTC,QAASP,GAAgB,GACzBL,YAAa8B,EACbf,YAAaZ,EACba,kBAAmB33B,EAAK,UACxB43B,cAAc,8BACdC,cAAY,EACZC,oBAAkB,EAClBE,oBAAqBe,EACrBd,eAAgBlB,EAChBmB,eAAa,EACbC,YAAU,EACVC,cAAc,cAGhBnlC,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GDjFS,WCiF2BmvB,GDjFP,YCiFuCvlC,UAClFC,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAASb,EACTv3B,QAASg4B,EACTxzB,UAAWxF,EAAK,QAAQhN,UAExBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,gBAKrB,GC5FA,IAAgB,MAAQ,WAAW,OAAS,WAAW,YAAc,WAAW,YAAc,WAAW,QAAU,WAAW,QAAU,WAAW,MAAQ,WAAW,KAAO,WAAW,OAAS,WAAW,QAAU,WAAW,MAAQ,WAAW,KAAO,WAAW,OAAS,WAAW,cAAgB,WAAW,OAAS,WAAW,KAAO,WAAW,OAAS,YCuD9V64B,GAA2B,CAAC,CAChC74B,KAAM,6BACNZ,MAAO,YACPkB,MAAO,CAAC,UAAW,WACnBoF,KAAM,iBACNozB,QAAS,gBACR,CACD94B,KAAM,6BACNZ,MAAO,WACPkB,MAAO,CAAC,UAAW,WACnBoF,KAAM,cACNozB,QAAS,uBACR,CACD94B,KAAM,iCACNZ,MAAO,eACPkB,MAAO,CAAC,UAAW,WACnBoF,KAAM,kBACNozB,QAAS,gBACR,CACD94B,KAAM,qCACNZ,MAAO,SACPkB,MAAO,CAAC,UAAW,WACnBoF,KAAM,eACNozB,QAAS,iBACR,IAEEC,GAAO,SAAPA,GAAO,OAAPA,EAAAA,EAAO,qBAAPA,EAAAA,EAAO,yBAAPA,EAAAA,EAAO,+BAAPA,EAAAA,EAAO,uBAAPA,CAAO,EAAPA,IAAO,IAgUZ,UAAe3nC,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAsBtN,IACxC,MACE8/B,aAAa,QACXiC,EAAO,OAAEx3B,KAETmD,EAAAA,EAAAA,KAAe1N,GACbu+B,EAASh0B,GAAUw3B,GACrBmD,EAAAA,EAAAA,KAAgBllC,EAAQuK,EAAQw3B,QAChCvgC,EAEJ,MAAO,CACL+8B,MAAOA,GAAS,YAAaA,EAAQA,OAAQ/8B,EAC7C2jC,WAAY5G,GAAS,eAAgBA,EAAQA,EAAM4G,gBAAa3jC,EAChE4gC,eAAgBpiC,EAAOolC,aAAaT,QACpCZ,UAAW/jC,EAAOqlC,MAAMC,KACxBvS,cAAe/yB,EAAO+yB,gBAfNzlB,CAzTpB,UAAuB,OACrBhD,EAAM,MACNi0B,EAAK,WACL4G,EAAU,eACV/C,EAAc,UACd2B,EAAS,cACThR,EAAa,QACbvoB,IAEA,MAAM,iBAAE+6B,EAAgB,qBAAEC,IAAyB76B,EAAAA,EAAAA,MAE7Ce,GAAOC,EAAAA,EAAAA,MACN85B,EAAaC,EAAWC,IAAc/nC,EAAAA,EAAAA,IAAQ,IAC9CgoC,EAASC,IAAc/6B,EAAAA,EAAAA,IAAyCq6B,IAChEW,EAAUC,IAAej7B,EAAAA,EAAAA,IAASyzB,GAAOyH,cACzCnK,EAAWoK,IAAgBn7B,EAAAA,EAAAA,IAAkBm6B,GAAQW,UACrDM,EAAyBC,IAA8Br7B,EAAAA,EAAAA,IAA4B,aACpFs7B,EAAevK,IAAcoJ,GAAQW,QAErCvB,GAAiB39B,EAAAA,EAAAA,IAAQ,KACrB07B,GAAkB,IAAI9F,OAAQE,GAAWuH,EAAUvH,IAAS8H,eACnE,CAAClC,EAAgB2B,IAEdzB,GAAY57B,EAAAA,EAAAA,IAAQ,KACxB,GAAIm1B,IAAcoJ,GAAQoB,aACnBT,GAASU,cAAchmC,QAAUslC,EAAQU,aAAa,KAAOvT,GAElE,MAAO,CAACA,IAIT,CAAC8I,EAAW9I,EAAe6S,GAASU,eAEjCC,GAAqB7/B,EAAAA,EAAAA,IAAQ,IAC7Bw/B,IAA4BN,GAAST,WAAmB,GACrDS,GAASY,cAAgB,GAC/B,CAACN,EAAyBN,GAASY,aAAcZ,GAAST,aAEvDsB,GAA2Bv7B,EAAAA,EAAAA,GAAiBw7B,IAChDb,EAAW,IACND,EACHU,aAAcI,GAAQpmC,OAASomC,GAAQpK,OAAQ99B,GAAOA,IAAOu0B,GAAiB,CAACA,OAI7E4T,GAA0Bz7B,EAAAA,EAAAA,GAAiBw7B,IAC/Cb,EAAW,IACND,EACHY,aAAcE,EACdvB,WAAYe,OAIhBh9B,EAAAA,EAAAA,IAAU,KACJoB,IACF27B,EAAahB,GAAQW,SACrBF,MAED,CAACp7B,KAEJpB,EAAAA,EAAAA,IAAU,KACR28B,EAAWV,IACV,CAACA,IAEJ,MAAMyB,GAAyB17B,EAAAA,EAAAA,GAAgB,KACzC2wB,IAAcoJ,GAAQW,QAK1BK,EAAahB,GAAQW,SAJnBD,MAmCEkB,GAAuB37B,EAAAA,EAAAA,GAAgB,KAC3C66B,GAAaD,KAKTpB,GAAex5B,EAAAA,EAAAA,GAAgB,KACnCq6B,EAAiB,CACfh7B,OAAQg0B,EAAOh0B,OACfw3B,QAASxD,EAAO//B,GAChBonC,QAASA,IAEPrH,EAAOyH,cAAgBF,GACzBN,EAAqB,CAAEj7B,OAAQg0B,EAAOh0B,OAAQw3B,QAASxD,EAAO//B,GAAIwnC,YAAaF,IAEjFH,MAkKF,OACEpnC,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQm7B,EACRhnC,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAO2qB,MAAO,wBACxCt8B,QAASm7B,EACToB,YAAU,EACVt8B,oBAAqBD,EAAQ9L,SAAA,EAE7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAO6qB,OAAOtoC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAO8qB,YAAa,gBAC9Ch2B,OAAK,EACLzE,MAAM,cACN3N,KAAK,UACL6N,QAASk6B,EACT11B,UAA0BxF,EAAf06B,EAAoB,cAAsB,gBAAgB1nC,UAErEC,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAe,sBAAuBsxB,GAAgB,mBAExEznC,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CAAC1vB,KAAK,YAAY2vB,UAAWA,EAAUn9B,SA7IxD,WACE,OAAQm9B,GACN,KAAKoJ,GAAQW,QACX,OAAOjnC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAO+qB,YAAYxoC,SAAEgN,EAAK,gCAClD,KAAKu5B,GAAQoB,UACX,OAAO1nC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAO+qB,YAAYxoC,SAAEgN,EAAK,0CAClD,KAAKu5B,GAAQkC,aACX,OAAOxoC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAO+qB,YAAYxoC,SAAEgN,EAAK,kBAClD,KAAKu5B,GAAQmC,SACX,OAAOzoC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAO+qB,YAAYxoC,SAAEgN,EAAK,4CAEtD,CAmIS27B,SAGL1oC,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACTC,UAAWA,EACX3vB,KAAK,YACLo7B,eAAe,yBACf7oC,UAAW0d,GAAOzK,QAAQhT,SAxIhC,SAAuByZ,GACrB,OAAQ0jB,GACN,KAAKoJ,GAAQW,QACX,OAsCN,WACE,MAAM2B,EAAgBhJ,GAAQiJ,EAAAA,GAAAA,IAASjJ,EAAMkJ,WAAalJ,EAAM3M,MAAQ,EAExE,OACErzB,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOurB,QAAQhpC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAOrQ,MAAMpN,SAAEgN,EAAK,uCACnC/M,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOwrB,KAAKjpC,SACzBqmC,GAAQ3yB,IAAKw1B,IACZrpC,SAAAA,GAAAA,IAAA,SAEEE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAOyrB,OAAQA,EAAOt8B,QAAUs6B,GAAST,YAAchpB,GAAO0rB,SAASnpC,SAAA,EAEjGC,EAAAA,GAAAA,GAAA,SACEkB,KAAK,QACLqM,KAAK,gBACLzN,UAAW0d,GAAO2rB,MAClBx8B,MAAOs8B,EAAOt8B,MACdu8B,QAASD,EAAOt8B,QAAUs6B,GAAST,WACnC/4B,SAAUA,KAAM27B,OA5JAC,EA4JuBJ,EAAOt8B,WA3J5Du6B,EAAW,IACND,EACHT,WAAY6C,IAHhB,IAAgCA,GA6JhBC,2BAAyB,KAE3BtpC,EAAAA,GAAAA,GAAA,QACEF,UAAW0d,GAAOvK,KAClBnN,MAAO,iBAAiBmjC,EAAOp7B,MAAM,mBAAmBo7B,EAAOp7B,MAAM,KAAK9N,UAE1EC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAM07B,EAAOh2B,UAErBrT,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAO+rB,cAAcxpC,SAAA,EACnCC,EAAAA,GAAAA,GAAA,QAAMF,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAOgsB,aAAazpC,SAAEgN,EAAKk8B,EAAO17B,QACjE07B,EAAO5C,UACNzmC,EAAAA,GAAAA,IAAA,OACE6pC,SAAU,EACVC,KAAK,SACL5pC,UAAW0d,GAAO1b,OAClB,aAAYiL,EAAK,QACjBgB,QAAUlB,KAtK9B,SAA2BA,EAAqC/K,GAG9D,QAFA+B,EAAAA,EAAAA,GAAUgJ,GAEF/K,GACN,IAAK,eACHwlC,EAAahB,GAAQkC,cACrB,MACF,IAAK,eACHlB,EAAahB,GAAQoB,WACrB,MACF,IAAK,eACHJ,EAAahB,GAAQmC,UACrBjB,EAA2B,aAC3B,MACF,IAAK,sBACHF,EAAahB,GAAQmC,UACrBjB,EAA2B,YAGjC,CAmJsCmC,CAAkB98B,EAAGo8B,EAAO5C,UAAatmC,SAAA,EAE3DC,EAAAA,GAAAA,GAAA,QAAMF,UAAW0d,GAAOosB,YAAY7pC,UAjI9B+B,EAiIiDmnC,EAAO5C,QAhIjE,iBAAXvkC,EAC4B,IAA1B4jC,EAAe/jC,OACVoL,EAAK,wCAGgB,IAA1B24B,EAAe/jC,QACVkyB,EAAAA,GAAAA,IAAa9mB,EAAMq4B,EAAUM,EAAe,KAG9C34B,EAAK,2BAA4B24B,EAAe/jC,OAAQ,KAGjD,iBAAXG,GAAqD,cAAxBmlC,GAAST,YAC1B,wBAAX1kC,GAA4D,aAAxBmlC,GAAST,WAC5CS,GAASY,cAAclmC,OAIQ,IAAhCslC,EAAQY,aAAalmC,OAChBoL,EAAK,mCAAmC88B,EAAAA,EAAAA,IAAgBzE,EAAU6B,EAAQY,aAAa,MAGzF96B,EAAK,kCAAmCk6B,EAAQY,aAAalmC,OAAQ,KAPnEoL,EAAK,oCAUXk6B,GAASU,cAAgD,IAAhCV,EAAQU,aAAahmC,OAIf,IAAhCslC,EAAQU,aAAahmC,QAChBkoC,EAAAA,EAAAA,IAAgBzE,EAAU6B,EAAQU,aAAa,KAGjD56B,EAAK,2BAA4Bk6B,EAAQU,aAAahmC,OAAQ,KAP5DoL,EAAK,gDAuGI/M,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,iBA7BZ07B,EAAOt8B,OArG1B,IAA0B7K,UA0IpB9B,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOurB,QAAQhpC,UAC7BH,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAAC5iB,QAAM,EAAC5R,QAASm6B,EAAqBnoC,SAAA,EAC7CC,EAAAA,GAAAA,GAAA,QAAAD,SAAOgN,EAAK,gBACZ/M,EAAAA,GAAAA,GAAC8pC,GAAAA,EAAQ,CACPjqC,GAAG,sBACHqN,MAAOH,EAAK,aACZm8B,QAAS/B,EACT1E,UAAQ,UAId7iC,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOusB,OAAOhqC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOqZ,KAAK92B,SAAEgN,EAAK,gBAAiB67B,MACpD5oC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOwsB,OAAOjqC,UAC5BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACG,QAASg4B,EAAahmC,SAAEgN,EAAK,mCAK/C,CAxGak9B,GACT,KAAK3D,GAAQkC,aACX,OACExoC,EAAAA,GAAAA,GAACkqC,GAAY,CAEX1wB,SAAUA,EACViqB,eAAgBA,EAChBrP,cAAeA,EACfgR,UAAWA,EACXv5B,QAASo8B,GALL,iBAQV,KAAK3B,GAAQmC,SACX,OACEzoC,EAAAA,GAAAA,GAACmqC,GAAa,CAEZtqC,GAAG,YACH4jC,eAAgBA,EAChBrP,cAAeA,EACfsP,YAAakE,EACbhE,SAAUoE,GALN,aAQV,KAAK1B,GAAQoB,UACX,OACE1nC,EAAAA,GAAAA,GAACmqC,GAAa,CAEZtqC,GAAG,aACH4jC,eAAgBA,EAChBE,UAAWA,EACXvP,cAAeA,EACfsP,YAAauD,GAASU,aACtB/D,SAAUkE,GANN,cAUd,MAuGF,I,qFChZO,MAAMsC,GAAqB,oC,gECIlC,MAIMC,GAAc,IAAItjC,IAClBujC,GAAY,IAAIvjC,IAChBwjC,GAAkB,IAAIxjC,IAErByR,eAAgBgyB,GACrBjzB,EACAkG,EAAQ,EACRgtB,EAVwB,QAYxB,MAAMC,EAAQnzB,EAAImzB,MAAM,kBACxB,IAAI3sB,EAOJ,IALEA,EADE2sB,EACSA,GAASplB,OAAOolB,EAAM,IAEtBJ,GAAUpgC,IAAIqN,KAGd,CACX,GAAIwG,GAAYN,GAASM,EAAU,OAEnC,IAAIL,EAAMD,EAAQgtB,EAAY,EAC1B1sB,GAAYL,EAAMK,IACpBL,EAAMK,EAAW,GAInB,MAAM4sB,EAAW,GAAGpzB,KAAOkG,KAASC,IACpC,IAAI3E,EAAcsxB,GAAYngC,IAAIygC,GAElC,IAAK5xB,EAAa,CAChB,IAAIpB,EAAU4yB,GAAgBrgC,IAAIygC,GAC7BhzB,IACHA,GAAUiB,EAAAA,GAAAA,IAAQ,gBAAiB,CACjCC,YAAavQ,EAAAA,GAAewQ,YAC5BvB,MACAkG,QACAC,QAGF6sB,GAAgB5/B,IAAIggC,EAAUhzB,IAGhC,MAAMgB,QAAehB,EAAQizB,QAAQ,KACnCL,GAAgBM,OAAOF,KAGzB,IAAKhyB,GAAQI,YAAa,OAGtBJ,EAAOmyB,WAAa/sB,IACtBA,EAAWpF,EAAOmyB,SAClBR,GAAU3/B,IAAI4M,EAAKoB,EAAOmyB,WAI5B/xB,EAAcJ,EAAOI,YAGjB2E,GA5De,SA6DjB2sB,GAAY1/B,IAAIggC,EAAUhyB,EAAOI,YAErC,OAGMA,EAEN0E,EAAQC,EAAM,CAChB,CACF,CCkBO,SAASqtB,GAA0BC,GACxC,SAAKC,EAAAA,KAAcD,IACZjgC,QAAQmgC,MAAkBC,gBAAgBH,GACnD,CAEA,SAASI,GAAaC,EAA4BC,GAChD,IACED,EAAaD,aAAaE,EAC5B,CAAE,MAAOC,GACH5kC,EAAAA,KAEFC,QAAQ4kC,KAAK,mCAAoCD,EAErD,CACF,CAEA,SAASE,GAAYC,GACnB,IACEA,EAAYD,aACd,CAAE,MAAOF,GACH5kC,EAAAA,KAEFC,QAAQ4kC,KAAK,gCAAiCD,EAElD,CACF,CAEA,SAASL,KACP,MAAI,uBAAwBtgC,OAEnB+gC,mBAEL,gBAAiB/gC,OACZghC,iBADT,CAIF,C,4BCjHA,MAAMC,GAAgD,CAAC,EAMjDC,IAAaznB,EAAAA,GAAAA,IADS,KA0H5B,GAnHA,SAA2BzY,EAA4BmgC,IACrDxhC,EAAAA,EAAAA,IAAU,KACR,QAAe1H,IAAX+I,EAAsB,QA0BVogC,MAAMC,QAAQrgC,GAAUA,EAAS,CAACA,IAE1C6L,QAAS5X,IACf,MAAMujC,EAAU2I,IAAiBG,EAAAA,EAAAA,MAAY5K,QAAQ6K,SAAStsC,IAAKusC,aAAa,GAC3EhJ,GA5Be5qB,iBACdszB,GACNO,EAAY50B,QAAQ,EAAG60B,OAAMC,SAAQC,eAC/BA,EAiGZh0B,eAA6B8zB,GAC3B,MAAMG,EAASjC,IAAsBkC,EAAAA,GAAAA,IAAkBJ,IACvD,IAAIK,EAAa,EACjB,UAAW,MAAMC,KAASH,EAExB,GADAE,GAAcC,EAAMC,WAChBF,GAtHoB,QAuHtB,KAGN,CAzGUG,CAAcR,GAGhBS,GAAAA,GACET,EACAC,GAECS,KAAMr0B,IACAA,IAED4zB,IAAWjkC,EAAAA,GAAewQ,aAqE1C,SAA4BvB,GAC1B,MAAM01B,EAAOlrC,SAASkrC,KAChBhrC,EAAQF,SAASuB,cAAc,SACrCrB,EAAMirC,QAAU,OAChBjrC,EAAM6B,IAAMyT,EACZtV,EAAMgjB,OAAQ,EACdhjB,EAAMkrC,UAAW,EACjBlrC,EAAMmrC,uBAAwB,EAC9BnrC,EAAM6D,MAAMunC,QAAU,OACtBJ,EAAKhpC,YAAYhC,GACjBA,EAAMqrC,OACNziC,WAAW,MACT0iC,EAAAA,GAAAA,GAAYtrC,GACZgrC,EAAKpT,YAAY53B,IA9GgB,IAgHrC,CAnFcurC,CAAmB70B,GAEjB4zB,IAAWjkC,EAAAA,GAAeC,UAC5BklC,EAAAA,EAAAA,IAAa90B,SAWrB+0B,CAYN,SAA+B9hC,EAAgBw3B,GAC7C,MAAMuK,GAAcC,EAAAA,EAAAA,MAAkB1B,EAAAA,EAAAA,MAAatgC,GACnD,IAAK+hC,IAAgBA,EAAYvB,YAAYzqC,OAC3C,MAAO,GAGT,MAAMksC,EAbR,SAAmC1J,EAAU2J,GAC3C,MAAMza,EAAe8Q,EAAI/H,QAAQ0R,GAC3BrwB,EAAQvK,KAAKma,IAAIgG,EAnDQ,EAmDqB,GAC9C3V,EAAMxK,KAAK4a,IAAIuF,EApDU,EAoDmB8Q,EAAIxiC,QACtD,OAAOwiC,EAAI4J,MAAMtwB,EAAOC,EAC1B,CAQqBswB,CAAuBL,EAAYvB,WAAYhJ,GAE5DiJ,EAAgC,GA+BtC,OA9BAwB,EAAWp2B,QAASw2B,IAClB,GAAIpC,GAAiBjgC,IAASsiC,IAAID,GAChC,OAGF,MAAMrO,EAAQ+N,EAAYhH,KAAKsH,GAC/B,IAAKrO,KAAW,YAAaA,GAC3B,OAGF,MAAMt4B,EAAUyD,QAAQ60B,EAAM7sB,QAAQ9Q,OAGtCoqC,EAAYr5B,KAAK,CACfs5B,MAAM/L,EAAAA,EAAAA,IAAkBX,EAAO,QAC/B2M,OAAQjlC,EAAUgB,EAAAA,GAAewQ,YAAcxQ,EAAAA,GAAeC,QAC9DikC,SAAUllC,GAAWyjC,GAA0BX,MAGjDiC,EAAYr5B,KAAK,CAAEs5B,MAAM/L,EAAAA,EAAAA,IAAkBX,GAAQ2M,OAAQjkC,EAAAA,GAAeC,UACtEq3B,EAAM7sB,QAAQo7B,WAChB9B,EAAYr5B,KAAK,CACfs5B,MAAM/L,EAAAA,EAAAA,IAAkBX,EAAO,QAAQ,GACvC2M,OAAQjkC,EAAAA,GAAewQ,cAI3B+yB,GAAiBjgC,IAAWigC,GAAiBjgC,IAAW,IAAIwiC,KAAO5qC,IAAIyqC,KAGlE5B,CACT,CApDoBgC,CAAsBxuC,EAAIujC,OAEzC,CAAC2I,EAAengC,GACrB,E,oJC1BA,MAgGA,IAAejN,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAU++B,kBAIF,CACLkO,OAJalO,EAAYmO,YAAaha,EAAAA,EAAAA,KAAWlzB,EAAQ++B,EAAYmO,iBAAc1rC,EAKnF+8B,MAJYQ,EAAYgD,SAAWhD,EAAYmO,YAC7ChI,EAAAA,EAAAA,KAAgBllC,EAAQ++B,EAAYmO,WAAYnO,EAAYgD,cAAWvgC,IAJ3D8L,CAhGoC6/B,EACtD1uC,YACAsgC,cACAkO,SACA1O,YAEA,MAAM,gBAAE6O,EAAe,qBAAEC,EAAoB,SAAEC,IAAa3iC,EAAAA,EAAAA,MACtDiI,GAAM5K,EAAAA,EAAAA,MAEN0D,GAAOC,EAAAA,EAAAA,MAEbzC,EAAAA,EAAAA,IAAU,MACHq1B,GAASQ,EAAYmO,YAAcnO,EAAYgD,SAClDsL,EAAqB,CACnB9iC,OAAQw0B,EAAYmO,WACpBK,SAAU,CAACxO,EAAYgD,YAG1B,CAAChD,EAAaR,IAEjB,MAAMhM,EAAc0a,GAASza,EAAAA,GAAAA,IAAa9mB,EAAMuhC,GAAUlO,EAAYyO,SAEhEC,GAAoBviC,EAAAA,EAAAA,GAAgB,KACxC,MAAM,WAAEgiC,EAAU,QAAEnL,GAAYhD,EAC3BmO,KAEgB3O,GAAW,cAAeA,GAASA,EAAMmP,UAS5DJ,EAAS,CAAE9uC,GAAI0uC,IANfE,EAAgB,CACd7iC,OAAQ2iC,EACRnL,UACA4L,eAAe,QAOf,YAAEzqB,EAAW,gBAAE0qB,IAAoBC,EAAAA,GAAAA,GAAaJ,GA6BtD,OACElvC,EAAAA,GAAAA,IAACuvC,GAAAA,EAAgB,CACfl7B,IAAKA,EACLnU,WAAWqW,EAAAA,GAAAA,GACT,kBACArW,GACAsvC,EAAAA,GAAAA,GAAkBd,GAAQ,GAAM,IAElCj4B,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAC1BkL,QAASwW,EACT8qB,YAAaJ,EAAgBlvC,SAAA,CAE5BuuC,GAAQzgC,OAAOyhC,oBACdtvC,EAAAA,GAAAA,GAACuvC,GAAAA,EAAmB,CAClBC,gBAAiBlB,EAAOzgC,MAAMyhC,kBAC9BxvC,UAAU,uCAGdF,EAAAA,GAAAA,IAAA,OAAKE,UAAU,eAAcC,SAAA,CA7CjC,WACE,GAAI6/B,GAAS,YAAaA,GAASA,EAAM7sB,QAAQ+B,KAC/C,OACE9U,EAAAA,GAAAA,GAAA,KAAGF,UAAU,wBAAuBC,UACjC0vC,EAAAA,GAAAA,IAAuB7P,EAAM7sB,QAAQ+B,OAM9C,CAoCO46B,IACD1vC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,gBAAeC,SAnCpC,WACE,IAAKuuC,IAAW1a,EACd,OAGF,MAAM3gB,GAA8BvE,EAAAA,EAAAA,IAAS4/B,EAAOzuC,IAAyB,cAAnB,iBAE1D,OACED,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,CACGkT,IAAQjT,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAM0F,EAAMnT,UAAU,uBACpC8zB,IAAeI,EAAAA,GAAAA,GAAWJ,KAGjC,CAuBS+b,c,gBCmCX,UAAehxC,EAAAA,EAAAA,IAnIf,UAAsB,MACpBihC,EAAK,WAAEgQ,EAAU,UAAE9vC,EAAS,SAAE+vC,EAAQ,OAAEC,IAExC,MAAM/iC,GAAOC,EAAAA,EAAAA,KACPiH,GAAM5K,EAAAA,EAAAA,MACN0mC,GAAa1mC,EAAAA,EAAAA,MACb2mC,GAAU3mC,EAAAA,EAAAA,MACV4mC,GAAoB5mC,EAAAA,EAAAA,MACpB6mC,GAAiBC,EAAAA,GAAAA,GAAiBvQ,GAAO,GAEzCwQ,EAAUF,GAAgBn9B,QAAQ+B,MAEjCu7B,EAAaC,IAAkBnkC,EAAAA,EAAAA,KAAS,GACzCokC,GAAiBC,EAAAA,GAAAA,GAAuBZ,QAAc/sC,EAhBzB,KAiB7B4tC,EAAoBb,GAAcW,GAExChmC,EAAAA,EAAAA,IAAU,MACR6N,EAAAA,EAAAA,IAAgB,KACT23B,EAAWvmC,UAIZomC,GACFc,EAAAA,GAAAA,IAAcX,EAAWvmC,QAASgU,KAElCmzB,EAAAA,GAAAA,IAAiBZ,EAAWvmC,QAASgU,QAGxC,CAACoyB,IAEJ,MAAMgB,EAAYP,IAAgBI,GAC1B3sB,aAAc+sB,EAAoB,qBAAE7sB,IAAyBE,EAAAA,GAAAA,GACnE0sB,OAAW/tC,GAAW,EAAM,QAAQ,IAItCgZ,EAAAA,EAAAA,IAAgB,MACdi1B,EAAAA,EAAAA,IAAe,KACb,MAAMtrC,EAAYuqC,EAAWvmC,QACvBunC,EAASd,EAAkBzmC,QACjC,IAAKhE,IAAcurC,EACjB,OAGF,MAAM,YAAEC,GAAgBD,GAExB34B,EAAAA,EAAAA,IAAgB,KACd5S,EAAUM,MAAMmrC,YAAY,wBAAyB,GAAGD,YAG3D,CAACH,EAAsB9jC,KAE1B8O,EAAAA,EAAAA,IAAgB,MACdq1B,EAAAA,EAAAA,IAAoB,KAClB,IAAKnB,EAAWvmC,UAAYwmC,EAAQxmC,QAClC,OAGF,MAAMhE,EAAYuqC,EAAWvmC,QACvB2nC,EAAgBnB,EAAQxmC,QAExB4nC,EAAgBD,EAAcrkB,WAC9B,WAAEukB,EAAU,WAAEC,IAAeC,EAAAA,GAAAA,GAA2BJ,GACxDK,EAAgBF,EAjEN,EAkEVG,EAAgBL,EAlEN,EAkEsBC,EAEtC,MAAO,KACDG,KACFd,EAAAA,GAAAA,IAAclrC,ElBnGilC,YkBoG/lC8qC,GAAe,IAGjB9qC,EAAUM,MAAMmrC,YAAY,oBAAqB,GAAGQ,WAGvD,CAACrB,KAEJ7lC,EAAAA,EAAAA,IAAU,KACHqlC,GACH37B,EAAIzK,SAASkoC,SAAS,CAAEruB,IAAK,KAE9B,CAACusB,IAEJ,MAAM+B,GAAgBx7B,EAAAA,GAAAA,GlBlH+hC,WkBoHnjCs6B,GlBpH2nC,WkBqH3nCI,GlBrH0qC,YkBwH5qC,OACEjxC,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GlBzHuV,WkByHxTrW,GAAWC,SAAA,EACxDC,EAAAA,GAAAA,GAAA,OACEiU,IAAK87B,EACLjwC,UAAW6xC,EACXjI,KAAMkH,EAAY,cAAW/tC,EAC7BkL,QAAS6iC,EAAYf,EAAWC,EAAO/vC,UAEvCH,EAAAA,GAAAA,IAAA,OACEqU,IAAKA,EACLnU,WAAWqW,EAAAA,GAAAA,GlBlIsgC,WkBkIl+B,kBAAmB,iBAAiBpW,SAAA,CAElFmwC,GAAgB9P,cACfpgC,EAAAA,GAAAA,GAACwuC,GAAoB,CACnBpO,YAAa8P,EAAe9P,YAC5BtgC,UlBvIo8C,akB0Iv8CowC,GAAkBE,IACjBpwC,EAAAA,GAAAA,GAAA,OAAKiU,IAAK+7B,EAASlwC,UlB3IijC,WkB2InhCC,UAC/CC,EAAAA,GAAAA,GAAC4xC,GAAAA,EAAW,CACVC,eAAgB3B,EAChB4B,uBAAqB,EACrB7pB,eAAa,WAMtB4oB,IACC7wC,EAAAA,GAAAA,GAAA,OACEiU,IAAKg8B,EACLnwC,WAAWqW,EAAAA,GAAAA,GlBxJsrC,WkBwJ/oC6N,GAClDjW,QAAS8hC,EAAS9vC,SAEjBgN,EAAK,6BAKhB,G,4BChKA,SAAuB,WAAvB,GAAkM,WAAlM,GAAqN,WCmLrN,IAAepO,EAAAA,EAAAA,IAzJKozC,EAClBnS,QACA9/B,gBAEA,MAAM,mBAAEkyC,EAAkB,gBAAEjc,EAAe,kBAAEkc,IAAsBjmC,EAAAA,EAAAA,MAC7De,GAAOC,EAAAA,EAAAA,MAEP,MACJklC,EAAK,MAAEC,EAAK,OAAEvmC,EAAQ/L,GAAIujC,EAAO,aAAEgP,GACjCxS,GACE,WAAEyS,EAAU,cAAEC,EAAa,eAAEC,GAAmBL,GAAS,CAAC,EAC1D1e,IAAa9kB,EAAAA,EAAAA,IAAS9C,GAEtB4mC,EAA2BJ,IAAgBK,EAAAA,EAAAA,IAAeL,EAAcM,EAAAA,KAExEC,EAAa5nC,SAChBonC,GAAS3e,IACPoM,EAAMgT,WACLhT,EAAMoB,YAGN6R,GAAcC,EAAAA,EAAAA,IAAYlnC,EAAQw3B,GAElC2P,GAAgBhrC,EAAAA,EAAAA,IAAQ,KAC5B,MAAQ2+B,OAASC,KAAMvB,KAAgB8G,EAAAA,EAAAA,MAEjC8G,EAAkBd,GAAS,oBAAqBA,EAAQA,EAAMc,qBAAkBnwC,EACtF,GAAKmwC,EAEL,OAAOA,EAAgBv/B,IAAK5T,GAAOulC,EAAUvlC,IAAK89B,OAAO5yB,UACxD,CAACmnC,IAEEe,GAA2B1mC,EAAAA,EAAAA,GAAgB,KAC/CylC,EAAmB,CAAE5O,cAGjB8P,GAAqB3mC,EAAAA,EAAAA,GAAgB,KACzCwpB,EAAgB,CAAEwF,WAAY3vB,EAAQw3B,cAGlC+P,GAAkB5mC,EAAAA,EAAAA,GAAgB,KACtC,MAAM6mC,EAAWhB,OAAevvC,EAAY6vC,EAAAA,IAC5CT,EAAkB,CAChBrmC,SACAw3B,UACAyP,cACAO,eAIJ,OAAKf,GASHzyC,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GACTqH,GACA1d,GACAC,SAAA,EAEFH,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GD5F0B,YC4FOqd,GD5FkB,YC6F9DzlB,QAAUylB,OAAuC3wB,EAA3BowC,EAAqClzC,SAAA,CAE1DgL,QAAQgoC,GAAepxC,UACtB3B,EAAAA,GAAAA,GAACqzC,GAAAA,EAAU,CACTnzC,KAAK,QACLozC,MAAOP,EACPjzC,UDnG+E,aCuGlF0zB,GACC5zB,EAAAA,GAAAA,IAAA,QAAME,UAAW0d,GAAazd,SAAA,EAC5BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,eAAezN,UDzGqM,aC0G9NuyC,MAGHryC,EAAAA,GAAAA,GAAA,QAAMF,UAAW0d,GAAazd,SAAEgN,EAAK,QAASslC,EAAY,OAE3DtnC,QAAQwnC,KAAoB/e,IAC3B5zB,EAAAA,GAAAA,IAAA,QAAME,UDhH0H,WCgH1FC,SAAA,EACpCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,QAAQzN,UDjH2I,aCkH7JyyC,SAIPvyC,EAAAA,GAAAA,GAAA,OAAKF,UDtHoG,aCuHxG6yC,IACC3yC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLC,MAAM,cACN3N,KAAK,UACLoS,OAAK,EACLvE,QAASmlC,EACT3gC,UAAWxF,EAAK,WAChBjN,UAAW0d,GAAkBzd,UAE7BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,cAGdimB,IACC5zB,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,CACGgL,QAAQunC,KACP1yC,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAkBzd,SAAA,EAChCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN3N,KAAK,UACLqzC,gBAAc,EACdhhC,UAAWxF,EAAK,gBAAgBhN,UAEhCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,YAEbvN,EAAAA,GAAAA,GAAA,QAAAD,SAAOuyC,QAGX1yC,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAkBzd,SAAA,EAChCH,EAAAA,GAAAA,IAACgO,EAAAA,EAAM,CACL0E,OAAK,EACLxS,UDtJyP,WCuJzP+N,MAAM,cACN3N,KAAK,UACL6N,QAASolC,EACT5gC,UAAWxF,EAAK,gBAAgBhN,SAAA,CAE/BqyC,IACCpyC,EAAAA,GAAAA,GAACwzC,GAAAA,EAAqB,CAEpBX,YAAaA,EACbO,SAAUhB,EACVqB,eAAgBjB,IAHXkB,EAAAA,EAAAA,IAAetB,MAMrBA,GAAgBI,KACjBxyC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CACHjF,KAAMilC,EAA2B,QAAU,gBAC3C1yC,WAAWqW,EAAAA,GAAAA,GAAeq8B,GDvKsP,iBC2KrRznC,QAAQwnC,KAAoBvyC,EAAAA,GAAAA,GAAA,QAAAD,SAAOwyC,cA7F1CvyC,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAa1d,GAAWC,SACpDgN,EAAK,oBC9Bd,IAAepO,EAAAA,EAAAA,IA5Bf,UAAuB,SACrB6a,EAAQ,SAAEm6B,EAAQ,QAAErsC,EAAO,SAAE6R,EAHE,EAGiC,SAAEy6B,EAAQ,gBAAEC,IAE5E,MAAMC,GAAqBvnC,EAAAA,EAAAA,GAAiBuiB,IACrCxnB,GCzB+F,aDyBpFwnB,EAAMilB,eACpBF,MAIE39B,GAAaC,EAAAA,GAAAA,GC9BE,WDgCnBw9B,GChCuC,WDiCvCn6B,GCjC2D,WDkC3Do6B,GClCwH,YDqC1H,OACE5zC,EAAAA,GAAAA,GAAA,QACEF,UAAWoW,EACX,iBAAWnW,SAEVyZ,IACCxZ,EAAAA,GAAAA,GAAA,KAAG8F,MAAO,wBAAwBqT,KAAarZ,UC3C2B,WD2CFk0C,eAAgBF,KAIhG,GEgEMG,GAAwBhJ,EAAAA,GAAY,EAAI,EA8yB9C,IAAetsC,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAqB,CAACtN,GACxCuK,SACAw3B,UACAvyB,wBAEA,MAAM,UAAEqjC,GAAc7yC,EAChB8yC,GAAOC,EAAAA,EAAAA,KAAW/yC,EAAQuK,GAC1BsD,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQuK,GAC1B0oC,GAAeC,EAAAA,EAAAA,KAAmBlzC,EAAQuK,GAC1CkD,GAAWC,EAAAA,EAAAA,KAAe1N,IAE9B8/B,aAAa,QACX/iB,EAAO,UACPo2B,EAAS,mBACTC,EAAkB,mBAClBrT,EAAkB,UAClBsT,GAEFC,iBAAmBvR,QAASwR,GAAkB,aAC9CC,EAAY,iBACZC,EAAgB,SAChBC,EAAQ,YACRC,EAAW,cACXC,EAAa,kCACbC,GACEpmC,GACInD,OAAQwpC,GAAuBN,GAAgB,CAAC,EAClDjV,GAAQ2G,EAAAA,EAAAA,KAAgBllC,EAAQuK,EAAQw3B,GACxCrD,EAAgBH,GAAS,YAAaA,EACtCwV,EAAmBrqC,QACvBmqC,GACGV,GAAaI,GAAoB9lC,EAASumC,gBAAgBjS,SAAW4R,GAAeP,GACpFU,GAAsBtkC,GAAqBikC,GAAoB1T,GAAsB2T,GAAYE,GAGhG7U,EAAcL,EAAgBH,EAAMQ,iBAAcv9B,EAClDyyC,EAAavV,EAAgBH,EAAM0V,gBAAazyC,EAChD0yC,EAAkBnV,GAAamO,YAChC+G,GAAYE,KAAMC,GAAwD,gBAAdA,EAAKv0C,OAAyBw0C,UACzFC,EAAgBJ,GAAkBhhB,EAAAA,EAAAA,KAAWlzB,EAAQk0C,QAAmB1yC,EACxE+yC,GAAsBzhB,EAAAA,EAAAA,KAA+B9yB,EAAQ,yBAE7Dw0C,EAAW9V,GAAiBH,EAAMkW,QAASvhB,EAAAA,EAAAA,KAAWlzB,EAAQu+B,EAAMkW,aAAUjzC,EAC9EkzC,GAAoBC,EAAAA,EAAAA,KAA4B30C,EAAQuK,GACxDqqC,GAAkBC,EAAAA,EAAAA,KAA0B70C,GAElD,MAAO,CACL0yB,KAAOogB,GAAQjlC,EACfymC,gBACAE,WACAjW,QACAwM,WAAYsI,GAAWyB,iBAAiBvqC,GACxCwS,UACAyhB,sBAAsB0B,EAAAA,EAAAA,KAA2BlgC,GACjD+zC,mBACAgB,qBAAsBlC,EAAUkC,qBAChCC,oBAAqBnC,EAAUoC,yBAC/BC,YAAaxrC,QAAQmE,GACrBsnC,sBAAuBzrC,QAAQupC,GAAcmC,UAC7CpV,YAAahgC,EAAOigC,QAAQD,YAC5BuU,sBACAG,oBACAE,oBA9DgBtnC,CAzyBpB,UAAe,OACb/C,EAAM,QACNw3B,EAAO,KACPrP,EAAI,cACJ4hB,EAAa,SACbE,EAAQ,QACRz3B,EAAO,kBACPs4B,EAAiB,iBACjBC,EAAgB,MAChB/W,EAAK,WACLwM,EAAU,cACV4C,EAAa,WACb1jC,EAAU,iBACV8pC,EAAgB,qBAChBgB,EAAoB,oBACpBC,EAAmB,YACnBE,EAAW,sBACXC,EAAqB,eACrBI,EAAc,qBACd/W,EAAoB,YACpBwB,EAAW,oBACXuU,EAAmB,SACnBiB,EAAQ,QACRhrC,EAAO,SACP4E,EAAQ,kBACRslC,EAAiB,gBACjBE,IAEA,MAAM,UACJa,EAAS,oBACTC,EAAmB,kBACnBC,EAAiB,cACjB9T,EAAa,uBACb+T,EAAsB,gBACtBlhB,EAAe,cACfmhB,EAAa,qBACbrQ,EAAoB,SACpB8H,EAAQ,iBACRhN,EAAgB,uBAChBwV,EAAsB,iBACtBC,EAAgB,UAChBC,EAAS,eACTC,GAAc,mBACd7V,KACEz1B,EAAAA,EAAAA,MACE+1B,IAAaC,EAAAA,GAAAA,MAEbuV,IAAUvqC,EAAAA,EAAAA,KACVD,IAAOyqC,EAAAA,GAAAA,MACP,SAAEp4C,KAAaC,EAAAA,EAAAA,OACdo4C,GAAoBC,GAAsBC,KAA0B14C,EAAAA,EAAAA,IAAQ,IAC5E24C,GAA0BC,GAAWC,KAAc74C,EAAAA,EAAAA,IAAQ,IAC3D84C,GAAgBC,GAAkBC,KAAsBh5C,EAAAA,EAAAA,IAAQ,IAChEi5C,GAAcC,GAAgBC,KAAoBn5C,EAAAA,EAAAA,IAAQ,IAC1Do5C,GAAmBC,GAAeC,KAAet5C,EAAAA,EAAAA,IAAQ,IACzDu5C,GAAoBC,KAAyBtsC,EAAAA,EAAAA,KAAS,IACtDusC,GAAqBC,GAAyBC,KAA6B35C,EAAAA,EAAAA,IAAQ,IACnF6gC,GAAoB+Y,GAAsBC,KAA0B75C,EAAAA,EAAAA,IAAQ,GAC7E+hB,IAAW3X,EAAAA,EAAAA,OACX,eACJ22B,GAAc,QACdC,GAAO,eACPE,GAAc,UACdE,GAAS,eACT53B,GAAc,QACdnB,GAAO,QACPk5B,GAAO,cACPE,GAAa,aACbC,GAAY,aACZC,GAAY,YACZC,GAAW,SACXC,GAAQ,YACRC,GAAW,kBACXG,IACEvB,GAAcC,EAAOC,EAAsBC,IAEzCC,GAAgBH,GAAS,YAAaA,EACtCmZ,GAAcntC,IAAWwqC,EACzB4C,IAActqC,EAAAA,EAAAA,IAAS9C,GACvBqtC,IAAeD,GACfE,GAAiBD,KAAexlB,EAAAA,EAAAA,IAAcM,GAC9Coe,GAAQpS,IAAiBH,EAAMuS,MAE/BgH,IAAkBhJ,EAAAA,GAAAA,GACtBgC,IAASvS,EAAMyH,iBAAcxkC,GAC7B,GAEIu2C,IAAsBjJ,EAAAA,GAAAA,GAC1BgC,GAAQvS,EAAMyH,iBAAcxkC,GAC5B,GAEIw2C,GAAkBtuC,QACtBonC,IAAUvS,EAAM3M,KAAOojB,GAAuBrU,EAAAA,GAAAA,OAG1CsX,GAAqB3D,GAAgB9hB,EAAAA,GAAAA,IAAa0jB,GAAS5B,GAC5D5V,IAAiBH,EAAMQ,aAAayO,SAEnC0K,GAAcxuC,QAClBg1B,IACGH,EAAMgT,WACLmG,IACDhlB,GAAMylB,aAGLC,GAAW1uC,QACfg1B,IACGH,EAAMgT,WACLhT,EAAMoB,aACN+X,KACAV,IAGAqB,GAAe3uC,QACnB81B,KAAgBuU,GAAoB8C,KAAiBT,KAAuBY,KACxEG,KAAuBE,IAGvBv/B,GAAW4mB,IAAiBH,EAAM7sB,QAAQ9Q,OAAOkX,SACnDymB,EAAM7sB,QAAQ9Q,MAAMkX,cACpBtW,EAEE82C,KAAuBxH,IAAS6G,IAAiBD,IAAgBG,IAAmBjD,GACpF2D,GAAmB7Z,KAAkB4Z,KAAuBxH,IAAS+G,IACrE1iB,GAAkBp3B,IAAYw2C,EAAsB,YAAc,QAGtE9xB,aAAc+1B,GACd71B,qBAAsB81B,KACpB51B,EAAAA,GAAAA,IAA6B2c,KAG/B7c,qBAAsB+1B,KACpB71B,EAAAA,GAAAA,GAA4BnZ,QAAQ21B,KAElCsZ,IAAWC,EAAAA,GAAAA,GAAc5Z,IAAYS,IACrCoZ,IAA8BC,EAAAA,GAAAA,GAA6B1xC,KAG/Dqb,aAAcs2B,GACdp2B,qBAAsBq2B,KACpBn2B,EAAAA,GAAAA,GAA4By1B,KAG9B71B,aAAcw2B,GACdt2B,qBAAsBu2B,KACpBr2B,EAAAA,GAAAA,GAA4B+b,IAAWoY,KAEnCr0B,qBAAsBw2B,KAAkCt2B,EAAAA,GAAAA,IAA4B,IAE1FJ,aAAc22B,GACdz2B,qBAAsB02B,KACpBx2B,EAAAA,GAAAA,GAA4B+b,IAAWE,IAErCwa,GRnQD,SAAsB35B,EAAwCzJ,EAAcyzB,GA+EjF,OA9EAzgC,EAAAA,EAAAA,IAAU,KACR,IAAKgN,IAAQyJ,EAASxX,QAAS,OAC/B,MAAMoxC,EAAmB1P,KACnBjpC,EAAQ+e,EAASxX,QAEvB,IAAKyhC,EAAAA,KAAcD,IAAa4P,GAAkBzP,gBAAgBH,GAChE,OAEF,MAAMU,EAAc,IAAIkP,EAaxB,SAASC,IACP,IAAKtjC,IAAQyzB,EAAU,OAEvB,MAAMK,EAAeK,EAAYoP,gBAAgB9P,GAC3CyB,EAASjC,GAAsBjzB,GAiBrC8zB,EAAat1B,iBAAiB,YAf9B,WACE02B,EAAOsO,OACJ/N,KAAK,EACJrgC,QACAquC,WAE+B,SAA3BtP,EAAY/mB,aACZq2B,EACFvP,GAAYC,GAGdN,GAAaC,EAAc1+B,KAEjC,GAIA8/B,EAAOsO,OACJ/N,KAAK,EACJrgC,QACAquC,WAEIA,GAAmC,SAA3BtP,EAAY/mB,cAtC5BvM,EAAAA,EAAAA,IAAgB,KACdnW,EAAM6D,MAAMunC,QAAU,QACtBxiC,WAAW,MACTuN,EAAAA,EAAAA,IAAgB,MACdshB,EAAAA,EAAAA,IAAYz3B,EAAO,CAAE64B,QAAS,SAlBf,OAsDjBsQ,GAAaC,EAAc1+B,KAEjC,CAYA,OAVA++B,EAAY31B,iBAAiB,aAAc8kC,EAAc,CAAEI,MAAM,KAEjE7iC,EAAAA,EAAAA,IAAgB,MACdshB,EAAAA,EAAAA,IAAYz3B,EAAO,CACjBorC,QAAS,OACTvS,QAAS,MAEX74B,EAAM6B,IAAMo3C,IAAIC,gBAAgBzP,KAG3B,MACLtzB,EAAAA,EAAAA,IAAgB,KACd,MAAMtU,EAAM7B,EAAM6B,KAClBypC,EAAAA,GAAAA,GAAYtrC,GACZypC,EAAY11B,oBAAoB,aAAc6kC,GACf,SAA3BnP,EAAY/mB,YACd8mB,GAAYC,GAEdwP,IAAIE,gBAAgBt3C,OAGvB,CAACknC,EAAUzzB,EAAKyJ,IAEZ+pB,GAA0BC,EACnC,CQmL+BqQ,CAAar6B,GAAU0f,GAAe0J,IAEnEkR,GAAkB1vC,EAAQw3B,IAE1B74B,EAAAA,EAAAA,IAAU,KACJ64B,GACF0T,EAAU,CAAElrC,SAAQw3B,aAErB,CAACA,EAASx3B,KAEbrB,EAAAA,EAAAA,IAAU,KACR0sC,EAAuB,CAAErrC,YACxB,CAACA,KAGJrB,EAAAA,EAAAA,IAAU,KACR,MAAMgxC,GAAW7sC,EAAAA,EAAAA,IAAS9C,IACrB2qC,GAAegF,GAClBlE,EAAU,CAAE7qC,OAAQZ,KAErB,CAAC2qC,EAAa3qC,KACjBrB,EAAAA,EAAAA,IAAU,KACJgsC,IAAgBC,GAClBY,EAAiB,CAAExrC,YAEpB,CAAC4qC,EAAuBD,EAAa3qC,IAExC,MAAM4vC,IAAmBjvC,EAAAA,EAAAA,GAAgB,KACnCjF,IACF0Z,GAASxX,SAAS6a,QAGpB4zB,KACAH,OAGI2D,IAAkBlvC,EAAAA,EAAAA,GAAgB,KACjCmtC,KAEL7B,KACKvwC,IAAS0wC,QAGV0D,IAAuBnvC,EAAAA,EAAAA,GAAgB,KAC3CosC,OAEIgD,IAAqBpvC,EAAAA,EAAAA,GAAgB,KACzCqsC,OAGIgD,IAAyBrvC,EAAAA,EAAAA,GAAgB,KAC7CssC,KACA2C,OAGIK,IAA0BtvC,EAAAA,EAAAA,GAAgB,KAC9CusC,KACA2C,QAIApM,YAAayM,GACbC,UAAWC,GACXj2B,aAAck2B,GACdC,aAAcC,GACdC,WAAYC,KACVC,EAAAA,GAAAA,GAAa,CACfC,QAASb,GACT1Y,MAAO2Y,KAGH/3B,IAAgBC,EAAAA,GAAAA,GACpB7C,QACAne,GACCyE,KAAYo5B,IAAiBia,IAG1B6B,GAAa9b,MAAmBC,IAAgBC,KAEtDr2B,EAAAA,EAAAA,IAAU,KACJiyC,KAAe54B,IAAe63B,MACjC,CAACe,GAAY54B,MAEhB64B,EAAAA,GAAAA,IAAkBrE,GAAkBD,KAEpC5tC,EAAAA,EAAAA,IAAU,KACHiyC,IACLx7B,GAASxX,SAAS8jC,QACjB,CAACkP,MAEJjyC,EAAAA,EAAAA,IAAU,MACHw1B,IAAiBC,IAAkBqZ,KAEnClH,IAAU+G,KAGf5B,GAAe,CAAE1rC,SAAQw3B,aACxB,CAACpD,GAAgBqZ,GAAiBtZ,GAAen0B,EAAQw3B,EAAS+O,GAAO+G,MAE5E3uC,EAAAA,EAAAA,IAAU,KAEN6qC,IAAqB8C,IAAgBT,IAClCY,IAAqBG,IAAsBE,GAE9C8C,KAEAC,MAED,CACDA,GAAiBvD,GAAcG,GAAmBZ,GAClDrC,EAAkBoD,GAAoBE,MAGxCnuC,EAAAA,EAAAA,IAAU,KACR,KAAIktC,IAAsBrC,GAAoBiD,IAa9C,OAFAt2C,SAASgU,iBAAiB,UAAWyP,GAE9B,KACLzjB,SAASiU,oBAAoB,UAAWwP,IAV1C,SAASA,EAAc3Y,GApRL,KAqRZA,EAAE6vC,UACJ7vC,EAAE6Y,iBACF+yB,IAAuBD,IAE3B,GAOC,CAACH,GAAmBZ,GAAoBe,GAAoBpD,KAG/DxP,EAAAA,GAAAA,GAAsB,EACpB+W,EACAC,EACAC,EACAC,EACAC,OAGGvE,IAAsBH,IAAqBZ,IACzCrC,IAAqB8C,IAAgBQ,IAMxCkE,IAA0BvE,IACvBsE,IAA2BlF,IAC3BoF,IAAyBzH,GACzB0H,IAAqB5E,IACrB6E,IAA4BrE,IAE/BD,IAAsB,IAEvB,CAAChB,GAAoBY,GAAmBjD,EAAkB8C,GAAcQ,GAAqBF,KAEhG,MAAMwE,IAAiBzwC,EAAAA,EAAAA,GAAgB,KACrCV,IACA8iC,EAAS,CAAE9uC,GAAI+L,MAGXqxC,IAAyB1wC,EAAAA,EAAAA,GAAgB,KAC7CV,IACA8iC,EAAS,CAAE9uC,GAAI81C,EAAe91C,OAG1Bq9C,IAAsB3wC,EAAAA,EAAAA,GAAgB,KAC1CV,IACA8iC,EAAS,CAAE9uC,GAAIg2C,EAAUh2C,OAGrBs9C,IAAsB5wC,EAAAA,EAAAA,GAAgB,KAC1CyqC,MAGIoG,IAAsB7wC,EAAAA,EAAAA,GAAgB,KAC1C22B,MAGIma,IAA6B9wC,EAAAA,EAAAA,GAAiBM,IAClD,MAAM5K,EAAQ4K,EAAE6X,cACZziB,EAAM0iB,YAAcsvB,GACtB+D,KAEAC,KAEE9+B,KAAY7G,EAAAA,GAAAA,IAAMrQ,EAAMoV,YAAa,KAAM/E,EAAAA,GAAAA,IAAM6G,GAAU,IAC7DikC,QAIJ7yC,EAAAA,EAAAA,IAAU,IACAqsC,KAAqBa,QAGxB50C,GAH6Cy6C,EAAAA,GAAAA,GAAyB,CACzEC,QAASH,GACTI,OAAQL,KAET,CAACvG,EAAgBa,KAEpB,MAAMgG,IAAsBlxC,EAAAA,EAAAA,GAAgB,KAC1C2qC,EAAc,CAAEtrC,SAAQw3B,cAGpBsa,IAAiBnxC,EAAAA,EAAAA,GAAgB,KACrCs6B,EAAqB,CAAEj7B,SAAQw3B,UAASiE,aAAa,MAGjDsW,IAAmBpxC,EAAAA,EAAAA,GAAgB,KACvCs6B,EAAqB,CAAEj7B,SAAQw3B,UAASiE,aAAa,MAGjDlE,IAAyB52B,EAAAA,EAAAA,GAAgB,KAC7CsqC,EAASjX,KAGLge,IAAyBrxC,EAAAA,EAAAA,GAAgB,KAC7CkE,MAGIyiC,IAAqB3mC,EAAAA,EAAAA,GAAgB,KACzCwpB,EAAgB,CAAEwF,WAAY3vB,EAAQw3B,cAGlCya,IAAwBtxC,EAAAA,EAAAA,GAAgB,KAC5C4qC,MAGI2G,IAAyBvxC,EAAAA,EAAAA,GAAgB,KAC7C,MAAMi6B,GAAczG,IAAiBH,EAAMgT,cACvC/vC,EACA+8B,EAAMme,cAAgB,WAAcne,EAAMoe,kBAAoB,eAAiB,SAEnF,IAAIp9C,EACJ,MAAMq9C,GAASpqB,EAAAA,GAAAA,IAAa0jB,GAASxjB,GACrC,OAAQyS,GACN,IAAK,SACH5lC,EAAU22C,GAAQ,4BAA6B0G,GAC/C,MACF,IAAK,WACHr9C,EAAU22C,GAAQ,oBAAqB0G,GACvC,MACF,IAAK,eACHr9C,EAAU22C,GAAQ,wBAAyB0G,GAC3C,MACF,QACE,OAEJtc,EAAiB,CAAE/gC,cAGfokB,IAAoBzY,EAAAA,EAAAA,GAAgB,KACpCi0B,GACFmB,EAAiB,CACf/gC,QAAS22C,GAAQ,mCAKrBv2B,GAASxX,QAASyb,OAASjE,GAASxX,QAASyb,MAC7C8xB,EAAoB,CAAE34B,SAAUA,OAG5B8/B,IAAyB3xC,EAAAA,EAAAA,GAAgB,KAC7C,GAAI80B,EAAY8c,cAAenc,EAAAA,GAAAA,MAAkBX,EAAY8c,YAA7D,CACE,MAAMC,EAAO/c,EAAY8c,aAAcnc,EAAAA,GAAAA,MACvCL,EAAiB,CACfx0B,MAAOoqC,GAAQ,iBACf32C,QAAS22C,GAAQ,oCAAoCv7B,EAAAA,GAAAA,IAAoBoiC,IACzEjlC,SAzamC,KA4avC,MAEAsoB,GAAmB,CAAE91B,QAAQ,MAGzB0yC,IAAiB9xC,EAAAA,EAAAA,GAAgB,KAChC20B,KACL9tB,EAAAA,GAAAA,GAAS8tB,GAAmB,SAASt1B,KAAUw3B,KAAW97B,GAAU,MAAQ,YAG9EiD,EAAAA,EAAAA,IAAU,KACHy1B,IAEL2B,EAAiB,CACf/gC,QAAS22C,GAAQ,oBAElB,CAACA,GAASvX,KAEb,MAAM5tB,IAA8DrK,EAAAA,EAAAA,IAAQ,IACnE,EAAGsK,YAAW1G,aAEjB3L,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLqN,QAASvgB,GACTc,KAAK,OACL2N,MAAM,oBACNE,QAASsE,EACTvS,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAe7R,GAAU,UACnD4G,UAAWglC,GAAQ,qBAAqBx3C,UAExCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,WAIhB,CAACnO,GAAUm4C,KAqMd,MAAM+G,GAAmBvI,EACrBhpC,GAAK,+BAAgC,CACrCwxC,QAAQC,EAAAA,GAAAA,IAAkBzxC,GAAMgpC,EAAmB,CAAE0I,QAAQ,EAAM3+C,UAAW,2BAC7E,CACD4+C,WAAW,IAEXnH,GAAQ0B,GAAc,oBAAsB,kBAEhD,OACEr5C,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAmB,wBAC7C6xB,YAAayM,GACbC,UAAWC,GACXj2B,aAAck2B,GACdC,aAAcC,GACdC,WAAYC,GAAwBt8C,SAAA,EAEpCH,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GvBtxB0S,WuBsxBvQqkC,IAA+Bz6C,SAAA,EAlNlFC,EAAAA,GAAAA,GAAA,OAAKF,UvBpkBypB,WuBokBvnBC,UACnCivC,EAAgB,CAAC5L,GAAWgJ,GAAc,IAAI34B,IAAK5T,IACnDG,EAAAA,GAAAA,GAAC2+C,GAAa,CAEZnlC,SAAU3Z,IAAO+/B,GAAO//B,GACxByH,QAASA,GACTqsC,SAAU5oC,QAAQ60B,GAAO//B,KAAQ82C,GAAoBD,EAAqB72C,EAAK+/B,GAAO//B,GAAKA,EAAK+/B,GAAO//B,KACvG+zC,UAAWmE,GACX5+B,SAAUA,GACV06B,gBAAiBuJ,IANZ,YAAYv9C,SAmHvBD,EAAAA,GAAAA,IAAA,OAAKE,UvB1rB6qB,WuB0rBppBC,SAAA,EAC5BC,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CAACC,UAAW5X,OAAO1Z,GAAS2B,KAAMipB,GAAiB12B,UvB3rBopB,WuB2rB7mBC,UApDvGH,EAAAA,GAAAA,IAAA,OAAKE,UvBvoBuuB,WuBuoB1sBC,SAAA,EAChCC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACLC,KAAMA,EACN7zB,KAAK,OACL6N,QAASivC,MAEXp9C,EAAAA,GAAAA,IAAA,OAAKE,UvB7oB6vB,WuB6oBhuBC,SAAA,EAChCC,EAAAA,GAAAA,GAAA,QAAM+N,QAASivC,GAAgBl9C,UvB9oByvB,WuB8oB5tBC,UACzDi0B,EAAAA,GAAAA,IAAWH,EAAAA,GAAAA,IAAa0jB,GAASxjB,IAAS,OAE7Cn0B,EAAAA,GAAAA,IAAA,OAAKE,UvBjpB6yB,WuBipB9wBC,SAAA,CACjCu5C,KACC15C,EAAAA,GAAAA,IAAA,QACEE,WAAWqW,EAAAA,GAAAA,GACTqH,GvBrpBu3C,WuBqpB/0Cm4B,GvBrpBs2C,YuBupBh5C5nC,QAAS4nC,EAAgBsH,QAAyBp6C,EAAU9C,SAAA,EAE5DC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,UACXvN,EAAAA,GAAAA,GAAA,QAAMF,UAAW0d,GAAmBzd,UACjCi0B,EAAAA,GAAAA,GAAWslB,SAIjBzD,IACCj2C,EAAAA,GAAAA,IAAA,QACEE,WAAWqW,EAAAA,GAAAA,GACTqH,GvBlqBs9C,YuBoqBx9CzP,QAASmvC,GAAoBn9C,SAAA,EAE7BC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CAACC,KAAM8hB,EAAU31C,KAAK,WAC7BF,EAAAA,GAAAA,GAAA,QAAMF,UAAW0d,GAAmBzd,UACjCi0B,EAAAA,GAAAA,IAAWH,EAAAA,GAAAA,IAAa0jB,GAAS1B,IAAa,SAIpDjW,GAAS,SAAUA,IAClB5/B,EAAAA,GAAAA,GAAA,QAAMF,UAAW0d,GAAiBzd,UAAE6+C,EAAAA,GAAAA,IAAuBrH,GAASxV,GAAYnC,EAAM3M,QAEvF8M,IAAiBH,EAAMif,WACtB7+C,EAAAA,GAAAA,GAAA,QAAMF,UAAW0d,GAAiBzd,SAAEw3C,GAAQ,oCAelD33C,EAAAA,GAAAA,IAAA,OAAKE,UvB/rBo3B,WuB+rB11BC,SAAA,CA3GrC,WACE,IAAKi5C,GAAa,OAElB,IAAI8F,EAAwB,iBAC5B,MAAMC,EAA6C,CACjD,iBAAkB,CAAC,UAAW,WAC9B,cAAe,CAAC,UAAW,WAC3B,kBAAmB,CAAC,UAAW,WAC/B,eAAgB,CAAC,UAAW,YAG9B,GAAI5M,GAAO,CACT,MAAM,WAAE3L,GAAgB5G,GAAS,eAAgBA,GAASA,EAAM4G,YAAe,CAAC,EAEhF,OAAQA,GACN,IAAK,YACHsY,EAAc,iBACd,MACF,IAAK,WACHA,EAAc,cACd,MACF,IAAK,eACHA,EAAc,kBACd,MACF,IAAK,SACHA,EAAc,eAEpB,KAAO,CACL,IAAKlf,KAAW,YAAaA,IAAUA,EAAMgT,SAC3C,OAGFkM,EAAclf,EAAMoe,kBAChB,kBACCpe,EAAMme,cAAgB,cAAgB,cAC7C,CAEA,OACEn+C,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GvB3nBg6B,WuB2nBx3Bg8B,IvB3nB05B,YuB4nB78BpkC,QAASokC,GAAQ0L,GAAwBC,GACzCh4C,MAAO,iBAAiBi5C,EAASD,GAAa,mBAAmBC,EAASD,GAAa,KAAK/+C,SAAA,EAE5FC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAMuxC,IACX3M,KAASnyC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,WAG3B,CA6DSyxC,GACA13C,KACCtH,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAW0d,GACXlL,OAAK,EACLqN,QAASvgB,GACTc,KAAK,OACL2N,MAAM,oBACNsS,UAAW0gB,GACX9yB,QAASiX,GACTzS,UAAWglC,GAAQ,UAAUx3C,UAE7BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAO6Q,GAAWoiB,GAAW,sBAAwB,qBAG/D5gC,EAAAA,GAAAA,IAAC0T,GAAAA,EAAY,CACXxT,UvBhtBq/B,WuBitBr/ByT,QAASnB,GACToB,UAAU,QACVyrC,OAAQrD,GACR/vC,QAASgwC,GAAwB97C,SAAA,CAEhCw5C,KAAev5C,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,OAAOlF,QAAS0vC,GAAoB19C,SAAEw3C,GAAQ,cAC5E4B,KACCn5C,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,aAAalF,QAAS2vC,GAAe39C,SACjDw3C,GAAQyB,GAAc,YAAc,iBAGxCI,KACCp5C,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,SAASlF,QAAS4vC,GAAiB59C,SAC/Cw3C,GAAQyB,GAAc,eAAiB,qBAG3CjY,KACC/gC,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,WAAWkN,UAAW+gB,GAAmBnzB,QAASswC,GAAet+C,SAC7Ew3C,GAAQ,yBAGXpF,IAAS6G,KACTh5C,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,sBAAsBlF,QAASmwC,GAAuBn+C,SAClEw3C,GAAQ,kBAGXpF,KAASnyC,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,OAAOlF,QAAS6vC,GAAuB79C,SAAEw3C,GAAQ,sBAC1EpF,KACCnyC,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,SACLI,aAAW,EACXtF,QAASo1B,GAAuBpjC,SAE/Bw3C,GAAQ,gBAIfv3C,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,GAAeqH,GvBvvBs0B,YuBwvBh2BlL,OAAK,EACLpS,KAAK,OACL2N,MAAM,oBACN0E,UAAWglC,GAAQ,SACnBxpC,QAASlC,EAAQ9L,UAEjBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,sBA6BjB3N,EAAAA,GAAAA,IAAA,OACEE,UvB5xB0mB,WuB6xB1mBgG,MAAO,UAAUwF,EAAW7B,oBAAoB6B,EAAWxB,WAAW/J,SAAA,EAEtEC,EAAAA,GAAAA,GAAA,UAAQiU,IAAK+lC,GAAUl6C,UAAW0d,KACjC/U,KACCzI,EAAAA,GAAAA,GAAA,OAEE8D,IAAK2E,GACL9E,WAAW,EACX4kB,IAAI,GACJzoB,WAAWqW,EAAAA,GAAAA,GAAeqH,GvBtyB+Y,WuBsyB5W08B,KAJxD,WAAW9W,KAOnByW,KACC75C,EAAAA,GAAAA,GAACk/C,GAAAA,EAAQ,CAACp/C,WAAWqW,EAAAA,GAAAA,GAAe2jC,GAA8Bt8B,OAElElW,IAAWo5B,KACX1gC,EAAAA,GAAAA,GAAA,OACE8D,IAAK48B,GACLnY,IAAI,GACJzoB,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAcu8B,IACxCp2C,WAAW,IAGd2D,IAAWo5B,KACV9gC,EAAAA,GAAAA,IAACu/C,GAAAA,EAAc,CACblrC,IAAK+M,GAELlhB,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAcu8B,IACxCqF,QAASxH,GACT3yB,MAAO7G,EACP3U,MrBxzBoB,IqByzBpBK,OrBxzBqB,KqByzBrBnG,WAAW,EACXyiB,aAAW,EACXjE,yBAAuB,EACvBk9B,YAAU,EACV54B,QAASwxB,GACT3xB,UAAW2xB,GACX7K,uBAAqB,EACrB1mB,aAAc22B,GAA2Bt9C,SAAA,EAEzCC,EAAAA,GAAAA,GAAA,UAAQ8D,IAAK48B,GAAex/B,KAAMkpC,GAAoB3gC,MAAM,QAC3Dm3B,KAAgB5gC,EAAAA,GAAAA,GAAA,UAAQ8D,IAAK88B,GAAc1/B,KVv0BpB,gCUu0BgDuI,MAAM,UAhBzE,SAAS25B,MAoBhBsV,KAAwBjB,KACxB73C,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,UACEkB,KAAK,SACLpB,WAAWqW,EAAAA,GAAAA,GAAeqH,GvB/0B2sC,YuBg1BruCzP,QAASovC,GACT,aAAY5F,GAAQ,eAEtBv3C,EAAAA,GAAAA,GAAA,UACEkB,KAAK,SACLpB,WAAWqW,EAAAA,GAAAA,GAAeqH,GvBr1B6tC,YuBs1BvvCzP,QAASqvC,GACT,aAAY7F,GAAQ,aAIzBxX,IAAiBW,KAChB1gC,EAAAA,GAAAA,GAACs/C,GAAAA,EAAgB,CAEf1f,MAAOA,EACPpmB,UAAQ,EACRu+B,eAAgBjY,IAHX,gBAAgBsD,KAAWx3B,MAMlCxM,KACAY,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAezd,UAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAoBzd,SAAA,EAClCC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACLC,KAAMA,KAER/zB,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAYzd,UAAEi0B,EAAAA,GAAAA,IAAWH,EAAAA,GAAAA,IAAa0jB,GAASxjB,IAAS,cAM/E6lB,KACC55C,EAAAA,GAAAA,GAAC+xC,GAAW,CAACnS,MAAOA,EAAO9/B,UAAW06C,KAEvCF,KACCt6C,EAAAA,GAAAA,GAAA,OACEypC,SAAU,EACVC,KAAK,SACL5pC,WAAWqW,EAAAA,GAAAA,GvBt3B2E,WuBs3BpCokC,IAClDxsC,QAASA,IAAMwqC,KACf,aAAYhB,GAAQ,WAGvBtX,KAAWjgC,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GvB33BsW,WuB23B/TukC,MAClED,KACCz6C,EAAAA,GAAAA,GAACu/C,GAAY,CAEX3f,MAAOA,EACPgQ,WAAYyI,GACZxI,SAAUyI,GACVxI,OAAQyI,GACRz4C,UAAW46C,IALN,WAAWtX,KAAWx3B,KAQ9BwuC,KACCp6C,EAAAA,GAAAA,GAACw/C,GAAAA,EAAQ,CACPt+C,KAAK,QACLsL,OAAQZ,EACR0D,SAAUmwC,EAAAA,GACVrc,QAASA,EACT/pB,SAAU84B,GACV/hC,gBAAgB,SAChBhR,UAAUsgD,EAAAA,EAAAA,MACVC,yBAA0BC,EAAAA,IAC1BC,gBAAiBC,EAAAA,IACjBC,QAAQ,mBACRjgD,WAAWqW,EAAAA,GAAAA,GvBl5BiU,WuBk5BjSkkC,IAC3CiE,iBAAkBA,GAClB1tC,UAAW6oC,GAAWvG,QAAqBrwC,EAC3Cm9C,QAAStI,GACTuI,OAAQtI,OAKlB,IC9zBA,IAAeh5C,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAqB,CAACtN,GAAU0yB,WAClD,MACEoN,aACE+e,mBAAoBC,EAAmB,OACvC7+C,EAAM,UACNozC,KAEA3lC,EAAAA,EAAAA,KAAe1N,GAEnB,MAAO,CACL++C,aAAcrsB,GAAMl0B,GAAKsgD,IAAsBpsB,EAAKl0B,SAAMgD,EAC1DvB,SACA++C,kBAAmBtsB,GAAMl0B,GAAK60C,GAAWyB,iBAAiBpiB,EAAKl0B,SAAMgD,IAZrD8L,CA9DpB,UAAsB,KACpBolB,EAAI,YAAE4Z,EAAW,aAAEyS,EAAY,kBAAEC,EAAiB,OAAE/+C,IAEpD,MAAM,gBAAEmtC,EAAe,uBAAEwI,IAA2BjrC,EAAAA,EAAAA,MAC9Ce,GAAOC,EAAAA,EAAAA,KAEP4yB,GAAQ73B,EAAAA,EAAAA,IAAkC,KAC9C,IAAK4lC,EACH,OAGF,MAAM,WACJvB,EAAU,WAAEkU,EAAU,KAAE3Z,GACtBgH,EACE4S,EAAmBnU,EAAWA,EAAWzqC,OAAS,KAAO2+C,EACzDE,EAAiBJ,GAAgBC,GAAmBvwB,SAASswB,GAC/DA,IAAiBG,EAAoBD,IAAe,GAAM,IACzD,EAGL,OAAO3Z,EAFUA,EAAK6Z,IAAiB3gD,IAAMwgD,IAAoB,IAAMjU,EAAW,KAGjF,CAACgU,EAAczS,EAAa0S,IAEzBI,EAAW7gB,GAAS,YAAaA,GAEvCr1B,EAAAA,EAAAA,IAAU,KACJq1B,IAAU6gB,GACZxJ,EAAuB,CAAErrC,OAAQg0B,EAAMh0B,UAExC,CAACg0B,EAAO6gB,IAEX,MAAMx+C,EAAQw+C,EAAW7gB,EAAM7sB,QAAQ9Q,WAAQY,EACzC69C,EAAYD,GAAWlgB,EAAAA,EAAAA,IAAkBX,QAAS/8B,EAElD89C,GADat4C,EAAAA,EAAAA,GAASq4C,IACGz+C,GAAOo+B,WAAWl3B,QAEjD,GAAK4qB,GAAS6L,KAAS,cAAeA,GAItC,OACEhgC,EAAAA,GAAAA,IAAA,OACEE,UAAW0d,GACXzP,QAASA,KAAQ0gC,EAAgB,CAAE7iC,OAAQg0B,EAAMh0B,OAAQw3B,QAASxD,EAAM//B,GAAIyB,YAAavB,SAAA,CAExF4gD,IACC3gD,EAAAA,GAAAA,GAAA,OAAK8D,IAAK68C,EAAUp4B,IAAI,GAAGzoB,UAAW0d,GAAc7Z,WAAW,IAEhE88C,IAAYzgD,EAAAA,GAAAA,GAACs/C,GAAAA,EAAgB,CAAC1f,MAAOA,KAEtC5/B,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAezd,UAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAoBzd,SAAA,EAClCC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACLC,KAAMA,KAER/zB,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAYzd,UAAEi0B,EAAAA,GAAAA,IAAWH,EAAAA,GAAAA,IAAa9mB,EAAMgnB,IAAS,aAK/E,IC3BkC,IAE7BhL,GAAc,SAAdA,GAAc,OAAdA,EAAAA,EAAc,2BAAdA,EAAAA,EAAc,uBAAdA,CAAc,EAAdA,IAAc,IAkZnB,UAAepqB,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAsBtN,IACxC,MACE8/B,aACEv1B,OAAQg1C,EAAexd,QAAS6K,EAAc,aAAE4S,EAAY,cAAE7R,EAAa,UAAE8R,EAAS,UAAEC,EAAS,UAAErM,KAEnG3lC,EAAAA,EAAAA,KAAe1N,IACb,SAAE8qC,EAAU6U,gBAAgB,OAAEC,IAAa5/C,EAAOigC,QAExD,MAAO,CACL6K,WACA+U,QAASxM,GAAWwM,SAAWD,EAC/BL,gBACA3S,iBACA4S,eACA7R,gBACA8R,YACAC,cAEA1/C,IAAW8/C,EAAAA,EAAAA,KAAwB9/C,GAlBnBsN,CA7YpB,UAAqB,QACnBuyC,EAAO,cACPN,EAAa,eACb3S,EAAc,OACdtiC,EAAM,aACNk1C,EAAY,cACZ7R,EAAa,UACb8R,EAAS,UACTC,EAAS,SACT5U,EAAQ,kBACRt7B,EAAiB,SACjBgmC,EAAQ,QACRhrC,EAAO,SACP4E,IAEA,MAAM,mBAAE2wC,IAAuBp1C,EAAAA,EAAAA,MACzBsd,GAAejgB,EAAAA,EAAAA,OACdg4C,EAAiBC,IAAsBn1C,EAAAA,EAAAA,IAASy0C,IAChDW,EAAkBC,IAAuBr1C,EAAAA,EAAAA,IAAS8hC,GACnDwT,GAAalrB,EAAAA,EAAAA,GAAsBqqB,GACnCc,GAAqBvR,EAAAA,GAAAA,GAAiB4Q,GAAW,GACjDY,GAAqBxR,EAAAA,GAAAA,GAAiB2Q,GAAW,GACjDc,GAAwBzR,EAAAA,GAAAA,GAAiB0Q,GAAc,GACvDgB,GAAyB1R,EAAAA,GAAAA,GAAiBnB,GAAe,GACzD8S,EAAaljB,MACX90B,OAAQ6gB,EAAclhB,MAAOmhB,IAAgBE,EAAAA,GAAAA,KAC/ClB,GAAoBvgB,EAAAA,EAAAA,SAAmCxG,GACvDinB,GAAgBzgB,EAAAA,EAAAA,KAAO,IACvB,SAAEjK,IAAaC,EAAAA,EAAAA,MAEf0iD,GAAa14C,EAAAA,EAAAA,IAAoD,CAAC,IACjEutC,EAAgBoL,IAAkB7nC,EAAAA,EAAAA,KAAU,GAQnD,SAAS8nC,EAAOhuC,EAAiCrI,GAC1CqI,IAGA8tC,EAAWv4C,QAAQoC,GAGtBm2C,EAAWv4C,QAAQoC,GAAQpC,QAAUyK,EAFrC8tC,EAAWv4C,QAAQoC,GAAU,CAAEpC,QAASyK,GAI5C,EAfA8W,EAAAA,GAAAA,GAAe,CACbvR,SAAU7N,EACVqf,OAAQnf,EACRof,kBAAkB,IAcpB,MAAMi3B,GAAmBn6C,EAAAA,EAAAA,IAAQ,KAC/B,GAAIs5C,IAAoBO,GAAyBC,GAC/C,MAAO,CAACR,GAGV,MAAM78C,EAAQ68C,EAAkBH,EAAQ9kB,QAAQilB,IAAoB,EACpE,IAAKA,IAA8B,IAAX78C,EACtB,MAAO,GAGT,MAAMiZ,EAAQvK,KAAKma,IAAI7oB,EAAQ,EAAG,GAC5BkZ,EAAMxK,KAAK4a,IAAItpB,EAAQ,EAAG08C,EAAQv/C,QAExC,OAAOu/C,EAAQnT,MAAMtwB,EAAOC,IAC3B,CAACmkC,EAAwBD,EAAuBP,EAAiBH,IAE9DiB,GAAwBp6C,EAAAA,EAAAA,IAAQ,IAC/Bm6C,EAAiBvgD,QAAW0/C,EAI1Ba,EAAiB9lB,QAAQilB,IAHtB,EAIT,CAACA,EAAiBa,IAEfE,GAAsBr6C,EAAAA,EAAAA,IAAQ,IAC7Bm6C,EAAiBvgD,QAAWi/C,EAG1BsB,EAAiB9lB,QAAQwkB,IAFtB,EAGT,CAACA,EAAesB,KAEnB33C,EAAAA,EAAAA,IAAU,KACHnL,GAGLkiD,EAAmBV,IAClB,CAACA,EAAexhD,KAGnBmL,EAAAA,EAAAA,IAAU,KACJ82C,IAAoBT,GAAiB3S,IAAmBsT,GAC1DC,EAAoBvT,IAErB,CAAC2S,EAAe3S,EAAgBoT,EAAiBE,KAEpDh3C,EAAAA,EAAAA,IAAU,KACR,IAAInL,EAKJ,OAJIqiD,GAAcA,IAAeb,GAC/BoB,GAAe,GAGV,KACLA,GAAe,KAEhB,CAACP,EAAYb,EAAeoB,EAAgB5iD,KAE/CmL,EAAAA,EAAAA,IAAU,IACD,KACA0jC,GAAmB2S,GACxBQ,EAAmB,CACjBvO,aAAaC,EAAAA,EAAAA,IAAY8N,EAAe3S,MAG3C,CAACA,EAAgB2S,IAEpB,MAAMxiB,EAAcgkB,EAAsBD,EACpC5jB,EAAa4jB,EAAwBC,EAErCC,GAAsB91C,EAAAA,EAAAA,GAAgB,IACnC20C,EAAQoB,OAA+B,CAACC,EAAY32C,EAAQpH,KACjE,GAAIoH,IAAWy1C,EACbkB,EAAW32C,GAAUuyB,GAAiB,CACpCxU,MAAOm4B,EAAWn4B,MAClByU,cACAG,aACAF,kBAAmBE,QAEhB,CACL,IAAID,GAA2B,GAC1BC,GAAc/5B,EAAQ,GAAK08C,EAAQ18C,EAAQ,KAAO68C,IACrD/iB,GAA2B,GAEzBC,GAAc/5B,EAAQ08C,EAAQv/C,OAAS,GAAKu/C,EAAQ18C,EAAQ,KAAO68C,IACrE/iB,GAA2B,GAG7BikB,EAAW32C,GAAUuyB,GAAiB,CACpCxU,MAAOm4B,EAAWn4B,MAClByU,cACAG,aACAF,kBAAmBuiB,IAAkBh1C,IAAW2yB,EAChDD,4BAEJ,CAEA,OAAOikB,GACN,CAAC,KAGNh4C,EAAAA,EAAAA,IAAU,KACR,IAAK+e,EAAa9f,UAAYmC,EAC5B,OAGF,IAAI8kB,EAAU,EAEd,MAAM+xB,EAAqBA,IAClBnB,EAAkBU,EAAWv4C,QAAQ63C,IAAkB73C,aAAU3G,EAGpEsa,EAAa2R,IAGjB,GAAIhF,EAActgB,QAEhB,YADAsgB,EAActgB,SAAU,GAG1B,MAAMA,EAAUg5C,IAChB,GAAKh5C,EAEL,GAAIinB,GAlLgB,GAkLpB,CACE,MAAMgyB,EAAW1gD,SAASi4B,eAAe8lB,EAAAA,KACrC2C,IACFrqC,EAAAA,EAAAA,IAAgB,MACdsqC,EAAAA,GAAAA,GAAqBD,IAI3B,MAEIhyB,EA5LgB,IA6LlB5kB,IACmB,UAAfijB,EAAM5tB,QACRyhD,EAAAA,GAAAA,MACA93C,WAAW+3C,GAAAA,GA/LQ,SAkMrBxqC,EAAAA,EAAAA,IAAgB,KACd5O,EAAQ1D,MAAMmrC,YAAY,sBAAuB,UAKvD,OAAOj0B,EAAAA,GAAAA,IAAcsM,EAAa9f,QAAS,CACzC8kB,cAAc,EACdC,gBAAgB,EAChBK,eAAe,EACfJ,wBAAyB,YACzBpR,OAAQA,CAAC0R,EAAOC,GACdC,cAAaC,kBAEb,GAAInF,EAActgB,QAAS,OAE3B,GAAIoN,EAAAA,IAAgC,eAAtBmY,EAAa7tB,KAAuB,CAChD,MAAM,MAAEob,GAAWyS,EAAgCI,QAAQ,GAC3D,GAAI7S,GAAS8S,GAAAA,IAA6B9S,GAASsO,EAAcwE,GAAAA,GAC/D,MAEJ,CACA,GAAmB,cAAfN,EAAM5tB,KAAsB,OAChC,MAAMmuB,EAAanc,KAAKya,IAAIqB,GACtBM,EAAapc,KAAKya,IAAIsB,GACtBzlB,EAAUg5C,IAChB,GAAKh5C,IAEDogB,EAAkBpgB,UAAYuf,GAAewG,UAC5Crc,KAAKya,IAAI2B,GAAcG,GAAAA,IAA6BH,EAAaD,EAAaK,GAAAA,IAA2B,CAC5G9F,EAAkBpgB,QAAUuf,GAAewG,SAC3C,MAAMI,EAAQhF,EACd8F,GAAU/T,EAAAA,GAAAA,IAAMuS,GAAcU,EAAOA,GACjCc,EAAU,IACZrY,EAAAA,EAAAA,IAAgB,KACd5O,EAAQ1D,MAAMmrC,YAAY,sBAA0BxgB,GAAWrxB,EAAW,GAAK,GAA9B,QAGlC,UAAf0vB,EAAM5tB,MAAoBgS,KAAKya,IAAI8C,GAAWZ,MAChD1S,EAAU2R,GACVhF,EAActgB,SAAU,EAE5B,GAEF2T,eAED,CAACxR,EAAQE,EAAS+e,EAAaD,EAAcvrB,EAAUiiD,KAE1DxlC,EAAAA,EAAAA,IAAgB,KACd,GAAIzc,EAAU,OACd,MAAMmjD,EAAaF,IAEnBQ,OAAOC,QAAQf,EAAWv4C,SAASiO,QAAQ,EAAE7L,GAAUpC,eACrD,IAAKA,EAAS,OAEd,IAAKotC,IAOH,OANAptC,EAAQjG,UAAU+b,OAAO9B,GAAuBA,GAA+BA,IAC/EhU,EAAQ1D,MAAMmrC,YAAY,sBAAuB,OACjDznC,EAAQ1D,MAAMmrC,YAAY,sBAAuB,OACjDznC,EAAQ1D,MAAMmrC,YAAY,0BAA2B,UACrDznC,EAAQ1D,MAAMmrC,YAAY,wBAAyB8R,OAAOjB,EAAWtiB,gBAevE,IAAI/O,EAAU,EACV7kB,IAAWy1C,IACb5wB,GAjRqC,KAiRaqxB,EAAWriB,gBAC7Dj2B,EAAQjG,UAAUC,IAAIga,KAEpB5R,IAAWg1C,IACbnwB,EArRqC,KAsRrCjnB,EAAQjG,UAAUC,IAAIga,KAGxBhU,EAAQjG,UAAUC,IAAIga,IACtBhU,EAAQ1D,MAAMmrC,YAAY,sBAAuB,GAAGsR,EAAW32C,IAAW,OAC1EpC,EAAQ1D,MAAMmrC,YAAY,sBAAuB,GAAGxgB,QACpDjnB,EAAQ1D,MAAMmrC,YAAY,0BAtBpB2P,IAAkBh1C,EACbm3C,OAAOjB,EAAWtiB,eAEvB5zB,IAAWy1C,EACN0B,OAAOjB,EAAWriB,iBAEpB,QAkBV,CAACmhB,EAAehK,EAAgByK,EAAiBS,EAAY1iD,IAEhE,MAAM4jD,GAAsBz2C,EAAAA,EAAAA,GAAiBuiB,IAE3C,MAAMhiB,EAASgiB,EAAMhiB,OAEhBA,GAAWA,EAAOvJ,UAAUq2B,SAASpc,MAEtC6jC,IAAoBT,GACtBU,EAAmBV,GACnBY,EAAoBvT,IACXA,IAAmBsT,GAC5BC,EAAoBvT,GAEtB+T,GAAe,MAGjB,OAAI5iD,GAEAY,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAgBvJ,IAAKqV,EAAavpB,UAChDC,EAAAA,GAAAA,GAAA,OACEF,UAAW0d,GACXvJ,IAAMA,GAAQguC,EAAOhuC,EAAKotC,GAAkBthD,UAE5CC,EAAAA,GAAAA,GAACijD,GAAK,CACJr3C,OAAQy1C,EACRje,QAASme,EACT1K,SAAUA,EACVvrC,WAAYw2C,EAAWxiB,YACvBqX,iBAAkBgL,EAClBjL,kBAAmBgL,EACnB7wC,kBAAmBA,EACnBm+B,cAAeA,EACf4H,eAAgBA,EAChB/qC,QAASA,EACT4E,SAAUA,SAgElB7Q,EAAAA,GAAAA,IAAA,OACEE,UAAW0d,GACXvJ,IAAKqV,EACLxjB,MAAO,yBAAyBg8C,EAAWn4B,QAC3Cu5B,gBAAiBF,EAAoBjjD,SAAA,EAErCC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAiBzP,QAASlC,IACzCq2C,EAAiBvgD,OAAS,IACzB3B,EAAAA,GAAAA,GAAA,OAAKF,UzBvcuH,WyBuc7EgG,MAAO,WAAWg8C,EAAWviB,MAAMz1B,aAEnFo4C,EAAiBzuC,IAAI,CAAC7H,EAAQpH,IACzBoH,IAAWy1C,EA1CrB,SAAqBz1C,GACnB,MAAM9F,EAAQ1G,OAAWyD,GAAYsgD,EAAAA,GAAAA,GACnC,UAAUrB,EAAWxiB,YAAY71B,UACjC,yBAAyBq4C,EAAWxiB,YAAYx1B,YAGlD,OACE9J,EAAAA,GAAAA,GAAA,OAEEiU,IAAMA,GAAQguC,EAAOhuC,EAAKrI,GAC1B9L,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAcA,IACxC1X,MAAOA,EAAM/F,UAEbC,EAAAA,GAAAA,GAACijD,GAAK,CACJr3C,OAAQA,EACRw3B,QAASme,EACT1K,SAAUA,EACVvrC,WAAYw2C,EAAWxiB,YACvBqX,iBAAkBgL,EAClBjL,kBAAmBgL,EACnB7wC,kBAAmBA,EACnBm+B,cAAeA,EACf4H,eAAgBA,EAChB/qC,QAASA,EACT4E,SAAUA,KAhBP7E,EAoBX,CAeew3C,CAAY/B,GArE3B,SAA4Bz1C,EAAgBpH,EAAegb,GACzD,MAAM1Z,GAAQq9C,EAAAA,GAAAA,GACZ,UAAUrB,EAAWviB,MAAM91B,UAC3B,WAAWq4C,EAAWviB,MAAMz1B,YAExBhK,GAAYqW,EAAAA,GAAAA,GAChBqH,GzB5YiiB,WyB8YjiB,SAASgC,KAGX,OACExf,EAAAA,GAAAA,GAAA,OAEEiU,IAAMA,GAAQguC,EAAOhuC,EAAKrI,GAC1B9L,UAAWA,EACXgG,MAAOA,EAAM/F,UAEbC,EAAAA,GAAAA,GAACqjD,GAAY,CACXtvB,MAAMQ,EAAAA,EAAAA,MAAW2X,EAAAA,EAAAA,MAAatgC,GAC9B+hC,YAAaxB,IAAWvgC,MAPrBA,EAWX,CAgDa03C,CAAmB13C,EAAQpH,EAAOA,EAAQ29C,MAIzD,IC7ce,SAASoB,GAAiBC,EAFvB,GAGhB,MAAOC,EAAeC,IAAoBv3C,EAAAA,EAAAA,KAAS,IAC5Cw3C,EAASC,IAAcz3C,EAAAA,EAAAA,KAAS,GASvC,MAAO,CAAEs3C,gBAAeE,UAASE,cAPZt3C,EAAAA,EAAAA,GAAiBM,IACpC,MAAM,aAAEi3C,EAAY,UAAEvpB,EAAS,aAAE5kB,GAAiB9I,EAAEC,OAEpD42C,EAAiBnpB,EAAYipB,GAC7BI,EAAWE,EAAevpB,EAAY5kB,EAAe6tC,KAIzD,C,0ECjBA,UAAgB,aAAa,WAAW,UAAY,WAAW,qBAAqB,WAAW,iBAAmB,WAAW,KAAO,WAAW,aAAe,WAAW,gBAAgB,WAAW,aAAe,WAAW,OAAS,WAAW,QAAU,WAAW,aAAa,WAAW,UAAY,WAAW,iBAAiB,WAAW,cAAgB,WAAW,SAAW,WAAW,KAAO,WAAW,cAAc,WAAW,WAAa,WAAW,YAAY,WAAW,SAAW,WAAW,YAAY,WAAW,SAAW,WAAW,OAAS,WAAW,cAAc,WAAW,WAAa,WAAW,SAAW,WAAW,OAAS,WAAW,YAAc,WAAW,kBAAkB,WAAW,cAAgB,WAAW,OAAS,WAAW,QAAU,WAAW,MAAQ,WAAW,WAAa,WAAW,sBAAsB,WAAW,kBAAoB,YCkCn2BO,GAAwB,IAAMnuC,EAAAA,EAkKpC,IAAejX,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAqB,CAACtN,GAAU2iD,gBAG3C,CACLjwB,MAHWQ,EAAAA,EAAAA,KAAWlzB,EAAQ2iD,EAAUp4C,QAIxCq4C,mBAAoB5iD,EAAO6iD,UAAUD,qBALrBt1C,CA/JFw1C,EAChBH,YACAjwB,OACAkwB,yBAEA,MAAM,SACJtV,EAAQ,iBACRyV,EAAgB,YAChBC,EAAW,UACXC,EAAS,cACTC,EAAa,gBACbC,EAAe,aACfjyB,EAAY,gBACZkc,EAAe,oBACfgW,IACEz4C,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,KAEPuX,GAAchY,EAAAA,EAAAA,GAAgB,KAClC,MAAM,KAAErL,GAAS8iD,EAEjB,GAAa,WAAT9iD,EAMF,OALAujD,SACAhW,EAAgB,CACd7iC,OAAQo4C,EAAUp4C,OAClBw3B,QAAS4gB,EAAU5gB,UAKvBghB,IAEAv5C,WAAW,KACI,SAAT3J,EACFytC,EAAS,CAAE9uC,GAAImkD,EAAUp4C,SACP,YAAT1K,GACTqxB,EAAa,CAAE/lB,OAAQw3C,EAAUp4C,OAAQ6M,UAAWurC,EAAUvrC,aAzCrC,OA8CzBisC,GAAiB38C,EAAAA,EAAAA,IAAQ,KAC7B,KAAK2G,EAAAA,EAAAA,IAASs1C,EAAUp4C,QAAS,OACjC,MAAM,OAAEA,EAAM,kBAAE+4C,EAAiB,cAAEC,GAAkBZ,EAC/C7P,EAAOpgB,GACP,UAAE8wB,GAAc1Q,GAAQ,CAAC,EACzB2Q,GAAWjb,EAAAA,EAAAA,IAAgBsK,GAE3B9N,EAAmC,GAkDzC,OAhDKue,IACED,EAUHte,EAAQrzB,KAAK,CACX+xC,QAASA,KACPV,EAAY,CAAExmB,OAAQjyB,EAAQo5C,eAAe,IAC7CR,EAAgB,CAAE3mB,OAAQjyB,EAAQ+4C,mBAAmB,KAEvDx3C,MAAOJ,EAAK,kBAAmB+3C,GAC/B7xC,KAAM,eAfRozB,EAAQrzB,KAAK,CACX+xC,QAASA,KACPT,EAAU,CAAEzmB,OAAQjyB,EAAQo5C,eAAe,IAC3CR,EAAgB,CAAE3mB,OAAQjyB,EAAQ+4C,mBAAmB,KAEvDx3C,MAAOJ,EAAK,gBAAiB+3C,GAC7B7xC,KAAM,eAcR4xC,EACFxe,EAAQrzB,KAAK,CACX+xC,QAASA,KACPR,EAAc,CAAE1mB,OAAQjyB,KAE1BuB,MAAOJ,EAAK,iBACZkG,KAAM,cACNI,aAAa,IAGfgzB,EAAQrzB,KAAK,CACX+xC,QAASA,KACHH,GACFP,EAAY,CAAExmB,OAAQjyB,IACtB44C,EAAgB,CAAE3mB,OAAQjyB,EAAQg5C,eAAe,MAEjDN,EAAU,CAAEzmB,OAAQjyB,IACpB44C,EAAgB,CAAE3mB,OAAQjyB,EAAQg5C,eAAe,MAGrDz3C,MAAOJ,EAAK63C,EAAgB,UAAY,aACxC3xC,KAAM2xC,EAAgB,OAAS,cAC/BvxC,aAAcuxC,IAIXve,GACN,CAACt5B,EAAMi3C,EAAWjwB,IAEfkxB,EAA0C,SAAnBjB,EAAU9iD,KAAkB,eAClC,YAAnB8iD,EAAU9iD,KAAqB,UAAY,OACzCgkD,EAAuC,YAAnBlB,EAAU9iD,MAAyC,WAAnB8iD,EAAU9iD,KAE9DikD,GAASp9C,EAAAA,EAAAA,IAAQ,KACrB,MAAMq9C,EAAgC,WAAnBpB,EAAU9iD,MAAqB8iD,EAAUpkB,MAAMQ,aAAaglB,WACzE7xB,EAAQ,EAAC8xB,EAAAA,GAAAA,GAAiBt4C,EAAuB,IAAjBi3C,EAAU/wB,OAKhD,OAJImyB,GACF7xB,EAAMvgB,KAAKjG,EAAK,eAGXwmB,EAAM5M,KAAK,QACjB,CAAC5Z,EAAMi3C,IAEV,OACEhkD,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAEPziC,WAAWqW,EAAAA,GAAAA,GACT,iCACAqH,GAAO8nC,eACNtB,EAAUY,eAAiBZ,EAAUW,oBAAsBnnC,GAAO+nC,SAErEx3C,QAASwW,EACTihC,aAAiC,SAAnBxB,EAAU9iD,MAAmB8iD,EAAU5Q,UACnDpzC,EAAAA,GAAAA,GAACylD,GAAAA,EAAmB,CAClBrS,SAAU4Q,EAAU5Q,SACpBtzC,UAAW0d,GAAOkoC,aAClBxlD,KAAM6jD,GACNE,mBAAoBA,EACpB0B,eAAa,SAEb9iD,EACJ6hD,eAAgBA,EAChBkB,mBAAiB,EACjBC,oBAAqBroC,GAAOsoC,WAAW/lD,UAEtC2O,EAAAA,EAAAA,IAASs1C,EAAUp4C,SAClB5L,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CACdjmD,WAAWqW,EAAAA,GAAAA,GAAe+uC,GAAqB1nC,GAAOwoC,mBACtDnoB,OAAQmmB,EAAUp4C,OAClBq6C,kBAAgB,EAChBd,OAAQA,EACRF,WAAYA,EACZngB,eAAa,KAGf9kC,EAAAA,GAAAA,GAACkmD,GAAAA,EAAa,CACZpmD,WAAWqW,EAAAA,GAAAA,GAAe+uC,GAAqB1nC,GAAOwoC,mBACtDx5C,OAAQw3C,EAAUp4C,OAClBu5C,OAAQA,EACRF,WAAYA,KAlCXjB,EAAUp4C,WCkHrB,IAAejN,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAYtN,IAC9B,MAAM,UAAE6yC,GAAc7yC,GACd8/B,aAAa,UAAEqT,KAAgBzlC,EAAAA,EAAAA,KAAe1N,IAChD,QACJ+hC,EAAO,MAAE8O,EAAK,WAAEiU,EAAU,UAAExxB,GAC1B6f,GAAa,CAAC,EACZ5U,EAAQwD,GAAUmD,EAAAA,EAAAA,KAAgBllC,EAAQA,EAAO+yB,cAAgBgP,QAAWvgC,EAC5EujD,EAAuC,UAArBxmB,IAAQ,SAAuBA,EAAMkJ,gBAAajmC,EAE1E,MAAO,CACLqvC,QACAmU,kBAAmBD,EAAmBA,EAAkBlS,EAAUoC,8BAA4BzzC,EAC9F+8B,MAAOA,GAAS,YAAaA,EAAQA,OAAQ/8B,EAC7CsjD,aACAxxB,YACAkL,sBAAsB0B,EAAAA,EAAAA,KAA2BlgC,KAfjCsN,CA1NpB,UAAwB,MACtBixB,EAAK,kBACLymB,EAAiB,MACjBnU,EAAK,WACLiU,EAAU,UACVxxB,EAAS,qBACTkL,IAEA,MAAM,kBACJymB,EAAiB,oBAAE7B,EAAmB,gBAAE8B,IACtCv6C,EAAAA,EAAAA,OAEGw6C,EAAiBC,EAAkBC,IAAsBznD,EAAAA,EAAAA,IAAQ,IACjE0nD,EAAmBC,EAAoBC,IAAwB5nD,EAAAA,EAAAA,IAAQ,IACvEmlC,EAAO0iB,IAAY36C,EAAAA,EAAAA,IAAS,IAE7BY,GAAOC,EAAAA,EAAAA,KAEPrB,EAASZ,QAAQ60B,GACjBmnB,EAAYh8C,QAAQs7C,IAAsBA,GAAoBrkB,EAAAA,GAAAA,OAC9D,WAAEqQ,EAAa,EAAC,eAAEE,EAAiB,GAAM3S,GAAOsS,OAAS,CAAC,EAE1D8U,EAAyBpnB,GAAOgT,UAAYP,EAAa4U,EAAAA,IACzDC,EAA4B3U,EAAiB4U,EAAAA,IAC7CC,EAAmB/U,EAAagV,EAAAA,IAChCC,EAAYN,GAA0BE,GAA6BE,GAEzE78C,EAAAA,EAAAA,IAAU,KACHoB,IACHm7C,EAAS,IACTJ,IACAE,MAED,CAACj7C,IAEJ,MAAM47C,GAAep8B,EAAAA,GAAAA,GAAqB,KACxCo7B,EAAgB,CAAE5xB,WAAW,KAC5B,GAvCoB,KAuCE,IAEzBpqB,EAAAA,EAAAA,IAAU,KACRg9C,KACC,CAACf,EAAiBG,EAAmBviB,EAAOmjB,IAE/C,MAAMC,GAAcz/C,EAAAA,EAAAA,IAAQ,IACnBmqC,GAAOuV,KA6JlB,SAA2Bd,GACzB,MAAO,CAACe,EAAqBC,KAC3B,GAAIhB,EAAmB,CACrB,MAAMiB,EAAuB,SAAXF,EAAExmD,MAAmBwmD,EAAEtU,SACnCyU,EAAuB,SAAXF,EAAEzmD,MAAmBymD,EAAEvU,SACzC,GAAIwU,IAAcC,EAChB,OAAQ,EAEV,IAAKD,GAAaC,EAChB,OAAO,CAEX,CAEA,OAAOF,EAAE10B,KAAOy0B,EAAEz0B,KAEtB,CA5KuB60B,CAAkBnB,IACpC,CAACA,EAAmBzU,IAEjB6V,EAAoBP,GAAa7lD,OAAmC,EAA1BuR,KAAK4a,IAAIukB,EAAY,GAE/D2V,EAAkBj9C,QAAQy8C,GAAa7lD,SAAW6lD,EAAY7lD,OAAS0wC,GAAc0U,EAErFkB,GAAiB17C,EAAAA,EAAAA,GAAgB,KAChCqzB,GAAO//B,SAAqBgD,IAAfsjD,GAClBG,EAAkB,CAChB16C,OAAQg0B,EAAMh0B,OACdw3B,QAASxD,EAAM//B,GACfuc,OAAQ+pC,EACRQ,kBAAmBA,QAAqB9jD,EACxC2jD,gBAAiBA,QAAmB3jD,EACpCuhC,aAIE,aAAEyf,EAAY,cAAEJ,GAAkBF,KAElCvoB,GAAczuB,EAAAA,EAAAA,GAAgB,KAClCk4C,MAGIyD,GAAkEngD,EAAAA,EAAAA,IAAQ,IACvE,EAAGsK,YAAW1G,OAAQw8C,MAC3BvoD,EAAAA,GAAAA,IAACgO,EAAAA,EAAM,CACLw6C,OAAK,EACLloD,KAAK,OACL2N,MAAM,cACN/N,WAAWqW,EAAAA,GAAAA,IAAgBgyC,GAAc,SAAU3qC,GAAO6qC,WAAY7qC,GAAO8qC,WAC7EC,MAAOJ,EACPp6C,QAASsE,EACTE,UAAWxF,EAAK,UAAUhN,SAAA,EAE1BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAMo5C,EAAoB,gBAAkB,SAAU7mD,UAAW0d,GAAOgrC,YAC9ExoD,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,OAAOzN,UAAW0d,GAAOirC,cAGvC,CAAC9B,EAAmB55C,IAEvB,OACEnN,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASmvB,EACTl7B,UAAU,uBACVuiC,iBAAkB7kB,GAAOkrC,UACzBpmB,QAAM,EAAAviC,SAAA,CAELunD,IACC1nD,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAO6qB,OAAOtoC,SAAA,CAC3BinD,IACCpnD,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOmrC,cAAc5oD,SAAA,EACnCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,IAAgBqwC,GAAmBhpC,GAAO9P,SAAU8P,GAAO8qC,WACtEpoD,KAAK,OACL2N,MAAM,oBACNu6C,OAAK,EACLr6C,QAAS24C,EAAmB3mD,SAE3BgN,EAAK,iBAER/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,GAAeqwC,GAAmBhpC,GAAO9P,SAAU8P,GAAO8qC,WACrEpoD,KAAK,OACL2N,MAAM,oBACNu6C,OAAK,EACLr6C,QAAS04C,EAAiB1mD,SAEzBgN,EAAK,iBAIXm6C,IACCtnD,EAAAA,GAAAA,IAAC0T,GAAAA,EAAY,CACXxT,UAAW0d,GAAOiqC,KAClBl0C,QAAS20C,EACT10C,UAAU,QAAOzT,SAAA,EAEjBH,EAAAA,GAAAA,IAAC8T,GAAAA,EAAQ,CAACT,KAAK,gBAAgBlF,QAAS64C,EAAmB7mD,SAAA,CACxDgN,EAAK,mBACL45C,IACC3mD,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,QAAQzN,UAAW0d,GAAOorC,YAGzChpD,EAAAA,GAAAA,IAAC8T,GAAAA,EAAQ,CAACT,KAAK,SAASlF,QAAS84C,EAAqB9mD,SAAA,CACnDgN,EAAK,eACJ45C,IACA3mD,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,QAAQzN,UAAW0d,GAAOorC,cAK5CxB,IACCpnD,EAAAA,GAAAA,GAAC6oD,GAAAA,EAAW,CAAC/oD,UAAW0d,GAAOsrC,OAAQn8C,MAAOy3B,EAAO32B,SAAUq5C,QAIrElnD,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAOzK,SAAU0wC,GAAiBjmC,GAAOurC,YAAa,iBAChFC,SAAUnF,EAAa9jD,SAAA,CAEtBgnD,IAAcpyB,IAAcyP,GAASr5B,SAASy8C,GAAa7lD,UAC1D3B,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAOqZ,KAAMrZ,GAAOyrC,cAAclpD,UAC9Di0B,EAAAA,GAAAA,GACCjnB,EAAK8yB,EAAuB,qBAAuB,oBACnD,CAAC,kBAAmB,aAIxBlL,GAAa5pB,QAAQq5B,EAAMziC,UAAY6lD,GAAa7lD,SACpD3B,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOqZ,KAAK92B,SACzBgN,EAAK,qCAGVnN,EAAAA,GAAAA,IAACspD,GAAAA,EAAc,CACbC,MAAO3B,EACP4B,WAAYnB,EAAeloD,SAAA,CAE1BynD,GAAa/zC,IAAK41C,IACjB,MAAMC,EAAgC,YAAdD,EAAKnoD,KAAqBmoD,EAAK5wC,UACrC,WAAd4wC,EAAKnoD,KAAoBmoD,EAAKjmB,QAAU,OAC5C,OACEpjC,EAAAA,GAAAA,GAACmkD,GAAS,CAAwDH,UAAWqF,GAA7D,GAAGA,EAAKz9C,UAAUy9C,EAAKp2B,QAAQq2B,OAGlD30B,GAAaqX,MAAMtwB,KAAK,CAAE/Z,OAAQomD,IAAoBt0C,IAAI,CAAC81C,EAAGC,KAC7DxpD,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAGPziC,UAAU,+DACVqgB,UAAQ,EAAApgB,UAERC,EAAAA,GAAAA,GAACypD,GAAAA,EAAmB,KAJf,eAAeD,MAOvBxB,IACChoD,EAAAA,GAAAA,GAAA,OAA6BF,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAOqZ,KAAMrZ,GAAOksC,YAAY3pD,SACpFgN,EAAK,oCADC,4BAMf/M,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAOusB,OAAQ,kBAAkBhqC,UAC9DC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,GAAe,wBAAyBqH,GAAOrF,OAC1DrK,QAAM,EACNC,QAASitB,EAAYj7B,SAEpBgN,EAAK,eAKhB,ICpEA,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAYtN,IAC9B,MAAM,4BACJ4yB,EAA6BkN,aAAa,QACxCiC,EAAO,OAAEx3B,EAAM,mBAAE6oC,EAAkB,OAAEnzC,KAErCyN,EAAAA,EAAAA,KAAe1N,GACbu+B,EAAQh0B,GAAUw3B,GAAUmD,EAAAA,EAAAA,KAAgBllC,EAAQuK,EAAQw3B,QAAWvgC,EACvEmkB,GAAgBmN,EAAAA,EAAAA,KAA+B9yB,EAAQ,yBAE7D,MAAO,CACLsK,QAAQw1C,EAAAA,EAAAA,KAAwB9/C,GAChC4yB,8BACAroB,OAAQA,EACRw3B,UACAxD,QACAt+B,SACA0lB,gBACAytB,uBAjBgB9lC,CAnIpB,UAAqB,OACnBhD,EAAM,OACNC,EAAM,QACNw3B,EAAO,MACPxD,EAAK,OACLt+B,EAAM,4BACN2yB,EAA2B,cAC3BjN,EAAa,mBACbytB,IAEA,MAAM,iBAAE2P,EAAgB,wBAAEuF,EAAuB,YAAEC,IAAgB59C,EAAAA,EAAAA,MAE7De,GAAOC,EAAAA,EAAAA,MACN68C,EAAeC,IAAoB39C,EAAAA,EAAAA,SAAmCtJ,IACtEgO,EAAmBC,EAAiBC,IAAoB9R,EAAAA,EAAAA,IAAQ,IAEjE,cAAEgK,EAAa,UAAEo3B,GAAcV,GAAcC,GAC7CkiB,EAAaljB,KACbmrB,GAAaxzB,EAAAA,EAAAA,GAAsB5qB,GACnCisB,GAAoBrB,EAAAA,EAAAA,GAAsBttB,GAC1Cw4C,GAAalrB,EAAAA,EAAAA,GAAsB3qB,GACnC+rB,GAAapB,EAAAA,EAAAA,GAAsBj1B,GACnCm1B,EAAmB1rB,QAAQic,IAAkBiN,IAEnD1pB,EAAAA,EAAAA,IAAU,KACHoB,IACHm+C,OAAiBjnD,GACjBkO,MAED,CAACpF,KAEJpB,EAAAA,EAAAA,IAAU,KACR,IAAKoB,EACH,QAGFsrB,EAAAA,EAAAA,MACA,MAAMC,GAAuBC,EAAAA,EAAAA,MAE7B,MAAO,MACLC,EAAAA,EAAAA,MACAF,MAED,CAACvrB,IAEJ,MAAMqvB,GAAcr7B,EAAAA,EAAAA,IAAY,KAC9BykD,KACC,CAACA,IAEE4F,GAAwBz9C,EAAAA,EAAAA,GAAiB09C,IAC7CH,EAAiBG,GACjBn5C,MAGIo5C,GAAyB39C,EAAAA,EAAAA,GAAgB,KAC7CwE,IACA+4C,OAAiBjnD,KAGbsnD,GAAoB59C,EAAAA,EAAAA,GAAgB,KACnC62B,GACLwmB,EAAY,CAAExmB,UAASx3B,aA8BzB,OA3BArB,EAAAA,EAAAA,IAAU,IAAOoB,GAAS6vB,EAAAA,EAAAA,GAAsB,KAC9CR,WACGn4B,EAAY,CAACm4B,EAAarvB,KAE/BpB,EAAAA,EAAAA,IAAU,KACJksB,IAAqBszB,GAAcp+C,GAAUC,GAAUy0B,QAAwBx9B,IAAXvB,KACtEw2B,EAAAA,EAAAA,IAnFqB,IAmFoBC,EAAAA,K7BrGxC,SACL8F,EACAv8B,EACA8oD,EACAnhD,EACAqC,GAEA,MAAQ3F,QAASqyB,GAAczzB,GAASjD,EAAQu8B,GAChD,IAAK7F,EACH,OAEF,MAAQvuB,MAAOmhB,EAAa9gB,OAAQ6gB,GAAiBsN,EAAAA,EAAW/tB,MAChE,IAAMT,MAAO4uB,EAASvuB,OAAQwuB,GAAahtB,EAE3C,MAAMlM,EAAWwrB,GAhBE,IAkBnB,GAAIxrB,EAAU,CACZi5B,EAAUzN,EAAc,EAAIyS,GAC5B/E,EAAW3N,EAAeyS,GAAgB,EAAIC,GAE9C,MAAMgtB,EAAiBC,iBAAiBvoD,SAASwoD,iBAAiBC,iBAAiB,sBAC/EH,IACF/xB,GAAYmyB,WAAWJ,GAE3B,CAEA,MAAM7xB,EAASp5B,EAAWi+B,IAAiBzS,EAAcyN,GAAW,EAC9DI,EAAQr5B,EAAWi+B,IAAiB1S,GAAgB2N,EAAW8E,KAAkB,GAGrF/Z,IAAKuV,EAAS9c,KAAM+c,EAAUpvB,MAAOqvB,EAAWhvB,OAAQivB,GACtDf,EAAU7b,wBAERmd,EAAkBT,EAAWC,EAAY,GAAMN,EAASH,EAAU,GAClEkB,EAAkBX,EAAUG,EAAa,GAAMN,EAAQH,EAAW,GAClEkB,EAAaV,EAAYT,EACzBoB,EAAaV,EAAaT,GAEhClgB,EAAAA,EAAAA,IAAgB,KACd,MAAM/U,EAAQF,GAAY8F,GAAiBmhD,GAAQnhD,IACnDywB,EAAAA,EAAAA,IAAYr2B,EAAO,CACjBggB,IAAK,GAAGoV,MACR3c,KAAM,GAAG0c,MACT/uB,MAAO,GAAG4uB,MACVvuB,OAAQ,GAAGwuB,MACX3M,UAAW,eAAe2N,QAAqBC,iBAA8BC,MAAeC,OAG9F,MAAMj0B,EAAYzD,SAASi4B,eAAe,eAC1Cx0B,EAAUvB,YAAYZ,GACtBtB,SAASsd,KAAK9b,UAAUC,IAAI,oBAE5B4U,EAAAA,EAAAA,IAAgB,MACdshB,EAAAA,EAAAA,IAAYr2B,EAAO,CACjBsoB,UAAW,KAGb9gB,WAAW,MACTuN,EAAAA,EAAAA,IAAgB,KACV5S,EAAUo0B,SAASv2B,IACrBmC,EAAUq0B,YAAYx2B,GAExBtB,SAASsd,KAAK9b,UAAU+b,OAAO,sBAnEd,IAqEGyY,EAAAA,QAG9B,C6BmCM+B,CAAeluB,EAAQtK,EAAQ++B,EAAWp3B,EAAe64C,EAAWxiB,cAElE7I,GAAoBszB,IAAep+C,GAAU81C,GAAc7pB,QAAoC/0B,IAAf80B,KAClFG,EAAAA,EAAAA,IAvFqB,IAuFoBC,EAAAA,K7BpCxC,SACL8F,EACAv8B,EACA2H,GAEA,MAAQtD,QAASo0B,GAAYx1B,GAASjD,EAAQu8B,GAExC7F,EAAYj2B,SAASi4B,eAAe,eAAgB31B,cACxD,IAAImZ,OAAuBA,QAAkBA,OAAuBA,MAEtE,IAAKwa,IAAc+B,EACjB,OAEF,MACE1W,IAAKuV,EAAS9c,KAAM+c,EAAUpvB,MAAOqvB,EAAWhvB,OAAQivB,GACtDf,EAAU7b,yBAEZkH,IAAKoV,EAAO3c,KAAM0c,EAAQ/uB,MAAO4uB,EAASvuB,OAAQwuB,GAChDyB,EAAQ5d,wBAENuuC,EAAgBlyB,EAASH,EAAU,GAAMQ,EAAWC,EAAY,GAChE6xB,EAAgBlyB,EAAQH,EAAW,GAAMM,EAAUG,EAAa,GAChE6xB,EAAWvyB,EAAUS,EACrB+xB,EAAWvyB,EAAWS,GAE5B3gB,EAAAA,EAAAA,IAAgB,KACd,MAAM/U,EAAQF,GAAY8F,IAC1BywB,EAAAA,EAAAA,IAAYr2B,EAAO,CACjBggB,IAAK,GAAGuV,MACR9c,KAAM,GAAG+c,MACTpvB,MAAO,GAAGqvB,MACVhvB,OAAQ,GAAGivB,QAGb,MAAM+xB,EAAS3nD,GAAY42B,EAAQj2B,SAAKjB,GAAW,GAC7CkoD,EAAanyB,EAAUG,EAAa,EAAKD,EAAY,GAC3DY,EAAAA,EAAAA,IAAYoxB,EAAQ,CAClBznC,IAAK,GAAG0nC,MACRjvC,KAAM,GAAG+c,MACTpvB,MAAO,GAAGqvB,MACVhvB,OAAQ,GAAGgvB,QAGb,MAAMtzB,EAAYzD,SAASi4B,eAAe,eAC1Cx0B,EAAUvB,YAAYZ,GACtBtB,SAASsd,KAAKpb,YAAY6mD,GAC1B/oD,SAASsd,KAAK9b,UAAUC,IAAI,oBAE5B4U,EAAAA,EAAAA,IAAgB,MACdshB,EAAAA,EAAAA,IAAYr2B,EAAO,CACjBsoB,UAAW,eAAe++B,QAAmBC,iBAA4BC,MAAaC,QAGxFnxB,EAAAA,EAAAA,IAAYoxB,EAAQ,CAClBn/B,UAAW,eAAe++B,QAAmBC,iBAA4BC,KACzE9vB,QAAS,MAGXjwB,WAAW,MACTuN,EAAAA,EAAAA,IAAgB,KACV5S,EAAUo0B,SAASv2B,IACrBmC,EAAUq0B,YAAYx2B,GAGpBtB,SAASsd,KAAKua,SAASkxB,IACzB/oD,SAASsd,KAAKwa,YAAYixB,GAG5B/oD,SAASsd,KAAK9b,UAAU+b,OAAO,sBA9Id,IAgJGyY,EAAAA,QAG9B,C6BpCMgD,CAAe0mB,EAAY9pB,EAAYC,KAExC,CACDnB,EACAxtB,EACA2uB,EACAjsB,EACAo+C,EACAjI,EAAWxiB,YACXe,EACAz0B,EACA61C,EACAngD,EACAq2B,KAIA/3B,EAAAA,GAAAA,IAAC2d,GAAAA,EAAc,CACb1d,GAAG,cACHC,U9BjJiB,W8BkJjB6L,OAAQA,EACRkxB,0BAAwB,EACxBC,kBAAmB7I,EAA4Bl0B,SAAA,EAE/CC,EAAAA,GAAAA,GAAA,OAAKF,U9BtJwD,W8BsJ5BiO,QAASitB,KAC1Ch7B,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,U9BxJ+I,W8ByJ/IwS,OAAK,EACLpS,KAAK,UACL2N,MAAM,oBACN0E,UAAWxF,EAAK,SAChBgB,QAASitB,EAAYj7B,UAErBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAGbvN,EAAAA,GAAAA,GAACgrD,GAAW,CACVr/C,OAAQA,EACRkF,kBAAmBA,EACnBJ,SAAU05C,EACVt+C,QAASmvB,EACT6b,SAAUmT,KAGZhqD,EAAAA,GAAAA,GAACirD,GAAuB,CACtBt/C,OAAQkF,EACR+uB,MAAOiqB,EACPh+C,QAASq+C,KAEXlqD,EAAAA,GAAAA,GAACkrD,GAAc,KACflrD,EAAAA,GAAAA,GAACwhC,GAAgB,KACjBxhC,EAAAA,GAAAA,GAACmrD,GAAa,CAACx/C,OAAQ8oC,EAAoB5oC,QAAS89C,MAG1D,I,gHC5HA,MAEMyB,GAAkB,KAAOx1C,EAAAA,EACzBy1C,GAAkB,wBAkSxB,IAAe1sD,EAAAA,EAAAA,IA/RwB2sD,EACrC3/C,SACAyoB,gBACAm3B,gBACAzC,SACA0C,oBACA1rD,YACA2rD,WACAC,iBACAC,qBACA9/C,UACAC,sBACA8/C,yBAEA,MAAM,WAAEC,IAAe7/C,EAAAA,EAAAA,MAEjBurC,GAAUvqC,EAAAA,EAAAA,KACVsc,GAAejgB,EAAAA,EAAAA,MACfyiD,GAAoBziD,EAAAA,EAAAA,MACpB0iD,GAAY1iD,EAAAA,EAAAA,MACZ2iD,GAAiB3iD,EAAAA,EAAAA,OAChB4iD,EAAaC,IAAWC,EAAAA,GAAAA,GAAkBV,EAAUF,EAAexgD,QAAQ+9C,KAC3EsD,EAASC,IAAclgD,EAAAA,EAAAA,SAA6BtJ,IACpDypD,EAAaC,IAAkBpgD,EAAAA,EAAAA,IAAiB,IACjD+wB,EAAYkvB,EA7BK,EADD,EA+BhBI,EAAiBjB,EAAcnvB,QAAQ6vB,EAAa,IAEpDQ,GAAclgD,EAAAA,EAAAA,GAAgB,KAClCm/C,EAAe,OAEjBgB,EAAAA,GAAAA,GAAoBX,EAAWpgD,GApCT,IAoCmBuxB,EAA+BuvB,IACxEC,EAAAA,GAAAA,GAAoBV,EAAgBrgD,GApCb,IAoCuBuxB,GAE9C,MAAMyvB,GAAmBpgD,EAAAA,EAAAA,GAAiBlL,IACxC,GAAK+qD,EAIL,OAAOQ,EAAAA,EAAAA,KAAavrD,EAAQ+qD,KAGxBS,GAAkBC,EAAAA,GAAAA,GAAYH,IAE7BI,EAAUC,IAAUjlD,EAAAA,EAAAA,IAAQ,KACjC,MAAM1G,GAAS6qC,EAAAA,EAAAA,MACT+gB,EAAY5rD,EAAO6rD,MAAMvmB,KACzBwmB,EAAmB9rD,EAAO6rD,MAAME,aAEhCl+C,EAAO+9C,EAAUb,GAEvB,IAAKl9C,IAAS29C,EACZ,MAAO,MAAChqD,OAAWA,GAGrB,MAAMwqD,EAAcf,EAAYgB,cAE1B30C,EAASk0C,EACXhK,OAAO0K,OAAOV,GAAiBvK,OAAO,CAACkL,EAAKC,OAE1CC,EAAAA,EAAAA,IAAiBx+C,EAAMu+C,OAAO5qD,EAAWsqD,EAAiBf,KACrDiB,IAAeI,EAAMtgD,MAAMmgD,cAAcx9B,SAASu9B,KAEvDG,EAAIC,EAAM5tD,IAAM4tD,GAGXD,GACN,CAAC,GACFX,EAEJ,MAAO,CAAChK,OAAO8K,KAAKh1C,GAAQlF,IAAI6R,QAAS3M,IACxC,CAACyzC,EAASE,EAAaO,IAEpBe,GAAwBrhD,EAAAA,EAAAA,GAAgB,KAC5C8/C,OAAWxpD,GACX0pD,EAAe,MAGXsB,GAAqBthD,EAAAA,EAAAA,GAAiBM,IAC1C6+C,EAAe7+C,EAAE6X,cAAc/X,SAG3BmhD,GAA0BvhD,EAAAA,EAAAA,GAAiBM,IAC/C0/C,EAAe1/C,EAAE6X,cAAc/X,SAG3B6Y,GAAgBuoC,EAAAA,GAAAA,GAA0BzkC,EAAc3d,EAASnH,IACrE,GAAIynD,GAAeA,EAAYtqD,OAAS,EAAG,CACzC,MAAMsrD,GAAY/gB,EAAAA,EAAAA,MAAYghB,MAAMvmB,KAE9Bn6B,EAASy/C,GAAuB,IAAXznD,EAAe,EAAIA,GACxC0K,EAAO+9C,EAAUzgD,GACnB0C,GAAM8+C,SACHnB,GAAiBhB,EAAW,CAAEr/C,WACnC6/C,EAAW7/C,IAEXm/C,EAAmBn/C,EAEvB,GACC,IAAI6+C,MAAmB,GAEpB4C,GAAqBF,EAAAA,GAAAA,GAA0BjC,EAAmBngD,EAASnH,IAC3EuoD,GAAUprD,QACZgqD,EAAmBS,EAAUW,GAAoB,IAAXvoD,EAAe,EAAIA,KAE1D,IAAI6mD,MAAmB,GAEpB9mC,GAAchY,EAAAA,EAAAA,GAAiBC,IACnC,MAAMygD,GAAY/gB,EAAAA,EAAAA,MAAYghB,MAAMvmB,KAC9Bz3B,EAAO+9C,IAAYzgD,GACrB0C,GAAM8+C,SACHnB,GAAiBhB,EAAW,CAAEr/C,WACnC6/C,EAAW7/C,GACXigD,KAEAd,EAAmBn/C,KAIjB0hD,GAAiBvuD,EAAAA,EAAAA,IAAY,CAACE,EAAY2E,KAC9C,MAAMnD,GAAS6qC,EAAAA,EAAAA,MACf,IAAInY,GAAOQ,EAAAA,EAAAA,KAAWlzB,EAAQxB,GAC9B,IAAKk0B,EACH,OAGF,MAAMo6B,GAAmBC,EAAAA,EAAAA,KAAuB/sD,EAAQxB,GACpDsuD,IACFp6B,EAAOo6B,GAGT,MAAME,EAASt6B,KAASu6B,EAAAA,GAAAA,IAAcv6B,GAAQA,EAAKs6B,YAASxrD,GAgBrD+vB,EAAU27B,GAdjB,WACE,IAAKx6B,EAAM,OACX,GAAIA,EAAKl0B,KAAOu0B,EAAe,MAAO,CAACmjB,EAAQ,sBAC/C,IAAI+W,EAAAA,GAAAA,IAAcv6B,GAChB,MAAO,EAACy6B,EAAAA,EAAAA,IAAejX,EAASxjB,IAGlC,MAAM06B,GAAaC,EAAAA,EAAAA,KAAiBrtD,EAAQ0yB,EAAKl0B,IACjD,MAAO,EACL8uD,EAAAA,EAAAA,IAAcpX,EAASxjB,EAAM06B,IAC7Bt4C,EAAAA,GAAAA,IAAey4C,EAAAA,EAAAA,IAAa76B,EAAM06B,GAAY,IAAS,UAE3D,CAEsCI,IAAiB,GAEvD,OACE7uD,EAAAA,GAAAA,GAAC8uD,GAAAA,EAAU,CAEThvD,UAAWurD,GACXl+C,OACEnN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,gBAAeC,UAC5BC,EAAAA,GAAAA,GAAC+uD,GAAAA,EAAa,CACZjvD,UAAU,aACVi0B,KAAMA,EACNi7B,YAAajkD,QAAQojD,GACrBc,gBAAiBZ,MAIvBa,eACElvD,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACLC,KAAMA,EACNo7B,gBAAiBpkD,QAAQojD,GACzBc,gBAAiBZ,EACjBnuD,KAAK,WAGT0yB,SAAUA,EACV27B,kBAAmBA,EACnB5uC,QAAM,EACN7Z,MAAO,SAAS0mD,EAAiBhoD,GAAS4qD,EAAAA,SAE1CrhD,QAASA,IAAMwW,EAAY1kB,IAzBtBA,IA4BR,CAACu0B,EAAemjB,EAASiV,IA4F5B,OACExsD,EAAAA,GAAAA,GAACoN,EAAAA,EAAK,CACJzB,OAAQA,EACR7L,WAAWqW,EAAAA,GAAAA,GAAe,mBAAoBrW,GAC9C+L,QAASA,EACTC,oBAAqBA,EACrB8/C,mBAAoBA,EAAmB7rD,UAEvCC,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CAACC,UAAWA,EAAW3vB,KAAK,YAAYo7B,eAAe,yBAAwB5oC,SACvFA,IA5RgB,IA6RRm9B,GAlGXt9B,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,eAAeuW,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SAAA,EACnEC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC0E,OAAK,EAACzE,MAAM,cAAc3N,KAAK,UAAUqS,UAAWglC,EAAQ,QAASxpC,QAAS6/C,EAAsB7tD,UAC1GC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,kBAEbvN,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRsG,IAAK+3C,EACLr/C,MAAO2/C,EACP7+C,SAAUqgD,EACVuB,UAAWpB,EACXqB,YAAa9D,QAGjB5rD,EAAAA,GAAAA,IAACspD,GAAAA,EAAc,CACbj1C,IAAK63C,EACLhsD,UAAU,4BACVqpD,MAAO4D,EACPwC,yBAAuB,EACvBC,UA1MmB,IA0MPzC,GAAUprD,QAAU,GAChC0tD,UAAWpB,EAAmBluD,SAAA,EAE5BgtD,IAAY/sD,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,IACrB1C,GAAUt5C,IAAI,CAACi8C,EAASlG,KACvBxpD,EAAAA,GAAAA,GAAC8uD,GAAAA,EAAU,CAEThvD,UAAWurD,GAEXt9C,QAASA,IAAM49C,EAAmBS,EAAUsD,GAC5C5pD,MAAO,QApNQ,IAoNC0mD,EAAiBhD,QACjC0F,eACElvD,EAAAA,GAAAA,GAAC2vD,GAAAA,EAAS,CACRzvD,KAAMkrD,GACNqC,MAAOT,EAAO0C,GACd5vD,UAAU,aACV8vD,gBAAgB,sBAGpBziD,OAAO6mB,EAAAA,GAAAA,GAAWg5B,EAAO0C,GAASviD,QAb7B,GAAGi/C,KAAWsD,aAuB3B9vD,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,eAAeuW,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SAAA,EACnEC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN3N,KAAK,UACLqS,UAAWglC,EAAQ,SACnBxpC,QAASlC,EAAQ9L,UAEjBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAEbvN,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRsG,IAAK83C,EACLp/C,MAAOm8C,EACPr7C,SAAUogD,EACVwB,UAAW7pC,EACX8pC,YAAa9D,OAGhBS,GAAatqD,QACZ3B,EAAAA,GAAAA,GAACkpD,GAAAA,EAAc,CACbj1C,IAAKqV,EACLxpB,UAAU,4BACVqpD,MAAO8C,EACP4D,aAAc,IAAIxE,KAClBjC,WAAY8C,EACZqD,yBAAuB,EACvBC,UAAWjE,EAAc5pD,OAASytD,EAAAA,IAClCC,UAAW7pC,EAAczlB,SAExBksD,EAAYx4C,IAAIy6C,KAEjBjC,IAAgBA,EAAYtqD,QAC9B3B,EAAAA,GAAAA,GAAA,KAAGF,UAAU,aAAYC,SAAEw3C,EAAQ,iCAEnCv3C,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,aCvLlB,IAAe9wD,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MACE6rD,OAAO,QACL4C,EAAO,iBACPC,GACD,cACD37B,GACE/yB,EAEJ,MAAO,CACL2uD,cAAeF,EAAQ7O,OACvBgP,gBAAiBH,EAAQI,SACzBC,UAAWJ,EAAiB9O,OAC5Bjd,WAAY3iC,EAAOolC,aAAaT,QAChC5R,kBAfczlB,CAlG+ByhD,EACjDzkD,SACAyoB,gBACA47B,gBACAC,kBACAE,YACAnsB,aACArG,SAAS0yB,EAAAA,IACTvwD,YACA0rD,oBACAC,WACA6E,oBACAzkD,UACAC,sBACA8/C,qBACA2E,mBAEA,MAAOzH,EAAQ0H,IAAarkD,EAAAA,EAAAA,IAAS,IAC/Bg4B,GAAMp8B,EAAAA,EAAAA,IAAQ,KAClB,IAAK4D,EAAQ,OAEb,IAAI8kD,EAAcN,GAAa,GAC3B/7B,IACFq8B,GAAcxsB,EAAAA,GAAAA,IAAO,CAAC7P,KAAkBq8B,KAI1C,MAAMpvD,GAAS6qC,EAAAA,EAAAA,MAETgV,EAAU,IACV8O,GAAiB,MAChBlH,GAAUmH,GAAoB,IACnCtyB,OAAQ99B,IACR,MAAMqP,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQxB,GAC1Bs0C,GAAOC,EAAAA,EAAAA,KAAW/yC,EAAQxB,GAC1B6wD,EAAiBxhD,IAAQyhD,EAAAA,EAAAA,IAAiBzhD,EAAM,gBAChDskB,EAAYtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,GACxC,GAAIqhD,GAAgB/8B,IAAck9B,EAAgB,OAAO,EACzD,GAAIvc,KAASyc,EAAAA,EAAAA,IAAczc,GAAO,OAAO,EAEzC,IAAKjlC,EAAM,OAAO,EAElB,GAAIA,EAAK8/C,cAAe6B,EAAAA,EAAAA,KAAuBxvD,EAAQxB,GACrD,OAAO,EAGT,MAAMixD,GAAeC,EAAAA,EAAAA,KAAmB1vD,EAAQxB,GAEhD,OAAQixD,IAAgBpD,EAAAA,EAAAA,IAAiBx+C,OAAMrM,OAAWA,EAAWiuD,KAGjEE,GAASC,EAAAA,GAAAA,IACb/sB,EAAAA,GAAAA,IAAmB,CACjBC,KAAKF,EAAAA,GAAAA,IAAO,IACN7P,EAAgB,CAACA,GAAiB,MACnC8sB,KACCld,GAAc,KAEpBI,MAAO0kB,SAETjmD,EACA4tD,EACAr8B,GAGF,OAAO88B,EAAAA,EAAAA,KAAoB7vD,EAAQ2vD,EAAQrzB,IAC1C,CACDhyB,EACAwkD,EACA/7B,EACA47B,EACAlH,EACAmH,EACAjsB,EACArG,EACA4yB,IAGIY,GAAehhB,EAAAA,GAAAA,GAAiBhM,GAAK,GAE3C,OACEnkC,EAAAA,GAAAA,GAACsrD,GAAgB,CACf3/C,OAAQA,EACR7L,UAAWA,EACXyrD,cAAe4F,EACf/8B,cAAeA,EACfo3B,kBAAmBA,EACnB1C,OAAQA,EACR4C,eAAgB8E,EAChB/E,SAAUA,EACVE,mBAAoB2E,EACpBzkD,QAASA,EACTC,oBAAqBA,EACrB8/C,mBAAoBA,OCd1B,IAAejtD,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAsBtN,IACxC,MAAM,WAAEsR,EAAU,QAAEywB,IAAYr0B,EAAAA,EAAAA,KAAe1N,GAAQszC,gBACjD4b,EAAgB59C,GAAcA,EAAWhR,OAAS,EACxD,MAAO,CACLyyB,cAAe/yB,EAAO+yB,cACtBg9B,gBAAiBz+C,GAAYhR,QAAU,GAAK,EAC5C0vD,QAAStmD,QAAQq4B,GACjBmtB,iBAPgB5hD,CA5FsC2iD,EACxD3lD,SACAyoB,gBACAg9B,iBACAC,UACAd,mBAEA,MAAM,gCACJgB,EAA+B,sBAC/BC,EAAqB,gBACrBC,EAAe,uBACfC,EAAsB,aACtBC,EAAY,iBACZhwB,IACE31B,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,KAEP4kD,GAAmBr7B,EAAAA,EAAAA,GAAsB86B,GAAS,IACjDlrB,EAAS0rB,EAAaC,IAAiB7yD,EAAAA,EAAAA,MAC9CsL,EAAAA,EAAAA,IAAU,KACJoB,GACFkmD,KAED,CAAClmD,EAAQkmD,IAEZ,MAAME,GAAwBpyD,EAAAA,EAAAA,IAAY,CAACqyD,EAAqB1iD,KAC9D,MAAM++C,EAAS2D,IAAgB59B,EAC/B,GAAIi9B,EAAJ,CACEM,EAAa,CAAEM,SAAUD,IACzB,MAAM3wD,GAAS6qC,EAAAA,EAAAA,MACf,IAAIx9B,EAAAA,EAAAA,IAASsjD,GACXrwB,EAAiB,CACf/gC,QAASytD,EACLthD,EAAK,sDACLA,EACA,iBACAmlD,EAAAA,EAAAA,KAAuB9d,EAAAA,EAAAA,KAAW/yC,EAAQ2wD,WAG3C,CACL,MAAM9iD,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQ2wD,GAChC,IAAK9iD,EAAM,OAEXyyB,EAAiB,CACf/gC,QAASmM,EAAK,iBAAiBolD,EAAAA,EAAAA,IAAaplD,EAAMmC,KAEtD,CAEF,MAEA,GAAIm/C,EAAQ,CACV,MAAMztD,EAAUmM,EACdqkD,EACI,iDACA,iDAGNM,IACA/vB,EAAiB,CAAE/gC,WACrB,KAAO,CACL,MAAM4L,EAASwlD,EACTtC,EAAUpgD,EAAWgW,OAAOhW,QAAYzM,EAC1C0tD,EACFiB,EAAsB,CAAEhlD,SAAQkjD,YAEhC6B,EAAgC,CAAE/kD,SAAQkjD,WAE9C,GACC,CAACt7B,EAAeg9B,EAAgBC,EAAStkD,EAAMwjD,IAE5Cv1B,GAAcr7B,EAAAA,EAAAA,IAAY,KAC9B8xD,KACC,CAACA,IAEJ,GAAK9lD,GAAWw6B,EAIhB,OACEnmC,EAAAA,GAAAA,GAACowD,GAAe,CACdzkD,OAAQA,EACR7L,UAAW8xD,EAAmB,4BAAyB/uD,EACvD2oD,kBAAmBz+C,EAAKwjD,EAAe,YAAc,iBACrDD,kBAAmByB,EACnBlmD,QAASmvB,EACTlvB,oBAAqBgmD,EACrBvB,aAAcA,OCvDpB,IAAe5xD,EAAAA,EAAAA,IA/C4ByzD,EACzCC,qBAEA,MAAM1mD,EAASZ,QAAQsnD,IAAmBA,EAAe7lD,SACnD,kBACJ8lD,EAAiB,uBACjBC,IACEvmD,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MAENm5B,EAAS0rB,EAAaC,IAAiB7yD,EAAAA,EAAAA,MAC9CsL,EAAAA,EAAAA,IAAU,KACJoB,GACFkmD,KAED,CAAClmD,EAAQkmD,IAEZ,MAAME,GAAwBpyD,EAAAA,EAAAA,IAAY,CAACqyD,EAAqB1iD,KAC9DgjD,EAAkB,CAChB9lD,OAAQwlD,EACR1iD,WACAwF,KAAMu9C,EAAgBv9C,KACtB09C,MAAOH,EAAgBG,SAExB,CAACF,EAAmBD,IAEjBr3B,GAAcr7B,EAAAA,EAAAA,IAAY,KAC9B4yD,KACC,CAACA,IAEJ,GAAK5mD,GAAWw6B,EAIhB,OACEnmC,EAAAA,GAAAA,GAACowD,GAAe,CACdzkD,OAAQA,EACR6/C,kBAAmBz+C,EAAK,aACxB4wB,OAAQ00B,GAAgB10B,OACxB2yB,kBAAmByB,EACnBlmD,QAASmvB,EACTlvB,oBAAqBgmD,MCR3B,IAAenzD,EAAAA,EAAAA,IArCgC8zD,EAC7CC,+BAEA,MAAM,sBAAEC,EAAqB,cAAEC,IAAkB5mD,EAAAA,EAAAA,MAC3Ce,GAAOC,EAAAA,EAAAA,KAEPrB,EAASZ,QAAQ2nD,IAChBvsB,EAAS0rB,EAAaC,IAAiB7yD,EAAAA,EAAAA,MAC9CsL,EAAAA,EAAAA,IAAU,KACJoB,GACFkmD,KAED,CAAClmD,EAAQkmD,IAEZ,MAAM,IAAEgB,EAAG,OAAEl1B,EAAM,WAAEm1B,GAAeJ,GAA4B,CAAC,EAE3DK,GAAsBpzD,EAAAA,EAAAA,IAAaqyD,IACvCY,EAAc,CAAEC,IAAKA,EAAMrmD,OAAQwlD,EAAac,eAChDH,KACC,CAACE,EAAKD,EAAeD,EAAuBG,IAE/C,GAAKnnD,GAAWw6B,EAIhB,OACEnmC,EAAAA,GAAAA,GAACowD,GAAe,CACdzkD,OAAQA,EACR6/C,kBAAmBz+C,EAAK,UACxB4wB,OAAQA,EACR2yB,kBAAmByC,EACnBlnD,QAAS8mD,EACT7mD,oBAAqBgmD,M,gBCkE3B,SAASkB,GAAeznB,GACtB,OAAIA,EAAM0nB,WACD,mBAGJ1nB,EAAM2nB,YAIJ,uBAHE,UAIX,CAEA,UAAev0D,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACQ,CACL8xD,SAASpkD,EAAAA,EAAAA,KAAe1N,GAAQ8xD,QAChC/jD,oBAAoBC,EAAAA,EAAAA,KAAyBhO,KAJ/BsN,CArGYykD,EAAGD,UAAS/jD,yBAC1C,MAAM,cACJikD,EAAa,YACbC,IACEtnD,EAAAA,EAAAA,OACGunD,EAAaxsB,EAAWC,IAAc/nC,EAAAA,EAAAA,KAEvC8N,GAAOyqC,EAAAA,GAAAA,KAuESgc,MA3DQC,EAyCTloB,EA7CrB,IANAhhC,EAAAA,EAAAA,IAAU,KACJ4oD,EAAQxxD,OAAS,GACnBolC,KAED,CAACosB,EAASpsB,IAERosB,EAAQxxD,OAuEb,OAAOoJ,QAAQooD,EAAQxxD,UAPjB,gBADgB6xD,EAQyBL,EAAQA,EAAQxxD,OAAS,KAnE1C8xD,EA6DED,GA/C5B5zD,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQ4nD,EACR1nD,QAASm7B,EACTlnC,UAAU,UACVqN,MAAOJ,EAAK,4BACZjB,oBAAqBunD,EAActzD,SAAA,CAElCgN,EACC,uCACAlK,EACA,CAAE67C,WAAW,EAAMgV,cAAc,EAAMC,kBAAmB,CAAC,KAAM,YAEnE/zD,EAAAA,GAAAA,IAAA,OAAKE,UAAU,sBAAqBC,SAAA,EAClCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,wBACVgO,QAAM,EAENC,QA9Bc6lD,KACfxkD,IAILkkD,EAAY,CACVO,QAASJ,EACTK,YAAa1kD,IAEf43B,MAqB6BjnC,SAEtBgN,EAAK,SAER/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC9N,UAAU,wBAAwBgO,QAAM,EAACC,QAASi5B,EAAWjnC,SAAEgN,EAAK,oBAM/Dw+B,EAuBAioB,GArBjB5zD,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQ4nD,EACR1nD,QAASm7B,EACTl7B,oBAAqBunD,EACrBvzD,UAAU,QACVqN,MAAO6lD,GAAeznB,GAAOxrC,SAAA,CAE5BwrC,EAAM2nB,aAAca,EAAAA,GAAAA,IAAqBxoB,IACtCvX,EAAAA,GAAAA,GAAWuX,EAAM3qC,QAAS,CAAC,kBAAmB,QAAS,QAC3DZ,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAClCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACE,QAAM,EAACC,QAASi5B,EAAWjnC,SAAEgN,EAAK,kB,gBCjFpD,MAcA,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IAAiC2yD,EAAAA,GAAAA,KAAKjlD,EAAAA,EAAAA,KAAe1N,GAAS,CAAC,kBAD9CsN,CAdkBslD,EAAGC,oBACvC,GAAKA,EAAcvyD,OAInB,OACE3B,EAAAA,GAAAA,GAAA,OAAKH,GAAG,gBAAeE,SACpBm0D,EAAczgD,IAAK0gD,IAClBn0D,EAAAA,GAAAA,GAACo0D,GAAAA,EAAY,CAA4BD,aAAcA,GAApCA,EAAaE,e,gBCPxC,MAgCA,IAAe11D,EAAAA,EAAAA,IAhCqB21D,EAAG/8C,UACrC,MAAM,oBAAEg9C,IAAwBvoD,EAAAA,EAAAA,MAE1Be,GAAOyqC,EAAAA,GAAAA,KAEPgd,GAAa70D,EAAAA,EAAAA,IAAY,KACxB4X,IAIL3M,OAAO6pD,MAAKC,EAAAA,GAAAA,IAAen9C,GAAM,SAAU,uBAC3Cg9C,EAAoB,CAAEh9C,SAAK1U,MAC1B,CAAC0xD,EAAqBh9C,IAEnBo9C,GAAgBh1D,EAAAA,EAAAA,IAAY,KAChC40D,EAAoB,CAAEh9C,SAAK1U,KAC1B,CAAC0xD,IAEEK,GAAezkB,EAAAA,GAAAA,GAAiB54B,GAEtC,OACEvX,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQZ,QAAQwM,GAChB1L,QAAS8oD,EACTxnD,MAAOJ,EAAK,gBACZgb,WAAWiM,EAAAA,GAAAA,GAAWjnB,EAAK,cAAe,CAAEwK,IAAKq9C,GAAgB,CAAElW,WAAW,EAAMgV,cAAc,KAClGpwB,aAAcv2B,EAAK,kBACnBw2B,eAAgBixB,M,gBC1CtB,MCmGA,IAAe71D,EAAAA,EAAAA,IAhFMk2D,EAAG1sB,YACtB,MAAM,cAAE2sB,IAAkB9oD,EAAAA,EAAAA,OAElB+oD,MAAOC,EAAQ,KAAEhlC,GAASmY,GAAS,CAAC,EAEtCp7B,GAAOC,EAAAA,EAAAA,KAEPrB,EAASZ,QAAQiqD,GAEjBh6B,GAAczuB,EAAAA,EAAAA,GAAgB,KAClCuoD,OAGKG,EAAWC,EAASC,EAAUC,IAAUrtD,EAAAA,EAAAA,IAAQ,KACrD,IAAKitD,EACH,MAAO,GAGT,MAAMK,GAASC,EAAAA,GAAAA,IAAc,SAAUN,EAAUhlC,GAC3CulC,GAAOD,EAAAA,GAAAA,IAAc,OAAQN,EAAUhlC,GACvCwlC,GAAMF,EAAAA,GAAAA,IAAc,MAAON,EAAUhlC,GAG3C,MAAO,CAACqlC,EAAQE,GAFFD,EAAAA,GAAAA,IAAc,QAASN,EAAUhlC,GAElBwlC,IAC5B,CAACR,EAAUhlC,IAERmG,GAAU5pB,EAAAA,EAAAA,GAAiBgL,IAC/Bu9C,IACAlqD,OAAO6pD,KAAKl9C,EAAK,SAAU,cAGvBk+C,GAAoBlpD,EAAAA,EAAAA,GAAgB,KACxC4pB,EAAQ8+B,KAGJS,GAAkBnpD,EAAAA,EAAAA,GAAgB,KACtC4pB,EAAQ++B,KAGJS,GAAmBppD,EAAAA,EAAAA,GAAgB,KACvC4pB,EAAQg/B,KAGJS,GAAiBrpD,EAAAA,EAAAA,GAAgB,KACrC4pB,EAAQi/B,KAGV,OACEx1D,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJi1B,iBDpEiB,WCqEjBl1B,MAAOJ,EAAK,eACZpB,OAAQA,EACRE,QAASmvB,EACTsH,QAAM,EAAAviC,SAAA,EAENH,EAAAA,GAAAA,IAAA,OAAKE,UD1EiC,WC0EPC,SAAA,EAC3B6W,EAAAA,IAAUomB,EAAAA,MACVh9B,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACw6C,OAAK,EAACloD,KAAK,UAAU6N,QAAS4nD,EAAiB51D,SAAC,gBAI1DC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACw6C,OAAK,EAACloD,KAAK,UAAU6N,QAAS0nD,EAAkB11D,SAAC,iBAGzDC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACw6C,OAAK,EAACloD,KAAK,UAAU6N,QAAS2nD,EAAgB31D,SAAC,eAGvDC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACw6C,OAAK,EAACloD,KAAK,UAAU6N,QAAS6nD,EAAe71D,SAAC,sBAIxDC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAClCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC9N,UAAU,wBAAwBgO,QAAM,EAACC,QAASitB,EAAYj7B,SACnEgN,EAAK,mB,gBCjEhB,MAsFA,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IAEQ,CACLw0D,aAFkBzhB,EAAAA,EAAAA,KAAW/yC,EAAQA,EAAO+yB,iBAF9BzlB,CAtF4BmnD,EAC9C3tB,QAAO0tB,kBAEP,MAAM,kBAAEE,EAAiB,iBAAEC,EAAgB,kBAAEC,IAAsBjqD,EAAAA,EAAAA,OAC5DkqD,EAAgBC,IAAmBhqD,EAAAA,EAAAA,KAAS,IAC5CiqD,EAAsBC,IAAyBlqD,EAAAA,EAAAA,KAAS,GACzDmqD,GAAcnmB,EAAAA,GAAAA,GAAiBhI,GAAO,IACtC,OAAEouB,EAAM,MAAEC,EAAK,yBAAEC,GAA6BH,GAAa3+C,SAAW,CAAC,EACvEk7C,EAAM2D,GAAQtqB,EAAAA,EAAAA,MAAYxF,MAAMC,KAAK6vB,QAAS3zD,EAE9CkK,GAAOC,EAAAA,EAAAA,KAEPwnD,GAAa70D,EAAAA,EAAAA,IAAY,KACzBwoC,GAAO5wB,KAAO2+C,GACK/tB,EAAM4I,OAASilB,EAAmBC,GAC1C,CACXS,eAAgBN,IAETE,GAAa/+C,KACtB3M,OAAO6pD,MAAKC,EAAAA,GAAAA,IAAe4B,EAAY/+C,KAAM,SAAU,YAEzDw+C,KACC,CACD5tB,EAAO+tB,EAAgBH,EAAmBC,EAAkBC,EAAmBG,EAAsBE,IAGjG3B,GAAgBh1D,EAAAA,EAAAA,IAAY,KAChCo2D,KACC,CAACA,IAEEY,GAAqBh3D,EAAAA,EAAAA,IAAagN,IACtCwpD,EAAgBxpD,GAChB0pD,EAAsB1pD,IACrB,CAACwpD,IAUJ,OAPA5rD,EAAAA,EAAAA,IAAU,KACJgsD,IACFJ,GAAgB,GAChBE,EAAsBtrD,QAAQ0rD,MAE/B,CAACA,EAA0BF,KAG5B32D,EAAAA,GAAAA,IAACyjC,GAAAA,EAAa,CACZ13B,OAAQZ,QAAQo9B,GAAO5wB,KACvB1L,QAAS8oD,EACTxnD,MAAOJ,EAAK,gBACZu2B,aAAcv2B,EAAK,gBACnBw2B,eAAgBixB,EAAWz0D,SAAA,EAE1Bi0B,EAAAA,GAAAA,GAAWjnB,EAAK,gBAAiBupD,GAAa/+C,KAAM,CAAC,UACrDg/C,IACCv2D,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP92D,UAAU,kBACVopC,QAASgtB,EACThpD,OACElN,EAAAA,GAAAA,GAAAimC,GAAAA,GAAA,CAAAlmC,UACGi0B,EAAAA,GAAAA,GACCjnB,EAAK,gCAAiC,CAACwpD,GAAQ1sB,EAAAA,EAAAA,IAAgBgsB,KAC/D,CAAC,sBAIPgB,QAASF,IAGZF,IACCz2D,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP92D,UAAU,kBACVopC,QAASktB,EACTlpD,OACElN,EAAAA,GAAAA,GAAAimC,GAAAA,GAAA,CAAAlmC,UACGi0B,EAAAA,GAAAA,GACCjnB,EAAK,yCAAyC88B,EAAAA,EAAAA,IAAgBgpB,IAC9D,CAAC,sBAIPgE,QAASR,EACTl2C,UAAW+1C,UCtFfY,GAA6B,IAAbC,EAAAA,IAqBhBC,GAAkB,CACtB,eACA,eACA,eACA,eACA,eACA,eACA,gBA2VF,SAASC,GAAcC,EAAcC,EAAeC,EAAaC,EAAgBC,GAC/E,MAAMC,EAAc,IAAIrrC,KAAKgrC,EAAMC,EAAOC,GACpCI,EAAeH,IAAWI,EAAAA,GAAAA,IAAYJ,GACtCK,EAAeJ,IAAWG,EAAAA,GAAAA,IAAYH,GAE5C,SAAII,GAAgBH,EAAcG,OAEvBF,GAAgBD,EAAcC,EAK3C,CAEA,SAASG,GAAgBhrD,GACvB,OAAOo2C,OAAOp2C,GAAOirD,SAAS,EAAG,IACnC,CAEA,SAASC,GAAUX,EAAcC,EAAeC,GAC9C,MAAO,GAAGF,KAAQC,EAAQ,KAAKC,GACjC,CAaA,UAAez4D,EAAAA,EAAAA,IAzXqBm5D,EAClCC,aACAC,QACAC,QACAC,eACAC,aACAxsD,SACAysD,iBACAC,aACAC,oBACAC,oBACAnsD,cACAP,UACA2sD,WACAC,eACAC,0BAEA,MAAM3rD,GAAOC,EAAAA,EAAAA,KACPmf,EAAM,IAAID,KAEVmrC,GAAUtvD,EAAAA,EAAAA,IAAQ,IAClBmwD,IAAiBF,EAAc,IAAI9rC,KAChC,IAAIA,KAAKhZ,KAAKma,IAAI2qC,GApDP,MAqDjB,CAACE,EAAcF,IACZV,GAAUvvD,EAAAA,EAAAA,IAAQ,IAClBowD,IAAeF,EAAc,IAAI/rC,KAC9B,IAAIA,KAAKhZ,KAAK4a,IAAImqC,GAASnB,GAAeA,KAChD,CAACqB,EAAYF,IAEVU,GAAqB5wD,EAAAA,EAAAA,IAAQ,IAAOgwD,EAAa,IAAI7rC,KAAK6rC,GAAc,IAAI7rC,KAAS,CAAC6rC,IACtFa,GAAariC,EAAAA,EAAAA,GAAsB5qB,IAClCktD,EAAoBC,IAA0B75D,EAAAA,EAAAA,IAAQ,IAEtD85D,EAAcC,IAAmB7sD,EAAAA,EAAAA,IAAewsD,IAChDM,EAAqBC,IAA0B/sD,EAAAA,EAAAA,IACpD,IAAI+f,KAAK6sC,EAAaI,cAAeJ,EAAaK,WAAY,KAEzDC,EAAeC,IAAoBntD,EAAAA,EAAAA,IACxCwrD,GAAgBgB,EAAmB9vB,cAE9B0wB,EAAiBC,IAAsBrtD,EAAAA,EAAAA,IAC5CwrD,GAAgBgB,EAAmBc,eAG/BlC,EAAcM,GAAUkB,EAAaI,cAAeJ,EAAaK,WAAYL,EAAaW,WAC1FC,EAAcV,EAAoBE,cAClCS,EAAeX,EAAoBG,WAEnCnvD,EAAciuD,GAAgBa,EAAac,UAAYxC,EAAQwC,WAC/D1B,GAAcY,EAAac,UAAYvC,EAAQuC,WAErDtvD,EAAAA,EAAAA,IAAU,MACHquD,GAAcjtD,IACjBqtD,EAAgBL,GAChBO,EAAuB,IAAIhtC,KAAKysC,EAAmBQ,cAAeR,EAAmBS,WAAY,IAC7FhB,IACFkB,EAAiB3B,GAAgBgB,EAAmB9vB,aACpD2wB,EAAmB7B,GAAgBgB,EAAmBc,kBAGzD,CAACd,EAAoBhtD,EAAQitD,EAAYR,KAE5C7tD,EAAAA,EAAAA,IAAU,KACJ2tD,IAAiBW,GAAsBE,EAAac,UAAYxC,EAAQwC,YAC1Eb,EAAgB3B,GAChBiC,EAAiB3B,GAAgBN,EAAQxuB,aACzC2wB,EAAmB7B,GAAgBN,EAAQoC,iBAE5C,CAACvB,EAAcW,EAAoBxB,EAAS0B,KAE/CxuD,EAAAA,EAAAA,IAAU,KACJ4tD,IAAeU,GAAsBE,EAAac,UAAYvC,EAAQuC,YACxEb,EAAgB1B,GAChBgC,EAAiB3B,GAAgBL,EAAQzuB,aACzC2wB,EAAmB7B,GAAgBL,EAAQmC,iBAE5C,CAACvB,EAAcC,EAAYU,EAAoBvB,EAASD,EAAS0B,KAEpExuD,EAAAA,EAAAA,IAAU,KACR,GAAIwtD,EAAY,CACd,MAAM+B,EAAkB,IAAI5tC,KAAK6rC,GACjCiB,EAAgBc,GAChBR,EAAiB3B,GAAgBmC,EAAgBjxB,aACjD2wB,EAAmB7B,GAAgBmC,EAAgBL,cACrD,GACC,CAAC1B,IAEJ,MAAMgC,EAA0B5B,GAAcwB,GAAextC,EAAIgtC,eAAiBS,GAAgBztC,EAAIitC,YAChG9B,GAAWqC,GAAerC,EAAQ6B,eAAiBS,GAAgBtC,EAAQ8B,WAC3EY,EAAyB9B,GAAgByB,GAAextC,EAAIgtC,eAAiBS,GAAgBztC,EAAIitC,YAEjG,cAAEa,EAAa,iBAAEC,EAAgB,cAAEC,IAAkBpyD,EAAAA,EAAAA,IAAQ,IA6NrE,SAA2BmvD,EAAcC,GACvC,MAAM8C,EAA0B,GAC1BC,EAA6B,GAC7BC,EAA0B,GAE1BlnC,EAAO,IAAI/G,KACjB+G,EAAKmnC,QAAQ,GACbnnC,EAAKonC,SAASlD,GACdlkC,EAAKqnC,YAAYpD,GACjB,MAAMqD,EAAWtnC,EAAKunC,UAAY,EAC5BC,EAAuB,IAAIvuC,KAAKgrC,EAAMC,EAAO,GAAGuC,UAEtD,IAAK,IAAIlQ,EAAI,EAAGA,EAAI+Q,EAAU/Q,IAC5ByQ,EAAcjnD,KAAKynD,EAAuBF,EAAW/Q,EAAI,GAG3D,KAAOv2B,EAAKmmC,aAAejC,GAAO,CAChC,MAAMuD,EAAWznC,EAAKymC,UACtBQ,EAAiBlnD,KAAK0nD,GACtBznC,EAAKmnC,QAAQM,EAAW,EAC1B,CAEA,MAAMC,GAAoBT,EAAiBv4D,OAASs4D,EAAct4D,QAAU,EAC5E,GAAIg5D,EAAmB,EACrB,IAAK,IAAInR,EAAI,EAAGA,GAAK,EAAImR,EAAkBnR,IACzC2Q,EAAcnnD,KAAKw2C,GAIvB,MAAO,CAAEyQ,gBAAeC,mBAAkBC,gBAC5C,CA1PIS,CAAkBjB,EAAaC,GAC9B,CAACA,EAAcD,IAEZkB,GAAc9yD,EAAAA,EAAAA,IAAQ,IACnBuwD,GA8QX,SAA2BvrD,EAAiBkmB,EAAYolC,GACtD,MAAMjB,GAAM0D,EAAAA,GAAAA,GAAmB7nC,EAAMlmB,EAAKguD,MAG1C,OAAI3D,KAFU0D,EAAAA,GAAAA,GAAmB,IAAI5uC,KAAQnf,EAAKguD,MAGzChuD,EAAKsrD,EAAa,2BAA6B,0CAA0C2C,EAAAA,GAAAA,IAAWjuD,EAAMkmB,IAG5GlmB,EAAKsrD,EAAa,wBAA0B,sCAAuC,CAACjB,GAAK4D,EAAAA,GAAAA,IAAWjuD,EAAMkmB,IACnH,CAvRgCgoC,CAAkBluD,EAAMgsD,EAAcV,GACjE,CAACtrD,EAAMgsD,EAAcT,EAAmBD,IAgCrCtyB,GAAepmC,EAAAA,EAAAA,IAAY,KAE7B64D,EADEN,GAAgBa,EAAe1B,EACxBA,EACAc,GAAcY,EAAezB,EAC7BA,EAEAyB,IAEV,CAACb,EAAcC,EAAYd,EAASC,EAASkB,EAAUO,IAEpDmC,GAAoBv7D,EAAAA,EAAAA,IAAakN,IACrC,MAAMF,EAAQE,EAAEC,OAAOH,MAAMwuD,QAAQ,UAAW,IAChD,IAAKxuD,EAAMhL,OAGT,OAFA23D,EAAiB,SACjBzsD,EAAEC,OAAOH,MAAQ,IAInB,MAAMyuD,EAAQloD,KAAKma,IAAI,EAAGna,KAAK4a,IAAIxI,OAAO3Y,GAAQ,KAE5CsmB,EAAO,IAAI/G,KAAK6sC,EAAac,WACnC5mC,EAAKooC,SAASD,GACdpC,EAAgB/lC,GAChBwlC,IAAexlC,GAEf,MAAMqoC,EAAW3D,GAAgByD,GACjC9B,EAAiBgC,GACjBzuD,EAAEC,OAAOH,MAAQ2uD,GAChB,CAACvC,EAAcN,IAEZ8C,GAAsB57D,EAAAA,EAAAA,IAAakN,IACvC,MAAMF,EAAQE,EAAEC,OAAOH,MAAMwuD,QAAQ,UAAW,IAChD,IAAKxuD,EAAMhL,OAGT,OAFA63D,EAAmB,SACnB3sD,EAAEC,OAAOH,MAAQ,IAInB,MAAM6uD,EAAUtoD,KAAKma,IAAI,EAAGna,KAAK4a,IAAIxI,OAAO3Y,GAAQ,KAE9CsmB,EAAO,IAAI/G,KAAK6sC,EAAac,WACnC5mC,EAAKwoC,WAAWD,GAChBxC,EAAgB/lC,GAChBwlC,IAAexlC,GAEf,MAAMyoC,EAAa/D,GAAgB6D,GACnChC,EAAmBkC,GACnB7uD,EAAEC,OAAOH,MAAQ+uD,GAChB,CAAC3C,EAAcN,IA0BlB,OACE74D,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASA,EACT/L,UAAU,gBACVuN,QAAS04B,EAAahmC,SAAA,EAEtBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,YAAWC,UACxBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACL2N,MAAM,cACNE,QAASlC,EAAQ9L,UAEjBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAGb3N,EAAAA,GAAAA,IAAA,MAAAG,SAAA,CACGgN,EAAK,YAAY6sD,EAAe,KAChC,IACAD,MAGH35D,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACL2N,MAAM,cACNsS,SAAU65C,EACVjsD,QAAUisD,OAA2Cn3D,EArI/D,WACEq2D,EAAwByC,IACtB,MAAMC,EAAW,IAAI1vC,KAAKyvC,GAG1B,OAFAC,EAASvB,SAASuB,EAASxC,WAAa,GAEjCwC,GAEX,EA8HyE77D,UAE/DC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,gBAGbvN,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACL2N,MAAM,cACNsS,SAAU45C,EACVhsD,QAAUgsD,OAA2Cl3D,EAtI/D,WACEq2D,EAAwByC,IACtB,MAAMC,EAAW,IAAI1vC,KAAKyvC,GAG1B,OAFAC,EAASvB,SAASuB,EAASxC,WAAa,GAEjCwC,GAEX,EA+HyE77D,UAE/DC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,iBAKjBvN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,mBAAkBC,UAC/BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,CAC3Bi3D,GAAgBvjD,IAAK2jD,IACpBp3D,EAAAA,GAAAA,GAAA,OAAKF,UAAU,2BAA0BC,UACvCC,EAAAA,GAAAA,GAAA,QAAAD,SAAOgN,EAAKqqD,QAGf6C,EAAcxmD,IAAKinD,IAClB16D,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAACC,EAAAA,GAAAA,GAAA,QAAAD,SAAO26D,OAE7CR,EAAiBzmD,IAAKinD,IACrB16D,EAAAA,GAAAA,GAAA,OACE0pC,KAAK,SACLD,SAAU,EACV17B,QAASA,KAAM8tD,OAlJD5oC,EAkJkBynC,OAjJ1C1B,EAAiB2C,IACf,MAAMC,EAAW,IAAI1vC,KAAKyvC,GAM1B,OALAC,EAASxB,QAAQnnC,GACjB2oC,EAASvB,SAAST,GAClBgC,EAAStB,YAAYX,GAErBlB,IAAemD,GACRA,IARX,IAA0B3oC,GAmJdnzB,WAAWqW,EAAAA,GAAAA,GACT,aACA,aACA8gD,GACE0C,EAAaC,EAAcc,EAAUrD,EAASC,GAE5C,WACAoD,EAAW,YAAc,GAC7BnD,IAAgBM,GAAU8B,EAAaC,EAAcc,IAAa,YAClE36D,SAEDgL,QAAQ2vD,KACP16D,EAAAA,GAAAA,GAAA,QAAAD,SAAO26D,OAIZP,EAAc1mD,IAAKinD,IAClB16D,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAACC,EAAAA,GAAAA,GAAA,QAAAD,SAAO26D,YAKjDtC,IAzGDx4D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAYC,SAAA,EACzBC,EAAAA,GAAAA,GAAA,SACEkB,KAAK,OACLpB,UAAU,eACVg8D,UAAU,UACVnvD,MAAO0sD,EACP5rD,SAAUytD,EACVlb,QAAS8Y,IACT,KAEF94D,EAAAA,GAAAA,GAAA,SACEkB,KAAK,OACLpB,UAAU,eACVg8D,UAAU,UACVnvD,MAAO4sD,EACP9rD,SAAU8tD,EACVvb,QAAS8Y,QA2Fbl5D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,SAAQC,SAAA,CACpBqM,IACCpM,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SACzBqM,KAGLxM,EAAAA,GAAAA,IAAA,OAAKE,UAAU,SAAQC,SAAA,EACrBC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLG,QAASg4B,EACT5lB,SAAUlW,EAAWlK,SAEpB86D,IAEFtC,IACCv4D,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACG,QAAS2qD,EAAqB5qD,QAAM,EAAA/N,SACzCw4D,eC1Tf,IAAe55D,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACQ,CAAE02D,YAAYhpD,EAAAA,EAAAA,KAAe1N,GAAQ06D,4BAF5BptD,CAxB+BqtD,EACjDrwD,SAAQosD,iBAER,MAAM,qBAAEkE,EAAoB,qBAAEC,IAAyBlwD,EAAAA,EAAAA,MAEjDmwD,GAAmBx8D,EAAAA,EAAAA,IAAaszB,IACpCgpC,EAAqB,CAAEt7C,UAAWsS,EAAK4mC,UAAY,MACnDqC,KACC,CAACA,EAAsBD,IAEpBlvD,GAAOC,EAAAA,EAAAA,KAEb,OACEhN,EAAAA,GAAAA,GAAC83D,GAAa,CACZnsD,OAAQA,EACRosD,WAAYA,EACZI,YAAU,EACVG,kBAAmBvrD,EAAK,cACxBlB,QAASqwD,EACT1D,SAAU2D,O,gBCVhB,MAgNA,IAAex9D,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUw8B,aAEF,CACLsW,KAFWtW,GAASuW,EAAAA,EAAAA,KAAW/yC,EAAQw8B,QAAUh7B,EAGjD4rD,WAAY5wB,GAAS6wB,EAAAA,EAAAA,KAAiBrtD,EAAQw8B,QAAUh7B,EACxDu5D,cAAe/6D,EAAOg7D,YAAYC,aANpB3tD,CAlM+B4tD,EACjD5wD,SACAkyB,SACA2+B,kBACAroB,OACAsa,aACA2N,oBAEA,MAAM,cAAEK,EAAa,cAAEC,EAAa,sBAAEC,IAA0B3wD,EAAAA,EAAAA,MAE1De,GAAOC,EAAAA,EAAAA,KACP4vD,GAAgBzsB,EAAAA,GAAAA,GAAiBgE,GACjC0oB,GAA2B1sB,EAAAA,GAAAA,GAAiBqsB,GAC5CM,GAAWzzD,EAAAA,EAAAA,OAEV88B,EAAS0rB,EAAaC,IAAiB7yD,EAAAA,EAAAA,MACvC89D,EAAWC,IAAgB7wD,EAAAA,EAAAA,IAAiBywD,GAAeG,WAAa,KACxEE,EAAUC,IAAe/wD,EAAAA,EAAAA,IAAiBywD,GAAeK,UAAY,KACrEE,EAAOC,IAAYjxD,EAAAA,EAAAA,IAAiBywD,GAAeS,aAAe,KAClEC,EAAwBC,IAA6BpxD,EAAAA,EAAAA,KAAkB,GACxEqxD,EAAiBzyD,QAAQgyD,KAAeP,GAAmBW,KAEjE5yD,EAAAA,EAAAA,IAAU,KACJoB,IACFkmD,IACAmL,EAAaJ,GAAeG,WAAa,IACzCG,EAAYN,GAAeK,UAAY,IACvCG,EAASR,GAAeS,aAAe,IACvCE,GAA0B,KAE3B,CAAC5xD,EAAQkmD,EAAa+K,GAAeG,UAAWH,GAAeK,SAAUL,GAAeS,eAE3F9yD,EAAAA,EAAAA,IAAU,MACHiL,EAAAA,IAAgB2wB,GACnBt7B,WAAW,KACTiyD,EAAStzD,SAASi0D,SAjDC,MAoDtB,CAACt3B,IAEJ,MAAMu3B,GAAwB/9D,EAAAA,EAAAA,IAAakN,IACzCmwD,EAAanwD,EAAEC,OAAOH,QACrB,IAEGgxD,GAAoBh+D,EAAAA,EAAAA,IAAakN,IACrCuwD,GAASQ,EAAAA,GAAAA,IAA0BxB,EAAevvD,EAAEC,OAAOH,SAC1D,CAACyvD,IAEEyB,GAAuBl+D,EAAAA,EAAAA,IAAakN,IACxCqwD,EAAYrwD,EAAEC,OAAOH,QACpB,IAEGquB,GAAcr7B,EAAAA,EAAAA,IAAY,KAC9Bg9D,IACAK,EAAa,IACbE,EAAY,IACZE,EAAS,KACR,CAACT,IAEE52B,GAAepmC,EAAAA,EAAAA,IAAY,KAC3B68D,IAAoB3+B,EACtB6+B,EAAc,CACZK,YACAE,WACAI,YAAaF,IAGfV,EAAc,CACZ5+B,SACAk/B,YACAE,WACAK,4BAGH,CAACP,EAAWL,EAAeF,EAAiBS,EAAUE,EAAOG,EAAwBb,EAAe5+B,IAEvG,GAAKlyB,GAAWw6B,EAuFhB,OACEvmC,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJtN,UAAU,kBACVqN,MAAOJ,EAAK,cACZpB,OAAQA,EACRE,QAASmvB,EACTlvB,oBAAqBgmD,EAAc/xD,SAAA,CAElC68D,IAzFDh9D,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2BAA2BuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAC5EC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACL5zB,KAAK,QACL6zB,KAAM6oC,EACN9nD,KAAM,GAAGioD,KAAaE,OAExBr9D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gCAA+BC,SAAA,EAC5CC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,gCAA+BC,SACzC68D,GAAeS,aACZO,EAAAA,GAAAA,IAA0BxB,EAAeQ,EAAcS,aACvDtwD,EAAK,mBAEX/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA+BuW,IAAI,OAAMtW,UACtD4uD,EAAAA,EAAAA,IAAc5hD,EAAM6vD,EAAgBnO,YAI3CzuD,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRsG,IAAK6oD,EACLnwD,MAAOowD,EACP7vD,MAAOH,EAAK,aACZ08B,SAAU,EACVh8B,SAAUiwD,KAEZ19D,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRhB,MAAOswD,EACP/vD,MAAOH,EAAK,YACZ08B,SAAU,EACVh8B,SAAUowD,KAEZ79D,EAAAA,GAAAA,GAAA,KAAGF,UAAU,6BAA4BC,UACtCi0B,EAAAA,GAAAA,GACCjnB,EAAK,+BAAgC6vD,GAAeG,WAAa,IACjE,CAAC,QAAS,uBAGd/8D,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP92D,UAAU,kBACVopC,QAASo0B,EACT7zB,SAAU,EACVotB,QAAS0G,EACTrwD,MAAOH,EAAK,4BAEd/M,EAAAA,GAAAA,GAAA,KAAGF,UAAU,kEAAiEC,UAC3Ei0B,EAAAA,GAAAA,GAAWjnB,EAAK,wCAAyC6vD,GAAeG,iBA6C5EF,IArCDj9D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,+BAA+BuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAChFC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CAAC5zB,KAAK,QAAQ4U,KAAM,GAAGioD,KAAaE,OAC3Cr9D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wCAAuCC,SAAA,EACpDC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRsG,IAAK6oD,EACLnwD,MAAOwwD,EACPrB,UAAU,MACV5uD,MAAOH,EAAK,qBACZ08B,SAAU,EACVh8B,SAAUkwD,KAEZ39D,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRhB,MAAOowD,EACP7vD,MAAOH,EAAK,aACZ08B,SAAU,EACVh8B,SAAUiwD,KAEZ19D,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRhB,MAAOswD,EACP/vD,MAAOH,EAAK,YACZ08B,SAAU,EACVh8B,SAAUowD,WAiBhBj+D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLE,QAAM,EACNhO,UAAU,wBACVqgB,UAAWq9C,EACXzvD,QAASg4B,EAAahmC,SAErBgN,EAAK,WAER/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLE,QAAM,EACNhO,UAAU,wBACViO,QAASitB,EAAYj7B,SAEpBgN,EAAK,qB,4ECrNT,IAAK+wD,GAAgB,SAAhBA,GAAgB,OAAhBA,EAAAA,EAAgB,aAAhBA,EAAAA,EAAgB,mBAAhBA,EAAAA,EAAgB,eAAhBA,EAAAA,EAAgB,iBAAhBA,EAAAA,EAAgB,qBAAhBA,EAAAA,EAAgB,uBAAhBA,EAAAA,EAAgB,2BAAhBA,EAAAA,EAAgB,6BAAhBA,CAAgB,MAc5B,MAAMC,GAA+E,CACnF16C,IAAKy6C,GAAiBE,IACtB16C,OAAQw6C,GAAiBG,OACzBniD,KAAMgiD,GAAiBI,KACvB96C,MAAO06C,GAAiBK,MACxBC,QAASN,GAAiBO,QAC1BC,SAAUR,GAAiBS,SAC3BC,WAAYV,GAAiBW,WAC7BC,YAAaZ,GAAiBa,aAG1BC,GAAwB/b,OAAO8K,KAAKoQ,IAE1C,IAAIc,GACJ,MAAMC,GAAsB,CAAEtiD,EAAG,EAAGsG,EAAG,G,gBC1CvC,MCyHA,IAAenkB,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MACM09D,GADWhwD,EAAAA,EAAAA,KAAe1N,GACP09D,SAEnB,MAAEvI,IAAUwI,EAAAA,EAAAA,KAAmB39D,IAAW,CAAC,GAC3C,WAAE49D,EAAU,cAAEC,GAAkBH,GAAW,CAAC,EAC5CI,EAAkC,cAAfF,EAGzB,MAAO,CACLG,aAHmB5I,GAAQpiB,EAAAA,EAAAA,KAAW/yC,EAAQm1D,QAAS3zD,EAIvDs8D,mBACAD,kBAbcvwD,CA7FS0wD,EAC3BD,eAAcD,mBAAkBD,oBAEhC,MAAM,uBACJI,EAAsB,iBACtBC,IACEvzD,EAAAA,EAAAA,MAEEurC,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,KACPvjC,GAAM5K,EAAAA,EAAAA,MAENm2D,GAAsBz3D,EAAAA,EAAAA,IAAQ,IAC3Bm3D,GAAiBrc,OAAO0K,OAAO2R,GACrC,CAACA,IAEEO,EAAkBD,GAAqB79D,OAEvC2xC,GAAQvrC,EAAAA,EAAAA,IAAQ,KACpB,IAAK03D,EAAiB,MAAO,GAE7B,MAAMp+D,GAAS6qC,EAAAA,EAAAA,MACTwzB,EAAiBN,GAAcv/D,GAGrC,OAFmBokC,EAAAA,GAAAA,IAAO,CAACy7B,KAAmBF,EAAoB/rD,IAAKksD,GAAQA,EAAInJ,SAC3D/iD,IAAK5T,GAAOA,IAAMu0C,EAAAA,EAAAA,KAAW/yC,EAAQxB,IAAK89B,OAAO5yB,SAASgjC,MAAM,EAAG,IAE1F,CAAC0xB,EAAiBL,EAAcI,IAE7BI,GAAmBrzD,EAAAA,EAAAA,GAAgB,KACvCgzD,MAGIM,GAAoBtzD,EAAAA,EAAAA,GAAgB,KACxC+yD,EAAuB,CAAEQ,MAAO,gBAGlC,GAAKX,EAsBL,OACEv/D,EAAAA,GAAAA,IAAA,OACEqU,IAAKA,EACLnU,WAAWqW,EAAAA,GAAAA,GDzFM,YC2FfpW,SAAA,EAEFC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UD9FmG,WC+FnGwS,OAAK,EACLzE,MAAM,cACN3N,KAAK,OACLqS,UAAWglC,EAAQ,SACnBxpC,QAAS6xD,EAAiB7/D,UAE1BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAAC1S,UDrGmL,WCqG3JyN,KAAK,aAErCvN,EAAAA,GAAAA,GAACqzC,GAAAA,EAAU,CAACvzC,UDvG8G,WCuGnFI,KAAK,OAAOozC,MAAOA,IArC9D,WACE,MAAMysB,EAAgBzsB,EAAM3xC,OAAS,GAAK2xC,EAAM,IAAIypB,UAC9C5vD,EAAQsyD,GAAmBM,GAAiBN,EAAkB,EAChE1yD,EAAK,mBACL,CACEizD,QAASD,EACT3sC,MAAOqsC,EAAkB,GAE3B,CACEQ,YAAaR,EAAkB,IAEjCM,EAEJ,OACE//D,EAAAA,GAAAA,GAAA,OAAKF,UDhFyM,WCgFjLC,SAC1BoN,GAGP,CAoBK+yD,IACDlgE,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,GD1GoE,WC4G7E,WAEF7D,OAAK,EACLzE,MAAM,cACN3N,KAAK,OACL6N,QAAS8xD,EAAkB9/D,UAE3BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAAC1S,UDnHiK,WCmHpIyN,KAAK,yB,4BCnHhD,UAAgB,UAAY,WAAW,mBAAmB,WAAW,eAAiB,WAAW,kBAAkB,WAAW,cAAgB,WAAW,KAAO,YC8EhK,IAAe5O,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aAGF,CACL2nC,MAHWC,EAAAA,EAAAA,KAAW/yC,EAAQmL,KAFhBmC,CAhDpB,UAAwB,KAAEwlC,EAAI,aAAEgsB,IAC9B,MAAM,mBACJC,IACEp0D,EAAAA,EAAAA,MAEEe,GAAOyqC,EAAAA,GAAAA,KAEPjzB,GAAchY,EAAAA,EAAAA,GAAgB,KAClC,IAAK4nC,EACH,OAEF,MAAMqiB,EAAQriB,GAAMt0C,GACpB,IAAK22D,EACH,OAEF,MAAM6J,GAAQC,EAAAA,GAAAA,KACdF,EAAmB,CACjB5J,QACA5qD,OAAQ4qD,EACR6J,YAIJ,IAAKlsB,EAAM,OAEX,MAAMhnC,EAAQgnC,GAAM4oB,UACdwD,EAAkBpsB,GAAMqsB,eACxBC,EAAYF,GAAmBJ,GAAeO,EAAAA,GAAAA,IAAqB3zD,EAAMwzD,QAAmB19D,EAElG,OACE7C,EAAAA,GAAAA,GAAA,OACEF,UAAW0d,GAAOhY,UAClBuI,QAASwW,EAAYxkB,UAErBC,EAAAA,GAAAA,GAAC2gE,GAAAA,EAAS,CACR7gE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAOojD,gBAAiBT,GAAgB,sBAClEU,cAAerjD,GAAOjQ,KACtBuzD,eAAgBtjD,GAAOujD,eACvBC,mBAAoBxjD,GAAOyjD,cAC3BltC,KAAMogB,EACNr/B,KAAM3H,EACNszD,UAAWA,EACXS,UAAU,iBAIlB,IC5EA,IAAgB,KAAO,WAAW,OAAS,WAAW,gBAAgB,WAAW,aAAe,WAAW,kBAAkB,WAAW,eAAiB,WAAW,aAAe,YCiC7KC,IAAerrD,EAAAA,GAAAA,IAAUsrD,GAAOA,IAAM,KAAK,GA+FjD,IAAeziE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAYtN,IAC9B,MAAMggE,GAAetyD,EAAAA,EAAAA,KAAe1N,GAAQggE,aACtC9rC,EAAW8rC,EAAaC,gBAAgBpgB,QAE9C,MAAO,CACLvsB,WAAYY,GAAY8rC,EAAaE,gBAAgBC,QACrDjsC,WACAksC,aAAcpgE,EAAOqgE,WAAW17B,UAPhBr3B,CA7FuBgzD,EACzCpsC,WACAksC,mBAEA,MAAMlqB,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,MACNoqB,EAAoBC,IAAyB11D,EAAAA,EAAAA,KAAkB,IAChE,qBACJ21D,IACE91D,EAAAA,EAAAA,MAEE+1D,GAA2Bx1D,EAAAA,EAAAA,GAAgB,KAC/Cs1D,EAAuBG,IAAUA,MAG5Bn+B,EAAaC,IAAkB33B,EAAAA,EAAAA,IAAS,IAEzC81D,GAAmBl6D,EAAAA,EAAAA,IAAQ,IAC1BwtB,GAEE2O,EAAAA,GAAAA,IAAmB,CAAEC,IAAK5O,EAAU6O,MAAOP,EAAa3iC,KAAM,SAF/C,GAGrB,CAACq0B,EAAUsO,IAERokB,GAAiBtoD,EAAAA,EAAAA,IAAY,EAAG4sB,gBAChCA,IAAc21C,EAAAA,GAAkBC,WAClChB,GAAa,KACXW,OAGH,IAEGM,GAAyBziE,EAAAA,EAAAA,IAAY,KACzCmkC,EAAe,KACd,IAEH,OACElkC,EAAAA,GAAAA,IAACspD,GAAAA,EAAc,CACbppD,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAO6kD,KAAM,iBACvClZ,MAAO8Y,EACP7Y,WAAYnB,EACZ4H,aAAa,sBACbyS,YAAU,EACVC,iBApDqB,GAoDgBxiE,SAAA,EAErCC,EAAAA,GAAAA,GAAC6oD,GAAAA,EAAW,CACV/oD,UAAW0d,GAAOsrC,OAClBn8C,MAAOk3B,EACPp2B,SAAUq2B,EACV0+B,QAASJ,EACT9S,YAAaviD,EAAK,gBAEnB00D,IAAiB59B,IAChBjkC,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOurB,QAAQhpC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOilD,aAAa1iE,SAAA,EAClCC,EAAAA,GAAAA,GAAA,QAAAD,SAAOw3C,EAAQ,qBACfv3C,EAAAA,GAAAA,GAAA,QAAMF,UAAW0d,GAAOklD,aAAc30D,QAASg0D,EAAyBhiE,SACrEw3C,EAAQqqB,EAAqB,2BAA6B,kCAG/D5hE,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOmlD,eAAe5iE,SACnC0hE,EAAahuD,IAAI,CAAC5T,EAAI2E,KACrB,GAAKo9D,KAAsBp9D,GAhEV,GAoEjB,OACExE,EAAAA,GAAAA,GAAC4iE,GAAc,CACbp2D,OAAQ3M,YAOpBD,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOurB,QAAQhpC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOilD,aAAa1iE,SACnBgN,EAAd82B,EAAmB,OAAe,kBAErC7jC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOmlD,eAAe5iE,SACnCkiE,GAAoBA,EAAiBxuD,IAAK5T,IAEvCG,EAAAA,GAAAA,GAAC4iE,GAAc,CACbp2D,OAAQ3M,EACRsgE,cAAet8B,gBCpFzBg/B,GAAiC,MAAQjtD,EAAAA,EClC/C,GAAoG,WAApG,GAAmO,WAAnO,GAAqP,WAArP,GAA6U,WAA7U,GAA8c,WAA9c,GAAk/B,WAAl/B,GAAiwC,WAAjwC,GAA0zC,WCyFpzCktD,GAA6B,IAM7BC,GAAqB,CACzB,gBACA,oBACA,eACA,cACA,eACA,2CACAp8C,KAAK,KAEDq8C,GAA8C,CAClDC,GAAI,KACJC,OAAQ,SACR/qD,MAAO,SA6jCT,IAAexZ,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAU8mC,YACT,MAAMg7B,EAAeh7B,GAAOi7B,iBAAkBC,EAAAA,EAAAA,KAAahiE,EAAQ8mC,EAAMi7B,sBAAmBvgE,GACpF2zD,MAAO8M,GAAgBH,GAAgB,CAAC,EAC1ClE,EAAa92B,GAAO82B,WAEpBsE,EAAYD,EAAcjiE,EAAOmiE,WAAWC,KAAKH,QAAezgE,EAChEgwD,EAAMyQ,GAAclvB,EAAAA,EAAAA,KAAW/yC,EAAQiiE,QAAezgE,EACtDyxC,EAAegvB,GAAc/uB,EAAAA,EAAAA,KAAmBlzC,EAAQiiE,QAAezgE,EACvE6gE,EAAiBpvB,GAAcqvB,SAASC,YACxC/N,EAAcx0D,EAAO+yB,eAAgBggB,EAAAA,EAAAA,KAAW/yC,EAAQA,EAAO+yB,oBAAiBvxB,EAChFw9D,GAAQwD,EAAAA,EAAAA,KAAYxiE,IACpB,mBAAEyiE,EAAoB3e,OAAQ4e,IAAyBh1D,EAAAA,EAAAA,KAAe1N,GAAQ2iE,SAC5E7e,OAAQ8e,EAAoBC,aAAcC,IAAsBp1D,EAAAA,EAAAA,KAAe1N,GAAQ+iE,aACzFC,EAAoBxR,GAAMyR,EAAAA,EAAAA,KAAwBjjE,EAAQwxD,EAAIhzD,SAAMgD,EAEpE0hE,EAAgBN,GAAsBF,EAE5C,MAAO,CACLR,YACA1Q,MACAgD,cACAwK,QACAyD,mBAAoBA,GAAsB/4D,QAAQo5D,GAClDI,gBACAtF,aACAoF,oBACAX,mBA3Bc/0D,CA1jCqC61D,EACvDr8B,QACAs8B,SACA5R,MACAwN,QACAyD,qBACAS,gBACAG,4BACAC,8BACAC,iBACA3F,aACA4F,sBACAC,2BACAT,oBACAX,iBACAqB,kBAEA,MAAM,kBACJC,EAAiB,gBACjBC,EAAe,gBACfC,EAAe,iBACfC,EAAgB,qBAChBC,EAAoB,gBACpBC,EAAe,kBACfC,EAAiB,aACjBC,EAAY,mBACZC,EAAkB,iBAClBC,EAAgB,iBAChB9jC,EAAgB,2BAChB+jC,EAA0B,wBAC1BC,EAAuB,uBACvBrG,EAAsB,iBACtBC,EAAgB,+BAChBqG,IACE55D,EAAAA,EAAAA,OACG65D,EAAYC,IAAiB35D,EAAAA,EAAAA,OAC7B45D,EAAiBC,IAAsB75D,EAAAA,EAAAA,OAEvCs0C,EAAUwlB,EAAYC,IAAgBjnE,EAAAA,EAAAA,IAAQ,IAE9CknE,EAAiBC,IAAsBj6D,EAAAA,EAAAA,OACvCk6D,EAAmBC,KAAwBn6D,EAAAA,EAAAA,KAAS,IACpDo6D,GAAyBC,KAA8Br6D,EAAAA,EAAAA,KAAS,IAChEs6D,GAAuBC,KAA4Bv6D,EAAAA,EAAAA,OACnDw6D,GAAgBC,KAAqBz6D,EAAAA,EAAAA,OACtC,eACJ06D,GAAc,kBAAEC,GAAiB,kBAAEC,ICzJxB,WACb,MAAOF,EAAgBG,IAAqB76D,EAAAA,EAAAA,IAAS,GAC/C86D,GAAkB59D,EAAAA,EAAAA,IAAO,GACzB69D,GAAiB79D,EAAAA,EAAAA,IAAO,GAExBy9D,GAAoBv6D,EAAAA,EAAAA,GAAgB,KACxC,MAAM4f,EAAMD,KAAKC,MAEbA,EAAM+6C,EAAe19D,QDkFH,MCjFpBy9D,EAAgBz9D,QAAU,GAG5By9D,EAAgBz9D,SAAW,EAEvBy9D,EAAgBz9D,SD2EO,GC1EzBw9D,EAAkB76C,ED2EE,OCvElB46C,GAAoBx6D,EAAAA,EAAAA,GAAgB,KACpCs6D,EAAiB36C,KAAKC,QACxB+6C,EAAe19D,QAAU0iB,KAAKC,SAIlC,MAAO,CACL06C,iBACAC,oBACAC,oBAEJ,CD4HMI,GAEE79C,IAAejgB,EAAAA,EAAAA,MAEf+9D,IAAkB/9D,EAAAA,EAAAA,MAElBg+D,IAAyBh+D,EAAAA,EAAAA,MAEzB4U,GAA8B,eAAfghD,EACfE,GAAkC,cAAfF,EAEnBqI,IAAyB/6D,EAAAA,EAAAA,GAAgB,KAC7C1B,WAAW,KACTy0D,EAAuB,CAAEQ,MAAO,eA/Ed,OAmFhByH,IAAuBl+D,EAAAA,EAAAA,OAE7BkB,EAAAA,EAAAA,IAAU,KACRg9D,GAAqB/9D,QAAUzH,SAASsC,cAAc,aACrD,IAEH,MAAO,CAAE6c,GAAeC,KAAkBC,EAAAA,GAAAA,IAAcmmD,GAAsBD,IAExEnE,GAAeh7B,GAAOi7B,gBAAkBj7B,EAAM+2B,cAAc/2B,EAAMi7B,sBAAmBvgE,GACnF2kE,QAASC,GAAgB,gBAAEC,IAAoBvE,IAAgB,CAAC,GAClE,IACJ5rD,GAAG,WAAExC,GAAU,oBAAE4yD,IACflD,GAAU,CAAC,GAET,gBACJmD,IACElE,GAAkB,CAAC,EAEjBmE,GAAmB98D,QAAQ05D,GAAQoD,kBACnCC,GAAoB/8D,QAAQ05D,GAAQqD,mBAEpCC,GAAYtD,IAAUuD,EAAAA,GAAAA,IAAavD,GACnCrB,GAAkBD,KAAgB6E,EAAAA,GAAAA,IAAa7E,IAE/C3pD,GAAY2pD,IAAgBsB,GAAWrB,KAAoB2E,GAE3DE,GAAcC,EAAAA,GACdC,QAAuDtlE,IAAnCwhE,GAAmB+D,YACvCC,GAAkBt9D,QAAQs5D,GAAmB+D,aAE7CE,IAAsB/7D,EAAAA,EAAAA,GAAiBg8D,IACtCR,IACLxC,EAAa,CAAE9/C,IAAKsiD,GAAWS,OAAQD,MAGnCE,IAAc1gE,EAAAA,EAAAA,IAAQ,KACnBu4D,EAAAA,GAAAA,KAEN,CAACD,KAEJ91D,EAAAA,EAAAA,IAAU,KACRq8D,GAAkB6B,GAAYC,qBAC7B,CAACD,KAEJ,MAAME,GAAuBF,GAAYG,UAClCC,GAA0BC,KAA+B38D,EAAAA,EAAAA,MAC1D48D,GAAwC,UAAV1I,EAAoBqD,GAAgBgE,gBACpEhE,GAAgBsF,qBAEpBz+D,EAAAA,EAAAA,IAAU,KAGR+9D,GAAoB,CAAEZ,gBAFRmB,IAA4BE,IAA+BJ,MAGxE,CAACA,GAAsBE,GAA0BE,KAEpD,MAAME,GAAmBR,GAAYG,UAC9BM,GAAsBC,KAA2Bh9D,EAAAA,EAAAA,MAClDi9D,GAAoC,UAAV/I,EAAoBqD,GAAgB2F,YAChE3F,GAAgB4F,iBAEpB/+D,EAAAA,EAAAA,IAAU,KAGR+9D,GAAoB,CAAEe,YAFRH,IAAwBE,IAA2BH,MAGhE,CAACA,GAAkBC,GAAsBE,KAE5C,MAAMG,IAAWlgE,EAAAA,EAAAA,MAEXkuC,IAAUvqC,EAAAA,EAAAA,KACVD,IAAOyqC,EAAAA,GAAAA,KACP7rC,GAASw8B,GAAOorB,cAAe,EAC/BiW,GAAWz+D,QAAQgK,KAEnB,YACJ00D,GAAW,UAAEC,GAAS,sBAAEC,GAAqB,aAAEC,GAAY,aAAEC,GAAY,UAAEC,IFpNxDC,EACrB91D,EACAtI,EACAsS,EACA+rD,EACAC,EACAxF,EACAhkE,KAEA,MAAM,iBACJkhC,EAAgB,qBAChByjC,EAAoB,YACpB8E,EAAW,YACXC,EAAW,yBACXC,EAAwB,aACxB7E,EAAY,sBACZ8E,IACEr+D,EAAAA,EAAAA,MAEEs+D,GAAoBjhE,EAAAA,EAAAA,KAAgB,GACpCkhE,GAAgBlhE,EAAAA,EAAAA,MAChBmhE,GAAkBnhE,EAAAA,EAAAA,KAAgB,GAClCohE,GAAmBphE,EAAAA,EAAAA,MACnB4uB,GAAanN,EAAAA,GAAAA,MAEnBvgB,EAAAA,EAAAA,IAAU,KACR,IAAK0J,EAAIzK,UAAYmC,EAAQ,OAE7B,MAAM++D,EAAaA,KACjBjqE,OAGIuX,EAAQ/D,EAAIzK,QAElB,OADAwO,EAAMjC,iBAAiB,OAAQ20D,GACxB,KACL1yD,EAAMhC,oBAAoB,OAAQ00D,KAEnC,CAACjqE,EAAQwT,EAAKtI,IAEjB,MAAM+9D,GAAY/pE,EAAAA,EAAAA,IAAamvB,IACxB7a,EAAIzK,SAASmhE,eAClB12D,EAAIzK,QAAQmhE,cAAc3xD,YAAY4xD,KAAKC,UAAU/7C,GAAQ,MAC5D,CAAC7a,IAEE01D,GAAwBhqE,EAAAA,EAAAA,IAAagN,IACzC+8D,EAAU,CACRoB,UAAW,qBACXC,UAAW,CACTC,cAAer+D,MAGlB,CAAC+8D,IAEEuB,GAAmB1+D,EAAAA,EAAAA,GAAiBgL,IACxC,IAAKtD,EAAIzK,QAAS,OAClB,MAAMwO,EAAQ/D,EAAIzK,QAClBwO,EAAMlU,IAAM,cACZkU,EAAMjC,iBAAiB,OAAQ,KAC7BiC,EAAMlU,IAAMyT,GACX,CAAE0jC,MAAM,MAGPwuB,GAAc9pE,EAAAA,EAAAA,IAAa4X,IAC/B,GAAI+yD,EAAkB9gE,QAOpB,OANAkgE,EAAU,CACRoB,UAAW,uBAEbP,EAAc/gE,QAAUqB,WAAW,KACjCogE,EAAiB1zD,IAvEF,MA4EnB0zD,EAAiB1zD,IAChB,CAACmyD,IAEEE,GAAejqE,EAAAA,EAAAA,IAAaurE,IAChC,IAAKj3D,EAAIzK,QACP,OAEF,MAAM,MAAEC,EAAK,OAAEK,GAAWmK,EAAIzK,QAAQ2S,wBACtCutD,EAAU,CACRoB,UAAW,mBACXC,UAAW,CACTthE,QACAK,SACAqhE,aAAa,EACbC,iBAAkBF,MAGrB,CAACxB,EAAWz1D,IAET41D,GAAelqE,EAAAA,EAAAA,IAAY,KAC1BsU,EAAIzK,UAGTkgE,EAAU,CACRoB,UAAW,oBACXC,UAAW,CACTjvD,KAAM,EACNsH,MAAO,EACPC,IAAK,EACLC,OAAQ,KAIZomD,EAAU,CACRoB,UAAW,4BACXC,UAAW,CACTjvD,KAAM,EACNsH,MAAO,EACPC,IAAKpF,EAAe4kD,GAAiC,EACrDv/C,OAAQ,OAGX,CAAComD,EAAWzrD,EAAchK,IAEvB61D,GAAYnqE,EAAAA,EAAAA,IAAY,KAC5B+pE,EAAU,CACRoB,UAAW,gBACXC,UAAW,CACTM,cAAc/K,EAAAA,GAAAA,SAGjB,CAACoJ,IAEE4B,GAAkB3rE,EAAAA,EAAAA,IAAamG,IACnC4jE,EAAU,CACRoB,UAAW,mBACXC,UAAWjlE,KAEZ,CAAC4jE,IAEE6B,GAAgB5rE,EAAAA,EAAAA,IAAamvB,IACjC,GAAI07C,EAAgBhhE,QAClB,OAEF,MAAMmhE,EAAgB12D,EAAIzK,SAASmhE,cAGnC,GAAIA,IAFiB77C,EAAM1rB,OAM3B,IACE,MAAMsV,EAAOkyD,KAAKY,MAAM18C,EAAMpW,OACxB,UAAEoyD,EAAS,UAAEC,GAAcryD,EAMjC,GAJkB,kBAAdoyD,GACFrqE,MAGgB,kBAAdqqE,GACErG,EAAQ,CACV,MAAMh/C,GAAMuiD,EAAAA,EAAAA,IAAavD,GACzB0F,EAAY,CAAE1kD,MAAKgmD,yBAAyB,GAC9C,CAmBF,GAhBkB,6BAAdX,GACFlB,EAAa3xC,EAAWpN,YAGR,8BAAdigD,GACFjB,IAGgB,sCAAdiB,GACFjB,IAGgB,0BAAdiB,GACFhB,IAGgB,iBAAdgB,EAA8B,CAChC,MAAMY,EAAiBphB,iBAAiBvoD,SAASsd,MAAMmrC,iBAAiB,qBACxE8gB,EAxMgB,4VAwMgBnQ,QAAQ,qBAAsBuQ,IAC9DpB,EAAkB9gE,QAAUuB,QAAQggE,EAAUY,iBAChD,CAMA,GAJkB,uBAAdb,GACFxgE,aAAaigE,EAAc/gE,SAGX,sBAAdshE,EAAmC,CACrC,IAAKd,EAAc,OACnBQ,EAAgBhhE,SAAU,CAC5B,CA8BA,GA3BkB,qCAAdshE,GACFpB,EAAU,CACRoB,UAAW,0BACXC,UAAW,CACTa,OAAQb,EAAUa,OAElBlzD,KAAM,QAKM,+BAAdoyD,GACFnpC,EAAiB,CACf/gC,QAAS,yDAIK,yBAAdkqE,IACF1F,EAAqB,CACnByG,KAAMd,EAAUc,OAElB3B,EAAY,CACVhpE,KAAM,OACN2qE,KAAMd,EAAUc,QAIF,sBAAdf,EAAmC,CACrC,MAAMgB,EAAUf,EAAUxzD,IAC1B3M,OAAO6pD,KAAKqX,EAAS,SAAU,aACjC,CAWA,GATkB,8BAAdhB,GACFpB,EAAU,CACRoB,UAAW,yBACXC,UAAW,CACTgB,WAAW,KAKC,iCAAdjB,GACe,mCAAdA,GACc,oCAAdA,EAAiD,CACpD,MAAM,OAAEc,GAAWb,EACnBrB,EAAU,CACRoB,UAAW,wBACXC,UAAW,CACTa,SACArgC,MAAO,gBAGb,CAEA,GAAkB,iCAAdu/B,GACe,mCAAdA,GACc,uCAAdA,GACc,oCAAdA,EAAiD,CACpD,MAAM,OAAEc,GAAWb,EACnBrB,EAAU,CACRoB,UAAW,wBACXC,UAAW,CACTa,SACArgC,MAAO,gBAGb,CA+CA,GA7CkB,gCAAdu/B,GACFpB,EAAU,CACRoB,UAAW,uBACXC,UAAW,CACTx/B,MAAO,iBAKK,4BAAdu/B,GACFpB,EAAU,CACRoB,UAAW,mBACXC,UAAW,CACTx/B,MAAO,iBAKK,qCAAdu/B,GACFpB,EAAU,CACRoB,UAAW,4BACXC,UAAW,CACTx/B,MAAO,iBAKK,+BAAdu/B,GACFpB,EAAU,CACRoB,UAAW,qBACXC,UAAW,CACTx/B,MAAO,iBAKK,8BAAdu/B,GACFpB,EAAU,CACRoB,UAAW,sBACXC,UAAW,CACT5lB,OAAQ,iBAKI,6BAAd2lB,EAA0C,CAC5C,MAAM,gBAAEkB,EAAe,SAAE7yD,GAAa4xD,EAEtC,IAAKiB,GAA8C,iBAApBA,EAO7B,YANAtC,EAAU,CACRoB,UAAW,sBACXC,UAAW,CACTx/B,MAAO,6BAMb,GAAIpyB,EACF,IACE8yD,OAAO9yD,EACT,CAAE,MAAOtM,GAOP,YANA68D,EAAU,CACRoB,UAAW,sBACXC,UAAW,CACTx/B,MAAO,qBAIb,CAGF,IAAKk5B,EAOH,YANAiF,EAAU,CACRoB,UAAW,sBACXC,UAAW,CACTx/B,MAAO,mBAMb6+B,EAAyB,CACvBrC,WAAWC,EAAAA,EAAAA,IAAavD,GACxByH,cAAeF,EACf7yD,SAAUmM,OAAOnM,GACjBq9C,MAAOiO,EAAOjO,OAElB,CAEA,GAAkB,uBAAdsU,EAAoC,CACtC,MAAM,OAAEqB,GAAWpB,EACbqB,GAASlgC,EAAAA,EAAAA,MAAYgI,UAAUm4B,cAAgBC,EAAAA,IAC/CC,EAAexB,EAAUyB,KAAO,EAElCL,GAAUI,GAAgBH,GAC5BzqC,EAAiB,CACf/gC,QAAS,CACP6kB,IAAK,0BAGT4kD,EAAsB,CAAEoC,oBAAoB,KAE5C9qC,EAAiB,CACf/gC,QAAS,CACP6kB,IAAK,wBAIb,CAEAwkD,EAAQvxD,EACV,CAAE,MAAOhS,GACP,GAED,CACDsjE,EAAcN,EAAWO,EAASqB,EAAiB7G,EACnDqF,EAAWF,EAAcC,EAAcppE,EAAQw3B,EAAWpN,WAC1D5W,IAyCF,OAtCA1J,EAAAA,EAAAA,IAAU,KACR,MAAM,MAAEd,EAAK,OAAEK,EAAM,WAAE+gB,GAAeoN,EAClCwyC,EAAiBjhE,SAAWihE,EAAiBjhE,QAAQC,QAAUA,GAC9DghE,EAAiBjhE,QAAQM,SAAWA,IAAW2gE,EAAiBjhE,QAAQqhB,aAC7E4/C,EAAiBjhE,QAAU,CAAEC,QAAOK,SAAQ+gB,cAC5C++C,EAAa/+C,KACZ,CAAC++C,EAAcC,EAAc5xC,KAEhC1tB,EAAAA,EAAAA,IAAU,KACHk6D,GAAQiI,eAAe/qE,SACb8iE,EAAOiI,cACfj1D,QAASqX,IACd46C,EAAU56C,KAGZy2C,EAAa,CACX9/C,KAAKuiD,EAAAA,EAAAA,IAAavD,GAClB+D,OAAQ,CACNkE,cAAe,QAGlB,CAAChD,EAAWjF,KAEfl6D,EAAAA,EAAAA,IAAU,KACRK,OAAOmL,iBAAiB,UAAWw1D,GAC5B,IAAM3gE,OAAOoL,oBAAoB,UAAWu1D,IAClD,CAACA,EAAet3D,KAEnB1J,EAAAA,EAAAA,IAAU,KACJoB,GAAUsI,EAAIzK,SAASmhE,eACzBf,IACAC,IACAW,EAAgBhhE,SAAU,GAE1BihE,EAAiBjhE,aAAU3G,GAE5B,CAAC8I,EAAQsS,EAAc2rD,EAAcC,EAAc51D,IAE/C,CACLy1D,YAAWC,wBAAuBF,cAAaG,eAAcC,eAAcC,cE9MzEC,CAAeR,GAAU59D,GAAQsS,GAAcurD,GA0SnD,SAAqB16C,GACnB,MAAM,UAAEg8C,EAAS,UAAEC,GAAcj8C,EAmBjC,GAjBkB,+BAAdg8C,KACE6B,EAAAA,EAAAA,MACFrN,EAAuB,CAAEQ,MAAO,eAEhC4J,GAAU,CACRoB,UAAW,oBACXC,UAAW,CACTx/B,MAAO,kBAMG,4BAAdu/B,GACF8B,KAGgB,yBAAd9B,EAAsC,CACxCxL,EAAuB,CAAEQ,MAAO,cAEhC,MAAMgM,EAAUe,EAAAA,IAAkB9B,EAAU+B,UAC5C3H,EAAiB,CAAE5tD,IAAKu0D,EAASiB,kBAAmBhC,EAAUiC,eAChE,CAcA,GAZkB,8BAAdlC,GACFxC,GAAoB,CAAEX,oBAAqBoD,EAAUkC,aAGrC,kCAAdnC,GACFxC,GAAoB,CAAE4E,wBAAyBnC,EAAUkC,aAGzC,iCAAdnC,GACFhC,IAA4BqE,EAAAA,GAAAA,IAAiBpC,EAAUl9D,OAASk9D,EAAUl9D,WAAQhL,GAGlE,6BAAdioE,EAA0C,CAC5C,MAAMrlD,EAAMslD,EAAUqC,UACtBjE,GAAwB4B,EAAUl9D,QAAU4X,EAAMgjD,GAAYhjD,QAAO5iB,GACvE,CAeA,GAbkB,iCAAdioE,GACFlE,GAAkBmE,EAAUl9D,OAGZ,sBAAdi9D,IACF9F,IACAC,EAAgB,CACdpS,IAAKA,EACL99C,WAAYA,GACZ2D,KAAMqyD,EAAUryD,QAIF,8BAAdoyD,EAA2C,CAC7C,MAAMj9D,EAAQk9D,EAAUl9D,MAClBw/D,EAAYtC,EAAUuC,WAC5BxH,EAAc,CACZ1mD,UAAW2rD,EAAUkC,YAAcliE,QAAQggE,EAAUj2D,MAAMy4D,OAAO5rE,QAClE6X,SAAUuxD,EAAUyC,UACpB14D,KAAMi2D,EAAUj2D,KAChBjH,QACAw/D,YACAI,kBAAmB1C,EAAU2C,qBAEjC,CAEA,GAAkB,mCAAd5C,EAAgD,CAClD,MAAMj9D,EAAQk9D,EAAUl9D,MAClBw/D,EAAYtC,EAAUuC,WAC5BtH,EAAmB,CACjB5mD,UAAW2rD,EAAUkC,YAAcliE,QAAQggE,EAAUj2D,MAAMy4D,OAAO5rE,QAClE6X,SAAUuxD,EAAUyC,UACpB14D,KAAMi2D,EAAUj2D,KAChBjH,QACAw/D,YACAI,kBAAmB1C,EAAU2C,oBAC7BluD,SAAUurD,EAAUvrD,UAExB,CAMA,GAJkB,mCAAdsrD,GACFxC,GAAoB,CAAEqF,sBAAsB,IAG5B,uBAAd7C,EAAoC,CACtC,GAAI3E,IAAoB4E,EAAUnqE,QAAQ2sE,OAAO5rE,SAAWopE,EAAU6C,SAASjsE,QAC1EopE,EAAU6C,QAAQjsE,OAAS,GAAK0kE,GAAqBE,IACrDM,GAAiB36C,KAAKC,MAEzB,YADA0hD,QAAoBhrE,GAItBujE,EAAmB2E,GACnBjE,IACF,CAEA,GAAkB,gCAAdgE,EAA6C,CAC/C,MAAMntC,EAASotC,EAAU+C,YAAYr6D,IAAIs6D,EAAAA,IAAsBpwC,OAAO5yB,SAChEijE,GAAcrwC,GAAQh8B,OAE5B0jE,EAAgB,CACd7O,MAAO3D,EAAKhzD,GACZukC,MAAO2mC,EAAU3mC,MACjBzG,SACAqwC,eAGFhJ,GACF,CAEA,GAAkB,0BAAd8F,EAAuC,CACzC,GAAI3E,GAAmBI,IAA2BM,GAAiB36C,KAAKC,MAEtE,YADA8hD,KAIF3H,IAAqB,GACrBQ,IACF,CAEA,GAAkB,iCAAdgE,EAA8C,CAChD,GAAI3E,GAAmBE,GAAqBQ,GAAiB36C,KAAKC,MAEhE,YADA+hD,MAxNN11D,iBACE,IAAKq6C,EAAK,OACV,MAAMtX,QAAiB3iC,EAAAA,GAAAA,IAAQ,yBAA0B,CACvDi6C,QAGEtX,GACFmuB,GAAU,CACRoB,UAAW,yBACXC,UAAW,CACT5lB,OAAQ,aAIdqhB,IAA4BjrB,EAC9B,CA6MI4yB,GACArH,IACF,CAEA,GAAkB,iCAAdgE,EAA8C,CAChD,MAAM,OAAEsD,EAAM,OAAE7sE,EAAQqqE,OAAQyC,GAActD,GA7KlDvyD,eAAwC61D,EAAmBD,EAAgBE,GACzE,MAAM31D,QAAeC,EAAAA,GAAAA,IAAQ,4BAA6B,CACxDi6C,IAAKA,EACL0b,aAAcH,EACdE,eAGF5E,GAAU,CACRoB,UAAW,wBACXC,UAAW,CACTa,OAAQyC,KACL11D,IAGT,CAgKI61D,CAAyBH,EAAWD,EAAQxD,KAAKC,UAAUtpE,GAC7D,CAEA,GAAkB,kCAAdupE,EAA+C,CACjD,GAAIrE,IAAyBI,GAAiB36C,KAAKC,MAEjD,YADAsiD,MAtNNj2D,eAAuCk2D,EAAiBn9D,SAC5BqH,EAAAA,GAAAA,IAAQ,6BAA8B,CAC9Di6C,IAAKA,EACLt7C,IAAKm3D,EACLn9D,cAaFm1D,GAAyB,CAAEnvD,IAAKm3D,EAASn9D,aACzCu1D,MAVE4C,GAAU,CACRoB,UAAW,0BACXC,UAAW,CACT5lB,OAAQ,cAQhB,CAsMIwpB,CAAwB5D,EAAUxzD,IAAKwzD,EAAU6D,UACnD,CAEA,GAAkB,kCAAd9D,EAA+C,CACjD,IAAKjY,IAAQkV,GAAW,OACxB,MAAM,GAAEloE,GAAOkrE,EACfnF,EAA+B,CAAEpP,MAAO3D,EAAIhzD,GAAI4Y,UAAW5Y,EAAIkoE,cACjE,CAEA,GAAkB,wCAAd+C,EAAqD,CACvD,IAAKjY,EAAK,OACV6S,EAA2B,CAAE7S,MAAKkV,cACpC,CAEkB,2BAAd+C,GAEApB,GAAU,CACRoB,UAAW,mBACXC,UAAW,CACTgB,UAAW9D,GACX4G,iBAAkB1G,GAClB2G,eAAgBzG,MAQN,6BAAdyC,GAC4BtyD,WAC5B,MAAMu2D,QAAwBC,EAAAA,EAAAA,OACxB,gBAAEC,EAAe,cAAEC,EAAa,YAAE9G,GAAgB2G,EAExD,IAAKG,IAAkBD,EASrB,OARAvF,GAAU,CACRoB,UAAW,qBACXC,UAAW,CACTgB,WAAW,KAGfpqC,EAAiB,CAAE/gC,QAAS22C,GAAQ,uCACpCs2B,QAAoBhrE,GAIlBolE,GACEE,GACFuB,GAAU,CACRoB,UAAW,qBACXC,UAAW,CACTgB,UAAWhhE,QAAQs5D,GAAmB+D,aACtC+G,SAAU/G,GAAa+G,SACvBC,UAAWhH,GAAagH,UACxBC,SAAUjH,GAAaiH,SACvBC,OAAQlH,GAAamH,QACrBC,MAAOpH,GAAaoH,MACpBC,oBAAqBrH,GAAasH,SAClCC,kBAAmBvH,GAAawH,oBAIpCjK,EAAwB,CAAE9S,MAAKkV,gBAGjCpmC,EAAiB,CAAE/gC,QAAS22C,GAAQ,kCACpCs2B,QAAoBhrE,KAIxBgtE,GAGgB,mCAAd/E,GACF9tB,IAEJ,EAtgB0EynB,EAAQwB,IAElF17D,EAAAA,EAAAA,IAAU,KACJiP,IAAUkrD,EAA0BgF,KACvC,CAACA,GAAWhF,EAA2BlrD,MAE1CjP,EAAAA,EAAAA,IAAU,KACJiP,IAAUmrD,EAA4B8E,KACzC,CAACA,GAAa9E,EAA6BnrD,KAE9C,MAAMs2D,GAAsBrvB,GAAYolB,GAAYzmD,WAAaymD,EAAW/wD,KAAKy4D,OAAO5rE,OAAS,EAC3FouE,GAA2BtvB,GAAYslB,GAAiB3mD,WAAa2mD,EAAgBjxD,KAAKy4D,OAAO5rE,OAAS,EAE1GquE,IAAuBzjE,EAAAA,EAAAA,GAAgB,KAC3C+7D,GAAoB,CAAET,kBAAkB,MAEpCoI,IAA0B1jE,EAAAA,EAAAA,GAAgB,KAC9C+7D,GAAoB,CAAEqF,sBAAsB,EAAO9F,kBAAkB,IACrEh9D,WAAW,KACTm6D,KAlLiB,OAsLfkL,IAAwB3jE,EAAAA,EAAAA,GAAgB,KAC5C+7D,GAAoB,CAAER,mBAAmB,MAGrCqI,IAAwB5jE,EAAAA,EAAAA,GAAgB,KAC5Cm9D,GAAU,CACRoB,UAAW,0BAITsF,IAA6B7jE,EAAAA,EAAAA,GAAgB,KACjDm9D,GAAU,CACRoB,UAAW,+BAIT+C,IAAsBthE,EAAAA,EAAAA,GAAiB8jE,IAC3CjK,OAAmBvjE,GACnBkkE,KACA2C,GAAU,CACRoB,UAAW,eACXC,UAAW,CACTuF,UAAWD,OAKXE,IAA2BhkE,EAAAA,EAAAA,GAAgB,KAC/CshE,OAGI2C,IAAoBjkE,EAAAA,EAAAA,GAAgB,KACxCu9D,QAIFvgE,EAAAA,EAAAA,GAAc,KACZsB,WAAW,KACT2lE,MA5NiB,MA8NlB,CAACnQ,IAEJ,MAAMoQ,IAAwBlkE,EAAAA,EAAAA,GAAgB,OACvCmkE,EAAAA,GAAAA,OAAuBl3D,IAC1B0H,SAIE0rD,IAA2BrgE,EAAAA,EAAAA,GAAgB,MAC3CmkE,EAAAA,GAAAA,OAAuBl3D,IACzB2H,SAIEwvD,IAAgCpkE,EAAAA,EAAAA,GACnCI,IACK6M,IAAUmwD,GAAsBh9D,MAIxCpC,EAAAA,EAAAA,IAAU,KACJ0T,IACFwyD,KACAE,IAA8B,KAE9B/D,KACA+D,IAA8B,KAE/B,CAAC1yD,KAEJ,MAAM2yD,IAA4BrkE,EAAAA,EAAAA,GAAiBi6B,IACjDkjC,GAAU,CACRoB,UAAW,qBACXC,UAAW,CACTkC,WAAYzmC,QAKlBj8B,EAAAA,EAAAA,IAAU,KACJk2C,GACFmwB,GAA0B7lE,QAAQyO,MAEnC,CAACA,GAAUinC,KAEd7a,EAAAA,GAAAA,GAAsB,EAAEirC,MACH,cAAf5R,GACF2R,IAA0B,GAExB3R,GAAiC,cAAnB4R,GAChBD,IAA0B,IAE3B,CAAC3R,KAEJ11D,EAAAA,EAAAA,GAAc,EAAEunE,MACVhN,IAAuBgN,GACvBrM,GAAQoH,OAAS/H,GAAsBS,IACzCmF,GAAU,CACRoB,UAAW,iBACXC,UAAW,CACTc,KAAMpH,EAAOoH,KACb1mB,OAAQof,KAGZa,EAAqB,CACnByG,UAAMhpE,IAER2iE,MAED,CAAC1B,EAAoBS,EAAemF,GAAWjF,GAAQoH,OAE1D,MAAMkF,IAAwBxkE,EAAAA,EAAAA,GAAgB,KAC5C24D,EAAgB,CACd1O,MAAO3D,EAAKhzD,GACZmxE,WAAW,IAEbhM,MAGIiJ,IAAoB1hE,EAAAA,EAAAA,GAAgB,KACxC+5D,IAAqB,GACrBS,KACA2C,GAAU,CACRoB,UAAW,kBACXC,UAAW,CACT5lB,OAAQ,iBAKR8rB,IAAoB1kE,EAAAA,EAAAA,GAAgB,KACxC+4D,EAAkB,CAAE9O,MAAO3D,EAAKhzD,KAChCymE,IAAqB,GACrBS,KACA2C,GAAU,CACRoB,UAAW,kBACXC,UAAW,CACT5lB,OAAQ,YAKRspB,IAA2BliE,EAAAA,EAAAA,GAAiB2kE,IAC5CA,IACFxK,QAAyB7jE,GACzBkkE,MAGF2C,GAAU,CACRoB,UAAW,0BACXC,UAAW,CACT5lB,OAAQ,iBAKR+oB,IAA0B3hE,EAAAA,EAAAA,GAAgB,KAC9Cm9D,GAAU,CACRoB,UAAW,yBACXC,UAAW,CACT5lB,OAAQ,eAGZqhB,IAA2B,GAC3BO,OAGIoK,IAA0B5kE,EAAAA,EAAAA,GAAgBiM,UACzCq6C,UACgBj6C,EAAAA,GAAAA,IAAQ,uBAAwB,CAAEi6C,SAMvD6W,GAAU,CACRoB,UAAW,yBACXC,UAAW,CACT5lB,OAAQ,aAGZqhB,IAA2B,GAC3BO,MAXEmH,QAoDEkD,IAAqB7kE,EAAAA,EAAAA,GAAgB,KACpCk6D,KACLC,QAAyB7jE,GACzBkkE,MAEA3zD,EAAAA,GAAAA,GAASqzD,GAAsBlvD,IAAKkvD,GAAsBl1D,UAC1Dm4D,GAAU,CACRoB,UAAW,0BACXC,UAAW,CACT5lB,OAAQ,qBAqBd56C,EAAAA,EAAAA,IAAU,KACHoB,KACHy6D,OAAmBvjE,GACnByjE,IAAqB,GACrBE,IAA2B,GAC3BV,OAAcjjE,GACdmjE,OAAmBnjE,GACnBylE,GAAoB,CAClB4E,yBAAyB,EACzBS,sBAAsB,EACtBhG,qBAAqB,EACrBE,kBAAkB,EAClBC,mBAAmB,IAErB5B,MAED,CAACv6D,KAEJ,MAAMqxC,IAAiBzwC,EAAAA,EAAAA,GAAgB,KACrCk5D,EAAiB,CAAE5lE,GAAIgzD,EAAKhzD,OAiOxBwxE,IAAyBlhC,EAAAA,GAAAA,GAAiB01B,GAAYh4D,OAAO,GAC7DyjE,IAA6BnhC,EAAAA,GAAAA,GAAiB01B,GAAYwH,WAAW,GACrEkE,IAA4BphC,EAAAA,GAAAA,GAAiB01B,GAAc96D,QAAQ86D,EAAWrsD,WAAW,GACzFg4D,IAAwBrhC,EAAAA,GAAAA,GAAiB01B,GAAY/wD,MAAM,GAE3D28D,IAAiCthC,EAAAA,GAAAA,GAAiB41B,GAAiBvmD,UAAU,GAC7EkyD,IAA8BvhC,EAAAA,GAAAA,GAAiB41B,GAAiBl4D,OAAO,GACvE8jE,IAAkCxhC,EAAAA,GAAAA,GAAiB41B,GAAiBsH,WAAW,GAC/EuE,IAAiCzhC,EAAAA,GAAAA,GAAiB41B,GAAmBh7D,QAAQg7D,EAAgBvsD,WAAW,GACxGq4D,IAA6B1hC,EAAAA,GAAAA,GAAiB41B,GAAiBjxD,MAAM,IAEpEg9D,GAA4BC,KAAiC5lE,EAAAA,EAAAA,KAAS,IACtE6lE,GAAsBC,KAA2B9lE,EAAAA,EAAAA,KAAS,IAC1D+lE,GAA2BC,KAAgChmE,EAAAA,EAAAA,KAAS,IACpEimE,GAAsBC,KAA2BlmE,EAAAA,EAAAA,KAAS,IAC1DmmE,GAA2BC,KAAgCpmE,EAAAA,EAAAA,KAAS,IAEpEqmE,GAA+BC,KAAoCtmE,EAAAA,EAAAA,KAAS,IAE5EumE,GAAqBC,KAA0BxmE,EAAAA,EAAAA,IAAS,IAG/D5C,EAAAA,EAAAA,GAAc,KACZsB,WAAW,KACT++D,KACAC,MACCjF,EAAiB,EAjsBD,MAksBlB,CAAC0N,GAA2BJ,GAC7BE,GAAsBA,GACtBrM,GAAiBvmD,SAAUoqD,GAAchF,EAAgBG,EACzD8E,KAEF,MAAM+I,GAAsD,QAAnCnB,IAA+E,WAAnCA,GAG/DoB,GAAaD,IAAoBR,IAAwBE,GAA6B,EACxFF,IAAwBE,GAA4B,EAAI,EAEtDQ,GALsBF,IAMrBZ,IAAyBE,GAA6C,WAAf,aAExDa,IAA0B1pE,EAAAA,EAAAA,MAC1B2pE,IAAwB3pE,EAAAA,EAAAA,MACxB4pE,IAA+B5pE,EAAAA,EAAAA,MAC/B6pE,IAA6B7pE,EAAAA,EAAAA,MAC7B8pE,IAAwB9pE,EAAAA,EAAAA,OAE9BkB,EAAAA,EAAAA,IAAU,KACJ0T,IAAgBtS,IAAUZ,QAAQ08D,KACpCgL,IAAiC,GAE7BU,GAAsB3pE,SACxBc,aAAa6oE,GAAsB3pE,SAGrC2pE,GAAsB3pE,QAAUqB,WAAW,KACzC4nE,IAAiC,GACjCU,GAAsB3pE,aAAU3G,GA5tBN,QA+tB5B4vE,IAAiC,GAE7BU,GAAsB3pE,UACxBc,aAAa6oE,GAAsB3pE,SACnC2pE,GAAsB3pE,aAAU3G,IAI7B,KACDswE,GAAsB3pE,SACxBc,aAAa6oE,GAAsB3pE,WAGtC,CAACyU,GAActS,GAAQ87D,MAE1Bl9D,EAAAA,EAAAA,IAAU,KACJwoE,GAAwBvpE,SAASc,aAAayoE,GAAwBvpE,SACtEwpE,GAAsBxpE,SAASc,aAAa0oE,GAAsBxpE,SAElEsmE,KACFkD,GAAsBxpE,QAAUqB,WAAW,KACzCwnE,IAAwB,IACvB,IACHJ,IAAwB,GACxBc,GAAwBvpE,QAAUqB,WAAW,KAC3CknE,IAA8B,IAC7BjP,KAGAgN,KACHuC,IAAwB,GACxBU,GAAwBvpE,QAAUqB,WAAW,KAC3ConE,IAAwB,IACvBnP,MAEJ,CAACgN,MAEJvlE,EAAAA,EAAAA,IAAU,KACJ0oE,GAA6BzpE,SAASc,aAAa2oE,GAA6BzpE,SAChF0pE,GAA2B1pE,SAASc,aAAa4oE,GAA2B1pE,SAE5EumE,KACFmD,GAA2B1pE,QAAUqB,WAAW,KAC9C0nE,IAA6B,IAC5B,IACHJ,IAA6B,GAC7Bc,GAA6BzpE,QAAUqB,WAAW,KAChDknE,IAA8B,IAC7BjP,KAGAiN,KACHwC,IAA6B,GAC7BU,GAA6BzpE,QAAUqB,WAAW,KAChDsnE,IAA6B,IAC5BrP,MAEJ,CAACiN,MAEJxlE,EAAAA,EAAAA,IAAU,KACH+nE,IAA8BF,IACjCL,IAA8B,IAE/B,CAACA,GAA+BO,GAA2BF,KAE9D,MAAMgB,IAAajwB,EAAAA,GAAAA,GACjB,qBAAqBukB,IAAmB,4BACxC9C,GAAkB,yBAGdyO,IAAkB9mE,EAAAA,EAAAA,GAAgB,KAClCo7D,GACF+B,GAAU,CACRoB,UAAW,yBAGb8B,KACAjD,IAAsB,GACtBrK,EAAuB,CAAEQ,MAAO,cAChCP,OAIE+T,IAAsB/mE,EAAAA,EAAAA,GAAgB,KAC1CqgE,OAGI2G,IAAwBhnE,EAAAA,EAAAA,GAAiBM,IAC7Ci4D,EAAyBj4D,KAGrB2mE,IAAgBr9D,EAAAA,GAAAA,GDx5B0lC,WC05B9mCwxD,ID15B6pC,YC45BzpC8L,GAAoBjB,GAAgC/K,GACtDlwB,GAAQowB,GAAsB,OAAS,SAErC+L,GAAmBrM,IAAwB79D,QA8GjD,OA5GAe,EAAAA,EAAAA,IAAU,KAERooE,GADctL,IAAwB79D,SAASoT,aAAe,IAE7D,CAAC62D,GAAmBC,MA0GrB9zE,EAAAA,GAAAA,IAAA,OACEqU,IAAKqV,GACLxpB,WAAWqW,EAAAA,GAAAA,GDhhCM,YCkhCdqD,IAAYgE,GACbqnD,GDnhC4D,YCohC5D9kE,SAAA,CAEDke,KAAgB0uD,EAAAA,EAAAA,QAlFjB/sE,EAAAA,GAAAA,IAAA,OAAKE,UDp8BouC,WCo8BtsCC,SAAA,EACjCH,EAAAA,GAAAA,IAAA,OAAKqU,IAAKmzD,GAAiBtnE,UAAW0d,GAAqBzP,QAASslE,GAAgBtzE,SAAA,EAClFC,EAAAA,GAAAA,GAAA,OAAKF,UDt8BirC,WCs8B7oCC,UACvCC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0zE,QA1BtBxzE,EAAAA,GAAAA,GAAA,QACEF,UD96B23C,WC+6B33CgG,MACE,UAAU4sE,QACX3yE,UAEDC,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACTC,UAbFs1C,GAAsC,EACnC7K,GAAsB,EAAI,EAa3Bp6D,KAAK,YAAWxN,UAEhBC,EAAAA,GAAAA,GAAA,OACEiU,IAAKozD,GACLvnE,UDz7Bs5C,WCy7Bl3CC,SAEnC0zE,aAgBL7zE,EAAAA,GAAAA,IAAA,OAAKE,UD38BmxC,WC28B/uCC,SAAA,EACvCC,EAAAA,GAAAA,GAAA,OACEF,WAAWqW,EAAAA,GAAAA,GACTqH,GD98B8zC,YCi9Bh0CisB,SAAU,EACVC,KAAK,SACL,aAAY38B,GAAK,kBACjBgB,QAASulE,GAAoBvzE,UAE7BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CACHjF,KAAK,OACLzN,UAAW0d,QAGfxd,EAAAA,GAAAA,GAAA,OACEF,WAAWqW,EAAAA,GAAAA,GACTqH,GD79Bi1C,YCg+Bn1CisB,SAAU,EACVC,KAAK,SACL,gBAAc,OACd,aAAY38B,GAAK,kBACjBgB,QAASwlE,GAAsBxzE,UAE/BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CACHjF,KAAK,OACLzN,WAAWqW,EAAAA,GAAAA,GACTqH,GDz+BssC,uBCuhC9sC2hD,KAvBCyI,IAIH5nE,EAAAA,GAAAA,GAAA,OACEF,WAAWqW,EAAAA,GAAAA,GAAeqH,GAA2BijC,GAAYjjC,IACjEm2D,QAAQ,cAAa5zE,UAErBC,EAAAA,GAAAA,GAAA,QAAMF,UDxgCmH,WCwgChF67D,EAAGiM,OArBlD,WACE,MAAM9nE,GAAYqW,EAAAA,GAAAA,GAAeqH,GDp/B+J,WCo/BrGijC,GAAYjjC,IACvG,OACE5d,EAAAA,GAAAA,IAAA,OAAKE,UAAWA,EAAUC,SAAA,EACxBC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,MAChBxd,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,MAChBxd,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,MAChBxd,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,OAGtB,CAIWo2D,KAuBP5zE,EAAAA,GAAAA,GAAA,UACEF,WAAWqW,EAAAA,GAAAA,GDzhCqP,WC2hC9P27D,ID3hC+S,YC4hC9SrxB,GAAYjjC,IAEf1X,MAAOstE,GACPtvE,IAAKyT,GACLpK,MAAOJ,GAAK,cAAe,CAAE8lD,IAAKA,GAAKkK,YACvC8W,QAAS9Q,GACT+Q,MAAM,oDACNC,iBAAe,EACf9/D,IAAKs1D,MAELpK,KACAv/D,EAAAA,GAAAA,IAAA,OACEkG,MAAO,qBAAqB6gE,MAC5B7mE,WAAWqW,EAAAA,GAAAA,GDziCsf,WC2iC5d,SAAnCs7D,ID3iCuoB,WC4iCpmB,UAAnCA,ID5iC2rB,WC6iCxpB,QAAnCA,ID7iC+uB,WC8iC5sB,WAAnCA,ID9iCmyB,WC+iCjxB,eAAlBqB,ID/iC41B,WCgjC90B,IAAdD,IDhjCwiB,WCijC1hB,IAAdA,IDjjCmlB,YCkjCnlB9yE,SAAA,EAEFH,EAAAA,GAAAA,IAACgO,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,GDrjCiX,WCujC1Xm8D,KAA8BJ,IAA6B10D,GAC3D00D,IAA6B10D,IAE/B4qC,OAAK,EACLtiD,MAAO,qBAAqB4rE,cAAuCC,KACnExxD,UAAWyxD,KAAmC7L,GAAiB0H,kBAC/Dl6B,eAAgBwyB,GAAiB0H,kBACjC1/D,QAASqiE,GAA2BrwE,SAAA,EAElCgmE,GAAiB0H,mBAAqBoE,GACvC9L,GAAiB0H,oBACbztE,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC1oB,UAAW0d,GAA0B3P,MAAM,aAE3DjO,EAAAA,GAAAA,IAACgO,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,GDrkCka,WCukC3ai8D,KAAyBJ,IAAwBx0D,GACjDw0D,IAAwBx0D,IAE1B4qC,OAAK,EACLtiD,MAAO,qBAAqBurE,cAAkCC,KAC9DnxD,UAAWoxD,KAA8B1L,GAAY4H,kBACrDl6B,eAAgBsyB,GAAY4H,kBAC5B1/D,QAASoiE,GAAsBpwE,SAAA,EAE7B8lE,GAAY4H,mBAAqB+D,GAClC3L,GAAY4H,oBAAqBztE,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC1oB,UAAW0d,GAA0B3P,MAAM,gBAI3Fs4D,IACCvmE,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQZ,QAAQo7D,GAChBh5D,MAAOg5D,EAAgBh5D,OAjgCpB,IAkgCHtB,QAAS0kE,GACTyD,gBAAc,EACdl0E,WACEqW,EAAAA,GAAAA,GD5lC0hC,YC4lCt/BgwD,EAAgBh5D,OAAOogE,OAAO5rE,QD5lC6gC,YC6lChlC5B,SAAA,CAEAomE,EAAgBvlE,SACjBZ,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,SACjComE,EAAgByH,QAAQn6D,IAAKs9B,IAC5B/wC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAEL9N,UAAU,wBACV+N,MAAuB,gBAAhBkjC,EAAO7vC,KAAyB,SAAW,UAClD4M,QAAM,EACNC,QAASA,IAAM8/D,GAAoB98B,EAAOlxC,IAAIE,SAE7CgxC,EAAOj8B,MAAQyiC,GAAQyrB,GAAoBjyB,EAAO7vC,QAN9C6vC,EAAOlxC,IAAMkxC,EAAO7vC,aAanClB,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQ06D,EACRx6D,QAASoiE,GACT9gE,MAAOJ,GAAK,4BACZgb,UAAWhb,GACT,uCACAlK,EACA,CAAE67C,WAAW,EAAMgV,cAAc,EAAMC,kBAAmB,CAAC,KAAM,WAEnEpwB,eAAgB0tC,GAChB3tC,aAAcv2B,GAAK,mBAErB/M,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQ46D,GACR16D,QAASqiE,GACT/gE,MAAOoqC,GAAQ,6BACfziC,KAAMyiC,GAAQ,uBACdhU,eAAgB4tC,GAChB7tC,aAAciU,GAAQ,kCAExBv3C,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQZ,QAAQ07D,IAChBt5D,MAAOoqC,GAAQ,wBACfxvB,UAAWhb,GAAK,6BAA8B,CAC5C8lD,IAAKA,GAAKkK,UACVkX,SAAUxN,IAAuBl1D,UAChC,CACDmtC,WAAW,EACXgV,cAAc,IAEhBpwB,aAAciU,GAAQ,yBACtB1rC,QAAS4iE,GACTlrC,eAAgB6tC,MAGlBpxE,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQk8D,GACRh8D,QAASmkE,GACT7iE,MAAOoqC,GAAQ,+BACfziC,KAAMyiC,GAAQ,yBACdhU,eAAgB0sC,GAChBzsC,sBAAoB,EACpBF,aAAciU,GAAQ,iCAExBv3C,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQm8D,GACRj8D,QAASqkE,GACT/iE,MAAOoqC,GAAQ,0BACfxvB,WAAWiM,EAAAA,GAAAA,GAAWujB,GAAQ,oBAAqBsb,GAAKkK,WAAY,CAAC,oBACrEx5B,eAAgBwtC,GAChBvtC,sBAAoB,UElqC5B,GAA6R,WAA7R,GAA4U,WAA5U,GAAkY,WAAlY,GAA4b,WAA5b,GAAkkB,WAAlkB,GAAuoB,WAAvoB,GAAi0B,WAAj0B,GAAoiC,WAApiC,GAA6qC,WAA7qC,GAA4tC,WAA5tC,GAA8uC,WCsExuC0wC,GAAuB,CAAEzqE,MAAO,IAAKK,OAAQ,IAC7CqqE,GAA+B,CAAE1qE,MAAO,IAAKK,OAAQ,KACrDsqE,GAA+B,CAAE3qE,MAAO,IAAKK,OAAQ,KAuoB3D,IAAenL,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAU8mC,YACT,MAAMg7B,EAAeh7B,GAAOi7B,iBAAkBC,EAAAA,EAAAA,KAAahiE,EAAQ8mC,EAAMi7B,sBAAmBvgE,GACpF2zD,MAAO8M,GAAgBH,GAAgB,CAAC,EAE1CI,EAAYD,EAAcjiE,EAAOmiE,WAAWC,KAAKH,QAAezgE,EAChEgwD,EAAMyQ,GAAclvB,EAAAA,EAAAA,KAAW/yC,EAAQiiE,QAAezgE,EACtDqM,GAAOC,EAAAA,EAAAA,KAAkB9N,GACzBg/D,GAAQwD,EAAAA,EAAAA,KAAYxiE,IACpB,uBAAEgzE,EAAsB,mBAAEC,IAAuBC,EAAAA,GAAAA,GAAqBlzE,GAE5E,MAAO,CACLkiE,YACA1Q,MACA3jD,OACAmxD,QACAmU,eAAgBH,EAChB1nC,WAAY2nC,IAjBE3lE,CAroB2B8lE,EAC7CtsC,QACAj5B,OACA2jD,MACA0Q,YACAlD,QACA1zB,aACA6nC,qBAEA,MAAM,kBACJxP,EAAiB,iBACjBzF,EAAgB,eAChBmV,EAAc,gBACdxP,EAAe,SACfv2B,EAAQ,uBACR2wB,EAAsB,cACtBqV,EAAa,aACbpP,EAAY,gBACZqP,EAAe,iBACfC,EAAgB,4BAChBC,EAA2B,wBAC3BC,IACE/oE,EAAAA,EAAAA,OAEGgpE,EAAuBC,IAAyB96D,EAAAA,EAAAA,IAAUwyB,GAAcwnC,IAE/E,SAASe,IACP,MAA0B,eAAtB/sC,GAAO82B,WAAoChnC,EAAAA,EAAW/tB,MAChC,cAAtBi+B,GAAO82B,WAAmC+V,IACvCd,EACT,CAMA,MAAM,cACJhV,EAAa,gBAAEkE,EAAe,kBAAE+R,EAAiB,YAAEC,EAAW,oBAAEC,GAC9DltC,GAAS,CAAC,EACRg7B,EAAeC,EAAkBlE,IAAgBkE,QAAmBvgE,GACpE,oBACJ8kE,EAAmB,YAAE0B,EAAW,gBAAE3B,EAAe,wBAAEwF,GACjD/J,GAAgB,CAAC,EAEfmS,GAAOvtE,EAAAA,EAAAA,IAAQ,IACZotE,GAAmB1hE,IAAKgS,IAC7B,MAAMg/C,EAASvF,EAAez5C,GAC9B,MAAO,CACLotC,KAAK3mB,EAAAA,EAAAA,MAAYxF,MAAMC,KAAK89B,EAAOjO,OACnCiO,SACA94D,OAAQZ,QAAQo4D,GAAiB19C,KAAQuiD,EAAAA,GAAAA,IAAa7E,OAGzD,CAACgS,EAAmBjW,EAAeiE,KAEhC,SAAE/jE,IAAaC,EAAAA,EAAAA,MACfsM,EAASw8B,GAAOorB,cAAe,EAC/BgiB,EAAyC,cAAtBptC,GAAO82B,WAC1BE,EAAyC,cAAtBh3B,GAAO82B,WAC1BuW,EAAqC,eAAtBrtC,GAAO82B,WAEtBwW,GAAuBr2E,EACvB6U,GAAM5K,EAAAA,EAAAA,MACNqsE,GAAYrsE,EAAAA,EAAAA,MACZssE,GAAUtsE,EAAAA,EAAAA,MAEVusE,GAAoBrpE,EAAAA,EAAAA,GAAgB,IAAM0H,EAAIzK,SAE9CqsE,IAAiBtpE,EAAAA,EAAAA,GACrB,IAAM0H,EAAIzK,SAGNssE,IAAiBvpE,EAAAA,EAAAA,GACrB,IAAMopE,EAAQnsE,UAGV,kBACJusE,GAAiB,kBACjBC,GAAiB,kBACjBC,GAAiB,uBACjBC,GAAsB,sBACtBC,KACEC,EAAAA,GAAAA,GAAuBniE,IAEpBoiE,GAAmBC,KAAwBnqE,EAAAA,EAAAA,KAAS,GAErDoqE,GAAgBb,EAAUlsE,QAC1BgtE,GAAmBviE,EAAIzK,SAE7Be,EAAAA,EAAAA,IAAU,KACR+rE,GAAqBvrE,QAAQ0qE,GAAuBc,IAAiBC,KAAqBhB,KACzF,CAACC,EAAqBc,GAAeC,GAAkBhB,KAE1DjrE,EAAAA,EAAAA,IAAU,KACR+0D,EAAuB,CAAEQ,MAAO,eAC/B,CAAC2V,IAEJ,MAAM,WACJgB,GAAU,WACV5rD,GACA/kB,MAAO4wE,GAAc,KACrBx2E,GAAI,SACJsf,IZpIW,SACbvL,EACA0iE,EACAC,GAAyB,EACzBC,EACA54D,GAAwB,EACxB64D,EAAoB,CAAErtE,MAAO,EAAGK,OAAQ,GACxC0qE,GAEA,MAAOuC,EAAwBC,IAA6B7qE,EAAAA,EAAAA,IAA4BqoE,IACjFyC,EAAoBC,IAAyB/qE,EAAAA,EAAAA,SAA2BtJ,IAExEs0E,EAAoCC,IAAsCj9D,EAAAA,EAAAA,IAAU,CAAEqC,EAAG,EAAGsG,EAAG,KAC/Fu0D,EAAgCC,IAAkCn9D,EAAAA,EAAAA,IAAU,CAAE1Q,MAAO,EAAGK,OAAQ,KAChGytE,EAAwBC,IAA0Br9D,EAAAA,EAAAA,IAAU,CAAEqC,EAAG,EAAGsG,EAAG,IAExE20D,EAAkCN,IAClCO,EAAsBH,IAEtBxlD,EAAU9d,EAAIzK,QACdmuE,EAAoBhB,EAAqBntE,SAExCouE,EAAaC,IAAkB54E,EAAAA,EAAAA,IAAQ,IACvC64E,EAAiBC,IAAsB94E,EAAAA,EAAAA,IAAQ,IAC/Cw3E,EAAYuB,EAAeC,IAAgBh5E,EAAAA,EAAAA,IAAQ,IACnD4rB,EAAYqtD,EAAeC,IAAgBl5E,EAAAA,EAAAA,IAAQ,IACnDm5E,EAAmBC,EAAqBC,IAAsBr5E,EAAAA,EAAAA,IAAQ,IAEtEs5E,EAAiBC,IAAsBrsE,EAAAA,EAAAA,SAAuCtJ,GAErF,SAAS41E,IACP,MAAO,CACLhvE,MAAOmB,OAAO8tE,WACd5uE,OAAQc,OAAO+tE,YAEnB,CAEA,MAAMC,GAAwBrsE,EAAAA,EAAAA,GAAiBiT,IACxCvB,GAAc+4D,EAA0B,CAAEx6D,EAAGgD,EAAShD,EAAGsG,EAAGtD,EAASsD,MAGtE+1D,GAAoBtsE,EAAAA,EAAAA,GAAgB,IACjC0R,EAAe6gD,GAAsBiY,GAGxC+B,GAAsBvsE,EAAAA,EAAAA,GAAgB,KAC1C,IAAK0qE,EAAoB,OACzB,MAAM,MAAExtE,EAAK,OAAEK,GAAWmtE,EAEpB8B,EAAcN,IAOpB,MAAO,CAAEj8D,GANau8D,EAAYtvE,MAGCA,GAAS,EAGrBqZ,GALAi2D,EAAYjvE,OAGCA,GAAU,MAKhDS,EAAAA,EAAAA,IAAU,KACJwnB,GAASgmD,KACZ,CAAChmD,KAEJxnB,EAAAA,EAAAA,IAAU,KACR,IAAKqtE,GAAeX,EAAoB,CACtC,MAAM+B,EAAmBF,IACzB,IAAKE,EAAkB,OAEvBJ,EAAsBI,GACtBnB,GACF,GACC,CAACZ,EAAoBW,EAAa7lD,IAErC,MAAMknD,GAAkB1sE,EAAAA,EAAAA,GAAiBuiB,IACvC,GAAIA,aAAiBoqD,YAA+B,IAAjBpqD,EAAMiiB,OACvC,OAIF,GADsBjiB,EAAMhiB,OACV8f,QAAQ,cAAgBmF,EACxC,OAEF,MAAM,EAAEvV,EAAC,EAAEsG,IAAMvG,EAAAA,GAAAA,GAAmBuS,IAE9B,KAAEhT,EAAI,IAAEuH,GAAQ0O,EAAQ5V,wBAC9Bi7D,EAAmC,CAAE56D,EAAGV,EAAMgH,EAAGO,IACjDm0D,EAAuB,CAAEh7D,IAAGsG,MAE5Bk1D,MAeImB,GAAoB5sE,EAAAA,EAAAA,GAAiBuiB,IACzC,GAAIA,aAAiBoqD,YAA+B,IAAjBpqD,EAAMiiB,OACvC,OAGF,MAAMqoC,EAAgBtqD,EAAMhiB,OAC5B,IAAKilB,IAAYqnD,EACf,OAEF,MAAMC,EArBR,SAAmCD,GACjC,MAAMxsD,EAAWoF,GAAqBonD,EAAcxsD,QAAQoF,GAE5D,GAAKpF,EAAQ0sD,EAAAA,KACb,IAAK,MAAMtnD,KAAY4sC,GACrB,GAAIhyC,EAAQ,IAAIoF,KACd,OAAO+rC,GAAyB/rC,EAItC,CAWuBunD,CAA0BH,GAE/C,QAAqBv2E,IAAjBw2E,EAA4B,OAChCb,EAAmBa,GAEnB,MAAM,EAAE78D,EAAC,EAAEsG,IAAMvG,EAAAA,GAAAA,GAAmBuS,IAE9B,KACJhT,EAAI,MAAEsH,EAAK,IAAEC,EAAG,OAAEC,GAChByO,EAAQ5V,wBACZi7D,EAAmC,CAAE56D,EAAGV,EAAMgH,EAAGO,IACjDi0D,EAA+B,CAAE7tE,MAAO2Z,EAAQtH,EAAMhS,OAAQwZ,EAASD,IACvEm0D,EAAuB,CAAEh7D,IAAGsG,MAE5Bo1D,MAGIsB,GAAoBjtE,EAAAA,EAAAA,GAAgB,KACxC0rE,MAGIwB,GAAsBltE,EAAAA,EAAAA,GAAgB,KAC1C4rE,OAGF5tE,EAAAA,EAAAA,IAAU,KACHqsE,GACHqB,KAED,CAACrB,IAEJ,MAAM8C,EAA8BA,CAACl9D,EAAWsG,KAC9C,MAAMi2D,EAAcN,IAEdkB,EAAmBZ,EAAYtvE,MAC/BmwE,EAAoBb,EAAYjvE,OAEhC+vE,EAAiB5C,EAAoBxtE,MACrCqwE,EAAkB7C,EAAoBntE,OAE5C,IAAIiwE,EAAOv9D,EACPw9D,EAAOl3D,EAOX,OALIi3D,EAAO,IAAGA,EAAO,GACjBC,EAAO,IAAGA,EAAO,GACjBD,EAAOF,EAAiBF,IAAkBI,EAAOJ,EAAmBE,GACpEG,EAAOF,EAAkBF,IAAmBI,EAAOJ,EAAoBE,GAEpE,CAAEt9D,EAAGu9D,EAAMj3D,EAAGk3D,IAGjBC,GAA6B1tE,EAAAA,EAAAA,GAAgB,KACjD,GAAI0R,EAAc,OAClB,MAAMuB,EAAYs4D,GAAoBtD,EAAyCuC,EAAxB+B,IACvD,IAAK7B,IAAuBz3D,EAAU,OACtC,MAAM06D,EAAcR,EAA4Bl6D,EAAShD,EAAGgD,EAASsD,GACrE81D,EAAsBsB,KAGlBC,GAA0B5tE,EAAAA,EAAAA,GAAiB6tE,IAC/C,MAAMC,EAAUD,EAEVrB,EAAcN,IAEd6B,EAAgBzD,EAAaptE,MAC7B8wE,EAAiB1D,EAAa/sE,OAIpC,OAHAuwE,EAAQ5wE,MAAQyJ,KAAK4a,IAAIirD,EAAYtvE,MAAOyJ,KAAKma,IAAIitD,EAAeD,EAAQ5wE,QAC5E4wE,EAAQvwE,OAASoJ,KAAK4a,IAAIirD,EAAYjvE,OAAQoJ,KAAKma,IAAIktD,EAAgBF,EAAQvwE,SAExEuwE,KAGT9vE,EAAAA,EAAAA,IAAU,KACR,GAAIsgB,EAAY,OAChB,MAAMwvD,EAAUF,EAAwB,CAAE1wE,MAAOotE,EAAaptE,MAAOK,OAAQ+sE,EAAa/sE,SACtFuwE,GAASnD,EAAsBmD,IAClC,CAACxD,EAAchsD,IAElB,MAAM2vD,GAAyBjuE,EAAAA,EAAAA,GAAgB,KAC7C,IAAK0qE,GAAsBpsD,EAAY,OACvC,MAAMwvD,EAAUF,EAAwBlD,GACpCoD,GAASnD,EAAsBmD,MAGrC9vE,EAAAA,EAAAA,IAAU,KACJsgB,GACJovD,KACC,CAAChD,EAAoBpsD,KAExBtgB,EAAAA,EAAAA,IAAU,KACR,MAAMkwE,EAAqBA,KACzBpC,IACAmC,IACAP,IACIpb,KACFv0D,aAAau0D,IACbA,QAAgBh8D,GAElBg8D,GAAgBj0D,OAAOC,WAAW,KAChCg0D,QAAgBh8D,EAChBy1E,KACC,MAKL,OAFA1tE,OAAOmL,iBAAiB,SAAU0kE,GAE3B,KACLnwE,aAAau0D,IACbA,QAAgBh8D,EAChB+H,OAAOoL,oBAAoB,SAAUykE,KAEtC,CAACR,IAEJ,MAAMS,GAAanuE,EAAAA,EAAAA,GAAiBuiB,IAClC,IAAK2nD,IAAe1kD,EAAS,OAC7B,MAAM,EAAEvV,EAAC,EAAEsG,IAAMvG,EAAAA,GAAAA,GAAmBuS,GAE9B0B,EAAUhU,EAAIk7D,EAAoBl7D,EAClCiU,EAAU3N,EAAI40D,EAAoB50D,EAElCi3D,EAAOtC,EAAgCj7D,EAAIgU,EAC3CwpD,EAAOvC,EAAgC30D,EAAI2N,EAE7CwmD,GAAoBD,EAA0B0C,EAA4BK,EAAMC,MAGhFnkE,GAAetJ,EAAAA,EAAAA,GAAiBuiB,IACpC,IAAKjE,IAAekH,QAA+BlvB,IAApB01E,EAA+B,OAC9D,MAAM,EAAE/7D,EAAC,EAAEsG,IAAMvG,EAAAA,GAAAA,GAAmBuS,GAC9B6rD,EAAuBtD,IAEvBuD,EAAe1nE,KAAK4a,IAAI5a,KAAKma,IAAI,EAAG7Q,GAAIi8D,IAAiBhvE,OACzDoxE,EAAe3nE,KAAK4a,IAAI5a,KAAKma,IAAI,EAAGvK,GAAI21D,IAAiB3uE,QAEzD0mB,EAAUoqD,EAAelD,EAAoBl7D,EAC7CiU,EAAUoqD,EAAenD,EAAoB50D,EAE7Cg4D,EAAOrD,EAAgCj7D,EAAIm+D,EAAqBlxE,MAAQqtE,EAAYrtE,MACpFsxE,EAAOtD,EAAgC30D,EAAI63D,EAAqB7wE,OAASgtE,EAAYhtE,OASrFkxE,EAAY,CANhBx+D,EAAGi7D,EAAgCj7D,EACnCsG,EAAG20D,EAAgC30D,EACnCrZ,MAAOkxE,EAAqBlxE,MAC5BK,OAAQ6wE,EAAqB7wE,QAK3ByuE,IAAoBza,GAAiBI,MACpCqa,IAAoBza,GAAiBO,SACrCka,IAAoBza,GAAiBW,aAExCuc,EAAUvxE,MAAQyJ,KAAKma,IAAIstD,EAAqBlxE,MAAQ+mB,EAASsmD,EAAYrtE,OAC7EuxE,EAAUx+D,EAAItJ,KAAK4a,IAAIktD,EAAUx+D,EAAIgU,EAASsqD,IAG5CvC,IAAoBza,GAAiBK,OACpCoa,IAAoBza,GAAiBS,UACrCga,IAAoBza,GAAiBa,cAExCqc,EAAUvxE,MAAQyJ,KAAKma,IAAIstD,EAAqBlxE,MAAQ+mB,EAASsmD,EAAYrtE,QAG3E8uE,IAAoBza,GAAiBE,KACpCua,IAAoBza,GAAiBO,SACrCka,IAAoBza,GAAiBS,WAExCyc,EAAUlxE,OAASoJ,KAAKma,IAAIstD,EAAqB7wE,OAAS2mB,EAASqmD,EAAYhtE,QAC/EkxE,EAAUl4D,EAAI5P,KAAK4a,IAAIktD,EAAUl4D,EAAI2N,EAASsqD,IAG5CxC,IAAoBza,GAAiBG,QACpCsa,IAAoBza,GAAiBW,YACrC8Z,IAAoBza,GAAiBa,cAExCqc,EAAUlxE,OAASoJ,KAAKma,IAAIstD,EAAqB7wE,OAAS2mB,EAASqmD,EAAYhtE,SAGjFotE,EAAsB,CAAEztE,MAAOuxE,EAAUvxE,MAAOK,OAAQkxE,EAAUlxE,SAClEktE,EAA0B,CAAEx6D,EAAGw+D,EAAUx+D,EAAGsG,EAAGk4D,EAAUl4D,OAG3DvY,EAAAA,EAAAA,IAAU,KACR,IAAIwS,EAUJ,OATI46D,GAAqBf,IACvB75D,GAAUC,EAAAA,GAAAA,IAAc26D,EAAmB,CACzC16D,UAAWg8D,EACX77D,OAAQs9D,EACRv9D,UAAWq8D,EACXzrE,QAASyrE,EACTvzD,cAAeuzD,KAGZz8D,GACN,CAAC65D,EAAee,KAEnBptE,EAAAA,EAAAA,IAAU,KACR,MAAM0wE,EAAiC,GACvC,GAAIlpD,GAAW6kD,EACb,IAAK,MAAM5kD,KAAY4sC,GAAuB,CAC5C,MAAMsc,EAAgBnpD,EAAQ1tB,cAAc,iBAAiB2tB,KAE7D,GAAIkpD,EAAe,CACjB,MAAMn+D,GAAUC,EAAAA,GAAAA,IAAck+D,EAAe,CAC3Cj+D,UAAWk8D,EACX/7D,OAAQvH,EACRsH,UAAWs8D,EACX1rE,QAAS0rE,EACTxzD,cAAewzD,IAGb18D,GACFk+D,EAASjoE,KAAK+J,EAElB,CACF,CAGF,MAAO,KACLk+D,EAASxjE,QAASsF,GAAYA,OAE/B,CAAC65D,EAAe7kD,IAEnB,MAAMopD,GAAc1E,EAAa,gCAAkC,GAE7D2E,GAAiBvC,IAEvB,IAAKjB,IAAgBX,IAAuBmE,GAC1C,MAAO,CACL3E,YAAY,EACZ3wE,MAAOq1E,IAIX,MAAMr1E,IAAQq9C,EAAAA,GAAAA,GACZ,SAASi4B,GAAe5+D,OACxB,QAAQ4+D,GAAet4D,QACtB7E,GAAgB,cAAcg5D,EAAmBxtE,YACjDwU,GAAgB,eAAeg5D,EAAmBntE,YACnD,oBACC2sE,GAAc5rD,GAAcutD,IAAsB,+BACnD+C,IAGF,MAAO,CACL37D,SAAUu3D,EACV72E,KAAM+2E,EACNR,aACA5rD,aACA/kB,SAEJ,CYvOMu1E,CACFpnE,EACAyhE,EACAW,GACAnB,IACAM,EA7EF,WACE,GAA0B,cAAtBrtC,GAAO82B,WAA4B,OAAOmV,EAEhD,CA2EEkH,GACA9G,GAGIh4D,GAAIgD,IAAUhD,EACdsG,GAAItD,IAAUsD,GACpBvY,EAAAA,EAAAA,IAAU,KACHksE,SAAoB5zE,IAAN2Z,SAAyB3Z,IAANigB,IACpCgyD,EAA4B,CAAEt1D,SAAU,CAAEhD,KAAGsG,SAE9C,CAAC2zD,GAAYj6D,GAAGsG,MAEnBvY,EAAAA,EAAAA,IAAU,MACHksE,IAAcv2E,IAAQq1E,GACzBR,EAAwB,CAAE70E,WAE3B,CAACu2E,GAAYlB,EAAkBr1E,KAElC,MAAMq7E,GAAcr7E,IAAQg1E,IAEtBsG,GAAeD,GAAY9xE,MAC3BgyE,GAAgBF,GAAYzxE,QAElCS,EAAAA,EAAAA,IAAU,KACJsgB,IACFoqD,EAAsB,CAAExrE,MAAO+xE,GAAc1xE,OAAQ2xE,MAEtD,CAACA,GAAeD,GAAc3wD,GAAYoqD,IAE7C,MAAM19B,IAAUvqC,EAAAA,EAAAA,KACVD,IAAOyqC,EAAAA,GAAAA,MACP,QACJkkC,IACEvY,GAAgB,CAAC,EAEfwY,GAAgBzc,EAAgBrc,OAAO0K,OAAO2R,GAAev9D,OAAS,GAE5Ei6E,EAAAA,GAAAA,GAAY,KACL1c,GACLrc,OAAO8K,KAAKuR,GAAeznD,QAASgO,IAClC,MAAMg/C,EAASvF,EAAcz5C,GACzBg/C,EAAOiX,SACThH,EAAe,CACble,MAAOiO,EAAOjO,MACdklB,QAASjX,EAAOiX,QAChB9vE,OAAQ64D,EAAO74D,QAAUsD,EAAMrP,GAC/Bg8E,UAAWpX,EAAOoX,eAIvBH,GAtKoB,UAsKS74E,GAAW,GAG3C,MAAMi5E,IAAoBzyE,EAAAA,EAAAA,IAAsD,MAE1E0yE,IAAsB1yE,EAAAA,EAAAA,IAAuC,MAE7Dq7D,IAA4Bn4D,EAAAA,EAAAA,GAAiByvE,IACjDF,GAAkBtyE,QAAUwyE,IAGxBtS,IAAYn9D,EAAAA,EAAAA,GAAiBuiB,IAC7BgtD,GAAkBtyE,SACpBsyE,GAAkBtyE,QAAQslB,KAIxB61C,IAA8Bp4D,EAAAA,EAAAA,GAAiByvE,IACnDD,GAAoBvyE,QAAUwyE,IAG1BvS,IAAcl9D,EAAAA,EAAAA,GAAiBgL,IAC/BwkE,GAAoBvyE,SACtBuyE,GAAoBvyE,QAAQ+N,KAI1B0kE,IAA4B1vE,EAAAA,EAAAA,GAAgB,KAChDm9D,GAAU,CACRoB,UAAW,8BAIToR,IAAqB3vE,EAAAA,EAAAA,GAAgB,KACzCk9D,GAAYtG,EAAc5rD,OAGtB4kE,IAAmB5vE,EAAAA,EAAAA,GAAgB,KACvCgzD,MAGI6c,IAAyB7vE,EAAAA,EAAAA,GAAgB,KAC7CsoE,MAGIwH,IAAiB9vE,EAAAA,EAAAA,GAAgB,KACjCovE,GAAgB,EAClB3W,IAEAzF,MAIE+c,IAAoB/vE,EAAAA,EAAAA,GAAgB,KACxC,GAAIg3D,EAAJ,CACE,MAAM99C,GAAMuiD,EAAAA,GAAAA,IAAa7E,GACzBoC,EAAa,CACX9/C,MACA+iD,OAAQ,CACNV,mBAAmB,IAIzB,MAEA5C,EAAgB,CACd1O,MAAO3D,EAAKhzD,GACZmxE,WAAW,MAITqC,IAAkB9mE,EAAAA,EAAAA,GAAgB,KAClCo7D,EACF+B,GAAU,CACRoB,UAAW,wBAGbqR,OAIE7I,IAAsB/mE,EAAAA,EAAAA,GAAgB,KAC1C+yD,EAAuB,CAAEQ,MAAO,gBAG5Byc,IAAwBhwE,EAAAA,EAAAA,GAAgB,KAC5C+yD,EAAuB,CAAEQ,MAAO,iBAG5B0c,IAA6BjwE,EAAAA,EAAAA,GAAgB,KACjDqoE,MAGI6H,IAAiBlwE,EAAAA,EAAAA,GAAiBmwE,IACtC/H,EAAc,CAAElQ,OAAQiY,EAAIjY,WAGxBkY,IAAcpwE,EAAAA,EAAAA,GAAgB,KAClCoiC,EAAS,CACP9uC,GAAIgzD,EAAKhzD,OAIPqoD,IAC6FngD,EAAAA,EAAAA,IAAQ,IAClG,EAAGsK,YAAW1G,OAAQw8C,MAC3BnoD,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,WACEqW,EAAAA,GAAAA,GACEs/D,EDtV85B,WAAxD,WCuVt2BttB,GAAc,UAGlB71C,OAAK,EACLqN,QAASvgB,EACTc,KAAMu1E,EAAsB,OAAS,UACrC5nE,MAAM,cACNE,QAASsE,EACTE,UAAU,eAAcxS,UAExBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,WAGd,CAACnO,EAAUq2E,IAEd,SAASmH,KACP,OACEh9E,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,CACGmP,GAAQ2jD,GAAO3jD,EAAKrP,KAAOgzD,EAAIhzD,KAC9BG,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,OAAOlF,QAAS4uE,GAAY58E,SAAEw3C,GAAQ,wBAEvDv3C,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,SAASlF,QAASmuE,GAAmBn8E,SAAEw3C,GAAQ,uBAC7D21B,IACCltE,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,WAAWlF,QAASkuE,GAA0Bl8E,SAC1Dw3C,GAAQ,cAGZsb,GAAKgqB,cACJ78E,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAMswD,EAAY,OAAS,UAC3Bx1D,QAASuuE,GACTjpE,YAAatI,QAAQw4D,GAAWxjE,SAE/Bw3C,GAAQgsB,EAAY,mBAAqB,iCAKpD,CAEA,SAASuZ,KACP,OACE98E,EAAAA,GAAAA,GAAC+f,GAAAA,EAAI,CACHpU,OAAQoqE,GACRgH,OAAQ/G,GACR/hE,IAAK0hE,EACL71E,WAAWqW,EAAAA,GAAAA,GACTs/D,EAAsBj4D,GAA2B,oBACjD,yBAEFo4D,kBAAmBA,EACnBE,eAAgBA,GAChBD,eAAgBA,GAChB51D,WAAS,EACTpU,QAASqqE,GACTpqE,oBAAqBqqE,GAAsBp2E,SAE1C68E,MAGP,CAiBA,MAAMI,IAAsB7mE,EAAAA,GAAAA,GDpaqF,WCsa/GwxD,GDtaw0C,YCyap0CsV,IAAgBl1E,EAAAA,EAAAA,IAAQ,KAC5B,GAAIstE,EAAqB,MAAO,aAChC,IAAKhM,EAAa,OAClB,MAAM,EAAE6T,EAAC,EAAEC,EAAC,EAAEx1B,IAAMy1B,EAAAA,GAAAA,IAAS/T,GACvBgU,GAAOC,EAAAA,GAAAA,IAAa,CAACJ,EAAGC,EAAGx1B,IAEjC,OAD8B,SAAV0Y,EAAmB,IAAMgd,EAAOA,GA1WjC,IA2WmB,aAAe,oBACpD,CAAChU,EAAahJ,EAAOgV,IAExB,SAASkI,GAAqBz9E,GAC5B,OACEE,EAAAA,GAAAA,GAAA,OACEF,UAAWA,EACX2J,MAAM,KACNK,OAAO,KACP6pE,QAAQ,YACR6J,KAAK,OAAMz9E,UAEXC,EAAAA,GAAAA,GAAA,QACEF,UD5bqf,WC6brf,YAAU,UACV,YAAU,UACV67D,EAAE,mCAIV,CAwFA,MAAMryC,IAAejgB,EAAAA,EAAAA,MA2HrB,SAASo0E,GAAuBC,GAC9B,OAAOvnE,EAAAA,GAAAA,GAAewnE,EAAAA,IAA0BD,EAClD,CAiBA,OA7IAE,EAAAA,GAAAA,GAAoBt0D,IAAe3d,GAAUwzD,IAAsB71C,GAAa9f,UA8I9E5J,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJywE,UAAW5pE,EACXnU,WAAWqW,EAAAA,GAAAA,GD5qBM,WC8qBfs/D,GD9qB4D,WC+qB5DtW,GD/qBkI,WCgrBlIqW,GDhrB0J,YCkrB5JsI,YAAarI,EAAsBiB,QAAiB7zE,EACpDk7E,cAAe1H,KAAsBlX,GAvBrCv/D,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAKF,UAAW29E,GAAuB,UACvCz9E,EAAAA,GAAAA,GAAA,OAAKF,UAAW29E,GAAuB,aACvCz9E,EAAAA,GAAAA,GAAA,OAAKF,UAAW29E,GAAuB,WACvCz9E,EAAAA,GAAAA,GAAA,OAAKF,UAAW29E,GAAuB,YACvCz9E,EAAAA,GAAAA,GAAA,OAAKF,UAAW29E,GAAuB,cACvCz9E,EAAAA,GAAAA,GAAA,OAAKF,UAAW29E,GAAuB,eACvCz9E,EAAAA,GAAAA,GAAA,OAAKF,UAAW29E,GAAuB,iBACvCz9E,EAAAA,GAAAA,GAAA,OAAKF,UAAW29E,GAAuB,yBAeuC56E,EAChF8I,OAAQA,EACRigD,oBAAkB,EAClB//C,QAASswE,GACT9zC,QA/HAroC,EAAAA,GAAAA,GAAA,OACEiU,IAAKyhE,EAAU31E,SAEb01E,EAEGF,GAOP31E,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GACT,eACA,YAEFrQ,OAAOq9C,EAAAA,GAAAA,GACL85B,IAAiB,8BAA8BA,OAC/Cl9E,SAAA,EAEFC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UD9kB+kC,WC+kB/kCwS,OAAK,EACLzE,MAAM,cACN3N,KAAK,OACLqS,UAAWglC,GAAQowB,EAAsB,OAAS,SAClD55D,QAASslE,GAAgBtzE,UAEzBC,EAAAA,GAAAA,GAAA,OAAKF,UAAWk9E,QArDpBp9E,EAAAA,GAAAA,IAAA,OACEE,UDjiB4K,WCkiB5KmU,IAAKqV,GAAavpB,SAAA,CAEjBu1E,GAAM7hE,IAAKipE,GACVA,EAAI/wE,OAhGZ,WACE,MAAM7F,GAAQq9C,EAAAA,GAAAA,GACZ85B,IAAiB,8BAA8BA,MAC/C5T,GAAe,4BAA4BA,KAE7C,OACEzpE,EAAAA,GAAAA,IAAA,OACEE,UAAW0d,GACX1X,MAAOA,EAAM/F,SAAA,CAEZw9E,GAAqB//D,KACtB5d,EAAAA,GAAAA,IAAA,OACEE,UAAW0d,GAAiBzd,SAAA,EAE5BH,EAAAA,GAAAA,IAAA,OAAKE,UDndgvB,WCmd9sBC,SAAA,EACrCC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACL5zB,KAAK,OACL6zB,KAAM8+B,KAER7yD,EAAAA,GAAAA,GAACkoD,GAAc,CAAC71C,UAAW4jE,GAAmBtqE,OAAQoqE,QAEvDxS,GAAWya,WAAanrB,GAAKkK,WAC9B/8D,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,MAChBxd,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAW0d,GACXlL,OAAK,EACLzE,MAAM,cACN3N,KAAK,OACLqS,UAAWglC,GAAQ,SACnBxpC,QAASsuE,GAAet8E,UAExBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAAC1S,UAAW0d,GAAqBjQ,KAAK,eAG9CgwE,GAAqB//D,MAG5B,CA4DUygE,IAEAj+E,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACLh0B,UDziB+wC,WC0iB/wCI,KAAK,OACL6zB,KAAM2oD,EAAI7pB,IAEV9kD,QAASA,IAAM0uE,GAAeC,MAInCrH,IAnEHz1E,EAAAA,GAAAA,IAAA,OACEE,UAAW0d,GAAwBzd,SAAA,CAElCw9E,GAAqB//D,KACtB5d,EAAAA,GAAAA,IAAA,OACEE,UAAW0d,GAAiBzd,SAAA,EAE5BC,EAAAA,GAAAA,GAAA,OAAKF,UDrfqrB,WCqfnpBC,UACrCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAAC1S,UAAW0d,GAAajQ,KAAK,UAEpCR,GAAK,YACN/M,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,MAChBxd,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAW0d,GACXlL,OAAK,EACLzE,MAAM,cACN3N,KAAK,OACLqS,UAAWglC,GAAQ,SACnBxpC,QAASquE,GAAuBr8E,UAEhCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAAC1S,UAAW0d,GAAqBjQ,KAAK,eAG9CgwE,GAAqB//D,UAmFrBs/D,MAEDl9E,EAAAA,GAAAA,IAAA,OAAKE,UD1lBkN,WC0lBxLC,SAAA,EAC3Bs1E,IA/ENr1E,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,GD7gBi9B,WC+gB19B,WAEF7D,OAAK,EACLzE,MAAM,cACN3N,KAAK,OACL6N,QAASyuE,GAA2Bz8E,UAEpCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAAC1S,UAAW0d,GAAajQ,KAAK,WAuE/B8nE,IACAr1E,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,GACTqH,GDhmBumC,WCkmBvmC,WAEFlL,OAAK,EACLzE,MAAM,cACN3N,KAAK,OACL6N,QAASwuE,GAAsBx8E,UAE/BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAAC1S,UAAW0d,GAAkBjQ,KAAK,oBAI5CvN,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,GACTqH,GACA,WAEFlL,OAAK,EACLzE,MAAM,cACN3N,KAAK,OACL6N,QAASulE,GAAoBvzE,UAE7BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAAC1S,UAAW0d,GAAkBjQ,KAAK,4BA1DKvN,EAAAA,GAAAA,GAACq/D,GAAoB,KAmExEz/D,EAAAA,GAAAA,IAAA,OACEE,UAAU,eACVgG,OAAOq9C,EAAAA,GAAAA,GACLkmB,GAAe,qBAAqBA,IACpC4T,IAAiB,8BAA8BA,OAC/Cl9E,SAAA,EAEFC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN3N,KAAK,UACLqS,UAAWglC,GAAQowB,EAAsB,OAAS,SAClD55D,QAASslE,GAAgBtzE,UAEzBC,EAAAA,GAAAA,GAAA,OAAKF,UAAWk9E,QAElBh9E,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SAAEwjE,GAAWya,WAAanrB,GAAKkK,aACzDsY,IA1PJr1E,EAAAA,GAAAA,GAACsT,GAAAA,EAAY,CACXxT,WAAWqW,EAAAA,GAAAA,GACTs/D,EAAsBj4D,GAA2B,oBACjD,yBAEFjK,QAAS20C,GACT10C,UAAWiiE,EAAsB,OAAS,QAAQ11E,SAEjD68E,YAyRH92E,MAAO,qBAAqB4hE,GAAmB,4BAC/Ct/B,YAAU,EACV81C,iBAAe,EAAAn+E,SAAA,CAEdy1E,GAAgBsH,KAChB5d,GAAiBkW,GAAa3hE,IAAKgS,IAClCzlB,EAAAA,GAAAA,GAACwkE,GAAqB,CAEpBr8B,MAAOA,EACPu8B,0BAA2BA,GAC3BC,4BAA6BA,GAC7BF,OAAQvF,EAAcz5C,GACtBm/C,eAAgB6R,IAAc5rD,GAC9Bi6C,yBAA0BmR,GAC1BpR,oBAAqB4Q,EACrB1Q,YAAa0W,IARRh2D,IAWR4vD,IAAwBr1E,EAAAA,GAAAA,GAAC2hE,GAAkB,UCloBlD,IAAehjE,EAAAA,EAAAA,IAnDqBw/E,EAAGtrB,MAAK3xD,OAAMu1D,+BAChD,MAAM,sBAAE2nB,EAAqB,eAAEC,IAAmBryE,EAAAA,EAAAA,OAE3C0qD,EAAgB4nB,IAAqBnyE,EAAAA,EAAAA,IAASsqD,IAA4B,GAE3E1pD,GAAOC,EAAAA,EAAAA,KAEPuxE,GAAuB5+E,EAAAA,EAAAA,IAAY,KACvC0+E,EAAe,CAAE7nB,MAAO3D,EAAKhzD,GAAI62D,oBAChC,CAAC2nB,EAAgB3nB,EAAgB7D,IAE9B2rB,GAAwB7+E,EAAAA,EAAAA,IAAY,KACxCy+E,KACC,IAEGjxE,EAA0BJ,EAAT,SAAT7L,EAAuB,UAAkB,oBACjD4T,GAAO/M,EAAAA,EAAAA,IAAQ,KACnB,OAAQ7G,GACN,IAAK,OACH,OAAO6L,EAAK,0BAA0B88B,EAAAA,EAAAA,IAAgBgpB,IACxD,IAAK,SACH,OAAO9lD,EAAK,sBAAsB88B,EAAAA,EAAAA,IAAgBgpB,IAEpD,QACE,OAAO9lD,EAAK,+BAEf,CAAC8lD,EAAK3xD,EAAM6L,IAEf,OACEnN,EAAAA,GAAAA,IAACyjC,GAAAA,EAAa,CACZ13B,OAAQZ,QAAQ8nD,GAChBhnD,QAAS2yE,EACTrxE,MAAOA,EACPo2B,eAAgBg7C,EAAqBx+E,SAAA,EAEpCi0B,EAAAA,GAAAA,GAAWlf,EAAM,CAAC,oBAClB2hD,IACCz2D,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP92D,UAAU,kBACVopC,QAASwtB,EACTxpD,OAAO8mB,EAAAA,GAAAA,GACLjnB,EAAK,sCAAuC8lD,GAAKkK,WACjD,CAAC,oBAEHlG,QAASynB,SCQnB,IAAe3/E,EAAAA,EAAAA,IAtD6B8/E,EAC1Ct2C,YAEA,MAAM,wBAAEu2C,EAAuB,uBAAEC,IAA2B3yE,EAAAA,EAAAA,MACtD6mD,EAAM1qB,GAAO0qB,KAEZ+rB,EAAeC,IAAoB1yE,EAAAA,EAAAA,KAAS,GAE7CY,GAAOC,EAAAA,EAAAA,KAEP4mD,GAAgBj0D,EAAAA,EAAAA,IAAY,KAChC++E,EAAwB,CACtBhoB,eAAgB3rD,QAAQ8nD,GAAK4D,6BAE9B,CAACioB,EAAyB7rB,KAG7BtoD,EAAAA,EAAAA,IAAU,KACJsoD,GACFgsB,GAAiB,IAElB,CAAChsB,IAEJ,MAAMisB,GAAW/2E,EAAAA,EAAAA,IAAQ,KACvB,MACMg3E,EADOhyE,EAAK,mCACCgyE,MAAM,UACnBC,EAAWjyE,EAAK,iCACtB,MAAO,CACLgyE,EAAM,IACN/+E,EAAAA,GAAAA,GAAA,KAAGmT,KAAM8rE,EAAAA,IAAkBnyE,OAAO,SAASoyE,IAAI,sBAAqBn/E,SAAEi/E,IACtED,EAAM,KAEP,CAAChyE,IAEJ,OACEnN,EAAAA,GAAAA,IAACyjC,GAAAA,EAAa,CACZ13B,OAAQZ,QAAQ8nD,GAChBhnD,QAAS8yE,EACTxxE,MAAOJ,EAAK,kCACZw2B,eAAgBqwB,EAChBurB,mBAAoBP,EAAc7+E,SAAA,EAEjCi0B,EAAAA,GAAAA,GAAWjnB,EAAK,gCAAiC8lD,GAAKmrB,WAAY,CAAC,qBACpEh+E,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP92D,UAAU,kBACVopC,QAAS01C,EACT1xE,MAAO4xE,EACPjoB,QAASgoB,KAEV7qD,EAAAA,GAAAA,GAAWjnB,EAAK,iCAAkC8lD,GAAKmrB,WAAY,CAAC,yBCtB3E,IAAer/E,EAAAA,EAAAA,IAhC0BygF,EACvCC,aAEA,MAAM,2BAAEC,EAA0B,iBAAEC,EAAgB,0BAAEC,IAA8BxzE,EAAAA,EAAAA,MAC9Ee,GAAOC,EAAAA,EAAAA,KAEPrB,EAASZ,QAAQs0E,GAEjBI,GAAkBlpD,EAAAA,EAAAA,GAAsB8oD,IAAWA,EACnDK,EAAeD,GAAiBE,aAEhCC,GAA4BjgF,EAAAA,EAAAA,IAAY,KAC5C2/E,IACII,EACFF,EAA0B,CAAEK,SAAUJ,EAAgB5/E,GAAIigF,wBAAwB,IAElFP,EAAiB,CAAE1/E,GAAI4/E,EAAiB5/E,MAEzC,CAAC6/E,EAAcD,IAElB,OACEz/E,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQA,EACRE,QAASyzE,EACTxqE,KAAqB/H,EAAf2yE,EAAoB,yBAAiC,qBAC3Dp8C,aAAcv2B,EAAK,UACnBw2B,eAAgBq8C,EAChBp8C,sBAAoB,M,gECzC1B,UAAgB,KAAO,WAAW,KAAO,WAAW,OAAS,WAAW,YAAc,WAAW,KAAO,WAAW,YAAY,WAAW,SAAW,YC4B/Iu8C,GAAS,CACb,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,UAAW,UAAW,WACvDtsE,IAAI2pE,GAAAA,IAoCN,IAAez+E,EAAAA,EAAAA,IAlCYqhF,EACzB/sE,OACAgtE,aACA9yE,QACA2H,OACAtQ,QACA4uB,QACA2V,UACAh7B,cAEA,MAAMmyE,EAAY17E,EAAQ4uB,EAAS2sD,GAAOp+E,OACpCw+E,EAASJ,GAAO7sE,KAAKmI,MAAM6kE,IAC3BE,EAASL,GAAO7sE,KAAKmtE,KAAKH,KAAcC,GACxC,EAAEjD,EAAC,EAAEC,EAAC,EAAEx1B,IAAM24B,EAAAA,GAAAA,IAAQH,EAAQC,EAAQ,IAEtC77D,GAAchY,EAAAA,EAAAA,GAAgB,KAClCwB,IAAUg7B,KAGZ,OACEnpC,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAACg+C,gBAAiB/iE,GAAO6kD,KAAMt0D,QAASwW,EAAake,UAAW10B,EAAQhO,SAAA,CAC9EkgF,GACCjgF,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAM0F,EAAMnT,UAAW0d,GAAOgjE,SAAU16E,MAAO,qBAAqBo3E,KAAKC,KAAKx1B,QAEpF3nD,EAAAA,GAAAA,GAAA,OAAK8D,IAAKmP,EAAMnT,UAAW0d,GAAOvK,KAAMsV,IAAI,GAAGziB,MAAO,qBAAqBo3E,KAAKC,KAAKx1B,KAAMhkD,WAAW,KAExG/D,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAO1I,KAAK/U,SAAA,EAC1BC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOrQ,MAAMpN,UAAEi0B,EAAAA,GAAAA,GAAW7mB,EAAO,CAAC,UAClDnN,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOpR,YAAYrM,SAAE+U,Y,gBC7D7C,SAA0C,WAA1C,GAAgH,WC0FhH,IAAenW,EAAAA,EAAAA,IA1EkB8hF,EAC/B9+E,SACAs/C,SACAy/B,oBAEA,MAAMC,EAAYztE,KAAKma,IAAI,EAAGna,KAAK4a,IAAInsB,EAAS,EAAGs/C,EAAS,IACtD2/B,EAAiBD,IAAch/E,EAAS,EAAI,EAC5Ck/E,EAAcF,IAAch/E,EAAS,EACrCm/E,EAA6B,IAAdH,EACfI,EAAgC,IAAdJ,EAClBK,EAAiB9tE,KAAK4a,IAAInsB,EAAQ,GAElCs/E,GAAkBthF,EAAAA,EAAAA,IAAY,KAClC+gF,EAAcz/B,EAAS,IACtB,CAACA,EAAQy/B,IAENQ,GAAevhF,EAAAA,EAAAA,IAAY,KAC/B+gF,EAAcz/B,EAAS,IACtB,CAACA,EAAQy/B,IAENttD,EAAQlgB,KAAK4a,IAAI,EAAGnsB,GAE1B,OACE/B,EAAAA,GAAAA,IAAA,OAAAG,SAAA,EACIyV,EAAAA,KACAxV,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAyB,IAAXyjC,GAAgBzjC,IACxD3P,MAAM,cACNsS,SAAqB,IAAX8gC,EACV3uC,OAAK,EACLvE,QAASmzE,EAAanhF,UAEtBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,gBAGfvN,EAAAA,GAAAA,GAAA,OAAKF,UDnDY,WCmDYgG,MAAO,iBAAiB66E,gBAAwBh/E,eAAoByxB,KAASrzB,SACvGisC,MAAMrqC,GAAQ67E,UAAK36E,GAAW4Q,IAAI,CAAC81C,EAAGC,KACrC,MAAMhlD,EAAQglD,EACR23B,EAAU33B,IAAMm3B,EAAYK,EAAiB,IAAMH,IAAgBD,EACnEQ,EAAa53B,IAAMm3B,EAAYK,EAAiB,IAAMJ,IAAmBC,GACzEr3B,IAAMm3B,EAAYK,EAAiB,GAAKJ,EACxCS,EAAW73B,IAAMm3B,IAAeG,IAAiBC,EACjDO,EAAe93B,IAAMm3B,EAAY,IAAOG,IAAiBC,GACzDv3B,IAAMm3B,GAAaI,EACnBQ,EAAc/3B,EAAIm3B,GAAan3B,GAAKm3B,EAAYK,EACtD,OACEhhF,EAAAA,GAAAA,GAAA,OACE+N,QAASA,IAAM2yE,EAAcl3B,GAC7B1pD,WAAWqW,EAAAA,GAAAA,GDhEwG,WCkEjH3R,IAAUy8C,GDlEyL,YCmElMmgC,GAAaE,IDnEuH,YCoEpIH,GAAUE,GAAWE,IDpEkI,WCqExJA,GDrE+K,mBC2EvL/rE,EAAAA,KACAxV,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAcyjC,IAAWt/C,EAAS,GAAK6b,GD7Ed,YC8EnD3P,MAAM,cACNyE,OAAK,EACL6N,SAAU8gC,IAAWt/C,EAAS,EAC9BoM,QAASkzE,EAAgBlhF,UAEzBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,gBCnFrB,GAAsnB,WCsDtnB,IAAe5O,EAAAA,EAAAA,IAlC4B6iF,EACzCC,YACAC,aACA5hF,YACA6hF,oBACAC,iBAEA,MAAM70E,GAAOC,EAAAA,EAAAA,KAEb,OACEpN,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GD9BG,WC8ByBrW,GAAWC,SAAA,CACpD4hF,IACC/hF,EAAAA,GAAAA,IAAA,OAAKE,UDhCiE,WCgCjCC,SAAA,EACnCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAMo0E,EAAmB7hF,UDjC6K,cCkC5ME,EAAAA,GAAAA,GAAA,OAAKF,UDlC2R,WCkCrPuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAE0hF,KACjFzhF,EAAAA,GAAAA,GAAA,OAAKF,UDnCuI,WCmC/FC,UAC3CC,EAAAA,GAAAA,GAAA,OAAKyJ,MAAM,KAAKK,OAAO,IAAI6pE,QAAQ,WAAW6J,KAAK,OAAMz9E,UACvDC,EAAAA,GAAAA,GAAA,QAAM27D,EAAE,oLAAoL6hB,KAAK,oBAKzM59E,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GD1CmmB,YC0CzkBzd,SAAA,EACvDC,EAAAA,GAAAA,GAAA,OAAKF,UD3C4V,6BC2ChUuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAEgN,EAAK,gBAC1E40E,IAAqB3hF,EAAAA,GAAAA,GAAA,OAAKF,UD5CujB,oBC4C3hBC,SAAE0hF,QAE5D7hF,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GD9CsnB,YC8C1lB1X,MAAO87E,EAAW7hF,SAAA,EAC3EC,EAAAA,GAAAA,GAAA,OAAKF,UD/C+a,6BC+ClZuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAEgN,EAAK,mBAC7E/M,EAAAA,GAAAA,GAAA,OAAKF,UDhDogB,6BCgDveC,SAAE2hF,YChCtCG,GAAc,CAAC,GAAI,IAAK,KACxBC,GAAY,CAAC,IAAK,IAAK,KA0B7B,IAAenjF,EAAAA,EAAAA,IAxB2BojF,EACxC50E,QACAf,cACAq1E,YACAC,aACAM,wBAEA,MAAMn0E,GAAQ9F,EAAAA,EAAAA,IAAQ,IACb85E,GAAYpuE,IAAI,CAACgK,EAAO+rC,KAAMy4B,EAAAA,GAAAA,IAAKxkE,EAAOqkE,GAAUt4B,GAAIw4B,IAC9D,CAACA,IAEJ,OACEpiF,EAAAA,GAAAA,IAAA,OAAKE,UC/Bc,WD+BSC,SAAA,EAC1BC,EAAAA,GAAAA,GAAA,OAAKF,UChC+B,WDgCPC,SAAEoN,KAC/BnN,EAAAA,GAAAA,GAAA,OAAKF,UCjCwD,WDiC1BC,SAAEqM,KACrCpM,EAAAA,GAAAA,GAACwhF,GAAoB,CACnBC,UAAWA,EACXC,WAAYA,EACZE,WAAY,mBAAmB/zE,EAAM8Y,KAAK,e,4BErClD,MC+BMu7D,GASDA,EACHhiF,OAAMiiF,YAAW/iC,UACjBgjC,UAAS59E,QAAO69E,YAAWt0E,UAASyY,cAEpC,MAAM9d,GAAYL,EAAAA,EAAAA,GAAS,UAAU+5E,EAAQviF,MACvCyiF,GAAkBj6E,EAAAA,EAAAA,GAAS,UAAU+5E,EAAQviF,aAE7C0iF,EAAwB,IAAV/9E,GACbg+E,EAAYC,EAASC,IAAazjF,EAAAA,EAAAA,GAAQsjF,GAE3CI,EAAaziF,EAxBS,GAwBFA,EACpBuJ,EAAqB,EAAbk5E,EACR74E,EAAsB,IAAb64E,EAITC,EAFIp+E,EAAQ69E,GAEW,EAAVnvE,KAAK2vE,IAClBl5D,EAAQ44D,EAAc,EAAI,IAE1B/lE,EAAItJ,KAAK4vE,IAAIF,GAASn5E,EAAqB,IAAbk5E,EAC9B7/D,EAAI5P,KAAK6vE,IAAIH,GAAS94E,EAEtBya,GAAchY,EAAAA,EAAAA,GAAgB,KAClCwB,EAAQo0E,KAGJv9D,GAAcrY,EAAAA,EAAAA,GAAgB,KAClCm2E,IACAl8D,EAAQ27D,KASV,OANA53E,EAAAA,EAAAA,IAAU,KACJg4E,GACFE,KAED,CAACF,EAAaE,KAGf7iF,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,CACGwiF,IACCviF,EAAAA,GAAAA,GAACC,GAAAA,EAAe,CACdH,UDjFkG,oBCkFlGM,OAAQkiF,EACRU,KAAM5jC,EACN6jC,eAAa,EACbziF,QAAM,EACNN,KA3DqB,GA2DUA,EAC/B4F,MAAO,aAAa0W,oBAAoBsG,UAG5C9iB,EAAAA,GAAAA,GAACC,GAAAA,EAAe,CACdH,UD3FoC,WC4FpCM,OAAQsI,EACRs6E,KAAM5jC,GAAWojC,EACjBhiF,QAAM,EACNN,KArEsB,GAqEQA,EAC9B4F,MAAO,QAAQ0W,aAAasG,mBAAmB6G,IAC/C5b,QAASwW,EACTiC,QAAS5B,QA4DjB,IAAejmB,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACQ,CACL6hF,SAAU7hF,EAAO6hF,SAASC,QAAQD,WAHpBv0E,CAtD6Cy0E,EAC/DF,WAAU1pE,eAEV,MAAM8P,GAAejgB,EAAAA,EAAAA,OACd+S,EAAQinE,IAAal3E,EAAAA,EAAAA,IAAS,IAC9BjM,EAAMojF,IAAWn3E,EAAAA,EAAAA,IAAS,GAE3Bo3E,EAAmBL,GAAUn1C,MAAM,EAnFxB,IAqFXxpB,GAAchY,EAAAA,EAAAA,GAAiBi9C,IACnC65B,GAAW75B,KAGP5kC,GAAcrY,EAAAA,EAAAA,GAAiBi9C,IAEd,KADAg6B,EAAAA,GAAAA,GAAcD,EAAiB5hF,OAAQ6nD,EAAIptC,IAGhEvR,WAAW,KACTw4E,EAAW75E,IACFg6E,EAAAA,GAAAA,GAAcD,EAAiB5hF,OAAQ6H,EAAU,KA9F5C,OA0GlB,OAPAe,EAAAA,EAAAA,IAAU,KACR,MAAM/E,EAAY8jB,EAAa9f,QAC1BhE,GAEL89E,EAAQ99E,EAAUonB,QAAQ,iBAAkBhQ,cAC3C,KAGD5c,EAAAA,GAAAA,GAAA,OACEF,UDzIiB,WC0IjBmU,IAAKqV,EAAavpB,SAEjBgL,QAAQ7K,IAASqjF,GAAkB9vE,IAAI,CAAC2uE,EAAS54B,KAE9CxpD,EAAAA,GAAAA,GAACkiF,GAAqB,CACpBhiF,KAAMA,EACNkiF,QAASA,EACTD,UAAW34B,EACXhlD,OAAQglD,EAAIptC,EAASmnE,EAAiB5hF,QAAU4hF,EAAiB5hF,OACjE0gF,UAAWkB,EAAiB5hF,OAC5BoM,QAASwW,EACTiC,QAAS5B,EACTw6B,QAAS5lC,U,gBC1HrB,MAAMiqE,GAAO,CAAC,UAAW,WACnBC,GAAQ,CAAC,UAAW,WAGpBC,GAAe,KAAQ/tE,EAAAA,EACvBguE,GAAqB,IAAOhuE,EAAAA,EAG5BiuE,GAAa,EAAIjuE,EAAAA,EAGjBkuE,GAAkB5wE,KAAK2vE,GAAK,EAC5BkB,GAA8C,EAAI7wE,KAAK2vE,GAArCmB,GAClBC,GAAkBH,GAAkBC,GAAiB,EACrDG,GAAgBJ,GAAkBC,GAAiB,EAyFlD,SAASI,IAAmB,OACjCz6E,EAAM,KACNxJ,EACAkkF,YAAaC,EAAgBV,GAAY,WACzCW,EAAU,cACVC,EAAa,kBACbC,EAAoB,EAAC,aACrBC,GAAe,EAAK,iBACpBC,EAAgB,IAChBC,IAYIJ,EArHe,KAsHjBC,EAAoBtxE,KAAKZ,MAAMkyE,GAtHd,GAsHkDD,IAEnEA,EAxHiB,IA2HnB,MAAMK,EAAeD,EACfE,EAAiBF,EAEjBnnD,EAAM9zB,EAAOG,WAAW,MAC9B,IAAK2zB,EACH,OAGF,MAAMsnD,EAAa5kF,EAAO0kF,EACpBR,EAAcC,EAAgBQ,EAEpCn7E,EAAOD,MAAQq7E,EACfp7E,EAAOI,OAASg7E,EAChB,MAAMC,EAAmBD,EAAa,EAChCE,GAAUF,EAAaV,GAAe,EACtCa,EAAgB,EAAI/xE,KAAK2vE,GAAM0B,EAC/BW,EAAiC,EAAIhyE,KAAK2vE,GAA/BsC,IACXpmC,EAAWvhB,EAAI4nD,qBACnB,EACA,EACAlyE,KAAKmtE,KAAKyE,EAAa5xE,KAAK4vE,IAAI5vE,KAAK2vE,GAAK,IAC1C3vE,KAAKmtE,KAAKyE,EAAa5xE,KAAK6vE,IAAI7vE,KAAK2vE,GAAK,KAGlB,IAAtByB,EAAW3iF,QACbo9C,EAASsmC,aAAa,EAAGf,EAAW,IACpCvlC,EAASsmC,aAAa,EAAGf,EAAW,KAEpCA,EAAW7sE,QAAQ,CAAC6tE,EAAW9gF,KAC7Bu6C,EAASsmC,aAAa7gF,GAAS8/E,EAAW3iF,OAAS,GAAI2jF,KAI3D9nD,EAAI+nD,QAAU,QACd/nD,EAAIgoD,UAAU,EAAG,EAAGV,EAAYA,GAEhC94C,MAAMtwB,KAAK,CAAE/Z,OAAQ4iF,IAAiB9sE,QAAQ,CAAC8xC,EAAGC,KAChD,MAAMi8B,EAASj8B,EAAIg7B,EACnB,IAAIkB,EAAal8B,EAAIy7B,EAAe/xE,KAAK2vE,GAAK,EAAIqC,EAAU,EACxDS,EAAWD,EAAaT,GAAgBV,EAAgB,EAAIW,EAAU,GAK1E,GAHA1nD,EAAIooD,YAAcH,EAASf,EAAmB3lC,EAC9CvhB,EAAIqoD,UAAYzB,GAAeqB,EAAS,GAAM,GAE1ChB,EAAc,CAChB,GAAIiB,GAAczB,IAAmB0B,GAAYzB,GAC/C,OACSwB,EAAazB,IAAmB0B,EAAWzB,IACpD1mD,EAAIsoD,YACJtoD,EAAIuoD,IAAIhB,EAAkBA,EAAkBC,EAAQd,GAAeyB,GACnEnoD,EAAIwoD,SAEJL,EAAW1B,IACFyB,EAAazB,IAAmB0B,EAAW1B,GACpD0B,EAAW1B,GACFyB,EAAaxB,IAAiByB,EAAWzB,KAClDwB,EAAaxB,GAEjB,CAEA1mD,EAAIsoD,YACJtoD,EAAIuoD,IAAIhB,EAAkBA,EAAkBC,EAAQU,EAAYC,GAChEnoD,EAAIwoD,UAER,EAvGernF,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAqB,CAACtN,GAAUuK,aAClD,MAAM+hC,GAAcC,EAAAA,EAAAA,KAAkBvsC,EAAQuK,GACxCq6E,GAAWpiB,EAAAA,EAAAA,KAAYxiE,GAE7B,MAAO,CACLssC,YAAaA,GAAahH,KAC1BiI,SAAUjB,GAAavB,WACvBkU,WAAY3S,GAAa2S,WACzB2lC,aARgBt3E,CA3EpB,UAA2B,KACzBzO,EAAI,UACJJ,EAAS,YACT6tC,EAAW,SACXiB,EAAQ,WACR0R,EAAU,aACVmkC,EAAY,SACZwB,EAAQ,OACRC,IAEA,MAAMjyE,GAAM5K,EAAAA,EAAAA,MAENs7E,GAAMwB,EAAAA,GAAAA,KAENC,EAAUlmF,EAAO2jF,GACjBO,EAAcgC,EAAUxC,GAAqBD,GAC7C0C,EAAcnmF,EAAOkkF,GAAegC,EAAU,IAAOxwE,EAAAA,EAAM,GAE3D23C,GAASxlD,EAAAA,EAAAA,IAAQ,KACb6mC,GAAY,IAAI0T,OAAO,CAACkL,EAAK3tD,KACnC2tD,EAAI84B,OAAS,EACThmC,GAAczgD,GAAMygD,IACtBkN,EAAI+4B,MAAQ,GAGP/4B,GACN,CAAE84B,MAAO,EAAGC,KAAM,IACpB,CAACjmC,EAAY1R,IAEVjJ,GAAgB59B,EAAAA,EAAAA,IAAQ,OACvB4lC,IAAgBiB,GAAUjtC,SAIxBitC,EAAS43C,KAAM3mF,IACpB,MAAM+/B,EAAQ+N,EAAY9tC,GAC1B,IAAK+/B,KAAW,sBAAuBA,GACrC,OAAO,EAET,MAAM6lD,EAASnlC,GAAc1gB,EAAM//B,IAAMygD,EACzC,OAAO1gB,EAAMoe,oBAAsBynC,IAEpC,CAACnlC,EAAY3S,EAAaiB,IAoB7B,IAlBA/yB,EAAAA,EAAAA,IAAgB,KACT5H,EAAIzK,SAIT26E,GAAmB,CACjBz6E,OAAQuK,EAAIzK,QACZtJ,KAAMmmF,EACNjC,cACAG,cAAeh3B,EAAO+4B,MACtBhC,WAAY4B,IAAWvgD,EAAgB+9C,GAAQD,IAC/Ce,kBAAmBj3B,EAAOg5B,KAC1B9B,eACAC,iBAA+B,SAAbuB,EAtEN,UADL,UAwEPtB,SAED,CAACsB,EAAUtgD,EAAe0gD,EAAa94B,EAAOg5B,KAAMh5B,EAAO+4B,MAAO7B,EAAcE,EAAKuB,EAAQhmF,EAAMkkF,IAEjG72B,EAAO+4B,MAIZ,OACEtmF,EAAAA,GAAAA,GAAA,UACEiU,IAAKA,EACLnU,WAAWqW,EAAAA,GAAAA,GAAe,eAAgBrW,GAC1CgG,MAAO,cAAcugF,oBAA8BA,QAGzD,ICrHA,MCuBMI,GAAe,CAAC,UAAW,WAE3BC,GAAuB,CAC3BC,cAAe,yBACfC,gBAAiB,wBACjBC,cAAe,sBACfC,cAAe,0CACfC,aAAc,8BACdC,gBAAiB,uCACjBC,aAAc,sCAGVC,GAA6B,CACjCP,cAAe,oCACfC,gBAAiB,mCACjBC,cAAe,iCACfC,cAAe,sCACfC,aAAc,yCACdC,gBAAiB,mCACjBC,aAAc,uCAGVE,GAAgD,CACpDR,cAAe,iBACfC,gBAAiB,sBACjBC,cAAe,cACfC,cAAe,QACfC,aAAc,oBACdC,gBAAiB,gBACjBC,aAAc,cAGVG,GAAsBvkC,OAAO8K,KAAK+4B,IAElCW,GAAsB,IAAOzxE,EAAAA,EAC7B0xE,GAAcC,GAAAA,EAAaC,MAAQH,GAiEzC,IAAe1oF,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACQ,CACLw0D,aAAazhB,EAAAA,EAAAA,KAAW/yC,EAAQA,EAAO+yB,iBAHzBzlB,CA7De84E,EACjC5xB,kBAEA,MAAM6xB,GAAYr+E,EAAAA,EAAAA,MAEZ0D,GAAOC,EAAAA,EAAAA,KAEP23E,GAAMwB,EAAAA,GAAAA,MAEZtqE,EAAAA,EAAAA,IAAgB,KACT6rE,EAAUl+E,SAIf26E,GAAmB,CACjBz6E,OAAQg+E,EAAUl+E,QAClBtJ,KAAMonF,GACNlD,YAAaiD,GACb9C,cArBkB,EAsBlBD,WAAYmC,GACZjC,kBAtBuB,EAuBvBE,iBAAkB,cAClBC,SAED,CAACA,IAEJ,MAAM,aAAE9gC,EAAY,cAAEJ,GAAkBF,KAElCokC,EAAUL,GAEhB,OACE1nF,EAAAA,GAAAA,IAAA,OAAKE,UD7Fc,WC6FSC,SAAA,EAC1BH,EAAAA,GAAAA,IAAA,OAAKE,UD9FgC,WC8FPC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CAAC8zD,iBAAe,EAAC7zD,KAAM8hC,EAAa31D,KAAK,WAChDF,EAAAA,GAAAA,GAAA,UAAQF,UDhG+C,WCgGrBmU,IAAKyzE,EAAW5hF,MAAO,cAAc6hF,oBAA0BA,YAEnG3nF,EAAAA,GAAAA,GAAA,OAAKF,UDlGuE,WCkG/CC,SAAEgN,EAAK,sBACpCnN,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GDpGqF,YCoGpDstC,GDpG8F,WCoG5D,iBAC9EuF,SAAUnF,EAAa9jD,SAAA,CAEtBqnF,GAAoB3zE,IAAI,CAACs1B,EAASvkC,KAE/BxE,EAAAA,GAAAA,GAACggF,GAAkB,CAEjB7yE,MAAOJ,EAAK25E,GAAqB39C,IACjCj0B,KAAM/H,EAAKm6E,GAA2Bn+C,IACtC91B,KAAMk0E,GAAoBp+C,GAC1Bk3C,YAAU,EACVz7E,MAAOA,EACP4uB,MAAOg0D,GAAoBzlF,OAC3BonC,QAASA,GAPJA,KAWX/oC,EAAAA,GAAAA,GAAA,OAAKF,UDrH+G,WCqHtFC,SAAEgN,EAAK,+CCrH7C,IAAgB,KAAO,WAAW,QAAU,WAAW,KAAO,WAAW,MAAQ,WAAW,MAAQ,Y,8CC+DpG,IAAepO,EAAAA,EAAAA,IAtCkC8oF,EAC/CI,UACAC,qBACAC,SACAC,iBACAxjF,QACAgV,eAEA,MAAM9Q,GAAYL,EAAAA,EAAAA,GAAS,WAAWw/E,KAChCI,GAAehuC,EAAAA,GAAAA,GAAc+tC,EAAe7+E,SAC5C6a,GAAuBm2B,EAAAA,GAAAA,GAA6BzxC,GAE1D,OACE1I,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAO6kD,KAAKtiE,UAC1BH,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GACTqH,GAAO0qE,QACPJ,GAAsBtqE,GAAO2qE,QAC7BJ,GAAUvqE,GAAO4qE,MAEnBvoF,GAAI,iCAAiC2E,IAAQzE,SAAA,EAE7CC,EAAAA,GAAAA,GAAA,OAAK8D,IAAKukF,GAAa9/D,IAAI,GAAGzoB,UAAW0d,GAAOxF,MAAOrU,WAAW,KAClE3D,EAAAA,GAAAA,GAAA,UAAQiU,IAAKg0E,EAAcnoF,UAAW0d,GAAOvb,SAC7CjC,EAAAA,GAAAA,GAACm/C,GAAAA,EAAc,CACbC,QAAS5lC,EACT1Z,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAOvb,MAAO+hB,GACxClgB,IAAK4E,EACLyZ,yBAAuB,EACvBiE,aAAW,EACXnB,OAAK,EACLoB,MAAI,WCxDd,GAAuP,WAAvP,GAA0Q,WAA1Q,GAAge,WAAhe,GAAyf,WCsC5eiiE,GAA4D,CACvEC,cAAe,uBACfC,mBAAoB,2BACpBC,iBAAkB,yBAClBC,eAAgB,sBAChBC,OAAQ,sBACRC,cAAe,4BACfC,cAAe,6BACfC,gBAAiB,8BACjBC,YAAa,wBACbC,yBAA0B,uCAC1BC,kBAAmB,iCACnBC,aAAc,4BACdC,aAAc,6BACd7nD,QAAS,wBACT8nD,WAAY,sBACZC,UAAW,yBACXC,gBAAiB,+BACjBC,QAAS,yBACTC,KAAM,sBAGKC,GAAkE,CAC7ElB,cAAe,kCACfC,mBAAoB,sCACpBC,iBAAkB,oCAClBE,OAAQ,iCACRD,eAAgB,iCAChBE,cAAe,uCACfC,cAAe,wCACfC,gBAAiB,yCACjBC,YAAa,mCACbC,yBAA0B,kDAC1BC,kBAAmB,4CACnBC,aAAc,uCACdC,aAAc,wCACd7nD,QAAS,mCACT8nD,WAAY,iCACZC,UAAW,oCACXC,gBAAiB,0CACjBC,QAAS,6BACTC,KAAM,iCAGFE,GAAsD,CAC1DC,SAAU,8BACVC,mBAAoB,qBACpBC,eAAgB,wBAChBC,UAAW,sBACXC,cAAe,6BACfC,YAAa,gBACbC,cAAe,qBACfC,cAAe,oBACfC,mBAAoB,0BACpBC,oBAAqB,4BACrBC,aAAc,+BAGVC,GAA4D,CAChEX,SAAU,iCACVC,mBAAoB,wBACpBC,eAAgB,2BAChBC,UAAW,yBACXC,cAAe,gCACfC,YAAa,mBACbC,cAAe,wBACfC,cAAe,uBACfC,mBAAoB,6BACpBC,oBAAqB,+BACrBC,aAAc,kCA2PhB,IAAe1rF,EAAAA,EAAAA,IA3O2B4rF,EACxCC,QACApoD,iBACAqoD,YACAC,SACAC,oBACAC,qBACA5/D,SACA6/D,uBAEA,MAAMtzC,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,KACPszC,GAAqBzhF,EAAAA,EAAAA,OACpB0hF,EAAmBC,IAAwB7+E,EAAAA,EAAAA,IAAS8+E,EAAAA,IAAyB7uD,QAAQgG,KACrF8oD,EAA4BC,IAAiCh/E,EAAAA,EAAAA,IAAS,IACtEi/E,EAAaC,EAAgBC,IAAiBrsF,EAAAA,EAAAA,MAE9CssF,EAAiBC,IAAsBr/E,EAAAA,EAAAA,KAAS,IAChDs/E,EAAoBC,IAAyBv/E,EAAAA,EAAAA,KAAS,GAEvDw/E,GAAqBp1D,EAAAA,EAAAA,GAAsB6L,GAE3CwpD,GAAmB7jF,EAAAA,EAAAA,IAAQ,IAC1B4iF,EACEA,EAAkBhtD,OAAQoL,GAAYkiD,EAAAA,IAAyBn7D,SAASiZ,IADhDkiD,EAAAA,IAE9B,CAACN,IAEEkB,GAAyB9jF,EAAAA,EAAAA,IAAQ,KACrC,IAAK6iF,EAAoB,OAEzB,MAAM,OAAErsC,EAAM,OAAEutC,EAAM,SAAEC,GAAanB,EAC/BoB,EAAgB94E,KAAKmI,MAAMkjC,EAASutC,GAE1C,OAAOrB,EACH19E,EAAK,MACLA,EAAK,qBAAsB,CAAEk/E,OAAOC,EAAAA,GAAAA,IAAen/E,EAAMi/E,EAAeD,IAAa,CAAErtC,WAAW,KACrG,CAAC+rC,EAAW19E,EAAM69E,IAEfrmE,GAAchY,EAAAA,EAAAA,GAAgB,KAClCs+E,EAAiBzoD,KAgCnB,SAAS+pD,EAAmBt/E,GAC1B,MAAM,UAAE0tB,EAAS,aAAE5kB,EAAY,aAAEmuC,GAAiBj3C,EAAE6X,cACpD8mE,EAAmBjxD,GAtFE,IAuFrBmxD,EAAsBnxD,GAAaupB,EAAenuC,EAvF7B,GAwFvB,EAEApL,EAAAA,EAAAA,IAAU,KACR,MAAM6hF,EAAkBtB,EAAmBthF,QAC3C,IAAK4iF,GAAoBT,IAAuBvpD,EAAiB,OAEjE,MAAM59B,EAAQonF,EAAiBxvD,QAAQgG,GACvC4oD,EAAqBxmF,GACrB6mF,KACAgB,EAAAA,GAAAA,GAAwBD,EAAiBA,EAAgBxvE,YAAcpY,EAAO,GAC3EwoC,KAAKs+C,IACP,CAACP,EAAmBa,EAAkBxpD,EAAgBupD,IAEzD,MAAMW,GAAoB//E,EAAAA,EAAAA,GAAgBiM,UACxC,MAAM4zE,EAAkBtB,EAAmBthF,QACtC4iF,IAELpB,EAAqBxmF,GAErB6mF,UACMgB,EAAAA,GAAAA,GAAwBD,EAAiBA,EAAgBxvE,YAAcpY,EAAO,KACpF8mF,OAGIiB,EAAiBX,EAAiBb,GAClCyB,EAAuC,kBAAnBD,GAAyD,YAAnBA,EAEhE,OACE3sF,EAAAA,GAAAA,IAAA,OAAKE,UDlOc,WCkOSC,SAAA,EAC1BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACLJ,WAAWqW,EAAAA,GAAAA,GDtOgI,WCsO9Fq2E,GDtO0J,YCuOvM3+E,MAAO2+E,EAAoB,oBAAsB,cACjDz+E,QAASid,EACTzY,UAAWglC,EAAQ,QAAQx3C,UAE3BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,kBAGbvN,EAAAA,GAAAA,GAAA,OAAKF,UD9Okc,cCgPvcE,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GDhP8M,WCgP/K,gBAAiB6yC,SA3EpE,SAAsBn8C,GACpB,MAAMC,EAASD,EAAE6X,eACX,YAAE9H,EAAa6vE,WAAYC,GAAuB5/E,EAElD2/E,EAAav5E,KAAKZ,MAAMo6E,GAGxB94E,EADO64E,EAAc7vE,EACFA,EAEnB+vE,EAAez5E,KAAKmtE,MAAMoM,EAAa,GAAK7vE,GAElDuuE,EAA8BwB,GAE9B,MAAMC,EAAc9/E,EAAOzI,cAA8B,mCAAkCsoF,EAAe,IACpGE,EAAiB//E,EAAOzI,cAA8B,kCAAkCsoF,KAU9F,IARAv0E,EAAAA,EAAAA,IAAgB,KACdtL,EAAOhH,MAAMmrC,YAAY,oBAAqBr9B,EAASk5E,YACvDhgF,EAAOhH,MAAMmrC,YAAY,wBAAyB/9B,KAAKya,IAAI/Z,GAAUk5E,YAEjEF,IAAaG,EAAAA,GAAAA,IAAiBH,EAAa,WAAW,GACtDC,IAAgBE,EAAAA,GAAAA,IAAiBF,EAAgB,WAAW,KAG9DzB,EAAa,OACjB,MAAM7rD,EAAQrsB,KAAKZ,MAAMm6E,EAAa7vE,GACtCouE,EAAqBzrD,EACvB,EAgD4FtrB,IAAK62E,EAAmB/qF,SAE7G6rF,EAAiBn4E,IAAI,CAACs1B,EAASvkC,KAC9B,GAAgB,kBAAZukC,EACF,OACEnpC,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GDrPiP,YCqPpNzd,SAAA,EAC1DC,EAAAA,GAAAA,GAAA,MAAIF,WAAWqW,EAAAA,GAAAA,GDtP+V,WCsPjUo1E,GDtP2X,YCsPjVxrF,SACpFw3C,EAAQ+wC,GAAuBC,kBAElCvoF,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GDzP0U,WCyPrS,iBAAkB6yC,SAAUmjC,EAAmBpsF,SACjGitF,EAAAA,IAAqBv5E,IAAI,CAACkc,EAAO65B,KAChC,MAAMyjC,EAAevC,IAAS/6D,GAAO,GAAGm9D,WAClCI,EAAexC,IAAS/6D,GAAO,GAAGm9D,WACxC,OACE9sF,EAAAA,GAAAA,GAAC+hF,GAAmB,CAClB50E,MAAOoqC,EAAQmyC,GAAc/5D,IAC7BvjB,YAAamrC,EAAQ+yC,GAAoB36D,GAAQu9D,GACjDzL,UAAWwL,EACXvL,WAAYwL,EACZlL,kBAAmBx4B,GAAKwjC,EAAAA,IAAqBrrF,OAAS,YASpE,GAAgB,qBAAZonC,EACF,OACEnpC,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAazd,SAAA,EAC3BC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAazd,UAC3BC,EAAAA,GAAAA,GAACojF,GAA6B,CAAC5pE,SAAUuxE,IAAsBvmF,OAEjExE,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAazd,SACzBw3C,EAAQ+wC,GAAuBG,qBAElCzoF,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAmBzd,UAChCi0B,EAAAA,GAAAA,GAAWujB,EAAQkyC,GAA6BhB,kBAAmB,CAAC,YAM7E,GAAgB,YAAZ1/C,EACF,OACE/oC,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,GD9RsQ,YC8RxOzd,UAC3DC,EAAAA,GAAAA,GAACmtF,GAA4B,MAKnC,MAAM3jC,EAAIghC,EAAM4C,cAAchxD,QAAQ2M,GACtC,IAAW,IAAPygB,EAAU,OACd,MAAM6jC,EAA8C,SAA3B7C,EAAM4C,cAAc5jC,GAC7C,OACE5pD,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAazd,SAAA,EAC3BC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAazd,UAC3BC,EAAAA,GAAAA,GAACynF,GAA0B,CACzBjuE,SAAUuxE,IAAsBvmF,EAChCqjF,QAAS2C,EAAM8C,OAAO9jC,GAAG3pD,GACzBmoF,eAAgBwC,EAAM8C,OAAO9jC,GAAGnpB,UAChC0nD,OAAQwF,EAAAA,IAAsBz9D,SAASiZ,GACvCvkC,MAAOA,EACPsjF,mBAAoBtjF,IAAU0mF,OAGlClrF,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAazd,SACzBstF,EACGtgF,EACAu7E,GAAuBkC,EAAM4C,cAAc5jC,SAC3C3mD,EACA,CAAE67C,WAAW,EAAMiV,kBAAmB,CAAC,QAEvCpc,EAAQ+wC,GAAuBkC,EAAM4C,cAAc5jC,QAEzDxpD,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAmBzd,UAChCi0B,EAAAA,GAAAA,GAAWq5D,EACRtgF,EACA08E,GAA6Be,EAAM4C,cAAc5jC,SACjD3mD,EACA,CAAE67C,WAAW,EAAMiV,kBAAmB,CAAC,QAEvCpc,EAAQkyC,GAA6Be,EAAM4C,cAAc5jC,KAAM,CAAC,iBAS9E5pD,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GD7U0f,YC+UlgBs1E,GAA4C,IAAtBV,ID/UsiB,YCgV7jBhrF,SAAA,EAEFC,EAAAA,GAAAA,GAACygF,GAAU,CACT9+E,OAAQspF,EAAAA,IAAyBtpF,OACjCs/C,OAAQ8pC,EACRrK,cAAe4L,IAEhBvhF,QAAQ8gF,KACP7rF,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,GDzVoB,YC0V/BwsB,SAAU8nD,EACV7nD,qBAAsB6nD,EACtB18E,QAAS08E,EAAYz/D,EAASzG,EAAYxkB,SAEzC8rF,YCpQb,IAAeltF,EAAAA,EAAAA,IArEiC6uF,EAC9CvkD,SAAQC,UAASukD,oBACjBhgF,WAAU3N,YAAW4tF,iBAErB,MAAMn2C,GAAUvqC,EAAAA,EAAAA,MAEV,OACJ8+E,EAAM,OAAEvtC,EAAM,SAAEwtC,GACd9iD,EACEvC,EAAQ,UAAWuC,EAASA,EAAOvC,WAAQ7jC,EAC3C8qF,EAAWz6E,KAAKmI,MAAMkjC,EAASutC,GAC/B8B,EAAoBlnD,EAAQA,EAAQ,OAAI7jC,EAExCgrF,GAAW9lF,EAAAA,EAAAA,IAAQ,IAChB0lF,GAAqBA,EAAoBE,EAC5Cz6E,KAAKmtE,KAAK,IAAMsN,GAAYF,EAAoB,WAChD5qF,EACH,CAAC4qF,EAAmBE,IAEjBG,GAAenuF,EAAAA,EAAAA,IAAakN,IAC5BA,EAAEC,OAAOo8B,SACXz7B,EAASq+E,IAEV,CAACA,EAAQr+E,IAEZ,OACE7N,EAAAA,GAAAA,IAAA,SACEE,WAAWqW,EAAAA,GAAAA,GACTu3E,ECjD+C,WAA7B,WDkDjBxkD,IAAYwkD,GClDsD,WDmDnE5tF,GAEFuW,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAEvCC,EAAAA,GAAAA,GAAA,SACEF,UCxDsF,WDyDtFoB,KAAK,QACLqM,KAAK,sBACLZ,MAAOm/E,EACP5iD,QAASA,EACTz7B,SAAUqgF,KAEZluF,EAAAA,GAAAA,IAAA,OAAKE,UC/DwG,WD+D9EC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UChEyH,WDgEjGC,SAAA,CAC1BgL,QAAQ8iF,KACPjuF,EAAAA,GAAAA,IAAA,QACEE,WAAWqW,EAAAA,GAAAA,GCnE2M,WAA9B,YDoExLhJ,MAAOoqC,EAAQ,gBAAgBx3C,SAAA,CAE9B,IAAI,IAEJ8tF,EAAS,OAIbt2C,EAAQ,SAAUu0C,OAErB9rF,EAAAA,GAAAA,GAAA,OAAKF,UC9E+I,WD8EpHC,SAC5B2tF,GAAcE,EAAqB,IAAGG,EAAAA,GAAAA,IAAuBxvC,EAAQwtC,EAAUx0C,EAAQwjB,WAAWr0B,IAChG6Q,EAAQ,iBAAiBw2C,EAAAA,GAAAA,IAAuBJ,EAAU5B,EAAUx0C,EAAQwjB,UAElF/6D,EAAAA,GAAAA,GAAA,OAAKF,UClFmK,WDkF1IC,UAC3BguF,EAAAA,GAAAA,IAAuBxvC,EAAQwtC,EAAUx0C,EAAQwjB,gBEnF5D,GAAujB,W,szBCoEjjBizB,GAAoB,EAAIp4E,EAAAA,EAExBq4E,GAAiE,CACrE3sD,QAAS4sD,GACT3F,cAAe4F,GACf3F,mBAAoB4F,GACpB3F,iBAAkB4F,GAClB3F,eAAgB4F,GAChB3F,OAAQ4F,GACR3F,cAAe4F,GACf3F,cAAe4F,GACf3F,gBAAiB4F,GACjB3F,YAAa4F,GACb3F,yBAA0B4F,GAC1B3F,kBAAmB4F,GACnB3F,aAAcgF,GACd/E,aAAc2F,GACd1F,WAAY2F,GACZ1F,UAAW2F,GACX1F,gBAAiB2F,GACjB1F,QAAS2F,GACT1F,KAAMiF,IAqaR,IAAe9vF,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAsBtN,IACxC,MAAM,aACJwzC,IACE9lC,EAAAA,EAAAA,KAAe1N,GAEb8tF,EAAWt6C,GAAcu6C,YAAah7C,EAAAA,EAAAA,KAAW/yC,EAAQwzC,EAAau6C,iBAAcvsF,EACpFwsF,EAAsBF,GAAUG,aAAcC,EAAAA,EAAAA,KAAkBluF,EAAQ8tF,EAASG,YAAYE,iBAC/F3sF,EACE4sF,EAAoBJ,GAAsBK,EAAAA,EAAAA,KAAiBruF,EAAQguF,EAAoBM,qBACzF9sF,EAEJ,MAAO,CACLuxB,cAAe/yB,EAAO+yB,cACtBo2D,MAAO31C,GAAc21C,MACrBoF,UAAW/6C,GAAc+6C,UACzBC,OAAQh7C,GAAcg7C,OACtBC,aAAcj7C,GAAci7C,aAC5BC,KAAMl7C,GAAck7C,KACpBZ,WACAE,sBACAI,oBACAO,OAAQn7C,GAAco7C,UAAW77C,EAAAA,EAAAA,KAAW/yC,EAAQwzC,EAAao7C,eAAYptF,EAC7Eu/B,eAAgByS,GAAczS,eAC9BqoD,WAAWlpD,EAAAA,EAAAA,KAA2BlgC,GACtC6uF,eAAeC,EAAAA,GAAAA,GAAmB9uF,EAAQ,YAC1C+uF,cAAcD,EAAAA,GAAAA,GAAmB9uF,EAAQ,iBACzCgvF,WAAWF,EAAAA,GAAAA,GAAmB9uF,EAAQ,sBACtCivF,YAAYH,EAAAA,GAAAA,GAAmB9uF,EAAQ,kBACvCqpF,OAAQrpF,EAAO6yC,UAAUw2C,OACzB6F,YAAalvF,EAAO6yC,UAAUs8C,mBAC9BC,mBAAoBpvF,EAAO6yC,UAAUu8C,mBACrC9F,kBAAmBtpF,EAAO6yC,UAAUy2C,oBA/BpBh8E,CAvYgC+hF,EAClD/kF,SACAyoB,gBACA+6D,WACAE,sBACAI,oBACAjF,QACApoD,iBACAqoD,YACAyF,gBACAI,aACAF,eACAC,YACA3F,SACA6F,cACAE,qBACAb,YACAC,SACAG,SACAF,eACAnF,oBACAoF,WAEA,MAAMlS,GAAYx0E,EAAAA,EAAAA,OACZ,kBACJsnF,EAAiB,YAAEzmB,EAAW,gBAAE0mB,EAAe,iBAAEzrB,EAAgB,aAAE0rB,EAAY,eAAEC,IAC/E9kF,EAAAA,EAAAA,MAEEurC,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,MACNu5C,EAAgBC,IAAmB7kF,EAAAA,EAAAA,KAAS,IAC5CogF,EAAgB0E,IAAqB9kF,EAAAA,EAAAA,IAAwCi2B,IAC7E8uD,EAA4BC,IAAyBhlF,EAAAA,EAAAA,OAE5D5B,EAAAA,EAAAA,IAAU,KACHoB,EAGMy2B,GACT6uD,EAAkB7uD,IAHlB4uD,GAAgB,GAChBC,OAAkBpuF,KAInB,CAAC8I,EAAQy2B,IAEZ,MAAMgvD,GAAoB7kF,EAAAA,EAAAA,GAAiBw8B,IACzCkoD,EAAkBloD,KAGdsoD,GAAqB9kF,EAAAA,EAAAA,GAAgB,KACzC0kF,OAAkBpuF,KASdyuF,GAA4B/kF,EAAAA,EAAAA,GAAiBumD,IAClC+qB,EAAUr0E,UAGrB+mF,EACFrmB,EAAY,CACVhpE,KAAM,OACN2qE,KAAM0kB,IAECE,IACTtrB,EAAiB,CACf5tD,IAAK,GAAGs1D,EAAAA,MAAkB4jB,WAA4B39B,GAAc,YAEtE69B,QAIEpsE,GAAchY,EAAAA,EAAAA,GAAgB,KAC9B2kF,EACFI,EAA0BvuC,OAAOmuC,EAA2BpF,SAE5DwF,MAIEC,GAAiChlF,EAAAA,EAAAA,GAAiBu/E,IACtD,MAAM0F,EAAchH,GAAOh9E,QAAQgoC,KAAMvM,GAAWA,EAAO6iD,SAAWA,GACtEqF,EAAsBK,KAGlBC,GAAellF,EAAAA,EAAAA,GAAgB,KACnC,MAAMinD,EAASqqB,EAAUr0E,QACzB,GAAKgqD,GACD7nD,EAAQ,CACV,MAAM,IACJ0X,EAAG,KAAEvH,EAAI,MAAErS,EAAK,OAAEK,GAChB0pD,EAAOnvD,cAAc,kBAAmB8X,wBAC5Cy0E,EAAgB,CACdvtE,MACAvH,OACArS,QACAK,SACA4nF,WAAW,GAEf,KAGFnnF,EAAAA,EAAAA,IAAU,KACJqlF,GACF6B,KAED,CAAC7B,EAAW6B,KAEfloF,EAAAA,EAAAA,GAAc,EAAEooF,MACVA,IAAkBlH,GAEtBgH,KACC,CAAChH,EAAWgH,IAEf,MAAM7F,GAAmB7jF,EAAAA,EAAAA,IAAQ,IAC1B4iF,EACEA,EAAkBhtD,OAAQoL,GAAYkiD,EAAAA,IAAyBn7D,SAASiZ,IADhDkiD,EAAAA,IAE9B,CAACN,KAEJpgF,EAAAA,EAAAA,IAAU,KACH8kF,IAAuBI,GAC5BoB,EAAa,CACXlB,eAAgBN,EAAoBM,kBAErC,CAACkB,EAAcxB,EAAqBI,KAEvCllF,EAAAA,EAAAA,IAAU,KACR,MAAOqnF,GAAiBpH,GAAOh9E,SAAW,GAC1C2jF,EAAsBS,IACrB,CAACpH,IAEJ,MAAMqH,GAAsBtlF,EAAAA,EAAAA,GAAgB,KACrCkjF,GAELqB,EAAe,CACbnB,eAAgBF,MAIdhC,IAAoB1lF,EAAAA,EAAAA,IAAQ,KAChC,MAAM+pF,EAActH,GAAOh9E,QAAQgoC,KAAMvM,GAA6B,IAAlBA,EAAO6iD,QAC3D,GAAKgG,EAGL,OAAOxsE,OAAOwsE,EAAYvzC,SACzB,CAACisC,IAEEuH,IAAsBhqF,EAAAA,EAAAA,IAAQ,KAClC,IAAKmpF,EACH,OAEF,MAAM,OAAE3yC,EAAM,OAAEutC,EAAM,SAAEC,GAAamF,EAC/BlF,EAAgB94E,KAAKmI,MAAMkjC,EAASutC,GAC1C,OAAOI,EAAAA,GAAAA,IACLn/E,EACAi/E,EACAD,IAED,CAACmF,EAA4BnkF,IAEhC,GAAKy9E,KAAU6E,GAAwBI,GA6IvC,OACEzvF,EAAAA,GAAAA,GAACoN,EAAAA,EAAK,CACJtN,UDxaiB,WCyajB+L,QAAS8kF,EACThlF,OAAQA,EACRkyE,UAAWA,EAAU99E,UAErBC,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CAAC1vB,KAAK,QAAQ2vB,UAAWqvD,EAAiB,EAAI,EAAGzsF,UD7anB,WC6agDC,SACrFwsF,GAgEAvsF,EAAAA,GAAAA,GAACuqF,GAAmB,CAClBnoD,eAAgBmqD,EAChBvhE,OAAQqmE,EACR7G,MAAOA,EACPK,iBAAkByG,EAClB7G,UAAWA,EACXC,OAAQA,EACRC,kBAAmBA,EACnBC,mBAAoBsG,KAvEtBtxF,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GD/a2D,WC+a/B,iBAAkB6yC,SArQtE,SAAsBn8C,GACpB,MAAM,UAAE0tB,GAAc1tB,EAAE6X,cAExBssE,EAAgBz2D,GAAa,IAC/B,EAiQ6Fx6B,SAAA,EACnFC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACLJ,UDnbwb,WCobxb+N,MAAM,cACNE,QAASA,IAAM4iF,IACfp+E,UAAWglC,EAAQ,SAASx3C,UAE5BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,YAjGvB,WACE,GAAIwiF,EAAM,CACR,MAAMiC,GAAcC,EAAAA,GAAAA,IAAmBlC,GACvC,OACE/vF,EAAAA,GAAAA,GAACkyF,GAAAA,EAAe,CACdC,MAAM,UACN/P,QAAS4P,EACTnkF,MAAM,SACNV,MAAOilF,KACPhmF,aAAa4nB,EAAAA,GAAAA,GAAWq+D,KAAwB,CAAC,kBAAmB,UACpEvyF,UDjW41B,YCoWl2B,CAEA,OAAKuvF,GAaHzvF,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAACsyF,GAAAA,EAAW,CACVxyF,UDrX8H,WCsX9HiO,QAAS8jF,EACTrC,WAAYH,EAAoBxvF,GAChCf,OAAK,EACLoB,KAAM8tF,MAERhuF,EAAAA,GAAAA,GAAA,MAAIF,WAAWqW,EAAAA,GAAAA,GD3X2N,WC2XzLs5E,GD3X8mB,YC2XlkB1vF,SAC1FqyF,QAEHpyF,EAAAA,GAAAA,GAAA,OAAKF,UD9X8P,WC8XhOC,UAChCi0B,EAAAA,GAAAA,GAAWq+D,KAAwB,CAAC,kBAAmB,gBAvB1DryF,EAAAA,GAAAA,GAACkyF,GAAAA,EAAe,CACdC,MAAM,eACNtkF,MAAM,SACNV,MAAOilF,KACPhmF,aAAa4nB,EAAAA,GAAAA,GAAWq+D,KAAwB,CAAC,kBAAmB,UACpEvyF,UD7W2zB,YCmYn0B,CAuDWyyF,IACC9H,IAAcoF,IArCtB7vF,EAAAA,GAAAA,GAAA,OAAKF,UDtZyvB,WCsZntBC,SACxCyqF,GAAOh9E,QACLiG,IAAKw1B,IACJjpC,EAAAA,GAAAA,GAACwtF,GAAyB,CACxB1tF,UD1ZsxB,WC4ZtxBmpC,OAAQA,EACRx7B,SAAU8jF,EACV9D,kBAAmBA,GACnBvkD,QAASgoD,GAA4BpF,SAAW7iD,EAAO6iD,QAJlD7iD,EAAOsV,YAiCdv+C,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GD5bkU,WC4bpS46E,GD5byV,YC4blThxF,UACnFC,EAAAA,GAAAA,GAAA,MAAIF,UD7bof,WC6bhdC,SACrCw3C,EAAQ,wBAGb33C,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GDjciQ,WCicrOs0E,GDjckR,YCicpP1qF,SAAA,CACvE6rF,EAAiBn4E,IAAI,CAACs1B,EAASvkC,KAC9B,MAAM6oF,EAA+B,SAAZtkD,EACzB,OACE/oC,EAAAA,GAAAA,GAACggF,GAAkB,CAEjB7yE,MAAOkgF,EACHtgF,EAAKu7E,GAAuBv/C,IAC5BwO,EAAQ+wC,GAAuBv/C,IACnCj0B,KAAkB,kBAAZi0B,EACFwO,EAAQkyC,GAA6B1gD,GACrC,CAACmnD,EAAeE,EAAcC,EAAWC,EAzY1C,IA0YCjD,EACEtgF,EAAK08E,GAA6B1gD,IAClCwO,EAAQkyC,GAA6B1gD,IAC3C91B,KAAMg7E,GAA4BllD,GAClCvkC,MAAOA,EACP4uB,MAAOw4D,EAAiBjqF,OACxBonC,QAASA,EACTh7B,QAASqjF,GAdJroD,MAkBXnpC,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GAAeqH,GDzd6kB,YC0dvmBnH,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAEvCC,EAAAA,GAAAA,GAAA,KAAAD,UACGi0B,EAAAA,GAAAA,GAAWujB,EAAQ,2BAA4B,CAAC,uBAEnDv3C,EAAAA,GAAAA,GAAA,KAAAD,UACGi0B,EAAAA,GAAAA,GAAWujB,EAAQ,4BAA6B,CAAC,yBA3FlE,WACE,GAAKizC,KAAUqF,GAAUV,GAAUtvF,KAAOu0B,GAI1C,OACEp0B,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAmBnH,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,UACvE0vC,EAAAA,GAAAA,IAAuB,CACtB36B,KAAM01E,EAAMgI,WACZC,SAAUjI,EAAMkI,kBAIxB,CAiFaC,OAEDlI,GAAayG,IACblxF,EAAAA,GAAAA,GAAA,OAAKF,UDtewnB,WCse/lBC,UAC5BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC9N,UDve2C,WCuejB6iC,SAAO,EAACC,qBAAmB,EAAC70B,QAASwW,EAAYxkB,SAChFw3C,EAAQ,qBAAsBw6C,eA7M/C,SAASK,KACP,GAAIrC,EACF,OAAOhjF,EAAK,qBAGd,GAAI8iF,EACF,OAAO77D,EAAAA,GAAAA,GACLm7D,GAAUtvF,KAAOu0B,EACbmjB,EAAQ,sDAAuD,EAAC1N,EAAAA,EAAAA,IAAgBmmD,GAASF,IACzFv4C,EAAQ,8CAA+C,EAAC1N,EAAAA,EAAAA,IAAgBslD,GAAWW,IACvF,CAAC,kBAAmB,UAIxB,GAAIL,GAAqBN,EAAU,CACjC,MAAMyD,EAAWr7C,EAAQ,kCAAkC4jB,QAAQ,UAAUtxB,EAAAA,EAAAA,IAAgBslD,KACtF0D,EAAOC,GAAUF,EAAS7T,MAAM,UAEjCgU,EAAQtD,EAAkBuD,oBAC9BhzF,EAAAA,GAAAA,GAACsyF,GAAAA,EAAW,CAACxyF,UD9S8sB,WC8SxqB0vF,WAAYC,EAAkBuD,0BAC/EnwF,EACEowF,GACJrzF,EAAAA,GAAAA,IAAA,QAAME,UDjTqrB,WCiTnpBiO,QAAS8jF,EAAoB9xF,SAAA,CAClEgzF,GACA/+D,EAAAA,GAAAA,GAAWy7D,EAAkBtiF,UAGlC,MAAO,EAAC6mB,EAAAA,GAAAA,GAAW6+D,GAAQI,GAAMj/D,EAAAA,GAAAA,GAAW8+D,GAC9C,CAEA,OAAO9+D,EAAAA,GAAAA,GACLm7D,EACI53C,EAAQ,kCAAkC1N,EAAAA,EAAAA,IAAgBslD,IAC1D53C,EAAQkzC,EAAY,iCAAmC,mBAC3D,CAAC,kBAAmB,SAExB,CAEA,SAAS4H,KACP,OAAItC,GAAsB,mBAAdA,EAAK7uF,MAA6B6uF,EAAKmD,aAC1CnmF,EAAK,kCAAmC,CAAEqmB,MAAO28D,EAAKmD,cAAgB,CAC3EjzB,YAAa8vB,EAAKmD,eAIlBrD,EACKV,GAAUtvF,KAAOu0B,EACpBmjB,EAAQ,0DAA0D1N,EAAAA,EAAAA,IAAgBmmD,IAClFz4C,EAAQ,kDAILA,EADLk4C,EACa,0CAGVN,EACK,oCACA1E,EAAY,oCAAsC,0BAChE,K,4BC9UF,MAOA,GAP+C0I,IAC7C,MAAM,OAAExnF,GAAWwnF,EACbC,GAAqBC,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,sBAAuB5nF,GAEjF,OAAOynF,GAAqBpzF,EAAAA,GAAAA,GAACozF,EAAkB,IAAKD,SAAYtwF,G,mDCiBlE,MAkHA,IAAelE,EAAAA,EAAAA,IAlHoB60F,EACjC7nF,SACA8nF,iBACAC,iBACAC,qBACAC,yBACA/nF,cAEA,MAAM,iBAAE81B,IAAqB31B,EAAAA,EAAAA,MACvBe,GAAOC,EAAAA,EAAAA,MAEN6mF,EAAkBC,IAAuB3nF,EAAAA,EAAAA,SAA6BtJ,IACtEghC,EAAaC,IAAkB33B,EAAAA,EAAAA,IAAiB,KAChD4nF,EAAoBC,EAAkBC,IAAqBh1F,EAAAA,EAAAA,MAC3DykC,EAAawwD,IAAkB/nF,EAAAA,EAAAA,IAAmBwnF,IAEzDppF,EAAAA,EAAAA,IAAU,KACR2pF,EAAeP,IACd,CAACA,IAEJ,MAAMQ,GAAapsF,EAAAA,EAAAA,IAAQ,KACzB,MAAM1G,GAAS6qC,EAAAA,EAAAA,MACT+gB,EAAY5rD,EAAO6rD,MAAMvmB,MACzB,OAAEsa,EAAM,SAAEiP,GAAa7uD,EAAO6rD,MAAM4C,QACpC3rB,GAAO8c,GAAU,IAAImzC,OAAOlkC,GAAY,IAE9C,OAAOjsB,EAAAA,GAAAA,IAAOE,GAAK1wB,IAAK5T,GAAOotD,EAAUptD,IACtC89B,OAAQzuB,GACPA,KACEukB,EAAAA,EAAAA,IAAcvkB,KAASmlF,EAAAA,EAAAA,IAAiBnlF,KACrCA,EAAKrP,KAAO4zF,GAChBhgF,IAAKvE,GAASA,EAAKrP,KACvB,CAAC4zF,IAEEa,GAAsBvsF,EAAAA,EAAAA,IAAQ,KAClC,MAAMwsF,EAAkBJ,GAAajwD,EAAAA,GAAAA,IAAmB,CAAEC,IAAKgwD,EAAY/vD,MAAOP,EAAa3iC,KAAM,SAAY,GAEjH,OAAO+vD,EAAAA,GAAAA,GAAYsjC,GACjB,EACA7wD,IACD,CAACywD,EAAYtwD,EAAaH,IAEvB8wD,GAAiCjoF,EAAAA,EAAAA,GAAiBkoF,IACtD,MAAMxnC,GAAY/gB,EAAAA,EAAAA,MAAYghB,MAAMvmB,KAE9B+tD,EADgBD,EAAe92D,OAAQ99B,IAAQ6jC,EAAY5T,SAASjwB,IAC/B21C,KAAM31C,IAC/C,MAAMqP,EAAO+9C,EAAUptD,GACvB,OAAOqP,KAASylF,EAAAA,EAAAA,IAAazlF,KAG3Bw0B,GAAa/hC,QAAU+xF,EACzB/xD,EAAiB,CACf/gC,QAASmM,EAAK,0CAA2C2mF,KAKzDgB,GACFZ,EAAoBY,GACpBV,KAEAE,EAAeO,KAIbG,GAAqCroF,EAAAA,EAAAA,GAAgB,KACrDsnF,GACFK,GAAejwD,EAAAA,GAAAA,IAAO,IAAIP,EAAamwD,KAEzCI,MAGIY,GAAqBtoF,EAAAA,EAAAA,GAAgB,KACzCqnF,EAAuBlwD,GACvB73B,MAGF,OACEjM,EAAAA,GAAAA,IAACk1F,GAAAA,EAAW,CACVnpF,OAAQA,EACRE,QAASA,EACTsB,MAAOJ,EAAK,kCACZinE,gBAAc,EACd+gB,qBAAmB,EACnBC,iBAAe,EACfC,kBAAmBloF,EAAK,QACxBuB,UAAWumF,EACXxnF,QAASwnF,EAAmB90F,SAAA,EAE5BC,EAAAA,GAAAA,GAACqkC,GAAAA,EAAU,CACTC,QAASgwD,EACT5wD,YAAaA,EACbe,YAAaZ,EACba,kBAAmB33B,EAAK,UACxBg4B,oBAAqByvD,EACrBxvD,eAAgBlB,EAChBc,cAAY,EACZC,oBAAkB,EAClBK,YAAU,EACVD,eAAa,EACbE,cAAc,cAEhBnlC,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZl2B,MAAOJ,EAAK,kCACZ+H,KAAM/H,EAAK,yCACXu2B,aAAcv2B,EAAK,OACnBpB,OAAQooF,EACRloF,QAASooF,EACT1wD,eAAgBqxD,SCjDxB,IAAej2F,EAAAA,EAAAA,IA3D0Bu2F,EACvCjsD,SAAQC,UACR37B,OAAMuH,OAAMrR,MACZ0xF,SAAQ1nF,WAAU2nF,gBAAet1F,YACjCu1F,YAAWC,wBAEX,MAAMvoF,GAAOC,EAAAA,EAAAA,KAEb,IAAIuoF,EAAkCxoF,EAAK+H,GACvCqgF,GAAUG,GAAmB3zF,SAC/B4zF,EAAcD,EAAkB3zF,OAAS,EAAI2zF,EAAkB3zF,OAAOmrF,WAAauI,GAGrF,MAAMvH,GAAevhF,EAAAA,EAAAA,GAAiBM,IAChCA,EAAEC,OAAOo8B,SACXz7B,EAASw7B,KAIP1kB,GAAchY,EAAAA,EAAAA,GAAgB,KAClC6oF,QAGF,OACEx1F,EAAAA,GAAAA,IAAA,SACEE,WAAWqW,EAAAA,GAAAA,GCrDS,WDqDsBrW,GAC1CuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAC1B6mC,KAAK,SACLD,SAAU,EAAE1pC,SAAA,EAEZC,EAAAA,GAAAA,GAAA,SACEF,UC3DqC,WD4DrCoB,KAAK,QACLqM,KAAK,kBACLZ,MAAOs8B,EACPC,QAASA,EACTz7B,SAAUqgF,EACV//E,QAAUlB,GAAMA,EAAEuJ,qBAEpBxW,EAAAA,GAAAA,IAAA,OAAKE,UCnEuD,WDmE7BC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,OAAKF,UCpE+J,WDoElIgE,IAAKL,EAAK8kB,IAAI,GAAG5kB,WAAW,KAC9D/D,EAAAA,GAAAA,IAAA,OAAKE,UCrEmG,WDqExEC,SAAA,EAC9BC,EAAAA,GAAAA,GAAA,MAAIF,UCtEqH,WDsE7FC,SACzBgN,EAAKQ,KAEP4nF,GACCv1F,EAAAA,GAAAA,IAAA,OAAKE,UC1EoI,WD0E5GiO,QAASwW,EAAYxkB,SAAA,EAChDC,EAAAA,GAAAA,GAAA,QAAAD,SAAOw1F,KACPv1F,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAGbvN,EAAAA,GAAAA,GAAA,QAAMF,UC/EmL,WD+ErJC,SAAEw1F,eEqDlD,IAAe52F,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAqB,CAACtN,GAAUoyF,qBAClD,MAAM3iC,EAAe2iC,GAAiB1iC,EAAAA,EAAAA,KAAmB1vD,EAAQoyF,QAAkB5wF,EACnF,OAAKiuD,EAOE,CACL0kC,QAAS1kC,EAAa0kC,QACtBC,iBAAkB3kC,EAAa2kC,kBARxB,CACLD,aAAS3yF,EACT4yF,sBAAkB5yF,IALJ8L,CAhGY+mF,EAC9B/pF,SACA+nF,iBACA8B,UACAC,mBACA9B,qBACAC,yBACA/nF,cAEA,MAAM,iBAAE81B,IAAqB31B,EAAAA,EAAAA,MACvBe,GAAOC,EAAAA,EAAAA,MAEN62B,EAAaC,IAAkB33B,EAAAA,EAAAA,IAAiB,KAChDu3B,EAAawwD,IAAkB/nF,EAAAA,EAAAA,IAAmBwnF,IAEzDppF,EAAAA,EAAAA,IAAU,KACR2pF,EAAeP,IACd,CAACA,IAEJ,MAAMgC,GAAY5tF,EAAAA,EAAAA,IAAQ,KACxB,MAAM1G,GAAS6qC,EAAAA,EAAAA,OACT,KAAEvF,EAAI,aAAEivD,GAAiBv0F,EAAOqlC,MACtC,IAAK8uD,GAAS7zF,OACZ,MAAO,GAGT,MAAMk0F,EAAcJ,GAAoB,IAAIrnD,IAAIyU,OAAO8K,KAAK8nC,IAEtDzvD,GAAU8vD,EAAAA,EAAAA,IACdN,EAAQ/hF,IAAI,EAAGoqB,YAAaA,GAC5B8I,EACAivD,GAGF,OAAOC,EAAc7vD,EAAQrI,OAAQE,IAAYg4D,EAAY3nD,IAAIrQ,IAAWmI,GAC3E,CAACyvD,EAAkBD,IAEhBO,GAAqBhuF,EAAAA,EAAAA,IAAQ,KACjC,MAAMq9B,GAAY8G,EAAAA,EAAAA,MAAYxF,MAAMC,KAC9BqvD,EAAkBL,GACpBzxD,EAAAA,GAAAA,IAAmB,CAAEC,IAAKwxD,EAAWvxD,MAAOP,EAAa3iC,KAAM,SAAY,GAE/E,OAAO+vD,EAAAA,GAAAA,IAAYhtB,EAAAA,GAAAA,IAAO+xD,GAAiBr4D,OAAQE,IACjD,MAAMsW,EAAO/O,EAAUvH,GACvB,OAAKsW,KAIG8hD,EAAAA,EAAAA,IAAU9hD,OAEnB,CAACwhD,EAAW9xD,IAETqyD,GAAgC3pF,EAAAA,EAAAA,GAAiBkoF,IACjDA,EAAe9yF,OAAS+xF,EAC1B/xD,EAAiB,CACf/gC,QAASmM,EAAK,iCAAkC2mF,KAIpDQ,EAAeO,KAGXI,GAAqBtoF,EAAAA,EAAAA,GAAgB,KACzCqnF,EAAuBlwD,GACvB73B,MAGF,OACE7L,EAAAA,GAAAA,GAAC80F,GAAAA,EAAW,CACVnpF,OAAQA,EACRE,QAASA,EACTsB,MAAOJ,EAAK,8BACZinE,gBAAc,EACd+gB,qBAAmB,EACnBC,iBAAe,EACfC,kBAAmBloF,EAAK,QACxBuB,UAAWumF,EACXxnF,QAASwnF,EAAmB90F,UAE5BC,EAAAA,GAAAA,GAACqkC,GAAAA,EAAU,CACTC,QAASyxD,EACTryD,YAAaA,EACbe,YAAaZ,EACba,kBAAmB33B,EAAK,UACxBg4B,oBAAqBmxD,EACrBlxD,eAAgBlB,EAChBc,cAAY,EACZC,oBAAkB,EAClBK,YAAU,EACVD,eAAa,EACbE,cAAc,kBC9HtB,GAA0a,WAA1a,GAAse,WAAte,GAAigB,WAAjgB,GAA2hB,WAA3hB,GAA+rB,WAA/rB,GAA0tB,WAA1tB,GAA0vB,WAA1vB,GAA+zB,WAA/zB,GAA+1B,WAA/1B,GAA+3B,WAA/3B,GAAu8B,WAAv8B,GAAo+B,WAAp+B,GAA+kC,W,wGCsGzkCgxD,GAAqD,CACzD,EAAGC,GACH,EAAGC,GACH,GAAIC,IA+xBN,IAAe33F,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAsBtN,IACxC,MAAM,cACJk1F,IACExnF,EAAAA,EAAAA,KAAe1N,GACbmL,EAAS+pF,GAAe/pF,OACxB0C,EAAO1C,GAAS6nC,EAAAA,EAAAA,KAAWhzC,EAAQmL,QAAU3J,EAC7C2wB,EAAYtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,GAExC,MAAO,CACL1C,SACAgqF,MAAOD,GAAeC,MACtBC,mBAAoBF,GAAejB,kBACnCoB,oBAAqBH,GAAeI,mBACpCC,6BAA8Bv1F,EAAO6yC,UAAU2iD,yBAC/CC,mBAAoBz1F,EAAO6yC,UAAU4iD,mBACrCC,mBAAoB11F,EAAO6yC,UAAU8iD,oBACrCC,sBAAuB51F,EAAO6yC,UAAUgjD,qBACxC76B,YAAah7D,EAAOg7D,YAAY86B,QAChCC,gBAAiBb,GAAea,gBAChC5jE,YACA6jE,iBAAkBd,GAAee,cApBjB3oF,CA5xB6B4oF,EAC/C/qF,SACAgqF,QACA7qF,SACA6nB,YACAijE,qBACAC,sBACAE,+BAA+BY,EAAAA,IAC/Bn7B,cACA+6B,kBACAH,wBAAwBQ,EAAAA,IACxBV,qBAAqBW,EAAAA,IACrBZ,qBACAO,uBAEA,MAAMxZ,GAAYx0E,EAAAA,EAAAA,OACZ,mBACJsuF,EAAkB,YAAEztB,EAAW,iBAAEtoC,EAAgB,sBACjDg2D,EAAqB,2BAAEC,IACrB7rF,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MACN8qF,EAAkBC,EAAcC,IAAiB/4F,EAAAA,EAAAA,MACjDg5F,EAA0BC,EAAwBC,IAA2Bl5F,EAAAA,EAAAA,MAC7E80F,EAAoBC,EAAkBC,IAAqBh1F,EAAAA,EAAAA,MAC3Dm5F,EAAuBC,EAAqBC,IAAwBr5F,EAAAA,EAAAA,MACpEs5F,EAA0BC,EAAwBC,IAA2Bx5F,EAAAA,EAAAA,KAE9Ey5F,EAA6B,CAAC,CAClCnrF,KAAM,gBACNuH,KAAM,0BACNnI,MAAO,mBACPlJ,IAAK4yF,GACLhwD,QAAS,wBACT8uD,QAAQ,EACRC,cAAeA,KACbiD,OAIAvB,GACF4B,EAAa1lF,KAAK,CAChBzF,KAAM,gBACNuH,KAAM,0BACNnI,MAAO,iBACPlJ,IAAKk1F,GACLtyD,QAAS,sBACT8uD,QAAQ,IAIZ,MAAOyD,EAAkBC,IAAuB1sF,EAAAA,EAAAA,IAAiB+f,KAAKC,MA7DrC,SA8D1B4kE,EAAgBC,IAAmB7kF,EAAAA,EAAAA,KAAS,IAC5C2sF,EAAyBC,IAA8B5sF,EAAAA,EAAAA,IA7DpC,IA8DnB6sF,EAAwBC,KAAqB9sF,EAAAA,EAAAA,IAA0BusF,EAAa,GAAG/rF,QACvFusF,GAAoBC,KAAyBhtF,EAAAA,EAAAA,OAC7CitF,GAA0BC,KAA+BltF,EAAAA,EAAAA,IAA0B,QACnFmtF,GAAqBC,KAA0BptF,EAAAA,EAAAA,OAC/CqtF,GAAiBC,KAAsBttF,EAAAA,EAAAA,IAAmB,KAC1DwqF,GAAoB+C,KAAyBvtF,EAAAA,EAAAA,IAAmB,KAChEwtF,GAAoBC,KAAyBztF,EAAAA,EAAAA,IAA+B,KAC5E0tF,GAAmBC,KAAwB3tF,EAAAA,EAAAA,KAAkB,IAC7D4tF,GAAkBC,KAAuB7tF,EAAAA,EAAAA,KAAkB,IAC3D8tF,GAAkBC,KAAuB/tF,EAAAA,EAAAA,SAA6BtJ,IACtEs3F,GAAqBC,KAA0BjuF,EAAAA,EAAAA,SAAyCtJ,IAE7Fw3F,GAA0BC,KACxBnuF,EAAAA,EAAAA,SAA8CtJ,GAE5C03F,GAA+C,qBAA3BvB,EACpBwB,GAA6C,mBAA3BxB,EAClByB,GAAoBF,KACpBf,GAAgB73F,OAASm3F,EAA0BU,GAAgB73F,OACnE+4F,GAAgBD,GAAoB7D,EACpC+D,GAAqBzB,IAAoB0B,aAEzCC,IAAqB9yF,EAAAA,EAAAA,IAAQ,IAAM,CACvC,CACE4E,MAAO,MACPO,MAAOH,EAAKymB,EAAY,yBAA2B,sBACnDsnE,SAAUnB,IAAsBA,GAAmBh4F,OAAS,EACxDoL,EAAK,kCAAmC4sF,GAAmBh4F,QAC3DoL,EAAK,6BAEX,CACEJ,MAAO,MACPO,MAAOH,EAAKymB,EAAY,yBAA2B,sBACnDsnE,SAAUnB,IAAsBA,GAAmBh4F,OAAS,EACxDoL,EAAK,kCAAmC4sF,GAAmBh4F,QAC3DoL,EAAK,8BAEV,CAACymB,EAAWzmB,EAAM4sF,KAEfoB,GAAgBhuF,EAAK,SAAUusF,IAC/B0B,GAAmD,kBAA1B5D,GAAiBl2F,KAC1C+5F,GAAqD,aAA1B7D,GAAiBl2F,KAE5Cg6F,IAAenzF,EAAAA,EAAAA,IAAQ,IACpByuF,GAAOhhD,KAAMu6C,GAASA,EAAKjE,SAAWwN,IAAuBvJ,EAAKrpD,QAAU+zD,IAClF,CAACjE,EAAO8C,GAAqBmB,KAE1BU,IAAoBpzF,EAAAA,EAAAA,IAAQ,IACzBsvF,GAAkB7hD,KAAMu6C,GACtBiL,IAA0BjL,EAAKqL,QAAWf,IAA0Be,OAE5E,CAACf,GAA0BhD,EAAkB2D,KAE1CK,IAAgBtzF,EAAAA,EAAAA,IAAQ,IACrByuF,GAAO74D,OAAQoyD,GAASA,EAAKrpD,QAAU+zD,IAAqB1K,EAAKhE,WAAauP,EAAAA,KACpF,CAAC9E,EAAOiE,KAELhN,IAAoB1lF,EAAAA,EAAAA,IAAQ,KAChC,MAAMwzF,EAAYF,IAAe/4C,OAAO,CAACkL,EAAKuiC,IACrCA,EAAKxxC,OAASiP,EAAIjP,OAASwxC,EAAOviC,EACxC6tC,GAAc,IAEjB,OAAOE,GAAaroF,KAAKmI,MAAMkgF,EAAUh9C,OAASg9C,EAAUzP,SAC3D,CAACuP,KAEEG,IAAmBzzF,EAAAA,EAAAA,IAAQ,KACxBk8B,EAAAA,GAAAA,IAAQuyD,GAAO74D,OAAQoyD,GAASA,EAAKhE,WAAauP,EAAAA,MACrD7nF,IAAKgoF,GAAWA,EAAO/0D,QAAU,IAAK+gB,KAAK,CAACC,EAAGC,IAAMD,EAAIC,GAC5D,CAAC6uC,IAEEkF,IAAqB3zF,EAAAA,EAAAA,IAAQ,KAC1Bk8B,EAAAA,GAAAA,IAAQi1D,IAAoByC,SAASloF,IAAKgoF,GAAWA,EAAO/0D,QAAU,IAAK+gB,KAAK,CAACC,EAAGC,IAAMD,EAAIC,GACpG,CAACuxC,MAEJ3uF,EAAAA,EAAAA,IAAU,KACJoB,GAAU6qF,GAAO70F,SAAWq5F,IAC9BzB,GAAuB/C,IAAQ,GAAG1K,SAEnC,CAACngF,EAAQ6qF,EAAOwE,MAEnBzwF,EAAAA,EAAAA,IAAU,KACJoB,GAAU0rF,GAAkB11F,SAAWs5F,IACzC9B,GAAsB9B,IAAmB,KAE1C,CAAC1rF,EAAQ0rF,EAAkB4D,MAE9B1wF,EAAAA,EAAAA,IAAU,KACJoB,GAAUqvF,KACZjC,EAA2B3B,EAAgBwE,UAC3CtB,GAA4BlD,KAE7B,CAACzrF,EAAQqvF,GAAwB5D,KAEpC7sF,EAAAA,EAAAA,IAAU,KACJoB,GAAUsvF,KACZlC,EAA2B3B,EAAgBwE,UAC3CxB,GAAuBhD,GACvBmC,GAAuBnC,EAAgBtL,UAExC,CAACngF,EAAQsvF,GAA0B7D,KAEtC7sF,EAAAA,EAAAA,IAAU,KACJksF,GACFgD,GAAmBhD,IAEpB,CAACA,KAEJlsF,EAAAA,EAAAA,IAAU,KACJmsF,GACFgD,GAAsBhD,IAEvB,CAACA,IAEJ,MAAMmF,IAAqBtvF,EAAAA,EAAAA,GAAgB,KACzCq1B,MAGI5G,IAAczuB,EAAAA,EAAAA,GAAgB,KAClC+tF,QAA4Bz3F,GAC5Bu3F,QAAuBv3F,GACvBs2F,QAAsBt2F,GACtB02F,QAAuB12F,GACvBk2F,EAxLwB,GAyLxBpB,MAGIpzE,IAAchY,EAAAA,EAAAA,GAAgB,KAG9B29D,EAFAqwB,GACEf,IAAiB73F,OACP,CACVT,KAAM,WACN46F,eAAgBtvF,EAChBw5B,QAASwzD,GACTzN,SAAUmP,GAAcnP,SACxBxtC,OAAQ28C,GAAc38C,OACtBtV,OAAQiyD,IAGE,CACVh6F,KAAM,WACNsL,OAAQA,EACRuvF,qBAAsBpF,GACtBqF,wBAAsD,QAA7B5C,GACzB6C,UAAWtC,GACXuC,kBAAmBrC,GACnBI,oBACAkC,UAAWvD,EAAmB,IAC9B7M,SAAUmP,GAAcnP,SACxBxtC,OAAQ28C,GAAc38C,OACtBtV,OAAQiyD,IAIA,CACVh6F,KAAM,gBACNsL,OAAQA,EACRuvF,qBAAsBpF,GACtBqF,wBAAsD,QAA7B5C,GACzB6C,UAAWtC,GACXuC,kBAAmBrC,GACnBI,oBACAkC,UAAWvD,EAAmB,IAC9B7M,SAAUmN,GAAoBnN,SAC9BxtC,OAAQ26C,GAAoB36C,OAC5B68C,MAAOlC,GAAoBkC,MAC3B10D,MAAOoyD,IAIX99D,OAGIohE,IAA+B7vF,EAAAA,EAAAA,GAAgB,KAC/CyuF,GACFnD,EAA2B,CACzBrrF,OAAQA,EACR6vF,WAAYhC,GAA0Bx6F,GACtCy8F,eAAgB,CACdP,qBAAsBpF,GACtBsF,UAAWtC,GACXM,oBACAiC,kBAAmBrC,GACnBsC,UAAWvD,EAAmB,IAC9BwC,MAAOf,GAA0Be,MACjCrP,SAAUoP,GAAmBpP,SAC7BxtC,OAAQ48C,GAAmB58C,OAC3B7X,MAAO2zD,GAA0BuB,YAIrChE,EAAsB,CACpBprF,OAAQA,EACR6vF,WAAYlC,GAAqBt6F,GACjCy8F,eAAgB,CACdP,qBAAsBpF,GACtBsF,UAAWtC,GACXM,oBACAiC,kBAAmBrC,GACnBsC,UAAWvD,EAAmB,IAC9B7M,SAAUmP,GAAcnP,SACxBxtC,OAAQ28C,GAAc38C,UAK5B01C,IACAj5D,OAGIuhE,IAA8BhwF,EAAAA,EAAAA,GAAiBiwF,IACnDzD,EAA2ByD,KAGvBC,IAA0BlwF,EAAAA,EAAAA,GAAiBiwF,IAC/CzD,EAA2ByD,KAGvBE,IAA+BnwF,EAAAA,EAAAA,GAAiBM,IACpDqtF,GAAoBrtF,EAAEC,OAAOH,SAGzB0oF,IAAYttF,EAAAA,EAAAA,IAAQ,KACxB,MAAMq9B,GAAY8G,EAAAA,EAAAA,MAAYxF,MAAMC,KACpC,OAAO6yD,IAAiB/lF,IAAKoqB,IAAWgM,EAAAA,EAAAA,IAAgBzE,EAAUvH,KAAUlX,KAAK,OAChF,CAAC6yE,KAQEmD,IAA+BpwF,EAAAA,EAAAA,GAAiBI,IACpD0sF,GAA4B1sF,KAGxBiwF,IAAyBrwF,EAAAA,EAAAA,GAAiBI,IAC9CssF,GAAkBtsF,GAClB8sF,GAAmB,IACnBV,EA7SwB,KAgTpB8D,IAAyBtwF,EAAAA,EAAAA,GAAiB0mB,IAC9C4lE,EAAoB5lE,EAAK4mC,WACzBm+B,MAGI8E,IAA+BvwF,EAAAA,EAAAA,GAAiBI,IACpDitF,GAAsBjtF,KAGlBowF,IAA8BxwF,EAAAA,EAAAA,GAAiBkoF,IACnDgF,GAAmBhF,GACdA,EAAe9yF,QAClBs3F,GAAkB,sBAIhBzE,IAAiCjoF,EAAAA,EAAAA,GAAiBkoF,IACtDiF,GAAsBjF,KAGlBuI,IAAgCzwF,EAAAA,EAAAA,GAAiBM,IACrDitF,GAAqBjtF,EAAEC,OAAOo8B,WAG1B+zD,IAA+B1wF,EAAAA,EAAAA,GAAiBM,IACpDmtF,GAAoBntF,EAAEC,OAAOo8B,WAGzBg0D,IAAuB3wF,EAAAA,EAAAA,GAAgB,KAC3C2rF,MAGIiF,IAAkB5wF,EAAAA,EAAAA,GAAiB08B,IACvCkwD,GAAsBlwD,KA8FxB,SAASm0D,KACP,OACEx9F,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAezd,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAqBzd,SACjCgN,EAAK,6CAGR/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPE,UAAQ,EACR3iC,UAAU,wCAAuCC,UAEjDC,EAAAA,GAAAA,GAACkmD,GAAAA,EAAa,CACZ15C,OAAQA,EACR24C,OAAQp4C,EAAKymB,EAAY,kCACrB,gCAAiCknE,IAAiBC,GAAoB,SAI7EhE,IAAoBljF,IAAKiiC,IAEtB11C,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACP5iB,QAAM,EAEN7f,UAAU,wCAEViO,QAASA,IA3CvB,SAAmClO,GACjC,MAAMw9F,EAAqB1G,GAAmBh5D,OAAQ+X,GAAcA,IAAc71C,GAClF65F,GAAsB2D,EACxB,CAwC6BC,CAA0B5nD,GACzC8P,cAAexlD,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,QAAQzN,UD9iBumC,aC8iBlkCC,UAEvEC,EAAAA,GAAAA,GAACkmD,GAAAA,EAAa,CACZ15C,OAAQkpC,EAAUo3C,cAPfp3C,IAaVihD,GAAmBh1F,OApdE,IAqdpB3B,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,MACL0M,QAAM,EACN5R,QAASyqF,EACT14F,UD5jBwlC,WC6jBxlCy9F,cD7jBgnC,WC6jB/kCx9F,SAEhCgN,EAAK,mCAKZnN,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAezd,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAqBzd,SACjCgN,EAAK,4BApHZ/M,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAezd,UAC7BC,EAAAA,GAAAA,GAACsN,GAAAA,EAAU,CACTC,KAAK,cACLC,QAASqtF,GACTntF,SAAU0rF,GACV3rF,SAAUkvF,GACVvH,cAAe8H,GACfM,kBDzd6iC,WC0d7iCrI,QAAM,UAkHRn1F,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAoBzd,UACjCi0B,EAAAA,GAAAA,GAAWjnB,EAAKymB,EAAY,iCAAmC,sCAGlE5zB,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAezd,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAuBzd,SAAA,EACrCC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAazd,SACzBgN,EAAK,uCAGR/M,EAAAA,GAAAA,GAAC8pC,GAAAA,EAAQ,CACP58B,MAAOH,EAAK,oCACZm8B,QAAS6wD,GACTtsF,SAAUwvF,QAIblD,KACCn6F,EAAAA,GAAAA,IAAA,OAAKE,UD9lB8+B,WC8lB98BC,SAAA,EACnCC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAazd,SACzB+4F,KAEH94F,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACR7N,UDnmBwgC,WComBxgC6M,MAAOstF,GACPxsF,SAAUivF,GACVxvF,MAAOH,EAAK,0CAMnBgtF,GACES,IAAoBQ,QAcjBn4F,GAbF7C,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAoBzd,SACjCk6F,IAAkBt4F,QAASqyB,EAAAA,GAAAA,GAAWjnB,EAAK,6CAC1CotF,GACI,CAACA,GAAoByB,SAAU3B,GAAkBc,IACjD,CAACN,GAAmBR,GAAkBc,SAC1Cl4F,EACAy2F,IAAsB,CAAC,qBAAsBtlE,EAAAA,GAAAA,GAAWjnB,EAAK,yCAC7DotF,GACI,CAACA,GAAoByB,SAAUb,IAC/B,CAACN,GAAmBM,SACxBl4F,EACAy2F,IAAsB,CAAC,uBAI7Bt5F,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAoBzd,UACjCi0B,EAAAA,GAAAA,GAAWjnB,EAAK,yCAIrB/M,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAezd,UAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAuBzd,SAAA,EACrCC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAazd,SACzBgN,EAAK,kCAGR/M,EAAAA,GAAAA,GAAC8pC,GAAAA,EAAQ,CACP58B,MAAOH,EAAK,oCACZm8B,QAAS2wD,GACTpsF,SAAUuvF,WAKhBh9F,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAoBzd,UACjCi0B,EAAAA,GAAAA,GAAWjnB,EAAK,uCAGnBnN,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,IAC5B28E,IAAuBE,IAA4BG,KAAoBh9E,IAA2Bzd,SAAA,EAEnGC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAqBzd,SACjCgN,EAAK,mCAGRnN,EAAAA,GAAAA,IAACgO,EAAAA,EAAM,CACL2E,UAAWxF,EAAK,sBAChBjN,WAAWqW,EAAAA,GAAAA,GD7pB65B,WC6pB33B,gBAC7CrI,QAAM,EACNC,QAASgqF,EAAah4F,SAAA,EAEtBC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAazd,SACzBgN,EAAK,yBAEP0wF,EAAAA,GAAAA,IAAuB7E,EAAkB7rF,EAAKguD,cAKzD,CAEA,OACEn7D,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJtN,UD7qBiB,WC8qBjB+L,QAASmvB,GACTrvB,OAAQA,EACRkyE,UAAWA,EACXxwE,QAAU8sF,IAAuBE,GAA4BrG,EAAmBzvE,GAAYxkB,SAAA,EAE5FH,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GDnrBuC,WCmrBX,iBAAkB6yC,SA/SlE,SAAsBn8C,GACpB,MAAM,UAAE0tB,GAAc1tB,EAAE6X,cAExBssE,EAAgBz2D,GAAa,IAC/B,EA2SyFx6B,SAAA,EACnFC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACLJ,UDvrB2Q,WCwrB3Q+N,MAAM,cACNE,QAASitB,GACTzoB,UAAWxF,EAAK,SAAShN,UAEzBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAEbvN,EAAAA,GAAAA,GAAA,OAAKF,UD9rBkE,WC8rB1CgE,IAAK45F,GAAan1E,IAAI,GAAG5kB,WAAW,KACjE3D,EAAAA,GAAAA,GAAA,MAAIF,UD/rBoH,WC+rBvFC,UAC9Bi0B,EAAAA,GAAAA,GAAWjnB,EAAK,8BAEnB/M,EAAAA,GAAAA,GAAA,OAAKF,UDlsB4I,WCksB9GC,UAChCi0B,EAAAA,GAAAA,GAAWjnB,EAAKymB,EAAY,uBAAyB,kCAExDxzB,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GDrsBqJ,WCqsBvH46E,GDrsB4K,YCqsBrIhxF,UACnFC,EAAAA,GAAAA,GAAA,MAAIF,UDtsBuU,WCssBnSC,SACrCgN,EAAK,8BAGRotF,IAAuBE,IACvBz6F,EAAAA,GAAAA,IAAA,OAAKE,UD3sB8lB,WC2sBrkBC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,OAAAD,SACGs6F,IACCr6F,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAmB1Z,IAAK60F,GAAUpwE,IAAI,MAEtDvoB,EAAAA,GAAAA,GAAA,OACEF,UAAW0d,GACX1Z,IAAKqyF,GAAkBgE,GAAqBrO,SAAWqK,GAAkB,GACzE5tE,IAAI,QAIV3oB,EAAAA,GAAAA,IAAA,OAAKE,UDvtB8mB,WCutBvlBC,SAAA,EAC1BC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAazd,SACzBs6F,GAA2BttF,EAAK,+BAAgCstF,IAA0Be,OACvFruF,EAAK,qCAAsCotF,GAAqByB,aAEtE57F,EAAAA,GAAAA,GAAA,KAAGF,UD5tBwpB,WC4tBhoBC,SACxBs6F,GAA2BttF,EAAK,8BAA+BstF,IAA0BuB,UACtF7uF,EAAK,wBAAyBotF,IAAqBrO,cAG3D9rF,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAgBzd,UAC9BH,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAsBA,IAA2Bzd,SAAA,EAC9EC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,QAAQzN,UAAW0d,MAC9Bxd,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAA2BnH,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAC5Es6F,GAA2BA,IAA0BsD,OAClDxD,GAAqByB,UAAYhF,GAAgCY,EAAAA,gBAM7Ex3F,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,GD5uBoZ,YC4uBtXzd,UAlTjEC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAezd,SAC5B24F,EAAajlF,IAAKw1B,IAEfjpC,EAAAA,GAAAA,GAACk1F,GAAkB,CAEjB3nF,KAAM07B,EAAO17B,KACbuH,KAAMm0B,EAAOn0B,KACbm0B,OAAQA,EAAOt8B,MACflJ,IAAKwlC,EAAOxlC,IACZgK,SAAUmvF,GACV1zD,QAAS8vD,IAA2B/vD,EAAOt8B,MAC3CwoF,OAAQlsD,EAAOksD,OACfE,UAAWA,GACXC,kBAAmBkE,GACnBpE,cAAensD,EAAOmsD,eAVjBnsD,EAAO17B,WAmTjBgtF,KAAsBf,IAAiB73F,SACtC/B,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACIo6F,KAAwBE,KACxBz6F,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAezd,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAgBzd,SAAA,EAC9BC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAqBzd,SACjCgN,EAAK,6BAERnN,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAsBA,IAA2Bzd,SAAA,EAC9EC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,QAAQzN,UAAW0d,MAC9Bxd,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAA2BnH,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAC5E26F,YAKP16F,EAAAA,GAAAA,GAAC49F,GAAAA,EAAoB,CACnBC,WAAYpD,GACZqD,MAAOtC,GACP/tF,SAAU8uF,SAIdv8F,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAoBzd,UACjCi0B,EAAAA,GAAAA,GAAWjnB,EAAK,+BAKtBqwF,QAIJ5C,KACC56F,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACIs6F,KAA6BF,KAC7Bv6F,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAezd,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAgBzd,SAAA,EAC9BC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAqBzd,SACjCgN,EAAK,2BAERnN,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAsBA,IAA2Bzd,SAAA,EAC9EC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,QAAQzN,UAAW0d,MAC9Bxd,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAA2BnH,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAC5E46F,YAtRnB36F,EAAAA,GAAAA,GAAC+9F,GAAAA,EAAmB,CAClBj+F,UD1gB0qC,WC2gB1qC0N,QAAS6pF,EACT2G,kBAAmBlF,EACnBI,mBAAoBA,GACpBnrF,QAASovF,SAyRDn9F,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,GDvyB0gB,YCuyB5dzd,UAC1Ei0B,EAAAA,GAAAA,GAAWjnB,EAAK,4BAGnBnN,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAezd,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAqBzd,SACjCgN,EAAK,kCAGR/M,EAAAA,GAAAA,GAAC49F,GAAAA,EAAoB,CACnBC,WAAY/E,EACZgF,MAAOpC,GACPjuF,SAAUgvF,MAGZz8F,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAoBzd,UACjCi0B,EAAAA,GAAAA,GAAWjnB,EAAK,4CAMxBqwF,SAIHjD,KAAwBE,IAA4BE,KACpD36F,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAezd,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAqBzd,SACjCgN,EAAK,gCAnWhB/M,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAezd,SAC5Bs7F,IAAe5nF,IAAKs8E,IACnB/vF,EAAAA,GAAAA,GAACwtF,GAAyB,CACxBE,YAAU,EAEVzkD,OAAQ8mD,EACRtC,kBAAmBA,GACnBvkD,QAAS6mD,EAAKjE,SAAWwN,GACzB7rF,SAAU8rF,IAJLxJ,EAAKjE,eAqWV9rF,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAqBA,IAA2Bzd,SA1VzF,WACE,MACMwzB,EADOxmB,EAAK,mCACC29B,MAAM,0BAEzB,GAAKnX,KAASA,EAAM5xB,OAAS,GAI7B,OACE/B,EAAAA,GAAAA,IAAA,KAAGE,UD1fm5B,WC0fj3BC,SAAA,CAClCwzB,EAAM,IACPvzB,EAAAA,GAAAA,GAACi+F,GAAAA,EAAI,CAACC,WAAS,EAACnwF,QAAS8tF,GAAmB97F,SAAEwzB,EAAM,KACnDA,EAAM,KAGb,CA4Ua4qE,QAKNnF,IACCh5F,EAAAA,GAAAA,GAAA,OAAKF,UDl1Bkc,WCk1BzaC,UAC5BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UDp1B6B,WCq1B7BiO,QAAUosF,IAAuBE,GAA4BrG,EAAmBzvE,GAAYxkB,SAE3FgN,EAAK,iCAKd/M,EAAAA,GAAAA,GAAC83D,GAAa,CACZnsD,OAAQmsF,EACR5/B,cAAY,EACZE,gBAAc,EACdvsD,QAASmsF,EACTx/B,SAAUqkC,GACV9kC,WAAY6gC,EACZtgC,kBAAmBvrD,EAAK,WAE1B/M,EAAAA,GAAAA,GAACozF,GAAkB,CACjBznF,OAAQssF,EACRpsF,QAASssF,EACT97B,YAAaA,EACb7D,SAAUskC,GACVpJ,eAAgBuD,KAElBj3F,EAAAA,GAAAA,GAAC01F,GAAuB,CACtB/pF,OAAQysF,EACRvsF,QAASysF,EACT1E,uBAAwBmJ,GACxBpJ,mBAAoB6F,GACpB9F,eAAgBqD,EAChBtD,eAAgBjnF,KAElBxM,EAAAA,GAAAA,GAACwzF,GAA0B,CACzB7nF,OAAQ4sF,EACR1sF,QAAS4sF,EACT9E,mBAAoBgD,GACpB/C,uBAAwBY,GACxBd,eAAgB0K,EAAAA,IAChB3K,eAAgBjnF,KAElBxM,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZl2B,MAAOJ,EAAK,qCACZ+H,KAAM/H,EAAK,oCACXu2B,aAAcv2B,EAAK,SACnBpB,OAAQooF,EACRloF,QAASooF,EACT1wD,eAAgB64D,WC32BlBiC,GAA2D,CAC/DlU,mBAAoB,4BACpBmU,mBAAoB,uBACpBpU,cAAe,sBACfN,mBAAoB,yBACpBC,eAAgB,0BAChBF,SAAU,0BACV4U,gBAAiB,0BACjBC,eAAgB,4BAChBC,mBAAoB,+BAGhBC,GAAmE,CACvEvU,mBAAoB,kCACpBmU,mBAAoB,6BACpBpU,cAAe,4BACfN,mBAAoB,+BACpBC,eAAgB,gCAChBF,SAAU,gCACV4U,gBAAiB,gCACjBC,eAAgB,kCAChBC,mBAAoB,qCAGhBE,GAAmE,CACvExU,mBAAoB,mCACpBmU,mBAAoB,8BACpBpU,cAAe,6BACfN,mBAAoB,gCACpBC,eAAgB,iCAChBF,SAAU,iCACV4U,gBAAiB,iCACjBC,eAAgB,mCAChBC,mBAAoB,sCAGhBG,GAAsD,CAC1DzU,mBAAoB,aACpBmU,mBAAoB,aACpBpU,cAAe,eACfN,mBAAoB,YACpBC,eAAgB,aAChBF,SAAU,cACV4U,gBAAiB,aACjBC,eAAgB,eAChBC,mBAAoB,aAGhBI,GAA4F,CAChGP,mBAAoBA,CAACvxF,EAAiBJ,IAEtB,MAAVA,EAAuBI,EAAK,cAAe,KACjC,MAAVJ,EAAuBI,EAAK,cAAe,MACxC+S,EAAAA,GAAAA,IAAe/S,EAAMJ,EAAQmyF,EAAAA,MA8IxC,IAAengG,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUsuB,YACT,MAAM,OAAE+6D,GAAWrpF,EAAO6yC,UACpBu2C,GAAYlpD,EAAAA,EAAAA,KAA2BlgC,GAE7C,MAAO,CACL09F,aAAcpvE,EAAQ+6D,IAAS/6D,GAAO,QAAK9sB,EAC3Cm8F,aAAcrvE,EAAQ+6D,IAAS/6D,GAAO,QAAK9sB,EAC3Co8F,gBAAgBC,EAAAA,EAAAA,KAA+B79F,GAC/CopF,cATc97E,CA7FwCwwF,EAC1DJ,eACAC,eACArvE,QACA86D,YACAwU,oBAEA,MAAM,uBAAEG,EAAsB,iBAAEx9D,IAAqB51B,EAAAA,EAAAA,MAC/Ce,GAAOC,EAAAA,EAAAA,MAENqyF,EAAWC,EAAcC,IAAetgG,EAAAA,EAAAA,KAEzCslB,GAAc5kB,EAAAA,EAAAA,IAAY,KAC9BiiC,IACA09D,KACC,CAAC19D,EAAkB09D,KAEtB/0F,EAAAA,EAAAA,IAAU,MACHolB,GAAS0vE,GAAWE,KACxB,CAACF,EAAW1vE,EAAO4vE,IAEtB,MAAMpyF,EAAQJ,EAAK,gBACbyyF,EAAiB7vE,GAASkvE,GAAsBlvE,GAChDvjB,EApER,UAA+B,KAC7BW,EAAI,UACJ0yF,EAAS,UACThV,EAAS,cACTwU,EAAa,aACbF,EAAY,aACZC,EAAY,eACZQ,IAUA,IAAKC,EACH,OAGF,MAAMC,EAAwBF,EAAiBA,EAAezyF,EAAMgyF,GAAgBA,EAC9EY,EAAwBH,EAAiBA,EAAezyF,EAAMiyF,GAAgBA,EAEpF,OAAIvU,EACK19E,EAAK4xF,GAA0Bc,GAAYE,GAG7CV,EACHlyF,EAAKsxF,GAAkBoB,GACT,mBAAdA,EAAiCE,EAAwB,CAACD,EAAuBC,IACjF5yF,EAAK2xF,GAA0Be,GAAYC,EACjD,CAoCsBE,CAAsB,CACxC7yF,OACA0yF,UAAW9vE,EACX86D,YACAwU,gBACAF,eACAC,eACAQ,mBAEIvsF,EAAO0c,GAASivE,GAAWjvE,GAC3BkwE,EAAaZ,IAAkBxU,EAErC,OACE7qF,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJvB,QAASyzF,EACTxzF,oBAAqBszF,EACrBzzF,OAAQZ,QAAQ4kB,KAAW0vE,EAC3BlyF,MAAOA,EACPrN,UCtKiB,WDsKMC,SAAA,EAErB8/F,IACAjgG,EAAAA,GAAAA,IAAA,OAAKE,UCzKgH,WDyKnFC,SAAA,EAChCC,EAAAA,GAAAA,GAAA,KAAGF,WAAWqW,EAAAA,GAAAA,GC1KqM,WD0KpKlD,EAAM,WACrDjT,EAAAA,GAAAA,GAAA,OAAKF,UC3K+J,WD2KlIC,SAC/By/F,IACCzyF,EAAM09E,EAAYuU,EAAeD,KAC7BtU,EAAYuU,EAAeD,QAKtCc,IACC7/F,EAAAA,GAAAA,GAACwhF,GAAoB,CACnB1hF,UCrLkE,WDsLlE2hF,UAAW+d,IAAiBzyF,EAAMgyF,IAAiBA,GAAcjS,WACjEpL,WAAY8d,IAAiBzyF,EAAMiyF,IAAiBA,GAAclS,WAClEnL,kBAAmB1uE,KAIvBjT,EAAAA,GAAAA,GAAA,OAAAD,UACGi0B,EAAAA,GAAAA,GAAW5nB,GAAe,GAAI,CAAC,kBAAmB,UAGrDxM,EAAAA,GAAAA,IAAA,OAAKE,UChMyQ,WDgMzOC,SAAA,EACnCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,wBACVgO,QAAM,EACNC,QAASuxF,EACTzxF,MAAM,UAAS9N,SAEdgN,EAAK8yF,EAAa,SAAW,QAE/BA,IAEGjgG,EAAAA,GAAAA,IAACgO,EAAAA,EAAM,CACL9N,UAAU,wBACVgO,QAAM,EACNC,QAASwW,EACT1W,MAAM,UAAS9N,SAAA,CAEdgN,EAAK,kBACN/M,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,eAAezN,UClN4P,yB,uCCUpS,MAEMggG,GAA4B,IAAM/nE,EAAAA,IAGlCgoE,GAAe,GAAMnqF,EAAAA,EAEpB,SAASoqF,GACd12E,EACAosD,EACAuqB,EACA3qF,GAEA,MAAM4qF,GAA6B72F,EAAAA,EAAAA,IAAkB,KAE9C82F,EAAgBC,IAAqBj0F,EAAAA,EAAAA,IAAiB,IAG3Dk0F,QAASC,EACTC,OAAQC,EACRC,SAAUC,IACRC,EAAAA,GAAAA,IAAwB,CAC1BC,QAASt3E,GACPw5B,IACF,MAAM+9C,EAA0BX,EAA2B12F,QAE3Ds5C,EAAQrrC,QAASqpF,IACf,MAAMt8F,EAAQ8gB,OAAOw7E,EAAMh0F,OAAOjN,GAAGs7D,QAAQ,GAAG8kC,KAAa,KAC7DY,EAAwBr8F,GAASs8F,EAAMC,iBAGzC,MAAMC,EAAuBH,EAAwBv+C,OAAO,CAAC2+C,EAAaF,EAAgBv8F,IACjFu8F,GAAkBv8F,EAAQy8F,EAAcz8F,EAAQy8F,EACtDC,KAECF,IAAyBE,KAI7Bd,EAAkBY,MAIlBX,QAASc,EACTZ,OAAQa,EACRX,SAAUY,IACRV,EAAAA,GAAAA,IAAwB,CAC1BC,QAASt3E,EACTg4E,WAhDkC,IAiDlCC,OAhDgC,OAoDhClB,QAASmB,IACPb,EAAAA,GAAAA,IAAwB,CAC1BC,QAASt3E,EACTg4E,WAxDkC,IAyDlCC,OAxDgC,OA4DhClB,QAASoB,IACPd,EAAAA,GAAAA,IAAwB,CAC1BC,QAASlrB,IAgCX,OA7BAnsE,EAAAA,EAAAA,GAAc,KACR+L,GACFkrF,IACAY,KAEAv2F,WAAW,KACTw2F,IACAX,KACCZ,KAEJ,CAACU,EAAcY,EAAuB9rF,EAAUorF,EAAgBW,IAmB5D,CACLlB,iBACAG,4BACAa,qCACAK,qCACAC,+BACA/R,kBAvBuBnjF,EAAAA,EAAAA,GAAiB/H,IACxC47F,EAAmB/sE,IACjB,MAAMquE,EAAe3/F,SAASi4B,eAAe,GAAGimE,KAAYz7F,KACtDm9F,EAA6C,IAAnCzuF,KAAKya,IAAI0F,EAAe7uB,GAUxC,OARAo9F,EAAAA,GAAAA,IAAc,CACZp8F,UAAW8jB,EAAa9f,QACxBuoB,QAAS2vE,EACTliF,SAAU,QACV+hF,OAAQxB,GACR8B,YAAaF,EArFkB,IACF,KAuFxBn9F,MAYb,C,oDCjHA,MCmIA,IAAe7F,EAAAA,EAAAA,IA/FuBmjG,EACpCC,aACA7hG,OAAO8hG,EAAAA,IACPzhF,SACA0H,gBACAg6E,sBACAC,sBAEA,MAAM,aAAErR,IAAiB7kF,EAAAA,EAAAA,MACnBsd,GAAejgB,EAAAA,EAAAA,OAEf,aACJ84F,EAAY,cAAEC,EAAa,iBAAEC,EAAgB,eAAEC,EAAc,mBAAEtP,GAC7D+O,GAEE,YAAEQ,IAAgBC,EAAAA,GAAAA,GAAexP,GACjCyP,EAAiBF,GAAaG,mBAC9BC,GAAcC,EAAAA,GAAAA,GAAwBt5E,OAAczmB,GAAY4/F,GAChEI,GAAcC,EAAAA,GAAAA,GAAeH,GAE7B5B,GAAiBgC,EAAAA,GAAAA,IAAkBz5E,EAAc24E,GACjDe,EAAajC,IAAmBxgF,EAEhC0iF,GAA2Bd,GAC3BC,IAAkBc,EAAAA,KAAsBb,IAAqBC,EAC7Da,EAAmBF,GAA2BlB,EAAW7e,WAAW,KACrEkgB,EAAAA,EAAAA,IAAoBrB,EAAW7e,SAAS,GAAI,WAC3CmgB,GAAwBh7F,EAAAA,EAAAA,GAAS86F,GAAmBpC,GAEpDuC,GAAcnB,IAAiBgB,GAAqBd,IAAqB,aAAaN,EAAWliG,KACjG6I,GAAYL,EAAAA,EAAAA,GAASi7F,GAAYvC,GACjC1nF,EAAU25E,GAAsBtqF,GAAa26F,EAC7Cr/E,GAAuBm2B,EAAAA,GAAAA,GAA6B9gC,GAEpDkqF,GAASC,EAAAA,GAAAA,GAAwBl6E,EAAc44E,GAUrD,OARA33F,EAAAA,EAAAA,IAAU,KACJw2F,IAAmBgB,EAAW7e,UAAUvhF,QAC1CkvF,EAAa,CACXlB,eAAgBoS,KAGnB,CAAChB,EAAgBlQ,EAAckR,KAGhC/hG,EAAAA,GAAAA,GAAA,OACEiU,IAAKqV,EACLxpB,WAAWqW,EAAAA,GAAAA,GDnFM,WCmFsB,qBACvCrQ,MAAO,YAAY5F,MAASH,SAE3BsZ,EACC25E,GACEhzF,EAAAA,GAAAA,GAACsyF,GAAAA,EAAW,CACV9C,WAAYwD,EACZ9yF,KAAMA,EACNujG,8BAA+BxB,EAC/B1hF,OAAQA,IAER8hF,GACFriG,EAAAA,GAAAA,GAACC,GAAAA,EAAe,CACdH,UAAWkkB,EACX5jB,OAAQsI,EACRxI,KAAMA,EACN8iF,KAAMggB,EACN/f,gBAAgBygB,EAAAA,EAAAA,MAAgCx3D,EAAAA,EAAAA,MAAa61D,GAC7D4B,aAAczB,GAAiB14F,cAAW3G,EAC1C+gG,mBAAoBL,EACpBM,YAAa57E,IAEZm6E,IAAkBa,GACrBjjG,EAAAA,GAAAA,GAACm/C,GAAAA,EAAc,CACbr/C,WAAWqW,EAAAA,GAAAA,GD3GmB,WC2GU6N,GACxClgB,IAAK4E,EACL02C,QAAS4jD,EACTl9F,MAAO+8F,EACPxjD,WAAYp3B,EACZ5B,MAAI,EACJlE,yBAAuB,KAGzBniB,EAAAA,GAAAA,GAAA,OACE8D,IAAK4E,GAAa26F,EAClBv9F,MAAO+8F,EACP/iG,WAAWqW,EAAAA,GAAAA,GDvHsC,WCuHT6N,GACxCuE,IAAI,GACJ5kB,WAAW,KAIfmgG,EAAAA,GAAAA,IAAgB/B,EAAW50F,MAAO,O,4BCjE1C,MAAM42F,GAA8B,CAClC,CAAE52F,MAAO,sBAAuBR,MAAO,EAAGq3F,IAAK,MAC/C,CAAE72F,MAAO,sBAAuBR,MAAO,EAAGq3F,IAAK,MAC/C,CAAE72F,MAAO,sBAAuBR,MAAO,EAAGq3F,IAAK,OAC/C,CAAE72F,MAAO,qBAAsBR,MAAO,EAAGq3F,IAAK,OAC9C,CAAE72F,MAAO,qBAAsBR,MAAO,EAAGq3F,IAAK,SAgShD,IAAerlG,EAAAA,EAAAA,IA7ROslG,EACpB7hB,UACAliF,OACAqgB,SACApT,QACArN,YACAokG,gBACAj1C,kBACAk1C,iBACAC,aACAnC,sBACAoC,gCACAC,aACAzkE,uBACA0kE,sBACAC,gBACAtC,kBACAuC,uBACAx8E,gBACAla,UACA22F,WACAC,cACAC,gBACAC,sBACAC,oBACAC,qBACAC,qBACAC,oBAEA,MAAM,eAAEnU,EAAc,iBAAElvD,EAAgB,eAAEsjE,IAAmBl5F,EAAAA,EAAAA,MACvDiI,GAAM5K,EAAAA,EAAAA,MACNssE,GAAUtsE,EAAAA,EAAAA,MACV0D,GAAOC,EAAAA,EAAAA,KACPy1F,EAAiBrgB,EAAQsgB,mBACzBC,GAAcC,EAAAA,GAAAA,GAAwB3uF,OAAKpR,GAAY4/F,IAEvD,GACJ5iG,EAAE,eAAE8vF,GACFvN,EAEEqI,GAAcrI,EAAQ+iB,QAAUF,GAAkB7iB,EAAQgjB,UAC1DC,EAAgBjjB,EAAQijB,eAAiBJ,EACzCK,GAAYzlE,GAAwB4qD,IAAc8Z,EAElDxD,GAAiBgC,EAAAA,GAAAA,IAAkB9uF,EAAKguF,GACxCsD,EAAaxE,EACbiC,EAAajC,IAAmBxgF,EAEhCilF,GAA0BzC,EAAAA,GAAAA,IAAkB9uF,EAAKowF,IAEjD,kBACJtuB,EAAiB,kBAAEC,EAAiB,wBACpCyvB,EAAuB,kBAAExvB,GAAiB,uBAC1CC,GAAsB,sBAAEC,KACtBC,EAAAA,GAAAA,GAAuBniE,GACrByxF,GAA0B36F,SAASm5F,GAAiBluB,GAEpDJ,IAAoBrpE,EAAAA,EAAAA,GAAgB,IAAM0H,EAAIzK,SAC9CqsE,IAAiBtpE,EAAAA,EAAAA,GAAgB,IAAM0H,EAAIzK,QAASojB,QAAQ,kCAC5DkpD,IAAiBvpE,EAAAA,EAAAA,GAAgB,IAC9B43F,EAAiBxuB,EAAQnsE,QAAUyK,EAAIzK,QAASnF,cAAc,kCAEjEshG,IAAYp5F,EAAAA,EAAAA,GAAgB,KAAM,CAAGq5F,WAAYzB,EAAgB0B,6BAA6B,MAEpGt7F,EAAAA,EAAAA,IAAU,KACJwrE,EACF+uB,MAEAC,OAED,CAAChvB,EAAmBgvB,EAAoBD,KAE3Cv6F,EAAAA,EAAAA,IAAU,KACHw2F,GAAgB7qB,MACpB,CAACA,GAAwB6qB,IAE5B,MAkBM+E,IAAoBv5F,EAAAA,EAAAA,GAAiBM,IACzCA,EAAEuJ,kBACFvJ,EAAE6Y,iBAEFm/E,EAAqBziB,KAGjB2jB,IAA4Bx5F,EAAAA,EAAAA,GAAgB,KAChDs4F,EAAqBziB,KAGjB4jB,IAAsBz5F,EAAAA,EAAAA,GAAgB,KAC1Cq4F,EAAexiB,KAGX6jB,IAAoB15F,EAAAA,EAAAA,GAAgB,KACxCo4F,EAAaviB,KAGT8jB,IAAkB35F,EAAAA,EAAAA,GAAgB,KACtCwB,IAAU22F,GAAU,KAGhByB,IAAsB55F,EAAAA,EAAAA,GAAgB,KAC1CwB,IAAU22F,OAAU7hG,GAAW,KAG3BujG,IAAgB75F,EAAAA,EAAAA,GAAgB,KACpCukF,EAAe,CAAEnB,qBAGb0W,IAAgC95F,EAAAA,EAAAA,GAAgB,CAACM,EAAyBsM,EAAW,KACzFtM,EAAE6Y,iBACF7Y,EAAEuJ,kBAEF8/D,KACA8uB,MACAE,EAAe,CACb5V,YAAa,CAAEpuF,KAAM,UAAWsuF,WAAYpN,EAAQviF,GAAIymG,OAAOtkE,EAAAA,GAAAA,MAAkB7oB,OAI/EotF,IAAyB/wF,EAAAA,IAAgBqvF,EAEzClzD,IAAgBx7B,EAAAA,GAAAA,GACpB,gBACApI,GAAW,cACXu2F,GAAc,WACde,GAAiB,eACjBJ,GAAiB,eACjBnlG,GAGI0mG,IAAmBz+F,EAAAA,EAAAA,IAAQ,KAC/B,IAAK29F,IAA2BxB,GAAkBmB,IAAkBlB,EAAiB,MAAO,GAE5F,MAAMh7C,EAAqB,GAE3B,OAAIk8C,GACFtB,GAA4BtsF,QAAS7I,IACnCu6C,EAAMn2C,MACJhT,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAAC3F,QAASs4F,GAA+B3B,SAAU91F,EAAKo1F,IAAIjkG,SAClEgN,EAAK6B,EAAKzB,MAAOyB,EAAKjC,MAAO,UAK7Bw8C,IAGLy7C,GACFz7C,EAAMn2C,MACJhT,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,WAAWlF,QAASi4F,GAAoBjmG,SACpDgN,EAAK,mCAKR43F,GACFx7C,EAAMn2C,MACJhT,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,WAAWlF,QAASk4F,GAAkBlmG,SAClDgN,EAAK,+BAKPu4F,GAAYv3F,IACVkhD,GACH9F,EAAMn2C,MAAKhT,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAAC3F,QAASm4F,GAAiBjzF,KAAK,QAAOlT,SAAEgN,EAAK,uBAEpEo8C,EAAMn2C,MACJhT,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAAC3F,QAASo4F,GAAqBlzF,KAAK,WAAUlT,SACpDgN,EAAKkiD,EAAkB,cAAgB,uBAK1Cm1C,GACFj7C,EAAMn2C,MACJhT,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAAC3F,QAASq4F,GAAenzF,KAAK,WAAUlT,SAC9CgN,EAAK,sBAIR83F,GACF17C,EAAMn2C,MACJhT,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,SAASlF,QAASg4F,GAA0BhmG,SACxDgN,EAAK,uBAILo8C,IACN,CACDu8C,GAAyBxB,EAAemB,EAAelB,EAAgBS,EAAeD,EAAaW,EACnGv3F,EAASq2F,EAAYS,EAAqBwB,GAA+Bt5F,EAAMi5F,GAC/EC,GAAmBh3C,EAAiBk3C,GAAqBD,GAAiBE,GAAeL,KAG3F,OACEnmG,EAAAA,GAAAA,IAAA,OACEqU,IAAKA,EACLnU,UAAW6xC,GACXxkC,MAAOA,GAAUi1E,GAAS2Q,MAC1B,kBAAiBlzF,EACjBwvC,YAjIqBxiC,KACvB45F,EAAAA,GAAAA,GAAoC55F,GACpC44F,EAAwB54F,IAgItBkB,QA/IgBwW,KACdwxD,IACAuvB,EAEA1jE,EADEqjE,EACe,CAAE7iE,eAAgB,WAElB,CAAEA,eAAgB,qBAIvCr0B,IAAU22F,KAsIR1+E,cAAeiwD,GAAkBl2E,SAAA,CAEhCylG,IACCxlG,EAAAA,GAAAA,GAAC0mG,GAAAA,EAAW,CACVp9E,aAAcrV,EACdmuE,QAASA,EACTukB,SAAO,EACPzmG,KAAMA,EACN0mG,YAAU,EACVC,sBAAoB,EACpBC,QAASvB,EACThlF,QAASyiF,EACT+D,iBAAe,EACfC,qBAAmB,EACnB9E,gBAAiBA,EACjBuC,qBAAsBA,EACtB9B,YAAaA,EACbkB,YAAa57E,KAGfu8E,GAAiBc,IACjBtlG,EAAAA,GAAAA,GAAA,OACEF,UAAU,iBAAgBC,UAE1BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,kBAGbi3F,GAAiB/Z,IAAc6a,IAC/BtlG,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,WAGdg5F,KACCvmG,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,wBACV+N,MAAM,OACNyE,OAAK,EACL20F,aAAW,EACXl5F,QAAS+3F,GAAkB/lG,UAE3BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,YAGdxC,QAAQy7F,GAAiB7kG,UACxB3B,EAAAA,GAAAA,GAAC+f,GAAAA,EAAI,CACH9L,IAAK0hE,EACLhqE,OAAQoqE,EACRgH,OAAQ/G,EACRJ,kBAAmBA,GACnBC,eAAgBA,GAChBC,eAAgBA,GAChB6vB,UAAWA,GACX7lG,UAAU,uBACVmgB,WAAS,EACT2lF,WAAYzB,EACZt4F,QAASqqE,GACTpqE,oBAAqBqqE,GAAsBp2E,SAE1CymG,U,oDC1VX,MCmIA,IAAe7nG,EAAAA,EAAAA,IA9FqBuoG,EAClC9zD,WACA6Q,qBACAqgD,aACA6C,cACAlF,sBACAC,kBACAkF,oBACAn/E,gBACAla,UACAiY,oBAEA,MAAM/R,GAAM5K,EAAAA,EAAAA,MACNg+F,EAA6B,WAAlBj0D,EAASlyC,KACpBomG,GAAoBv/F,EAAAA,EAAAA,IAAQ,IAChCk8C,GAAoBzO,KAAMu2B,IAAct5B,EAAAA,EAAAA,IAAes5B,EAAU34B,SAAUA,IAC1E,CAAC6Q,EAAoB7Q,IAClBlqC,EAAeo+F,GAAmBC,YAAYlnE,WAAWl3B,QACzDq+F,EAAcF,GAAmBG,iBAAiB5nG,GAClD0jG,GAASC,EAAAA,GAAAA,GAAwBvvF,EAAKiuF,GACtCx5F,GAAYL,EAAAA,EAAAA,GAChBi/F,GAAmBG,iBAAkBC,EAAAA,EAAAA,IAAqBJ,EAAkBG,gBAAiB,aAAU5kG,GACtG2kG,IAGG,kBACJzxB,EAAiB,wBACjB0vB,EAAuB,kBACvBxvB,EAAiB,uBACjBC,EAAsB,sBACtBC,IACEC,EAAAA,GAAAA,GAAuBniE,EAAuB,SAAlBm/B,EAASlyC,UAAiB2B,OAAWA,OAAWA,GAAW,IAE3F0H,EAAAA,EAAAA,IAAU,KACJwrE,IACF/vD,IAAgBotB,GAEhB8iC,IACAC,MAED,CAACD,EAAwBlwD,EAAemwD,EAAuBJ,EAAmB3iC,IAErF,MAAMhzC,EAA2B,SAAlBgzC,EAASlyC,KAAkBb,GAAAA,EAAesnG,aAAej/F,EAClE6b,GAAchY,EAAAA,EAAAA,GAAgB,KAClCwB,EAAQqlC,KAGJpvB,GAAuBm2B,EAAAA,GAAAA,GAA6BzxC,GACpDipC,GAAgBx7B,EAAAA,GAAAA,GDrFD,WCuFnBmuF,GDvFyC,YCwFxC+C,GAAY,oBAGf,OACErnG,EAAAA,GAAAA,GAAA,OACEiU,IAAKA,EACLnU,UAAW6xC,EACX5jC,QAASwW,EACTpX,MAAOm6F,GAAmBn6F,MAC1B,kBAAiBk6F,EAAWj0D,EAASo8C,gBAAa3sF,EAClDwsC,YAAao2D,EACbz/E,cAAeiwD,EAAkBl2E,SAEhCsnG,GACCrnG,EAAAA,GAAAA,GAACsyF,GAAAA,EAAW,CACVr+E,IAAKA,EACLu7E,WAAYp8C,EAASo8C,WACrBtvF,KAAM0nG,EAAAA,IACNrnF,QAAS4mF,EACT1D,8BAA+BxB,EAC/BC,gBAAiBA,EACjBkF,kBAAmBA,EACnB3C,sBAAoB,EACpBZ,YAAa57E,KAGfjoB,EAAAA,GAAAA,GAAC6nG,GAAAA,EAAuB,CACtBznG,OAAQA,EACR8I,aAAcA,EACd85E,KAAMmkB,EACN3mG,QAAQ,EACRN,KAAM0nG,EAAAA,IACN3kB,eAAa,EACbnjF,UAAWkkB,EACX2/E,aAAczB,EAAiB14F,cAAW3G,EAC1C+gG,mBAAoBL,EACpBM,YAAa57E,Q,gBCxCvB,MAkXA,IAAetpB,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAMymG,EAAsBzmG,EAAO0mG,0BAA0BC,SAE7D,MAAO,CAAEF,wBAJOn5F,CA5W0Bs5F,EAC5ClG,aACAoF,cACA3iG,QACAy7F,WACAiI,eACAC,mBACAlkD,qBACAgL,kBACAk1C,iBACAiE,mBACAvoE,uBACAwoE,mBACAC,uBACAC,sBACAC,wBACAC,iBACAC,mBACAC,gBACAC,iBACA3gF,gBACAg6E,sBACAT,qCACAL,qCACA0H,mBACAC,oBACAC,kBACAC,kBACAC,gBACAC,wBACApE,oBACAC,qBACAC,qBACA8C,0BAEA,MAAM,oBACJqB,EAAmB,uBACnBC,EAAsB,qBACtBC,EAAoB,iBACpBznE,EAAgB,iBAChB0nE,EAAgB,aAChBzY,IACE7kF,EAAAA,EAAAA,MAEEiI,GAAM5K,EAAAA,EAAAA,MAEN64F,GAAkB74F,EAAAA,EAAAA,MAClB+9F,GAAoB/9F,EAAAA,EAAAA,MAEpB0D,GAAOC,EAAAA,EAAAA,MACLvD,MAAOmhB,KAAgBE,EAAAA,GAAAA,MACxBipE,GAAoBC,GAAkBC,KAAqBh1F,EAAAA,EAAAA,MAC5D,SAAEG,KAAaC,EAAAA,EAAAA,OAEdkqG,GAAaC,KAAkBr9F,EAAAA,EAAAA,IAASs9F,GAAuB7+E,KAEhEm2E,IAAiBgC,EAAAA,GAAAA,IAAkB9uF,EAAKguF,GAAuBd,GAC/Dn9E,IAAuBm2B,EAAAA,GAAAA,GAA6B4mD,IAGpDj9E,GAAeokF,GAAgBnH,GAE/B2I,GAAkBtqG,GAAW,EAAI,EACjCuqG,GAAgBvqG,GAAW,EAAI,GAC/BwqG,GAAwBxqG,GAAW,EAAI,EACvCyqG,GAAW9H,EAAWliG,KAAOiqG,EAAAA,IAC7BC,GAAsBhI,EAAWliG,KAAOmqG,EAAAA,IACxCC,GAAalI,EAAWliG,KAAOqqG,EAAAA,IAC/BC,GAAYpI,EAAWliG,KAAOuqG,EAAAA,IAC9BC,GAAUtI,EAAWsI,QACrBC,IAAgBT,KAAYU,EAAAA,EAAAA,KAAmBxI,GAE/CyI,IAAoBj+F,EAAAA,EAAAA,GAAgB,KACpC67F,EACFiB,IACSgB,GACTjB,IAEAD,IAEFlV,OAGIwW,IAAiBl+F,EAAAA,EAAAA,GAAgB,KACjC+9F,KAAiBzqE,EACnB+B,EAAiB,CACfQ,eAAgB,mBAGlBknE,EAAiB,CACfoB,aAAc3I,EAAWliG,OAKzB8qG,IAA8Bp+F,EAAAA,EAAAA,GAAgB,KAClDw8F,IAAkB,CAChBtnG,UAAW,UACX5B,GAAI+qG,EAAAA,IACJC,UAAU,EACVvjG,SAAS,EACTqoF,eAAgB,CACd3R,UAAW,aAKX8sB,IAA+Bv+F,EAAAA,EAAAA,GAAgB,KACnDw8F,IAAkB,CAChBtnG,UAAW,UACX5B,GAAIkrG,EAAAA,IACJF,UAAU,EACVvjG,SAAS,EACTqoF,eAAgB,CACd3R,UAAW,aAKXgtB,GAAWX,GAAUzC,EAAAA,IAAoBqD,EAAAA,IACzC1J,GAAS8I,GAAUV,GAAgBD,GACnCwB,GAAiBb,GAAUT,GAAwBF,GAEnDyB,IAAuB5+F,EAAAA,EAAAA,GAAiB9C,GACvCA,EAIEyJ,KAAKmI,OAAO5R,EAAQ83F,KAAWyJ,GAAWzJ,KAHxCkI,GAAuB7+E,KAM5B/U,IAAetJ,EAAAA,EAAAA,GAAiBu0F,IACpC0I,GAAe2B,GAAqBrK,EAAMsK,YAAY3hG,WAGxD4hG,EAAAA,GAAAA,GAAkBp3F,EAAK4B,KAEvBtL,EAAAA,EAAAA,IAAU,KACH0J,EAAIzK,SACTggG,GAAe2B,GAAqBl3F,EAAIzK,QAAQoT,eAC/C,CAACuuF,MAEJ5gG,EAAAA,EAAAA,IAAU,KACJuZ,KAAiBi+E,EAAW7e,UAAUvhF,SAAWogG,EAAW79C,WAAWviD,QAAUogG,EAAWuJ,YAC9Fza,EAAa,CACXlB,eAAgB,CACd9vF,GAAIkiG,EAAWliG,GACfyrG,WAAYvJ,EAAWuJ,eAI5B,CAACxnF,GAAc+sE,EAAckR,IAEhC,MAAMuD,IAAYr2C,IAAoBpvB,GAAwByqE,KAAiB7B,EAEzE8C,GAAcxJ,EAAWyJ,gBAAkBzJ,EAAW0J,WAEtDC,IAAUH,IAAexJ,EAAWliG,KAAOiqG,EAAAA,KAC5C/H,EAAWliG,KAAOuqG,EAAAA,KAAyBrI,EAAWliG,KAAO8rG,EAAAA,KAC7D5J,EAAWliG,KAAO+rG,EAAAA,MAA2BnD,IAAmBC,GAE9DmD,GAAM,CAAGC,KAAU7sG,EAAAA,EAAAA,GAAQysG,IAC5BK,GAAkC,EAAdxC,GAAkB,EACtCyC,GAAmB1D,GAAwBE,EAAyBzG,EAAW3uE,MAAQ,EAAI2uE,EAAW3uE,MAEtG64E,GAAajB,GAAWE,GACxBgB,GAAgBh5F,KAAKmtE,KAAKntE,KAAK4a,IAAIi+E,GAAmBC,IAAmBzC,IAC3E0C,GAAaf,GACXphG,GAAS+hG,GAAQK,GAAgBh5F,KAAKmtE,KAAK2rB,GAAkBzC,IAAe0C,GAAaf,GAEzFiB,IAAwBpkG,EAAAA,EAAAA,IAAQ,IACpCogG,EAAmB,IAAI/5D,IAAI+5D,EAAiB10F,IAAI,EAAG5T,QAASA,SAAOgD,EAClE,CAACslG,IACEiE,IAAyBrkG,EAAAA,EAAAA,IAAQ,IACrC+/F,EAAsB,IAAI15D,IAAI05D,EAAoBr0F,IAAI,EAAG+7E,gBAAiBA,SAAe3sF,EACxF,CAACilG,IACEuE,IAAoBhE,IAAqBwB,KAAaE,IACvDM,KAAYF,KAAc1B,KACxB8C,KAAiB1rE,IAAyBovB,GAC3Cq9C,IAAmBvkG,EAAAA,EAAAA,IAAQ,IAELgF,EADtBu4F,GACEiG,GAAyB,4BACjB,SAGF,OACX,CAACjG,GAAUv4F,EAAMw+F,KAEpB,OACE3rG,EAAAA,GAAAA,IAAA,OACEqU,IAAKA,EAELpU,GAAI,GAAGogG,KAAYz7F,IACnB1E,WACEqW,EAAAA,GAAAA,GAAe,aAAcmvF,IAAY,qBAC1CvlG,SAAA,EAECsoG,IACAzoG,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oBAAmBC,SAAA,EAChCH,EAAAA,GAAAA,IAAA,KAAGE,WAAWqW,EAAAA,GAAAA,GAAe,mBAAoBk2F,IAAoB,6BAA6BtsG,SAAA,CAC/FulG,KAAYtlG,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAAazN,UAAU,4BAC/CE,EAAAA,GAAAA,GAAA,QAAMF,UAAU,kBAAiBC,SAAEgiG,EAAW50F,SAC5Cs7F,GAAkBC,KAClB1oG,EAAAA,GAAAA,GAAA,QAAMF,UAAU,kBAAiBC,SAAEgN,EAAK07F,EAAiB,aAAe,mBAEzE4D,IAAoBthG,QAAQg3F,EAAW7e,YACtCljF,EAAAA,GAAAA,GAAA,QAAMF,UAAU,oBAAmBC,SAChCgN,EAAKs9F,GAAU,aAAe,WAAYtI,EAAW7e,SAASvhF,OAAQ,UAI5EkoG,KACC7pG,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAAC1S,UAAU,oBAAoByN,KAAK,QAAQQ,QAASimF,KAE3DqY,KACCrsG,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,wBACV8iC,oBAAqB0nE,KAAiBzqE,EACtC9xB,QAAS08F,GACT8B,MAAI,EACJrsG,KAAK,OACLkoD,OAAK,EAAAroD,SAEJusG,SAKT1sG,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GACT,+CACA6N,GACA+9E,EAAWliG,KAAO8rG,EAAAA,KAAwB,iBAE5C7lG,MAAO,WAAWgE,QAAY/J,SAAA,EAE9BC,EAAAA,GAAAA,GAAA,UACEiU,IAAKiuF,EACLpiG,UAAU,gBACVgG,MAAO4lG,GAAS,WAAWQ,aAAqBrpG,KAEhDgnG,IAAYI,IAAcyB,MAAW1rG,EAAAA,GAAAA,GAAA,UAAQiU,IAAKmzF,EAAmBtnG,UAAU,kBAChFwoG,IACCtoG,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,6BACV+N,MAAM,cACNE,QAAS48F,GAA4B5qG,UAGrCC,EAAAA,GAAAA,GAAA,OAAK8D,IAAK0oG,GAAMjkF,IAAI,QAAQzoB,UAAU,gBAAgB6D,WAAW,KAF7D,sBAKP6kG,IACCxoG,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,4CACV+N,MAAM,cACNE,QAAS+8F,GAA6B/qG,UAGtCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,UAFP,uBAKPuW,IAAgBi+E,EAAW79C,WAAWzwC,IAAK2/B,IAC1C,MAAMq5D,GAAa/4D,EAAAA,EAAAA,IAAeN,GAC5BkxD,EAAamI,EAAalE,GAAqBz4E,SAAS28E,QAAc5pG,EAE5E,OACE7C,EAAAA,GAAAA,GAACknG,GAAa,CAEZ9zD,SAAUA,EACVkxD,WAAYA,EACZ6C,YAAaA,EACbljD,mBAAoBA,EACpBg+C,oBAAqBT,EACrBzzF,QAAS86F,EACT7iF,cAAe8iF,EACf5G,gBAAiBA,EACjBkF,kBAAmBA,EACnBn/E,cAAeA,GAVV,GAAG85E,EAAWliG,MAAM4sG,OAc9B3oF,IAAgBi+E,EAAW7e,UAAUn1C,MAAM,EAAG89D,GAAQE,GAAoBhK,EAAW7e,SAASvhF,QAC5F8R,IAAI,CAAC2uE,EAAS54B,KACb,MAAMkjD,GAAa7C,IAAYI,MAC1BvG,EAAAA,EAAAA,MAAgCx3D,EAAAA,EAAAA,MAAak2C,EAAQuN,gBACpDgd,EAAajB,IAAUliD,GAAKuiD,IAAsBW,EACpDtF,EACAlF,EACEuK,EAAarqB,EAAQijB,cAAgBjjB,EAAQviF,GAAKuiF,EAAQ2Q,MAC1DuR,EAAamI,EAAalE,GAAqBz4E,SAAS28E,QAAc5pG,EAEtE+pG,EAAe7K,EAAWliG,KAAOmqG,EAAAA,KAClCoC,IAAwBl+D,IAAIk0C,EAAQviF,IAEnCgtG,GACJ7sG,EAAAA,GAAAA,GAACikG,GAAa,CAEZ7hB,QAASA,EACTliF,KAAM8qG,GACN/I,oBAAqBT,EACrB6C,8BAA+BlD,EAC/B5gF,QAAS4mF,EACTl4C,gBAAiBA,EACjBk1C,eAAgBA,EAChBC,YAAU,EACVF,cAAe0E,EACf/oE,qBAAsBA,EACtB0kE,oBAAqBkE,EACrBvG,gBAAiByK,EACjBlI,qBAAsBkE,EACtB56F,QAASg7F,EACTrE,SAAUtiB,EACVkiB,WAAYA,EACZM,cAAeqF,IAAckC,IAAuBj+D,IAAIk0C,EAAQviF,IAAMmpG,OAAkBnmG,EACxF8hG,YAAcwH,IAAuBj+D,IAAIk0C,EAAQviF,SAAsBgD,EAAhBomG,EACvDpE,oBAAqBgF,GAAWX,OAAwBrmG,EACxDiiG,kBAAmBA,EACnBC,mBAAoBA,EACpBC,mBAAoBA,EACpB/8E,cAAeA,EACfg9E,cAAelD,EAAWliG,KAAO8rG,EAAAA,IACjCnH,cAAe3kE,IACTkiE,EAAWliG,KAAO+rG,EAAAA,KAA0B7J,EAAWliG,KAAO8rG,EAAAA,MA1B/DvpB,EAAQviF,IA8BjB,OAAI+sG,GAEA5sG,EAAAA,GAAAA,GAAC8sG,GAAAA,EAAiB,CAAChtG,UAAU,sBAAsB8sG,cAAY,EAAA7sG,SAC5D8sG,IAKAA,IAEVhB,IAASG,GAAkBD,KAC1BnsG,EAAAA,GAAAA,IAACgO,EAAAA,EAAM,CACL9N,UAAU,wCACVwS,OAAK,EACLzE,MAAM,cACNE,QAAS+9F,GAAO/rG,SAAA,CAEjB,IAEEisG,GAAkBD,KAHf,WAQTlC,KACC7pG,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZvuB,KAAM/H,EAAKq7F,EAAmB,mCAAqC,mCACnEz8F,OAAQooF,GACRloF,QAASooF,GACT1wD,eAAgBinE,GAChBhnE,sBAAoB,MAtKnBu+D,EAAWliG,OAqLtB,SAAS4pG,GAAuB7+E,GAC9B,OAAOA,EAxXyB,IAHH,EA6XxBA,EAzXgC,IAFI,EADL,CA+XtC,CCpdA,SAAyC,WAAzC,GAAgE,WAAhE,GAA+I,WAA/I,GAA6K,WAA7K,GAAuM,WAAvM,GAA0P,WCkGpPmiF,GAAsB,IAAMn3F,EAAAA,EAM5Bo3F,GAAuB,IAAI5+D,IAAI,CAAC07D,EAAAA,IAAsBI,EAAAA,IAAwBE,EAAAA,MAC9E6C,GAA6B,IAAI7+D,IAAI,CACzC07D,EAAAA,IACAI,EAAAA,IACAE,EAAAA,MAqXF,IAAezrG,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,SAAQ23F,iBAAgBiE,uBACjC,MACEllB,UACEgqB,SAAUC,GAEZC,cACEzmE,KAAM0mE,EACNC,YAAaC,EACbC,cACEC,OAAQC,IAGZC,mBAAoBC,EACpB1pD,WAAW,mBACTD,EAAkB,gBAClB4pD,EAAe,aACfC,EAAY,YACZC,IAEA1sG,EAEE4tD,EAAkBlkD,QAAQyB,IAAU8nB,EAAAA,EAAAA,KAAqBjzB,EAAQmL,IACjEskD,EAAetkD,GAASukD,EAAAA,EAAAA,KAAmB1vD,EAAQmL,QAAU3J,EAC7DilG,EAAsBzmG,EAAO0mG,0BAA0BC,SAE7D,MAAO,CACLqF,mBACAO,qBAAuBzJ,OAAwCthG,EAAvB+qG,EACxCF,mBAAoBvJ,EAAiBuJ,OAAqB7qG,EAC1DilG,oBAAqB3D,EAAiB2D,OAAsBjlG,EAC5DsqG,kBACAa,oBAAqB3sG,EAAO+rG,aAAaa,MAAMC,OAC/CC,YAAYC,EAAAA,EAAAA,KAA4B/sG,GACxC4tD,kBACApvB,sBAAsB0B,EAAAA,EAAAA,KAA2BlgC,GACjDksG,yBACAc,oBAAqBhtG,EAAOgtG,oBAC5BC,qBAAsBjtG,EAAOitG,qBAC7BR,aAAc1F,EAAmB0F,OAAejrG,EAChDgrG,gBAAiBzF,EAAmByF,OAAkBhrG,EACtD0rG,eAAgBz9C,GAAc09C,UAAU3uG,GACxC4uG,mBAAoBrG,GAAoBt3C,GAAc49C,wBACtDzqD,mBAAoBmkD,EAAmBnkD,OAAqBphD,EAC5D8rG,oBAAqBvG,EAAmB2F,OAAclrG,IA5CxC8L,CAlXiCigG,EACnD9uG,YACA+uG,sBACAv5F,WACA6xF,cACA6G,sBACAX,mBACAO,uBACArF,sBACAmF,qBACA5F,sBACAqF,kBACAoB,iBACAT,eACAD,kBACA5pD,qBACAg8C,WA3BwB,mBA4BxBsN,yBACAY,aACA/F,mBACAjE,iBACAwE,gBACA15C,kBACApvB,uBACAivE,wBACAT,sBACAC,uBACAK,sBACAF,qBACAM,sBACAlG,mBACAC,oBACAhE,oBACAC,qBACAC,yBAEA,MAAM17E,GAAejgB,EAAAA,EAAAA,MACfqsE,GAAYrsE,EAAAA,EAAAA,MACZ64F,GAAkB74F,EAAAA,EAAAA,MAClB+9F,GAAoB/9F,EAAAA,EAAAA,OAEpB,SAAEjK,IAAaC,EAAAA,EAAAA,OAEnBwkD,aAAcmrD,EACdvrD,cAAewrD,GACb1rD,KAEEoqD,GAAqB5lG,EAAAA,EAAAA,IAAQ,IAC1Bo8F,EACHuJ,EACA7qD,OAAO0K,QAAO2hD,EAAAA,GAAAA,IAAW7B,EAAmBO,IAC/C,CAACP,EAAkBlJ,EAAgByJ,EAAsBF,IAEtDyB,GAA0BpnG,EAAAA,EAAAA,IAAQ,KACtC,MAAMqnG,EAA4BtH,GAAqBr0F,IAAK0xC,GAAWA,EAAOqqC,YAC9E,OAAO6d,GAAoB+B,GAA2B37F,IAAK5T,GAAOwtG,EAAiBxtG,IAAK89B,OAAO5yB,UAC9F,CAACsiG,EAAkBvF,IAEhBuH,GAAS,GAAGpP,kBACZ,eACJE,GAAc,0BACdG,GAAyB,mCACzBkB,GAAkC,mCAClCL,GAAkC,6BAClCM,GAA4B,iBAC5B/R,IACEsQ,GAA0B12E,EAAcosD,EAAW25B,GAAQ/5F,GAEzDg6F,IAAiB9+D,EAAAA,GAAAA,GAAuB22D,QAAetkG,EAAWi9F,EAAAA,KAElEvoD,IAAUvqC,EAAAA,EAAAA,KACVD,IAAOyqC,EAAAA,GAAAA,KAEP+3D,GAAiBxkG,QAAQijG,GAEzBwB,IAAUznG,EAAAA,EAAAA,IAAQ,KACtB,MAAM0nG,EAAkD,GAexD,GAbIrH,GAAoBn5C,GAClB0/C,GAAqBhtG,QACvB8tG,EAAYz8F,KAAK,CACfnT,GAAI6vG,EAAAA,IACJpE,WAAY,GACZn+F,MAAOoqC,GAAQ,sBACf2M,UAAWyqD,EACXv7E,MAAOu7E,EAAoBhtG,OAC3B0oG,SAAS,IAKXjC,IAAqBn5C,EAAiB,CACxC,MAAM0gD,EAA2C7B,GAAc//D,MAAM,EAtG/C,KAsG0E,GAC5F0gE,GACFkB,EAAkBC,QAAQ,CAAE1uG,KAAM,SAEhCyuG,GAAmBhuG,QACrB8tG,EAAYz8F,KAAK,CACfnT,GAAI6vG,EAAAA,IACJpE,WAAY,GACZn+F,MAAOoqC,GAAQ,aACf2M,UAAWyrD,EACXv8E,MAAOu8E,EAAkBhuG,OACzB0oG,SAAS,IAIb,MAAMwF,GAAwBhC,GAAmB,IAC9ClwE,OAAQyV,IAAcu8D,EAAkBnpB,KAAMspB,IAAgBr9D,EAAAA,EAAAA,IAAeq9D,EAAa18D,KAC1FrF,MAAM,EAtHgB,IAuHnBgiE,GAA2B9rD,GAAsB,IACpDtmB,OAAO,EAAGqyE,iBAAkBA,GAC5Bv8F,IAAI,EAAG2/B,cAAeA,GACtBzV,OAAQyV,IACCu8D,EAAkBnpB,KAAMspB,IAAgBr9D,EAAAA,EAAAA,IAAeq9D,EAAa18D,MACtEy8D,EAAqBrpB,KAAMspB,IAAgBr9D,EAAAA,EAAAA,IAAeq9D,EAAa18D,KAEjF,GAAI28D,GAAyBpuG,QAAUkuG,GAAsBluG,OAAQ,CACnE,MAAMwoG,GAAa0F,GAAsBluG,OACnCsuG,EAAqBJ,EAAqBzb,OAAO2b,GACvDN,EAAYz8F,KAAK,CACfnT,GAAIsqG,EAAYC,EAAAA,IAAwBN,EAAAA,IACxCwB,WAAY,GACZn+F,MAAOoqC,GAAQ4yD,EAAY,mBAAqB,kBAChDjmD,UAAW+rD,EACX78E,MAAO68E,EAAmBtuG,OAC1B0oG,SAAS,GAEb,CACF,MAAO,GAAIlG,EAAgB,CACzB,MAAM+L,EAAyB/C,EAAgBmB,GAC/C,GAAI4B,GAAwBhtB,UAAUvhF,OAAQ,CAC5C,MAAMuhF,GAAWitB,EAAAA,GAAAA,IAAcD,EAAuBhtB,SACnDn1C,MAAM,EA7ImB,GA8IzBqmD,OAAOuZ,GAAsB,IAAK,MACrC8B,EAAYz8F,KAAK,IACZk9F,EACHhtB,WACA9vD,MAAO8vD,EAASvhF,OAChB9B,GAAIiqG,EAAAA,IACJ38F,MAAOoqC,GAAQ,kBACf8yD,SAAS,GAEb,CACI8E,GAAyBxtG,QAC3B8tG,EAAYz8F,KAAK,CACfnT,GAAImqG,EAAAA,IACJsB,WAAY,GACZl4E,MAAO+7E,EAAwBxtG,OAC/BuhF,SAAUisB,EACVhiG,MAAOJ,GAAK,+BACZs9F,SAAS,GAGf,MAAO,GAAIyE,EAAuB,CAChC,MAAMsB,EAAwBjD,EAAgBkB,GAC1C+B,EAAsBltB,UAAUvhF,QAClC8tG,EAAYz8F,KAAK,IACZo9F,EACHvwG,GAAIiqG,EAAAA,IACJ38F,MAAOoqC,GAAQ,mBAGrB,MAAWo2D,GAAoBhsG,QAC7B8tG,EAAYz8F,KAAK,CACfnT,GAAIiqG,EAAAA,IACJwB,WAAY,IACZn+F,MAAOoqC,GAAQ,kBACf2rC,SAAUyqB,EACVv6E,MAAOu6E,EAAmBhsG,OAC1B0oG,SAAS,IAIb,MAAMgG,EAAa,IAAKrC,GAAuB,IAC3CO,GACF8B,EAAWT,QAAQrB,GAGrB,MAAM+B,GAAkBrsE,EAAAA,GAAAA,IAAOosE,EAAWjc,OAAOmZ,GAA0B,KAErEgD,EAAgB1tD,OAAO0K,QAAO2hD,EAAAA,GAAAA,IAAW/B,EAAiBmD,IAEhE,MAAO,IACFb,KACAc,IAEJ,CACDvC,EAAqB5F,EAAkBjE,EAAgB2K,EAAuBnB,EAC9EJ,EAAwBJ,EAAiBW,EAAc7pD,EAAoB1M,GAASs2D,EACpFS,EAAsBD,EAAqBp/C,EAAiB0/C,EAAqBJ,EACjFE,EAAoBU,EAAyBpiG,KAGzCyjG,IAAkBzoG,EAAAA,EAAAA,IAAQ,IAC9BwnG,IAC4D,IAAzDC,GAAQ7xE,OAAQhzB,GAAQA,EAAIu4E,UAAUvhF,QAAQA,OAChD,CAAC6tG,GAASD,KAEPkB,IAAmBC,EAAAA,GAAAA,GAAkB,GAAI5Q,EAAAA,KACzC6Q,GAAsBpB,IAAkBkB,KAAqBD,IAEnE5yB,EAAAA,GAAAA,GAAoBlI,EAAWt2E,IAAauxG,KAG5CpmG,EAAAA,EAAAA,IAAU,KACR,IAAKglG,GACH,OAGF,MAAMlnE,EAASqtC,EAAUlsE,QACzB,IAAK6+B,EACH,OAGF,MAAMuoE,EAAUzQ,GAAiB4M,IAAuB1kE,EAAO2I,YAAc,EAAI+7D,GAAsB,IAEvG1gB,EAAAA,GAAAA,GAAwBhkD,EAAQuoE,IAC/B,CAACrB,GAAgBpP,KAEpB,MAAM0Q,IAAoBtkG,EAAAA,EAAAA,GAAiBwmF,IACzCgc,EAAoBhc,KAkEhBphD,IAAgBx7B,EAAAA,GAAAA,GAAe,gBC9YhB,WD8Y8CrW,GAC7DgxG,IAAkB36F,EAAAA,GAAAA,GACtB46F,GACA,gBACC9B,GAAuB8B,IAEpBC,IAAgB76F,EAAAA,GAAAA,GACpB46F,GDrZ0F,WCuZ1Fv7F,EAAAA,GAAe,eAAiB,gBAChCq5F,EACAkC,IAGIp8E,IAAag8E,KAAwBH,GAE3C,OACExwG,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CAACn9B,UAAW6xC,GAAepkC,KAAK,OAAO2vB,UAAWvI,GAAY,EAAI,EAAGs8E,eAAa,EAAAlxG,SACzF4wG,IAAwBH,IAErBG,IAAuBH,IAC1BxwG,EAAAA,GAAAA,GAAA,OAAKF,UAAWixG,GAA4BhxG,SAAEw3C,GAAQ,iBAEtD33C,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OACEiU,IAAKyhE,EACL51E,UAAWgxG,GAAgB/wG,UAE3BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,0BAAyBC,SAAA,EACtCC,EAAAA,GAAAA,GAAA,UAAQiU,IAAKiuF,EAAiBpiG,UAAU,mBACxCE,EAAAA,GAAAA,GAAA,UAAQiU,IAAKmzF,EAAmBtnG,UAAU,kBACzC0vG,GAAQ/7F,IA9FrB,SAAqBsuF,EAA8Cv9F,GACjE,MAAM0sG,EAAenP,EAAW7e,WAAW,GACrC3C,GAAkBpqE,EAAAA,GAAAA,GACtB46F,GACAvsG,IAAU27F,ICnV8B,YDsVpCgR,EAAmB3sG,EAAQ4sG,EAAAA,IAC3BC,GAAO3N,EAAAA,EAAAA,MAAgCx3D,EAAAA,EAAAA,MAAa61D,GAE1D,GAAIA,EAAWliG,KAAO6vG,EAAAA,IAAtB,CAIA,GAAIzC,GAA2B/+D,IAAI6zD,EAAWliG,KAAOkiG,EAAWI,eAAiB+O,EAAc,CAC7F,MAAMrH,EAAW9H,EAAWliG,KAAOiqG,EAAAA,KAAwB/H,EAAWliG,KAAOuqG,EAAAA,IACvEkH,EAAUtE,GAAqB9+D,IAAI6zD,EAAWliG,IACpD,OACEG,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAEL9N,UAAWygF,EACXhuE,UAAWwvF,EAAW50F,MACtBmF,OAAK,EACLi2C,MAAO+oD,EACPzjG,MAAM,cAENE,QAASA,IAAM2hF,GAAiBma,EAAW,EAAIrlG,GAAOzE,SAErD8pG,GACC7pG,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,YAEXvN,EAAAA,GAAAA,GAAC8hG,GAAe,CACdC,WAAYA,EACZxhF,QAAS4tF,IAAemB,GACxBrnF,eAAa,EACbg6E,oBAAqBR,GACrBS,gBAAiBiP,EAAoBE,EAAOjK,EAAoBlF,OAAmBr/F,KAjBlFk/F,EAAWliG,GAsBtB,CAEA,OACEG,EAAAA,GAAAA,GAACikG,GAAa,CAEZ7hB,QAAS8uB,EACThxG,KAAM8hG,EAAAA,IACN70F,MAAO40F,EAAW50F,MAClBrN,UAAWygF,EACXhgE,QAAS4tF,IAAemB,GACxBrN,oBAAqBR,GACrByC,eAAa,EACbrkE,sBAAoB,EACpBqiE,gBAAiBiP,EAAoBE,EAAOjK,EAAoBlF,OAAmBr/F,EACnF4hG,qBAAsBkE,EACtB56F,QAAS2hF,GACTgV,SAAUlgG,EACVyjB,eAAa,GAbR85E,EAAWliG,GAjCpB,CAiDF,SAoCQG,EAAAA,GAAAA,GAAA,OACEiU,IAAKqV,EACL0/B,SAAUgmD,EACVlvG,UAAWkxG,GAAcjxG,SAExByvG,GAAQ/7F,IAAI,CAACsuF,EAAYv4C,KACxB,MAAM6+C,EAAmBtG,EAAWliG,KAAO6vG,EAAAA,KACrC3N,EAAWliG,KAAOiqG,EAAAA,MAAyBgF,GAAyB3K,GACpEsE,EAAiB1G,EAAWliG,KAAO0uG,EAEzC,OACEvuG,EAAAA,GAAAA,GAACioG,GAAU,CAETlG,WAAYA,EACZoF,YAAap8F,QAAQojG,GAAcmB,IACnC9qG,MAAOglD,EACPy2C,SAAUoP,GACVpN,oBAAqB3B,GACrBkB,mCAAoCA,GACpCL,mCAAoCA,GACpC+G,aAAc/H,IAAkB32C,EAAI,GAAK22C,IAAkB32C,EAAI,EAC/DyF,gBAAiBA,EACjBk1C,eAAgBA,EAChBiE,iBAAkBA,EAClBC,iBAAkBA,EAClBC,qBAAsBwG,GAAyB/M,EAAWliG,KAAOiqG,EAAAA,IACjEtB,sBAAuBrE,GAAkBpC,EAAWliG,KAAOiqG,EAAAA,IAC3DrB,eAAgBA,EAChB5oE,qBAAsBA,EACtB0oE,oBAAqBA,EACrBtkD,mBAAoBA,EACpB0kD,cAAeA,EACfE,iBAAkBA,EAClBC,kBAAmBA,EACnBC,gBAAiB8H,GACjB/L,kBAAmBA,EACnBC,mBAAoBA,EACpBC,mBAAoBA,EACpB/8E,eAAa,GA1BR85E,EAAWliG,YA3B1BG,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,S,eEjahB,MCmFA,IAAe9wD,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAsBtN,IACjC,CACLkwG,0BAA2BxmG,QAAQ1J,EAAO+rG,aAAaE,aAAa3rG,QACpEgnG,eAAe6I,EAAAA,EAAAA,KAA+BnwG,KAH9BsN,CAtDgC8iG,EAClD9lG,SACA+lG,kBACAH,4BACA5I,gBACAgJ,sBACA9lG,cAEA,MAAM,0BAAE+lG,IAA8B5lG,EAAAA,EAAAA,MAEhC6lG,GAAmBxoG,EAAAA,EAAAA,OAClByoG,EAAoBC,EAAsBC,IAA0B/yG,EAAAA,EAAAA,MAC3EsL,EAAAA,EAAAA,IAAU,KACRsnG,EAAiBroG,QAAUkoG,EAAgBloG,QAAS2S,wBAAwBiH,OAC3E,CAACzX,EAAQ+lG,KAEZnnG,EAAAA,EAAAA,IAAU,KACJoB,IAAW4lG,GACbK,KAED,CAACL,EAA2B5lG,EAAQimG,IAEvC,MAAMf,GAAoBlxG,EAAAA,EAAAA,IAAayiF,IACrCuvB,EAAoBvvB,GACpBv2E,KACC,CAACA,EAAS8lG,IAEb,OACE3xG,EAAAA,GAAAA,GAACiyG,GAAAA,EAAM,CAAAlyG,UACLC,EAAAA,GAAAA,GAAC+f,GAAAA,EAAI,CACHpU,OAAQA,EACRumG,WAAS,EACT1+F,UAAU,QACV2+F,gBD9DsB,WC+DtBtmG,QAASA,EACTgmG,iBAAkBA,EAAiBroG,QACnC4oG,kBAAmBN,EAAmB/xG,UAEtCC,EAAAA,GAAAA,GAAC4uG,GAAiB,CAChB3O,SAAS,oBACTkH,YAAax7F,EACb2J,UAAW3J,EACXw4F,gBAAc,EACdwE,cAAeA,EACf7D,kBAAmBiN,EACnBhN,mBAAoBiN,EACpBjD,oBAAqB8B,EACrB7L,mBAAoBn5F,W,gBC5E9B,MC+BMwmG,GAAoB,EAAIz8F,EAAAA,EAuG9B,IAAejX,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAU8mC,YAIF,CACL0tB,aAJkBzhB,EAAAA,EAAAA,KAAW/yC,EAAQA,EAAO+yB,eAK5Cy+B,IAJU1qB,GAAOquB,OAAQpiB,EAAAA,EAAAA,KAAW/yC,EAAQ8mC,EAAMquB,YAAS3zD,IAH7C8L,CArGS2jG,EAAGnqE,QAAO0tB,cAAahD,UAClD,MAAM,eAAEqyC,EAAc,0BAAEqN,EAAyB,gBAAEC,IAAoBxmG,EAAAA,EAAAA,MAEjEe,GAAOyqC,EAAAA,GAAAA,KAEP7rC,EAASZ,QAAQo9B,GACjBsqE,GAAiBtiE,EAAAA,GAAAA,GAAiBhI,GAElCuqE,GAAqB3qG,EAAAA,EAAAA,IAAQ,KACjC,GAAK8tD,GAAgB48C,EACrB,MAAO,IACF58C,EACHy5B,YAAa,CACXpuF,KAAM,UACNsuF,WAAYijB,EAAevmC,iBAG9B,CAACrW,EAAa48C,IAEXrmG,GAAcrE,EAAAA,EAAAA,IAAQ,KAC1B,IAAK0qG,IAAmB5/C,EAAK,OAE7B,MAAMmN,GAAUn2B,EAAAA,EAAAA,IAAgBgpB,GAEhC,OAAI4/C,EAAet5F,SACVpM,EAAK,wBAAyB,CACnC8lD,IAAKmN,EACL7mD,UAAUw5F,EAAAA,GAAAA,IAAoB5lG,EAAM0lG,EAAet5F,WAClD,CACDulC,WAAW,EACXgV,cAAc,IAIX3mD,EAAK,qBAAsB,CAAE8lD,IAAKmN,GAAW,CAAEthB,WAAW,EAAMgV,cAAc,KACpF,CAACb,EAAK9lD,EAAM0lG,IAETz3E,GAAczuB,EAAAA,EAAAA,GAAgB,KAClC,MAAMw7D,EAAY0qC,GAAgB1qC,UAE9BA,GACFyqC,EAAgB,CACdzqC,YACAj5C,MAAO,CACLg8C,UAAW,sBACXC,UAAW,CACTx/B,MAAO,oBAMfgnE,MAGIK,GAAkBrmG,EAAAA,EAAAA,GAAgB,KACtC,IAAKkmG,EAAgB,OAErB,MAAMI,EAAUJ,EAAet5F,UAAW6oB,EAAAA,GAAAA,MAAkBywE,EAAet5F,cAAWtW,EAEtFqiG,EAAe,CACb4N,kBAAmBL,EAAe1qC,UAClCunB,YAAa,CAAEpuF,KAAM,UAAWsuF,WAAYijB,EAAevmC,cAAeo6B,MAAOuM,KAEnFN,MAGF,OACE3yG,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQA,EACR02B,iBDvGoB,WCwGpB0wE,wBAAsB,EACtBzwE,QAAM,EACNz2B,QAASmvB,EAAYj7B,SAAA,CAEpB0yG,IACCzyG,EAAAA,GAAAA,GAACsyF,GAAAA,EAAW,CACVxyF,UD9GsC,WC+GtC0vF,WAAYijB,EAAevmC,cAC3BhsE,KAAMmyG,GACNW,UAAW,EACXnP,aAAW,KAGfjkG,EAAAA,GAAAA,IAAA,OAAAG,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAIF,UDtHgF,WCsHxDC,SAAEgN,EAAK,8BACnC/M,EAAAA,GAAAA,GAAA,KAAGF,UDvH8D,WCuHhCC,SAAEqM,OAEpCsmG,IACC1yG,EAAAA,GAAAA,GAACizG,GAAAA,EAAQ,CACPC,SAAUR,EACVS,iBAAe,KAGnBnzG,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACG,QAAS6kG,EAAgB7yG,SAC9BgN,EAAK,0B,4BChId,SAA2F,WCgV3F,SAASqmG,GAAuBC,EAAwB7mG,GACtD,OAAO6mG,EAAS79D,KAAM89D,IAAWA,EAAM9mG,SAClC6mG,EAAS11E,OAAQgqB,GAAMn7C,GAAUm7C,EAAEn7C,SAAWA,GAC9Ci7C,KAAK,CAACC,EAAGC,IAAMD,EAAEz0B,KAAO00B,EAAE10B,MAAM,EACvC,CAMA,UAAet0B,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAU8mC,YACT,MAAMj5B,EAAOi5B,IAASkM,EAAAA,EAAAA,KAAWhzC,EAAQ8mC,GAAO37B,QAC1CskD,EAAe5hD,IAAQ6hD,EAAAA,EAAAA,KAAmB1vD,EAAQ6N,EAAKrP,IACvD0zG,EAAaprE,GAAOkrE,UAAYD,GAAuBjrE,EAAMkrE,SAAUlrE,EAAM37B,QAGnF,MAAO,CACL0C,OACA4hD,eACA0iD,gBALkBD,GAAY/mG,QAAS6nC,EAAAA,EAAAA,KAAWhzC,EAAQkyG,GAAY/mG,aAAU3J,EAMhFg9B,sBAAsB0B,EAAAA,EAAAA,KAA2BlgC,KAXnCsN,CAhSD8kG,EACjBtrE,QACAj5B,OACA4hD,eACA0iD,kBACA3zE,2BAEA,MAAM,WACJ6zE,EAAU,gBACVC,EAAe,gBACf/iB,EAAe,iBACfhvD,EAAgB,aAChBgyE,IACE5nG,EAAAA,EAAAA,OAEG6nG,EAAoBC,EAAkBC,IAAqB90G,EAAAA,EAAAA,MAC3D+0G,EAAkBC,EAAgBC,IAAmBj1G,EAAAA,EAAAA,MACrDk1G,EAAqBC,EAAmBC,IAAsBp1G,EAAAA,EAAAA,KAE/Du0B,EAAYtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,GAElCvD,EAASZ,QAAQo9B,GAEjBoP,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,MAEbjtC,EAAAA,EAAAA,IAAU,KACJ2E,IAAS4hD,GACX8iD,EAAa,CAAEpnG,OAAQ0C,EAAKrP,MAE7B,CAACqP,EAAM4hD,IAEV,MAAMwjD,GAAYvsG,EAAAA,EAAAA,IAAQ,KACxB,GAAKmH,EAIL,OAAOijD,EAAAA,EAAAA,IAAa5a,EAASroC,IAC5B,CAACA,EAAMqoC,IAEJg9D,GAAmBxsG,EAAAA,EAAAA,IAAQ,KAC/B,GAAKyrG,EAIL,OAAOrhD,EAAAA,EAAAA,IAAa5a,EAASi8D,IAC5B,CAACA,EAAiBj8D,KAEf,eACJi9D,EAAc,UACdC,EAAS,MACTnB,EAAK,MACLnmG,EAAK,SACLunG,EAAQ,UACRC,EAAS,MACThoG,EAAK,SACLiH,EAAQ,gBACRghG,EAAe,aACfC,IACa9sG,EAAAA,EAAAA,IAAQ,KACrB,IAAKogC,GAAO2sE,cAAgB5lG,EAC1B,MAAO,CACLslG,gBAAgB,EAChBrnG,MAAOoqC,EAAQ,YAInB,MAAM,WACJw9D,GACE5sE,EAAM2sE,YAEJvB,EAAaprE,GAAOkrE,UAAYD,GAAuBjrE,EAAMkrE,SAAUnkG,EAAKrP,IAC5Em1G,EAA+B7sE,GAAOkrE,WAoNjBA,EApNoDlrE,EAAMkrE,SAoNlC7mG,EApN4C0C,EAAKrP,IAqN/FwzG,EAAS4B,MAAO3B,GAAUA,EAAM9mG,SAAWA,IADpD,IAA+B6mG,EAAwB7mG,EAlNnD,MAAM,OACJmxF,EAAM,aACNuX,EAAY,aACZC,EAAY,cACZC,EAAa,gBACbC,EAAe,WACfC,IACEC,EAAAA,GAAAA,GAAqBptE,EAAM2sE,aAAa,GAEtCU,EAAWT,EAEXj5F,EAAOy7B,EAAQ,cAAe29D,GAC9B9xF,EAAQ+xF,EAAe59D,EAAQ,cAAe29D,EAAe,QAAKryG,EAElE4yG,EAAal+D,EAAQ,0BAA2B89D,GAEhDK,EAAyBn+D,EAAZ/jB,EAAoB,eAA0B,cAE3DmiF,GAA0B7kD,GAAc8kD,oBAAsB,IAAM9kD,GAAc+kD,eAAiB,GAEzG,IAAIzpG,EACJ,GAAIkpG,EACFlpG,EAAcmrC,EAAQ,8BACjB,GAAIo+D,EAAyB,KAAMnhF,EAAAA,EAAAA,IAAYtlB,GAAO,CAC3D,MAAM4mG,EAAav+D,EAAQ,qCAAsCo+D,GACjEvpG,EAAcmrC,EAAQ,+BAAgC,CAACu+D,EAAYxB,GACrE,MACEloG,EAAcmrC,EAAQ,qCAAsC,CAAC+8D,EAAWmB,IAG1E,MAAO,CACLjB,gBAAgB,EAChBrnG,MAAOuoG,EACPhB,SAAU54F,EACV64F,UAAWvxF,EACXzW,MAAOgxF,EAAO7Q,WACdl5E,SAAUwhG,EACVC,kBACAT,gBAAiBxoG,EACjBknG,MAAOC,EACPkB,UAAWe,EACXX,aAAcG,IAAiCM,IAEhD,CAACpmG,EAAMolG,EAAWnsE,EAAOoP,EAASuZ,EAAct9B,IAE7CuiF,GAAmB5tE,GAAOkrE,UAAU1xG,QAAUk+B,EAC9Cm2E,EAAmB1C,GAAO9mG,QAAU8mG,EAAM9mG,SAAW27B,GAAO37B,OAE5DypG,GAAmB1pG,EAAAA,EAAAA,GAAgB,KACvCwnG,IACAL,EAAW,CAAElnG,OAAQ0C,EAAMrP,GAAIq2G,MAAO,CAAC5C,EAAO6C,QAC9CvlB,EAAgB,CAAC,KAGbwlB,GAAuB7pG,EAAAA,EAAAA,GAAgB,KAC3Cq1B,IACAyyE,IACAV,MAGI0C,GAAoB9pG,EAAAA,EAAAA,GAAgB,KACxC,IAAK+mG,EACH,OAAKzzE,OAKL8zE,SAJES,IAQCS,EAKDvB,EAAMrxE,cACRgyE,IAIE+B,EACFlC,IAIFmC,IAdEtC,MAiBE/zC,GAAmBrzD,EAAAA,EAAAA,GAAgB,KACvConG,MA0CF,OACE/zG,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQA,EACRwB,MAAOA,EACPrN,UD5QuC,WC6QvCuiC,iBD7QoB,WC8QpBx2B,QAAS8nG,EAAgB5zG,SAAA,CA5CtBy0G,GAKH50G,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAACs2G,GAAAA,EAAe,CACd5B,SAAUA,EACVC,UAAWA,EACX/gG,SAAUA,EACV2iG,kBAAmB5pG,EACnBg1E,kBAAkB,UAEnB8yB,IACCz0G,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,GDhPoE,YCgPnCzd,SAC7Dw3C,EAAQ,qCAAsC+8D,MAGnDt0G,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAmBzd,UAChCi0B,EAAAA,GAAAA,GAAW4gF,EAAiB,CAAC,kBAAmB,aAEnDh1G,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACE,QAAM,EAAChO,UAAU,wBAAwBqgB,SAAU41F,EAAiBhoG,QAASsoG,EAAkBt2G,SACpG80G,GACCj1G,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,UACVgqC,EAAQ/jB,EAAY,4BAA8B,4BAEnD+jB,EAAQ,SAEdv3C,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACE,QAAM,EAAChO,UAAU,wBAAwBiO,QAAS6xD,EAAiB7/D,SACxEw3C,EAAQ,mBA9BRv3C,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,CAAC3vD,UDnO4C,aCiR3Dk2G,GAAoBzB,IACnB30G,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQkoG,EACR/zG,UDpR+I,WCqR/IuiC,iBDrRgL,WCsRhLx2B,QAASkoG,EAAkBh0G,SAAA,EAE3BH,EAAAA,GAAAA,IAAA,OAAKE,UDxRwM,WCwRtKC,SAAA,EACrCH,EAAAA,GAAAA,IAAA,OAAKE,UDzRqP,WCyRpNC,SAAA,EACpCC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CAACC,KAAMy/E,EAAiBtzG,KAAK,WACpCF,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,cAAczN,UD3RwP,iBC6RnRE,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,OAAOzN,UD7R4M,cC8R9NE,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CAACC,KAAM7kB,EAAMhP,KAAK,cAE3BF,EAAAA,GAAAA,GAAA,OAAAD,UACGi0B,EAAAA,GAAAA,GACCujB,EAAQ,4BAA6B,CAACg9D,EAAkBD,IAAa,CAAC,kBAAmB,aAG7F10G,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACE,QAAM,EAAChO,UAAU,wBAAwBiO,QAASkoG,EAAiBl2G,SACxEw3C,EAAQ,cAEXv3C,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACE,QAAM,EAAChO,UAAU,wBAAwBiO,QAASgmG,EAAkBh0G,SACzEw3C,EAAQ,kBAKhBxsC,QAAQuoG,GAAOrxE,iBACdjiC,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQqoG,EACRwC,eAAa,EACblzE,aAAciU,EAAQ,MACtBpqC,MAAOoqC,EAAQ,yCACf1rC,QAASqoG,EACT3wE,eAAgB2wE,EAAgBn0G,UAE/Bi0B,EAAAA,GAAAA,GACCujB,EACE,wCACAo7D,EAAAA,GAAAA,IAAoB5lG,EAAMumG,EAAMrxE,eAAgBD,EAAAA,GAAAA,QAElD,CAAC,kBAAmB,aAIxBnC,IACA7/B,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQwoG,EACR7wE,aAAciU,EAAQ,cACtBpqC,MAAOoqC,EAAQ,iBACf1rC,QAASwoG,EACT9wE,eAAgB6yE,EAAqBr2G,UAEpCi0B,EAAAA,GAAAA,GAAWujB,EAAQ,4BAA6B,CAAC,kBAAmB,kB,4BCzU/E,SAAkD,WCsIlD,IAAe54C,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAU8mC,YACT,MAAM,QAAEvnC,GAAYunC,GAAS,CAAC,EACxBsuE,EAAc71G,IAAWm0B,EAAAA,EAAAA,KAAkB1zB,EAAQT,EAAQ4L,OAAQ5L,EAAQ6X,WAC3E61B,EAASmoE,IAAetkF,EAAAA,EAAAA,KAAa9wB,EAAQo1G,GAEnD,MAAO,CACLriF,cAAe/yB,EAAO+yB,cACtBlC,cAAeoc,IARD3/B,CAtGE+nG,EACpBtiF,gBACA+T,QACAjW,oBAEA,MAAM,mBACJykF,EAAkB,cAAEC,EAAa,aAAErkF,IACjCvmB,EAAAA,EAAAA,MACEe,GAAOC,EAAAA,EAAAA,KACPrB,EAASZ,QAAQo9B,GAEjB0uE,IAAW1uE,GAAOtR,KAAKigF,MAAQ3uE,GAAOtR,KAAKigF,OAAS1iF,GAAmB+T,GAAOtR,KAAKkgF,QAEnFC,GAAqBzqG,EAAAA,EAAAA,GAAgB,KACpC47B,GAAUA,EAAMtR,KAAKogF,oBAC1B1kF,EAAa,CACX/lB,OAAQ27B,EAAMtR,KAAKif,OACnBr9B,UAAW0vB,EAAMtR,KAAKogF,oBAExBN,OAGIN,GAAoB9pG,EAAAA,EAAAA,GAAgB,KACpCsqG,EACFD,EAAc,CAAE/qC,KAAM1jC,EAAO0jC,OAG/B8qC,MAGIO,GAAYnvG,EAAAA,EAAAA,IAAQ,KACxB,IAAKogC,EAAO,OACZ,MAAM,KAAE0jC,EAAI,KAAEh1C,GAASsR,EAEjB2N,EAASjf,EAAKif,QAAU5jB,GAAeryB,GAEvCwoC,GACJzoC,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAK8D,IAAK45F,GAAan1E,IAAI,GAAGzoB,UDtE8B,cCuE5DE,EAAAA,GAAAA,GAAA,KAAGF,UAAW0d,GAAgBzd,UAAEi0B,EAAAA,GAAAA,GAAWjnB,EAAK,uBAAwB,CAAC,uBACzE/M,EAAAA,GAAAA,GAACm3G,GAAAA,EAAS,CAAChqG,MAAM,mBAAmB8lF,KAAM,GAAGpmB,EAAAA,gBAAoChB,SAI/EurC,EAAuB,CAC3B,CAACrqG,EAAK,gBAAiB+oC,EAAS,CAAEtpC,OAAQspC,GAAW/oC,EAAK,wBAC1D,CAACA,EAAK,cAAe8pB,EAAKigF,KAAO,CAAEtqG,OAAQqqB,EAAKigF,MAAS/pG,EAAK,wBAC9D,CAACA,EAAK,gBAAiBA,EAAK,6BAA8BA,EAAK,SAAU8pB,EAAKi1D,OAAQ,QAgCxF,OA9BIj1D,EAAKwgF,gBACPD,EAAUpkG,KAAK,CACbjG,EAAK,mBAEH/M,EAAAA,GAAAA,GAAA,QACEF,WAAWqW,EAAAA,GAAAA,GAAe0gB,EAAKogF,mBDtFf,YCuFhBlpG,QAASipG,EAAmBj3G,SAE3B82B,EAAKwgF,iBAAmBxgF,EAAKigF,KAC1B/pG,EAAK,8BACLA,EAAK,wBAKjBqqG,EAAUpkG,KAAK,CACbjG,EAAK,iBACL0wF,EAAAA,GAAAA,IAAmC,IAAZ5mE,EAAK5D,KAAalmB,EAAKguD,MAAM,KAa/C,CACL1yB,SACA+uE,YACArtE,QAZA/pC,EAAAA,GAAAA,GAAA,QAAMF,UAAW0d,GAAgBzd,UAC9Bi0B,EAAAA,GAAAA,GACC6C,EAAKkgF,OAAShqG,EAAK,wBAAwB0wF,EAAAA,GAAAA,IAAqC,IAAd5mE,EAAKkgF,OAAehqG,EAAKguD,MAAM,IAC7FhuD,EAAK,4BACT,CAAC,wBAUN,CAACA,EAAMmlB,GAAeryB,GAAIsoC,IAE7B,GAAK+uE,EAEL,OACEl3G,EAAAA,GAAAA,GAACs3G,GAAAA,EAAc,CACb3rG,OAAQA,EACRwB,MAAOJ,EAAK,uBACZqqG,UAAWF,EAAUE,UACrB/uE,OAAQ6uE,EAAU7uE,OAClB0B,OAAQmtE,EAAUntE,OAClBh1B,WAAqBhI,EAAT8pG,EAAc,kBAA0B,SACpD5gG,cAAeogG,EACfxqG,QAAS8qG,OClIR,SAASY,GAAgBC,EAAe7qG,GAC7C,OAAO6qG,EAAIl1D,OAAO,CAAC0f,EAAMy1C,IAChBvkG,KAAKya,IAAI8pF,EAAO9qG,GAASuG,KAAKya,IAAIq0C,EAAOr1D,GAAS8qG,EAAOz1C,EAEpE,CCHA,MC2GA,IAAerjE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAU8mC,YACT,MAAM,wBAAEuvE,GAA4BvvE,GAAS,CAAC,EAE9C,MAAO,CACLuvE,4BALc/oG,CAjFOgpG,EACzBxvE,QACAuvE,8BAEA,MAAM,mBACJf,EAAkB,wBAAEiB,EAAuB,cAAEC,IAC3C7rG,EAAAA,EAAAA,MACEe,GAAOyqC,EAAAA,GAAAA,KACP7rC,EAASZ,QAAQo9B,IAEhB2vE,EAAgBC,IAAqB5rG,EAAAA,EAAAA,MAEtC6rG,GAAezrG,EAAAA,EAAAA,GAAiBI,GAdjB,GAeZ2Y,OAAO3Y,IAGVsrG,GAAwBlwG,EAAAA,EAAAA,IAAQ,KACpC,GAAK2vG,EACL,OAAOH,GAAgBW,EAAAA,IAAqBR,EApBzB,IAoBmE5qB,YACrF,CAAC4qB,KAEJntG,EAAAA,EAAAA,IAAU,KACJ0tG,GACFF,EAAkBE,IAEnB,CAACA,IAEJ,MAAMzqG,GAA8CzF,EAAAA,EAAAA,IAAQ,IACnDmwG,EAAAA,IAAoBzkG,IAAKq4E,IAAM,CACpCn/E,MAAOo2C,OAAO+oC,GACd5+E,MAAOH,EAAK,SAAU,CAAEqmB,MAAO04D,GAAU,CAAE7rB,YAAa,OAEzD,CAAClzD,IAEE+gF,GAAevhF,EAAAA,EAAAA,GAAiBI,IACpCorG,EAAkBprG,KAGd42B,GAAiBh3B,EAAAA,EAAAA,GAAgB,KAChCurG,GACLD,EAAc,CAAEM,KAAMH,EAAaF,OAG/BM,GAAiB7rG,EAAAA,EAAAA,GAAgB,KACrCqrG,MAGF,OACEh4G,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQA,EACRwB,MAAOJ,EAAK,qBACZlB,QAAS8qG,EACT72G,UD9EiB,WC8EMC,SAAA,EAEvBC,EAAAA,GAAAA,GAAA,KAAAD,SAAIgN,EAAK,sCACT/M,EAAAA,GAAAA,GAACsN,GAAAA,EAAU,CACTxN,UAAU,wBACVyN,KAAK,0BACLC,QAASA,EACTE,SAAUoqG,EACVrqG,SAAUqgF,EACVuqB,UAAQ,KAEVz4G,EAAAA,GAAAA,IAAA,OACEE,UAAU,sBAAqBC,SAAA,EAE/BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,wBACVgO,QAAM,EACNC,QAASw1B,EAAexjC,SAEvBgN,EAAK,WAER/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACC,MAAM,SAAS/N,UAAU,wBAAwBgO,QAAM,EAACC,QAASqqG,EAAer4G,SACrFgN,EAAK,qBCpGhB,IAAgB,KAAO,WAAW,QAAU,WAAW,OAAS,WAAW,YAAc,WAAW,KAAO,WAAW,SAAW,WAAW,YAAc,YCqF1J,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAYtN,IAC9B,MAAM6yC,EAAY7yC,EAAO6yC,UAIzB,MAAO,CACLokE,qBAJ2BpkE,EAAUokE,qBAKrCjsC,aAJmBn4B,EAAUm4B,cAAgBC,EAAAA,MAH7B39D,CA5DoC4pG,EACtDpwE,QACAmwE,uBACAjsC,mBAEA,MAAM,0BAAEmsC,EAAyB,mBAAEC,IAAuBzsG,EAAAA,EAAAA,MACpDe,GAAOyqC,EAAAA,GAAAA,KACP7rC,EAASZ,QAAQo9B,GAEjBuwE,GAAkBnsG,EAAAA,EAAAA,GAAgB,KAClC+rG,GACFG,EAAmB,CACjBE,oBAAoB,EACpBC,SAAUN,IAGdE,MAGIx9E,GAAczuB,EAAAA,EAAAA,GAAgB,KAClCisG,MAGF,OACE54G,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASmvB,EACTl7B,UAAW0d,GAAO6kD,KAAKtiE,SAAA,EAEvBH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOzK,QAAQhT,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAO6qB,OAAOtoC,UAC5BC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOq7F,YAAY94G,UACjCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,OAAOzN,UAAW0d,GAAOvK,YAGxCjT,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAOrQ,MAAMpN,SACzBgN,EAAK,gCAER/M,EAAAA,GAAAA,GAAA,KAAGF,UAAW0d,GAAOs7F,SAAS/4G,SAC3BgN,EAAK,2BAA4B,CAAEqmB,MAAOi5C,GAAgB,CACzD3Y,cAAc,EACdhV,WAAW,EACXuhB,YAAaoM,OAGjBrsE,EAAAA,GAAAA,GAAA,KAAGF,UAAW0d,GAAOpR,YAAYrM,SAC9BgN,EAAK,yCAGV/M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAClCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLG,QAAS2qG,EAAgB34G,SAExBgN,EAAK,mC,4BC9EhB,UAAgB,YAAc,WAAW,iBAAiB,WAAW,cAAgB,WAAW,gBAAgB,WAAW,aAAe,WAAW,qBAAqB,WAAW,iBAAmB,WAAW,mBAAmB,WAAW,gBAAkB,WAAW,eAAiB,WAAW,QAAU,WAAW,OAAS,WAAW,cAAc,WAAW,WAAa,WAAW,eAAe,WAAW,YAAc,YCgI5a,IAAepO,EAAAA,EAAAA,IAzGuBo6G,EAAGC,SAAQ35B,aAC/C,MAAM,mBAAE45B,EAAkB,mBAAEC,IAAuBltG,EAAAA,EAAAA,MAE7Ce,GAAOyqC,EAAAA,GAAAA,KACPD,GAAUvqC,EAAAA,EAAAA,MAETmsG,EAAiBC,IAAsBjtG,EAAAA,EAAAA,IAAmB6sG,EAAOK,gBAElEC,EAAgBvuG,QAAQiuG,EAAOK,eAAe13G,QAC9C43G,EAAyC,IAAjCP,EAAOQ,eAAe73G,OAC9B83G,EAAgBH,EAAgBN,EAAOK,eAAe13G,OAAS,EAC/D8+D,EAAY04C,EAAgBx3G,OAASw3G,EAAgBx3G,OAAOmrF,gBAAajqF,EAEzE+xG,EAAkB2E,EAAQxsG,EAAK,yBACjC0sG,EAAgB1sG,EAAK,wBAAyB,CAC9CmgD,MAAOngD,EAAK,6BAA8B,CAAEqmB,MAAOqmF,GAAiB,CAAEx5C,YAAaw5C,IACnFtsG,OAAOsiC,EAAAA,GAAAA,IAAuB,CAC5B36B,KAAMuqE,EAAOlyE,MAAM2H,KACnB29E,SAAUpT,EAAOlyE,MAAMslF,SACvBinB,sBAAuBr6B,EAAOs6B,qBAE/B,CACDj7D,WAAW,EACXgV,cAAc,IACX3mD,EAAK,6BAENspG,GAAoB12G,EAAAA,EAAAA,IAAY,KACpCs5G,IAEKE,EAAgBx3G,QAErBu3G,EAAmB,CACjBF,SACA93D,QAASi4D,KAEV,CAACH,EAAQG,IAENS,GAAwBj6G,EAAAA,EAAAA,IAAY,KACxC,MAAMk6G,EAAiBV,EAAgBx3G,SAAWq3G,EAAOK,eAAe13G,OACxEy3G,EAAmBS,EAAiB,GAAKb,EAAOK,iBAC/C,CAACL,EAAOK,eAAgBF,EAAgBx3G,SAE3C,OACE/B,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOzK,QAAQhT,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOpR,YAAYrM,UAChCi0B,EAAAA,GAAAA,GAAW4gF,EAAiB,CAAC,kBAAmB,aAEnDh1G,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAOs8F,cAAe,iBAAiB/5G,SAAA,CACnEgL,QAAQiuG,EAAOK,eAAe13G,UAC7B/B,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOu8F,aAAah6G,SAAA,EAClCC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOw8F,iBAAiBj6G,SACrCw3C,EAAQ,4BAA6B4hE,EAAgBx3G,OAAQ,QAEhE3B,EAAAA,GAAAA,GAAA,OACEF,UAAW0d,GAAOy8F,gBAClBvwE,KAAK,SACLD,SAAU,EACV17B,QAAS6rG,EAAsB75G,SAE9Bo5G,EAAgBx3G,SAAWq3G,EAAOK,eAAe13G,OAC9C41C,EAAQ,eAAiBA,EAAQ,mBAGzCv3C,EAAAA,GAAAA,GAACqkC,GAAAA,EAAU,CACTC,QAAS00E,EAAOK,eAChBt0E,oBAAqBq0E,EACrB11E,YAAay1E,EACbl0E,eAAa,EACbC,YAAU,EACVC,cAAc,iBAIpBnlC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOu8F,aAAah6G,UAClCC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOw8F,iBAAiBj6G,SACrCw3C,EAAQ,gCAGbv3C,EAAAA,GAAAA,GAACqkC,GAAAA,EAAU,CACTC,QAAS00E,EAAOQ,eAChBh1E,kBAAmBw0E,EAAOQ,eAC1B91E,YAAas1E,EAAOQ,eACpBv0E,eAAa,EACbC,YAAU,EACVC,cAAc,iBAGlBnlC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLG,QAASsoG,EAAkBt2G,UAE3BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOzI,WAAWhV,SAAA,EAC9Bo5G,EAAgBx3G,QAAU41C,EAAQ,MACnCxsC,QAAQouG,EAAgBx3G,UACvB/B,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,CACGw3C,EAAQ,6BAA8B4hE,EAAgBx3G,OAAQ,MAC/D3B,EAAAA,GAAAA,GAACk6G,GAAAA,EAAK,CAACp6G,UAAW0d,GAAO28F,YAAarlG,KAAM2rD,EAAW25C,kBAAgB,iBC1BrF,IAAez7G,EAAAA,EAAAA,IAvEsB07G,EACnCh7B,SACAi7B,mBAAmB/1E,GAAAA,MAEnB,MAAM,mBAAE00E,EAAkB,cAAEsB,IAAkBvuG,EAAAA,EAAAA,MAExCe,GAAOC,EAAAA,EAAAA,MAENmsG,EAAiBC,IAAsBjtG,EAAAA,EAAAA,IAAmB,IAE3Ds0D,EAAY04C,EAAgBx3G,OAASw3G,EAAgBx3G,OAAOmrF,gBAAajqF,EAEzE+2G,GAAwBj6G,EAAAA,EAAAA,IAAY,KACxC,MAAMk6G,EAAiBV,EAAgBx3G,SAAW24G,EAAiB34G,OACnEy3G,EAAmBS,EAAiB,GAAKS,IACxC,CAACA,EAAkBnB,EAAgBx3G,SAEhC00G,GAAoB12G,EAAAA,EAAAA,IAAY,KACpCs5G,IACAsB,EAAc,CAAE16B,SAAUR,EAAOx/E,GAAIqhD,QAASi4D,KAC7C,CAAC95B,EAAOx/E,GAAIs5G,IAEf,OACEv5G,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOzK,QAAQhT,SAAA,CAC5BgL,QAAQuvG,GAAkB34G,UACzB/B,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOpR,YAAYrM,UAChCi0B,EAAAA,GAAAA,GAAWjnB,EAAK,4BAA6B,CAAC,kBAAmB,aAEpEnN,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAOs8F,cAAe,iBAAiB/5G,SAAA,EACpEH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOu8F,aAAah6G,SAAA,EAClCC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOw8F,iBAAiBj6G,SACrCgN,EAAK,4BAA6BosG,EAAgBx3G,OAAQ,QAE7D3B,EAAAA,GAAAA,GAAA,OACEF,UAAW0d,GAAOy8F,gBAClBvwE,KAAK,SACLD,SAAU,EACV17B,QAAS6rG,EAAsB75G,SAE9Bo5G,EAAgBx3G,SAAW24G,EAAiB34G,OAASoL,EAAK,eAAiBA,EAAK,mBAGrF/M,EAAAA,GAAAA,GAACqkC,GAAAA,EAAU,CACTC,QAASg2E,EACTv1E,oBAAqBq0E,EACrB11E,YAAay1E,EACbl0E,eAAa,EACbC,YAAU,EACVC,cAAc,oBAKtBnlC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLG,QAASsoG,EAAkBt2G,UAE3BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOzI,WAAWhV,SAAA,EAC9Bo5G,EAAgBx3G,QAAUoL,EAAK,0BAChChC,QAAQouG,EAAgBx3G,UACvB/B,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,CACGgN,EAAK,gCACN/M,EAAAA,GAAAA,GAACk6G,GAAAA,EAAK,CAACp6G,UAAW0d,GAAO28F,YAAarlG,KAAM2rD,EAAW25C,kBAAgB,iBCUrF,IAAez7G,EAAAA,EAAAA,IAxEmB67G,EAAGxB,aACnC,MAAM,mBAAEC,EAAkB,mBAAEC,IAAuBltG,EAAAA,EAAAA,MAE7Ce,GAAOyqC,EAAAA,GAAAA,KACPD,GAAUvqC,EAAAA,EAAAA,MACTmsG,EAAiBC,IAAsBjtG,EAAAA,EAAAA,IAAmB6sG,EAAO93D,SAElEu5D,GAAY1yG,EAAAA,EAAAA,IAAQ,KACxB,MAAMklD,GAAY/gB,EAAAA,EAAAA,MAAYghB,MAAMvmB,KACpC,OAAOqyE,EAAO93D,QAAQvjB,OAAQ99B,IAAQotD,EAAUptD,GAAI66G,cACnD,CAAC1B,EAAO93D,UAELy5D,EAAgBxB,EAAgBx3G,OAAS84G,EAAU94G,OAEnD8+D,EAAYk6C,EAAgBA,EAAc7tB,gBAAajqF,EAEvDwzG,GAAoB12G,EAAAA,EAAAA,IAAY,KACpCs5G,IAEAC,EAAmB,CACjBF,SACA93D,QAASi4D,KAEV,CAACH,EAAQG,IAENS,GAAwBj6G,EAAAA,EAAAA,IAAY,KACxC,MAAMk6G,EAAiBV,EAAgBx3G,SAAWq3G,EAAO93D,QAAQv/C,OACjEy3G,EAAmBS,EAAiBY,EAAYzB,EAAO93D,UACtD,CAAC83D,EAAO93D,QAASu5D,EAAWtB,EAAgBx3G,SAE/C,OACE/B,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOzK,QAAQhT,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOpR,YAAYrM,SAChCgN,EAAK,4BAERnN,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAOs8F,cAAe,iBAAiB/5G,SAAA,EACpEH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOu8F,aAAah6G,SAAA,EAClCC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOw8F,iBAAiBj6G,SACrCw3C,EAAQ,4BAA6BojE,EAAe,QAEvD36G,EAAAA,GAAAA,GAAA,OACEF,UAAW0d,GAAOy8F,gBAClBvwE,KAAK,SACLD,SAAU,EACV17B,QAAS6rG,EAAsB75G,SAE9Bo5G,EAAgBx3G,SAAWq3G,EAAO93D,QAAQv/C,OAAS41C,EAAQ,eAAiBA,EAAQ,mBAGzFv3C,EAAAA,GAAAA,GAACqkC,GAAAA,EAAU,CACTC,QAAS00E,EAAO93D,QAChB1c,kBAAmBi2E,EACnB11E,oBAAqBq0E,EACrB11E,YAAay1E,EACbl0E,eAAa,EACbC,YAAU,EACVC,cAAc,iBAGlBnlC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLG,QAASsoG,EACTl2F,UAAWg5F,EAAgBx3G,OAAO5B,UAElCH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOzI,WAAWhV,SAAA,CAC/BgN,EAAK,wBACN/M,EAAAA,GAAAA,GAACk6G,GAAAA,EAAK,CAACp6G,UAAW0d,GAAO28F,YAAarlG,KAAM2rD,EAAW25C,kBAAgB,cC2CjF,IAAez7G,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAU8mC,YACT,MAAM,OAAE6wE,EAAM,QAAE4B,GAAYzyE,GAAS,CAAC,EAChC03C,EAAW+6B,GAAS/6B,WAAam5B,GAAU,aAAcA,EAASA,EAAOn5B,cAAWh9E,GAG1F,MAAO,CACLw8E,OAHaQ,GAAWg7B,EAAAA,EAAAA,KAAiBx5G,EAAQw+E,QAAYh9E,IAJ/C8L,CAtGmCmsG,EACrD3yE,QACAk3C,aAEA,MAAM,mBAAE45B,IAAuBjtG,EAAAA,EAAAA,MAEzBe,GAAOC,EAAAA,EAAAA,KAEPrB,EAASZ,QAAQo9B,GACjB4yE,GAAgBxkF,EAAAA,EAAAA,GAAsB4R,IAAUA,EAChDs3C,GAAkBlpD,EAAAA,EAAAA,GAAsB8oD,IAAWA,EAEnDlyE,GAAQpF,EAAAA,EAAAA,IAAQ,KACpB,GAAKgzG,EAAL,CACA,GAAIA,EAAc/B,OAAQ,CACxB,MAAMA,EAAS+B,EAAc/B,OAC7B,MAAI,mBAAoBA,EACfA,EAAOK,eAAe13G,OAASoL,EAAK,2BAA6BA,EAAK,0BAExEA,EAAK,qBACd,CACA,OAAIguG,EAAcH,QACT7tG,EAAK,8BADd,CARoC,GAanC,CAACA,EAAMguG,IAEJC,GAAuBjzG,EAAAA,EAAAA,IAAQ,IAC/B03E,GACKhwC,EAAAA,GAAAA,IAAuB,CAC5B36B,KAAM2qE,EAAgBtyE,MAAM2H,KAC5B29E,SAAUhT,EAAgBtyE,MAAMslF,SAChCinB,sBAAuBj6B,EAAgBk6B,oBAGvCoB,GAAe/B,QAAU,UAAW+B,EAAc/B,QAC7CvpE,EAAAA,GAAAA,IAAuB,CAC5B36B,KAAMimG,EAAc/B,OAAO7rG,MAAM2H,KACjC29E,SAAUsoB,EAAc/B,OAAO7rG,MAAMslF,SACrCinB,sBAAuBqB,EAAc/B,OAAOW,yBAJhD,EAQC,CAACl6B,EAAiBs7B,IAEfE,GAAkBlzG,EAAAA,EAAAA,IAAQ,KAC9B,GAAKgzG,GAAe/B,OACpB,MAAI,mBAAoB+B,EAAc/B,OAAe+B,EAAc/B,OAAOK,eAAe13G,YAAzF,GAEC,CAACo5G,IAoBEG,GAAgBv7G,EAAAA,EAAAA,IAAY,KAChC,GAAKo7G,EAAL,CACA,GAAIA,EAAc/B,OAAQ,CACxB,MAAMA,EAAS+B,EAAc/B,OAC7B,MAAI,mBAAoBA,GACfh5G,EAAAA,GAAAA,GAAC+4G,GAAe,CAACC,OAAQA,EAAQ35B,OAAQI,KAG3Cz/E,EAAAA,GAAAA,GAACw6G,GAAW,CAACxB,OAAQA,GAC9B,CAEA,OAAI+B,EAAcH,SACT56G,EAAAA,GAAAA,GAACq6G,GAAc,CAACh7B,OAAQI,EAAkB66B,iBAAkBS,EAAcH,QAAQN,wBAD3F,CAVoC,GAenC,CAAC76B,EAAiBs7B,IAErB,OACEn7G,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQA,EACRwB,MAAOA,EACPtB,QAASotG,EACT32E,QAAM,EACN0xC,gBAAc,EAAAj0E,SAAA,CAEbi7G,IA5CkBG,EA4CoBH,GA1CvCh7G,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAO49F,eAAer7G,UACpCH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAO69F,QAAQt7G,SAAA,EAC7BC,EAAAA,GAAAA,GAACs7G,GAAAA,EAAG,CAACx7G,UAAW0d,GAAO6hE,OAAQlyE,MAAOJ,EAAK,4BAC3C/M,EAAAA,GAAAA,GAACs7G,GAAAA,EAAG,CACFx7G,UAAW0d,GAAO6hE,OAClB7lE,UAAQ,EACR+hG,WAAYN,EACZO,eAAa,EACbruG,MAAOguG,KAETn7G,EAAAA,GAAAA,GAACs7G,GAAAA,EAAG,CAACx7G,UAAW0d,GAAO6hE,OAAQlyE,MAAOJ,EAAK,kCAiC9CmuG,OA7CL,IAAuBC,K,gBChFzB,UAAgB,QAAU,WAAW,MAAQ,WAAW,iBAAmB,WAAW,aAAe,WAAW,YAAc,WAAW,QAAU,YC2GnJ,IAAex8G,EAAAA,EAAAA,IAlFS88G,EAAGtzE,YACzB,MAAM,iBAAEuzE,EAAgB,qBAAEC,EAAoB,iBAAEh6E,IAAqB31B,EAAAA,EAAAA,MAC/D4vG,GAAkBvyG,EAAAA,EAAAA,MAElB0D,GAAOC,EAAAA,EAAAA,KAEP6uG,GAAYC,EAAAA,GAAAA,GAAY3zE,IACxB,KAAEmE,EAAI,WAAEyvE,GAAe5zE,GAAS0zE,GAAa,CAAC,GAC9C,MACJG,EAAK,YAAEC,EAAW,eAAEC,EAAc,kBAAEC,EAAiB,MAAEn6G,EAAK,gBAAEo6G,GAC5DL,GAAc,CAAC,EAEb/gF,GAAczuB,EAAAA,EAAAA,GAAgB,KAClCovG,MAGIU,GAAe9vG,EAAAA,EAAAA,GAAgB,KACnCmvG,EAAiB,CAAEpvE,KAAMA,IAErB8vE,GACFz6E,EAAiB,CACf/gC,QAAuBmM,EAAdkvG,EAAmB,sCAA8C,uCAI9EjhF,MAGIshF,EAAgBL,EAAc,qBAAuB,YACrDM,EAAuBN,EAAc,sCACvC,oCAEEO,GAAaz0G,EAAAA,EAAAA,IAAQ,KACzB,GAAKg0G,EAEL,OAAOU,EAAAA,EAAAA,IAAwBV,IAC9B,CAACA,IAEEW,GAAe30G,EAAAA,EAAAA,IAAQ,KAC3B,IAAKm0G,EACH,OAGF,MAAM76G,GAAS6qC,EAAAA,EAAAA,MACf,OAAOgwE,EAAezoG,IAAK5T,IAAOu0C,EAAAA,EAAAA,KAAW/yC,EAAQxB,IAAK89B,OAAO5yB,UAChE,CAACmxG,IAIJ,OAFAt+B,EAAAA,GAAAA,GAAoBg+B,GAAkBzzE,IAAUu0E,IAG9C98G,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQZ,QAAQo9B,GAChB9F,iBAAkB7kB,GAAOzK,QACzBuvB,QAAM,EACNz2B,QAASmvB,EACT3tB,QAASgvG,EAAat8G,SAAA,CAErBy8G,IAAcx8G,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CAAC5zB,KAAK,QAAQ8B,MAAOA,EAAO+xB,KAAMyoF,EAAYG,WAAS,IAC5EH,IAAcx8G,EAAAA,GAAAA,GAAC+uD,GAAAA,EAAa,CAACjvD,UAAW0d,GAAOrQ,MAAO4mB,KAAMyoF,IAC5DR,IAASh8G,EAAAA,GAAAA,GAAA,KAAGF,UAAW0d,GAAOw+F,MAAMj8G,SAAEi8G,KACvCh8G,EAAAA,GAAAA,GAAA,KAAGF,UAAW0d,GAAOo/F,iBAAiB78G,SACnCgN,EAAKkvG,EAAc,cAAgB,UAAWE,EAAmB,OAEnEO,IACC18G,EAAAA,GAAAA,GAAA,OAAKiU,IAAK2nG,EAAiB97G,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAOk/F,aAAc,gBAAgB38G,SACvF28G,EAAajpG,IAAKopG,IACjB78G,EAAAA,GAAAA,GAAC2gE,GAAAA,EAAS,CAAC7gE,UAAW0d,GAAOq/F,YAAa9oF,KAAM8oF,EAAa/nG,MAAM+0B,EAAAA,EAAAA,IAAgBgzE,SAIzFj9G,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAe,iBAAkBqH,GAAOowD,SAAS7tE,SAAA,EAC/DC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACE,QAAM,EAAChO,UAAU,wBAAwBiO,QAASsuG,EAAat8G,SACpEgN,EAAKqvG,EAAkBG,EAAuBD,MAEjDt8G,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACE,QAAM,EAAChO,UAAU,wBAAwBiO,QAASitB,EAAYj7B,SACnEgN,EAAK,oB,uCCpGhB,SAA0C,WAA1C,GAAmE,WCgLnE,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IAGQ,CACLy7G,sBAH4Bz7G,EAAO6yC,UAAU6oE,6BAF/BpuG,CAjJEquG,EAAG70E,QAAO20E,4BAC9B,MAAM,mBAAEG,IAAuBjxG,EAAAA,EAAAA,MAEzBkxG,GAAc7zG,EAAAA,EAAAA,MAEdsC,EAASZ,QAAQo9B,GACjBsqE,GAAiBtiE,EAAAA,GAAAA,GAAiBhI,IAClC,UACJg1E,EAAS,SAAE9hF,EAAQ,eAAE+hF,EAAc,YAAEC,GACnC5K,GAAkB,CAAC,EACjB6K,EAAwBH,EAExBI,GAAuBptE,EAAAA,GAAAA,GAAiBmtE,GAExC/lE,GAAUvqC,EAAAA,EAAAA,KAEVwwG,GAAmBz1G,EAAAA,EAAAA,IAAQ,KAE7BnI,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,uCACbv3C,EAAAA,GAAAA,GAAA,KAAAD,UAAIi0B,EAAAA,GAAAA,GAAWujB,EAAQ,oCAAqC,CAAC,UAC7Dv3C,EAAAA,GAAAA,GAAA,KAAAD,UAAIi0B,EAAAA,GAAAA,GAAWujB,EAAQ,oCAAqC,CAAC,UAC7Dv3C,EAAAA,GAAAA,GAAA,KAAAD,UAAIi0B,EAAAA,GAAAA,GAAWujB,EAAQ,oCAAqC,CAAC,UAC7Dv3C,EAAAA,GAAAA,GAAA,KAAAD,UACEC,EAAAA,GAAAA,GAACy9G,GAAAA,EAAQ,CACPlmG,IAAKggC,EAAQ,qCACbziC,KAAMyiC,EAAQ,0CAGlBv3C,EAAAA,GAAAA,GAAA,KAAAD,UAAIi0B,EAAAA,GAAAA,GAAWujB,EAAQ,oCAAqC,CAAC,YAGhE,CAACA,KAEE,kBACJw+B,EAAiB,kBAAEC,EAAiB,kBACpCC,EAAiB,uBAAEC,EAAsB,sBAAEC,IACzCC,EAAAA,GAAAA,GAAuB8mC,GAAcK,GAEnCviF,GAAczuB,EAAAA,EAAAA,GAAgB,KAClC0wG,IACA/mC,IACAC,MAGI+gC,GAAYnvG,EAAAA,EAAAA,IAAQ,KACxB,GAAK4D,EA2CL,MAAO,CACL08B,QAzCAzoC,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAazd,SAAEw3C,EAAQ,6BACtCv3C,EAAAA,GAAAA,GAAA,KAAGF,WAAWqW,EAAAA,GAAAA,GAAeqH,GDlF6E,YCkFvCzd,SAChEw3C,EAAQ,qCAEXv3C,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLqG,IAAKipG,EACL5qG,OAAK,EACLpS,KAAK,UACL2N,MAAM,cACN/N,UD1FiF,WC2FjFiO,QAASkoE,EAAkBl2E,UAE3BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,cA6BfmwG,aAxBmB,CACnB,CAAC,OAAQnmE,EAAQ,gCACfvjB,EAAAA,GAAAA,GAAWujB,EAAQ,kCAAmC,CAAC,qBACzD,CAAC,gBAAiBA,EAAQ,gCACxBvjB,EAAAA,GAAAA,GAAWujB,EAAQ,kCAAmC,CAAC,qBACzD,CAAC,YAAaA,EAAQ,gCACpBvjB,EAAAA,GAAAA,GAAWujB,EAAQ,iCAAkCulE,GAAwB,CAAC,sBAmBhF/yE,QAfAnqC,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAazd,UAAEi0B,EAAAA,GAAAA,GAAWujB,EAAQ,+BAAgC,CAAC,uBAClF33C,EAAAA,GAAAA,IAAA,KAAGE,UAAW0d,GAAmBzd,SAAA,EAC9Bi0B,EAAAA,GAAAA,GAAWujB,EAAQ,kCAAmC,IAAK,CAAC,qBAC7Dv3C,EAAAA,GAAAA,GAACy9G,GAAAA,EAAQ,CACPlmG,IAAKggC,EAAQ,cACbziC,KAAMyiC,EAAQ,4BAWrB,CAAC5rC,EAAQ4rC,EAAS0+B,EAAmB6mC,IAExC,OAAIS,GAEA39G,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAC29G,GAAAA,EAAe,CACdhyG,OAAQA,EACR+xG,aAAcxG,GAAWwG,aACzBE,eAAe,UACfC,eAAa,EACbx1E,OAAQ6uE,GAAW7uE,OACnB0B,OAAQmtE,GAAWntE,OACnBh1B,WAAYwiC,EAAQ,+BACpB1rC,QAASmvB,IAEVg7C,GAAqB36C,IACpBr7B,EAAAA,GAAAA,GAAC89G,GAAAA,EAAoC,CACnCnyG,OAAQoqE,EACRgH,OAAQ/G,EACR+nC,WAAYb,EACZ7hF,SAAUA,EACV+hF,eAAgBA,EAChBD,UAAWA,EACXE,YAAaA,EACbW,iBAAe,EACfC,YAAajjF,EACbnvB,QAASqqE,EACTpqE,oBAAqBqqE,QAQ7Bv2E,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQA,EACR7L,UDlKiB,WCmKjBuiC,iBDnKiI,WCoKjIx2B,QAASmvB,EAAYj7B,SAAA,CAEpBy9G,GACDx9G,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLG,QAASitB,EAAYj7B,SAEpBw3C,EAAQ,uCC1KjB,GAAwB,WCwGxB,IAAe54C,EAAAA,EAAAA,IApF8Bu/G,EAC3CvyG,SACAE,cAEA,MAAM0rC,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,KAEP2mE,GAAiBp2G,EAAAA,EAAAA,IAAQ,KAC7B,MAAMi3E,EAAWznC,EAAQ,aACzB,OAAOxqC,EACL,4BACA,CACEkmF,MACErzF,EAAAA,GAAAA,IAAC69G,GAAAA,EAAQ,CAAClmG,IAAKggC,EAAQ,2BAA4BziC,KAAMkqE,EAASj/E,SAAA,CAC/Di/E,GACDh/E,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAIjB,CACEmxC,WAAW,KAGd,CAAC3xC,EAAMwqC,IAEJ6mE,GAAoBr2G,EAAAA,EAAAA,IAAQ,IACzBgF,EACL,gCACAlK,EACA,CACE67C,WAAW,EACX2/D,mBAAoB,CAAE,MAAMr+G,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAAC1S,UDnD4B,WCmDDyN,KAAK,eAGrE,CAACR,IAEEmqG,GAAYnvG,EAAAA,EAAAA,IAAQ,KACxB,GAAK4D,EAsBL,MAAO,CACL08B,QApBAroC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAazd,SAAEw3C,EAAQ,kCAqBtCmmE,aAlBmB,CACnB,CAAC,UAAWnmE,EAAQ,uCAClBvjB,EAAAA,GAAAA,GAAWujB,EAAQ,mCAAoC,CAAC,qBAC1D,CAAC,gBAAiBA,EAAQ,0CACxBvjB,EAAAA,GAAAA,GAAWujB,EAAQ,iCAAkC,CAAC,qBACxD,CAAC,cAAeA,EAAQ,wCACtBvjB,EAAAA,GAAAA,GAAWujB,EAAQ,oCAAqC,CAAC,sBAa3DxN,QATAnqC,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAazd,SAAEq+G,KAC9Bp+G,EAAAA,GAAAA,GAAA,KAAGF,UD3EsC,WC2ERC,SAAEo+G,SAStC,CAACxyG,EAAQ4rC,EAAS6mE,EAAmBD,IAExC,GAAKjH,EAIL,OACEl3G,EAAAA,GAAAA,GAAC29G,GAAAA,EAAe,CACdhyG,OAAQA,EACR+xG,aAAcxG,EAAUwG,aACxBE,eAAe,cACfC,eAAa,EACbx1E,OAAQ6uE,EAAU7uE,OAClB0B,OAAQmtE,EAAUntE,OAClBh1B,WAAYwiC,EAAQ,+BACpB1rC,QAASA,M,gBCnGf,SAA4C,WCwF5C,IAAelN,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MACEi9G,eACEC,KAAMC,IAENn9G,EAEJ,MAAO,CACLm9G,iBATc7vG,CA9DkB8vG,EACpCt2E,QACAq2E,mBAEA,MAAM,mCACJE,EAAkC,mCAAEC,EAAkC,wCAAEC,IACtE5yG,EAAAA,EAAAA,MAEEL,EAASZ,QAAQo9B,GAEjBsqE,GAAiBtiE,EAAAA,GAAAA,GAAiBhI,GAElCp7B,GAAOyqC,EAAAA,GAAAA,MAENqnE,EAAoBC,IAAyB3yG,EAAAA,EAAAA,KAAS,GAEvD45B,GAAex5B,EAAAA,EAAAA,GAAiBwyG,IAC/BtM,GACLmM,EAAwC,CACtChzG,OAAQ6mG,EAAejmG,OACvBwyG,gBAAiBD,MAIfE,GAAmB1yG,EAAAA,EAAAA,GAAgB,KACvCoyG,MAGI3jF,GAAczuB,EAAAA,EAAAA,GAAgB,KAClCmyG,MAGF,OACE1+G,EAAAA,GAAAA,GAACoN,EAAAA,EAAK,CACJzB,OAAQA,EACRqoE,gBAAc,EACd7mE,MAAOJ,EAAK,sBACZjN,UD/DiB,WCgEjBuiC,iBAAkB7kB,GAClB3R,QAASmvB,EAAYj7B,UAErBC,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAgB,gDAAgDzd,UAC7FC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,qBAAoBC,UACjCC,EAAAA,GAAAA,GAACk/G,GAAAA,EAAY,CACXC,kBAAgB,EAChB7vD,YAAaviD,EAAK,4BAClBw+B,MAAOknE,GAAgB2M,UAAYryG,EAAKsyG,YAAY5M,EAAe2M,UACnEhzG,YAAaW,EAAK,4BAClBuyG,aAAcL,EACdtqF,UAAW89E,GAAgB99E,UAC3B4pF,KAAMC,EACN3/G,kBAAmBggH,EACnBU,iBAAkB5zG,EAClB6zG,2BAA4BV,EAC5BtmD,SAAUzyB,aChFtB,IAAgB,QAAU,WAAW,SAAW,YCkMhD,IAAepnC,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAMw0D,GAAczhB,EAAAA,EAAAA,KAAW/yC,EAAQA,EAAO+yB,eACxCq2D,GAAYlpD,EAAAA,EAAAA,KAA2BlgC,GAI7C,MAAO,CACLw0D,cACAksC,WALiB1gG,EAAOitG,sBAAuB5e,EAAAA,EAAAA,KAAiBruF,EAAQA,EAAOitG,2BAAwBzrG,EAMvG4nF,YACAx0C,iBANsBC,EAAAA,EAAAA,KAA0B70C,KALlCsN,CA3JsC8wG,EACxDt3E,QACA0tB,cACAksC,aACAtX,YACAx0C,sBAEA,MAAM,4BACJypE,EAA2B,gCAC3BC,EAA+B,gBAC/BnN,EAAe,iBACf5wE,EAAgB,uBAChBg+E,IACE5zG,EAAAA,EAAAA,MAEEL,EAASZ,QAAQo9B,GAEjBoP,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,KAEPluB,GAAejgB,EAAAA,EAAAA,OAEdw2G,EAAoBC,IAAyB3zG,EAAAA,EAAAA,IAAiB,IAErE5B,EAAAA,EAAAA,IAAU,MACJoB,GAAWo2F,GAAY7e,UAAajtC,GACtC2pE,KAED,CAACj0G,EAAQo2F,EAAY9rD,IAExB,MAAMy8D,GAAqB3qG,EAAAA,EAAAA,IAAQ,KACjC,GAAK8tD,GAAgBksC,GAAY7e,SACjC,MAAO,IACFrtB,EACHy5B,YAAa,CACXpuF,KAAM,UACNsuF,WAAYuS,EAAW7e,SAAS28B,GAAoBhgH,MAGvD,CAACg2D,EAAaksC,EAAY8d,IAEvBE,EAAahe,GAAY7e,UAAUvhF,QACzCi6E,EAAAA,GAAAA,GACE,KACOmkC,GACLD,EAAuBE,IAAeA,EAAY,GAAKD,IAEzDA,EAjDa,UAiDWl9G,GAG1B,MAAMo9G,GAAmB1zG,EAAAA,EAAAA,GAAgB,KAErCvM,EAAAA,GAAAA,GAACizG,GAAAA,EAAQ,CACPE,iBAAe,EACfrzG,UAAW0d,GAAO0iG,SAClBC,cAAe3iG,GAAO4iG,SACtBlN,SAAUR,KAKVnvE,GAAiBh3B,EAAAA,EAAAA,GAAgB,KAChC47B,GAAO0qB,KAAKhzD,KACjB6/G,IACIv3E,GAAO4/B,YACL0iB,GACF+nB,EAAgB,CACdzqC,UAAW5/B,EAAM4/B,UACjBj5C,MAAO,CACLg8C,UAAW,gCACXC,UAAW,CACT5lB,OAAQ,cAIdw6D,EAAgC,CAAEnpD,MAAOruB,EAAM0qB,IAAIhzD,GAAImxE,WAAW,EAAMqvC,yBAAyB,MAEjGz+E,IACA4wE,EAAgB,CACdzqC,UAAW5/B,EAAM4/B,UACjBj5C,MAAO,CACLg8C,UAAW,gCACXC,UAAW,CACT5lB,OAAQ,qBAQdizD,GAAiB7rG,EAAAA,EAAAA,GAAgB,KAChC47B,GAAO0qB,KAAKhzD,KACjB6/G,IACIv3E,GAAO4/B,WACTyqC,EAAgB,CACdzqC,UAAW5/B,EAAM4/B,UACjBj5C,MAAO,CACLg8C,UAAW,gCACXC,UAAW,CACT5lB,OAAQ,gBAKZslC,GACFk1B,EAAgC,CAAEnpD,MAAOruB,EAAM0qB,IAAIhzD,GAAImxE,WAAW,OAIhEsvC,GAAmB/zG,EAAAA,EAAAA,GAAgB,KACvC,GAAK47B,GAAO0qB,IACZ,OAAO9lD,EAAK,wBAAyB,CACnCQ,MAAMs8B,EAAAA,EAAAA,IAAgB1B,GAAO0qB,MAC5B,CACDnU,WAAW,EACXgV,cAAc,MAIlB,OACE9zD,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJtN,WAAWqW,EAAAA,GAAAA,GAAe,WAC1BksB,iBAAkB7kB,GAAOzK,QACzBpH,OAAQA,EACRE,QAASusG,EAAer4G,SAAA,CAEvBkgH,KACDrgH,EAAAA,GAAAA,IAAA,OAAAG,SAAA,CACGugH,KACD1gH,EAAAA,GAAAA,IAAA,OACEE,UAAU,sBACVmU,IAAKqV,EAAavpB,SAAA,EAElBC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,wBACVgO,QAAM,EACNC,QAASw1B,EACT11B,MAAM,UAAS9N,SAEdw3C,EAAQ,kCAEXv3C,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,wBACVgO,QAAM,EACNC,QAASqqG,EAAer4G,SAEvBgN,EAAK,wBC7BlB,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IAGQ,CACLw0D,aAHkBzhB,EAAAA,EAAAA,KAAW/yC,EAAQA,EAAO+yB,iBAF9BzlB,CA7HmC4xG,EACrDp4E,QACA0tB,kBAEA,MAAM,yBACJ2qD,EAAwB,6BAAEC,EAA4B,gBAAEjO,IACtDxmG,EAAAA,EAAAA,MAEEL,EAASZ,QAAQo9B,GAEjBoP,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,KAEPluB,GAAejgB,EAAAA,EAAAA,MAEfk6B,GAAiBh3B,EAAAA,EAAAA,GAAgBiM,UACrC,MAAMu2D,QAAwBC,EAAAA,EAAAA,OACxB,YAAE5G,GAAgB2G,EACnB5mC,GAAO0qB,KAAKhzD,KACjB2gH,IACIr4E,GAAO4/B,YACT04C,EAA6B,CAC3BjqD,MAAOruB,EAAM0qB,IAAIhzD,GACjBwoE,iBAAiB,IAEnBmqC,EAAgB,CACdzqC,UAAW5/B,EAAM4/B,UACjBj5C,MAAO,CACLg8C,UAAW,qBACXC,UAAW,CACTgB,WAAW,EACXoD,SAAU/G,GAAa+G,SACvBC,UAAWhH,GAAagH,UACxBC,SAAUjH,GAAaiH,SACvBC,OAAQlH,GAAamH,QACrBC,MAAOpH,GAAaoH,MACpBC,oBAAqBrH,GAAasH,SAClCC,kBAAmBvH,GAAasH,iBAOpC0oC,GAAiB7rG,EAAAA,EAAAA,GAAgB,KAChC47B,GAAO0qB,KAAKhzD,KACjB2gH,IACIr4E,GAAO4/B,YACT04C,EAA6B,CAC3BjqD,MAAOruB,EAAM0qB,IAAIhzD,GACjBwoE,iBAAiB,IAEnBmqC,EAAgB,CACdzqC,UAAW5/B,EAAM4/B,UACjBj5C,MAAO,CACLg8C,UAAW,qBACXC,UAAW,CACTgB,WAAW,UAOf20C,GAAan0G,EAAAA,EAAAA,GAAgB,KACjC,GAAK47B,GAAO0qB,IACZ,OACEjzD,EAAAA,GAAAA,IAAA,OAAKE,UCnGe,WDmGWC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACL5zB,KAAK,QACL6zB,KAAM8hC,KAER71D,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,OAAOzN,UCxGmB,cDyGrCE,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACL5zB,KAAK,QACL6zB,KAAMoU,EAAM0qB,WAMdytD,GAAmB/zG,EAAAA,EAAAA,GAAgB,KACvC,GAAK47B,GAAO0qB,IACZ,OAAO9lD,EAAK,yBAA0B,CACpCQ,MAAMs8B,EAAAA,EAAAA,IAAgB1B,GAAO0qB,MAC5B,CACDnU,WAAW,EACXgV,cAAc,MAIlB,OACE9zD,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJtN,WAAWqW,EAAAA,GAAAA,GAAe,WAC1BxK,OAAQA,EACRE,QAASusG,EAAer4G,SAAA,CAEvB2gH,KACD9gH,EAAAA,GAAAA,IAAA,OAAAG,SAAA,CACGugH,KACD1gH,EAAAA,GAAAA,IAAA,OACEE,UAAU,sBACVmU,IAAKqV,EAAavpB,SAAA,EAElBC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,wBACVgO,QAAM,EACNC,QAASw1B,EACT11B,MAAM,UAAS9N,SAEdw3C,EAAQ,kCAEXv3C,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,wBACVgO,QAAM,EACNC,QAASqqG,EAAer4G,SAEvBgN,EAAK,wBErJlB,GAAwB,WC8JxB,IAAepO,EAAAA,EAAAA,IAnIOgiH,EACpBx4E,YAEA,MAAM,gBACJy4E,EAAe,mBAAEC,EAAkB,0BAAEC,IACnC90G,EAAAA,EAAAA,MACEe,GAAOC,EAAAA,EAAAA,KACPrB,EAASZ,QAAQo9B,GAEjB44E,GAAgB13G,EAAAA,EAAAA,MAEhB23G,GAAoBz0G,EAAAA,EAAAA,GAAgB,CAACM,EAAGo8B,KAC5C,MAAM,OAAEz8B,EAAM,SAAE6uB,GAAa8M,EAC7By4E,EAAgB,CAAEh1G,OAAQY,EAAQ6uB,WAAU4N,cAGvCg4E,EAAkBC,IAAkBn5G,EAAAA,EAAAA,IAAQ,KACjD,IAAKogC,EAAO,MAAO,MAACtlC,EAAW,GAC/B,MAAMs+G,EAAeh5E,EAAMi5E,SAASz/G,OAAS,EAC7C,MAAO,CAACwmC,EAAMi5E,SAASD,GAAeA,IACrC,CAACh5E,IAEEkrC,GAAkB9mE,EAAAA,EAAAA,GAAgB,KACjC20G,EAKLJ,IAJED,MAOEQ,GAAat5G,EAAAA,EAAAA,IAAQ,KACzB,IAAKogC,EAAO,OACZ,MACM5U,EADWxmB,EAAK,uCACCgyE,MAAM,UAC7B,MAAO,CACLxrD,EAAM,IACNvzB,EAAAA,GAAAA,GAACy9G,GAAAA,EAAQ,CACP3oG,KAAM/H,EAAK,sCACXwK,IAAKxK,EAAK,uBAEZwmB,EAAM,KAEP,CAACxmB,EAAMo7B,IAEJE,GAAStgC,EAAAA,EAAAA,IAAQ,KACrB,IAAKogC,EACH,OAGF,MAAMm5E,EAAcv2G,QAAQk2G,GAAkBruF,UAE9C,OACEhzB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,yBAAwBC,SAAA,EACrCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN3N,KAAK,UACLqS,UAAWxF,EAAKm0G,EAAiB,OAAS,SAC1CnzG,QAASslE,EAAgBtzE,UAEzBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAM2zG,EAAiB,aAAe,aAE9CthH,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAe,cD1F2B,WC0FOmrG,GD1FiK,YC0F3HvhH,SAAA,EACrGC,EAAAA,GAAAA,GAAA,MAAIF,UD3FgM,WC2FxKC,SAAEgN,EAAK,cAClCu0G,IACCthH,EAAAA,GAAAA,GAAA,QAAMF,UD7F8O,WC6FnNC,SAAEkhH,EAAiBruF,kBAK3D,CAAC7lB,EAAMo7B,EAAO+4E,EAAgBD,GAAkBruF,YAEnDroB,EAAAA,EAAAA,IAAU,KACR,IAAK49B,EAAO,OACZ,MAAM5I,EAAQx9B,SAASsC,cAA2B,IAAIk9G,GAAAA,SAA8B/jG,MACpF,IAAK+hB,EAAO,OAEZ,MAAMz1B,EAASy1B,EAAMukB,cACrB1rC,EAAAA,EAAAA,IAAgB,KACd2oG,EAAcv3G,QAAS1D,MAAMgE,OAAS,GAAGA,EAtFzB,UAwFjB,CAACq+B,IAEJ,MAAMq5E,GAAuBj1G,EAAAA,EAAAA,GAAgB,KAC3C,MAAMgzB,EAAQx9B,SAASsC,cAA2B,IAAIo9G,GAAAA,SAA0BjkG,OAEhFszB,EAAAA,EAAAA,IAAe,KACb,MAAMhnC,EAASy1B,EAAMukB,cACrB1rC,EAAAA,EAAAA,IAAgB,KACd2oG,EAAcv3G,QAAS1D,MAAMgE,OAAS,GAAGA,EAhG3B,aAqGpB,OACE9J,EAAAA,GAAAA,GAACoN,EAAAA,EAAK,CACJzB,OAAQA,EACRqoE,gBAAc,EACdl0E,UD9HoC,WC+HpCuoC,OAAQA,EACRx8B,QAASg1G,EAAmB9gH,UAE5BH,EAAAA,GAAAA,IAACq9B,GAAAA,GAAU,CACT1vB,KAAK,QACLzN,UDpIgR,WCqIhRmU,IAAK8sG,EACL7jF,UAAWgkF,EACX3kE,QAASilE,EAAqBzhH,SAAA,EAE9BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAazd,SAAA,EAC3BC,EAAAA,GAAAA,GAAA,MAAIF,UD1IoJ,WC0IrHC,SAAEkhH,GAAkB9zG,QACtD8zG,GAAkBzzG,QAAQiG,IAAKw1B,IAC9BjpC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPm/E,QAAM,EACNC,cAAc,OACd7hH,UD/IgG,WCgJhGygF,gBDhJ0H,WCiJ1HmkB,SAAUz7D,EAAOA,OACjBl7B,QAASizG,EAAkBjhH,UAE3BC,EAAAA,GAAAA,GAAA,OAAKF,UDpJuE,WCoJ1CC,SAAEkpC,EAAOn0B,cAIjD9U,EAAAA,GAAAA,GAAA,KAAGF,UDxJgL,WCwJlJC,SAAEshH,W,gBCxJ3C,SAAwB,WCyOxB,IAAe1iH,EAAAA,EAAAA,IA1MKijH,EAClBz5E,YAEA,MAAM,eACJ05E,EAAc,YAAEj4D,EAAW,iBAAEk4D,EAAgB,wBAAEC,IAC7C/1G,EAAAA,EAAAA,MACEe,GAAOC,EAAAA,EAAAA,KACPrB,EAASZ,QAAQo9B,GAEjB44E,GAAgB13G,EAAAA,EAAAA,OAEfyL,EAAMktG,IAAW71G,EAAAA,EAAAA,IAAS,IAE3B60G,GAAoBz0G,EAAAA,EAAAA,GAAgB,CAACM,EAAGo8B,KAC5C,MAAM,WACJt2B,EAAU,QAAEsvG,EAAO,OAAEr2G,EAAM,OAAEY,GAC3B27B,EACJ,GAAKx1B,EACL,OAAQsvG,GACN,IAAK,UACHJ,EAAe,CAAEr1G,OAAQA,EAASmG,aAAYs2B,WAC9C,MACF,IAAK,QACH2gB,EAAY,CACVxmB,QAASzwB,EAAW,GAAI/G,OAAQA,EAASq9B,eAM1Cg4E,EAAkBC,IAAkBn5G,EAAAA,EAAAA,IAAQ,KACjD,IAAKogC,EAAO,MAAO,MAACtlC,EAAW,GAC/B,MAAMs+G,EAAeh5E,EAAMi5E,SAASz/G,OAAS,EAC7C,MAAO,CAACwmC,GAAOi5E,SAASD,GAAeA,IACtC,CAACh5E,IAEEkrC,GAAkB9mE,EAAAA,EAAAA,GAAgB,KACtCw1G,MAGIniD,GAAmBrzD,EAAAA,EAAAA,GAAgB,KACvCu1G,MAGIz5E,GAAStgC,EAAAA,EAAAA,IAAQ,KACrB,IAAKogC,EACH,OAGF,MAAMm5E,EAAcv2G,QAAQk2G,GAAkBruF,UAE9C,OACEhzB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,yBAAwBC,SAAA,CACpCmhH,GACClhH,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN3N,KAAK,UACLqS,UAAWxF,EAAK,QAChBgB,QAASslE,EAAgBtzE,UAEzBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,kBAGbvN,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN3N,KAAK,UACLqS,UAAWxF,EAAK,SAChBgB,QAAS6xD,EAAiB7/D,UAE1BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAGf3N,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAe,cDzGgD,WCyGdmrG,GDzGgO,YCyG1LvhH,SAAA,EACrGC,EAAAA,GAAAA,GAAA,MAAIF,WAAWqW,EAAAA,GAAAA,GD1G8N,WC0GjM+qG,GD1GuN,YC0GpLnhH,SAC5EkhH,GAAkBzzG,QACfT,EAAwB,UAAnBo7B,GAAO85E,QAAsB,cAAgB,UAAYhB,GAAkB9zG,QAErFm0G,IACCthH,EAAAA,GAAAA,GAAA,QAAMF,UD/G6S,WC+GlRC,SAAEkhH,EAAiBruF,kBAK3D,CAAC7lB,EAAMo7B,EAAO+4E,EAAgBD,GAAkBzzG,QAASyzG,GAAkBruF,SAAUquF,GAAkB9zG,QAEpG+0G,GAAmB31G,EAAAA,EAAAA,GAAiBM,IACxCm1G,EAAQn1G,EAAEC,OAAOH,UAGnBpC,EAAAA,EAAAA,IAAU,KACR,IAAK49B,EAAO,OACZ,MAAM5I,EAAQx9B,SAASsC,cAA2B,IAAIk9G,GAAAA,SAA8B/jG,MACpF,IAAK+hB,EAAO,OAEZ,MAAMz1B,EAASy1B,EAAMukB,cACrB1rC,EAAAA,EAAAA,IAAgB,KACd2oG,EAAcv3G,QAAS1D,MAAMgE,OAAS,GAAGA,SAE1C,CAACq+B,IAEJ,MAAMq5E,GAAuBj1G,EAAAA,EAAAA,GAAgB,KAC3C,MAAMgzB,EAAQx9B,SAASsC,cAA2B,IAAIo9G,GAAAA,SAA0BjkG,OAEhFszB,EAAAA,EAAAA,IAAe,KACb,MAAMhnC,EAASy1B,EAAMukB,cACrB1rC,EAAAA,EAAAA,IAAgB,KACd2oG,EAAcv3G,QAAS1D,MAAMgE,OAAS,GAAGA,EAlH3B,aAuHdq4G,GAAiC51G,EAAAA,EAAAA,GAAgB,KACrDy1G,EAAQ,IACRF,MAGIM,GAA2B71G,EAAAA,EAAAA,GAAgB,KAC/C,MAAM,WACJoG,EAAU,QAAEsvG,EAAO,OAAEr2G,EAAM,OAAEY,GAC3B27B,EACJ,OAAQ85E,GACN,IAAK,UACHJ,EAAe,CACbr1G,OAAQA,EAASmG,aAAYs2B,OAAQg4E,GAAkBh4E,OAAQ78B,YAAa0I,IAE9E,MACF,IAAK,QACH80C,EAAY,CACVxmB,QAASzwB,IAAa,GAAI/G,OAAQA,EAASq9B,OAAQg4E,GAAkBh4E,OAAQ78B,YAAa0I,IAIhGqtG,MAGF,OACEniH,EAAAA,GAAAA,GAACoN,EAAAA,EAAK,CACJzB,OAAQA,EACR08B,OAAQA,EACRx8B,QAASs2G,EACT9/E,iBD7KyD,WC8KzDviC,WAAWqW,EAAAA,GAAAA,GD9KyB,WC8KsB,UAAnBgyB,GAAO85E,SAAuB,wBAAwBliH,UAE7FC,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACT1vB,KAAK,QACLzN,UDlL+U,WCmL/UmU,IAAK8sG,EACL7jF,UAAWgkF,EACX3kE,QAASilE,EAAqBzhH,UAE9BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAazd,SAAA,CAC1BkhH,GAAkBzzG,SACfxN,EAAAA,GAAAA,GAAA,MAAIF,UDzLyL,WCyL1JC,SAAEkhH,GAAkB9zG,aAActK,EACxEo+G,GAAkBzzG,SAASiG,IAAKw1B,IAC/BjpC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPm/E,QAAM,EACNnuE,gBAAc,EACdouE,cAAc,OACd7hH,UD/LyI,WCgMzIygF,gBDhMmK,WCiMnKmkB,SAAUz7D,EAAOA,OACjBl7B,QAASizG,EAAkBjhH,UAE3BC,EAAAA,GAAAA,GAAA,OAAKF,UDpMgH,WCoMnFC,SAAEkpC,EAAOn0B,UAG9CmsG,GAAkBh4E,QACjBrpC,EAAAA,GAAAA,IAAA,OAAKE,UDxMyV,WCwMjUC,SAAA,EAC3BC,EAAAA,GAAAA,GAAC6nG,GAAAA,EAAuB,CACtBznG,OAAQC,GAAAA,EAAegiH,OACvBniH,KAAM,IACNJ,UD5M0Y,WC6M1YyzC,gBAAc,EACdswD,aAAW,EACXrjG,QAAQ,KAEVR,EAAAA,GAAAA,GAACsiH,GAAAA,EAAQ,CACPziH,GAAG,SACHC,UDnNkX,WCoNlXoN,MAAO+zG,EAAiBsB,WAAax1G,EAAK,0BAA4BA,EAAK,kBAC3EU,SAAUy0G,EACVv1G,MAAOmI,EACPutE,UA/LQ,IAgMRmgC,oBAhMQ,IAgM+B1tG,EAAKnT,QAAQmrF,WACpD21B,mBAAiB,KAEnBziH,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLG,QAASq0G,EACTjiG,SAAW8gG,EAAiBsB,gBAA4B1/G,GAAdiS,EAAKnT,OAAmB5B,SAEjEgN,EAAK,wBAGRlK,W,4BClOd,MC6KA,IAAelE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAU8mC,YACT,MAAMk4B,GAAQwD,EAAAA,EAAAA,KAAYxiE,IAExBqhH,UAAWC,EAAmB,aAC9BC,EACAC,WAAYC,EAAgB,gBAC5Bp7C,IACEq7C,EAAAA,EAAAA,KAAkB1hH,EAAQg/D,IAAU,CAAC,EAGzC,MAAO,CACLA,QACAsiD,sBACAC,eACAE,mBACAp7C,kBACA7U,IARU1qB,GAAQiM,EAAAA,EAAAA,KAAW/yC,EAAQ8mC,GAAOquB,YAAS3zD,EASrDuxB,cAAe/yB,EAAO+yB,gBAlBRzlB,CAtIoCq0G,EACtD76E,QACAk4B,QACAsiD,sBACAC,eACAE,mBACAp7C,kBACA7U,UAEA,MAAM,gCACJowD,EAA+B,gBAAEzQ,EAAe,8BAAE0Q,IAChDl3G,EAAAA,EAAAA,MACEe,GAAOyqC,EAAAA,GAAAA,KACP7rC,EAASZ,QAAQo9B,IAEjB,UAAE4/B,EAAS,QAAEnnE,EAAO,MAAE41D,GAAUruB,GAAS,CAAC,EAE1C7e,GAAejgB,EAAAA,EAAAA,MAEf85G,GAAwBC,EAAAA,GAAAA,GAAoB/iD,EAAOyiD,GAEnDO,GAAkB92G,EAAAA,EAAAA,GAAgB,KAClCw7D,GAAavR,GAAS51D,IACxBsiH,EAA8B,CAC5Bn7C,YACAnnE,YAEFqiH,OAIErjD,GAAmBrzD,EAAAA,EAAAA,GAAgB,KACvC02G,IACIl7C,GACFyqC,EAAgB,CACdzqC,YACAj5C,MAAO,CACLg8C,UAAW,0BACXC,UAAW,CAAEx/B,MAAO,sBAMtBlD,GAAStgC,EAAAA,EAAAA,IAAQ,KACrB,GAAKogC,EAIL,OACEvoC,EAAAA,GAAAA,IAAA,OAAKE,UDzFoG,WCyF3EC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN3N,KAAK,UACLqS,UAAWxF,EAAK,SAChBgB,QAAS6xD,EAAiB7/D,UAE1BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAEbvN,EAAAA,GAAAA,GAAA,MAAIF,WAAWqW,EAAAA,GAAAA,GAAe,cDnG8B,YCmGIpW,SAC7DgN,EAAK,yBAIX,CAACA,EAAMo7B,IAEJm7E,GAAev7G,EAAAA,EAAAA,IAAQ,KAC3B,GAAKyuD,GAAU51D,GAAYmnE,EAC3B,OAAOw7C,EAAAA,EAAAA,IAAiC/sD,EAAO51D,IAC9C,CAAC41D,EAAO51D,EAASmnE,IAEdy7C,GAAcrtG,EAAAA,GAAAA,GD/GkK,WAAkF,WCkHtQ2sG,GDlH+M,WCmH/Mp7C,GDnH0O,WCoH1Oo7C,GAAoBH,GDpHuQ,YCuH7R,OACE/iH,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJywE,UAAWv0D,EACX3d,OAAQA,EACR08B,OAAQA,EACRx8B,QAAS+zD,EACT9/D,UD7HiB,WC8HjBuiC,iBD9HsC,WC8HLtiC,SAAA,EAEjCH,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GDjI2H,WCiIlF,eAEpDstG,OAAK,EACL39G,OAAOq9C,EAAAA,GAAAA,GACL,oBAAoBy/D,IACpBl7C,GAAmB,6BAA6BA,KAChD3nE,SAAA,EAEFC,EAAAA,GAAAA,GAAA,OACEF,UAAW0jH,EACX19G,MAAOq9G,EAAwB,wBAAwBA,SAA0BtgH,IAElFygH,IACCtjH,EAAAA,GAAAA,GAAC0jH,GAAAA,EAAO,CAEN9iH,QAAS0iH,EACTh0G,SAAUmwC,EAAAA,GACVrvC,gBAAgB,SAChBuzG,YAAU,EACVC,WAAS,EACTC,gBAAiB,EACjBC,aAAa,EACbC,gBAAc,EACdC,eAAa,EACbC,cAAc,EACdC,wBAAwB,EACxBC,uBAAuB,GAZlB3tD,OAgBX52D,EAAAA,GAAAA,IAAA,OAAKE,UD/JgF,WC+JpDC,SAAA,EAC/BC,EAAAA,GAAAA,GAAA,KAAGF,UDhKqJ,WCgK9HC,SACvBgN,EAAK,yBAA0B,CAAEonC,MAAMtK,EAAAA,EAAAA,IAAgBgpB,QAE1D7yD,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLG,QAASs1G,EAAgBtjH,SAExBgN,EAAK,mC,4BC7HhB,MAkIA,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAMyN,GAAWC,EAAAA,EAAAA,KAAe1N,IAC1B,kCAAE6zC,GAAsCpmC,EAG9C,MAAO,CACLomC,oCACAkvE,aAJmB/iH,EAAO+5F,OAAOipB,QAAQ9lE,QAAU,EAKnD+lE,wBAJ8Bv5G,QAAQ+D,EAASy1G,qBALjC51G,CAlIyC61G,EAC3Dr8E,QAAO+M,oCAAmCovE,0BAAyBF,mBAEnE,MAAM,+BACJK,EAA8B,oBAC9BC,EAAmB,gBACnBlS,EAAe,iBACf7wE,EAAgB,wCAChBgjF,IACE34G,EAAAA,EAAAA,MACEe,GAAOC,EAAAA,EAAAA,KACPrB,EAASZ,QAAQo9B,IAEhBhC,EAAS0rB,EAAaC,IAAiB7yD,EAAAA,EAAAA,MAE9CsL,EAAAA,EAAAA,IAAU,KACJoB,GACFkmD,KAED,CAAClmD,EAAQkmD,IAEZ,MAAM,QACJjxD,EAAO,OAAE+8B,EAAM,UAAEoqC,EAAS,gBAAE68C,GAC1Bz8E,GAAS,CAAC,GAER,oBACJ08E,GACED,GAAmB,CAAC,GAGtBE,mBAAoBC,EACpBC,cAAeC,EACfC,kBAAmBC,EACnBC,eAAgBC,EAChBC,uBAAwBC,IACtBC,EAAAA,GAAAA,GAA2BX,GAAuB,EAAGP,EAAyBF,GAE5EppF,GAAczuB,EAAAA,EAAAA,GAAgB,KAClCk4G,IACI18C,GACFyqC,EAAgB,CACdzqC,YACAj5C,MAAO,CACLg8C,UAAW,0BACXC,UAAW,CAAEx/B,MAAO,sBAMtBk6E,GAAal5G,EAAAA,EAAAA,GAAgB,CAAC1M,EAAYyP,KAC9C,GAAI1O,GAAWmnE,EAAW,CACxB,MAAM1mE,GAAS6qC,EAAAA,EAAAA,MACTnY,GAAOQ,EAAAA,EAAAA,KAAWlzB,EAAQxB,GAChC6kH,EAAoB,CAClBl4G,OAAQ3M,EACRyP,SAAUA,GAAYmwC,EAAAA,GACtB5/C,GAAIe,EAAQ+X,OAAO9Y,GACnB67E,QAAS96E,EAAQ+X,OAAO+iE,UAErBmpC,GACHljF,EAAiB,CACf/gC,QAASmM,EAAK,kBAAkB8mB,EAAAA,GAAAA,IAAa9mB,EAAMgnB,MAGvDy+E,EAAgB,CACdzqC,YACAj5C,MAAO,CACLg8C,UAAW,2BAGf25C,IACAE,EAAwC,CAAE/sG,UAAM/U,GAClD,IAGIkvD,GAAwBxlD,EAAAA,EAAAA,GAAgB,CAAC1M,EAAYyP,KACzDq1G,EAAwC,CAAE/sG,KAAM,CAAEhM,OAAQ/L,EAAIyP,gBAG1Do2G,GAAoCn5G,EAAAA,EAAAA,GAAgB,KACpDq4G,GACFW,EAAoCE,EAAYb,EAAgBh5G,OAAQg5G,EAAgBt1G,YAItFq2G,GAAyCp5G,EAAAA,EAAAA,GAAgB,KAC7Dw4G,IACAJ,EAAwC,CAAE/sG,UAAM/U,OAGlD0H,EAAAA,EAAAA,IAAU,KACJq6G,GACFc,KAED,CAACd,IAEJ,MAAMvjH,GAAS6qC,EAAAA,EAAAA,MACTnY,EAAO6wF,GAAkBrwF,EAAAA,EAAAA,KAAWlzB,EAAQujH,EAAgBh5G,aAAU/I,EACtE+iH,EAAW7xF,GAAOF,EAAAA,GAAAA,IAAa9mB,EAAMgnB,QAAQlxB,EAEnD,GAAK8I,GAAWw6B,EAIhB,OACEvmC,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAACowD,GAAe,CACdzkD,OAAQA,EACR6/C,kBAAmBz+C,EAAK,UACxB4wB,OAAQA,EACR2yB,kBAAmByB,EACnBlmD,QAASmvB,EACTlvB,oBAAqBgmD,EACrBlG,oBAAkB,KAEpB5rD,EAAAA,GAAAA,GAAC6lH,GAAAA,EAA2B,CAC1Bl6G,OAAQupC,EACRrpC,QAAS85G,EACTG,SAAUF,EACVG,oBAAqBlB,GAAuB,EAC5CmB,cAAe,EACfd,kBAAmBC,EACnBC,eAAgBC,EAChB9hF,eAAgB0hF,U,gBCrKxB,UAAgB,QAAU,WAAW,YAAc,WAAW,QAAU,WAAW,KAAO,WAAW,MAAQ,WAAW,MAAQ,WAAW,YAAc,WAAW,cAAgB,WAAW,YAAc,WAAW,iBAAmB,WAAW,aAAe,YC4SrQ,IAAetmH,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAU8mC,YACT,MAAM89E,EAAc5kH,EAAO+5F,OAAOipB,QAC5BtwF,EAAOoU,GAAQ5T,EAAAA,EAAAA,KAAWlzB,EAAQ8mC,EAAM37B,aAAU3J,EAClDqjH,EAAe/9E,GAAQg+E,EAAAA,GAAAA,IAAY9kH,EAAQ8mC,EAAM37B,OAAQizC,EAAAA,SAAkB58C,GAE3E,UAAEqxC,GAAc7yC,EAChB+kH,EAAiBlyE,EAAUmyE,4BAC3BC,EAAiBpyE,EAAUqyE,4BAC3BC,EAAgBtyE,EAAUuyE,yBAC1BC,EAAYxyE,EAAUyyE,4BACtBC,EAAY1yE,EAAU2yE,4BAEtBC,EAAe5yE,EAAU6yE,0BACzBC,EAAe9yE,EAAU+yE,0BAEzBC,IAAmB/+E,IAAQ0oB,EAAAA,EAAAA,KAAuBxvD,EAAQ8mC,EAAM37B,QAEtE,MAAO,CACLunB,OACAkyF,cACAkB,WAAY9lH,EAAO+lH,KAAK/C,SAAS9lE,OACjC2nE,eACAE,iBACAE,iBACAQ,eACAE,eACAR,gBACAE,YACAE,YACAM,qBA9Bcv4G,CA/OQ04G,EAC1Bl/E,QACA89E,cACAkB,aACApzF,OACAmyF,eACAE,iBACAE,iBACAQ,eACAE,eACAR,gBACAE,YACAE,YACAM,uBAEA,MAAM,yBAAEI,EAAwB,6BAAEC,EAA4B,sBAAEC,IAA0Bx7G,EAAAA,EAAAA,OACnF8rF,EAAkBC,EAAcC,IAAiB/4F,EAAAA,EAAAA,KAElDwoH,EAA2BvB,GAAcwB,kBACzCC,EAAmBzB,GAAcrqC,UACjC+rC,EAAyB78G,QAAQ48G,IAEhCE,EAAgBC,IAAqB37G,EAAAA,EAAAA,IAC1Cs7G,GAA0Bx7B,OAAO1tC,aAAU17C,IAEtCklH,EAAkBC,IAAuB77G,EAAAA,EAAAA,IAC9Cs7G,GAA0Bx7B,OAAOF,UAAYuP,EAAAA,MAExC2sB,EAAcC,IAAmB/7G,EAAAA,EAAAA,IACtCs7G,GAA0BQ,aACkB,IAAxCR,EAAyBQ,kBACzBplH,IAGN0H,EAAAA,EAAAA,IAAU,KACR,MAAM0hF,EAAQw7B,GAA0Bx7B,MAClC1tC,EAAS0tC,GAAOF,WAAao8B,EAAAA,KAAoBC,EAAAA,GAAAA,IAAoBn8B,EAAM1tC,QAAU0tC,GAAO1tC,OAClGupE,EAAkBvpE,GAClBypE,EAAoBP,GAA0Bx7B,OAAOF,UAAYuP,EAAAA,KACjE4sB,EAAgBT,GAA0BQ,aACE,IAAxCR,EAAyBQ,kBACzBplH,IACH,CAAC4kH,IAEJ,MAAM16G,GAAOyqC,EAAAA,GAAAA,KACPD,GAAUvqC,EAAAA,EAAAA,KAEVq7G,EAAkBN,IAAqBzsB,EAAAA,IACvCnvE,EAAMjZ,KAAKmI,MAAM6Q,KAAKC,MAAQ,KAC9B6rC,EAA4B,KAAnB7rC,EAAMu6F,GACfzuD,EAA4B,KAAnB9rC,EAAMy6F,GACf0B,EAA8C,KAAvBn8F,EAAkB,EAAZu6F,GAE7B6B,GAAqBh8G,EAAAA,EAAAA,GAAiBM,IAC1C,MAAMF,EAAQE,EAAEC,OAAOH,MACjB67G,EAAS/9D,WAAW99C,GAEpBgM,EAAmB,KAAVhM,GAAgB2Y,OAAOmjG,MAAMD,QAAU3lH,EAClDqQ,KAAK4a,IAAI5a,KAAKma,IAAIm7F,EAAQ,GAAIE,GAElCZ,EAAkBnvG,KAGdkkF,GAAyBtwF,EAAAA,EAAAA,GAAiB0mB,IAC9Ci1F,EAAgBj1F,EAAK4mC,WACrBm+B,MAGI2wB,GAAqBp8G,EAAAA,EAAAA,GAAgB,KACzC27G,OAAgBrlH,GAChBm1F,MAGI4wB,EAAmBP,EAAkB/B,GAAiB8B,EAAAA,GAAAA,IAAoBpB,GAC1E0B,EAAmBL,EAAkBjC,GAAiBgC,EAAAA,GAAAA,IAAoBtB,GAC1E78G,EAAac,QAAQ88G,IAAmBA,EAAiBe,EAEzDC,GAAct8G,EAAAA,EAAAA,GAAgB,KAClC,MAAMu8G,EAAejB,EAChBQ,EAAkBR,GAAiBkB,EAAAA,GAAAA,IAAkBlB,GACtD,EAEJ,IAAI59G,EAAJ,CAIA,IAAKi9G,EACH,GAAImB,GAGF,GAAIS,GAFmB7C,GAAa1nE,QAAU,GAQ5C,YALAipE,EAAsB,CACpBwB,MAAO,CACLC,cAAeH,UAOrB,GAAIA,GADsB3B,GAAc,GAKtC,YAHAK,EAAsB,CACpBz7B,SAAUo8B,EAAAA,MAOlBZ,EAA6B,CAC3Bt7B,MAAO,CAAEF,SAAUg8B,EAAkBxpE,OAAQuqE,EAAcI,MAAO,GAClEjB,aAAcA,EACV/0G,KAAKma,IAAI46F,EAAe,KAAMjmF,EAAAA,GAAAA,MAAkB0kF,EAlH3B,SAmHrB7jH,IAGNykH,GAhCA,IAmCF,OACEtnH,EAAAA,GAAAA,GAACoN,EAAAA,EAAK,CACJ0jG,gBAAiBtzF,GAAO2rG,YACxBx9G,OAAQZ,QAAQo9B,GAChBt8B,QAASy7G,EACThlF,QAAM,EACNspB,oBAAkB,EAClBooB,gBAAc,EACd3xC,iBAAkB7kB,GAAOzK,QACzB5F,MAAgCJ,EAAzB66G,EAA8B,wBAAgC,uBAAuB7nH,UAE5FH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAO4rG,KAAKrpH,SAAA,EAC1BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOurB,QAAQhpC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAO6rG,iBAAiBtpH,SAAA,EACtCH,EAAAA,GAAAA,IAACgO,EAAAA,EAAM,CACL9N,UAAW0d,GAAO8rG,eAClBz7G,MAAOw6G,EAAkB,UAAY,cACrC9b,MAAI,EACJnkD,OAAK,EACLloD,KAAK,OACL+mG,aAAW,EACXl5F,QAASA,IAAMi6G,EAAoB1sB,EAAAA,KAAqBv7F,SAAA,EAExDC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,OAAOzN,UAAW0d,GAAO+rG,eACnCx8G,EAAK,qBAERnN,EAAAA,GAAAA,IAACgO,EAAAA,EAAM,CACL9N,UAAW0d,GAAO8rG,eAClBlhE,OAAK,EACLv6C,MAAQw6G,EAA8B,cAAZ,UAC1B9b,MAAI,EACJrsG,KAAK,OACL+mG,aAAW,EACXl5F,QAASA,IAAMi6G,EAAoBG,EAAAA,KAAmBpoH,SAAA,EAEtDC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,UAAUzN,UAAW0d,GAAO+rG,eACtCx8G,EAAK,sBAGV/M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRT,MAAOH,EAAK,yBACZjN,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAO2rB,OACjCx8B,MAAOk7G,GAAgB/6B,WACvBr/E,SAAU86G,EACVzsD,UAAU,UACVryB,SAAU,EACVH,0BAA2B++E,KAE7BroH,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOpR,YAAYrM,cACb8C,IAAnBglH,GAAgCA,EAAiB,GAAKA,EAAiBe,EACpE77G,EAAK,uCAAwC,CAC7CwxC,OAAQ8pE,GACJmB,EAAAA,GAAAA,IAAkBz8G,EAAM67G,IACxBa,EAAAA,GAAAA,IAAgB18G,EAAM67G,IAC5B,CAAElqE,WAAW,EAAMgV,cAAc,IAE7B3mD,EADFs7G,EACO,sCACA,2CAIfzoH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOurB,QAAQhpC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAO2rB,MAAO,cAAe,WAAWppC,SAAA,EACrEC,EAAAA,GAAAA,GAAA,SACEkB,KAAK,OACLpB,WAAWqW,EAAAA,GAAAA,GAAe,eAAgB2hF,GAAoB,SAC9DnrF,MAAOs7G,GACHyB,EAAAA,GAAAA,IAAwBzB,EAAe,IAAMl7G,EAAMwqC,GACnDxqC,EAAK,yBACT48G,aAAa,MACb57G,QAASgqF,EACT/3C,QAAS+3C,EACT6xB,UAAQ,KAEV5pH,EAAAA,GAAAA,GAAA,SAAAD,SAAQgN,EAAK,mCACb/M,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,OAAOzN,UAAW0d,GAAOqsG,oBAEtC7pH,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOpR,YAAYrM,SAChCgN,EAAK,gCAAiC,CACrCwxG,KAAMxxG,EAAK,8BACXoM,UAAUw5F,EAAAA,GAAAA,IAAoB5lG,EAAMy5G,GAAe,WAKzDxmH,EAAAA,GAAAA,GAAC83D,GAAa,CACZnsD,OAAQmsF,EACR5/B,cAAY,EACZE,gBAAc,EACdJ,MAAOA,EACPC,MAAOA,EACPpsD,QAASmsF,EACTx/B,SAAUqkC,EACV9kC,WAAYkwD,GAAgBK,EAC5BhwD,kBAAmBvrD,EAAK,QACxBwrD,kBAAmBxrD,EAAK,yBACxB2rD,oBAAqBiwD,EACrBv8G,YAAaW,EAAK,iCAGpB/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAW0d,GAAOssG,YAClB/7G,QAAS86G,EACT1oG,SAAUlW,EAAWlK,SAEpB6nH,EAAyB76G,EAAK,qBAC3B86G,EAAiB96G,EAAK,oBAAqB,CAC3CwxC,OAAQ8pE,GACJ7pE,EAAAA,GAAAA,IAAkBzxC,EAAM86G,EAAgB,CAAEppE,QAAQ,KAClDsrE,EAAAA,GAAAA,IAAgBh9G,EAAM86G,IACzB,CACDnpE,WAAW,EACXgV,cAAc,IACX3mD,EAAK,6BCrStB,GAA0B,WCwN1B,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAU8mC,YACT,MAAMvnC,EAAUunC,IAASpT,EAAAA,EAAAA,KAAkB1zB,EAAQ8mC,EAAM37B,OAAQ27B,EAAM1vB,WACjE61B,EAAS1tC,GAAUuxB,EAAAA,EAAAA,KAAa9wB,EAAQT,QAAWiC,EACnDmnH,EAAU7hF,IAAS0oB,EAAAA,EAAAA,KAAuBxvD,EAAQ8mC,EAAM37B,SACxD,UAAE0nC,GAAc7yC,EAChB4oH,EAAqB/1E,EAAUg2E,qCAC/BC,EAAwBj2E,EAAUk2E,mCAClCh+C,EAASl4B,EAAUuyE,yBACnBC,EAAYxyE,EAAUyyE,4BACtBC,EAAY1yE,EAAU2yE,4BACtBoB,EAAernH,GAAS8mH,mBAAmBO,aAEjD,MAAO,CACL77C,SACAs6C,YACAE,YACAhmH,UACA0tC,SACA07E,UACAC,qBACAE,wBACAlC,iBAtBct5G,CA9Ke07G,EACjCliF,QACAvnC,UACA0tC,SACA07E,UACAC,qBACAE,wBACA/9C,SACAs6C,YACAE,YACAqB,mBAEA,MAAM,gCACJqC,EAA+B,qBAC/BC,IACEv+G,EAAAA,EAAAA,MAEEe,GAAOyqC,EAAAA,GAAAA,KACPD,GAAUvqC,EAAAA,EAAAA,MACT8qF,EAAkBC,EAAcC,IAAiB/4F,EAAAA,EAAAA,KAElDktB,EAAMjZ,KAAKmI,MAAM6Q,KAAKC,MAAQ,KAC9B6rC,EAA4B,KAAnB7rC,EAAMu6F,GACfzuD,EAA4B,KAAnB9rC,EAAMy6F,GACf0B,EAAsBn8F,EAAkB,EAAZu6F,GAE3B8D,EAAsBC,IAA2Bt+G,EAAAA,EAAAA,IAAiBm8G,GAEnEttF,GAAczuB,EAAAA,EAAAA,GAAgB,KAClC+9G,MAGII,GAAgBn+G,EAAAA,EAAAA,GAAiB0mB,IAChCkV,IAELoiF,EAAqB,CACnB/9G,OAAQ27B,EAAM37B,OACdiM,UAAW0vB,EAAM1vB,UACjBwvG,aAAch1F,IAGhBq3F,OAGIK,GAA2Bp+G,EAAAA,EAAAA,GAAiB0mB,IAChD,MAAMlb,EAAO7E,KAAKmI,MAAM4X,EAAK4mC,UAAY,KACzC4wD,EAAwB1yG,KAGpB6yG,GAAuBr+G,EAAAA,EAAAA,GAAiB0mB,IAC5C,MAAMlb,EAAO7E,KAAKmI,MAAM4X,EAAK4mC,UAAY,KACzCm+B,IACA0yB,EAAc3yG,KAGV8yG,GAAmBt+G,EAAAA,EAAAA,GAAgB,KACvCyrF,IACA0yB,MAGII,GAAav+G,EAAAA,EAAAA,GAAgB,KAC7B07G,EACFyC,EAAczC,GAEdlwB,MAIJ,IAAK5vD,IAAUvnC,EACb,OAGF,MAAMmqH,EAAaz8E,GAAS08E,EAAAA,GAAAA,IAAiBzzE,EAASjJ,GAAU,GAqEhE,OACE1uC,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQZ,QAAQo9B,KAAW2vD,EAC3BjsF,QAASmvB,EACT7tB,MAAOJ,EAAK,6BACZw2B,eAAgBunF,EAChBxnF,aAA6Bv2B,EAAfk7G,EAAoB,gBAAwB,QAAQloH,SA1ElDm7G,MACpB,MAAMjvB,EAAQrrF,GAAS8mH,mBAAmBz7B,MACpC1tC,EAAS0tC,GAAO1tC,OAChBwtC,EAAWE,GAAOF,UAAYuP,EAAAA,IAE9B2vB,EAAWl+G,EACf,8BACA,CAAEgnB,KAAMg3F,GACR,CAAErsE,WAAW,EAAMgV,cAAc,IAE7Bw3D,GAAel3F,EAAAA,GAAAA,GAAWi3F,GAChC,IAAK1sE,EACH,OAAO2sE,EAGT,MACMC,GAD4Bp/B,IAAao8B,EAAAA,IAAoBgC,EAAwBF,GAC3C,GAC1CmB,EAAuB7sE,EAAS,IAAM4sE,EAEtCE,EAAkBt/B,IAAao8B,EAAAA,KACjCsB,EAAAA,GAAAA,IAAgB18G,GAAMq7G,EAAAA,GAAAA,IAAoBgD,KAC1C5B,EAAAA,GAAAA,IAAkBz8G,EAAMq+G,GAEtB5E,EAAgBp6C,EAChBjzD,GAAWw5F,EAAAA,GAAAA,IAAoB5lG,EAAMy5G,GAAe,GAE1D,GAAIyB,EAAc,CAChB,MAAMlwG,GAAO2xG,EAAAA,GAAAA,IAAwBzB,EAAcl7G,EAAMwqC,GAEnD9xB,EACJukG,EAAU,2CAA6C,0CAEzD,OACEpqH,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAAD,SACGmrH,KAEHlrH,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAezd,UAC5Bi0B,EAAAA,GAAAA,GAAWjnB,EAAK0Y,EAAK,CACpB84B,OAAQ8sE,EACRF,aACAhyG,WACApB,QACC,CAAE2mC,WAAW,EAAMgV,cAAc,SAI5C,CAEA,MAAMjuC,EAAMukG,EAAU,mCAAqC,kCAE3D,OACEpqH,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAAD,SACGmrH,KAEHlrH,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAezd,UAC5Bi0B,EAAAA,GAAAA,GAAWjnB,EAAK0Y,EAAK,CACpB84B,OAAQ8sE,EACRF,aACAhyG,YACC,CAAEulC,WAAW,EAAMgV,cAAc,WAerCwnD,MAGHl7G,EAAAA,GAAAA,GAAC83D,GAAa,CACZnsD,OAAQmsF,EACR5/B,cAAY,EACZE,gBAAc,EACdJ,MAAOA,EACPC,MAAOA,EACPpsD,QAASmsF,EACTx/B,SAAUoyD,EACVnyD,aAAckyD,EACd5yD,WAAmC,IAAvByyD,EACZlyD,kBAAmBvrD,EAAK,sBAAuB,CAC7CgL,MAAM2xG,EAAAA,GAAAA,IAAwBc,EAAsBz9G,EAAMwqC,KAE5DghB,kBAAmBxrD,EAAK,cACxB2rD,oBAAqBmyD,EACrBz+G,YAAaW,EAAK,sCC7MpBu+G,GAAsD,CAC1D,aACA,YACA,aACA,aACA,kBACA,aACA,aACA,WACA,eACA,YAEIC,GAAgD,IAAID,GAAmB,aAE9D,SAASE,GAAqBC,GAC3C,MAAOC,EAAaC,IAAkBx/G,EAAAA,EAAAA,IAA8B,CAAC,IAC9Dy/G,EAAuBC,IAA4B1/G,EAAAA,EAAAA,KAAS,IAC5DwoB,EAAWm3F,IAAgB3/G,EAAAA,EAAAA,KAAS,IAE3C5B,EAAAA,EAAAA,IAAU,KACRohH,EAAeF,GAAsB,CAAC,GACtCI,GAAyB,GACzBhhH,WAAW,KACTihH,GAAa,IAxB0B,MA0BxC,CAACL,IAEJ,MAAMM,GAAyBpsH,EAAAA,EAAAA,IAAakN,IAC1C,MAAQU,KAAMy+G,GAAen/G,EAAEC,OAEzBS,EAAOy+G,EAEb,SAASC,EAA0Bt/G,GACjC,OAAOA,QAAQ9J,CACjB,CAEA,MAAMqpH,EAAiBR,EAEvB,IAAIS,EAAsC,IACrCD,EACH,CAAC3+G,GAAO0+G,EAA0BC,EAAe3+G,OACpC,iBAATA,GAA2B,CAC7B6+G,SAAUH,EAA0BC,EAAe3+G,MAIvD,MAAM8+G,EAAaA,KACjB,MAAMC,EAAmBhB,GAAkB73G,IAAKgS,GAAQ0mG,EAAe1mG,IACnE6mG,EAAiB9lC,KAAM+lC,IAAOA,GAChCJ,EAAiB,IACZA,EACHK,eAAW3pH,GAEJypH,EAAiBrX,MAAMlqG,WAChCohH,EAAiB,IACZA,EACHK,WAAW,KAKJ,cAATj/G,EACF8+G,IAEAF,EAAiB,IACZA,KACCb,GAAkBhpE,OAAO,CAACkL,EAAK/nC,IACjCo9B,OAAO4pE,OAAOj/D,EAAK,CAAE,CAAC/nC,GAAM0mG,EAAeK,YAC1C,CAAC,IAKK,eAATj/G,IAA0B4+G,EAAeO,YAAcP,EAAeQ,YACxER,EAAiB,IACZA,EACHO,YAAY,IAIH,cAATn/G,IAAyB4+G,EAAeO,YAAcP,EAAeQ,YACvER,EAAiB,IACZA,EACHQ,eAAW9pH,IAIF,cAAT0K,GACF8+G,IAGF,MAAMO,EAAerB,GAAoBtW,MAAOxvF,GAAQ0mG,EAAe1mG,IACvE0mG,EAAiB,IACZA,EACHS,eAAcA,QAAsB/pH,GAGtC8oH,EAAeQ,GAEfN,GAA0BJ,GAAsB5oE,OAAO8K,KAAKw+D,GAAgB3lC,KAAMt4D,IAChF,MAAMzI,EAAMyI,EACZ,OAAOnjB,QAAQ0gH,EAAmBhmG,MAAU1a,QAAQohH,EAAe1mG,QAEpE,CAACgmG,EAAoBC,IAElBmB,GAAmBltH,EAAAA,EAAAA,IAAY,KACnCgsH,EAAeF,GAAsB,CAAC,GACtCI,GAAyB,IACxB,CAACJ,IAEJ,MAAO,CACLC,cACA/2F,YACAi3F,wBACAG,yBACAD,eACAe,mBAEJ,CCtFA,MAAMC,GAAmD,CACvD,aAAc,aAAc,eAC5B,aAAc,WAAY,aAAc,kBAAmB,aAAc,aAsP3E,IAAenuH,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM0C,EAAO1C,GAAS6nC,EAAAA,EAAAA,KAAWhzC,EAAQmL,QAAU3J,EAC7CkqH,EAAW79G,IAAQ6hD,EAAAA,EAAAA,KAAmB1vD,EAAQ6N,EAAKrP,IAGzD,MAAO,CACLqP,OACA89G,cAJoBjiH,QAAQgiH,GAAUE,gBAJxBt+G,CAnPsCu+G,EACxDh+G,OACAi+G,sBACAC,yBACAJ,gBACAtB,cACAK,yBACAjsH,YACAutH,mBACAC,oBACAC,eACAC,uBACAC,sBAEA,MAAM,iBACJ9rF,IACE31B,EAAAA,EAAAA,OAEE,QAAEgiD,GAAY9+C,GAAQ,CAAC,EAEvBnC,GAAOyqC,EAAAA,GAAAA,KAEP5E,GAAW7qC,EAAAA,EAAAA,IAAQ,IAAMmH,IAAQylF,EAAAA,EAAAA,IAAazlF,GAAO,CAACA,IACtDw+G,EAAwCV,GAAiBp6E,EAEzD+6E,GAA0B5lH,EAAAA,EAAAA,IAAQ,IAC/B+kH,GAAkBxqE,OAAO,CAAClvB,EAAO3N,KACjCimG,EAAYjmG,KACf2N,GAAS,GAEJA,GACN,GACF,CAACs4F,IAEEkC,GAA0BrhH,EAAAA,EAAAA,GAAiBM,KAC/ChJ,EAAAA,EAAAA,GAAUgJ,GACVugH,GAAwBD,KAGpBU,GAAsBthH,EAAAA,EAAAA,GAAgB,KAC1Co1B,EAAiB,CAAE/gC,QAASmM,EAAK,kCAGnC,OACEnN,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAe,WAAYo3G,GAAgB,iBAAiBxtH,UAC1EC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,YACL27B,SAAUwiF,EAAYiB,UACtBz/G,MAAOH,EAAK,wBACZ+gH,UAAQ,EACRL,gBAAiBA,EACjBhgH,SAAUs+G,EACV5rG,SAAUqtG,GAAwBA,EAAqB,kBAG3DxtH,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAe,WAAYo3G,GAAgB,iBAAiBxtH,UAC1EC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,YACL27B,SAAUwiF,EAAYc,UACtBt/G,MAAOH,EAAK,6BACZghH,UAAW,GAAGJ,KAA2Bb,GAAkBnrH,SAC3DmsH,UAAQ,EACRL,gBAAiBA,EACjBO,UAAWb,EAAsB,KAAO,OACxC1/G,SAAUs+G,EACVkC,aAAcL,EACdztG,SAAUqtG,GAAwBA,EAAqB,kBAG3DxtH,EAAAA,GAAAA,GAAA,OAAKF,UAAWwtH,EAAkBvtH,UAChCH,EAAAA,GAAAA,IAAA,OACEE,UAAWA,EAAUC,SAAA,EAErBC,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAe,WAAYo3G,GAAgB,iBAAiBxtH,UAC1EC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,aACL27B,SAAUwiF,EAAYwC,WACtBhhH,MAAOH,EAAK,6BACZ+gH,UAAQ,EACRL,gBAAiBA,EACjBhgH,SAAUs+G,EACV5rG,SAAUqtG,GAAwBA,EAAqB,mBAI3DxtH,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAe,WAAYo3G,GAAgB,iBAAiBxtH,UAC1EC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,aACL27B,SAAUwiF,EAAYyC,WACtBjhH,MAAOH,EAAK,6BACZ+gH,UAAQ,EACRL,gBAAiBA,EACjBhgH,SAAUs+G,EACV5rG,SAAUqtG,GAAwBA,EAAqB,mBAI3DxtH,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAe,WAAYo3G,GAAgB,iBAAiBxtH,UAC1EC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,eACL27B,SAAUwiF,EAAY0C,eAAiB1C,EAAYU,SACnDl/G,MAAOH,EAAK,mCACZ+gH,UAAQ,EACRL,gBAAiBA,EACjBhgH,SAAUs+G,EACV5rG,SAAUqtG,GAAwBA,EAAqB,qBAI3DxtH,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAe,WAAYo3G,GAAgB,iBAAiBxtH,UAC1EC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,aACL27B,SAAUwiF,EAAY2C,WACtBnhH,MAAOH,EAAK,6BACZ+gH,UAAQ,EACRL,gBAAiBA,EACjBhgH,SAAUs+G,EACV5rG,SAAUqtG,GAAwBA,EAAqB,mBAI3DxtH,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAe,WAAYo3G,GAAgB,iBAAiBxtH,UAC1EC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,WACL27B,SAAUwiF,EAAY4C,SACtBphH,MAAOH,EAAK,4BACZ+gH,UAAQ,EACRL,gBAAiBA,EACjBhgH,SAAUs+G,EACV5rG,SAAUqtG,GAAwBA,EAAqB,iBAI3DxtH,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAe,WAAYo3G,GAAgB,iBAAiBxtH,UAC1EC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,aACL27B,SAAUwiF,EAAY6C,WACtBrhH,MAAOH,EAAK,6BACZ+gH,UAAQ,EACRL,gBAAiBA,EACjBhgH,SAAUs+G,EACV5rG,SAAUqtG,GAAwBA,EAAqB,mBAI3DxtH,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAe,WAAYo3G,GAAgB,iBAAiBxtH,UAC1EC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,kBACL27B,SAAUwiF,EAAY8C,gBACtBthH,MAAOH,EAAK,kCACZ+gH,UAAQ,EACRL,gBAAiBA,EACjBhgH,SAAUs+G,EACV5rG,SAAUqtG,GAAwBA,EAAqB,wBAI3DxtH,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAe,WAAYo3G,GAAgB,iBAAiBxtH,UAC1EC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,aACL27B,SAAUwiF,EAAYgB,WACtBx/G,MAAOH,EAAK,+BACZ+gH,UAAQ,EACRL,gBAAiBA,EACjBhgH,SAAUs+G,EACV5rG,SAAUqtG,GAAwBA,EAAqB,mBAI3DxtH,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAe,WAAYo3G,GAAgB,iBAAiBxtH,UAC1EC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,YACL27B,SAAUwiF,EAAY+C,UACtBvhH,MAAOH,EAAK,4BACZ+gH,UAAQ,EACRL,gBAAiBA,EACjBhgH,SAAUs+G,EACV5rG,SAAUqtG,GAAwBA,EAAqB,uBAK/D5tH,EAAAA,GAAAA,IAAA,OAAKE,UAAWutH,EAAiBttH,SAAA,EAC/BC,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAe,WAAYo3G,GAAgB,iBAAiBxtH,UAC1EC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,cACL27B,SAAUwiF,EAAYgD,YACtBxhH,MAAOH,EAAK,+BACZ+gH,UAAQ,EACRL,gBAAiBA,EACjBhgH,SAAUs+G,EACV5rG,SAAUqtG,GAAwBA,EAAqB,oBAG3DxtH,EAAAA,GAAAA,GAAA,OACEF,WAAWqW,EAAAA,GAAAA,GAAe,WAAYo3G,GAAgB,iBACtDx/G,QAAS2/G,EAAwCG,OAAsBhrH,EAAU9C,UAEjFC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,cACL27B,SAAUwiF,EAAYiD,YACtBzhH,MAAOH,EAAK,+BACZoT,SAAUqtG,EAAuBA,EAAqB,eAClDE,EACJI,UAAQ,EACRL,gBAAiBA,EACjBhgH,SAAUs+G,OAGd/rH,EAAAA,GAAAA,GAAA,OACEF,WAAWqW,EAAAA,GAAAA,GAAe,WAAYo3G,GAAgB,iBACtDx/G,QAAS2/G,EAAwCG,OAAsBhrH,EAAU9C,UAEjFC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,aACL27B,SAAUwiF,EAAYkD,WACtB1hH,MAAOH,EAAK,8BACZ+gH,UAAQ,EACRL,gBAAiBA,EACjBttG,SAAUqtG,EAAuBA,EAAqB,cAClDE,EACJjgH,SAAUs+G,MAGb/9D,IACChuD,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAe,WAAYo3G,GAAgB,iBAAiBxtH,UAC1EC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,eACL27B,SAAUwiF,EAAYmD,aACtB3hH,MAAOH,EAAK,gCACZ+gH,UAAQ,EACRL,gBAAiBA,EACjBhgH,SAAUs+G,EACV5rG,SAAUqtG,GAAwBA,EAAqB,6B,gBCpRrE,SAAqI,WAArI,GAAuL,WC2evL,IAAe7uH,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,mBACJytH,IACE//G,EAAAA,EAAAA,KAAe1N,GACbsR,EAAam8G,GAAoBn8G,WACjCnG,EAASsiH,GAAoBtiH,QAC7B,gBAAEuiH,IAAoBC,EAAAA,EAAAA,KAAgC3tH,EAAQsR,GAC9DzD,EAAO1C,GAAS6nC,EAAAA,EAAAA,KAAWhzC,EAAQmL,QAAU3J,EAC7CiuD,EAAe5hD,IAAQ6hD,EAAAA,EAAAA,KAAmB1vD,EAAQ6N,EAAKrP,IACvDotH,EAAen8D,GAAcm8D,aAC7Bz5F,EAAYzoB,QAAQmE,KAASukB,EAAAA,EAAAA,IAAcvkB,GAC3C+/G,EAAelkH,QAAQmE,KAASmlF,EAAAA,EAAAA,IAAiBnlF,GACjD0D,EAAak8G,GAAoBl8G,WACjCtE,EAAYwgH,GAAoBxgH,UAChC4gH,EAAchgH,IAAQR,EAAAA,EAAAA,IAASQ,EAAKrP,KACtCqyD,EAAAA,EAAAA,KAAuB9d,EAAAA,EAAAA,KAAW/yC,GAAQ8tH,EAAAA,EAAAA,IAAqBjgH,UAC/DrM,EACEusH,EAAUrkH,QAAQmE,KAASmgH,EAAAA,EAAAA,IAAYngH,EAAKrP,MAAOyvH,EAAAA,EAAAA,KAAUjuH,EAAQ6N,EAAKrP,KAC1E41F,EAAmB3kC,GAAc2kC,iBACjC85B,EAAcrgH,IAAQyhD,EAAAA,EAAAA,IAAiBzhD,EAAM,YAC7CsgH,EAAYtgH,GAAMsgH,UAClBC,EAAgBvgH,GAAOwgH,EAAAA,EAAAA,KAAoBruH,EAAQ6N,QAAQrM,EAC3D8sH,EAAgCzgH,IAAQ0gH,EAAAA,EAAAA,IAAiB1gH,KAAU6/G,GAAoBU,EACvFI,EAAmB3gH,KAASmlF,EAAAA,EAAAA,IAAiBnlF,IAASskB,GAE5D,MAAO,CACLtkB,OACAskB,YACAy7F,eACAt8G,aACAyhB,cAAe/yB,EAAO+yB,cACtB26F,iBAAkBn8G,GAAcm8G,EAChCG,cACAS,+BACAE,mBACAp6B,mBACA25B,UACAG,cACAtC,eACAr6G,aACA48G,YACAlhH,cA1CcK,CA9ZkCmhH,EACpDnkH,SACAuD,OACAskB,YACAy7F,eACAr8G,aACAwhB,gBACAzhB,aACA68G,YACAT,kBACAG,cACAS,+BACAE,mBACAT,UACA35B,mBACA85B,cACAtC,eACA3+G,gBAEA,MAAM,wBACJyhH,EAAuB,eACvBC,EAAc,kBACdC,EAAiB,iBACjBC,EAAgB,wBAChBC,EAAuB,sBACvBC,EAAqB,6BACrBC,EAA4B,yBAC5BC,IACEtkH,EAAAA,EAAAA,MAEE4sD,GAAariC,EAAAA,EAAAA,GAAsB5qB,GAEnC4rC,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,MAEP,YACJk0E,EAAW,sBAAEE,EAAqB,uBAAEG,EAAsB,iBAAEc,GAC1DrB,GAAqBt8G,GAAMqhH,sBAExBC,EAAoBC,IAAyBtkH,EAAAA,EAAAA,IAAmB,KAChEukH,EAAcC,IAAmBxkH,EAAAA,EAAAA,IAAmB,KACpDykH,EAAqBC,IAA0B1kH,EAAAA,EAAAA,IAAmB,KAClEghH,EAAqBC,IAA0BjhH,EAAAA,EAAAA,KAAS,IACxD2kH,EAA4BC,IAAiC5kH,EAAAA,EAAAA,KAAS,IACtE6kH,EAAoBC,IAAyB9kH,EAAAA,EAAAA,KAAS,GAEvD+kH,GAAWnpH,EAAAA,EAAAA,IAAQ,KACvB,GAAIyrB,IAAc7gB,IAAezD,EAC/B,OAAOq1B,GAAAA,EAET,MAAMljC,GAAS6qC,EAAAA,EAAAA,MACTilF,GAAcC,EAAAA,EAAAA,KAA+B/vH,EAAQ6N,EAAKrP,GAAI8S,GACpE,OAAOw+G,GAAcltF,EAAAA,GAAAA,IAAOktF,GACzBxzF,OAAQ5J,GACPA,GAAMl0B,KAAOqP,GAAMrP,IAChBk0B,GAAMl0B,KAAOotH,GACbl5F,GAAMl0B,KAAOqP,GAAMmiH,mBACnB9sF,GAAAA,GACN,CAACr1B,EAAMskB,EAAWy5F,EAAct6G,IAE7B2+G,IAAmC/kH,EAAAA,EAAAA,GAAgB,IAChD2kH,EAASz9G,IAAK89G,IACZ,CACL5kH,MAAO4kH,EAAO1xH,GACdqN,OAAO2mB,EAAAA,GAAAA,IAAa9mB,EAAMwkH,IAAW,GACrC7uF,aAAa1iC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CAAC5zB,KAAK,QAAQ6zB,KAAMw9F,QAKxCC,IAAsBzpH,EAAAA,EAAAA,IAAQ,IAC3BmpH,EAASvzF,OAAQ5J,GACtBA,EAAKl0B,KAAOotH,GACTl5F,EAAKl0B,KAAOqP,GAAMmiH,mBAClBt9F,EAAKl0B,KAAOu0B,GAEhB,CAAC88F,EAAU98F,EAAe64F,EAAc/9G,GAAMmiH,oBAE3CI,IAAuB1pH,EAAAA,EAAAA,IAAQ,IAC5BmpH,EAASvzF,OAAQ5J,GACtBA,EAAKl0B,KAAOu0B,GACTL,EAAKl0B,KAAOotH,GACZl5F,EAAKl0B,KAAOqP,GAAMmiH,mBAEtB,CAACH,EAAU98F,EAAe64F,EAAc/9G,GAAMmiH,oBAE3CK,IAAgB3pH,EAAAA,EAAAA,IAAQ,KAC5B,MAAM4pH,EAAsBT,EAAS1qC,KAAMzyD,GAASA,EAAKl0B,KAAOu0B,GAGhE,OAF2Bm7F,GAAeoC,GAAuBziH,GAAM8/C,YAG9DzqB,GAAAA,EAGF2sF,EAASvzF,OAAQ5J,IACtB,MAAMi2F,EAAUv0B,IAAmB1hE,EAAKl0B,IACxC,OAAO2vH,IAAcxF,KAEtB,CAACkH,EAAU1B,EAAWp7F,EAAem7F,EAAa95B,EAAkBvmF,GAAM8/C,cAMvE4iE,IAJ8B7pH,EAAAA,EAAAA,IAAQ,IACnCgD,QAAQymH,GAAoB7vH,QAAU8vH,GAAqB9vH,QAAU+vH,GAAc/vH,QACzF,CAAC6vH,GAAqBC,GAAsBC,OAGzC3C,IAAoBn8G,GAAcq8G,EAElC4C,IAAY9pH,EAAAA,EAAAA,IAAQ,KACnBmpH,GAAYt+G,EAAmB,CAAC,GAC9Bk/G,EAAAA,GAAAA,IAA0BZ,EAAWn9F,GAAS,CAACA,EAAKl0B,IAAIg0B,EAAAA,GAAAA,IAAa9mB,EAAMgnB,KACjF,CAACnhB,EAAY7F,EAAMmkH,IAEhBa,IAAqChqH,EAAAA,EAAAA,IAAQ,IAC1C,CACL,CACE4E,MAAOgG,GAAcu+G,EAASvvH,QAAU,EAAI,OAASuvH,IAAW,IAAIrxH,GACpEqN,MAAOqqC,EAAQ,mBACfy6E,cAAer/G,GAAcu+G,EAASvvH,QAAU,EAAI,IAC/C2vH,KAAmC3zF,OAAQs0F,GAAQA,EAAItlH,QAAUsgH,GAC/DgF,EAAItlH,QAAUuC,GAAMmiH,mBACpBY,EAAItlH,QAAUynB,SACjBvxB,IAGP,CAAC8P,EAAYu+G,EAAU35E,EAAS01E,EAAc/9G,GAAMmiH,kBAAmBj9F,IAEpE89F,IAAuCnqH,EAAAA,EAAAA,IAAQ,IAC5C,CACL,CACE4E,MAAOgG,GAAcu+G,EAASvvH,QAAU,EAAI,aAAeuvH,IAAW,IAAIrxH,GAC1EqN,MAAOyF,GAAcu+G,EAASvvH,QAAU,EACpC41C,EAAQ,sBACRA,EAAQ,gBAAiBsL,OAAO0K,OAAOskE,IAAW,IACtDG,cAAer/G,GAAcu+G,EAASvvH,QAAU,EAAI,IAC/C2vH,KAAmC3zF,OAAQs0F,GAAQA,EAAItlH,QAAUsgH,GAC/DgF,EAAItlH,QAAUuC,GAAMmiH,mBACpBY,EAAItlH,QAAUynB,SACjBvxB,IAGP,CAAC8P,EAAYu+G,EAAU35E,EAASs6E,GAAW5E,EAAc/9G,GAAMmiH,kBAAmBj9F,IAE/E+9F,IAAoCpqH,EAAAA,EAAAA,IAAQ,IACzC,CACL,CACE4E,MAAOgG,GAAcu+G,EAASvvH,QAAU,EAAI,MAAQuvH,IAAW,IAAIrxH,GACnEqN,MAAOyF,GAAcu+G,EAASvvH,QAAU,EACN41C,EAA7Bu5E,EAAqC,sBAAiC,kBACtEA,EAA6Bv5E,EAAQ,sBACpCA,EAAQ,YAAasL,OAAO0K,OAAOskE,IAAW,IACpDG,cAAer/G,GAAcu+G,EAASvvH,QAAU,EAAI,IAC/C2vH,WACDzuH,IAGP,CAACiuH,EAA4Bv5E,EAAS5kC,EAAYu+G,EAAUW,KAEzDO,IAA0B7lH,EAAAA,EAAAA,GAAgB,KAC9CwkH,EAA+B/uD,IAAUA,KAGrCqwD,IAA0B9lH,EAAAA,EAAAA,GAAgB,CAAC20C,EAAmBoxE,KAClE,IAAKpjH,EAAM,OAAOq1B,GAAAA,EAClB,MAAMljC,GAAS6qC,EAAAA,EAAAA,MACf,OAAOomF,EAAsB30F,OAAQ40F,IACnC,MAAMjkF,GAASkkF,EAAAA,EAAAA,KAAwBnxH,EAAQ6N,EAAKrP,GAAI0yH,GACxD,OAAOjkF,GAAU4S,EAAQpxB,SAASwe,EAAOzuC,QAIvC4yH,IAAmBlmH,EAAAA,EAAAA,GAAiBmmH,IACxC7vE,OAAOC,QAAQ4vE,GAAiBj7G,QAAQ,EAAEomB,EAAQ80F,MAC5CA,EAAchxH,QAChBsuH,EAAkB,CAChB2C,cAAe/0F,EACfrxB,OAAQ0C,EAAMrP,GACd8S,WAAYggH,QAMdE,IAAuBtmH,EAAAA,EAAAA,GAAiBumH,IAC5C9C,EAAe,CAAEr9G,WAAYmgH,EAAuB9B,oBAAoB,MAGpE+B,IAA8BxmH,EAAAA,EAAAA,GAAiBymH,IAC9C9jH,GACL8jH,EAAWv7G,QAAS7L,IAClB0kH,EAAyB,CAAE1kH,SAAQY,OAAQ0C,EAAKrP,SAI9CozH,IAAqB1mH,EAAAA,EAAAA,GAAiB2mH,IAC1CA,EAAmBz7G,QAASomB,IAC1BqyF,EAAiB,CAAE1jH,OAAQ0C,EAAMrP,GAAIg+B,eAInCs1F,IAAqC5mH,EAAAA,EAAAA,GAAiB2mH,IAC1DA,EAAmBz7G,QAASomB,IAC1BwyF,EAA6B,CAC3B7jH,OAAQ0C,EAAMrP,GACdg+B,SACAu1F,aAAc1H,QAKd2H,IAA0B9mH,EAAAA,EAAAA,GAAgB,KAC9C,GAAK2C,GAASyD,EAAd,CAGA,GADArE,MACIsE,EACFu9G,EAAwB,CAAEx9G,oBACrB,GAAIi/G,GAAkB,CAC3B,GAAIhB,GAAqBjvH,OAAQ,CAC/B,MAAMN,GAAS6qC,EAAAA,EAAAA,MACT8mF,EAAapC,EAAoBjzF,OAAQsL,IAAY3jB,OAAOmjG,MAAMnjG,OAAO2jB,KACzE6qB,EAAcnhD,EAAW2vC,OAAiC,CAACkL,EAAK+kE,KACpE,MAAMx+F,GAAOy+F,EAAAA,EAAAA,KAAwBnxH,EAAQ6N,EAAKrP,GAAI0yH,GAOtD,OANIx+F,GAAQi/F,EAAWljG,SAASiE,EAAKl0B,MAC9B2tD,EAAIz5B,EAAKl0B,MACZ2tD,EAAIz5B,EAAKl0B,IAAM,IAEjB2tD,EAAIz5B,EAAKl0B,IAAImT,KAAKsS,OAAOitG,KAEpB/kE,GACN,CAAC,GAEJilE,GAAiB3+D,EACnB,CAEA,GAAI08D,GAAoB7uH,OAAQ,CAC9B,MAAMqxH,EAAaxC,EAAmB7yF,OAAQsL,IAAY3jB,OAAOmjG,MAAMnjG,OAAO2jB,KAC9E8pF,GAA4BC,EAC9B,CAEA,GAAItC,GAAc/uH,SAAWiqH,EAAuB,CAClD,MAAMoH,EAAatC,EAAa/yF,OAAQsL,IAAY3jB,OAAOmjG,MAAMnjG,OAAO2jB,KACxEgqF,GAAmBD,GACnB,MAAMF,EAAwBT,GAAwBW,EAAYrgH,GAClEkgH,GAAqBC,EACvB,CAEA,GAAIpC,GAAc/uH,QAAUiqH,EAAuB,CACjD,MAAMoH,EAAatC,EAAa/yF,OAAQsL,IAAY3jB,OAAOmjG,MAAMnjG,OAAO2jB,KACxEkqF,GAAmCH,EACrC,CAEKpC,GAAqBjvH,QAAW6uH,GAAoB7uH,QAAW+uH,GAAc/uH,QAChFquH,EAAe,CAAEr9G,aAAYq+G,sBAEjC,MACEhB,EAAe,CAAEr9G,aAAYq+G,uBAG/BjB,IACAK,GAhDgC,IAmD5BhY,IAAiB7rG,EAAAA,EAAAA,GAAgB,KACrCwjH,MAuFF,OApFAxlH,EAAAA,EAAAA,IAAU,MACHoB,GAAUitD,IACbi4D,EAAuB,IACvBJ,EAAsB,IACtBE,EAAgB,IAChBM,GAAsB,GACtB7D,GAAuB,GACvB2D,GAA8B,GAC9BlE,MAED,CAAClhH,EAAQitD,EAAYi0D,KA2EtB7sH,EAAAA,GAAAA,GAACoN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASusG,GACT/qG,QAASgmH,GACTvzH,UD/amC,WC+aZC,UAEvBH,EAAAA,GAAAA,IAAA,OAAKE,UDjbY,WCibWC,SAAA,EA7E5BH,EAAAA,GAAAA,IAAA,OACEE,UAAW8xH,IDrW6C,WCsWxDv7G,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SAAA,CAEtC6xH,KACC5xH,EAAAA,GAAAA,GAACqzC,GAAAA,EAAU,CACTnzC,KAAK,QACLozC,MAAO49E,KAGXlxH,EAAAA,GAAAA,GAAA,MAAIF,WAAWqW,EAAAA,GAAAA,GAAey7G,GD9W6C,WAAyB,YC8WhB7xH,SACjFw3C,EAAQ,kCAAmC5kC,GAAYhR,aAoEzDiwH,KACChyH,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,KAAGF,UAAW0d,GAAmBzd,SAAEw3C,EAAQ,8BA9DjD33C,EAAAA,GAAAA,IAAA,OAAKE,UDvXiM,WCuXvKC,SAAA,EAC7BC,EAAAA,GAAAA,GAACszH,GAAAA,EAAa,CACZ9lH,QAASukH,GACTtkH,SAAUojH,EACVnjH,SAAUkjH,EACV2C,eAAgB5gH,GAAcu+G,EAASvvH,QAAU,IAElD6vH,IAAqB7vH,OAAS,IAC7B3B,EAAAA,GAAAA,GAACszH,GAAAA,EAAa,CACZ9lH,QAAS0kH,GACTzkH,SAAUgjH,EACV/iH,SAAU8iH,EACV+C,eAAgB5gH,GAAcu+G,EAASvvH,QAAU,IAGpD+vH,IAAe/vH,OAAS,IACvB3B,EAAAA,GAAAA,GAACszH,GAAAA,EAAa,CACZ9lH,QAAS2kH,GACT1kH,SAAUkjH,EACVjjH,SAAUgjH,EACV6C,eAAgB5gH,GAAcu+G,EAASvvH,QAAU,QASvD/B,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GDpZyS,WCqZvT26G,GDrZ6V,YCqZ9R/wH,SAAA,EAE/DC,EAAAA,GAAAA,GAAA,MAAIF,WAAWqW,EAAAA,GAAAA,GAAeqH,GDvZ6H,YCuZhFzd,SACxEw3C,EAAQ,6BAA8B25E,EAASvvH,WAElD3B,EAAAA,GAAAA,GAACktH,GAAsB,CACrBK,cAAY,EACZ/gH,OAAQ0C,GAAMrP,GACdstH,oBAAqBA,EACrBC,uBAAwBA,EACxBrB,uBAAwBA,EACxBL,YAAaA,EACb5rH,WAAWqW,EAAAA,GAAAA,GDjaiN,WCma1Ng3G,GDnauX,iBCwbtXuD,GAAc/uH,QAAU4tH,GACvB3vH,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPm/E,QAAM,EACNnhC,gBAAiB/iE,GACjBzP,QAASqkH,GAAwBryH,SAAA,CAEhCw3C,EAAQu5E,EAA6B,uBAAyB,8BAC/D9wH,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CACHjF,KAAMujH,EAA6B,KAAO,OAC1ChxH,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAe,aAG3CuzG,GAA8B,OAGpChC,GAAmBK,IAAYwC,MAC/BhyH,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,KAAAD,SACG4S,GAAcA,EAAWhR,OAAS,EAC/BoL,EAAK,+BAAiCA,EAAK,mCAEhD4iH,IACC3vH,EAAAA,GAAAA,GAAA,KAAAD,SAAIw3C,EAAQ,8BAA+B,EAAG,OAE/Cs4E,IACC7vH,EAAAA,GAAAA,GAAA,KAAAD,SAAIw3C,EAAQ,+BAAgC,EAAG,UAIpDw3E,IACC/uH,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP92D,UAAU,kBACVoN,MAAOgiH,GAAcl7F,EAAAA,GAAAA,GAAWujB,EAAQ,2BAA4B23E,IAChE33E,EAAQ,0CACZrO,QAAS8nF,EACTn6D,QAASo6D,KAGbrxH,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAe,iBAC7Bg3G,ED/duP,WAA4B,YC+d/MptH,SAAA,EAEpEC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACC,MAAM,SAAS/N,UAAU,wBAAwBgO,QAAM,EAACC,QAASslH,GAAwBtzH,SAC9F6xH,GAAmBr6E,EAAQ,oBAAsBxqC,EAAK,aAEzD/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC9N,UAAU,wBAAwBgO,QAAM,EAACC,QAASqqG,GAAer4G,SAAEw3C,EAAQ,uBC5X7F,IAAe54C,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAMgnH,GAAgB9kH,EAAAA,EAAAA,IAASlC,GACzB6nB,GAAiBC,EAAAA,EAAAA,KAAqBjzB,EAAQmL,GAC9C0C,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,GAC1BgnB,EAAYzoB,QAAQmE,KAASukB,EAAAA,EAAAA,IAAcvkB,GAC3CwkB,EAAU3oB,QAAQmE,KAAS0gH,EAAAA,EAAAA,IAAiB1gH,GAC5C+/G,EAAelkH,QAAQmE,KAASmlF,EAAAA,EAAAA,IAAiBnlF,GAMvD,MAAO,CACLskH,gBACAn/F,iBACAb,YACAE,UACAu7F,eACAwE,aAXoBD,IAAkBn/F,GAAmB46F,GAAgBv7F,EAYzEw7F,YAXkBhgH,IAAQR,EAAAA,EAAAA,IAASQ,EAAKrP,KACtCqyD,EAAAA,EAAAA,KAAuB9d,EAAAA,EAAAA,KAAW/yC,GAAQ8tH,EAAAA,EAAAA,IAAqBjgH,UAC/DrM,IAXY8L,CAnEI+kH,EACtB/nH,SACAa,SACAiM,YACA+a,YACAE,UACAu7F,eACAwE,eACAvE,cACArjH,cAEA,MAAM,WAAE8nH,IAAe3nH,EAAAA,EAAAA,OAEhB4nH,EAAiBC,IAAsB1nH,EAAAA,EAAAA,KAAS,GAEjD2nH,GAAmBvnH,EAAAA,EAAAA,GAAgB,KACvConH,EAAW,CACTnnH,SACAiM,YACAs7G,SAAS,EACTC,WAAYJ,EACZK,UAAWL,IAEb/nH,MAGIkB,GAAOC,EAAAA,EAAAA,KAcb,OACEpN,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASA,EACT/L,UAAU,MACVqN,MAAOJ,EAAK,wBAAwBhN,SAAA,EAEpCC,EAAAA,GAAAA,GAAA,KAAAD,SAjBOgN,EADLymB,EACU,yBAGVE,GAAWu7F,EACD,kBAGF,yBAWTwE,IACCzzH,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP92D,UAAU,kBACVoN,MAAOgiH,GAAcl7F,EAAAA,GAAAA,GAAWjnB,EAAK,8BAA+BmiH,IAChEniH,EAAK,oDACTm8B,QAAS0qF,EACT/8D,QAASg9D,KAGbj0H,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC9N,UAAU,wBAAwBgO,QAAM,EAACC,QAAS+lH,EAAiB/zH,SACxEgN,EAAK,gBAER/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC9N,UAAU,wBAAwBgO,QAAM,EAACC,QAASlC,EAAQ9L,SAAEgN,EAAK,qBCzDjF,IAAepO,EAAAA,EAAAA,IA1B6Bu1H,EAC1CvoH,SACAwoH,sBAAsB,EACtBtoH,UACAuoH,cAEA,MAAMrnH,GAAOC,EAAAA,EAAAA,KAEb,OACEpN,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASA,EACT/L,UAAU,YACVqN,MAAOJ,EAAK,8BAA8BhN,SAAA,EAE1CC,EAAAA,GAAAA,GAAA,KAAAD,SAAIgN,EAAK,oCAAqConH,EAAqB,QACnEv0H,EAAAA,GAAAA,IAAA,OAAKE,UAAU,sBAAqBC,SAAA,EAClCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC9N,UAAU,wBAAwBgO,QAAM,EAACC,QAASqmH,EAAQr0H,SAC/DgN,EAAK,kBAER/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC9N,UAAU,wBAAwBgO,QAAM,EAACC,QAASlC,EAAQ9L,SAAEgN,EAAK,oB,eC/BjF,MC4OA,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAMyN,GAAWC,EAAAA,EAAAA,KAAe1N,IAC1B,qBAAEgzH,IAAyB9/C,EAAAA,GAAAA,GAAqBlzE,GAChD6N,GAAOC,EAAAA,EAAAA,KAAkB9N,IAEvBH,KAAMkP,EAAe,OAAE5D,IAAW6C,EAAAA,EAAAA,KAAyBhO,IAAW,CAAC,EACzEuR,EAAiC,cAApBxC,GACb,UAAEP,IAAcm/G,EAAAA,EAAAA,KAAgC3tH,GAChD87G,EAAYpyG,SAAS6H,IAAc0hH,EAAAA,EAAAA,KAAgCjzH,IACnE0/B,GAAcwzF,EAAAA,EAAAA,KAAkClzH,IAC9CsR,WAAY6hH,GAAuB1lH,EAAS2lH,kBAAoB,CAAC,EACnEC,IAAsBloH,IAASmoH,EAAAA,EAAAA,KAA0BtzH,EAAQmL,EAAQgoH,GACzE7hF,IAAc//B,IAAcpG,KAASooH,EAAAA,EAAAA,KAAyBvzH,EAAQmL,EAAQgoH,GAC9EK,KAAsBL,IAAsBhoH,KAC9CsoH,EAAAA,EAAAA,KAA0BzzH,EAAQmL,EAAQgoH,GACxCO,EAA0BjmH,EAASkmH,yBACnCC,EAAiBlqH,QAAQgqH,GAA2BjmH,EAASujD,gBAC9DvjD,EAAS4jD,0BAA4B5jD,EAASomH,2BAA6BpmH,EAASkmC,aACpFlmC,EAASggH,oBAAsBhgH,EAASqmH,yBAE7C,MAAO,CACLjmH,OACA0D,aACAwiH,uBAAuBC,EAAAA,EAAAA,KAA4Bh0H,GACnDi0H,kBAAmBzlH,EACnB0lH,kBAAmBpY,EACnBqY,oBAAqBz0F,EACrB00F,mBAAoB9iF,EACpB6hF,qBACAE,sBACAO,iBACAZ,uBACAQ,wBAjCclmH,CAzLoC+mH,EACtDxmH,OACAymH,UACAn8G,WACApJ,kBACAwC,aACAwiH,wBACAE,oBACAC,oBACAC,sBACAC,qBACAf,sBACAO,iBACAT,qBACAH,uBACAQ,0BAEA,MAAM,sBACJzE,EAAqB,mCACrBwF,EAAkC,yBAClCC,EAAwB,qBACxBC,EAAoB,iBACpBn0F,EAAgB,eAChBkgF,EAAc,uBACdxwG,EAAsB,uBACtB0kH,IACE/pH,EAAAA,EAAAA,MACEe,GAAOC,EAAAA,EAAAA,KD9EkBwM,KAC/B,SAASw8G,EAAWnpH,GAClBA,EAAE6Y,kBACF1Z,EAAAA,EAAAA,MAAa8pH,sBACf,EAEAG,EAAAA,GAAAA,IAAWluH,EAAAA,EAAAA,IAAQ,IAAOyR,EAAW,CACnC,QAASw8G,QACPnzH,EAAY,CAAC2W,MCwEjB08G,CAAwB18G,GAExB,MAAO28G,EAAoBC,EAAkBC,IAAqBp3H,EAAAA,EAAAA,MAC3Dq3H,EAAyBC,IAA8BpqH,EAAAA,EAAAA,KAAS,GAEjEqqH,GAA8BjqH,EAAAA,EAAAA,GAAgB,KAClD6jH,MAGIqG,GAAelqH,EAAAA,EAAAA,GAAgB,KAC9BioH,GAAuBtlH,GAC5BmC,EAAuB,CACrB7E,OAAQ0C,EAAKrP,GACb8S,WAAY6hH,EACZ5hH,kBAIJrI,EAAAA,EAAAA,IAAU,IACDiP,IAAay7G,GAChB33E,EAAAA,GAAAA,GAAyB,CACzBo5E,YAAapB,EAAoBmB,OAAe5zH,EAChDg0C,SAAUy+E,EAAoBmB,OAAe5zH,EAC7C8zH,MAAOH,SAEP3zH,EACH,CACD2W,EAAUi9G,EAAcD,EAA6BvB,EACrDK,IAGF,MAAMU,GAAazpH,EAAAA,EAAAA,GAAgB,KACjCupH,IACAn0F,EAAiB,CACf/gC,QAASmM,EAAK,uBAEhBqjH,MAGI/xE,GAAiB9xC,EAAAA,EAAAA,GAAgB,KACrCspH,IACAzF,MAGIwG,GAAwBrqH,EAAAA,EAAAA,GAAgB,KACxC8nH,GAAwBQ,EAC1BuB,IAIF/3E,MAGIw4E,GAAsBtqH,EAAAA,EAAAA,GAAgB,KAC1CwpH,EAAuB,CAAE1B,sBAAuBiC,IAChDD,IACAh4E,MAGIy4E,GAA4BvgG,EAAAA,EAAAA,GAAsB6+F,QAAyBvyH,GAAW,GAGtFk0H,EAAyBhqH,EAAK,kCAFGyM,EAAW47G,EAAwB0B,EAE6B,KAEjG3sE,GAAoB59C,EAAAA,EAAAA,GAAgB,KACnCioH,GAAuBtlH,IAC5B2yG,EAAe,CACbr1G,OAAQ0C,EAAKrP,GACb8S,WAAY6hH,IAEdpE,OAGItwH,GAAYqW,EAAAA,GAAAA,GAChB,uBACAw/G,GAAW,gBACXn8G,GAAY,SAGRw9G,EAAeA,CACnB/jH,EAAgB/F,EAAea,EAA4BsF,KAGzDrT,EAAAA,GAAAA,GAAA,OACE0pC,KAAK,SACLD,SAAU,EACV3pC,WAAWqW,EAAAA,GAAAA,GACT,aACA,OACA9C,GAAe,eAEjBtF,QAASA,EACTZ,MAAOD,EACP,aAAYA,EAAMnN,UAElBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAM0F,MAKlB,OACErT,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAKF,UAAWA,EAAUC,UACxBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,6BAA4BC,SAAA,EACzCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLC,MAAM,cACNyE,OAAK,EACLvE,QAASyoH,EACTjkH,UAAU,mBAAkBxS,UAE5BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAEbvN,EAAAA,GAAAA,GAAA,QAAMF,UAAU,6BAA6BqN,MAAO4pH,EAAuBh3H,SACxEg3H,IAGFhsH,QAAQqqH,KACPx1H,EAAAA,GAAAA,IAAA,OAAKE,UAAU,+BAA8BC,SAAA,CACtB,cAApBqQ,GAAmCqlH,GAClCuB,EACE,UAAWjqH,EAAK,4BAA6B6oH,GAGhDL,GACCyB,EAAa,OAAQjqH,EAAK,+BAAgCo9C,GAE3DqrE,IAAwBd,GACvBsC,EAAa,WAAYjqH,EAAK,sBAAuB6pH,IAErDlC,GACAsC,EAAa,OAAQjqH,EAAK,mCAAoCipH,GAE/DV,GACC0B,EAAa,SAAUjqH,EAAK,gCAAiC0pH,GAAc,YAMrF72H,EAAAA,GAAAA,IAACyjC,GAAAA,EAAa,CACZ13B,OAAQwqH,EACRtqH,QAASwqH,EACT9yF,eAAgBszF,EAAoB92H,SAAA,CAEnCgN,EAAK,2BACN/M,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP92D,UAAU,kBACVopC,QAASotF,EACTppH,MAAOH,EAAK,2BACZ8pD,QAAS0/D,aCtInB,IAAe53H,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,OAAEmL,EAAM,UAAEiM,IAAc1J,EAAAA,EAAAA,KAAe1N,GAAQ41H,aAAe,CAAC,EACrE,OAAKzqH,GAAWiM,EAMT,CACLy+G,aAAaniG,EAAAA,EAAAA,KAAkB1zB,EAAQmL,EAAQiM,IAAYy+G,aANpD,CACLA,iBAAar0H,IALD8L,CAxEpB,UAAqB,OACnBhD,EAAM,YACNurH,IAEA,MAAM,SACJvoF,EAAQ,iBACRwoF,IACEnrH,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,KAEPoqH,GAAuBjnF,EAAAA,GAAAA,GAAiB+mF,GAAa,GACrDvhC,GAAY5tF,EAAAA,EAAAA,IAAQ,KACxB,IAAKqvH,EACH,OAGF,MAAMz+G,EAASkqC,OAAO8K,KAAKypE,GAG3B,OAFAz+G,EAAO8uC,KAAK,CAAC4vE,EAAQC,IAAYF,EAAqBE,GAAWF,EAAqBC,IAE/E1+G,GACN,CAACy+G,IAEE7yG,GAAchY,EAAAA,EAAAA,GAAiBsxB,IACnCs5F,IAEAtsH,WAAW,KACT8jC,EAAS,CAAE9uC,GAAIg+B,KA7BY,OAiCzB05F,GAAyBhrH,EAAAA,EAAAA,GAAgB,KAC7C4qH,MAGF,OACEv3H,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASsrH,EACTr3H,WAAWqW,EAAAA,GAAAA,GClEO,WDkEsB,UACxChJ,MAAO,WAAWwoF,GAAWh0F,eAAe5B,SAAA,EAE5CC,EAAAA,GAAAA,GAAA,OAAKqW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACtC41F,GAAaA,EAAUliF,IAAKoqB,IAC3B79B,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAEPziC,UAAU,6CAEViO,QAASA,IAAMwW,EAAYsZ,GAAQ99B,UAEnCC,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CACdloB,OAAQA,EACRooB,kBAAgB,EAChBd,QAAQE,EAAAA,GAAAA,GAAiBt4C,EAAsC,IAAhCqqH,EAAsBv5F,IACrDonB,WAAW,kBATRpnB,OAcX79B,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAClCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,wBACVgO,QAAM,EACNC,QAASwpH,EAAuBx3H,SAE/BgN,EAAK,eAKhB,I,gBEjGA,SAAkE,WAAlE,GAAoF,WAApF,GAA+H,WC8BzHyqH,GAA2B3uG,EAAAA,EAAqBkP,EAAAA,IA0GtD,IAAep5B,EAAAA,EAAAA,KACbgQ,EAAAA,EAAAA,IAAsBtN,IACpB,MAAM,OAAEmL,EAAM,WAAEirH,IAAe1oH,EAAAA,EAAAA,KAAe1N,GAAQq2H,4BAA8B,CAAC,EAGrF,MAAO,CAAEvjF,KAFI3nC,GAAS4nC,EAAAA,EAAAA,KAAW/yC,EAAQmL,QAAU3J,EAEpC40H,eAJjB9oH,CAzGiCgpH,EAAGhsH,SAAQ8rH,aAAYtjF,WACxD,MAAMpnC,GAAOC,EAAAA,EAAAA,MACP,4BACJ4qH,EAA2B,iBAC3Bh2F,EAAgB,gCAChBi2F,EAA+B,iBAC/Bl2F,EAAgB,qBAChBm2F,EAAoB,SACpBC,IACE/rH,EAAAA,EAAAA,MACE85G,GAAW5zD,EAAAA,EAAAA,IAAuB/d,GAElC6jF,GAAqBzrH,EAAAA,EAAAA,GAAgB,KACzCqrH,EAA4B,CAAEK,qBAAqB,IACnDJ,IAEAhtH,WAAW,KACT82B,EAAiB,CAAE/gC,QAASmM,EAAK,qBAChCyqH,MAGCU,GAAqB3rH,EAAAA,EAAAA,GAAgB,KACzCurH,EAAqB,CACnBK,WAAY,WACZ3xF,WAAY,YACZ4xF,UAAWA,IAAML,EAAS,CAAEl6F,OAAQsW,EAAMt0C,OAE5Cg4H,IAEAhtH,WAAW,KACT82B,EAAiB,CAAE/gC,QAASmM,EAAK,yBAChCyqH,MAGCa,GAAoB9rH,EAAAA,EAAAA,GAAgB,KACxCsrH,IAEAhtH,WAAW,KACT+2B,EAAiB,CAAEQ,eAAgB,eAClCo1F,MAGCx8F,GAAczuB,EAAAA,EAAAA,GAAgB,KAClCsrH,MAGF,OACE73H,EAAAA,GAAAA,GAACoN,EAAAA,EAAK,CAACk1B,QAAM,EAAC32B,OAAQA,EAAQE,QAASmvB,EAAYj7B,UACjDH,EAAAA,GAAAA,IAAA,OAAKE,UDhFiB,WCgFYuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,EACpEC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UDlF8I,WCmF9I+N,MAAM,cACNyE,OAAK,EACLpS,KAAK,UACL6N,QAASitB,EACTzoB,UAAU,QAAOxS,UAEjBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAEbvN,EAAAA,GAAAA,GAAC6nG,GAAAA,EAAuB,CACtBznG,OAAQq3H,EAAap3H,GAAAA,EAAei4H,SAAWj4H,GAAAA,EAAek4H,SAC9Dr4H,KAAM,GACNJ,UD9FoC,WC+FpCyzC,gBAAc,EACd/yC,QAAM,KAERR,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAczd,SAC1BgN,EAAK0qH,EAAa,qBAAuB,6BAE5Cz3H,EAAAA,GAAAA,GAAA,KAAGF,UAAW0d,GAAYzd,UACvBi0B,EAAAA,GAAAA,GACCjnB,EACE0qH,EAAa,mBAAqB,6BAClC3R,GAEF,CAAC,uBAGL9lH,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLG,QAAS0pH,EAAaO,EAAqBE,EAC3Cp4H,UAAW0d,GAAczd,SAExBgN,EAAK0qH,EAAa,qBAAuB,6BAE5Cz3H,EAAAA,GAAAA,GAACw4H,GAAAA,EAAS,CAAC14H,UDpHwF,WCoH5DC,SAAEgN,EAAK,gBAC9C/M,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAczd,SAAEgN,EAAK,yBACpC/M,EAAAA,GAAAA,GAAA,KAAGF,UAAW0d,GAAYzd,UACvBi0B,EAAAA,GAAAA,GACCjnB,EAAK0qH,EAAa,mBAAqB,uBAAwB3R,GAC/D,CAAC,uBAGL9lH,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLg1B,qBAAmB,EACnB70B,QAASsqH,EACTv4H,UAAW0d,GAAczd,SAExBgN,EAAK,oC,wCC1DhB,MAAMs+C,GAAkB,iBA0KxB,IAAe1sD,EAAAA,EAAAA,IAxKI85H,EACjB34H,YACA8kC,eACAD,gBACAwkB,QACA1kB,cACAi0F,eACA/jG,YACAgkG,kBACAj0F,oBACAk0F,aACAzzF,gBACAg7E,gBACAt7E,qBACAg0F,sBACA7zF,iBACA8zF,kBACA1vE,gBACG2vE,MAEH,MAAMhsH,GAAOC,EAAAA,EAAAA,KACP8vD,GAAWzzD,EAAAA,EAAAA,MAEX47B,EAAgB8zF,EAAc9zF,cAC9B+zF,EAAuB/zF,EAAgB8zF,EAAcC,0BAAuBn2H,EAC5Eo2H,EAAyBh0F,EAAgB8zF,EAAcE,4BAAyBp2H,GAEtF0H,EAAAA,EAAAA,IAAU,KACHq6B,IACLkM,EAAAA,EAAAA,IAAe,MACbooF,EAAAA,GAAAA,GAAcp8D,EAAStzD,YAExB,CAACo7B,IAEJ,MAAMu0F,GAAiBpxH,EAAAA,EAAAA,IAAQ,IACzBk9B,EACK8zF,EAAcI,eAGhBJ,EAAcK,cAAgB,CAACL,EAAcK,eAAiB70F,GAAAA,EACpE,CAACU,EAAe8zF,EAAcK,cAAeL,EAAcI,iBAExDE,GAA0BtxH,EAAAA,EAAAA,IAAQ,IAAM,IAAIqmC,IAAI4qF,GAAuB,CAACA,IACxEM,GAA4BvxH,EAAAA,EAAAA,IAAQ,IAAM,IAAIqmC,IAAI6qF,GAAyB,CAACA,IAE5EM,GAAuBxxH,EAAAA,EAAAA,IAAQ,KACnC,GAAI08B,EACF,OAAO0kB,EAAM11C,IAAK7E,GAASA,EAAKjC,OAGlC,MAAM6sH,EAA2C,GAC3CC,EAAqC,GACrCC,EAA+C,GAYrD,OAVAvwE,EAAM1xC,QAAS7I,IACTyqH,EAAwBnrF,IAAIt/B,EAAKjC,OACnC6sH,EAAqBxmH,KAAKpE,GACjB0qH,EAA0BprF,IAAIt/B,EAAKjC,OAC5C+sH,EAAyB1mH,KAAKpE,GAE9B6qH,EAAezmH,KAAKpE,KAIjB4qH,EAAqBplC,OAAOqlC,EAAgBC,GAA0BjmH,IAAK7E,GAASA,EAAKjC,QAC/F,CAAC83B,EAAa0kB,EAAOkwE,EAAyBC,IAE3CK,GAAkBptH,EAAAA,EAAAA,GAAiBI,IACvC,GAAIs4B,EAAe,CACjB,MAAM20F,EAAoBT,EAAeprF,QACnCvpC,EAAQo1H,EAAkBx9F,QAAQzvB,GAQxC,OAPInI,GAAS,EACXo1H,EAAkBC,OAAOr1H,EAAO,GAEhCo1H,EAAkB5mH,KAAKrG,QAGzBosH,EAAce,yBAAyBF,EAEzC,CAEAb,EAAcgB,wBAAwBptH,MAGjCqtH,EAAoB9tE,IAAWC,EAAAA,GAAAA,GACpC/C,EAAYmwE,EAAsBxuH,QAAQ8tH,GAAuBp0F,IAG7Dw1F,GAAqB1tH,EAAAA,EAAAA,GAAiBM,IAC1C,MAAM,MAAEF,GAAUE,EAAE6X,cACpBsgB,IAAiBr4B,KAGbutH,GAAav6H,EAAAA,EAAAA,IAAagN,IAC9B,MAAMiC,EAAOu6C,EAAM3T,KAAM2kF,GAAeA,EAAWxtH,QAAUA,GAC7D,IAAKiC,EAAM,OAEX,MAAM,MAAE1B,EAAK,SAAE4tF,EAAUnmE,UAAWylG,GAAkBxrH,EAChDyrH,EAAqBf,EAA0BprF,IAAIvhC,GACnD2tH,EAAmBjB,EAAwBnrF,IAAIvhC,GAC/C24F,EAAW+0B,GAAsBC,EACjCC,EAAYpB,EAAerpG,SAASnjB,GAa1C,OACE3M,EAAAA,GAAAA,GAAC8uD,GAAAA,EAAU,CAEThvD,WAAWqW,EAAAA,GAAAA,GAAek1C,GAAiB80D,GAC3ChzG,MAAOD,EACP0lB,SAAUkoE,EACV36E,SAAUmlF,EACV7iE,SAAUm2F,EACVj5G,QAAM,EACN66G,aAnBEl1B,GAAiBtlG,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,eACV,UAAlB43B,GACKnlC,EAAAA,GAAAA,GAACy6H,GAAAA,EAAK,CAACvxF,QAASqxF,EAAWp6G,SAAUmlF,EAAU3wE,UAAWylG,EAAeM,WAAS,IAErE,aAAlBv1F,GACKnlC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CAAC1tB,QAASqxF,EAAWp6G,SAAUmlF,EAAU3wE,UAAWylG,EAAeM,WAAS,SAD9F,EAiBE3sH,QAASA,IAAM4rH,EAAgBhtH,GAE/BmsH,gBAAiBA,GAAmB,KAAOA,EAAgBnsH,EAAO2tH,KAX7D3tH,IAcR,CACDw8C,EAAOmwE,EAA2BD,EAAyBF,EAAgBP,EAAYE,EACvF3zF,EAAeg7E,IAGjB,OACEvgH,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAAA,EAAOhY,UAAW1F,GAAWC,SAAA,CACzD6kC,IACC5kC,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAAA,EAAO6qB,OAAQ,iBAAkBhyB,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,UAClGC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACR9N,GAAI8kC,EACJ1wB,IAAK6oD,EACLnwD,MAAO83B,EACPh3B,SAAUwsH,EACV3qE,YAAa5qB,GAAqB33B,EAAK,cAK5CitH,GAAoBr4H,QACnB3B,EAAAA,GAAAA,GAACkpD,GAAAA,EAAc,CACbppD,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAAA,EAAOm9G,WAAY91F,GAAsBrnB,GAAAA,EAAOo9G,OAAQ,iBAClFzxE,MAAO6wE,EACPnqE,aAAc,IAAIxE,KAClBjC,WAAY8C,EACZysE,gBAAiBA,EAAgB54H,SAEhCi6H,EAAmBvmH,IAAK9G,GAAUutH,EAAWvtH,MAE7CgoB,IAAaqlG,GAAuBA,EAAmBr4H,QAG1D3B,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,KAFRzvD,EAAAA,GAAAA,GAAA,KAAGF,UAAW0d,GAAAA,EAAOq9G,UAAU96H,SAAE24H,GAAgB3rH,EAAK,+BCzO9D,IAAgB,KAAO,WAAW,eAAiB,WAAW,YAAc,WAAW,OAAS,WAAW,OAAS,YCuHpH,IAAepO,EAAAA,EAAAA,IA3F0By0F,EACvCznF,SACAE,UACA2sD,WACA6D,cACAq3B,qBAEA,MAAM,iBAAE/xD,IAAqB31B,EAAAA,EAAAA,MAEvBe,GAAOC,EAAAA,EAAAA,MAEN2sF,EAAoBC,IAAyBztF,EAAAA,EAAAA,IAAmB,IAEjE2uH,GADyBvkG,EAAAA,EAAAA,GAAsBojE,KACIA,EAEnD51D,GAAeh8B,EAAAA,EAAAA,IAAQ,IACtBs0D,EAIEA,EAAY1+B,OAAQo9F,IAAaA,EAAQzlH,UAA6B,OAAjBylH,EAAQC,MACjEvnH,IAAI,EACHunH,OAAMC,kBACF,CACJtuH,MAAOquH,EACP9tH,MAAO+tH,KARF,GAUR,CAAC5+D,IAEE6+D,GAA0B3uH,EAAAA,EAAAA,GAAiBkoF,IAC3Cf,GAAkBe,EAAe9yF,OAAS+xF,EAC5C/xD,EAAiB,CACf/gC,QAASmM,EAAK,qCAAsC2mF,KAIxDkG,EAAsBnF,KAGlB1uD,GAAex5B,EAAAA,EAAAA,GAAgB,KACnCisD,EAASmhC,GACT9tF,MAGF,OACEjM,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJtN,UAAW0d,GAAO6kD,KAClB12D,OAAQA,EACRE,QAASA,EACTwB,QAAS04B,EAAahmC,SAAA,EAEtBC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOhY,UAAUzF,UAC/BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAO29G,eAAep7H,SAAA,EACpCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACL2N,MAAM,cACNE,QAASlC,EAAQ9L,UAEjBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAGbvN,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAO49G,YAAYr7H,SAC/BgN,EAAK,iCAKZ/M,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAO69G,KAAM,iBAAiBt7H,UAC3DC,EAAAA,GAAAA,GAACy4H,GAAU,CACT34H,UAAW0d,GAAO89G,OAClBnyE,MAAOplB,EACPo1F,eAAgBx/B,EAChBmgC,uBAAwBoB,EACxBvC,gBAAiBmC,EACjB71F,eAAa,EACbE,cAAc,gBAIlBnlC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOusB,OAAOhqC,UAC5BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLG,QAASg4B,EAAahmC,SAErBgN,EAAK,+BCyJhB,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,OAAEmL,EAAM,UAAEiM,IAAc1J,EAAAA,EAAAA,KAAe1N,GAAQk6H,cAAgB,CAAC,EAChE36H,EAAU4L,GAAUiM,GAAYsc,EAAAA,EAAAA,KAAkB1zB,EAAQmL,EAAQiM,QAAa5V,EAErF,MAAO,CACL2J,SACAiM,YACAyrC,UAAWtjD,GAASsjD,UACpBs3E,SAAU56H,GAAS46H,SACnBtE,YAAat2H,GAASs2H,YACtBjzE,mBAAoB5iD,EAAO6iD,UAAUD,qBAXvBt1C,CAtNgC8sH,EAClD9vH,SACA6vH,WACAt3E,YACA13C,SACAiM,YACAy+G,cACAjzE,yBAEA,MAAM,aACJy3E,EAAY,sBACZC,EAAqB,SACrBhtF,IACE3iC,EAAAA,EAAAA,MAGEihD,GAAY/gB,EAAAA,EAAAA,MAAYghB,MAAMvmB,KAC9BvB,GAAY8G,EAAAA,EAAAA,MAAYxF,MAAMC,KAE9B4Q,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,MACN6nD,EAAWC,EAAcC,IAAetgG,EAAAA,EAAAA,IAAQ,IAChD28H,EAAWC,IAAgB1vH,EAAAA,EAAAA,SAAkCtJ,GAC9Di5H,EAAiBN,GAAYt3E,GAAas3E,EAASpoG,OAnCnB,IAoCjC8wB,EAAU63E,QAAQp6H,OAAS,EAC1Bq6H,GAAY3yH,EAAAA,EAAAA,OAElBkB,EAAAA,EAAAA,IAAU,KACJoB,IAAW0zF,IACb28B,EAAUxyH,aAAU3G,GAGlBw8F,IAAc1zF,IAChB4zF,IACAs8B,OAAah5H,KAEd,CAACw8F,EAAW1zF,EAAQ4zF,IAEvB,MAAM08B,GAA0B1vH,EAAAA,EAAAA,GAAgB,KAC1CyvH,EAAUxyH,SACZmlC,EAAS,CAAE9uC,GAAIm8H,EAAUxyH,UAE3BmyH,MAGI3gG,GAAczuB,EAAAA,EAAAA,GAAgB,KAClC+yF,MAGI/6E,GAAchY,EAAAA,EAAAA,GAAiBsxB,IACnCm+F,EAAUxyH,QAAUq0B,EACpB7C,MAGIitB,GAAiB17C,EAAAA,EAAAA,GAAgB,KACrCmvH,EAAa,CACXlvH,OAAQA,EACRiM,UAAWA,MAITyjH,GAAen0H,EAAAA,EAAAA,IAAQ,KAC3B,MAAMo0H,EAAiC,GAMvC,OALAX,GAAUt3E,WAAWzsC,QAAQ,EAAG27B,eACzB+oF,EAAgB31C,KAAMtJ,IAAMzqC,EAAAA,EAAAA,IAAeyqC,EAAG9pC,KACjD+oF,EAAgBnpH,KAAKogC,KAGlB+oF,GACN,CAACX,IAEEt6E,GAAUn5C,EAAAA,EAAAA,IAAQ,KACtB,GAAI6zH,EACF,OAAOJ,GAAUt3E,UACdvmB,OAAO,EAAGyV,eAAeX,EAAAA,EAAAA,IAAeW,EAAUwoF,IAClDnoH,IAAI,EAAG7H,YAAaA,GAGzB,MAAMwwH,EAAgBv5E,OAAO8K,KAAKupE,GAAe,CAAC,GAElD,OAAOjzF,EAAAA,GAAAA,IAAOu3F,GAAUt3E,UAAUzwC,IAAI,EAAG7H,YAAaA,GAAQwoF,OAAOgoC,GAAiB,KAAO,KAC5F,CAACR,EAAWJ,EAAUtE,KAElBjrE,EAAaC,IAAWC,EAAAA,GAAAA,GAC7BlE,EAAgB/G,EAASs6E,QAAoC34H,IAAxB24H,EAASr1E,YAOhD,OAJA57C,EAAAA,EAAAA,IAAU,KACR2hD,IAAU,CAAE3/B,UAAW21C,EAAAA,GAAkBC,aACxC,CAACjW,KAGFtsD,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQA,IAAW0zF,EACnBxzF,QAASmvB,EACTl7B,UAAU,0BACVqN,MAAOoqC,EAAQ,aACfzrC,oBAAqBmwH,EAAwBl8H,SAAA,CAE5C+7H,IACCl8H,EAAAA,GAAAA,IAAA,OAAKE,UAAU,YAAYuW,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAChEH,EAAAA,GAAAA,IAACgO,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,IAAgBylH,GAAa,UACxC17H,KAAK,OACLyf,QAAM,EAEN5R,QAASA,IAAM8tH,OAAah5H,GAAW9C,SAAA,EAEvCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,UACVxC,QAAQywH,GAAUpoG,SAAUstC,EAAAA,GAAAA,IAAqB3zD,EAAMyuH,EAASpoG,UAElE8oG,EAAazoH,IAAK2/B,IACjB,MAAMhgB,EAAQ8wB,GAAW63E,QACtBvmF,KAAMjD,IAAmBE,EAAAA,EAAAA,IAAeF,EAAea,SAAUA,KAAYhgB,MAChF,OACExzB,EAAAA,GAAAA,IAACgO,EAAAA,EAAM,CAEL9N,WAAWqW,EAAAA,GAAAA,IAAes8B,EAAAA,EAAAA,IAAempF,EAAWxoF,IAAa,UACjElzC,KAAK,OACLyf,QAAM,EAEN5R,QAASA,IAAM8tH,EAAazoF,GAAUrzC,SAAA,EAEtCC,EAAAA,GAAAA,GAACylD,GAAAA,EAAmB,CAClBrS,SAAUA,EACVtzC,UAAU,wBACVmkD,mBAAoBA,IAErBl5C,QAAQqoB,KAAUstC,EAAAA,GAAAA,IAAqB3zD,EAAMqmB,MAZzCsgB,EAAAA,EAAAA,IAAeN,UAmB9BpzC,EAAAA,GAAAA,GAAA,OAAKqW,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAW/C,UAAU,uBAAsBC,SAC1EksD,GAAatqD,QACZ3B,EAAAA,GAAAA,GAACkpD,GAAAA,EAAc,CACbppD,UAAU,6BACVqpD,MAAO8C,EACP7C,WAAY8C,EAAQnsD,SAEnBksD,GAAaowE,QACXzwH,IACC,MAAMmoB,EAAOqR,EAAUx5B,IAAWqhD,EAAUrhD,GAEtC0wH,EAAgBd,GAAUt3E,UAAUvmB,OAAQ4+F,GAAYA,EAAQ3wH,SAAWA,GAC3Eu9C,EAA2B,GAC3BqzE,EAAatF,IAActrH,GAiDjC,OA/CA0wH,GAAe7kH,QAASylE,IAClB0+C,KAAcnpF,EAAAA,EAAAA,IAAeyqC,EAAE9pC,SAAUwoF,IAE7CzyE,EAAMn2C,MACJpT,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAEPziC,UAAU,yCAEViO,QAASA,IAAMwW,EAAY3Y,GAAQ7L,SAAA,EAEnCC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CAACC,KAAMA,EAAM7zB,KAAK,YACzBN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,OAAMC,SAAA,EACnBC,EAAAA,GAAAA,GAAC+uD,GAAAA,EAAa,CAACh7B,KAAMA,EAAMo/E,iBAAe,KAC1CvzG,EAAAA,GAAAA,IAAA,QAAME,UAAU,SAASuW,IAAI,OAAMtW,SAAA,EACjCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,gBAAgBzN,UAAU,iBACpCulD,EAAAA,GAAAA,GAAiB9N,EAAuB,IAAd2lC,EAAEu/C,iBAGhCv/C,EAAE9pC,WACDpzC,EAAAA,GAAAA,GAACylD,GAAAA,EAAmB,CAClB3lD,UAAU,sBACVszC,SAAU8pC,EAAE9pC,SACZ6Q,mBAAoBA,MAjBnB,GAAGr4C,MAAU8nC,EAAAA,EAAAA,IAAewpC,EAAE9pC,gBAwBpCwoF,GAAcU,GAAe36H,QAChCwnD,EAAMn2C,MACJhT,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAEPziC,UAAU,6CAEViO,QAASA,IAAMwW,EAAY3Y,GAAQ7L,UAEnCC,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CACdloB,OAAQjyB,EACRq6C,kBAAgB,EAChBy2E,WAAW,SACXv3E,OAAQq3E,GAAan3E,EAAAA,GAAAA,GAAiB9N,EAAsB,IAAbilF,QAAqB35H,EACpEoiD,WAAW,kBAVR,GAAGr5C,cAePu9C,OAIXnpD,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,OAEdzvD,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,wBACVgO,QAAM,EACNC,QAASitB,EAAYj7B,SAEpBw3C,EAAQ,iBC/IjB,IAAe54C,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUs7H,6BACT,MAAMC,OAA2D/5H,IAA1C85H,EAAuBC,iBACzCC,EAAAA,EAAAA,KAA0Bx7H,EAAQs7H,EAAuBC,gBAC9D,MAAO,CACLE,kBAAmBF,EAAiBA,EAAe/8H,QAAKgD,IAL1C8L,CAlFyCouH,EAC3DD,oBACAH,6BAEA,MAAM,2BAAEK,IAA+BhxH,EAAAA,EAAAA,OAEhCixH,EAAUC,IAAej+H,EAAAA,EAAAA,IAAQ,IACjCwa,EAAW0jH,IAAgBl+H,EAAAA,EAAAA,IAAQ,GACpCkL,GAAad,EAAAA,EAAAA,MAEb+zH,GAAO7wH,EAAAA,EAAAA,GAAgB,KAC3B2wH,IACI/yH,EAAWX,SACbc,aAAaH,EAAWX,SAE1BqB,WAAW,KACTmyH,EAA2B,CAAEn9H,GAAI88H,EAAuB98H,MApB9B,OAwBxBw9H,GAAwB9wH,EAAAA,EAAAA,GAAiBM,IACvCA,EAAEC,QAAwB8f,QAAQ,mBACtCwwG,OAIJ7yH,EAAAA,EAAAA,IAAU,KACRxI,SAASgU,iBAAiB,aAAcsnH,GACxCt7H,SAASgU,iBAAiB,YAAasnH,GACvCt7H,SAASgU,iBAAiB,YAAasnH,GACvCt7H,SAASgU,iBAAiB,QAASsnH,GAE5B,KACLt7H,SAASiU,oBAAoB,aAAcqnH,GAC3Ct7H,SAASiU,oBAAoB,YAAaqnH,GAC1Ct7H,SAASiU,oBAAoB,YAAaqnH,GAC1Ct7H,SAASiU,oBAAoB,QAASqnH,KAEvC,CAACA,KAEJxhH,EAAAA,EAAAA,IAAgB,KACd,MAAMyhH,GAAoBxlG,EAAAA,EAAAA,MAE1B3tB,EAAWX,QAAUqB,WAAW,KAC9BuyH,IACAE,KAhDmB,MAkDpB,CAACF,IAEJ,MAAMG,EAAaT,GAAqB,UAAUA,IAC5CU,GAAen1H,EAAAA,EAAAA,GAASk1H,GAAaT,GAE3C,IAAKH,EAAuBc,UAC1B,OAGF,MAAM9zG,GAASgzG,EAAuBc,WAAa,GA1DjC,IA4DlB,OACEz9H,EAAAA,GAAAA,GAAA,OACEF,WAAWqW,EAAAA,GAAAA,GACT,4BACA8mH,GAAY,SACZxjH,GAAa,UACbkjH,EAAuBe,YAAc,YAEvC53H,MAAO,YAAY6jB,iBAAqBgzG,EAAuBngH,mBAAmBmgH,EAAuB75G,OAAO/iB,UAEhHC,EAAAA,GAAAA,GAACC,GAAAA,EAAe,CAEdC,KAxEY,IAyEZE,OAAQo9H,EACRx6C,MAAI,EACJ26C,QAAShnH,EAAAA,GAAa,QAAM9T,EAC5BghG,aAAW,EACXrjG,QAAM,EACNC,OAAQ08H,GAPH,UAAUL,UC4CvB,IAAen+H,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,OAAEmL,EAAM,UAAEiM,IAAc1J,EAAAA,EAAAA,KAAe1N,GAAQu8H,mBAAqB,CAAC,EAErEC,GAAsBC,EAAAA,EAAAA,KAAmBz8H,GAO/C,MAAO,CACLmL,SACAiM,YACAslH,0BATgCvxH,EAC9BiM,GACEulH,EAAAA,EAAAA,KAA0C38H,EAAQmL,EAAQiM,IAC1DwlH,EAAAA,EAAAA,KAAuC58H,EAAQmL,QACjD3J,EAMFg7H,wBAfclvH,CAzGiCuvH,EACnDvyH,SACAa,SACAiM,YACAslH,4BACAF,0BAEA,MAAM,0BACJM,EAAyB,uBACzBC,EAAsB,iBACtBC,EAAgB,uBAChBC,IACEtyH,EAAAA,EAAAA,OAEG88C,EAAQ0H,IAAarkD,EAAAA,EAAAA,IAAS,IAC/BY,GAAOC,EAAAA,EAAAA,KAEPuxH,GAAehyH,EAAAA,EAAAA,GAAiBiyH,IAC/BhyH,IAEDiM,EACF0lH,EAA0B,CAAE3xH,SAAQ3M,GAAI4Y,EAAWgmH,eAAgBD,KAEnEH,EAAiB,CAAEK,oBAAqBF,IACxCF,EAAuB,CAAE9xH,SAAQiyH,eAAgBD,KAGnDJ,OAGIO,GAAepyH,EAAAA,EAAAA,GAAiBM,IACpC2jD,EAAU3jD,EAAEC,OAAOH,SAGfiyH,GAAqB72H,EAAAA,EAAAA,IAAQ,IAAM82H,EAAAA,IAAgCprH,IAAK+qH,IAOrE,CACLA,WACAM,eARsB,IAAIC,KAAKC,aAAa,CAACnB,GAAsB,CAAE38H,KAAM,aACtC+9H,GAAGT,GAQxCU,aANoB,IAAIH,KAAKC,aAAa,CAACR,GAAW,CAAEt9H,KAAM,aAC7B+9H,GAAGT,MAOpC,CAACX,KAELtzH,EAAAA,EAAAA,IAAU,KACHoB,GAAQ6kD,EAAU,KACtB,CAAC7kD,IAEJ,MAAMwzH,GAA6Bp3H,EAAAA,EAAAA,IAAQ,IACpC+gD,EAAOykB,OAILqxD,EAAmBjhG,OAAO,EAAG6gG,WAAUM,iBAAgBI,kBAC5DJ,EAAexxE,cAAcx9B,SAASg5B,EAAOwE,gBAC1C4xE,EAAa5xE,cAAcx9B,SAASg5B,EAAOwE,gBAC3CkxE,EAASlxE,cAAcx9B,SAASg5B,EAAOwE,gBANnCsxE,EAQR,CAACA,EAAoB91E,IAExB,OACElpD,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJtN,UC5GiB,WD6GjBwiC,QAAM,EACN32B,OAAQA,EACRqoE,gBAAc,EACd7mE,MAAOJ,EAAK,YACZlB,QAASuyH,EAAuBr+H,SAAA,EAEhCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CAERhB,MAAOm8C,EACPr7C,SAAUkxH,EACVrvE,YAAaviD,EAAK,UAClBu8B,2BAAyB,GAJrB,WAMNtpC,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GC1H8G,WD0H7E,iBAAiBpW,SAC/Do/H,EAA2B1rH,IAAI,EAAG+qH,WAAUU,eAAcJ,qBACzDl/H,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAEPziC,WAAWqW,EAAAA,GAAAA,GC9H6C,WD8Hb,WAC3CwrG,cAAeoc,IAA8BS,EAAW,aAAU37H,EAClEsd,SAAU49G,IAA8BS,EACxCh8F,WAAS,EACTk/E,QAAM,EAEN3zG,QAASA,IAAMwwH,EAAaC,GAAUz+H,SAAA,EAEtCC,EAAAA,GAAAA,GAAA,QAAMF,WAAWqW,EAAAA,GAAAA,GAAe,QCtI2C,YDsIpBpW,UACpDi0B,EAAAA,GAAAA,GAAWkrG,EAAc,CAAC,aAAc,CAAEE,UAAWt2E,OAExD9oD,EAAAA,GAAAA,GAAA,QAAMF,WAAWqW,EAAAA,GAAAA,GAAe,WCzIiE,YDyIpCpW,UAC1Di0B,EAAAA,GAAAA,GAAW8qG,EAAgB,CAAC,aAAc,CAAEM,UAAWt2E,QAbrD01E,Y,4BE7HjB,UAAgB,QAAU,WAAW,YAAc,WAAW,KAAO,WAAW,MAAQ,WAAW,YAAc,YCiJjH,IAAe7/H,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,YAAEg7D,GAAgBh7D,EAExB,MAAO,CACL+6D,cAAeC,EAAYC,aALb3tD,CA3GoC0wH,EACtDl3F,QACAi0B,oBAEA,MAAM,0BACJkjE,EAAyB,SACzB3wF,EAAQ,QACRxY,EAAO,iBACPwL,IACE31B,EAAAA,EAAAA,MACEe,GAAOC,EAAAA,EAAAA,KAEPuyH,EAA6B,aAAhBp3F,GAAOjnC,KAEpB85B,GAAczuB,EAAAA,EAAAA,GAAgB,KAClC+yH,MAGItiF,GAAiBzwC,EAAAA,EAAAA,GAAgB,KACrCoiC,EAAS,CAAE9uC,GAAIsoC,EAAOv8B,SACtBovB,MAGIwkG,GAAgBjzH,EAAAA,EAAAA,GAAgB,KACpC4pB,EAAQ,CACN5e,IAAK4wB,EAAO5wB,MAEdyjB,MAGIg7F,GAAazpH,EAAAA,EAAAA,GAAgB,KACjC,MAAMuI,EAAOyqH,GAAaE,EAAAA,GAAAA,GAAet3F,EAAMu3F,cAC3C9hE,EAAAA,GAAAA,IAA0BxB,EAAej0B,EAAOu3F,cACpDC,EAAAA,GAAAA,IAAoB7qH,GACpB6sB,EAAiB,CACf/gC,QAASmM,EAAKwyH,EAAa,iBAAmB,iBAEhDvkG,MAGI7tB,GAAQpF,EAAAA,EAAAA,IAAQ,KACpB,IAAKogC,EAAO,OACZ,MAAM1iB,EAAM85G,EAAa,wBAA0B,qBAC7CK,EAAuBL,GACzBE,EAAAA,GAAAA,GAAet3F,EAAMu3F,cACrB9hE,EAAAA,GAAAA,IAA0BxB,EAAej0B,EAAMu3F,aACnD,OAAO3yH,EAAK0Y,EAAKm6G,IAChB,CAACz3F,EAAOo3F,EAAYnjE,EAAervD,IAEhCX,GAAcrE,EAAAA,EAAAA,IAAQ,KAC1B,IAAKogC,EAAO,OACZ,MAAM1iB,EAAM85G,EAAa,0BAA4B,uBAC/CtsG,GAAOoyB,EAAAA,GAAAA,GAAiBt4C,EAA2B,IAArBo7B,EAAM03F,cACpC9zC,GAAWgC,EAAAA,GAAAA,IAAuB5lD,EAAMoW,OAAQpW,EAAM4jD,SAAUh/E,EAAKguD,MACrE+kE,GAAiB/xC,EAAAA,GAAAA,IAAuB5lD,EAAM43F,aAAc53F,EAAM23F,eAAgB/yH,EAAKguD,MAE7F,OAAOhuD,EAAK0Y,EAAK,CAACwN,EADL,GAAG6sG,MAAmB/zC,QAElC,CAAC5jD,EAAOo3F,EAAYxyH,IAEvB,OACEnN,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQZ,QAAQo9B,GAChB7F,QAAM,EACND,iBAAkB7kB,GAAOzK,QACzBlH,QAASyzH,EAA0Bv/H,SAAA,EAEnCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN3N,KAAK,UACLJ,UAAW0d,GAAO8qB,YAClB/1B,UAAWxF,EAAK,SAChBgB,QAASitB,EAAYj7B,UAErBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAEbvN,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOvK,KAAKlT,UAC1BC,EAAAA,GAAAA,GAAC6nG,GAAAA,EAAuB,CACtBznG,OAAQm/H,EAAal/H,GAAAA,EAAe2/H,QAAU3/H,GAAAA,EAAe4/H,SAC7D//H,KAjFY,QAoFhBF,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAOrQ,MAAMpN,SACzBoN,IAAS6mB,EAAAA,GAAAA,GAAW7mB,EAAO,CAAC,uBAE/BnN,EAAAA,GAAAA,GAACizG,GAAAA,EAAQ,CACPnzG,UAAW0d,GAAO0iH,KAClBt0H,OAAQu8B,GAAOv8B,OACfk5B,eAAa,EACb4/D,SAAUv8D,GAAOv8B,OACjBmC,QAASivC,KAEXh9C,EAAAA,GAAAA,GAAA,KAAGF,UAAW0d,GAAOpR,YAAYrM,SAC9BqM,IAAe4nB,EAAAA,GAAAA,GAAW5nB,EAAa,CAAC,uBAE3CxM,EAAAA,GAAAA,IAAA,OAAKE,UAAU,yCAAwCC,SAAA,EACrDC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC9N,UAAU,wBAAwBiO,QAASyxH,EAAcz/H,SAC9DgN,EAAK,2BAER/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACE,QAAM,EAAChO,UAAU,wBAAwBiO,QAASioH,EAAWj2H,SAClEgN,EAAKwyH,EAAa,uBAAyB,gC,wCCpH/C,SAASY,GAAsBj/H,GACpC,MAAO,CAACG,EAAqB8xF,KAC3B,MAAMrkF,GAAWC,EAAAA,EAAAA,KAAe1N,IACxBslC,KAAMsmB,GAAc5rD,EAAO6rD,OAC3BvmB,KAAMvB,GAAc/jC,EAAOqlC,OAC7B,eACJ66B,EAAc,cAAE7rC,EAAa,OAAElpB,GAC7BsC,EAASuyD,cAEP,qBAAEgzD,IAAyB9/C,EAAAA,GAAAA,GAAqBlzE,GAKhD++H,EAAuB,UAATl/H,EAAmBA,EAAQiyF,GAAOktC,QAAU,QAAU,SAElEC,SAAUC,GAA2Bl/H,EAAOm/H,SAC9CjrG,EAAWG,IAAgB0qG,IAAc7qG,SAEzC9lB,EAAkBX,EAASW,gBAEjC,MAAO,CACL4wD,OAAOwD,EAAAA,EAAAA,KAAYxiE,GACnBszB,eAAwB9xB,IAAb0yB,KACLgsC,GAAiBx2D,QAAQw2D,EAAerU,OAASqU,EAAei/D,UACtEvzE,YACA7nB,YACAm7F,yBACAhrG,WACAkrG,aAAcj0H,EACdiD,kBACAE,gBAAiBnD,GAAS6nC,EAAAA,EAAAA,KAAWhzC,EAAQmL,IAAS+C,iBAAc1M,EACpEwxH,wBAGN,C,wCC1BA,MAAMlzD,IAAerrD,EAAAA,GAAAA,IAAUsrD,GAAOA,IAAM,KAAK,GA2HjD,IAAeziE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClBwxH,GAAsB,SADJxxH,CAzH4B+xH,EAC9CrgE,QACAggE,UACAx8F,cACAlP,YACAs4B,YACA7nB,YACAm7F,yBACAhrG,WACA9lB,sBAEA,MAAM,qBACJkxH,EAAoB,aACpBpuG,EAAY,gBACZquG,IACE50H,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,KACPozH,EAAcC,EAAU,QAAU,QAClCp4E,GAAiBtoD,EAAAA,EAAAA,IAAY,EAAG4sB,gBAChCA,IAAc21C,EAAAA,GAAkBC,WAClChB,GAAa,KACXw/D,EAAqB,CACnBz/H,KAAMk/H,OAKX,CAACA,EAAaO,EAAsB98F,IAEjCg9F,GAAgB94H,EAAAA,EAAAA,IAAQ,IACvBwtB,GAAagrG,EAIXhrG,EAAS9hB,IAAK5T,IACnB,MAAO2M,EAAQiM,IAAaqoH,EAAAA,GAAAA,GAAqBjhI,GAEjD,OAAO0gI,EAAuB/zH,IAASm6B,KAAKluB,KAC3CklB,OAAO5yB,SAPDw5B,GAAAA,EAQR,CAACg8F,EAAwBhrG,IAEtBwrG,GAAqBphI,EAAAA,EAAAA,IAAaiB,IACtC2xB,EAAa,CAAE/lB,OAAQ5L,EAAQ4L,OAAQiM,UAAW7X,EAAQf,MACzD,CAAC0yB,IAEEyuG,GAAkBrhI,EAAAA,EAAAA,IAAY,CAAC8Y,EAAmBjM,KACtDo0H,EAAgB,CAAEp0H,SAAQiM,eACzB,CAACmoH,IA4CEK,GAAoBvwB,EAAAA,GAAAA,GAAkB,CAAC7sE,GAAci8D,EAAAA,OAA+BnrE,EAE1F,OACE30B,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACT0L,eAAe,sBACfp7B,KAAK,OACL2vB,UAAW+jG,EAAoB,EAAI,EACnChwB,eAAa,EAAAlxG,UAEbH,EAAAA,GAAAA,IAACspD,GAAAA,EAAc,CACbppD,UAAU,8CACVqpD,MAAO83E,EAAoBJ,OAAgBh+H,EAC3CumD,WAAYnB,EACZqa,YAAU,EAAAviE,SAAA,EAERkhI,IAAqBjhI,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,IAC9BwxE,KAAuB1rG,GAAgC,IAApBA,EAAS5zB,UAC3C3B,EAAAA,GAAAA,GAACkhI,GAAAA,EAAY,CACXC,aAAW,EACXrsH,KAAM/H,EAAK,6BACXX,YAAaW,EAAK,0CAGrBk0H,GAAqB1rG,GAAYA,EAAS5zB,OAAS,GAhEjDk/H,EAAcptH,IAAI,CAAC7S,EAAS4D,KACjC,MAAMnD,GAAS6qC,EAAAA,EAAAA,MAETk1F,EADoB,IAAV58H,IAEX68H,EAAAA,GAAAA,IAAYzgI,EAAQqyB,SAAUouG,EAAAA,GAAAA,IAAYR,EAAcr8H,EAAQ,GAAGyuB,MAElE9xB,GAAQmgI,EAAAA,GAAAA,IAA+BjgI,EAAQT,GACrD,OACEhB,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,CACGqhI,IACCphI,EAAAA,GAAAA,GAAA,KACEF,UAAU,kBAEVuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,UAEnCwhI,EAAAA,GAAAA,IAAmBx0H,EAAM,IAAImf,KAAoB,IAAftrB,EAAQqyB,QAHtCryB,EAAQqyB,OAMjBjzB,EAAAA,GAAAA,GAAA,OACEF,UAAU,sBAAqBC,UAG/BC,EAAAA,GAAAA,GAACwhI,GAAAA,GAAK,CAEJnhE,MAAOA,EACPz/D,QAASA,EACTU,OAAQmgI,EAAAA,GAAYC,OACpB9tG,aAAa+tG,EAAAA,GAAAA,GAAc50H,EAAMnM,EAASqsD,EAAW7nB,GACrDnS,KAAMryB,EAAQqyB,KACdnzB,UAAU,cACVymB,OAAQy6G,EACRY,YAAab,EACbhgG,aAAcksB,EAAUrsD,EAAQ4L,SAAS+C,cAAgB3O,EAAQ2O,YACjEkC,eAAeC,EAAAA,EAAAA,IAAiBjC,EAAiBtO,IAV5CP,EAAQf,KAHVe,EAAQf,iB,4BCrGzB,MAuBA,GAtBE+jC,IAEA,MAAMi+F,GAAYx4H,EAAAA,EAAAA,MAEZmc,GAAgBjZ,EAAAA,EAAAA,GAAiBM,IACvB,UAAVA,EAAE4Y,KACYo8G,EAAUr4H,UAAYzH,SAAS+/H,eAG/Cl+F,MAUJ,OANAr5B,EAAAA,EAAAA,IAAU,KACRK,OAAOmL,iBAAiB,UAAWyP,GAAe,GAE3C,IAAM5a,OAAOoL,oBAAoB,UAAWwP,GAAe,IACjE,IAEIq8G,G,4BCkBT,MAuHA,IAAeljI,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM0C,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,GAKhC,MAAO,CACL0C,OACAilC,MANWC,EAAAA,EAAAA,KAAW/yC,EAAQmL,GAO9B26B,UANe46F,EAAAA,EAAAA,KAAmB1gI,EAAQmL,GAO1C4R,QANclP,IAAQ8yH,EAAAA,GAAAA,IAAe9yH,GAAM+yH,EAAAA,EAAAA,KAAqB5gI,IAAS6gI,EAAAA,EAAAA,KAAsB7gI,EAAQ6N,EAAKrP,KAO5GsiI,gBAAiBp3H,QAAQ1J,EAAO+gI,YAAYh2F,YAAYzqC,UAZ1CgN,CAvHoC0zH,EACtD71H,SACA81H,eACApzH,OACAilC,OACAhN,WACA/oB,UACA+jH,kBACAI,oBACAx0H,cAEA,MAAM,mBAAEqyD,EAAkB,qBAAEoiE,EAAoB,iBAAEC,IAAqBz2H,EAAAA,EAAAA,MACjEurC,GAAUvqC,EAAAA,EAAAA,MAET01H,EAAiBC,EAAeC,IAAkB3jI,EAAAA,EAAAA,MAClD4jI,EAAuBC,EAAqBC,IAAwB9jI,EAAAA,EAAAA,MACpE+jI,EAA6BC,EAA2BC,IAA+BjkI,EAAAA,EAAAA,MACvFkkI,EAAuBC,EAAqBC,IAAyBpkI,EAAAA,EAAAA,KAEtEqkI,GAAyB3jI,EAAAA,EAAAA,IAAY,KACzCsjI,IACAH,KACC,CAACG,EAA2BH,IAEzBS,GAAa5jI,EAAAA,EAAAA,IAAY,KAC7ByjI,IACAT,KACC,CAACS,EAAqBT,IAEnBa,GAAej3H,EAAAA,EAAAA,GAAgB,KACnCi2H,EAAqB,CAAEh2H,SAAQi3H,WAAYC,EAAAA,QAGvCh/E,GAAiBi/E,EAAAA,GAAAA,GAAsB,CAC3Cz0H,OACAilC,OACAhN,WACA/oB,UACA+jH,kBACAoB,aACAC,eACAF,2BACC,GAEG/+G,GAAchY,EAAAA,EAAAA,GAAiBM,IACnC,GAAIA,EAAE+2H,QAAU10H,IAASA,EAAK8+C,QAG5B,OAFAnhD,EAAE6Y,sBACF+8G,EAAiB,CAAE5iI,GAAI2M,IAGzBuB,EAAQvB,KAGJq3H,GAAgBt3H,EAAAA,EAAAA,GAAiBM,IACrCA,EAAEuJ,kBAEF,MAAMiqD,GAAQC,EAAAA,GAAAA,KACdF,EAAmB,CACjB5J,MAAOhqD,EACPZ,OAAQY,EACR6zD,YAIEwhE,EAAYiC,GAAmB,KACnC/1H,EAAQvB,KAGV,OACE5M,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPziC,UAAU,oCACViO,QAASwW,EACTmgC,eAAgBA,EAChBm9E,UAAWA,EAAU9hI,SAAA,EAEpB2O,EAAAA,EAAAA,IAASlC,IACRxM,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CACdloB,OAAQrxB,EACR81H,aAAcA,EACd5F,WAAW,YAGb18H,EAAAA,GAAAA,GAACkmD,GAAAA,EAAa,CACZ15C,OAAQA,EACR81H,aAAcA,EACd5F,WAAW,WAGd6F,GAAqBpuF,GAAM4vF,iBAC1B/jI,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,oBACVysG,MAAI,EACJnkD,OAAK,EACLloD,KAAK,OACL6N,QAAS81H,EAAc9jI,SAEtBw3C,EAAQ,aAGZ4rF,IACCnjI,EAAAA,GAAAA,GAACgkI,GAAAA,EAAa,CACZr4H,OAAQ+2H,EACR72H,QAAS+2H,EACT92H,oBAAqBu3H,EACrB72H,OAAQA,IAGXw2H,IACChjI,EAAAA,GAAAA,GAACikI,GAAAA,EAAe,CACdt4H,OAAQk3H,EACRh3H,QAASk3H,EACTj3H,oBAAqBo3H,EACrB12H,OAAQA,UCtHZ20D,IAAerrD,EAAAA,GAAAA,IAAUsrD,GAAOA,IAAM,KAAK,GA+GjD,IAAeziE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAsBtN,IACxC,MAAMggE,GAAetyD,EAAAA,EAAAA,KAAe1N,GAAQggE,aACtC9rC,EAAW8rC,EAAaC,gBAAgBpgB,QAE9C,MAAO,CACLvsB,WAAYY,GAAY8rC,EAAaE,gBAAgBC,QACrDjsC,WACAksC,aAAcpgE,EAAOqgE,WAAW17B,UAPhBr3B,CA7G6Bu1H,EAC/CrgG,cACAlP,YACAY,WACAksC,mBAEA,MAAM,qBACJK,EAAoB,iBACpB2D,IACEz5D,EAAAA,EAAAA,MAEEsd,GAAejgB,EAAAA,EAAAA,MAEf0D,GAAOC,EAAAA,EAAAA,MAEN40D,EAAoBC,IAAyB11D,EAAAA,EAAAA,KAAkB,GAEhE81D,GAAmBl6D,EAAAA,EAAAA,IAAQ,KAC/B,IAAKwtB,EAAU,MAAO,GACtB,MAAM4uG,EAAY,IAAI/1F,IAAIqzB,GACpB2iE,EAAgB7uG,EAASoI,OAAQ99B,IAAQskI,EAAUj2F,IAAIruC,IAE7D,OAAOqkC,EAAAA,GAAAA,IAAmB,CAAEC,IAAKigG,EAAehgG,MAAOP,EAAa3iC,KAAM,UACzE,CAACq0B,EAAUksC,EAAc59B,IAEtBwgG,GAAkB93H,EAAAA,EAAAA,GAAiB1M,IACvC4lE,EAAiB,CAAE5lE,KAAIykI,sBAAsB,MAGzCr8E,GAAiBtoD,EAAAA,EAAAA,IAAY,EAAG4sB,gBAChCA,IAAc21C,EAAAA,GAAkBC,WAClChB,GAAa,KACXW,OAGH,IAEGC,GAA2Bx1D,EAAAA,EAAAA,GAAgB,KAC/Cs1D,EAAuBG,IAAUA,KAG7Bi/D,GAAoBvwB,EAAAA,GAAAA,GAAkB,CAAC7sE,GAAci8D,EAAAA,OAA+BnrE,EAE1F,OACE30B,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACThpB,IAAKqV,EACLqf,eAAe,sBACfp7B,KAAK,OACL2vB,UAAW+jG,EAAoB,EAAI,EACnChwB,eAAa,EAAAlxG,UAEbH,EAAAA,GAAAA,IAACspD,GAAAA,EAAc,CACbppD,UAAU,+BACVqpD,MAAO83E,EAAoBh/D,OAAmBp/D,EAC9CumD,WAAYnB,EACZqa,YAAU,EAAAviE,SAAA,EAERkhI,IAAqBjhI,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,IAC9BwxE,IAAsBh/D,GAAkBtgE,SACvC3B,EAAAA,GAAAA,GAACkhI,GAAAA,EAAY,CACXC,aAAW,EACXrsH,KAAM/H,EAAK,6BACXX,YAAaW,EAAK,0CAGrBk0H,IAAsBp9F,GAAe94B,QAAQ02D,GAAc9/D,UAC1D/B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,MAAIE,UAAU,kBAAiBC,SAAA,CAC5B0hE,EAAa9/D,OAvEG,IAwEf3B,EAAAA,GAAAA,GAACi+F,GAAAA,EAAI,CAACn+F,UAAU,OAAOiO,QAASg0D,EAAyBhiE,SACtDgN,EAAK60D,EAAqB,2BAA6B,8BAG3D70D,EAAK,qBAEP00D,EAAahuD,IAAI,CAAC5T,EAAI2E,KACrB,GAAKo9D,KAAsBp9D,GA/EV,GAmFjB,OACExE,EAAAA,GAAAA,GAACqiI,GAAoB,CACnB71H,OAAQ3M,EACRkO,QAASs2H,EACT9B,mBAAiB,SAM1BtB,GAAqBl2H,QAAQk3D,GAAkBtgE,UAC9C/B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAiBC,SAAEgN,EAAK,uBACrCk1D,EAAiBxuD,IAAK5T,IAEnBG,EAAAA,GAAAA,GAACqiI,GAAoB,CACnB71H,OAAQ3M,EACRkO,QAASs2H,EACT9B,mBAAiB,gB,2BCpBnC,SAASgC,GACPx3H,EAAcnM,EAAqBoI,EAAkB66B,EAAsB2gG,GAE3E,IAAKx7H,EACH,OAAOy7H,EAAAA,EAAAA,GAAqB13H,EAAMnM,OAASiC,EAAWghC,GAGxD,MAAM6gG,GAAYC,EAAAA,EAAAA,IAAoB/jI,GAEtC,OACEhB,EAAAA,GAAAA,IAAA,QAAME,UAAU,gBAAeC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,OACE8D,IAAKkF,EACLuf,IAAI,GACJzoB,WACEqW,EAAAA,GAAAA,GAAe,uBAAwBquH,GAAgB,QAASE,GAAa,yBAE/E/gI,WAAW,KAEZihI,EAAAA,EAAAA,IAAgBhkI,KAAYZ,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,UACvCk3H,EAAAA,EAAAA,GAAqB13H,EAAMnM,GAAS,EAAMijC,KAGjD,CAEA,UAAellC,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM0C,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,GAChC,IAAK0C,EACH,MAAO,CAAC,EAGV,MAAM21H,GAAoB1V,EAAAA,EAAAA,IAAqBjgH,GAG/C,MAAO,CACLA,OACA41H,gBAJsBD,GAAoBzwF,EAAAA,EAAAA,KAAW/yC,EAAQwjI,QAAqBhiI,IARpE8L,CA3F2Bo2H,EAC7CnkI,UACAijC,cACAr3B,SACA0C,OACA41H,sBAEA,MAAM,aAAEvyG,IAAiBvmB,EAAAA,EAAAA,OAEnB,SAAE5M,IAAaC,EAAAA,EAAAA,MACf6J,GAAe87H,EAAAA,GAAAA,GAAapkI,GAC5BqkI,GAAkBC,EAAAA,EAAAA,IAAkBtkI,QAA0BiC,EAAfqG,EAC/Co6F,GAAY6hC,EAAAA,GAAAA,GAAoBvkI,EAAS,SACzCwkI,GAAe/8H,EAAAA,EAAAA,GAASi7F,GACxBkhC,EAAez5H,SAAQs6H,EAAAA,EAAAA,IAAqBzkI,IAE5C2jB,GAAchY,EAAAA,EAAAA,GAAgB,KAClCgmB,EAAa,CAAE/lB,SAAQiM,UAAW7X,EAAQf,GAAIykI,sBAAsB,MAGhEv3H,GAAOyqC,EAAAA,GAAAA,KACPD,GAAUvqC,EAAAA,EAAAA,KAEV60H,EAAYiC,GAAmBv/G,GAErC,IAAKrV,EACH,OAGF,MAAM6kB,EAAO+wG,GAAmB51H,EAEhC,OACEtP,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPziC,UAAU,kCACV6f,QAASvgB,EACT2O,QAASwW,EACTs9G,UAAWA,EAAU9hI,SAAA,EAErBC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACLC,KAAMA,EACNk7B,gBAAiB61E,GAAiBz2E,UAEpCzuD,EAAAA,GAAAA,IAAA,OAAKE,UAAU,OAAMC,SAAA,EACnBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,WAAUC,SAAA,EACvBC,EAAAA,GAAAA,GAAC+uD,GAAAA,EAAa,CACZh7B,KAAMA,EACNo/E,iBAAe,EACflkD,gBAAiBziD,IAAWs4H,GAAiBjlI,IAAMilI,GAAiBz2E,UAEtEruD,EAAAA,GAAAA,GAAA,OAAKF,UAAU,eAAcC,UAC3BC,EAAAA,GAAAA,GAACi+F,GAAAA,EAAI,CAACn+F,UAAU,OAAMC,UACnBulI,EAAAA,GAAAA,IAAoB/tF,EAAwB,IAAf32C,EAAQqyB,cAK5CjzB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAAUuW,IAAI,OAAMtW,SAChCwkI,GAAcx3H,EAAMnM,EAASwkI,GAAgBH,EAAgBphG,EAAa2gG,gBChDvF,IAAe7lI,EAAAA,EAAAA,IA5CmB4mI,EAChCC,aAAY5hG,eAEZ,MAAM6hG,GAAc19H,EAAAA,EAAAA,IAAQ,IAmB9B,SAAgCy9H,GAE9B,GADgBA,EAAW96F,MAAM,0BACpB,CACX,MAAMzX,EAAO,IAAI/G,KAAKs5G,GACtB,MAAO,CAAC,CAAEvyG,OAAMne,MAAMgmD,EAAAA,GAAAA,GAAmB7nC,IAC3C,CAEA,MAAMyyG,EAAa,GACbC,EAAc,IAAIz5G,KAClBytC,EAAcgsE,EAAYxsE,cAC1BysE,EAAaD,EAAY9rE,UAAa,IAAI3tC,KAAK,GAAGytC,KAAe6rE,KAAe3rE,UAClFF,EACAA,EAAc,EAElB,IAAK,IAAInQ,EAAI,EAAGA,EA3CO,EA2CeA,IAAK,CACzC,MAAMv2B,EAAO,IAAI/G,KAAK,GAAG05G,EAAap8E,KAAKg8E,KAC3CE,EAAW1yH,KAAK,CAAEigB,OAAMne,MAAMgmD,EAAAA,GAAAA,GAAmB7nC,IACnD,CAEA,OAAOyyG,CACT,CAvCoCG,CAAuBL,GAAa,CAACA,IACvE,OACExlI,EAAAA,GAAAA,GAAA,WAASF,UAAU,4CAA2CC,SAC3D0lI,EAAYhyH,IAAI,EAAGwf,OAAMne,WAEtBlV,EAAAA,GAAAA,IAAA,OACEmO,QAASA,IAAM61B,EAAS3Q,GACxBnzB,UAAU,YAAWC,SAAA,EAGrBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,cACXvN,EAAAA,GAAAA,GAAA,QAAAD,SAAO+U,MAHFA,QCFXs2C,GAAkB,EAAIx1C,EAAAA,EA2C5B,IAAejX,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,SAAQkjD,cAGV,CACLjC,OAHYq4E,EAAAA,EAAAA,KAAYzkI,EAAQmL,EAAQkjD,KAF1B/gD,CAzCqCo3H,EACvDv5H,SACAkjD,UACAjC,QACA1/C,cAEA,MAAM,iBAAE00H,IAAqBz2H,EAAAA,EAAAA,MAEvBuY,GAAc5kB,EAAAA,EAAAA,IAAakN,IAC/B,GAAIA,EAAE+2H,OAGJ,OAFA/2H,EAAE6Y,sBACF+8G,EAAiB,CAAE5iI,GAAI2M,EAAQ8C,SAAUogD,IAG3C3hD,EAAQ2hD,IACP,CAACljD,EAAQkjD,EAAS3hD,EAAS00H,IAExBZ,EAAYiC,GAAmB,IAAM/1H,EAAQ2hD,IAEnD,GAAKjC,EAIL,OACE7tD,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPziC,UAAU,oCACViO,QAASwW,EACTg8D,gBAAgB,aAChBshD,UAAWA,EAAU9hI,SAAA,EAErBC,EAAAA,GAAAA,GAAC2vD,GAAAA,EAAS,CACRzvD,KAAMkrD,GACNqC,MAAOA,EACP3tD,UAAU,aACV8vD,gBAAgB,uBAElB5vD,EAAAA,GAAAA,GAAA,OAAKqW,IAAI,OAAOvW,UAAU,WAAUC,UAAEi0B,EAAAA,GAAAA,GAAWy5B,EAAMtgD,eCxBvDg0D,IAAerrD,EAAAA,GAAAA,IAAUsrD,GAAOA,IAAM,KAAK,GAiIjD,IAAeziE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAQslC,KAAMsmB,GAAc5rD,EAAO6rD,OAC7B,cAAE94B,EAAeosG,UAAYF,SAAUC,IAA6Bl/H,GACpE,eACJkgE,EAAc,cAAE7rC,EAAa,cAAEswG,EAAex5H,OAAQi0H,IACpD1xH,EAAAA,EAAAA,KAAe1N,GAAQggE,cAErB,SAAE9rC,GAAcG,GAAe5gB,MAAS,CAAC,EAE/C,MAAO,CACLsf,gBACAmB,WACAgrG,yBACAtzE,YACAsU,iBACAykE,gBACAvF,iBAjBc9xH,CA/HkCs3H,EACpDpiG,cACAqiG,kBACA3wG,WACAgrG,yBACAtzE,YACAsU,iBACAykE,gBACAvF,eACA0F,qBACA3jE,cAEA,MAAM,qBAAEm+D,EAAoB,WAAEyF,IAAep6H,EAAAA,EAAAA,MAEvCe,GAAOyqC,EAAAA,GAAAA,MACP,SAAEp4C,IAAaC,EAAAA,EAAAA,MAEf4oD,GAAiBtoD,EAAAA,EAAAA,IAAY,EAAG4sB,gBAChCA,IAAc21C,EAAAA,GAAkBC,WAClChB,GAAa,KACXw/D,EAAqB,CACnBz/H,KAAM,YAKX,CAAC2iC,IAEEwiG,GAAmB1mI,EAAAA,EAAAA,IACtBE,IACM4gI,IACL2F,EAAW,CAAE55H,OAAQi0H,EAAcnxH,SAAUzP,EAAIykI,sBAAsB,IAElEllI,GACHojE,MAGJ,CAACi+D,EAAcrhI,EAAUojE,IAGrBq+D,GAAgB94H,EAAAA,EAAAA,IAAQ,IACvBwtB,GAAgC,IAApBA,EAAS5zB,OAInB4zB,EACJ9hB,IAAK5T,IACJ,MAAO2M,EAAQiM,IAAaqoH,EAAAA,GAAAA,GAAqBjhI,GAEjD,OAAO0gI,IAAyB/zH,IAASm6B,KAAKluB,KAE/CklB,OAAO5yB,SACP08C,KAAK,CAACC,EAAGC,IAAMA,EAAE10B,KAAOy0B,EAAEz0B,MAVpBsR,GAAAA,EAWR,CAAChP,EAAUgrG,IAmBR+F,EAAe/kE,IAAmBA,EAAerU,QAAUqU,EAAei/D,WAAaK,EAAcl/H,SACrGqkI,GAAerkI,OAErB,OACE3B,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAClCH,EAAAA,GAAAA,IAACspD,GAAAA,EAAc,CACbppD,UAAU,yCACVqpD,MAAO03E,EACPz3E,WAAYnB,EACZqa,YAAU,EAAAviE,SAAA,CAETmmI,IACClmI,EAAAA,GAAAA,GAAA,OAAKF,UAAU,8BAA6BC,UAC1CC,EAAAA,GAAAA,GAACulI,GAAW,CACVC,WAAYU,EACZtiG,SAAUuiG,MAIfG,IACCtmI,EAAAA,GAAAA,GAACkhI,GAAAA,EAAY,CACXC,aAAW,EACXrsH,KAAM/H,EAAK,2BACXX,YAAaW,EAAK,wCAGrBhC,QAAQi7H,GAAerkI,UACtB/B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,OAAMC,SAAA,EACnBC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uCAAuCuW,IAAKtJ,EAAK8kB,MAAQ,YAAShvB,EAAU9C,SACvFgN,EAAK,wBAEPi5H,EAAcvyH,IAAK5T,IAEhBG,EAAAA,GAAAA,GAAC+lI,GAAqB,CACpBv5H,OAAQi0H,EACR/wE,QAAS7vD,EACTkO,QAASs4H,QAMlBt7H,QAAQ81H,EAAcl/H,UACrB/B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,OAAMC,SAAA,EACnBC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uCAAuCuW,IAAKtJ,EAAK8kB,MAAQ,YAAShvB,EAAU9C,SACvFgN,EAAK,oBAEP8zH,EAAcptH,IAhEzB,SAA4B7S,GAC1B,MAAMkU,GAAO2vH,EAAAA,EAAAA,GAAqB13H,EAAMnM,GAClCsO,EAAO+9C,EAAUrsD,EAAQ4L,QAE/B,GAAKsI,GAAS5F,EAId,OACElP,EAAAA,GAAAA,GAAC+kI,GAAW,CACVv4H,OAAQ5L,EAAQ4L,OAChB5L,QAASA,EACTijC,YAAaA,GAGnB,c,4BCnFF,MAkFA,IAAellC,EAAAA,EAAAA,IAlFiC4nI,EAC9CC,gBACAvkC,0BAEA,MAAMhuF,GAAM5K,EAAAA,EAAAA,OACN,eAAE6sB,EAAc,cAAEuwG,EAAa,SAAE93F,IAAa3iC,EAAAA,EAAAA,MAC9Ce,GAAOyqC,EAAAA,GAAAA,MAEP,OACJ5rC,EAAM,SAAEyvB,EAAQ,eAAE+hF,EAAc,YAAEC,GAChCmpB,GAEJE,EAAAA,GAAAA,IAAezyH,EAAKguF,EAAsBnB,IACR,IAA5BA,EAAM6lC,mBACRF,EAAc,CAAEprG,eAIpB,MAAM9W,GAAchY,EAAAA,EAAAA,GAAgB,KAClC2pB,EAAe,CAAEmF,aACjBsT,EAAS,CAAE9uC,GAAI+L,OAGX,kBACJmqE,EAAiB,kBAAEC,EAAiB,wBACpCyvB,EAAuB,kBAAExvB,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBniE,IAGzBsQ,YAAaqiH,EACb33F,gBAAiB43F,IACf33F,EAAAA,GAAAA,GAAcriC,IAChBA,EAAEuJ,kBACF6/D,EAAkBppE,KAGdg1H,EAAYiC,GAAmBv/G,GAErC,OACE3kB,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtuB,IAAKA,EACLnU,UAAU,oCACViO,QAASwW,EACT8qB,YAAao2D,EACbz/E,cAAeiwD,EACf4rD,UAAWA,EAAU9hI,SAAA,EAEpB2O,EAAAA,EAAAA,IAAS9C,IACR5L,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CACdloB,OAAQjyB,EACR02H,cAAY,EACZ5F,WAAW,YAGb18H,EAAAA,GAAAA,GAACkmD,GAAAA,EAAa,CACZ15C,OAAQZ,EACR02H,cAAY,EACZ5F,WAAW,YAGf98H,EAAAA,GAAAA,IAACknI,GAAAA,EAAW,CAAChnI,UAAU,yBAAyBuvC,YAAaw3F,EAAsB94H,QAAS64H,EAAiB7mI,SAAA,CAC1GgN,EAAK,uBACN/M,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,YAEZyoE,IACCh2E,EAAAA,GAAAA,GAAC89G,GAAAA,EAAoC,CACnCnyG,OAAQoqE,EACRgH,OAAQ/G,EACR+nC,WAAY9pG,EACZonB,SAAUA,EACV+hF,eAAgBA,EAChBD,WAAS,EACTE,YAAaA,EACbxxG,QAASqqE,EACTpqE,oBAAqBqqE,SClEzBhV,IAAerrD,EAAAA,GAAAA,IAAUsrD,GAAOA,IAAM,KAAO,GA8FnD,IAAeziE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAQ2kC,QAAS+gG,GAAe1lI,EAAO2lI,SACjC5hG,EAAY/jC,EAAOqlC,MAAMC,MACzB,qBAAEsgG,GAAyB5lI,EAEjC,MAAO,CACL0lI,aACA3hG,YACA6hG,yBATct4H,CA5F8Bu4H,EAChDH,aACA3hG,YACA6hG,uBACAzkE,cAEA,MAAM,aACJ2kE,EAAY,SAAEx4F,EAAQ,uBACtBy4F,EAAsB,wBAAEC,IACtBr7H,EAAAA,EAAAA,MAEEs7H,GAAcj+H,EAAAA,EAAAA,OAIpBkB,EAAAA,EAAAA,IAAU,KACR42D,GAAa,KACXgmE,OAED,CAACA,KAEJvpD,EAAAA,GAAAA,GAAoB0pD,GAAcP,GAElC,MAAMxiH,GAAc5kB,EAAAA,EAAAA,IAAaE,IAC/B8uC,EAAS,CAAE9uC,KAAIykI,sBAAsB,IACrC9hE,IACA33D,WAAW,KACTu8H,EAAuB,CAAEvnI,QAhCC,MAkC3B,CAAC8uC,EAAUy4F,EAAwB5kE,IAEhC+kE,GAAgC5nI,EAAAA,EAAAA,IAAY,KAChD0nI,KACC,CAACA,IAEEt6H,GAAOC,EAAAA,EAAAA,KAEb,OACEpN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,+BAA8BC,SAAA,CAC1CgnI,IACC/mI,EAAAA,GAAAA,GAAA,OAAKF,UAAU,oBAAoBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,UACrEC,EAAAA,GAAAA,GAAA,OAAKiU,IAAKqzH,EAAaxnI,UAAU,YAAWC,SACzCgnI,EAAWtzH,IAAKoqB,IACfj+B,EAAAA,GAAAA,IAAA,OAEEE,UAAU,gBACViO,QAASA,IAAMwW,EAAYsZ,GAC3BxnB,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAEpCC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CAACC,KAAMqR,EAAUvH,MACxB79B,EAAAA,GAAAA,GAAA,OAAKF,UAAU,gBAAeC,UAAEi0B,EAAAA,GAAAA,IAAWk+B,EAAAA,EAAAA,IAAuB9sB,EAAUvH,KAtD/E,SAgDQA,QAYdopG,IACCrnI,EAAAA,GAAAA,IAAA,OAAKE,UAAU,sBAAqBC,SAAA,EAClCH,EAAAA,GAAAA,IAAA,MACEE,WAAWqW,EAAAA,GAAAA,GACT,4CACC4wH,GAAc,kBAEjB1wH,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,CAEnCgN,EAAK,WAEN/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,qBACVwS,OAAK,EACLpS,KAAK,UACL2N,MAAM,cACN0E,UAAWxF,EAAK,SAChBgB,QAASw5H,EACT11G,MAAO9kB,EAAK8kB,MAAM9xB,UAElBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,eAGd05H,EAAqBxzH,IAAK5T,IACzBG,EAAAA,GAAAA,GAACqiI,GAAoB,CACnB71H,OAAQ3M,EACR0iI,mBAAiB,EACjBx0H,QAASwW,cC9CjB48C,IAAerrD,EAAAA,GAAAA,IAAUsrD,GAAOA,IAAM,KAAK,GAuajD,IAAeziE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmmI,oBACT,MAAQxhG,QAAShC,GAAe3iC,EAAOolC,aAAe,CAAC,GACjD,cACJrS,EAAa,SAAEosG,GACbn/H,EAEJ,IAAK2iC,EACH,MAAO,CAAC,EAGV,MAAM,eACJu9B,EAAc,cAAEkmE,EAAa,aAAEC,EAAY,cAAEhyG,EAAa,cAAE8wG,IAC1Dz3H,EAAAA,EAAAA,KAAe1N,GAAQggE,cACnBngB,QAASymF,GAAkBF,GAAiB,CAAC,GAC7CvmF,QAAS0mF,GAAmBF,GAAgB,CAAC,GAC7CpH,SAAUC,GAA2BC,EACvCjrG,EAAWG,IAAgB8xG,EAAgB,WAAa,SAASjyG,UACjE,kBAAEsyG,IAAsBC,EAAAA,EAAAA,KAAwBzmI,EAAQ0mI,EAAAA,MAAiC,CAAC,EAEhG,MAAO,CACL3zG,gBACA4P,aACA4jG,iBACAD,gBACApyG,WACAgrG,yBACAh/D,iBACAilE,gBACAwB,oBAAqBH,IA7BPl5H,CAra2Bs5H,EAC7CT,gBACA3jG,cACA2hG,aACAU,kBACA9xG,gBACA4P,aACA4jG,iBACAD,gBACApyG,WACAgrG,yBACAh/D,iBACAymE,sBACAxB,gBACAhkE,UACA2jE,yBAEA,MAAM,SACJx3F,EAAQ,uBAAEy4F,EAAsB,qBAAEzG,EAAoB,sBACtDuH,EAAqB,2BAAEC,IACrBn8H,EAAAA,EAAAA,MAEEsd,GAAejgB,EAAAA,EAAAA,MACf++H,GAAmB/+H,EAAAA,EAAAA,MAEnB0D,GAAOyqC,EAAAA,GAAAA,MAEP,SAAEp4C,IAAaC,EAAAA,EAAAA,OACdgpI,EAAqBC,IAA0Bn8H,EAAAA,EAAAA,KAAkB,IACjEo8H,EAAsBC,IAA2Br8H,EAAAA,EAAAA,KAAkB,IACnEs8H,EAAeC,IAAoBv8H,EAAAA,EAAAA,IAAkC,OACtE8H,GAAM5K,EAAAA,EAAAA,OAEZ6K,EAAAA,GAAAA,GAAc,KACRszH,GAAeW,EAA2B,CAAC,KAGjD,MAAMlgF,GAAiBtoD,EAAAA,EAAAA,IAAY,EAAG4sB,gBAChCA,IAAc21C,EAAAA,GAAkBC,WAClChB,GAAa,KACXw/D,EAAqB,CACnBz/H,KAAMsmI,EAAgB,WAAa,OACnCmB,QAASF,OAKd,CAAC5kG,EAAa4kG,IAEXpE,GAAkB1kI,EAAAA,EAAAA,IACrBE,IACC8uC,EAAS,CAAE9uC,KAAIykI,sBAAsB,IAEjCzkI,IAAOu0B,GACTgzG,EAAuB,CAAEvnI,OAGtBT,GACHojE,KAGJ,CAAC7zB,EAAUva,EAAeh1B,EAAUgoI,EAAwB5kE,IAGxDomE,GAAwBjpI,EAAAA,EAAAA,IAAaE,IACzCqoI,EAAsB,CAAEroI,QACvB,CAACqoI,IAEJ,SAASW,EAAwBF,GAC/B,OAAgC57H,EAAhB,UAAZ47H,EAAiC,4BACrB,WAAZA,EAAkC,0BACtB,aAAZA,EAAoC,wBAC5B,wBACd,CAEA,MAAM,kBACJ5yD,EAAiB,kBAAEC,EAAiB,kBAAEC,EAAiB,uBACvDC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBniE,GAErB4hE,GAAiBtpE,EAAAA,EAAAA,GAAgB,IAAM0H,EAAIzK,SAC3CssE,GAAiBvpE,EAAAA,EAAAA,GAAgB,IAAM0H,EAAIzK,QAASnF,cAAc,oCAClEuxE,GAAoBrpE,EAAAA,EAAAA,GAAgB,IAAM0H,EAAIzK,QAASnF,cAAc,iBAErEykI,GAAqBv8H,EAAAA,EAAAA,GAAiBM,IAC1CopE,EAAkBppE,KAGdk8H,GAAuB5yH,EAAAA,GAAAA,GAAe,OAAQ,mBAqD9CuxH,IAAe3/H,EAAAA,EAAAA,IAAQ,KAC3B,IAAKy/H,KAAmB3jG,GAAgBA,EAAYmlG,WAAW,MAAQnlG,EAAYliC,OAAS,GAC1F,OAAO4iC,GAAAA,EAIT,MAAM0oB,GAAY/gB,EAAAA,EAAAA,MAAYghB,MAAMvmB,KAG9BsiG,IADiBC,EAAAA,GAAAA,IAAcC,EAAAA,MAAkB,IAChBxrG,OAAQ99B,IAC7C,IAAK2nI,EAAe,OAAO,EAC3B,MAAMt4H,EAAO+9C,EAAUptD,GACvB,OAAOqP,IAAQukB,EAAAA,EAAAA,IAAcvkB,KAEzBk6H,GAAellG,EAAAA,GAAAA,IAAmB,CAAEC,IAAK8kG,EAAiB7kG,MAAOP,EAAa3iC,KAAM,SAE1F,GAAIsmI,EAAe,OAAO4B,EAE1B,MAAMC,EAAmB,IACnBj1G,EAAgB,CAACA,GAAiB,MAClC4P,GAAc,IAOdslG,EAAe,KAJGplG,EAAAA,GAAAA,IAAmB,CACzCC,IAAKklG,EAAkBjlG,MAAOP,EAAa3iC,KAAM,YAK9CkoI,GAGL,OAAOnlG,EAAAA,GAAAA,IAAO,KACTgtB,EAAAA,GAAAA,GAAYq4E,OAAczmI,EAAWuxB,EAAgB,CAACA,QAAiBvxB,OACvEouD,EAAAA,GAAAA,GAAY22E,GAAkB,OAElC,CAAC/jG,EAAazP,EAAe4P,EAAY4jG,EAAgBJ,KAE5D5pD,EAAAA,GAAAA,GAAoBwqD,GAAmBV,GAAa/lI,QAAU6lI,GAAe,GAE7E,MAAMC,IAAgB1/H,EAAAA,EAAAA,IAAQ,KAC5B,IAAK87B,GAAeA,EAAYliC,OA5LO,IA4LyCgmI,EAC9E,OAAOpjG,GAAAA,EAIT,MAAM0oB,GAAY/gB,EAAAA,EAAAA,MAAYghB,MAAMvmB,KAE9B4iG,EAAc5B,EAAchqG,OAAQ99B,IACxC,IAAK2nI,EAAe,OAAO,EAC3B,MAAMt4H,EAAO+9C,EAAUptD,GACvB,OAAOqP,IAAQukB,EAAAA,EAAAA,IAAcvkB,KAG/B,OAAO+hD,EAAAA,GAAAA,GAAYs4E,GAAa,IAC/B,CAAC5B,EAAeH,EAAe3jG,IAE5Bg9F,IAAgB94H,EAAAA,EAAAA,IAAQ,KAC5B,IAAM87B,IAAgB2hG,IAAgBjwG,GAAgC,IAApBA,EAAS5zB,OACzD,OAAO4iC,GAAAA,EAIT,MAAM0oB,GAAY/gB,EAAAA,EAAAA,MAAYghB,MAAMvmB,KAEpC,OAAOpR,EACJ9hB,IAAK5T,IACJ,MAAO2M,EAAQiM,IAAaqoH,EAAAA,GAAAA,GAAqBjhI,GAC3CqP,EAAO+9C,EAAUzgD,GACvB,GAAK0C,KACDs4H,IAAkB/zG,EAAAA,EAAAA,IAAcvkB,IAEpC,OAAOqxH,IAAyB/zH,IAASm6B,KAAKluB,KAE/CklB,OAAO5yB,UACT,CAAC84B,EAAa2hG,EAAYjwG,EAAUiyG,EAAejH,KAEtDh2H,EAAAA,EAAAA,IAAU,KACHs5B,GACL88F,EAAqB,CACnBz/H,KAAMsmI,EAAgB,WAAa,OACnCmB,QAASF,EACTe,0BAA0B,EAC1BC,mCAAmC,KAGpC,CAAChB,IAEJ,MAAMiB,IAA2B/pI,EAAAA,EAAAA,IAAY,KAC3C2oI,GAAwBD,IACvB,CAACA,IAEEsB,IAA4BhqI,EAAAA,EAAAA,IAAY,KAC5C6oI,GAAyBD,IACxB,CAACA,IAqBEqB,GAAiB/I,GAEjByF,GAAiC,QAAlBmC,GAA2BlnE,IAAmBA,EAAerU,QAAUqU,EAAei/D,WACrGkH,GAAa/lI,SAAW8lI,GAAc9lI,SAAWioI,GAAejoI,OAChEkoI,GAAqBtoE,GAAgBi/D,SAErCsJ,IAAwBjmG,IAAgB2hG,IAAegC,GAEvD,QAAEnnC,KAAYM,EAAAA,GAAAA,IAAwB,CAC1CC,QAASt3E,EACTg4E,WA9Q0B,IA+Q1Br3F,YAAa6/H,KAGf,GAAIA,GACF,OAAO9pI,EAAAA,GAAAA,GAACknI,GAAc,CAAC1kE,QAASA,IAGlC,MAAMunE,GAAgD,QAAlBtB,GAA0B19H,QAAQ6+H,GAAejoI,QAErF,OACE/B,EAAAA,GAAAA,IAACspD,GAAAA,EAAc,CACbj1C,IAAKqV,EACLxpB,UAAU,oCACVqpD,MAAOygF,GACPxgF,WAAYnB,EAEZ+hF,sBAAoB,EACpB1nE,YAAU,EAAAviE,SAAA,CAETmmI,IACClmI,EAAAA,GAAAA,GAAA,OAAKF,UAAU,8BAA6BC,UAC1CC,EAAAA,GAAAA,GAACulI,GAAW,CACVC,WAAYU,EACZtiG,SAAUuiG,MAIfG,KACCtmI,EAAAA,GAAAA,GAACkhI,GAAAA,EAAY,CACXC,aAAW,EACXrsH,KAAM/H,EAAK,2BACXX,YAAaW,EAAK,wCAGrBhC,QAAQ28H,GAAa/lI,UAAY6lI,IAChCxnI,EAAAA,GAAAA,GAAA,OACEF,UAAU,8BACVuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAC1BoR,IAAKm0H,EAAiBroI,SAErB2nI,GAAaj0H,IAAK5T,IACjBG,EAAAA,GAAAA,GAACizG,GAAAA,EAAQ,CACPrnG,OAAQ/L,EACRC,UAAU,+BACViO,QAAS66H,EACTlkC,SAAU7kG,OAKjBkL,QAAQ28H,GAAa/lI,UACpB/B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,MAAIE,UAAU,kBAAkBuW,IAAKtJ,EAAK8kB,MAAQ,YAAShvB,EAAU9C,SAAA,CAClE2nI,GAAa/lI,OArUK,IAsUjB3B,EAAAA,GAAAA,GAACi+F,GAAAA,EAAI,CAACn+F,UAAU,OAAOiO,QAAS27H,GAAyB3pI,SACtDgN,EAAKs7H,EAAsB,yBAA2B,4BAG1Dt7H,EAAKy6H,EAAgB,yBAA2B,qCAElDE,GAAaj0H,IAAI,CAAC5T,EAAI2E,KACrB,GAAK6jI,KAAuB7jI,GA7UT,GAiVnB,OACExE,EAAAA,GAAAA,GAACqiI,GAAoB,CACnBE,mBAAiB,EACjB/1H,OAAQ3M,EACRkO,QAASs2H,SAMlBt5H,QAAQ08H,GAAc9lI,UACrB/B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,MAAIE,UAAU,kBAAkBuW,IAAKtJ,EAAK8kB,MAAQ,YAAShvB,EAAU9C,SAAA,CAClE0nI,GAAc9lI,OA9VI,IA+VjB3B,EAAAA,GAAAA,GAACi+F,GAAAA,EAAI,CAACn+F,UAAU,OAAOiO,QAAS47H,GAA0B5pI,SACvDgN,EAAKw7H,EAAuB,yBAA2B,4BAG3Dx7H,EAAK,oCAEPy5H,IACCxmI,EAAAA,GAAAA,GAACumI,GAAyB,CAACC,cAAeA,EAAevkC,oBAAqB5B,KAE/EonC,GAAch0H,IAAI,CAAC5T,EAAI2E,KACtB,GAAK+jI,KAAwB/jI,GAzWV,GA6WnB,OACExE,EAAAA,GAAAA,GAACqiI,GAAoB,CACnB71H,OAAQ3M,EACRyiI,cAAY,EACZv0H,QAASs2H,SAMlBt5H,QAAQi9H,GAAqBrmI,UAAYkiC,IACxCjkC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAkBuW,IAAKtJ,EAAK8kB,MAAQ,YAAShvB,EAAU9C,SAClEgN,EAAK,qCAEPi7H,EAAoBv0H,IAAK5T,IAEtBG,EAAAA,GAAAA,GAACqiI,GAAoB,CACnB71H,OAAQ3M,EACRyiI,cAAY,EACZv0H,QAASs2H,SAMnBzkI,EAAAA,GAAAA,IAAA,OAAKE,UAAU,YAAYmU,IAAKA,EAAIlU,SAAA,EAtSpCC,EAAAA,GAAAA,GAAC+f,GAAAA,EAAI,CACHpU,OAAQoqE,EACRgH,OAAQ/G,EACRJ,kBAAmBA,EACnBC,eAAgBA,EAChBC,eAAgBA,EAChBh2E,UAAU,yBACV+L,QAASqqE,EACTpqE,oBAAqBqqE,EACrBl2D,WAAS,EAAAlgB,UAETH,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAwB,QAAlBw1H,EAA0B,aAAU5lI,EAC1ConI,WAA8B,QAAlBxB,GAA0BzoI,EAAAA,GAAAA,GAAA,KAAGF,UAAWipI,SAA2BlmI,EAE/EkL,QAASA,IAAM26H,EAAiB,OAAO3oI,SAEtC8oI,EAAwB,UAE3B7oI,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAwB,UAAlBw1H,EAA4B,aAAU5lI,EAC5ConI,WAA8B,UAAlBxB,GAA4BzoI,EAAAA,GAAAA,GAAA,KAAGF,UAAWipI,SAA2BlmI,EAEjFkL,QAASA,IAAM26H,EAAiB,SAAS3oI,SAExC8oI,EAAwB,YAE3B7oI,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAwB,WAAlBw1H,EAA6B,aAAU5lI,EAC7ConI,WAA8B,WAAlBxB,GAA6BzoI,EAAAA,GAAAA,GAAA,KAAGF,UAAWipI,SAA2BlmI,EAElFkL,QAASA,IAAM26H,EAAiB,UAAU3oI,SAEzC8oI,EAAwB,aAE3B7oI,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAwB,aAAlBw1H,EAA+B,aAAU5lI,EAC/ConI,WAA8B,aAAlBxB,GAA+BzoI,EAAAA,GAAAA,GAAA,KAAGF,UAAWipI,SAA2BlmI,EAEpFkL,QAASA,IAAM26H,EAAiB,YAAY3oI,SAE3C8oI,EAAwB,mBA8P5BkB,KACCnqI,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,MAAIE,UAAU,kBAAkBuW,IAAKtJ,EAAK8kB,MAAQ,YAAShvB,EAAU9C,SAAA,EACjEynI,IACA5nI,EAAAA,GAAAA,IAACq+F,GAAAA,EAAI,CAACn+F,UAAU,gCAAgCiO,QAAS+6H,EAAmB/oI,SAAA,CACzEgN,EAAK,uBAAwB,CAC5B7L,KAAM2nI,EAAwBJ,IAC7B,CACD/pF,WAAW,KAGb9+C,EAAAA,GAAAA,IAACq9B,GAAAA,GAAU,CACT1vB,KAAK,OACL0jG,eAAa,EACb/zE,UAAW5X,OAAOukH,IAClB/pI,UAAU,gBACV6oC,eAAe,qBAAoB5oC,SAAA,CAElC8pI,KAAuB7pI,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,KAC9Bo6E,KAAsB7pI,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,eAIxCR,EAAK,qBAEP68H,GAAen2H,IAhL1B,SAA4B7S,GAC1B,MAAMqsD,GAAY/gB,EAAAA,EAAAA,MAAYghB,MAAMvmB,KAE9B7xB,GAAO2vH,EAAAA,EAAAA,GAAqB13H,EAAMnM,GAClCsO,EAAO+9C,EAAUrsD,EAAQ4L,QAE/B,GAAKsI,GAAS5F,EAId,OACElP,EAAAA,GAAAA,GAAC+kI,GAAW,CACVv4H,OAAQ5L,EAAQ4L,OAChB5L,QAASA,EACTijC,YAAaA,GAGnB,e,gBC3SF,MAAMqmG,GAAe,YAGf/oE,IAAerrD,EAAAA,GAAAA,IAAUsrD,GAAOA,IAAM,KAAK,GA0HjD,IAAeziE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClBwxH,GAAsB+J,IADJv7H,CAxH2Bw7H,EAC7CtmG,cACAlP,YACAs4B,YACA7nB,YACAm7F,yBACAhrG,WACA9lB,kBACA4kH,2BAEA,MAAM,qBACJsM,EAAoB,aACpBpuG,IACEvmB,EAAAA,EAAAA,MAEEsd,GAAejgB,EAAAA,EAAAA,MAEf0D,GAAOC,EAAAA,EAAAA,MAELqzF,QAAS+pC,IAAgCzpC,EAAAA,GAAAA,IAAwB,CACvEC,QAASt3E,EACTg4E,WAzB0B,MA4BtBr5C,GAAiBtoD,EAAAA,EAAAA,IAAY,EAAG4sB,gBAChCA,IAAc21C,EAAAA,GAAkBC,WAClChB,GAAa,KACXw/D,EAAqB,CACnBz/H,KAAMgpI,QAKX,CAACrmG,IAEEg9F,GAAgB94H,EAAAA,EAAAA,IAAQ,IACvBwtB,GAAagrG,EAIXhrG,EAAS9hB,IAAK5T,IACnB,MAAO2M,EAAQiM,IAAaqoH,EAAAA,GAAAA,GAAqBjhI,GAC3Ce,EAAU2/H,EAAuB/zH,IAASm6B,KAAKluB,GAErD,OAAO7X,IAAWypI,EAAAA,EAAAA,IAAmBzpI,GAAWA,OAAUiC,IACzD86B,OAAO5yB,SARDw5B,GAAAA,EASR,CAACg8F,EAAwBhrG,IAEtBwrG,GAAqBphI,EAAAA,EAAAA,IAAaiB,IACtC2xB,EAAa,CAAE/lB,OAAQ5L,EAAQ4L,OAAQiM,UAAW7X,EAAQf,MACzD,CAAC0yB,IAwCE0uG,GAAoBvwB,EAAAA,GAAAA,GAAkB,CAAC7sE,GAAci8D,EAAAA,OAA+BnrE,EAE1F,OACE30B,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACThpB,IAAKqV,EACLqf,eAAe,sBACfp7B,KAAK,OACL2vB,UAAW+jG,EAAoB,EAAI,EACnChwB,eAAa,EAAAlxG,UAEbH,EAAAA,GAAAA,IAACspD,GAAAA,EAAc,CACbppD,UAAU,8CACVqpD,MAAO83E,EAAoBJ,OAAgBh+H,EAC3CumD,WAAYnB,EACZqa,YAAU,EAAAviE,SAAA,EAERkhI,IAAqBjhI,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,IAC9BwxE,KAAuB1rG,GAAgC,IAApBA,EAAS5zB,UAC3C3B,EAAAA,GAAAA,GAACkhI,GAAAA,EAAY,CACXC,aAAW,EACXrsH,KAAM/H,EAAK,6BACXX,YAAaW,EAAK,0CAGrBk0H,GAAqB1rG,GAAYA,EAAS5zB,OAAS,GA7DjDk/H,EAAcptH,IAAI,CAAC7S,EAAS4D,KACjC,MACM48H,EADoB,IAAV58H,IAEX68H,EAAAA,GAAAA,IAAYzgI,EAAQqyB,SAAUouG,EAAAA,GAAAA,IAAYR,EAAcr8H,EAAQ,GAAGyuB,MACxE,OACErzB,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,CACGqhI,IACCphI,EAAAA,GAAAA,GAAA,KACEF,UAAU,kBACVuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,UAGnCwhI,EAAAA,GAAAA,IAAmBx0H,EAAM,IAAImf,KAAoB,IAAftrB,EAAQqyB,QAFtCryB,EAAQqyB,OAKjBjzB,EAAAA,GAAAA,GAAA,OACEF,UAAU,sBAAqBC,UAG/BC,EAAAA,GAAAA,GAACsqI,GAAAA,EAAQ,CACPvoI,UAAUsoI,EAAAA,EAAAA,IAAmBzpI,GAC7BA,QAASA,EACT2pI,SAAU3pI,EAAQqyB,KAClBu3G,SAAO,EACPl8F,QAAQqzF,EAAAA,GAAAA,GAAc50H,EAAMnM,EAASqsD,EAAW7nB,GAChDtlC,UAAU,cACV2R,eAAeC,EAAAA,EAAAA,IAAiBjC,EAAiB7O,EAAQmS,QAAQhR,UACjEsyH,qBAAsBA,EACtBpyB,oBAAqBmoC,EACrBxI,YAAab,KAZVngI,EAAQf,iB,gBC5EzB,MAAMqqI,GAAe,QAGf/oE,IAAerrD,EAAAA,GAAAA,IAAUsrD,GAAOA,IAAM,KAAK,GAqHjD,IAAeziE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClBwxH,GAAsB+J,IADJv7H,CAnH2B87H,EAC7C5mG,cACAlP,YACAs4B,YACA7nB,YACAm7F,yBACAhrG,WACA5lB,sBAEA,MAAM,qBACJgxH,EAAoB,aACpBpuG,IACEvmB,EAAAA,EAAAA,MAEEsd,GAAejgB,EAAAA,EAAAA,MAEf0D,GAAOC,EAAAA,EAAAA,MAELqzF,QAAS+pC,IAAgCzpC,EAAAA,GAAAA,IAAwB,CACvEC,QAASt3E,EACTg4E,WAxB0B,MA2BtBr5C,GAAiBtoD,EAAAA,EAAAA,IAAY,EAAG4sB,gBAChCA,IAAc21C,EAAAA,GAAkBC,WAClChB,GAAa,KACXw/D,EAAqB,CACnBz/H,KAAMgpI,QAKX,CAACrmG,IAEEg9F,GAAgB94H,EAAAA,EAAAA,IAAQ,IACvBwtB,GAAagrG,EAIXhrG,EAAS9hB,IAAK5T,IACnB,MAAO2M,EAAQiM,IAAaqoH,EAAAA,GAAAA,GAAqBjhI,GAEjD,OAAO0gI,EAAuB/zH,IAASm6B,KAAKluB,KAC3CklB,OAAO5yB,SAPDw5B,GAAAA,EAQR,CAACg8F,EAAwBhrG,IAEtBwrG,GAAqBphI,EAAAA,EAAAA,IAAaiB,IACtC2xB,EAAa,CAAE/lB,OAAQ5L,EAAQ4L,OAAQiM,UAAW7X,EAAQf,MACzD,CAAC0yB,IAqCE0uG,GAAoBvwB,EAAAA,GAAAA,GAAkB,CAAC7sE,GAAci8D,EAAAA,OAA+BnrE,EAE1F,OACE30B,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACThpB,IAAKqV,EACLqf,eAAe,sBACfp7B,KAAK,OACL2vB,UAAW+jG,EAAoB,EAAI,EACnChwB,eAAa,EAAAlxG,UAEbH,EAAAA,GAAAA,IAACspD,GAAAA,EAAc,CACbppD,UAAU,8CACVqpD,MAAO83E,EAAoBJ,OAAgBh+H,EAC3CumD,WAAYnB,EACZqa,YAAU,EAAAviE,SAAA,EAERkhI,IAAqBjhI,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,IAC9BwxE,KAAuB1rG,GAAgC,IAApBA,EAAS5zB,UAC3C3B,EAAAA,GAAAA,GAACkhI,GAAAA,EAAY,CACXC,aAAW,EACXrsH,KAAM/H,EAAK,6BACXX,YAAaW,EAAK,0CAGrBk0H,GAAqB1rG,GAAYA,EAAS5zB,OAAS,GA1DjDk/H,EAAcptH,IAAI,CAAC7S,EAAS4D,KACjC,MACM48H,EADoB,IAAV58H,IAEX68H,EAAAA,GAAAA,IAAYzgI,EAAQqyB,SAAUouG,EAAAA,GAAAA,IAAYR,EAAcr8H,EAAQ,GAAGyuB,MACxE,OACErzB,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,CACGqhI,IACCphI,EAAAA,GAAAA,GAAA,KACEF,UAAU,kBAEVuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,UAEnCwhI,EAAAA,GAAAA,IAAmBx0H,EAAM,IAAImf,KAAoB,IAAftrB,EAAQqyB,QAHtCryB,EAAQqyB,OAMjBjzB,EAAAA,GAAAA,GAAA,OACEF,UAAU,sBACVuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,UAGpCC,EAAAA,GAAAA,GAAC0qI,GAAAA,EAAO,CAEN9pI,QAASA,EACTgzB,aAAa+tG,EAAAA,GAAAA,GAAc50H,EAAMnM,EAASqsD,EAAW7nB,GACrD71B,YAAaI,GAAmB/O,EAAQ2O,YACxC0yF,oBAAqBmoC,EACrBO,eAAgB5J,GALXngI,EAAQf,KAHVe,EAAQf,iB,gBC3EzB,MAAMqqI,GAAe,QAGf/oE,IAAerrD,EAAAA,GAAAA,IAAUsrD,GAAOA,IAAM,KAAK,GAwHjD,IAAeziE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClBwxH,GAAsB+J,IADJv7H,CAtH4Bi8H,EAC9C/mG,cACAlP,YACA4rG,yBACAhrG,WACA5lB,sBAEA,MAAM,qBACJgxH,EAAoB,gBACpBvvH,IACEpF,EAAAA,EAAAA,MAEEsd,GAAejgB,EAAAA,EAAAA,MAEf0D,GAAOC,EAAAA,EAAAA,MAELqzF,QAAS+pC,IAAgCzpC,EAAAA,GAAAA,IAAwB,CACvEC,QAASt3E,EACTg4E,WAtB0B,MAyBtBr5C,GAAiBtoD,EAAAA,EAAAA,IAAY,EAAG4sB,gBAChCA,IAAc21C,EAAAA,GAAkBC,WAClChB,GAAa,KACXw/D,EAAqB,CACnBz/H,KAAMgpI,QAKX,CAACvJ,EAAsB98F,IAEpBg9F,GAAgB94H,EAAAA,EAAAA,IAAQ,IACvBwtB,GAAagrG,EAIXhrG,EAAS9hB,IAAK5T,IACnB,MAAO2M,EAAQiM,IAAaqoH,EAAAA,GAAAA,GAAqBjhI,GAEjD,OAAO0gI,EAAuB/zH,IAASm6B,KAAKluB,KAC3CklB,OAAO5yB,SAPDw5B,GAAAA,EAQR,CAACg8F,EAAwBhrG,IAEtBs1G,GAAoBlrI,EAAAA,EAAAA,IAAY,CAACE,EAAY2M,KACjD4E,EAAgB,CACd5E,SACAiM,UAAW5Y,EACXyB,OAAQ2B,EAAAA,GAAkB8B,gBAE3B,CAACqM,IA6BE6vH,GAAoBvwB,EAAAA,GAAAA,GAAkB,CAAC7sE,GAAci8D,EAAAA,OAA+BnrE,EACpFm2G,EAAc7J,GAAqB1rG,GAAYA,EAAS5zB,OAAS,IAAMkiC,EACvEknG,EAAgB9J,GAAqB1rG,GAAYA,EAAS5zB,OAAS,GAAKkiC,EAExE3tB,GAAaC,EAAAA,GAAAA,GACjB,+BACA40H,GAAiB,aAGnB,OACE/qI,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACThpB,IAAKqV,EACLqf,eAAe,wCACfp7B,KAAK,OACL2vB,UAAW+jG,EAAoB,EAAI,EACnChwB,eAAa,EAAAlxG,UAEbH,EAAAA,GAAAA,IAACspD,GAAAA,EAAc,CACbppD,UAAWoW,EACXizC,MAAO83E,EAAoBJ,OAAgBh+H,EAC3CgtD,aAAehsB,EAAyB,YAAX,SAC7BulB,WAAYnB,EACZqa,YAAU,EAAAviE,SAAA,EAERkhI,IAAqBjhI,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,IAC9BwxE,KAAuB1rG,GAAgC,IAApBA,EAAS5zB,UAC3C3B,EAAAA,GAAAA,GAACkhI,GAAAA,EAAY,CACXC,aAAW,EACXrsH,KAAM/H,EAAK,6BACXX,YAAaW,EAAK,0CAGrB+9H,IAzDH9qI,EAAAA,GAAAA,GAAA,OAAKF,UAAU,aAAauW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAC7D8gI,EAAcptH,IAAK7S,IAClBZ,EAAAA,GAAAA,GAACgrI,GAAAA,EAAK,CAEJ/qC,SAAS,eACTr/F,QAASA,EACT2O,YAAaI,GAAmB/O,EAAQ2O,YACxC0yF,oBAAqBmoC,EACrBr8H,QAAS88H,GALJ,GAAGjqI,EAAQ4L,UAAU5L,EAAQf,SAuDrCkrI,GA1CElK,EAAcptH,IAAK7S,IACxBZ,EAAAA,GAAAA,GAAC+kI,GAAW,CAEVv4H,OAAQ5L,EAAQ4L,OAChB5L,QAASA,GAFJA,EAAQf,a,cC3GrB,UAAgB,UAAY,WAAW,QAAU,WAAW,cAAgB,WAAW,oBAAsB,WAAW,QAAU,WAAW,MAAQ,WAAW,YAAc,WAAW,aAAe,WAAW,kBAAoB,WAAW,WAAa,WAAW,mBAAqB,WAAW,YAAc,WAAW,WAAa,WAAW,iBAAmB,WAAW,iBAAmB,WAAW,iBAAmB,WAAW,aAAe,WAAW,mBAAqB,WAAW,uBAAyB,WAAW,gBAAkB,YC+QriB,IAAelB,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAsBtN,IAAM,CAC9Cw+B,sBAAsB0B,EAAAA,EAAAA,KAA2BlgC,GACjD+iH,aAAc/iH,EAAO+5F,OAAOipB,SAAS9lE,QAAU,IAF7B5vC,CAtOcs8H,EAChCpnG,cACAqnG,cACAC,WACAx2G,YACAkL,uBACAukF,mBAEA,MAAMr3G,GAAOyqC,EAAAA,GAAAA,KACP4zF,EAAcF,GAAaE,YAC3BC,EAAiBH,GAAa9mG,MAE9BknG,GAAwBC,EAAAA,GAAAA,GAAuB,CAAC1nG,GAAakK,MAAM,EAAG,IAAIy9F,YAE1EC,GAAoBl/H,EAAAA,EAAAA,GAAgB,KACxC4+H,OAGF5gI,EAAAA,EAAAA,IAAU,KACJ6gI,GAAevnG,GAAewnG,IAAmBxnG,GACnDsnG,KAED,CAACC,EAAavnG,EAAawnG,EAAgBF,IAE9C,MAAMO,GAAwBn/H,EAAAA,EAAAA,GAAgB,KAC5C,MAAMo/H,EAAcT,GAAaS,aAAe,EACzBvnB,EAEFunB,EACnBnkB,EAAsB,CACpBwB,MAAO,CACLC,cAAe0iB,KAInBR,OAIE,sBACJS,EAAqB,iBACrBhqG,EAAgB,sBAChB4lF,IACEx7G,EAAAA,EAAAA,MAEE6/H,GAAet/H,EAAAA,EAAAA,GAAgB,KACnCq/H,EAAsB,CAAC,KAGnBE,GAA8Bv/H,EAAAA,EAAAA,GAAgB,KAClDq1B,MAkIIG,GAAaC,EAAAA,GAAAA,MACb+pG,EAAkD,IAAzBb,GAAac,SACtCd,GAAae,UAAYf,EAAYe,SAAWlqG,EAsCtD,OACE/hC,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACT1vB,KAAK,OACL2vB,UA5BG2C,EAGDlL,EACK,EAELo3G,EACK,EAEF,EARE,EA2BmBhsI,SAfvB8/B,EAGDlL,GAzBF30B,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOhY,UAAUzF,UAC/BC,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAOzK,QAASyK,GAAO0uH,eAAensI,UACnEC,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,QA0BVs8E,EAjKqBI,MACzB,MAAMF,EAAWf,GAAae,SACxBN,EAAcT,GAAaS,aAAeS,EAAAA,IAC1CC,EAAanB,GAAamB,YAAcC,EAAAA,IAE9C,OACEtsI,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOhY,UAAUzF,UAC/BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOzK,QAAQhT,SAAA,EAC7BC,EAAAA,GAAAA,GAAC6nG,GAAAA,EAAuB,CACtB/nG,UAAW0d,GAAO4kE,QAClBliF,KAAM,IACNE,OAAQC,GAAAA,EAAeqhI,OACvB6K,WAAYC,GAAAA,EAAuB9K,OACnCnuF,gBAAc,EACd/yC,QAAQ,KAEVR,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOivH,WAAW1sI,SAC/BgN,EAAK,8BAER/M,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOkvH,iBAAiB3sI,SACrCgN,EAAK,6BAA8B,CAAEqmB,MAAOi5G,GAAc,CAAEpsE,YAAaosE,OAE5ErsI,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAW0d,GAAOmvH,iBAClB9+H,MAAM,UACNsS,UAAW0jB,EACX+oG,mBAAiB,EACjB7+H,QAAS29H,EAAsB3rI,SAE9BgN,EAAK,4BAA6B,CACjCquF,OAAO58C,EAAAA,GAAAA,IAAkBzxC,EAAM4+H,EAAa,CAAEltF,QAAQ,KACrD,CAAEC,WAAW,MAEjB3zC,QAAQkhI,KACPjsI,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOqvH,iBAAiB9sI,UACtCC,EAAAA,GAAAA,GAAC6iC,GAAAA,EAAS,CACRC,QAAQ,+BACRC,OAAQkpG,EA5FL,EA6FHjpG,MAAO6oG,YA4HVM,GAnHgBW,MACzB,MAAMC,EAAoB7B,GAAac,SAAW,EAElD,OACEhsI,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOhY,UAAUzF,UAC/BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOzK,QAAQhT,SAAA,EAC7BC,EAAAA,GAAAA,GAAC6nG,GAAAA,EAAuB,CACtB/nG,UAAW0d,GAAO4kE,QAClBliF,KAAM,IACNE,OAAQC,GAAAA,EAAeqhI,OACvB6K,WAAYC,GAAAA,EAAuB9K,OACnCnuF,gBAAc,EACd/yC,QAAQ,KAEVR,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOrQ,MAAMpN,SAC1BgN,EAAK,mBAER/M,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOpR,YAAYrM,SAChCgN,EAAK,mCAER/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAW0d,GAAOwvH,aAClBn/H,MAAM,UACN++H,mBAAiB,EACjBzsH,UAAW0jB,EACX91B,QAAS09H,EAAkB1rI,UAE3BC,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACT1vB,KAAK,OACL2vB,UAAWouG,EAAsBvrI,UAEjCH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOyvH,oBAAoBltI,SAAA,EACzCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CACHjF,KAAK,SACLzN,WACEqW,EAAAA,GAAAA,GAAeqH,GAAO0vH,WACpBrpG,GAAermB,GAAO2vH,sBAG3BpgI,EAAK,0BAA2B,CAC/Bq3B,MAAOP,GAAc7jC,EAAAA,GAAAA,GAAA,QAAMF,UAAW0d,GAAOqmB,YAAY9jC,SAAE8jC,IAAsB,IAChF,CAAE6a,WAAW,IACf7a,IAAe7jC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,OAAOzN,UAAW0d,GAAO4vH,mBAI1DptI,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOuvH,kBAAkBhtI,SACtCgN,EAAK,6BAA8B,CAAEqmB,MAAO25G,GAAqB,CAAE9sE,YAAa8sE,YAsElFD,IA7DL9sI,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOhY,UAAUzF,UAC/BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOzK,QAAQhT,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAO6vH,aAAattI,SACjCgN,EAAK,mBAER/M,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAO8vH,mBAAmBvtI,SACvCgN,EAAK,2CAER/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAW0d,GAAO+vH,uBAClB1/H,MAAM,UACN++H,mBAAiB,EACjB7+H,QAAS+9H,EAA4B/rI,SAEpCgN,EAAK,oCAER/M,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOgwH,gBAAgBztI,SACpCgN,EAAK,iDChLZo0D,IAAerrD,EAAAA,GAAAA,IAAUsrD,GAAOA,IAAM,KAAK,GA+GjD,IAAeziE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAQm/H,UAAYF,SAAUC,IAA6Bl/H,GACrD,cAAEq0B,EAAa,YAAEw1G,EAAW,eAAE3pE,IAAmBxyD,EAAAA,EAAAA,KAAe1N,GAAQggE,aACxEosE,EAAoB/3G,GAAeg4G,aACnC,SAAEn4G,GAAak4G,GAAqB,CAAC,EACrC94G,EAAY5pB,QAAQw2D,GAAgBmsE,cAAgBD,GACpDE,GAA4BF,IAAsB94G,EAClDi5G,EAAiBH,IAAsBl4G,GAAU5zB,QACjD,eAAEksI,IAAmBt5D,EAAAA,GAAAA,GAAqBlzE,GAEhD,MAAO,CACLk0B,WACAgrG,yBACA2K,cACAyC,2BACAC,iBACAj5G,YACAk5G,mBAlBcl/H,CA7GOm/H,EACzBjqG,cACAtO,WACAgrG,yBACA2K,cACAyC,2BACAC,iBACAj5G,YACAk5G,qBAEA,MAAM,qBAAElN,IAAyB30H,EAAAA,EAAAA,MAE3Be,GAAOyqC,EAAAA,GAAAA,KAEPmnF,GAAepyH,EAAAA,EAAAA,GAAgB,KAC9Bs3B,GAEL88F,EAAqB,CACnBz/H,KAAM,cACNsoI,0BAA0B,MAIxBvhF,GAAiBtoD,EAAAA,EAAAA,IAAY,EAAG4sB,gBAChCA,IAAc21C,EAAAA,GAAkBC,WAClChB,GAAa,KACXw/D,EAAqB,CACnBz/H,KAAM,mBAIX,IAEG2/H,GAAgB94H,EAAAA,EAAAA,IAAQ,IACvBwtB,GAAgC,IAApBA,EAAS5zB,OAInB4zB,EACJ9hB,IAAK5T,IACJ,MAAO2M,EAAQiM,IAAaqoH,EAAAA,GAAAA,GAAqBjhI,GACjD,OAAO0gI,IAAyB/zH,IAASm6B,KAAKluB,KAE/CklB,OAAO5yB,SARDw5B,GAAAA,EASR,CAAChP,EAAUgrG,IAsBd,OACEvgI,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACT1vB,MAAMwgI,EAAAA,GAAAA,GAAsB,iBAAkBF,OAAgBhrI,EAAWkK,EAAK8kB,OAC9EqL,UAAWywG,GAA4Bh5G,EAAY,EAAI,EAAE50B,SAExD4tI,GAA4Bh5G,GAC3B30B,EAAAA,GAAAA,GAACirI,GAAyB,CACxBpnG,YAAaA,EACbqnG,YAAaA,EACbC,SAAUxM,EACVhqG,UAAWA,KAGb30B,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAClCH,EAAAA,GAAAA,IAACspD,GAAAA,EAAc,CAEbppD,UAAU,yCACVqpD,MAAO03E,EACPz3E,WAAYnB,EACZqa,YAAU,EAAAviE,SAAA,CAET6tI,IACC5tI,EAAAA,GAAAA,GAACkhI,GAAAA,EAAY,CACXpsH,KAAM/H,EAAK,2BACXX,YAAaW,EAAK,sCAClBo0H,aAAW,IAGdp2H,QAAQ81H,EAAcl/H,UACrB/B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,OAAMC,SAAA,EACnBC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAkBuW,IAAKtJ,EAAK8kB,MAAQ,YAAShvB,EAAU9C,SAClEgN,EAAK,iBAEP8zH,EAAcptH,IArD7B,SAA4B7S,GAC1B,MAAMqsD,GAAY/gB,EAAAA,EAAAA,MAAYghB,MAAMvmB,KAE9B7xB,GAAO2vH,EAAAA,EAAAA,GAAqB13H,EAAMnM,GAClCsO,EAAO+9C,EAAUrsD,EAAQ4L,QAE/B,GAAKsI,GAAS5F,EAId,OACElP,EAAAA,GAAAA,GAAC+kI,GAAW,CAEVv4H,OAAQ5L,EAAQ4L,OAChB5L,QAASA,EACTijC,YAAaA,GAHR,GAAGjjC,EAAQ4L,UAAU5L,EAAQf,KAMxC,QAiBegkC,UCpEXmqG,GAAkB,CACtB,CAAE9sI,KAAM+sI,EAAAA,GAAoB/vG,SAAUzY,IAAK,kBAC3C,CAAEvkB,KAAM+sI,EAAAA,GAAoBC,YAAazoH,IAAK,qBAC9C,CAAEvkB,KAAM+sI,EAAAA,GAAoBE,QAAS1oH,IAAK,iBAC1C,CAAEvkB,KAAM+sI,EAAAA,GAAoBG,YAAa3oH,IAAK,wBAC9C,CAAEvkB,KAAM+sI,EAAAA,GAAoBjD,MAAOvlH,IAAK,kBACxC,CAAEvkB,KAAM+sI,EAAAA,GAAoBI,MAAO5oH,IAAK,kBACxC,CAAEvkB,KAAM+sI,EAAAA,GAAoBK,MAAO7oH,IAAK,kBACxC,CAAEvkB,KAAM+sI,EAAAA,GAAoBM,MAAO9oH,IAAK,kBACxC,CAAEvkB,KAAM+sI,EAAAA,GAAoBO,MAAO/oH,IAAK,mBAGpCgpH,GAAuB,CAC3B,CAAEvtI,KAAM+sI,EAAAA,GAAoB/vG,SAAUzY,IAAK,wBACxCuoH,GAAKjgG,MAAM,IAkIhB,IAAepvC,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,eAAEqtI,EAAc,OAAEliI,IAAWuC,EAAAA,EAAAA,KAAe1N,GAAQggE,cACpD,eAAEwsE,IAAmBt5D,EAAAA,GAAAA,GAAqBlzE,GAEhD,MAAO,CAAEqtI,iBAAgBliI,SAAQqhI,mBALjBl/H,CA/H0BggI,EAC5C9qG,cACA2hG,aACAhsH,WACAk1H,iBAAiBT,EAAAA,GAAoB/vG,SACrC1xB,SACAqhI,iBACArrE,cAEA,MAAM,uBACJosE,EAAsB,oBACtBC,EAAmB,sBACnBjD,IACE5/H,EAAAA,EAAAA,MAEEe,GAAOyqC,EAAAA,GAAAA,MACNs3F,EAAWC,IAAgB5iI,EAAAA,EAAAA,IAASuiI,GACrCxI,GAAkBn+H,EAAAA,EAAAA,IAAQ,KAAMinI,EAAAA,GAAAA,IAAgBnrG,GAAc,CAACA,KAErEt5B,EAAAA,EAAAA,IAAU,KACJiP,GACFoyH,EAAsB,CAAC,IAExB,CAACpyH,IAEJ,MAAM87D,GAAOvtE,EAAAA,EAAAA,IAAQ,KACPyE,EAASiiI,GAAYT,IACtBv6H,IAAKipE,IAAG,IACdA,EACHvvE,MAAOJ,EAAK2vE,EAAIj3D,QAEjB,CAACjZ,EAAQO,IAENkiI,GAAkB1iI,EAAAA,EAAAA,GAAiB/H,IACvC,MAAMk4E,EAAMpH,EAAK9wE,GACjBoqI,EAAuB,CAAE77H,QAAS2pE,EAAIx7E,OACtC6tI,EAAavqI,KAGT0qI,GAAyB3iI,EAAAA,EAAAA,GAAiBI,IAC9CkiI,EAAoB,CAAE57G,KAAMtmB,EAAMktD,UAAY,SAGhD9uC,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAGV,MAAMl5C,GAAejgB,EAAAA,EAAAA,MACfmc,GAAgBuoC,EAAAA,GAAAA,GAA0BzkC,EAAc9P,OAAU3W,EAAW,oBAAoB,GAEvG,OACEjD,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAamU,IAAKqV,EAAc+lC,UAAW7pC,EAAczlB,SAAA,EACtEC,EAAAA,GAAAA,GAACmvI,GAAAA,EAAO,CAACL,UAAWA,EAAWx5D,KAAMA,EAAM85D,YAAaH,KACxDjvI,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACT1vB,MAAMwgI,EAAAA,GAAAA,GAAsB,iBAAkBF,OAAgBhrI,EAAWkK,EAAK8kB,OAC9Ew9G,YAAa/5D,EAAK3zE,OAClBu7B,UAAWwxG,EAAe3uI,SAEzB,MACC,OAAQ2uI,GACN,KAAKT,EAAAA,GAAoB/vG,SACzB,KAAK+vG,EAAAA,GAAoBC,YACvB,OAAI1hI,GAEAxM,EAAAA,GAAAA,GAACimI,GAAkB,CACjBpiG,YAAaA,EACbqiG,gBAAiBA,EACjB1jE,QAASA,EACT2jE,mBAAoB+I,KAKxBlvI,EAAAA,GAAAA,GAACioI,GAAW,CACVT,cAAekH,IAAmBT,EAAAA,GAAoBC,YACtDrqG,YAAaA,EACb2hG,WAAYA,EACZU,gBAAiBA,EACjB1jE,QAASA,EACT2jE,mBAAoB+I,IAG1B,KAAKjB,EAAAA,GAAoBjD,MACvB,OAAOhrI,EAAAA,GAAAA,GAAC4qI,GAAY,CAAC/mG,YAAaA,IACpC,KAAKoqG,EAAAA,GAAoBI,MACvB,OAAOruI,EAAAA,GAAAA,GAACyqI,GAAW,CAAC5mG,YAAaA,IACnC,KAAKoqG,EAAAA,GAAoBK,MACvB,OAAOtuI,EAAAA,GAAAA,GAACmqI,GAAW,CAACtmG,YAAaA,IACnC,KAAKoqG,EAAAA,GAAoBM,MACvB,OACEvuI,EAAAA,GAAAA,GAAC0gI,GAAY,CAEX78F,YAAaA,GADT,SAIV,KAAKoqG,EAAAA,GAAoBO,MACvB,OACExuI,EAAAA,GAAAA,GAAC0gI,GAAY,CAEXL,SAAO,EACPx8F,YAAaA,GAFT,SAKV,KAAKoqG,EAAAA,GAAoBE,QACvB,OACEnuI,EAAAA,GAAAA,GAACkkI,GAAa,CAEZrgG,YAAaA,GADT,WAIV,KAAKoqG,EAAAA,GAAoBG,YACvB,OACEpuI,EAAAA,GAAAA,GAAC8tI,GAAkB,CAEjBjqG,YAAaA,GADT,eAIV,QACE,OAEL,EA9DA,W,gBClHT,MAAMyrG,GAA4B,CAChCtwB,gBAAiB,GACjBD,SAAU,GACVR,KAAM,GACNgxB,MAAO,IAGHC,GAAuDA,CAC3D1vE,EACAh+D,KAEA,OAAQA,EAAOZ,MACb,IAAK,qBACH,MAAO,IACF4+D,EACHk/C,gBAAiBl9G,EAAO2tI,SAG5B,IAAK,cACH,MAAO,IACF3vE,EACHi/C,SAAUj9G,EAAO2tI,SAGrB,IAAK,UACH,MAAO,IACF3vE,EACHy+C,KAAMz8G,EAAO2tI,SAGjB,IAAK,WACH,MAAO,IACF3vE,EACHyvE,MAAOztI,EAAO2tI,SAGlB,IAAK,QACH,OAAOH,GAET,QACE,OAAOxvE,I,oDClBb,MAqIA,IAAenhE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACQ,CACLquI,UAAUC,EAAAA,GAAAA,GAAmBtuI,EAAQ,wBAHvBsN,CArI0CihI,EAC5DC,OACA/vE,QACAgwE,WACAt2H,WACAgpD,UACAutE,eACAL,eAEA,MAAM3iI,GAAOC,EAAAA,EAAAA,MAEP,sBAAEgjI,IAA0BhkI,EAAAA,EAAAA,OAE5B,WAAEikI,GAAenwE,GACjB,gBAAEowE,EAAe,kBAAEC,IAAsBpoI,EAAAA,EAAAA,IAAQ,KAAMqoI,EAAAA,GAAAA,GAAkBtwE,EAAO+vE,GAAM,GAAO,CAACA,EAAM/vE,IACpGuwE,EAAqB,aAATR,EAAsBS,GAAAA,GAAkCC,GAAAA,IAEnEC,EAAWC,IAAgBtkI,EAAAA,EAAAA,KAAS,GAErCukI,GAAsBC,EAAAA,GAAAA,IAA8BxH,EAAAA,KACpDyH,GAA2BD,EAAAA,GAAAA,IAA8BE,EAAAA,KAEzDC,EAAsBhxE,EAAMuf,OAAO0xD,YAEzCxmI,EAAAA,EAAAA,IAAU,KACHiP,GACHi3H,GAAa,IAEd,CAACj3H,IAEJ,MAAMuqB,GAAeh8B,EAAAA,EAAAA,IAAQ,KAC3B,MAAMipI,EAAU,IAAIN,GAAuB,MAAOE,GAA4B,IAC9E,OAAO3sG,EAAAA,GAAAA,IAAO,KACTC,EAAAA,GAAAA,IAAmB,CAAEC,IAAK6sG,EAAS5sG,MAAO6rG,EAAY/uI,KAAM,YAEhE,CAACwvI,EAAqBE,EAA0BX,IAE7ChW,GAAqB1tH,EAAAA,EAAAA,GAAiB0kI,IAC1CnB,EAAS,CACP5uI,KAAM,gBACNuuI,QAASwB,IAEXR,GAAa,KAGTvV,GAA0B3uH,EAAAA,EAAAA,GAAiB43B,IAC/C,GAAa,aAAT0rG,EAAqB,CACvB,GAAI1rG,EAAIxiC,QAAU+tI,EAIhB,YAHAM,EAAsB,CACpBrgH,MAAO,uBAIXmgH,EAAS,CACP5uI,KAAM,oBACNuuI,QAAS,IAAK3vE,EAAMoxE,eAAgBC,gBAAiBhtG,IAEzD,MACE2rG,EAAS,CACP5uI,KAAM,oBACNuuI,QAAS,IAAK3vE,EAAMsxE,eAAgBC,gBAAiBltG,KAGzDssG,GAAa,KAGTa,GAAgC/kI,EAAAA,EAAAA,GAAiBohD,IACrD,MAAM4jF,EAAsC,CAAC,EAC7C5jF,EAAKl2C,QAASgO,IACZ8rH,EAAW9rH,IAAO,IAIlBqqH,EADW,aAATD,EACO,CACP3uI,KAAM,oBACNuuI,QAAS,CACP0B,gBAAiBjB,KACdqB,IAIE,CACPrwI,KAAM,oBACNuuI,QAAS,CACP4B,gBAAiBnB,KACdqB,KAITd,GAAa,KAQf,OALA1lH,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAGLz+B,GAKHnkC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAACqkC,GAAAA,EAAU,CACTmtG,WAAYV,OAAsBjuI,EAAYwtI,EAC9C/rG,QAASP,EACTL,YAAawsG,EACbuB,mBAAoBtB,EACpB1rG,YAAawrG,EACbvrG,kBAAmB33B,EAAK,UACxB2kI,uBAAuB,kBACvB/sG,cAAc,0BACdC,cAAY,EACZC,oBAAkB,EAClB8sG,eAAa,EACb1sG,eAAa,EACbE,cAAc,WACdJ,oBAAqBm2F,EACrB0W,2BAA4BN,EAC5BtsG,eAAgBi1F,KAGlBj6H,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAASqqG,EACTziI,QAASgiI,EACTx9H,UAAWxF,EAAK,QAAQhN,UAExBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,gBA7BRvN,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,OCrEboiF,GAAgB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAE5BC,GAAiB,0CACjBC,GAAiB,8BAmZ9B,IAAepzI,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUy+D,YACT,MAAM,QAAEhQ,GAAYzuD,EAAO6rD,OACrB,KAAEvmB,EAAI,QAAEqrG,GAAY3wI,EAAO+gI,YAC3B6P,EAAgBpvF,OAAO0K,OAAO5mB,GAAM2b,OAAO,CAACkL,EAAK0kF,IAAO1kF,GAAO0kF,EAAGnB,WAAa,EAAI,GAAI,GAEvFlxG,GAAuB0B,EAAAA,EAAAA,KAA2BlgC,GAExD,MAAO,CACL8wI,oBAAqBriF,EAAQ7O,OAC7BmxF,sBAAuBtiF,EAAQI,SAC/B8hF,QAASlyE,EAAM+f,SAAYmyD,EAAQlyE,EAAM+f,WAAat7C,GAAAA,OAAoB1hC,EAC1EwvI,eAA8BxvI,IAAnBi9D,EAAM+f,WAA2Bl5C,EAAKm5B,EAAM+f,UACvDyyD,gBAAgB3C,EAAAA,GAAAA,GAAmBtuI,EAAQ,mBAC3CkxI,cAAc5C,EAAAA,GAAAA,GAAmBtuI,EAAQ,kBACzC4wI,gBACApyG,yBAhBclxB,CAjZmC6jI,EACrD1yE,QACAgwE,WACA2C,qBACAC,qBACAC,gBACAC,eACAp5H,WACAgpD,UACA6vE,YACArnH,SACAmnH,sBACAU,gBACAT,wBACAJ,UACAM,iBACAC,eACAN,gBACAa,eACAjzG,2BAEA,MAAM,oBACJkzG,EAAmB,sBACnB/C,EAAqB,iBACrBruG,EAAgB,iBAChBC,IACE51B,EAAAA,EAAAA,MAEEgnI,EAA4B,WAAflzE,EAAM+vE,KACnBoD,EAAoBnzE,EAAMuf,OAAO0xD,YAEhCmC,EAA6BC,IAAkChnI,EAAAA,EAAAA,KAAS,IACxEinI,EAA6BC,IAAkClnI,EAAAA,EAAAA,KAAS,IAE/E5B,EAAAA,EAAAA,IAAU,KACJ8nI,GACF7vE,KAED,CAAC6vE,EAAW7vE,KAEfj4D,EAAAA,EAAAA,IAAU,KACJiP,GAAYsmD,EAAM+f,UAAY/f,EAAMuf,OAAO0xD,YAC7CgC,EAAoB,CAAElzD,SAAU/f,EAAM+f,YAEvC,CAACrmE,EAAUsmD,EAAMuf,OAAO0xD,WAAYjxE,EAAM+f,WAE7C,MACEqwD,gBAAiBiB,EACjBhB,kBAAmBmD,IACjBvrI,EAAAA,EAAAA,IAAQ,KAAMqoI,EAAAA,GAAAA,GAAkBtwE,EAAO,YAAa,CAACA,KAEvDowE,gBAAiBmB,EACjBlB,kBAAmBoD,IACjBxrI,EAAAA,EAAAA,IAAQ,KAAMqoI,EAAAA,GAAAA,GAAkBtwE,EAAO,YAAa,CAACA,KAEzDv1D,EAAAA,EAAAA,IAAU,KACR4oI,GAA+B,GAC/BE,GAA+B,IAC9B,CAACvzE,EAAM+f,WAEV,MAAO2zD,EAAwBC,IAA0B1rI,EAAAA,EAAAA,IAAQ,KAC/D,MAAM2rI,EAAoB,IAAItlG,IAAI,IAC5B+jG,GAAuB,MACvBC,GAAyB,KAGzBuB,GAAwBC,EAAAA,GAAAA,IAAwBzC,EAAiBuC,GACjEG,GAAwBD,EAAAA,GAAAA,IAAwBvC,EAAiBqC,GAEvE,MAAO,CACLR,EACIS,EACAA,EAAsB5lG,MAAM,EA/EV,EA+EmCulG,EAAkB3xI,QAC3EyxI,EACIS,EACAA,EAAsB9lG,MAAM,EAlFV,EAkFmCwlG,EAAkB5xI,UAE5E,CACD0vI,EAAiBF,EAAiBmC,EAAmBC,EACrDH,EAA6BF,EAC7Bf,EAAqBC,IAGjBrlI,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,WAGF,MAAM8iE,GAAenuF,EAAAA,EAAAA,IAAamvB,IAChC,MAAM,cAAEpK,GAAkBoK,EAC1BghH,EAAS,CAAE5uI,KAAM,WAAYuuI,QAAS/qH,EAAc/X,MAAM4gE,UACzD,CAACuiE,IAEE/pG,GAAepmC,EAAAA,EAAAA,IAAY,KAC/BmwI,EAAS,CAAE5uI,KAAM,eAAgBuuI,SAAS,IAE1CqD,EAAa,KACXjoI,WAAW,KACT23D,KA7Ge,QAgHlB,CAACstE,EAAUgD,EAActwE,IAEtBsxE,GAA0Bn0I,EAAAA,EAAAA,IAAY,KACrCqyI,GAQA+B,EAAAA,EAAAA,MAAqB7nG,EAAAA,EAAAA,MAAa4zB,EAAM+f,UAKzCoyD,GAAiBM,IAAiBzyE,EAAMuf,OAAO0xD,WACjDf,EAAsB,CACpBrgH,MAAO,mBAKPqiH,EAAQrwI,OAAS2wI,EACfxyE,EAAM0wE,UACRsC,EAAaH,GAEbA,IAKJ3C,EAAsB,CACpBrgH,MAAO,oBArBPgS,EAAiB,CAAE/gC,QAASmM,EAAK,oDAR7BimI,GACFF,EAAaH,IA8BhB,CACDX,EAASlyE,EAAM+f,SAAU/f,EAAM0wE,UAAWyB,EAAeK,EAAgBU,EAAYF,EACrFH,EAAe5lI,EAAMwlI,EAAczyE,EAAMuf,OAAO0xD,aAG5CiD,GAAwBr0I,EAAAA,EAAAA,IAAY,CAACkN,EAAkC0K,KACvEuoD,EAAM0wE,UACRsC,EAAa,IAAMF,EAAar7H,IAEhCq7H,EAAar7H,IAEd,CAACu7H,EAAcF,EAAc9yE,EAAM0wE,YA0BtC,SAASyD,EAAYpE,GACnB,MAAMM,EAA6B,aAATN,EAAsByD,EAAoBC,EAC9DW,EAA0B,aAATrE,EAAsB2D,EAAyBC,EAEhE7jG,EAAsB,aAATigG,EAAsBqD,EAA8BE,EAEjEe,GADsB,aAATtE,EAAsBsB,EAAkBE,GACzB1vI,OAASuyI,EAAevyI,OACpDyyI,EAAwB,aAATvE,EACjB,IAAMsD,GAA+B,GACrC,IAAME,GAA+B,GAEzC,OACEzzI,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,CACGowI,EAAkB18H,IAAKgS,GArC9B,SAAwBA,EAAaoqH,GACnC,MAAMwE,EAAoB,aAATxE,EACbS,GAAAA,GAAgC96F,KAAK,EAAGt0C,KAAMozI,KAAcA,IAAY7uH,GACxE8qH,GAAAA,GAAgC/6F,KAAK,EAAGt0C,KAAMozI,KAAcA,IAAY7uH,GAE5E,GAAK4uH,EAIL,OACEr0I,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAEPziC,UAAU,kCACV4hH,QAAM,EACNj/E,UAAQ,EAAA1iC,UAERC,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CACd22E,WAAW,QACXlgB,WAAY63B,KAPTA,EAASnzI,KAWpB,CAesCqzI,CAAe9uH,EAAKoqH,IACnDqE,EAAezgI,IAAK5T,IACnBG,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPziC,UAAU,kCACV4hH,QAAM,EACNj/E,UAAQ,EAAA1iC,UAEP2O,EAAAA,EAAAA,IAAS7O,IACRG,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CAAC22E,WAAW,QAAQ7+F,OAAQh+B,KAE5CG,EAAAA,GAAAA,GAACkmD,GAAAA,EAAa,CAACw2E,WAAW,QAAQlwH,OAAQ3M,QAI7C+vC,GAAcukG,EAAiB,IAChCn0I,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAEPziC,UAAU,6BACV4hH,QAAM,EAEN3zG,QAASqmI,EACTnhI,KAAK,OAAMlT,SAEVgN,EAAK,sBAAuBonI,EAAgB,MAPzC,eAYd,CAEA,OACEv0I,EAAAA,GAAAA,IAAA,OAAKE,UAAU,uBAAsBC,SAAA,EACnCH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2CAA0CC,SAAA,EACvDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,0BAAyBC,SAAA,EACtCC,EAAAA,GAAAA,GAAC6nG,GAAAA,EAAuB,CACtB3nG,KAAMs0I,EAAAA,IACNp0I,OAAQC,GAAAA,EAAeo0I,WACvBzxD,KAAMjgC,OAAO+c,EAAM+f,UACnB//E,UAAU,0BAGXkzI,IACChzI,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAC/EgN,EAAK,wBAIV/M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACR7N,UAAU,OACVoN,MAAOH,EAAK,kBACZJ,MAAOmzD,EAAMuf,OAAOlyE,MAAM2H,KAC1ButE,UAAWqyD,EAAAA,IACXjnI,SAAUqgF,EACVviD,MAAOu0B,EAAMv0B,OAASu0B,EAAMv0B,QAAUumG,GAAiBA,QAAiBjvI,QAI1EgwI,IACAjzI,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,CAC3B+/D,EAAMv0B,OAASu0B,EAAMv0B,QAAUwmG,KAC9B/xI,EAAAA,GAAAA,GAAA,KAAGF,UAAU,8CAA8CuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAC5FgN,EAAK+yD,EAAMv0B,UAIhBvrC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,4BAA4BuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAEgN,EAAK,oBAErF/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPziC,UAAU,2CACVmT,KAAK,MACLyuG,QAAM,EACN3zG,QAAS0kI,EAAmB1yI,SAE3BgN,EAAK,oBAGPknI,EAAY,gBAIfpB,IAAkBI,IAClBrzI,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,4BAA4BuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAEgN,EAAK,oBAErF/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPziC,UAAU,2CACVmT,KAAK,MACLyuG,QAAM,EACN3zG,QAAS2kI,EAAmB3yI,SAE3BgN,EAAK,oBAGPknI,EAAY,gBAIjBr0I,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,EACjCH,EAAAA,GAAAA,IAAA,MAAIE,UAAU,+CAA+CuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,CAC9FgN,EAAK,qBACN/M,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GACd,8BACA0pB,QAA+Ch9B,IAAvBi9D,EAAMuf,OAAOxxE,QAA+C,IAAxBiyD,EAAMuf,OAAOxxE,OACrE8mI,EAAAA,GAAAA,GAAqB,CAAE9mI,MAAOiyD,EAAMuf,OAAOxxE,QAC3C,8BACJ9N,UAEC0vC,EAAAA,GAAAA,IAAuB,CACtB36B,KAAMgrD,EAAMuf,OAAOlyE,MAAM2H,KACzB29E,SAAU3yB,EAAMuf,OAAOlyE,MAAMslF,SAC7BinB,sBAAuB55C,EAAMuf,OAAOs6B,0BAI1C/5G,EAAAA,GAAAA,IAAA,OAAKE,UAAU,eAAcC,SAAA,CAC1B8xI,GAAcp+H,IAAK5F,IAClB7N,EAAAA,GAAAA,GAAA,UAEEkB,KAAK,SACL6M,QAASA,KACF8xB,EAKLiwG,EAAS,CAAE5uI,KAAM,WAAYuuI,QAAS5hI,IAJpC+zB,KAMJ9hC,WAAWqW,EAAAA,GAAAA,GACT,qBACAw+H,EAAAA,GAAAA,GAAqB,CAAE9mI,WACtBgyB,GAAwB,mCACzBhyB,IAAUiyD,EAAMuf,OAAOxxE,OAASgyB,GAAwB,6BAdrDhyB,KAkBT7N,EAAAA,GAAAA,GAAA,UACEkB,KAAK,SACL6M,QAASA,KACF8xB,EAKLiwG,EAAS,CAAE5uI,KAAM,WAAYuuI,aAAS5sI,IAJpC++B,KAMJ9hC,WAAWqW,EAAAA,GAAAA,GACT,oBACA,+BACwBtT,IAAvBi9D,EAAMuf,OAAOxxE,QAA+C,IAAxBiyD,EAAMuf,OAAOxxE,QAAiBgyB,IAChE,4BACH9/B,SAED8/B,GACC7/B,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,QAAQzN,UAAU,iCAE7BE,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAAazN,UAAU,sCAIxCE,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAC/EgN,EAAK,yBAIVnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,4BAA4BuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAC3EgN,EAAK,6BAGR/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPziC,UAAU,2CACVmT,KAAK,MACLyuG,QAAM,EACN3zG,QAAS+lI,EAAwB/zI,SAEhCgN,EAAK,kCAGPilI,GAASv+H,IAAKulG,IACbp5G,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPziC,UAAU,6BACVmT,KAAK,OACLyuG,QAAM,EACNl/E,WAAS,EACTz0B,QAASimI,EACTtvC,SAAUsU,EAAOzhG,IAAIxX,SAAA,EAErBC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAQuW,IAAI,OAAMtW,SAAEi5G,EAAO7rG,OAAS6rG,EAAOzhG,OAC3DvX,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SACvBgN,EAAK,oCAAqCisG,EAAO93D,QAAQv/C,OAAQ,kBAQ5E3B,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAASp7B,QAAQ+0D,EAAM0wE,WACvBrwH,SAAU2/C,EAAMnrC,UAChB5mB,QAASg4B,EACTxzB,UAA0B,SAAfutD,EAAM+vE,KAAkB,eAAiB,gBAAgB9vI,SAEnE+/D,EAAMnrC,WACL30B,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf7N,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,kB,gBC3ZrB,MACMqnI,IAAiC9+H,EAAAA,GAAAA,IAAUsrD,GAAOA,IAAM,KAAO,GAyWrE,IAAeziE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MACE+qC,WAAYyoG,EACZluG,KAAMmuG,EACNC,YAAaC,EAAsB,eACnCC,GACE5zI,EAAO+gI,YAEX,MAAO,CACLyS,YACAC,cACArqD,WAAWlpD,EAAAA,EAAAA,KAA2BlgC,GACtC2zI,yBACAE,YAAYvF,EAAAA,GAAAA,GAAmBtuI,EAAQ,iBACvC4zI,mBAfctmI,CAvWmCwmI,EACrD37H,WACA47H,iBACAC,eACA7yE,UACAqyE,YACAC,cACArqD,YACAuqD,yBACAE,aACAD,qBAEA,MAAM,2BACJK,EAA0B,cAC1BC,EAAa,sBACbvF,EAAqB,0BACrBxwD,EAAyB,gBACzBg2D,EAAe,uBACfC,EAAsB,iBACtB7zG,IACE51B,EAAAA,EAAAA,OAEG8zD,EAAO41E,IAAYvpI,EAAAA,EAAAA,IAAoB,CAC5CwpI,iBAAkBd,EAClBe,aAAcf,EACdgB,kBAAchzI,IAGVizI,GAAgBv/G,EAAAA,EAAAA,GAAsBs+G,IAG5CtqI,EAAAA,EAAAA,IAAU,KACJurI,IAAkBjB,GACpBa,EAAS,CACPC,iBAAkBd,EAClBe,aAAcf,EACdgB,kBAAchzI,KAGjB,CAACizI,EAAejB,EAAW/0E,EAAM61E,kBAAkBh0I,UAItD4I,EAAAA,EAAAA,IAAU,KACRqqI,GAA+B,KAC7BU,OAED,CAACA,IAEJ,MAAMS,GAAqBp2I,EAAAA,EAAAA,IAAY,KACjCkjD,OAAO8K,KAAKmnF,GAAanzI,QAAUuzI,EAAa,EAClDlF,EAAsB,CACpBrgH,MAAO,kBAMXylH,KACC,CAACN,EAAaI,EAAYE,EAAgBpF,IAEvCjjI,GAAOyqC,EAAAA,GAAAA,MAEbzsB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAGV,MAAMwzE,GAAuBC,EAAAA,GAAAA,MACvBC,GAAcnuI,EAAAA,EAAAA,IAAQ,KAC1B,GAAK8sI,EAIL,OAAIA,EAAUlzI,QAAU,EACf4iC,GAAAA,EAGFswG,EAAUphI,IAAK5T,IACpB,MAAMw/E,EAASy1D,EAAYj1I,GAE3B,OAAIA,IAAOspI,EAAAA,IACF,CACLtpI,KACAsN,MAAO,CACL2H,KAAM/H,EAAK,kBACX0lF,SAAU,KAKT,CACL5yF,GAAIw/E,EAAOx/E,GACXsN,MAAOkyE,EAAOlyE,MACdylB,UAAUujH,EAAAA,EAAAA,IAAyBppI,EAAMsyE,EAAQ22D,EAAqB32D,EAAOx/E,KAC7EkxI,WAAY1xD,EAAO0xD,WACnBljI,MAAOwxE,EAAOxxE,MACd8rG,kBAAmBt6B,EAAOs6B,sBAG7B,CAACk7B,EAAWC,EAAa/nI,EAAMipI,IAE5BI,GAAoCz2I,EAAAA,EAAAA,IAAa0/E,IACjDx8B,OAAO8K,KAAKmnF,GAAanzI,QAAUuzI,EAAa,EAClDlF,EAAsB,CACpBrgH,MAAO,kBAMX4lH,EAAc,CAAEl2D,YACf,CAACy1D,EAAaI,EAAYK,EAAevF,IAEtCqG,GAAmB12I,EAAAA,EAAAA,IAAY,KAC9B8qF,GAILgrD,EAAuB,CAAEzkE,WAAYikE,KACpC,CAACA,EAAgBxqD,EAAWgrD,IAEzB/6D,GAAa/6E,EAAAA,EAAAA,IAAY,CAAC22I,EAAuCz2I,KACrE,MAAMuxB,EAAQle,KAAKZ,MAAMgkI,EAAYxzH,EA9HhB,IA+Hfte,EAAQs7D,EAAM61E,kBAAkBv5G,QAAQv8B,IAAiB,EACzD+1I,EAAe91E,EAAM61E,kBAAkBh4G,OAAQkiD,GAAaA,IAAahgF,GAE1E+1I,IAAiBroH,EAAAA,GAAAA,IAAU/oB,EAAQ4sB,EAAO,EAAGyjH,GAAWlzI,QAAU,KAIvEi0I,EAAa/b,OAAOr1H,EAAQ4sB,GAASq5D,EAAY,EAAI,GAAI,EAAG5qF,GAC5D61I,EAAUlsI,IAAO,IACZA,EACHqsI,aAAcrxI,EACdoxI,oBAED,CAACf,GAAWlzI,OAAQ8oF,EAAW3qB,EAAM61E,mBAElCY,GAAgB52I,EAAAA,EAAAA,IAAY,KAChC+1I,EAAUlsI,IACRgsI,EAAgB,CAAEX,UAAWrrI,EAAQosI,eAE9B,IACFpsI,EACHmsI,iBAAkBnsI,EAAQosI,aAC1BC,kBAAchzI,MAGjB,CAAC2yI,IAEEgB,GAAqBzuI,EAAAA,EAAAA,IAAQ,KACzB0iF,GAAa5nC,OAAO8K,KAAKmnF,GAAanzI,OAASuzI,EAAa,EACnE,CAACJ,EAAarqD,EAAWyqD,IAE5B,OACEt1I,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2CAA0CC,SAAA,EACvDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,0BAAyBC,SAAA,EACtCC,EAAAA,GAAAA,GAAC6nG,GAAAA,EAAuB,CACtB3nG,KAAMs0I,EAAAA,IACNp0I,OAAQC,GAAAA,EAAeo2I,WACvB32I,UAAU,2BAGZE,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCuW,IAAI,OAAMtW,SACrDgN,EAAK,yBAGPypI,IACC52I,EAAAA,GAAAA,IAACgO,EAAAA,EACD,CACE9N,UAAU,4BACV+N,MAAM,UACN0+F,MAAI,EACJnkD,OAAK,EACLr6C,QAASgoI,EACTlkH,MAAO9kB,EAAK8kB,MAAM9xB,SAAA,EAElBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,QACVR,EAAK,0BAKZnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,4BAA4BuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAEgN,EAAK,cAErF/M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,8BAA8BgG,MAAO,WA9LnC,IA8L+C+uI,GAAWlzI,QAAU,OAA0B5B,SAC5Gm2I,GAAav0I,OAASu0I,EAAYziI,IAAI,CAAC4rE,EAAQ71B,KAC9C,MAAMktF,EAAYltF,EAAI0rF,EAAa,EAC7ByB,EAAY72E,EAAM+1E,eAAiBrsF,EACnCotF,EAlMO,IAkMO92E,EAAM61E,kBAAkBv5G,QAAQijD,EAAOx/E,KAAO,GAC5DwjB,EAnMO,IAmMAy8C,EAAM81E,cAAcx5G,QAAQijD,EAAOx/E,KAAO,GAEjDg3I,OAAsCh0I,IAAlBw8E,GAAQxxE,QAAyC,IAAlBwxE,EAAOxxE,OAAgB48E,EAEhF,OAAIpL,EAAOx/E,KAAOspI,EAAAA,KAEdnpI,EAAAA,GAAAA,GAAC82I,GAAAA,EAAS,CAERj3I,GAAIw/E,EAAOx/E,GACXud,OAAQs9D,EACRq8D,UAAWR,EACXzwI,MAAO,QAAQ6wI,EAAYC,EAAavzH,OACxC2zH,WAAcjqI,EAAK8kB,MAAQ,OAAS,SAAzB,cACX5nB,YAAawgF,IAAcjxE,EAASzZ,UAEpCH,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAEPziC,UAAU,2CACV4hH,QAAM,EACNj/E,UAAQ,EACRD,WAAS,EACTy0G,UAAQ,EACRC,gBAAc,EAAAn3I,SAAA,EAEdC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,UACpB0vC,EAAAA,GAAAA,IAAuB,CACtB36B,KAAMuqE,EAAOlyE,MAAM2H,KACnB29E,SAAUpT,EAAOlyE,MAAMslF,SACvBinB,sBAAuBr6B,EAAOs6B,uBAGlC35G,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAEgN,EAAK,2BAf5BsyE,EAAOx/E,KATTw/E,EAAOx/E,KA+BhBG,EAAAA,GAAAA,GAAC82I,GAAAA,EAAS,CAERj3I,GAAIw/E,EAAOx/E,GACXud,OAAQs9D,EACRq8D,UAAWR,EACXzwI,MAAO,QAAQ6wI,EAAYC,EAAavzH,OACxC2zH,UAAW,GAAGjqI,EAAK8kB,MAAQ,OAAS,YAAYglH,EAAoB,SAAW,UAC/E5sI,WAAYysI,IAAcl9H,EAASzZ,UAEnCH,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPziC,UAAU,2CACV4hH,QAAM,EACNC,cAAc,OACdn/E,WAAS,EACTkiB,eAAgB,CACd,CACEK,QAASA,KACPy6B,EAA0B,CAAEK,SAAUR,EAAOx/E,MAE/CwT,aAAa,EACblG,MAAOJ,EAAK,UACZkG,KAAM,WAIVlF,QAASA,KACH2oI,EACF1G,EAAsB,CACpBrgH,MAAO,kBAGT0lH,EAAaP,EAAYz1D,EAAOx/E,MAElCE,SAAA,EAEFH,EAAAA,GAAAA,IAAA,QAAME,UAAU,QAAOC,SAAA,EACpB0vC,EAAAA,GAAAA,IAAuB,CACtB36B,KAAMuqE,EAAOlyE,MAAM2H,KACnB29E,SAAUpT,EAAOlyE,MAAMslF,SACvBinB,sBAAuBr6B,EAAOs6B,oBAE/B+8B,IAAa12I,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAAazN,UAAU,sCAElDF,EAAAA,GAAAA,IAAA,QAAME,UAAU,WAAUC,SAAA,CACvBs/E,EAAO0xD,aAAc/wI,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,OAAOzN,UAAU,SACjDu/E,EAAOzsD,YAIRikH,IACE72I,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GACd,iCACAw+H,EAAAA,GAAAA,GAAqB,CAAE9mI,MAAOwxE,EAAOxxE,eAnDxCwxE,EAAOx/E,MA4Dbq2I,IAAgBA,EAAYv0I,QAC/B3B,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCuW,IAAI,OAAMtW,SACrDgN,EAAK,2BAEN/M,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,SAIdulF,GAA0BjqI,QAAQiqI,EAAuBrzI,UACzD/B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,4BAA4BuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAC3EgN,EAAK,uBAGPioI,EAAuBvhI,IAAK4rE,IAC3Br/E,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPm/E,QAAM,EAEN3zG,QAASA,IAAMqoI,EAAkC/2D,GAAQt/E,UAEzDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,UACpB0vC,EAAAA,GAAAA,IAAuB,CACtB36B,KAAMuqE,EAAOlyE,MAAM2H,KACnB29E,SAAUpT,EAAOlyE,MAAMslF,SACvBinB,sBAAuBr6B,EAAOs6B,uBAGlC35G,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAEs/E,EAAOjzE,kBAGrCpM,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,OACV+N,MAAM,UACN3N,KAAK,OACLqsG,MAAI,EACJnkD,OAAK,EACLv2B,MAAO9kB,EAAK8kB,MAAM9xB,SAEjBgN,EAAK,mBAOlB/M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,qBAAoBC,UACjCH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,yBAAwBC,SAAA,EACrCC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,kBACZ+tF,SAAU/tF,EAAK,sBACfm8B,QAASuhD,GAAawqD,EACtBxnI,SAAU4oI,EACVpoB,aAAen/F,IACR27D,IACH37D,EAAMpJ,iBACNkc,SAIJ6oD,IAAazqF,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAAazN,UAAU,0C,eC7W3D,MAsKA,IAAenB,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,SAAEw+E,EAAQ,IAAEtoE,EAAG,UAAEod,IAAc5lB,EAAAA,EAAAA,KAAe1N,GAAQ81I,mBAAqB,CAAC,EAC5E93D,EAASQ,GAAWg7B,EAAAA,EAAAA,KAAiBx5G,EAAQw+E,QAAYh9E,EACzDm2G,EAASn5B,EAAWx+E,EAAO+gI,YAAY4P,QAAQnyD,IAAWrqC,KAAMgU,GAAMA,EAAEjyC,MAAQA,QAAO1U,EAE7F,MAAO,CACLg9E,WACAR,SACA9nE,MACAod,YACAusB,QAAS83D,GAAQ93D,UAXHvyC,CAtKqCyoI,EACvD59H,WACAgpD,UACAqd,WACAR,SACAn+B,UACA3pC,MACAod,gBAEA,MAAM,qBACJ0iH,EAAoB,qBAAEC,EAAoB,mBAAEC,EAAkB,iBAAE51G,IAC9D31B,EAAAA,EAAAA,MAEEe,GAAOyqC,EAAAA,GAAAA,KACPD,GAAUvqC,EAAAA,EAAAA,MAETwjI,EAAWC,IAAgBtkI,EAAAA,EAAAA,KAAS,IAE3C4e,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,KAGVj4D,EAAAA,EAAAA,IAAU,KACHoqB,GACH87G,GAAa,IAEd,CAAC97G,KAEJpqB,EAAAA,EAAAA,IAAU,MACHgN,GAAOsoE,GAAYrmE,GACtB69H,EAAqB,CAAEx3D,cAExB,CAACA,EAAUrmE,EAAUjC,IAExB,MAAMigI,GAAejrI,EAAAA,EAAAA,GAAgB,KAC9BgL,GAAQsoE,IAEby3D,EAAqB,CAAEz3D,WAAUtoE,QACjCirD,OAGIl+B,GAAUv8B,EAAAA,EAAAA,IAAQ,KACds3E,GAAQ8xD,iBAAmB,IAAI/8C,OAAO/U,GAAQo4D,eAAiB,IACtE,CAACp4D,GAAQ8xD,gBAAiB9xD,GAAQo4D,iBAE9BC,EAAa/zG,IAAa57B,EAAAA,EAAAA,IAAQ,KACvC,MAAM1G,GAAS6qC,EAAAA,EAAAA,MACf,OAAOyrG,EAAAA,GAAAA,IAAUrzG,EAAUzkC,IAAO+3I,EAAAA,EAAAA,KAAsBv2I,EAAQxB,KAC/D,CAACykC,KAEGZ,EAAawwD,IAAkB/nF,EAAAA,EAAAA,IAAmB+0C,GAAW,IAE9D22F,GAAmBxuI,EAAAA,EAAAA,KAAO,IAChCu8B,EAAAA,GAAAA,GAAsB,EAAEkyG,MAClBA,IAAYvgI,IACdsgI,EAAiBruI,SAAU,GAExBquI,EAAiBruI,UACtBquI,EAAiBruI,SAAU,EACtB+N,EAEM2pC,GACTgzC,EAAehzC,GAFfgzC,EAAewjD,KAIhB,CAACngI,EAAKmgI,EAAax2F,IAEtB,MAAM62F,GAAsBxrI,EAAAA,EAAAA,GAAiB1M,IAC3C,MAAMwB,GAAS6qC,EAAAA,EAAAA,MACTiI,GAAOC,EAAAA,EAAAA,KAAW/yC,EAAQxB,GAC1BqP,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQxB,GAC5Bs0C,IAAQ8hD,EAAAA,EAAAA,IAAU9hD,GACpBxS,EAAiB,CACf/gC,QAAS22C,EAAQ,8CAEVpD,EACTxS,EAAiB,CACf/gC,QAAS22C,EAAQ,+CAEVroC,IAAQukB,EAAAA,EAAAA,IAAcvkB,GAC/ByyB,EAAiB,CACf/gC,QAAS22C,EAAQ,wDAGnB5V,EAAiB,CACf/gC,QAAS22C,EAAQ,wDAKjB2jF,GAA0B3uH,EAAAA,EAAAA,GAAiB43B,IAC/C+vD,EAAe/vD,GACfssG,GAAa,KAGT1qG,GAAex5B,EAAAA,EAAAA,GAAgB,KAC9BszE,GAAatoE,GAAQi5H,GAC1B+G,EAAmB,CAAE13D,WAAU3+B,QAASxd,EAAansB,UAGjDygI,EAAat0G,EAAY/hC,OACzBsI,GAAc+tI,GAAcrjH,EAElC,OACE/0B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,sEAAqEC,SAAA,EAClFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,0BAAyBC,SAAA,EACtCC,EAAAA,GAAAA,GAACi4I,GAAAA,EAAY,CACX/3I,KAAMs0I,EAAAA,IACNp0I,OAAQC,GAAAA,EAAe63I,aACvBp4I,UAAU,0BAGXu/E,IACCr/E,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCuW,IAAI,OAAMtW,SACrDgN,EAAK,6BAA8B,CAClCsyE,QAAQ5vC,EAAAA,GAAAA,IAAuB,CAC7B36B,KAAMuqE,EAAOlyE,MAAM2H,KACnB29E,SAAUpT,EAAOlyE,MAAMslF,SACvBinB,sBAAuBr6B,EAAOs6B,oBAEhCzsD,MAAOngD,EAAK,kCAAmC,CAAEqmB,MAAO4kH,GAAc,CAAE/3E,YAAa+3E,KACpF,CACDtkF,cAAc,EACdhV,WAAW,UAMnB1+C,EAAAA,GAAAA,GAACm3G,GAAAA,EAAS,CACRr3G,UAAU,gBACVmzF,KAAO17E,GAAMggC,EAAQ,WACrB4gG,WAAS,EACTC,SAAUZ,EACVvtI,YAAa+tI,GAAcxH,KAG7BxwI,EAAAA,GAAAA,GAAA,OAAKF,UAAU,qCAAoCC,UACjDC,EAAAA,GAAAA,GAACqkC,GAAAA,EAAU,CACTC,QAASA,EACT+zG,oBAAqB10G,EACrBoB,oBAAqBm2F,EACrBx3F,YAAaA,EACbo1F,gBAAiBif,EACjB9yG,eAAa,EACbC,YAAU,EACVC,cAAc,gBAIlBnlC,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAASxR,GAAa67G,EACtBrwH,SAAUlW,EACV8D,QAASg4B,EACTxzB,UAAU,eAAcxS,SAEvB40B,GACC30B,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf7N,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,kBCwBrB,IAAe5O,EAAAA,EAAAA,IAxMuB25I,EACpCC,gBACAC,cACA14E,QACAgwE,WACAt2H,WACAgpD,cAEA,MAAM,yBACJi2E,EAAwB,eACxBC,EAAc,cACdnD,EAAa,mBACboD,IACE3sI,EAAAA,EAAAA,MAEE4sI,GAAcj5I,EAAAA,EAAAA,IAAY,KAE5B44I,IAAkBM,EAAAA,GAAgBC,qBAC/BP,IAAkBM,EAAAA,GAAgBE,mBAClCR,IAAkBM,EAAAA,GAAgBG,+BAClCT,IAAkBM,EAAAA,GAAgBI,0BAErCpuI,WAAW,KACTilI,EAAS,CAAE5uI,KAAM,WAlCG,KAuCtBq3I,IAAkBM,EAAAA,GAAgBK,sBAC/BX,IAAkBM,EAAAA,GAAgBM,qBAUvC32E,IARqB,WAAf1C,EAAM+vE,KACR8I,EAAmB,CAAES,OAAQP,EAAAA,GAAgBC,sBAE7CH,EAAmB,CAAES,OAAQP,EAAAA,GAAgBE,qBAMhD,CAACj5E,EAAM+vE,KAAMC,EAAUyI,EAAe/1E,IAEnCwwE,EAA4B,WAAflzE,EAAM+vE,KAEnBwJ,GAAY15I,EAAAA,EAAAA,IAAa25I,IAC7B,MAAQnsI,OAAS2H,KAAM3H,IAAYmsI,EAASj6D,OAE5C,IAAKlyE,EAEH,OADA2iI,EAAS,CAAE5uI,KAAM,WAAYuuI,QAASqC,MAC/B,EAGT,MACE5B,gBAAiBiB,EACjBhB,kBAAmBmD,IACjBlD,EAAAA,GAAAA,GAAkBkJ,EAAU,YAEhC,OAAKnI,EAAgBxvI,QAAWkhD,OAAO8K,KAAK2lF,GAAmB3xI,QAK1DqxI,EAGHuC,EAAc,CAAEl2D,OAAQi6D,EAASj6D,SAFjCq5D,EAAe,CAAE74I,GAAIy5I,EAASz5D,SAAW05D,aAAcD,EAASj6D,SAKlEywD,EAAS,CAAE5uI,KAAM,WAAYuuI,aAAS5sI,IACtCitI,EAAS,CAAE5uI,KAAM,eAAgBuuI,SAAS,KAEnC,IAbLK,EAAS,CAAE5uI,KAAM,WAAYuuI,QAASsC,MAC/B,IAaR,CAACjC,EAAUkD,IAERwG,GAAmB75I,EAAAA,EAAAA,IAAayhE,IAC/Bi4E,EAAUv5E,IAGfsB,OACC,CAACi4E,EAAWv5E,IAET25E,GAAmB95I,EAAAA,EAAAA,IAAY,KACnCmwI,EAAS,CAAE5uI,KAAM,gBACjB03I,KACC,CAAC9I,EAAU8I,IAER7C,GAAqBp2I,EAAAA,EAAAA,IAAY,KACrCmwI,EAAS,CAAE5uI,KAAM,UACjBy3I,EAAmB,CAAES,OAAQP,EAAAA,GAAgBC,uBAC5C,CAAChJ,IAEE4J,GAAmB/5I,EAAAA,EAAAA,IAAa0/E,IACpCywD,EAAS,CAAE5uI,KAAM,aAAcuuI,QAASpwD,IACxCs5D,EAAmB,CAAES,OAAQP,EAAAA,GAAgBE,qBAC5C,CAACjJ,IAEE6J,GAAyBh6I,EAAAA,EAAAA,IAAY,KACzCmwI,EAAS,CAAE5uI,KAAM,uBACjBy3I,EAAmB,CACjBS,OAAQb,IAAkBM,EAAAA,GAAgBG,8BACtCH,EAAAA,GAAgBe,iCAChBf,EAAAA,GAAgBK,wBAErB,CAACX,EAAezI,IAEb+J,GAAyBl6I,EAAAA,EAAAA,IAAY,KACzCmwI,EAAS,CAAE5uI,KAAM,uBACjBy3I,EAAmB,CACjBS,OAAQb,IAAkBM,EAAAA,GAAgBG,8BACtCH,EAAAA,GAAgBiB,iCAChBjB,EAAAA,GAAgBM,wBAErB,CAACZ,EAAezI,IAEbiK,GAAoBp6I,EAAAA,EAAAA,IAAY,KACpC84I,EAAyB,CAAE54D,SAAU/f,EAAM+f,SAAWm6D,qBAAqB,IAC3ElK,EAAS,CAAE5uI,KAAM,gBAAiBuuI,SAAS,IAC3CkJ,EAAmB,CAAES,OAAQP,EAAAA,GAAgBX,gBAC5C,CAACpI,EAAUhwE,EAAM+f,WAEdo6D,GAAmBt6I,EAAAA,EAAAA,IAAa4X,IACpCkhI,EAAyB,CAAE54D,SAAU/f,EAAM+f,SAAWtoE,MAAKyiI,qBAAqB,IAChFrB,EAAmB,CAAES,OAAQP,EAAAA,GAAgBX,gBAC5C,CAACp4E,EAAM+f,WAEV,OAAQ04D,GACN,KAAKM,EAAAA,GAAgBqB,QACnB,OACEl6I,EAAAA,GAAAA,GAACm1I,GAAmB,CAClBC,eAAgBW,EAChBV,aAAcqE,EACdlgI,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgBC,oBAChBD,EAAAA,GAAgBE,kBAChBF,EAAAA,GAAgBK,qBAChBL,EAAAA,GAAgBM,sBAChBrpH,SAAS0oH,GACXh2E,QAASA,IAGf,KAAKq2E,EAAAA,GAAgBC,oBACrB,KAAKD,EAAAA,GAAgBE,kBACrB,KAAKF,EAAAA,GAAgBG,8BACrB,KAAKH,EAAAA,GAAgBI,yBACnB,OACEj5I,EAAAA,GAAAA,GAACwyI,GAAmB,CAClB1yE,MAAOA,EACPgwE,SAAUA,EACV2C,mBAAoBkH,EACpBjH,mBAAoBmH,EACpBlH,cAAeoH,EACfnH,aAAcqH,EACdz3E,QAASo2E,EACTp/H,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgBK,qBAChBL,EAAAA,GAAgBM,sBAChBrpH,SAAS0oH,GACX3F,cAAe0F,IAAkBM,EAAAA,GAAgBI,yBACjDjuH,OAAQw3C,EACRswE,aAAc0G,IAGpB,KAAKX,EAAAA,GAAgBK,qBACrB,KAAKL,EAAAA,GAAgBe,iCACnB,OACE55I,EAAAA,GAAAA,GAAC4vI,GAA0B,CACzBC,KAAK,WACL/vE,MAAOA,EACPgwE,SAAUA,EACVttE,QAASo2E,EACT7I,aAAc0J,EACdjgI,SAAUA,IAGhB,KAAKq/H,EAAAA,GAAgBM,qBACrB,KAAKN,EAAAA,GAAgBiB,iCACnB,OACE95I,EAAAA,GAAAA,GAAC4vI,GAA0B,CACzBC,KAAK,WACL/vE,MAAOA,EACPgwE,SAAUA,EACVttE,QAASo2E,EACT7I,aAAc0J,EACdjgI,SAAUA,IAIhB,KAAKq/H,EAAAA,GAAgBX,aACnB,OACEl4I,EAAAA,GAAAA,GAACo3I,GAAqB,CACpB59H,SAAUA,EACVgpD,QAASo2E,IAIf,QACE,U,2BCzMN,MA+DA,IAAej6I,EAAAA,EAAAA,IA/D4Bw7I,EACzC3gI,WACA+xB,QACA5W,YACAylH,+BACAC,mBACA/qF,cACAivD,OACA1jD,cACArC,WACA8mD,eACA98C,cAEA,MAAO83E,EAAiBC,IAAsBpuI,EAAAA,EAAAA,IAAiB,KACxD0yG,EAAoBC,IAAyB3yG,EAAAA,EAAAA,KAAS,GAEvDY,GAAOyqC,EAAAA,GAAAA,KAEPzR,GAAepmC,EAAAA,EAAAA,IAAa66I,IAC5BH,GAAoBG,IAAgBH,EACtCE,EAAmBxtI,EAAK,0BAExByrD,EAASgiF,IAEV,CAAChiF,EAAU6hF,EAAkBttI,IAE1BkyG,GAAmBt/G,EAAAA,EAAAA,IAAY,KAC/B2/G,GACFA,IAEFi7B,EAAmB,KAClB,CAACj7B,IAOJ,OALAv0F,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,KAIR5iE,EAAAA,GAAAA,IAAA,OAAKE,UAAU,+CAA8CC,SAAA,EAC3DC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,oCAAmCC,UAChDC,EAAAA,GAAAA,GAACpB,GAAAA,EAAc,CAACE,OAAK,EAACD,kBAAmBggH,OAG3C7+G,EAAAA,GAAAA,GAAA,OAAKF,UAAU,+BAA8BC,UAC3CC,EAAAA,GAAAA,GAACk/G,GAAAA,EAAY,CACX3zE,MAAO+uG,GAAmB/uG,EAC1BgzE,KAAMA,EACNjvD,YAAaA,GAAeviD,EAAK,8BACjCqtI,6BAA8BA,EAC9Bv/E,YAAaA,EACbykD,aAAcL,EACdtqF,UAAWA,EACX91B,kBAAmBggH,EACnBU,iBAAkB/lG,EAClBgmG,2BAA4BV,EAC5BtmD,SAAUzyB,WC3BpB,IAAepnC,EAAAA,EAAAA,IAnCuC87I,EACpDjhI,WAAUgpD,cAEV,MAAMz1D,GAAOC,EAAAA,EAAAA,KAEP0tI,GAAY/6I,EAAAA,EAAAA,IAAY,KAC5B6iE,GAAQ,IACP,CAACA,IAIJ,OAFAz3C,EAAAA,GAAAA,GAAe,CAAEvR,WAAUwR,OAAQw3C,KAGjC5iE,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gDAA+CC,SAAA,EAC5DH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAACi4I,GAAAA,EAAY,CACX/3I,KAAMy6I,EAAAA,IACNv6I,OAAQC,GAAAA,EAAeu6I,gBACvB96I,UAAU,2BAGZE,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCuW,IAAI,OAAMtW,SAAC,sBAGzDC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCuW,IAAI,OAAMtW,SAAC,+EAK3DC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,+BAA8BC,UAC3CC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACG,QAAS2sI,EAAU36I,SAAEgN,EAAK,iB,gBCzB1C,MA2CA,IAAepO,EAAAA,EAAAA,IA3C+Bk8I,EAC5CrhI,WAAUgpD,cAEV,MAAM,mBAAEm2E,IAAuB3sI,EAAAA,EAAAA,MACzBe,GAAOC,EAAAA,EAAAA,KAIb,OAFA+d,EAAAA,GAAAA,GAAe,CAAEvR,WAAUwR,OAAQw3C,KAGjC5iE,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gDAA+CC,SAAA,EAC5DH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAAC6nG,GAAAA,EAAuB,CACtBznG,OAAQC,GAAAA,EAAey6I,KACvBvO,WAAYwO,GACZ76I,KAAM,IACNJ,UAAU,2BAGZE,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCuW,IAAI,OAAMtW,SAAC,mCAK3DH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,OAELlF,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBmC,gCAAiCj7I,SAE5FgN,EAAK,sBAER/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,eAELlF,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBoC,kBAAmBl7I,SAE9EgN,EAAK,8BCLhB,IAAepO,EAAAA,EAAAA,IAhC6Bu8I,EAC1C1hI,WAAUgpD,UAASjmB,cAEnB,MAAMxvC,GAAOyqC,EAAAA,GAAAA,KAIb,OAFAzsB,EAAAA,GAAAA,GAAe,CAAEvR,WAAUwR,OAAQw3C,KAGjC5iE,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gDAA+CC,SAAA,EAC5DH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAAC6nG,GAAAA,EAAuB,CACtBznG,OAAQC,GAAAA,EAAey6I,KACvBvO,WAAYwO,GACZ76I,KAAMy6I,EAAAA,IACN76I,UAAU,2BAGZE,EAAAA,GAAAA,GAAA,KAAGF,UAAU,4BAA4BuW,IAAI,OAAMtW,SAChDgN,EAAK,8BAA0BlK,EAAW,CAAE67C,WAAW,EAAMiV,kBAAmB,CAAC,WAEpF3zD,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCuW,IAAI,OAAMtW,SACrDgN,EAAK,8BAA0BlK,EAAW,CAAE67C,WAAW,EAAMiV,kBAAmB,CAAC,cAItF3zD,EAAAA,GAAAA,GAAA,OAAKF,UAAU,+BAA8BC,UAC3CC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACG,QAASwuC,EAAQx8C,SAAEgN,EAAK,2BC+KxC,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IAAM,IAAiCA,EAAO85I,WAD7BxsI,CAlMgCysI,EAClDD,WACA5C,gBACAC,cACAjtG,QACA/xB,WACAmb,YACA0mH,gBACA74E,cAEA,MAAM,YACJ84E,EAAW,cACXC,EAAa,iBACbC,EAAgB,mBAChBC,EAAkB,mBAClB9C,IACE3sI,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,KAEP0uI,GAAoB/7I,EAAAA,EAAAA,IAAY,KACpC07I,EAAc,IACd1C,EAAmB,CAAES,OAAQP,EAAAA,GAAgB8C,uBAC5C,CAACN,IAEEO,GAAoBj8I,EAAAA,EAAAA,IAAagN,IACrC0uI,EAAc1uI,GACdgsI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBgD,8BAC5C,CAACR,IAEES,GAA2Bn8I,EAAAA,EAAAA,IAAY,KAC3C27I,EAAY,CAAEH,aACdE,EAAc,IACd1C,EAAmB,CAAES,OAAQP,EAAAA,GAAgBkD,2BAC5C,CAACV,EAAeF,IAEba,GAA8Br8I,EAAAA,EAAAA,IAAas8I,IAC/CZ,EAAc,KACda,EAAAA,GAAAA,IAAeD,GAAiBjvG,KAAK,KACnC2rG,EAAmB,CAAES,OAAQP,EAAAA,GAAgBsD,6BAC5C,KACDX,EAAiB,CACfjwG,MAAOx+B,EAAK,yCAGf,CAACA,EAAMsuI,IAEJe,GAA0Bz8I,EAAAA,EAAAA,IAAagN,IAC3C0uI,EAAc1uI,GACdgsI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBwD,iCAC5C,CAAChB,IAEEiB,GAAgB38I,EAAAA,EAAAA,IAAas8I,KACjCC,EAAAA,GAAAA,IAAeD,GAAiBjvG,KAAK,KACnCuuG,IACA5C,EAAmB,CAAES,OAAQP,EAAAA,GAAgB0D,WAC5C,KACDf,EAAiB,CACfjwG,MAAOx+B,EAAK,yCAGf,CAACA,IAEJ,OAAQwrI,GACN,KAAKM,EAAAA,GAAgB2D,iBACnB,OACEx8I,EAAAA,GAAAA,GAACk7I,GAAqB,CACpB3+F,QAASm/F,EACTliI,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgB8C,oBAChB9C,EAAAA,GAAgBgD,2BAChBhD,EAAAA,GAAgBkD,yBAChBjsH,SAAS0oH,GACXh2E,QAASA,IAIf,KAAKq2E,EAAAA,GAAgB8C,oBACnB,OACE37I,EAAAA,GAAAA,GAACy8I,GAAoB,CACnBrC,8BAA4B,EAC5B9qF,YAAaviD,EAAK,oBAClB8tD,YAAa9tD,EAAK,YAClByrD,SAAUojF,EACVpiI,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgBgD,2BAChBhD,EAAAA,GAAgBkD,yBAChBjsH,SAAS0oH,GACXh2E,QAASA,IAIf,KAAKq2E,EAAAA,GAAgBgD,2BACnB,OACE77I,EAAAA,GAAAA,GAACy8I,GAAoB,CACnBrC,8BAA4B,EAC5BC,iBAAkBc,EAClB7rF,YAAaviD,EAAK,uBAClB8tD,YAAa9tD,EAAK,YAClB4nB,UAAWA,EACX6jC,SAAUsjF,EACVtiI,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgBkD,yBAChBjsH,SAAS0oH,GACXh2E,QAASA,IAIf,KAAKq2E,EAAAA,GAAgBkD,wBACnB,OACE/7I,EAAAA,GAAAA,GAACy6I,GAA+B,CAC9BjhI,SAAUA,EACVgpD,QAASA,IAIf,KAAKq2E,EAAAA,GAAgB6D,gBACnB,OACE18I,EAAAA,GAAAA,GAAC66I,GAAuB,CACtBrhI,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgBmC,8BAChBnC,EAAAA,GAAgBsD,0BAChBtD,EAAAA,GAAgBwD,8BAChBxD,EAAAA,GAAgBkD,wBAChBlD,EAAAA,GAAgBoC,iBAChBnrH,SAAS0oH,GACXh2E,QAASA,IAIf,KAAKq2E,EAAAA,GAAgBmC,8BACnB,OACEh7I,EAAAA,GAAAA,GAACy8I,GAAoB,CACnBrC,8BAA4B,EAC5B7uG,MAAOA,EACP+zE,aAAcm8B,EACdnsF,YAAaviD,EAAK,0CAClByrD,SAAUwjF,EACVxiI,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgBsD,0BAChBtD,EAAAA,GAAgBwD,8BAChBxD,EAAAA,GAAgBkD,yBAChBjsH,SAAS0oH,GACXh2E,QAASA,IAIf,KAAKq2E,EAAAA,GAAgBsD,0BACnB,OACEn8I,EAAAA,GAAAA,GAACy8I,GAAoB,CACnBrC,8BAA4B,EAC5B9qF,YAAaviD,EAAK,+BAClByrD,SAAU4jF,EACV5iI,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgBwD,8BAChBxD,EAAAA,GAAgBkD,yBAChBjsH,SAAS0oH,GACXh2E,QAASA,IAIf,KAAKq2E,EAAAA,GAAgBwD,8BACnB,OACEr8I,EAAAA,GAAAA,GAACy8I,GAAoB,CACnBrC,8BAA4B,EAC5BC,iBAAkBc,EAClB7rF,YAAaviD,EAAK,kDAClB4nB,UAAWA,EACX6jC,SAAUsjF,EACVtiI,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgBkD,yBAChBjsH,SAAS0oH,GACXh2E,QAASA,IAIf,KAAKq2E,EAAAA,GAAgBoC,gBACnB,OACEj7I,EAAAA,GAAAA,GAACy8I,GAAoB,CACnBrC,8BAA4B,EAC5B7uG,MAAOA,EAAQx+B,EAAKw+B,QAAS1oC,EAC7By8G,aAAcm8B,EACdnsF,YAAaviD,EAAK,0CAClByrD,SAAU8jF,EACV9iI,SAAUA,EACVgpD,QAASA,IAIf,QACE,WChMAm6E,GAAiB,CAAC,GAAI,IAAK,IAAK,IAAM,IAAM,IAAM,KAgFxD,SAASC,GAAYC,EAAkBlwI,GACrC,MAAMmwI,EAAaD,EAAOE,UAAWhoF,GAAUpoD,GAASooD,GAClDioF,EAAYH,EAAOC,EAAa,IAAM,EACtCG,EAAYJ,EAAOC,IAAeD,EAAOA,EAAOl7I,OAAS,GAE/D,OAAOm7I,GADWnwI,EAAQqwI,IAAcC,EAAYD,EAEtD,CAEA,SAAShpI,GAAS6oI,EAAkBjpI,GAClC,MAAMkpI,EAAa5pI,KAAKmI,MAAMzH,GACxBopI,EAAYH,EAAOC,EAAa,IAAM,EAEtCI,EAAaF,IADDH,EAAOC,IAAeD,EAAOA,EAAOl7I,OAAS,IACnBq7I,IAAcppI,EAAWkpI,GACrE,OAAOI,EAAa,IAAMhqI,KAAKZ,MAAM4qI,GAA4C,GAA9BhqI,KAAKZ,MAAM4qI,EAAa,GAC7E,CAEA,UAAev+I,EAAAA,EAAAA,IA9FyBw+I,EACtCrvH,MAAM,EACNT,MACA1gB,QACAwT,WACAypG,WACA/pG,OACA/f,YACAi/F,eACAtxF,WACA2vI,iCAEA,MAAMrwI,GAAOyqC,EAAAA,GAAAA,KAEPqlG,GAAS90I,EAAAA,EAAAA,IAAQ,KACrB,MAAM4Q,EAAS,GACf,IAAK,IAAI6wC,EAAI,EAAGA,EAAImzF,GAAeh7I,OAAQ6nD,IAKzC,GAJImzF,GAAenzF,GAAKn8B,GACtB1U,EAAO3F,KAAK2pI,GAAenzF,IAGzBmzF,GAAenzF,IAAMn8B,EAAK,CAC5B1U,EAAO3F,KAAKqa,GACZ,KACF,CAGF,OAAO1U,GACN,CAAC0U,IAEEygE,GAAevhF,EAAAA,EAAAA,GAAiBuiB,IACpC,MAAM0tE,EAAWl3E,OAAOwJ,EAAMpK,cAAc/X,OAC5Cc,EAASuG,GAAS6oI,EAAQrgD,MAGtB6gD,GAAgBlnI,EAAAA,GAAAA,GACpBrW,EACA,cACAqgB,GAAY,WACZypG,GAAY,WACZ/pG,GAAQ,QAgBV,OACEjgB,EAAAA,GAAAA,IAAA,OAAKE,UAAWu9I,EAAct9I,SAAA,EAZ5BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAiBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAClEC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,YAAYuW,IAAI,OAAMtW,SAAEgN,EAAKy7G,OAAO16F,MACpDluB,EAAAA,GAAAA,IAAA,QAAME,UAAU,uBAAsBC,SAAA,EAClCq9I,IAA+Bp9I,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,gBAC3Ci8G,EAAAA,GAAAA,IAAkBz8G,EAAMiH,GAAS6oI,EAAQD,GAAYC,EAAQlwI,SAEhE3M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,YAAYuW,IAAI,OAAMtW,SAAEgN,EAAKy7G,OAAOn7F,SAQtDztB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,GAAAA,GAAA,OACEF,UAAU,oBACVgG,MAAO,UAAW82I,GAAYC,EAAQlwI,GAASkwI,EAAOl7I,OAAU,UAElE3B,EAAAA,GAAAA,GAAA,SACE8tB,IAAK,EACLT,IAAKwvH,EAAOl7I,OACZo9F,aAAc69C,GAAYC,EAAQ99C,GAClCu+C,KAAK,MACLp8I,KAAK,QACLpB,UAAU,qBACV2N,SAAUqgF,YCCpB,IAAenvF,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAMk8I,EAA4Bl8I,EAAO6yC,UAAUqpG,0BAC7CC,EAAuBD,EAA4BA,EAA4B,IAAO,EACtFE,EAA2Cp8I,EAAO6yC,UAAUwpG,mCAIlE,MAAO,CACLA,mCAJyCD,EACvCA,EAA2C,IAAO,IAIpDD,uBACAG,0BAA2Bt8I,EAAO6yC,UAAUypG,2BAA6BC,EAAAA,MAX3DjvI,CAnEpB,UAA0B,qBACxB6uI,EAAoB,0BACpBG,EAAyB,mCACzBD,EAAkC,2BAClCN,EAA0B,YAC1BS,EAAW,kBACXC,EAAiB,SACjBrwI,IAEA,MAAM,iBAAEm0B,IAAqB51B,EAAAA,EAAAA,MAEvBe,GAAOyqC,EAAAA,GAAAA,KAEPumG,GAAgCxxI,EAAAA,EAAAA,GAAiBI,IACrDc,IAAWd,KAGPqxI,GAA0BzxI,EAAAA,EAAAA,GAAgB,KAC9Cq1B,EAAiB,CAAEQ,eAAgB,sBAGrC,OACExiC,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACtEgN,EAAK,sCAER/M,EAAAA,GAAAA,GAACm9I,GAAiB,CAChBp+C,aAAc++C,EACdhwH,IAAKmwH,EAAAA,IACL5wH,IAAKswH,EACLhxI,MAAOmxI,EACPrwI,SAAUswI,EACVX,2BAA4BA,EAC5BxzB,UAAWwzB,KAEXA,IACAp9I,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLC,MAAM,UACNu6C,OAAK,EACLwkF,mBAAiB,EACjB9sI,UAAU,yBACViO,QAASiwI,EAAwBj+I,UAEjCH,EAAAA,GAAAA,IAAA,QAAME,UAAU,+BAA8BC,SAAA,CAC3CgN,EAAK,sBACN/M,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAAazN,UAAU,qCAIvCs9I,IACCp9I,EAAAA,GAAAA,GAAA,KAAGF,UAAU,mCAAmCuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACjFgN,EAAK8wI,EAAc,2BAA6B,wCAAyC,CACxFK,SAASC,EAAAA,GAAAA,IAAmD,IAArCT,GACvBn/F,QAAQwvC,EAAAA,GAAAA,IACN+vD,EAAoBN,EAAuBE,EAC3C,MACA3wI,EAAKguD,OAEN,CACDrc,WAAW,QAMvB,I,eC3DA,UAAe//C,EAAAA,EAAAA,IAvBf,UAA2B,eAAEy/I,IAC3B,MAAM,iBAAEx8G,IAAqB51B,EAAAA,EAAAA,MACvBe,GAAOC,EAAAA,EAAAA,KACPqxI,GAAyB9xI,EAAAA,EAAAA,GAAgB,IAAMq1B,EAAiB,CAAEQ,eAAgBg8G,KAExF,OACEx+I,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPG,aAAa1iC,EAAAA,GAAAA,GAACs+I,GAAAA,EAAQ,CAACx+I,UAAU,0BAA0BoB,KAAK,UAAUhB,KAAK,QAC/E6N,QAASswI,EAAuBt+I,SAE/BgN,EAAK,6BAER/M,EAAAA,GAAAA,GAAA,KACEF,UAAU,gDACVuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAEnCgN,EAAK,0CAId,GCFA,IAAepO,EAAAA,EAAAA,IAlBf,UAA6B,MAAEuO,EAAK,UAAEqtH,IACpC,MAAMxtH,GAAOC,EAAAA,EAAAA,MACP,iBAAE20B,IAAqB31B,EAAAA,EAAAA,MAE7B,OACEpM,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GCrBM,WDuBfokH,GCvBiF,YDyBnFxsH,QAASA,IAAM4zB,EAAiB,CAAE/gC,QAASmM,EAAK,kCAAmChN,SAAA,EAEnFC,EAAAA,GAAAA,GAAA,QAAAD,SAAOmN,KACPlN,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAAazN,UC5BsC,eD+BpE,GEoMA,IAAenB,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAsBtN,IACxC,MACEo1C,UAAU,QACRxP,IAEA5lC,EACEk9I,GAA2BC,EAAAA,EAAAA,KAA+Bn9I,GAE1Do9I,EAA+Bp9I,EAAOo1C,SAASxP,QAAQy3G,gBAAgB/2G,aAAahmC,QAAU,EAEpG,MAAO,CACLg9I,wCAAwCC,EAAAA,EAAAA,KAAuCv9I,GAC/Ew9I,wBAAyB9zI,QAAQwzI,GACjCA,yBAA0BA,GAA4BO,EAAAA,IACtDj/G,sBAAsB0B,EAAAA,EAAAA,KAA2BlgC,GACjD09I,kCAAmC19I,EAAO6yC,UAAU6qG,kCACpDC,qBAAsB39I,EAAO6yC,UAAU+qG,2BACvCR,+BACAx3G,YAlBgBt4B,CAtLpB,UAAyB,SACvB6K,EAAQ,kCACRulI,EAAiC,qBACjCC,EAAoB,uCACpBL,EAAsC,wBACtCE,EAAuB,yBACvBN,EAAwB,qBACxB1+G,EAAoB,6BACpB4+G,EAA4B,QAC5Bj8E,EAAO,QACPv7B,IAEA,MAAM,4BAAE2wF,EAA2B,mBAAE+gB,EAAkB,iBAAEh3G,IAAqB31B,EAAAA,EAAAA,MACxEurC,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,KAEP0nG,EAAiCr/G,GAAwBk/G,EACzD3B,EAA6Bv9G,GAAwBm/G,GACpDlB,EAAmBqB,IAAwBhzI,EAAAA,EAAAA,IAAiBoyI,IAC5Da,EAAsBC,IAA2BlzI,EAAAA,EAAAA,KAAS,GAE3DitH,GAAgBrxH,EAAAA,EAAAA,IAAQ,IACxB82I,EAAgC,sBAChCF,EAA+C,uBAC5C,YACN,CAACE,EAAyBF,KAE7B/4G,EAAAA,GAAAA,GAAsB,EAAE05G,MAEnBF,QAA8Cv8I,IAAtBy8I,GACJ,cAAlBlmB,GACAA,IAAkBkmB,IAEkB,cAAnCr4G,EAAQs4G,YAAY/4G,YACtB7E,EAAiB,CACf/gC,QAASmM,EAAK,0BACdjL,OAAQ,CACNA,OAAQ,qBACR2tI,QAAS,CAAE2J,OAAQP,EAAAA,GAAgB2G,oBAErCC,WAAY,CAAEh6H,IAAK,UACnBtM,SAAU,MAGwB,cAAlC8tB,EAAQy4G,WAAWl5G,YACrB7E,EAAiB,CACf/gC,QAASmM,EAAK,yBACdjL,OAAQ,CACNA,OAAQ,qBACR2tI,QAAS,CAAE2J,OAAQP,EAAAA,GAAgB8G,mBAErCF,WAAY,CAAEh6H,IAAK,UACnBtM,SAAU,MAGdkmI,GAAwB,KAEzB,CAACjmB,EAAeylB,EAAyB53G,EAASl6B,EAAMqyI,IAE3D,MAAM5xI,GAAUzF,EAAAA,EAAAA,IAAQ,IACf,CACL,CAAE4E,MAAO,YAAaO,MAAOqqC,EAAQ,iBACrC,CACE5qC,MAAO,uBACPO,MAAOgyI,EACL3nG,EAAQ,sCAERv3C,EAAAA,GAAAA,GAAC4/I,GAAmB,CAClB1yI,MAAOqqC,EAAQ,qCACfgjF,UAA6B,yBAAlBnB,IAGfymB,QAASX,EACTY,wBAAwB,GAE1B,CACEnzI,MAAO,sBACPO,MAAOkwI,EACLrwI,EAAK,6BAEL/M,EAAAA,GAAAA,GAAC4/I,GAAmB,CAClB1yI,MAAOH,EAAK,4BACZwtH,UAA6B,wBAAlBnB,IAGfymB,QAASzC,EACT0C,wBAAwB,IAG3B,CAACvoG,EAASxqC,EAAMmyI,EAAgC9B,EAA4BhkB,IAEzEtrC,GAAevhF,EAAAA,EAAAA,GAAiBwzI,IACpCnoB,EAA4B,CAC1B+mB,uCAAyD,yBAAjBoB,EAExCxB,yBAA2C,wBAAjBwB,EAAyCjC,EAAoB,SAIrFkC,GAA2C70H,EAAAA,GAAAA,GAAsBxe,IACrEirH,EAA4B,CAC1B2mB,yBAA0B5xI,KAE3B,CAACirH,GAA8B,KAAK,GAEjCmmB,GAAgCp+I,EAAAA,EAAAA,IAAagN,IACjDwyI,EAAqBxyI,GACrBqzI,EAAyCrzI,IACxC,CAACwyI,EAAsBa,KAgC1Bj1H,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAGV,MAAMy9E,GAAqBl4I,EAAAA,EAAAA,IAAQ,IACGgF,EAAhC8xI,EAAqC,sCAC7B,gDACX,CAACA,EAAyB9xI,IAE7B,OACEnN,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SACzEw3C,EAAQ,2BAEXv3C,EAAAA,GAAAA,GAACsN,GAAAA,EAAU,CACTC,KAAK,mBACLC,QAASA,EACTC,SAAUqgF,EACVpgF,SAAU0rH,KAEZp5H,EAAAA,GAAAA,GAAA,KAAGF,UAAU,mCAAmCuW,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SACpFkgJ,OAGc,wBAAlB7mB,IACCp5H,EAAAA,GAAAA,GAAA,OAAKF,UAAU,gCAA+BC,UAC5CC,EAAAA,GAAAA,GAACkgJ,GAAgB,CACf9C,2BAA4BA,EAC5BU,kBAAmBA,EACnBrwI,SAAUswI,MAIfX,GAAgD,wBAAlBhkB,GAjEnC,WACE,MAAM+mB,EAAgB1B,EAClBlnG,EAAQ,QAASknG,EAA8B,KADE1xI,EAAK,2BAG1D,OACEnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SACzEgN,EAAK,qBAER/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPm/E,QAAM,EACNzuG,KAAK,cAELlF,QAASA,KACP4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBuH,yBAC7CrgJ,UAEFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,EAAK,6CAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAEtBogJ,WAOd,CAqC8EE,IACxExgH,GAA0C,wBAAlBu5F,IACrBp5H,EAAAA,GAAAA,GAACsgJ,GAAiB,CAAClC,eAAe,sBAG7C,IC/Ne,SAASmC,GAAeC,GACrC,MAAMC,EAAWD,EAAQC,SAASnzF,cAC5BozF,EAASF,EAAQG,YAAYrzF,cAC7BszF,EAAgBJ,EAAQI,cAActzF,cAE5C,OAAIozF,EAAO5wH,SAAS,QACX,OAGL4wH,EAAO5wH,SAAS,YAAc4wH,EAAO5wH,SAAS,cACzC,SAEL4wH,EAAO5wH,SAAS,SACX,QAEL4wH,EAAO5wH,SAAS,WACX,UAEL4wH,EAAO5wH,SAAS,UACX,SAEL4wH,EAAO5wH,SAAS,WACX,UAEL4wH,EAAO5wH,SAAS,SACX,QAEL4wH,EAAO5wH,SAAS,kBACX,UAEL2wH,EAAS3wH,SAAS,WACb,UAGP4wH,EAAO5wH,SAAS,WACb4wH,EAAO5wH,SAAS,SAChB2wH,EAAS3wH,SAAS,QAClB2wH,EAAS3wH,SAAS,UAClB8wH,EAAc9wH,SAAS,SAEnB,QAEL2wH,EAAS3wH,SAAS,WAAa8wH,EAAc9wH,SAAS,UACjD,SAEL2wH,EAAS3wH,SAAS,UAAY8wH,EAAc9wH,SAAS,SAChD,QAEL2wH,EAAS3wH,SAAS,YAAc8wH,EAAc9wH,SAAS,WAClD,UAGF,SACT,CCvDA,UAAgB,sBAAwB,WAAW,sBAAwB,WAAW,WAAa,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,kBAAoB,WAAW,gBAAkB,WAAW,kBAAoB,WAAW,gBAAkB,WAAW,mBAAqB,WAAW,iBAAmB,WAAW,iBAAmB,WAAW,eAAiB,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,kBAAoB,WAAW,gBAAkB,WAAW,kBAAoB,WAAW,gBAAkB,WAAW,mBAAqB,WAAW,iBAAmB,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,mBAAqB,WAAW,iBAAmB,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,iBAAmB,WAAW,eAAiB,WAAW,MAAQ,WAAW,KAAO,WAAW,KAAO,WAAW,IAAM,WAAW,aAAe,WAAW,WAAa,WAAW,aAAe,YC+IrpC,SAAS+wH,GAAYL,GACnB,MAAO,CAACA,EAAQM,OAAQN,EAAQzlB,SAASp9F,OAAO5yB,SAAS4b,KAAK,KAChE,CAEA,UAAehoB,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAqB,CAACtN,GAAUirC,WAC3C,CACLk0G,QAASl0G,EAAOjrC,EAAO0/I,eAAeC,OAAO10G,QAAQzpC,IAFrC8L,CArHqCsyI,EACvDt1I,SAAQ60I,UAAS30I,cAEjB,MAAM,sBAAEq1I,EAAqB,uBAAEC,IAA2Bn1I,EAAAA,EAAAA,MACpDe,GAAOyqC,EAAAA,GAAAA,KAEP4pG,GAAmBjxG,EAAAA,GAAAA,GAAiBqwG,GAAS,GAE7Ca,GAA+B1hJ,EAAAA,EAAAA,IAAY,KAC/CuhJ,EAAsB,CACpB50G,KAAMk0G,EAASl0G,KACfg1G,uBAAwBd,EAASc,yBAElC,CAACJ,EAAuBV,IAErBe,GAAyB5hJ,EAAAA,EAAAA,IAAY,KACzCuhJ,EAAsB,CACpB50G,KAAMk0G,EAASl0G,KACfk1G,iBAAkBhB,EAASgB,mBAE5B,CAACN,EAAuBV,IAErBiB,GAA8B9hJ,EAAAA,EAAAA,IAAY,KAC9CwhJ,EAAuB,CAAE70G,KAAMk0G,EAASl0G,OACxCzgC,KACC,CAACA,EAAS20I,EAASW,IAEtB,GAAKC,EAqBL,OACExhJ,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJi7B,QAjBAzoC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,yBAAyBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAC1EC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC0E,OAAK,EAACzE,MAAM,cAAc3N,KAAK,UAAUqS,UAAWxF,EAAK,SAAUgB,QAASlC,EAAQ9L,UAC1FC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAEbvN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SAAEgN,EAAK,0BACnC/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLC,MAAM,SACNE,QAAS0zI,EACT3hJ,WAAWqW,EAAAA,GAAAA,GAAe,sBAAuBqH,GAAOkkI,cAAc3hJ,SAErEgN,EAAK,uCAQVpB,OAAQA,EACRqoE,gBAAc,EACdnoE,QAASA,EACT/L,UAAW0d,GAAOyjI,sBAAsBlhJ,SAAA,EAExCC,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GACdqH,GAAOmkI,WACPP,GAAoB5jI,GAAO,eAAe+iI,GAAea,UAG3DphJ,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAOrQ,MAAOkJ,IAAI,OAAMtW,SAAEqhJ,GAAkBT,eAC3D3gJ,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOyV,KAAM,aAAYlmB,EAAK,2BAA2BhN,UACtE09F,EAAAA,GAAAA,IAAqD,IAA9B2jD,EAAiBQ,WAAmB70I,EAAKguD,SAGnEn7D,EAAAA,GAAAA,IAAA,MAAIE,UAAW0d,GAAOqkI,IAAI9hJ,SAAA,EACxBC,EAAAA,GAAAA,GAAA,MAAAD,SAAKgN,EAAK,wBACVnN,EAAAA,GAAAA,IAAA,MAAAG,SAAA,CACGqhJ,GAAkB55E,QAClB,IACA45E,GAAkBU,WAAW,IAE7B,IACAV,GAAkBX,SAClB,IACAW,GAAkBR,iBAEpBQ,GAAkBW,KACjBniJ,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAAD,SAAKgN,EAAK,uBACV/M,EAAAA,GAAAA,GAAA,MAAAD,SAAKqhJ,EAAiBW,SAI1B/hJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKgN,EAAK,6BACV/M,EAAAA,GAAAA,GAAA,MAAAD,SAAKqhJ,GAAoBP,GAAYO,SAGvCphJ,EAAAA,GAAAA,GAAA,KAAGF,UAAW0d,GAAOwkI,KAAKjiJ,SAAEgN,EAAK,2BAEjC/M,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAOykI,aAAaliJ,SAAEgN,EAAK,kCAE1CnN,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAACx0B,QAASszI,EAA6BthJ,SAAA,EAC9CC,EAAAA,GAAAA,GAAA,QAAMF,UAAW0d,GAAO0kI,WAAWniJ,SAAEgN,EAAK,iCAC1C/M,EAAAA,GAAAA,GAAC8pC,GAAAA,EAAQ,CACPjqC,GAAG,iBACHqN,MAAM,KACNg8B,QAASk4G,EAAiBE,4BAG9B1hJ,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAACx0B,QAASwzI,EAAuBxhJ,SAAA,EACxCC,EAAAA,GAAAA,GAAA,QAAMF,UAAW0d,GAAO0kI,WAAWniJ,SAAEgN,EAAK,gCAC1C/M,EAAAA,GAAAA,GAAC8pC,GAAAA,EAAQ,CACPjqC,GAAG,eACHqN,MAAM,KACNg8B,QAASk4G,EAAiBI,2BC+IpC,SAASX,GAAYL,GACnB,MAAO,CAACA,EAAQM,OAAQN,EAAQzlB,SAASp9F,OAAO5yB,SAAS4b,KAAK,KAChE,CAEA,UAAehoB,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,GAAiCA,EAAO0/I,eADvBpyI,CA7PsCwzI,EACxD3oI,WACAgpD,UACAw+E,SACAoB,gBACAC,cAEA,MAAM,uBACJlB,EAAsB,2BACtBmB,EAA0B,iBAC1BC,IACEv2I,EAAAA,EAAAA,MAEEurC,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,MACNgrG,EAAiCC,EAA+BC,IAAkCzjJ,EAAAA,EAAAA,MAClG0jJ,EAAmBC,IAAwBz2I,EAAAA,EAAAA,OAC3ConD,EAAaxsB,EAAWC,IAAc/nC,EAAAA,EAAAA,KAEvC4jJ,GAAqB96I,EAAAA,EAAAA,IAAQ,KAEjC,QAAgBlF,IAAZw/I,EAIJ,OAAIA,GAAW,EACN,IAGLA,GAAW,GACN,KAGLA,GAAW,GACN,KAGLA,GAAW,IACN,MAGLA,EAAU,IACL,WADT,GAKC,CAACA,IAEES,GAAyB/6I,EAAAA,EAAAA,IAAQ,KACrC,MAAMyF,EAAU,CAAC,CACfN,MAAOH,EAAK,QAAS,CAAEqmB,MAAO,GAAK,CAAE6sC,YAAa,IAClDtzD,MAAO,KACN,CACDO,MAAOH,EAAK,SAAU,CAAEqmB,MAAO,GAAK,CAAE6sC,YAAa,IACnDtzD,MAAO,MACN,CACDO,MAAOH,EAAK,SAAU,CAAEqmB,MAAO,GAAK,CAAE6sC,YAAa,IACnDtzD,MAAO,MACN,CACDO,MAAOH,EAAK,SAAU,CAAEqmB,MAAO,GAAK,CAAE6sC,YAAa,IACnDtzD,MAAO,QAQT,OANI01I,GAAWA,GAAW,KACxB70I,EAAQwF,KAAK,CACX9F,MAAOH,EAAK,QAAS,CAAEqmB,MAAO,GAAK,CAAE6sC,YAAa,IAClDtzD,MAAO,QAGJa,GACN,CAACT,EAAMs1I,IAEJZ,GAA8B9hJ,EAAAA,EAAAA,IAAa2sC,IAC/C60G,EAAuB,CAAE70G,UACxB,CAAC60G,IAEE4B,GAA6BpjJ,EAAAA,EAAAA,IAAY,KAC7C+iJ,IACAJ,KACC,CAACI,EAAgCJ,IAE9BU,GAAyBrjJ,EAAAA,EAAAA,IAAa2sC,IAC1Cs2G,EAAqBt2G,GACrBvF,KACC,CAACA,IAEEk8G,GAA0BtjJ,EAAAA,EAAAA,IAAY,KAC1CijJ,OAAqB//I,GACrBmkC,KACC,CAACA,IAEEk8G,GAAyBvjJ,EAAAA,EAAAA,IAAagN,IAC1C41I,EAAiB,CAAEpqC,KAAM7yF,OAAO3Y,MAC/B,CAAC41I,IAEEY,GAAiBp7I,EAAAA,EAAAA,IAAQ,KAC7B,MAAMq7I,EAAqBhB,EAAc5sG,KAAMlJ,GAAS00G,EAAO10G,GAAM+2G,WAErE,OAAOD,EAAqBpC,EAAOoC,QAAsBvgJ,GACxD,CAACm+I,EAAQoB,IAENkB,GAAqBv7I,EAAAA,EAAAA,IAAQ,IAC1Bq6I,EAAczkH,OAAQ2O,IAAU00G,EAAO10G,GAAM+2G,WACnD,CAACrC,EAAQoB,IACNmB,EAAmBx4I,QAAQu4I,EAAmB3hJ,QA6HpD,OA3HAopB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,KA0HR5iE,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wDAAuDC,SAAA,CACnEojJ,IAxHyB3C,EAwHc2C,GAtHxCvjJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACtEgN,EAAK,iCAGR/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAACm/E,QAAM,EAACj/E,UAAQ,EAACxvB,KAAM,UAAUstI,GAAeC,KAAYjjD,cAAc,cAAax9F,UAC9FH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2BAA2BuW,IAAI,OAAMtW,SAAA,EAClDC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAQuW,IAAI,OAAMtW,SAAEygJ,EAAQG,eAC5C/gJ,EAAAA,GAAAA,IAAA,QAAME,UAAU,uBAAsBC,SAAA,CACnCygJ,EAAQh5E,QACR,IACAg5E,EAAQsB,WAAW,IAEnB,IACAtB,EAAQC,SACR,IACAD,EAAQI,kBAEXhhJ,EAAAA,GAAAA,IAAA,QAAME,UAAU,WAAUC,SAAA,CACvBygJ,EAAQuB,GACR,IAAI,IAEJ,IACAlB,GAAYL,WAKlB+C,IACCvjJ,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPziC,UAAU,2BACVmT,KAAK,OACL0M,QAAM,EACN+hG,QAAM,EACN3zG,QAAS00I,EAA8B1iJ,SAEtCgN,EAAK,8BAmFXw2I,IA5EwBC,EA4EgBF,GA1EzC1jJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACtEgN,EAAK,mBAGPy2I,EAAc/vI,IAuBrB,SAAuBgwI,GACrB,MAAMjD,EAAUQ,EAAOyC,GAEvB,OACEzjJ,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAEP5iB,QAAM,EACN+hG,QAAM,EACNh9D,eAAgB,CAAC,CACfv3C,MAAOJ,EAAK,oBACZkG,KAAM,OACNI,aAAa,EACb0xC,QAASA,KACP08F,EAA4BjB,EAAQl0G,SAGxCr5B,KAAM,UAAUstI,GAAeC,KAC/BjjD,cAAc,cACdxvF,QAASA,KAAQi1I,EAAuBxC,EAAQl0G,OAASvsC,UAEzDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2BAA2BuW,IAAI,OAAMtW,SAAA,EAClDC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,OAAMC,UAAEulI,EAAAA,GAAAA,IAAoB/tF,EAA8B,IAArBipG,EAAQoB,eAC7D5hJ,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEygJ,EAAQG,eACjC/gJ,EAAAA,GAAAA,IAAA,QAAME,UAAU,uBAAsBC,SAAA,CACnCygJ,EAAQh5E,QACR,IACAg5E,EAAQsB,WAAW,IAEnB,IACAtB,EAAQC,SACR,IACAD,EAAQI,kBAEXhhJ,EAAAA,GAAAA,IAAA,QAAME,UAAU,WAAUC,SAAA,CACvBygJ,EAAQuB,GACR,IACAlB,GAAYL,UA/BZA,EAAQl0G,KAoCnB,QAzDI1sC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACtEgN,EAAK,gCAGR/M,EAAAA,GAAAA,GAAA,KAAGF,UAAU,mCAAkCC,SAAEgN,EAAK,oBACtD/M,EAAAA,GAAAA,GAACsN,GAAAA,EAAU,CACTC,KAAK,cACLC,QAASs1I,EACTp1I,SAAUm1I,EACVp1I,SAAUy1I,OAsDbK,IACCvjJ,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQ62I,EACR32I,QAAS62I,EACT5tI,KAAM/H,EAAK,sBACXu2B,aAAcv2B,EAAK,wBACnBw2B,eAAgBw/G,EAChBv/G,sBAAoB,EACpBkgH,oBAAkB,KAGtB1jJ,EAAAA,GAAAA,GAACihJ,GAAqB,CAACt1I,OAAQ4nD,EAAajnB,KAAMq2G,EAAmB92I,QAASo3I,OAzFlF,IAA6BO,EA7CChD,KC5IhC,GAAgF,WCsGhF,IAAe7hJ,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAqB,CAACtN,GAAUirC,WAClD,MAAMk0G,EAAUl0G,EAAOjrC,EAAOsiJ,kBAAkB3C,OAAO10G,QAAQzpC,EAG/D,MAAO,CACL29I,UACA3tF,IAJU2tF,EAAUn/I,EAAOqlC,MAAMC,KAAK65G,EAAQhqF,YAAS3zD,IAFvC8L,CAzEqCi1I,EACvDj4I,SACA60I,UACA3tF,MACAhnD,cAEA,MAAM,0BAAEg4I,IAA8B73I,EAAAA,EAAAA,MAChCe,GAAOC,EAAAA,EAAAA,KAEPo0I,GAAmBjxG,EAAAA,GAAAA,GAAiBqwG,GAAS,GAC7CsD,GAAe3zG,EAAAA,GAAAA,GAAiB0iB,GAAK,GAErC4uF,GAA8B9hJ,EAAAA,EAAAA,IAAY,KAC9CkkJ,EAA0B,CAAEv3G,KAAMk0G,EAASl0G,OAC3CzgC,KACC,CAACA,EAAS20I,EAASqD,IAEtB,GAAKzC,EAqBL,OACExhJ,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJi7B,QAjBAzoC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,yBAAyBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAC1EC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC0E,OAAK,EAACzE,MAAM,cAAc3N,KAAK,UAAUqS,UAAWxF,EAAK,SAAUgB,QAASlC,EAAQ9L,UAC1FC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAEbvN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SAAEgN,EAAK,uBACnC/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLC,MAAM,SACNE,QAAS0zI,EACT3hJ,WAAWqW,EAAAA,GAAAA,GAAe,sBD5DwN,YC4D5KpW,SAErEgN,EAAK,4BAQVpB,OAAQA,EACRqoE,gBAAc,EACdnoE,QAASA,EACT/L,UDzEiB,WCyEMC,SAAA,EAEvBC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACLh0B,UD5EmC,WC6EnCi0B,KAAM+vH,EACN5jJ,KAAK,UAEN4jJ,IAAgB9jJ,EAAAA,GAAAA,GAAC+uD,GAAAA,EAAa,CAACjvD,UDhFwB,WCgFCi0B,KAAM+vH,KAC/D9jJ,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAYzd,SACzBqhJ,GAAkB7qF,UAGrB32D,EAAAA,GAAAA,IAAA,MAAIE,UDrFuF,WCqFjEC,SAAA,EACxBC,EAAAA,GAAAA,GAAA,MAAAD,SAAKgN,EAAK,gCACV/M,EAAAA,GAAAA,GAAA,MAAAD,SACGqhJ,GAAkB2C,WAGrB/jJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKgN,EAAK,wBACV/M,EAAAA,GAAAA,GAAA,MAAAD,SAAKqhJ,GAAkBW,MAEvB/hJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKgN,EAAK,8BACV/M,EAAAA,GAAAA,GAAA,MAAAD,SAAKqhJ,GAAkBN,aAEzB9gJ,EAAAA,GAAAA,GAAA,KAAGF,UAAW0d,GAAYzd,SAAEgN,EAAK,0CCjGvC,IAAgB,OAAS,WAAW,aAAa,WAAW,UAAY,WAAW,SAAW,YCoK9F,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,OAAE2/I,EAAM,cAAEoB,GAAkB/gJ,EAAOsiJ,kBACzC,MAAO,CACL3C,SACAoB,kBALczzI,CApIsCq1I,EACxDxqI,WACAwnI,SACAoB,gBACA5/E,cAEA,MAAM,0BACJqhF,EAAyB,8BACzBI,IACEj4I,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MACNw1I,EAAiCC,EAA+BC,IAAkCzjJ,EAAAA,EAAAA,MAClGilJ,EAAmBC,IAAwBh4I,EAAAA,EAAAA,OAC3ConD,EAAaxsB,EAAWC,IAAc/nC,EAAAA,EAAAA,KAEvCmlJ,GAA2BzkJ,EAAAA,EAAAA,IAAa2sC,IAC5Cu3G,EAA0B,CAAEv3G,UAC3B,CAACu3G,IAEEQ,GAAyB1kJ,EAAAA,EAAAA,IAAY,KACzC+iJ,IACAuB,KACC,CAACvB,EAAgCuB,IAE9BjB,GAAyBrjJ,EAAAA,EAAAA,IAAa2sC,IAC1C63G,EAAqB73G,GACrBvF,KACC,CAACA,IAEEu9G,GAA0B3kJ,EAAAA,EAAAA,IAAY,KAC1CwkJ,OAAqBthJ,GACrBmkC,KACC,CAACA,IAcJ,IAAwBw8G,EAqDxB,IAhEAj5I,EAAAA,EAAAA,IAAU,KACH63I,EAAczgJ,QACjB6gE,KAED,CAACA,EAAS4/E,KAEbr3H,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAwDL4/E,EAAczgJ,OAEnB,OACE/B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPziC,UAAU,2BACVmT,KAAK,OACL0M,QAAM,EACN+hG,QAAM,EACN3zG,QAAS00I,EAA8B1iJ,SAEtCgN,EAAK,sCAER/M,EAAAA,GAAAA,GAAA,KAAGF,WAAWqW,EAAAA,GAAAA,GAAe,4BAA6BqH,GAAO+mI,WAAWxkJ,SACzEgN,EAAK,mCApEUy2I,EAuEJpB,GArEhBxiJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACtEgN,EAAK,sBAGPy2I,EAAc/vI,IAKrB,SAAuBgwI,GACrB,MAAMjD,EAAUQ,EAAOyC,GACjB5wF,GAAM3mB,EAAAA,EAAAA,MAAYxF,MAAMC,KAAK65G,EAAQhqF,OAE3C,OACE52D,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAEP5iB,QAAM,EACN+hG,QAAM,EACNh9D,eAAgB,CAAC,CACfv3C,MAAO,YACP8F,KAAM,OACNI,aAAa,EACb0xC,QAASA,KACPq/F,EAAyB5D,EAAQl0G,SAIrCv+B,QAASA,IAAMi1I,EAAuBxC,EAAQl0G,MAAMvsC,SAAA,EAEpDC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CAACh0B,UAAW0d,GAAO5b,OAAQmyB,KAAM8+B,EAAK3yD,KAAK,UAClDN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2BAA2BuW,IAAI,OAAMtW,SAAA,EAClDC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,OAAMC,UAAEulI,EAAAA,GAAAA,IAAoBv4H,EAA2B,IAArByzI,EAAQoB,cACzD/uF,IAAO7yD,EAAAA,GAAAA,GAAC+uD,GAAAA,EAAa,CAACjvD,UAAW0d,GAAOrQ,MAAO4mB,KAAM8+B,KACtDjzD,EAAAA,GAAAA,IAAA,QAAME,WAAWqW,EAAAA,GAAAA,GAAe,WAAY,QAAS,QAASqH,GAAOijI,UAAU1gJ,SAAA,CAC5EygJ,EAAQjqF,OAAO,IAEfiqF,EAAQuD,QAAQ,IAEhBvD,EAAQC,aAEX7gJ,EAAAA,GAAAA,IAAA,QAAME,WAAWqW,EAAAA,GAAAA,GAAe,WAAYqH,GAAOoV,UAAU7yB,SAAA,CAC1DygJ,EAAQuB,GACR,IACAvB,EAAQM,eA5BRN,EAAQl0G,KAiCnB,QAqBItsC,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQ62I,EACR32I,QAAS62I,EACTv1I,MAAOJ,EAAK,mCACZ+H,KAAM/H,EAAK,yBACXw2B,eAAgB8gH,EAChB7gH,sBAAoB,KAEtBxjC,EAAAA,GAAAA,GAAC4jJ,GAAqB,CAACj4I,OAAQ4nD,EAAajnB,KAAM43G,EAAmBr4I,QAASy4I,UC/DpF,IAAe3lJ,EAAAA,EAAAA,IApEsB6lJ,EACnCziD,aACAxhF,SACAzgB,YACAmiG,sBACAl0F,cAEA,MAAMhB,GAAOC,EAAAA,EAAAA,KAEPkkG,EAAenP,GAAY7e,WAAW,GAEtCuhE,GAAkBl4I,EAAAA,EAAAA,GAAgB,KAClC2kG,GAAcnjG,EAAQmjG,KAG5B,GAAKnP,GAAY7e,SAqCjB,OACEtjF,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPziC,WAAWqW,EAAAA,GAAAA,GAAe,iBAAkB,aAAcrW,GAC1DgG,MAAO,gBACP28B,UAAWyuE,EACXnjG,QAAS02I,EAAgB1kJ,SAAA,CAtC7B,WACE,GAAKgiG,EACL,OAAIA,EAAWI,eAAiB+O,GAE5BlxG,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL2E,UAAWwvF,EAAW50F,MACtBU,MAAM,cACNgkB,MAAO9kB,EAAK8kB,MAAM9xB,UAElBC,EAAAA,GAAAA,GAAC8hG,GAAe,CACdC,WAAYA,EACZ7hG,KAAMwkJ,EAAAA,IACNnkI,OAAQA,EACR0hF,oBAAqBA,OAMzBjiG,EAAAA,GAAAA,GAACikG,GAAa,CACZ7hB,QAAS8uB,EACThxG,KAAMwkJ,EAAAA,IACNv3I,MAAO40F,EAAW50F,MAClBoT,OAAQA,EACR0hF,oBAAqBA,EACrBiC,eAAa,EACbrkE,sBAAoB,EACpB6kE,cAAU7hG,GAIlB,CASK8hJ,IACD/kJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,QAAOC,SAAEgiG,EAAW50F,SACnCnN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,SAAEgN,EAAK,2BAA4Bg1F,EAAW3uE,MAAO,eCItF,IAAez0B,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACQ,KACF2yD,EAAAA,GAAAA,IAAK3yD,EAAOo1C,SAASmuG,MAAO,CAC7B,6BAEFC,kBAAmBxjJ,EAAO+rG,aAAaa,MAAMC,OAC7Cf,gBAAiB9rG,EAAO6hF,SAASgqB,SACjC43C,uBAAuB12C,EAAAA,EAAAA,KAA4B/sG,KARrCsN,CA9DmCo2I,EACrDvrI,WACAqrI,oBACA13C,kBACA63C,2BACAF,wBACAtiF,cAEA,MAAM,eAAEsuB,EAAc,iBAAEutC,IAAqBryH,EAAAA,EAAAA,MACvCe,GAAOC,EAAAA,EAAAA,KAEPi4I,GAAqB57I,EAAAA,EAAAA,OACnBg3F,QAASoB,IAAiCd,EAAAA,GAAAA,IAAwB,CAAEC,QAASqkD,KAErFl6H,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAGV,MAAM0iF,GAAwBvlJ,EAAAA,EAAAA,IAAayiF,IACzC0O,EAAe,CACbnB,eAAgBvN,EAAQuN,kBAEzB,CAACmB,IAEEq0D,GAAiCxlJ,EAAAA,EAAAA,IAAa68F,IAClD6hC,EAAiB,CAAE2mB,yBAA0BxoD,KAC5C,CAAC6hC,IAEE+mB,GAAkBr9I,EAAAA,EAAAA,IAAQ,IAC9B88I,GAAqBhiG,OAAO0K,QAAOyG,EAAAA,GAAAA,IAAKm5C,EAAiB03C,IACxD,CAACA,EAAmB13C,IAEvB,OACEntG,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iCAAgCC,SAC5CqlJ,IACCxlJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,wBACZm8B,QAAS87G,EACTnuF,QAASsuF,KAEXnlJ,EAAAA,GAAAA,GAAA,OAAKF,UAAU,OAAOmU,IAAKgxI,EAAmBllJ,SAC3CqlJ,EAAgB3xI,IAAKsuF,IACpB/hG,EAAAA,GAAAA,GAACwkJ,GAAc,CAEbziD,WAAYA,EACZE,oBAAqBR,EACrB1zF,QAASm3I,EACT3kI,QAASukI,GAJJ/iD,EAAWliG,QAQtBG,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCuW,IAAI,OAAMtW,UACrDi0B,EAAAA,GAAAA,GAAWjnB,EAAK,gBAAiB,CAAC,oBC2E/C,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACQ2yD,EAAAA,GAAAA,IAAK3yD,EAAOo1C,SAASmuG,MAAO,CACjC,+BACA,iCACA,2BACA,6BACA,+BACA,iCACA,2BACA,6BACA,8BACA,gCACA,0BACA,4BACA,0BAfcj2I,CA9HmC02I,EACrD7rI,WACAgpD,UACA8iF,+BACAC,iCACAC,2BACAC,6BACAC,+BACAC,iCACAC,2BACAC,6BACAC,8BACAC,gCACAC,0BACAC,4BACAC,4BAEA,MAAM,iBAAE7nB,IAAqBryH,EAAAA,EAAAA,MAEvBe,GAAOyqC,EAAAA,GAAAA,MAEbzsB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAGV,MAAM2jF,GAAyBxmJ,EAAAA,EAAAA,IAAagN,GACnCI,EAAK,4BAA6B,CACvC4iB,MAAO5iB,EAAK,aAAc,CAAEqmB,MAAOgzH,EAAAA,IAAgCz5I,OAEpE,CAACI,IAEEs5I,GAAuB1mJ,EAAAA,EAAAA,IAAagN,IACxC0xH,EAAiB,CAAE6nB,sBAAuBE,EAAAA,IAAgCz5I,MACzE,CAAC0xH,IAEJ,SAASioB,IACP,MAAM35I,EAAQy5I,EAAAA,IAAgChqH,QAAQ8pH,GAEtD,OACElmJ,EAAAA,GAAAA,GAAA,OAAKF,UAAU,OAAMC,UACnBC,EAAAA,GAAAA,GAAC4f,GAAAA,EAAW,CACV1S,MAAOH,EAAK,2BACZ+gB,IAAK,EACLT,IAAK,EACL1gB,OAAkB,IAAXA,EAAeA,EAAQ,EAC9B45I,YAAaJ,EACb14I,SAAU44I,KAIlB,CAEA,SAASG,EACPr5I,EACAsY,EACAghI,EACAC,EACAC,EACAC,GAEA,OACEhnJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAEoN,KAE3EnN,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,gCACZm8B,QAASu9G,EAGT5vF,QAAU0jE,GAAc8D,EAAiB,CAAE,CAAC,cAAc54G,iBAAoB80G,OAEhFv6H,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,oCACZm8B,QAASw9G,EAET7vF,QAAU0jE,GAAc8D,EAAiB,CAAE,CAAC,cAAc54G,mBAAsB80G,OAElFv6H,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,kCACZm8B,QAASy9G,EAET9vF,QAAU0jE,GAAc8D,EAAiB,CAAE,CAAC,cAAc54G,aAAgB80G,OAE5Ev6H,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,gCACZm8B,QAAS09G,EAET/vF,QAAU0jE,GAAc8D,EAAiB,CAAE,CAAC,cAAc54G,eAAkB80G,MAGrE,SAAR90G,GAAkB6gI,MAGzB,CAEA,OACE1mJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,CAC5CymJ,EACCz5I,EAAK,2BACL,QACAu4I,EACAC,EACAC,EACAC,GAEDe,EACCz5I,EAAK,2BACL,QACA24I,EACAC,EACAC,EACAC,GAEDW,EACCz5I,EAAK,0BACL,OACA+4I,EACAC,EACAC,EACAC,SC3JR,IAAgB,KAAO,WAAW,KAAO,YCqBnCY,GAAsC,CAC1C,KAAM,MAAO,KAAM,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,KACzD,MAAO,KAAM,MAAO,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,MACzD,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,MAAO,MAAO,KAAM,KAC1D,KAAM,KAAM,KAAM,KAAM,MAAO,MAAO,MAAO,KAAM,KAAM,MACzD,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KACvD,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,MACvD,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KACxD,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KACvD,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,MACxD,KAAM,MAAO,KAAM,KAAM,MAAO,KAAM,MAAO,MAAO,KAAM,KAC1D,KAAM,KAAM,MAAO,KAAM,KAAM,MAAO,KAAM,MAAO,MAAO,MAC1D,MAAO,MAAO,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KACzD,KAAM,MAAO,MAAO,KAAM,MAAO,MAAO,KAAM,KAAM,KAAM,KAC1D,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,MAAO,MAAO,KAAM,KAC1D,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5D,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAC7D,MAAO,MAAO,KAAM,MAAO,KAAM,KAAM,MAAO,MAAO,MAAO,MAC5D,KAAM,KAAM,MAAO,MAGfC,GAAsBjoB,EAAAA,IAAgClhG,OAAQ5wB,GAClE85I,GAAoC/2H,SAAS/iB,IAyF/C,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,eACJ0lJ,GACE1lJ,EAAOo1C,SAASmuG,MAEpB,MAAO,CACLmC,mBAPcp4I,CA/EsCq4I,EACxDxtI,WACAutI,iBACAvkF,cAEA,MAAM,iBAAE67D,IAAqBryH,EAAAA,EAAAA,MAGvBi7I,GADOj6I,EAAAA,EAAAA,KACS+tD,MAAQ,MACvBmsF,EAAkBC,IAAuBh7I,EAAAA,EAAAA,IAAmB,KAC5D03B,EAAaC,IAAkB33B,EAAAA,EAAAA,IAAiB,IAEjDi7I,GAA0Cr/I,EAAAA,EAAAA,IAAQ,KACtD,MAAMyF,EAAUs5I,GAAoBrzI,IAAK+qH,IAOhC,CACLA,WACAM,eARsB,IAAIC,KAAKC,aAAa,CAACioB,GAAW,CAAE/lJ,KAAM,aAC3B+9H,GAAGT,GAQxCU,aANoB,IAAIH,KAAKC,aAAa,CAACR,GAAW,CAAEt9H,KAAM,aAC7B+9H,GAAGT,MAOrC7gG,OAAO5yB,SAAS0I,IAAI,EAAG+qH,WAAUM,iBAAgBI,mBAAmB,CACrEhyH,MAAO4xH,EACPhkC,SAAUokC,EACVvyH,MAAO6xH,KAGT,IAAK36F,EAAY0pC,OAAQ,CACvB,MAAM85E,EAAwB75I,EAAQgoC,KAAMvM,GAAWA,EAAOt8B,QAAUs6I,GAClEK,EAAkB95I,EAAQmwB,OAAQsL,GAAWA,EAAOt8B,QAAUs6I,GACpE,OAAOI,EAAwB,CAACA,KAA0BC,GAAmB95I,CAC/E,CAEA,OAAOA,GAASmwB,OAAQsL,GAAWA,EAAO/7B,MAAMogD,cAAcx9B,SAAS+T,EAAYypB,iBAClF,CAAC25F,EAAUpjH,KAEd+B,EAAAA,GAAAA,GAAsB,EAAEC,EAAc0hH,MACpC,GAAI1hH,IAAiBrsB,GAAY+tI,GAAc/xG,KAAMvM,GAAWA,IAAWg+G,GAAW,OACtF,MAAOv5I,IAAYiqI,EAAAA,GAAAA,IAAUyP,EAAsBn+G,GAAW89G,EAAej3H,SAASmZ,EAAOt8B,QAC7Fw6I,EAAoB,IAAIz5I,EAAS+F,IAAKw1B,GAAWA,EAAOt8B,UACvD,CAAC6M,EAAUutI,EAAgBG,EAAiBvlJ,OAAQslJ,EAAUG,IAEjE,MAAMt5D,GAAevhF,EAAAA,EAAAA,GAAiBkoF,IACpC0yD,EAAoB1yD,GACpB4pC,EAAiB,CACf0oB,eAAgBtyD,MASpB,OALA1pE,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,KAIRxiE,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAO6kD,KAAM,oCAAoCtiE,UAC9EC,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAO5O,MAAM7O,UAC1CC,EAAAA,GAAAA,GAACy4H,GAAU,CACT34H,UAAW0d,GAAO89G,OAClBnyE,MAAOi+F,EACPjuB,eAAgB+tB,EAChBptB,uBAAwBhsC,EACxBrpD,YAAaZ,EACbmB,eAAgBlB,EAChBc,cAAY,EACZK,eAAa,EACbJ,oBAAkB,EAClBM,cAAc,WACdR,cAAc,8BC8FxB,IAAehmC,EAAAA,EAAAA,IAzLuB6oJ,EACpCh7I,SACAi7I,YACAC,qBAEA,MAAM,iBACJ/lH,EAAgB,eAChBgmH,EAAc,mBACdC,EAAkB,cAClBC,EAAa,kBACbC,IACE97I,EAAAA,EAAAA,MACEe,GAAOC,EAAAA,EAAAA,MACN+6I,EAAoBC,IAAyB77I,EAAAA,EAAAA,MAE9C87I,GAAelgJ,EAAAA,EAAAA,IAAQ,IAAM0/I,EAAUh0I,IAAI,EAAGmlG,cAAeA,GAAW,CAAC6uC,IACzES,GAAmB3xH,EAAAA,EAAAA,GAAsB0xH,IAExCnoF,EAAO41E,IAAYvpI,EAAAA,EAAAA,IAAoB,CAC5Cg8I,iBAAkBF,EAClBG,mBAAoBH,EACpBpS,kBAAchzI,KAIhB0H,EAAAA,EAAAA,IAAU,KACJ29I,IAAqBD,GACvBvS,EAAS,CACPyS,iBAAkBF,EAClBG,mBAAoBH,EACpBpS,kBAAchzI,KAGjB,CAACqlJ,EAAkBD,IAEtB,MAAMI,GAAqB1oJ,EAAAA,EAAAA,IAAagN,KACtCgzH,EAAAA,GAAAA,IAAoB,IAAIhzH,KACxBg1B,EAAiB,CACf/gC,QAASmM,EAAK,qBAEf,CAACA,EAAM40B,IAEJ2mH,GAAsB3oJ,EAAAA,EAAAA,IAAa+Y,IACnCA,EAAK6vI,WACPb,EAAehvI,EAAKkgG,UAEpBovC,EAAsBtvI,IAEvB,CAACgvI,IAEEc,GAA6B7oJ,EAAAA,EAAAA,IAAY,KAC7CqoJ,OAAsBnlJ,IACrB,IAEG4lJ,GAAuB9oJ,EAAAA,EAAAA,IAAY,KAClCooJ,IAIDv7I,EACFo7I,EAAmB,CACjBp7I,SACAosG,SAAUmvC,EAAmBnvC,SAC7Bp/F,UAAWuuI,EAAmBvuI,WAGhCmuI,EAAe,CACb/uC,SAAUmvC,EAAmBnvC,SAC7Bp/F,UAAWuuI,EAAmBvuI,WAGlCgvI,MACC,CAACh8I,EAAQg8I,EAA4BZ,EAAoBD,EAAgBI,IAEtErtE,GAAa/6E,EAAAA,EAAAA,IAAY,CAAC22I,EAAuCz2I,KACrE,MAAMuxB,EAAQle,KAAKZ,MAAMgkI,EAAYxzH,EA7Ed,IA8EjBte,EAAQs7D,EAAMqoF,kBAAkB/rH,QAAQv8B,IAAiB,EACzDuoJ,EAAqBtoF,EAAMqoF,kBAAkBxqH,OAAQi7E,GAAaA,IAAa/4G,GAEhFuoJ,IAAuB76H,EAAAA,GAAAA,IAAU/oB,EAAQ4sB,EAAO,EAAG62H,EAAatmJ,UAIrEymJ,EAAmBvuB,OAAOr1H,EAAQ4sB,EAAO,EAAGvxB,GAC5C61I,EAAUlsI,IAAO,IACZA,EACHqsI,aAAcrxI,EACd4jJ,0BAED,CAACtoF,EAAMqoF,iBAAkBF,EAAatmJ,SAEnC40I,GAAgB52I,EAAAA,EAAAA,IAAY,KAChC+1I,EAAUlsI,IACJgD,EACFs7I,EAAkB,CAChBt7I,SACAi7I,UAAWj+I,EAAQ4+I,qBAGrBP,EAAc,CAAEJ,UAAWj+I,EAAQ4+I,qBAG9B,IACF5+I,EACH2+I,iBAAkB3+I,EAAQ4+I,mBAC1BvS,kBAAchzI,MAGjB,CAAC2J,EAAQs7I,EAAmBD,IAE/B,OACEjoJ,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UClJiB,WDkJWC,SAAA,EAC/BC,EAAAA,GAAAA,GAAA,MAAIF,UCnJoC,WDmJVuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAC/DgN,EAAK,6BAER/M,EAAAA,GAAAA,GAAA,OAAKF,UCtJ2F,WDsJtDgG,MAAO,WAtH9B,GAsH0C2hJ,EAAU9lJ,WAAiC5B,SACrG0nJ,EAAUh0I,IAAI,CAACi1I,EAAcl/F,KAC5B,MAAMmtF,EAAY72E,EAAM+1E,eAAiBrsF,EACnCotF,EAzHS,IAyHK92E,EAAMqoF,kBAAkB/rH,QAAQssH,EAAa9vC,WAAa,GACxEv1F,EA1HS,IA0HFy8C,EAAMsoF,oBAAoBhsH,QAAQssH,EAAa9vC,WAAa,GACnEhmF,EAAW81H,EAAaH,WAC1B,qBACCG,EAAalvI,SAAW,uBAAyB,2BAEtD,OACExZ,EAAAA,GAAAA,GAAC82I,GAAAA,EAAS,CAERj3I,GAAI6oJ,EAAa9vC,SACjBx7F,OAAQs9D,EACRq8D,UAAWR,EACXzwI,MAAO,QAAQ6wI,EAAYC,EAAavzH,OACxC2zH,WAAcjqI,EAAK8kB,MAAQ,OAAS,SAAzB,UACX5nB,YAAay+I,EAAalvI,SAASzZ,UAEnCH,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAEPziC,WAAWqW,EAAAA,GAAAA,GAAe,oBC3K8E,YD4KxGurG,QAAM,EACNC,cAAc,OACd1uG,KAAMy1I,EAAalvI,SAAW,OAAS,cACvCgpB,WAAS,EACTkiB,eAAgB,CACd,CACEK,QAASA,KACPsjG,EAAmBK,EAAa9vC,WAElCzrG,MAAOJ,EAAK,QACZkG,KAAM,SAIVlF,QAASA,KACPu6I,EAAoBI,IACpB3oJ,SAAA,EAEFH,EAAAA,GAAAA,IAAA,QAAME,UAAU,QAAOC,SAAA,CAAC,IAErB2oJ,EAAa9vC,aAEhB54G,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAEgN,EAAK6lB,OAxB5B81H,EAAa9vC,WATf8vC,EAAa9vC,eAuC1B54G,EAAAA,GAAAA,GAAA,KAAGF,UCxM8D,WDwM/BuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACnEgN,EAAK,mCAGV/M,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQZ,QAAQg9I,GAChBl8I,QAAS28I,EACTr7I,MAAOJ,EAAKg7I,GAAoBvuI,SAAW,gCAAkC,+BAC7E1E,KAAM/H,EAAKg7I,GAAoBvuI,SAAW,+BAAiC,8BAC3E8pB,aAAcv2B,EAAKg7I,GAAoBvuI,SACnC,+BACA,8BACJ+pB,eAAgBklH,EAChBjlH,sBAAuBukH,GAAoBvuI,gB,gBE3LnD,MAAMmvI,GAAoB,sBAEpBC,IAA+Bv8H,EAAAA,GAAAA,IAAU+0C,GAAOA,IAAM,KAAK,GA4FjE,IAAeziE,EAAAA,EAAAA,IA1FqBkqJ,EAClCC,kBACAC,SACAp0H,YACAq0H,sBACAC,kBACAx7I,eAEA,MAAM,cAAEy7I,EAAa,gBAAEC,IAAoBn9I,EAAAA,EAAAA,OACpC4sG,EAAUwwC,IAAej9I,EAAAA,EAAAA,IAAS28I,GAAmB,IAEtD/7I,GAAOC,EAAAA,EAAAA,KACPq8I,EAAaN,EAAS,SAAW,WACjC77I,EAAiBH,EAATg8I,EAAc,oBAA4B,YAElDO,GAA8B/yH,EAAAA,EAAAA,GAAsByyH,GACpDO,EAA+BT,IAAoBlwC,EACpDowC,GAAuBM,OAA+BzmJ,EACrD2mJ,EAAa5wC,GAAYkwC,IAAoBlwC,GAAYqwC,IAAoBrwC,GAE5E6wC,EAAiBC,IAAiB3hJ,EAAAA,EAAAA,IAAQ,IAC1C6wG,EAASj3G,OAIVi3G,EAASj3G,OAASgoJ,GAAAA,GACb,MAAC9mJ,EAAWkK,EAAK,GAAGs8I,kBAEzBzwC,EAASj3G,OAASioJ,GAAAA,GACb,MAAC/mJ,EAAWkK,EAAK,GAAGs8I,iBAExBQ,GAAAA,GAAeC,KAAKlxC,QAIY/1G,IAAjC0mJ,GAA8CC,EACzC,GAIF,CACLD,EAA+Bx8I,EAAK,GAAGs8I,aAAuBn8I,QAASrK,GACtC,IAAjC0mJ,EAAyCx8I,EAAK,GAAGs8I,eAAqBxmJ,GAV/D,MAACA,EAAWkK,EAAK,GAAGs8I,aAVpB,GAsBR,CAACzwC,EAAU2wC,EAA8BC,EAAYz8I,EAAMs8I,EAAYn8I,KAE1E3C,EAAAA,EAAAA,IAAU,KACR6+I,EAAYN,GAAmB,KAC9B,CAACC,EAAQD,IAEZ,MAAMiB,GAAuBpqJ,EAAAA,EAAAA,IAAakN,IACxC,MAAMF,EAAQE,EAAEC,OAAOH,MAAM4gE,OAE7B,GAAIw7E,IAAWp8I,EAAM+9B,MAAMi+G,IAKzB,YAJKh8I,EAAMhL,SACTynJ,EAAY,IACZ37I,IAAW,MAIf,MAAMu8I,EAAcr9I,EAAMwuD,QAAQwtF,GAAmB,IAErDS,EAAYY,IAEoB,KAAhBA,IAA4BC,EAAAA,GAAAA,IAAgBD,GAAa,MAGzEv8I,IAAWu8I,GAEXpB,GAA6B,KACvBoB,IAAgBlB,IACJC,EAASI,EAAkBD,GACnC,CAAEtwC,SAAUoxC,QAGrB,CAACjB,EAAQI,EAAiBD,EAAeJ,EAAiBr7I,IAE7D,OACEzN,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRhB,MAAO,GAAGo8I,EAASl8E,EAAAA,IAAkB,KAAK+rC,IAC1CnrG,SAAUs8I,EACV78I,MAAOs8I,EAAaz8I,EAAK,YAAcG,EACvCq+B,MAAOm+G,EACPQ,QAAST,EACT7/B,SAAUj1F,EACV2U,2BAAyB,M,gBChE/B,MAAM63B,IAAerrD,EAAAA,GAAAA,IAAUsrD,GAAOA,IAAM,KAAO,GAE7C+oF,GAA2B,iCAwPjC,IAAexrJ,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,cAAE+yB,GAAkB/yB,GACpB,SACJuS,EAAQ,oBAAEo1I,EAAmB,gBAAEC,EAAiB19G,MAAO6+G,IACrDr7I,EAAAA,EAAAA,KAAe1N,GAAQgpJ,aAAe,CAAC,EACrCx0F,EAAczhC,GAAgBggB,EAAAA,EAAAA,KAAW/yC,EAAQ+yB,QAAiBvxB,EAElEynJ,GAAe3a,EAAAA,GAAAA,GAAmBtuI,EAAQ,gBAG9C07D,UAAWwtF,EACXttF,SAAUutF,EAAe,UACzB/C,GACE5xF,GAAe,CAAC,EACd40F,EAAsBr2H,GAAgBmgB,EAAAA,EAAAA,KAAmBlzC,EAAQ+yB,QAAiBvxB,EAGxF,MAAO,CACL6nJ,kBAHwB70F,IAAe80F,EAAAA,EAAAA,IAAkB90F,GAIzD00F,mBACAC,kBACAI,WAAYH,GAAqBI,IACjCj3I,WACAo1I,sBACAC,kBACAmB,oBACAE,eACA7C,cA5Bc94I,CAtPmCm8I,EACrDtxI,WACAkxI,oBACAH,mBACAC,kBACAI,aACAh3I,WACAq1I,kBACAmB,oBACApB,sBACAsB,eACA7C,YACAjlF,cAEA,MAAM,gBACJuoF,EAAe,cACfC,IACEh/I,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,KAEPi+I,GAAwBljJ,EAAAA,EAAAA,IAAQ,IAAM0/I,GAAWjyG,KAAK,EAAG+yG,gBAAiBA,GAAa,CAACd,IACxFqB,EAAkBmC,GAAuBryC,UAAY,IACpDsyC,EAAmBC,IAAwBh/I,EAAAA,EAAAA,KAAS,IACpDi/I,EAAwBC,IAA6Bl/I,EAAAA,EAAAA,KAAS,IAC9Do/B,EAAO+/G,IAAYn/I,EAAAA,EAAAA,OAEnBnK,EAAOupJ,IAAYp/I,EAAAA,EAAAA,OACnB4wD,EAAWC,IAAgB7wD,EAAAA,EAAAA,IAASo+I,GAAoB,KACxDttF,EAAUC,IAAe/wD,EAAAA,EAAAA,IAASq+I,GAAmB,KACrDK,EAAKW,IAAUr/I,EAAAA,EAAAA,IAASy+I,GAAc,KACtCa,EAAkBC,IAAuBv/I,EAAAA,EAAAA,IAAyB28I,GAEnE6C,GAAuBtjJ,EAAAA,EAAAA,GAASqiJ,GAAmB,EAAOpiJ,EAAAA,GAAeC,SAEzEosB,EAAY/gB,IAAag4I,EAAAA,GAAoBC,WAC7CC,GAAuC,IAArBL,EAElBnC,GAA8B/yH,EAAAA,EAAAA,GAAsByyH,GACpDO,EAA+BP,GAAuBM,EACtDyC,EAA8BtE,GAAaA,EAAU9lJ,OAAS,EAE9DqqJ,GAAoBjkJ,EAAAA,EAAAA,IAAQ,KAC5B+jJ,IAIG/gJ,QAAQ/I,IAAUopJ,GAA2BF,IAAsD,IAAjC3B,GACxE,CAACuC,EAAiB9pJ,EAAOopJ,EAAwBF,EAAmB3B,KAEvEx+H,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,KAKVj4D,EAAAA,EAAAA,IAAU,KACR42D,GAAa,KACX4pF,OAED,CAACA,KAEJxgJ,EAAAA,EAAAA,IAAU,KACRghJ,OAAS1oJ,IACR,CAAC8oJ,KAEJphJ,EAAAA,EAAAA,IAAU,KACRyyD,EAAautF,GAAoB,IACjCrtF,EAAYstF,GAAmB,IAC/BgB,EAAOZ,GAAc,KACpB,CAACL,EAAkBC,EAAiBI,KAEvCrgJ,EAAAA,EAAAA,IAAU,KACRmhJ,EAAoB5C,GAAmB,KACtC,CAACA,KAEJv+I,EAAAA,EAAAA,IAAU,KACJqJ,IAAag4I,EAAAA,GAAoBK,WACnCZ,GAA0B,GAC1BF,GAAqB,GACrBG,OAASzoJ,KAEV,CAAC+Q,IAEJ,MAAMs4I,GAAoBvsJ,EAAAA,EAAAA,IAAawsJ,IACrCZ,EAASY,IACR,IAEGzuF,GAAwB/9D,EAAAA,EAAAA,IAAakN,IACzCmwD,EAAanwD,EAAEC,OAAOH,OACtB0+I,GAA0B,IACzB,IAEGxtF,GAAuBl+D,EAAAA,EAAAA,IAAakN,IACxCqwD,EAAYrwD,EAAEC,OAAOH,OACrB0+I,GAA0B,IACzB,IAEGe,GAAkBzsJ,EAAAA,EAAAA,IAAakN,IACnC2+I,EAAO3+I,EAAEC,OAAOH,OAChB0+I,GAA0B,IACzB,IAEGtB,IAAuBpqJ,EAAAA,EAAAA,IAAagN,IACxC++I,EAAoB/+I,GACpBw+I,EAAqBrC,IAAoBn8I,IACxC,CAACm8I,IAEEuD,IAAoB1sJ,EAAAA,EAAAA,IAAY,KACpC,MAAM2sJ,EAAmBvvF,EAAUwQ,OAC7Bg/E,EAAkBtvF,EAASsQ,OAC3Bi/E,EAAa3B,EAAIt9E,OAElBk+E,IAEAa,EAAiB3qJ,OAKtBqpJ,EAAc,CACZhpJ,WACIopJ,GAA0B,CAC5BruF,UAAWuvF,EACXrvF,SAAUsvF,EACV1B,IAAK2B,MAEHtB,GAAqB,CACvBtyC,SAAU6yC,KAZZH,EAASnB,MAeV,CACDnoJ,EACA+6D,EAAWE,EAAU4tF,EAAKO,EAC1BK,EAAkBP,EAClBF,IAkBF,OACEprJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,uBAAsBC,SAAA,EACnCH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2CAA0CC,SAAA,EACvDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAACysJ,GAAAA,EAAc,CACbd,qBAAsBA,EACtBl+I,SAAUy+I,EACV/+I,MAAM,0BACNgT,SAAUwU,KAEZ30B,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRhB,MAAOowD,EACPtvD,SAAUiwD,EACVxwD,MAAOH,EAAK,aACZoT,SAAUwU,EACV4W,MAAOA,IAAU4+G,GAA2B5+G,OAAQ1oC,KAEtD7C,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRhB,MAAOswD,EACPxvD,SAAUowD,EACV3wD,MAAOH,EAAK,YACZoT,SAAUwU,KAEZ30B,EAAAA,GAAAA,GAACsiH,GAAAA,EAAQ,CACP31G,MAAOk+I,EACPp9I,SAAU2+I,EACVl/I,MAAOH,EAAK,WACZoT,SAAUwU,EACV0tD,UAAWioE,EACX9nC,mBAAoB8nC,GAAgBA,EAAeO,EAAIlpJ,QAAQmrF,gBAAajqF,QAIhF7C,EAAAA,GAAAA,GAAA,KAAGF,UAAU,4BAA4BuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,UAC1Ei0B,EAAAA,GAAAA,GAAWjnB,EAAK,0BAA2B,CAAC,KAAM,0BAIvDnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAEgN,EAAK,eAEhF/M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iBAAgBC,UAC7BC,EAAAA,GAAAA,GAAC6oJ,GAAa,CACZC,gBAAiBA,EACjBn0H,UAAWA,EACXq0H,oBAAqBA,EACrBC,gBAAiBA,EACjBx7I,SAAUs8I,OAIbK,IAAsBsC,EAAAA,KAnE/B,WACE,MAAMC,EAAmB,GAAG9/E,EAAAA,MAAkB+/E,EAAAA,MAE9C,OACE5sJ,EAAAA,GAAAA,GAAA,KAAGF,UAAU,4BAA4BuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACzEgN,EAAK,mCACJouD,QAAQ,SAAU,mBAClB4jB,MAAM,KACNtrE,IAAKw2C,GACU,kBAANA,GAAwBjqD,EAAAA,GAAAA,GAACy9G,GAAAA,EAAQ,CAAClmG,IAAKo1I,EAAkB73I,KAAM,IAAI83I,EAAAA,QAA0B3iG,IAI/G,CAsD0D4iG,IAClD7sJ,EAAAA,GAAAA,GAAA,KAAGF,UAAU,4BAA4BuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,UAC1Ei0B,EAAAA,GAAAA,GAAWjnB,EAAK,gBAAiB,CAAC,KAAM,sBAE1C0+I,IACC7rJ,EAAAA,GAAAA,IAAA,KAAGE,UAAU,4BAA4BuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,CAC1EgN,EAAK,sBACN/M,EAAAA,GAAAA,GAAA,UACAJ,EAAAA,GAAAA,IAAA,QAAME,UAAU,gBAAeC,SAAA,CAC5B8sE,EAAAA,IACA4+E,WAMRM,IACC/rJ,EAAAA,GAAAA,GAACwnJ,GAAe,CACdC,UAAWA,EACXC,eAAgBgE,QAKtB1rJ,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAAS6lH,EACTj+I,QAASs+I,GACTlsI,SAAUwU,EACVpiB,UAAWxF,EAAK,QAAQhN,SAEvB40B,GACC30B,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf7N,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,kB,mDCjQrB,MAoJA,IAAe5O,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,yBACJyrJ,EAAwB,yBACxBC,EAAwB,uBACxBC,EAAsB,2BACtBC,IACE14E,EAAAA,GAAAA,GAAqBlzE,GAEzB,MAAO,CACLyrJ,2BACAC,2BACAC,yBACAC,+BAbct+I,CApJSu+I,EAC3B1zI,WACAszI,2BACAC,2BACAC,yBACAC,6BACAzqF,cAEA,MAAM,gBAAEouB,EAAe,uBAAEmlC,EAAsB,YAAEo3B,IAAgBnhJ,EAAAA,EAAAA,MAE3DohJ,GAAgB/jJ,EAAAA,EAAAA,OACfgkJ,EAAuBC,IAA4BnhJ,EAAAA,EAAAA,KAAS,GAE7DY,GAAOC,EAAAA,EAAAA,KAEPugJ,GAAWC,EAAAA,GAAAA,MAEjBziI,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAGV,MAAMirF,GAAoBlhJ,EAAAA,EAAAA,GAAgB,KACxC,MAAMmhJ,EAAO,IAAIC,KAAK,EAACC,EAAAA,GAAAA,OAAiBC,EAAAA,IAAoB,CAAE3sJ,KAAM,eAC9DqW,EAAM2jC,IAAIC,gBAAgBuyG,IAChCt6I,EAAAA,GAAAA,GAASmE,EAAKs2I,EAAAA,OAGVC,GAAoBvhJ,EAAAA,EAAAA,GAAiBM,IACzCsgJ,EAAY,CAAEY,OAAQlhJ,EAAEoW,QAAS+qI,OAAQnhJ,EAAEqW,YAGvC+qI,GAAwB1hJ,EAAAA,EAAAA,GAAgB,KAC5CqkF,EAAgB,CAAEc,WAAW,MAGzBw8D,GAAa3hJ,EAAAA,EAAAA,GAAgB,KACjC,MAAMwkC,EAASq8G,EAAc5jJ,QACxBunC,IAEDo9G,EAAAA,GAAAA,GAAYp9G,KACdu8G,GAAyB,GAEzBziJ,WAAW,KACTyiJ,GAAyB,IACxB,SAIDc,GAAgBrmJ,EAAAA,EAAAA,IAAQ,KAC5B,IAAK86C,OAAO0K,OAAOggG,GAAU5rJ,OAC3B,OAGF,IAAI0sJ,EAAY,EAChB,KAAOd,EAASc,IACdA,GAAa,EAGf,OAAOC,EAAAA,GAAAA,IAAkBD,GAAW,GAAM,IACzC,CAACd,IAEJ,OACE3tJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAAC6nG,GAAAA,EAAuB,CACtBznG,OAAQC,GAAAA,EAAekuJ,aACvBruJ,KAAM,IACNJ,UAAU,oBACVyzC,gBAAc,EACd/yC,QAAQ,KAEVR,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCuW,IAAI,OAAMtW,SAAEgN,EAAK,yCAEjE/M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,gBAAeC,UAC5BC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPpvB,KAAMi7I,EACNn7I,KAAK,WAAUlT,UAEfC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,QAAOC,SAAC,8BAG3BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPx0B,QAASkgJ,EACTh7I,KAAK,aAAYlT,UAEjBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,QAAOC,SAAC,6BAEzBC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPx0B,QAAS+/I,EACT76I,KAAK,gBACLkN,UAAWquI,EAAAA,GAA4BzuJ,UAEvCC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,QAAOC,SAAC,kBAEzBC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtuB,IAAKm5I,EACLr/I,QAASmgJ,EACTj7I,KAAK,UACLkN,UAAWsuI,EAAAA,GACX3oJ,MAAOunJ,EAAwB,qBAAuB,GAAGttJ,UAEzDC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,QAAOC,SAAC,+BAG3BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAM,uBACNg8B,QAASn+B,QAAQgiJ,GAEjBl2F,QAASA,IAAMk/D,EAAuB,CAAEg3B,0BAA2BA,OAGrE/sJ,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAM,uBACNiT,UAAW4sI,EACX7jH,QAASn+B,QAAQ+hJ,GAEjBj2F,QAASA,IAAMk/D,EAAuB,CAAE+2B,0BAA2BA,UAGvEltJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,uBACZm8B,QAASn+B,QAAQiiJ,GAEjBn2F,QAASA,IAAMk/D,EAAuB,CAAEi3B,wBAAyBA,OAGnEhtJ,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAM,gCACNg8B,QAASn+B,QAAQkiJ,GAEjBp2F,QAASA,IAAMk/D,EAAuB,CAAEk3B,4BAA6BA,OAGvEjtJ,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPx0B,QAAS0/I,EACTx6I,KAAK,MAAKlT,UAEVC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,QAAOC,SAAC,4B,0BC3IjC,MA+IA,IAAepB,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,MACJg/D,EAAK,qBACLquF,EAAoB,oBACpBC,EAAmB,gBACnBC,EAAe,WACfC,IACEt6E,EAAAA,GAAAA,GAAqBlzE,GAEzB,MAAO,CACLstJ,sBACAC,kBACAC,aACAxuF,QACAquF,yBAfc//I,CA/I+BmgJ,EACjDt1I,WACAo1I,kBACAD,sBACAE,aACAxuF,QACAquF,uBACAlsF,cAEA,MAAM,uBACJuzD,EAAsB,mBAAE4iB,IACtB3sI,EAAAA,EAAAA,MAEEe,GAAOyqC,EAAAA,GAAAA,MAEP,SAAEp4C,IAAaC,EAAAA,EAAAA,MACf0vJ,EAAiB3vJ,IAAawX,EAAAA,IAAUD,EAAAA,IAExCq4I,EAAoC,CAAC,CACzC9hJ,MAAOH,EAAK,wBACZJ,MAAO,OACN,CACDO,MAAOH,EAAK,wBACZJ,MAAO,QAGHsiJ,EAAyC,CAAC,CAC9C/hJ,MAAOH,EAAK,4BACZJ,MAAO,SACN,CACDO,MAAOH,EAAK,2BACZJ,MAAO,QACN,CACDO,MAAOH,EAAK,6BACZJ,MAAO,SAGHuiJ,EAAuBH,OAOzBlsJ,EAP0C,CAC5C,CAAE8J,MAAO,QAASO,MAAOH,EAAK,qBAAsB+tF,SAAU/tF,EAAK,iCACnE,CACEJ,MAAO,aACPO,MAAOH,EAAKiwB,EAAAA,IAAapmB,EAAAA,GAAS,uBAAyB,yBAC3DkkF,SAAU/tF,EAAK,sCAIboiJ,GAA8BxvJ,EAAAA,EAAAA,IAAa06E,IAC/Ct4E,SAASwoD,gBAAgBzkD,MAAMmrC,YAC7B,uBAAwB,GAAG/9B,KAAKma,IAAIgtD,EAASzjE,EAAAA,GAAS,GAAK,SAE7D7U,SAASwoD,gBAAgBzkD,MAAMmrC,YAAY,wBAAyB,GAAG/9B,KAAKmI,MAAgB,OAAVg/D,QAClFt4E,SAASwoD,gBAAgBzkD,MAAMmrC,YAAY,sBAAuB,GAAGopC,OACrEt4E,SAASwoD,gBAAgB6kG,aAAa,yBAA0B/0E,EAAQyS,YAExEipC,EAAuB,CAAE64B,gBAAiBv0E,KACzC,IAEGg1E,GAA8B1vJ,EAAAA,EAAAA,IAAagN,IAC/C,MAAM2iJ,EAAqB,SAAV3iJ,GAAmB4iJ,EAAAA,GAAAA,KAAmB5iJ,EAEvDopH,EAAuB,CAAE11D,MAAOivF,IAChCv5B,EAAuB,CAAE24B,qBAAgC,SAAV/hJ,KAC9C,IAEG6iJ,GAAyB7vJ,EAAAA,EAAAA,IAAa8vJ,IAC1C15B,EAAuB,CAAE84B,WAAYY,IACrC15B,EAAuB,CAAE25B,0BAA0B,KAEnDC,EAAAA,GAAAA,IAAcF,IACb,IAEGG,GAA+BjwJ,EAAAA,EAAAA,IAAakwJ,IAChD95B,EAAuB,CAAE44B,oBAAqBkB,KAC7C,IAOH,OALA9kI,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,KAIR5iE,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAEgN,EAAK,eAEhF/M,EAAAA,GAAAA,GAAC4f,GAAAA,EAAW,CACV1S,MAAOH,EAAK,YACZ+gB,IAAK,GACLT,IAAK,GACL1gB,MAAOiiJ,EACPnhJ,SAAU0hJ,KAGZnvJ,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,QACLyuG,QAAM,EAEN3zG,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBiX,wBAAyB/vJ,SAEpFgN,EAAK,wBAIVnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACtEgN,EAAK,YAER/M,EAAAA,GAAAA,GAACsN,GAAAA,EAAU,CACTC,KAAK,QACLC,QAASyhJ,EACTvhJ,SAAUghJ,EAAuB,OAASruF,EAC1C5yD,SAAU4hJ,QAIdzvJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACtEgN,EAAK,yBAER/M,EAAAA,GAAAA,GAACsN,GAAAA,EAAU,CACTC,KAAK,aACLC,QAASwhJ,EACTthJ,SAAUmhJ,EACVphJ,SAAU+hJ,OAIbN,IACCtvJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAEgN,EAAK,uBAEhF/M,EAAAA,GAAAA,GAACsN,GAAAA,EAAU,CACTC,KAAK,yBACLC,QAAS0hJ,EACTzhJ,SAAUmiJ,EACVliJ,SAAUihJ,a,4BC/ItB,MAsFA,IAAehwJ,EAAAA,EAAAA,IAtFqBoxJ,EAClCC,YACA3vF,QACAikC,aACAv2F,cAEA,MAAM,KAAE89D,EAAI,SAAE9pE,GAAaiuJ,EACrBC,EAAiB,YAAYluJ,EAASlC,KACtCkJ,EAAehH,EAAS0G,eACxBA,GAAiBJ,EAAAA,EAAAA,GAAS,GAAG4nJ,YAC7Bj2G,GAAWC,EAAAA,GAAAA,GAAcl4C,EAASs+B,WAAWl3B,QAAS4B,QAAQtC,IAAiB,IAC/E,qBAAEub,IAAyBE,EAAAA,GAAAA,GAC/BnZ,QAAQtC,GAAkBM,QAC1BlG,OACAA,EACA,QAEIqtJ,GAAe7mJ,EAAAA,EAAAA,KAAO,IACrB8mJ,EAAeC,IAAoBjkJ,EAAAA,EAAAA,KAAS,IAEjDzD,UAAW2nJ,EAAS,aAAEznJ,IACpBC,EAAAA,EAAAA,GAAyBonJ,GAAiBE,GACxCG,GAA2D,KAAzC/5H,EAAAA,EAAAA,GAAsB45H,IACtCrsI,aAAcC,EAAqBC,qBAAsBC,IAAsBC,EAAAA,GAAAA,GACpFisI,IAAkBE,GAAcxkF,IAAS0kF,EAAAA,QAC1C1tJ,EACAytJ,EACA,QAGIE,GAAcnnJ,EAAAA,EAAAA,MACpBmnJ,EAAYhnJ,QAAU62D,EAEtB,MAAMk+D,GAAe5+H,EAAAA,EAAAA,IAAY,KAC/B,WACE,MAAM8wJ,QAAaC,EAAAA,EAAAA,IAAUL,SACvBM,GAASC,KAAKC,EAAAA,IAAsBL,EAAYhnJ,QAAUinJ,GAChE1iJ,EAAQ89D,EACT,EAJD,IAKC,CAACwkF,EAAWtiJ,EAAS89D,KAExBthE,EAAAA,EAAAA,IAAU,KAEJ8lJ,GAAaH,EAAa1mJ,UAC5B+0H,IACA2xB,EAAa1mJ,SAAU,IAExB,CAAC6mJ,EAAW9xB,IAEf,MAAMh6G,GAAc5kB,EAAAA,EAAAA,IAAY,KAC1B0wJ,EACF9xB,KAEA2xB,EAAa1mJ,SAAU,EACvB4mJ,EAAkBU,IAAeA,KAElC,CAACT,EAAW9xB,IAETz+H,GAAYqW,EAAAA,GAAAA,GAChB,gBACAmuF,GAAc,YAGhB,OACEtkG,EAAAA,GAAAA,GAAA,OAAKF,UAAWA,EAAWiO,QAASwW,EAAYxkB,UAC9CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,GAAAA,GAAA,UACEiU,IAAK+lC,EACLl6C,UAAU,eAEZE,EAAAA,GAAAA,GAAA,OACE8D,IAAK2E,GAAkBM,EACvBjJ,WAAWqW,EAAAA,GAAAA,GAAe,aAAc6N,GACxCuE,IAAI,GACJ5kB,WAAW,IAEZogB,IACC/jB,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAe,oBAAqB8N,GAAmBlkB,UACrEC,EAAAA,GAAAA,GAAC2T,GAAAA,EAAe,CAACC,SAAUhL,EAAcmF,QAASwW,aCpExD48C,IAAerrD,EAAAA,GAAAA,IAAUsrD,GAAOA,IAAM,KAAO,GAkInD,IAAeziE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAMg/D,GAAQwD,EAAAA,EAAAA,KAAYxiE,IACpB,WAAEwhH,EAAU,UAAEH,IAAcK,EAAAA,EAAAA,KAAkB1hH,EAAQg/D,IAAU,CAAC,GACjE,iBAAE0wF,GAAqB1vJ,EAAOo1C,SAEpC,MAAO,CACLosE,aACAH,YACAquC,mBACA1wF,UAVc1xD,CAhIyCqiJ,EAC3Dx3I,WACAgpD,UACAqgD,aACAH,YACAquC,mBACA1wF,YAEA,MAAM,eACJ4wF,EAAc,gBACdC,EAAe,iBACfC,EAAgB,mBAChBxY,IACE3sI,EAAAA,EAAAA,MAEEolJ,GAAW/nJ,EAAAA,EAAAA,MACjB+nJ,EAAS5nJ,QAAU62D,GAGnB91D,EAAAA,EAAAA,IAAU,KACR42D,GAAa,KACX8vF,OAED,CAACA,IAEJ,MAAMI,GAAmB1xJ,EAAAA,EAAAA,IAAakN,IACpC,MAAM,MAAE2lD,GAAU3lD,EAAEC,OAEdwkJ,GAAiBC,EAAAA,EAAAA,IAAc/+F,GACjC8+F,GAAgB3vJ,QAClBuvJ,EAAgBI,EAAe,KAEhC,CAACJ,IAEEM,GAAwB7xJ,EAAAA,EAAAA,IAAY,MACxC8xJ,EAAAA,GAAAA,GAvCoB,aAuCmBJ,GAAkB,IACxD,CAACA,IAEEK,GAAiB/xJ,EAAAA,EAAAA,IAAY,KACjCg5I,EAAmB,CAAES,OAAQP,EAAAA,GAAgB8Y,8BAC5C,IAEGC,GAAuBjyJ,EAAAA,EAAAA,IAAY,KACvCwxJ,EAAiB,CACf9wF,QACAwiD,gBAAYhgH,EACZ6kE,qBAAiB7kE,EACjB6/G,WAAW,EACXE,aAAwB,SAAVviD,EAAmBwxF,EAAAA,IAA2BC,EAAAA,OAE7D,CAACX,EAAkB9wF,IAEhB0xF,GAAwBpyJ,EAAAA,EAAAA,IAAaksE,IACzCslF,EAAiB,CAAE9wF,MAAO+wF,EAAS5nJ,QAAUq5G,WAAYh3C,IACzD,MAAMmmF,EAAmBjB,GAAoBA,EAAiBv7G,KAAMw6G,GAAcA,EAAUnkF,OAASA,GACjGmmF,GAAkBjwJ,SAASs+B,YAC7B4xH,EAAAA,GAAAA,IAAgBD,EAAiBjwJ,SAASs+B,UAAUl3B,SACjD6jC,KAAMn/B,IACL,MAAM+0G,GAAesvC,EAAAA,GAAAA,IAAgBrkJ,GAC/BskJ,EAAW,KAAIC,EAAAA,GAAAA,IAAQvkJ,KAC7BsjJ,EAAiB,CAAE9wF,MAAO+wF,EAAS5nJ,QAAUk+D,gBAAiByqF,EAAUvvC,oBAG7E,CAACmuC,EAAkBI,IAEhBkB,GAA4B1yJ,EAAAA,EAAAA,IAAakN,IAC7CskJ,EAAiB,CAAE9wF,MAAO+wF,EAAS5nJ,QAAUk5G,UAAW71G,EAAEC,OAAOo8B,WAChE,CAACioH,IAEEpkJ,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAGV,MAAM8vF,EAAcvB,IAAmB,IAAMA,EAAiB,GAAGllF,OAAS0kF,EAAAA,GAE1E,OACE3wJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2DAA0DC,SAAA,EACvEH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,aACLnT,UAAU,OACVqgB,SAAUmyI,EACVvkJ,QAASyjJ,EAAsBzxJ,SAE9BgN,EAAK,kBAGR/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,WACLnT,UAAU,OACViO,QAAS2jJ,EAAe3xJ,SAEvBgN,EAAK,eAGR/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAACtvB,KAAK,WAAWlF,QAAS6jJ,EAAqB7xJ,SACrDgN,EAAK,2BAGR/M,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,qBACZm8B,QAASn+B,QAAQ23G,GACjBj1G,SAAU4kJ,OAIbtB,GACC/wJ,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,SACjCgxJ,EAAiBt9I,IAAKu8I,IACrBhwJ,EAAAA,GAAAA,GAAC+vJ,GAAa,CAEZC,UAAWA,EACX3vF,MAAOA,EACPikC,WAAYue,IAAemtC,EAAUnkF,KACrC99D,QAASgkJ,GAJJ/B,EAAUnkF,UASrB7rE,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,UCrHV8iG,IAAcC,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQ,WAC9BC,GAAoB,CACxB,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,UAAW,UAAW,WAyMzD,SAASC,GAAcC,EAA+BC,GACpD,MAAO,CACLC,cAAe,CACb5/I,KAAKZ,MAAOsgJ,EAAI,IAAOC,EAAME,UAAUtpJ,MAAQ,IAC/CyJ,KAAKZ,OAAO,EAAIsgJ,EAAI,KAAOC,EAAME,UAAUjpJ,OAAS,KAEtDkpJ,YAAa9/I,KAAKZ,MAAMsgJ,EAAI,IAAMC,EAAMI,QAAQxpJ,MAAQ,IAE5D,CAEA,SAASypJ,IACP,cAAEJ,EAAa,YAAEE,GACjBH,GAEA,MAAO,CACLG,GAAeH,EAAMI,QAAQxpJ,MAAQ,GACrCqpJ,EAAc,IAAMD,EAAME,UAAUtpJ,MAAQ,GAC5C,EAAIqpJ,EAAc,IAAMD,EAAME,UAAUjpJ,OAAS,GAErD,CA4EA,UAAenL,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAMg/D,GAAQwD,EAAAA,EAAAA,KAAYxiE,IACpB,gBAAEqmE,IAAoBq7C,EAAAA,EAAAA,KAAkB1hH,EAAQg/D,IAAU,CAAC,EACjE,MAAO,CACLqH,kBACArH,UANc1xD,CArSyCqiJ,EAC3Dx3I,WACAgpD,UACAnC,QACAqH,sBAEA,MAAM,iBAAEypF,IAAqBnlJ,EAAAA,EAAAA,MAEvBolJ,GAAW/nJ,EAAAA,EAAAA,MACjB+nJ,EAAS5nJ,QAAU62D,EACnB,MAAM/2C,GAAejgB,EAAAA,EAAAA,MACf8pJ,GAAiB9pJ,EAAAA,EAAAA,MACjB+pJ,GAAe/pJ,EAAAA,EAAAA,MACfgqJ,GAAgBhqJ,EAAAA,EAAAA,KAAO,IAEtBupJ,EAAKU,IAAUnnJ,EAAAA,EAAAA,IAiLxB,SAAuBu7D,GACrB,OAAOA,GAAmBA,EAAgBshE,WAAW,MACjDwpB,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQ/qF,EAAgBvM,QAAQ,IAAK,MAC7Co3F,EACN,CArLiCgB,CAAc7rF,IAEvC8rF,GAASnqJ,EAAAA,EAAAA,IAAOupJ,IACtBroJ,EAAAA,EAAAA,IAAU,KACRipJ,EAAOhqJ,QAAUopJ,GAChB,CAACA,IAEJ,MAAOn8E,EAAYg9E,EAAgBC,IAAoBz0J,EAAAA,EAAAA,MAChD00J,EAAUC,IAAeznJ,EAAAA,EAAAA,IAAS,KAClC0nJ,EAAUC,IAAe3nJ,EAAAA,EAAAA,IAAS,IAEnC4nJ,GAAW1qJ,EAAAA,EAAAA,MACX2qJ,GAAc3qJ,EAAAA,EAAAA,OAGpBkB,EAAAA,EAAAA,IAAU,KAER,MAAMwoJ,EAAY,CAChBkB,WAAYd,EAAe3pJ,QAASyqJ,eACjCjgG,EAAAA,GAAAA,IAAKm/F,EAAe3pJ,QAAS2S,wBAAyB,CAAC,MAAO,QAAS,YAEtE82I,EAAU,CACdgB,WAAYb,EAAa5pJ,QAASyqJ,eAC/BjgG,EAAAA,GAAAA,IAAKo/F,EAAa5pJ,QAAS2S,wBAAyB,CAAC,WAK1D,SAAS+3I,EAAgBrnJ,GACvB,MAAMimJ,EAAgB,CACpB5/I,KAAK4a,IAAI5a,KAAKma,IAAI,EAAGxgB,EAAEyP,MAASy2I,EAAUkB,YAAalB,EAAUtpJ,MAAQ,GACzEyJ,KAAK4a,IAAI5a,KAAKma,IAAI,EAAGxgB,EAAE6e,MAASqnI,EAAU1vI,IAAMiG,EAAa9f,QAAS+wB,WAAYw4H,EAAUjpJ,OAAS,KAGjG,YAAEkpJ,GAAgBL,GAAca,EAAOhqJ,QAASuqJ,EAASvqJ,SAK/D,OAHA8pJ,EAAOJ,GAAc,CAAEJ,gBAAeE,eAAee,EAASvqJ,UAC9DiqJ,KAEO,CACT,CAWA,SAASU,EAActnJ,GACrB,MAAM,cAAEimJ,GAAkBH,GAAca,EAAOhqJ,QAASuqJ,EAASvqJ,SAC3DwpJ,EAAc9/I,KAAK4a,IAAI5a,KAAKma,IAAI,EAAGxgB,EAAEyP,MAAS22I,EAAQgB,YAAahB,EAAQxpJ,MAAQ,GAKzF,OAHA6pJ,EAAOJ,GAAc,CAAEJ,gBAAeE,eAAee,EAASvqJ,UAC9DiqJ,KAEO,CACT,CAjCAM,EAASvqJ,QAAU,CAAEupJ,YAAWE,YAgBhCj2I,EAAAA,GAAAA,IAAcm2I,EAAe3pJ,QAAU,CACrCyT,UAAWi3I,EACX92I,OAAQ82I,EACR/2I,UAAWu2I,EACX3lJ,QAAS2lJ,EACTU,wBAAyB,kCACzBC,YAAY,KAadr3I,EAAAA,GAAAA,IAAco2I,EAAa5pJ,QAAU,CACnCyT,UAAWk3I,EACX/2I,OAAQ+2I,EACRh3I,UAAWu2I,EACX3lJ,QAAS2lJ,EACTU,wBAAyB,kCACzBC,YAAY,KAEb,CAACZ,EAAgBC,IAEpB,MAAM,cAAEZ,EAAgB,CAAC,EAAG,GAAE,YAAEE,EAAc,GAAMe,EAASvqJ,QAAUmpJ,GAAcC,EAAKmB,EAASvqJ,SAAW,CAAC,EACzG8qJ,GAAMlC,EAAAA,GAAAA,KAAQmC,EAAAA,GAAAA,IAAQ3B,IACtB4B,EAAM5B,EAAI,GACV6B,GAASrC,EAAAA,GAAAA,KAAQmC,EAAAA,GAAAA,IAAQ,CAACC,EAAK,EAAG,MAGxCjqJ,EAAAA,EAAAA,IAAU,KACR,MAAMmqJ,GAAMH,EAAAA,GAAAA,IAAQ3B,GACd/kJ,EAAQ,KAAIukJ,EAAAA,GAAAA,IAAQsC,KAK1B,GAHAd,EAAYc,EAAI/tI,KAAK,OACrBmtI,EAAYjmJ,IAEPwlJ,EAAc7pJ,QAAS,CAC1B,MAAMo5G,GAAesvC,EAAAA,GAAAA,IAAgBwC,GACrCvD,EAAiB,CACf9wF,MAAO+wF,EAAS5nJ,QAChBq5G,gBAAYhgH,EACZ6kE,gBAAiB75D,EACjB+0G,gBAEJ,CACAywC,EAAc7pJ,SAAU,GACvB,CAACopJ,EAAKzB,KAGT5mJ,EAAAA,EAAAA,IAAU,MA2GZ,SACEb,EACA8qJ,EACAR,EACAD,GAEA,IAAIY,EACAC,EACAp3H,EAECw2H,EAAYxqJ,SAAYuqJ,EAASvqJ,SAWpCmrJ,EAAIZ,EAASvqJ,QAAQupJ,UAAUtpJ,MAC/BmrJ,EAAIb,EAASvqJ,QAAQupJ,UAAUjpJ,OAC/B0zB,EAAMw2H,EAAYxqJ,UAXlBmrJ,EAAIjrJ,EAAOsnC,YACX4jH,EAAIlrJ,EAAO8wB,aACXgD,EAAM9zB,EAAOG,WAAW,MAExBH,EAAOD,MAAQkrJ,EACfjrJ,EAAOI,OAAS8qJ,EAEhBZ,EAAYxqJ,QAAUg0B,GAOxB,MAAMq3H,EAAUr3H,EAAKs3H,gBAAgBH,EAAGC,GAClCG,EAASF,EAAQn8I,KACjBs8I,GAAMT,EAAAA,GAAAA,IAAQ,CAACC,EAAK,EAAG,IAE7B,IAAIhwJ,EAAQ,EAEZ,IAAK,IAAIse,EAAI,EAAGA,EAAI8xI,EAAG9xI,IAAK,CAC1B,MAAMmyI,EAAO,EAAInyI,GAAK8xI,EAAI,GACpBM,EAAK,CAAC,IAAMD,EAAM,IAAMA,EAAM,IAAMA,GACpCE,EAAK,CAACH,EAAI,GAAKC,EAAMD,EAAI,GAAKC,EAAMD,EAAI,GAAKC,GACnD,IAAK,IAAIz4I,EAAI,EAAGA,EAAIm4I,EAAGn4I,IAAK,CAC1B,MAAM44I,EAAO54I,GAAKm4I,EAAI,GACtBI,EAAOvwJ,KAAW0wJ,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOvwJ,KAAW0wJ,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOvwJ,KAAW0wJ,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOvwJ,KAAW,GACpB,CACF,CAEAg5B,EAAK63H,aAAaR,EAAS,EAAG,EAChC,CAxJIS,CAAUnC,EAAe3pJ,QAAS3D,WAAiC2uJ,EAAKR,EAAaD,IACpF,CAACS,KAGJjqJ,EAAAA,EAAAA,IAAU,MAsJZ,SAAiBb,GACf,MAAMirJ,EAAIjrJ,EAAOsnC,YAEjBtnC,EAAOD,MAAQkrJ,EACfjrJ,EAAOI,OAFG,EAGV,MAAM0zB,EAAM9zB,EAAOG,WAAW,MAExBgrJ,EAAUr3H,EAAIs3H,gBAAgBH,EAL1B,GAMJI,EAASF,EAAQn8I,KAEvB,IAAIlU,EAAQ,EAEZ,IAAK,IAAIgY,EAAI,EAAGA,EAAIm4I,EAAGn4I,IAAK,CAC1B,MAAMg4I,EAAMh4I,GAAKm4I,EAAI,GACfD,GAAMH,EAAAA,GAAAA,IAAQ,CAACC,EAAK,EAAG,IAE7BO,EAAOvwJ,KAAWkwJ,EAAI,GACtBK,EAAOvwJ,KAAWkwJ,EAAI,GACtBK,EAAOvwJ,KAAWkwJ,EAAI,GAEtBK,EAAOvwJ,KAAW,GACpB,CAEAg5B,EAAI63H,aAAaR,EAAS,EAAG,EAC/B,CA7KIU,CAAQnC,EAAa5pJ,QAAS3D,aAC7B,IAEH,MAAM2vJ,GAAkB71J,EAAAA,EAAAA,IAAakN,IACnC,MAAM4oJ,EAAW5oJ,EAAE6X,cAAc/X,MAAMwuD,QAAQ,WAAY,IAAIptB,MAAM,EAAG,IAExE,GAAI0nH,EAAS/qH,MAAM,mCAAoC,CACrD,MAAMgqH,EAAMe,EAAS12E,MAAM,KAAKtrE,IAAKiiJ,GAAYpwI,OAAOowI,EAAQnoF,SAChE+lF,GAAOd,EAAAA,GAAAA,IAAQkC,GACjB,CAEA7nJ,EAAE6X,cAAc/X,MAAQ8oJ,GACvB,IAEGE,GAAkBh2J,EAAAA,EAAAA,IAAakN,IACnC,MAAM+oJ,EAAW/oJ,EAAE6X,cAAc/X,MAAMwuD,QAAQ,gBAAiB,IAAIptB,MAAM,EAAG,GAEzE6nH,EAASlrH,MAAM,uBACjB4oH,GAAOd,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQmD,EAASz6F,QAAQ,IAAK,OAG/CtuD,EAAE6X,cAAc/X,MAAQipJ,GACvB,IAEGC,GAA6Bl2J,EAAAA,EAAAA,IAAakN,IAC9CymJ,GAAOd,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQ5lJ,EAAE6X,cAAcoxI,QAAQjoJ,MAAOstD,QAAQ,IAAK,QAClE,IAEGr7D,GAAYqW,EAAAA,GAAAA,GAChB,gEACAsgE,GAAc,eAQhB,OALA1rD,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,KAIR5iE,EAAAA,GAAAA,IAAA,OAAKqU,IAAKqV,EAAcxpB,UAAWA,EAAUC,SAAA,EAC3CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,EACjCH,EAAAA,GAAAA,IAAA,OAAKqU,IAAKk/I,EAAgBrzJ,UAAU,eAAcC,SAAA,EAChDC,EAAAA,GAAAA,GAAA,cACAA,EAAAA,GAAAA,GAAA,OACEF,UAAU,SACVgG,MAAO,wBAAwBgtJ,EAAc,SAASA,EAAc,6BAA6BwB,WAGrG10J,EAAAA,GAAAA,IAAA,OAAKqU,IAAKm/I,EAActzJ,UAAU,aAAYC,SAAA,EAC5CC,EAAAA,GAAAA,GAAA,cACAA,EAAAA,GAAAA,GAAA,OACEF,UAAU,SACVgG,MAAO,yBAAyBktJ,4BAAsCyB,WAG1E70J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,QAAOC,SAAA,EACpBC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CAAChB,MAAOknJ,EAAU3mJ,MAAM,MAAMO,SAAUkoJ,KAClD31J,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CAAChB,MAAOgnJ,EAAUzmJ,MAAM,MAAMO,SAAU+nJ,WAGtDx1J,EAAAA,GAAAA,GAAA,OAAKF,UAAU,oBAAmBC,SAC/B2yJ,GAAkBj/I,IAAK5F,IACtB7N,EAAAA,GAAAA,GAAA,OACEF,WAAWqW,EAAAA,GAAAA,GAAe,mBAAoBtI,IAAU,IAAIymJ,IAAQ,cAAWzxJ,GAC/E,aAAYgL,EACZ/H,MAAO,qBAAqB+H,KAC5BE,QAAS8nJ,aCyErB,IAAel3J,EAAAA,EAAAA,IA/RsBo3J,EACnCxd,gBACAyd,iBACAxzF,cAEA,MAAM,QACJyzF,EAAO,0BACPz2E,EAAyB,mBACzBm5D,IACE3sI,EAAAA,EAAAA,OAEE,SAAE5M,IAAaC,EAAAA,EAAAA,OACd62J,EAAqBC,IAA0BhqJ,EAAAA,EAAAA,KAAS,GAEzDiqJ,ECnCO,SAAuB73G,EAAgBy9B,GACpD,MAAMq6E,GAAmBhtJ,EAAAA,EAAAA,IAAO,GAC1Bc,GAAad,EAAAA,EAAAA,MAkBnB,OAjBoB1J,EAAAA,EAAAA,IAAY,KAE9B,GADA02J,EAAiB7sJ,UD+BoB,IC9BjC6sJ,EAAiB7sJ,QAGnB,OAFA6sJ,EAAiB7sJ,QAAU,OAC3BwyE,IAIE7xE,EAAWX,SACbc,aAAaH,EAAWX,SAG1BW,EAAWX,QAAUqB,WAAW,KAC9BwrJ,EAAiB7sJ,QAAU,GAlBX,MAoBjB,CDiBoC,ECjB3BwyE,GAGd,CDc2Bs6E,CAAc,EAAG,KACxC3d,EAAmB,CAAES,OAAQP,EAAAA,GAAgB0V,iBAGzCgI,GAA0B52J,EAAAA,EAAAA,IAAY,KAC1Cw2J,GAAuB,IACtB,IAEGK,GAA2B72J,EAAAA,EAAAA,IAAY,KAC3Cw2J,GAAuB,IACtB,IAEGM,GAA+B92J,EAAAA,EAAAA,IAAY,KAC1Cq2J,GAELx2E,EAA0B,CAAEK,SAAUm2E,KACrC,CAACA,EAAgBx2E,IAEdk3E,GAAuB/2J,EAAAA,EAAAA,IAAY,KACvC62J,IACAP,EAAQ,CAAEU,cAAc,KACvB,CAACH,EAA0BP,IAExBW,GAAsE7uJ,EAAAA,EAAAA,IAAQ,IAC3E,EAAGsK,YAAW1G,aACnB3L,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLqN,QAASvgB,EACTc,KAAK,UACL2N,MAAM,cACN/N,UAAW6L,EAAS,SAAW,GAC/BoC,QAASsE,EACTE,UAAU,eAAcxS,UAExBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,WAGd,CAACnO,IAEEm4C,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,KAiNb,OACE53C,EAAAA,GAAAA,IAAA,OAAKE,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACL2N,MAAM,cACNE,QAASy0D,EACTjwD,UAAWglC,EAAQ,kBAAkBx3C,UAErCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,iBAxNjB,WACE,OAAQgrI,GACN,KAAKM,EAAAA,GAAgBge,YACnB,OAAO72J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,8BACtB,KAAKshG,EAAAA,GAAgBie,QACnB,OAAO92J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,aACtB,KAAKshG,EAAAA,GAAgBke,cACnB,OAAO/2J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,sBACtB,KAAKshG,EAAAA,GAAgBvmD,YACnB,OAAOtyF,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,WACtB,KAAKshG,EAAAA,GAAgB5kF,cACnB,OAAOj0D,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,mBACtB,KAAKshG,EAAAA,GAAgBme,YACnB,OAAOh3J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,kBACtB,KAAKshG,EAAAA,GAAgB0D,QACnB,OAAOv8I,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,qBACtB,KAAKshG,EAAAA,GAAgBoe,SACnB,OAAOj3J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,cACtB,KAAKshG,EAAAA,GAAgBqe,eACnB,OAAOl3J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,oBACtB,KAAKshG,EAAAA,GAAgBse,SACnB,OAAOn3J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,kBACtB,KAAKshG,EAAAA,GAAgB0V,aACnB,OAAOvuJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,+BAEtB,KAAKshG,EAAAA,GAAgBiX,sBACnB,OAAO9vJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,oBACtB,KAAKshG,EAAAA,GAAgB8Y,2BACnB,OAAO3xJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,cAEtB,KAAKshG,EAAAA,GAAgBue,mBACnB,OAAOp3J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,kBACtB,KAAKshG,EAAAA,GAAgBwe,gBACnB,OAAOr3J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,qBACtB,KAAKshG,EAAAA,GAAgBye,oBACnB,OAAOt3J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,0BACtB,KAAKshG,EAAAA,GAAgB0e,WACnB,OAAOv3J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,gBACtB,KAAKshG,EAAAA,GAAgB2e,gBACnB,OAAOx3J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,qBACtB,KAAKshG,EAAAA,GAAgB4e,aACnB,OAAOz3J,EAAAA,GAAAA,GAAA,MAAAD,SAAKgN,EAAK,kBACnB,KAAK8rI,EAAAA,GAAgB6e,kBACnB,OAAO13J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,qBACtB,KAAKshG,EAAAA,GAAgB8e,qBACnB,OAAO33J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,0BACtB,KAAKshG,EAAAA,GAAgB+e,gBACnB,OAAO53J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,qBACtB,KAAKshG,EAAAA,GAAgB2G,kBACnB,OAAOx/I,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,4BACtB,KAAKshG,EAAAA,GAAgB8G,iBACnB,OAAO3/I,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,WAEtB,KAAKshG,EAAAA,GAAgBgf,+BACrB,KAAKhf,EAAAA,GAAgBif,mCACrB,KAAKjf,EAAAA,GAAgBkf,0BACrB,KAAKlf,EAAAA,GAAgBmf,iCACnB,OAAOh4J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,qBAEtB,KAAKshG,EAAAA,GAAgBof,8BACrB,KAAKpf,EAAAA,GAAgBqf,kCACrB,KAAKrf,EAAAA,GAAgBsf,yBACrB,KAAKtf,EAAAA,GAAgBuf,gCACnB,OAAOp4J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,oBAEtB,KAAKshG,EAAAA,GAAgBwf,kCACrB,KAAKxf,EAAAA,GAAgByf,+BACrB,KAAKzf,EAAAA,GAAgB0f,4BACrB,KAAK1f,EAAAA,GAAgB2f,iCACrB,KAAK3f,EAAAA,GAAgB4f,oCACrB,KAAK5f,EAAAA,GAAgB6f,gCACrB,KAAK7f,EAAAA,GAAgB8f,+BACnB,OAAO34J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,iBAEtB,KAAKshG,EAAAA,GAAgB+f,iCACrB,KAAK/f,EAAAA,GAAgBggB,8BACrB,KAAKhgB,EAAAA,GAAgBigB,2BACrB,KAAKjgB,EAAAA,GAAgBkgB,gCACrB,KAAKlgB,EAAAA,GAAgBmgB,mCACrB,KAAKngB,EAAAA,GAAgBogB,+BACrB,KAAKpgB,EAAAA,GAAgBqgB,8BACnB,OAAOl5J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,gBAEtB,KAAKshG,EAAAA,GAAgBuH,sBACnB,OAAOpgJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKgN,EAAK,oBAEnB,KAAK8rI,EAAAA,GAAgBsgB,YACnB,OAAOn5J,EAAAA,GAAAA,GAAA,MAAAD,SAAKgN,EAAK,oBAEnB,KAAK8rI,EAAAA,GAAgBugB,eACnB,OAAOp5J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,mBACtB,KAAKshG,EAAAA,GAAgBwgB,eACnB,OAAOr5J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,sBACtB,KAAKshG,EAAAA,GAAgBygB,oBACnB,OAAOt5J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,kBAEtB,KAAKshG,EAAAA,GAAgB0gB,cACrB,KAAK1gB,EAAAA,GAAgB2gB,aACnB,OAAOx5J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,yBACtB,KAAKshG,EAAAA,GAAgB4gB,iBACrB,KAAK5gB,EAAAA,GAAgB6gB,uBACrB,KAAK7gB,EAAAA,GAAgB8gB,2BACnB,OAAO35J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,gCACtB,KAAKshG,EAAAA,GAAgB+gB,wBACnB,OAAO55J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,2BACtB,KAAKshG,EAAAA,GAAgBghB,qBACrB,KAAKhhB,EAAAA,GAAgBihB,wBACnB,OAAO95J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,kBACtB,KAAKshG,EAAAA,GAAgBkhB,sBACrB,KAAKlhB,EAAAA,GAAgBmhB,mBACnB,OAAOh6J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,wBACtB,KAAKshG,EAAAA,GAAgBohB,0BACrB,KAAKphB,EAAAA,GAAgBqhB,uBACnB,OAAOl6J,EAAAA,GAAAA,GAAA,MAAAD,SAAI,wBACb,KAAK84I,EAAAA,GAAgBshB,qBACnB,OAAOn6J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,oCACtB,KAAKshG,EAAAA,GAAgBuhB,2BACrB,KAAKvhB,EAAAA,GAAgBwhB,aACrB,KAAKxhB,EAAAA,GAAgByhB,kCACnB,OAAOt6J,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,gCAEtB,KAAKshG,EAAAA,GAAgB2D,iBACrB,KAAK3D,EAAAA,GAAgB6D,gBACrB,KAAK7D,EAAAA,GAAgB8C,oBACrB,KAAK9C,EAAAA,GAAgBgD,2BACrB,KAAKhD,EAAAA,GAAgBkD,wBACnB,OAAO/7I,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,cAEtB,KAAKshG,EAAAA,GAAgBoC,gBACnB,OAAOj7I,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,sCAEtB,KAAKshG,EAAAA,GAAgBmC,8BACrB,KAAKnC,EAAAA,GAAgBsD,0BACnB,OAAOn8I,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,qCAEtB,KAAKshG,EAAAA,GAAgBwD,8BACnB,OAAOr8I,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,oDAEtB,KAAKshG,EAAAA,GAAgBqB,QACnB,OAAOl6I,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,aACtB,KAAKshG,EAAAA,GAAgBC,oBACnB,OAAO94I,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,eACtB,KAAKshG,EAAAA,GAAgBX,aACnB,OAAOl4I,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,4BACtB,KAAKshG,EAAAA,GAAgBE,kBACrB,KAAKF,EAAAA,GAAgBG,8BACrB,KAAKH,EAAAA,GAAgBI,yBACnB,OACEr5I,EAAAA,GAAAA,IAAA,OAAKE,UAAU,uBAAsBC,SAAA,EACnCC,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,gBACZxsC,QAAQirJ,KACPh2J,EAAAA,GAAAA,GAACsT,GAAAA,EAAY,CACXxT,UAAU,qBACVyT,QAASqjJ,EACTpjJ,UAAU,QAAOzT,UAEjBC,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,SAASI,aAAW,EAACtF,QAAS0oJ,EAA6B12J,SACvEw3C,EAAQ,iBAMrB,KAAKshG,EAAAA,GAAgBK,qBACrB,KAAKL,EAAAA,GAAgBe,iCACrB,KAAKf,EAAAA,GAAgBM,qBACrB,KAAKN,EAAAA,GAAgBiB,iCACnB,OACE95I,EAAAA,GAAAA,GAAA,MAAAD,SACGw3C,EACCghG,IAAkBM,EAAAA,GAAgBK,sBAC/BX,IAAkBM,EAAAA,GAAgBe,iCACjC,gBAAkB,mBAI9B,QACE,OACEh6I,EAAAA,GAAAA,IAAA,OAAKE,UAAU,uBAAsBC,SAAA,EAEnCC,EAAAA,GAAAA,GAAA,MAAI+N,QAASqoJ,EAAiBr2J,SAC3Bw3C,EAAQ,eAGXv3C,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLqN,QAASvgB,EACTc,KAAK,UACL2N,MAAM,cAENE,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBge,cAC5DtkJ,UAAWglC,EAAQ,4BAA4Bx3C,UAE/CC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,YAEbvN,EAAAA,GAAAA,GAACsT,GAAAA,EAAY,CACXxT,UAAU,qBACVyT,QAASqjJ,EACTpjJ,UAAU,QAAOzT,UAEjBC,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,SAASlF,QAASwoJ,EAAwBx2J,SAAEw3C,EAAQ,sBAK/E,CAaK7O,IACD1oC,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQuqJ,EACRrqJ,QAAS2qJ,EACT1hJ,KAAMyiC,EAAQ,mBACdjU,aAAciU,EAAQ,0BACtBhU,eAAgBmzH,EAChBlzH,sBAAoB,SE5H5B,IAAe7kC,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,aACJk5J,EAAY,kBAAEC,EAAiB,eAAEzT,GAC/B1lJ,EAAOo1C,SAASmuG,OACd,SAAEqC,EAAQ,UAAEwT,IAAclmF,EAAAA,GAAAA,GAAqBlzE,GAIrD,MAAO,CACLw+B,sBAH2B0B,EAAAA,EAAAA,KAA2BlgC,GAItDo5J,YACAxT,WACAsT,eACAC,oBACAzT,mBAfcp4I,CAnJgC+rJ,EAClDlhJ,WACAqmB,uBACA46H,YACAxT,WACAsT,eACAC,oBACAzT,iBACAvkF,cAEA,MAAM,cACJm4F,EAAa,iBACbt8B,EAAgB,uBAChBtI,EAAsB,iBACtBn0F,EAAgB,mBAChB+2G,IACE3sI,EAAAA,EAAAA,OAEG4uJ,EAAkBC,IAAuB1uJ,EAAAA,EAAAA,IAAiB86I,IAC1DtyH,EAAWmmI,EAAeC,IAAmB97J,EAAAA,EAAAA,KAE9C+7J,EAA2Bn7H,GAAwB26H,EAEnDztJ,GAAOC,EAAAA,EAAAA,MAEbzC,EAAAA,EAAAA,IAAU,KACHkwJ,GAAW94J,QACdg5J,KAED,CAACF,IAEJ,MAAM3sE,GAAevhF,EAAAA,EAAAA,GAAiBiyH,IACpCq8B,EAAoBr8B,GACpBs8B,KAEKG,EAAAA,GAAAA,IAAez8B,EAAsB,KACxCu8B,IAEAhlC,EAAuB,CAAEkxB,SAAUzoB,QAIjChxH,GAAUzF,EAAAA,EAAAA,IAAQ,KACtB,IAAK0yJ,EAAW,OAChB,MAAMS,GAAmBtwJ,OAAOuwJ,UAAUlU,UAAY,MAAM35F,cACtD8tG,EAAgBF,EAAgBG,OAAO,EAAG,GAEhD,OAAOZ,EAAUhnJ,IAAI,EAAG+qH,WAAU88B,aAAY/tJ,WAAW,CACvDZ,MAAO6xH,EACPtxH,MAAOouJ,EACPxgE,SAAUvtF,EACVonB,UAAW6pG,IAAao8B,GAAoBjmI,KACf8yB,KAAMC,IAC5BwzG,GAAoBxzG,EAAE/6C,QAAUuuJ,GAAmBxzG,EAAE/6C,QAAUyuJ,EAAsB,GAAJ,IAEzF,CAACzmI,EAAW8lI,EAAWG,IAEpBW,GAA8BhvJ,EAAAA,EAAAA,GAAiBiwF,IACnD6hC,EAAiB,CAAEk8B,aAAc/9D,MAG7Bg/D,GAAmCjvJ,EAAAA,EAAAA,GAAiBiwF,IACxD6hC,EAAiB,CAAEm8B,kBAAmBh+D,MAGlCi/D,GAAkClvJ,EAAAA,EAAAA,GAAgB,KACjDszB,GACH+B,EAAiB,CACfQ,eAAgB,mBAKhBs5H,GAAqB3zJ,EAAAA,EAAAA,IAAQ,KACjC,GAAK4zJ,EAAAA,IAA6B5U,EAAeplJ,OAIjD,OAA8B,IAA1BolJ,EAAeplJ,OACK,IAAIo9H,KAAKC,aAAa,CAACioB,GAAW,CAAE/lJ,KAAM,aAC3C+9H,GAAG8nB,EAAe,IAGlCh6I,EAAK,YAAag6I,EAAeplJ,SACvC,CAAColJ,EAAgBh6I,EAAMk6I,IAEpB2U,GAAwBrvJ,EAAAA,EAAAA,GAAgB,KAC5CosI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBqe,mBAQ/C,OALAnsI,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,KAIR5iE,EAAAA,GAAAA,IAAA,OAAKE,UAAU,mDAAkDC,SAAA,CAC9D47J,EAAAA,KACC/7J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,uBACZm8B,QAASqxH,EACT1jG,QAAS0kG,KAEXv7J,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,2BACZm8B,QAAS8xH,EACT76I,UAAW0f,EACXmuF,UAAYnuF,OAAgCh9B,EAAT,OACnCorH,aAAcwtC,EACd5kG,QAAS2kG,KAETjB,GAAgBS,KAChBp7J,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPm/E,QAAM,EACN3zG,QAAS6tJ,EAAsB77J,SAAA,CAE9BgN,EAAK,mBACN/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,SAAE27J,QAGpD17J,EAAAA,GAAAA,GAAA,KAAGF,UAAU,sCAAqCC,SAC/CgN,EAAK,sCAIZnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qCAAoCC,SAAA,EACjDC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAsBC,SACjCgN,EAAK,oCAEPS,GACCxN,EAAAA,GAAAA,GAACy4H,GAAU,CACTtvE,MAAO37C,EACP4rH,cAAewhC,EACf/hC,qBAAmB,EACnBkB,sBAAuBjsC,EACvB3oD,cAAc,QACdrlC,UAAU,qBAGZE,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,a,wCCtIlB,MAyNA,IAAe9wD,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,cAAE+yB,GAAkB/yB,EACpBw6J,GAAsBC,EAAAA,EAAAA,IAAuCz6J,GAC7D+iH,EAAe/iH,EAAO+5F,OAAOipB,QAC7B8C,EAAa9lH,EAAO+lH,KAAK/C,QAE/B,MAAO,CACL03C,aAAc16J,EAAO0/I,eAAeqB,cAAczgJ,OAClDyyB,gBACA6qE,gBAAgBC,EAAAA,EAAAA,KAA+B79F,GAC/Cw6J,sBACAz3C,eACA+C,eAbcx4G,CAzN4BqtJ,EAC9CxiJ,WACA4a,gBACA2nI,eACA98D,gBACA48D,sBACAz3C,eACA+C,aACA3kD,cAEA,MAAM,sBACJvsC,EAAqB,iBACrB2L,EAAgB,gBAChBq6H,EAAe,QACf9lI,EAAO,wBACP+lI,EAAuB,sBACvB10C,EAAqB,mBACrBmxB,IACE3sI,EAAAA,EAAAA,OAEGmwJ,EAAqBC,EAAmBC,IAAsBp9J,EAAAA,EAAAA,IAAQ,GAEvE8N,GAAOyqC,EAAAA,GAAAA,MAEbjtC,EAAAA,EAAAA,IAAU,KACJ6pB,GACF6B,EAAsB,CAAErqB,OAAQwoB,EAAekoI,WAAW,KAE3D,CAACloI,KAEJrJ,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAGV,MAAM+5F,GAAoBhwJ,EAAAA,EAAAA,GAAgB,KACxC0vJ,IACAI,MAGF,OACEz8J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,kCAAiCC,SAAA,CAC7Cq0B,IACCp0B,EAAAA,GAAAA,GAACw8J,GAAAA,EAAW,CACV5wJ,OAAQwoB,EACRqoI,aAAc1xJ,QAAQyO,GACtBkjJ,eAAa,IAGhBtoI,IACCp0B,EAAAA,GAAAA,GAAC28J,GAAAA,EAAS,CACRC,aAAcxoI,EACdyoI,cAAY,QAIlBj9J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,WACLyuG,QAAM,EAEN3zG,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBie,UAAW/2J,SAEtEgN,EAAK,4CAER/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,aACLyuG,QAAM,EAEN3zG,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBsgB,cAAep5J,SAE1EgN,EAAK,qBAER/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,SACLyuG,QAAM,EAEN3zG,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB5kF,gBAAiBl0D,SAE5EgN,EAAK,oBAER/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,OACLyuG,QAAM,EAEN3zG,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBme,cAAej3J,SAE1EgN,EAAK,mBAER/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,OACLyuG,QAAM,EAEN3zG,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB0D,UAAWx8I,SAEtEgN,EAAK,sBAER/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,SACLyuG,QAAM,EAEN3zG,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBqB,UAAWn6I,SAEtEgN,EAAK,cAERnN,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,kBACLyuG,QAAM,EAEN3zG,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBugB,iBAAkBr5J,SAAA,CAE7EgN,EAAK,iBACLgvJ,EAAe,IAAM/7J,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,SAAEg8J,QAExEn8J,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,WACLyuG,QAAM,EAEN3zG,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBoe,WAAYl3J,SAAA,CAEvEgN,EAAK,aACN/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,SAAEgN,EAAK+vJ,aAAaxB,iBAEpEt7J,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,WACLyuG,QAAM,EAEN3zG,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBse,WAAYp3J,SAEvEgN,EAAK,sBAGVnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,CAChCk/F,IACCj/F,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPG,aAAa1iC,EAAAA,GAAAA,GAACs+I,GAAAA,EAAQ,CAACx+I,UAAU,0BAA0BoB,KAAK,UAAUhB,KAAK,QAC/EwhH,QAAM,EAEN3zG,QAASA,IAAM6zB,IAAmB7hC,SAEjCgN,EAAK,sBAGVnN,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPG,aAAa1iC,EAAAA,GAAAA,GAACs+I,GAAAA,EAAQ,CAACx+I,UAAU,0BAA0BoB,KAAK,OAAOhB,KAAK,QAC5EwhH,QAAM,EAEN3zG,QAASA,IAAMy5G,EAAsB,CAAC,GAAGznH,SAAA,CAExCgN,EAAK,aACLhC,QAAQq5G,KACPpkH,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,UAC3Cg9J,EAAAA,GAAAA,IAAkBhwJ,EAAMq3G,SAI/BxkH,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPG,aAAa1iC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAAC1S,UAAU,0BAA0ByN,KAAK,YAC5Dm0G,QAAM,EACN3zG,QAASA,IAAMy5G,EAAsB,CAAEz7B,SAAUo8B,EAAAA,MAAqBpoH,SAAA,CAErEgN,EAAK,WACLhC,QAAQo8G,KACPnnH,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,UAC3Ci9J,EAAAA,GAAAA,IAA4B71C,EAAW5oE,OAAQ4oE,EAAWp7B,eAIhE8vE,IACC77J,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,OACLyuG,QAAM,EAEN3zG,QAASA,IAAMmuJ,IAA0Bn8J,SAExCgN,EAAK,sBAIZnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,cACLyuG,QAAM,EACN3zG,QAASquJ,EAAkBr8J,SAE1BgN,EAAK,mBAER/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,OACLyuG,QAAM,EAEN3zG,QAASA,IAAMooB,EAAQ,CAAE5e,IAAK0lJ,EAAAA,MAAWl9J,SAExCgN,EAAK,sBAER/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,iBACLyuG,QAAM,EAEN3zG,QAASA,IAAMooB,EAAQ,CAAE5e,IAAK2lJ,EAAAA,MAAen9J,SAE5CgN,EAAK,2BAGV/M,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQwwJ,EACR74H,aAAcv2B,EAAK,MACnBI,MAAOJ,EAAK,gBACZgb,UAAWhb,EAAK,mBAAelK,EAAW,CAAE67C,WAAW,EAAMiV,kBAAmB,CAAC,QACjFpwB,eAAgBg5H,EAChB1wJ,QAASwwJ,U,2BC3NjB,MA+MA,IAAe19J,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACQ,CACL87J,8BAA+BpyJ,QAAQ1J,EAAOo1C,SAASmuG,MAAMuY,+BAC7DC,oBAAqB/7J,EAAOo1C,SAASmuG,MAAMwY,oBAC3CC,qBAAsBh8J,EAAOo1C,SAASmuG,MAAMyY,qBAC5CC,wBAAyBj8J,EAAOo1C,SAASmuG,MAAM0Y,wBAC/CC,eAAgBl8J,EAAOo1C,SAAS8mH,iBAPlB5uJ,CA/MqC6uJ,EACvDhkJ,WACAgpD,UACA+6F,iBACAJ,gCACAE,uBACAD,sBACAE,8BAEA,MAAM,yBACJG,EAAwB,gCACxBC,EAA+B,2BAC/BC,EAA0B,8BAC1BC,IACE5xJ,EAAAA,EAAAA,OAEJzB,EAAAA,EAAAA,IAAU,KACRkzJ,KACC,CAACA,IAEJ,MAAMI,GAAeC,EAAAA,GAAAA,GAAgB,KAAK,GAEpCC,GAA4BC,EAAAA,GAAAA,MAC5BC,EAAmCF,KAA8BG,EAAAA,GAAAA,MAEjEC,EAAmBpzJ,QAAQwyJ,GAAgB5zE,UAAU85C,YACrD26B,EAAiBrzJ,QAAQwyJ,GAAgBc,QAAQ56B,YACjD66B,EAAgBvzJ,QAAQwyJ,GAAgB72H,OAAO+8F,YAE/C86B,GAAuB5+J,EAAAA,EAAAA,IAAY,CACvCkN,EACA2xJ,EACAC,KAEA,MAAMC,EAAiB3zJ,QAAQwyJ,IAAiBiB,IAAW/6B,YACrDk7B,EAA4B5zJ,QAAQwyJ,IAAiBiB,IAAWI,oBAEtEjB,EAA2B,CACzBa,WACApgJ,QAAqB,SAAZqgJ,GAAsB5xJ,EAAEC,OAAOo8B,QAAUw1H,EAClDE,mBAAgC,iBAAZH,EAA6B5xJ,EAAEC,OAAOo8B,QAAUy1H,KAErE,CAACpB,IAEEsB,GAA+Bl/J,EAAAA,EAAAA,IAAakN,IAChD,MAAMmkE,EAAYnkE,EAAEC,OAAOo8B,QAC3B00H,EAA8B,CAC5BR,oBAAqBpsF,MAChBA,GAAa,CAAEqsF,sBAAsB,MAE3C,CAACO,IAEEkB,GAAgCn/J,EAAAA,EAAAA,IAAakN,IACjD+wJ,EAA8B,CAC5BP,qBAAsBxwJ,EAAEC,OAAOo8B,WAEhC,CAAC00H,IAEEmB,GAAwCp/J,EAAAA,EAAAA,IAAakN,IACzD0xJ,EAAqB1xJ,EAAG,QAAS,SAChC,CAAC0xJ,IAEES,GAAkCr/J,EAAAA,EAAAA,IAAakN,IACnD0xJ,EAAqB1xJ,EAAG,QAAS,iBAChC,CAAC0xJ,IAEEU,GAAkCt/J,EAAAA,EAAAA,IAAakN,IACnD0xJ,EAAqB1xJ,EAAG,SAAU,SACjC,CAAC0xJ,IAEEW,GAA4Bv/J,EAAAA,EAAAA,IAAakN,IAC7C0xJ,EAAqB1xJ,EAAG,SAAU,iBACjC,CAAC0xJ,IAEEY,GAAoCx/J,EAAAA,EAAAA,IAAakN,IACrD0xJ,EAAqB1xJ,EAAG,WAAY,SACnC,CAAC0xJ,IAEEa,GAA8Bz/J,EAAAA,EAAAA,IAAakN,IAC/C0xJ,EAAqB1xJ,EAAG,WAAY,iBACnC,CAAC0xJ,IAEEc,GAAkC1/J,EAAAA,EAAAA,IAAakN,IACnD6wJ,EAAgC,CAC9BzpC,UAAWpnH,EAAEC,OAAOo8B,WAErB,CAACw0H,IAEE54I,GAAqBnlB,EAAAA,EAAAA,IAAawe,IACtCy/I,EAA8B,CAC5BN,wBAAyBn/I,IAE3B0/I,EAAa,KAAMyB,EAAAA,GAAAA,SAAgBz8J,EAAWsb,KAC7C,CAAC0/I,EAAcD,IAEZ7wJ,GAAOyqC,EAAAA,GAAAA,KAOb,OALAzsB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,KAIR5iE,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACtEgN,EAAK,uBAER/M,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,oBACZ+tF,SAAU/tF,EAAKqwJ,EAAsB,+BAAiC,iCACtEl0H,QAASk0H,EACTj9I,UAAW49I,EACXtwJ,SAAUoxJ,KAEZ7+J,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,wBACZoT,UAAWi9I,IAAwBa,EACnCnjE,SACI/tF,EADMkxJ,EACDZ,EAAuB,+BAAiC,gCACxD,0CACTn0H,QAASm0H,EACT5vJ,SAAUqxJ,KAEZ9+J,EAAAA,GAAAA,GAAA,OAAKF,UAAU,uBAAsBC,UACnCC,EAAAA,GAAAA,GAAC4f,GAAAA,EAAW,CACV1S,MAAOH,EAAK,sBACZ+gB,IAAK,EACLT,IAAK,GACLlN,UAAW49I,EACXpxJ,MAAO2wJ,EACP7vJ,SAAUqX,UAIhBllB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACtEgN,EAAK,+BAGR/M,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,gCACZ+tF,SAAU/tF,EAAMuxJ,EAAiD,gCAAjC,gCAChCp1H,SAAUo1H,EACV7wJ,SAAUsxJ,KAEZ/+J,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,kBACZoT,SAAUm+I,EACVxjE,SAAU/tF,EAAKwwJ,GAAgB72H,OAAOk4H,mBAClC,+BAAiC,iCACrC11H,QAASn+B,QAAQwyJ,GAAgB72H,OAAOk4H,oBACxCnxJ,SAAUuxJ,QAIdp/J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAEgN,EAAK,mBAEhF/M,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,0BACZ+tF,SAAU/tF,EAAMqxJ,EAAkD,gCAAjC,gCACjCl1H,SAAUk1H,EACV3wJ,SAAUwxJ,KAEZj/J,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,kBACZoT,SAAUi+I,EACVtjE,SAAU/tF,EAAKwwJ,GAAgBc,QAAQO,mBACnC,+BAAiC,iCACrC11H,QAASn+B,QAAQwyJ,GAAgBc,QAAQO,oBACzCnxJ,SAAUyxJ,QAIdt/J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAEgN,EAAK,qBAEhF/M,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,4BACZ+tF,SAAU/tF,EAAMoxJ,EAAoD,gCAAjC,gCACnCj1H,SAAUi1H,EACV1wJ,SAAU0xJ,KAEZn/J,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,kBACZoT,SAAUg+I,EACVrjE,SAAU/tF,EAAKwwJ,GAAgB5zE,UAAUi1E,mBACrC,+BAAiC,iCACrC11H,QAASn+B,QAAQwyJ,GAAgB5zE,UAAUi1E,oBAC3CnxJ,SAAU2xJ,QAIdx/J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAEgN,EAAK,iBAEhF/M,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,iBACZm8B,QAASi0H,EACT1vJ,SAAU4xJ,a,4BC9LpB,MAAME,GAA4C,CAChD,+BACA,kCACA,iCAGIC,GAAmD,CACvD,+BACA,kCACA,iCAGIC,GAA4C,CAChD,CAAC,yCAA0C,CACzC,CAAEh6I,IAAK,kBAAmBvY,MAAO,sCACjC,CAAEuY,IAAK,2BAA4BvY,MAAO,8BAC1C,CAAEuY,IAAK,wBAAyBvY,MAAO,kCACvC,CAAEuY,IAAK,4BAA6BvY,MAAO,+BAC3C,CAAEuY,IAAK,wBAAyBvY,MAAO,uCACvC,CAAEuY,IAAK,kBAAmBvY,MAAO,iCAAkCiT,UAAWu/I,EAAAA,IAC9E,CAAEj6I,IAAK,wBAAyBvY,MAAO,kCACvC,CAAEuY,IAAK,aAAcvY,MAAO,+BAE9B,CAAC,8BAA+B,CAC9B,CAAEuY,IAAK,gBAAiBvY,MAAO,oCAC/B,CAAEuY,IAAK,uBAAwBvY,MAAO,mCACtC,CAAEuY,IAAK,kBAAmBvY,MAAO,sCACjC,CAAEuY,IAAK,iBAAkBvY,MAAO,uCAElC,CAAC,mCAAoC,CACnC,CAAEuY,IAAK,eAAgBvY,MAAO,kCAC9B,CAAEuY,IAAK,iBAAkBvY,MAAO,uCA0JpC,IAAevO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAsBtN,IACjC,CACLs+J,qBAAqBC,EAAAA,EAAAA,KAA0Bv+J,KAF/BsN,CAtJpB,UAA6B,SAC3B6K,EAAQ,oBACRmmJ,EAAmB,QACnBn9F,IAEA,MAAM,uBACJuzD,EAAsB,0BACtB8pC,IACE7zJ,EAAAA,EAAAA,OAEJ+e,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAGV,MAAMz1D,GAAOyqC,EAAAA,GAAAA,MACNsoH,EAAuBC,IAA4B5zJ,EAAAA,EAAAA,IAAkC,CAAC,GAEvF6zJ,GAAuBj4J,EAAAA,EAAAA,IAAQ,IAC5B03J,GAAoBn9G,OAAO,CAACkL,GAAM,CAAEhgD,GAAUhJ,KACnDgpD,EAAIhpD,GAASgJ,EAAQynG,MAAM,EAAGxvF,SAAUk6I,EAAoBl6I,IAErD+nC,GACN,CAAC,GACH,CAACmyG,IAEEM,GAAsBl4J,EAAAA,EAAAA,IAAQ,KAC9Bm4J,EAAAA,GAAAA,GAAaP,EAAqBQ,GAAAA,IAC7BC,EAAAA,KAELF,EAAAA,GAAAA,GAAaP,EAAqBU,GAAAA,IAC7BC,EAAAA,KAELJ,EAAAA,GAAAA,GAAaP,EAAqBY,GAAAA,IAC7BC,EAAAA,IAGFC,EAAAA,IACN,CAACd,IAEEe,GAAwB34J,EAAAA,EAAAA,IAAQ,KACpBk4J,IAAwBQ,EAAAA,IACpCjB,GACAD,IAEW9rJ,IAAKw1B,GAAWl8B,EAAKk8B,IACnC,CAACg3H,EAAqBlzJ,IAEnB4zJ,GAAsBhhK,EAAAA,EAAAA,IAAY,CAACkN,EAAqBrI,KAC5DqI,EAAE6Y,iBACF,MAAMk7I,EAAet7I,OAAO9gB,GAE5Bu7J,EAA0B/9F,IAAI,IACzBA,EACH,CAAC4+F,IAAgB5+F,EAAK4+F,OAEvB,IAEGC,GAA6BlhK,EAAAA,EAAAA,IAAamhK,IAC9C,MAAMC,EAAcD,IAAaR,EAAAA,IAC7BD,GAAAA,GACCS,IAAaN,EAAAA,IAAsBD,GAAAA,GAAgCJ,GAAAA,GAExEpqC,EAAuB,CAAE8X,eAAgBizB,EAA4BE,8BAA8B,IACnGnB,EAA0BkB,IACzB,IAEGE,GAA4BthK,EAAAA,EAAAA,IAAakN,IAC7C,MAAM,KAAEU,EAAI,QAAE27B,GAAYr8B,EAAEC,OACtBo0J,EAAoBzB,GAAoBjqH,KAAK,EAAE2rH,KAAiBA,IAAgB5zJ,GACtF,IAAK2zJ,EACH,OAGF,MAAME,EAAcF,EAAkB,GAAG5+G,OAAO,CAACkL,GAAO/nC,UACtD+nC,EAAI/nC,GAAOyjB,EACJskB,GACN,CAAC,GAEJqyG,EAA0BuB,IACzB,IAEGC,GAAuB1hK,EAAAA,EAAAA,IAAakN,IACxC,MAAM,KAAEU,EAAI,QAAE27B,GAAYr8B,EAAEC,OAE5B+yJ,EAA0B,CAAE,CAACtyJ,GAA6B27B,KACzD,IAEH,OACEtpC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACtEgN,EAAK,qCAER/M,EAAAA,GAAAA,GAAA,KAAGF,UAAU,4BAA4BuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAC1EgN,EAAK,wCAGR/M,EAAAA,GAAAA,GAAC4f,GAAAA,EAAW,CACVpS,QAASkzJ,EACT/zJ,MAAOszJ,IAAwBQ,EAAAA,IAAyBD,EAAAA,IAAsBP,EAC9ExyJ,SAAUozJ,QAIdjhK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,4DAA2DC,SAAA,EACxEC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAI,OAAMtW,SAAEgN,EAAK,sCAErD0yJ,GAAoBhsJ,IAAI,EAAE0tJ,EAAa3zJ,GAAUhJ,KAE9C5E,EAAAA,GAAAA,IAAA,OAEEE,UAAU,4BAA2BC,SAAA,EAErCC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,yBAAwBC,UACrCC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAM4zJ,EACNx0J,MAAOnI,EAAMsoF,WACb5jD,QAAS82H,EAAqBx7J,GAC9B0I,MAAOH,EAAKo0J,GACZnzC,UAAW8xC,EAAsBt7J,GAAS,KAAO,OACjDiJ,SAAUwzJ,EACVhzC,aAAc0yC,MAGjB51J,QAAQ+0J,EAAsBt7J,MAC7BxE,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kCAAiCC,SAC7CyN,EAAQiG,IAAI,EAAGgS,MAAKvY,QAAOiT,eAC1B,GAAY,eAARsF,GAAyBgpI,EAAAA,GAC7B,OACEzuJ,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CAEPrpD,KAAMkY,EACNyjB,QAASy2H,EAAoBl6I,GAC7BvY,MAAOH,EAAKG,GACZiT,SAAUA,EACV1S,SAAU4zJ,GALL57I,SApBV07I,SAqCnB,IC4OA,IAAexiK,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MACEo1C,UACEmuG,OAAO,YACL0c,EAAW,mBAAE70F,EAAkB,mBAAE80F,EAAkB,kCAAEC,EAAiC,uCACtF7iB,EAAsC,yBAAEJ,GACzC,QACDt3G,EAAO,eACPw6H,GACD,QACDl8G,EACA41F,UAAU,YACRumB,GACD,UACDxtH,GACE7yC,GAEE,sBAAEsgK,IAA0BptF,EAAAA,GAAAA,GAAqBlzE,GACjDw9I,EAA0B9zI,QAAQwzI,GAClCqjB,GAAsB1rH,EAAAA,EAAAA,KAA0B70C,GAChDw+B,GAAuB0B,EAAAA,EAAAA,KAA2BlgC,GAExD,MAAO,CACLw+B,uBACAyhI,cACAI,YAAa32J,QAAQ22J,GACrBG,aAAct8G,EAAQw6D,WACtB+hD,aAAczgK,EAAOsiJ,kBAAkBvB,cAAczgJ,OACrD8qE,qBACAs1F,6BAA8B7tH,EAAU6tH,8BAAgCliI,EACxE2hI,oCACAD,qBACA5iB,yCACAE,0BACAmjB,yBAA0Bj3J,QAAQmpC,EAAU8tH,0BAC5C/6H,UACA06H,wBACAM,gBAAgBC,EAAAA,EAAAA,KAAqB7gK,GACrCugK,sBACAH,mBAxCc9yJ,CAzZ+BwzJ,EACjD3oJ,WACAqmB,uBACAyhI,cACAI,cACAG,eACAC,eACAr1F,qBACA80F,qBACAQ,+BACAP,oCACA7iB,yCACAE,0BACA8iB,wBACAM,iBACAD,2BACA/6H,UACAu7B,UACAo/F,sBACAH,qBAEA,MAAM,uBACJW,EAAsB,oBACtBC,EAAmB,iBACnBC,EAAgB,sBAChBj4F,EAAqB,0BACrBk4F,EAAyB,4BACzB3qC,EAA2B,sBAC3B4qC,EAAqB,uBACrBzsC,EAAsB,mBACtB4iB,EAAkB,mBAClB8pB,EAAkB,yBAClBC,IACE12J,EAAAA,EAAAA,OAEJzB,EAAAA,EAAAA,IAAU,KACHq3J,IACHU,IACAD,IACAG,MAED,CAACZ,KAEJr3J,EAAAA,EAAAA,IAAU,KACJiP,IAAaooJ,IACfW,IACAE,MAED,CAACjpJ,EAAUooJ,EAAqBW,IAEnC,MAAMhrH,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,MAEbzsB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAGV,MAAMmgG,GAA6BhjK,EAAAA,EAAAA,IAAaqxE,IAC9C4mD,EAA4B,CAC1B4pC,kCAAmCxwF,KAEpC,CAAC4mD,IAEEgrC,GAA0BjjK,EAAAA,EAAAA,IAAa46H,IAC3CxE,EAAuB,CACrB4rC,sBAAuBpnC,KAExB,IAEGsoC,GAA8BljK,EAAAA,EAAAA,IAAa46H,IAC/ClwD,EAAsB,CAAEoC,mBAAoB8tD,KAC3C,CAAClwD,IAEEy4F,GAAwBnjK,EAAAA,EAAAA,IAAY,KACxC+iK,KACC,CAACA,IAEEK,GAA+Bx2J,EAAAA,EAAAA,GAAgB,KAC9Ck1J,GACLW,EAAuB,CAAEjqD,KAAMspD,MAG3BuB,GAAYj7J,EAAAA,EAAAA,IAAQ,KACxB,GAAK05J,EACL,OAAOlqD,GAAgBW,EAAAA,IAAqBupD,EAvFzB,IAuF0D30E,YAC5E,CAAC20E,IAEJ,SAASwB,EAAmBxE,GAC1B,IAAKA,EAAS,OAAOlnH,EAAQ,WAE7B,MAAM,WAAE/Q,EAAU,mBAAE08H,EAAkB,YAAEC,GAAgB1E,EAGlD2E,EAAuC,cAAf58H,EACxB68H,EAF8B,UAAhBF,IAEyBC,EAEvCE,EAAa7E,EAAQ8E,aAAa5hK,OAAS88J,EAAQ52H,aAAalmC,OAChE6hK,EAAa/E,EAAQgF,aAAa9hK,OAAS88J,EAAQ92H,aAAahmC,OAChE2kF,EAAQ,GACVg9E,GAAYh9E,EAAMtzE,KAAK,IAAIswJ,KAC3BE,IAAeJ,GAAuB98E,EAAMtzE,KAAK,IAAIwwJ,KAEzD,MAGME,EAAkB,CAHCL,EAAuBt2J,EAAK,oBAAsB,GACvDA,EAAK42J,YAAYr9E,IAEmB3oD,OAAO5yB,SAAS4b,KAAK,KAC7E,GAAI08I,IAAyBD,EAAuB,OAAOM,EAE3D,GAAIR,EACF,OAAO3rH,EAAQmsH,EAAkB,qBAAuB,kBAG1D,OAAQl9H,GACN,IAAK,YACH,MAAO,GAAG+Q,EAAQ,mBAAmBmsH,IAEvC,IAAK,WACH,MAAO,GAAGnsH,EAAQ,kBAAkBmsH,IAEtC,IAAK,SACH,MAAO,GAAGnsH,EAAQ,gBAAgBmsH,IAIxC,CAEA,OACE9jK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,cACLyuG,QAAM,EAEN3zG,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBygB,sBAAuBv5J,SAAA,CAElFw3C,EAAQ,iBACTv3C,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,SAAE8hK,GAAgB,QAEjEI,IACCjiK,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,MACLyuG,QAAM,EAEN3zG,QAASA,IAAM4qI,EAAmB,CAChCS,OAAQsoB,EAAc7oB,EAAAA,GAAgB6D,gBAAkB7D,EAAAA,GAAgB2D,mBACvEz8I,UAEHH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEw3C,EAAQ,eACjCv3C,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWuW,IAAI,OAAMtW,SAClCw3C,EAAQmqH,EAAc,aAAe,uBAK9C1hK,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,OACLyuG,QAAM,EAEN3zG,QAASA,IAAM4qI,EAAmB,CAChCS,OAAQkoB,EAAczoB,EAAAA,GAAgB2gB,aAAe3gB,EAAAA,GAAgB0gB,gBACpEx5J,UAEHH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEw3C,EAAQ,0BACjCv3C,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWuW,IAAI,OAAMtW,SAClCw3C,EAAQ+pH,EAAc,aAAe,sBAI3CQ,EAAe,IACdliK,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,MACLyuG,QAAM,EAEN3zG,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBwgB,iBAAkBt5J,SAAA,CAE7Ew3C,EAAQ,gCACTv3C,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,SAAE+hK,WAKtDliK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SAAEw3C,EAAQ,mBAEtFv3C,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPm/E,QAAM,EACN5hH,UAAU,UAEViO,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBue,qBAAsBr3J,UAElFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEw3C,EAAQ,wBACjCv3C,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWuW,IAAI,OAAMtW,SAClCkjK,EAAmBh8H,EAAQo2B,qBAIlCr9D,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPm/E,QAAM,EACN5hH,UAAU,UAEViO,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBwe,kBAAmBt3J,UAE/EH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEw3C,EAAQ,oBACjCv3C,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWuW,IAAI,OAAMtW,SAClCkjK,EAAmBh8H,EAAQ28H,kBAIlC5jK,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPm/E,QAAM,EACN5hH,UAAU,UAEViO,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBye,sBAAuBv3J,UAEnFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEw3C,EAAQ,+BACjCv3C,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWuW,IAAI,OAAMtW,SAClCkjK,EAAmBh8H,EAAQ48H,sBAIlC7jK,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPm/E,QAAM,EACN5hH,UAAU,UAEViO,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB0e,aAAcx3J,UAE1EH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEw3C,EAAQ,iBACjCv3C,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWuW,IAAI,OAAMtW,SAClCkjK,EAAmBh8H,EAAQ4jH,aAIlC7qJ,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPm/E,QAAM,EACN5hH,UAAU,UAEViO,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB2e,kBAAmBz3J,UAE/EH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEw3C,EAAQ,sBACjCv3C,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWuW,IAAI,OAAMtW,SAClCkjK,EAAmBh8H,EAAQ68H,kBAIlC9jK,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPm/E,QAAM,EACN5hH,UAAU,UAEViO,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB4e,eAAgB13J,UAE5EH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,EAAK,mBAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWuW,IAAI,OAAMtW,SAClCkjK,EAAmBh8H,EAAQuvD,eAIlCx2F,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPm/E,QAAM,EACN5hH,UAAU,UAEViO,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB6e,oBAAqB33J,UAEjFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEw3C,EAAQ,2BACjCv3C,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWuW,IAAI,OAAMtW,SAClCkjK,EAAmBh8H,EAAQ88H,kBAIlC/jK,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPm/E,QAAM,EACN5hH,UAAU,UAEViO,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB8G,mBAAoB5/I,UAEhFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEw3C,EAAQ,mBACjCv3C,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWuW,IAAI,OAAMtW,SAClCkjK,EAAmBh8H,EAAQy4G,mBAIlC1/I,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPm/E,QAAM,EACNsiD,oBAAkB,EAClBx+G,aAAc3lB,IAAwB7/B,EAAAA,GAAAA,GAACs+I,GAAAA,EAAQ,CAACp+I,KAAK,MAAMgB,KAAK,YAChEpB,UAAU,UAEViO,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB8e,uBAAwB53J,UAEpFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEw3C,EAAQ,gCACjCv3C,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWuW,IAAI,OAAMtW,SAClCkjK,EAAmBh8H,EAAQg9H,uBAIlCjkK,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPm/E,QAAM,EACNl8D,aAAc3lB,IAAwB7/B,EAAAA,GAAAA,GAACs+I,GAAAA,EAAQ,CAACp+I,KAAK,MAAMgB,KAAK,YAChEpB,UAAU,UAEViO,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB+e,kBAAmB73J,UAE/EH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEw3C,EAAQ,2BACjCv3C,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWuW,IAAI,OAAMtW,SAClC8+I,EAA0B9xI,EAAK,4BAE1BwqC,EADFonG,EACU,oCACA,wBAIpB3+I,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPm/E,QAAM,EACN5hH,UAAU,UAEViO,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB2G,oBAAqBz/I,UAEjFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEw3C,EAAQ,kBACjCv3C,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWuW,IAAI,OAAMtW,SAClCkjK,EAAmBh8H,EAAQs4G,sBAMnCgiB,IACC3hK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gCAA+BC,SAAA,EAC5CC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SACzEw3C,EAAQ,mCAEXv3C,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOqqC,EAAQ,4CACfujD,SAAUvjD,EAAQ,gCAClBrO,QAASn+B,QAAQ0hE,GACjBtsD,UAAWohJ,IAAwB90F,GAAsBu1F,EACzDnrG,QAASgsG,KAETp2F,GAAsBu1F,IACtBhiK,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLC,MAAM,UACNu6C,OAAK,EACLwkF,mBAAiB,EACjB9sI,UAAU,yBACViO,QAAS+0J,EAAsB/iK,UAE/BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,SAC3CgN,EAAK,gCAOfg1J,IACCniK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SACzEw3C,EAAQ,8BAEXv3C,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOqqC,EAAQ,kBACfujD,SAAUvjD,EAAQ,sBAClBrO,QAASn+B,QAAQy2J,GACjB3qG,QAAS8rG,QAKf/iK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SACzEw3C,EAAQ,iCAEXv3C,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOqqC,EAAQ,gCACfrO,QAASn+B,QAAQ42J,GACjB9qG,QAAS+rG,QAIbhjK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SACzEgN,EAAK,sBAERnN,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPm/E,QAAM,EACN3zG,QAASg1J,EAA6BhjK,SAAA,CAErCgN,EAAK,2BACN/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,SAC3CgN,EAAK,SAAU,CAAEqmB,MAAO4vI,GAAa,CAAE/iG,YAAa,kBC/WjE,IAAethE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MACEqlC,OACEC,KAAMvB,GAERmgB,SACEphB,IAAK+/H,GACN,YACDz9H,EAAW,cACXrS,GACE/yB,EAEJ,MAAO,CACL+jC,YACA8+H,aACAlgI,WAAYyC,GAAaT,QACzBm+H,iBAAiBp1J,EAAAA,EAAAA,KAAe1N,GAAQ+iK,WAAWC,aACnDjwI,kBAlBczlB,CAxD8B21J,EAChDl/H,YACA8+H,aACAlgI,aACAmgI,kBACA/vI,gBACAzoB,SACAE,cAEA,MAAM,mBACJ04J,EAAkB,UAClBjgH,IACEt4C,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MACN87C,EAAQ0H,IAAarkD,EAAAA,EAAAA,IAAS,KAErC5B,EAAAA,EAAAA,IAAU,KACRg6J,EAAmB,CAAEngI,MAAO0kB,KAC3B,CAACA,EAAQy7G,IAEZ,MAAMC,GAAqBz8J,EAAAA,EAAAA,IAAQ,KACjC,MAAM08J,GAAsBxgI,EAAAA,GAAAA,IAAO,IAC7BD,GAAc,MACdmgI,GAAmB,IACvBxmI,OAAQ+mI,GACDA,IAActwI,IAAkB8vI,EAAWp0I,SAAS40I,KAG7D,OAAOxgI,EAAAA,GAAAA,IAAmB,CAAEC,IAAKsgI,EAAqBrgI,MAAO0kB,EAAQ5nD,KAAM,SACxEumD,KAAK,CAACk9G,EAASC,KACd,MAAM7nG,GAAYlzB,EAAAA,EAAAA,IAAgBzE,EAAUu/H,KAAa,GACnDE,GAAah7H,EAAAA,EAAAA,IAAgBzE,EAAUw/H,KAAc,GAE3D,OAAO7nG,EAAU+nG,cAAcD,MAElC,CAACX,EAAYlgI,EAAY5P,EAAe00B,EAAQq7G,EAAiB/+H,IAE9D2/H,GAAmBplK,EAAAA,EAAAA,IAAak+B,IACpCymB,EAAU,CAAEzmB,WACZhyB,KACC,CAACA,IAEJ,OACE7L,EAAAA,GAAAA,GAACsrD,GAAgB,CACf3/C,OAAQA,EACR4/C,cAAei5G,EACfh5G,kBAAmBz+C,EAAK,0BACxB+7C,OAAQA,EACR4C,eAAgB8E,EAChB7E,mBAAoBo5G,EACpBl5J,QAASA,OC2Ef,IAAelN,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MACE6rD,OACEvmB,KAAMq+H,GAERt+H,OACEC,KAAMs+H,GAER1/G,SAAS,IACPphB,GAEFk4B,aACEC,WAAYF,IAEZ/6D,EAEJ,MAAO,CACL2jK,aACAC,aACAf,WAAY//H,EACZi4B,kBArBcztD,CAzH2Cu2J,EAC7D1rJ,WACAgpD,UACAwiG,aACAC,aACAf,aACA9nG,oBAEA,MAAM,YAAE/X,IAAgBr4C,EAAAA,EAAAA,MAElBe,GAAOC,EAAAA,EAAAA,MACNm4J,EAAsBC,EAAoBC,IAAuBpmK,EAAAA,EAAAA,KAClEqmK,GAAqB3lK,EAAAA,EAAAA,IAAak+B,IACtCwmB,EAAY,CAAExmB,YACb,CAACwmB,KAEJt5B,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAGV,MAAM+iG,GAAuBx9J,EAAAA,EAAAA,IAAQ,IAC5Bm8J,EAAW5hH,OAAO,CAACkL,EAAK3vB,KAC7B,MACMsW,GADYzlC,EAAAA,EAAAA,IAASmvB,GACFonI,EAAWpnI,QAAUh7B,EACxC2iK,EAAerxH,IAASA,EAAKkpB,cAAeooG,EAAAA,EAAAA,IAAgBtxH,GAMlE,OAJIqxH,IACFh4G,EAAI3vB,GAAU2nI,GAGTh4G,GACN,CAAC,GACH,CAAC02G,EAAYe,IAkDhB,OACErlK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,uBAAsBC,SAAA,EACnCH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,mCAAkCC,SAAA,EAC/CC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,0BAAyBC,UACtCC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,6CAA6CuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAC3FgN,EAAK,yBAIV/M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,0BAAyBC,SACrCmkK,GAAYviK,QACX3B,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iCAAgCC,SAC5CmkK,EAAWzwJ,IAAI,CAACixJ,EAAWl7G,IA5DxC,SAAuBk7G,EAAmBl7G,GACxC,MAAM1I,GAAYpyC,EAAAA,EAAAA,IAASg2J,GACrBvwH,EAAO8wH,EAAWP,GAClBx1J,EAAO81J,EAAWN,GAClB3wI,EAAOogB,GAAQjlC,EAEfpP,GAAYqW,EAAAA,GAAAA,GAChB,wDACA2qC,EAAY,UAAY,SAGpB4kH,EAAmBH,EAAqBb,GAE9C,OACE9kK,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAEPziC,UAAWA,EACX6f,QAAM,EACN+hG,QAAM,EACNh9D,eAAgB,CAAC,CACfv3C,MAAO,UACP8F,KAAM,SACN8xC,QAASA,KACPugH,EAAmBZ,MAGvB5+J,MAAO,SAkC6D,EAlCnC0jD,GAAKm8G,EAAAA,SAAoB5lK,SAAA,EAE1DC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACL5zB,KAAK,SACL6zB,KAAMA,KAERn0B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,eAAeuW,IAAI,OAAMtW,SAAA,CACrCg0B,IAAQ/zB,EAAAA,GAAAA,GAAC+uD,GAAAA,EAAa,CAACh7B,KAAMA,IAC7BogB,GAAMkpB,cACLr9D,EAAAA,GAAAA,GAAA,OAAKF,UAAU,gBAAgBuW,IAAI,OAAMtW,UAAE69D,EAAAA,GAAAA,IAA0BxB,EAAejoB,EAAKkpB,eAE1FqoG,IACC9lK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,mBAAmBuW,IAAI,OAAMtW,SAAA,CAAC,IAE1C2lK,UAzBF,WAAWhB,IA+BtB,CAc8CkB,CAAclB,EAAWl7G,MAE3D06G,IAAeA,EAAWviK,QAC5B3B,EAAAA,GAAAA,GAAA,OAAKF,UAAU,aAAauW,IAAI,OAAMtW,SAAEgN,EAAK,gBAE7C/M,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,GAAK,iBAKnBzvD,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,SAAO,EACPrmC,UAAU,oBACViO,QAASq3J,EACT7yJ,UAAWxF,EAAK,gBAAgBhN,UAEhCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,WAEbvN,EAAAA,GAAAA,GAACskK,GAAc,CACb34J,OAAQw5J,EACRt5J,QAASw5J,UCpJV,SAASQ,GAAczsB,GAC5B,OAAQA,GACN,KAAKP,EAAAA,GAAgBue,mBACrB,KAAKve,EAAAA,GAAgBwf,kCACrB,KAAKxf,EAAAA,GAAgB+f,iCACnB,MAAO,cACT,KAAK/f,EAAAA,GAAgBwe,gBACrB,KAAKxe,EAAAA,GAAgBgf,+BACrB,KAAKhf,EAAAA,GAAgBof,8BACnB,MAAO,WACT,KAAKpf,EAAAA,GAAgBye,oBACrB,KAAKze,EAAAA,GAAgBif,mCACrB,KAAKjf,EAAAA,GAAgBqf,kCACnB,MAAO,eACT,KAAKrf,EAAAA,GAAgB0e,WACrB,KAAK1e,EAAAA,GAAgBkf,0BACrB,KAAKlf,EAAAA,GAAgBsf,yBACnB,MAAO,MACT,KAAKtf,EAAAA,GAAgB2e,gBACrB,KAAK3e,EAAAA,GAAgByf,+BACrB,KAAKzf,EAAAA,GAAgBggB,8BACnB,MAAO,WACT,KAAKhgB,EAAAA,GAAgB4e,aACrB,KAAK5e,EAAAA,GAAgB0f,4BACrB,KAAK1f,EAAAA,GAAgBigB,2BACnB,MAAO,QACT,KAAKjgB,EAAAA,GAAgB6e,kBACrB,KAAK7e,EAAAA,GAAgB2f,iCACrB,KAAK3f,EAAAA,GAAgBkgB,gCACnB,MAAO,WACT,KAAKlgB,EAAAA,GAAgB8e,qBACrB,KAAK9e,EAAAA,GAAgB4f,oCACrB,KAAK5f,EAAAA,GAAgBmgB,mCACnB,MAAO,gBACT,KAAKngB,EAAAA,GAAgB2G,kBACrB,KAAK3G,EAAAA,GAAgBmf,iCACrB,KAAKnf,EAAAA,GAAgBuf,gCACnB,MAAO,aACT,KAAKvf,EAAAA,GAAgB8G,iBACrB,KAAK9G,EAAAA,GAAgB6f,gCACrB,KAAK7f,EAAAA,GAAgBogB,+BACnB,MAAO,YACT,KAAKpgB,EAAAA,GAAgBitB,gBACrB,KAAKjtB,EAAAA,GAAgB8f,+BACrB,KAAK9f,EAAAA,GAAgBqgB,8BACnB,MAAO,WACT,KAAKrgB,EAAAA,GAAgBktB,kBACnB,MAAO,aACT,KAAKltB,EAAAA,GAAgBuH,sBACnB,MAAO,iBAIb,CCtCA,MA4HA,IAAezhJ,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MACEo1C,UACEmuG,OAAO,gBACLohB,KAGF3kK,EAEJ,MAAO,CACL2kK,kBACAnmI,sBAAsB0B,EAAAA,EAAAA,KAA2BlgC,KAZnCsN,CA5HSs3J,EAC3BD,kBAAiBnmI,2BAEjB,MAAM,iBAAE8B,EAAgB,4BAAEi2F,IAAgC5rH,EAAAA,EAAAA,MAEpDe,GAAOyqC,EAAAA,GAAAA,KAEP0uH,GAAiC35J,EAAAA,EAAAA,GAAgB,KACrDo1B,EAAiB,CACf/gC,QAASmM,EAAK,qCACdjL,OAAQ,CACNA,OAAQ,mBACR2tI,QAAS,CAAC,GAEZgQ,WAAY,CAAEh6H,IAAK,QACnBxS,KAAM,WAIJkzJ,GAA6B55J,EAAAA,EAAAA,GAAgB,KAC5CszB,EAKL+3F,EAA4B,CAC1BouC,gBAAiB,IACZA,EACHI,gCAAiCJ,GAAiBI,qCAAkCvjK,KAPtFqjK,MAYEG,GAA+B95J,EAAAA,EAAAA,GAAgB,KAC9CszB,EAIL+3F,EAA4B,CAC1BouC,gBAAiB,IACZA,EACHM,kCAAmCN,GAAiBM,uCAAoCzjK,KAN1FqjK,MAWEK,GAAqBh6J,EAAAA,EAAAA,GAAgB,KACpCszB,EAIL+3F,EAA4B,CAC1BouC,gBAAiB,IACZA,EACHQ,+BAAgCR,GAAiBQ,oCAAiC3jK,KANpFqjK,MAWEO,GAAkCl6J,EAAAA,EAAAA,GAAgB,KACjDszB,EAIL+3F,EAA4B,CAC1BouC,gBAAiB,IACZA,EACHU,4BAA6BV,GAAiBU,iCAA8B7jK,KAN9EqjK,MAWJ,OACEtmK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACtEgN,EAAK,+BAERnN,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAACx0B,QAASo4J,EAA2BpmK,SAAA,EAC5CC,EAAAA,GAAAA,GAAA,QAAAD,SAAOgN,EAAK,gCACZ/M,EAAAA,GAAAA,GAAC8pC,GAAAA,EAAQ,CACPjqC,GAAG,kBACHqN,MAAyDH,EAAlDi5J,GAAiBI,+BAAsC,wCACrD,wCACTjmJ,UAAW0f,EACXqJ,SAAUrJ,IAA+BmmI,GAAiBI,qCAG9DxmK,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAACx0B,QAASs4J,EAA6BtmK,SAAA,EAC9CC,EAAAA,GAAAA,GAAA,QAAAD,SAAOgN,EAAK,2BACZ/M,EAAAA,GAAAA,GAAC8pC,GAAAA,EAAQ,CACPjqC,GAAG,YACHqN,MAA2DH,EAApDi5J,GAAiBM,iCAAwC,mCACvD,mCACTnmJ,UAAW0f,EACXqJ,SAAUrJ,IAA+BmmI,GAAiBM,uCAG9D1mK,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAACx0B,QAASw4J,EAAmBxmK,SAAA,EACpCC,EAAAA,GAAAA,GAAA,QAAAD,SAAOgN,EAAK,wBACZ/M,EAAAA,GAAAA,GAAC8pC,GAAAA,EAAQ,CACPjqC,GAAG,SACHqN,MAAwDH,EAAjDi5J,GAAiBQ,8BAAqC,gCACpD,gCACTrmJ,UAAW0f,EACXqJ,SAAUrJ,IAA+BmmI,GAAiBQ,oCAG9D5mK,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAACx0B,QAAS04J,EAAgC1mK,SAAA,EACjDC,EAAAA,GAAAA,GAAA,QAAAD,SAAOgN,EAAK,qCACZ/M,EAAAA,GAAAA,GAAC8pC,GAAAA,EAAQ,CACPjqC,GAAG,uBACHqN,MAAqDH,EAA9Ci5J,GAAiBU,2BAAkC,6BACjD,6BACTvmJ,UAAW0f,EACXqJ,SAAUrJ,IAA+BmmI,GAAiBU,iCAG9D1mK,EAAAA,GAAAA,GAAA,KAAGF,UAAU,mCAAmCuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACjFgN,EAAK,mCC7Dd,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACQ,CACLw+B,sBAAsB0B,EAAAA,EAAAA,KAA2BlgC,GACjD42H,oBAAqBltH,SAAQ47J,EAAAA,EAAAA,KAA0BtlK,MAJzCsN,CAnDYi4J,EAC9B/mI,uBAAsBo4F,sBAAqBzxF,iBAE3C,MAAM,4BAAEoxF,EAA2B,iBAAEh2F,IAAqB51B,EAAAA,EAAAA,MACpDe,GAAOC,EAAAA,EAAAA,KACP65J,EAAqC,WAAfrgI,GAA0C,aAAfA,EAEjDsgI,GAAkCv6J,EAAAA,EAAAA,GACrCykE,GAAc4mD,EAA4B,CAAEK,oBAAqBjnD,KAG9DqtE,GAAyB9xI,EAAAA,EAAAA,GAAgB,KAC7Cq1B,EAAiB,CACfQ,eAAgB,gBAIpB,OACExiC,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,CACG8mK,IACCjnK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,gBACZm8B,QAAS+uF,EACTphE,QAASiwG,KAEX9mK,EAAAA,GAAAA,GAAA,KAAGF,UAAU,mCAAmCuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,UACjFi0B,EAAAA,GAAAA,GAAWjnB,EAAK,oBAAqB,CAAC,aAI7CnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPG,aAAa1iC,EAAAA,GAAAA,GAACs+I,GAAAA,EAAQ,CAACx+I,UAAU,0BAA0BoB,KAAK,UAAUhB,KAAK,QAC/E6N,QAASswI,EAAuBt+I,SAERgN,EAAvB8yB,EAA4B,mCAA2C,6BAE1E7/B,EAAAA,GAAAA,GAAA,KACEF,UAAU,gDACVuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAGhCgN,EADH8yB,EACQ,uCACA,yC,gBCnEnB,MCyGA,IAAelhC,EAAAA,EAAAA,IAlFyCooK,EACtD3yI,gBACA4yI,yBACAC,+BAEA,MAAM,aACJC,EAAY,mBAAEC,EAAkB,mBAAE54J,EAAkB,iBAAEozB,IACpD31B,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MAENo6J,EAAgCC,EAA8BC,IAAiCroK,EAAAA,EAAAA,IAAQ,GAExG69D,GAAWzzD,EAAAA,EAAAA,OAEjBkB,EAAAA,EAAAA,IAAU,KACHy8J,GACHE,EAAa,CAAErpI,OAAQzJ,KAExB,CAAC4yI,EAAwB5yI,EAAe8yI,IAE3C,MAAMK,GAAmB5nK,EAAAA,EAAAA,IAAa+tJ,IACpCyZ,EAAmB,CACjBzZ,OACA8Z,YAAY,IAEd7lI,EAAiB,CACf/gC,QAASmM,EAAK,8CAEf,CAACA,EAAM40B,EAAkBwlI,IAEtBM,GAAsB9nK,EAAAA,EAAAA,IAAY,KACtC2nK,IACA/4J,EAAmB,CAAEvM,MAAOilK,KAC3B,CAACK,EAA+B/4J,EAAoB04J,IAEjDS,GAAyB/nK,EAAAA,EAAAA,IAAY,KACzCm9D,EAAStzD,SAASm+J,SACjB,IAEH,OACE/nK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPm/E,QAAM,EACNzuG,KAAK,aACLlF,QAAS25J,EAAuB3nK,SAAA,EAEhCC,EAAAA,GAAAA,GAAC4nK,GAAAA,EAAY,CACXn6J,SAAU85J,EACVzqG,SAAUA,IAEX/vD,EAAKk6J,EACF,yCACA,0CAELA,IACCrnK,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPm/E,QAAM,EACNh/E,aAAa1iC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CAAC9xB,MAAOilK,EAA0B/mK,KAAK,OAAOJ,UDjFhB,aCkFlDiO,QAASs5J,EACTh0J,aAAW,EAAAtT,SAAA,CAEVgN,EAAKk6J,EAAyB3/J,QAC3B,yCACA,2CACJtH,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQy7J,EACRv7J,QAASy7J,EACTxyJ,KAAM/H,EAAK,8BACXu2B,aAAcv2B,EAAK,UACnBw2B,eAAgBkkI,EAChBjkI,sBAAoB,QAI1BxjC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,mCAAmCuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACjFgN,EAAK,+CC6Cd,SAAS86J,IAAkB,OACzBzuB,EAAM,QACNnyG,EAAO,kBACP6gI,IAMA,MAAM,qBAAEhwC,EAAoB,mBAAE6gB,IAAuB3sI,EAAAA,EAAAA,MAC/CurC,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,KAEPuwH,GAAoBhgK,EAAAA,EAAAA,IAAQ,KAChC,MAAMigK,EAAY5uB,IAAWP,EAAAA,GAAgBktB,kBACvCv4J,EAAU,CACd,CAAEb,MAAO,YAAaO,MAAOqqC,EAAQ,iBACrC,CACE5qC,MAAO,WACPO,MAAO46J,GACL9nK,EAAAA,GAAAA,GAAC4/I,GAAmB,CAAC1yI,MAAOqqC,EAAQ,iBAEpCA,EAAQ,eAEVsoG,OAAQioB,IAeZ,OAXIE,GACFx6J,EAAQwF,KAAK,CACXrG,MAAO,SACPO,MAAO46J,GACL9nK,EAAAA,GAAAA,GAAC4/I,GAAmB,CAAC1yI,MAAOqqC,EAAQ,eAEpCA,EAAQ,aAEVsoG,OAAQioB,IAGLt6J,GACN,CAAC+pC,EAAS6hG,EAAQ0uB,IAEfG,GAAwBlgK,EAAAA,EAAAA,IAAQ,IAChCqxI,IAAWP,EAAAA,GAAgBktB,kBACtB,CACLmC,kBAAkB,EAClBC,mBAAmB,GAIhB,CACLD,iBAA0C,WAAxBjhI,GAAST,WAC3B2hI,kBAA2C,cAAxBlhI,GAAST,YAE7B,CAACS,EAASmyG,IAEPjhB,EAAa0tC,GAAczsB,GAE3BxkC,GAAkB7sG,EAAAA,EAAAA,IAAQ,KAC9B,OAAQqxI,GACN,KAAKP,EAAAA,GAAgB4e,aACnB,OAAO1qJ,EAAK,oBACd,KAAK8rI,EAAAA,GAAgBwe,gBACnB,OAAO9/G,EAAQ,cACjB,KAAKshG,EAAAA,GAAgBktB,kBACnB,OAA6CxuH,EAAd,cAAxBtQ,GAAST,WAAqC,mBAA8B,qBAErF,KAAKqyG,EAAAA,GAAgB8e,qBACnB,OAAOpgH,EAAQ,4BACjB,QACE,SAEH,CAACA,EAASxqC,EAAMqsI,EAAQnyG,IAErBmhI,GAAargK,EAAAA,EAAAA,IAAQ,KACzB,OAAQqxI,GACN,KAAKP,EAAAA,GAAgBue,mBACnB,OAAO7/G,EAAQ,qBACjB,KAAKshG,EAAAA,GAAgBktB,kBACnB,OAAOxuH,EAAQ,sBACjB,KAAKshG,EAAAA,GAAgBwe,gBACnB,OAAO9/G,EAAQ,iBACjB,KAAKshG,EAAAA,GAAgBye,oBACnB,OAAO//G,EAAQ,4BACjB,KAAKshG,EAAAA,GAAgB0e,WACnB,OAAOhgH,EAAQ,mBACjB,KAAKshG,EAAAA,GAAgB2e,gBACnB,OAAOjgH,EAAQ,wBACjB,KAAKshG,EAAAA,GAAgB4e,aACnB,OAAO1qJ,EAAK,qBACd,KAAK8rI,EAAAA,GAAgB6e,kBACnB,OAAOngH,EAAQ,wBACjB,KAAKshG,EAAAA,GAAgB8e,qBACnB,OAAOpgH,EAAQ,6BACjB,KAAKshG,EAAAA,GAAgB2G,kBACnB,OAAOjoG,EAAQ,eACjB,KAAKshG,EAAAA,GAAgB8G,iBACnB,OAAOpoG,EAAQ,gBACjB,KAAKshG,EAAAA,GAAgBitB,gBACnB,OAAOvuH,EAAQ,cACjB,QACE,SAEH,CAACA,EAASxqC,EAAMqsI,IAEbivB,GAAkB97J,EAAAA,EAAAA,GACtB,CAACy5B,EAAoBgrG,EAAoBkyB,EAA8BC,KACrE,MAAMmF,EAAetiI,GAASrkC,QAAU,EAClC4mK,EAAev3B,GAASrvI,QAAU,EAClC6mK,EAA8B,UAAhBrF,EAGpB,IAFiBmF,IAAgBC,IAEfC,EAChB,OAA4BjxH,EAArB2rH,EAA6B,iBAA4B,qBAC3D,GAAIA,EACT,OAAO3rH,EAAQ,sBAGjB,MAAMkxH,EAAkBH,EAAe,EAAI/wH,EAAQ,QAAS+wH,QAAgBzlK,EACtE6lK,EAAkBH,EAAe,EAAIhxH,EAAQ,QAASgxH,QAAgB1lK,EAK5E,MAAO,CAHkB2lK,EAAcz7J,EAAK,oBAAsB,GAC9CA,EAAK42J,YAAY,CAAC8E,EAAiBC,GAAiB/qI,OAAO5yB,WAExC4yB,OAAO5yB,SAAS4b,KAAK,OAI1DgiJ,GAAgB5gK,EAAAA,EAAAA,IAAQ,IACrBsgK,EACLphI,GAASU,aACTV,GAASw8H,aACTx8H,GAASi8H,mBACTj8H,GAASk8H,aAEV,CAACl8H,IAEE2hI,GAAc7gK,EAAAA,EAAAA,IAAQ,IACnBsgK,EAAgBphI,GAASY,aAAcZ,GAASs8H,cACtD,CAACt8H,IAEEmC,GAAyBzpC,EAAAA,EAAAA,IAAagN,IAC1CmrH,EAAqB,CACnBK,WAAYA,EACZ3xF,WAAY75B,KAEb,CAACwrH,IAEE0wC,EAAwB,MAC5B,OAAQzvB,GACN,KAAKP,EAAAA,GAAgBue,mBACnB,OAAOve,EAAAA,GAAgBwf,kCACzB,KAAKxf,EAAAA,GAAgBwe,gBACnB,OAAOxe,EAAAA,GAAgBgf,+BACzB,KAAKhf,EAAAA,GAAgBye,oBACnB,OAAOze,EAAAA,GAAgBif,mCACzB,KAAKjf,EAAAA,GAAgB0e,WACnB,OAAO1e,EAAAA,GAAgBkf,0BACzB,KAAKlf,EAAAA,GAAgB2e,gBACnB,OAAO3e,EAAAA,GAAgByf,+BACzB,KAAKzf,EAAAA,GAAgB4e,aACnB,OAAO5e,EAAAA,GAAgB0f,4BACzB,KAAK1f,EAAAA,GAAgB6e,kBACnB,OAAO7e,EAAAA,GAAgB2f,iCACzB,KAAK3f,EAAAA,GAAgB8G,iBACnB,OAAO9G,EAAAA,GAAgB6f,gCACzB,KAAK7f,EAAAA,GAAgBitB,gBACnB,OAAOjtB,EAAAA,GAAgB8f,+BACzB,KAAK9f,EAAAA,GAAgB8e,qBACnB,OAAO9e,EAAAA,GAAgB4f,oCACzB,QACE,OAAO5f,EAAAA,GAAgBmf,iCAE5B,EAzB6B,GA2BxB8Q,EAAuB,MAC3B,OAAQ1vB,GACN,KAAKP,EAAAA,GAAgBue,mBACnB,OAAOve,EAAAA,GAAgB+f,iCACzB,KAAK/f,EAAAA,GAAgBwe,gBACnB,OAAOxe,EAAAA,GAAgBof,8BACzB,KAAKpf,EAAAA,GAAgBye,oBACnB,OAAOze,EAAAA,GAAgBqf,kCACzB,KAAKrf,EAAAA,GAAgB0e,WACnB,OAAO1e,EAAAA,GAAgBsf,yBACzB,KAAKtf,EAAAA,GAAgB2e,gBACnB,OAAO3e,EAAAA,GAAgBggB,8BACzB,KAAKhgB,EAAAA,GAAgB4e,aACnB,OAAO5e,EAAAA,GAAgBigB,2BACzB,KAAKjgB,EAAAA,GAAgB6e,kBACnB,OAAO7e,EAAAA,GAAgBkgB,gCACzB,KAAKlgB,EAAAA,GAAgB8G,iBACnB,OAAO9G,EAAAA,GAAgBogB,+BACzB,KAAKpgB,EAAAA,GAAgBitB,gBACnB,OAAOjtB,EAAAA,GAAgBqgB,8BACzB,KAAKrgB,EAAAA,GAAgB8e,qBACnB,OAAO9e,EAAAA,GAAgBmgB,mCACzB,QACE,OAAOngB,EAAAA,GAAgBuf,gCAE5B,EAzB4B,GA2B7B,OACEx4J,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SAAEqoK,KAC9EpoK,EAAAA,GAAAA,GAACsN,GAAAA,EAAU,CACTC,KAAM,cAAc4qH,IACpB3qH,QAASu6J,EACTt6J,SAAU27B,EACV17B,SAAUu5B,GAAST,aAEpBouE,IACC50G,EAAAA,GAAAA,GAAA,KAAGF,UAAU,mCAAmCuW,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SAAE60G,QAG3FkzD,IAAsBG,EAAsBE,mBAAqBF,EAAsBC,oBACvFtoK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SACzEw3C,EAAQ,uBAEV0wH,EAAsBE,oBACrBnoK,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPm/E,QAAM,EACNzuG,KAAK,WAELlF,QAASA,KACP4qI,EAAmB,CAAES,OAAQyvB,KAC7B9oK,UAEFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEw3C,EAAQ,kBACjCv3C,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAE4oK,SAIjCV,EAAsBC,mBACrBloK,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPm/E,QAAM,EACNzuG,KAAK,cAELlF,QAASA,KACP4qI,EAAmB,CAAES,OAAQ0vB,KAC7B/oK,UAEFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEw3C,EAAQ,iBACjCv3C,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAE6oK,YAMrCd,IAAqB9nK,EAAAA,GAAAA,GAACsgJ,GAAiB,MAG9C,CAEA,UAAe3hJ,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAU+3I,aACT,IAAI2vB,EACAC,EAEJ,MAAM,cACJ50I,EACAqiB,UAAU,QACRxP,EACA29G,OAAO,yBACLqkB,KAGF5nK,EAEEopJ,GAAsBl2G,EAAAA,EAAAA,KAAmBlzC,EAAQ+yB,GAEvD,OAAQglH,GACN,KAAKP,EAAAA,GAAgBue,mBACnB2R,EAAiB9hI,EAAQo2B,YACzB2rG,EAAmB/hI,EAAQiiI,WAC3B,MAEF,KAAKrwB,EAAAA,GAAgBwe,gBACnB0R,EAAiB9hI,EAAQ28H,SACzB,MAEF,KAAK/qB,EAAAA,GAAgBye,oBACnByR,EAAiB9hI,EAAQ48H,aACzB,MAEF,KAAKhrB,EAAAA,GAAgB0e,WACnBwR,EAAiB9hI,EAAQ4jH,IACzB,MAEF,KAAKhS,EAAAA,GAAgB2e,gBACnBuR,EAAiB9hI,EAAQ68H,SACzB,MAEF,KAAKjrB,EAAAA,GAAgB4e,aACnBsR,EAAiB9hI,EAAQuvD,MACzB,MAEF,KAAKqiD,EAAAA,GAAgBitB,gBACrB,KAAKjtB,EAAAA,GAAgB8G,iBACnBopB,EAAiB9hI,EAAQy4G,UACzBspB,EAAmB/hI,EAAQkiI,SAC3B,MAEF,KAAKtwB,EAAAA,GAAgB6e,kBACnBqR,EAAiB9hI,EAAQ88H,SACzB,MAEF,KAAKlrB,EAAAA,GAAgB8e,qBACnBoR,EAAiB9hI,EAAQg9H,cACzB,MAEF,KAAKprB,EAAAA,GAAgB2G,kBACnBupB,EAAiB9hI,EAAQs4G,WAI7B,OAAKwpB,EAQE,CACLA,iBACAC,mBACA50I,cAAeA,EACf4yI,uBAAwBj8J,QAAQ0/I,GAChCwc,yBAA0Bxc,GAAqB33H,cAC/Cg1I,kBAAmB1uB,IAAWP,EAAAA,GAAgB8e,wBAAyBp2H,EAAAA,EAAAA,KAA2BlgC,GAClG4nK,2BACAppI,sBAAsB0B,EAAAA,EAAAA,KAA2BlgC,IAf1C,CACL+yB,cAAeA,EACf4yI,uBAAwBj8J,QAAQ0/I,GAChCwc,yBAA0Bxc,GAAqB33H,gBAlEnCnkB,CAzWyCy6J,EAC3DhwB,SACA5/H,WACAuvJ,iBACAC,mBACA50I,gBACA4yI,yBACAC,2BACAa,oBACAtlG,UACAymG,2BACAppI,2BAEA,MAAM,4BAAE+3F,EAA2B,iBAAEj2F,IAAqB31B,EAAAA,EAAAA,MAEpDe,GAAOyqC,EAAAA,GAAAA,MAEbzsB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAGV,MAAM6mG,GAA4B98J,EAAAA,EAAAA,GAAgB,KAC3CszB,EAYL+3F,EAA4B,CAC1BqxC,0BAA2BA,IAZ3BtnI,EAAiB,CACf/gC,QAASmM,EAAK,qCACdjL,OAAQ,CACNA,OAAQ,mBACR2tI,QAAS,CAAC,GAEZgQ,WAAY,CAAEh6H,IAAK,QACnBxS,KAAM,WASNq2J,GAAkBvhK,EAAAA,EAAAA,IAAQ,KAC9B,OAAQqxI,GACN,KAAKP,EAAAA,GAAgB8G,iBACnB,OAAO9G,EAAAA,GAAgBitB,gBACzB,KAAKjtB,EAAAA,GAAgBue,mBACnB,MAAsC,WAA/B2R,GAAgBviI,WAA0BqyG,EAAAA,GAAgBktB,uBAAoBljK,EAEvF,QACE,SAEH,CAACkmK,EAAgB3vB,IAEpB,OACEx5I,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,CAC5Cq5I,IAAWP,EAAAA,GAAgB4e,eAC1B73J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAACx0B,QAASs7J,EAA0BtpK,SAAA,EAC3CC,EAAAA,GAAAA,GAAA,QAAAD,SAAOgN,EAAK,gCACZ/M,EAAAA,GAAAA,GAAC8pC,GAAAA,EAAQ,CACPjqC,GAAG,OACHsgB,UAAW0f,EACX3yB,MAAkCH,EAA3Bk8J,EAAgC,kBAA0B,sBACjE//H,QAAS+/H,QAGbjpK,EAAAA,GAAAA,GAAA,KAAGF,UAAU,mCAAmCuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACjFgN,EAAK,gCAAiC,CACrCkG,MAAMjT,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,OAAOzN,UAAU,cAClCiwF,KAAMhjF,EAAK,uBACV,CACD2xC,WAAW,UAKnB1+C,EAAAA,GAAAA,GAAC6nK,GAAiB,CAChBzuB,OAAQA,EACRnyG,QAAS8hI,EACTjB,kBAAmBA,IAEpB1uB,IAAWP,EAAAA,GAAgBye,qBAAsD,cAA/ByR,GAAgBviI,aACjExmC,EAAAA,GAAAA,GAAC+mK,GAAiC,CAChC3yI,cAAeA,EACf4yI,uBAAwBA,EACxBC,yBAA0BA,IAG7B7tB,IAAWP,EAAAA,GAAgBwe,kBAC1Br3J,EAAAA,GAAAA,GAAC4mK,GAAuB,CAACpgI,WAAYuiI,GAAgBviI,aAEtD4yG,IAAWP,EAAAA,GAAgB4e,eAC1Bz3J,EAAAA,GAAAA,GAACimK,GAAoB,IAEtBl7J,QAAQu+J,KACPtpK,EAAAA,GAAAA,GAAC6nK,GAAiB,CAChBzuB,OAAQkwB,EACRriI,QAAS+hI,UC9FbO,GAAmB,CAACC,GAAAA,IA6K1B,SAASC,GAA0BpoK,EAAqB+3I,GACtD,MAAM,QAAEnyG,GAAY5lC,EAAOo1C,SAC3B,OAAQ2iG,GACN,KAAKP,EAAAA,GAAgBwf,kCACrB,KAAKxf,EAAAA,GAAgB+f,iCACnB,OAAO3xH,EAAQo2B,YACjB,KAAKw7E,EAAAA,GAAgBgf,+BACrB,KAAKhf,EAAAA,GAAgBof,8BACnB,OAAOhxH,EAAQ28H,SACjB,KAAK/qB,EAAAA,GAAgBif,mCACrB,KAAKjf,EAAAA,GAAgBqf,kCACnB,OAAOjxH,EAAQ48H,aACjB,KAAKhrB,EAAAA,GAAgBkf,0BACrB,KAAKlf,EAAAA,GAAgBsf,yBACnB,OAAOlxH,EAAQ4jH,IACjB,KAAKhS,EAAAA,GAAgByf,+BACrB,KAAKzf,EAAAA,GAAgBggB,8BACnB,OAAO5xH,EAAQ68H,SACjB,KAAKjrB,EAAAA,GAAgB0f,4BACrB,KAAK1f,EAAAA,GAAgBigB,2BACnB,OAAO7xH,EAAQuvD,MACjB,KAAKqiD,EAAAA,GAAgB6f,gCACrB,KAAK7f,EAAAA,GAAgBogB,+BACnB,OAAOhyH,EAAQy4G,UACjB,KAAK7G,EAAAA,GAAgB8f,+BACrB,KAAK9f,EAAAA,GAAgBqgB,8BACnB,OAAOjyH,EAAQkiI,SACjB,KAAKtwB,EAAAA,GAAgB2f,iCACrB,KAAK3f,EAAAA,GAAgBkgB,gCACnB,OAAO9xH,EAAQ88H,SACjB,KAAKlrB,EAAAA,GAAgB4f,oCACrB,KAAK5f,EAAAA,GAAgBmgB,mCACnB,OAAO/xH,EAAQg9H,cACjB,KAAKprB,EAAAA,GAAgBuf,gCACrB,KAAKvf,EAAAA,GAAgBmf,iCACnB,OAAO/wH,EAAQs4G,WACjB,KAAK1G,EAAAA,GAAgBuH,sBACnB,OAAOn5G,EAAQy3G,eAIrB,CAEA,UAAe//I,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAU+3I,aACF,CACLhlH,cAAe/yB,EAAO+yB,cACtBqiB,SAAUgzH,GAA0BpoK,EAAQ+3I,KAJ9BzqI,CAtNsD+6J,EACxEC,cACAC,sBACAC,uBACAzwB,SACA5/H,WACA4a,gBACAqiB,WACAqzH,aAAY,EACZtnG,cAEA,MAAM,mBAAEunG,IAAuB/9J,EAAAA,EAAAA,MAEzBurC,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,KAEPwyH,GAAmCjiK,EAAAA,EAAAA,IAAQ,KACxC,CACLkiK,cAAc,EACd/oK,KAAM,OACNiM,MAAOJ,EAAK,oBACZm9J,WAAY,OACZC,gBAAgB,EAChBC,YAAa,IAEd,CAACr9J,IAEEs9J,GAAmBtiK,EAAAA,EAAAA,IAAQ,IACxB,CAACiiK,GACP,CAACA,IAEEM,GAAqBviK,EAAAA,EAAAA,IAAQ,IAC5B0uC,EAIDkzH,EACK,IAAIlzH,EAAS9O,gBAAiB8O,EAASgtH,cAEvC,IAAIhtH,EAAS5O,gBAAiB4O,EAAS8sH,cANvC,GAQR,CAACoG,EAAalzH,IACX8zH,GAAwBxiK,EAAAA,EAAAA,IAAQ,IAC/B0uC,EAGDA,EAASysH,mBACJ,CAACsG,GAAAA,GAAoBtoK,MAED,UAAzBu1C,EAAS0sH,aAA2BwG,EAC/B,CAACK,EAAe9oK,MAElB,GARE,GASR,CAACu1C,EAAUkzH,EAAaK,KACpBnmI,EAAaC,IAAkB33B,EAAAA,EAAAA,IAAiB,KAChDm5B,EAAeC,IAAoBp5B,EAAAA,EAAAA,KAAkB,IACrDq5B,EAAuBC,IAA4Bt5B,EAAAA,EAAAA,IAAmBm+J,IACtEE,EAA0BC,IAA+Bt+J,EAAAA,EAAAA,IAA2Bo+J,IAG3FhgK,EAAAA,EAAAA,IAAU,KACHiP,IACHisB,EAAyB6kI,GACzBG,EAA4BF,KAE7B,CAAC/wJ,EAAU+wJ,EAAuBD,IAErC,MAAM55B,GAAsBC,EAAAA,GAAAA,IAA8BxH,EAAAA,KACpDyH,GAA2BD,EAAAA,GAAAA,IAA8BE,EAAAA,KACzD9sG,GAAeh8B,EAAAA,EAAAA,IAAQ,KAE3B,MAAMklD,GAAY/gB,EAAAA,EAAAA,MAAYghB,MAAMvmB,KAC9BvB,GAAY8G,EAAAA,EAAAA,MAAYxF,MAAMC,KAE9BqqG,GAAU/sG,EAAAA,GAAAA,IAAO,IAAIysG,GAAuB,MAAOE,GAA4B,KAClFjzG,OAAQnxB,IACP,MAAM0C,EAAO+9C,EAAUzgD,GACjB2nC,EAAO/O,EAAU54B,GACjBuiC,EAAYoF,IAAQyc,EAAAA,EAAAA,IAAczc,GAClC3gB,EAAYtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,GACxC,QAAS46J,GAAa31H,IACjB3nC,IAAW4nB,GACX5nB,IAAWk+J,EAAAA,MACVl3I,IAAcub,IAGlB47H,GAAgBzmI,EAAAA,GAAAA,IAAmB,CAAEC,IAAK6sG,EAAS5sG,MAAOP,IAGhE,OAAIA,EAAoB8mI,GAEjB1mI,EAAAA,GAAAA,IAAO,IACTqmI,KACAt5B,KAEJ,CAACN,EAAqBE,EAA0B05B,EAAoBzmI,EAAazP,EAAe01I,IAE7Fc,GAAiCjrK,EAAAA,EAAAA,IAAagN,IAClD89J,EAA4B99J,GAC5B44B,GAAiB,IAChB,IAEGO,GAAiCnmC,EAAAA,EAAAA,IAAagN,IAClD84B,EAAyB94B,GACzB44B,GAAiB,IAChB,IAEGQ,GAAepmC,EAAAA,EAAAA,IAAY,KAC/BoqK,EAAmB,CACjB5xC,WAAY0tC,GAAczsB,GAC1BuwB,YAAa5+J,QAAQ4+J,GACrBkB,WAAYrlI,EACZslI,iBAAkBN,EAAyB16I,SAAS05I,GAAAA,GAAoBtoK,YAAS2B,EACjFsgK,YAAe0G,EACVW,EAAyB16I,SAASk6I,EAAe9oK,MAAQ,QAAU,WADjC,SAIzCshE,KACC,CACDmnG,EACAE,EACAW,EACAhlI,EACAg9B,EACA42E,EACA4wB,IAcF,OAXAj/I,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,KAUR5iE,EAAAA,GAAAA,IAAA,OAAKE,UAAU,uBAAsBC,SAAA,EACnCC,EAAAA,GAAAA,GAACqkC,GAAAA,EAAU,CACTmtG,WARAo4B,EAA4BL,GAC5BM,GAAwBF,EAAoBU,OAAhD,EAQI/lI,QAASP,GAAgB,GACzBL,YAAa8B,EACbisG,mBAAoB+4B,EACpB/lI,YAAaZ,EACba,kBAAiC6S,EAAdoyH,EAAsB,yBAAoC,yBAC7Ej4B,uBAAuB,mBACvB/sG,cAAc,0BACdC,cAAY,EACZG,oBAAqBe,EACrB8rG,2BAA4Bg5B,EAC5B5lI,eAAgBlB,EAChBmB,eAAa,EACbE,cAAc,WACdN,oBAAkB,EAClBK,YAAU,KAGZllC,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAASb,EACTv3B,QAASg4B,EACTxzB,UAAyBglC,EAAdoyH,EAAsB,cAAyB,cAAc5pK,UAExEC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,kBCjJnB,IAAe5O,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,OAAE0pK,EAAM,UAAE7mH,GAAc7iD,EAE9B,MAAO,CACL4iD,mBAAoBC,EAAUD,mBAC9B+mH,iBAAkBD,GAAQE,kBANZt8J,CA7CqCu8J,EACvD1xJ,WACAyqC,qBACA+mH,mBACAxoG,cAEA,MAAM,mBAAE2oG,IAAuBn/J,EAAAA,EAAAA,OAE/B+e,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAGV,MAAMh1D,GAAUzF,EAAAA,EAAAA,IAAQ,KACrBk8C,GAAsB,IAAItmB,OAAQ2pE,IAAuBA,EAAkB0I,YACzEv8F,IAAK6zF,IAAiB,CACrBp6F,OACEtN,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAACylD,GAAAA,EAAmB,CAACrS,SAAUk0D,EAAkBl0D,SAAU6Q,mBAAoBA,IAC9EqjD,EAAkBn6F,SAGvBR,MAAO26F,EAAkBl0D,SAASg4H,YAErC,CAACnnH,IAEE6pC,GAAenuF,EAAAA,EAAAA,IAAayzC,IAChC+3H,EAAmB,CACjB/3H,SAAU,CAAElyC,KAAM,QAASkqK,SAAUh4H,MAEtC,CAAC+3H,IAEJ,OACEnrK,EAAAA,GAAAA,GAAA,OAAKF,UAAU,uEAAsEC,UACnFC,EAAAA,GAAAA,GAACsN,GAAAA,EAAU,CACTC,KAAK,0BACLC,QAASA,EACTE,SAAqC,UAA3Bs9J,GAAkB9pK,KAAmB8pK,EAAiBI,cAAWvoK,EAC3E4K,SAAUqgF,EACVuqB,UAAQ,SC/BVt0D,GAAwB,IAAMnuC,EAAAA,EAwIpC,IAAejX,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACQ,KACF2yD,EAAAA,GAAAA,IAAK3yD,EAAOo1C,SAASmuG,MAAO,CAC7B,wBACA,gCAEFymB,YAAahqK,EAAO6hF,SAAS+qB,MAAMC,OACnC22C,kBAAmBxjJ,EAAO+rG,aAAaa,MAAMC,OAC7Cf,gBAAiB9rG,EAAO6hF,SAASgqB,SACjC+9D,gBAAiB5pK,EAAO0pK,QAAQE,gBAChChnH,mBAAoB5iD,EAAO6iD,UAAUD,mBACrC6gG,uBAAuB12C,EAAAA,EAAAA,KAA4B/sG,KAZrCsN,CArHgC28J,EAClD9xJ,WACA6xJ,cACAxmB,oBACA13C,kBACA89D,kBACAM,wBACAC,8BACAvnH,qBACA6gG,wBACAtiF,cAEA,MAAM,iBACJ67D,EAAgB,eAChBvtC,EAAc,mBACd6nD,IACE3sI,EAAAA,EAAAA,MACEe,GAAOC,EAAAA,EAAAA,KAEPi4I,GAAqB57I,EAAAA,EAAAA,OACnBg3F,QAASoB,IAAiCd,EAAAA,GAAAA,IAAwB,CAAEC,QAASqkD,IAE/EC,GAAwBvlJ,EAAAA,EAAAA,IAAayiF,IACzC0O,EAAe,CACbnB,eAAgBvN,EAAQuN,kBAEzB,CAACmB,IAEE26E,GAAqC9rK,EAAAA,EAAAA,IAAa68F,IACtD6hC,EAAiB,CAAEmtC,4BAA6BhvE,KAC/C,CAAC6hC,IAEEqtC,GAA8B/rK,EAAAA,EAAAA,IAAa68F,IAC/C6hC,EAAiB,CAAEktC,sBAAuB/uE,KACzC,CAAC6hC,IAEEstC,GAAc5jK,EAAAA,EAAAA,IAAQ,IAC1BsjK,GAAexoH,OAAO0K,QAAOyG,EAAAA,GAAAA,IAAKm5C,EAAiBk+D,IAClD,CAACA,EAAal+D,IAOjB,OALApiF,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,KAIR5iE,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,mBACZm8B,QAASqiI,EACT10G,QAAS60G,KAEX9rK,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPm/E,QAAM,EAEN3zG,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBvmD,cAC5Dr/E,KAAK,QAAOlT,SAAA,CAEXgN,EAAK,0BACL83I,IAAqB7kJ,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,SAAE8kJ,EAAkBljJ,YAEzFspK,IACCrrK,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPziC,UAAU,0BACV4hH,QAAM,EAEN3zG,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBke,gBAAiBh3J,SAAA,EAE7EC,EAAAA,GAAAA,GAACylD,GAAAA,EAAmB,CAClBrS,SAAU63H,EACVnrK,UAAU,2BACVI,KAAM6jD,GACNE,mBAAoBA,KAEtBjkD,EAAAA,GAAAA,GAAA,OAAKF,UAAU,QAAOC,SAAEgN,EAAK,6BAInCnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACtEgN,EAAK,yCAER/M,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,sCACZm8B,QAASsiI,EACT30G,QAAS40G,KAEXzrK,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCuW,IAAI,OAAMtW,SACrDgN,EAAK,+CAGT4+J,IACC/rK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACtEgN,EAAK,iCAER/M,EAAAA,GAAAA,GAAA,OAAKiU,IAAKgxI,EAAmBllJ,SAC1B4rK,EAAYl4J,IAAKsuF,IAChB/hG,EAAAA,GAAAA,GAACwkJ,GAAc,CAEbziD,WAAYA,EACZE,oBAAqBR,EACrB1zF,QAASm3I,EACT3kI,QAASukI,GAJJ/iD,EAAWliG,QAQtBG,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCuW,IAAI,OAAMtW,UACrDi0B,EAAAA,GAAAA,GAAWjnB,EAAK,mBAAoB,CAAC,qBCpGlD,IAAepO,EAAAA,EAAAA,IApCoCitK,EACjDpyJ,WAAUgpD,cAEV,MAAM,mBAAEm2E,IAAuB3sI,EAAAA,EAAAA,MACzBe,GAAOC,EAAAA,EAAAA,KAEPuX,GAAchY,EAAAA,EAAAA,GAAgB,KAClCosI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB0D,YAQ/C,OALAxxH,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,KAIR5iE,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wCAAuCC,SAAA,EACpDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAACi4I,GAAAA,EAAY,CACX/3I,KAAMC,EAAAA,IACNC,OAAQC,GAAAA,EAAeu6I,gBACvB96I,UAAU,2BAGZE,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCuW,IAAI,OAAMtW,SACrDgN,EAAK,4CAIV/M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,+BAA8BC,UAC3CC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACG,QAASwW,EAAYxkB,SAAEgN,EAAK,sD,gBChB5C,MA2EA,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAsBtN,IACxC,MACMwqK,GADW98J,EAAAA,EAAAA,KAAe1N,GACDwqK,cAE/B,MAAO,CACLC,eAAeC,EAAAA,EAAAA,KAAoB1qK,EAAQ,MAC3C2qK,WAAY3qK,EAAOi9G,cAAc2tD,uBACjCJ,kBAPgBl9J,CAzEsCu9J,EACxDJ,gBACAE,aACAr3I,YACA4W,QACA4gI,aACA3zG,WACAh/C,WACAgpD,UACAqpG,oBAEA,MAAM/uG,GAAWzzD,EAAAA,EAAAA,OACX,SAAEjK,IAAaC,EAAAA,EAAAA,MACf+sK,EAAsBhtK,EAAW,IAAM,KAEtCuN,EAAO0/J,IAAYlgK,EAAAA,EAAAA,IAAiB,KAE3C5B,EAAAA,EAAAA,IAAU,KACHiL,EAAAA,IACH3K,WAAW,KACTiyD,EAAStzD,QAASi0D,SACjB2uG,IAEJ,CAACA,IAEJ,MAAMr/J,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAGV,MAAM8pG,GAAoB3sK,EAAAA,EAAAA,IAAakN,IACjC0+B,GAAS4gI,GACXA,IAGF,MAAM3vE,EAAW3vF,EAAEC,OAAOH,MAAMohC,MAAM,EAAGi+H,GAErCxvE,EAAS76F,SAAWqqK,GACtBxzG,EAASgkC,GAGX6vE,EAAS7vE,GACT3vF,EAAEC,OAAOH,MAAQ6vF,GAChB,CAAC2vE,EAAYH,EAAYzgI,EAAOitB,IAEnC,OACE54D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wCAAuCC,SAAA,EACpDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAACusK,GAAAA,EAAuB,CAACnqF,QAAS0pF,EAAe5rK,KApDvC,IAoDwDJ,UAAU,0BAC3E+rK,IACC7rK,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCuW,IAAI,OAAMtW,SACrDgN,EAAK,sCAAuC8+J,SAKnDjsK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,+BAA8BC,SAAA,EAC3CC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRhB,MAAOA,EACPsH,IAAK6oD,EACLhB,UAAU,UACV5uD,MAAOH,EAAK,iBACZw+B,MAAOA,EACP99B,SAAU6+J,IAEX33I,IAAa30B,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,aC7B9B,IAAe9wD,EAAAA,EAAAA,IArD4B6tK,EACzChzJ,WAAUgpD,cAEV,MAAM,mBAAEm2E,IAAuB3sI,EAAAA,EAAAA,MACzBe,GAAOC,EAAAA,EAAAA,KAOb,OALA+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,KAIR5iE,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wCAAuCC,SAAA,EACpDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAAC6nG,GAAAA,EAAuB,CACtBznG,OAAQC,GAAAA,EAAey6I,KACvBvO,WAAYwO,GACZ76I,KAAM,IACNJ,UAAU,2BAGZE,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCuW,IAAI,OAAMtW,UACrDi0B,EAAAA,GAAAA,GAAWjnB,EAAK,uBAAwB,CAAC,aAI9CnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,OAELlF,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBuhB,6BAA8Br6J,SAEzFgN,EAAK,qBAER/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,eAELlF,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBwhB,eAAgBt6J,SAE3EgN,EAAK,sBAER/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,QAELlF,QAASA,IAAM4qI,EAAmB,CAAES,OAAQP,EAAAA,GAAgByhB,oCAAqCv6J,SAEhGgN,EAAK,8BCyGhB,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAqB,CAACtN,GAAU4R,WAC3C,CACL64J,eAAeC,EAAAA,EAAAA,KAAoB1qK,EAAiB,UAAT4R,EAAmB,KAAO,QAFrDtE,CAnI0C89J,EAC5DX,gBACA5qK,OAAO,OACPyzB,YACA4W,QACA+jB,cACAo9G,gBACAP,aACA3zG,WACAh/C,WACAgpD,cAEA,MAAM1F,GAAWzzD,EAAAA,EAAAA,OACX,SAAEjK,IAAaC,EAAAA,EAAAA,MAEf+sK,EAAsBhtK,EAAW,IAAM,KACtCuN,EAAO0/J,IAAYlgK,EAAAA,EAAAA,IAAiB,KACpCwgK,EAAgBC,EAAoBC,IAAwB5tK,EAAAA,EAAAA,IAAQ,IAE3EsL,EAAAA,EAAAA,IAAU,KACHiL,EAAAA,IACH3K,WAAW,KACTiyD,EAAStzD,QAASi0D,SACjB2uG,IAEJ,CAACA,IAEJ,MAAME,GAAoB3sK,EAAAA,EAAAA,IAAakN,IACjC0+B,GAAS4gI,GACXA,IAGFE,EAASx/J,EAAEC,OAAOH,QACjB,CAACw/J,EAAY5gI,IAYVuhI,GAAantK,EAAAA,EAAAA,IAAY,KAC7B64D,KACC,CAACA,IAEEu0G,GAAoBptK,EAAAA,EAAAA,IAAY,KACpCktK,IACAr0G,KACC,CAACA,EAAUq0G,IAER9/J,GAAOC,EAAAA,EAAAA,KAOb,OALA+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,KAIR5iE,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wCAAuCC,SAAA,EACpDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAACusK,GAAAA,EAAuB,CAACnqF,QAAS0pF,EAAe5rK,KAlEvC,IAkEwDJ,UAAU,0BAClE,UAAToB,IACClB,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCuW,IAAI,OAAMtW,SACrDgN,EAAK,+BAKZnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,+BAA8BC,SAAA,EAC3CH,EAAAA,GAAAA,IAAA,QAAMkC,OAAO,GAAG02D,SAtCA3rD,IACpBA,EAAE6Y,iBAEGo3C,EAAStzD,SAIdgvD,EAAS7rD,IA+BkC5M,SAAA,EACrCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRsG,IAAK6oD,EACLnwD,MAAOA,EACPmvD,UAAW56D,EACXgM,MAAOoiD,EACP/jB,MAAOA,EACP99B,SAAU6+J,IAGX3/J,GACC3M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC1M,KAAK,SAASyzB,UAAWA,EAAWhV,QAAM,EAAA5f,SAAEgN,EAAK,eAEzD/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLE,QAAM,EACN6mB,UAAWA,EACXhV,QAAM,EACN5R,QAAS2+J,EAAgBE,EAAqBE,EAAW/sK,SAExDgN,EAAK,sBAIX2/J,IACC9sK,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJtN,UAAU,SACV6L,OAAQghK,EACRx/J,MAAOJ,EAAK,wBACZlB,QAASghK,EAAqB9sK,SAAA,EAE7Bi0B,EAAAA,GAAAA,GAAWjnB,EAAK,4BAA6B,CAAC,KAAM,qBACrDnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLC,MAAM,SACN8R,QAAM,EACN7R,QAAM,EACNhO,UAAU,wBACViO,QAASg/J,EAAkBhtK,SAE1BgN,EAAK,oBAER/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLC,MAAM,UACN8R,QAAM,EACN7R,QAAM,EACNhO,UAAU,wBACViO,QAAS8+J,EAAqB9sK,SAE7BgN,EAAK,2BChHtB,IAAepO,EAAAA,EAAAA,IAhC0BquK,EACvCxzJ,WAAUgpD,UAASjmB,cAEnB,MAAMxvC,GAAOC,EAAAA,EAAAA,KAOb,OALA+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,KAIR5iE,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wCAAuCC,SAAA,EACpDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAAC6nG,GAAAA,EAAuB,CACtBznG,OAAQC,GAAAA,EAAey6I,KACvBvO,WAAYwO,GACZ76I,KAAM,IACNJ,UAAU,2BAGZE,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCuW,IAAI,OAAMtW,SACrDgN,EAAK,mCAIV/M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,+BAA8BC,UAC3CC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACG,QAASwuC,EAAQx8C,SAAEgN,EAAK,yCCsWxC,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IAAM,IAAiCA,EAAOi9G,gBAD7B3vG,CAtX6Bs+J,EAC/C10B,gBACAC,cACA14E,QACAy+C,OACA5pF,YACAyqF,WACA6sD,yBACAn8B,WACAt2H,WACAgpD,cAEA,MAAM,eACJ0qG,EAAc,cACdC,EAAa,gBACbC,EAAe,oBACfC,EAAmB,sBACnBC,EAAqB,cACrBC,EAAa,mBACb50B,IACE3sI,EAAAA,EAAAA,MAEEe,GAAOyqC,EAAAA,GAAAA,KACPD,GAAUvqC,EAAAA,EAAAA,MAEhBzC,EAAAA,EAAAA,IAAU,KACJ0hK,IACE1zB,IAAkBM,EAAAA,GAAgBkhB,sBACpCphB,EAAmB,CAAES,OAAQP,EAAAA,GAAgBohB,4BACpC1hB,IAAkBM,EAAAA,GAAgBmhB,oBAC3CrhB,EAAmB,CAAES,OAAQP,EAAAA,GAAgBqhB,2BAGhD,CAAC3hB,EAAe0zB,EAAwBtzB,IAE3C,MAAM+C,GAAoB/7I,EAAAA,EAAAA,IAAY,KACpCmwI,EAAS,CAAE5uI,KAAM,UACjBy3I,EAAmB,CAAES,OAAQP,EAAAA,GAAgB4gB,oBAC5C,CAAC3pB,EAAU6I,IAERiD,GAAoBj8I,EAAAA,EAAAA,IAAagN,IACrCmjI,EAAS,CAAE5uI,KAAM,cAAeuuI,QAAS9iI,IACzCgsI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB+gB,2BAC5C,CAAC9pB,EAAU6I,IAERmD,GAA2Bn8I,EAAAA,EAAAA,IAAY,KAC3Cg5I,EAAmB,CAAES,OAAQP,EAAAA,GAAgBghB,wBAC5C,CAAClhB,IAEE60B,GAAwB7tK,EAAAA,EAAAA,IAAagN,IACzCmjI,EAAS,CAAE5uI,KAAM,UAAWuuI,QAAS9iI,IACrCgsI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBkhB,yBAC5C,CAACjqB,EAAU6I,IAER80B,GAAyB9tK,EAAAA,EAAAA,IAAagN,IAC1CmjI,EAAS,CAAE5uI,KAAM,WAAYuuI,QAAS9iI,IACtCugK,EAAe,IACVptG,EACHyvE,MAAO5iI,EACPyrH,UAAWA,KACTugB,EAAmB,CAAES,OAAQP,EAAAA,GAAgBshB,2BAGhD,CAACrqB,EAAUhwE,EAAOotG,EAAgBv0B,IAE/BqD,GAA8Br8I,EAAAA,EAAAA,IAAagN,IAC/CmjI,EAAS,CAAE5uI,KAAM,qBAAsBuuI,QAAS9iI,IAChDwgK,EAAc,CACZnuD,gBAAiBryG,EACjByrH,UAAWA,KACTugB,EAAmB,CAAES,OAAQP,EAAAA,GAAgB6gB,6BAGhD,CAACyT,EAAer9B,EAAU6I,IAEvByD,GAA0Bz8I,EAAAA,EAAAA,IAAagN,IAC3CmjI,EAAS,CAAE5uI,KAAM,cAAeuuI,QAAS9iI,IACzCgsI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB8gB,8BAC5C,CAAC7pB,EAAU6I,IAER+0B,GAA8B/tK,EAAAA,EAAAA,IAAY,KAC9Cg5I,EAAmB,CAAES,OAAQP,EAAAA,GAAgBihB,2BAC5C,CAACnhB,IAEEg1B,GAA2BhuK,EAAAA,EAAAA,IAAagN,IAC5CmjI,EAAS,CAAE5uI,KAAM,UAAWuuI,QAAS9iI,IACrCugK,EAAe,IACVptG,EACHy+C,KAAM5xG,EACNyrH,UAAWA,KACTugB,EAAmB,CAAES,OAAQP,EAAAA,GAAgBshB,2BAGhD,CAACrqB,EAAUhwE,EAAOotG,EAAgBv0B,IAE/B2D,GAAgB38I,EAAAA,EAAAA,IAAagN,IACjC4gK,EAAc,CACZvuD,gBAAiBryG,EACjByrH,UAAWA,KACTugB,EAAmB,CAAES,OAAQP,EAAAA,GAAgB0D,cAGhD,CAACgxB,EAAe50B,IAEbi1B,GAAqCjuK,EAAAA,EAAAA,IAAagN,IACtDmjI,EAAS,CAAE5uI,KAAM,qBAAsBuuI,QAAS9iI,IAChDwgK,EAAc,CACZnuD,gBAAiBryG,EACjByrH,UAAWA,KACTugB,EAAmB,CAAES,OAAQP,EAAAA,GAAgBmhB,yBAGhD,CAACmT,EAAer9B,EAAU6I,IAEvBk1B,GAAsBluK,EAAAA,EAAAA,IAAagN,IACvCmjI,EAAS,CAAE5uI,KAAM,WAAYuuI,QAAS9iI,IACtC0gK,EAAoB,IACfvtG,EACHyvE,MAAO5iI,EACPyrH,UAAWA,KACTugB,EAAmB,CAAES,OAAQP,EAAAA,GAAgBshB,2BAGhD,CAACrqB,EAAUhwE,EAAOutG,EAAqB10B,IAEpCm1B,GAAkBnuK,EAAAA,EAAAA,IAAao7D,IACnCuyG,EAAsB,CAAEvyG,UACvB,CAACuyG,IAEJ,OAAQ/0B,GACN,KAAKM,EAAAA,GAAgB0gB,cACnB,OACEv5J,EAAAA,GAAAA,GAACgtK,GAAkB,CACjBzwH,QAASm/F,EACTliI,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgB4gB,iBAChB5gB,EAAAA,GAAgB+gB,wBAChB/gB,EAAAA,GAAgBghB,qBAChBhhB,EAAAA,GAAgBkhB,sBAChBlhB,EAAAA,GAAgBohB,0BAChBphB,EAAAA,GAAgBshB,sBAChBrqI,SAAS0oH,GACXh2E,QAASA,IAIf,KAAKq2E,EAAAA,GAAgB4gB,iBACnB,OACEz5J,EAAAA,GAAAA,GAAC+tK,GAAqB,CACpBz+G,YAAa/X,EAAQ,uBACrBsjB,YAAatjB,EAAQ,YACrBihB,SAAUojF,EACVpiI,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgB+gB,wBAChB/gB,EAAAA,GAAgBghB,qBAChBhhB,EAAAA,GAAgBkhB,sBAChBlhB,EAAAA,GAAgBohB,0BAChBphB,EAAAA,GAAgBshB,sBAChBrqI,SAAS0oH,GACXh2E,QAASA,IAIf,KAAKq2E,EAAAA,GAAgB+gB,wBACnB,OACE55J,EAAAA,GAAAA,GAAC+tK,GAAqB,CACpB1zB,iBAAkBv6E,EAAMi/C,SACxBzvD,YAAa/X,EAAQ,yBACrBsjB,YAAatjB,EAAQ,YACrBihB,SAAUsjF,EACVtiI,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgBghB,qBAChBhhB,EAAAA,GAAgBkhB,sBAChBlhB,EAAAA,GAAgBohB,0BAChBphB,EAAAA,GAAgBshB,sBAChBrqI,SAAS0oH,GACXh2E,QAASA,IAIf,KAAKq2E,EAAAA,GAAgBghB,qBACnB,OACE75J,EAAAA,GAAAA,GAACysK,GAA0B,CACzBx5J,KAAK,OACLq8C,YAAa/X,EAAQ,2BACrBihB,SAAUg1G,EACVh0J,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgBkhB,sBAChBlhB,EAAAA,GAAgBohB,0BAChBphB,EAAAA,GAAgBshB,sBAChBrqI,SAAS0oH,GACXh2E,QAASA,IAIf,KAAKq2E,EAAAA,GAAgBkhB,sBACnB,OACE/5J,EAAAA,GAAAA,GAACysK,GAA0B,CACzBx5J,KAAK,QACL/R,KAAK,QACLyzB,UAAWA,EACX4W,MAAO6zE,GAAYryG,EAAKsyG,YAAYD,GACpC+sD,WAAYiB,EACZ99G,YAAa/X,EAAQ,sBACrBm1H,eAAa,EACbl0G,SAAUi1G,EACVj0J,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgBohB,0BAChBphB,EAAAA,GAAgBshB,sBAChBrqI,SAAS0oH,GACXh2E,QAASA,IAIf,KAAKq2E,EAAAA,GAAgBohB,0BACnB,OACEj6J,EAAAA,GAAAA,GAACksK,GAAsB,CACrBv3I,UAAWA,EACX4W,MAAO6zE,GAAYryG,EAAKsyG,YAAYD,GACpC+sD,WAAYiB,EACZ50G,SAAUs1G,EACVt0J,SAAUA,GAAYg/H,IAAgBK,EAAAA,GAAgBshB,qBACtD33F,QAASA,IAIf,KAAKq2E,EAAAA,GAAgBshB,qBACnB,OACEn6J,EAAAA,GAAAA,GAAC4rK,GAA4B,CAC3BpyJ,SAAUA,EACVgpD,QAASA,IAIf,KAAKq2E,EAAAA,GAAgB2gB,aACnB,OACEx5J,EAAAA,GAAAA,GAACwsK,GAAoB,CACnBhzJ,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgBuhB,2BAChBvhB,EAAAA,GAAgB6gB,uBAChB7gB,EAAAA,GAAgB8gB,2BAChB9gB,EAAAA,GAAgBihB,wBAChBjhB,EAAAA,GAAgBwhB,aAChBxhB,EAAAA,GAAgByhB,kCAChBzhB,EAAAA,GAAgBmhB,mBAChBnhB,EAAAA,GAAgBqhB,uBAChBrhB,EAAAA,GAAgBshB,sBAChBrqI,SAAS0oH,GACXh2E,QAASA,IAIf,KAAKq2E,EAAAA,GAAgBuhB,2BACnB,OACEp6J,EAAAA,GAAAA,GAAC+tK,GAAqB,CACpBp5I,UAAWA,EACX4W,MAAO6zE,GAAYryG,EAAKsyG,YAAYD,GACpCE,aAAc8tD,EACd7uD,KAAMA,EACN/lD,SAAUwjF,EACVxiI,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgB6gB,uBAChB7gB,EAAAA,GAAgB8gB,2BAChB9gB,EAAAA,GAAgBihB,wBAChBjhB,EAAAA,GAAgBshB,sBAChBrqI,SAAS0oH,GACXh2E,QAASA,IAIf,KAAKq2E,EAAAA,GAAgB6gB,uBACnB,OACE15J,EAAAA,GAAAA,GAAC+tK,GAAqB,CACpBz+G,YAAa/X,EAAQ,+BACrBihB,SAAU4jF,EACV5iI,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgB8gB,2BAChB9gB,EAAAA,GAAgBihB,wBAChBjhB,EAAAA,GAAgBshB,sBAChBrqI,SAAS0oH,GACXh2E,QAASA,IAIf,KAAKq2E,EAAAA,GAAgB8gB,2BACnB,OACE35J,EAAAA,GAAAA,GAAC+tK,GAAqB,CACpB1zB,iBAAkBv6E,EAAMi/C,SACxBzvD,YAAa/X,EAAQ,yBACrBihB,SAAUk1G,EACVl0J,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgBihB,wBAChBjhB,EAAAA,GAAgBshB,sBAChBrqI,SAAS0oH,GACXh2E,QAASA,IAIf,KAAKq2E,EAAAA,GAAgBihB,wBACnB,OACE95J,EAAAA,GAAAA,GAACysK,GAA0B,CACzB93I,UAAWA,EACX4W,MAAO6zE,GAAYryG,EAAKsyG,YAAYD,GACpC+sD,WAAYiB,EACZn6J,KAAK,OACLq8C,YAAa/X,EAAQ,2BACrBihB,SAAUm1G,EACVn0J,SAAUA,GAAYg/H,IAAgBK,EAAAA,GAAgBshB,qBACtD33F,QAASA,IAIf,KAAKq2E,EAAAA,GAAgBwhB,aACnB,OACEr6J,EAAAA,GAAAA,GAAC+tK,GAAqB,CACpBp5I,UAAWA,EACX4W,MAAO6zE,GAAYryG,EAAKsyG,YAAYD,GACpCE,aAAc8tD,EACd7uD,KAAMA,EACN/lD,SAAU8jF,EACV9iI,SAAUA,EACVgpD,QAASA,IAIf,KAAKq2E,EAAAA,GAAgByhB,kCACnB,OACEt6J,EAAAA,GAAAA,GAAC+tK,GAAqB,CACpBp5I,UAAWA,EACX4W,MAAO6zE,GAAYryG,EAAKsyG,YAAYD,GACpCE,aAAc8tD,EACd7uD,KAAMA,EACN/lD,SAAUo1G,EACVp0J,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgBmhB,mBAChBnhB,EAAAA,GAAgBqhB,uBAChBrhB,EAAAA,GAAgBshB,sBAChBrqI,SAAS0oH,GACXh2E,QAASA,IAIf,KAAKq2E,EAAAA,GAAgBmhB,mBACnB,OACEh6J,EAAAA,GAAAA,GAACysK,GAA0B,CACzBx5J,KAAK,QACL/R,KAAK,QACLouD,YAAa/X,EAAQ,sBACrBihB,SAAUq1G,EACVr0J,SAAUA,GAAY,CACpBq/H,EAAAA,GAAgBqhB,uBAChBrhB,EAAAA,GAAgBshB,sBAChBrqI,SAAS0oH,GACXh2E,QAASA,IAIf,KAAKq2E,EAAAA,GAAgBqhB,uBACnB,OACEl6J,EAAAA,GAAAA,GAACksK,GAAsB,CACrBv3I,UAAWA,EACX4W,MAAO6zE,GAAYryG,EAAKsyG,YAAYD,GACpC+sD,WAAYiB,EACZ50G,SAAUs1G,EACVt0J,SAAUA,GAAYg/H,IAAgBK,EAAAA,GAAgBshB,qBACtD33F,QAASA,IAIf,QACE,WCnWAwrG,GAA0BnrH,OAAO8K,KAAKkrF,EAAAA,IAAiBl3I,OAAS,EAGhEssK,GAAiB,CACrBp1B,EAAAA,GAAgB0gB,cAChB1gB,EAAAA,GAAgB4gB,iBAChB5gB,EAAAA,GAAgB+gB,wBAChB/gB,EAAAA,GAAgBghB,qBAChBhhB,EAAAA,GAAgBkhB,sBAChBlhB,EAAAA,GAAgBohB,0BAChBphB,EAAAA,GAAgBshB,qBAChBthB,EAAAA,GAAgB2gB,aAChB3gB,EAAAA,GAAgBuhB,2BAChBvhB,EAAAA,GAAgB6gB,uBAChB7gB,EAAAA,GAAgB8gB,2BAChB9gB,EAAAA,GAAgBihB,wBAChBjhB,EAAAA,GAAgBwhB,aAChBxhB,EAAAA,GAAgByhB,kCAChBzhB,EAAAA,GAAgBmhB,mBAChBnhB,EAAAA,GAAgBqhB,wBAGZgU,GAAmB,CACvBr1B,EAAAA,GAAgB2D,iBAChB3D,EAAAA,GAAgB6D,iBAGZyxB,GAAkB,CACtBt1B,EAAAA,GAAgBqB,QAChBrB,EAAAA,GAAgBC,oBAChBD,EAAAA,GAAgBE,kBAChBF,EAAAA,GAAgBG,8BAChBH,EAAAA,GAAgBI,yBAChBJ,EAAAA,GAAgBK,qBAChBL,EAAAA,GAAgBe,iCAChBf,EAAAA,GAAgBM,qBAChBN,EAAAA,GAAgBiB,iCAChBjB,EAAAA,GAAgBX,cAGZk2B,GAAkB,CACtBv1B,EAAAA,GAAgBygB,oBAChBzgB,EAAAA,GAAgBwgB,gBAGZgV,GAA+B,CACnCx1B,EAAAA,GAAgBwf,kCAChBxf,EAAAA,GAAgB+f,kCAGZ0V,GAAkC,CACtCz1B,EAAAA,GAAgBgf,+BAChBhf,EAAAA,GAAgBof,+BAGZsW,GAAgC,CACpC11B,EAAAA,GAAgBif,mCAChBjf,EAAAA,GAAgBqf,mCAGZsW,GAAsB,CAC1B31B,EAAAA,GAAgBkf,0BAChBlf,EAAAA,GAAgBsf,0BAGZsW,GAA2B,CAC/B51B,EAAAA,GAAgByf,+BAChBzf,EAAAA,GAAgBggB,+BAGZ6V,GAAwB,CAC5B71B,EAAAA,GAAgB0f,4BAChB1f,EAAAA,GAAgBigB,4BAGZ6V,GAA6B,CACjC91B,EAAAA,GAAgB6f,gCAChB7f,EAAAA,GAAgBogB,gCAGZ2V,GAA4B,CAChC/1B,EAAAA,GAAgB8f,+BAChB9f,EAAAA,GAAgBqgB,+BAGZ2V,GAA6B,CACjCh2B,EAAAA,GAAgB2f,iCAChB3f,EAAAA,GAAgBkgB,iCAGZ+V,GAAiC,CACrCj2B,EAAAA,GAAgB4f,oCAChB5f,EAAAA,GAAgBmgB,oCAGZ+V,GAA8B,CAClCl2B,EAAAA,GAAgBmf,iCAChBnf,EAAAA,GAAgBuf,iCAGZ4W,GAA2B,CAC/Bn2B,EAAAA,GAAgBuH,uBA6XlB,IAAezhJ,EAAAA,EAAAA,IAhXgBswK,EAC7Bz1J,WACA++H,gBACA22B,eACAC,kBACA3sG,UACAqrE,iBACAuhC,2BAEA,MAAM,0BAAEC,EAAyB,mBAAE12B,IAAuB3sI,EAAAA,EAAAA,MAEpDsd,GAAejgB,EAAAA,EAAAA,OAEdimK,EAAYC,I/D9GZC,EAAAA,GAAAA,GAAWhgC,GAAcF,K+D+GzBmgC,EAAiBC,IAAsBvjK,EAAAA,EAAAA,IAAiB,KAE/DwjK,EAAAA,GAAAA,GAAe,CACbrmJ,eACA0I,SAAU,qBACT,CAACumH,IAEJ,MAAMK,GAAcrsI,EAAAA,EAAAA,GAAiBqjK,IACnC,MAAMC,GAAiB9gK,EAAAA,EAAAA,MAAem9B,EAAAA,EAAAA,OAAairG,mBAAmB04B,eAElEt3B,IAAkBM,EAAAA,GAAgBX,cACpCm3B,KAG4B,IAA1BO,QAAsD/sK,IAAnBgtK,IAAiCA,EACtErtG,GAAQ,IAKR+1E,IAAkBM,EAAAA,GAAgBC,qBAC/BP,IAAkBM,EAAAA,GAAgBE,mBAClCR,IAAkBM,EAAAA,GAAgBG,+BAClCT,IAAkBM,EAAAA,GAAgBI,0BAErCpuI,WAAW,KACTskK,EAAgB,CAAEjuK,KAAM,WAzJJ,KA8JtBq3I,IAAkBM,EAAAA,GAAgBK,sBAC/BX,IAAkBM,EAAAA,GAAgBM,qBAUvC32E,IAR4B,WAAtB0sG,EAAar/B,KACf8I,EAAmB,CAAES,OAAQP,EAAAA,GAAgBC,sBAE7CH,EAAmB,CAAES,OAAQP,EAAAA,GAAgBE,uBAQnD,SAAS+2B,EAA4BC,EAAyBC,GAC5D,MAAMC,EAA+C,CACnD,CAACp3B,EAAAA,GAAgBue,oBAAqBiX,GAA6Bv+I,SAASkgJ,GAC5E,CAACn3B,EAAAA,GAAgBwe,iBAAkBiX,GAAgCx+I,SAASkgJ,GAC5E,CAACn3B,EAAAA,GAAgBye,qBAAsBiX,GAA8Bz+I,SAASkgJ,GAC9E,CAACn3B,EAAAA,GAAgB0e,YAAaiX,GAAoB1+I,SAASkgJ,GAC3D,CAACn3B,EAAAA,GAAgB2e,iBAAkBiX,GAAyB3+I,SAASkgJ,GACrE,CAACn3B,EAAAA,GAAgB4e,cAAeiX,GAAsB5+I,SAASkgJ,GAC/D,CAACn3B,EAAAA,GAAgB8G,kBAAmBgvB,GAA2B7+I,SAASkgJ,GACxE,CAACn3B,EAAAA,GAAgBitB,iBAAkB8I,GAA0B9+I,SAASkgJ,GACtE,CAACn3B,EAAAA,GAAgB6e,mBAAoBmX,GAA2B/+I,SAASkgJ,GACzE,CAACn3B,EAAAA,GAAgB8e,sBAAuBmX,GAA+Bh/I,SAASkgJ,GAChF,CAACn3B,EAAAA,GAAgB2G,mBAAoBuvB,GAA4Bj/I,SAASkgJ,GAC1E,CAACn3B,EAAAA,GAAgB+e,iBAAkBoX,GAAyBl/I,SAASkgJ,IAGjEE,EAAgBjC,GAAen+I,SAASkgJ,GACxCG,EAAmBjC,GAAiBp+I,SAASkgJ,GAC7CI,EAAkBjC,GAAgBr+I,SAASkgJ,GAC3CK,EAAkBjC,GAAgBt+I,SAASkgJ,IAC5CE,GACAC,GACAttH,OAAO8K,KAAKsiH,GAAqBx8J,IAAI6R,QAAQwK,SAASkgJ,IACtDntH,OAAO0K,OAAO0iH,GAAqBngJ,UAAS,GAEjD,OAAQyoH,GACN,KAAKM,EAAAA,GAAgBy3B,KACnB,OACEtwK,EAAAA,GAAAA,GAACg8J,GAAY,CAACxiJ,SAAUA,EAAUgpD,QAASo2E,IAE/C,KAAKC,EAAAA,GAAgBge,YACnB,OACE72J,EAAAA,GAAAA,GAAC8qJ,GAAmB,CAClBtxI,SAAUA,GAAYu2J,EACtBvtG,QAASo2E,IAGf,KAAKC,EAAAA,GAAgBie,QACnB,OACE92J,EAAAA,GAAAA,GAAC8uJ,GAAe,CACdt1I,SAAUu2J,GACLC,IAAiBn3B,EAAAA,GAAgB8Y,4BACjCqe,IAAiBn3B,EAAAA,GAAgBiX,uBACjCkgB,IAAiBn3B,EAAAA,GAAgBke,eACjCiZ,IAAiBn3B,EAAAA,GAAgBvmD,aACjC+9E,GAAmBD,EACxB5tG,QAASo2E,IAGf,KAAKC,EAAAA,GAAgBke,cACnB,OACE/2J,EAAAA,GAAAA,GAACkrK,GAAqB,CAAC1xJ,SAAUu2J,EAAgBvtG,QAASo2E,IAE9D,KAAKC,EAAAA,GAAgBvmD,YACnB,OACEtyF,EAAAA,GAAAA,GAAC+kJ,GAAmB,CAACvrI,SAAUu2J,EAAgBvtG,QAASo2E,IAE5D,KAAKC,EAAAA,GAAgB5kF,cACnB,OACEj0D,EAAAA,GAAAA,GAACw9J,GAAqB,CAAChkJ,SAAUu2J,EAAgBvtG,QAASo2E,IAE9D,KAAKC,EAAAA,GAAgBme,YACnB,OACEh3J,EAAAA,GAAAA,GAACqlJ,GAAmB,CAAC7rI,SAAUu2J,EAAgBvtG,QAASo2E,IAE5D,KAAKC,EAAAA,GAAgB0D,QACnB,OACEv8I,EAAAA,GAAAA,GAACmiK,GAAe,CACd3oJ,SAAUu2J,GAAkBM,EAC5B7tG,QAASo2E,IAGf,KAAKC,EAAAA,GAAgBoe,SACnB,OACEj3J,EAAAA,GAAAA,GAAC06J,GAAgB,CACflhJ,SAAUu2J,GAAkBC,IAAiBn3B,EAAAA,GAAgBqe,eAC7D10F,QAASo2E,IAGf,KAAKC,EAAAA,GAAgBqe,eACnB,OACEl3J,EAAAA,GAAAA,GAACgnJ,GAAsB,CAACxtI,SAAUu2J,EAAgBvtG,QAASo2E,IAE/D,KAAKC,EAAAA,GAAgBse,SACnB,OACEn3J,EAAAA,GAAAA,GAACsrK,GAAgB,CAAC9xJ,SAAUu2J,EAAgBvtG,QAASo2E,IAEzD,KAAKC,EAAAA,GAAgB0V,aACnB,OACEvuJ,EAAAA,GAAAA,GAACktJ,GAAoB,CAAC1zI,SAAUu2J,EAAgBvtG,QAASo2E,IAE7D,KAAKC,EAAAA,GAAgBiX,sBACnB,OACE9vJ,EAAAA,GAAAA,GAACgxJ,GAAyB,CACxBx3I,SAAUu2J,GAAkBC,IAAiBn3B,EAAAA,GAAgB8Y,2BAC7DnvF,QAASo2E,IAGf,KAAKC,EAAAA,GAAgB8Y,2BACnB,OACE3xJ,EAAAA,GAAAA,GAACuwK,GAA8B,CAC7B/2J,SAAUu2J,EACVvtG,QAASo2E,IAGf,KAAKC,EAAAA,GAAgBugB,eACnB,OACEp5J,EAAAA,GAAAA,GAACmiJ,GAAsB,CACrB3oI,SAAUu2J,EACVvtG,QAASo2E,IAGf,KAAKC,EAAAA,GAAgBwgB,eACnB,OACEr5J,EAAAA,GAAAA,GAACgkJ,GAAsB,CACrBxqI,SAAUu2J,EACVvtG,QAASo2E,IAGf,KAAKC,EAAAA,GAAgBygB,oBACnB,OACEt5J,EAAAA,GAAAA,GAACklK,GAA2B,CAC1B1rJ,SAAUu2J,EACVvtG,QAASo2E,IAGf,KAAKC,EAAAA,GAAgBue,mBACrB,KAAKve,EAAAA,GAAgBwe,gBACrB,KAAKxe,EAAAA,GAAgBye,oBACrB,KAAKze,EAAAA,GAAgB0e,WACrB,KAAK1e,EAAAA,GAAgB2e,gBACrB,KAAK3e,EAAAA,GAAgB4e,aACrB,KAAK5e,EAAAA,GAAgB8G,iBACrB,KAAK9G,EAAAA,GAAgB6e,kBACrB,KAAK7e,EAAAA,GAAgB8e,qBACrB,KAAK9e,EAAAA,GAAgB2G,kBACnB,OACEx/I,EAAAA,GAAAA,GAACopK,GAAyB,CACxBhwB,OAAQb,EACR/+H,SAAUu2J,GAAkBE,EAAoB13B,GAChD/1E,QAASo2E,IAIf,KAAKC,EAAAA,GAAgBwf,kCACrB,KAAKxf,EAAAA,GAAgBgf,+BACrB,KAAKhf,EAAAA,GAAgBif,mCACrB,KAAKjf,EAAAA,GAAgBkf,0BACrB,KAAKlf,EAAAA,GAAgByf,+BACrB,KAAKzf,EAAAA,GAAgB0f,4BACrB,KAAK1f,EAAAA,GAAgB6f,gCACrB,KAAK7f,EAAAA,GAAgB8f,+BACrB,KAAK9f,EAAAA,GAAgB2f,iCACrB,KAAK3f,EAAAA,GAAgB4f,oCACrB,KAAK5f,EAAAA,GAAgBmf,iCACrB,KAAKnf,EAAAA,GAAgBuH,sBACnB,OACEpgJ,EAAAA,GAAAA,GAAC0pK,GAAsC,CACrCC,aAAW,EACXG,UAAWvxB,IAAkBM,EAAAA,GAAgBuH,sBAC7CwpB,oBAAqBrxB,IAAkBM,EAAAA,GAAgBmf,iCACvD6R,qBAAsBtxB,IAAkBM,EAAAA,GAAgB0f,4BACxDnf,OAAQb,EACR/+H,SAAUu2J,GAAkBE,EAAoB13B,GAChD/1E,QAASo2E,IAIf,KAAKC,EAAAA,GAAgB+f,iCACrB,KAAK/f,EAAAA,GAAgBof,8BACrB,KAAKpf,EAAAA,GAAgBqf,kCACrB,KAAKrf,EAAAA,GAAgBsf,yBACrB,KAAKtf,EAAAA,GAAgBggB,8BACrB,KAAKhgB,EAAAA,GAAgBigB,2BACrB,KAAKjgB,EAAAA,GAAgBogB,+BACrB,KAAKpgB,EAAAA,GAAgBqgB,8BACrB,KAAKrgB,EAAAA,GAAgBkgB,gCACrB,KAAKlgB,EAAAA,GAAgBmgB,mCACrB,KAAKngB,EAAAA,GAAgBuf,gCACnB,OACEp4J,EAAAA,GAAAA,GAAC0pK,GAAsC,CACrCtwB,OAAQb,EACR/+H,SAAUu2J,EACVvtG,QAASo2E,IAIf,KAAKC,EAAAA,GAAgB+e,gBACnB,OACE53J,EAAAA,GAAAA,GAAC43J,GAAe,CACdp+I,SAAUu2J,EACVvtG,QAASo2E,IAIf,KAAKC,EAAAA,GAAgBqB,QACrB,KAAKrB,EAAAA,GAAgBC,oBACrB,KAAKD,EAAAA,GAAgBE,kBACrB,KAAKF,EAAAA,GAAgBG,8BACrB,KAAKH,EAAAA,GAAgBI,yBACrB,KAAKJ,EAAAA,GAAgBK,qBACrB,KAAKL,EAAAA,GAAgBe,iCACrB,KAAKf,EAAAA,GAAgBM,qBACrB,KAAKN,EAAAA,GAAgBiB,iCACrB,KAAKjB,EAAAA,GAAgBX,aACnB,OACEl4I,EAAAA,GAAAA,GAACs4I,GAAe,CACdC,cAAeA,EACfC,YAAaw3B,EACblwG,MAAOovG,EACPp/B,SAAUq/B,EACV31J,SAAUu2J,EACVvtG,QAASo2E,IAIf,KAAKC,EAAAA,GAAgB0gB,cACrB,KAAK1gB,EAAAA,GAAgB4gB,iBACrB,KAAK5gB,EAAAA,GAAgB+gB,wBACrB,KAAK/gB,EAAAA,GAAgBghB,qBACrB,KAAKhhB,EAAAA,GAAgBkhB,sBACrB,KAAKlhB,EAAAA,GAAgBohB,0BACrB,KAAKphB,EAAAA,GAAgBshB,qBACrB,KAAKthB,EAAAA,GAAgB2gB,aACrB,KAAK3gB,EAAAA,GAAgBuhB,2BACrB,KAAKvhB,EAAAA,GAAgB6gB,uBACrB,KAAK7gB,EAAAA,GAAgB8gB,2BACrB,KAAK9gB,EAAAA,GAAgBihB,wBACrB,KAAKjhB,EAAAA,GAAgBwhB,aACrB,KAAKxhB,EAAAA,GAAgByhB,kCACrB,KAAKzhB,EAAAA,GAAgBmhB,mBACrB,KAAKnhB,EAAAA,GAAgBqhB,uBACnB,OACEl6J,EAAAA,GAAAA,GAACitK,GAAa,CACZ10B,cAAeA,EACfz4E,MAAOwvG,EACPx/B,SAAUy/B,EACV/2B,YAAaw3B,EACbx2J,SAAUu2J,EACVvtG,QAASo2E,IAIf,KAAKC,EAAAA,GAAgB2D,iBACrB,KAAK3D,EAAAA,GAAgB8C,oBACrB,KAAK9C,EAAAA,GAAgBgD,2BACrB,KAAKhD,EAAAA,GAAgBmC,8BACrB,KAAKnC,EAAAA,GAAgBsD,0BACrB,KAAKtD,EAAAA,GAAgBwD,8BACrB,KAAKxD,EAAAA,GAAgBkD,wBACrB,KAAKlD,EAAAA,GAAgB6D,gBACrB,KAAK7D,EAAAA,GAAgBoC,gBACnB,OACEj7I,EAAAA,GAAAA,GAACo7I,GAAgB,CACf7C,cAAeA,EACf4C,SAAUs0B,EACVp0B,cAAeq0B,EACfl3B,YAAaw3B,EACbx2J,SAAUu2J,EACVvtG,QAASo2E,IAIf,KAAKC,EAAAA,GAAgBsgB,YACnB,OACEn5J,EAAAA,GAAAA,GAACwwK,GAAmB,CAClBh3J,SAAUu2J,EACVvtG,QAASo2E,IAIf,QACE,OAEN,CAoBA,OACE54I,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACThpB,IAAKqV,EACLzpB,GAAG,WACH0N,MAAMwgI,EAAAA,GAAAA,GAAsB,SAAUF,EAAgBuhC,GACtDlyI,UAAWq7G,EACXlJ,YAAa2+B,GACbyC,YAAU,EACVC,kBAAgB,EAAA3wK,SA1BpB,SACEgwK,EACAY,EACAC,EACA1zI,GAEA,OACEt9B,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAC+1J,GAAc,CACbxd,cAAeA,EACf/1E,QAASo2E,EACTod,eAAgBkZ,EAAarvF,WAE9BiwF,EAA4BC,EAAgB7yI,KAGnD,MCnZF,IAAev+B,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAQ2kC,QAAShC,GAAe3iC,EAAOolC,aAAe,CAAC,GAC/CE,KAAMvB,EAAWwwD,aAAci7E,GAAqBxvK,EAAOqlC,MAEnE,MAAO,CACLtB,YACAyrI,mBACA7sI,eARcr1B,CAzE2BmiK,EAC7Ct3J,WACAmkB,SACAyH,YACAyrI,mBACA7sI,aACAw+B,cAEA,MAAM,SACJ7zB,EAAQ,qBACRoiI,IACE/kK,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MACP,SAAE5N,IAAaC,EAAAA,EAAAA,OAErB0rB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAGV,MAAMj+C,GAAc5kB,EAAAA,EAAAA,IAAaE,IAC/B8uC,EAAS,CAAE9uC,KAAIykI,sBAAsB,KACpC,CAAC31F,IAEEmhB,GAAU/nD,EAAAA,EAAAA,IAAQ,KACtB,IAAKi8B,EACH,OAGF,MAAMulG,GAAcrlG,EAAAA,GAAAA,IAAmB,CAAEC,IAAKH,EAAYI,MAAOzG,EAAQz8B,KAAM,SAE/E,OAAO40F,EAAAA,EAAAA,IAAYyzC,EAAankG,EAAWyrI,IAC1C,CAAC7sI,EAAYrG,EAAQyH,EAAWyrI,KAE5B5kH,EAAaC,IAAWC,EAAAA,GAAAA,QAAkBtpD,EAAWitD,EAAS/kD,QAAQ4yB,IAE7E,OACE/9B,EAAAA,GAAAA,IAACspD,GAAAA,EAAc,CAACC,MAAO8C,EAAa7C,WAAY8C,EAASpsD,UAAU,0BAAyBC,SAAA,CACzFksD,GAAatqD,OACZsqD,EAAYx4C,IAAK5T,IACfG,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAEPziC,UAAU,wCACViO,QAASA,IAAMwW,EAAY1kB,GAAIE,UAE/BC,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CACdloB,OAAQh+B,EACRilC,eAAa,EACb43F,WAAW,QACX/8G,QAASvgB,KARNS,IAYPosD,IAAgBA,EAAYtqD,QAC9B3B,EAAAA,GAAAA,GAAA,KAAGF,UAAU,aAA8BuW,IAAI,OAAMtW,SAClD49B,EAAOh8B,OAAS,mCAAqC,0BAD1B,eAI9B3B,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,GAAK,YAEfzvD,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CAEnBC,SAAO,EACPp4B,QAASgjK,EACTx+J,UAAWxF,EAAK,oBAAoBhN,UAEpCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,qBALP,4BCqCZ,IAAe5O,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAQ2kC,QAASm+H,GAAoB9iK,EAAOolC,aAAe,CAAC,GAG1DrC,MAAOP,EAAW,eAClB09B,EAAc,cACdkmE,EAAa,aACbC,IACE34H,EAAAA,EAAAA,KAAe1N,GAAQggE,cACnBngB,QAASymF,GAAkBF,GAAiB,CAAC,GAC7CvmF,QAASooF,GAAiB5B,GAAgB,CAAC,EAEnD,MAAO,CACLy8B,kBACAtgI,cACAmtI,YAAazvG,GAAgBrU,MAC7By6E,gBACA2B,iBAlBc36H,CAjG4BsiK,EAC9Cz9I,YACAha,WACA87E,oBACA6uE,kBACAtgI,cACAmtI,cACA1nC,eACA3B,gBACAupC,4BACAC,aACA3uG,cAEA,MAAM,qBACJ4uG,IACEplK,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAGV,MAAMy3D,GAAqBt6H,EAAAA,EAAAA,IAAaykC,IACtCgtI,EAAqB,CAAEhtI,WACtB,IAEGL,GAAeh8B,EAAAA,EAAAA,IAAQ,KAE3B,MAAMq9B,GAAY8G,EAAAA,EAAAA,MAAYxF,MAAMC,KAC9B0qI,EAAkBlN,GACpBjgI,EAAAA,GAAAA,IAAmB,CAAEC,IAAKggI,EAAiB//H,MAAOP,EAAa3iC,KAAM,SAAY,GAErF,OAAO+vD,EAAAA,GAAAA,IACLhtB,EAAAA,GAAAA,IAAO,IACFotI,KACC/nC,GAAgB,MAChB3B,GAAiB,KACpBhqG,OAAQ+mI,IACT,MAAMvwH,EAAO/O,EAAUs/H,GAEvB,OAAOvwH,IAASA,EAAKka,SAAWla,EAAKm9H,uBAAwBr7E,EAAAA,EAAAA,IAAU9hD,OAEzE,EACAmhD,IAED,CAAC6uE,EAAiBtgI,EAAaylG,EAAc3B,EAAeryC,IAEzDi8E,GAAiB5xK,EAAAA,EAAAA,IAAY,KACjCyxK,EAAqB,CAAEhtI,MAAO,KAC9B+sI,KACC,CAACA,IAEJ,OACEvxK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACL2N,MAAM,cACNE,QAASy0D,EACTjwD,UAAU,sBAAqBxS,UAE/BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,kBAEbvN,EAAAA,GAAAA,GAAA,MAAAD,SAAKgN,EAAK,yBAEZnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,uBAAsBC,SAAA,EACnCC,EAAAA,GAAAA,GAACqkC,GAAAA,EAAU,CACTC,QAASP,EACTL,YAAa4xD,EACb7wD,YAAaZ,EACba,kBAAmB33B,EAAK,iBACxB43B,cAAc,0BACdhQ,UAAWq8I,EACXpsI,cAAY,EACZK,eAAa,EACbC,YAAU,EACVC,cAAc,WACdN,oBAAkB,EAClBE,oBAAqBmsI,EACrBlsI,eAAgBi1F,KAGlBj6H,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,SAAO,EACPp4B,QAASwjK,EACTh/J,UAAWihB,EAAY,2BAA6B,yBAAyBzzB,UAE7EC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,2BCkGrB,IAAe5O,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MACEuS,SAAU49J,EACVjmI,MAAOkmI,IACL1iK,EAAAA,EAAAA,KAAe1N,GAAQqwK,cAAgB,CAAC,EAE5C,MAAO,CACLF,mBACAC,gBACAE,aAActwK,EAAO0pK,QAAQ4G,eAVfhjK,CAvL4BijK,EAC9Cp+I,YACAha,WACAm8E,YACAg8E,eACAH,mBACAC,gBACAjvG,cAEA,MAAM,gBACJqvG,EAAe,cACfC,IACE9lK,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAGV,MAAOr1D,EAAO4kK,IAAY5lK,EAAAA,EAAAA,IAAS,KAC5B6vG,EAAOg2D,IAAY7lK,EAAAA,EAAAA,IAAS,KAC5BnK,EAAOupJ,IAAYp/I,EAAAA,EAAAA,OACnBo/B,EAAO+/G,IAAYn/I,EAAAA,EAAAA,MAEpB8lK,EAAsB,4BACtBC,EAAyB,+BAGzBv9I,EAAY68I,IAAqBW,EAAAA,GAAqBtmB,YAE5DthJ,EAAAA,EAAAA,IAAU,KACR,GAAIipB,EACF,OAEF,IAAKmiE,EAAUh0F,QAAUg0F,EAAUh0F,OAtCI,EAwCrC,YADAowK,EAAS,IAGX,MAAM1wK,GAAS6qC,EAAAA,EAAAA,MACT9G,EAAY/jC,EAAOqlC,MAAMC,KACzByrI,EAAmB,CAAC/wK,EAAO+yB,iBAAmBuhE,GACjDliF,IAAKoqB,IAAWq0B,EAAAA,EAAAA,IAAuB9sB,EAAUvH,KACjDF,OAAO5yB,SACJsnK,EAAoBD,EAAiBrkI,MAAM,GAAI,GAAGpnB,KAAK,MACzD5Z,EAAK,uCACLqlK,EAAiBA,EAAiBzwK,OAAS,GAC/CowK,EAASM,IACR,CAAC7+I,EAAWmiE,EAAW5oF,IAE1B,MAAMulK,GAAoB3yK,EAAAA,EAAAA,IAAakN,IACrC,MAAM,MAAEF,GAAUE,EAAE6X,cACd83E,EAAW7vF,EAAMwuD,QAAQ,OAAQ,IAEvC42G,EAASv1E,GAELA,IAAa7vF,IACfE,EAAE6X,cAAc/X,MAAQ6vF,IAEzB,IAEG5vF,GAA0BjN,EAAAA,EAAAA,IAAakN,IAC3CmlK,EAASnlK,EAAE6X,cAAc/X,QACxB,IAEG4lK,GAAoB5yK,EAAAA,EAAAA,IAAY,KAC/BwN,EAAMxL,OAKPgwK,GAAgBh8E,EAAUh0F,QAAUgwK,EACtCrmB,EA7C0B,oDAiD5BumB,EAAgB,CACd1kK,QACAnL,QACA2zF,cAZA21D,EAAS2mB,IAcV,CAAC9kK,EAAOwoF,EAAWg8E,EAAcE,EAAiB7vK,IAE/CwwK,GAAsB7yK,EAAAA,EAAAA,IAAY,KACjCwN,EAAMxL,OAKXmwK,EAAc,CACZ3kK,QACA6uG,QACAh6G,QACA2zF,YACAniE,WAAW,IATX83H,EAAS4mB,IAWV,CAAC/kK,EAAO2kK,EAAe91D,EAAOh6G,EAAO2zF,EAAWu8E,KAEnD3nK,EAAAA,EAAAA,IAAU,KACJinK,IAAqBW,EAAAA,GAAqBlmB,UAC5CzpF,GAAQ,IAET,CAACgvG,EAAkBhvG,IAEtB,MAAMiwG,EAAiBhB,GAAiB1kK,EAAK0kK,KAC3ClmI,IAAU0mI,GAAuB1mI,IAAU2mI,EACvC3mI,OACA1oC,GAGN,OACEjD,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACL2N,MAAM,cAENE,QAASA,IAAMy0D,IACfjwD,UAAU,6BAA4BxS,UAEtCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,kBAEbvN,EAAAA,GAAAA,GAAA,MAAAD,SAAKgN,EAAKymB,EAAY,aAAe,kBAEvC5zB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,uBAAsBC,SAAA,EACnCC,EAAAA,GAAAA,GAACysJ,GAAAA,EAAc,CACbh/I,SAAU89I,EACVp+I,MAAOJ,EAAK,eAEd/M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRhB,MAAOQ,EACPM,SAAU6kK,EACVplK,MAAOH,EAAKymB,EAAY,mBAAqB,aAC7C+X,MAAOA,IAAU0mI,GAAuB1mI,IAAU2mI,EAAyB3mI,OAAQ1oC,IAEpF2wB,IACC5zB,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRhB,MAAOqvG,EACPvuG,SAAUb,EACVM,MAAOH,EAAK,qCAEd/M,EAAAA,GAAAA,GAAA,KAAGF,UAAU,OAAMC,SAAEgN,EAAK,wBAI7B0lK,IACCzyK,EAAAA,GAAAA,GAAA,KAAGF,UAAU,QAAOC,SAAE0yK,IAGvB98E,EAAUh0F,OAAS,IAClB/B,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAsBC,SAAEgN,EAAK,6BAA8B4oF,EAAUh0F,OAAQ,QAE3F3B,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kCAAiCC,SAC7C41F,EAAUliF,IAAK5T,IACdG,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAACE,UAAQ,EAAC3iC,UAAU,sBAAqBC,UAChDC,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CAACloB,OAAQh+B,gBAQrCG,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAA0B,IAAjBh5B,EAAMxL,OACfoM,QAASylB,EAAYg/I,EAAsBD,EAC3CpyJ,SAAUwU,EACVpiB,UAAWihB,EAAYzmB,EAAK,8BAAgC,eAAehN,SAE1E40B,GACC30B,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf7N,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,wBChMfmlK,GAAe7vH,OAAO8K,KAAKglH,EAAAA,IAAmBhxK,OAAS,EAkE7D,IAAehD,EAAAA,EAAAA,IAhEei0K,EAC5Bp5J,WACAga,aAAY,EACZzgB,UACA86H,iBACArrE,cAEA,MAAM,sBAAEqwG,EAAqB,qBAAEzB,IAAyBplK,EAAAA,EAAAA,OACjD8mK,EAAkBC,IAAuB5mK,EAAAA,EAAAA,IAAmB,IAE7DolK,GAAiB5xK,EAAAA,EAAAA,IAAY,KACjCkzK,EAAsB,CACpBG,WAAYx/I,EAAYm/I,EAAAA,GAAkBM,gBAAkBN,EAAAA,GAAkBO,iBAE/E,CAAC1/I,IAEE2/I,GAAiC5mK,EAAAA,EAAAA,GAAiB43B,IACtD,MAAMivI,EAAcjvI,EAAIxiC,OAASmxK,EAAiBnxK,OAElDoxK,EAAoB5uI,GAChBivI,GACFhC,EAAqB,CAAEhtI,MAAO,OAIlC,OACEpkC,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACTp9B,GAAG,UACH0N,MAAMwgI,EAAAA,GAAAA,GAAsB,SAAUF,GACtCwB,YAAaqjC,GACbx1I,UAAWnqB,EAAQhT,SAEjBszK,IACA,OAAQtgK,GACN,KAAK4/J,EAAAA,GAAkBW,gBACvB,KAAKX,EAAAA,GAAkBY,cACrB,OACEvzK,EAAAA,GAAAA,GAACixK,GAAY,CACXz9I,UAAWA,EACXha,SAAUA,EACV87E,kBAAmBw9E,EACnB5B,0BAA2BiC,EAC3BhC,WAAYI,EACZ/uG,QAASA,IAGf,KAAKmwG,EAAAA,GAAkBM,gBACvB,KAAKN,EAAAA,GAAkBO,cACrB,OACElzK,EAAAA,GAAAA,GAAC4xK,GAAY,CACXp+I,UAAWA,EACXha,SAAU65J,GAAgB75J,EAC1Bm8E,UAAWm9E,EACXtwG,QAASA,IAGf,QACE,aClFZ,GAAwI,WAAxI,GAAqK,WAArK,GAA4L,WCQ/K35C,GAAqB,IAC5B2qJ,GAAgB,IAAO59J,EAAAA,EACvB69J,GAAiB,GACjBC,GAAgB,MAAS99J,EAAAA,EACzB+9J,GAAgB,KAAQ/9J,EAAAA,EAExBg+J,GAAY,IAAIxlI,IA0RtB,SAASylI,GAAgBpoE,GACvB,IAAIjmG,EAAYzD,SAASi4B,eAAe,cAIxC,GAHIx0B,GAAaimG,IACfjmG,EAAYA,EAAUnB,cAA2B,oBAE9CmB,EAAW,MAAO,CAAC,EACxB,MAAMsuK,EAAUtuK,EAAUnB,cAA2B,iBAC/C0vK,EAASvuK,EAAUnB,cAA2B,gBAC9C2vK,EAAiBxuK,EAAUnB,cAA2B,gBACtD4vK,EAAcF,GAAQruK,iBAA8B,IAAIwuK,MACxDC,EAAgBL,GAASpuK,iBAA8B,WAE7D,MAAO,CACLF,YACAsuK,UACAE,iBACAC,cACAE,gBAEJ,CAEA,SAAShxK,GAAYixK,GACnB,MAAM/wK,EAAQ+wK,EAAS9vK,WAAU,GACjCjB,EAAME,UAAUC,ID/TwF,YCkUxGH,EAAME,UAAU+b,OAAO,aAEvBjc,EAAMM,WAAY,EAClBN,EAAMO,cAAgBC,EAAAA,EAEtB,MAAMwwK,EAAeD,EAAS/vK,cAAc,UAC5C,GAAIgwK,EAAc,CAChB,MAAM3qK,EAASrG,EAAMgB,cAAc,UACnCqF,GAAQG,WAAW,OAAOwO,UAAUg8J,EAAc,EAAG,EACvD,CAEA,OAAOhxK,CACT,CAEA,SAASixK,GAAUpiC,GACjB,OAAOA,GAAIqiC,aAAa,eAC1B,CAEA,SAASC,GAAetiC,EAAiBryI,GACvC,OAAOqyI,GAAI7tI,cAA2B,kBAAkBxE,MAC1D,CAEA,SAAS40K,GAAsBz4F,EAA8B04F,GAC3D,MAAMC,EAAU9pK,WAAWmxE,EAAU04F,GAErC,MAAO,KACLpqK,aAAaqqK,GACb34F,IAEJ,CAEA,SAAS44F,KACPhB,GAAUn8J,QAAS2pD,GAAOA,KAC1BwyG,GAAUlpK,OACZ,C,4BCzMA,UAAe/L,EAAAA,EAAAA,IAhIf,UAA2B,KAAEo1B,EAAI,WAAE03E,IACjC,MAAM,SACJ98D,EAAQ,iBACR82B,EAAgB,gBAChBh3B,EAAe,oBACfomI,IACE7oK,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,KACPiH,GAAM5K,EAAAA,EAAAA,MAENglD,EAAS,WAAYt6B,GAAQA,EAAKs6B,OAClC76B,IAAa9kB,EAAAA,EAAAA,IAASqlB,EAAKl0B,IAEjCy7C,GAAkBvnB,EAAKl0B,IAEvB,MAAM,kBACJk2E,EAAiB,kBAAEC,EAAiB,wBACpCyvB,EAAuB,kBAAExvB,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBniE,GAErB2hE,GAAoBrpE,EAAAA,EAAAA,GAAgB,IAAM0H,EAAIzK,SAC9CqsE,GAAiBtpE,EAAAA,EAAAA,GAAgB,IAAMxK,SAASsd,MAChDy2D,GAAiBvpE,EAAAA,EAAAA,GAAgB,IAAM0H,EAAIzK,QAASnF,cAAc,qCAClEshG,GAAYp5F,EAAAA,EAAAA,GAAgB,KAAM,CAAGq5F,YAAY,EAAMkvE,SAAS,KAEhEvwJ,GAAchY,EAAAA,EAAAA,GAAgB,KAC9BwpE,GAEJtnC,EAAgB,CAAE7iC,OAAQmoB,EAAKl0B,GAAIyB,OAAQy8B,EAAAA,GAAkBC,gBAGzDiR,GAAkB1iC,EAAAA,EAAAA,GAAiBM,KACvC45F,EAAAA,GAAAA,GAAoC55F,GACpC44F,EAAwB54F,KAGpBkoK,GAAqBxoK,EAAAA,EAAAA,GAAgB,KACzCk5D,EAAiB,CAAE5lE,GAAIk0B,EAAKl0B,GAAIykI,sBAAsB,EAAM0wC,WAAY,cAGpEC,GAAwB1oK,EAAAA,EAAAA,GAAgB,KAC5Ck5D,EAAiB,CAAE5lE,GAAIk0B,EAAKl0B,GAAIykI,sBAAsB,EAAM0wC,WAAY,qBAGpEh4H,GAAiBzwC,EAAAA,EAAAA,GAAgB,KACrCoiC,EAAS,CAAE9uC,GAAIk0B,EAAKl0B,GAAIykI,sBAAsB,MAG1C4wC,GAAoB3oK,EAAAA,EAAAA,GAAgB,KACxCk5D,EAAiB,CAAE5lE,GAAIk0B,EAAKl0B,GAAIykI,sBAAsB,MAGlD6wC,GAAoB5oK,EAAAA,EAAAA,GAAgB,KACxCsoK,EAAoB,CAAEjpK,OAAQmoB,EAAKl0B,GAAIyV,UAAWm2F,MAGpD,OACE7rG,EAAAA,GAAAA,IAAA,OACEqU,IAAKA,EACLy1B,KAAK,SACL,eAAc3V,EAAKl0B,GACnB4pC,SAAU,EACV3pC,UAAW0d,GACX6xB,YAAaJ,EACblhC,QAASwW,EACTyB,cAAeiwD,EAAkBl2E,SAAA,EAEjCC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACLC,KAAMA,KAER/zB,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,G7PnG8E,W6PmGlD4d,EAAKwsB,kB7PnG8E,Y6PmG9BxgD,SAC9FsuD,EAASthD,EAAK,YAAa8mB,EAAAA,GAAAA,IAAa9mB,EAAMgnB,UAE1BlxB,IAAtBmzE,IACCh2E,EAAAA,GAAAA,GAAC+f,GAAAA,EAAI,CACHpU,OAAQoqE,EACRgH,OAAQ/G,EACRJ,kBAAmBA,EACnBC,eAAgBA,EAChBC,eAAgBA,EAChB6vB,UAAWA,EACX7lG,WAAWqW,EAAAA,GAAAA,GAAe,0B7P9G8K,Y6P+GxM8J,WAAS,EACT2lF,YAAU,EACV/5F,QAASqqE,EACTpqE,oBAAqBqqE,EAAsBp2E,SAE1CsuD,GACCzuD,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAAC3F,QAASgnK,EAAoB9hK,KAAK,aAAYlT,SACrDgN,EAAK,qCAER/M,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAAC3F,QAASknK,EAAuBhiK,KAAK,UAASlT,SACrDgN,EAAK,2CAIVnN,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACIyzB,IACAxzB,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAAC3F,QAASivC,EAAgB/pC,KAAK,UAASlT,SAC9CgN,EAAK,sBAGTymB,GACCxzB,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAAC3F,QAASmnK,EAAmBjiK,KAAK,UAASlT,SACjDgN,EAAK,kCAGR/M,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAAC3F,QAASmnK,EAAmBjiK,KAAK,OAAMlT,SAC9CgN,EAAK,oCAGV/M,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACP3F,QAASonK,EACTliK,KAAMw4F,EAAa,YAAc,UAAU1rG,SAE1CgN,EAAK0+F,EAAa,8BAAgC,sCAQnE,GChFA,IAAe9sG,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUoqG,iBACT,MAAQzqD,gBAAgB,OAAEC,EAAM,SAAEiP,IAAe7uD,EAAOigC,QAIxD,MAAO,CACL0f,eAAgByqD,EAAav7C,EAAWjP,EACxC7b,UALgB/jC,EAAOqlC,MAAMC,KAM7BsmB,UALgB5rD,EAAO6rD,MAAMvmB,OAJfh4B,CA/CpB,UAAqB,WACnB88F,EAAU,UACV3rG,EAAS,eACTkhD,EAAc,UACd5b,EAAS,UACT6nB,EAAS,UACToyC,IAEA,MAAMtyF,GAAOC,EAAAA,EAAAA,KACP2kC,GAAgBx7B,EAAAA,GAAAA,GACpBqH,IACCwjC,EAAer/C,Q9PrCqK,W8PsCrL09F,G9PtC4D,W8PuC5Dv/F,EACA,gBAGImU,GAAM5K,EAAAA,EAAAA,MAIZ,OAFAu0E,EAAAA,GAAAA,GAAoB3pE,GAAKyrC,EAAAA,EAAAA,QAGvB1/C,EAAAA,GAAAA,GAAA,OACEiU,IAAKA,EACLpU,GAAG,cACHC,UAAW6xC,EACXt7B,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAEnCihD,EAAevtC,IAAK7H,IACnB,MAAMmoB,EAAOqR,EAAUx5B,IAAWqhD,EAAUrhD,GAE5C,GAAKmoB,EAIL,OACE/zB,EAAAA,GAAAA,GAACo1K,GAAiB,CAEhBrhJ,KAAMA,EACN03E,WAAYA,GAFP7/F,MAQjB,I,gBC+DA,UAAejN,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAqB,CAACtN,GAAUoqG,iBAClD,MAAQzqD,gBAAgB,SAAEkP,EAAQ,OAAEjP,GAAQ,SAAE9U,GAAa9qC,EAAOigC,SAC1DH,aAAa,cAAEk0I,EAAa,sBAAEC,KAA4BvmK,EAAAA,EAAAA,KAAe1N,GAC3Ek0K,GAAmBC,EAAAA,EAAAA,KAAuBn0K,GAC1C2lB,GAAgBmN,EAAAA,EAAAA,KAA+B9yB,EAAQ,yBAE7D,MAAO,CACL+yB,cAAe/yB,EAAO+yB,cACtB4sB,eAAgByqD,EAAav7C,EAAWjP,EACxC9a,QAASslE,GAAc6pE,GAAyBD,EAChDE,mBACAvuJ,gBACAoe,UAAW/jC,EAAOqlC,MAAMC,KACxBsmB,UAAW5rD,EAAO6rD,MAAMvmB,KACxBgH,YAAaxB,IAdGx9B,CAjGpB,UAAsB,cACpBylB,EAAa,eACb4sB,EAAc,UACd5b,EAAS,UACT6nB,EAAS,QACTwoH,EAAO,QACPtvI,EAAO,iBACPovI,EAAgB,WAChB9pE,EAAU,cACVzkF,EAAa,YACb2mB,IAEA,MAAM,kBAAE+nI,IAAsB1pK,EAAAA,EAAAA,MAExBe,GAAOC,EAAAA,EAAAA,KAEPsmC,GAAQvrC,EAAAA,EAAAA,IAAQ,IACU,IAA1Bi5C,EAAer/C,OACV,CAACyjC,EAAU4b,EAAe,KAAOiM,EAAUjM,EAAe,KAG5DA,EACJvtC,IAAK5T,GAAOulC,EAAUvlC,IAAOotD,EAAUptD,IACvC89B,OAAQ5J,GAASA,GAAQA,EAAKl0B,KAAOu0B,GACrC2Z,MAAM,EAAG4nI,EAAAA,KACTxtF,UACF,CAAC/zD,EAAe4sB,EAAgB5b,EAAW6nB,IAoBxC2oH,IAlBe7tK,EAAAA,EAAAA,IAAQ,IACtBurC,GAAO3xC,OACL2xC,EAAMgP,OAAO,CAACkL,EAAKz5B,KACxB,MAAMuN,EAAUqM,EAAY5Z,EAAKl0B,IACjC,IAAKyhC,EAAS,OAAOksB,EAErB,MAAM7nB,EAAgBrE,EAAQ8K,WAAWo6C,KAAM3mF,IAC7C,MAAM+/B,EAAQ0B,EAAQqF,KAAK9mC,GAC3B,IAAK+/B,KAAW,sBAAuBA,GAAQ,OAAO,EACtD,MAAM6lD,EAASnkD,EAAQgf,YAAc1gB,EAAM//B,IAAMyhC,EAAQgf,WACzD,OAAO1gB,EAAMoe,oBAAsBynC,IAIrC,OADAj4B,EAAIz5B,EAAKl0B,IAAM8lC,EACR6nB,GACN,CAAC,GAduB,CAAC,EAe3B,CAAC7f,EAAa2F,KAEMvrC,EAAAA,EAAAA,IAAQ,IACtBi5C,EAAejT,MAAM,EAjDV,GAkDjB,CAACiT,KAEJ1F,GAAkBs6H,GAElB,MAAMx2J,EAAYq2J,GAAWtvI,GAEvB,IAAElyB,EAAG,aAAE6P,IAAiB+xJ,EAAAA,GAAAA,GAAqC,CACjElqK,OAAQyT,EACRtf,UAAW,OACXg2K,kBAAkB,IAcpB,IAXAvrK,EAAAA,EAAAA,IAAU,KACHyc,IAAiBuuJ,IAClBn2J,IACF0Y,EAAAA,EAAAA,IAAoBjP,GAAqBkP,EAAAA,KHwDxC,SAAwB0zE,GAC7BmpE,KAEA,MAAM,UACJpvK,EAAS,QACTsuK,EAAO,cACPK,EAAa,YACbF,EAAW,eACXD,GACEH,GAAgBpoE,GAEpB,KAAKqoE,GAAYK,GAAkBF,GAAgBzuK,GAAcwuK,GAC/D,OAEF,MAAQ5wJ,MAAO2yJ,GAAgB/B,EAAe73J,wBAGxC65J,EAAmB7B,EAAc,GACjC8B,EAAoB9B,EAAcA,EAAcxyK,OAAS,GACzDu0K,EAAS5B,GAAU0B,GAEzBhqI,MAAMtwB,KAAKu4J,GAAa9rF,UAAU1wE,QAAQ,CAACsc,EAAMvvB,GAAS7C,aACxD,MAAM9B,EAAKy0K,GAAUvgJ,GACrB,IAAKl0B,EAAI,OACT,MAAMshF,EAASthF,IAAOq2K,EACtB,IAAIC,EAAe3B,GAAeV,EAASj0K,GACvCu2K,EAAS3C,GAAiBjvK,EAAQ,EAStC,GARK2xK,IAIHA,EAHe3xK,IAAU7C,EAAS,EAGVs0K,EAAoBD,EAC5CI,EAAS3C,KAGN0C,EAAc,OAEnB,MACE9yJ,IAAKuV,EACL9c,KAAM+c,EACNpvB,MAAOqvB,GACL/E,EAAK5X,wBAET,IACEL,KAAM0c,EACN/uB,MAAO4uB,EACPhV,IAAKoV,GACH09I,EAAah6J,wBAEjB,GAAI0c,EAAWk9I,EACb,OAGFv9I,GAAUk7I,GACVr7I,GAAW,EAAIq7I,GAEf,MAAMhpH,EAAelyB,EAASK,EACxB8xB,EAAelyB,EAAQG,EAAU+6I,GACjC0C,EAAUh+I,EAAUS,EAE1BL,GAASi7I,GAET,MAAMp6I,EAAiBT,EAAWL,EAAS,EAAIk7I,GACzCn6I,EAAiBX,EAAUH,EAAQi7I,GACnC4C,EAAYx9I,GAAaT,EAAU,EAAIq7I,KAE7Ct7J,EAAAA,EAAAA,IAAgB,KACd,MAAM/U,EAAQF,GAAY4wB,GAC1B,IAAI+2B,EAEAsrH,EAAS3C,IACX3oH,EAAS3nD,GAAYgzK,GACjBh1F,GACFr2B,EAAOvnD,UAAUC,IAAI+yK,KAGvBlzK,EAAME,UAAUC,IAAI+yK,GAAgCA,KAGtD78I,EAAAA,EAAAA,IAAYr2B,EAAO,CACjBggB,IAAK,GAAGuV,MACR9c,KAAM,GAAG+c,MACTpvB,MAAO,GAAGqvB,MACVs9I,OAAQrzH,OAAOqzH,KAGbtrH,IACFpxB,EAAAA,EAAAA,IAAYoxB,EAAQ,CAClBznC,IAAK,GAAGoV,MACR3c,KAAM,GAAG0c,MACT49I,OAAQrzH,OAAOqzH,GACft7I,QAAS,IACTnP,UAAW,eAAe2N,QAAqBC,iBAA8B+8I,OAIjFviJ,EAAKxwB,UAAUC,IAAI,aACnB2yK,EAAa5yK,UAAUC,IAAI,aAE3BgC,EAAUvB,YAAYZ,GAClBynD,GACFtlD,EAAUvB,YAAY6mD,IAGxB1yC,EAAAA,EAAAA,IAAgB,MACdshB,EAAAA,EAAAA,IAAYr2B,EAAO,CACjBy3B,QAASgwB,EAAS,IAAM,GACxBn/B,UAAW,eAAe++B,QAAmBC,iBAA4B0rH,OAGvEvrH,GACFpxB,EAAAA,EAAAA,IAAYoxB,EAAQ,CAClBhwB,QAAS,GACTnP,UAAW,KAGbtoB,EAAME,UAAU+b,OAAOi3J,IAGzB,MAAMn1G,EAAKqzG,GAAsB,MAC/Br8J,EAAAA,EAAAA,IAAgB,KACV5S,EAAUo0B,SAASv2B,IACrBmC,EAAUq0B,YAAYx2B,GAEpBynD,GAAUtlD,EAAUo0B,SAASkxB,IAC/BtlD,EAAUq0B,YAAYixB,GAExB/2B,EAAKxwB,UAAU+b,OAAO,aACtB62J,EAAa5yK,UAAU+b,OAAO,eAGhCs0J,GAAU/oI,OAAOu2B,IAChBv4C,GAAqBkP,EAAAA,KAExB67I,GAAUpwK,IAAI49D,QAItB,CGjMMrmC,CAAe0wE,MAEf3zE,EAAAA,EAAAA,IAAoBjP,GAAqBkP,EAAAA,KHvFxC,SAAwB0zE,GAC7BmpE,KAEA,MAAM,UACJpvK,EAAS,QAAEsuK,EAAO,eAAEE,EAAc,YAAEC,EAAW,cAAEE,GAC/CN,GAAgBpoE,GAEpB,KAAKqoE,GAAYK,GAAkBF,GAAgBzuK,GAAcwuK,GAC/D,OAGF,MAAQ1wJ,OAAQkzJ,EAAcpzJ,MAAO2yJ,GAAgB/B,EAAe73J,wBAC9Dsc,EAAQ+9I,EAAehD,GAGvBwC,EAAmB7B,EAAc,GACjC8B,EAAoB9B,EAAcA,EAAcxyK,OAAS,GACzDu0K,EAAS5B,GAAU0B,GAEzBhqI,MAAMtwB,KAAKu4J,GAAa9rF,UAAU1wE,QAAQ,CAACsc,EAAMvvB,GAAS7C,aACxD,MAAM9B,EAAKy0K,GAAUvgJ,GACrB,IAAKl0B,EAAI,OACT,MAAMshF,EAASthF,IAAOq2K,EACtB,IAAIC,EAAe3B,GAAeV,EAASj0K,GACvCu2K,EAAS3C,GAAiBjvK,EAAQ,EAStC,GARK2xK,IAIHA,EAHe3xK,IAAU7C,EAAS,EAGVs0K,EAAoBD,EAC5CI,EAAS3C,KAGN0C,EAAc,OAEnB,IAEE9yJ,IAAKuV,EACL9c,KAAM+c,EACNpvB,MAAOqvB,GACLq9I,EAAah6J,wBAEjB,MACEL,KAAM0c,EACN/uB,MAAO4uB,GACLtE,EAAK5X,wBAET,GAAIqc,EAASu9I,EACX,OAGFl9I,GAAY66I,GACZ56I,GAAa,EAAI46I,GAEjB,MAAMp6I,EAAiBT,EAAWL,EAC5Be,EAAiBX,EAAUH,EAC3B69I,EAAYx9I,EAAYT,EAE9BO,GAAW86I,GAEX,MAAMhpH,EAAelyB,EAASK,EAAW,EAAI66I,GACvC/oH,EAAelyB,EAAQG,EAAU86I,GACjC2C,EAAUh+I,GAAWS,EAAY,EAAI46I,KAE3Ct7J,EAAAA,EAAAA,IAAgB,KACd,IAAK+9J,EAAc,OACnB,MAAM9yK,EAAQF,GAAY4wB,GAE1B,IAAI+2B,EAGAsrH,EAAS3C,IACX3oH,EAAS3nD,GAAYgzK,GACjBh1F,GACFr2B,EAAOvnD,UAAUC,IAAI+yK,KAIvBlzK,EAAME,UAAUC,IAAI+yK,KAGtB78I,EAAAA,EAAAA,IAAYr2B,EAAO,CACjBggB,IAAK,GAAGoV,MACR3c,KAAM,GAAG0c,MACT49I,OAAQrzH,OAAOqzH,GACft7I,QAASgwB,EAAS,IAAM,GACxBn/B,UAAW,eAAe2N,QAAqBC,iBAA8B+8I,OAG3ExrH,IACFpxB,EAAAA,EAAAA,IAAYoxB,EAAQ,CAClBznC,IAAK,GAAGuV,MACR9c,KAAM,GAAG+c,MACTu9I,OAAQrzH,OAAOqzH,KAInB5wK,EAAUvB,YAAYZ,GAClBynD,GACFtlD,EAAUvB,YAAY6mD,GAExBqrH,EAAa5yK,UAAUC,IAAI,aAC3BuwB,EAAKxwB,UAAUC,IAAI,cAEnB4U,EAAAA,EAAAA,IAAgB,MACdshB,EAAAA,EAAAA,IAAYr2B,EAAO,CACjBy3B,QAAS,GACTnP,UAAW,KAGTm/B,GACFpxB,EAAAA,EAAAA,IAAYoxB,EAAQ,CAClBhwB,QAAS,IACTnP,UAAW,eAAe++B,QAAmBC,iBAA4B0rH,OAG3EhzK,EAAME,UAAUC,IAAI+yK,IAGtB,MAAMn1G,EAAKqzG,GAAsB,MAC/Br8J,EAAAA,EAAAA,IAAgB,KACV5S,EAAUo0B,SAASv2B,IACrBmC,EAAUq0B,YAAYx2B,GAEpBynD,GAAUtlD,EAAUo0B,SAASkxB,IAC/BtlD,EAAUq0B,YAAYixB,GAExBqrH,GAAc5yK,UAAU+b,OAAO,aAC/ByU,EAAKxwB,UAAU+b,OAAO,aAEtBs0J,GAAU/oI,OAAOu2B,MAElBv4C,GAAqBkP,EAAAA,KAExB67I,GAAUpwK,IAAI49D,QAItB,CGlDMtnC,CAAe2xE,MAEhB,CAACA,EAAYrsF,EAAW4H,EAAeuuJ,IAErCzxJ,EAIL,OACE9jB,EAAAA,GAAAA,GAAA,UACEiU,IAAKA,EACL/S,KAAK,SACLrB,GAAG,eACHC,UJrHmC,WIsHnC,aAAYiN,EAAK,+BACjBgB,QAASA,IAAM2nK,EAAkB,CAAEvvI,SAAS,EAAMslE,eAClDp1F,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAEnCuzC,EAAM7/B,IAAKsgB,IACV/zB,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CAELC,KAAMA,EACN7zB,KAAK,OACLJ,UJ/HmD,YI4H9Ci0B,EAAKl0B,MAQpB,I,4BC9FA,MA+GA,IAAelB,EAAAA,EAAAA,IA/GqB83K,EAClCj9J,WACA+7J,mBACAmB,kBACAC,qBACAn0G,UACAo0G,gBACAzH,sBAEA,MAAM,sBAAE0H,IAA0B7qK,EAAAA,EAAAA,MAC5Be,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQw3C,IAGV,MAAMs0G,GAA8BvqK,EAAAA,EAAAA,GAAgB,KAClDsqK,EAAsB,CAAEvhK,UAAU,OAG9B,uCACJyhK,EAAsC,gCACtCC,IACEC,EAAAA,GAAAA,GAAsC1B,IAGxCzxJ,aAAcozJ,EACdlzJ,qBAAsBmzJ,IACpBjzJ,EAAAA,GAAAA,IAA6BqxJ,OAAkB1yK,OAAWA,GAAW,IAEnE,uBACJu0K,EAAsB,6BAAEC,EAA4B,+BACpDC,EAA8B,mBAAEC,IAC9BC,EAAAA,GAAAA,GAAoBjC,GAClBkC,EAAsBlC,GAAoBgC,GAG9CzzJ,aAAc4zJ,EACd1zJ,qBAAsB2zJ,EACtBt4E,UAAWu4E,IACT1zJ,EAAAA,GAAAA,GACFyyJ,OAAoB9zK,OAAWA,EAAW,IAAI,EAAOgmB,GAAqBkP,EAAAA,KAG5E,OACEn4B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAe,eAAgBuhK,GAA2B,sBAAsB33K,SAAA,CAC7FgN,EAAK8kB,QAAS7xB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,wBAC9BE,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACL2N,MAAM,cACNE,QAASy0D,EACTjwD,UAAU,sBACVzS,WAAWqW,EAAAA,GAAAA,GACTpJ,EAAK8kB,OAAS,MACd4lJ,GAAuB1qK,EAAK8kB,OAAS,gBACrCklJ,EAAuCvtK,SAAWuD,EAAK8kB,OAAS,sBAElEqxB,gBAAiB8zH,EAAgCj3K,UAEjDC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,iBAEZ2pK,IAAqBl3K,EAAAA,GAAAA,GAAA,MAAIF,UAAWq3K,EAAgBp3K,SAAEgN,EAAK,oBAC5D/M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,wBAAuBC,UACpCC,EAAAA,GAAAA,GAAC63K,GAAY,CAACpC,SAAO,EAAChqE,YAAU,MAEjCirE,EAAgBphK,WACftV,EAAAA,GAAAA,GAACsT,GAAAA,EAAY,CACXxT,UAAU,2BACV0T,UAAU,QACV0vC,gBAAiBn2C,EAAK8kB,MAAQmlJ,OAAkCn0K,EAAU9C,UAE1EC,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,oBAAoBlF,QAAS+oK,EAA4B/2K,SACrEgN,EAAK,uCAKdnN,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GACT,oBACAuhK,GAA2B,oBAC3BC,GACA53K,SAAA,CAED23K,IACC13K,EAAAA,GAAAA,GAACg+B,GAAW,CAACytE,YAAU,EAAC3rG,UAAU,qBAAqBu/F,UAAWu4E,KAEpE53K,EAAAA,GAAAA,GAACk+B,GAAAA,EAAQ,CACP45I,WAAW,WACXt+J,SAAUA,EACV+7J,iBAAkBkC,EAClBM,YAAU,EACV5I,gBAAiBA,EACjBuH,gBAAiBA,OAGpBU,IACCp3K,EAAAA,GAAAA,GAACg4K,GAAAA,EAAU,CACTrsK,OAAQ4pK,EACRqB,cAAeA,EACfqB,qBAAsBX,EACtBxrK,oBAAqBurK,SCzB/B,IAAe14K,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAQslC,KAAMmuG,EAAa1oG,WAAY8rI,GAAqB72K,EAAO+gI,YAEnE,MAAO,CACL0S,cACAojC,qBANcvpK,CAtF+Bs1H,EACjDt4H,SACAa,SACAsoI,cACAojC,mBACArsK,UACAC,0BAEA,MAAM,gBAAEqsK,IAAoBnsK,EAAAA,EAAAA,MAEtBe,GAAOC,EAAAA,EAAAA,KAEPorK,GAA2BrwK,EAAAA,EAAAA,IAAQ,IAClC+sI,EAIEjyF,OAAO8K,KAAKmnF,GAAaxyF,OAAO,CAAC3pC,EAAQknE,KAC9C,MAAM,gBAAEsxD,EAAe,cAAEsG,GAAkB3C,EAAYxvH,OAAOu6D,IAK9D,OAJIsxD,EAAgBrhH,SAAStjB,IAAWirI,GAAe3nH,SAAStjB,KAC9DmM,EAAO3F,KAAK6sE,GAGPlnE,GACN,IAVM,GAWR,CAACnM,EAAQsoI,KAELujC,EAAmBC,IAAwBnsK,EAAAA,EAAAA,IAAmBisK,GAE/D/8D,GAAUtzG,EAAAA,EAAAA,IAAQ,IACfmwK,GAAkBv6I,OAAQkiD,GAAaA,IAAaspD,EAAAA,KACxD11H,IAAKosE,IACJ,MAAMR,EAASy1D,EAAcA,EAAYj1D,QAAYh9E,EAMrD,MAAO,CACLqK,MANYmyE,GAAS5vC,EAAAA,GAAAA,IAAuB,CAC5C36B,KAAMuqE,EAAOlyE,MAAM2H,KACnB29E,SAAUpT,EAAOlyE,MAAMslF,SACvBinB,sBAAuBr6B,EAAOs6B,oBAC3B,GAGHhtG,MAAOo2C,OAAO88B,OAEZ,GACP,CAACq4F,EAAkBpjC,IAEhB/uG,GAAepmC,EAAAA,EAAAA,IAAY,KAC/B,MAAM44K,EAAcH,EAAyBz6I,OAAQ99B,IAAQw4K,EAAkBvoJ,SAASjwB,IAAK4T,IAAI6R,QAC3FkzJ,EAAWH,EAAkB16I,OAAQ99B,IAAQu4K,EAAyBtoJ,SAASjwB,IAAK4T,IAAI6R,QAE9F6yJ,EAAgB,CAAE3rK,SAAQ+rK,cAAaC,aACvC3sK,KACC,CAACW,EAAQ2rK,EAAiBC,EAA0BvsK,EAASwsK,IAEhE,GAAKvjC,GAAgBojC,EAIrB,OACEt4K,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASA,EACTC,oBAAqBA,EACrBuB,QAAS04B,EACTjmC,WAAWqW,EAAAA,GAAAA,GC9FgC,WD8FJ,UACvCksB,iBC/FyB,WDgGzBl1B,MAAOJ,EAAK,eAAehN,SAAA,EAE3BC,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GClG6C,WDkGjB,iBAAiBpW,UAC3DC,EAAAA,GAAAA,GAACszH,GAAAA,EAAa,CACZ9lH,QAAS6tG,EACT3tG,SAAU2qK,EACV5qK,SAAU6qK,OAGdt4K,EAAAA,GAAAA,GAAA,OAAKF,UCzG4E,WDyGnDC,UAC5BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACC,MAAM,UAAU/N,UAAU,wBAAwBgO,QAAM,EAACC,QAASg4B,EAAahmC,SACpFgN,EAAK,kBAER/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC9N,UAAU,wBAAwBgO,QAAM,EAACC,QAASlC,EAAQ9L,SAAEgN,EAAK,uBEnGzC,IAUrC0rK,GAAY,SAAZA,GAAY,OAAZA,EAAY,eAAZA,EAAY,kBAAZA,EAAY,mBAAZA,EAAY,eAAZA,EAAY,mBAAZA,EAAY,aAAZA,CAAY,EAAZA,IAAY,IASjB,MA8DA,IAAe95K,EAAAA,EAAAA,IA9DqBqlI,EAClCr4H,SACAa,SACAkjD,UACA7jD,UACAC,0BAEA,MAAO4sK,EAAiBC,IAAsBxsK,EAAAA,EAAAA,IAASssK,GAAaG,UAC9D,qBAAEp2C,EAAoB,sBAAEq2C,IAA0B7sK,EAAAA,EAAAA,MAElDe,GAAOC,EAAAA,EAAAA,KAEP8rK,GAAiB/wK,EAAAA,EAAAA,IAAQ,IAAM,CACnC,CAAEmF,MAAOH,EAAK,gBAAiB,GAAIJ,MAAO8rK,GAAaM,SACvD,CAAE7rK,MAAOH,EAAK,gBAAiB,GAAIJ,MAAO8rK,GAAaO,WACvD,CAAE9rK,MAAOH,EAAK,gBAAiB,GAAIJ,MAAO8rK,GAAaQ,YACvD,CAAE/rK,MAAOH,EAAK,eAAgB,GAAIJ,MAAO8rK,GAAaS,QACtD,CAAEhsK,MAAOH,EAAK,eAAgB,GAAIJ,MAAO8rK,GAAaU,WACtD,CAAEjsK,MAAOH,EAAK,mBAAoBJ,MAAO8rK,GAAaG,UACrD,CAAC7rK,IAEEg5B,GAAepmC,EAAAA,EAAAA,IAAY,KAC/B,IAAI8jI,EAEFA,EADEi1C,IAAoBD,GAAaG,QACtBQ,EAAAA,IAEAlmK,KAAKmI,MAAM6Q,KAAKC,MAAQ,KAAQ7G,OAAOozJ,GAElDhpH,EACFmpH,EAAsB,CAAErsK,SAAQkjD,UAAS+zE,eAEzCjB,EAAqB,CAAEh2H,SAAQi3H,eAEjC53H,KACC,CAACW,EAAQksK,EAAiB7sK,EAAS6jD,IAEtC,OACE9vD,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASA,EACTC,oBAAqBA,EACrBuB,QAAS04B,EACTjmC,UAAU,SACVqN,MAAOJ,EAAK,iBAAiBhN,SAAA,EAE7BC,EAAAA,GAAAA,GAACsN,GAAAA,EAAU,CACTxN,UAAU,wBACVyN,KAAK,UACLC,QAASsrK,EACTprK,SAAUgrK,EACVjrK,SAAUkrK,KAEZ/4K,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACC,MAAM,UAAU/N,UAAU,wBAAwBgO,QAAM,EAACC,QAASg4B,EAAahmC,SACpFgN,EAAK,kBAER/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC9N,UAAU,wBAAwBgO,QAAM,EAACC,QAASlC,EAAQ9L,SAAEgN,EAAK,oB,4BCvBjF,MAiMA,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUg4K,cAAaC,0BACtB,MAAMlqK,GAAqBC,EAAAA,EAAAA,KAAyBhO,IAC9C,OAAEmL,EAAM,SAAE8C,GAAaF,GAAsB,CAAC,EAC9CF,EAAO1C,IAAU6nC,EAAAA,EAAAA,KAAWhzC,EAAQmL,GACpCskD,EAAetkD,GAASukD,EAAAA,EAAAA,KAAmB1vD,EAAQmL,QAAU3J,EAC7DusH,EAAU5iH,IAAU8iH,EAAAA,EAAAA,KAAUjuH,EAAQmL,GACtCyiD,EAAkBziD,GAAS8nB,EAAAA,EAAAA,KAAqBjzB,EAAQmL,QAAU3J,EAElE02K,EAAcrqK,GAChBsqK,EAAAA,EAAAA,IAA4BtqK,EAAM4hD,EAAc/lD,QAAQqkH,GAAUngE,QAClEpsD,EACE42K,EAAajtK,GAAU8C,GAAWoqK,EAAAA,EAAAA,KAAiBr4K,EAAQmL,EAAQ8C,QAAYzM,EAC/E82K,EAAkB5uK,SAAS0uK,GAAYG,gBAAkBH,GAAYI,eACrEpsH,EAAQjhD,GAAU8C,GAAWw2H,EAAAA,EAAAA,KAAYzkI,EAAQmL,EAAQ8C,QAAYzM,EACrEi3K,EAAkB/uK,QACtBmE,GAAQI,IAAYo+C,EAAAA,EAAAA,IAAiBx+C,EAAMu+C,EAAOksH,EAAiB7oH,IAChEyoH,GAAaO,iBAGZnqF,EAAiB0pF,EAAcA,EAAY1pF,eAC7C2pF,EAAsB,CAAEt7F,UAAWs7F,QAAwBz2K,EAEzDk/F,EAAapS,GAAiBD,EAAAA,EAAAA,KAAiBruF,EAAQsuF,QAAkB9sF,EACzEkzC,EAAoBvpC,GAASwpC,EAAAA,EAAAA,KAA4B30C,EAAQmL,QAAU3J,EAEjF,MAAO,CACLk3K,uBAAwBhvK,QAAQyB,KAAWwtK,EAAAA,EAAAA,KAA6B34K,EAAQmL,GAChFstK,kBACA7qH,kBACAgrH,gBAAiBlkI,IAAqBmkI,EAAAA,EAAAA,KAAqB74K,GAC3D0gG,aACAliE,sBAAsB0B,EAAAA,EAAAA,KAA2BlgC,GACjDmqK,4BAA6BnqK,EAAOo1C,SAASmuG,MAAM4mB,4BACnDp8J,uBAlCcT,CA/L+BwrK,EACjDxuK,SACA0tK,cACAC,sBACAv3E,aACA+3E,kBACAC,yBACAE,iBACAhrH,kBACApvB,uBACA2rI,8BACAp8J,qBACAvD,cAEA,MAAM,aACJglF,EAAY,iBACZyY,EAAgB,YAChBh2C,EAAW,iBACX3xB,IACE31B,EAAAA,EAAAA,MAEEsd,GAAejgB,EAAAA,EAAAA,MACf64F,GAAkB74F,EAAAA,EAAAA,MAElB0D,GAAOC,EAAAA,EAAAA,MAEP,SAAE5N,IAAaC,EAAAA,EAAAA,MAEf+6K,GAAiB7jJ,EAAAA,EAAAA,GAAsBwrE,GACvCs4E,EAAsBt4E,GAAcq4E,EAEpCE,EAAUvvK,SAASsvK,GAAqB5uE,YAAc4uE,GAAqB7uE,eAC3EnB,EAAUgwE,GAAqBhwE,SAE9BkwE,EAAiBC,IAAYC,EAAAA,GAAAA,GAAYV,IAE9Cl2H,aAAcmrD,EACdvrD,cAAewrD,GACb1rD,MAGF88C,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAASt3E,EAAcg4E,WA5CzB,IA4C4Dr3F,YAAa0B,KAErGpB,EAAAA,EAAAA,IAAU,KACJoB,IAAW0uK,GAAqBn3F,UAClC2N,EAAa,CACXlB,eAAgB0pF,EAAcA,EAAY1pF,eAAiB,CAAE3R,UAAWs7F,MAG3E,CAAC3tK,EAAQ0tK,EAAaxoF,EAAcyoF,EAAqBe,IAE5D,MAAM97C,GAAe5+H,EAAAA,EAAAA,IAAY,CAACyiF,EAAqB6xC,EAAoBymD,KACpEtrK,IAGLgzE,EAAU,IACLA,EACHu4F,qBAAqB,GAGnBV,GAAkBS,EACpBH,EAAiBK,IACftnH,EAAY,CACVQ,YAAa1kD,EAAoBgzE,UAAS6xC,WAAU2mD,gBAEtD/uK,OAGFynD,EAAY,CACVQ,YAAa1kD,EACbgzE,UACA6xC,WACAu3C,4BAA6BA,GAA+B8O,IAE9DzuK,OAED,CAACuD,EAAoB6qK,EAAgBM,EAAiB1uK,EAAS2/J,EAA6B8O,IAEzFjkE,GAAoB12G,EAAAA,EAAAA,IAAY,KAChC06K,IACF/wE,EAAiB,CAAEoB,aAAc2vE,EAAoBx6K,KACrDgM,MAED,CAACA,EAASwuK,EAAqB/wE,IAE5BuxE,GAAiBl7K,EAAAA,EAAAA,IAAY,KACjC,IAAK06K,EAAqB,OAC1B,MAAM,UAAEr8F,GAAcq8F,EAChBS,EAASzwE,EAAU,WAAa,cAChC9yF,EAAM,GAAGs1D,EAAAA,MAAkBiuG,KAAU98F,KAC3C2hD,EAAAA,GAAAA,IAAoBpoH,GACpBoqB,EAAiB,CACf/gC,QAASmM,EAAK,iBAEf,CAACs9F,EAASt9F,EAAMstK,EAAqB14I,IAclCumB,GAAkEngD,EAAAA,EAAAA,IAAQ,IACvE,EAAGsK,YAAW1G,OAAQw8C,MAC3BnoD,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLqN,QAASvgB,EACTc,KAAK,UACL2N,MAAM,cACN/N,UAAWqoD,EAAa,SAAW,GACnCp6C,QAASsE,EACTE,UAAU,eAAcxS,UAExBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,WAGd,CAACnO,IAwBJ,OACEQ,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJtN,WAAWqW,EAAAA,GAAAA,GAAe,kBAAmBk0F,GAAW,gBACxD1+F,OAAQA,EACRE,QAASA,EACTw8B,OA3BJ,WACE,MAAMsJ,GAAgBx7B,EAAAA,GAAAA,GAAe,gBAAiB84F,GAAuB,mBAE7E,OACErvG,EAAAA,GAAAA,IAAA,OAAKE,UAAW6xC,EAAet7B,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,EACjEC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC0E,OAAK,EAACzE,MAAM,cAAc3N,KAAK,UAAUqS,UAAWxF,EAAK,SAAUgB,QAASlC,EAAQ9L,UAC1FC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAEbvN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SACzBs6K,GAAsBrmJ,EAAAA,GAAAA,GAAWqmJ,EAAoBltK,MAAO,CAAC,QAAS,UAAYJ,EAAK,yBAE1F/M,EAAAA,GAAAA,GAACsT,GAAAA,EAAY,CACXxT,UAAU,2CACVyT,QAAS20C,EACT10C,UAAU,QAAOzT,UAEjBC,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,OAAOlF,QAAS8sK,EAAe96K,SAAEgN,EAAK,sBAI7D,CAOYwlF,GAAexyF,SAAA,CAEtBs6K,GAAqBn3F,UACpBtjF,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAKiU,IAAKqV,EAAcxpB,UAAU,yBAAyBkpD,SAAUgmD,EAAoBjvG,UACvFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wCAAuCC,SAAA,EACpDC,EAAAA,GAAAA,GAAA,UAAQiU,IAAKiuF,EAAiBpiG,UAAU,kBACvCu6K,EAAoBn3F,SAASzvE,IAAK2uE,IACjCpiF,EAAAA,GAAAA,GAACikG,GAAa,CACZ7hB,QAASA,EACTliF,KAAMmqG,EAAU0wE,EAAAA,IAAmBC,EAAAA,IACnC/4E,oBAAqBA,EACrBl0F,QAAS+rK,IAAoBzvE,EAAUk0B,OAAe17H,EACtD6hG,SAAUtiB,EACVnzB,gBAAiBA,EACjBpvB,qBAAsBA,EACtBqiE,gBAAiBA,WAKzBliG,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iBAAgBC,UAC7BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLw6C,OAAK,EACLv6C,MAAOysK,EAAU,SAAW,UAC5BvsK,QAASsoG,EAAkBt2G,SAhFdk7K,MACvB,IAAKZ,EAAqB,OAAOttK,EAAK,WAEtC,MAAM+tK,EAASzwE,EAAU,QAAU,UAEnC,OAAOt9F,EACLutK,EAAU,qBAAqBQ,SAAgB,kBAAkBA,SACjET,EAAoBjnJ,MACpB,MA0ES6nJ,WAKPj7K,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,IAET+qH,QC3PP,IAAgB,KAAO,WAAW,KAAO,YCmFzC,IAAe77K,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACQ,CACLyjJ,uBAAuB12C,EAAAA,EAAAA,KAA4B/sG,KAHrCsN,CApDoCusK,EACtDr2B,oBACAC,wBACAj5I,cAEA,MAAM,eAAEilF,IAAmB9kF,EAAAA,EAAAA,MACrBe,GAAOC,EAAAA,EAAAA,KAEPo4I,GAAkBr9I,EAAAA,EAAAA,IAAQ,IACvB88I,GAAmBpxI,IAAK5T,IAAOqsC,EAAAA,EAAAA,MAAYg3C,SAASgqB,SAASrtG,IACnE,CAACglJ,IAEEs2B,GAAsB9xK,EAAAA,EAAAA,OACpBg3F,QAASoB,IAAiCd,EAAAA,GAAAA,IAAwB,CACxEC,QAASu6E,EAAqBlxK,YAAam7I,IAGvCg2B,GAAsB7kJ,EAAAA,EAAAA,GAAsB6uH,GAC5Ci2B,EAA2Bj2B,GAAmBg2B,EAE9CE,GAAiB/uK,EAAAA,EAAAA,GAAiB61E,IACtC0O,EAAe,CACbnB,eAAgBvN,EAAQuN,mBAI5B,OACE3vF,EAAAA,GAAAA,GAACoN,EAAAA,EAAK,CACJzB,OAAQZ,QAAQq6I,GAChBtlJ,UAAW0d,GAAO6kD,KAClBx2D,QAASA,EACTmoE,gBAAc,EACd7mE,MAAOJ,EAAK,8BAA8BhN,UAE1CC,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAO+9J,KAAM,iBAAkBtnK,IAAKknK,EAAqBK,eAAa,EAAAz7K,SAClGs7K,GAA0B5nK,IAAKgoK,IAE5Bz7K,EAAAA,GAAAA,GAACwkJ,GAAc,CAEb1kJ,UAAW0d,GAAOk+J,QAClB35E,WAAY05E,EACZ1tK,QAASutK,EACTr5E,oBAAqBR,EACrBlhF,QAASukI,GALJ22B,EAAe57K,Y,4BCJlC,MAAM87K,GAAiE,CACrEllI,SAAU,CACRxjC,KAAM,OACN/F,MAAO,eAET0uK,KAAM,CACJ3oK,KAAM,OACN/F,MAAO,YAkwBX,IAAevO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,SAAQ8C,eACjB,MAAMJ,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,GAC1BqvK,GAAeC,EAAAA,EAAAA,KAAuBz6K,EAAQmL,GACpD,IAAK0C,GAAQ2sK,EACX,MAAO,CAAC,EAEV,MAAM/6H,GAAYpyC,EAAAA,EAAAA,IAASQ,EAAKrP,IAC1Bs0C,EAAO2M,GAAY1M,EAAAA,EAAAA,KAAW/yC,EAAQmL,QAAU3J,EAChDk5K,EAAgB5nI,IAAQ6nI,EAAAA,EAAAA,IAAiB7nI,GACzC8nI,EAAe3sK,IAAamwC,EAAAA,GAC5BprB,GAAiBC,EAAAA,EAAAA,KAAqBjzB,EAAQmL,IAC5CA,OAAQ0vK,EAAe5sK,SAAU6sK,IAAoB9sK,EAAAA,EAAAA,KAAyBhO,IAAW,CAAC,EAC5F+6K,EAAgBH,IAAiB9nI,KAAS1gB,EAAAA,EAAAA,IAAcvkB,KAASykB,EAAAA,EAAAA,IAAYzkB,OAAWslB,EAAAA,EAAAA,IAAYtlB,GAEpGkgH,GAAWC,EAAAA,EAAAA,IAAY7iH,QAAsC3J,GAA5BysH,EAAAA,EAAAA,KAAUjuH,EAAQmL,GACnD8nC,EAAewM,GAAYvM,EAAAA,EAAAA,KAAmBlzC,EAAQmL,QAAU3J,EAChEiuD,EAAgBhQ,OAAiDj+C,GAArCkuD,EAAAA,EAAAA,KAAmB1vD,EAAQmL,GACvDugH,EAAWz4E,GAAgBwc,EAC3BurH,GAAUC,EAAAA,EAAAA,KAAcj7K,EAAQmL,GAEhCihD,GAAQq4E,EAAAA,EAAAA,KAAYzkI,EAAQmL,EAAQ8C,GACpCitK,EAAiBrtK,EAAK8+C,UAC1B9+C,EAAKsgH,aAAcgtD,EAAAA,EAAAA,IAAkBttK,EAAM,kBAAmByhD,EAAAA,EAAAA,IAAiBzhD,EAAM,iBAEjFutK,EAAehvH,IAASivH,EAAAA,EAAAA,IAAkBxtK,EAAMu+C,GAChDkvH,GAAYC,EAAAA,EAAAA,KAAgBv7K,EAAQmL,GAEpC+tJ,GAAesiB,EAAAA,EAAAA,KAAuBx7K,EAAQmL,IAAWugH,GAAU+vD,sBAGnEC,GADgBC,EAAAA,EAAAA,IAAiBxwK,EAAQ8C,EAAUjO,EAAO+yB,gBAC5BigB,EAAAA,EAAAA,KAAWhzC,EAAQ0hD,OAAOzzC,SAAazM,EACrEozC,GAAkBC,EAAAA,EAAAA,KAA0B70C,GAC5C47K,GAAWluK,EAAAA,EAAAA,KAAe1N,GAAQ47K,SAExC,MAAO,CACL/tK,OACAkP,SAAS4jH,EAAAA,GAAAA,IAAe9yH,GAAM+yH,EAAAA,EAAAA,KAAqB5gI,IAAS6gI,EAAAA,EAAAA,KAAsB7gI,EAAQ6N,EAAKrP,KAC/FihD,YACAo8H,QAAShuK,GAAM8+C,UAAYiuH,EAC3BjuH,QAAS9+C,GAAM8+C,QACfmvH,kBAAmBjuK,GAAMiuK,kBACzBpB,gBACAqB,eAAeC,EAAAA,EAAAA,IAAiBnuK,GAChCktK,gBACAC,UACArvD,cAAejiH,QAAQ+lD,GAAcm8D,cACrCqwD,YAAaluD,EAAU96E,GAAcqvB,SAAS45G,cAAW16K,EACzD26K,oBAAqBpuD,EAAU96E,GAAcqvB,SAAS85G,sBAAmB56K,EACzE66K,gBAAiBT,EAAStxK,QAAUuwK,IAAkB1vK,GAAU2vK,IAAoB7sK,EACpFitK,iBACAE,eACAE,YACAgB,oBAAoBC,EAAAA,EAAAA,KAAyBv8K,GAC7Ck5J,eACA7jB,UAAWpiG,GAAcoiG,UACzBmnC,MAAO9yK,QAAQqkH,GACf/6F,iBACA0oJ,cACA/W,gBAAiB1xH,GAAc0xH,gBAC/B/vH,oBA5DctnC,CAjsBmCmvK,EACrDtxK,SACA8C,WACA3D,SACAoyK,mBACAhhG,SACAvpD,YACA8pJ,cACAE,sBACAQ,mBACAd,UACAlvH,UACAmvH,oBACAO,kBACAO,cACAC,eACA9B,gBACA+B,YACAC,UACAC,UACAC,oBACAC,sBACAC,gBACAC,sBACAC,WACAC,oBACAC,qBACA1vK,OACA4xC,YACA1iC,UACAg/J,gBACAf,UACArvD,gBACA+uD,gBACAQ,iBACAE,eACAE,YACAgB,qBACApjB,eACA7jB,YACAmnC,QACAxpJ,iBACA0oJ,cACA8B,oBACA7Y,kBACA/vH,kBACA6oI,qBACAC,sBACAC,sBACAC,iBACAC,qBACArzK,WACAC,2BAEA,MAAM,qBACJ02H,GAAoB,uBACpB28C,GAAsB,eACtBC,GAAc,WACdC,GAAU,8BACVC,GAA6B,gBAC7BC,GAAe,eACfC,GAAc,qBACdC,GAAoB,uBACpBC,GAAsB,4BACtBC,GAA2B,iBAC3BC,GAAgB,2BAChBC,GAA0B,oBAC1BC,GAAmB,cACnBC,GAAa,mBACbC,GAAkB,qBAClBC,GAAoB,mBACpBC,GAAkB,SAClBvxI,GAAQ,QACRxY,GAAO,iBACPgqJ,GAAgB,uBAChBC,GAAsB,UACtB97H,GAAS,YACTD,GAAW,uBACXg8H,GAAsB,eACtBC,GAAc,eACdz+D,GAAc,iBACdlgF,KACE31B,EAAAA,EAAAA,MAEEurC,IAAUvqC,EAAAA,EAAAA,KACVD,IAAOyqC,EAAAA,GAAAA,MAEP,SAAEp4C,KAAaC,EAAAA,EAAAA,OACd8oD,GAAYo4H,KAAiBp0K,EAAAA,EAAAA,KAAS,IACtCq0K,GAAiBC,KAAsBt0K,EAAAA,EAAAA,KAAS,IAChD0E,GAAmB6vK,KAAwBv0K,EAAAA,EAAAA,KAAS,IACpDu2H,GAAiBi+C,KAAsBx0K,EAAAA,EAAAA,KAAS,IAChDg3H,GAAuBC,GAAqBC,KAAyBpkI,EAAAA,EAAAA,MACtE,EAAEud,GAAC,EAAEsG,IAAMi6D,GAEjB74D,EAAAA,GAAAA,GAA4BvY,EAAQG,QAAqBjJ,GAAW,GACpE,MAAM+9K,IAAuBpwI,EAAAA,GAAAA,KACzBktI,IAAmB1vH,SAAkBnrD,EAnGL,KAsG9Bg+K,IAAwB94K,EAAAA,EAAAA,IAAQ,KACpC,GAAKi+J,EAGL,OAAOnjH,OAAO0K,OAAOy4G,GAAiB/wD,MAAMlqG,UAC3C,CAACi7J,IAEEpjC,IAAiBr2H,EAAAA,EAAAA,GAAgB,KACrCo0K,IAAmB,GACnB90K,OAGIS,IAAeC,EAAAA,EAAAA,GAAgB,KAC/B0pC,EACFypI,MAEAa,IAAc,GACd1+D,GAAe,CAAEr1G,SAAQmG,WAAY,MAEvC9G,OAGI4qH,IAAelqH,EAAAA,EAAAA,GAAgB,KAC/B0pC,GACFypI,KACA7zK,MAEA60K,IAAqB,GAEvBH,IAAc,KAGVO,IAAYv0K,EAAAA,EAAAA,GAAgB,KAChCg0K,IAAc,GACd10K,OAGIk1K,IAAsBx0K,EAAAA,EAAAA,GAAgB,KAC1CyzK,GAAmB,CAAExzK,SAAQ8C,aAC7BmxK,IAAoB9C,GACpBmD,OAGI/vK,IAAmBxE,EAAAA,EAAAA,GAAgB,KACvCm0K,IAAqB,GACrB70K,OAGIm1K,IAAiBz0K,EAAAA,EAAAA,GAAgB,KACjC0pC,EACFypI,KAEAN,GAAe,CAAE6B,QAAS,aAIxBC,IAAmB30K,EAAAA,EAAAA,GAAgB,KACnC0pC,EACFypI,KAEAL,GAAW,CAAE7yK,aAIX20K,IAAoB50K,EAAAA,EAAAA,GAAgB,KACpC0pC,EACFypI,KAEAl9C,GAAqB,CAAEh2H,SAAQi3H,WAAYC,EAAAA,MAE7Co9C,OAGIM,IAAkB70K,EAAAA,EAAAA,GAAgB,KAClC0pC,GACFypI,KACAoB,OAEA19C,KACAu9C,IAAmB,IAErBJ,IAAc,KAGVc,IAAyB90K,EAAAA,EAAAA,GAAgB,KACzC0pC,EACFypI,MAEAO,GAAqB,CAAEzzK,WACvBi0K,IAAoB9C,IAEtBmD,OAGIQ,IAAkB/0K,EAAAA,EAAAA,GAAgB,KAClC0pC,EACFypI,MAEAS,GAAiB,CAAEztJ,OAAO,IAC1B+tJ,IAAoB9C,IAEtBmD,OAGIS,IAAuBh1K,EAAAA,EAAAA,GAAgB,KACvC0pC,EACFypI,MAEAQ,GAAmB,CAAE1zK,SAAQkjD,QAASpqC,OAAOhW,KAC7CmxK,IAAoB9C,IAEtBmD,OAGIU,IAA0Bj1K,EAAAA,EAAAA,GAAgB,KAC9CoiC,GAAS,CAAE9uC,QAAIgD,IACfw9K,GAAuB,CAAE7zK,SAAQwkE,WAAW,IAC5C8vG,OAGIW,IAA4Bl1K,EAAAA,EAAAA,GAAgB,KAC5C0pC,EACFypI,KACSd,EAETW,GAAgB,CACd/yK,WAGF8yK,GAA8B,CAC5B9yK,WAGJs0K,OAGIY,IAAwBn1K,EAAAA,EAAAA,GAAgB,KAC5CizK,GAAe,CAAE3/K,GAAI2M,IACrBs0K,OAGIa,IAAkBp1K,EAAAA,EAAAA,GAAgB,KAClCs0K,IAAyB3xK,EAC3ByyB,GAAiB,CAAE/gC,QAASmM,GAAK,wBAGnCgzK,GAAc,CAAE6B,UAAWp1K,IACvBypC,EACFypI,KAEAK,GAAc,CAAE6B,UAAWp1K,IAE7Bs0K,QAGIe,IAAwBt1K,EAAAA,EAAAA,GAAgB,KACxC0pC,EACFypI,KAEAD,GAAqB,CAAE5hJ,OAAQrxB,IAEjCs0K,OAGIgB,IAAkBv1K,EAAAA,EAAAA,GAAgB,KAClC0pC,EACFypI,KAEAV,KAEF8B,OAGIiB,IAAkBx1K,EAAAA,EAAAA,GAAgB,KAClC0pC,EACFypI,KAEAC,GAA4B,CAAE9hJ,OAAQrxB,EAAQlF,SAAS,IAEzDw5K,OAGIkB,IAAaz1K,EAAAA,EAAAA,GAAgB,KAC7B0pC,EACFypI,KAEAC,GAA4B,CAAE9hJ,OAAQrxB,IAExCs0K,OAGIniD,IAAepyH,EAAAA,EAAAA,GAAgB,KACnC0yK,KACA6B,OAGImB,IAAwB11K,EAAAA,EAAAA,GAAgB,KAC5CqzK,KACAa,IAAoB9C,GACpBmD,OAGIoB,IAA0B31K,EAAAA,EAAAA,GAAgB,KAC9CszK,GAA2B,CAAErzK,WAC7Bi0K,IAAoB9C,GACpBmD,OAGIqB,IAAmB51K,EAAAA,EAAAA,GAAgB,KACnC0pC,EACFypI,KACSlB,GACTsB,GAAoB,CAAEtzK,WACtBi0K,IAAoB9C,IAEpB2C,GAAe,CAAE9zK,WAEnBs0K,OAGIsB,IAA2B71K,EAAAA,EAAAA,GAAgB,KAC/C6zK,GAAuB,CAAE5zK,SAAQwkE,WAAW,IAC5C8vG,OAGIuB,IAAuB91K,EAAAA,EAAAA,GAAgB,KACvC0pC,EACFypI,KAEAP,KAEF2B,OAGIwB,IAAuB/1K,EAAAA,EAAAA,GAAgB,KAC3C2yK,KACA4B,OAGIyB,IAAch2K,EAAAA,EAAAA,GAAgB,KAC9B0pC,EACFypI,KAEAp7H,GAAU,CAAEzmB,OAAQrxB,IAEtBs0K,OAGI0B,IAAgBj2K,EAAAA,EAAAA,GAAgB,KAChC0pC,EACFypI,KAEAr7H,GAAY,CAAExmB,OAAQrxB,IAExBs0K,OAGI2B,IAA2Bl2K,EAAAA,EAAAA,GAAgB,KAC/CoiC,GAAS,CAAE9uC,GAAIi/K,IACfgC,QAGFv2K,EAAAA,EAAAA,IAAUo4C,GAAAA,GAAkB,IAE5B,MAAM+/H,IAAa36K,EAAAA,EAAAA,IAAQ,KACzB,MAAM46K,EAAiBrF,GAAa7pK,IAAI,EAAGwtK,cACzC,MAAM2B,EAAMjH,GAAYsF,GACxB,GAAK2B,EAOL,OACE5iL,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAEPT,KAAM2vK,EAAI3vK,KAEVlF,QAVgBwW,KAClB66J,GAAe,CAAE6B,QAAS,IAAIA,MAC9BH,MAQuB/gL,SAEpBw3C,GAAQqrI,EAAI11K,QALR+zK,KAUL4B,EAAoBvF,GAAa92F,KAAK,EAAGy6F,aAA0B,YAAZA,GAmB7D,MAAO,IAAI0B,GAAkB,GAjBP9E,IACpB79K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,iBAELlF,QAASA,KACH80K,IAAsBrF,EACxB4B,GAAe,CAAE6B,QAAS,aAE1B9qJ,GAAQ,CAAE5e,IAAKimK,GAAuBjmI,GAAQ,6BAEhDupI,MACA/gL,SAEDw3C,GAAQ,uBAImC5Z,OAAO5yB,UACtD,CAACuyK,EAAa/lI,GAASimI,EAAqBK,IAEzCiF,IAAc/6K,EAAAA,EAAAA,IAAQ,KAC1B,GAAKmH,EAEL,OACSqoC,GADLwlI,EACa,SAGbj8H,EACa,iBAGbs8H,EACa,0BAGb5pJ,EACa,eAGF,qBACd,CAAC4pJ,EAAeluK,EAAMskB,EAAWstB,EAAWi8H,EAAaxlI,KAE5D,OACEv3C,EAAAA,GAAAA,GAACiyG,GAAAA,EAAM,CAAAlyG,UACLH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,sBAAqBC,SAAA,EAClCH,EAAAA,GAAAA,IAACmgB,GAAAA,EAAI,CACHpU,OAAQw8C,GACR30C,UAAU,QACV1N,MAAO,SAAS0W,aAAYsG,QAC5BjX,QAASi1K,GACTN,gBAAiBA,GAAgBzgL,SAAA,CAEhCX,IAAY++K,IACXn+K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,SACLlF,QAAS4wH,GAAa5+H,SAErBw3C,GAAQ,YAGZymI,GAAoBzB,IACnB38K,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,WACLlF,QAASszK,GAAuBthL,SAE/Bw3C,GAAQ,6BAEXv3C,EAAAA,GAAAA,GAAC+iL,GAAAA,EAAa,OAGjBjE,IACC9+K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,UACLlF,QAAS00K,GAAyB1iL,SAEjCgN,GAAK,wBAGT6zK,KACC5gL,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,OACLlF,QAASgzK,GAAoBhhL,SAElBw3C,GAAV2lI,EAAkB,yBAAoC,4BAG1DP,IAAcF,IACbz8K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,OACLlF,QAASuzK,GAAgBvhL,SAExBw3C,GAAQ,UAGZklI,IACCz8K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,OACLlF,QAASwzK,GAAqBxhL,SAE7Bw3C,GAAQ,0BAGZn4C,KAAa4+K,GAAoBhwH,IAAYkvH,IAC5Cl9K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,SACLlF,QAASyzK,GAAwBzhL,SAEhCw3C,GAAQ,8BAGZymI,GAAoBjzK,QAAQ0zK,KAC3B7+K,EAAAA,GAAAA,IAAC8T,GAAAA,EAAQ,CACPT,KAAK,OACLlF,QAASgxK,EAAoBh/K,SAAA,CAEhBw3C,GAAZ/jB,EAAoB,oBAA+B,mBACpDxzB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SAAE0+K,OAGjCT,IAAqBd,IAAYC,IAChCn9K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,UACLlF,QAASu0K,GAAqBviL,SAE7Bw3C,GAAQ,gCAGZwmI,GAAoBE,IACnBj+K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,OACLlF,QAASizK,GAAejhL,SAEvBw3C,GAAQ,cAGZwmI,GAAoBG,IACnBl+K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAMugB,EAAY,UAAY,QAC9BzlB,QAAS+zK,GAAgB/hL,SAExBw3C,GAAQ/jB,EAAY,qBAAuB,sBAG/CqrJ,IAAsBL,IACrBx+K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,gBACLlF,QAASo0K,GAAiBpiL,SAEzBw3C,GAAQ/jB,EAAY,2BAA6B,4BAGrDuoJ,IACC/7K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,WACLlF,QAAS8zK,GAAsB9hL,SAE9Bw3C,GAAQ,gBAGZn4C,IAAYg/K,IACXp+K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,QACLlF,QAASi0K,GAAWjiL,SAEnBw3C,GAAQ,UAGZ6mI,IACCp+K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,iBACLlF,QAASg0K,GAAgBhiL,SAExBw3C,GAAQ,eAGZ8mI,IAAYjgK,GACXpe,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,SACLlF,QAASozK,GAAkBphL,SAE1Bw3C,GAAQ,kBAIT33C,EAAAA,GAAAA,IAAC8T,GAAAA,EAAQ,CACPT,KAAK,OACLlF,QAASqzK,GAAgBrhL,SAAA,CAExBw3C,GAAQ,aAAa,WAK1BonI,GAAqBC,KACrB5+K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,aACLlF,QAAS0zK,GAA0B1hL,SAElCw3C,GAAQqnI,EAAqB,gBAAkB,uBAGnD5xD,IACChtH,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAMugB,EAAY,WAAa,UAC/BzlB,QAAS2zK,GAAsB3hL,SAE9Bw3C,GAAQ/jB,EAAY,iBAAmB,+BAG1CwqJ,IACAh+K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,SACLlF,QAASs0K,GAAqBtiL,SAE7Bw3C,GAAQ,0BAGZinI,IACCx+K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,gBACLlF,QAASo0K,GAAiBpiL,SAEzBw3C,GAAQ,YAGZ+mI,IACCt+K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,QACLlF,QAASk0K,GAAsBliL,SAE9Bw3C,GAAQ,gBAGZ/jB,GAAa+qJ,IACZv+K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,cACLlF,QAASm0K,GAAwBniL,SAEhCw3C,GAAQ,4BAGZgjH,IACCv6J,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,WACLlF,QAASq0K,GAAyBriL,SAEjCw3C,GAAQ,2BAGZ6kI,IACCp8K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,OACLlF,QAASzB,GAAavM,SAErBw3C,GAAQ,uBAGZmrI,GACArG,IACCr8K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,OACLlF,QAAS4zK,GAAgB5hL,SAExBw3C,GAAQ,sBAGZsmI,IACC79K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAMyjI,EAAY,OAAS,YAC3B3oI,QAAS2oI,EAAYwqC,GAAmBqB,GAAYxiL,SAEvCw3C,GAAZm/F,EAAoB,aAAwB,cAGhD51F,IAAczsB,IAAmBwpJ,IAChC79K,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAMyjI,EAAY,OAAS,YAC3B3oI,QAAS2oI,EAAY8rC,GAAgBD,GAAYxiL,SAEpCw3C,GAAZm/F,EAAoB,UAAqB,eAG7CgoC,IACC9+K,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAC+iL,GAAAA,EAAa,KACd/iL,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPL,aAAW,EACXJ,KAAK,SACLlF,QAAS0oH,GAAa12H,SAErB+iL,WAKR5zK,IACClP,EAAAA,GAAAA,GAACgjL,GAAAA,EAAe,CACdr3K,OAAQkF,GACRhF,QAASkF,GACT7B,KAAM6tK,GAAe7tK,EACrB+zK,cAAel4K,QAAQgyK,KAG1BsB,GAAWl7C,IAAyBj0H,GAAMrP,KACzCG,EAAAA,GAAAA,GAACgkI,GAAAA,EAAa,CACZr4H,OAAQ+2H,GACR72H,QAAS+2H,GACT92H,oBAAqBu3H,GACrB72H,OAAQ0C,EAAKrP,a,oDCl0BzB,UAAgB,KAAO,WAAW,OAAS,WAAW,KAAO,WAAW,OAAS,WAAW,KAAO,WAAW,SAAW,WAAW,YAAc,WAAW,YAAc,WAAW,aAAe,WAAW,aAAe,WAAW,UAAY,WAAW,WAAa,WAAW,MAAQ,WAAW,QAAU,WAAW,SAAW,YCyK5U,IAAelB,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUT,cACF,CACL0B,SAASC,EAAAA,EAAAA,KAAyBlB,EAAQT,KAH5B+N,CA5HOu0K,EACzB1pK,WACA5Y,UACAuiL,aACAC,cACAC,iBACAj/I,QACAtkC,YACAiO,UACAzL,cAEA,MAAMyK,GAAOyqC,EAAAA,GAAAA,KACP8rI,EAAqB1iL,EAAQw/B,aAAamjJ,eAE1CxvJ,EAAOsvJ,EAAiBD,EAAcD,EAEtCp4D,EAAas4D,GAAkBF,GAAaK,EAAAA,GAAAA,IAAqBz2K,EAAMnM,EAAQ4L,OAAQ22K,QAActgL,EAErGqG,GAAe87H,EAAAA,GAAAA,GAAapkI,GAC5BqkI,GAAkBC,EAAAA,EAAAA,IAAkBtkI,QAA0BiC,EAAfqG,EAC/Co6F,GAAY6hC,EAAAA,GAAAA,GAAoBvkI,EAAS,aACzCwkI,GAAe/8H,EAAAA,EAAAA,GAASi7F,GACxBkhC,EAAez5H,SAAQs6H,EAAAA,EAAAA,IAAqBzkI,IAC5C6iL,EAAW14K,SAAQ65H,EAAAA,EAAAA,IAAgBhkI,IACnC8jI,GAAYC,EAAAA,EAAAA,IAAoB/jI,GAChC8iL,EAAkB34K,QAAQq6H,GAAgBH,GAE1C0+C,EAAuC,SAAzBrhL,GAASE,YAAyB,CACpDohL,SAAUthL,EAAQshL,UAAYthL,EAAQuhL,WACtC12K,MAAO7K,EAAQ6K,MACfoK,IAAKjV,EAAQiV,IACbusK,OAAQljL,EAAQmS,QAAQzQ,SAASwhL,aAC/BjhL,EAEE0hB,GAAchY,EAAAA,EAAAA,GAAgB,KAClCwB,EAAQnN,KAGJmjL,GAAqBx3K,EAAAA,EAAAA,GAAiBM,IAE1C,GADAA,EAAEuJ,mBACGutK,GAAapsK,IAAK,OAEvB,MAAM,QAAE4e,IAAYnqB,EAAAA,EAAAA,MACpBmqB,EAAQ,CAAE5e,IAAKosK,EAAYpsK,IAAKysK,gBAAiBL,EAAYG,WAGzDG,GAAmB13K,EAAAA,EAAAA,GAAiBM,IACxC,GAAI82K,GAAapsK,IAAK,CACpB1K,EAAEuJ,kBACF,MAAM,QAAE+f,IAAYnqB,EAAAA,EAAAA,MACpBmqB,EAAQ,CAAE5e,IAAKosK,EAAYpsK,IAAKysK,gBAAiBL,EAAYG,QAC/D,IAGF,OACElkL,EAAAA,GAAAA,IAAA,OACE8pC,KAAK,SACLD,SAAU,EACV3pC,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAO6kD,KAAM7oD,GAAYgE,GAAOyjC,OAAQnhD,GAClEiO,QAASwW,EAAYxkB,SAAA,EAErBC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACLh0B,UAAW0d,GAAO5b,OAClBmyB,KAAMA,EACNjf,KAAMwuK,EACNpjL,KAAK,YAEPN,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOqZ,KAAK92B,SAAA,EAC1BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAO0mK,OAAOnkL,SAAA,CAC1Bg0B,IAAQ/zB,EAAAA,GAAAA,GAAC+uD,GAAAA,EAAa,CAACh7B,KAAMA,EAAMo/E,iBAAe,KAAQmwE,GAC5DtjL,EAAAA,GAAAA,GAACmkL,GAAAA,EAAe,CAACrkL,UAAW0d,GAAO4mK,KAAMxjL,QAASA,QAEpDhB,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOoV,SAAUvc,IAAI,OAAMtW,SAAA,CACxCgrH,IACCnrH,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,cAAaC,UAAEi0B,EAAAA,GAAAA,GAAW+2F,MAC1C/qH,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAC,UAG5BC,EAAAA,GAAAA,GAACqkL,GAAAA,EAAc,CAACzjL,QAASA,EAASw+H,UAAWh7F,EAAOkgJ,eAjFtC,SAmFfX,IACC/jL,EAAAA,GAAAA,IAAA,OACEE,UAAW0d,GAAOmmK,YAClB51K,QAASg2K,EACTr6I,KAAK,SACLD,SAAU,EACVt8B,MAAOw2K,EAAYpsK,IAAIxX,SAAA,EAEvBC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAO+mK,YAAYxkL,UAAEi0B,EAAAA,GAAAA,GAAW2vJ,EAAYC,YAC3DD,EAAYx2K,QACXnN,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOgnK,aAAazkL,UAAEi0B,EAAAA,GAAAA,GAAW2vJ,EAAYx2K,eAKpEu2K,IACC9jL,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GACTqH,GAAOinK,aACPd,GAAenmK,GAAOknK,WAExB32K,QAASk2K,EACTv6I,KAAMi6I,EAAc,cAAW9gL,EAC/B4mC,SAAUk6I,EAAc,OAAI9gL,EAC5BsK,MAAOw2K,GAAapsK,IAAIxX,SAAA,EAExBC,EAAAA,GAAAA,GAAA,OACE8D,IAAKshI,GAAgBH,EACrB18G,IAAI,GACJzoB,WAAWqW,EAAAA,GAAAA,GACTqH,GAAOmnK,WACPngD,GAAgBhnH,GAAOlL,MACvBoyH,GAAalnH,GAAOonK,SAEtBjhL,WAAW,IAEZ8/K,IAAYzjL,EAAAA,GAAAA,GAAA,KAAGF,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAOqnK,SAAU,6B,gBClKrE,UAAgB,KAAO,WAAW,OAAS,WAAW,OAAS,WAAW,OAAS,WAAW,MAAQ,WAAW,OAAS,WAAW,QAAU,WAAW,aAAe,WAAW,mBAAqB,WAAW,SAAW,WAAW,eAAiB,WAAW,QAAU,WAAW,YAAc,WAAW,UAAY,WAAW,UAAY,WAAW,cAAgB,WAAW,oBAAsB,WAAW,aAAe,WAAW,mBAAqB,WAAW,gBAAkB,WAAW,eAAiB,WAAW,KAAO,WAAW,WAAa,WAAW,eAAiB,WAAW,KAAO,WAAW,YAAc,WAAW,WAAa,WAAW,aAAe,WAAW,OAAS,WAAW,mBAAmB,WAAW,gBAAkB,WAAW,QAAU,WAAW,iBAAmB,WAAW,iBAAmB,WAAW,mBAAqB,WAAW,OAAS,YCwFv3BC,GAA4B,CAChC7a,cAAc,EACdC,WAAY,iBACZ6a,SAAU,qBAINC,GAAyB,qBAEzBC,IAAwB54J,EAAAA,GAAAA,IAAU+0C,GAAOA,IAAM,KAAK,GAgzB1D,IAAeziE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM+N,GAAqBC,EAAAA,EAAAA,KAAyBhO,GACpD,IAAK+N,EACH,MAAO,CAAC,EAEV,MAAM,OAAE5C,EAAM,SAAE8C,GAAaF,EAEvBF,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,GAChC,IAAK0C,EACH,MAAO,CAAC,EAGV,MAAM,eACJg2K,EAAc,SAAEC,EAAQ,QAAEppD,EAAO,cAAEqpD,EAAa,UAAEC,EAAS,KAAEnkL,IAC3DokL,EAAAA,EAAAA,KAA0BjkL,IAAW,CAAC,GACpC,WAAE0+G,EAAU,SAAExqF,EAAU6O,MAAOmhJ,GAAoBxpD,GAAW,CAAC,EAE/D3nG,EAAgB/yB,EAAO+yB,cACvB66B,GAAkB36B,EAAAA,EAAAA,KAAqBjzB,EAAQmL,GAC/Cy2K,GAAgBjG,EAAAA,EAAAA,IAAiBxwK,EAAQ8C,EAAU8kB,GAEnDoxJ,EAAYv2H,IAAoBg0H,EAAgB5hL,EAAOokL,mBAAmB7gC,WAAQ/hJ,EAIxF,MAAO,CACLqM,OACAw2K,eAJoBt3H,EAAAA,EAAAA,KAAuB/sD,EAAQmL,GAKnD04K,iBACAnlE,aACAzwG,WACAimB,WACAowJ,sBAAuB56K,SAAQgE,EAAAA,EAAAA,KAAe1N,GAAQ06D,2BACtDypH,YACAL,WACAtlJ,sBAAsB0B,EAAAA,EAAAA,KAA2BlgC,GACjD4tD,kBACAm2H,gBACAQ,eAAgBP,EAChBjxJ,gBACAyxJ,WAAY3kL,EACZqkL,oBA1Cc52K,CA9yB4Bm3K,EAC9CtsK,WACAtK,OACAw2K,gBACAp2K,WACA41K,iBACAM,YACAL,WACAplE,aACAwlE,kBACAhwJ,WACAowJ,wBACA9lJ,uBACAovB,kBACAm2H,gBACAQ,iBACAC,aAAa,OACbzxJ,oBAEA,MAAM,mBACJ2xJ,EAAkB,kBAClBC,EAAiB,oBACjBC,EAAmB,aACnB1zJ,EAAY,kBACZ2zJ,EAAiB,oBACjBC,EAAmB,iBACnBvkJ,EAAgB,sBAChBwkJ,IACEp6K,EAAAA,EAAAA,MAEEiI,GAAM5K,EAAAA,EAAAA,MACNyzD,GAAWzzD,EAAAA,EAAAA,MACXigB,GAAejgB,EAAAA,EAAAA,MACfg9K,GAAwBh9K,EAAAA,EAAAA,KAAO,IAE/B,SAAEjK,IAAaC,EAAAA,EAAAA,MACfk4C,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,MAENpT,EAAO0iB,IAAY36C,EAAAA,EAAAA,IAAS+4K,GAAkB,KAC9CoB,EAAcC,IAAmBp6K,EAAAA,EAAAA,IAAS,GAC3Cq6K,EAAgBjxJ,GAAY+wJ,EAAe,EAC3CG,EAAgBlxJ,GAAY+wJ,EAAe/wJ,EAAS5zB,OAAS,GAE5D+kL,EAAeC,IAAoBx6K,EAAAA,EAAAA,KAAUqN,GAC9CotK,IAAiBv9K,EAAAA,EAAAA,MACjBw9K,IAA0Bx9K,EAAAA,EAAAA,KAAO,IAEhCy9K,GAAWC,GAAaC,KAAe/nL,EAAAA,EAAAA,MACvCgoL,GAAcC,KAAmB/6K,EAAAA,EAAAA,KAAS,IAC1CwoB,GAAWm3F,KAAgB3/G,EAAAA,EAAAA,KAAS,IAEpCg7K,GAAaC,KAAkBC,EAAAA,GAAAA,GAA0B,CAC9D5hK,IAAK,sBACL6hK,UAAW,MAENC,GAAgBC,KAAqBr7K,EAAAA,EAAAA,KAAS,IAC9Cs7K,GAAgBC,KAAqBv7K,EAAAA,EAAAA,IAAS,IAC/Cw7K,IAAoBt+K,EAAAA,EAAAA,OCxJrB,SACLu+K,EAAiC5rG,GAEjC,MAAM6rG,GAAqBt7K,EAAAA,EAAAA,GAAiBuiB,IACnB84J,EAAK3yE,MAAOhhG,GAC1BA,EAAIzK,UAAYyK,EAAIzK,QAAQowB,SAAS9K,EAAMhiB,UAGhCkvE,EAASltD,MAG/BvkB,EAAAA,EAAAA,IAAU,KACRxI,SAASgU,iBAAiB,QAAS8xK,GAC5B,KACL9lL,SAASiU,oBAAoB,QAAS6xK,KAEvC,CAACA,GACN,CD+IEC,CAAgB,CAAC7zK,IANU1H,EAAAA,EAAAA,GAAiBuiB,IACtC+3J,GAAwBr9K,SAEvBslB,EAAMhiB,OAAuB8f,QAAQ,WAC1Co6J,QAIF,MAAMe,GAAsBh9K,SAAUq5B,GAAS+gJ,IAAa5vJ,GAAaqwJ,GACnEoC,GAAapC,IAAmBxhJ,EAChC6jJ,GAAkBl9K,SAASq5B,GAAS+gJ,IAAa5vJ,IAAaA,EAAS5zB,SAAWgzB,KAAcqzJ,IAGhGE,GAAqB1uK,IAAaytK,KAAiB7nL,KAAc0nL,IADrB,YAAfjB,GAA2C,aAAfA,IAE1D96K,QACDg9K,IAJ0BE,IAAmBD,IAIGxC,GAG9C2C,GAAep9K,QAASq5B,IAAU4jJ,IAAe7C,GACjDiD,GAAsC,SAAfvC,GAAyB96K,QAAQwqB,GAAU5zB,QAElEq5B,IAAczuB,EAAAA,EAAAA,GAAgB,KAClC25K,MAGImC,IAAa97K,EAAAA,EAAAA,GAAgB,MACjCukC,EAAAA,EAAAA,IAAe,MACbooF,EAAAA,GAAAA,GAAcp8D,EAAStzD,aAIrB8+K,IAAY/7K,EAAAA,EAAAA,GAAgB,KAChCuwD,EAAStzD,SAAS++K,UAIpBh+K,EAAAA,EAAAA,IAAU,KACR,MAAM,eAAEi+K,GAAmB59K,OAC3B,IAAK49K,EACH,OAGF,MAAMC,EAAS1mL,SAASi4B,eAAe,QACjCnkB,EAAeA,KACnB,MAAM,cAAEisH,GAAkB//H,SAC1B,GAAI+/H,GAAkBA,IAAkBhlE,EAAStzD,QAAU,CACzD,MAAM,QAAEk/K,EAAO,OAAE5+K,GAAW0+K,GAE5BpwK,EAAAA,EAAAA,IAAgB,KACdqwK,EAAO3iL,MAAM6lB,UAAY,cAAc+8J,OACvCD,EAAO3iL,MAAMgE,OAAS,GAAGA,MACzB/H,SAASwoD,gBAAgBhwB,UAAYmuJ,GAEzC,MACEtwK,EAAAA,EAAAA,IAAgB,KACdqwK,EAAO3iL,MAAM6lB,UAAY,GACzB88J,EAAO3iL,MAAMgE,OAAS,MAO5B,OAFA0+K,EAAezyK,iBAAiB,SAAUF,GAEnC,KACL2yK,EAAexyK,oBAAoB,SAAUH,KAE9C,KAGHtL,EAAAA,EAAAA,IAAU,KACRg8K,GAAiB,IAChB,CAAChB,KAGJ1pK,EAAAA,EAAAA,IAAgB,KACTjF,EAAAA,IAELo1B,MAAMtwB,KAAK3Z,SAAS2D,iBAAmC,UAAU+R,QAAS0xB,IACxEA,EAAMhpB,SAAWpV,QAAQyO,GAAY2vB,IAAU2zB,EAAStzD,YAEzD,CAACgQ,KAGJjP,EAAAA,EAAAA,IAAU,KACHiP,GAOHmtK,GAAiB,GACjBr8K,aAAas8K,GAAep9K,WAP5BszD,EAAStzD,QAAS++K,OAClBrB,IAAgB,GAChBX,EAAgB,GAChBz/H,EAAS,IACT8/H,GAAep9K,QAAUoB,OAAOC,WAAW,IAAM87K,GAAiB,GA1JnD,OA+JhB,CAACntK,KAEJjP,EAAAA,EAAAA,IAAU,KACH26K,GAAmBh2K,GAAMrP,KAC9BinD,EAASo+H,GACTa,EAAmB,CAAEv5K,OAAQ0C,EAAKrP,GAAIyP,WAAUk5D,OAAQ,CAAE08G,oBAAgBriL,KAC1EipH,IAAa,IAEb68D,EAAAA,EAAAA,IAAoB,KAClB,MAAMx/I,EAAQ2zB,EAAStzD,QAClB2/B,KACLuZ,EAAAA,GAAAA,GAAqBvZ,GAAO,GAAM,GAClC49I,UAED,CAAC73K,GAAMrP,GAAIqlL,EAAgB51K,KAE9Bs2B,EAAAA,GAAAA,GAAsB,EAAEC,MAClBrsB,IAAaqsB,IAAiBzB,GAASmhJ,GACzCz+H,EAASy+H,IAEV,CAAC/rK,EAAU+rK,EAAiBnhJ,KAE/BwB,EAAAA,GAAAA,GAAsB,EAAEgjJ,MACjBpvK,GAAYovK,IAAuBjD,IACpCA,GACF2C,KACAtB,MAEAqB,OAED,CAAC1C,EAAuBnsK,IAE3B,MAAMo/H,IAAcrsI,EAAAA,EAAAA,GAAgB,KAC7B63B,GAAOziC,QAAWwjL,GAKvBr+H,EAAS,IACTglE,IAAa,GACbk6D,IACAqC,MAPErtJ,QAUJzwB,EAAAA,EAAAA,IAAU,IAAOiP,GAAWgiB,EAAAA,EAAAA,GAAsBo9G,SAAe/1I,EAAY,CAAC2W,EAAUwhB,KAExF,MAAM6tJ,IAAiB9gL,EAAAA,EAAAA,IAAQ,KAC7B,GAAKy9K,EACL,OAAO3iI,OAAO0K,OAAOi4H,IACpB,CAACA,IAEEsD,GAAe/9K,QAAQ89K,IAAgBlnL,QACvConL,GAAuBD,KAAiBjpJ,GAE9Ct1B,EAAAA,EAAAA,IAAU,KACJ0kD,GAAmBz1C,GAAU4sK,KAChC,CAACn3H,EAAiBz1C,IAErB,MAAMmlH,IAAepyH,EAAAA,EAAAA,GAAgB,KACnC,MAAMC,EAAS0C,GAAMrP,GAChB2M,GAILy4K,GAAsB,KAChBoB,EAAsB78K,SAC1By8K,EAAoB,CAAEz5K,SAAQ8C,WAAU80B,cAItC4kJ,IAAoBz8K,EAAAA,EAAAA,GAAiB08K,IAGzC,GAFA5C,EAAsB78K,SAAU,EAE5By/K,EAASjgD,WAAW,OAAS48C,EAI/B,OAHAG,EAAmB,CAAEv5K,OAAQ0C,EAAMrP,GAAIyP,WAAUk5D,OAAQ,CAAE68G,WAAW,KACtEv+H,EAASmiI,EAASl7I,MAAM,SACxB4wF,KAIF73E,EAASmiI,GAEJA,IACHn9D,IAAa,GAERq5D,IACHa,IACAK,EAAsB78K,SAAU,OAKtCe,EAAAA,EAAAA,IAAU,MACJ65B,GAAS+gJ,IACXxmD,MAED,CAACv6F,EAAO+gJ,KAEX56K,EAAAA,EAAAA,IAAU,KACRuhH,GAAa/gH,QAAQq6K,KACpB,CAACA,KAEJ76K,EAAAA,EAAAA,IAAU,KACJg9K,IAAkBI,GAAkBn+K,SACtCm+K,GAAkBn+K,QAAQi0D,SAE3B,CAAC8pH,MAEJh9K,EAAAA,EAAAA,IAAU,KACHgrB,GAAU5zB,QACC4zB,EAAS5zB,OAAS2kL,EA9QA,GAgRhC3nD,MAED,CAAC2nD,EAAc/wJ,GAAU5zB,UAE5B4I,EAAAA,EAAAA,IAAU,KACR,GAAKiP,EA4BL,OA1BAqtK,GAAwBr9K,SAAU,EAoBlCoB,OAAOmL,iBAAiB,WAAY0nD,GACpC7yD,OAAOmL,iBAAiB,UAAW0nD,GAEnC7yD,OAAOmL,iBAAiB,aAAcmzK,GACtCt+K,OAAOmL,iBAAiB,YAAamzK,GAE9B,KACLA,IACAt+K,OAAOoL,oBAAoB,aAAckzK,GACzCt+K,OAAOoL,oBAAoB,YAAakzK,IA3B1C,SAASzrH,IACPX,EAAStzD,SAASi0D,QAClBspH,MAEAoC,EAAAA,GAAAA,IAAQ,KACNtC,GAAwBr9K,SAAU,GAEtC,CAEA,SAAS0/K,IACPt+K,OAAOoL,oBAAoB,WAAYynD,GACvC7yD,OAAOoL,oBAAoB,UAAWynD,IAEtC0rH,EAAAA,GAAAA,IAAQ,KACNtC,GAAwBr9K,SAAU,GAEtC,GAaC,CAACgQ,KAEJuR,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQgQ,KAGV,MAAOixB,GAAaC,GAASM,GAAiB,IAAKL,EAAAA,GAAAA,GAAkBwyE,GAAcppG,GAE7E6zJ,IAAkBrhL,EAAAA,EAAAA,IAAQ,KAC9B,IAAMq8B,IAAU+gJ,IAAcl5H,IAAatqD,OACzC,OAAO4iC,GAAAA,EAET,MAAMljC,GAAS6qC,EAAAA,EAAAA,MAEf,OAAO+f,GAAYx4C,IAAK41K,IACtB,MAAO78K,EAAQ3M,IAAMihI,EAAAA,GAAAA,GAAqBuoD,GACpCzoL,GAAUm0B,EAAAA,EAAAA,KAAkB1zB,EAAQmL,EAAQ3M,GAClD,IAAKe,EACH,OAGF,MAAM0oL,EAAkBr6H,IAAmBogE,EAAAA,EAAAA,IAAY7iH,IAAWA,IAAW+8K,EAAAA,KACzEC,EAAAA,EAAAA,KAAsBnoL,EAAQT,QAAWiC,EACvCqvB,GAAgBC,EAAAA,EAAAA,KAAa9wB,EAAQT,GAK3C,MAAO,CACLyoL,kBACAzoL,UACAwiL,aAPkB/uI,EAAAA,EAAAA,KAAWhzC,EAAQT,EAAQ4L,QAQ7C22K,WANiBmG,GAAkBp3J,KAQpCyL,OAAO5yB,UACT,CAACq5B,EAAO+gJ,EAAUl5H,GAAagD,IAE5Bw6H,IAAqBl9K,EAAAA,EAAAA,GAAiB3L,IAC1C,MAAMyoL,GAAkBK,EAAAA,GAAAA,GAAmB9oL,GACrC4D,EAAQ+wB,GAAU6G,QAAQitJ,IAAoB,EAEpD9C,EADkB/hL,EAAQgoD,IAGP,SAAfq5H,GACFqB,IAAgB,GAGlB30J,EAAa,CACX/lB,OAAQ5L,EAAQ4L,OAChBiM,UAAW7X,EAAQf,GACnByP,SAAWs2K,OAA4B/iL,EAAXyM,IAG9B03K,OAGI2C,IAAyBp9K,EAAAA,EAAAA,GAAgB,KAC7C26K,GAAiBllH,IAAUA,GAC3B+kH,OAGIvhK,IAAgBuoC,EAAAA,GAAAA,GAA0BzkC,EAAcy+J,GAAsBvjL,IAClF,MAAMolL,EAAcR,MAA6B,IAAX5kL,EAAe,EAAIA,GACrDolL,IACFH,GAAmBG,EAAYhpL,SAC/B2lL,EAAgB/hL,EAAQgoD,MAEzB,IAAIw4H,MAA0B,GAE3B6E,IAAqBt9K,EAAAA,EAAAA,GAAiBi8D,IAC1Cu9G,EAAmB,CAAEv5K,OAAQ0C,EAAMrP,GAAIyP,WAAUk5D,WAEjDm2D,OAGImrD,IAAoBv9K,EAAAA,EAAAA,GAAiBw9K,IACrChB,GACFnnJ,EAAiB,CACfQ,eAAgB,gBAKpBikJ,EAAsB78K,SAAU,EAChCqgL,GAAmB,CAAE1E,SAAU4E,OAG3BC,IAAuBz9K,EAAAA,EAAAA,GAAgB,KAC3Cs9K,GAAmB,CAAE1E,cAAUtiL,MAG3BonL,IAAkB19K,EAAAA,EAAAA,GAAgB,KAClCq5K,EACFiE,GAAmB,CAAExE,WAAW,IAI9BF,GACF6E,OAIEE,IAAyB39K,EAAAA,EAAAA,GAAiBrL,IAC9C2oL,GAAmB,CAAE3oL,SACrBgmL,IAAgB,KAGZiD,IAAmB59K,EAAAA,EAAAA,GAAgB,KACvC,GAAmB,SAAfs5K,IACJmB,KACAsB,KACI/yJ,GAAU,CACZ,MAAM60J,EAAgB9D,EAAe,GAC9B95K,EAAQiM,IAAaqoH,EAAAA,GAAAA,GAAqBvrG,EAAS60J,IAC1D73J,EAAa,CAAE/lB,SAAQiM,YAAWnJ,aAClCi3K,EAAgB6D,EAClB,IAGIC,IAAmB99K,EAAAA,EAAAA,GAAgB,KACvC,GAAmB,SAAfs5K,IACJmB,KACAsB,KACI/yJ,GAAU,CACZ,MAAM60J,EAAgB9D,EAAe,GAC9B95K,EAAQiM,IAAaqoH,EAAAA,GAAAA,GAAqBvrG,EAAS60J,IAC1D73J,EAAa,CAAE/lB,SAAQiM,YAAWnJ,aAClCi3K,EAAgB6D,EAClB,IAGF,SAASE,GAAcppL,EAAwBqpL,GAC7C,MAAMjmF,GAAcimF,GAAY1E,IAAe3kL,EAC/C,OAAQA,GACN,IAAK,OACH,OACElB,EAAAA,GAAAA,GAACizG,GAAAA,EAAQ,CACPnzG,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAOqoK,WAAYvhF,GAAc9mF,GAAOgtK,cAClE5+K,OAAQsD,GAAMrP,GACdsN,MAAOoqC,EAAQ,kBACfmtD,SAAS,OACT32F,QAASw8K,EAAWN,GAAkBC,KAG5C,IAAK,UACH,OACElqL,EAAAA,GAAAA,GAACizG,GAAAA,EAAQ,CACPnzG,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAOqoK,WAAYvhF,GAAc9mF,GAAOgtK,cAClE5+K,OAAQwoB,EACR0Q,eAAa,EACb33B,MAAOoqC,EAAQ,oBACfmtD,SAAS,UACT32F,QAASw8K,EAAWN,GAAkBC,KAG5C,IAAK,WACH,OACElqL,EAAAA,GAAAA,GAACizG,GAAAA,EAAQ,CACPnzG,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAOqoK,WAAYvhF,GAAc9mF,GAAOgtK,cAClEhuE,WAAYsoE,GACZ33K,MAAOoqC,EAAQ,qBACfmtD,SAAS,WACT32F,QAASw8K,EAAWN,GAAkBC,KAKhD,CAEA,MAAMO,IAAkB1iL,EAAAA,EAAAA,IAAQ,IAAM,CACpC,cACA,YACC,IAEG2iL,IAAa3iL,EAAAA,EAAAA,IAAQ,IAAM,IAC5B0iL,MACAtD,IACF,CAACsD,GAAiBtD,KAEfwD,IAAoBp+K,EAAAA,EAAAA,GAAiBgqD,IAEvCyyH,GADE5kJ,IAAUmyB,EACM,GAEAA,GAEpB8xH,OAGIuC,IAAuBr+K,EAAAA,EAAAA,GAAgB,KAC3Ci7K,IAAkB,KAGdqD,IAAmBt+K,EAAAA,EAAAA,GAAgB,KACvC,MAAMu+K,EAAerD,GAAel6G,OAChCu9G,IAAiBJ,GAAW56J,SAASg7J,IACvC1D,GAAe,IAAID,GAAa2D,IAElCpD,GAAkB,IAClBF,IAAkB,KAGduD,IAAwBx+K,EAAAA,EAAAA,GAAgB,KAC5Cm7K,GAAkB,IAClBF,IAAkB,KAGdwD,IAAqBz+K,EAAAA,EAAAA,GAAiBgqD,IAC1C6wH,GAAeD,GAAYxpJ,OAAQg+B,GAAcA,IAAMpF,IACnDnyB,IAAUmyB,GACZzP,EAAS,MAIPmkI,IAAyB1+K,EAAAA,EAAAA,GAAiBM,IAChC,UAAVA,EAAE4Y,KACJ5Y,EAAE6Y,iBACFmlK,MACmB,WAAVh+K,EAAE4Y,MACX5Y,EAAE6Y,iBACFqlK,QAIJ,SAASG,KACP,OACEtrL,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAO2tK,UAAWjD,IAAsB1qK,GAAO4tK,gBAAgBrrL,SAAA,EAC1FX,IAAYY,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAO6tK,aAEnCzF,IACAhmL,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GACTqH,GAAO8tK,eACNlsL,GAAYoe,GAAO+tK,KACpB,gBACAxrL,SAAA,CAED2qL,GAAWj3K,IAAK8iD,IACf,MAAMi1H,EAAWpnJ,IAAUmyB,EACrB8wC,EAAW8/E,GAAYr3J,SAASymC,GACtC,OACE32D,EAAAA,GAAAA,IAAA,OAAkBE,UAAW0d,GAAOiuK,oBAAoB1rL,SAAA,EACtDC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,GACTu1K,GAAAA,EAAerpH,KACf7kD,GAAOmuK,aACPH,GAAYE,GAAAA,EAAeE,QAE7B1rL,KAAK,OACL6N,QAASA,IAAM48K,GAAkBp0H,GAAQx2D,SAExCw2D,IAEF8wC,IACCrnG,EAAAA,GAAAA,GAAA,UACEF,UAAW0d,GAAOquK,mBAClB99K,QAAUlB,IACRA,EAAEuJ,kBACF40K,GAAmBz0H,IAErB,aAAW,SAAQx2D,UAEnBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,cArBPgpD,KA2BbgxH,IACCvnL,EAAAA,GAAAA,GAAA,SACEiU,IAAK0zK,GACLzmL,KAAK,OACLpB,UAAW0d,GAAOsuK,eAClBn/K,MAAO86K,GACPn4H,YAAY,uBACZ7hD,SAAWZ,GAAM66K,GAAkB76K,EAAEC,OAAOH,OAC5C0iD,UAAW47H,GACXhrI,OAAQA,KACNp1C,WAAWkgL,GAAuB,SAItC/qL,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,GAAeu1K,GAAAA,EAAerpH,KAAM7kD,GAAOuuK,iBACtD7rL,KAAK,OACL6N,QAAS68K,GAAqB7qL,UAE9BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,cAMnBvN,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAO6tK,YACtBvC,KAAiBlD,IAChB5lL,EAAAA,GAAAA,GAAA,OACEF,WAAWqW,EAAAA,GAAAA,GACTqH,GAAOgoK,WACNpmL,GAAYoe,GAAO+tK,KACpB,gBACAxrL,SAED8oL,GAAep1K,IAAKs2K,IACnB,MAAMyB,GAAW/4I,EAAAA,EAAAA,IAAes3I,EAAI32I,SAAU+xI,GAC9C,OACEnlL,EAAAA,GAAAA,GAACgsL,GAAAA,EAAc,CACbn5I,YAAY,eAEZO,SAAU22I,EAAI32I,SACd22I,IAAKA,EACLkC,WAAS,EACThiL,WAAY8+K,GACZyC,SAAUA,EACVz9K,QAASy9K,EAAWxB,GAAuBF,KANtCp2I,EAAAA,EAAAA,IAAeq2I,EAAI32I,eAYjCwyI,IACChmL,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAO0uK,YAAa,gBAAgBnsL,SAAA,CAE7DuqL,GAAc,QACdA,GAAc,WACdA,GAAc,eAGlBvC,KACCnoL,EAAAA,GAAAA,IAACspD,GAAAA,EAAc,CACbj1C,IAAKqV,EACLxpB,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAOu+G,QAAS,iBAC1C5yE,MAAOigI,GACPv5H,aAAc,IAAIm1H,KAClBziH,iBAAkB,EAClBnZ,WAAY8C,GACZmD,UAAW7pC,GAAczlB,SAAA,CAExBkoL,KACCjoL,EAAAA,GAAAA,GAAA,QAAoBF,UAAW0d,GAAO8xC,YAAYvvD,SAC/CqkC,EAAQmT,EAAQ,mBAAoBnT,GAASmT,EAAQ,aAD9C,WAIXywI,KACChoL,EAAAA,GAAAA,GAAA,QAAsBF,UAAW0d,GAAO8xC,YAAYvvD,SACjDw3C,EAAQ,6BADD,aAIX6xI,IAAiB31K,IAAI,EACpB7S,UAASuiL,aAAYC,cAAaiG,mBACjC7/H,KACDxpD,EAAAA,GAAAA,GAACkjL,GAAkB,CAEjBiJ,eAAgBvrL,EAAQqyB,KACxBnzB,UAAWklL,GACX5gJ,MAAOA,EACPxjC,QAASA,EACTuiL,WAAYA,EACZC,YAAaA,EACbC,eAAgBuC,EAChBpsK,SAAU8sK,EAAe95H,KAAmBhD,EAC5Cz7C,QAAS07K,IATJJ,SAgBnB,CAEA,OACEzpL,EAAAA,GAAAA,IAAA,OACEC,GAAG,eACHC,WAAWqW,EAAAA,GAAAA,GACTqH,GAAO6kD,KACP7oD,GAAYgE,GAAOyjC,QAClBznC,GAAYktK,GAAiB,kBAC9BI,IAAatpK,GAAO4uK,QACpBhtL,GAAYoe,GAAO6uK,QAErBp4K,IAAKA,EAAIlU,SAAA,EAETH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAO6qB,OAAOtoC,SAAA,EAC1BX,IACAY,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACLh0B,UAAW0d,GAAO5b,OAClBmyB,KAAM2xJ,GAAiBx2K,EACvBhP,KAAK,SACL+uD,gBAAiBA,KAGrBrvD,EAAAA,GAAAA,IAACipD,GAAAA,EAAW,CACV50C,IAAK6oD,EACLnwD,MAAOy3B,EACPtkC,WAAWqW,EAAAA,GAAAA,GACTqH,GAAO2rB,MACP++I,IAAsB1qK,GAAO8uK,aAC7BpE,KAAuB9oL,GAAYoe,GAAO+uK,oBAE5CC,UAAWptL,EACXu1B,UAAWA,GACX83J,oBAAqB,IAAIjvK,GAAOu+G,YAAYipD,KAC5C0H,YAAatE,KAAyBhpL,EACtCutL,cAAevE,KAAyBhpL,EACxCkwD,YAA8B/X,EAAjBquI,EAAyB,qBAAgC,UACtEt8I,2BAAyB,EACzB77B,SAAUu7K,GACV4D,iBAAkB3C,GAClBznH,QAASo2E,GACTi0C,aAAcztL,EACd4gD,QAAS+mI,GACTqF,QAAStF,GACTgG,UAAWrG,EAAgB0D,QAAmBtnL,EAC9CkqL,YAAavG,EAAgB6D,QAAmBxnL,EAAU9C,SAAA,EAE1DH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOwvK,WAAWjtL,SAAA,CAC/BolL,IACCnlL,EAAAA,GAAAA,GAACgsL,GAAAA,EAAc,CACbn5I,YAAY,oBACZ/yC,UAAW0d,GAAOyvK,eAClB75I,SAAU+xI,EACV4E,IAAKvE,GAAW9xI,EAAAA,EAAAA,IAAeyxI,IAC/Bp3K,QAASi8K,KAGZpE,IAAkB5lL,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAO8uB,KAAKvsC,SAAC,UAEhDX,GAAY8rL,SAEd9rL,IACAY,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAO0vK,MAAMntL,UAC3BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACL2N,MAAM,cAENE,QAASA,IAAMo4K,EAAoB,CAAEpuH,YAAYo1H,EAAAA,GAAAA,IAAcjhK,KAAKC,SACpE5Z,UAAWglC,EAAQ,cAAcx3C,UAEjCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,oBAKlBnO,GAAY8rL,KACZ9rL,IACCQ,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOusB,OAAOhqC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLpS,KAAK,UACL2N,MAAM,cAENE,QAASA,IAAMo4K,EAAoB,CAAEpuH,YAAYo1H,EAAAA,GAAAA,IAAcjhK,KAAKC,SACpE5Z,UAAWglC,EAAQ,cAAcx3C,UAEjCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,gBAEbvN,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAO4vK,QAAQrtL,SAC5BooL,KACC5yJ,GAAU5zB,OACR41C,EAAQ,KAAM,CAACrkC,KAAKma,IAAIi5J,EAAe,EAAG,GAAIvmE,IAC5CxqF,IAAaA,EAAS5zB,QACxB41C,EAAQ,eAIE,SAAfsuI,GAAyB96K,QAAQwqB,GAAU5zB,UAC1C3B,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAW0d,GAAO6vK,UAClBntL,KAAK,UACL4N,QAAM,EACNs6C,OAAK,EACLwkF,mBAAiB,EACjB7+H,QAAS47K,GAAuB5pL,SAEhBw3C,EAAf0vI,GAAuB,eAA0B,kBAGrDmB,KAAyBF,KACxBtoL,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAO8vK,iBAAiBvtL,SAAA,EACtCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAO+vK,kBAAmB9G,GAAiBjpK,GAAOgwK,oBAC5El7K,OAAK,EACLpS,KAAK,UACL2N,MAAM,YACNE,QAASo8K,GACT52I,gBAAiBkzI,EACjBl0K,UAAWxF,EAAK,yBAAyBhN,UAEzCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,UAEbvN,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAO+vK,kBAAmB/G,GAAiBhpK,GAAOgwK,oBAC5El7K,OAAK,EACLpS,KAAK,UACL2N,MAAM,YACNE,QAASs8K,GACT92I,gBAAiBizI,EACjBj0K,UAAWxF,EAAK,yBAAyBhN,UAEzCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,uB,wCEvzB3B,MAAMw/F,GAAsB,IAAMn3F,EAAAA,EAoUlC,IAAejX,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM,SACJ0gG,EAAQ,MACRe,EAAK,OACLw/E,EAAM,SACNC,EAAQ,OACRC,GACEtsL,EAAO6hF,SAELj0B,GAAkB36B,EAAAA,EAAAA,KAAqBjzB,EAAQmL,GAC/C0C,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,GAC1BohL,GAAoBl/K,EAAAA,EAAAA,IAASlC,QAA+D3J,GAArDkuD,EAAAA,EAAAA,KAAmB1vD,EAAQmL,IAASu1F,YAAYliG,GAE7F,MAAO,CACLqP,OACA2+K,eAAgBF,GAAQzqG,SACxB4qG,aAAcH,GAAQlgF,OACtBsgF,eAAgBN,EAAOvqG,SACvBilB,iBAAkBulF,EAASxqG,SAC3BiqB,gBAAiBD,EACjBm+D,YAAap9D,EAAMC,OACnBC,YAAY6/E,EAAAA,EAAAA,KAAyB3sL,GACrC4tD,kBACApvB,sBAAsB0B,EAAAA,EAAAA,KAA2BlgC,GACjDusL,qBAzBcj/K,CAlU6Bs/K,EAC/C/+K,OACAI,WACAxP,YACAwV,WACAqzF,gBACAxB,cACA2yE,kBACAiU,iBACA5lF,mBACA0lF,iBACAC,eACAziB,cACAl+D,kBACAygF,mBACAz/E,aACAl/C,kBACApvB,uBACA+oE,iBACA3I,WACA8I,kBACAmlF,mBAEA,MAAM,mBACJC,EAAkB,iBAClBC,EAAgB,cAChBC,EAAa,YACbC,EAAW,oBACXC,IACEviL,EAAAA,EAAAA,MAEEsd,GAAejgB,EAAAA,EAAAA,MACfqsE,GAAYrsE,EAAAA,EAAAA,MACZ64F,GAAkB74F,EAAAA,EAAAA,OAGtBw6C,aAAcmrD,EACdvrD,cAAewrD,GACb1rD,KAEEirI,GAAoBC,EAAAA,GAAAA,GAAqBv/K,GAAMrP,GAAIyP,GAEnD+/F,EAAS,GAAGpP,iBACZ,eACJE,EAAc,0BACdG,EAAyB,mCACzBkB,EAAkC,mCAClCL,EAAkC,6BAClCM,EAA4B,iBAC5B/R,GACEsQ,GAA0B12E,EAAcosD,EAAW25B,EAAQ/5F,GAEzDvI,GAAOC,EAAAA,EAAAA,KAEPuiG,EAAiBxkG,QAAQsgK,GAEzB77D,GAAUznG,EAAAA,EAAAA,IAAQ,KACtB,GAAImmL,GAAgBL,EAAgB,CAClC,MAAMa,EAAiD,GAoBvD,OAnBIZ,GAAcnsL,QAChB+sL,EAAW17K,KAAK,CACdnT,GAAI8rG,EAAAA,IACJL,WAAY,IACZn+F,MAAO,GACP+1E,SAAU4qG,EACV16J,MAAO06J,EAAansL,OACpB0oG,SAAS,IAGTwjF,GAAgBlsL,QAClB+sL,EAAW17K,KAAK,CACdnT,GAAI+rG,EAAAA,IACJN,WAAY,IACZn+F,MAAOJ,EAAK,kBACZm2E,SAAU2qG,EACVz6J,MAAOy6J,EAAelsL,SAGnB+sL,CACT,CAEA,IAAKrjB,EACH,OAAO9mI,GAAAA,EAGT,MAAMkrE,EAAc,GAEhBtH,EAAiBxmG,QACnB8tG,EAAYz8F,KAAK,CACfnT,GAAIqqG,EAAAA,IACJoB,WAAY,IACZn+F,MAAOJ,EAAK,oBACZm2E,SAAUilB,EACV/0E,MAAO+0E,EAAiBxmG,SAIxBosL,EAAepsL,QACjB8tG,EAAYz8F,KAAK,CACfnT,GAAIiqG,EAAAA,IACJwB,WAAY,IACZn+F,MAAOJ,EAAK,kBACZm2E,SAAU6qG,EACV36J,MAAO26J,EAAepsL,SAI1B,MAAM0uG,EAAa,IAAKg7D,GAAe,IACnCuiB,GACFv9E,EAAWT,QAAQg+E,GAGrB,MAAMe,EAAsB9rI,OAAO0K,QAAO2hD,EAAAA,GAAAA,IAAW/B,EAAiBkD,IAEtE,MAAO,IACFZ,KACAk/E,IAEJ,CACDtjB,EACAl+D,EACAhF,EACA4lF,EACAH,EACA7gL,EACA8gL,EACAK,EACAJ,IAGIt9E,GAAkBzoG,EAAAA,EAAAA,IAAQ,IAC9BwnG,GAC4D,IAAzDC,EAAQ7xE,OAAQhzB,GAAQA,EAAIu4E,UAAUvhF,QAAQA,OAChD,CAAC6tG,EAASD,KAEbhlG,EAAAA,EAAAA,IAAU,KACH48F,IACLgnF,IACKrU,GACL0U,EAAkB,CAAEttL,KAAM,oBACzB,CAAC44K,EAAiB3yE,EAAagnF,EAAoBK,IAEtD,MAAMvtD,GAAoBvwB,EAAAA,GAAAA,GAAkB,GAAI5Q,EAAAA,KAC1C8uF,EAAuBr/E,GAAkB0xB,IACzCzwB,IAAoBspE,GAAmBoU,IAE7CtwG,EAAAA,GAAAA,GAAoBlI,GAAYk5G,IAAyBl5G,EAAUlsE,UAGnEe,EAAAA,EAAAA,IAAU,KACR,IAAKglG,EACH,OAGF,MAAMlnE,EAASqtC,EAAUlsE,QACzB,IAAK6+B,EACH,OAGF,MAAMuoE,EAAUzQ,EAAiB4M,IAAuB1kE,EAAO2I,YAAc,EAAI+7D,GAAsB,IAEvG1gB,EAAAA,GAAAA,GAAwBhkD,EAAQuoE,IAC/B,CAACrB,EAAgBpP,IAEpB,MAAM0uF,GAAsBtiL,EAAAA,EAAAA,GAAgB,CAAC61E,EAAqB6xC,EAAoBgmD,KACpFlxE,EAAgB3mB,EAAS6xC,EAAUgmD,GAAgB,GACnDmU,EAAiB,CAAEhsG,cAGf0sG,IAAsBviL,EAAAA,EAAAA,GAAiB61E,IAC3CisG,EAAc,CAAEjsG,cAGZ2sG,IAAoBxiL,EAAAA,EAAAA,GAAiB61E,IACzCksG,EAAY,CAAElsG,cAGV4sG,IAAkBziL,EAAAA,EAAAA,GAAgB,KACjCutK,GACL0U,EAAkB,CAAEttL,KAAM,oBAGtB+tL,IAA4B1iL,EAAAA,EAAAA,GAAiB61E,IACjDmsG,EAAoB,CAAEnsG,cAGxB,IAAKlzE,EAAM,OA+DX,MAAMyiC,IAAgBx7B,EAAAA,GAAAA,G1K3UD,W0K2U6BrW,GAC5CgxG,IAAkB36F,EAAAA,GAAAA,GACtBqH,GACA,gBACCyxF,GAAuBzxF,IAGpBmX,IAAai6J,IAAyB9U,GAAmBoU,KAAkB19E,EAEjF,OACExwG,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CAACn9B,UAAW6xC,GAAezU,UAAWvI,GAAY,EAAI,EAAGpnB,KAAK,OAAO0jG,eAAa,EAAAlxG,SACzF6uL,GASAhvL,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACImuL,IACAluL,EAAAA,GAAAA,GAAA,OAAKiU,IAAKyhE,EAAW51E,UAAWgxG,GAAgB/wG,UAC9CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,0BAAyBC,SAAA,EACtCC,EAAAA,GAAAA,GAAA,UAAQiU,IAAKiuF,EAAiBpiG,UAAU,kBACvC0vG,EAAQ/7F,IAtFvB,SAAqBsuF,EAA8Cv9F,GACjE,MAAM0sG,EAAenP,EAAW7e,WAAW,GACrC3C,GAAkBpqE,EAAAA,GAAAA,GAAeqH,GAAqBhZ,IAAU27F,G1KhRoJ,Y0KiRpNgR,EAAmB3sG,EAAQ4sG,EAAAA,IAEjC,OAAIrP,EAAWliG,KAAOiqG,EAAAA,KACjB/H,EAAWliG,KAAOqqG,EAAAA,KAClBnI,EAAWliG,KAAOqvL,EAAAA,KAClBntF,EAAWI,eACV+O,GAGFlxG,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAEL9N,UAAWygF,EACXhuE,UAAWwvF,EAAW50F,MACtBmF,OAAK,EACLi2C,MAAOw5C,EAAWliG,KAAOiqG,EAAAA,KAAwB/H,EAAWliG,KAAOqqG,EAAAA,IACnEr8F,MAAM,cAENE,QAASA,IAAM2hF,EAAiBlrF,GAAOzE,SAEtCgiG,EAAWliG,KAAOiqG,EAAAA,KACjB9pG,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,WACTw0F,EAAWliG,KAAOqqG,EAAAA,KACpBlqG,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aACTw0F,EAAWliG,KAAOqvL,EAAAA,KACpBlvL,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CAACC,KAAM7kB,EAAMhP,KAAK,WAEzBF,EAAAA,GAAAA,GAAC8hG,GAAe,CACdC,WAAYA,EACZxhF,QAAS4tF,IAAehH,EACxBlF,oBAAqBR,EACrBS,gBAAiBiP,EAAmBjP,OAAkBr/F,EACtDolB,eAAa,KArBZ85E,EAAWliG,KA4BlBG,EAAAA,GAAAA,GAACikG,GAAa,CAEZ7hB,QAAS8uB,EACThxG,KAAM8hG,EAAAA,IACN70F,MAAO40F,EAAW50F,MAClBrN,UAAWygF,EACXhgE,QAAS4tF,IAAehH,EACxBlF,oBAAqBR,EACrByC,eAAa,EACbrkE,sBAAoB,EACpBqiE,gBAAiBiP,EAAmBjP,OAAkBr/F,EACtD4hG,qBAAsBkE,EACtB56F,QAAS2hF,EACTgV,SAAUlgG,EACVyjB,eAAa,GAbR85E,EAAWliG,GAiBxB,SA+BQG,EAAAA,GAAAA,GAAA,OACEiU,IAAKqV,EACLxD,YAAakpK,GACbhmI,SAAUgmD,EACVlvG,WACEqW,EAAAA,GAAAA,GACEqH,GACAhI,EAAAA,GAAe,eAAiB,iBAC/B04K,GAAgB1wK,IAEpBzd,SAEAyvG,EAAQ/7F,IAAI,CAACsuF,EAAYv4C,KACxBxpD,EAAAA,GAAAA,GAACioG,GAAU,CAETlG,WAAYA,EACZoF,YAAap8F,QAAQojG,GAAchH,GACnCyB,eAAgBA,EAChBpkG,MAAOglD,EACPy2C,SAAUoP,EACVpN,oBAAqB3B,EACrBkB,mCAAoCA,EACpCL,mCAAoCA,EACpC+G,aAAc/H,GAAkB32C,EAAI,GAAK22C,GAAkB32C,EAAI,EAC/D2+C,iBAAkBA,EAClBl5C,gBAAiBA,EACjBpvB,qBAAsBA,EACtB8oE,cAAeA,EACfD,iBAAkB3G,EAAWliG,KAAO+tL,EACpC7kF,gBAAiB8lF,EACjB7lF,gBAAiB8lF,GACjB7lF,cAAe8lF,GACf7lF,sBAAuB+lF,GACvBhnK,eAAa,EACbogF,iBAAkBtG,EAAWliG,KAAO8rG,EAAAA,KApB/B5J,EAAWliG,UA/BvBi6K,GAAoBoU,EAEjB19E,GACFxwG,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAsBzd,SAAEgN,EAAK,iBAE7C/M,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,KAJRzvD,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAsBzd,SAAEgN,EAAK,yCCrMvD,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM,mBAAEy3C,EAAkB,aAAE6pD,GAAiBzsG,EAAO6iD,WAE9C,mBAAEirI,GAAuB9tL,EAAO6yC,WAChC,iBAAEk7I,EAAgB,wBAAE1gF,IAA4B39C,EAAAA,EAAAA,KAAmB1vD,EAAQmL,IAAW,CAAC,EAE7F,MAAO,CACL4iL,mBACAnrI,qBACA6pD,eACAuhF,eAAgBF,EAChB1gF,mBAAoBC,IAZN//F,CAhGqC2gL,EACvDnoF,cACAioF,mBACAnrI,qBACA6pD,eACAvF,sBACAkG,qBACA7tG,UACAyuL,iBACAxmF,mBACAC,wBAEA,MAAM5G,GAAkB74F,EAAAA,EAAAA,MAClB+9F,GAAoB/9F,EAAAA,EAAAA,OAClBI,MAAOmhB,IAAgBE,EAAAA,GAAAA,MACzB,cAAEykK,IAAkBlwL,EAAAA,EAAAA,MAEpBmwL,EAAmB5uL,GAASsjD,WAAW63E,QAEvC0zD,EAA4BJ,GAAkBG,GAC/CA,EAAiB7tL,QAAU0tL,EAE1BK,GAAwB3nL,EAAAA,EAAAA,IAAQ,KACpC,GAAI0nL,EAA2B,CAC7B,MAAMvrI,EAAYsrI,EAAiB/7K,IAAI,EAAG2/B,cAAeA,GAIzD,OAHIq7D,GACFvqD,EAAU0rD,QAAQ,CAAE1uG,KAAM,SAErBgjD,CACT,CAEA,IAAKkrI,EACH,MAAO,GAGT,GAA8B,QAA1BA,EAAiBluL,KAAgB,CACnC,MAAMyuL,GAA0C1rI,GAAsB,IAAIxwC,IAAI,EAAG2/B,cAAeA,GAIhG,OAHIq7D,GACFkhF,EAAgB//E,QAAQ,CAAE1uG,KAAM,UAE3B0uL,EAAAA,EAAAA,IAAcD,EAAiB7hF,EACxC,CAEA,MAAM6hF,EAAyCP,EAAiBS,QAAQ9hJ,QAKxE,OAJI0gE,GACFkhF,EAAgB//E,QAAQ,CAAE1uG,KAAM,UAG3B0uL,EAAAA,EAAAA,IAAcD,EAAiB7hF,IACrC,CACD7pD,EAAoBmrI,EAAkBthF,EAAc2hF,EAA2BD,EAAkB/gF,IAG7FqhF,GAAe/nL,EAAAA,EAAAA,IAAQ,KAC3B,MAAMgoL,EAAc78K,KAAK4a,IA1DD,MA0D2BlY,EAAAA,EAAKgV,GAClDolK,GAAYplK,EA9DK,IAIE,KACD,IAyD2EhV,EAAAA,EAC7FsiB,EAAiB63J,EA9DI,GA8DmCn6K,EAAAA,EAExDq6K,EAAa/8K,KAAKmI,OAAO6c,EAAiB83J,IAlE9B,GAkE2DA,IACvEn9G,EAAY3/D,KAAKmtE,KAAKqvG,EAAsB/tL,OAASsuL,GAErDC,EArEY,GAqEMr9G,GAA6BA,EAAY,GAAKm9G,EAnE3C,GAmE+Ep6K,EAAAA,EAAM,EAEhH,OAAO1C,KAAK4a,IApEa,GAoEclY,EAAAA,EAAKs6K,IAC3C,CAACR,EAAsB/tL,OAAQipB,IAElC,OACE5qB,EAAAA,GAAAA,GAAA,OAAKF,UCtHc,WDsHUgG,MAAO,WAAWgqL,MAAiB/vL,UAC9DC,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GCvHsB,WDuHSo5K,EAAgB,eAAiB,iBAAiBxvL,UAC/FH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,+CAA8CC,SAAA,EAC3DC,EAAAA,GAAAA,GAAA,UAAQiU,IAAKiuF,EAAiBpiG,UAAU,mBACxCE,EAAAA,GAAAA,GAAA,UAAQiU,IAAKmzF,EAAmBtnG,UAAU,kBACzC4vL,EAAsBj8K,IAAK2/B,IAC1B,MAAMq5D,GAAa/4D,EAAAA,EAAAA,IAAeN,GAC5BkxD,EAAamI,EAAalE,GAAqBz4E,SAAS28E,QAAc5pG,EAE5E,OACE7C,EAAAA,GAAAA,GAACknG,GAAa,CAEZ9zD,SAAUA,EACVkxD,WAAYA,EACZ6C,YAAaA,EACbljD,mBAAoBA,EACpBl2C,QAAS86F,EACT7iF,cAAe8iF,EACf5G,gBAAiBA,EACjBkF,kBAAmBA,GARdqF,eElEf0jF,GAA0B,OAASv6K,EAAAA,EAoOzC,IAAejX,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAsBtN,IACxC,MAAMy+D,GAAQ/wD,EAAAA,EAAAA,KAAe1N,GACvB+uL,EAAsB/uL,EAAO+uL,qBAC7B,OACJ5jL,EAAM,UAAEiM,EAAS,YAAE43K,EAAW,QAAEjtJ,EAAO,SAAE5jB,EAAQ,cAAE8wK,EAAa,aAAEpC,GAChEpuH,EAAMzqB,gBAAkB,CAAC,EACvBzV,EAAQywJ,GAAejtJ,GACzBmD,EAAAA,EAAAA,KAAgBllC,EAAQgvL,EAAajtJ,QACrCvgC,EACEqM,EAAO1C,GAAS6nC,EAAAA,EAAAA,KAAWhzC,EAAQmL,QAAU3J,EAC7CiuD,EAAetkD,GAASukD,EAAAA,EAAAA,KAAmB1vD,EAAQmL,QAAU3J,EAC7DjC,EAAU4L,GAAUiM,GAAYsc,EAAAA,EAAAA,KAAkB1zB,EAAQmL,EAAQiM,QAAa5V,EAC/E2wH,GAAgB9kH,EAAAA,EAAAA,IAASlC,GAAU6jL,GAAe,IAClDE,EAAmE,SAAzCz/H,GAAcs+H,kBAAkBluL,MAC1D,mBAAEiuL,GAAuB9tL,EAAO6yC,UAChCs8I,EAAkE,QAAzC1/H,GAAcs+H,kBAAkBluL,MAC1D4vD,GAAcs+H,kBAAkBqB,iBAE/BjB,EAAmB5uL,GAASsjD,WAAW63E,QACvC0zD,EAA4B1kL,QAAQokL,GAAsBK,GAC3DA,EAAiB7tL,QAAUwtL,GAEhC,MAAO,CACLvuL,UACAg/B,QACApgB,WACAkxK,sBAAsBxhL,GAAMyhL,aAAeJ,GAA2Bd,KACjEe,GAA0Bh9D,GAC/B7qB,eAAe6I,EAAAA,EAAAA,KAA+BnwG,GAC9Cw+B,sBAAsB0B,EAAAA,EAAAA,KAA2BlgC,GACjDivL,gBACApC,eACA1hL,SACA4jL,wBAjCgBzhL,CAlO8BiiL,EAChDjlL,SACA/K,UACAg/B,QACApgB,WACAmpF,gBACA9oE,uBACA6wJ,sBACAJ,gBACA9jL,SACA0hL,eACAkC,0BAEA,MAAM,eACJS,EAAc,oBAAEC,EAAmB,YAAEx9H,EAAW,iBAAE3xB,EAAgB,kBAAEsQ,EAAiB,kBAAE8+I,EAAiB,wBACxGC,EAAuB,qBAAEC,EAAoB,sBAAEC,IAC7CllL,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,KAEPmkL,GAAoBhhJ,EAAAA,GAAAA,GAAiBvvC,GAASf,IAAI,GAClDuxL,GAAiBjhJ,EAAAA,GAAAA,GAAiBvvC,GAAS4L,QAAQ,GACnD6kL,GAAsBlhJ,EAAAA,GAAAA,GAAiBvQ,GAAOh0B,QAAQ,GACtD0lL,GAAkBnhJ,EAAAA,GAAAA,GAAiBvQ,GAAO//B,IAC1C0xL,GAAiBphJ,EAAAA,GAAAA,GAAiB3wB,GAAU,GAC5Cm2D,GAAUtsE,EAAAA,EAAAA,MACVmoL,GAAoBzpL,EAAAA,EAAAA,IAAQ,KAChC,GAAKwpL,EAIL,OAAID,EACKC,EAGF,CACL/0K,EAAG+0K,EAAe/0K,GAAKk0K,GAxCQ,IACG,IAwClC5tK,EAAGyuK,EAAezuK,GAAK4tK,GAzCgB,IACG,MA0C3C,CAACY,EAAiBC,EAAgBb,IAE/B56G,GAAiBvpE,EAAAA,EAAAA,GAAgB,IAAMopE,EAAQnsE,SAC/Cm8F,GAAYp5F,EAAAA,EAAAA,GAAgB,KAAM,CACtCq5F,YAAY,EACZkvE,SAAUuc,EACVI,SAAS/xI,EAAAA,EAAAA,OAAiBi2B,EAAQnsE,UAC5BmsE,EAAQnsE,QAAQwnC,YAAcm/I,IAA2B,IAAIuB,KAC/D,KAGAC,GAA6BplL,EAAAA,EAAAA,GAAiB61E,IAClD,IAAKgvG,IAAmBD,EACtB,OAEF,MAAM/9I,EAAwBgvC,EAAQijB,cAClC,CAAEnkG,KAAM,SAAUsuF,WAAYpN,EAAQviF,IACtC,CAAEqB,KAAM,QAASkqK,SAAUhpF,EAAQ2Q,OAEvC89F,EAAe,CACbrkL,OAAQ4kL,EAAgB34K,UAAW04K,EAAmB/9I,WAAUw+I,mBAAmB,IAErFd,MAGIe,GAAuBtlL,EAAAA,EAAAA,GAAiB6mC,IACvCg+I,GAAmBD,IAIF,SAAlB/9I,EAASlyC,KACX+vL,EAAqB,CACnBzkL,OAAQ4kL,EAAgB34K,UAAW04K,EAAmB/9J,MAAO,IAG/Dy9J,EAAe,CACbrkL,OAAQ4kL,EAAgB34K,UAAW04K,EAAmB/9I,WAAUw+I,mBAAmB,IAGvFd,OAGIgB,GAA4BvlL,EAAAA,EAAAA,GAAiB6mC,IAC3B,SAAlBA,EAASlyC,OAEbgwL,EAAsB,CACpB1kL,OAAQ4kL,EACR34K,UAAW04K,IAEbL,OAGIiB,GAA4BxlL,EAAAA,EAAAA,GAAiBqC,IACjD,GAAI,SAAUA,GAAsB,SAAdA,EAAK1N,KAAiB,OAE5C,MAAMkyC,EAAW,OAAQxkC,EAAO,CAAE1N,KAAM,SAAUsuF,WAAY5gF,EAAK/O,IAAgB+O,EAE7EwzE,EAAU,SAAUxzE,GAAsB,WAAdA,EAAK1N,MAAoBgrC,EAAAA,EAAAA,MAAYkhE,aAAazmE,KAAK/3B,EAAK4gF,YAC1F,OAAQ5gF,EAAOA,OAAO/L,EAE1B,GAAIu/E,IAAYA,EAAQ+iB,SAAWtlE,EAYjC,OAXA8B,EAAiB,CACf/gC,QAASmM,EAAK,0BACdjL,OAAQ,CACNA,OAAQ,mBACR2tI,QAAS,CAAErtG,eAAgB,mBAE7Bq9G,WAAY1yI,EAAK,sBAGnB+jL,IAKF,IAAKR,EASH,OARAr+I,EAAkB,CAChBrmC,OAAQylL,EACRjuJ,QAASkuJ,EACTz+I,aAAaC,EAAAA,EAAAA,IAAYu+I,EAAsBC,GAC/Cl+I,WACAw+I,mBAAmB,SAErBd,IAIF,IAAIh8K,EACA29E,EAEJ,GAAI,SAAU7jF,GAAsB,UAAdA,EAAK1N,KACzB4T,EAAOlG,EAAKw8J,aACP,CACL,MAAM4mB,GAAqBC,EAAAA,GAAAA,KAAyBC,EAAAA,GAAAA,IAAqB9vG,IACzEttE,EAAOk9K,EAAmBl9K,KAC1B29E,EAAWu/F,EAAmBv/F,QAChC,CAEAn/B,EAAY,CAAEx+C,OAAM29E,WAAU0/F,YAAY,IAC1CrB,MAGIjC,GAAsBtiL,EAAAA,EAAAA,GAAiB61E,IAC3C,MAAMgwG,EAAmBvvI,OAAO0K,OAAO6iI,GACjCiC,EAAWD,EAAiB58I,KAAMm4I,GAAWA,EAAO2E,kBAAoBlwG,EAAQviF,KAAKA,GAEvF2M,GAAQukL,EAAkB,CAAEvkL,SAAQ8C,SAAUmwC,EAAAA,GAAgB4yI,aAE9DA,GAAUrB,EAAwB,CAAC,GACvCF,MAGIvoF,GAAsBxgG,EAAAA,EAAAA,IAAQ,KAC1BnH,GAASsjD,WAAW63E,SAAW,IAAIz5E,OAAiB,CAACkL,GAAO+kI,cAAan/I,oBAC3DvwC,IAAhB0vL,GACF/kI,EAAIx6C,MAAK0gC,EAAAA,EAAAA,IAAeN,IAGnBoa,GACN,IACF,CAAC5sD,GAASsjD,WAAW63E,UAExB,OACE/7H,EAAAA,GAAAA,GAAC+f,GAAAA,EAAI,CACHpU,OAAQA,EACRsI,IAAK0hE,EACL71E,WAAWqW,EAAAA,GAAAA,GCtOM,WDsOsB,kBACvCg8F,iBAAiBh8F,EAAAA,GAAAA,GCvOyB,YDyOvCu6K,IAAwBY,GCzOiE,WD0O1FA,GC1O+D,YD4OjE1rF,YAAU,EACVsM,WAAS,EACTn1B,OAAQy0G,EACRxxK,UAAW4f,GAAS,SACpBg2C,kBAAmBA,GACnBC,eAAgBA,GAChBC,eAAgBA,EAChB6vB,UAAWA,EACX6sF,yBAAyB,iBACzB3mL,QAASilL,EAAoB/wL,SAE5BmuL,GAAgB1hL,GACfxM,EAAAA,GAAAA,GAACiuL,GAAa,CACZnuL,UAAU,GACVwV,UAAW3J,EACXw7F,YAAap8F,QAAQY,GAAU+kL,GAC/BzwF,SAAS,iBACT65E,iBAAiB,EACjBlxE,gBAAgB,EAChBp8F,OAAQA,EACRm8F,cAAeA,EACfI,gBAAiB8lF,EACjBX,aAAcA,KAGhBtuL,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAC4uG,GAAiB,CAChBpiG,OAAQ4kL,EACRnxF,SAAS,qBACT3qF,UAAW3J,KAAY+kL,GAAuBY,GAC9CnqF,YAAap8F,QAAQY,GAAU+kL,GAC/BtoF,kBAAgB,EAChBtoG,UAAY4wL,GAAwBY,OAAkCzuL,EC5QoC,WD6Q1G0lG,oBAAqBA,EACrBI,cAAeA,EACfoG,oBAAqBuiF,EAAkBS,EAA4BJ,EACnE9oF,iBAAkByoF,EAAkBS,EAA4BF,EAChE/oF,kBAAmBgpF,KAEnBpB,GAAuB3lL,QAAQqmL,KAC/BpxL,EAAAA,GAAAA,GAACsvL,GAAqB,CACpB9iL,OAAQ4kL,EACRjqF,YAAax7F,EACbk9F,iBAAkByoF,EAAkBS,EAA4BF,EAChE/oF,kBAAmBgpF,EACnBvpF,oBAAqBA,EACrB3nG,QAASA,YA8CvB,SAASg1E,KACP,OAAO7zE,SAASsC,cAAc,OAChC,CAEA,SAASwxE,KACP,OAAO9zE,SAASsC,cAAc,OAChC,C,4BE7UA,MAAMouL,GAAM1wL,SAASuB,cAAc,O,sFCDnC,SAA4C,WAA5C,GAA+N,WC6BzNovL,GAAmB,GAAK98K,EAAAA,EAmH9B,IAAejX,EAAAA,EAAAA,IAjH2Bg0L,EACxCC,aACA9yL,YACA4B,WACAmxL,0BACAC,uBACAtuL,QACAqyC,WACAk8I,sBAEA,MAAMC,EA2FD,SAAwBJ,EAA2BC,GACxD,GAAIA,GAA2BD,EAAWK,MAAO,CAC/C,GAAIC,EAAAA,IAA8BhlJ,IAAI0kJ,EAAW5nJ,UAC/C,MAAO,QAET,GAAImoJ,EAAAA,IAA8BjlJ,IAAI0kJ,EAAW5nJ,UAC/C,MAAO,OAEX,CACA,MAAO,MACT,CArGsBooJ,CAAeR,EAAYC,GAEzCQ,GAAqB9mL,EAAAA,EAAAA,GAAgB,KACzCwmL,IAAkBvuL,KAGduO,GAAUhL,EAAAA,EAAAA,IAAQ,KACtB,OAAQirL,GACN,IAAK,QACH,OACEhzL,EAAAA,GAAAA,GAAA,OACEF,UAAW0d,GACX1Z,IAAK8uL,EAAW5pL,QAChBuf,IAAI,GACJ5kB,WAAW,IAGjB,IAAK,QACH,OACE/D,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,CACGgL,QAAQ6nL,EAAWK,OAAO95K,YACzBnZ,EAAAA,GAAAA,GAAA,OAAKF,UD9D+C,WC8DpBC,UAAEic,EAAAA,GAAAA,IAAoB42K,EAAWK,MAAM95K,aAEzEnZ,EAAAA,GAAAA,GAAA,SACEF,UAAW0d,GACX1Z,IAAK8uL,EAAW5pL,QAChBkd,UAAQ,EACRjB,OAAK,EACLoB,MAAI,EACJlE,yBAAuB,OAI/B,QACE,OACEviB,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAC2tJ,GAAAA,EAAI,CACH7tJ,UD9E2I,WC+E3IyN,KAAMqlL,EAAW3+G,SACjBq/G,WAAWC,EAAAA,GAAAA,IAAiBX,EAAW3+G,SAAU2+G,EAAW5nJ,UAC5DwoJ,YAAaZ,EAAWnqL,eACxBvI,KAAM0yL,EAAW1yL,KACjBsqI,SAAO,IAER3zF,IACC72C,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CACHjF,KAAK,SACLzN,WAAWqW,EAAAA,GAAAA,GAAeqH,GDxFsO,YC0FhQzP,QAASA,IAAM8oC,EAASryC,UAMnC,CAACouL,EAAYI,EAAaxuL,EAAOqyC,IAE9B48I,EAAqC,SAAhBT,IAA2BF,EAChDY,EAAuB3oL,QAAwB,SAAhBioL,GAA0BJ,EAAWe,qBACpEC,EAAsC,SAAhBZ,EAEtBa,GAAgB19K,EAAAA,GAAAA,GACpBrW,EDvGmB,WCuGK4B,GDvG0D,WCuG/B+xL,GDvGgF,YC0GrI,OACE7zL,EAAAA,GAAAA,IAAA,OAAKE,UAAW+zL,EAAc9zL,SAAA,CAC3BgT,GACD/S,EAAAA,GAAAA,GAAC8zL,GAAAA,EAAY,CACX10K,UAAWs0K,EACXxqL,aAAc0pL,EAAWnqL,gBAAkBmqL,EAAW5pL,QACtDS,MAAOipL,GACP5oL,OAAQ4oL,KAETkB,IACCh0L,EAAAA,GAAAA,IAAA,OAAKE,UDpHiK,WCoHvIC,SAAA,EAC7BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CACHjF,KAAMqlL,EAAWe,oBAAsB,kBAAoB,UAC3D7zL,UAAW0d,GACXzP,QAASslL,IAEVx8I,IAEC72C,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,SAASzN,UAAW0d,GAAmBzP,QAASA,IAAM8oC,EAASryC,a,uCC7HvE,SAASuvL,GAAevuL,EAAwBusB,EAAsBiiK,GAAe,GAClG,MAAMC,EAAazuL,EAAUwuL,EAAe,aAAe,aACrDE,EAAaD,EAAazuL,EAAUwuL,EAAe,cAAgB,gBACnE/lK,EAAK8D,EAAQiiK,EAAe,aAAe,aAC3CG,EAAKlmK,EAAK8D,EAAQiiK,EAAe,cAAgB,gBACvD,OAAO/lK,EAAKgmK,GAAcE,EAAKD,CACjC,CCNe,SAASE,GACtB5uL,EACA6uL,EACA9yF,EAAS,EACTuzE,GAAU,EACVwf,GAAsB,EACtBN,GAAe,GAEf,MAAMC,EAAazuL,EAAUwuL,EAAe,aAAe,aACrDE,EAAaD,EAAazuL,EAAUwuL,EAAe,cAAgB,gBACnEO,EAA4C,iBAAvBF,EACvB7uL,EAAUE,iBAA8B2uL,GACxCA,GACE,OAAE1yL,GAAW4yL,EACbC,EAA2B,GACjC,IAAIC,GAAU,EAEd,IAAK,IAAIjrI,EAAI,EAAGA,EAAI7nD,EAAQ6nD,IAAK,CAC/B,MAAMz3B,EAAUwiK,EAAY/qI,GACtBv7B,EAAK8D,EAAQiiK,EAAe,aAAe,aAC3CG,EAAKlmK,EAAK8D,EAAQiiK,EAAe,cAAgB,gBAKvD,GAJkBM,EACdH,GAAMF,EAAa1yF,GAAU4yF,GAAMD,EAAa3yF,EAChDtzE,GAAMimK,EAAa3yF,GAAU4yF,GAAMF,EAAa1yF,EAGlDizF,EAAexhL,KAAKw2C,GACpBirI,GAAU,OACL,GAAIA,IAAY3f,EACrB,KAEJ,CAEA,MAAO,CAAEyf,cAAaC,iBACxB,CCzBe,SAASE,GAAsB1iK,EAAkBxtB,EAAe8kB,GAC7E,MAAM9jB,EAAY8jB,EAAa9f,QAC/B,IAAKhE,GAAahB,EAAQ,EACxB,OAEF,MAAM,eAAEgwL,EAAc,YAAED,GAAgBH,GACtC5uL,EACAwsB,EAVoB,GAYpB,GACA,GAGF,IAAKuiK,EAAY5yL,SAAW4yL,EAAY/vL,GACtC,OAEF,MAAMquF,EAAQ2hG,EAAe,GAC7B,IAAKA,EAAe1kK,SAAStrB,IACvBA,IAAUquF,IAAUkhG,GAAevuL,EAAW+uL,EAAY1hG,IAAU,CACxE,MAAMrzE,EAAWhb,EAAQgwL,EAAeA,EAAe7yL,OAAS,GAAK,QAAU,OAC/EigG,EAAAA,GAAAA,IAAc,CACZp8F,YACAusB,QAASwiK,EAAY/vL,GACrBgb,WACA+hF,OA1BgB,IA4BpB,CACF,CC7BO,SAASozF,IAAsB,SACpCn7K,EAAQ,aACRw6K,EAAY,iCACZY,EAAgC,6BAChCC,EAA4B,kBAC5BC,EAAiB,MACjB3rI,EAAK,kBACL4rI,EAAiB,SACjBnxJ,EAAQ,QACR/3B,IAYA,MAAOmpL,EAAmBC,IAAwB9oL,EAAAA,EAAAA,KAAU,GAEtD+oL,GAAmB3oL,EAAAA,EAAAA,GAAiB2zE,GACnC/2B,GAIEq6B,EAAAA,GAAAA,GAAcr6B,EAAMxnD,OAAQu+E,IAHzB,GAMNi1G,GAAiB5oL,EAAAA,EAAAA,GAAgB,CAACI,EAAeE,KACrDA,EAAE6Y,iBACFuvK,EAAsBzwL,GAAW0wL,EAAiB1wL,EAAQmI,MAGtDyoL,GAAmB7oL,EAAAA,EAAAA,GAAiBM,IAExC,GAAIA,EAAE+2H,QAAU/2H,EAAE2kB,SAAW3kB,EAAEwoL,SAAWxoL,EAAEyoL,SAAU,OAAO,EAC7D,IAAK97K,EAAU,OAAO,EAEtB,GAAI2vC,GAASA,EAAMxnD,QAAUqzL,GAAqB,EAAG,CACnD,MAAMpmL,EAAOu6C,EAAM6rI,GACnB,GAAIpmL,EAAM,CACR,IAAuB,IAAnBg1B,EAASh1B,GACX,OAAO,EAGT/B,EAAE6Y,gBACJ,CACF,CAEA,OAAO,KAGTnb,EAAAA,EAAAA,IAAU,KACHiP,GAAUy7K,EAAqBJ,GAAgC,EAAI,IACvE,CAACr7K,EAAUq7K,IAEd,MAAMU,GAAyBpsI,GAAS6rI,EAAoB7rI,EAAMxnD,OAAS,EAmB3E,OAlBA4I,EAAAA,EAAAA,IAAU,KACHqqL,IAAoCW,GACvCN,EAAqBJ,GAAgC,EAAI,IAE1D,CAACU,EAAuBV,EAA8BD,KAEzDrqL,EAAAA,EAAAA,IAAU,IAAOiP,GAAW8jC,EAAAA,GAAAA,GAAyB,CACnDq5E,MAAO9qH,EACP2pL,KAAMV,GAAqBd,OAAenxL,EAAagK,GAAqBsoL,GAAgB,EAAGtoL,GAC/F4oL,OAAQX,GAAqBd,OAAenxL,EAAagK,GAAqBsoL,EAAe,EAAGtoL,GAChG2wC,OAAQs3I,IAAsBd,OAAenxL,EAAagK,GAAqBsoL,GAAgB,EAAGtoL,GAClG0wC,QAASu3I,IAAsBd,OAAenxL,EAAagK,GAAqBsoL,EAAe,EAAGtoL,GAClG6oL,MAAOX,EAAoBK,OAAmBvyL,EAC9CwK,QAAS+nL,SACNvyL,EAAY,CACfiyL,EAAmBK,EAAgBC,EAAkB57K,EAAUw6K,EAAcnoL,EAASkpL,IAGjFC,CACT,CC3DA,MAyFA,IAAer2L,EAAAA,EAAAA,IAzFsBg3L,EACnChqL,SACAE,UACA+pL,mBACAC,oBAEA,MAAMvsK,GAAejgB,EAAAA,EAAAA,OACf,aAAEya,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BvY,OAAQ9I,OAAWA,GAAW,GAEnGizL,GAAmBvpL,EAAAA,EAAAA,GAAgB,CAACsxB,EAAgBk4J,GAAa,KAErE,MACM5hJ,GADYjI,EAAAA,EAAAA,MAAYxF,MAAMC,KACb9I,GAClBsW,GAILyhJ,EAAiBzhJ,EAAM4hJ,KAGnBxxK,GAAchY,EAAAA,EAAAA,GAAgB,CAACM,EAAqBhN,KACxDgN,EAAE6Y,iBAEFowK,EAAiBj2L,KAGbm2L,GAAsBzpL,EAAAA,EAAAA,GAAiBglH,IAC3CukE,EAAiBvkE,EAAO1xH,IAAI,KAGxBo2L,EAAuBtB,GAAsB,CACjDn7K,SAAU7N,EACVw9C,MAAO0sI,EACPjyJ,SAAUoyJ,EACVjB,mBAAmB,EACnBH,kCAAkC,EAClC/oL,aAGFtB,EAAAA,EAAAA,IAAU,KACRmqL,GAAsB,uBAAwBuB,EAAsB3sK,IACnE,CAAC2sK,KAEJ1rL,EAAAA,EAAAA,IAAU,KACJsrL,IAAkBA,EAAcl0L,QAClCkK,KAED,CAACgqL,EAAehqL,IAEnB,MAAMqqL,GAAkB3/J,EAAAA,EAAAA,GACtBs/J,GAAel0L,OACXk0L,OACAhzL,EACJihB,GAEIqyK,EAAsBN,IAAkBA,EAAcl0L,OACxDu0L,EACAL,EAEJ,IAAK/xK,GAAiBqyK,IAAwBA,EAAoBx0L,OAChE,OAGF,MAAM7B,GAAYqW,EAAAA,GAAAA,GAChB,gDACA6N,GAGF,OACEhkB,EAAAA,GAAAA,GAAA,OAAKF,UAAWA,EAAWmU,IAAKqV,EAAavpB,SAC1Co2L,GAAqB1iL,IAAI,EAAG5T,MAAM2E,KACjCxE,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAEPziC,UAAU,+CACViO,QAASwW,EACTmgF,SAAU7kG,EACV49D,MAAOw4H,IAAyBzxL,EAAMzE,UAEtCC,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CACdloB,OAAQh+B,EACR68H,WAAW,QACX4F,cAAY,KATTziI,Q,4BClGf,SAAma,WAAna,GAAwgB,WC8GlgBu2L,GAA4B,qBA8pBlC,IAAez3L,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM,cACJ4nB,EAAa,aACbiiK,EAAY,aACZjpF,EAAY,mBACZkpF,GACEj1L,GAEE,iCAAEk1L,IAAqCxnL,EAAAA,EAAAA,KAAe1N,GACtDyvD,GAAeC,EAAAA,EAAAA,KAAmB1vD,EAAQmL,GAC1C6nB,GAAiBC,EAAAA,EAAAA,KAAqBjzB,EAAQmL,IAC9C,yBAAEw4I,GAA6B3jJ,EAAOo1C,SAASmuG,OAC/C,SAAEqC,IAAa1yE,EAAAA,GAAAA,GAAqBlzE,GACpCm1L,EAAoBn1L,EAAOo1L,cAAcC,EAAAA,KACzCD,EAAgBxvC,IAAayvC,EAAAA,IAA0Br1L,EAAOo1L,cAAcxvC,QAAYpkJ,EAE9F,MAAO,CACLwxB,iBACAD,gBACAuiK,iBAAkB7lI,GAAc0kC,QAChC6gG,eACAG,kBAAmBA,GAAmBI,SACtCH,cAAeA,GAAeG,SAC9B5xC,2BACA6xC,oBAAqBzpF,EAAa0pF,SAAS5zG,SAC3C6zG,cAAcpnD,EAAAA,GAAAA,GAAmBtuI,EAAQ,iBACzCi1L,qBACAC,qCA5Bc5nL,CAzpB+BqoL,EACjDxqL,SACA8C,WACA2nL,cACAC,UACAC,iBACAC,wBACAL,eACA19K,UACAgb,iBACAD,gBACAuiK,mBACAN,eACAG,oBACAC,gBACAY,eACApd,iBACAj1B,2BACA6xC,sBACAP,qBACAC,mCACAe,yBACAC,oBACAC,0BACAC,iBACAC,sBACAC,kBACAC,SACAC,eACAC,UACAC,eACAC,kBACAjpF,sBACAkpF,iBACAC,gBACAne,yBACAoe,cACAC,mBACAriJ,wBAEA,MAAM9hC,GAAM5K,EAAAA,EAAAA,MACNgvL,IAAShvL,EAAAA,EAAAA,OACT,qBAAEivL,GAAoB,eAAEC,GAAc,yBAAEC,KAA6BxsL,EAAAA,EAAAA,MAErEurC,IAAUvqC,EAAAA,EAAAA,KACVD,IAAOyqC,EAAAA,GAAAA,KAEPihJ,IAAgBpvL,EAAAA,EAAAA,MAChByzD,IAAWzzD,EAAAA,EAAAA,MAEXqvL,IAAiBrvL,EAAAA,EAAAA,MACjBsvL,IAAkBpiK,EAAAA,EAAAA,GAAsB0gK,GACxC2B,GAAuB3B,EAAYt1L,OAASs1L,EAAc0B,IAC1D,SAAEv5L,KAAaC,EAAAA,EAAAA,MAEfw5L,GAAY1B,GAAkBpsL,QAAQosL,GACtC3vK,GAAY2vK,GAAkBA,GAAgB2B,UAE9CC,GAA0C,UADnBF,IAAa5B,GAAat1L,SAAUq3L,EAAAA,EAAAA,IAAuB/B,EAAY,MAG7FgC,GAAkBC,GAAgBC,KAAmBl6L,EAAAA,EAAAA,KAEtDm6L,GAAuB9C,EAAmB+C,eAC1CC,GAAsBvuL,SACzBquL,IAAwB9B,GAA0B9vK,MAAe+vK,IAE7DgC,GAAmBC,KAAwBrtL,EAAAA,EAAAA,IAASmqL,EAAmBiD,mBACxEE,GAAkBnD,EAAmBmD,iBACpCC,GAAyBC,KAA8BxtL,EAAAA,EAAAA,IAC5DmqL,EAAmBoD,0BAEdE,GAAkCC,KAAuC1tL,EAAAA,EAAAA,IAASutL,KAGvF71I,aAAci2I,GACdr2I,cAAes2I,GACfp2I,QAASq2I,IACPz2I,MAEIM,aAAco2I,GAAqBx2I,cAAey2I,IAAyB32I,KAE7E53C,GAASZ,QAAQksL,EAAYt1L,QAC7Bw4L,GAAkBpvL,QAAQ6tL,IAAsBj3L,SAC/Cy4L,GAAWC,GAAaC,KAAiBr7L,EAAAA,EAAAA,KAE1Cs7L,IAAWlxL,EAAAA,EAAAA,OAEjBkB,EAAAA,EAAAA,IAAU,KACHoB,KACHwtL,KACAX,GAAyB,CAAEiB,qBAAiB52L,MAE7C,CAACs2L,GAAiBxtL,KAErB,MAAO6uL,GAAUC,KAAgB1yL,EAAAA,EAAAA,IAAQ,IACrBgD,QAAQ6tL,IAAsB3jF,MAAOvtD,GAAMA,EAAEurI,OAASvrI,EAAEgzI,QACpD,EAAC,GAAM,GAEtB,CADU3vL,QAAQ6tL,IAAsBpyG,KAAM9+B,GAAMA,EAAEurI,OAASvrI,EAAEgzI,SACtD,GACjB,CAAC9B,MAEG+B,GAAYC,KAAkB7yL,EAAAA,EAAAA,IAAQ,IACpBgD,QAAQ6tL,IAAsB3jF,MAAOvtD,GAAMA,EAAEisI,sBACzC,EAAC,GAAM,GAE3B,CADe5oL,QAAQ6tL,IAAsBpyG,KAAM9+B,GAAMA,EAAEisI,uBAC3C,GACtB,CAACiF,KAEEiC,IAAoBC,EAAAA,GAAAA,GAAqB,IAAIC,EAAAA,QAE7C,mBACJC,GAAkB,eAClBC,GAAc,qBACdC,GAAoB,YACpBC,GAAW,kBACXC,KACEC,EAAAA,GAAAA,GACFtwL,QAAQsO,IAAYm+K,IAA4BH,IAAiB8C,IACjEjD,EACAS,EACAoD,EAAAA,IACA1E,EACAG,EACAC,IAGI,yBACJ6E,GAAwB,kBACxBC,GAAiB,wBACjBC,KACEC,EAAAA,GAAAA,GACF1wL,QAAQsO,IAAYm+K,IAA4BH,IAAiB8C,IAAmBn1C,GACpFkyC,EACAS,EACAkD,GACA/9H,GACA+5H,IAGI,qBACJ6E,GAAoB,oBACpBC,GAAmB,cACnBC,GAAa,qBACbC,KACEC,EAAAA,GAAAA,GACF/wL,QAAQsO,GAAWm+K,GAA2B2C,IAC9CjD,EACAS,EACAkD,GACA/9H,GACA65H,OACA9zL,EACAuxB,GAkBF,SAAS2nK,GAAmBpvL,GAC1B6rL,GAAyB,CAAEiB,gBAAiB9sL,GAC9C,EAjBApC,EAAAA,EAAAA,IAAU,IAAOoB,IAAS6vB,EAAAA,EAAAA,GAAsBs8J,QAAWj1L,EAAY,CAAC8I,GAAQmsL,KAEhFvtL,EAAAA,EAAAA,IAAU,KACJoB,KACF6tL,GAAqBlD,EAAmBiD,mBACxCI,GAA2BrD,EAAmBoD,2BAE/C,CAACpD,EAAoB3qL,MAExBpB,EAAAA,EAAAA,IAAU,KACHoB,IACH6sL,GAAyB,CAAEiB,qBAAiB52L,KAE7C,CAAC21L,GAA0B7sL,MAM9BpB,EAAAA,EAAAA,IAAU,KACJoB,IAAUvM,KACZ48L,EAAAA,GAAAA,OAED,CAAC58L,GAAUuM,KAEd,MACEoqE,kBAAmBkmH,GAAoB,kBACvChmH,GAAiB,uBACjBC,GAAsB,sBACtBC,KACEC,EAAAA,GAAAA,GAAuBqiH,IAAgBrB,IAA0BzrL,IAE/DuwL,IAAkB3vL,EAAAA,EAAAA,GAAgB,CAAC0nH,EAAoBkoE,KACvDxwL,OACasuK,GAAkBkiB,IAAwB9E,IAAiBF,EAAkBa,EACxF/jE,EAAW8jE,EAAeH,GACzB0B,GAAqBC,GAAmBE,IAC7CjB,GAAyB,IACnBjC,GAAoC,CACtC6F,6BAA8B9F,EAAmB+C,eAAiB,WAAa,YAEjFE,qBACAE,mBACAC,gCAKA2C,IAAmB9vL,EAAAA,EAAAA,GAAgB,KACvC2vL,IAAgB,KAGZI,IAAkB/vL,EAAAA,EAAAA,GAAgB,KACtC2vL,OAGIK,IAAsBhwL,EAAAA,EAAAA,GAAgB,KAC1C2vL,IAAgB,GAAO,KAuBnBM,IAAkBjwL,EAAAA,EAAAA,GAAgBiM,UACtC3L,EAAE6Y,iBACF40K,KAEA,MAAM,aAAEmC,GAAiB5vL,EAEnB2lD,QAAckqI,EAAAA,GAAAA,GAA8BD,EAAatzI,OAC3DqJ,GAAO7wD,QACTk2L,EAAarlI,EAAOooI,MAalBvpC,IAAmB9kJ,EAAAA,EAAAA,GAAiBM,IACxC,MAAM,MAAE2lD,GAAU3lD,EAAEC,OACdwkJ,GAAiBC,EAAAA,EAAAA,IAAc/+F,GAEjC8+F,GAAgB3vJ,QAClBk2L,EAAavmC,EAAgBspC,MAI3B+B,IAAuBpwL,EAAAA,EAAAA,GAAgB,MAC3CklJ,EAAAA,GAAAA,GAAsB,IAAM5kJ,GAAMwkJ,GAAiBxkJ,MAG/C4pH,IAAelqH,EAAAA,EAAAA,GAAiB/H,IACpCkzL,EAAoBT,EAAYt5J,OAAO,CAAC+pB,EAAG8B,IAAMA,IAAMhlD,MAGnDo4L,IAAuBrwL,EAAAA,EAAAA,GAAgB,KAC3CmrL,EAAoBT,EAAYxjL,IAAKi0C,IAAC,IACjCA,EACHisI,qBAAqB,QAInBkJ,IAA6BtwL,EAAAA,EAAAA,GAAgB,KAEjDisL,GAAyB,CAAEa,gBADTD,OAId0D,IAAsBvwL,EAAAA,EAAAA,GAAgB,KAC1C,MAAMiwF,GAAYk9F,GAClBC,GAA2Bn9F,GAC3Bg8F,GAAyB,CAAEkB,wBAAyBl9F,MAGhDugG,IAAwBxwL,EAAAA,EAAAA,GAAgB,KAC5CmrL,EAAoBT,EAAYxjL,IAAKi0C,IAAC,IAAWA,EAAGisI,yBAAqB9wL,QAGrEm6L,IAAsBzwL,EAAAA,EAAAA,GAAiB/H,IAC3CkzL,EAAoBT,EAAYxjL,IAAI,CAACm/K,EAAYppI,IAC3CA,IAAMhlD,EACD,IACFouL,EACHe,qBAAsBf,EAAWe,0BAAuB9wL,GAIrD+vL,MAIL/8K,IAAetJ,EAAAA,EAAAA,GAAgB,KACnC,MAAM0wL,EAAM5E,GAAO7uL,QACnB,IAAKyzL,EACH,OAGF,MAAM,MAAExzL,EAAK,OAAEK,GAAWmzL,EAAI9gL,wBAC9B8gL,EAAItpH,QAAQupH,QAAQzzL,MAAQA,EAC5BwzL,EAAItpH,QAAQupH,QAAQpzL,OAASA,KAI/BuhG,EAAAA,GAAAA,GAAkBp3F,EAAK4B,KAEvB3B,EAAAA,GAAAA,GAAc2B,KAEdtL,EAAAA,EAAAA,IAAU,KACR,MAAMs7D,EAAa4yH,GAAcjvL,QAC3B2/B,EAAQpnC,SAASi4B,eAAeo8J,IAEtC,IAAKvwH,IAAe18B,EAAO,OAE3B,MAAM,MAAE1/B,GAAUo8D,EAAW1pD,yBAE7B/D,EAAAA,EAAAA,IAAgB,KACd+wB,EAAMrjC,MAAMmrC,YAAY,yBAA0B,GAAGxnC,UAEtD,CAAC8tC,GAAS5rC,KAEb,MAAMu8C,IAAkEngD,EAAAA,EAAAA,IAAQ,IACvE,EAAGsK,YAAW1G,OAAQw8C,MAC3BnoD,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLqN,QAASvgB,GACTc,KAAK,UACL2N,MAAM,cACN/N,UAAWqoD,EAAa,SAAW,GACnCp6C,QAASsE,EACTE,UAAU,eAAcxS,UAExBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,WAGd,CAACnO,KAEE+9L,IAAY5nL,EAAAA,GAAAA,GAAgB,KAChC,IAAK4kL,GAAiB,OAEtB,MAAMiD,EAAuBrG,GTpdCsG,ESodgCnG,ITndhEzE,GAAI6K,UAAYD,GAChBE,EAAAA,GAAAA,IAAgB9K,IAChBA,GAAI/sL,iBAAiB,MAAM+R,QAAS+lL,IAClCA,EAAGC,YAAY,QAEVhL,GAAIiL,aAAanwH,OAAO5rE,QAAU,GANpC,IAA2B07L,ESqd9B,OAAOD,GAxWoB,IAwW6BA,OAAuBv6L,GAC9E,CAACk0L,EAAcG,EAASiD,KAErBwD,GAAiBrE,IAAuBmB,IAEvCmD,GAAcC,GAAcC,GAAcC,KAAeh2L,EAAAA,EAAAA,IAAQ,IACjE41L,IAAmB/E,GAKjB,CAJYA,GAAqB3jF,MAAOvtD,GAAMwrI,EAAAA,IAA8BhlJ,IAAIwZ,EAAE1c,WACtE4tJ,GAAqB3jF,MAAOvtD,GAAMyrI,EAAAA,IAA8BjlJ,IAAIwZ,EAAE1c,WACtE4tJ,GAAqB3jF,MAAOvtD,GAAMs2I,EAAAA,IAA8B9vJ,IAAIwZ,EAAE1c,WACxE4tJ,GAAqBpyG,KAAM9+B,GAAMwrI,EAAAA,IAA8BhlJ,IAAIwZ,EAAE1c,YAJjC,EAAC,GAAO,GAAO,GAMnE,CAAC4tJ,GAAsB+E,KAEpBM,IAAoBl2L,EAAAA,EAAAA,IAAQ,MAC3B6wL,IACEA,GAAqBpyG,KAAM9+B,IAAOs2I,EAAAA,IAA8B9vJ,IAAIwZ,EAAE1c,WAC5E,CAAC4tJ,KAgBJ,IAdAruL,EAAAA,EAAAA,IAAU,KACR,GAAImvL,KAA4BE,GAKhC,OAJIW,GAAS/wL,SAASc,aAAaiwL,GAAS/wL,SAC5C+wL,GAAS/wL,QAAUoB,OAAOC,WAAW,KACnCgvL,GAAoCH,KA9XJ,KAgY3B,KACDa,GAAS/wL,UACXc,aAAaiwL,GAAS/wL,SACtB+wL,GAAS/wL,aAAU3G,KAGtB,CAAC62L,GAAyBE,MAExBhB,GACH,OAGF,MAAMsF,GAAatF,GAAqBj3L,OAAS,EAE3Cw8L,KACAtF,KACC2B,MACAjD,GAAsBD,GAA2BgC,KAClD4E,IAAc3E,IAIpB,IAAIpsL,GAAQ,GACZ,MAAMixL,GAAoBxF,GAAqBj3L,OAE7CwL,GAAQoqC,GADNqmJ,GACc/E,GAAY,0BAA4B,0BAC/CgF,GACOhF,GAAY,0BAA4B,0BAC/CiF,GACOjF,GAAY,0BAA4B,0BAExCA,GAAY,yBAA2B,yBAN4BuF,GAAmB,KAqGxG,MAAMC,IAAwBrE,KAAmCE,GAC3DoE,GAAoBvoJ,GAAoByI,EAAAA,GAAAA,IAAkBzxC,GAC9DqxL,GAAoBroJ,EACpB,CACEj2C,UDnnBkJ,WConBlJ2+C,QAAQ,IACLlH,GAAQ,QAEf,OACEv3C,EAAAA,GAAAA,GAACoN,EAAAA,EAAK,CACJzB,OAAQA,GACRE,QAASisL,EACTzvJ,OAxGJ,WACE,GAAKuwJ,GAIL,OACEh5L,EAAAA,GAAAA,IAAA,OAAKE,UAAU,yBAAyBuW,IAAKkhC,GAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAC7EC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC0E,OAAK,EAACzE,MAAM,cAAc3N,KAAK,UAAUqS,UAAU,qBAAqBxE,QAAS+pL,EAAQ/3L,UAC/FC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAEbvN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SAAEoN,KAC7B4rL,KAAmBvxK,KAEhB5nB,EAAAA,GAAAA,IAAC0T,GAAAA,EAAY,CACXxT,UAAU,iEACVyT,QAAS20C,GACT10C,UAAU,QAAOzT,SAAA,CAEhBgL,SAASosL,KACRn3L,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,MAAMlF,QAAS4uL,GAAqB58L,SAAEw3C,GAAQ,SAE9DijJ,KACC56L,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,CAEIo+L,KAAoB1E,IAOlBz5L,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,oBAAoBlF,QAASA,IAAMguL,QAAmBl5L,GAAW9C,SAC7EgN,GAAK,0BANR/M,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,kBAAkBlF,QAASA,IAAMguL,IAAmB,GAAMh8L,SACtEgN,GAAK,yBAUTwqL,IAAsBD,IAA2BgC,IAEhDt5L,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,WAAWlF,QAAS8uL,GAA2B98L,SAC3Dw3C,GAAQ2mJ,GAAa,yBAA2B,4BAInDl+L,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,QAAQlF,QAAS8uL,GAA2B98L,SACxDm+L,GAAa,oBAAsB,mBAIzC5E,KAAwBnC,GAAkB4G,KACzC/9L,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAM2mL,GAAmC,WAAa,WACtD7rL,QAAS+uL,GAAoB/8L,SAE5BgN,GAAK6sL,GAAmC,wBAA0B,uBAGtEN,IAAuB2E,IAAqBlzL,SAASosL,KACpDwD,IACE36L,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,kBAAkBlF,QAASgvL,GAAsBh9L,SAC7Dw3C,GAAQ,gCAGXv3C,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,UAAUlF,QAAS6uL,GAAqB78L,SACpDw3C,GAAQ,kCAMlB2mJ,KACC3E,IACEv5L,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CACPT,KAAK,kBAELlF,QAASA,IAAMyrL,IAAqB,GAAOz5L,SAC5C,uBAKDC,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,UAAUlF,QAASA,IAAMyrL,IAAqB,GAAMz5L,SAAC,0BASpF,CAcYwyF,GACRzyF,WAAWqW,EAAAA,GAAAA,GD5nBM,WC8nBfikL,IAAa58K,IACZu8K,ID/nBmH,WCgoBpH36L,IDhoBmC,WCioBnC65L,IDjoB+D,WCkoB/DxB,GAAkB,wBAEpBv5G,iBAAe,EACftyB,oBAAkB,EAAA7rD,UAElBH,EAAAA,GAAAA,IAAA,OACEE,UAAW0d,GACX+gL,YAAalE,GACbmE,OAAQhC,GACRiC,WAjSN,SAAwB5xL,GACtBA,EAAE6Y,iBAEEgzK,GAAelvL,UACjBoB,OAAON,aAAaouL,GAAelvL,SACnCkvL,GAAelvL,aAAU3G,EAE7B,EA2RM67L,YAlUmB7xL,IACvB,MAAQ8xL,cAAeC,EAAU9xL,OAAQ+xL,GAAehyL,EAGnDgyL,EAA8B5sK,QAAQ,IAAIzU,QAAyBohL,IACtElG,GAAelvL,QAAUoB,OAAOC,WAAWyvL,GAhOnB,MAoOtBuE,GAAeA,EAA2BjyK,QAAQ,IAAIpP,QAItDohL,GACF/xL,EAAEuJ,kBAGJkkL,OAkTIvsL,QAASusL,GACT,0BAAyB/iJ,GAAQ,4BAA6B,IAC9D,mBAAax3C,SAAA,EAEbC,EAAAA,GAAAA,GAAA,OAAKF,UDjpBwb,WCipBjZC,UAC1CC,EAAAA,GAAAA,GAAA,QAAMF,UDlpB8c,WCkpB/a0c,EAAE,IAAIsG,EAAE,IAAIrZ,MAAM,OAAOK,OAAO,OAAOg1L,GAAG,SAEjF9+L,EAAAA,GAAAA,GAAA,OACEF,WAAWqW,EAAAA,GAAAA,GDrpB4J,WCupBrK,gBACAkoL,IDxpBmP,YC0pBrPr1I,SAAU8wI,GAAwB/5L,SAEjC64L,GAAqBnlL,IAAI,CAACm/K,EAAYppI,KACrCxpD,EAAAA,GAAAA,GAAC2yL,GAAmB,CAClBC,WAAYA,EACZC,wBAAyByG,GACzBxG,qBAAsByG,GACtB73L,SAA0C,IAAhCk3L,GAAqBj3L,OAC/B6C,MAAOglD,EAEP3S,SAAU4/E,GACVs8D,gBAAiBiK,IAFZpK,EAAWmM,UAAYv1I,OAMlC5pD,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GD1qBmS,WC4qB5SkoL,ID5qB0W,YC6qB1Wt+L,SAAA,EAEFC,EAAAA,GAAAA,GAAC21L,GAAc,CACbhqL,OAAQ+vL,GACR7F,cAAegG,GACfjG,iBAAkBgG,GAClB/vL,QAAS8vL,MAEX37L,EAAAA,GAAAA,GAACg/L,GAAAA,EAAY,CACXrzL,OAAQqvL,GACRvtF,OAAQwtF,GACR7tF,aAAc8tF,GACd3C,eAAgBA,GAChBD,qBAAsBA,GACtBJ,cAAeiD,GACfpsF,oBAAqBosF,GACrBtvL,QAASuvL,MAEXp7L,EAAAA,GAAAA,GAACi/L,GAAAA,EAAkB,CACjBzyL,OAAQA,EACRb,OAAQ2vL,GACRhD,qBAAsBA,GACtBvpF,oBAAqBwsF,GACrB1vL,QAAS2vL,MAEX57L,EAAAA,GAAAA,IAAA,OAAKE,UDtsB4X,WCssBlWC,SAAA,EAC7BC,EAAAA,GAAAA,GAACk/L,GAAAA,EAAgB,CACf1yL,OAAQA,EACR8C,SAAUA,EACVlQ,SAAUA,GACVia,QAASA,EACT4/K,iBAAkBA,GAClBC,eAAgBA,GAChBC,gBAAiBA,GACjBpqF,oBAAqBA,EACrBkpF,eAAgBA,EAChBC,cAAeA,EACfiH,mBAAiB,EACjBC,kBAAgB,EAChBt/L,UAAU,qDACVmgG,SAAS,aACTw3F,eAAgBA,KAElBz3L,EAAAA,GAAAA,GAACq/L,GAAAA,EAAY,CACXprL,IAAK6oD,GACLj9D,GAAIu2L,GACJ5pL,OAAQA,EACR8C,SAAUA,EACVgwL,wBAAsB,EACtBC,kBAAkB,aAClBlmL,QAASA,EACTG,SAAU7N,GACVurL,QAASA,EACTr3I,gBAAiBk7I,EAAAA,IACjBzrI,YAAa/X,GAAQ,cACrB37B,SAAU+7K,EACVC,OAAQ0E,GACRtzI,SAAUixI,GACVuF,aAAcz0L,QAAQsO,GAAWm+K,GAA2BP,EAAYt1L,QACxEo1L,aAAcoG,GACdsC,oBAAqBrgM,IAAY65L,GACjCyG,kBAAmBvG,MAErBv5L,EAAAA,GAAAA,IAAA,OAAKE,UD5uB0iB,WC4uB5gBC,SAAA,EACjCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLqG,IAAKwkL,GACL34L,UD/uB6jB,WCgvB7jBI,KAAK,UACL6N,QAASuuL,GACTt2K,cAAeoxK,EAAwBnhH,QAAoBpzE,EAAU9C,SAEpEk6K,IAAmBkd,EAAiB5/I,GAAQ,QACzC4/I,EAAiB5/I,GAAQ,QAAU+mJ,KAExClH,IACCp3L,EAAAA,GAAAA,GAAC2/L,GAAAA,EAAc,CACbh0L,OAAQswL,GACR9D,YAAaA,GAAed,EAC5BU,aAAe1jK,OAAoCxxB,EAAnBw5L,GAChCuD,eAAgBrD,GAChB1wL,QAASqqE,GACTpqE,oBAAqBqqE,GACrBlnB,gBAAiB56B,EACjB+jK,iBAAkBA,EAClBre,uBAAwBA,qBCtY1C,IAAep7K,EAAAA,EAAAA,IApVGkhM,EAChBl0L,SACAm0L,SACAC,oBACAC,kBATiC,GAUjCpI,SACAE,cAEA,MAAMmI,GAAmB52L,EAAAA,EAAAA,MACnB62L,GAAiB72L,EAAAA,EAAAA,OAEhB4hH,EAAUk1E,IAAeh0L,EAAAA,EAAAA,IAAiB,KAC1CqB,EAAS4yL,IAAcj0L,EAAAA,EAAAA,IAAmB,CAAC,MAC3Ck0L,EAAaC,IAAkBn0L,EAAAA,EAAAA,KAAS,IACxCo0L,EAAmBC,IAAwBr0L,EAAAA,EAAAA,KAAS,IACpDs0L,EAAYC,IAAiBv0L,EAAAA,EAAAA,IAAS2zL,IAAU,IAChDa,EAAUC,IAAez0L,EAAAA,EAAAA,IAAiB,KAC1C00L,EAAeC,IAAoB30L,EAAAA,EAAAA,OACnC40L,EAAWC,IAAgB70L,EAAAA,EAAAA,KAAkB,GAE9CY,GAAOC,EAAAA,EAAAA,KAEPi0L,GAAuB10L,EAAAA,EAAAA,GAAiBM,IAC5C+zL,EAAY/zL,EAAEC,OAAOH,SAGjB07K,GAAa97K,EAAAA,EAAAA,GAAiB0H,IAC9BtI,GAAUsI,EAAIzK,SAChByK,EAAIzK,QAAQi0D,WAIhBlzD,EAAAA,EAAAA,IAAU,IAAOoB,GAAS6vB,EAAAA,EAAAA,GAAsBs8J,QAAWj1L,EAAY,CAAC8I,EAAQmsL,KAChFvtL,EAAAA,EAAAA,IAAU,KACHoB,IACHw0L,EAAY,IACZC,EAAW,CAAC,KACZE,GAAe,GACfE,GAAqB,GACrBE,EAAcZ,IAAU,GACxBc,EAAY,IACZE,OAAiBj+L,GACjBm+L,GAAa,KAEd,CAAClB,EAAQn0L,KAEZpB,EAAAA,EAAAA,IAAU,IAAM89K,EAAW4X,GAAmB,CAAC5X,EAAY18K,IAE3D,MAAMu1L,GAAe30L,EAAAA,EAAAA,GAAgB,CAAC40L,EAAuB,MAC3Df,EAAW,IAAIe,EAAY,MAE3BxY,EAAAA,EAAAA,IAAoB,KAClB,MAAM3/I,EAAOk3J,EAAe12L,QACvBw/B,IAIL8H,EAAAA,EAAAA,IAAe,KACb9H,EAAK0I,SAAS,CAAEruB,IAAK2lB,EAAK8a,aAAcs9I,SAAU,iBAKlDC,GAAe90L,EAAAA,EAAAA,GAAgB,KAEnC,GADAy0L,GAAa,IACRr1L,EACH,OAGF,MAAM21L,EAAyBb,SAAiC59L,IAAlBg+L,IAAgCrzL,EAAQqzL,GAAetzH,QAE/Fg0H,EAAU/zL,EACbiG,IAAI,CAACqB,EAAMtQ,KAGV,GAFAsQ,EAAOA,EAAKy4D,OAIZ,MAAO,CACLz4D,KAAM,CACJA,QAEFm0B,OAAQ8Z,OAAOv+C,MACXA,IAAUq8L,GAAiB,CAAEW,SAAS,MAE3C7jK,OAAO5yB,SAEN02L,EAAkBx2E,EAAS19C,OAAOm0H,UAAU,EAzF1B,KA0FxB,IAAKD,GAAmBF,EAAQ5/L,OAAS,EAAG,CAE1C,GADAw+L,EAAYsB,GACRF,EAAQ5/L,OAAQ,CAClB,MAAMggM,EAAiBn0L,EAAQiG,IAAKmuL,GAAMA,EAAEr0H,OAAOm0H,UAAU,EA9F3C,MA8FkE/jK,OAAO5yB,SACvF42L,EAAehgM,OAAS,EAC1Bu/L,EAAaS,GAEbvB,EAAWuB,EAEf,MACET,IAGF,YADAF,GAAa,EAEf,CAEA,GAAIM,EAEF,YADAN,GAAa,GAIf,MAAMvxD,EAAsB,CAC1BoyD,QAAS,CACP52E,SAAU,CACRn2G,KAAM2sL,GAERF,cACKlB,GAAe,CAAEztJ,UAAU,MAC5B2tJ,GAAqB,CAAEuB,gBAAgB,MACvCrB,GAAc,CAAEsB,MAAM,KAI9B,GAAItB,EAAY,CACd,MAAM,KAAE3rL,EAAI,SAAE29E,GAAckuG,IAAY1O,EAAAA,GAAAA,IAAyB0O,EAASe,UAAU,EA3H9D,OA4HjB,CAAC,EAENjyD,EAAQsyD,KAAO,CACbC,eAAgB,CAACj/I,OAAO89I,OACpB/rL,GAAQ,CAAE6rL,SAAU7rL,MACpB29E,GAAY,CAAEwvG,iBAAkBxvG,GAExC,CAEAmlG,EAAOnoD,KAGHyyD,GAAe31L,EAAAA,EAAAA,GAAgB,CAAC/H,EAAesQ,KACnD,MAAMqsL,EAAa,IAAI3zL,GACvB2zL,EAAW38L,GAASsQ,EAChBqsL,EAAWA,EAAWx/L,OAAS,GAAG4rE,OAAO5rE,QAAUw/L,EAAWx/L,OAASq+L,EACzEkB,EAAaC,GAEbf,EAAWe,KAITgB,GAAe51L,EAAAA,EAAAA,GAAiB/H,IACpC,MAAM28L,EAAa,IAAI3zL,GACvB2zL,EAAWtnE,OAAOr1H,EAAO,GACzB47L,EAAWe,QAEWt+L,IAAlBg+L,IACEA,IAAkBr8L,EACpBs8L,OAAiBj+L,GACR2B,EAAQq8L,GACjBC,EAAiBD,EAAgB,KAIrClY,EAAAA,EAAAA,IAAoB,KACbuX,EAAe12L,SAIpB02L,EAAe12L,QAAQjG,UAAU8zB,OAAO,YAAa6oK,EAAe12L,QAAQs6C,aAxK1D,SA4KhBs+I,GAA4B71L,EAAAA,EAAAA,GAAiBiwF,IACjDskG,EAAiBx7K,OAAOk3E,MAGpB6lG,GAA0B91L,EAAAA,EAAAA,GAAiBM,IAC/CyzL,EAAezzL,EAAEC,OAAOo8B,WAGpBo5J,GAA8B/1L,EAAAA,EAAAA,GAAiBM,IACnD2zL,EAAqB3zL,EAAEC,OAAOo8B,WAG1Bq5J,GAAuBh2L,EAAAA,EAAAA,GAAiBM,IAC5C6zL,EAAc7zL,EAAEC,OAAOo8B,WAGnBs5J,GAAiBj2L,EAAAA,EAAAA,GAAiBM,IACpB,KAAdA,EAAE6vC,SACJ2kJ,MAIEoB,GAAuBl2L,EAAAA,EAAAA,GAAiBM,IAC5CszL,EAAYtzL,EAAEC,OAAOH,SAGjB+1L,GAAmBn2L,EAAAA,EAAAA,GAAgB,KACvC,GAAIw0L,IAAc91E,EAAS19C,OAAO5rE,OAChC,OAAOoL,EAAK,+BAMV41L,GAAkBp2L,EAAAA,EAAAA,GAAiB/H,IACvC,MAAMm9L,EAAiBn0L,EAAQiG,IAAKmuL,GAAMA,EAAEr0H,QAAQ5vC,OAAQikK,GAAMA,EAAEjgM,QACpE,GAAIo/L,GAAaY,EAAehgM,OAAS,IAAM6L,EAAQhJ,GAAO+oE,OAAO5rE,OACnE,OAAOoL,EAAK,8BAwBhB,SAAS61L,IACP,OAAOp1L,EAAQiG,IAAI,CAACw1B,EAAQzkC,KAC1B5E,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACR00E,UA3OgB,IA4OhBn1E,MAAO1I,IAAUgJ,EAAQ7L,OAAS,GAAK6L,EAAQ7L,SAAWq+L,EACtDjzL,EAAK,cACLA,EAAK,wBACTw+B,MAAOo3J,EAAgBn+L,GACvBmI,MAAOs8B,EAEPx7B,SAAWZ,GAAMq1L,EAAa19L,EAAOqI,EAAE6X,cAAc/X,OACrDk2L,WAAYL,IAEbh+L,IAAUgJ,EAAQ7L,OAAS,IAC1B3B,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,uBACVwS,OAAK,EACLzE,MAAM,cACN3N,KAAK,UACLqS,UAAWxF,EAAK,UAEhBgB,QAASA,IAAMo0L,EAAa39L,GAAOzE,UAEnCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,eAKrB,CAeA,OACE3N,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CAACzB,OAAQA,EAAQE,QAASisL,EAASzvJ,QA9DvCzoC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,yBAAwBC,SAAA,EACrCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC0E,OAAK,EAACzE,MAAM,cAAc3N,KAAK,UAAUqS,UAAU,uBAAuBxE,QAAS+pL,EAAQ/3L,UACjGC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAEbvN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SAAEgN,EAAK,cACnC/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLC,MAAM,UACN3N,KAAK,UACLJ,UAAU,sBACViO,QAASszL,EAAathM,SAErBgN,EAAK,eAmDqDjN,UAAU,YAAWC,SAAA,EACpFC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRsG,IAAKgsL,EACL/yL,MAAOH,EAAK,gBACZJ,MAAOs+G,EACP1/E,MAAOm3J,IACPj1L,SAAUg1L,EACVI,WAAYL,KAEdxiM,EAAAA,GAAAA,GAAA,OAAKF,UAAU,qBAEfF,EAAAA,GAAAA,IAAA,OAAKE,UAAU,6BAA6BmU,IAAKisL,EAAengM,SAAA,EAC9DC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,iBAAgBC,SAAEgN,EAAK,iBAEpCg0L,GAvBP,WACE,MAAMY,EAAiBn0L,EAAQiG,IAAKmuL,GAAMA,EAAEr0H,QAAQ5vC,OAAQikK,GAAMA,EAAEjgM,QAEpE,OAAO8+L,SAAiC59L,IAAlBg+L,IAAgCc,EAAed,MACnE7gM,EAAAA,GAAAA,GAAA,KAAGF,UAAU,aAAYC,SAAEgN,EAAK,6BAEpC,CAiBoB+1L,GACbrC,GACCzgM,EAAAA,GAAAA,GAACsN,GAAAA,EAAU,CACTC,KAAK,gBACLC,QA/BDo1L,IACJnvL,IAAI,CAACvG,EAAO1I,KAAU,CAAGmI,MAAOo2C,OAAOv+C,GAAQ0I,QAAO2yI,QAASryI,EAAQhJ,GAAO+oE,UA+BzE7/D,SAAUq1C,OAAO89I,GACjBpzL,SAAU20L,IAGZQ,QAKJ5iM,EAAAA,GAAAA,GAAA,OAAKF,UAAU,qBAEfF,EAAAA,GAAAA,IAAA,OAAKE,UAAU,YAAWC,SAAA,EACxBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wBAAuBC,SAAA,EAClCggM,IACA//L,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,iBACZm8B,QAASm3J,EACT5yL,SAAU40L,KAGdriM,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,gBACZm8B,QAASq3J,EACTpgL,SAAUsgL,EACVhzL,SAAU60L,KAEZtiM,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,YACZm8B,QAASu3J,EACTtgL,SAAUogL,QAAgC19L,IAAXi9L,EAC/BryL,SAAU80L,OAGb9B,IACC7gM,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,iBAAgBC,SAAEgN,EAAK,+BACrC/M,EAAAA,GAAAA,GAACsiH,GAAAA,EAAQ,CACP31G,MAAOg0L,EACPlzL,SAAUwzL,EACVx+E,mBAAiB,KAEnBziH,EAAAA,GAAAA,GAAA,OAAKF,UAAU,OAAMC,SAAEgN,EAAK,2C,gBCpUxC,MAmWA,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAU8mC,YACT,MAAM,UAAE+L,GAAc7yC,EAEtB,MAAO,CACL81L,eAFqBhvJ,GAAO1vB,WAAYsc,EAAAA,EAAAA,KAAkB1zB,EAAQ8mC,EAAM37B,OAAQ27B,EAAM1vB,gBAAa5V,EAGnGkgM,cAAe7uJ,EAAU8uJ,aACzBC,eAAgB/uJ,EAAUgvJ,mBAC1BC,cAAejvJ,EAAUkvJ,oBARXz0L,CAhWE00L,EACpBl7J,QACA46J,gBACAE,iBACAE,gBACAhM,iBACAS,SACAE,cAEA,MAAM,SAAEwL,EAAQ,mBAAEC,EAAkB,eAAEC,IAAmBx3L,EAAAA,EAAAA,MAEnDy3L,GAAgBp6L,EAAAA,EAAAA,MAChBq6L,GAAer6L,EAAAA,EAAAA,OAEd8D,EAAO4kK,IAAY5lK,EAAAA,EAAAA,IAAiB,KACpCg9C,EAAOw6I,IAAYx3L,EAAAA,EAAAA,IAAiB,CAAC,CAAEtM,IAAI+jM,EAAAA,GAAAA,KAA0B9uL,KAAM,OAC3E+uL,EAAmBC,IAAwB33L,EAAAA,EAAAA,KAAS,IACpD43L,EAAqBC,IAA0B73L,EAAAA,EAAAA,KAAS,IACxD40L,EAAWC,IAAgB70L,EAAAA,EAAAA,KAAkB,GAE9CY,GAAOyqC,EAAAA,GAAAA,KAEP7rC,EAASZ,QAAQo9B,GACjBsqE,GAAiBtiE,EAAAA,GAAAA,GAAiBhI,GAElC87J,EAAgBxxF,GAAgByxF,aAAe/M,GAAgBgN,WAE/DC,EAAcjN,GAAgBpkL,QAAQy2E,MAAMA,KAE5C66G,GAAct8L,EAAAA,EAAAA,IAAQ,IACrBk8L,GAAkBG,EAIhBA,EAAYj7I,MAAM11C,IAAK7E,IAAI,CAChC/O,GAAI+O,EAAK/O,GACTiV,KAAMlG,EAAKzB,MAAM2H,KACjB7K,YAAY,KANLs6B,GAAAA,EAQR,CAAC0/J,EAAeG,IAEb/b,GAAa97K,EAAAA,EAAAA,GAAiB0H,IAC9BtI,GAAUsI,EAAIzK,SAChByK,EAAIzK,QAAQi0D,WAIhB5hD,EAAAA,EAAAA,IAAgB,KACd,GAAIuoL,IACFryB,EAASqyB,EAAYj3L,MAAM2H,MAC3BgvL,EAAqBM,EAAYE,kBAAmB,GACpDN,EAAuBI,EAAYG,oBAAqB,IACnDN,GAAe,CAClB,MAAMO,EAAeJ,EAAYj7I,MAAM11C,IAAK7E,IAAI,CAC9C/O,GAAI+O,EAAK/O,GACTiV,KAAMlG,EAAKzB,MAAM2H,QAEf0vL,EAAa7iM,OAASohM,GACxByB,EAAaxxL,KAAK,CAAEnT,IAAI+jM,EAAAA,GAAAA,KAA0B9uL,KAAM,KAE1D6uL,EAASa,EACX,GAED,CAACJ,EAAaH,EAAelB,KAEhCx4L,EAAAA,EAAAA,IAAU,IAAOoB,GAAS6vB,EAAAA,EAAAA,GAAsBs8J,QAAWj1L,EAAY,CAAC8I,EAAQmsL,KAChFvtL,EAAAA,EAAAA,IAAU,KACHoB,IACHomK,EAAS,IACT4xB,EAAS,CAAC,CAAE9jM,IAAI+jM,EAAAA,GAAAA,KAA0B9uL,KAAM,MAChDgvL,GAAqB,GACrBE,GAAuB,GACvBhD,GAAa,KAEd,CAACr1L,KAEJpB,EAAAA,EAAAA,IAAU,KACJoB,IAEFmlC,EAAAA,EAAAA,IAAe,KACb,GAAI2hE,GAAgByxF,WAAY,CAC9B,MAAMO,EAASf,EAAal6L,SAAS9D,iBAAiB,SAChDg/L,EAAYD,IAASA,EAAO9iM,OAAS,GAC3C+iM,GAAWjnI,OACb,MACE4qH,EAAWob,MAIhB,CAACpb,EAAY18K,EAAQ8mG,GAAgByxF,aAExC,MAAMS,GAAap4L,EAAAA,EAAAA,GAAiBq4L,IAClC,MAAM/kM,GAAK+jM,EAAAA,GAAAA,KACXD,EAAS,IAAIiB,EAAU,CAAE/kM,KAAIiV,KAAM,OAEnC6zK,EAAAA,EAAAA,IAAoB,KAClB,MAAM3/I,EAAO06J,EAAal6L,QACrBw/B,IAIL8H,EAAAA,EAAAA,IAAe,KACb9H,EAAK0I,SAAS,CAAEruB,IAAK2lB,EAAK8a,aAAcs9I,SAAU,iBAKlDC,GAAe90L,EAAAA,EAAAA,GAAgB,KAEnC,GADAy0L,GAAa,IACRr1L,EACH,OAGF,MAAMk5L,EAAY17I,EACf11C,IAAK7E,IACJ,MAAMkG,EAAOlG,EAAKkG,KAAKy4D,OAEvB,GAAKz4D,EAEL,MAAO,CACLjV,GAAI+O,EAAK/O,GACTsN,MAAO,CACL2H,KAAMA,EAAK4sL,UAAU,EAAGyB,OAG3BxlK,OAAO5yB,SAEN+5L,EAAe33L,EAAMogE,OAAOm0H,UAAU,EAAGuB,GAC/C,IAAK6B,GAAqC,IAArBD,EAAUljM,OAAc,CAE3C,GADAowK,EAAS+yB,GACLD,EAAUljM,OAAQ,CACpB,MAAMojM,EAAe57I,EAAM11C,IAAKmuL,IAAC,IAC1BA,EAAG9sL,KAAM8sL,EAAE9sL,KAAKy4D,OAAOm0H,UAAU,EAAGyB,MACxCxlK,OAAQikK,GAAMA,EAAE9sL,KAAKnT,QACI,IAAxBojM,EAAapjM,OACfgjM,EAAW,IAEXhB,EAAS,IAAIoB,EAAc,CAAEllM,IAAI+jM,EAAAA,GAAAA,KAA0B9uL,KAAM,KAErE,MACE6vL,EAAW,IAGb,YADA3D,GAAa,EAEf,CAEA,GAAIiD,GAAiB9M,EAOnB,OANAqM,EAAe,CACbh3L,OAAQ2qL,EAAe3qL,OACvBiM,UAAW0+K,EAAet3L,GAC1BspD,MAAO07I,SAETtB,IAIF,MAAM9zD,EAA2B,CAC/BjmD,KAAM,CACJr8E,MAAO,CACL2H,KAAMgwL,GAER37I,MAAO07I,EACPP,gBAAiBT,EACjBU,kBAAmBR,IAInB5M,EACFmM,EAAS,CACP92L,OAAQ2qL,EAAe3qL,OACvBg9E,KAAMimD,EACNh3H,UAAW0+K,EAAet3L,KAG5B+3L,EAAOnoD,GAGT8zD,MAGIyB,GAAaz4L,EAAAA,EAAAA,GAAgB,CAAC/H,EAAesQ,KACjD,MAAM8vL,EAAW,IAAIz7I,GACrBy7I,EAASpgM,GAAS,IAAKogM,EAASpgM,GAAQsQ,QACpC8vL,EAASA,EAASjjM,OAAS,GAAGmT,KAAKy4D,OAAO5rE,QAAUijM,EAASjjM,OAASohM,EACxE4B,EAAWC,GAEXjB,EAASiB,KAIPK,GAAa14L,EAAAA,EAAAA,GAAiB/H,IAClC,MAAMogM,EAAW,IAAIz7I,GACrBy7I,EAAS/qE,OAAOr1H,EAAO,GACvBm/L,EAASiB,IAETjc,EAAAA,EAAAA,IAAoB,KACb+a,EAAal6L,SAIlBk6L,EAAal6L,QAAQjG,UAAU8zB,OAAO,YAAaqsK,EAAal6L,QAAQs6C,aA3MtD,SA+MhBohJ,GAAgC34L,EAAAA,EAAAA,GAAiBM,IACrDi3L,EAAqBj3L,EAAEC,OAAOo8B,WAE1Bi8J,GAAkC54L,EAAAA,EAAAA,GAAiBM,IACvDm3L,EAAuBn3L,EAAEC,OAAOo8B,WAG5Bs5J,GAAiBj2L,EAAAA,EAAAA,GAAiBM,IACxB,UAAVA,EAAE4Y,KACJ47K,MAIE/uB,GAAoB/lK,EAAAA,EAAAA,GAAiBM,IACzCklK,EAASllK,EAAEC,OAAOH,SAGdy4L,GAAgB74L,EAAAA,EAAAA,GAAgB,KACpC,GAAIw0L,IAAc5zL,EAAMogE,OAAO5rE,OAC7B,OAAOoL,EAAK,8BAMVs4L,GAAgB94L,EAAAA,EAAAA,GAAiB/H,IACrC,MAAMugM,EAAe57I,EAAM11C,IAAKmuL,GAAMA,EAAE9sL,KAAKy4D,QAAQ5vC,OAAQikK,GAAMA,EAAEjgM,QACrE,GAAIo/L,GAAagE,EAAapjM,OAAS,IAAMwnD,EAAM3kD,GAAOsQ,KAAKy4D,OAAO5rE,OACpE,OAAOoL,EAAK,8BA4DVu4L,EAAiBvC,EAAgB55I,EAAMxnD,QAAUsiM,GAAiBG,EAAcA,EAAYj7I,MAAMxnD,OAAS,GAEjH,OACE/B,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CAACzB,OAAQA,EAAQE,QAASisL,EAASzvJ,OA1D3C,WACE,MAAMqtE,EAAauuF,EAAgB,sBAC/B9M,EAAiB,oBAAsB,mBAC3C,OACEv3L,EAAAA,GAAAA,IAAA,OAAKE,UAAU,yBAAwBC,SAAA,EACrCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC0E,OAAK,EAACzE,MAAM,cAAc3N,KAAK,UAAUqS,UAAWxF,EAAK,kBAAmBgB,QAAS+pL,EAAQ/3L,UACnGC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAEbvN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SAAEgN,EAAK2oG,MACnC11G,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLC,MAAM,UACN3N,KAAK,UACLJ,UAAU,sBACViO,QAASszL,EAAathM,SAErBgN,EAAKk3L,EAAgB,MAAQ9M,EAAiB,OAAS,cAIhE,CAuCmD5kG,GAAgBzyF,UAAU,gBAAeC,SAAA,EACtFkkM,IACAjkM,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRsG,IAAKwvL,EACLv2L,MAAOH,EAAK,cACZJ,MAAOQ,EACPo+B,MAAO65J,IACP33L,SAAU6kK,EACVuwB,WAAYL,IAGfyB,IACCjkM,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iBAAgBC,SAC5BoN,KAGLnN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,qBAEfF,EAAAA,GAAAA,IAAA,OAAKE,UAAU,6BAA6BmU,IAAKyvL,EAAa3jM,SAAA,EAC5DC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,eAAcC,SACzBgN,EAAK,mBAzDd,WACE,MAAMw4L,EAAgB,IAAIlB,KAAgBl7I,GAC1C,OAAOo8I,EAAc9xL,IAAI,CAAC7E,EAAMpK,KAC9B,MAAMghM,EAAahhM,EAAQ6/L,EAAY1iM,OACvC,OACE/B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACR00E,UA3Qc,IA4Qdn1E,MAAO1I,IAAU+gM,EAAc5jM,OAAS,GAAK4jM,EAAc5jM,SAAWohM,EAClEh2L,EAAK,aACLA,EAAK,gBACTw+B,MAAO85J,EAAcG,GACrB74L,MAAOiC,EAAKkG,KACZqL,SAAUvR,EAAK3E,WACfwD,SAAWZ,GAAMm4L,EAAWQ,EAAY34L,EAAE6X,cAAc/X,OACxDk2L,WAAYL,IAEbh+L,IAAU+gM,EAAc5jM,OAAS,IAAMiN,EAAK3E,aAC3CjK,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,qBACVwS,OAAK,EACLzE,MAAM,cACN3N,KAAK,UACLqS,UAAWxF,EAAK,UAChBgB,QAASA,IAAMk3L,EAAWO,GAAYzlM,UAEtCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,gBAMvB,CA4BOk4L,OAIHzlM,EAAAA,GAAAA,GAAA,OAAKF,UAAU,mBAAkBC,SAC9BgN,EAAK,0BAA2B,CAC/BqmB,MAAOkyK,GACN,CACDrlI,YAAaqlI,OAIjBtlM,EAAAA,GAAAA,GAAA,OAAKF,UAAU,qBAEbmkM,IACAjkM,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iBAAgBC,UAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wBAAuBC,SAAA,EACpCC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,uBACZm8B,QAAS26J,EACTp2L,SAAUy3L,KAEZllM,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,yBACZm8B,QAAS66J,EACTt2L,SAAU03L,e,4BCxXxB,MAuCA,IAAexmM,EAAAA,EAAAA,IAvCmB+mM,EAChC3yG,QAAOt1B,QAAO1vD,cAEd,MAAMwW,GAAchY,EAAAA,EAAAA,GAAiBM,IAEnCA,EAAE6Y,iBAEF3X,EAAQglF,EAAM4yG,OAAQ5yG,EAAMlzF,MAGxBC,GAAYqW,EAAAA,GAAAA,GAChB,cACAsnD,GAAS,SAGL35D,EAAM,kBAAkBivF,EAAM6yG,YAC9BnlJ,EAAWolJ,GAAAA,GAAc33J,IAAIpqC,GAEnC,OACE9D,EAAAA,GAAAA,GAAA,OACEF,UAAWA,EACXuvC,YAAa9qB,EACbpX,MAAO,IAAI4lF,EAAM+yG,MAAM,MAAM/lM,SAE5BgmM,EAAAA,GAAqBhzG,EAAM4yG,QAC1B3lM,EAAAA,GAAAA,GAAA,OACE8D,IAAKA,EACLhE,UAAY2gD,OAAwC59C,EAA7B,2BACvB0lB,IAAKwqE,EAAM4yG,OACXK,QAAQ,OACR,YAAWliM,EACXrD,OAASggD,OAA6B59C,EAAlBojM,GAAAA,GACpBtiM,WAAW,QChCfuiM,GAAe,KAAQtwL,EAAAA,EACvBuwL,GAAwB,IAAOvwL,EAAAA,EAC/BwwL,GAA+B,GAAMxwL,EAAAA,EACrCywL,GAA2B,GAAMzwL,EAAAA,EAuEvC,IAAejX,EAAAA,EAAAA,IA5DqB2nM,EAClCC,WAAU/hM,QAAOgiM,YAAWvkG,sBAAqBn+E,eAAco0K,oBAE/D,MAAMjkL,GAAM5K,EAAAA,EAAAA,OAEZq9H,EAAAA,GAAAA,IAAezyH,EAAKguF,GAEpB,MAAMj+E,GAAuBm2B,EAAAA,GAAAA,GAA6Br2B,GAEpD/W,GAAOC,EAAAA,EAAAA,MACP,SAAE5N,IAAaC,EAAAA,EAAAA,MAEfonM,EAAernM,EACjB8T,KAAKmI,OACJ4c,EAAAA,EAAW/tB,MAAMT,MAAQ48L,GAA2BH,KAAiBt+F,EAAAA,IAAoBs+F,KA7B9D,EAgC1Bp8L,EAASoJ,KAAKmtE,KAAKkmH,EAAS94F,OAAO9rG,OAAS8kM,IAC7C7+F,EAAAA,KAAqBxoG,EAAWgnM,GAA+BD,KAEpE,OACEvmM,EAAAA,GAAAA,IAAA,OACEqU,IAAKA,EAELpU,GAAI,kBAAkB2E,IACtB1E,UAAU,aAAYC,SAAA,EAEtBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,oBAAmBC,UAChCC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,kBAAkBuW,IAAI,OAAMtW,SACtCgN,EAAKw5L,EAAS1mM,KAAOiqG,EAAAA,IAAuB,iBAAmB,QAAQtlG,UAG5ExE,EAAAA,GAAAA,GAAA,OACEF,WAAWqW,EAAAA,GAAAA,GAAe,uBAAwB6N,GAClDle,MAAO,WAAWgE,OAClBuM,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAEnC+jB,GAAgByiL,EAAS94F,OAAOh6F,IAAKlG,IACpC,MAAMwlF,EAAQyzG,EAAUj5L,GAExB,IAAKwlF,EACH,OAIF,MAAM2zG,EAAiB,OAAQ3zG,EAAQA,EAAQA,EAAM,GAErD,OACE/yF,EAAAA,GAAAA,GAAC0lM,GAAW,CAEV3yG,MAAO2zG,EACP34L,QAASmqL,GAFJwO,EAAe7mM,UA1BvB0mM,EAAS1mM,MCZd8mM,GAA8C,CAClDlZ,OAAQ,SACRmZ,OAAQ,QACRC,OAAQ,UACRC,MAAO,OACPC,SAAU,QACVC,OAAQ,MACRC,QAAS,OACTC,QAAS,WACTC,MAAO,QAKHpnG,GAAe,KAAOnqF,EAAAA,EACtBm3F,GAAsB,MAAQn3F,EAAAA,EAG9BwxL,GAAmC,GAEzC,IAAIC,GACAC,GACAC,GA4LJ,UAAe5oM,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IAAiC2yD,EAAAA,GAAAA,IAAK3yD,EAAQ,CAAC,iBAD9BsN,CA1L2B64L,EAC7C1nM,YACAu2L,eACA6B,oBAEA,MAAM5uK,GAAejgB,EAAAA,EAAAA,MACfqsE,GAAYrsE,EAAAA,EAAAA,OAEXmoI,EAAYi2D,IAAiBt7L,EAAAA,EAAAA,OAC7BshG,EAAQi6F,IAAav7L,EAAAA,EAAAA,OACrBw7L,EAAqBC,IAA0Bz7L,EAAAA,EAAAA,IAAS,IACzD,SAAE/M,IAAaC,EAAAA,EAAAA,OAEnBwkD,aAAcmrD,EACdvrD,cAAewrD,GACb1rD,MAEI88C,QAAS4B,IAAwBtB,EAAAA,GAAAA,IAAwB,CAC/DC,QAASt3E,EACTg4E,WA3B0B,KA4BxBx+C,IACFA,EAAQrrC,QAASqpF,IACf,MAAM,GAAEjhG,GAAOihG,EAAMh0F,OACrB,IAAKjN,IAAOA,EAAGmpI,WAAW,mBACxB,OAGF,MAAMxkI,EAAQ8gB,OAAOzlB,EAAGs7D,QAAQ,kBAAmB,KACnDisI,GAAsB5iM,GAASs8F,EAAMC,iBAGvC,MAAMC,EAAuBomG,GAAsB9kJ,OAAO,CAAC2+C,EAAaF,EAAgBv8F,IAC/Eu8F,GAAkBv8F,EAAQy8F,EAAcz8F,EAAQy8F,EACtDC,KAECF,IAAyBE,KAI7B0mG,EAAuB5mG,KAGnBigC,GAAoBvwB,EAAAA,GAAAA,GAAkB,GAAIm3F,EAAAA,KAC1Cl3F,EAAsBlD,GAAUwzB,GAEtCrjD,EAAAA,GAAAA,GAAoBlI,IAAat2E,GAAYuxG,KAG7CpmG,EAAAA,EAAAA,IAAU,KACR,IAAKinI,EACH,OAGF,MAAMnpG,EAASqtC,EAAUlsE,QACzB,IAAK6+B,EACH,OAGF,MAAMuoE,EAAU+2F,EAAsB56F,GAAsB1kE,EAAO2I,YAAc,EAAI+7D,GAAsB,GAE3G1gB,EAAAA,GAAAA,GAAwBhkD,EAAQuoE,IAC/B,CAAC4gC,EAAYm2D,IAEhB,MAAM56L,GAAOC,EAAAA,EAAAA,KAEP86L,GAAgB//L,EAAAA,EAAAA,IAAQ,KAC5B,IAAKypI,EACH,OAAOjtG,GAAAA,EAET,MAAMwjK,EAAkB,IAAIv2D,GAS5B,OARI6kD,GAAc10L,QAChBomM,EAAgBn4F,QAAQ,CACtB/vG,GAAIiqG,EAAAA,IACJv8F,KAAMR,EAAK,kBACX0gG,OAAQ4oF,IAIL0R,GACN,CAACv2D,EAAYzkI,EAAMspL,KAGtB9rL,EAAAA,EAAAA,IAAU,KACRM,WAAW,KACT,MAAMm9L,EAAOA,KACXP,EAAcF,GAAU/1D,YAExBk2D,EAAUH,GAAU95F,SAGlB85F,GACFS,IAoFRxvL,iBAQE,OAPK6uL,KACHA,GAAmB,oCACnBC,UAAsBD,IAAkBY,QAExCV,IAAYW,EAAAA,GAAAA,IAAgBZ,KAGvBD,EACT,CA3FQc,GACGn7J,KAAKg7J,IA1Ga,MA6GxB,IAEH,MAAMI,GAAiB77L,EAAAA,EAAAA,GAAiB/H,IACtCojM,EAAuBpjM,GACvB,MAAM6jM,EAAa/+K,EAAa9f,QAASojB,QAAqB,oBAC3DvoB,cAA2B,mBAAmBG,MACjDo9F,EAAAA,GAAAA,IAAc,CACZp8F,UAAW8jB,EAAa9f,QACxBuoB,QAASs2K,EACT7oL,SAAU,QACV+hF,OAAQxB,GACR8B,YAvHyB,QA2HvBgP,GAAoBtkG,EAAAA,EAAAA,GAAgB,CAACwmF,EAAexlF,KACxD2qL,EAAcnlG,EAAOxlF,KAqBjB+6L,GAAqBnyL,EAAAA,GAAAA,GAAe,cAAerW,GACnDgxG,GAAkB36F,EAAAA,GAAAA,GACtB,sBACC84F,GAAuB,mBAG1B,OACEjvG,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CAACn9B,UAAWwoM,EAAoBprK,UAAWyzE,EAAsB,EAAI,EAAGpjG,KAAK,OAAO0jG,eAAa,EAAAlxG,SACxG4wG,GAGA/wG,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OACEiU,IAAKyhE,EACL51E,UAAWgxG,EACXz6F,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAEnC+nM,EAAcr0L,IAnCzB,SAA8B8yL,EAA6B/hM,GACzD,MAAMyO,EAAO0zL,GAAkBJ,EAAS1mM,IAExC,OAAOoT,IACLjT,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAW,sBAAqB0E,IAAUmjM,EAAsB,YAAc,IAC9Er1L,OAAK,EACLi2C,OAAK,EACL16C,MAAM,cAENE,QAASA,IAAMq6L,EAAe5jM,GAC9B+N,UAAWg0L,EAASh5L,KAAKxN,UAEzBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAM0F,KAGlB,MAqBQjT,EAAAA,GAAAA,GAAA,OACEiU,IAAKqV,EACL0/B,SAAUgmD,EACVlvG,WAAWqW,EAAAA,GAAAA,GAAe,mBAAoBX,EAAAA,GAAe,eAAiB,iBAAiBzV,SAE9F+nM,EAAcr0L,IAAI,CAAC8yL,EAAU/8I,KAC5BxpD,EAAAA,GAAAA,GAACsmM,GAAa,CACZC,SAAUA,EACV/hM,MAAOglD,EACPg9I,UAAW/4F,EACXxL,oBAAqBA,EACrBn+E,aAAc6jL,GAAuBn+I,EAAI,GAAKm+I,GAAuBn+I,EAAI,EACzE0uI,cAAernF,WAtBvB7wG,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,SCPhB,IAAe9wD,EAAAA,EAAAA,IAlKiB4pM,EAC9B5yK,MACA1rB,aACAnK,YACAmiG,sBACAl0F,UACAy6L,gBACAv5I,sBAEA,MAAMh7C,GAAM5K,EAAAA,EAAAA,MAEN0D,GAAOC,EAAAA,EAAAA,KAGPm6F,GADiBpE,EAAAA,GAAAA,IAAkB9uF,EAAKguF,KACPh4F,EACjCq2B,GAAe3K,EAAI8yK,iBAAmB9yK,EAAI0K,YAAaqoK,EAAAA,EAAAA,IAAkB/yK,EAAK,aAC9EltB,GAAiBJ,EAAAA,EAAAA,GAASi4B,GAAc6mE,IAEvCwhG,IAAax8L,EAAAA,EAAAA,IAASwpB,EAAI0K,WAAWl3B,UAAYV,GAClDuxC,GAAWC,EAAAA,GAAAA,GAActkB,EAAI0K,WAAWl3B,SAAUw/L,GAElDC,GAAYC,EAAAA,EAAAA,IAAyBlzK,KAAQ+yK,EAAAA,EAAAA,IAAkB/yK,EAAK,QACpEmzK,GAAYzgM,EAAAA,EAAAA,GAASugM,GAAYzhG,GAEjC4hG,EAAoBh+L,QAAQo8F,GAAe2hG,IAC3C,WAAE5qL,EAAU,kBAAEwF,IAAsBC,EAAAA,GAAAA,IAAa,GACjDI,EAAsBojF,IAAgBjpF,EACtC8qL,EAAe7hG,GAAejpF,GAE9B,kBACJ63D,EAAiB,kBAAEC,EAAiB,wBACpCyvB,EAAuB,kBAAExvB,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBniE,GAErB2hE,GAAoBrpE,EAAAA,EAAAA,GAAgB,IAAM0H,EAAIzK,SAC9CqsE,GAAiBtpE,EAAAA,EAAAA,GAAgB,IAAM0H,EAAIzK,QAASojB,QAAQ,kCAC5DkpD,GAAiBvpE,EAAAA,EAAAA,GAAgB,IAAM0H,EAAIzK,QAASnF,cAAc,8BAElEkgB,GAAchY,EAAAA,EAAAA,GAAgB,MAC9BwpE,GAAsBhoE,GAC1BA,EAAQ,IACH4nB,EACH3sB,QAAS8/L,MAIPG,GAAoB18L,EAAAA,EAAAA,GAAiBM,IACzCA,EAAEuJ,kBACFvJ,EAAE6Y,iBACF8iL,EAAe7yK,KAGXuzK,GAAsB38L,EAAAA,EAAAA,GAAgB,KAC1Ci8L,IAAgB7yK,KAGZuwE,GAAkB35F,EAAAA,EAAAA,GAAgB,KACtCwB,EAAS,IACJ4nB,EACH3sB,QAAS8/L,IACR,KAGC3iG,GAAsB55F,EAAAA,EAAAA,GAAgB,KAC1CwB,EAAS,IACJ4nB,EACH3sB,QAAS8/L,QACRjmM,GAAW,KAGVosC,GAAkB1iC,EAAAA,EAAAA,GAAiBM,KACvC45F,EAAAA,GAAAA,GAAoC55F,GACpC44F,EAAwB54F,MAG1BtC,EAAAA,EAAAA,IAAU,KACJN,GAAYisE,KACf,CAACA,EAAwBjsE,IAE5B,MAAM0nC,GAAgBx7B,EAAAA,GAAAA,GACpB,YACAwf,EAAIlsB,OAASksB,EAAI7rB,QAAU6rB,EAAIlsB,MAAQksB,EAAI7rB,OAAS,WAAa,aACjEiE,GAAW,cACXjO,GAGF,OACEF,EAAAA,GAAAA,IAAA,OACEqU,IAAKA,EACLnU,UAAW6xC,EACXtC,YAAaJ,EACblhC,QAASwW,EACTyB,cAAeiwD,EAAkBl2E,SAAA,EAE/ByV,EAAAA,IAAgBgzL,IAChBxoM,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,oBACV+N,MAAM,OACN0+F,MAAI,EACJtF,aAAW,EACXl5F,QAASk7L,EAAkBlpM,UAE3BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,QAAQzN,UAAU,6BAGhC6oM,IACC3oM,EAAAA,GAAAA,GAAA,UACEiU,IAAK+lC,EACLl6C,UAAU,cAGb2I,IAAmBugM,IAClBhpM,EAAAA,GAAAA,GAAA,OACE8D,IAAK2E,EACL8f,IAAI,GACJzoB,UAAU,UACV6D,WAAW,IAGdolM,IACC/oM,EAAAA,GAAAA,GAACm/C,GAAAA,EAAc,CACbC,SAAO,EACPt7C,IAAKglM,EACL5iL,UAAQ,EACRG,MAAI,EACJpB,OAAK,EACL9C,yBAAuB,EACvBiE,aAAW,EACX8mB,QAAQ,UAEJxpB,IAGPK,IACC/jB,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAOpF,GAAkBkgM,EAAY,QAAU,UAEzD56L,QAAiClL,IAAtBmzE,IACVp2E,EAAAA,GAAAA,IAACmgB,GAAAA,EAAI,CACHpU,OAAQoqE,EACRgH,OAAQ/G,EACRJ,kBAAmBA,EACnBC,eAAgBA,EAChBC,eAAgBA,EAChBh2E,UAAU,mBACVmgB,WAAS,EACTpU,QAASqqE,EACTpqE,oBAAqBqqE,EAAsBp2E,SAAA,EAEzCkvD,IAAmBjvD,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAAC3F,QAASm4F,EAAiBjzF,KAAK,OAAMlT,SAAEgN,EAAK,uBAC3E/M,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAAC3F,QAASo4F,EAAqBlzF,KAAK,WAAUlT,SACpDgN,EAAKkiD,EAAkB,cAAgB,qBAEzCu5I,IACCxoM,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACL,aAAW,EAACJ,KAAK,SAASlF,QAASm7L,EAAoBnpM,SAAEgN,EAAK,oBCnGpF,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,OAAEmL,IAAW6C,EAAAA,EAAAA,KAAyBhO,IAAW,CAAC,EAClD4tD,EAAkBlkD,QAAQyB,KAAW8nB,EAAAA,EAAAA,KAAqBjzB,EAAQmL,GACxE,MAAO,CACLs9E,UAAWzoF,EAAO8nM,KAAKC,MAAMD,KAC7Bl6I,oBANctgD,CA7DyB06L,EAC3CvpM,YACAqnG,cACAmiG,cACAx/G,YACA76B,kBACAs6I,kBAEA,MAAM,cAAEC,EAAa,QAAEC,IAAYz9L,EAAAA,EAAAA,MAE7Bsd,GAAejgB,EAAAA,EAAAA,OAGnBg3F,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAASt3E,EAAcogL,WAhBzB,OAkB5Bn/L,EAAAA,EAAAA,IAAU,KACJ48F,GACFqiG,KAED,CAACriG,EAAaqiG,IAEjB,MAAMP,GAAoB18L,EAAAA,EAAAA,GAAiBopB,IACzC8zK,EAAQ,CAAE9zK,MAAKg0K,cAAc,MAGzB1oE,GAAoBvwB,EAAAA,GAAAA,GAAkB,GAAI5Q,EAAAA,KAC1CnrE,EAAY20K,KAAiBroE,IAAsBn3C,GAEzD,OACE9pF,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACThpB,IAAKqV,EACLxpB,WAAWqW,EAAAA,GAAAA,GAAe,YAAarW,EAAW0V,EAAAA,GAAe,eAAiB,iBAClFmzB,eAAe,gBACfzL,UAAWvI,EAAY,EAAI,EAC3BpnB,KAAK,OACL0jG,eAAa,EAAAlxG,SAEXupM,EAEEroE,GAAqBn3C,GAAaA,EAAUnoF,OAC9CmoF,EAAUr2E,IAAKkiB,IACb31B,EAAAA,GAAAA,GAACuoM,GAAS,CAER5yK,IAAKA,EACLssE,oBAAqBA,EACrBh4F,YAAak9F,EACbp5F,QAASu7L,EAAcC,OAAc1mM,EACrC2lM,cAAeS,EACfh6I,gBAAiBA,GANZt5B,EAAI91B,KASXohI,GAAqBn3C,GACvB9pF,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,SAAC,oBAEjCC,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,CAAC5hD,MAAM,YAhBf7N,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,SAAC,mDCrDlC,IAAK6pM,GAAc,SAAdA,GAAc,OAAdA,EAAAA,EAAc,iBAAdA,EAAAA,EAAc,6BAAdA,EAAAA,EAAc,uBAAdA,EAAAA,EAAc,eAAdA,CAAc,MAOnB,MAAMC,GAAyD,CACpE,CAACD,GAAeE,OAAQ,QACxB,CAACF,GAAet3G,aAAc,yBAC9B,CAACs3G,GAAezyC,UAAW,mBAC3B,CAACyyC,GAAeG,MAAO,WAGnBC,GAAwB,CAC5B,CAACJ,GAAeE,OAAQ,aACxB,CAACF,GAAet3G,aAAc,gBAC9B,CAACs3G,GAAezyC,UAAW,gBAC3B,CAACyyC,GAAeG,MAAO,aAqEzB,IAAeprM,EAAAA,EAAAA,IAlEwBsrM,EACrCn7D,YAAWM,cAAa6oD,iBAAgBiS,eAAc/K,oBACtDC,mBAAkBjhB,gBAElB,MAAMpxK,GAAOC,EAAAA,EAAAA,KAEb,SAASm9L,EAAgBztH,GACvB,OACE18E,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAW,sBAAqBgvI,IAAcpyD,EAAM,YAAc,IAElE3uE,QAASA,IAAMqhI,EAAY1yD,GAC3BnqE,UAAWxF,EAAK88L,GAAuBntH,IACvCpqE,OAAK,EACLi2C,OAAK,EACL16C,MAAM,cAAa9N,UAEnBC,EAAAA,GAAAA,GAAA,KAAGF,WAAWqW,EAAAA,GAAAA,GAAe,OAAQ6zL,GAAsBttH,OAGjE,CAEA,MAAM0tH,GAAmB79L,EAAAA,EAAAA,GAAgB,KACvC29L,EAAap7D,IAAc86D,GAAezyC,SAAW,WAAa,UAOpE,OACEv3J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oBAAoBiO,QALrC,SAAyB+gB,GACvBA,EAAM1Y,iBACR,EAG+DC,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,CAC9F+uI,IAAc86D,GAAeE,OAASh7D,IAAc86D,GAAet3G,aAAe6rF,IACjFn+K,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,uBACVyS,UAAWu8H,IAAc86D,GAAezyC,SAAW,kBAAoB,cACvE7kJ,OAAK,EACLi2C,OAAK,EACL16C,MAAM,cACNE,QAASq8L,EAAiBrqM,UAE1BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAId6xL,GAAoB+K,EAAgBP,GAAeE,OACnD1K,GAAoB+K,EAAgBP,GAAet3G,cAClD6sG,GAAqBgL,EAAgBP,GAAezyC,WACpDgoC,GAAqBgL,EAAgBP,GAAeG,OAEpDj7D,IAAc86D,GAAeE,OAASh7D,IAAc86D,GAAet3G,eACnEtyF,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,uBACViO,QAASkqL,EACT1lL,UAAU,gBACVD,OAAK,EACLi2C,OAAK,EACL16C,MAAM,cAAa9N,UAEnBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,uBC1BrB,IAAIg1E,IAAc,EAElB,MAyQA,IAAe5jF,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACQ,CACLgpM,mBAAmBt7L,EAAAA,EAAAA,KAAe1N,GAAQgpM,kBAC1CC,yBAAyB94F,EAAAA,EAAAA,KAA+BnwG,GACxDwsI,gBAAgBt5D,EAAAA,GAAAA,GAAqBlzE,GAAQwsI,iBAL/Bl/H,CAzQ0B47L,EAC5C/9L,SACA8C,WACA3D,SACAmuK,kBACAwvB,cACAkB,oBACAvqG,WACAk/F,oBACAC,mBACAt/L,YACAW,SACAoL,UACAqsL,gBACAnpF,sBACAhG,kBACAwgG,cACAtR,iBACAiS,eACA3R,iBACAD,uBACA+R,oBACAC,0BACAz8D,oBACG48D,MAEH,MAAO37D,EAAWC,IAAgB5iI,EAAAA,EAAAA,IAAyBy9L,GAAeE,QACnEzT,EAAcqU,IAAmBv+L,EAAAA,EAAAA,IAAmB,KACpDwhG,EAAoBg9F,IAAyBx+L,EAAAA,EAAAA,IAAmB,KACjE,SAAE/M,IAAaC,EAAAA,EAAAA,OAEdurM,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAen/L,EAAQE,OAAShJ,EAAWzD,IAClF,aAAE0kB,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BvY,EAAQE,GAAS,GAAO,GAE7FkB,GAAOC,EAAAA,EAAAA,MAERu1E,IAAe52E,IAClB42E,IAAc,IAGhBh4E,EAAAA,EAAAA,IAAU,KACR9J,KACC,CAACA,KAGJ8J,EAAAA,EAAAA,IAAU,KACJ60L,GACJrwD,EAAa66D,GAAezyC,WAC3B,CAACioC,KAEJvjL,EAAAA,EAAAA,IAAgB,KACd,GAAKzc,GAAauM,IAAUwzL,EAO5B,OAHAp9L,SAASsd,KAAK9b,UAAUC,IAAI,iCAC5BzB,SAASsd,KAAK9b,UAAUC,IAAI,uBAErB,KACLzB,SAASsd,KAAK9b,UAAU+b,OAAO,uBAE/BzU,WAAW,MACTuN,EAAAA,EAAAA,IAAgB,KACdrW,SAASsd,KAAK9b,UAAU+b,OAAO,oCAvGd,OA2GtB,CAAC6/K,EAAmB//L,EAAUuM,IAEjC,MAAMo/L,GAAkB1hM,EAAAA,EAAAA,IAAOgtL,GAC/B0U,EAAgBvhM,QAAU6sL,GAC1B9rL,EAAAA,EAAAA,IAAU,KACHwgM,EAAgBvhM,QAAQ7H,SAAUgK,IAIvCo/L,EAAgBvhM,QAAQiO,QAASlK,IAC/BgrL,EAAe,CAAExlG,MAAOxlF,MAG1Bm9L,EAAgB,MACf,CAAC/+L,EAAQ4sL,IAEZ,MAAM1nF,GAAoBtkG,EAAAA,EAAAA,GAAgB,CAACwmF,EAAexlF,KACxDm9L,EAAiBj9F,GAAW,IAAIA,EAAQlgG,IAExC2qL,EAAcnlG,KAGVi4G,GAAwB3hM,EAAAA,EAAAA,IAAOskG,GACrCq9F,EAAsBxhM,QAAUmkG,GAChCpjG,EAAAA,EAAAA,IAAU,KACHygM,EAAsBxhM,QAAQ7H,SAAUgK,IAI7Cq/L,EAAsBxhM,QAAQiO,QAAS+3E,IACrC8oG,EAAqB,CACnB9oG,iBAIJm7G,EAAsB,MACrB,CAACh/L,EAAQ2sL,IAEZ,MAAM2S,GAA0B1+L,EAAAA,EAAAA,GAAiBwmF,IAC/C43G,EAAuBxmK,GAAQ,IAAIA,EAAK4uD,EAAMlzF,KAE9CkvG,EAAoBhc,KAGhB4rC,GAAepyH,EAAAA,EAAAA,GAAiBrL,IACpC2K,IACAq+L,EAAahpM,KAGT2tL,GAAsBtiL,EAAAA,EAAAA,GAAgB,CAC1C61E,EAAqB6xC,EAAoBgmD,EAA0BixB,KAEnEniG,IAAkB3mB,EAAS6xC,EAAUgmD,GAAgB,EAAMixB,KAyDvDn4L,GACJnT,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAkBiO,QANrC,SAAyB+gB,GACvBA,EAAM1Y,iBACR,EAI8DrW,SACvDwiF,KACCviF,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACT1vB,MAAMwgI,EAAAA,GAAAA,GAAsB,QAASF,GACrC3wG,UAAW4xG,EACXO,YAAaxsF,OAAO0K,OAAOs8I,IAAwBloM,OAAO5B,SA7DpE,SAAuByZ,EAAmB2xL,GACxC,OAAQr8D,GACN,KAAK86D,GAAeE,MAClB,OACE9pM,EAAAA,GAAAA,GAACwnM,GAAW,CACV1nM,UAAU,aACVo4L,cAAernF,IAGrB,KAAK+4F,GAAet3G,YAClB,OACEtyF,EAAAA,GAAAA,GAAC4uG,GAAiB,CAChB9uG,UAAU,aACVwV,UAAW3J,IAAW6N,EACtBymF,SAAUA,EACVkH,YAAax7F,IAAW6N,GAAY2xL,GACpC3+L,OAAQA,EACRm8F,eAAgBvpG,GAAYkrM,EAC5Bv7F,oBAAqBk8F,IAG3B,KAAKrB,GAAezyC,SAClB,OACEn3J,EAAAA,GAAAA,GAACiuL,GAAa,CACZnuL,UAAU,aACVwV,UAAW3J,IAAW6N,EACtB2tF,cAAa2yE,GAAkBnuK,IAAW6N,GAAY2xL,GACtDlrG,SAAUA,EACV65E,gBAAiBA,EACjBlxE,gBAAiB4hG,EACjBh+L,OAAQA,EACR8C,SAAUA,EACVq5F,eAAgBvpG,GAAYkrM,EAC5BvhG,gBAAiB8lF,IAGvB,KAAK+a,GAAeG,KAClB,OACE/pM,EAAAA,GAAAA,GAACqpM,GAAS,CACRvpM,UAAU,aACVqnG,cAAamiG,GAAc39L,IAAW6N,GAAY2xL,GAClD7B,YAAaA,EACbC,YAAaA,IAMvB,MAmBKnqM,IACCY,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLi2C,OAAK,EACL16C,MAAM,cACN0E,UAAWxF,EAAK,SAChBjN,UAAU,sBACVI,KAAK,OACL6N,QAASlC,EAAQ9L,UAEjBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAGfvN,EAAAA,GAAAA,GAACiqM,GAAgB,CACfn7D,UAAWA,EACXM,YAAaL,EACbkpD,eAAgBA,EAChB9Z,UAAWqsB,EACXN,aAAcvrE,EACdwgE,kBAAmBA,EACnBC,iBAAkBA,OAKxB,GAAIhgM,EAAU,CACZ,IAAK0kB,EACH,OAGF,MAAMsnL,GAAkBj1L,EAAAA,GAAAA,GACtB,yBACA6N,EACAqmL,GAAqB,mBACrBlL,GAAqB,sBACrBqL,GAAqB,oBAGvB,OAAIrL,GAEAn/L,EAAAA,GAAAA,GAAA,OAAKF,UAAWsrM,EAAgBrrM,SAC7BgT,KAML/S,EAAAA,GAAAA,GAACiyG,GAAAA,EAAM,CAAAlyG,UACLC,EAAAA,GAAAA,GAAA,OAAKF,UAAWsrM,EAAgBrrM,SAC7BgT,KAIT,CAEA,OACE/S,EAAAA,GAAAA,GAAC+f,GAAAA,EAAI,CACHpU,OAAQA,EACRE,QAASA,EACT+5F,WAAYu5F,EACZr/L,WAAWqW,EAAAA,GAAAA,GAAe,aAAcrW,GACxCgM,oBAAqBD,EACrBw/L,aAAe71L,EAAAA,QAAkC3S,EAAnB+nM,EAC9B7kL,aAAevQ,EAAAA,QAAkC3S,EAAnBgoM,EAC9Bz4F,mBAAoB58F,EAAAA,GACpB08F,WAAS,KACJitF,EAAoBsL,EAAsB,CAC7Cj3L,UAAW,OACXwM,UAAW,UACZjgB,SAEAgT,O,gBCzTP,MAmCA,IAAepU,EAAAA,EAAAA,IAnCK2sM,EAClBC,aACA9tI,QACAwjH,UACA70K,cACA2nB,OACA2wE,WACA32F,cAEA,MAAMwW,GAAchY,EAAAA,EAAAA,GAAgB,KAClCwB,EAAQ22F,KAGV,OACE9kG,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAEPziC,WAAWqW,EAAAA,GAAAA,GAAe,6CAA8Co1L,GAAc,eACtF/oK,WAAS,EACTz0B,QAASwW,EACTk5C,MAAOA,EAAM19D,SAAA,CAEZwrM,IACCvrM,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CAAC5zB,KAAK,QAAQ6zB,KAAMA,KAE7Bn0B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,QAAME,UAAU,QAAOC,SAAA,CAAC,IAErBkhL,MAEHjhL,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,UAAEi0B,EAAAA,GAAAA,GAAW5nB,UAdpC60K,KCiIX,IAAetiL,EAAAA,EAAAA,KAAK6sM,EAAAA,GAAAA,GA7HqBC,EACvC9/L,SACAa,SACA81H,eACAg7C,cACAouB,eACAC,qBACAC,OACA1U,UACAnpL,UACAlC,cAEA,MAAM,eAAEuzK,EAAc,eAAEysB,IAAmB7/L,EAAAA,EAAAA,MAErCsd,GAAejgB,EAAAA,EAAAA,OACf,aAAEya,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BvY,OAAQ9I,OAAWA,GAAW,GAEnGipM,GAAoBv/L,EAAAA,EAAAA,GAAgB,EAAGiqD,QAAOyqH,cAElD,MACMpuH,GADY3mB,EAAAA,EAAAA,MAAYxF,MAAMC,KACd6vB,GAEtB4oH,EAAe,CACb6B,QAAS,IAAIA,IAAU3+C,GAAgBzvE,EAAM,KAAI4yG,EAAAA,EAAAA,IAAgB5yG,KAAS,OAE5E9kD,MAGIg+L,GAAuBx/L,EAAAA,EAAAA,GAAiB1M,IAC5CgsM,EAAe,CAAEr/L,SAAQw/L,aAAcnsM,IACvCkO,MAGIk+L,GAA8BlkM,EAAAA,EAAAA,IAAQ,KAC1C,GAAK2jM,GAAc/pM,QAAWgqM,EAC9B,OAAOD,EAAaj4L,IAAKy4L,IACvB,MAAMtrM,EAAU+qM,EAAmBO,EAAMC,cACzC,MAAO,CACLtsM,GAAIqsM,EAAMrsM,GACVohL,QAASirB,EAAME,SACfhgM,YAAaxL,GAASmS,QAAQ+B,MAAMA,MAAQ,OAG/C,CAAC42L,EAAcC,IAEZU,GAAuB9/L,EAAAA,EAAAA,GAAiBqC,KACvCA,EAAKqyK,QAAQj4C,WAAWkuD,IAAUnpJ,MAAM,MAIzC,OAAQn/B,EACVm9L,EAAqBn9L,EAAK/O,IAE1BisM,EAAkBl9L,IAGb,IASH09L,EAAuB3X,GAAsB,CACjDn7K,SAAU7N,EACVw9C,OAR8BphD,EAAAA,EAAAA,IAAQ,KACtC,GAAKu1K,GAAgB2uB,EACrB,MAAQ,GACL73G,OAAO63G,GAA+B,GAAI3uB,GAAe,KAC3D,CAACA,EAAa2uB,IAKfroK,SAAUyoK,EACVxgM,YAGI0gM,EAAWjvB,IAAgBA,EAAY37K,QAAY+pM,IAAiBA,EAAa/pM,OAYvF,IAVA4I,EAAAA,EAAAA,IAAU,KACJgiM,GACF1gM,KAED,CAAC0gM,EAAS1gM,KAEbtB,EAAAA,EAAAA,IAAU,KACRmqL,GAAsB,uBAAwB4X,EAAsBhjL,IACnE,CAACgjL,KAECxoL,GAAgByoL,EACnB,OAGF,MAAMzsM,GAAYqW,EAAAA,GAAAA,GClIG,WDoInB,iCACA6N,GAGF,OACEpkB,EAAAA,GAAAA,IAAA,OAAKE,UAAWA,EAAWmU,IAAKqV,EAAavpB,SAAA,CAC1CksM,GAA6Bx4L,IAAI,CAACy4L,EAAO1nM,KACxCxE,EAAAA,GAAAA,GAACsrM,GAAW,CAEVrqB,QAASirB,EAAMjrB,QACf70K,YAAa8/L,EAAM9/L,YACnB2nB,KAAM63K,EACNL,YAAU,EACV7mG,SAAUwnG,EAAMrsM,GAChBkO,QAASg+L,EACTtuI,MAAO6uI,IAAyB9nM,GAP3B,cAAc0nM,EAAMrsM,OAU5By9K,GAAa7pK,IAAI,CAACwtK,EAASz8K,KAC1BxE,EAAAA,GAAAA,GAACsrM,GAAW,CAEVrqB,QAASA,EAAQA,QACjB70K,YAAa60K,EAAQ70K,YAErB2nB,MAAMmY,EAAAA,EAAAA,MAAYxF,MAAMC,KAAKs6I,EAAQzqH,OACrC+0I,YAAU,EACV7mG,SAAUu8E,EACVlzK,QAAS+9L,EACTruI,MAAO6uI,GAAwBL,GAA6BtqM,QAAU,KAAO6C,GARxE,GAAGy8K,EAAQzqH,SAASyqH,EAAQA,kBEzF3C,IAAetiL,EAAAA,EAAAA,IAzCsB6tM,EACnC7gM,SAAQ2xK,cAAazxK,cAErB,MAAM,eAAEuzK,IAAmBpzK,EAAAA,EAAAA,OACrB,SAAE5M,IAAaC,EAAAA,EAAAA,OAEdurM,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAen/L,EAAQE,OAAShJ,EAAWzD,GAElFmlB,GAAchY,EAAAA,EAAAA,GAAiB00K,IACnC7B,EAAe,CACb6B,QAAS,IAAIA,MAEfp1K,MAGF,OACE7L,EAAAA,GAAAA,GAAC+f,GAAAA,EAAI,CACHpU,OAAQA,EACR6H,UAAU,OACVwM,UAAU,SACVnU,QAASA,EACT/L,UAAU,iBACVgM,oBAAqBD,EACrBw/L,aAAe71L,EAAAA,QAAkC3S,EAAnB+nM,EAC9B7kL,aAAevQ,EAAAA,QAAkC3S,EAAnBgoM,EAC9Bz4F,mBAAoB58F,EAAAA,GACpB08F,WAAS,EAAAnyG,SAERu9K,EAAY7pK,IAAKg5L,IAChBzsM,EAAAA,GAAAA,GAACsrM,GAAW,CAEVrqB,QAASwrB,EAAWxrB,QACpB70K,YAAaqgM,EAAWrgM,YACxBs4F,SAAU+nG,EAAWxrB,QACrBlzK,QAASwW,GAJJkoL,EAAWxrB,cC4C1B,IAAetiL,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM,SAAE02E,GAAa7hF,EAAO6hF,SAAS4zG,SAGrC,MAAO,CAAE5zG,WAAUj0B,iBAFK36B,EAAAA,EAAAA,KAAqBjzB,EAAQmL,GAEjBqzB,sBADP0B,EAAAA,EAAAA,KAA2BlgC,KAJxCsN,CA3D8B+9L,EAChDlgM,SACA8C,WACA3D,SACAo9F,kBACAl9F,UACAq3E,WACAj0B,kBACApvB,2BAEA,MAAMvW,GAAejgB,EAAAA,EAAAA,OACf,aAAEya,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BvY,OAAQ9I,OAAWA,GAAW,GACnG8pM,GAAep2K,EAAAA,EAAAA,GAAsB2sD,GAAU,GAC/C0pH,EAAoB1pH,GAAYypH,EAChCne,GAAoBC,EAAAA,GAAAA,GAAqBjiL,EAAQ8C,IAGrD+wF,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAASt3E,EAAcg4E,WApBzB,OAsB5B/2F,EAAAA,EAAAA,IAAU,IAAOoB,GAAS6vB,EAAAA,EAAAA,GAAsB3vB,QAAWhJ,EAAY,CAAC8I,EAAQE,IAEhF,MAIM/L,GAAYqW,EAAAA,GAAAA,GAChB,gDACA6N,GACE4oL,GAAmBjrM,QAAW,UAGlC,OACE3B,EAAAA,GAAAA,GAAA,OACEiU,IAAKqV,EACLxpB,UAAWA,EACXgmB,YAdoBkpK,KACtBR,EAAkB,CAAEttL,KAAM,mBAaKnB,SAE5B+jB,GAAgB8oL,EACfA,EAAkBn5L,IAAK2uE,IACrBpiF,EAAAA,GAAAA,GAACikG,GAAa,CAEZ7hB,QAASA,EACTliF,KAAM+qG,EAAAA,IACNhJ,oBAAqBA,EACrBl0F,QAASpC,EAASo9F,OAAkBlmG,EACpC6hG,SAAUtiB,EACVnzB,gBAAiBA,EACjBm1C,YAAU,EACVvkE,qBAAsBA,GARjBuiD,EAAQviF,KAWfikB,GACF9jB,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,SACN5sD,OC3FV,IAAgB,KAAO,YAAY,YAAc,YC4GjD,IAAelE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAQ02E,SAAUqf,GAAgBlhG,EAAO+rG,aAAa0pF,SAItD,MAAO,CAAEv0F,cAAatzC,iBAHE36B,EAAAA,EAAAA,KAAqBjzB,EAAQmL,GAGdqzB,sBAFV0B,EAAAA,EAAAA,KAA2BlgC,KAJxCsN,CArEkCswL,EACpDtzL,SACA2sL,uBACAvpF,sBACAljG,UACA02F,cACAtzC,kBACApvB,uBACAtf,aAEA,MAAM,yBAAEssL,IAA6B7gM,EAAAA,EAAAA,MAE/Bsd,GAAejgB,EAAAA,EAAAA,OACf,aAAEya,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BvY,OAAQ9I,OAAWA,GAAW,GACnG8pM,GAAep2K,EAAAA,EAAAA,GAAsBgsE,GAAa,GAClDqqG,EAAoBrqG,GAAeoqG,GAEzC/uH,EAAAA,GAAAA,GAAoBt0D,GAEpB,MACE+2E,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAASt3E,EAAcg4E,WAvBzB,IAuB4Dr3F,YAAa0B,KAErGpB,EAAAA,EAAAA,IAAU,IAAOoB,GAAS6vB,EAAAA,EAAAA,GAAsB3vB,QAAWhJ,EAAY,CAAC8I,EAAQE,IAEhF,MAAMo/L,GAA0B1+L,EAAAA,EAAAA,GAAiBugM,IAC1CnhM,IACLojG,EAAoB+9F,GACpBxU,EAAqB,CACnB9oG,WAAYs9G,EAAGjtM,KAEjBgtM,OAGI/sM,GAAYqW,EAAAA,GAAAA,GAChBqH,GAAO6kD,KACP,gCACAr+C,GACC4oL,GAAmBjrM,QAAU6b,GAAOqiI,QAGvC,OACE7/I,EAAAA,GAAAA,GAAA,OACEiU,IAAKqV,EACLxpB,UAAWA,EAAUC,SAEpB+jB,GAAgB8oL,EACfA,EAAkBn5L,IAAK2uE,IACrBpiF,EAAAA,GAAAA,GAACikG,GAAa,CAEZ7hB,QAASA,EACTtiF,UAAW0d,GAAOuvL,YAClB7sM,KAAM8sM,EAAAA,IACN/qG,oBAAqBA,EACrBl0F,QAASk9L,EACTvmG,SAAUtiB,EACVnzB,gBAAiBA,EACjBm1C,YAAU,EACVvkE,qBAAsBA,EACtBtf,OAAQA,GAVH6hE,EAAQviF,KAafikB,GACF9jB,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,SACN5sD,O,gBCnDV,MA8HA,IAAelE,EAAAA,EAAAA,IA5HsBghM,EACnCh0L,SACAshM,kBAAiB,EACjBh+I,kBACAkpI,cACApe,yBACAge,eACA6H,iBACAxH,mBACA8U,iBACArhM,UACAC,sBACAU,SACA2gM,cACAC,mBACAC,kBACA3d,wBACA4d,mBACAruG,gBACAp/D,uBACA0tK,oBACAC,kBACA1oD,4BAEA,MAAM,iBACJ2oD,IACEzhM,EAAAA,EAAAA,OAEG4+L,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAen/L,EAAQE,IAC7D6hM,EAA4BC,IAAiCxhM,EAAAA,EAAAA,KAAS,GAEvEorC,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,MACNo2J,EAAgBC,EAAWC,IAAa7uM,EAAAA,EAAAA,MAE/C2mC,EAAAA,GAAAA,GAAsB,EAAEgzB,MAElBjtD,IAAWitD,IACbk1I,IACAH,EAA8B5iM,QAAQgvK,MAEvC,CAACpuK,EAAQouK,IAEZ,MAAO1gK,EAAS00L,EAAaC,IAAiB/uM,EAAAA,EAAAA,KAExCgvM,GAAiC1hM,EAAAA,EAAAA,GAAiBiT,IACtDquL,IACIrhM,GAAQihM,EAAiB,CAAEjhM,SAAQgT,eAczC,OAXAjV,EAAAA,EAAAA,IAAU,KACHoB,EAKLd,WAAW,KACTkjM,KA3DqB,KAsDrBC,KAOD,CAACriM,EAAQoiM,EAAaC,KAGvBpuM,EAAAA,GAAAA,IAACmgB,GAAAA,EAAI,CACHpU,OAAQA,EACRsU,WAAS,EACTzM,UAAU,QACVwM,UAAWitL,EAAiB,MAAQ,SACpCntM,WAAWqW,EAAAA,GAAAA,GACT,iBAAkB,QAAS,wBAAyBg3L,GAAe,gBAErEthM,QAASA,EACTC,oBAAqBA,EACrBu/L,aAAe71L,EAAAA,QAAkC3S,EAAnB+nM,EAC9B7kL,aAAevQ,EAAAA,QAAkC3S,EAAnBgoM,EAC9Bz4F,mBAAoB58F,EAAAA,GAAazV,SAAA,CAGhCotM,IAAgBK,IACfxtM,EAAAA,GAAAA,GAACkuM,GAAAA,EAAgB,CACfxe,sBAAuBA,EACvB2d,gBAAiBA,EACjB7d,sBAAkB3sL,EAClByqM,iBAAkBA,EAClBxsJ,WAAS,EACTznC,QAASA,EACT4lF,cAAeA,EACfp/D,qBAAsBA,EACtB0tK,kBAAmBA,EACnBrf,cAAY,EACZppC,sBAAuBA,EACvBqpD,WAAYF,EACZpiM,QAASA,EACT/L,WAAWqW,EAAAA,GAAAA,GAAey3L,GAAkB,8BAIhDhuM,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GACT,uBACAy3L,GAAkB,+BAEpBv3L,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SAAA,CAEtCg4L,IAAgB/3L,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,OAAOlF,QAASgqL,EAAah4L,SAAEw3C,EAAQ,sBACtE4gJ,GAAeyH,IACd5/L,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,WAAWlF,QAAS6xL,EAAe7/L,SAC/Cw3C,EAAQ0X,EAAkB,cAAgB,qBAG9CkpI,GAAeyH,GAAkB8N,IAChC1tM,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,cAAclF,QAASqqL,EAAiBr4L,SACpDw3C,EAAQ,oBAGZ41J,GAAeC,IACdptM,EAAAA,GAAAA,GAAC0T,GAAAA,EAAQ,CAACT,KAAK,SAASlF,QAASm/L,EAAentM,SAC7CgN,EAAK,0B,4BC7HlB,MAAMqhM,GAAsE,CAC1EC,EAAG,OACHC,OAAQ,OACRC,EAAG,SACHC,GAAI,SACJC,EAAG,YACHC,IAAK,gBACLC,KAAM,YACNC,KAAM,WAEFC,GAAa9sM,SAASuB,cAAc,OA4c1C,IAAe3E,EAAAA,EAAAA,IA1cqBmwM,EAClCnjM,SACAojM,iBACAC,gBACAC,mBACApjM,cAEA,MAAMyd,GAAejgB,EAAAA,EAAAA,MACf6lM,GAAkB7lM,EAAAA,EAAAA,OAClB,aAAEya,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BvY,IACpEwjM,EAAmBC,EAAiBC,IAAoBpwM,EAAAA,EAAAA,MACxD6sE,EAASwjI,IAAcnjM,EAAAA,EAAAA,IAAS,KAChCojM,EAAeC,IAAoBrjM,EAAAA,EAAAA,KAAS,IAC5CsjM,EAAgBC,IAAqBvjM,EAAAA,EAAAA,OACrCwjM,EAAqBC,IAA0BzjM,EAAAA,EAAAA,IAA+B,CAAC,GAEhFY,GAAOyqC,EAAAA,GAAAA,MAEbjtC,EAAAA,EAAAA,IAAU,IAAOoB,GAAS6vB,EAAAA,EAAAA,GAAsB3vB,QAAWhJ,EAAY,CAAC8I,EAAQE,KAChFgkM,EAAAA,GAAAA,GACElkM,EACA2d,EACAzd,GACA,IAGFtB,EAAAA,EAAAA,IAAU,KACJ4kM,EACFD,EAAgB1lM,QAASi0D,SAEzB6xI,EAAW,IACXE,GAAiB,KAElB,CAACL,KAEJ5kM,EAAAA,EAAAA,IAAU,KACHuZ,IACHurL,IACAO,EAAuB,CAAC,GACxBF,OAAkB7sM,KAEnB,CAACwsM,EAAkBvrL,KAEtBvZ,EAAAA,EAAAA,IAAU,KACR,IAAKoB,IAAWqjM,EACd,OAGF,MAAMc,EAAwC,CAAC,EAC/C,IAAI,cAAEC,GAAkBf,EAAcgB,wBACtC,KAAOD,GAAiBA,EAAclwM,KAAOowM,EAAAA,KAAmB,CAC9D,MAAMC,EAAa9B,GAAwB2B,EAAcI,SACrDD,IACFJ,EAAgBI,IAAc,GAGhCH,EAAgBA,EAAcA,aAChC,CAEAH,EAAuBE,IACtB,CAACnkM,EAAQqjM,EAAeI,IAE3B,MAAMgB,GAAmB7jM,EAAAA,EAAAA,GAAgB,KACvC,IAAKyiM,EACH,OAGF,MAAMqB,EAAYzlM,OAAO0lM,eACrBD,IACFA,EAAUE,kBACVF,EAAUG,SAASxB,MAIjByB,GAAsBlkM,EAAAA,EAAAA,GAAgB,KAC1C,MAAM8jM,EAAYzlM,OAAO0lM,eACrBD,GACFpB,EAAiBoB,EAAUK,WAAW,MAIpCC,GAAkBpkM,EAAAA,EAAAA,GAAiBqkM,IACvC,GAAK5B,EASL,OANAH,GAAWgC,gBAAgB7B,EAAc8B,iBACrCF,GACF/B,GAAWnpM,iBAAiBqrM,GAAAA,IAA6Bt5L,QAASy6H,IAChEA,EAAGurD,YAAYvrD,EAAGqiC,aAAa,UAG5Bs6B,GAAWvR,YAGd0T,GAAqBzkM,EAAAA,EAAAA,GAAgB,KACzC,GAAKyiM,EAIL,OAAOA,EAAcgB,wBAAwBD,gBAG/C,SAASkB,IACP,MAAM9nK,EAAQ+lK,EAAgB1lM,QAC9B,IAAK2/B,EACH,OAGF,MAAM,YAAE6H,EAAW,YAAEkgK,EAAW,WAAEzkH,GAAetjD,EACjD,GAAI+nK,GAAelgK,EAEjB,YADA0+J,OAAkB7sM,GAIpB,IAAI/C,EAAY,GACZ2sF,EAAaykH,EAAclgK,IAC7BlxC,EAAY,cAEV2sF,EAAa,IACf3sF,GAAa,cAGf4vM,EAAkB5vM,EACpB,CAOA,SAASqxM,EAAyB1rL,GAChC,GAAIkqL,EAAoBlqL,GACtB,MAAO,SAGT,GAAY,cAARA,GAA+B,kBAARA,GACzB,GAAIo9B,OAAO8K,KAAKgiJ,GAAqBnpH,KAClC4qH,GAASA,IAAS3rL,GAAO1a,QAAQ4kM,EAAoByB,KAEtD,MAAO,gBAEJ,GAAIzB,EAAoB0B,WAAa1B,EAAoB2B,cAC9D,MAAO,UAIX,CAEA,MAAMC,GAAoBhlM,EAAAA,EAAAA,GAAgB,KACxC,GAAIojM,EAAoB/qB,QAAS,CAC/B,MAAM7yJ,EAAUi/K,IAChB,IACGhC,IACGj9K,GACDA,EAAQ+jI,QAAQ07C,aAAeC,EAAAA,GAAsBC,UACpD3/K,EAAQ2rK,YAEZ,OASF,OANA3rK,EAAQ0rK,YAAY1rK,EAAQ2rK,kBAC5BkS,EAAwBE,IAAe,IAClCA,EACHlrB,SAAS,IAIb,CAEA,MAAM9vK,EAAO67L,IACb5uM,SAAS4vM,YACP,cAAc,EAAO,2CAA2CF,EAAAA,GAAsBC,YAAY58L,YAEpGjJ,MAGI+lM,GAAiBrlM,EAAAA,EAAAA,GAAgB,KACrCqjM,EAAwBE,IAEtB/tM,SAAS4vM,YAAY7B,EAAgBjwL,KAAO,eAAiB,QAC7DgjC,OAAO8K,KAAKmiJ,GAAiBr4L,QAASgO,IACvB,WAARA,GAA4B,cAARA,IAAwB1a,QAAQ+kM,EAAgBrqL,KACvE1jB,SAAS4vM,YAAYlsL,KAIzBgrL,IACO,IACFX,EACHjwL,MAAOiwL,EAAgBjwL,UAKvBgyL,GAAmBtlM,EAAAA,EAAAA,GAAgB,KACvCxK,SAAS4vM,YAAY,UACrBlB,IACAb,EAAwBE,IAAe,IAClCA,EACHgC,QAAShC,EAAgBgC,YAIvBC,GAAsBxlM,EAAAA,EAAAA,GAAgB,KAC1CxK,SAAS4vM,YAAY,aACrBlB,IACAb,EAAwBE,IAAe,IAClCA,EACHkC,WAAYlC,EAAgBkC,eAI1BC,GAA0B1lM,EAAAA,EAAAA,GAAgB,KAC9C,GAAIojM,EAAoB2B,cAAe,CACrC,MAAMv/K,EAAUi/K,IAChB,IACGhC,IACGj9K,GACmB,QAApBA,EAAQo+K,UACPp+K,EAAQ2rK,YAEZ,OASF,OANA3rK,EAAQ0rK,YAAY1rK,EAAQ2rK,kBAC5BkS,EAAwBE,IAAe,IAClCA,EACHwB,eAAe,IAInB,CAEA,MAAMx8L,EAAO67L,IACb5uM,SAAS4vM,YAAY,cAAc,EAAO,QAAQ78L,WAClDjJ,MAGIqmM,GAAsB3lM,EAAAA,EAAAA,GAAgB,KAC1C,GAAIojM,EAAoB0B,UAAW,CACjC,MAAMt/K,EAAUi/K,IAChB,IACGhC,IACGj9K,GACmB,SAApBA,EAAQo+K,UACPp+K,EAAQ2rK,YAEZ,OASF,OANA3rK,EAAQ0rK,YAAY1rK,EAAQ2rK,kBAC5BkS,EAAwBE,IAAe,IAClCA,EACHuB,WAAW,IAIf,CAEA,MAAMv8L,EAAO67L,GAAgB,GAC7B5uM,SAAS4vM,YAAY,cAAc,EAAO,6CAA6C78L,YACvFjJ,MAGIsmM,GAAuB5lM,EAAAA,EAAAA,GAAgB,KAC3C,MAAM6lM,IAAoB19I,EAAAA,GAAAA,IAAeoX,IAAY,IAAIiT,MAAM,KAAKtrE,IAAI4+L,WAAW1rL,KAAK,KAExF,GAAI4oL,EAAe,CACjB,MAAMx9K,EAAUi/K,IAChB,IAAKj/K,GAA+B,MAApBA,EAAQo+K,QACtB,OAOF,OAJCp+K,EAA8B5e,KAAOi/L,OAEtCvmM,GAGF,CAEA,MAAMiJ,EAAO67L,GAAgB,GAC7BP,IACAruM,SAAS4vM,YACP,cACA,EACA,YAAYS,0CAAyDt9L,SAEvEjJ,MAGI2Z,GAAgBjZ,EAAAA,EAAAA,GAAiBM,IACrC,MAUMk4C,EAVqD,CACzD72B,EAAGkhL,EACHznJ,EAAGiqJ,EACHU,EAAGP,EACHvoJ,EAAGqoJ,EACHU,EAAGL,EACHjoJ,EAAGgoJ,EACHO,EAAGjB,GCpWM,SAAyB1kM,GACtC,MAAM4Y,EAAM5Y,EAAE4Y,KAAO5Y,EAAEkuD,KAEvB,OAAOt1C,EAAIujH,WAAW,OAASvjH,EAAIsoB,MAAM,GAAGuf,cAAgB7nC,CAC9D,CDmWoCgtL,CAAgB5lM,KAG9CA,EAAE+2H,SACG/2H,EAAE2kB,SAAW3kB,EAAEwoL,UAChBtwI,IAKNl4C,EAAE6Y,iBACF7Y,EAAEuJ,kBACF2uC,OAmBF,IAhBAx6C,EAAAA,EAAAA,IAAU,KACJoB,GACF5J,SAASgU,iBAAiB,UAAWyP,GAGhC,IAAMzjB,SAASiU,oBAAoB,UAAWwP,IACpD,CAAC7Z,EAAQ6Z,KAUP1B,EACH,OAGF,MAAMhkB,GAAYqW,EAAAA,GAAAA,GAChB,gBACA6N,EACAmrL,GAAqB,sBAGjBuD,GAA0Bv8L,EAAAA,GAAAA,GAC9B,iCACApL,QAAQ+gE,EAAQnqE,SAAW,SAGvBmE,EAAQipM,EACV,SAASA,EAAevyL,aAAauyL,EAAejsL,8BAA8BisL,EAAevyL,OACjG,GAEJ,OACE5c,EAAAA,GAAAA,IAAA,OACEqU,IAAKqV,EACLxpB,UAAWA,EACXgG,MAAOA,EACPupD,UAhCJ,SAAgCxiD,GAC9B,GAAc,UAAVA,EAAE4Y,KAAmB0pL,EAAmB,CAC1C,IAAKrjI,EAAQyB,OAAQ,OACrB4kI,IACAtlM,EAAE6Y,gBACJ,CACF,EA4BI2pB,YAAaxrC,EAAAA,EAAU9D,SAAA,EAEvBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wBAAuBC,SAAA,EACpCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLC,MAAM,cACN0E,UAAWxF,EAAK,yBAChBjN,UAAWqxM,EAAyB,WACpCpjM,QAASwjM,EAAkBxxM,UAE3BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,mBAEbvN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,2BACfE,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLC,MAAM,cACN0E,UAAWxF,EAAK,sBAChBjN,UAAWqxM,EAAyB,QACpCpjM,QAAS6jM,EAAe7xM,UAExBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,YAEbvN,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLC,MAAM,cACN0E,UAAWxF,EAAK,wBAChBjN,UAAWqxM,EAAyB,UACpCpjM,QAAS8jM,EAAiB9xM,UAE1BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,cAEbvN,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLC,MAAM,cACN0E,UAAWxF,EAAK,2BAChBjN,UAAWqxM,EAAyB,aACpCpjM,QAASgkM,EAAoBhyM,UAE7BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,kBAEbvN,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLC,MAAM,cACN0E,UAAWxF,EAAK,+BAChBjN,UAAWqxM,EAAyB,iBACpCpjM,QAASkkM,EAAwBlyM,UAEjCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,qBAEbvN,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLC,MAAM,cACN0E,UAAWxF,EAAK,2BAChBjN,UAAWqxM,EAAyB,aACpCpjM,QAASmkM,EAAoBnyM,UAE7BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,iBAEbvN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,2BACfE,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACC,MAAM,cAAc0E,UAAWxF,EAAK,yBAA0BgB,QAASqhM,EAAgBrvM,UAC7FC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,eAIfvN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,6BAA4BC,UACzCH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wBAAuBC,SAAA,EACpCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACC,MAAM,cAAc0E,UAAWxF,EAAK,UAAWgB,QAASshM,EAAiBtvM,UAC/EC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,kBAEbvN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,2BAEfE,EAAAA,GAAAA,GAAA,OACEF,WAAWqW,EAAAA,GAAAA,GAAe,uCAAwCs5L,GAAgB1vM,UAElFC,EAAAA,GAAAA,GAAA,SACEiU,IAAKi7L,EACLpvM,UAAU,+BACVoB,KAAK,OACLyL,MAAOm/D,EACPxc,YAAaviD,EAAK,sBAClB48G,aAAa,MACbgpF,YAAY51K,EAAAA,SAAmBl6B,EAC/Bi5D,UAAU,MACVzlD,IAAI,OACJ5I,SAvTZ,SAA6BZ,GAC3ByiM,EAAWziM,EAAEC,OAAOH,OACpBskM,GACF,EAqTYjoJ,SAAUioJ,OAIdrxM,EAAAA,GAAAA,IAAA,OAAKE,UAAW4yM,EAAwB3yM,SAAA,EACtCC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,2BACfE,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLC,MAAM,cACN0E,UAAWxF,EAAK,QAChBjN,UAAU,gBACViO,QAASokM,EAAqBpyM,UAE9BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,yBEnczB,IAAe5O,EAAAA,EAAAA,IAhCyBi0M,EACtC7/G,QAAOt1B,QAAO1vD,UAASk0F,0BAEvB,MAAM19E,GAAchY,EAAAA,EAAAA,GAAiBM,IAEnCA,EAAE6Y,iBAEF3X,IAAUglF,KAGNjzF,GAAYqW,EAAAA,GAAAA,GAChB,cACAsnD,GAAS,SAGX,OACEz9D,EAAAA,GAAAA,GAAA,OACEF,UAAWA,EACXuvC,YAAa9qB,EACbpX,MAAO4lF,EAAMA,MAAMhzF,UAEnBC,EAAAA,GAAAA,GAACsyF,GAAAA,EAAW,CACV9C,WAAYuD,EAAMlzF,GAClBK,KAhCkB,GAiClB8mG,qBAAmB,EACnBH,sBAAoB,EACpBpD,8BAA+BxB,QC0HvC,IAAetjG,EAAAA,EAAAA,IAvGoBqgM,EACjCrzL,SACA8hG,SACAL,eACAvhG,UACAqsL,gBACAnpF,sBACAwpF,iBACAD,2BAEA,MAAMhvK,GAAejgB,EAAAA,EAAAA,OACf,aAAEya,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BvY,OAAQ9I,OAAWA,GAAW,GACnGgwM,GAAqCriK,EAAAA,GAAAA,GACzCi9D,EAAO9rG,OAAS,IAAI8rG,KAAWL,QAAgBvqG,EAxD5B,MAyDhB,IAEL+6E,EAAAA,GAAAA,GAAoBt0D,GAEpB,MACE+2E,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAASt3E,EAAcg4E,WAtBzB,IAsB4Dr3F,YAAa0B,IAE/FmnM,GAAoBvmM,EAAAA,EAAAA,GAAiBwmF,IACzCmlG,EAAcnlG,EAAM4yG,QACpBpN,EAAe,CAAExlG,MAAOA,EAAMlzF,OAG1BorM,GAA0B1+L,EAAAA,EAAAA,GAAiBwmF,IAC/Cgc,EAAoBhc,GACpBulG,EAAqB,CAAE9oG,WAAYuD,EAAMlzF,OAGrC0+H,GAAehyH,EAAAA,EAAAA,GAAiBwmF,IAChC,WAAYA,EACd+/G,EAAkB//G,GAElBk4G,EAAwBl4G,KAItBxuE,GAAchY,EAAAA,EAAAA,GAAgB,CAACo5L,EAAgB9lM,KACnDq4L,EAAcyN,GACdpN,EAAe,CAAExlG,MAAOlzF,MAGpBkzM,GAAyBxmM,EAAAA,EAAAA,GAAiBwmF,IAC9Cgc,EAAoBhc,GACpBulG,EAAqB,CAAE9oG,WAAYuD,EAAMlzF,OAGrCmzM,EAAgBre,GAAsB,CAC1Cn7K,SAAU7N,EACVqoL,cAAc,EACd7qI,MAAO0pJ,EACPhe,8BAA8B,EAC9BjxJ,SAAU26F,EACV1yH,aAGF+5B,EAAAA,GAAAA,GAAsB,EAAEqtK,WACIpwM,IAAtBowM,IAA0D,IAAvBA,GArG3C,SAAwBzuM,EAAe8kB,GACrC,MAAM9jB,EAAY8jB,EAAa9f,QAC/B,IAAKhE,EACH,OAGF,MAAM,eAAEgvL,EAAc,YAAED,GAAgBH,GACtC5uL,EACA,eAZoB,GAcpB,GACA,GACA,GAGF,IAAK+uL,EAAY5yL,SAAW4yL,EAAY/vL,GACtC,OAEF,MAAMquF,EAAQ2hG,EAAe,GAC7B,IAAKA,EAAe1kK,SAAStrB,IACvBA,IAAUquF,IAAUkhG,GAAevuL,EAAW+uL,EAAY1hG,IAAQ,GAAQ,CAC9E,MACM+d,EAAuB,UADZpsG,EAAQgwL,EAAeA,EAAe7yL,OAAS,GAAK,QAAU,OAxBxD,GAyBgB6C,EAA6B,GAEpE6nF,EAAAA,GAAAA,GAAwB7mF,EAAWorG,EACrC,CACF,CA+EIsiG,CAAeF,EAAe1pL,IAC7B,CAAC0pL,IAEJ,MAAMlzM,GAAYqW,EAAAA,GAAAA,GAChB,6CACA6N,GAGF,OACEhkB,EAAAA,GAAAA,GAAA,OACEiU,IAAKqV,EACLxpB,UAAWA,EAAUC,SAEpB+jB,GAAgB+uL,EACfA,EAAWp/L,IAAI,CAACs/E,EAAOvuF,IACrB,WAAYuuF,GACV/yF,EAAAA,GAAAA,GAAC0lM,GAAW,CAEV3yG,MAAOA,EACPt1B,MAAOu1I,IAAkBxuM,EACzBuJ,QAASwW,GAHJwuE,EAAMlzF,KAMbG,EAAAA,GAAAA,GAAC4yM,GAAiB,CAEhB7/G,MAAOA,EACPt1B,MAAOu1I,IAAkBxuM,EACzBuJ,QAASglM,EACT9wG,oBAAqBA,GAJhBlP,EAAMlzF,KAQfikB,GACF9jB,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,SACN5sD,MCpGV,IAAelE,EAAAA,EAAAA,IAxCkBw0M,EAC/BhmM,QACAf,cACAi0B,YACAsgB,WACA8c,QACAz5C,uBAAuB,GACvBjW,cAEA,IAAIgF,EAEJ,MAAMqgM,GAAmB/qM,EAAAA,EAAAA,GAASg4B,GAAYgzK,EAAAA,EAAAA,IAAmBhzK,QAAax9B,GAW9E,OAVA89C,EAAWA,GAAYyyJ,GAGrBrgM,GACE/S,EAAAA,GAAAA,GAAA,OAAK8D,IAAK68C,EAAU7gD,UAAWkkB,EAAsBuE,IAAI,GAAG+qL,SAAS,QAAQ3vM,WAAW,IAEjFwJ,IACT4F,GAAU+wF,EAAAA,GAAAA,IAAgB32F,EAAO,KAIjCvN,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPk7B,MAAOA,EACP39D,WAAWqW,EAAAA,GAAAA,GAAe,iCAAqD,iBAAZpD,GAAwB,aAC3Fs8B,YAAao3D,GAAAA,EACb14F,QAASA,EAAQhO,SAAA,EAEjBC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SACD,iBAAZgT,GAAuBihB,EAAAA,GAAAA,GAAWjhB,GAAWA,KAEvDnT,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,CAC3BoN,IAAUnN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,QAAOC,SAAEoN,IAClCf,IAAgBpM,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SAAEqM,YCvBvD,IAAezN,EAAAA,EAAAA,IAvBqB40M,EAAG91I,QAAO+1I,eAAczlM,cAC1D,MAAM,MACJZ,EAAK,YAAEf,GACLonM,EAEEj8L,EAAM,QAASi8L,EAAeA,EAAaj8L,SAAM1U,EACjD4wM,EAAe,iBAAkBD,EAAeA,EAAaC,kBAAe5wM,EAE5E0hB,GAAchY,EAAAA,EAAAA,GAAgB,KAClCwB,EAAQylM,KAGV,OACExzM,EAAAA,GAAAA,GAACmzM,GAAU,CACT11I,MAAOA,EACPp9B,UAAWozK,EACXtmM,MAAOA,GAASoK,EAChBnL,YAAaA,EACb2B,QAASwW,MCSf,IAAe5lB,EAAAA,EAAAA,IAxBiB+0M,EAC9BF,eAAcvkJ,kBAAiBq6I,cAAarnG,sBAAqBl0F,cAEjE,MAAM,IAAE4nB,GAAQ69K,EAEVjvL,GAAchY,EAAAA,EAAAA,GAAgB,CAAConM,EAAgB1/E,EAAoBgmD,KACvElsK,EAAQylM,EAAcv/E,EAAUgmD,KAGlC,GAAKtkJ,EAIL,OACE31B,EAAAA,GAAAA,GAACuoM,GAAS,CACR5yK,IAAKA,EACLssE,oBAAqBA,EACrBniG,UAAU,sBACViO,QAASu7L,EAAc/kL,OAAc1hB,EACrCosD,gBAAiBA,MC2CvB,IAAetwD,EAAAA,EAAAA,IAvDmBi1M,EAChCn2I,QAAOo2I,eAAcL,eAAczlM,cAEnC,IAAI/L,EACAq+B,EACAozK,EAEA,UAAWD,IACbxxM,EAAQwxM,EAAaxxM,OAGnB,cAAewxM,IACjBnzK,EAAYmzK,EAAanzK,WAEvB,iBAAkBmzK,IACpBC,EAAeD,EAAaC,cAG9B,MAAMK,GAAmBzrM,EAAAA,EAAAA,IAASgrM,EAAAA,EAAAA,IAAmBI,IAC/CruE,GAAe/8H,EAAAA,EAAAA,GAASrG,IAAS+xM,EAAAA,EAAAA,IAAkB/xM,EAAO,cAC1DgiB,GAAuBm2B,EAAAA,GAAAA,GAA6BirF,GAAgB0uE,GAEpEvvL,GAAchY,EAAAA,EAAAA,GAAgB,KAClCwB,EAAQylM,KAGV,GAAIK,EACF,OACEj0M,EAAAA,GAAAA,IAAA,OAAKE,UAAU,kCAAkCiO,QAASwW,EAAYxkB,SAAA,EACpEC,EAAAA,GAAAA,GAAA,OAAK8D,IAAM9B,GAAOq+B,WAAWl3B,SAAY2qM,EAAkBvrL,IAAI,GAAG5kB,WAAW,KAC7E3D,EAAAA,GAAAA,GAAA,OACE8D,IAAKshI,EACLtlI,WAAWqW,EAAAA,GAAAA,GAAe,aAAc6N,GACxCuE,IAAI,GACJ5kB,WAAW,OAMnB,MAAM,MAAEwJ,EAAK,YAAEf,GAAgBonM,EAE/B,OACExzM,EAAAA,GAAAA,GAACmzM,GAAU,CACT11I,MAAOA,EACPp9B,UAAWozK,EACX9yJ,SAAUykF,GAAgB/kG,GAAWl3B,QACrC6a,qBAAsBA,EACtB7W,MAAOA,EACPf,YAAaA,EACb2B,QAASwW,MC3Bf,IAAe5lB,EAAAA,EAAAA,IA9BqBq1M,EAClCR,eACAvkJ,kBACAgzC,sBACAl0F,UACA8xB,2BAEA,MAAM,QAAEuiD,GAAYoxH,EAEpB,GAAKpxH,EAIL,OACEpiF,EAAAA,GAAAA,GAACikG,GAAa,CACZ7hB,QAASA,EACTliF,KAAM+zM,EAAAA,IACNhyG,oBAAqBA,EACrB90F,MAAOi1E,EAAQ2Q,MACfjzF,UAAU,sBACViO,QAASA,EACT22F,SAAU8uG,EACVvkJ,gBAAiBA,EACjBm1C,YAAU,EACVI,eAAa,EACb3kE,qBAAsBA,MCXtBshC,IAAerrD,EAAAA,GAAAA,IAAUsrD,GAAOA,IAAM,KAAK,GA4MjD,IAAeziE,EAAAA,EAAAA,IAzLwBu1M,EACrCvoM,SACA6qD,QACA29I,YACAC,mBACAC,WACAC,gBACArlJ,kBACAq6I,cACA79I,WACA5/C,UACA0oM,iBACA10K,2BAEA,MAAM,SACJ8O,EAAQ,SACR6lK,EAAQ,qBACRC,IACEzoM,EAAAA,EAAAA,MAEEsd,GAAejgB,EAAAA,EAAAA,OACf,aAAEya,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BvY,OAAQ9I,OAAWA,GAAW,GACnG6xM,GAAoBvkK,EAAAA,GAAAA,GAAiBgkK,EAAWrwL,IAEpDu8E,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAC1BC,QAASt3E,EACTogL,WA/C6B,IAgD7Bz/L,YAAa0B,IAGTs8C,GAAiB17C,EAAAA,EAAAA,GAAgB,EAAGggB,gBACpCA,IAAc21C,EAAAA,GAAkBC,WAClChB,GAAa1V,KAIXunJ,EAAgBre,GAAsB,CAC1Cn7K,SAAU7N,EACVkpL,6BAA8B6f,EAC9B5f,kBAAmB4f,EACnBvrJ,MAAOirJ,EACPxwK,SAAU2wK,EACV1oM,aAGFtB,EAAAA,EAAAA,IAAU,KACRmqL,GAAsB,uBAAwBse,EAAe1pL,IAC5D,CAAC0pL,IAEJ,MAAM2B,GAAepoM,EAAAA,EAAAA,GAAgB,KACnCoiC,EAAS,CAAE9uC,GAAI22D,IACfg+I,EAAS,CAAEh+I,MAAOA,EAAQo+I,MAAOP,EAAUvhJ,eAGvC+hJ,GAAoBtoM,EAAAA,EAAAA,GAAgB,KACxC,MAAM8zD,GAAQC,EAAAA,GAAAA,KAEdm0I,EAAqB,CACnBj+I,MAAOA,EACPj/C,IAAK+8L,EAAe/8L,IACpBxC,WAAYu/L,EAAex/L,KAC3BurD,QACAy0I,qBAAqB,MAInBC,GAAuBx+K,EAAAA,EAAAA,GAC3B69K,GAAkBzyM,OACdyyM,OACAvxM,EACJihB,GAEIkxL,EAA2BZ,GAAkBzyM,OAASyyM,EAAmBW,EAE/E,IAAKjxL,KAAkBkxL,GAA0BrzM,QAAU0yM,GAAYC,GACrE,OAGF,MAAMx0M,GAAYqW,EAAAA,GAAAA,GAChB,oCACAX,EAAAA,GAAe,eAAiB,gBAChCk/L,GAAqB,UACrB1wL,GAqFF,OACEpkB,EAAAA,GAAAA,IAACspD,GAAAA,EAAc,CACbj1C,IAAKqV,EACLxpB,UAAWA,EACXqpD,MAAO6rJ,EACPnlJ,aAAa,uBACbyS,YAAU,EACVlZ,WAAYnB,EACZgtJ,cAAe,IAAIl1M,SAAA,CAElBs0M,IA1FDr0M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAAC5iB,QAAM,EAAC7f,UAAU,wBAAwBiO,QAAS4mM,EAAa50M,UACvEC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEs0M,EAAUv/L,SA0FpCw/L,IAnFDt0M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAAC5iB,QAAM,EAAC7f,UAAU,wBAAwBiO,QAAS8mM,EAAkB90M,UAC5EC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEu0M,EAAex/L,SAmFzC/J,QAAQiqM,GAA0BrzM,SA7E9BqzM,EAA0BvhM,IAAI,CAACyhM,EAAiB1wM,KACrD,OAAQ0wM,EAAgBh0M,MACtB,IAAK,MACH,OACElB,EAAAA,GAAAA,GAAC0zM,GAAS,CAERF,aAAc0B,EACdjzG,oBAAqBA,EACrBl0F,QAASwmM,EACTtlJ,gBAAiBA,EACjBq6I,YAAaA,GALR4L,EAAgBr1M,IAS3B,IAAK,QACH,OACEG,EAAAA,GAAAA,GAAC4zM,GAAW,CAEVC,aAAca,EACdlB,aAAc0B,EACdnnM,QAASwmM,GAHJW,EAAgBr1M,IAO3B,IAAK,UACH,OACEG,EAAAA,GAAAA,GAACg0M,GAAa,CAEZR,aAAc0B,EACdjzG,oBAAqBA,EACrBl0F,QAASwmM,EACTtlJ,gBAAiBA,EACjBpvB,qBAAsBA,GALjBq1K,EAAgBr1M,IAS3B,IAAK,QACL,IAAK,OACL,IAAK,OACH,OACEG,EAAAA,GAAAA,GAAC4zM,GAAW,CAEVn2I,MAAOu1I,IAAkBxuM,EACzBgvM,aAAc0B,EACdnnM,QAASwmM,GAHJW,EAAgBr1M,IAM3B,IAAK,UACL,IAAK,QACL,IAAK,QACH,OACEG,EAAAA,GAAAA,GAACuzM,GAAa,CAEZ91I,MAAOu1I,IAAkBxuM,EACzBgvM,aAAc0B,EACdnnM,QAASwmM,GAHJW,EAAgBr1M,IAO3B,QACE,eCnEV,IAAelB,EAAAA,EAAAA,IAnHkBw2M,EAC/BxpM,SACAa,SACA4oM,mBACAC,gBACAx1K,uBACAh0B,cAEA,MAAM,kBAAEypM,EAAiB,iBAAE3zK,IAAqB31B,EAAAA,EAAAA,MAG1Co5B,GAAY8G,EAAAA,EAAAA,MAAYxF,MAAMC,KAC9BsmB,GAAY/gB,EAAAA,EAAAA,MAAYghB,MAAMvmB,KAE9B55B,GAAOC,EAAAA,EAAAA,KACPsc,GAAejgB,EAAAA,EAAAA,OAEduhM,EAAkBC,EAAkB0K,IAAmBzK,EAAAA,GAAAA,GAAen/L,EAAQE,OAAShJ,IAE9F0H,EAAAA,EAAAA,IAAU,KACJoB,GACF4pM,KAED,CAAC5pM,EAAQ4pM,IAEZ,MAAMzf,GAAmBvpL,EAAAA,EAAAA,GAAiB1M,IACxCgM,IACAypM,EAAkB,CAAE9oM,OAAQA,EAASgpM,SAAU31M,MAG3C41M,EAAsB9gB,GAAsB,CAChDn7K,SAAU7N,EACVw9C,MAAOksJ,EACPzxK,SAAUkyJ,EACVf,mBAAmB,EACnBH,kCAAkC,EAClC/oL,YAaF,OAVAtB,EAAAA,EAAAA,IAAU,KACRmqL,GAAsB,uBAAwB+gB,EAAqBnsL,IAClE,CAACmsL,KAEJlrM,EAAAA,EAAAA,IAAU,KACJ8qM,IAAkBA,EAAc1zM,QAClCkK,KAED,CAACwpM,EAAexpM,KAGjBjM,EAAAA,GAAAA,IAACmgB,GAAAA,EAAI,CACHpU,OAAQA,EACR6H,UAAU,OACVwM,UAAU,SACVnU,QAASA,EACT/L,UAAU,aACVgM,oBAAqBD,EACrBw/L,aAAe71L,EAAAA,QAAkC3S,EAAnB+nM,EAC9B7kL,aAAevQ,EAAAA,QAAkC3S,EAAnBgoM,EAC9Bz4F,mBAAoB58F,EAAAA,GACpB08F,WAAS,EAAAnyG,SAAA,EAETC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,gBAAgBuW,IAAI,OAAMtW,SAAEgN,EAAK,wBAC/Cq4B,GAAa6nB,GAAaooJ,GAAe5hM,IAAI,EAAG5T,KAAI4qF,aAAajmF,KAChE,MAAM2vC,EAAO/O,EAAUvlC,GACjBqP,EAAO+9C,EAAUptD,GACjBk0B,EAAOogB,GAAQjlC,EAiBfwmM,GAAkBv/L,EAAAA,GAAAA,GAAei/L,IAAqBv1M,GAAM,YAElE,OACED,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAEPziC,UAAU,yDAEViO,QAtBgBwW,MACbkmE,GAAa5qD,EAChBi2J,EAAiBj2L,GAEjB8hC,EAAiB,CACf/gC,QAASmM,EAAK,+BACd0yI,WAAY1yI,EAAK,QACjBjL,OAAQ,CACNA,OAAQ,mBACR2tI,QAAS,CAAC,MAcdhyE,MAAOg4I,IAAwBjxM,EAC/BghD,cAAe3lB,GAAwB4qD,IAClCzqF,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAAazN,UAAU,wBAAyBC,SAAA,EAEhEC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACL5zB,KAAK,QACL6zB,KAAMA,EACNj0B,UAAW41M,KAEb91M,EAAAA,GAAAA,IAAA,OAAKE,UAAU,OAAMC,SAAA,CAClBg0B,IAAQ/zB,EAAAA,GAAAA,GAAC+uD,GAAAA,EAAa,CAACh7B,KAAMA,EAAM4hL,QAAM,KAC1C31M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SACvBo0C,EACGpnC,EAAK,4BACLA,EAAK,cAAemC,GAAM0mM,aAAc,YAlB3C/1M,UCGjB,IAAelB,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUqpG,mBACF,CACL//F,KAAK+kF,EAAAA,EAAAA,KAAiBruF,EAAQqpG,GAC9B1H,YAAYgrF,EAAAA,EAAAA,KAAyB3sL,GACrCw+B,sBAAsB0B,EAAAA,EAAAA,KAA2BlgC,KALnCsN,CAzFgCknM,EAClDnrG,eAAczI,sBAAqBt3F,MAAKq4F,aACxCzvC,cAAa1zB,2BAEb,MAAM,aAAEgxD,EAAY,iBAAEyY,EAAgB,eAAExY,IAAmB9kF,EAAAA,EAAAA,MAErDk2F,GAAkB74F,EAAAA,EAAAA,MAElB0D,GAAOC,EAAAA,EAAAA,KACPstK,EAAU3vK,IAAQA,EAAI8gG,YAAc1gG,QAAQJ,EAAI6gG,eAChDsqG,EAAoB/qM,QAAQJ,GAAKu4E,UAEjC0pH,GAAoB7kM,EAAAA,EAAAA,IAAQ,KAChC,IAAK4C,EACH,MAAO,GAGT,MAAMorM,GAAqBprM,EAAIu4E,UAAUvlD,OAAO,EAAGynE,eAAgBA,IAAc,IAC9Er3D,MAAM,EArBuB,GAsB1BioK,GAAmBrrM,EAAIsrM,QAAU,IAAIxiM,IAAI,EAAG5T,QAASA,GACrDq2M,EAAgBvrM,EAAIu4E,SAAWv4E,EAAIu4E,SAASvlD,OAAO,EAAG99B,SAAUm2M,EAAgBlmL,SAASjwB,IAAO,GAEtG,MAAO,IAAIk2M,KAAuBprM,EAAIsrM,QAAU,MAAQC,GAAenoK,MAAM,EAxBrD,IAyBvB,CAACpjC,KAEJJ,EAAAA,EAAAA,IAAU,MAEHurM,GAAqBlJ,EAAkBjrM,OA7BpB,GA6BoDgJ,GAC1EkmF,EAAa,CACXlB,eAAgB,CACd3R,UAAWrzE,EAAIqzE,cAIpB,CAAC83H,EAAmBlJ,EAAkBjrM,OAAQkvF,EAAclmF,EAAK+/F,IAEpE,MAAMD,GAAiB9qG,EAAAA,EAAAA,IAAY,KACjC2pG,EAAiB,CAAEoB,kBAClB,CAACpB,EAAkBoB,IAEhByrG,GAAqBx2M,EAAAA,EAAAA,IAAayiF,IACtC0O,EAAe,CAAEnB,eAAgBvN,EAAQuN,kBACxC,CAACmB,IAEJ,IAAKnmF,EACH,OAGF,MAAMyrM,EAAoBxJ,EAAkBjrM,OAAS,EAErD,OACE/B,EAAAA,GAAAA,IAAA,OAAkBE,UAAU,cAAcuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAC5EH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,EACjCH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,QAAQuW,IAAI,OAAMtW,SAAE4K,EAAIwC,SACtCnN,EAAAA,GAAAA,GAAA,KAAGF,UAAU,QAAQuW,IAAI,OAAMtW,SAAEgN,EAAK,WAAYpC,EAAIyoB,MAAO,WAE/DpzB,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAWw6K,EAAU,gBAAaz3K,EAClCgL,MAAM,UACN3N,KAAK,OACLqsG,MAAI,EACJnkD,OAAK,EACLr6C,QAAS08F,EAAe1qG,SAEvBgN,EAAKutK,EAAU,qBAAuB,0BAG3C16K,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2CAA0CC,SAAA,EACvDC,EAAAA,GAAAA,GAAA,UAAQiU,IAAKiuF,EAAiBpiG,UAAU,mBACtCs2M,IAAqBp2M,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,IAC9B4tL,GAAqBxJ,EAAkBn5L,IAAK2uE,IAC3CpiF,EAAAA,GAAAA,GAACikG,GAAa,CACZ7hB,QAASA,EACTliF,KAAMm2M,EAAAA,IACNp0G,oBAAqBA,EACrB1hF,QAASyiF,GAAczvC,EACvBmxC,SAAUtiB,EACVr0E,QAASooM,EACTjyG,eAAa,EACbrkE,qBAAsBA,EACtBqiE,gBAAiBA,UA9Bfv3F,EAAI9K,OCpDZshE,IAAerrD,EAAAA,GAAAA,IAAUsrD,GAAOA,IAAM,KAAO,GA0EnD,IAAeziE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAMg0B,GAAgBihL,EAAAA,EAAAA,KAA2Bj1M,IAC3C,MAAE+iC,EAAK,UAAEmyK,GAAclhL,GAAiB,CAAC,GACzC,SAAEmhL,GAAan1M,EAAO6hF,SAE5B,MAAO,CACL9+C,QACAkpE,YAAakpG,EAAStoG,OACtBqoG,YACAhjJ,YAAaxoD,SAAQgE,EAAAA,EAAAA,KAAe1N,GAAQo1M,6BAV9B9nM,CAxE6B+nM,EAC/Cl9L,WACA4qB,QACAkpE,cACAipG,YACAhjJ,cACA1nD,cAEA,MAAM,qBAAE8qM,IAAyB3qM,EAAAA,EAAAA,MAE3Bsd,GAAejgB,EAAAA,EAAAA,MAEf0D,GAAOC,EAAAA,EAAAA,MAGXqzF,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAASt3E,EAAcg4E,WApBzB,MAqE5B,OA7CA/2F,EAAAA,EAAAA,IAAU,KACR42D,GAAa,KACXw1I,SAIJ5rL,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAsCR7L,EAAAA,GAAAA,GAAA,OAAKiU,IAAKqV,EAAcxpB,UAAU,8BAA8BuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAnCtG,WACE,QAAc8C,IAAVuhC,EAIJ,OAAKA,GAASkpE,EACLA,EAAY75F,IAAK5T,IACtBG,EAAAA,GAAAA,GAAC61M,GAAgB,CAEfnrG,aAAc7qG,EACdoiG,oBAAqBA,EACrB1uC,YAAaA,GAHR1zD,IAQP02M,EACGA,EAAU50M,OAIR40M,EAAU9iM,IAAK5T,IACpBG,EAAAA,GAAAA,GAAC61M,GAAgB,CAEfnrG,aAAc7qG,EACdoiG,oBAAqBA,EACrB1uC,YAAaA,GAHR1zD,KALAG,EAAAA,GAAAA,GAAA,KAAGF,UAAU,cAAcuW,IAAI,OAAMtW,SAAC,oBAa1CC,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,GACjB,CAIKyrD,QCiEP,IAAev8G,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAMg0B,GAAgBuhL,EAAAA,EAAAA,KAAuBv1M,IACvC,MAAE+iC,EAAK,QAAE23F,GAAY1mG,GAAiB,CAAC,GACvC,OAAE7oB,EAAM,SAAE8C,IAAaD,EAAAA,EAAAA,KAAyBhO,IAAW,CAAC,EAC5D6N,EAAO1C,GAAS6nC,EAAAA,EAAAA,KAAWhzC,EAAQmL,QAAU3J,EAC7CiuD,EAAetkD,GAASukD,EAAAA,EAAAA,KAAmB1vD,EAAQmL,QAAU3J,EAC7D4sH,EAAgBvgH,GAAOwgH,EAAAA,EAAAA,KAAoBruH,EAAQ6N,QAAQrM,EAC3DosD,EAAkBlkD,QAAQyB,KAAW8nB,EAAAA,EAAAA,KAAqBjzB,EAAQmL,GAClEitK,EAAajtK,GAAU8C,GAAWoqK,EAAAA,EAAAA,KAAiBr4K,EAAQmL,EAAQ8C,QAAYzM,EAC/E82K,EAAkB5uK,SAAS0uK,GAAYG,gBAAkBH,GAAYI,eACrEpsH,EAAQjhD,GAAU8C,GAAWw2H,EAAAA,EAAAA,KAAYzkI,EAAQmL,EAAQ8C,QAAYzM,EAI3E,MAAO,CACLuhC,QACA23F,UACA7sH,OACA4hD,eACA2+D,gBACAxgE,kBACA4nJ,cAVoB9rM,QAAQmE,IAASnE,QAAQuE,KAC1Co+C,EAAAA,EAAAA,IAAiBx+C,EAAMu+C,EAAOksH,EAAiB7oH,GAUlDipH,uBAAwBhvK,QAAQyB,KAAWwtK,EAAAA,EAAAA,KAA6B34K,EAAQmL,GAChF4C,oBAAoBC,EAAAA,EAAAA,KAAyBhO,KAxB/BsN,CAlHyBmoM,EAC3Ct9L,WACA4qB,QACA23F,UACA7sH,OACA4hD,eACA2+D,gBACAsqD,yBACA9qH,kBACA4nJ,gBACAznM,qBACAvD,cAEA,MAAM,eACJkrM,EAAc,YACdzjJ,EAAW,kBACX0jJ,IACEhrM,EAAAA,EAAAA,MAEEsd,GAAejgB,EAAAA,EAAAA,OAEdkxK,EAAiBC,IAAYC,EAAAA,GAAAA,GAAYV,IAG9C15E,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAASt3E,EAAcogL,WA3BzB,MA6BtBJ,EAAcuN,IACfr9B,EAAAA,EAAAA,IAA4BtqK,EAAM4hD,EAAc2+D,EAAexgE,GAAiBq6I,YAE/E2N,GAAiBt3M,EAAAA,EAAAA,IAAY,CAACg2B,EAAes+F,EAAoBgmD,KACrE,GAAIqvB,EAAa,CACf,IAAKl6L,EACH,OAGE6qK,EACFM,EAAiBK,IACftnH,EAAY,CACVQ,YAAa1kD,EACbumB,MACAilJ,cACA3mD,eAIJ3gE,EAAY,CAAEQ,YAAa1kD,EAAoBumB,MAAKs+F,YAExD,CAEIz+G,EAAAA,IACFwhM,EAAkB,CAAE5yK,WAAOvhC,KAE5B,CAACymM,EAAal6L,EAAoBmrK,IAE/B28B,GAAuBv3M,EAAAA,EAAAA,IAAY,KACvCo3M,KACC,CAACA,IAEEhqM,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IA+BV,MAAMsrM,EAAapsM,aAAkBlI,IAAVuhC,GAAuB23F,GAAWA,EAAQp6H,QAErE,OACE/B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,YAAYuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAC7DC,EAAAA,GAAAA,GAACkpD,GAAAA,EAAc,CACbj1C,IAAKqV,EACLxpB,WAAWqW,EAAAA,GAAAA,GAAe,8BAA+BghM,GAAc,QACvEhuJ,MAAO4yE,EACPlsE,aAAa,aACb0S,iBA1GkB,GA2GlBD,YAAU,EACVlZ,WAAY8tJ,EAAqBn3M,SAvCvC,WACE,QAAc8C,IAAVuhC,EAIJ,OAAK23F,EAMAA,EAAQp6H,OAMNo6H,EAAQtoH,IAAKkiB,IAClB31B,EAAAA,GAAAA,GAACuoM,GAAS,CAER5yK,IAAKA,EACLssE,oBAAqBA,EACrBl0F,QAASu7L,EAAc2N,OAAiBp0M,EACxCosD,gBAAiBA,GAJZt5B,EAAI91B,MANTG,EAAAA,GAAAA,GAAA,KAAGF,UAAU,cAAcuW,IAAI,OAAMtW,SAAEgN,EAAK,kBAN5C/M,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,GAmBd,CAeOyrD,KAEFs/D,Q,4BChKP,SAAuB,WAAvB,GAA8C,WAA9C,GAA6F,WAA7F,GAAsL,WAAtL,GAAyM,WAAzM,GAA2N,WAA3N,GAA6O,WAA7O,GAAuQ,WAAvQ,GAA6R,WAA7R,GAA+S,WCyC/S,IAAe77K,EAAAA,EAAAA,IAzBf,UAAkC,cAAEy4M,IAClC,MAAM7/J,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,KACb,OACE53C,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAYzd,SAAA,CACzBq3M,EAAc7kK,eAAiB,IAC9B3yC,EAAAA,GAAAA,IAAA,QAAME,UAAW0d,GAAoBzd,SAAA,EACnCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,gBAAgBzN,UAAW0d,MACrCkjD,EAAAA,GAAAA,IAAqB3zD,EAAMqqM,EAAc7kK,mBAI7C6kK,EAAc9kK,cAAgB,IAC7B1yC,EAAAA,GAAAA,IAAA,QAAME,UAAW0d,GAAoBzd,SAAA,EACnCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,UAAUzN,UAAW0d,MAC/BkjD,EAAAA,GAAAA,IAAqB3zD,EAAMqqM,EAAc9kK,mBAI5C8kK,EAAc9kK,gBAAkB8kK,EAAc7kK,gBAC3CgF,EAAQ,8CAGnB,GCkCA,SAASgtF,GAAcx3H,EAAcnM,EAAqBoI,EAAkBw7H,GAC1E,OAAKx7H,GAKHpJ,EAAAA,GAAAA,IAAA,QAAAG,SAAA,EACEC,EAAAA,GAAAA,GAAA,OACE8D,IAAKkF,EACLuf,IAAI,GACJ5kB,WAAW,EACX7D,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAcgnH,GFpFgE,eEsFzGI,EAAAA,EAAAA,IAAgBhkI,KAAYZ,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,UACvCk3H,EAAAA,EAAAA,GAAqB13H,EAAMnM,GAAS,OAZhC6jI,EAAAA,EAAAA,GAAqB13H,EAAMnM,EAetC,CAEA,UAAejC,EAAAA,EAAAA,IA/D+B04M,EAAGD,gBAAex2M,cAC9D,MAAMmM,GAAOyqC,EAAAA,GAAAA,MACP,wBAAE8/J,IAA4BtrM,EAAAA,EAAAA,MAE9B9C,GAAe87H,EAAAA,GAAAA,GAAapkI,GAC5B0iG,GAAY6hC,EAAAA,GAAAA,GAAoBvkI,EAAS,SACzCwkI,GAAe/8H,EAAAA,EAAAA,GAASi7F,GACxBkhC,EAAez5H,SAAQs6H,EAAAA,EAAAA,IAAqBzkI,IAE5C2jB,GAAc5kB,EAAAA,EAAAA,IAAY,KAC9B23M,EAAwB,CAAE7+L,UAAW7X,EAAQf,MAC5C,CAACy3M,EAAyB12M,EAAQf,KAErC,OACED,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GACTqH,GACAzS,QAAQq6H,GAAgBl8H,IAAiBsU,IAE3CzP,QAASwW,EAAYxkB,SAAA,EAErBH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAazd,SAAA,EAC3BC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAezd,SAC5BwkI,GAAcx3H,EAAMnM,EAASwkI,GAAgBl8H,EAAcs7H,MAE9DxkI,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAYzd,SACzBgN,EACC,yBACA,CAAEqmB,MAAOgkL,EAAc/kK,YACvB,CAAE4tB,YAAam3I,EAAc/kK,mBAKnCzyC,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAYzd,SAAA,EAC1BC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAYzd,UACzB09F,EAAAA,GAAAA,IAAsC,IAAf78F,EAAQqyB,KAAalmB,EAAKguD,SAEpD/6D,EAAAA,GAAAA,GAACu3M,GAAwB,CAACH,cAAeA,YCDjD,SAAS7yE,GAAcx3H,EAAiBmC,EAAelG,GACrD,OACEpJ,EAAAA,GAAAA,IAAA,QAAAG,SAAA,CACGiJ,GACChJ,EAAAA,GAAAA,GAAA,QAAMF,UHtE4D,WGsE3BC,UACrCC,EAAAA,GAAAA,GAAA,OACE8D,IAAKkF,EACLuf,IAAI,GACJ5kB,WAAW,EACX7D,WAAWqW,EAAAA,GAAAA,GAAeqH,GH3E8F,WAA6B,iBG+EzJxd,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACLC,KAAM7kB,EACNhP,KAAK,QACLJ,UAAW0d,KAIdzQ,EAAK,WAGZ,CAEA,UAAepO,EAAAA,EAAAA,IA/Df,UAA+B,KAAEuQ,EAAI,MAAE0wB,EAAK,cAAEw3K,IAC5C,MAAMrqM,GAAOC,EAAAA,EAAAA,MACP,sBAAEwqM,IAA0BxrM,EAAAA,EAAAA,MAC5By0C,EAAW7gB,GAAS,YAAaA,EAEjC39B,EAAQw+C,EAAW7gB,EAAM7sB,QAAQ9Q,WAAQY,EACzC69C,EAAYD,GAAWlgB,EAAAA,EAAAA,IAAkBX,QAAS/8B,EAClD40M,GAAapvM,EAAAA,EAAAA,GAASq4C,GACtBukF,EAAiBwyE,GAAcx1M,GAAOo+B,WAAWl3B,QAEjDob,GAAchY,EAAAA,EAAAA,GAAgB,KAClCirM,EAAsB,CAAEp0K,QAASg0K,EAAch0K,YAGjD,OACExjC,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAaA,IACvCzP,QAASwW,EAAYxkB,SAAA,EAErBH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAazd,SAAA,EAC3BC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAezd,SAC5BwkI,GAAcx3H,EAAMmC,EAAMuoM,GAAcxyE,MAE3CjlI,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAYzd,SACzBgN,EAAK,0BAA2BqqM,EAAc/kK,WAAY,WAI/DzyC,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAYzd,SAAA,EAC1BC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAYzd,SACzB0gD,GAAY11C,QAAQ60B,EAAM3M,QAASwqE,EAAAA,GAAAA,IAAoC,IAAb79D,EAAM3M,KAAalmB,EAAKguD,SAErF/6D,EAAAA,GAAAA,GAACu3M,GAAwB,CAACH,cAAeA,SAIjD,GChEA,GAAuB,WAAvB,GAA2K,WAA3K,GAAqS,WAArS,GAAwT,WAAxT,GAA2U,WAA3U,GAA+V,WCmC/V,IAAIM,GACAC,GAWJ,MAAMC,GAAwB,CAC5BC,YAAa,4BACbC,eAAgB,+BAChBC,UAAW,mCACXC,cAAe,kCACfC,mBAAoB,mCACpBC,0BAA2B,0CAC3BC,eAAgB,8BAChBC,kBAAmB,kCACnBC,wBAAyB,+BACzBC,uBAAwB,6BACxBC,6BAA8B,uCAE1BC,GAAiB31J,OAAO8K,KAAKiqJ,IAE7Ba,GAAsB,CAC1BZ,YAAa,yBACba,aAAc,0BACdP,eAAgB,4BAChBQ,cAAe,2BACfC,aAAc,0BACdZ,cAAe,4BAEXa,GAAeh2J,OAAO8K,KAAK8qJ,IA4LjC,IAAe95M,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAMssM,GAAaC,EAAAA,EAAAA,KAAiB13M,EAAQmL,GACtC0C,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,GAC1BwsM,GAAOjoJ,EAAAA,EAAAA,KAAmB1vD,EAAQmL,IAASysM,eAC3CvlL,EAAyB,uBAAfxkB,GAAMhO,KAChBg4M,GAAehkL,EAAAA,EAAAA,KAAmB7zB,EAAQmL,GAC1C2sM,GAAcvrK,EAAAA,EAAAA,KAAkBvsC,EAAQmL,IAASm6B,KAEvD,MAAO,CACLmyK,aAAYE,OAAMtlL,UAASxkB,OAAMgqM,eAAcC,gBAVjCxqM,CA7KDyqM,EACjB5sM,SACA0C,OACA4pM,aACAE,OACAtlL,UACAwlL,eACAC,kBAEA,MAAMpsM,GAAOC,EAAAA,EAAAA,KACPsc,GAAejgB,EAAAA,EAAAA,OACdgQ,EAASggM,IAAcltM,EAAAA,EAAAA,KAAS,GACjCmtM,GAAejwM,EAAAA,EAAAA,IAAoB,IAAI+kC,KACvCmrK,GAAclwM,EAAAA,EAAAA,IAAoB,IAAI+kC,MAEtC,eAAEorK,EAAc,yBAAEC,IAA6BztM,EAAAA,EAAAA,MAC/C5B,GAAcC,EAAAA,EAAAA,MAEpBE,EAAAA,EAAAA,IAAU,KACRivM,EAAe,CAAEhtM,SAAQknB,aACxB,CAAClnB,EAAQgtM,EAAgB9lL,IAE5B,MAAMgmL,GAAS3xM,EAAAA,EAAAA,IAAQ,IACd2rB,EAAUmlL,GAAeL,GAC/B,CAAC9kL,IAEEimL,GAAc5xM,EAAAA,EAAAA,IAAQ,IACnB2rB,EAAU+kL,GAAsBb,GACtC,CAAClkL,IAqFJ,OAlFAnpB,EAAAA,EAAAA,IAAU,KACHuuM,GAILY,EAAOjiM,QAASlK,IACd,MAAMqsM,EAAQd,EAAWvrM,IACpBssM,EAAAA,GAAAA,GAAQD,IAGuB,UAApBA,EAAME,WAGpBL,EAAyB,CACvBlsM,OACAf,SACAutM,MAAOH,EAAMG,MAEbC,aAAuB,mBAATzsM,OAInB,CAACmsM,EAAQltM,EAAQssM,EAAYW,KAEhClvM,EAAAA,EAAAA,IAAU,KACR,iBAvGJiO,iBAME,OALKk/L,KACHA,GAAqB,gCACrBC,SAAoBD,IAGfA,EACT,CAiGYuC,GAED5gM,EAKAy/L,GAAexvL,EAAa9f,UAIjCkwM,EAAOjiM,QAAQ,CAAClK,EAAM/I,KACpB,MAAMo1M,EAAQd,EAAWvrM,GACzB,KAAKssM,EAAAA,GAAAA,GAAQD,GACX,OAGF,MAAMM,EAA8B,UAApBN,EAAME,UAChBK,EAA8B,UAApBP,EAAME,UAEtB,GAAII,GAAWZ,EAAa9vM,QAAQ0kC,IAAI3gC,GACtC,OAGF,GAAI4sM,EAIF,OAHAb,EAAa9vM,QAAQhG,IAAI+J,QACzBgsM,EAAY/vM,QAAQhG,IAAI+J,GAK1B,MAAM,UAAE6sM,GAAcR,EAEtBjC,GAAY0C,OACV/wL,EAAa9f,QAASzJ,SAASyE,GAC/B,CACE2I,MAAOJ,EAAM4sM,EAAuCpsM,OACjD6sM,EAAY,CACbrqL,OAASvT,IAAc5D,EAAAA,GAAAA,IAAQ,4BAA6B,CAAEmhM,MAAOK,EAAW59L,IAAGw8L,SACnFsB,aAAcvtM,EAAK,kBACjB,CAAC,KACF6sM,IAIPN,EAAa9vM,QAAQhG,IAAI+J,GAEzB+b,EAAa9f,QAASzJ,SAASyE,GAAOjB,UAAU+b,OAAO9B,MAGzDpT,KA/CEivM,GAAW,EAgDd,EApDD,IAqDC,CACDK,EAAQC,EAAatgM,EAASy/L,EAAY/rM,EAAMP,EAAQitM,EAA0BT,EAAM5uM,KAIxFxK,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAa,8BAA+BnE,GAAWmE,IAAczd,SAAA,CACjG+4M,IACC94M,EAAAA,GAAAA,GAACu6M,GAAAA,EAAkB,CACjBzB,WAAYA,EACZ53M,KAAMwyB,EAAU,QAAU,UAC1BvmB,MAAOJ,EAAK,wBAIdusM,EAAa9vM,QAAQtJ,OAAQF,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,KAEvCzvD,EAAAA,GAAAA,GAAA,OAAKiU,IAAKqV,EAAavpB,SACpB25M,EAAOjmM,IAAKmmM,IACX,MAAMY,EAAelB,EAAa9vM,QAAQ0kC,IAAI0rK,KAAWL,EAAY/vM,QAAQ0kC,IAAI0rK,GACjF,OACE55M,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,IAAeg9L,GAAgBh9L,UAKnEzS,QAAS+tM,GAAqC2B,aAAa94M,UAC1D/B,EAAAA,GAAAA,IAAA,OAAKE,UD5NkI,WC4NvGC,SAAA,EAC9BC,EAAAA,GAAAA,GAAA,MAAIF,UD7NoN,WC6NpLC,SAAEgN,EAAK,gCAEzC+rM,EAAoC2B,YAAYhnM,IAAK2jM,IACrD,GAAI,UAAWA,EAAe,CAC5B,MAAMx2M,EAAUs4M,EAAa9B,EAAc7kF,OAC3C,IAAK3xH,KAAa,YAAaA,GAAU,OAEzC,OACEZ,EAAAA,GAAAA,GAACq3M,GAAuB,CAEtBz2M,QAASA,EACTw2M,cAAeA,GAFV,qBAAqBA,EAAc7kF,QAK9C,CAEA,GAAI,YAAa6kF,GAAiBloM,EAAM,CACtC,MAAM0wB,EAAQu5K,IAAc/B,EAAch0K,SAE1C,OACEpjC,EAAAA,GAAAA,GAAC06M,GAAqB,CAEpBxrM,KAAMA,EACN0wB,MAAOA,EACPw3K,cAAeA,GAHV,mBAAmBA,EAAch0K,UAM5C,aCxPZ,GAAuB,WAAvB,GAA0C,WAA1C,GAA6D,WC4C7D,IAAezkC,EAAAA,EAAAA,IA1BsCg8M,EAAGjiM,WACtD,MAAM3L,GAAOC,EAAAA,EAAAA,MACP,mBAAEyrG,IAAuBzsG,EAAAA,EAAAA,MAEzB4sG,GAAW7wG,EAAAA,EAAAA,IAAQ,IAAO2Q,EAAKxJ,MAAOu2J,EAAAA,EAAAA,IAAgB/sJ,EAAKxJ,WAAQrM,EAAY,CAAC6V,EAAKxJ,OACrFqV,GAAc5kB,EAAAA,EAAAA,IAAY,KAC9B84G,EAAmB,CAAEG,SAAUA,EAAWngG,UAAWC,EAAKD,aACzD,CAACC,EAAKD,UAAWggG,EAAoBG,IAExC,OACEh5G,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAa,4BAA6BzP,QAASwW,EAAYxkB,SAAA,EAC5FC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CAAC5zB,KAAK,SAAS6zB,KAAMrb,EAAKxJ,QAEjCtP,EAAAA,GAAAA,IAAA,OAAAG,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAazd,SAC1B2Y,EAAKvL,SAGRnN,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAazd,SAC1BgN,EAAK,0BAA2B2L,EAAKw5B,MAAO,eCVvD,IAAIwlK,GACAC,GAWJ,MAAMiD,GAAe,CACnBC,WAAY,iCACZC,eAAgB,gCAEZC,GAASl4J,OAAO8K,KAAKitJ,IAqK3B,IAAej8M,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAMwsM,GAAOjoJ,EAAAA,EAAAA,KAAmB1vD,EAAQmL,IAASysM,eAC3CnqM,GAAWC,EAAAA,EAAAA,KAAe1N,GAIhC,MAAO,CAAEy3M,WAHUhqM,EAASgqM,WAAWkC,eAGlBhC,OAAMvgM,UAFT3J,EAASgqM,WAAWmC,mBALtBtsM,CAxJpB,UAA2B,OACzBnC,EAAM,SACNgN,EAAQ,WACRs/L,EAAU,KACVE,EAAI,UACJvgM,IAEA,MAAM1L,GAAOC,EAAAA,EAAAA,KACPsc,GAAejgB,EAAAA,EAAAA,OACdgQ,EAASggM,IAAcltM,EAAAA,EAAAA,KAAS,GACjCmtM,GAAejwM,EAAAA,EAAAA,IAAoB,IAAI+kC,KACvCmrK,GAAclwM,EAAAA,EAAAA,IAAoB,IAAI+kC,MAEtC,sBAAE8sK,EAAqB,0BAAEC,EAAyB,yBAAE1B,IAA6BztM,EAAAA,EAAAA,MACjF5B,GAAcC,EAAAA,EAAAA,MAEpBE,EAAAA,EAAAA,IAAU,KACJkO,GACFyiM,EAAsB,CAAE1uM,SAAQiM,eAEjC,CAACjM,EAAQ0uM,EAAuBziM,KAEnClO,EAAAA,EAAAA,IAAU,KACHiP,IAAYf,IACf6gM,EAAa9vM,QAAQkB,QACrB6uM,EAAY/vM,QAAQkB,QACpB2uM,GAAW,KAEZ,CAAC7/L,EAAUf,KAGdlO,EAAAA,EAAAA,IAAU,KACHuuM,GAILiC,GAAOtjM,QAASlK,IACd,MAAMqsM,EAAQd,EAAWvrM,IACpBssM,EAAAA,GAAAA,GAAQD,IAGuB,UAApBA,EAAME,WAGpBL,EAAyB,CAAElsM,OAAMf,SAAQutM,MAAOH,EAAMG,WAGzD,CAACvtM,EAAQssM,EAAYW,KAExBlvM,EAAAA,EAAAA,IAAU,KACR,iBA5EJiO,iBAME,OALKk/L,KACHA,GAAqB,gCACrBC,SAAoBD,IAGfA,EACT,CAsEYuC,GAED5gM,EAKAy/L,GAAexvL,EAAa9f,UAIjCuxM,GAAOtjM,QAAQ,CAAClK,EAAM/I,KACpB,MAAMo1M,EAAQd,EAAWvrM,GACzB,KAAKssM,EAAAA,GAAAA,GAAQD,GACX,OAEF,MAAMM,EAA8B,UAApBN,EAAME,UAChBK,EAA8B,UAApBP,EAAME,UAEtB,GAAII,GAAWZ,EAAa9vM,QAAQ0kC,IAAI3gC,GACtC,OAGF,GAAI4sM,EAIF,OAHAb,EAAa9vM,QAAQhG,IAAI+J,QACzBgsM,EAAY/vM,QAAQhG,IAAI+J,GAK1B,MAAM,UAAE6sM,GAAcR,EAEtBjC,GAAY0C,OACV/wL,EAAa9f,QAASzJ,SAASyE,GAC/B,CACE2I,MAAOJ,EAAM6tM,GAAwCrtM,OAClD6sM,EAAY,CACbrqL,OAASvT,IAAc5D,EAAAA,GAAAA,IAAQ,4BAA6B,CAAEmhM,MAAOK,EAAW59L,IAAGw8L,SACnFsB,aAAcvtM,EAAK,kBACjB,CAAC,KACF6sM,IAIPN,EAAa9vM,QAAQhG,IAAI+J,KAG3BnD,KA5CEivM,GAAW,EA6Cd,EAjDD,IAkDC,CACDhgM,EAASy/L,EAAY/rM,EAAMP,EAAQiM,EAAWghM,EAA0BT,EAAM5uM,IAGhF,MAAM69C,GAAiB17C,EAAAA,EAAAA,GAAgB,EAAGggB,gBACpCA,IAAc21C,EAAAA,GAAkBC,WAAa1pD,GAC/C0iM,EAA0B,CAAE3uM,SAAQiM,gBAIxC,OAAKY,GAAYy/L,GAAergM,GAK9B7Y,EAAAA,GAAAA,IAAA,OAEEE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAa,gBAAiBnE,GAAWmE,IAAczd,SAAA,EAEjFC,EAAAA,GAAAA,GAACu6M,GAAAA,EAAkB,CAACzB,WAAYA,EAAY53M,KAAK,UAAUiM,MAAOJ,EAAK,yBAEpEusM,EAAa9vM,QAAQtJ,OAAS44M,EAAWsC,sBAAuBp7M,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,KAE3EzvD,EAAAA,GAAAA,GAAA,OAAKiU,IAAKqV,EAAavpB,SACpBg7M,GAAOtnM,IAAKmmM,IACX,MAAMY,EAAelB,EAAa9vM,QAAQ0kC,IAAI0rK,KAAWL,EAAY/vM,QAAQ0kC,IAAI0rK,GACjF,OACE55M,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,IAAeg9L,GAAgBh9L,UAKnEzS,QAAQ+tM,EAAWuC,kBAClBz7M,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAsBzd,SAAA,EACpCC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAA2Bzd,SAAEgN,EAAK,iCAEjD/M,EAAAA,GAAAA,GAACkpD,GAAAA,EAAc,CACbC,MAAO2vJ,EAAWsC,mBAClBvrJ,aAAa,4BACbzG,WAAYnB,EACZqa,YAAU,EAAAviE,SAER+4M,EAAWsC,mBAAiD3nM,IAAK7E,IACjE5O,EAAAA,GAAAA,GAAC26M,GAA8B,CAAsBjiM,KAAM9J,GAAtBA,EAAK6J,mBA3B7C,GAAGjM,KAAUiM,MALbzY,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,GAuCnB,IC7JA,IAAe9wD,EAAAA,EAAAA,IA3Bf,UAAwC,KAAE+Z,EAAI,UAAEu0C,EAAS,UAAE7nB,IACzD,MAAMr4B,GAAOC,EAAAA,EAAAA,MACP,SAAE2hC,IAAa3iC,EAAAA,EAAAA,MACfmoC,EAAO/O,EAAU1sB,EAAK9M,QACtBsD,EAAO+9C,EAAUv0C,EAAK9M,QAEtB2Y,GAAchY,EAAAA,EAAAA,GAAgB,KAClCoiC,EAAS,CAAE9uC,GAAIs0C,EAAKt0C,OAGtB,OACED,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAa,4BAA6BzP,QAASwW,EAAYxkB,SAAA,EAC5FC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CAAC5zB,KAAK,SAAS6zB,KAAMogB,GAAQjlC,KAEpCtP,EAAAA,GAAAA,IAAA,OAAAG,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAazd,SAC1Bo0C,GAAOtK,EAAAA,EAAAA,IAAgBsK,IAAQge,EAAAA,EAAAA,IAAaplD,EAAMmC,MAGrDlP,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAazd,SAC1B2Y,EAAK25B,WAAatlC,EAAK,0BAA2B2L,EAAK25B,WAAY,KAAOtlC,EAAK,kBAK1F,GCnBA,IAAI2qM,GACAC,GAWJ,MAAMiD,GAAe,CACnBC,WAAY,+BACZC,eAAgB,gCAEZC,GAASl4J,OAAO8K,KAAKitJ,IAsL3B,IAAej8M,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAMwsM,GAAOjoJ,EAAAA,EAAAA,KAAmB1vD,EAAQmL,IAASysM,eAC3CnqM,GAAWC,EAAAA,EAAAA,KAAe1N,GAC1By3M,EAAahqM,EAASgqM,WAAWwC,aACjCl4K,EAAUt0B,EAASgqM,WAAW7qK,gBAC5BtH,KAAMvB,GAAc/jC,EAAOqlC,OAC3BC,KAAMsmB,GAAc5rD,EAAO6rD,MAEnC,MAAO,CACL4rJ,aAAYE,OAAM51K,UAASgC,YAAW6nB,cAVxBt+C,CAvKpB,UAAyB,OACvBnC,EAAM,SACNgN,EAAQ,WACRs/L,EAAU,KACVE,EAAI,QACJ51K,EAAO,UACP6pB,EAAS,UACT7nB,IAEA,MAAMr4B,GAAOC,EAAAA,EAAAA,KACPsc,GAAejgB,EAAAA,EAAAA,OACdgQ,EAASggM,IAAcltM,EAAAA,EAAAA,KAAS,GACjCmtM,GAAejwM,EAAAA,EAAAA,IAAoB,IAAI+kC,KACvCmrK,GAAclwM,EAAAA,EAAAA,IAAoB,IAAI+kC,MAEtC,oBAAEmtK,EAAmB,wBAAEC,EAAuB,yBAAE/B,IAA6BztM,EAAAA,EAAAA,MAC7E5B,GAAcC,EAAAA,EAAAA,MAEpBE,EAAAA,EAAAA,IAAU,KACJ64B,GACFm4K,EAAoB,CAAE/uM,SAAQ42B,aAE/B,CAAC52B,EAAQ42B,KAEZ74B,EAAAA,EAAAA,IAAU,KACHiP,IAAY4pB,IACfk2K,EAAa9vM,QAAQkB,QACrB6uM,EAAY/vM,QAAQkB,QACpB2uM,GAAW,KAEZ,CAAC7/L,EAAU4pB,KAGd74B,EAAAA,EAAAA,IAAU,KACHuuM,GAILiC,GAAOtjM,QAASlK,IACd,MAAMqsM,EAAQd,EAAWvrM,IACpBssM,EAAAA,GAAAA,GAAQD,IAGuB,UAApBA,EAAME,WAGpBL,EAAyB,CAAElsM,OAAMf,SAAQutM,MAAOH,EAAMG,WAGzD,CAACvtM,EAAQssM,EAAYW,KAExBlvM,EAAAA,EAAAA,IAAU,KACR,iBAhFJiO,iBAME,OALKk/L,KACHA,GAAqB,gCACrBC,SAAoBD,IAGfA,EACT,CA0EYuC,GAED5gM,EAKAy/L,GAAexvL,EAAa9f,UAIjCuxM,GAAOtjM,QAAQ,CAAClK,EAAM/I,KACpB,MAAMo1M,EAAQd,EAAWvrM,GACzB,KAAKssM,EAAAA,GAAAA,GAAQD,GACX,OAEF,MAAMM,EAA8B,UAApBN,EAAME,UAChBK,EAA8B,UAApBP,EAAME,UAEtB,GAAII,GAAWZ,EAAa9vM,QAAQ0kC,IAAI3gC,GACtC,OAGF,GAAI4sM,EAIF,OAHAb,EAAa9vM,QAAQhG,IAAI+J,QACzBgsM,EAAY/vM,QAAQhG,IAAI+J,GAK1B,MAAM,UAAE6sM,GAAcR,EAEtBjC,GAAY0C,OACV/wL,EAAa9f,QAASzJ,SAASyE,GAC/B,CACE2I,MAAOJ,EAAM6tM,GAAwCrtM,OAClD6sM,EAAY,CACbrqL,OAASvT,IAAc5D,EAAAA,GAAAA,IAAQ,4BAA6B,CAAEmhM,MAAOK,EAAW59L,IAAGw8L,SACnFsB,aAAcvtM,EAAK,kBACjB,CAAC,KACF6sM,IAIPN,EAAa9vM,QAAQhG,IAAI+J,KAG3BnD,KA5CEivM,GAAW,EA6Cd,EAjDD,IAkDC,CACDhgM,EAASy/L,EAAY/rM,EAAMP,EAAQ42B,EAASq2K,EAA0BT,EAAM5uM,IAG9E,MAAM69C,GAAiB17C,EAAAA,EAAAA,GAAgB,KAChC62B,GAELo4K,EAAwB,CAAEhvM,SAAQ42B,cAGpC,OAAK/pB,GAAYy/L,GAAe11K,GAK9BxjC,EAAAA,GAAAA,IAAA,OAEEE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAa,gBAAiBnE,GAAWmE,IAAczd,SAAA,EAEjFC,EAAAA,GAAAA,GAACu6M,GAAAA,EAAkB,CAACzB,WAAYA,EAAY53M,KAAK,QAAQiM,MAAOJ,EAAK,wBAEnEusM,EAAa9vM,QAAQtJ,OAAQF,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,KAEvCzvD,EAAAA,GAAAA,GAAA,OAAKiU,IAAKqV,EAAavpB,SACpBg7M,GAAOtnM,IAAKmmM,IACX,MAAMY,EAAelB,EAAa9vM,QAAQ0kC,IAAI0rK,KAAWL,EAAY/vM,QAAQ0kC,IAAI0rK,GACjF,OACE55M,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,IAAeg9L,GAAgBh9L,UAKnEzS,QAAQ+tM,EAAWuC,kBAClBz7M,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAsBzd,SAAA,EACpCC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAA2Bzd,SAAEgN,EAAK,iCAEjD/M,EAAAA,GAAAA,GAACkpD,GAAAA,EAAc,CACbC,MAAO2vJ,EAAWsC,mBAClBvrJ,aAAa,4BACbzG,WAAYnB,EACZqa,YAAU,EAAAviE,SAET+4M,EAAWsC,mBAAoB3nM,IAAK7E,GAC/B,cAAeA,GAEf5O,EAAAA,GAAAA,GAAC26M,GAA8B,CAAmCjiM,KAAM9J,GAAnC,WAAWA,EAAK6J,cAKvDzY,EAAAA,GAAAA,GAACy7M,GAA4B,CAE3B/iM,KAAM9J,EACNq+C,UAAWA,EACX7nB,UAAWA,GAHN,SAASx2B,EAAKw0B,mBAnC1B,GAAG52B,KAAU42B,MALbpjC,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,GAoDnB,I,gBCtEA,UAAe9wD,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUq6M,aACT,MAAM,OAAEC,EAAM,QAAEC,IAAY7sM,EAAAA,EAAAA,KAAe1N,GAAQw6M,YAEnD,MAAO,CACLF,OAAQA,IAASD,EAAOzyK,QACxB7sB,OAASw/L,IAAUF,EAAOzyK,SAAY,KANxBt6B,CA9GiCmtM,EACnD5sM,OACAtO,UACA86M,SACAK,aACAC,cACAL,SACAv/L,aAEA,MAAM,sBACJ6/L,EAAqB,SACrBttK,EAAQ,iBACRutK,IACElwM,EAAAA,EAAAA,MAEEmwM,GAAkB5lL,EAAAA,EAAAA,GAA8BwlL,EAAWK,cAC1DznL,EAAWm3F,IAAgB3/G,EAAAA,EAAAA,KAAkB,GAC9CkwM,EAAkBtxM,QAAQ4wM,IAC1B,OAAE1yK,EAAM,KAAEn0B,GAAS4mM,EACnB3uM,GAAOC,EAAAA,EAAAA,MAEbzC,EAAAA,EAAAA,IAAU,KAEH8xM,GAAmBF,IAAoBJ,EAAWK,aACrDH,EAAsB,CACpB/sM,OAAMuJ,UAAW7X,EAAQf,GAAIopC,SAAQ7sB,SAAQuT,MA5B/B,EA4BqD2sL,mBAAmB,KAIzF,CAACP,EAAWK,YAAaC,IAE5B,MAAME,GAAsB58M,EAAAA,EAAAA,IAAY,KACtCmsH,GAAa,GACbmwF,EAAsB,CACpB/sM,OAAMuJ,UAAW7X,EAAQf,GAAIopC,SAAQ7sB,SAAQuT,MApC3B,MAsCnB,CAACzgB,EAAM+sM,EAAuBr7M,EAAQf,GAAIuc,EAAQ6sB,KAErD1+B,EAAAA,EAAAA,IAAU,KACRuhH,GAAa,IACZ,CAAC6vF,IAEJ,MAAMa,GAAoB78M,EAAAA,EAAAA,IAAaE,IACrC8uC,EAAS,CAAE9uC,OACXq8M,KACC,CAACA,EAAkBvtK,IAetB,OACE/uC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oBAAmBC,SAAA,EAChCH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,cAAaC,SAAA,CACzB47M,EACGA,EAAOloM,IAAK5T,IACZG,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAEPziC,UAAU,sBAEViO,QAASA,IAAMyuM,EAAkB38M,GAAIE,UAEpC2O,EAAAA,EAAAA,IAAS7O,IACRG,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CACd22E,WAAW,OACX7+F,OAAQh+B,EACRilC,eAAa,EACbmhB,kBAAgB,KAGlBjmD,EAAAA,GAAAA,GAACkmD,GAAAA,EAAa,CACZw2E,WAAW,OACXlwH,OAAQ3M,EACRomD,kBAAgB,KAhBfpmD,KAqBPG,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,IACXksJ,GAzCP,WACE,MAAMc,EAAkBV,EAAWK,YAAcT,EAAQh6M,OAEzD,OAAOo6M,EAAWK,YArDA,GAqD+BK,EAAkB,IACjEz8M,EAAAA,GAAAA,GAAC08M,GAAAA,EAAc,CACbtpL,MAAOqpL,EACPr8F,SAAS,QACTzrF,UAAWA,EACX5mB,QAASwuM,GAGf,CA8BiBI,OAEb/8M,EAAAA,GAAAA,IAAA,OAAKE,UAAU,cAAcuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAC/DC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,eAAeuW,IAAI,OAAMtW,UACtC0vC,EAAAA,GAAAA,IAAuB,CACtB36B,KAAMA,EAAKA,KACX29E,SAAU39E,EAAK29E,cAGnB7yF,EAAAA,GAAAA,IAAA,QAAME,UAAU,iBAAiBuW,IAAKtJ,EAAK8kB,MAAQ,YAAShvB,EAAU9C,SAAA,EASvD4M,EAREovM,EAAWK,YAQE91H,EARW01H,EASxC11H,EAAQ,GAAM35E,EAAQ25E,EAAS,KAAKx0D,UAAY,GATK,aAQ9D,IAAuBnlB,EAAe25E,KCvEtC,IAAe3nF,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MACEw6M,aAAa,OAAErvM,EAAM,UAAEiM,KACrB1J,EAAAA,EAAAA,KAAe1N,GAEb6N,EAAO1C,GAAS6nC,EAAAA,EAAAA,KAAWhzC,EAAQmL,QAAU3J,EAC7CjC,EAAU4L,GAAUiM,GAAYsc,EAAAA,EAAAA,KAAkB1zB,EAAQmL,EAAQiM,QAAa5V,EAGrF,MAAO,CACLqM,OACAtO,UACAg8M,KALWh8M,IAAWi8M,EAAAA,EAAAA,KAAsBx7M,EAAQT,KARtC+N,CAjD2BmuM,EAC7CtjM,WACAtK,OACAtO,UACAg8M,OACA/wM,cAEA,MAAMkB,GAAOC,EAAAA,EAAAA,KAOb,IALA+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGLjL,IAAYg8M,IAAS1tM,EACxB,OAAOlP,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,IAGjB,MAAM,QAAEoyI,EAAO,QAAE9lE,GAAY6gF,EAC7B,IAAK7gF,EAAQA,QACX,OAGF,MAAMghF,GAAkBC,EAAAA,GAAAA,IAAqBjhF,EAAQA,QAAS,UAE9D,OACEn8H,EAAAA,GAAAA,IAAA,OAAKE,UAAU,cAAcuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAC/DC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,gBAAgBuW,IAAI,OAAMtW,UACrC0vC,EAAAA,GAAAA,IAAuB,CACtB36B,KAAM+sL,EAAQ52E,SAASn2G,KACvB29E,SAAUovG,EAAQ52E,SAASx4B,cAG/BzyF,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kCAAiCC,SAC7C8hM,EAAQN,QAAQ9tL,IAAKioM,IACpB17M,EAAAA,GAAAA,GAAC87M,GAAiB,CAEhB5sM,KAAMA,EACNtO,QAASA,EACT86M,OAAQA,EACRK,WAAYgB,EAAgBrB,EAAOzyK,QACnC+yK,YAAajgF,EAAQigF,aALhB,GAAGY,EAAK/8M,MAAM67M,EAAOzyK,mB,gBClEtC,SAAuB,WAAvB,GAA4C,WAA5C,GAAiE,WAAjE,GAAuG,WAAvG,GAA2H,WAA3H,GAAoJ,WAApJ,GAAsK,WAAtK,GAAkN,WAAlN,GAAmQ,WC6B7Pg0K,GAAY,EAAIrnM,EAAAA,EA6ItB,IAAejX,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,iBAAE67M,IAAqBnuM,EAAAA,EAAAA,KAAe1N,GAC5C,MAAO,CACL6N,KAAMguM,GAAkB1wM,QAAS6nC,EAAAA,EAAAA,KAAWhzC,EAAQ67M,EAAiB1wM,aAAU3J,EAC/Eq6M,mBACAr9K,sBAAsB0B,EAAAA,EAAAA,KAA2BlgC,KANnCsN,CAhI2BwuM,EAC7C3jM,WACAtK,OACAguM,mBACAr9K,uBACAh0B,cAEA,MAAM,YAAEuxM,EAAW,iBAAEx7K,IAAqB51B,EAAAA,EAAAA,OACnCmB,EAAO4kK,IAAY5lK,EAAAA,EAAAA,IAAS,KAC5BkxM,EAAgBC,IAAqBnxM,EAAAA,EAAAA,IAAS,IAC9CoxM,EAAaC,IAAkBrxM,EAAAA,EAAAA,SAA6BtJ,GAC7DkK,GAAOC,EAAAA,EAAAA,KAEPwjI,EAAYzlI,QAAQoC,GACpBwnB,EAAY5pB,QAAQmyM,GAAkBvoL,YAE5C5J,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGVtB,EAAAA,EAAAA,IAAU,KACHiP,IACHu4J,EAAS,IACTyrC,OAAe36M,KAEhB,CAAC2W,IAEJ,MAAM84J,GAAoB3yK,EAAAA,EAAAA,IAAakN,IACrCklK,EAASllK,EAAEC,OAAOH,QACjB,IAEG8wM,GAAkB99M,EAAAA,EAAAA,IAAY,KAClC29M,EAAmBt7I,IAASwhB,EAAAA,GAAAA,IAAck6H,EAAAA,GAAAA,MAAiB/7M,OAAQqgE,EAAO,KACzE,IAEG27I,GAAoBh+M,EAAAA,EAAAA,IAAY,KACpCy9M,EAAY,CACV5wM,OAAQ0C,EAAMrP,GACdsN,QACAywM,WAAWF,EAAAA,GAAAA,MAAiBL,GAC5BE,iBAED,CAACruM,EAAMkuM,EAAaC,EAAgBE,EAAapwM,IAE9C89L,GAA0BtrM,EAAAA,EAAAA,IAAaozF,IACtCA,EAAMoS,QAAWtlE,GAAwBkzD,EAAMlzF,KAAO+qG,EAAAA,IAKvD7X,EAAMlzF,KAAO+qG,EAAAA,IAKjB4yG,EAAezqH,EAAMlzF,IAJnB29M,OAAe36M,GALf++B,EAAiB,CAAEQ,eAAgB,oBAUpC,CAACvC,EAAsB+B,IAEpBi8K,GAAa91M,EAAAA,EAAAA,IAAQ,KAClB,CACLlI,GAAI,EACJsN,QACAywM,WAAWF,EAAAA,GAAAA,MAAiBL,GAC5BE,gBAED,CAACF,EAAgBE,EAAapwM,IAEjC,GAAK+B,GAAM8+C,QAIX,OACEpuD,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAYzd,SAAA,EAC1BH,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAgB,iBAAiBzd,SAAA,EAC9DH,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAgBA,IAAYzd,SAAA,EACzDC,EAAAA,GAAAA,GAAA,QAAMF,UAAW0d,GAAezd,SAAEgN,EAAK,uBACvC/M,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACT1vB,KAAK,WACL2vB,UAAW5X,OAAOu4L,EAAWN,cAAgB,EAC7CtsG,eAAa,EACb1kF,UAAW,EACXzsB,UAAW0d,GAAmBzd,UAE9BC,EAAAA,GAAAA,GAAC2vD,GAAAA,EAAS,CACRlC,MAAOowJ,EACP/9M,WAAWqW,EAAAA,GAAAA,GAAeqH,GDhIqJ,YCiI/KzP,QAAS0vM,EACTv9M,KAAM+8M,GACNa,aAAW,OAGf99M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRhB,MAAOQ,EACPM,SAAU6kK,EACVplK,MAAOH,EAAK,yBACZoT,SAAUwU,EACV2U,2BAAyB,QAG7BtpC,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAgBA,IAAezd,UAC5DC,EAAAA,GAAAA,GAAC4uG,GAAiB,CAChB3O,SAAS,0BACT3qF,UAAWkE,EACX2tF,YAAa3tF,EACbu1F,oBAAqBk8F,EACrBnrM,UAAW0d,GACXqxF,oBAAoB,qBACpBC,uBAAqB,UAI3B9uG,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAASqqG,EACTrwH,SAAUwU,EACV5mB,QAAS4vM,EACTprM,UAAWxF,EAAK,QAAQhN,SAEvB40B,GACC30B,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf7N,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,kBCrIf0vM,GAAY,EAAIrnM,EAAAA,EA4JtB,IAAejX,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,eAAE08M,IAAmBhvM,EAAAA,EAAAA,KAAe1N,GAK1C,MAAO,CACL6N,KALW6uM,GAAgBvxM,QAAS6nC,EAAAA,EAAAA,KAAWhzC,EAAQ08M,EAAevxM,aAAU3J,EAMhF4qD,MALYswJ,GAAgBvxM,QAAUuxM,GAAgBruJ,SACpDo2E,EAAAA,EAAAA,KAAYzkI,EAAQ08M,EAAevxM,OAAQuxM,EAAeruJ,cAAW7sD,EAKvEk7M,iBACAl+K,sBAAsB0B,EAAAA,EAAAA,KAA2BlgC,KAXnCsN,CA7IyBqvM,EAC3CxkM,WACAtK,OACAu+C,QACAswJ,iBACAl+K,uBACAh0B,cAEA,MAAM,UAAEoyM,EAAS,iBAAEr8K,IAAqB51B,EAAAA,EAAAA,OACjCmB,EAAO4kK,IAAY5lK,EAAAA,EAAAA,IAAS,KAC5BoxM,EAAaC,IAAkBrxM,EAAAA,EAAAA,SAA6BtJ,GAC7DkK,GAAOC,EAAAA,EAAAA,KAEP2nB,EAAY5pB,QAAQgzM,GAAgBppL,WACpCupL,EAAYzwJ,GAAO5tD,KAAOs+M,EAAAA,KAEhCpzL,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGVtB,EAAAA,EAAAA,IAAU,KACHiP,IACHu4J,EAAS,IACTyrC,OAAe36M,KAEhB,CAAC2W,KAEJjP,EAAAA,EAAAA,IAAU,MACJkjD,GAAOtgD,OAASsgD,GAAO8vJ,eACzBxrC,EAAStkH,EAAMtgD,OACfqwM,EAAe/vJ,EAAM8vJ,eAEtB,CAAC9vJ,IAEJ,MAAM+iF,GAAYzoI,EAAAA,EAAAA,IAAQ,IACjBoF,IAAUsgD,GAAOtgD,OAASowM,IAAgB9vJ,GAAO8vJ,YACvD,CAACA,EAAapwM,EAAOsgD,GAAO8vJ,YAAa9vJ,GAAOtgD,QAE7CmlK,GAAoB3yK,EAAAA,EAAAA,IAAakN,IACrC,MAAMuxM,EAAWvxM,EAAEC,OAAOH,MAC1BolK,EAASqsC,IACR,IAEGC,GAAkB1+M,EAAAA,EAAAA,IAAY,KAClCs+M,EAAU,CACRzxM,OAAQ0C,EAAMrP,GACdsN,QACAuiD,QAASjC,EAAO5tD,GAChB09M,iBAED,CAACruM,EAAM+uM,EAAWV,EAAapwM,EAAOsgD,IAEnCw9I,GAA0BtrM,EAAAA,EAAAA,IAAaozF,IACtCA,EAAMoS,QAAWtlE,GAAwBkzD,EAAMlzF,KAAO+qG,EAAAA,IAKvD7X,EAAMlzF,KAAO+qG,EAAAA,IAKjB4yG,EAAezqH,EAAMlzF,IAJnB29M,EA1EgB,KAqEhB57K,EAAiB,CAAEQ,eAAgB,oBAUpC,CAACvC,EAAsB+B,IAEpBi8K,GAAa91M,EAAAA,EAAAA,IAAQ,KAClB,IACF0lD,EACHtgD,QACAowM,gBAED,CAACA,EAAapwM,EAAOsgD,IAExB,GAAKv+C,GAAM8+C,QAIX,OACEpuD,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAYzd,SAAA,EAC1BH,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAgB,iBAAiBzd,SAAA,EAC5D0tD,IAASztD,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,IAClBhC,IACC7tD,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAgBA,GAAY0gM,GFlIe,YEkIcn+M,SAAA,EACtFC,EAAAA,GAAAA,GAAA,QAAMF,UAAW0d,GAAezd,SAAEgN,EAAKmxM,EAAY,0BAA4B,uBAC/El+M,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACT1vB,KAAK,WACL2vB,UAAW5X,OAAOu4L,EAAWN,cAAgB,EAC7CtsG,eAAa,EACb1kF,UAAW,EACXzsB,UAAW0d,GAAmBzd,UAE9BC,EAAAA,GAAAA,GAAC2vD,GAAAA,EAAS,CACRlC,MAAOowJ,EACP/9M,UAAW0d,GACXtd,KAAM+8M,GACNa,aAAW,OAGf99M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRhB,MAAOQ,EACPM,SAAU6kK,EACVplK,MAAOH,EAAK,yBACZoT,SAAUwU,EACV2U,2BAAyB,QAG3B40K,IACAl+M,EAAAA,GAAAA,GAAA,OAAKF,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAgBA,IAAezd,UAC5DC,EAAAA,GAAAA,GAAC4uG,GAAiB,CAChB3O,SAAS,wBACT3qF,UAAWkE,EACX2tF,YAAa3tF,EACbu1F,oBAAqBk8F,EACrBnrM,UAAW0d,GACXqxF,oBAAoB,qBACpBC,uBAAqB,aAOjC9uG,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAASqqG,EACTrwH,SAAUwU,EACV5mB,QAASswM,EACT9rM,UAAWxF,EAAK,QAAQhN,SAEvB40B,GACC30B,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf7N,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,kBC/Hf+wM,GAAqB,sBAmM3B,IAAe3/M,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUw8B,aACT,MAAMsW,GAAOm7E,EAAAA,EAAAA,KAAUjuH,EAAQw8B,GACzByW,GAAeC,EAAAA,EAAAA,KAAmBlzC,EAAQw8B,IAC1C,SAAEjqB,IAAa7E,EAAAA,EAAAA,KAAe1N,GAAQk9M,WACtCj0D,GAAe3a,EAAAA,GAAAA,GAAmBtuI,EAAQ,eAEhD,MAAO,CACLw8B,SACAsW,OACAvgC,WACAg3I,WAAYt2G,GAAcu2G,IAC1BP,iBAZc37I,CAjMyB6vM,EAC3C3gL,SACAsW,OACAvgC,WACAg3I,aACApxI,WACA8wI,eACAz+I,cAEA,MAAM,WACJ4yM,EAAU,mBACVt3C,EAAkB,0BAClBu3C,EAAyB,2BACzBC,IACE3yM,EAAAA,EAAAA,OAEG4yM,EAAgBC,EAAkBC,IAAwB7/M,EAAAA,EAAAA,IAAQ,IAClE8/M,EAAiBC,EAAmBC,IAAuBhgN,EAAAA,EAAAA,IAAQ,IACnEssC,EAAO+/G,IAAYn/I,EAAAA,EAAAA,MACpBY,GAAOC,EAAAA,EAAAA,KAEP4rG,GAAW7wG,EAAAA,EAAAA,IAAQ,IAAOosC,GAAOsxH,EAAAA,EAAAA,IAAgBtxH,QAAQtxC,EAAY,CAACsxC,KAE5EppB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAMqzM,EAAc/qK,GAAO+d,EAAAA,EAAAA,IAAuB/d,GAAQ,IAEnDnyC,EAAOupJ,IAAYp/I,EAAAA,EAAAA,OACnBoB,EAAM4xM,IAAWhzM,EAAAA,EAAAA,IAAS+yM,GAAe,KACzCr0D,EAAKW,IAAUr/I,EAAAA,EAAAA,IAASy+I,GAAc,IAEvCF,EAAoBv2G,IAAQw2G,EAAAA,EAAAA,IAAkBx2G,GAC9Cw3G,GAAuBtjJ,EAAAA,EAAAA,GAASqiJ,GAAmB,EAAOpiJ,EAAAA,GAAeC,UAE/EgC,EAAAA,EAAAA,IAAU,KACRu0M,IACAG,KACC,CAACphL,KAEJtzB,EAAAA,EAAAA,IAAU,KACR40M,EAAQD,GAAe,IACvB1zD,EAAOZ,GAAc,KACpB,CAACs0D,EAAat0D,EAAYz2G,KAE7B5pC,EAAAA,EAAAA,IAAU,KACRghJ,OAAS1oJ,IACR,CAAC8oJ,KAEJphJ,EAAAA,EAAAA,IAAU,KACJqJ,IAAawrM,EAAAA,GAAmBnzD,WAClC6yD,IACAG,IACA3zD,OAASzoJ,KAEV,CAAC+Q,IAEJ,MAAMyrM,GAAmB9yM,EAAAA,EAAAA,GAAiBM,IACxCsyM,EAAQtyM,EAAEC,OAAOH,OACjBkyM,IAEItzK,IAAU+yK,IACZhzD,OAASzoJ,KAIPupJ,GAAkB7/I,EAAAA,EAAAA,GAAiBM,IACvC2+I,EAAO3+I,EAAEC,OAAOH,OAChBkyM,MAGI3yD,GAAoB3/I,EAAAA,EAAAA,GAAiB4/I,IACzCZ,EAASY,GACT6yD,MAGI3yD,GAAoB9/I,EAAAA,EAAAA,GAAgB,KACxC,MAAM+yM,EAAc/xM,EAAKggE,OACnBi/E,EAAa3B,EAAIt9E,OAElB+xI,EAAY39M,QAKjB88M,EAAW,IACLG,GAAkB,CACpB/rJ,IAAK1e,EACL5mC,KAAM+xM,EACNlzM,YAAaogJ,KAIbxqJ,GACFmlK,EAAmB,CACjBzZ,KAAM1rJ,KACF+8M,GAAmB,CAAElsJ,IAAK1e,MAfhCm3G,EAASgzD,MAoBPiB,GAAwBhzM,EAAAA,EAAAA,GAAgB,KAC5CoyM,EAA2B,CAAE/J,MAAO,GAAGh8F,cAGnC4mG,GAA2BjzM,EAAAA,EAAAA,GAAgB,KAC/CoyM,EAA2B,CAAE/J,MAAO,GAAGh8F,iBAGnC6mG,GAAuBlzM,EAAAA,EAAAA,GAAgB,KAC3CoyM,EAA2B,CAAE/J,MAAOh8F,MAGhC97C,GAAWzzD,EAAAA,EAAAA,MACXq2M,GAAer2M,EAAAA,EAAAA,KAAO,GAEtBs2M,GAAqBpzM,EAAAA,EAAAA,GAAiBmhJ,IAC1CsxD,IACAN,EAA0B,CAAE7gL,SAAQ6vH,OAAMkyD,UAAWF,EAAal2M,YAGpE,IAAK2qC,EACH,OAGF,MAAMxf,EAAY/gB,IAAawrM,EAAAA,GAAmBvzD,WAElD,OACEjsJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAYC,SAAA,EACzBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAACysJ,GAAAA,EAAc,CACbd,qBAAsBA,EACtBl+I,SAAUy+I,EACV/+I,MAAOJ,EAAK,uBACZoT,SAAUwU,KAEZ30B,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACR9N,GAAG,YACHqN,MAAOH,EAAK,uBACZU,SAAU4xM,EACV1yM,MAAOY,EACPg+B,MAAOA,IAAU+yK,GAAqB/yK,OAAQ1oC,EAC9CymC,2BAAyB,KAE3BtpC,EAAAA,GAAAA,GAACsiH,GAAAA,EAAQ,CACP31G,MAAOk+I,EACPp9I,SAAU2+I,EACVl/I,MAAOH,EAAK,0BACZoT,SAAUwU,EACV0tD,UAAWioE,EACX9nC,mBAAoB8nC,GAAgBA,EAAeO,EAAIlpJ,QAAQmrF,gBAAajqF,QAGhF7C,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAASC,UACtBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAACtvB,KAAK,sBAAsB0M,QAAM,EAAC5R,QAASwxM,EAAsBx/M,UACzEC,EAAAA,GAAAA,GAAA,QAAAD,SAAOgN,EAAK,qBAEd/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAACtvB,KAAK,cAAc0M,QAAM,EAAC5R,QAASyxM,EAAyBz/M,UACpEC,EAAAA,GAAAA,GAAA,QAAAD,SAAOgN,EAAK,wBAEd/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAACtvB,KAAK,OAAO0M,QAAM,EAAC5R,QAAS0xM,EAAqB1/M,UACzDC,EAAAA,GAAAA,GAAA,QAAAD,SAAOgN,EAAK,0BAEd/M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iCAAgCC,UAC5Ci0B,EAAAA,GAAAA,GAAWjnB,EAAK,iBAAkB,CAAC,qBAK5C/M,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAASy4K,GAAkBG,EAC3BhxM,QAASs+I,EACTlsI,SAAUwU,EACVpiB,UAAWxF,EAAK,QAAQhN,SAEvB40B,GACC30B,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf7N,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAGfvN,EAAAA,GAAAA,GAAC4nK,GAAAA,EAAY,CACXn6J,SAAUkyM,EACV7iJ,SAAUA,UC5LZ+iJ,GAAsB,+BAqU5B,IAAelhN,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM0C,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,IAC1B,WAAE+xM,IAAexvM,EAAAA,EAAAA,KAAe1N,IAChC,SAAEuS,GAAa2qM,GACf,QAAEvsE,GAAYusE,EAAWj+E,SAAS9zH,IAAW,CAAC,EAC9CszM,EAAkCz+M,EAAO6yC,UAAU6rK,+BACnDC,EAAqB9wM,GAAM8wM,mBAC3BC,EAAiB/wM,GAAMgxM,MACvBC,KAA2BF,IAAkBH,IAC/CG,GAAkBH,EACtB,MAAO,CACL5wM,OACA4hD,cAAcC,EAAAA,EAAAA,KAAmB1vD,EAAQmL,GACzCoH,WACAwsM,eAAezvJ,EAAAA,EAAAA,IAAiBzhD,EAAM,cACtCmxM,WAAW1vJ,EAAAA,EAAAA,IAAiBzhD,EAAM,eAClCoxM,gBAAiBtuE,EACjB/tF,mBAAoB5iD,EAAO6iD,UAAUD,mBACrC+7J,qBACAG,6BAGJ,CAAC9+M,GAAUmL,YACFzB,SAAQspC,EAAAA,EAAAA,KAAWhzC,EAAQmL,IAxBlBmC,CAlU6B4xM,EAC/C/zM,SACA0C,OACA4hD,eACAl9C,WACAwsM,gBACAC,YACAC,kBACA9mM,WACAyqC,qBACAu8J,iBACA30M,UACAm0M,qBACAG,+BAEA,MAAM,WACJM,EAAU,gBACVC,EAAe,aACfC,EAAY,cACZC,EAAa,SACbjyK,EAAQ,wBACRkyK,EAAuB,qBACvBC,EAAoB,sBACpBC,IACE/0M,EAAAA,EAAAA,MAEEg1M,EAAe9xM,GAAM/B,OAAS,GAC9B8zM,EAAenwJ,GAAckrD,OAAS,GACtCgR,EAAgBjiH,QAAQ+lD,GAAcm8D,eAErCi0F,EAAoBC,EAAkBC,IAAqBniN,EAAAA,EAAAA,MAC3DmsJ,EAAwBC,IAA6Bl/I,EAAAA,EAAAA,KAAS,IAC9DgB,EAAO4kK,IAAY5lK,EAAAA,EAAAA,IAAS60M,IAC5BhlG,EAAOg2D,IAAY7lK,EAAAA,EAAAA,IAAS80M,IAC5Bj/M,EAAOupJ,IAAYp/I,EAAAA,EAAAA,OACnBo/B,EAAO+/G,IAAYn/I,EAAAA,EAAAA,MACpBu0C,EAAYxxC,IAAQy7I,EAAAA,EAAAA,IAAkBz7I,GACtCy8I,GAAuBtjJ,EAAAA,EAAAA,GAASq4C,GAAW,EAAOp4C,EAAAA,GAAeC,SACjEwE,GAAOC,EAAAA,EAAAA,KAEPq0M,EAA8BnyM,IAAQukB,EAAAA,EAAAA,IAAcvkB,GAEpDoyM,GAA8B/0M,EAAAA,EAAAA,GAAgB,KAClDw0M,EAAsB,CAAEv0M,SAAQwkE,WAAYgvI,OAG9Cj1L,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGVtB,EAAAA,EAAAA,IAAU,KACH81M,IACLQ,EAAwB,CAAEr0M,WAC1Bq0M,EAAwB,CAAEr0M,SAAQ+0M,WAAW,IAC7CT,EAAqB,CAAEt0M,aACtB,CAACA,EAAQ6zM,KAEZ91M,EAAAA,EAAAA,IAAU,KACJqJ,IAAawrM,EAAAA,GAAmBnzD,WAClCZ,GAA0B,GAC1BC,OAASzoJ,KAEV,CAAC+Q,IAEJ,MAAM4tM,IAAcz5M,EAAAA,EAAAA,IAAQ,IACnB86C,OAAO8K,KAAKmD,GAAc2kC,kBAAoB,CAAC,GAAG9zF,OACxD,CAACmvD,GAAc2kC,mBACZgsH,GAAoB3wJ,GAAc4wJ,eAAe//M,QAAU,EAE3DggN,IAAsBp1M,EAAAA,EAAAA,GAAgB,KAC1Ci0M,EAAeoB,EAAAA,GAAkBC,mBAG7BC,IAAwBv1M,EAAAA,EAAAA,GAAgB,KAC5Ci0M,EAAeoB,EAAAA,GAAkBG,cAG7BC,IAAuBz1M,EAAAA,EAAAA,GAAgB,KAC3Ci0M,EAAeoB,EAAAA,GAAkBK,aAG7BC,IAA4B31M,EAAAA,EAAAA,GAAgB,KAChDi0M,EAAeoB,EAAAA,GAAkBO,sBAG7BC,IAAqB71M,EAAAA,EAAAA,GAAgB,KACzCi0M,EAAeoB,EAAAA,GAAkBS,WAG7BC,IAAsB/1M,EAAAA,EAAAA,GAAgB,KAC1Ci0M,EAAeoB,EAAAA,GAAkBW,gBAG7BC,IAAiBj2M,EAAAA,EAAAA,GAAiBmhJ,IACtCnC,EAASmC,GACTrC,GAA0B,KAGtBinB,IAAoB/lK,EAAAA,EAAAA,GAAiBM,IACzCklK,EAASllK,EAAEC,OAAOH,OAClB0+I,GAA0B,KAGtBo3D,IAAoBl2M,EAAAA,EAAAA,GAAiBM,IACzCmlK,EAASnlK,EAAEC,OAAOH,OAClB0+I,GAA0B,KAGtBq3D,IAAsBn2M,EAAAA,EAAAA,GAAgB,KAC1C,MAAMo2M,EAAex1M,EAAMogE,OACrBq1I,EAAe5mG,EAAMzuC,OAEtBo1I,EAAahhN,OAKlB8+M,EAAW,CACTj0M,SACAW,MAAOw1M,EACP3mG,MAAO4mG,EACP5gN,UARAspJ,EAASu0D,MAYPgD,IAAyBt2M,EAAAA,EAAAA,GAAgB,KAC7Ci0M,EAAeoB,EAAAA,GAAkBkB,sBAG7BC,IAA0Bx2M,EAAAA,EAAAA,GAAgB,KAC9Ci0M,EAAeoB,EAAAA,GAAkBoB,uBAG7BC,IAAsB12M,EAAAA,EAAAA,GAAgB,KACtC2C,EAAKsgH,UACPoxF,EAAc,CAAEp0M,OAAQ0C,EAAKrP,KAE7B8gN,EAAa,CAAEn0M,OAAQ0C,EAAKrP,KAG9BuhN,IACAV,IACA/xK,EAAS,CAAE9uC,QAAIgD,MAGXqgN,IAA2Bn7M,EAAAA,EAAAA,IAAQ,KACvC,IAAK+oD,GAAcs+H,iBACjB,OAAOriL,EAAK,gBAGd,GAA2C,QAAvC+jD,EAAas+H,iBAAiBluL,KAChC,OAAO6L,EAAK,gBAGd,MAAMo2M,EAAgBryJ,EAAas+H,iBAAiBS,QAAQluL,OACtDyhN,EAAcn/J,GAAoBtmB,OAAQyV,IAAcA,EAAS48D,YAAYruG,QAAU,EAE7F,OAAOyhN,EAAc,GAAGD,OAAmBC,IAAgBD,EAAcr2H,YACxE,CAAC7oC,EAAoB6M,GAAcs+H,iBAAkBriL,IAClDs2M,IAAkBt7M,EAAAA,EAAAA,IAAQ,KAAM4sF,EAAAA,EAAAA,IAAazlF,GAAO,CAACA,IAG3D,IADqB4sK,EAAAA,EAAAA,MAAuB5vI,EAAAA,EAAAA,MAAa1/B,IACrC0C,EAAKyhL,YACvB,OAGF,MAAMh8J,GAAY/gB,IAAawrM,EAAAA,GAAmBvzD,WAElD,OACEjsJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAYC,SAAA,EACzBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,EAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAACysJ,GAAAA,EAAc,CACbd,qBAAsBA,EACtBl+I,SAAU+0M,GACVriM,UAAWigM,KAEbxgN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACR9N,GAAG,gBACHqN,MAAOH,EAAK,oBACZU,SAAU6kK,GACV3lK,MAAOQ,EACPo+B,MAAOA,IAAUs0K,GAAsBt0K,OAAQ1oC,EAC/Csd,UAAWigM,KAEbpgN,EAAAA,GAAAA,GAACsiH,GAAAA,EAAQ,CACPziH,GAAG,gBACHqN,MAAOH,EAAK,0BACZU,SAAUg1M,GACV91M,MAAOqvG,EACP35B,UAlMkB,IAmMlBmgC,oBAnMkB,IAmM6BxG,EAAMr6G,QAAQmrF,WAC7D3sE,UAAWigM,EACX39F,mBAAiB,OAGpBvzG,EAAKsgH,YACJ5vH,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAACtvB,KAAK,OAAOuvB,WAAS,EAACz0B,QAAS4zM,GAAoB5hN,SAAA,EAC3DC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,EAAK,kBAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAoBgN,EAAlBs2M,GAAuB,aAAqB,qBAG5EzjN,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,UACLuvB,WAAS,EACTz0B,QAAS+zM,GACT3hM,UAAWigM,EAAcrgN,SAAA,EAEzBC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,EAAK,iBAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAkBgN,EAAhBigH,EAAqB,mBAA2B,YAE7EqzF,IACCzgN,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,OACLlF,QAASq0M,GACT5/K,WAAS,EACTriB,UAAWmgM,EAAgBvgN,SAAA,EAE3BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,EAAK,4BAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SACvBugN,GAAkBgD,EAAAA,GAAAA,IAAchD,EAAgB3+M,QAAUoL,EAAK,gBAIrEhC,QAAQmE,EAAKq0M,cAAc5hN,UAC1B/B,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,kBACLlF,QAASu0M,GACT9/K,WAAS,EAAAziC,SAAA,EAETC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,EAAK,wBAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,UACvBujN,EAAAA,GAAAA,IAAcp0M,EAAKq0M,aAAa5hN,cAIvC/B,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,gBACLuvB,WAAS,EACTz0B,QAASi0M,GACT7hM,UAAWigM,EAAcrgN,SAAA,EAEzBC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,EAAK,gBAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWuW,IAAI,OAAMtW,SAClCmjN,QAGJ7B,IACCzhN,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,WACLyuG,QAAM,EACN/hG,QAAM,EACNQ,UAAWggM,EACXpyM,QAASuzM,EAA4BvhN,SAAA,EAErCC,EAAAA,GAAAA,GAAA,QAAAD,SAAOgN,EAAK,2BACZ/M,EAAAA,GAAAA,GAAC8pC,GAAAA,EAAQ,CACPjqC,GAAG,mBACHqN,MAAOH,EAAK,wBACZm8B,QAAS82K,WAKjBpgN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBH,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,QACLuvB,WAAS,EACTz0B,QAASm0M,GAA0BniN,SAAA,EAEnCC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,EAAK,4BAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAEyhN,SAE9B5hN,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,QACLuvB,WAAS,EACTz0B,QAAS80M,GAAuB9iN,SAAA,EAEhCC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAQuW,IAAI,OAAMtW,SAAEgN,EAAK,yBACzC/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWuW,IAAI,OAAMtW,UAAEujN,EAAAA,GAAAA,IAAcp0M,EAAK0mM,oBAE5Dh2M,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,cACLuvB,WAAS,EACTz0B,QAASg1M,GAAwBhjN,SAAA,EAEjCC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,EAAK,0BAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAE0hN,YAGhCzhN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAASC,UACtBC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAACtvB,KAAK,SAAS0M,QAAM,EAACtM,aAAW,EAACtF,QAASozM,EAAiBphN,SAClEmP,EAAKsgH,UAAYziH,EAAK,iBAAmBA,EAAK,wBAIrD/M,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAASilH,EACTr9I,QAAS20M,GACTviM,SAAUwU,GACVpiB,UAAWxF,EAAK,QAAQhN,SAEvB40B,IACC30B,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf7N,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAGfvN,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQu1M,EACRr1M,QAASu1M,EACTtsM,KAAM5F,EAAKsgH,UAAYziH,EAAK,sBAAwBA,EAAK,qBACzDu2B,aAAcp0B,EAAKsgH,UAAYziH,EAAK,iBAAmBA,EAAK,gBAC5Dw2B,eAAgB0/K,GAChBz/K,sBAAoB,UC3L5B,IAAe7kC,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM0C,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,GAChC,MAAO,CACL0C,OACAklB,cAAe/yB,EAAO+yB,cACtBZ,UAAWtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,GACjCumF,kBAAkB1kC,EAAAA,EAAAA,KAAmB1vD,EAAQmL,IAASipF,mBAPxC9mF,CAtJwC60M,EAC1DhqM,WACAtK,OACAskB,YACAY,gBACAqhE,mBACA+qH,iBACAiD,qBACA53M,cAEA,MAAM,iBAAE63M,IAAqB13M,EAAAA,EAAAA,MACvBe,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAM83M,EAAuB54M,QAAQmE,GAAM00M,oBACrCC,EAAqB94M,QAAQmE,GAAM40M,kBAEnCC,EAAkBh5M,QAAQmE,GAAMsgH,WAActgH,IAAQyhD,EAAAA,EAAAA,IAAiBzhD,EAAM,cAC7E80M,EAAsBxwL,IAAam9B,EAAAA,EAAAA,IAAiBzhD,EAAO,gBAE3D+0M,GAAel8M,EAAAA,EAAAA,IAAQ,KAC3B,IAAK0tF,EACH,MAAO,GAGT,MAAOrjE,EAAO8xL,IAAUvsE,EAAAA,GAAAA,IAAU90F,OAAO0K,OAAOkoC,GAAoB87B,GAAWA,EAAO4yF,SAEtF,MAAO,IAAI/xL,KAAU8xL,IACpB,CAACzuH,IAEE2uH,GAAyB73M,EAAAA,EAAAA,GAAiBglH,IAC9CkyF,EAAmBlyF,EAAO1zF,OAAQ0zF,EAAO8yF,mBAAqBjwL,GAC9DosL,EAAeoB,EAAAA,GAAkB0C,mBAG7BC,GAAyBh4M,EAAAA,EAAAA,GAAgB,KAC7Cm3M,EAAiB,CACfl3M,OAAQ0C,EAAMrP,GACdgkN,qBACAF,sBAAuBA,MAIrBa,GAAuBj4M,EAAAA,EAAAA,GAAgB,KAC3Cm3M,EAAiB,CACfl3M,OAAQ0C,EAAMrP,GACdgkN,oBAAqBA,EACrBF,2BAIEc,GAAsBl4M,EAAAA,EAAAA,GAAgB,KAC1Ci0M,EAAeoB,EAAAA,GAAkB8C,kBAG7BC,GAAkBp4M,EAAAA,EAAAA,GAAiBglH,IACvC,GAAIA,EAAO4yF,QACT,OAAOp3M,EAAK,kBAId,MAAMq4B,GAAY8G,EAAAA,EAAAA,MAAYxF,MAAMC,KAC9Bi+K,EAAiBrzF,EAAO8yF,iBAAmBj/K,EAAUmsF,EAAO8yF,uBAAoBxhN,EAEtF,OAAI+hN,EACK73M,EAAK,uBAAuB88B,EAAAA,EAAAA,IAAgB+6K,IAG9C73M,EAAK,kBAGd,OACE/M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,aAAYC,UACzBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,EAC1CC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAASC,UACtBH,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,SACLuvB,WAAS,EACTriB,UAAQ,EAAApgB,SAAA,EAERC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,EAAK,eAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAEgN,EAAKymB,EAAY,4BAA8B,8BAI/E5zB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAAUuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAC3DC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAeuW,IAAI,OAAMtW,SACnCgN,EAAKymB,EACF,sCACA,uCAGLywL,EAAaxwM,IAAK89G,IACjBvxH,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAEPziC,UAAU,sBAEViO,QAASA,IAAMq2M,EAAuB7yF,GAAQxxH,UAE9CC,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CACdloB,OAAQ0zF,EAAO1zF,OACfsnB,OAAQw/J,EAAgBpzF,GACxBzsF,eAAa,KARVysF,EAAO1zF,UAahB79B,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAAS49K,EACTh2M,QAAS02M,EACTlyM,UAAWxF,EAAK,mCAAmChN,UAEnDC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,yBAIdy2M,IACCpkN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1tB,QAASy6K,EACTz2M,MAAOH,EAAK,uBACZU,SAAU82M,MAGbZ,IACC/jN,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1tB,QAAS26K,EACT32M,MAAOH,EAAK,kCACZU,SAAU+2M,OAGdxkN,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAgCC,SAC1CgN,EAAK,2CC8HxB,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM0C,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,IAC1B,oBAAEw8I,EAAmB,gBAAEC,EAAe,MAAE19G,IAAUs5K,EAAAA,EAAAA,IAAiBxjN,EAAQmL,GAEjF,MAAO,CACL0C,OACAskB,WAAWC,EAAAA,EAAAA,IAAcvkB,GACzB0E,UAAU7E,EAAAA,EAAAA,KAAe1N,GAAQk9M,WAAW3qM,SAC5C23B,QACAy9G,sBACAC,kBACA15I,YAAaL,GAAMK,YACnBu1M,gBAAgBn1E,EAAAA,GAAAA,GAAmBtuI,EAAQ,kBAC3C0jN,mBAAmBh0J,EAAAA,EAAAA,KAAmB1vD,EAAQmL,IAASw4M,aAG3D,CAAC3jN,GAAUmL,YACFzB,SAAQspC,EAAAA,EAAAA,KAAWhzC,EAAQmL,KAAWq4M,EAAAA,EAAAA,IAAiBxjN,EAAQmL,IAlBtDmC,CAtPqCs2M,EACvD/1M,OACAsK,WACAga,YACA5f,WACAo1I,sBACAC,kBACA19G,QACAh8B,cACAu1M,iBACAC,oBACAl5M,cAEA,MAAM,iBACJq5M,EAAgB,kBAChBC,EAAiB,kBACjBC,EAAiB,sBACjBp1E,EAAqB,qBACrBq1E,IACEr5M,EAAAA,EAAAA,MAEEi/I,GAAwBljJ,EAAAA,EAAAA,IAAQ,IAAMmH,EAAKu4I,WAAWjyG,KAAK,EAAG+yG,gBAAiBA,GAAa,CAACr5I,EAAKu4I,YAClGqB,EAAkBmC,GAAuBryC,UAAY,GACrDhmE,GAAW7qC,EAAAA,EAAAA,IAAQ,KAAM4sF,EAAAA,EAAAA,IAAazlF,GAAO,CAACA,KAE7Ck8I,EAAwBC,IAA6Bl/I,EAAAA,EAAAA,KAAS,IAC9Dm5M,EAAaC,IAAkBp5M,EAAAA,EAAAA,IAAsBymC,EAAW,SAAW,YAC3E64G,EAAkBC,IAAuBv/I,EAAAA,EAAAA,OACzCq5M,EAA2BC,EAAyBC,IAA4BzmN,EAAAA,EAAAA,MAChF0mN,EAA0BC,EAAwBC,IAA2B5mN,EAAAA,EAAAA,KAE9EqqJ,GAA8B/yH,EAAAA,EAAAA,GAAsByyH,GAGpD74I,EAAYi7I,GAA0BrgJ,QACzB,WAAhBu6M,IACK75D,GAAqB3C,GAAwC,KAArB2C,KAJXzC,GAAuBM,IAMtC,YAAhBg8D,GAA6B1yK,IAGnC7nB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGVtB,EAAAA,EAAAA,IAAU,KACR8gJ,GAA0B,IACzB,CAACvC,KAEJv+I,EAAAA,EAAAA,IAAU,KACJ+6M,IAAgBP,GAClBI,KAED,CAACG,EAAaP,EAAmBI,IAEpC,MAAMp7D,GAAuBpqJ,EAAAA,EAAAA,IAAagN,IACxC++I,EAAoB/+I,GACpB0+I,GAA0B,GAEtB9/G,GACF85K,EAAqB,CACnB74M,OAAQ0C,EAAKrP,MAGhB,CAACqP,EAAKrP,GAAI0rC,IAEPu6K,GAAqBnmN,EAAAA,EAAAA,IAAY,CAACgN,EAAeE,KAIrD,GAHgBg2C,OAAO0K,QAAOrhB,EAAAA,EAAAA,MAAYghB,MAAMvmB,MAC7ChJ,OAAO,EAAG6xF,YAAWi4B,eAAgBj4B,GAAai4B,GAAWjhE,KAAMu/H,GAAMA,EAAEvsM,WAElE7X,QAAUmjN,GAA4B,WAAVn4M,EAAoB,CAC1DqjI,EAAsB,CAAErgH,MAAO,mBAC/B,MAAMq2L,EAAan5M,EAAE6X,cAAckI,QAAQ,gBAK3C,OAFCo5L,EAAW3hN,cAAc,kBAAuC6kC,SAAU,OAC1E88K,EAAW3hN,cAAc,mBAAwC6kC,SAAU,EAE9E,CACAq8K,EAAe54M,GACf0+I,GAA0B,IACzB,CAACy5D,EAAgB90E,IAEdi2E,GAA+BtmN,EAAAA,EAAAA,IAAagN,IAChDy4M,EAAkB,CAChB54M,OAAQ0C,EAAKrP,GACb0P,YAAuB,cAAV5C,KAEd,CAACuC,EAAKrP,GAAIulN,IAEPc,GAAavmN,EAAAA,EAAAA,IAAY,KACzBizC,GAA4B,YAAhB0yK,EACdM,IAEAV,EAAiB,CAAEtsG,SAA0B,WAAhB0sG,GAA4B75D,GAA0B,MAEpF,CAAC74G,EAAUgzK,EAAwBN,EAAaJ,EAAkBz5D,IAE/D06D,GAAkCxmN,EAAAA,EAAAA,IAAY,KAClDulN,EAAiB,CAAEtsG,SAAU,GAAIwtG,wBAAwB,IACzDP,KACC,CAACA,EAAyBX,IAEvBmB,GAA0B1mN,EAAAA,EAAAA,IAAY,KAC1C+lN,IACAP,KACC,CAACO,EAA0BP,IAExBp4M,GAAOC,EAAAA,EAAAA,KACPs5M,EAAc9yL,EAAY,UAAY,OACtC+yL,EAAc/yL,EAAY,UAAY,QAEtChmB,EAAU,CACd,CAAEb,MAAO,UAAWO,MAAOH,EAAK,GAAGu5M,YAAuBxrH,SAAU/tF,EAAK,GAAGu5M,iBAC5E,CAAE35M,MAAO,SAAUO,MAAOH,EAAK,GAAGu5M,WAAsBxrH,SAAU/tF,EAAK,GAAGu5M,iBAGtEE,EAAoB,CAAC,CACzB75M,MAAO,UACPO,MAAOH,EAAK,yCACX,CACDJ,MAAO,YACPO,MAAOH,EAAK,2CAGR4nB,EAAY/gB,IAAawrM,EAAAA,GAAmBvzD,WAC5CE,GAA8C,WAAhBu5D,GAA4Bp2M,EAAKu4I,WAAav4I,EAAKu4I,UAAU9lJ,OAAS,EAiB1G,OACE/B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAYC,SAAA,EACzBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,EAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAAUuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAC3DC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAiBC,SAAEgN,EAAK,GAAGw5M,YACzCvmN,EAAAA,GAAAA,GAACsN,GAAAA,EAAU,CACTI,SAAU43M,EACV/3M,KAAK,eACLC,QAASA,EACTC,SAAUq4M,OAGG,YAAhBR,GACCtlN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAAUuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAC1DglN,GACCnlN,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAACm3G,GAAAA,EAAS,CAAClkB,KAAM8xH,EAAmBjlN,UAAU,iBAC9CE,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAeuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAC7DgN,EAAK,GAAGu5M,uBAGXtmN,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAACtvB,KAAK,SAAS0M,QAAM,EAACtM,aAAW,EAACtF,QAAS03M,EAAwB1lN,SACzEgN,EAAK,iBAER/M,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQ65M,EACR35M,QAAS65M,EACT5wM,KAAM/H,EAAK,eACXu2B,aAAcv2B,EAAK,gBACnBw2B,eAAgB8iL,EAChB7iL,sBAAoB,QAIxBxjC,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,OAIZ7vD,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oBAAmBC,SAAA,EAChCC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iBAAgBC,UAC7BC,EAAAA,GAAAA,GAAC6oJ,GAAa,CACZE,QAAM,EACND,gBAAiBA,EACjBn0H,UAAWA,EACXq0H,oBAAqBA,EACrBC,gBAAiBA,EACjBx7I,SAAUs8I,MAGbx+G,IAAUmhH,EAAAA,KAhErB,WACE,MAAMC,EAAmB,GAAG9/E,EAAAA,MAAkB+/E,EAAAA,MAE9C,OACE5sJ,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAeuW,IAAI,OAAMtW,SAClCgN,EAAK,mCACJouD,QAAQ,SAAU,mBAClB4jB,MAAM,KACNtrE,IAAKw2C,GACU,kBAANA,GAAwBjqD,EAAAA,GAAAA,GAACy9G,GAAAA,EAAQ,CAAClmG,IAAKo1I,EAAkB73I,KAAM,IAAI83I,EAAAA,QAA0B3iG,IAI/G,CAmDgD4iG,IACtC7sJ,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAeuW,IAAI,OAAMtW,SACnCgN,EAAK,GAAGw5M,wCAIdx6D,KACC/rJ,EAAAA,GAAAA,GAACwnJ,GAAe,CACdh7I,OAAQ0C,EAAKrP,GACb4nJ,UAAWv4I,EAAKu4I,UAChBC,eAAgBqC,KAGpBnqJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAAUuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAC3DC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAiBC,SAC5BgN,EAAKymB,EAAY,4CAA8C,8CAElExzB,EAAAA,GAAAA,GAACsN,GAAAA,EAAU,CACTI,SAAU6B,EAAc,YAAc,UACtChC,KAAK,kBACLC,QAASg5M,EACT/4M,SAAUw4M,KAEZjmN,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAgCC,SAEvCgN,EADHymB,EACQ,2CACA,mDAIfxzB,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAASh2B,EACTgQ,SAAUwU,EACVpiB,UAAWxF,EAAK,QAChBgB,QAASm4M,EAAWnmN,SAEnB40B,GACC30B,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf7N,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAGfvN,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQg6M,EACR95M,QAASg6M,EACT/wM,KAAM/H,EAAK,gDAAiD+7I,GAC5DvlH,eAAgB4iL,EAChB3iL,sBAAoB,UC1N5B,IAAe7kC,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAU6N,WACT,MAAM,cAAEklB,GAAkB/yB,EAE1B,MAAO,CACL+yB,gBACAqyL,aAAa11J,EAAAA,EAAAA,KAAmB1vD,EAAQ6N,EAAKrP,KAAK21F,UANpC7mF,CAlDoC+3M,EACtDx3M,OACAklB,gBACAqyL,cACA96M,SACAE,cAEA,MAAM,gBACJ86M,EAAe,iBACfz2F,IACElkH,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MACN87C,EAAQ0H,IAAarkD,EAAAA,EAAAA,IAAS,IAE/By6M,GAAU7+M,EAAAA,EAAAA,IAAQ,KACtB,MAAM8+M,GAAsBJ,GAAe,IACxCnkK,OAAO,CAACkL,EAAe+jE,KACjBA,EAAOvH,SAAYuH,EAAO4yF,SAAW5yF,EAAO1zF,SAAWzJ,GAC1Do5B,EAAIx6C,KAAKu+G,EAAO1zF,QAEX2vB,GACN,IAEL,OAAOtpB,EAAAA,GAAAA,IAAmB,CAAEC,IAAK0iL,EAAoBziL,MAAO0kB,EAAQ5nD,KAAM,UACzE,CAACulN,EAAaryL,EAAe00B,IAE1Bb,GAAiB17C,EAAAA,EAAAA,GAAgB,KACrCo6M,EAAgB,CAAEn6M,OAAQ0C,EAAKrP,OAG3BklK,GAAmBx4J,EAAAA,EAAAA,GAAiBsxB,IACxCqyF,EAAiB,CAAE1jH,OAAQ0C,EAAKrP,GAAIg+B,WACpChyB,MAGF,OACE7L,EAAAA,GAAAA,GAACsrD,GAAgB,CACf3/C,OAAQA,EACR4/C,cAAeq7J,EACfp7J,kBAAmBz+C,EAAK,oBACxB+7C,OAAQA,EACR4C,eAAgB8E,EAChB/E,SAAUxD,EACV0D,mBAAoBo5G,EACpBl5J,QAASA,OCqDf,IAAelN,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM0C,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,IACxBm6B,KAAMvB,GAAc/jC,EAAOqlC,MAGnC,MAAO,CACLx3B,OACAk2B,YACA0hL,iBALuB53M,KAASyhD,EAAAA,EAAAA,IAAiBzhD,EAAM,aAAeA,EAAKsgH,WAM3Eu3F,gBAAgBh2J,EAAAA,EAAAA,KAAmB1vD,EAAQmL,IAASk1M,eAAiBn9K,GAAAA,EACrE/Q,UAAWtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,KAXnBP,CA3FsCq4M,EACxD93M,OACAk2B,YACA0hL,mBACAC,iBACAvzL,YACA3nB,UACA2N,eAEA,MAAM,6BAAE62G,IAAiCrkH,EAAAA,EAAAA,MAEnCe,GAAOC,EAAAA,EAAAA,MACNi6M,EAAuBC,EAAqBC,IAAwBloN,EAAAA,EAAAA,MAE3E8rB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAMu7M,GAAeznN,EAAAA,EAAAA,IAAa4xH,IAChC,IAAKA,EAAO81F,eACV,OAGF,MAAMC,EAAeliL,EAAUmsF,EAAO81F,gBACtC,OAAKC,EAIEv6M,EAAK,iBAAiB88B,EAAAA,EAAAA,IAAgBy9K,SAJ7C,GAKC,CAACv6M,EAAMq4B,IAEJmiL,GAAoB5nN,EAAAA,EAAAA,IAAa4xH,IACrC,GAAKriH,EAIL,MAAO,CAAC,CACN/B,MAAOJ,EAAK,WACZkG,KAAM,SACNI,aAAa,EACb0xC,QAASA,IAAMsrE,EAA6B,CAC1C7jH,OAAQ0C,EAAKrP,GACbg+B,OAAQ0zF,EAAO1zF,OACfu1F,aAAc,CAAC,OAGlB,CAACrmH,EAAMmC,EAAMmhH,IAEhB,OACErwH,EAAAA,GAAAA,GAAA,OAAKF,UAAU,aAAYC,UACzBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,8BAA6BC,UAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAAUuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAC3DC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAcC,SAAEgN,EAAKymB,EAAY,oBAAsB,qBAEnEuzL,EAAetzM,IAAK89G,IACnBvxH,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAEPziC,UAAU,sBACV6f,QAAM,EACN+kC,eAAgB6iK,EAAkBh2F,GAAQxxH,UAE1CC,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CACdloB,OAAQ0zF,EAAO1zF,OACfsnB,OAAQiiK,EAAa71F,GACrBzsF,eAAa,KARVysF,EAAO1zF,SAYfipL,IACC9mN,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,SAAO,EACPp4B,QAASm5M,EACT30M,UAAWxF,EAAK,yCAAyChN,UAEzDC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,sBAGd2B,GAAQ43M,IACP9mN,EAAAA,GAAAA,GAAC0mN,GAAoB,CACnBx3M,KAAMA,EACNvD,OAAQs7M,EACRp7M,QAASs7M,cCmLvB,IAAexoN,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM0C,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,IAC1B,aAAEygH,IAAiBl8D,EAAAA,EAAAA,KAAmB1vD,EAAQmL,IAAW,CAAC,GAC1D,iBAAEg7M,EAAkB7gL,KAAMq+H,GAAe3jK,EAAO6rD,MAGtD,MAAO,CACLh+C,OACA81J,aACAwiD,mBACAC,WANiBx6F,GAAe54E,EAAAA,EAAAA,KAAWhzC,EAAQ4rH,QAAgBpqH,EAOnE2wB,UAAWtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,KAZnBP,CA5PgC+4M,EAClDx4M,OACArD,UACA2N,WACAhN,SACAw4J,aACAyiD,aACAD,mBACAh0L,YACAgtL,qBAEA,MAAM,wBACJmH,EAAuB,oBACvBC,EAAmB,sBACnBC,EAAqB,kBACrBC,EAAiB,iBACjBC,IACE/7M,EAAAA,EAAAA,OAEGg8M,EAAeC,IAAoB97M,EAAAA,EAAAA,OACnC+7M,EAAgCC,EAA8BC,IAAiCnpN,EAAAA,EAAAA,MAC/FopN,EAA8BC,EAA4BC,IAA+BtpN,EAAAA,EAAAA,MACzFupN,EAAcC,IAAmBt8M,EAAAA,EAAAA,IAASpB,QAAQ08M,GAAYe,gBAC9DE,EAAeC,IAAoBx8M,EAAAA,EAAAA,IAASpB,QAAQ08M,GAAYiB,gBACjE37M,GAAOC,EAAAA,EAAAA,KACPigH,EAAew6F,GAAY5nN,IAEjCkrB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGVtB,EAAAA,EAAAA,IAAU,KACRo9M,KACC,CAACA,KAEJp9M,EAAAA,EAAAA,IAAU,KACJiP,IACFivM,EAAgBhB,GAAYe,eAAgB,GAC5CG,EAAiBlB,GAAYiB,gBAAiB,KAE/C,CAACjB,EAAYjuM,IAEhB,MAAMovM,GAA4BjpN,EAAAA,EAAAA,IAAY,KAC5CyoN,IACAP,EAAsB,CAAEnyK,UAAWliB,EAAYhnB,EAASygH,IACnDz5F,GACHgtL,EAAeoB,EAAAA,GAAkBiH,UAElC,CAACT,EAA+BP,EAAuBr0L,EAAWhnB,EAAQygH,EAAcuzF,IAErFsI,GAA0BnpN,EAAAA,EAAAA,IAAY,KAC1C4oN,IACAX,EAAoB,CAAElyK,UAAWlpC,EAAQA,OAAQw7M,KAChD,CAACO,EAA6BX,EAAqBp7M,EAAQw7M,IAExDe,GAAwBppN,EAAAA,EAAAA,IAAaupC,IACzCu/K,EAAgBv/K,GAChB6+K,EAAiB,CAAEv7M,OAAQygH,EAAej8C,UAAW9nC,IAChDA,GACHy/K,GAAiB,IAElB,CAAC17F,EAAc86F,IAEZiB,GAAyBrpN,EAAAA,EAAAA,IAAaupC,IAC1Cy/K,EAAiBz/K,GACjB4+K,EAAkB,CAAEt7M,OAAQygH,EAAej8C,UAAW9nC,KACrD,CAAC+jF,EAAc66F,IA6FlB,MAAMmB,GAAsB18M,EAAAA,EAAAA,GAAgB,KAC1Ci0M,EAAeoB,EAAAA,GAAkBsH,sBAkDnC,OACElpN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,aAAYC,UACzBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,EAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAC6nG,GAAAA,EAAuB,CACtBznG,OAAQC,GAAAA,EAAe8oN,iBACvBjpN,KAAMkpN,EAAAA,IACNtpN,UAAU,iBAEX2nN,IA7FL7nN,EAAAA,GAAAA,IAAA,OAAAG,SAAA,CACG0nN,IACCznN,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPziC,UAAU,sBACV2iC,UAAQ,EAAA1iC,UAERC,EAAAA,GAAAA,GAACkmD,GAAAA,EAAa,CAAC15C,OAAQi7M,EAAW5nN,QAGtCG,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,SACL0M,QAAM,EACNtM,aAAW,EACXtF,QAASo6M,EAA6BpoN,SAErCgN,EAAKymB,EAAY,wBAA0B,8BAE9CxzB,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQu8M,EACRr8M,QAASu8M,EACT//K,QAvEJzoC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACL5zB,KAAK,OACL6zB,KAAM0zL,KAERznN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SACzBgN,EAAKymB,EAAY,wBAA0B,gCAkE5CzL,WAAWiM,EAAAA,GAAAA,GACTjnB,EAAKymB,EAAY,+BAAiC,6BAA8Bi0L,GAAYt6M,OAC5F,CAAC,KAAM,oBAETm2B,aAAcv2B,EAAKymB,EAAY,wBAA0B,2BACzD+P,eAAgBqlL,EAChBplL,sBAAoB,QAmElBikL,IAvDN7nN,EAAAA,GAAAA,IAAA,OAAAG,SAAA,EACEC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAeuW,IAAI,OAAMtW,SAAEgN,EAAK,4BAE7CnN,EAAAA,GAAAA,IAAA,OAAK47K,eAAa,EAAAz7K,SAAA,EAChBC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAEPtvB,KAAK,QACL0M,QAAM,EACN7f,UAAU,cACVupN,kBAAgB,EAChBl9B,cAAe,EACfp+K,QAASk7M,EAAoBlpN,SAE5BgN,EAAK,0BARF,gBAULy6M,EACCA,EAAiB/zM,IAAI,CAAC5T,EAAI2pD,KACxBxpD,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAEP4pJ,cAAe3iI,EAAI,EACnB1pD,UAAU,kCACViO,QAASA,KArHrBk6M,EAsHgCpoN,GArHhCyoN,KAsHcvoN,UAEFC,EAAAA,GAAAA,GAACkmD,GAAAA,EAAa,CAAC15C,OAAQ3M,KAPlBA,KAWTG,EAAAA,GAAAA,GAACkhI,GAAAA,EAAY,CAAqBirD,cAAe,EAAGr3K,KAAK,8BAAvC,qBAGtB9U,EAAAA,GAAAA,GAAA,KAAGF,UAAU,yBAAyBuW,IAAI,OAAMtW,SAAEgN,EAAK,6BACvD/M,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQ08M,EACRx8M,QAAS08M,EACTlgL,OAlHR,WACE,IAAK2/K,EAAe,OACpB,MAAMsB,EAActkD,EAAWgjD,GAC/B,OAAKsB,GAGH1pN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACL5zB,KAAK,OACL6zB,KAAMu1L,KAERtpN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SACzBgN,EAAK,+CATZ,CAaF,CAkGgBw8M,GACRxhM,UAjGR,WACE,IAAKigM,EAAe,OACpB,MAAMsB,EAActkD,EAAWgjD,GAC/B,OAAKsB,GAED30H,EAAAA,EAAAA,IAAa20H,IACRt1L,EAAAA,GAAAA,GACL,yBAAyBs1L,EAAYn8M,sCAAsC+B,GAAM/B,WACjF,CAAC,KAAM,qBAIJ6mB,EAAAA,GAAAA,GAEL,yBAAyBs1L,EAAYn8M,sCAAsC+B,GAAM/B,kFACjF,CAAC,KAAM,yBAZT,CAcF,CAgFmBq8M,GACXlmL,aAAcv2B,EAAK,uBACnBw2B,eAAgBulL,UAkBjBrB,IACC7nN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAiBC,SAAEgN,EAAK,+BACtC/M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1tB,QAASs/K,EACT3xJ,QAASkyJ,EACT77M,MAAOH,EAAK,iCAGfy7M,IACCxoN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1tB,QAASw/K,EACT7xJ,QAASmyJ,EACT97M,MAAOH,EAAK,mCAIlB/M,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAgCC,SAC3BgN,EAAfy7M,EAAoB,iCAAyC,8CC7NtEiB,GAAoB,6BAGpBC,GAAoD,CACxD,eACA,aACA,YACA,aACA,cACA,cACA,eACA,aACA,aACA,kBACA,aACA,aACA,YAIIC,GAA0BD,GAAgB/nN,OAAS,EAEnDk8J,IAAexxI,EAAAA,GAAAA,IAAU+0C,GAAOA,IAAM,KAAK,GAwZjD,IAAeziE,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM0C,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,GAC1BskD,GAAeC,EAAAA,EAAAA,KAAmB1vD,EAAQmL,IAC1C,WAAE+xM,EAAU,kBAAEqL,IAAsB76M,EAAAA,EAAAA,KAAe1N,IACnD,SAAEuS,GAAa2qM,EACfsL,EAAmB9+M,QAAQ+lD,GAAcm8D,cACzC68F,GAAel6F,EAAAA,EAAAA,IAAiB1gH,IAChC,QAAE8iI,GAAYusE,EAAWj+E,SAAS9zH,IAAW,CAAC,EAC9Cu9M,GAAgBF,KAAqBl5J,EAAAA,EAAAA,IAAiBzhD,EAAM,eAAiBA,EAAKsgH,WAKxF,MAAO,CACLtgH,OACA4hD,eACAl9C,WACAk2M,eACAD,mBACAzJ,cAVoBlxM,EAAKsgH,YAAa7+D,EAAAA,EAAAA,IAAiBzhD,EAAM,cAW7DqgH,YAVkBrgH,EAAKsgH,YAAa7+D,EAAAA,EAAAA,IAAiBzhD,EAAM,YAW3DmxM,UAVgBnxM,EAAKsgH,YAAa7+D,EAAAA,EAAAA,IAAiBzhD,EAAM,eAWzDoxM,gBAAiBtuE,EACjBg4E,8BAA4D,aAA7BJ,GAAmBj6L,MAClDs0B,mBAAoB5iD,EAAO6iD,UAAUD,mBACrC8lK,iBAGJ,CAAC1oN,GAAUmL,YACFzB,SAAQspC,EAAAA,EAAAA,KAAWhzC,EAAQmL,IA9BlBmC,CAtZ2Bs7M,EAC7Cz9M,SACA0C,OACA4hD,eACAl9C,WACAk2M,eACAD,mBACAzJ,gBACA7wF,cACA8wF,YACA0J,eACAvwM,WACA8mM,kBACA0J,gCACA/lK,qBACAu8J,iBACA30M,cAEA,MAAM,uBACJq+M,EAAsB,WACtBzJ,EAAU,WACV0J,EAAU,aACVxJ,EAAY,cACZC,EAAa,gBACbF,EAAe,SACf/xK,EAAQ,wBACRkyK,EAAuB,qBACvBC,EAAoB,YACpBsJ,IACEp+M,EAAAA,EAAAA,OAEGk1M,EAAoBC,EAAkBC,IAAqBniN,EAAAA,EAAAA,KAC5D+hN,EAAe9xM,EAAK/B,MACpB8zM,EAAenwJ,GAAckrD,OAAS,IAErCovC,EAAwBC,IAA6Bl/I,EAAAA,EAAAA,KAAS,IAC9DgB,EAAO4kK,IAAY5lK,EAAAA,EAAAA,IAAS60M,IAC5BhlG,EAAOg2D,IAAY7lK,EAAAA,EAAAA,IAAS80M,IAC5Bj/M,EAAOupJ,IAAYp/I,EAAAA,EAAAA,OACnBo/B,EAAO+/G,IAAYn/I,EAAAA,EAAAA,OACnBk+M,EAAgBC,KAAqBn+M,EAAAA,EAAAA,IAAS+C,EAAK8+C,SACpDtN,IAAYiqG,EAAAA,EAAAA,IAAkBz7I,GAC9By8I,IAAuBtjJ,EAAAA,EAAAA,GAASq4C,IAAW,EAAOp4C,EAAAA,GAAeC,SACjEgiN,IAAgBxiN,EAAAA,EAAAA,IAAQ,KAAM4sF,EAAAA,EAAAA,IAAazlF,GAAO,CAACA,IACnDnC,IAAOC,EAAAA,EAAAA,KACPw9M,IAAgCnhN,EAAAA,EAAAA,OAEtC0hB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGVtB,EAAAA,EAAAA,IAAU,KACJ81M,IACFQ,EAAwB,CAAEr0M,WAC1Bq0M,EAAwB,CAAEr0M,SAAQ+0M,WAAW,IAC7CT,EAAqB,CAAEt0M,aAExB,CAACA,EAAQ6zM,KAGZ91M,EAAAA,EAAAA,IAAU,KACR+/M,GAAkBv/M,QAAQmE,EAAK8+C,WAC9B,CAAC9+C,EAAK8+C,WAETzjD,EAAAA,EAAAA,IAAU,KACJqJ,IAAawrM,EAAAA,GAAmBnzD,WAClCZ,GAA0B,GAC1BC,OAASzoJ,KAEV,CAAC+Q,IAEJ,MAAM+tM,IAAsBp1M,EAAAA,EAAAA,GAAgB,KAC1Ci0M,EAAeoB,EAAAA,GAAkBC,mBAG7BC,IAAwBv1M,EAAAA,EAAAA,GAAgB,KAC5Ci0M,EAAeoB,EAAAA,GAAkBG,cAG7BC,IAAuBz1M,EAAAA,EAAAA,GAAgB,KAC3Ci0M,EAAeoB,EAAAA,GAAkBK,aAG7BwI,IAAyBl+M,EAAAA,EAAAA,GAAgB,KAC7Ci0M,EAAeoB,EAAAA,GAAkB8I,oBAG7BxI,IAA4B31M,EAAAA,EAAAA,GAAgB,KAChDi0M,EAAeoB,EAAAA,GAAkBO,sBAG7BC,IAAqB71M,EAAAA,EAAAA,GAAgB,KACzCi0M,EAAeoB,EAAAA,GAAkBS,WAG7BC,IAAsB/1M,EAAAA,EAAAA,GAAgB,KAC1Ci0M,EAAeoB,EAAAA,GAAkBW,gBAG7BC,IAAiBj2M,EAAAA,EAAAA,GAAiBmhJ,IACtCnC,EAASmC,GACTrC,GAA0B,KAGtBinB,IAAoB/lK,EAAAA,EAAAA,GAAiBM,IACzCklK,EAASllK,EAAEC,OAAOH,OAClB0+I,GAA0B,KAGtBo3D,IAAoBl2M,EAAAA,EAAAA,GAAiBM,IACzCmlK,EAASnlK,EAAEC,OAAOH,OAClB0+I,GAA0B,KAGtBs/D,IAAoBp+M,EAAAA,EAAAA,GAAgB,KACxC,MAAMo2M,EAAex1M,EAAMogE,OACrBq1I,EAAe5mG,EAAMzuC,OAEtBo1I,EAAahhN,OAKlB8+M,EAAW,CACTj0M,SACAW,MAAOw1M,EACP3mG,MAAO4mG,EACP5gN,UARAspJ,EAASm+D,MAYPmB,IAAqBr+M,EAAAA,EAAAA,GAAgB,KACzCi0M,EAAeoB,EAAAA,GAAkBiJ,gBAG7BC,IAAyBv+M,EAAAA,EAAAA,GAAgB,KAC7C,IAAKukD,EACH,OAGF,MAAM,mBAAEi6J,GAAuBj6J,EAE/Bo5J,EAAuB,CAAE19M,OAAQ0C,EAAKrP,GAAImxE,WAAY+5I,MAGlDC,IAAoBz+M,EAAAA,EAAAA,GAAgB,KACxC+9M,GAAmB9gN,IACjB,MAAMyhN,GAAqBzhN,EAM3B,OAJAq0J,GAAa,KACXusD,EAAY,CAAE59M,SAAQwkE,UAAWi6I,MAG5BA,OAIX1gN,EAAAA,EAAAA,IAAU,KACR,IAAKy/M,EACH,OAKF,MAAMkB,EAAWV,GAA8BhhN,SAASnF,cAAc,SACtE6mN,EAAShiL,SAAW4nB,GAAci6J,oBACjC,CAACf,EAA+Bl5J,GAAci6J,qBAEjD,MAAM7H,IAA2Bn7M,EAAAA,EAAAA,IAAQ,KACvC,IAAK+oD,GAAcs+H,iBACjB,OAAOriL,GAAK,gBAGd,GAA2C,QAAvC+jD,EAAas+H,iBAAiBluL,KAChC,OAAO6L,GAAK,gBAGd,MAAMo2M,EAAgBryJ,EAAas+H,iBAAiBS,QAAQluL,OACtDyhN,EAAcn/J,GAAoBtmB,OAAQyV,IAAcA,EAAS48D,YAAYruG,QAAU,EAE7F,OAAOyhN,EACH,GAAGD,OAAmBC,IACtBD,EAAcr2H,YACjB,CAAC7oC,EAAoB6M,GAAcs+H,iBAAkBriL,KAElDo+M,IAA0BpjN,EAAAA,EAAAA,IAAQ,KACtC,IAAKmH,EAAKqhH,oBACR,OAAO,EAGT,IAAIxQ,EAAa2pG,GAAgB/rL,OAC9BlY,KACa,iBAARA,IAA2B4kM,GACvBn7M,EAAKqhH,oBAAqB9qG,KAEpC9jB,OAEF,MAAM,aAAEysH,EAAY,SAAEhC,GAAal9G,EAAKqhH,oBAOxC,OAJKnC,GAAiBhC,IACpBrM,GAAc,GAGTA,GACN,CAAC7wG,EAAKqhH,oBAAqB85F,IAExB7I,IAAcz5M,EAAAA,EAAAA,IAAQ,IACnB86C,OAAO8K,KAAKmD,GAAc2kC,kBAAoB,CAAC,GAAG9zF,OACxD,CAACmvD,GAAc2kC,mBAEZ21H,IAAoB7+M,EAAAA,EAAAA,GAAgB,KACpCu9M,EACFK,EAAW,CAAE39M,OAAQ0C,EAAKrP,KAChBqP,EAAKsgH,UAGfoxF,EAAc,CAAEp0M,OAAQ0C,EAAKrP,KAF7B8gN,EAAa,CAAEn0M,OAAQ0C,EAAKrP,KAI9BuhN,IACAV,IACA/xK,EAAS,CAAE9uC,QAAIgD,MAIjB,IADqBi5K,EAAAA,EAAAA,MAAuB5vI,EAAAA,EAAAA,MAAa1/B,IACrC0C,EAAKyhL,YACvB,OAGF,MAAMh8J,GAAY/gB,IAAawrM,EAAAA,GAAmBvzD,WAElD,OACEjsJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAYC,SAAA,EACzBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,EAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAACysJ,GAAAA,EAAc,CACb4+D,WAAYhB,EACZ1+D,qBAAsBA,GACtBl+I,SAAU+0M,GACVriM,UAAWigM,KAEbxgN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACR9N,GAAG,cACHqN,MAAOH,GAAK,aACZU,SAAU6kK,GACV3lK,MAAOQ,EACPo+B,MAAOA,IAAUk+K,GAAoBl+K,OAAQ1oC,EAC7Csd,UAAWigM,KAEbpgN,EAAAA,GAAAA,GAACsiH,GAAAA,EAAQ,CACPziH,GAAG,cACHqN,MAAOH,GAAK,0BACZs1E,UArRgB,IAsRhBmgC,oBAtRgB,IAsR6BxG,EAAMr6G,QAAQmrF,WAC3Dr/E,SAAUg1M,GACV91M,MAAOqvG,EACP77F,UAAWigM,EACX39F,mBAAiB,OAGpBvzG,EAAKsgH,YACJ5vH,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAACtvB,KAAK,OAAOuvB,WAAS,EAACz0B,QAAS4zM,GAAoB5hN,SAAA,EAC3DC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,GAAK,gBAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAkBgN,GAAhBw9M,GAAqB,aAAqB,oBAGzEV,IACCjqN,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,UACLuvB,WAAS,EACTz0B,QAAS+zM,GAAsB/hN,SAAA,EAE/BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,GAAK,oBAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAEgN,GAAK,0BAGrCnN,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,cACLuvB,WAAS,EACTz0B,QAAS08M,GACTtqM,UAAWovG,EAAYxvH,SAAA,EAEvBC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,GAAK,yBAC9BnN,EAAAA,GAAAA,IAAA,QAAME,UAAU,WAAWuW,IAAI,OAAMtW,SAAA,CAClCorN,GAAwB,IAExBxB,IAA2BU,EAAiB,EAAI,UAGrDzqN,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,gBACLuvB,WAAS,EACTz0B,QAASi0M,GACT7hM,UAAWigM,EAAcrgN,SAAA,EAEzBC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,GAAK,gBAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWuW,IAAI,OAAMtW,SAClCmjN,SAGLtjN,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,QACLuvB,WAAS,EACTz0B,QAASm0M,GAA0BniN,SAAA,EAEnCC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,GAAK,4BAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,UAAEujN,EAAAA,GAAAA,IAAc9B,SAE3CnB,IACCzgN,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,OACLlF,QAASq0M,GACT5/K,WAAS,EACTriB,UAAWmgM,EAAgBvgN,SAAA,EAE3BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,GAAK,4BAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SACvBugN,GAAkBgD,EAAAA,GAAAA,IAAchD,EAAgB3+M,QAAUoL,GAAK,gBAIrEhC,QAAQmE,EAAKq0M,cAAc5hN,UAC1B/B,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,kBACLlF,QAASu0M,GACT9/K,WAAS,EAAAziC,SAAA,EAETC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,GAAK,qBAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,UACvBujN,EAAAA,GAAAA,IAAcp0M,EAAKq0M,aAAa5hN,aAItCooN,IACCnqN,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEH,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAACtvB,KAAK,SAAS0M,QAAM,EAAC5R,QAASi9M,GAAkBjrN,SAAA,EACxDC,EAAAA,GAAAA,GAAA,QAAAD,SAAOgN,GAAK,oBACZ/M,EAAAA,GAAAA,GAAC8pC,GAAAA,EAAQ,CACPjqC,GAAG,sBACHqN,MAAOH,GAAK,iBACZm8B,QAASmhL,EACT5nL,UAAQ,QAGZziC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iCAAgCC,SAAEgN,GAAK,mCAI5DnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBH,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAACtvB,KAAK,QAAQuvB,WAAS,EAACz0B,QAAS68M,GAAmB7qN,SAAA,EAC3DC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,GAAK,mBAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,UAAEujN,EAAAA,GAAAA,IAAcp0M,EAAK0mM,cAAgB,SAG/D2U,KAAkBV,GAAoB9+M,QAAQ+lD,KAC9C9wD,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAkBmU,IAAKu2M,GAA8BzqN,UAClEC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP92D,UAAU,mCACVopC,SAAU4nB,EAAai6J,mBACvB79M,MAAOH,GAAK,eACZU,SAAUq9M,GACVhwH,SACEhqC,EAAai6J,mBAAqBh+M,GAAK,0BAA4BA,GAAK,0BAE1EoT,UAAWovG,UAKnBvvH,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAASC,UACtBC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAACtvB,KAAK,SAAS0M,QAAM,EAACtM,aAAW,EAACtF,QAASozM,EAAiBphN,SAClEgN,GAAK,sBAIZ/M,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAASilH,EACTr9I,QAAS48M,GACTxqM,SAAUwU,GACVpiB,UAAWxF,GAAK,QAAQhN,SAEvB40B,IACC30B,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf7N,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAGfvN,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQu1M,EACRr1M,QAASu1M,EACTr5L,WAAWiM,EAAAA,GAAAA,GACT81L,IAAiB56M,EAAKsgH,UAClBziH,GAAK,2BACLA,GAAK,oCAAqCmC,EAAK/B,OACnD,CAAC,KAAM,oBAETm2B,aAAcwmL,IAAiB56M,EAAKsgH,UAAYziH,GAAK,cAAgBA,GAAK,qBAC1Ew2B,eAAgB6nL,GAChB5nL,sBAAoB,UChE5B,IAAe7kC,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,SAAQ8+M,8BACjB,MAAMp8M,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,GAC1BugH,GAAWh8D,EAAAA,EAAAA,KAAmB1vD,EAAQmL,IACpCm6B,KAAMvB,GAAc/jC,EAAOqlC,OAC7B,cAAEtS,GAAkB/yB,EACpBmyB,GAAYC,EAAAA,EAAAA,IAAcvkB,GAC1Bq8M,IAAwBr8M,EAAKsgH,WAAa87F,GAGhD,MAAO,CACLp8M,OACAk2B,YACAhR,gBACAZ,YACAw6B,QAPc9+C,EAAK8+C,QAQnBu9J,sBACAC,cAAet8M,EAAKu8M,YACpBC,YAAa3gN,QAAQgiH,GACrBt3B,iBAAkBs3B,GAAUt3B,mBAGhC,CAACp0F,GAAUmL,YACFzB,SAAQspC,EAAAA,EAAAA,KAAWhzC,EAAQmL,IAvBlBmC,CArXsCg9M,EACxDnyM,WACAoyM,aACAC,iBACAL,gBACAt8M,OACAk2B,YACAhR,gBACAqhE,mBACAi2H,cACAl4L,YACAw6B,UACAu9J,sBACA1/M,UACA20M,qBAEA,MAAM,gBAAEsL,IAAoB9/M,EAAAA,EAAAA,OAErB0/G,EAAaC,IAAkBx/G,EAAAA,EAAAA,IAA6B,CAAC,IAC7DqkI,EAAWC,IAAgBtkI,EAAAA,EAAAA,IAASpB,QAAQ6gN,KAC5Cj3L,EAAWm3F,IAAgB3/G,EAAAA,EAAAA,KAAS,IACpC4/M,EAAiCC,EAA+BC,IAAkChtN,EAAAA,EAAAA,MAClGitN,EAAaC,IAAkBhgN,EAAAA,EAAAA,IAAS,IACzCY,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAMugN,GAAqBrkN,EAAAA,EAAAA,IAAQ,KACjC,MAAMskN,EAAsBR,EAAiBp2H,IAAmBo2H,QAAkBhpN,EAIlF,IAAI+oN,IAAeS,GAAwBR,EAA3C,CAIA,GAAID,EAAY,CACd,MAAMz3K,GAAOjI,EAAAA,EAAAA,MAAYxF,MAAMC,KAAKklL,GAEpC,OAAO13K,EAAO,CACZtW,OAAQsW,EAAKt0C,GACb4rN,YAAaD,EACbU,YAAan/M,EAAK,gBAClBo3M,SAAS,EACTE,sBAAkBxhN,QAChBA,CACN,CAEA,OAAOwpN,CAdP,GAeC,CAAC52H,EAAkB+1H,EAAeI,EAAY7+M,EAAM8+M,KAEvDthN,EAAAA,EAAAA,IAAU,KACJmhN,GAAeG,IAAmBO,GACpC5L,EAAeoB,EAAAA,GAAkBO,qBAElC,CAACjzM,EAAMw8M,EAAalL,EAAgB4L,EAAoBP,KAE3DthN,EAAAA,EAAAA,IAAU,KACRohH,EAAeygG,GAAoBX,aAAe,CAAC,GACnDU,GAAgBC,GAAoBF,aAAe,IAAI7wD,OAAO,EAhElC,KAiE5B5qB,EAAa1lI,QAAQ6gN,IACrB9/F,GAAa,IACZ,CAAC0/F,EAAeI,EAAYQ,IAE/B,MAAMrgG,GAAyBpsH,EAAAA,EAAAA,IAAakN,IAC1C,MAAM,KAAEU,GAASV,EAAEC,OAMnB6+G,EAAgB6mF,IAAC,UACZA,EACH,CAACjlM,IANgCZ,EAMC6lM,EAAEjlM,IAL7BZ,QAAQ9J,IADjB,IAAmC8J,IAQnC8jI,GAAa,IACZ,IAEG67E,GAAwB3sN,EAAAA,EAAAA,IAAY,KACnCksN,IAIL//F,GAAa,GACbggG,EAAgB,CACdt/M,OAAQ0C,EAAKrP,GACbg+B,OAAQguL,EACRJ,YAAa//F,EACbwgG,kBAED,CAACL,EAAgBC,EAAiB58M,EAAKrP,GAAI6rH,EAAawgG,IAErDK,GAAqB5sN,EAAAA,EAAAA,IAAY,KAChCksN,IAILC,EAAgB,CACdt/M,OAAQ0C,EAAKrP,GACbg+B,OAAQguL,EACRJ,YAAa,CAAC,IAEhBQ,MACC,CAAC/8M,EAAKrP,GAAIosN,EAAgCJ,EAAgBC,IAEvDt+F,GAAuB7tH,EAAAA,EAAAA,IAAa8lB,MACpCmqG,EAAAA,EAAAA,IAAiB1gH,KAIjBq8M,GAAwBr8M,EAAKu8M,cAI7Bv8M,EAAKsgH,WAIDtgH,EAAKu8M,YAAYhmM,KACxB,CAACvW,EAAMq8M,IAEJiB,GAAezkN,EAAAA,EAAAA,IAAQ,KAC3B,GAAI6jN,IAAeQ,EACjB,OAGF,GAAIA,EAAmBjI,QACrB,OAAOp3M,EAAK,kBAGd,MAAM63M,EAAiBwH,EAAmB/H,iBACtCj/K,EAAUgnL,EAAmB/H,uBAC7BxhN,EAEJ,OAAI+hN,EACK73M,EAAK,uBAAuB88B,EAAAA,EAAAA,IAAgB+6K,IAG9C73M,EAAK,iBACX,CAAC6+M,EAAYQ,EAAoBhnL,EAAWr4B,IAEzC0/M,GAA0B9sN,EAAAA,EAAAA,IAAakN,IAC3C,MAAM,MAAEF,GAAUE,EAAEC,OACpBq/M,EAAex/M,GACf8jI,GAAa,IACZ,IAEH,GAAK27E,EAIL,OACExsN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAYC,SAAA,EACzBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,8BAA6BC,UAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAACE,UAAQ,EAAC3iC,UAAU,sBAAqBC,UAChDC,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CACdloB,OAAQuuL,EAAmBvuL,OAC3BsnB,OAAQqnK,EACR1nL,eAAa,OAIjB9kC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAI,OAAMtW,SAAEgN,EAAK,yBAEtD/M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,aACL27B,QAASn+B,QAAQ2gH,EAAYkD,YAC7B1hH,MAAOH,EAAKymB,EAAY,6BAA+B,4BACvDs6F,UAAQ,EACR3tG,SAAUqtG,EAAqB,cAC/B//G,SAAUs+G,MAGbv4F,IACCxzB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,eACL27B,QAASn+B,QAAQ2gH,EAAYghG,cAC7Bx/M,MAAOH,EAAK,yBACZ+gH,UAAQ,EACR3tG,SAAUqtG,EAAqB,gBAC/B//G,SAAUs+G,MAIfv4F,IACCxzB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,eACL27B,QAASn+B,QAAQ2gH,EAAYihG,cAC7Bz/M,MAAOH,EAAK,yBACZ+gH,UAAQ,EACR3tG,SAAUqtG,EAAqB,gBAC/B//G,SAAUs+G,OAIhB/rH,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,iBACL27B,QAASn+B,QAAQ2gH,EAAYsE,gBAC7B9iH,MAAOH,EAAKymB,EAAY,0BAA4B,gCACpDs6F,UAAQ,EACR3tG,SAAUqtG,EAAqB,kBAC/B//G,SAAUs+G,OAGd/rH,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,cACL27B,QAASn+B,QAAQ2gH,EAAYkhG,aAC7B1/M,MAAOH,EAAK,wBACZ+gH,UAAQ,EACR3tG,SAAUqtG,EAAqB,eAC/B//G,SAAUs+G,OAGd/rH,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,cACL27B,QAASn+B,QAAQ2gH,EAAYmhG,aAC7B3/M,MAAOH,EAAK,wBACZ+gH,UAAQ,EACR3tG,SAAUqtG,EAAqB,eAC/B//G,SAAUs+G,OAGd/rH,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,gBACL27B,QAASn+B,QAAQ2gH,EAAYohG,eAC7B5/M,MAAOH,EAAK,0BACZ+gH,UAAQ,EACR3tG,SAAUqtG,EAAqB,iBAC/B//G,SAAUs+G,OAGZv4F,IACAxzB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,WACL27B,QAASn+B,QAAQ2gH,EAAYqhG,UAC7B7/M,MAAOH,EAAK,qBACZ+gH,UAAQ,EACR3tG,SAAUqtG,EAAqB,YAC/B//G,SAAUs+G,OAIhB/rH,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,cACL27B,QAASn+B,QAAQ2gH,EAAYgD,aAC7BxhH,MAAOH,EAAK,qBACZ+gH,UAAQ,EACR3tG,SAAUqtG,EAAqB,eAC/B//G,SAAUs+G,OAGZv4F,IACAxzB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,cACL27B,QAASn+B,QAAQ2gH,EAAYiD,aAC7BzhH,MAAOH,EAAK,wBACZ+gH,UAAQ,EACR3tG,SAAUqtG,EAAqB,eAC/B//G,SAAUs+G,OAIhB/rH,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,YACL27B,QAASn+B,QAAQ2gH,EAAYshG,WAC7B9/M,MAAOH,EAAK,sBACZ+gH,UAAQ,EACR3tG,SAAUqtG,EAAqB,aAC/B//G,SAAUs+G,OAGd/rH,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,aACL27B,QAASn+B,QAAQ2gH,EAAYuhG,YAC7B//M,MAAOH,EAAK,2BACZ+gH,UAAQ,EACR3tG,SAAUqtG,EAAqB,cAC/B//G,SAAUs+G,MAGb/9D,IACChuD,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,eACL27B,QAASn+B,QAAQ2gH,EAAYmD,cAC7B3hH,MAAOH,EAAK,0BACZ+gH,UAAQ,EACR3tG,SAAUqtG,EAAqB,gBAC/B//G,SAAUs+G,OAIdv4F,IACAxzB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAK,YACL27B,QAASn+B,QAAQ2gH,EAAYwhG,WAC7BhgN,MAAOH,EAAK,4BACZ+gH,UAAQ,EACR3tG,SAAUqtG,EAAqB,aAC/B//G,SAAUs+G,MAKfw/F,IACCvrN,EAAAA,GAAAA,GAAA,KAAGF,UAAU,oBAAoBuW,IAAI,OAAMtW,SACxCgN,EAAK,mCAIRymB,IACAxzB,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACR9N,GAAG,cACHqN,MAAOH,EAAK,iBACZU,SAAUg/M,EACV9/M,MAAOu/M,EACP/rM,SAAUorM,EACVlpI,UAhVkB,KAoVrBjuD,IAAkBy3L,IAAmBN,IAAwBK,IAC5D5rN,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAACtvB,KAAK,SAAS0M,QAAM,EAACtM,aAAW,EAACtF,QAASi+M,EAA8BjsN,SAC/EgN,EAAK,gCAMd/M,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAASqqG,EACTziI,QAASu+M,EACT/5M,UAAWxF,EAAK,QAChBoT,SAAUwU,EAAU50B,SAEnB40B,GACC30B,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf7N,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAIbq+M,IACA5rN,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQogN,EACRlgN,QAASogN,EACTn3M,KAAK,+CACLwuB,aAAcv2B,EAAK,yBACnBw2B,eAAgBgpL,EAChB/oL,sBAAoB,U,0BCnW9B,MAoNA,IAAe7kC,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM0C,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,IACxBopF,aAAci7E,GAAqBxvK,EAAOqlC,OAC5C,QAAE8uD,EAAO,iBAAEC,EAAgB,sBAAE03H,IAA0Bp8J,EAAAA,EAAAA,KAAmB1vD,EAAQmL,IAAW,CAAC,EAC9FgnB,EAAYtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,IAChC82B,QAASm+H,GAAoB9iK,EAAOolC,aAAe,CAAC,EACtD2mL,EAAwB/rN,EAAO6yC,UAAUk5K,sBAEzCtG,EAAmB53M,IAASA,EAAKsgH,YAAa7+D,EAAAA,EAAAA,IAAiBzhD,EAAM,aAErEm+M,EAAsBvG,KAAqBl3F,EAAAA,EAAAA,IAAiB1gH,SAA+BrM,IAAtBqM,EAAK0mM,mBACjD/yM,IAA1BuqN,GAAuCl+M,EAAK0mM,cAAgBwX,EAE3DE,EAAgBp+M,KAAUyhD,EAAAA,EAAAA,IAAiBzhD,EAAM,iBAChDskB,KAAcgpJ,EAAAA,EAAAA,IAAkBttK,EAAM,gBAC1CA,EAAKsgH,YAINprF,MAAOP,EAAW,eAClB09B,EAAc,cACdgsJ,EAAa,aACblpD,IACEt1J,EAAAA,EAAAA,KAAe1N,GAAQ+iK,WAE3B,MAAO,CACL+oD,sBAAuBpiN,QAAQmE,GAAQi+M,GACvC33H,UACA83H,gBACA73H,mBACAo7E,mBACAr9I,YACA2wI,kBACAtgI,cACAmtI,YAAazvG,EACbgsJ,gBACAlpD,eACAyiD,mBACA1yL,cAAe/yB,EAAO+yB,cACtBi5L,wBAxCc1+M,CApNkC6+M,EACpDhhN,SACAihN,WACAj4H,UACA83H,gBACA73H,mBACAo7E,mBACAr9I,YACAha,WACA+zM,gBACAppD,kBACAE,eACA2M,cACAntI,cACAzP,gBACA0yL,mBACAqG,wBACAE,sBACAxhN,UACA20M,iBACAiD,yBAEA,MAAM,SACJ90K,EAAQ,mBAAE41H,EAAkB,gBAAEm8C,EAAe,yBAC7CgN,EAAwB,6BAAEC,EAA4B,iBAAExtC,IACtDn0K,EAAAA,EAAAA,MACEe,GAAOC,EAAAA,EAAAA,KACP8vD,GAAWzzD,EAAAA,EAAAA,MACXigB,GAAejgB,EAAAA,EAAAA,OAEdukN,EAAgBC,IAAqB1hN,EAAAA,EAAAA,MAEtC2hN,GAAW/lN,EAAAA,EAAAA,IAAQ,IAChB0lN,GAAYh4H,EAAmB5yC,OAAO8K,KAAK8nC,GAAoB,GACrE,CAACA,EAAkBg4H,IAEhB93H,GAAY5tF,EAAAA,EAAAA,IAAQ,KAExB,MAAMq9B,GAAY8G,EAAAA,EAAAA,MAAYxF,MAAMC,KACpC,IAAK6uD,IAAYpwD,EACf,MAAO,GAGT,MAAMY,GAAU8vD,EAAAA,EAAAA,IACdN,EAAQ/hF,IAAI,EAAGoqB,YAAaA,GAC5BuH,EACAyrI,GAGF,OAAO48C,EAAWznL,EAAQrI,OAAQE,IAAYiwL,EAASh+L,SAAS+N,IAAWmI,GAC1E,CAACwvD,EAASq7E,EAAkB48C,EAAUK,KAEzCC,EAAAA,GAAAA,GAAsBp4H,GAEtB,MAAM5xD,GAAeh8B,EAAAA,EAAAA,IAAQ,KAE3B,MAAMq9B,GAAY8G,EAAAA,EAAAA,MAAYxF,MAAMC,KAC9BqnL,EAAyBjjN,QAAQ84B,GACjCoqL,EAAaD,EAEd7pD,GAAkBjgI,EAAAA,GAAAA,IAAmB,CAAEC,IAAKggI,EAAiB//H,MAAOP,EAAa3iC,KAAM,SAAY,GADpGy0F,EAGJ,OAAO1kC,EAAAA,GAAAA,IACLhtB,EAAAA,GAAAA,IAAO,IACFgqL,KACCD,GAAyB3pD,GAAqB,MAC9C2pD,GAAyBT,GAAsB,KAClD5vL,OAAQ+mI,IACT,MAAMvwH,EAAO/O,EAAUs/H,GACvB,OAAKvwH,IAIG3gB,GAAa2gB,EAAKm9H,uBAAwBr7E,EAAAA,EAAAA,IAAU9hD,OACrDs5K,IAAaK,EAASh+L,SAAS40I,OAExC,IAED,CAAC/uE,EAAWwuE,EAAiBtgI,EAAawgI,EAAckpD,EAAe/5L,EAAWi6L,EAAUK,KAExF7hK,EAAaC,IAAWC,EAAAA,GAAAA,QAAkBtpD,EAAWkhC,EAAch5B,QAAQ84B,IAE5E24K,GAAoBjwM,EAAAA,EAAAA,GAAiB1M,IACrC4tN,GACFhK,EAAoB5jN,GAAI,GACxB2gN,EAAgBoB,EAAAA,GAAkBsM,sBAElCxN,IACA/xK,EAAS,CAAE9uC,UAITo6H,GAAqB1tH,EAAAA,EAAAA,GAAiBM,IAC1C03J,EAAmB,CAAEngI,MAAOv3B,EAAEC,OAAOH,UAGjC6Y,GAAgBuoC,EAAAA,GAAAA,GAA0BzkC,EAAc9P,EAAWhV,IACnEynD,GAAeA,EAAYtqD,OAAS,GACtC66M,EAAkBvwJ,GAAuB,IAAXznD,EAAe,EAAIA,KAElD,oBAAoB,GAEjB2pN,GAAgC5hN,EAAAA,EAAAA,GAAgB,KACpDshN,OAAkBhrN,KAGdurN,GAAiC7hN,EAAAA,EAAAA,GAAgB,KACrDmhN,EAAyB,CAAElhN,SAAQwkE,WAAYm8I,MAG3CkB,GAA4B9hN,EAAAA,EAAAA,GAAgB,KAChD4zK,IACAwtC,EAA6B,CAAEW,uBAAwBC,EAAAA,GAAuB1iE,eA+BhF,OA5BA9gI,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KA2BRjM,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAYC,SAAA,CACxB0tN,IAbDztN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,qBAAqBuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,UACtEC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRsG,IAAK6oD,EACLnwD,MAAOk3B,EACPp2B,SAAUwsH,EACV3qE,YAAaviD,EAAK,eAStBnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,CACzCstN,IAAwB75L,IACvB5zB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBH,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAACtvB,KAAK,QAAQ0M,QAAM,EAAC5R,QAASqgN,EAA+BruN,SAAA,EACpEC,EAAAA,GAAAA,GAAA,QAAAD,SAAOgN,EAAK,yBACZ/M,EAAAA,GAAAA,GAAC8pC,GAAAA,EAAQ,CAAC58B,MAAOH,EAAK,sBAAuBm8B,QAASikL,QAExDntN,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAcC,SACxBgN,EAAKogN,EAAwB,+BAAiC,uCAIrEntN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAASC,SACrBksD,GAAatqD,QACZ3B,EAAAA,GAAAA,GAACkpD,GAAAA,EAAc,CACbppD,UAAU,4BACVqpD,MAAOplB,EACPqlB,WAAY8C,EACZysE,gBAAiB5tH,QAAQ84B,GACzB5vB,IAAKqV,EACL+lC,UAAW7pC,EAAczlB,SAExBksD,EAAYx4C,IAAK5T,IAChBG,SAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAEPziC,UAAU,kCAEViO,QAASA,IAAMyuM,EAAkB38M,GACjC6kD,gBAtDgB8pK,EAsDuB3uN,EArD9C2uN,IAAap6L,GAAkB0yL,EAA+B,CAAC,CACpE35M,MAAOJ,EAAK,iCACZkG,KAAM,OACN8xC,QAASA,KACP8oK,EAAkBW,WAJmC3rN,GAsD3C+iD,mBAAiB,EAAA7lD,UAEjBC,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CAACloB,OAAQh+B,EAAIilC,eAAa,KAPrCjlC,GAlDrB,IAAgC2uN,MA6DnBx9C,IAAe/kH,GAAgBA,EAAYtqD,QAO9C3B,EAAAA,GAAAA,GAACyvD,GAAAA,EAAO,KANRzvD,EAAAA,GAAAA,GAACkhI,GAAAA,EAAY,CACXirD,cAAe,EAEfr3K,KAAM0e,EAAY,uBAAyB,oBADvC,sBAQX85L,IACCttN,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,SAAO,EACPp4B,QAASsgN,EACT97M,UAAWxF,EAAK,yBAAyBhN,UAEzCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,sBAGdu5M,IACC9mN,EAAAA,GAAAA,GAACyuN,GAAAA,EAAiB,CAChB9iN,OAAQZ,QAAQ6iN,GAChB/vL,OAAQ+vL,EACR/hN,QAASsiN,UCqFnB,IAAexvN,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM0C,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,GAC1BugH,GAAWh8D,EAAAA,EAAAA,KAAmB1vD,EAAQmL,IACtC,SAAEoH,IAAa7E,EAAAA,EAAAA,KAAe1N,GAAQk9M,WAEtCxoK,EAAoB7mC,GAAM6mC,kBAC1B0nG,EAA2Cp8I,EAAO6yC,UAAUwpG,mCAElE,MAAO,CACLxuI,OACA0E,WACAwgB,cAAe/yB,EAAO+yB,cACtBqtL,kBAAmB10F,GAAU20F,eAAe//M,QAAU,EACtD6zF,QAASu3B,GAAUv3B,QACnBk5H,yBAA0B3jN,QAAQgiH,GAAU2hG,0BAA4BjxE,GACxEuB,qBAAsBj0I,QAAQgrC,GAAqB0nG,GACnDkxE,oBAAqB54K,GAAqB+oG,EAAAA,MAjB5BnwI,CA/PsCigN,EACxDpO,iBACAiD,qBACAv0M,OACA0E,WACAwgB,gBACAqtL,oBACAjsH,UACA3pF,UACA2N,WACAk1M,2BACA1vE,uBACA2vE,0BAEA,MAAM,8BAAEE,EAA6B,wBAAEC,IAA4B9iN,EAAAA,EAAAA,OAE7D,YACJ0/G,EAAW,sBAAEE,EAAqB,UAAEj3F,EAAS,uBAAEo3F,EAAsB,aAAED,GACrEN,GAAqBt8G,GAAMqhH,qBACzBh5E,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,MAEbzsB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAMk3M,GAA0BpjN,EAAAA,EAAAA,IAAY,KAC1C6gN,EAAeoB,EAAAA,GAAkBmN,oBAChC,CAACvO,IAEEwO,GAA0BrvN,EAAAA,EAAAA,IAAY,KAC1C6gN,EAAeoB,EAAAA,GAAkBqN,6BAChC,CAACzO,IAEE0O,GAA6BvvN,EAAAA,EAAAA,IAAa4xH,IAC9CkyF,EAAmBlyF,EAAO1zF,OAAQ0zF,EAAO8yF,mBAAqBjwL,GAC9DosL,EAAeoB,EAAAA,GAAkBuN,uBAChC,CAAC/6L,EAAeqvL,EAAoBjD,KAEhCrzF,EAAqBC,IAA0BjhH,EAAAA,EAAAA,KAAS,IAExDijN,EAA2BC,EAA6BC,IAAiCrwN,EAAAA,EAAAA,MACzFswN,EAAwBC,IAA6BrjN,EAAAA,EAAAA,IAAS6yI,IAC9DlB,EAAmBqB,IAAwBhzI,EAAAA,EAAAA,IAAiBwiN,IAEnEpkN,EAAAA,EAAAA,IAAU,KACJqJ,IAAawrM,EAAAA,GAAmBnzD,UAClCqjE,KAED,CAAC17M,IAEJ,MAAM04M,GAAwB//M,EAAAA,EAAAA,GAAgB,KACvC2C,IAIL48G,GAAa,GACb+iG,EAA8B,CAAEriN,OAAQ0C,EAAKrP,GAAIuzH,aAAc1H,OAG3D+jG,GAAgCljN,EAAAA,EAAAA,GAAgB,KAC/C2C,GACL4/M,EAAwB,CACtBtiN,OAAQ0C,GAAMrP,GACdk2C,kBAAmBw5K,EAAyBzxE,EAAoB,MAI9D4xE,GAA0BnjN,EAAAA,EAAAA,GAAgB,KAC1C6iN,GACFK,IAEE7jG,GACF0gG,MAIEqD,GAAmB5nN,EAAAA,EAAAA,IAAQ,IAC1BytF,EAIEA,EAAQ73D,OAAO,EAAGy1F,kBAAmBroH,QAAQqoH,IAH3C,GAIR,CAAC59B,IAEEo6H,GAAsBjwN,EAAAA,EAAAA,IAAa4xH,IACvC,MAAM,aAAE6B,GAAiB7B,EACzB,IAAK6B,IAAiBlkH,EACpB,OAGF,MAAM,oBAAEqhH,GAAwBrhH,EAEhC,OAAO2zC,OAAO8K,KAAKylE,GAAc9wE,OAAO,CAAC3pC,EAAQuV,KAC/C,MAAMzI,EAAMyI,EACZ,IACGklG,EAAa3tG,IACV8qG,IAAsB9qG,IACf,eAARA,GAAgC,iBAARA,GAAkC,cAARA,EAErD,OAAO9M,EAGT,MAAMmqB,EA/IZ,SAAqCrd,GACnC,OAAQA,GACN,IAAK,eACH,MAAO,yBACT,IAAK,YACH,MAAO,8BACT,IAAK,eACH,MAAO,iCACT,IAAK,aACH,MAAO,+BACT,IAAK,YACH,MAAO,8BACT,IAAK,aACH,MAAO,+BACT,IAAK,cACH,MAAO,8BACT,IAAK,cACH,MAAO,8BACT,IAAK,eACH,MAAO,iCACT,IAAK,YACH,MAAO,6BACT,IAAK,WACH,MAAO,6BACT,IAAK,kBACH,MAAO,8BACT,IAAK,aACH,MAAO,8BACT,IAAK,aACH,MAAO,8BACT,IAAK,aACH,MAAO,+BACT,IAAK,aACH,MAAO,+BACT,QACE,OAEN,CA0GsBoqM,CAA4BpqM,GAE5C,IAAKqd,EACH,OAAOnqB,EAGT,MAAMm3M,EAAmBv4K,EAAQzU,GAEjC,MAAO,GAAGnqB,IAAUA,EAAOhX,OAA4B,KAAKmuN,IAAxBA,KACnC,KACF,CAAC5gN,EAAMqoC,IAEJw4K,GAA+BxjN,EAAAA,EAAAA,GAAgB,KACnDijN,GAA2BD,GAC3BF,MAGItxE,GAAgCxxI,EAAAA,EAAAA,GAAiBI,IACrDwyI,EAAqBxyI,GACrB0iN,MAGIW,EAAwBZ,GAA6BxjG,EACrDqkG,EAAwBr8M,IAAawrM,EAAAA,GAAmBvzD,YAAcl3H,EAE5E,OACE/0B,EAAAA,GAAAA,IAAA,OACEE,UAAU,mCACVgG,MAAO,qDAC6D/F,SAAA,EAEpEH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,EAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gCAA+BC,SAAA,EAC5CC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAkBuW,IAAI,OAAMtW,SAAEgN,EAAK,+BACjD/M,EAAAA,GAAAA,GAACktH,GAAsB,CACrB1gH,OAAQ0C,GAAMrP,GACdstH,oBAAqBA,EACrBC,uBAAwBA,EACxBrB,uBAAwBA,EACxBL,YAAaA,EACb4B,kBAAkB,mBAClBxtH,WAAWqW,EAAAA,GAAAA,GACT,eACAg3G,GAAuB,sBAEzBE,kBAAkBl3G,EAAAA,GAAAA,GAAe,OAAQg3G,GAAuB,gBAInEuhG,IACC9uN,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GACT,UACAg3G,GAAuB,WACvBptH,SAAA,EAEFH,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CAACx0B,QAASgiN,EAA6BhwN,SAAA,EAC9CC,EAAAA,GAAAA,GAAA,QAAAD,SAAOgN,EAAK,+BACZ/M,EAAAA,GAAAA,GAAC8pC,GAAAA,EAAQ,CACPjqC,GAAG,sBACHqN,MAAOH,EAAK,4BACZm8B,QAASqmL,QAGbvvN,EAAAA,GAAAA,GAAA,KAAGF,UAAU,mCAAmCuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SACjFgN,EAAK,+BAKXwiN,IACCvvN,EAAAA,GAAAA,GAAA,OACEF,WAAWqW,EAAAA,GAAAA,GACT,UACAg3G,GAAuB,WACvBptH,UAEFC,EAAAA,GAAAA,GAACkgJ,GAAgB,CACf9C,4BAA0B,EAC1BS,aAAW,EACXC,kBAAmBA,EACnBrwI,SAAUswI,OAKhB/9I,EAAAA,GAAAA,GAAA,OACEF,WAAWqW,EAAAA,GAAAA,GACT,UACAg3G,GAAuB,WACvBptH,UAEFH,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPtvB,KAAK,cACLuvB,WAAS,EACTk/E,QAAM,EACN3zG,QAASg1M,EAAwBhjN,SAAA,EAEjCC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgN,EAAK,0BAC9B/M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAE0hN,UAIhC7hN,EAAAA,GAAAA,IAAA,OACEE,WAAWqW,EAAAA,GAAAA,GACT,UACAg3G,GAAuB,WACvBptH,SAAA,EAEFC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAkBuW,IAAI,OAAMtW,SAAEgN,EAAK,wBAEjD/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,WACLlF,QAASihN,EAAwBjvN,SAEhCgN,EAAK,yBAGP4iN,EAAiBl8M,IAAK89G,IACrBvxH,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAEPziC,UAAU,wCAEViO,QAASA,IAAMmhN,EAA2B39F,GAAQxxH,UAElDC,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CACdloB,OAAQ0zF,EAAO1zF,OACfsnB,OAAQyqK,EAAoBr+F,GAC5BzsF,eAAa,KARVysF,EAAO1zF,gBAepB79B,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAAS6pL,EACTjiN,QAAS2hN,EACTn9M,UAAWxF,EAAK,QAChBoT,SAAU8vM,EAAsBlwN,SAE/BkwN,GACCjwN,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf7N,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,kBCnJrB,IAAe5O,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,SAAQ8+M,8BACjB,MAAMp8M,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,GAC1BugH,GAAWh8D,EAAAA,EAAAA,KAAmB1vD,EAAQmL,GAG5C,MAAO,CACL0C,OACAq8M,sBAJ4Br8M,EAAKsgH,WAAa87F,GAK9CI,YAAa3gN,QAAQgiH,GACrBv3B,QAASu3B,GAAUv3B,UAGvB,CAACn0F,GAAUmL,YACFzB,SAAQspC,EAAAA,EAAAA,KAAWhzC,EAAQmL,IAdlBmC,CAvJ0CuhN,EAC5DhhN,OACAihN,uBACAzE,cACAl2H,UACAgrH,iBACA+K,sBACA1/M,UACA2N,eAEA,MAAM,6BAAE62G,IAAiCrkH,EAAAA,EAAAA,MAEnCogN,GAAqBrkN,EAAAA,EAAAA,IAAQ,KACjC,GAAKytF,EAIL,OAAOA,EAAQhgD,KAAK,EAAG3X,YAAaA,IAAWsyL,IAC9C,CAAC36H,EAAS26H,KAEP,YACJzkG,EAAW,sBAAEE,EAAqB,UAAEj3F,EAAS,uBAAEo3F,EAAsB,aAAED,GACrEN,GAAqB4gG,GAAoBh5F,cAAgBlkH,GAAMqhH,sBAC5D6/F,EAA6BC,EAA2BC,IAA8BrxN,EAAAA,EAAAA,KACvF8N,GAAOyqC,EAAAA,GAAAA,KACPD,GAAUvqC,EAAAA,EAAAA,MAEhB+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGVtB,EAAAA,EAAAA,IAAU,KACJmhN,GAAeyE,IAAyB/D,GAC1C5L,EAAeoB,EAAAA,GAAkB8I,mBAElC,CAACx7M,EAAMw8M,EAAalL,EAAgB4L,EAAoB+D,IAE3D,MAAM7D,GAAwB3sN,EAAAA,EAAAA,IAAY,KACnCuP,GAASihN,IAIdrkG,GAAa,GACbuE,EAA6B,CAC3B7jH,OAAQ0C,EAAKrP,GACbg+B,OAAQsyL,EACR/8F,aAAc1H,MAEf,CAACx8G,EAAMihN,EAAsBrkG,EAAcuE,EAA8B3E,IAEtE6kG,GAAqB5wN,EAAAA,EAAAA,IAAY,KAChCuP,GAASihN,GAId9/F,EAA6B,CAC3B7jH,OAAQ0C,EAAKrP,GACbg+B,OAAQsyL,EACR/8F,aAAc,CACZo9F,cAAc,MAGjB,CAACthN,EAAMihN,EAAsB9/F,IAE1B7C,GAAuB7tH,EAAAA,EAAAA,IAAa8lB,KACpC8lM,MAICr8M,IAASA,EAAKqhH,sBAIZrhH,EAAKqhH,oBAAoB9qG,GAC/B,CAACvW,EAAMq8M,KAEHp+F,EAAqBC,IAA0BjhH,EAAAA,EAAAA,KAAS,GAE/D,GAAKigN,EAIL,OACExsN,EAAAA,GAAAA,IAAA,OACEE,UAAU,mCACVgG,MAAO,sDACuF/F,SAAA,EAE9FH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gCAA+BC,SAAA,EAC5CC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAACE,UAAQ,EAAC3iC,UAAU,sBAAqBC,UAChDC,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CAACloB,OAAQuuL,EAAmBvuL,OAAQiH,eAAa,OAGnE9kC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBuW,IAAI,OAAMtW,SAAEw3C,EAAQ,4BACzDv3C,EAAAA,GAAAA,GAACktH,GAAsB,CACrB1gH,OAAQ0C,GAAMrP,GACdstH,oBAAqBA,EACrBC,uBAAwBA,EACxBrB,uBAAwBA,EACxBL,YAAaA,EACb5rH,WAAWqW,EAAAA,GAAAA,GACT,eACAg3G,GAAuB,sBAEzBG,kBAAkB,mBAClBD,kBAAkBl3G,EAAAA,GAAAA,GAAe,OAAQg3G,GAAuB,WAChEK,qBAAsBA,QAIxB+9F,IACAvrN,EAAAA,GAAAA,GAAA,OACEF,WAAWqW,EAAAA,GAAAA,GACT,UACAg3G,GAAuB,WACvBptH,UAEFC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAACtvB,KAAK,cAAc0M,QAAM,EAACtM,aAAW,EAACtF,QAASsiN,EAA0BtwN,SAChFw3C,EAAQ,iCAMjBv3C,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAASylF,EACT79G,QAASu+M,EACT/5M,UAAWglC,EAAQ,QACnBp3B,SAAUwU,EAAU50B,SAEnB40B,GACC30B,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf7N,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAIfvN,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQykN,EACRvkN,QAASykN,EACTx7M,KAAM/H,EAAK,iCACXu2B,aAAa,SACbC,eAAgBgtL,EAChB/sL,sBAAoB,UCrG5B,IAAe7kC,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM0C,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,IACxBm6B,KAAMvB,EAAWwwD,aAAci7E,GAAqBxvK,EAAOqlC,MAC7D8uD,GAAUzkC,EAAAA,EAAAA,KAAmB1vD,EAAQmL,IAASgpF,QAGpD,MAAO,CACLA,UACApwD,YACAyrI,mBACAr9I,UANgBtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,KALxBP,CA7DgD8hN,EAClErrL,YACAyrI,mBACAr7E,UACAhiE,YACAgtL,iBACAiD,qBACA53M,UACA2N,gBAEAuR,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAM8pF,GAAY5tF,EAAAA,EAAAA,IAAQ,KACxB,GAAKytF,GAAYpwD,EAIjB,OAAO0wD,EAAAA,EAAAA,IACLN,EAAQ73D,OAAQ4zF,IAAYA,EAAO4yF,SAAS1wM,IAAI,EAAGoqB,YAAaA,GAChEuH,EACAyrI,IAED,CAACr7E,EAASpwD,EAAWyrI,IAElBq+C,GAA6BvvN,EAAAA,EAAAA,IAAa6uN,IAC9C/K,EAAmB+K,GACnBhO,EAAeoB,EAAAA,GAAkBuN,uBAChC,CAAC1L,EAAoBjD,IAExB,OACExgN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,aAAYC,UACzBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,gBAAeC,UAC5BC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAAU07K,eAAa,EAAAz7K,SACnC41F,EACCA,EAAUliF,IAAI,CAAC5T,EAAI2pD,KACjBxpD,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAEP4pJ,cAAe3iI,EACf1pD,UAAU,kCAEViO,QAASA,IAAMmhN,EAA2BrvN,GAAIE,UAE9CC,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CAACloB,OAAQh+B,EAAIilC,eAAa,KANrCjlC,KAUTG,EAAAA,GAAAA,GAACkhI,GAAAA,EAAY,CACXirD,cAAe,EAEfr3K,KAAM0e,EAAY,uBAAyB,oBADvC,0BCzDZk9L,GAAuB,CAAC,EAAG,GAAI,KAC/BC,GAAsB,CAC1BC,KAAM,KACNx5J,IAAK,MACLy5J,KAAM,QAEFC,GAA6BH,GAAoBC,KA+OvD,IAAejyN,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM,cAAEukN,IAAkBhiN,EAAAA,EAAAA,KAAe1N,GAAQk9M,WAAWj+E,SAAS9zH,IAAW,CAAC,EAEjF,MAAO,CACLukN,kBALcpiN,CAlO4BqiN,EAC9CxkN,SACAukN,gBACAv3M,WACA3N,UACA20M,qBAEA,MAAM,uBAAEyQ,EAAsB,iBAAEC,IAAqBllN,EAAAA,EAAAA,MAE/Ce,GAAOC,EAAAA,EAAAA,MACN8qF,EAAkBC,EAAcC,IAAiB/4F,EAAAA,EAAAA,MACjDm9G,EAAiB+0G,IAAsBhlN,EAAAA,EAAAA,KAAS,IAChDgB,EAAO4kK,IAAY5lK,EAAAA,EAAAA,IAAS,KAC5BysF,EAAkBC,IAAuB1sF,EAAAA,EAAAA,IAAiB+f,KAAKC,MAAQ2kM,KACvEM,EAAsBC,IAA2BllN,EAAAA,EAAAA,IAAS,cAC1DmlN,EAAkBC,IAAuBplN,EAAAA,EAAAA,IAA6B,KACtEqlN,EAAqBC,IAA0BtlN,EAAAA,EAAAA,IAAS,MACxDulN,EAAiBC,IAAsBxlN,EAAAA,EAAAA,KAAS,IAEvD4e,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGVtC,EAAAA,EAAAA,GAAc,EAAEqoN,MACd,GAAIA,IAAqBb,EACzB,GAAKA,EAOE,CACL,MACE5jN,MAAO0kN,EAAY,WAAEC,EAAU,WAAEhpL,EAAYszE,gBAAiB21G,GAC5DhB,EAMJ,GALIc,GAAc9/C,EAAS8/C,GACvBC,IACFL,EAAuBf,GAAqB5gM,SAASgiM,GAAcA,EAAWhlI,WAAa,UAC3FykI,EAAoBO,IAElBhpL,EAAY,CACd,MAAMkpL,GAAchwL,EAAAA,GAAAA,MAAkB8uL,GACtCO,EAAwB,UACxBx4H,EAAwD,IAApC3lF,KAAKma,IAAIyb,EAAYkpL,GAC3C,CACID,GACFZ,GAAmB,EAEvB,MAvBEp/C,EAAS,IACTs/C,EAAwB,aACxBI,EAAuB,KACvB54H,EAAsC,KAAlB72D,EAAAA,GAAAA,MAAyB8uL,IAC7CS,EAAoB,IACpBJ,GAAmB,IAmBpB,CAACJ,IAEJ,MAAMkB,GAAwBtyN,EAAAA,EAAAA,IAAakN,IACzCskN,EAAmBtkN,EAAEC,OAAOo8B,UAC3B,IAEGopI,GAAoB3yK,EAAAA,EAAAA,IAAakN,IACrCklK,EAASllK,EAAEC,OAAOH,QACjB,IAEGulN,GAA+BvyN,EAAAA,EAAAA,IAAakN,IAChD0kN,EAAoBjsM,OAAO6sM,SAAStlN,EAAEC,OAAOH,MAAO,MACnD,IAEGkwF,GAAyBl9F,EAAAA,EAAAA,IAAaszB,IAC1C4lE,EAAoB5lE,EAAK4mC,WACzBm+B,KACC,CAACA,IAEEo6H,GAAkBzyN,EAAAA,EAAAA,IAAY,KAClCgyN,GAAmB,GACnB,MAAMG,EAAqC,WAAxBN,EAAmCF,EAAmBhsM,OAAOksM,GAChF,IAAI1oL,EACJ,OAAQsoL,GACN,IAAK,SACHtoL,GAAa9G,EAAAA,GAAAA,OAAmB42D,EAAmB1sE,KAAKC,OAAS,IACjE,MACF,IAAK,OACL,IAAK,MACL,IAAK,OACH2c,GAAa9G,EAAAA,GAAAA,MAAkB2uL,GAAoBS,GAAwB,IAC3E,MACF,IAAK,YACHtoL,EAAa,EACb,MACF,QACEA,OAAajmC,EAGbkuN,EACFE,EAAuB,CACrBh+H,KAAM89H,EAAc99H,KACpBzmF,SACAW,QACAivG,kBACAtzE,aACAgpL,eAGFZ,EAAiB,CACf1kN,SACAW,QACAivG,kBACAtzE,aACAgpL,eAGJtR,EAAeoB,EAAAA,GAAkBS,UAChC,CACD71M,EAAQosF,EAAkB04H,EAAkBL,EAAwBF,EACpEG,EAAkB90G,EAAiBg1G,EAAsBI,EAAqBrkN,EAAOqzM,IAGvF,OACE5gN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,0BAAyBC,SAAA,EACtCH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,EAC1CC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAASC,UACtBC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOH,EAAK,qBACZ+tF,SAAU/tF,EAAK,gCACfm8B,QAASkzE,EACT3uG,SAAUwkN,OAGdryN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACR7N,UAAU,YACVwvD,YAAaviD,EAAK,gBAClBJ,MAAOQ,EACPM,SAAU6kK,KAEZtyK,EAAAA,GAAAA,GAAA,KAAGF,UAAU,oBAAmBC,SAAEgN,EAAK,sBAEzCnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,SAAEgN,EAAK,oBACvC/M,EAAAA,GAAAA,GAACsN,GAAAA,EAAU,CACTC,KAAK,gBACLC,QAAS,CACP,CACEb,MAAO,OACPO,MAAOH,EAAK,QAAS,IAEvB,CACEJ,MAAO,MACPO,MAAOH,EAAK,OAAQ,IAEtB,CACEJ,MAAO,OACPO,MAAOH,EAAK,QAAS,IAEvB,CACEJ,MAAO,YACPO,MAAOH,EAAK,YAEd,CACEJ,MAAO,SACPO,MAAOH,EAAK,oCAGhBU,SAAU4jN,EACV3jN,SAAU0jN,IAEc,WAAzBA,IACCxxN,EAAAA,GAAAA,IAACgO,EAAAA,EAAM,CAAC9N,UAAU,eAAegO,QAAM,EAACC,QAASgqF,EAAah4F,SAAA,EAC3DsyN,EAAAA,GAAAA,IAAetlN,EAAM6rF,GACrB,KACA59B,EAAAA,GAAAA,IAAWjuD,EAAM6rF,OAGtB54F,EAAAA,GAAAA,GAAA,KAAGF,UAAU,oBAAmBC,SAAEgN,EAAK,uBAEvCqvG,IACAx8G,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,SAAEgN,EAAK,wBACvC/M,EAAAA,GAAAA,GAACsN,GAAAA,EAAU,CACTC,KAAK,eACLC,QAAS,IACJkjN,GAAqBj9M,IAAK6+M,IAAC,CAAQ3lN,MAAO2lN,EAAExlI,WAAY5/E,MAAOolN,KAClE,CACE3lN,MAAO,IACPO,MAAOH,EAAK,YAEd,CACEJ,MAAO,SACPO,MAAOH,EAAK,mCAGhBU,SAAUgkN,EACV/jN,SAAU8jN,IAEa,WAAxBA,IACCxxN,EAAAA,GAAAA,GAAA,SACEF,UAAU,2BACVoB,KAAK,SACL4sB,IAAI,IACJT,IAAI,QACJ1gB,MAAO2kN,EACP7jN,SAAUykN,KAGdlyN,EAAAA,GAAAA,GAAA,KAAGF,UAAU,oBAAmBC,SAAEgN,EAAK,uBAG3C/M,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,SAAO,EACPp4B,QAASqkN,EACTjyM,SAAUuxM,EACVn/M,UAA2BxF,EAAhBgkN,EAAqB,WAAmB,cAAchxN,UAEjEC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,gBAGfvN,EAAAA,GAAAA,GAAC83D,GAAa,CACZnsD,OAAQmsF,EACR5/B,cAAY,EACZE,gBAAc,EACdvsD,QAASmsF,EACTx/B,SAAUqkC,EACV9kC,WAAY6gC,EACZtgC,kBAAmBvrD,EAAK,gBC/FhC,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM,WAAEuvG,IAAehtG,EAAAA,EAAAA,KAAe1N,GAAQk9M,WAAWj+E,SAAS9zH,IAAW,CAAC,GACxE,OAAEwsG,EAAM,UAAEu5G,EAAS,WAAEC,GAAez2G,GAAc,CAAC,EACnD7sG,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,GAGhC,MAAO,CACLwsG,SACAu5G,YACAC,aACAh/L,UANgBtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,KALxBP,CAvIgC8jN,EAClDjmN,SACAwsG,SACAu5G,YACAC,aACAh/L,YACAha,WACA3N,cAEA,MAAM,wBACJ6mN,EAAuB,yBACvBC,EAAwB,SACxBhkL,IACE3iC,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MACP,MACJ4lN,EAAQ,EAAC,WAAEd,EAAU,KAAE7+H,EAAI,QAAE4/H,GAC3B75G,GAAU,CAAC,EACTlwE,EAAakwE,GAAQlwE,YAAsD,KAAvCkwE,EAAOlwE,YAAa9G,EAAAA,GAAAA,OAA0B9V,KAAKC,MACvF46B,GAAciyD,GAAQlwE,YAAc,IAAK9G,EAAAA,GAAAA,MAAmB,EAwElE,OAtEAz3B,EAAAA,EAAAA,IAAU,KACJ0oF,IACFy/H,EAAwB,CAAElmN,SAAQymF,SAClC0/H,EAAyB,CAAEnmN,SAAQymF,WAEpC,CAACzmF,EAAQymF,EAAMy/H,EAAyBC,KAE3C5nM,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KA8DR7L,EAAAA,GAAAA,GAAA,OAAKF,UAAU,8BAA6BC,UAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,EACxCi5G,IACAh5G,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAcC,SAAEgN,EAAK,aAEnCisG,IACCp5G,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAACm3G,GAAAA,EAAS,CAAChqG,MAAO6rG,EAAO7rG,MAAO8lF,KAAM+lB,EAAO/lB,KAAMnzF,UAAU,gBAC5DiL,QAAQ+9B,KACP9oC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAcC,SACxBgnD,EACGh6C,EAAK,eACLA,EAAK,gBAAiB,IAAGslN,EAAAA,GAAAA,IAAetlN,EAAM+7B,OAAekyB,EAAAA,GAAAA,IAAWjuD,EAAM+7B,WAIvF+pL,IACCjzN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,kBAAiBC,SAAEgN,EAAK,qBACrC/M,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPziC,UAAU,6CAEViO,QAASA,IAAM4gC,EAAS,CAAE9uC,GAAIgzN,IAAW9yN,UAEzCC,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CACdloB,OAAQg1L,EACR1tK,QAAQhyB,EAAAA,GAAAA,IAAoBpmB,EAAoB,IAAdisG,EAAO/lF,MAAa,GACtD6R,eAAa,SAvFPguL,MACtB,GAAKP,GAAW5wN,SAAU6wN,GAAY7wN,OACtC,OAAK4wN,GAEH3yN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,kBAAiBC,SAAEwyN,EAAU5wN,OAASoL,EAAK,eAAgB6lN,GAAS7lN,EAAK,kBACtFnN,EAAAA,GAAAA,IAAA,KAAGE,UAAU,eAAcC,SAAA,EACvBwyN,EAAU5wN,SACVmwN,EAAa/kN,EAAK,4BAA6B+kN,EAAac,GAAS7lN,EAAK,mBAE3EwlN,EAAU9+M,IAAKs/M,IACd,MAAMC,GAAW7/L,EAAAA,GAAAA,IAAoBpmB,EAAsB,IAAhBgmN,EAAS9/L,MAAa,GAC3DkyB,EAAS4tK,EAASE,eAAiB,GAAGD,OAAsBjmN,EAAK,qBAAuBimN,EAC9F,OACEhzN,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPziC,UAAU,6CAEViO,QAASA,IAAM4gC,EAAS,CAAE9uC,GAAIkzN,EAASl1L,SAAU99B,UAEjDC,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CACdloB,OAAQk1L,EAASl1L,OACjBsnB,OAAQA,EACRrgB,eAAa,eApBJ9kC,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,KA0FtBsqM,GA5DcI,MACvB,IAAIl6G,GAAQuoG,UAAZ,CACA,IAAKiR,GAAcD,EAAW,OAAOvyN,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,IAC7C,GAAKgqM,GAAY7wN,OACjB,OACE/B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,kBAAiBC,SAAcgN,EAAZymB,EAAiB,oBAA4B,qBAC7ExzB,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAcC,SACxByyN,EAAW/+M,IAAK0/M,IACfnzN,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPziC,UAAU,6CAEViO,QAASA,IAAM4gC,EAAS,CAAE9uC,GAAIszN,EAAUt1L,SAAU99B,UAElDC,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CACdloB,OAAQs1L,EAAUt1L,OAClBsnB,QAAQhyB,EAAAA,GAAAA,IAAoBpmB,EAAuB,IAAjBomN,EAAUlgM,MAAa,GACzD6R,eAAa,WAhBc,GA4D9BouL,cCpHPE,GAAS,IAEf,SAASC,GAAiBC,EAAuBC,GAC/C,MAAQC,YAAaC,EAAeb,MAAOc,EAAU,EAAGzgM,KAAM0gM,GAAWL,GACjEE,YAAaI,EAAehB,MAAOiB,EAAU,EAAG5gM,KAAM6gM,GAAWP,EACzE,OAAIE,GAAiBG,EAAsBtuM,OAAOmuM,GAAiBnuM,OAAOsuM,GACtEF,GAAWG,EAAgBA,EAAUH,EAClCI,EAASH,CAClB,CAEA,MAoUA,IAAeh1N,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM,QAAEwlI,EAAO,eAAE+hF,IAAmBhlN,EAAAA,EAAAA,KAAe1N,GAAQk9M,WAAWj+E,SAAS9zH,IAAW,CAAC,EACrF0C,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,GAGhC,MAAO,CACL8zM,gBAAiBtuE,EACjBgiF,uBAAwBD,EACxB7kN,OACAskB,UANgBtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,KAJxBP,CApU6BslN,EAC/CznN,SACA0C,OACAoxM,kBACA0T,yBACAx6M,WACAga,YACA3nB,UACA20M,qBAEA,MAAM,yBACJ0T,EAAwB,iBACxBvyL,EAAgB,uBAChBsvL,EAAsB,yBACtBkD,EAAwB,iCACxBC,EAAgC,oBAChCC,IACEroN,EAAAA,EAAAA,MAEEe,GAAOyqC,EAAAA,GAAAA,KACPD,GAAUvqC,EAAAA,EAAAA,MAETsnN,EAA6BC,EAA2BC,IAA8Bv1N,EAAAA,EAAAA,MACtFw1N,EAAoBC,EAAkBC,IAAqB11N,EAAAA,EAAAA,MAC3D21N,EAAgBC,IAAqB1oN,EAAAA,EAAAA,OACrC+0M,EAAoBC,EAAkBC,IAAqBniN,EAAAA,EAAAA,MAC3D61N,EAAgBC,IAAqB5oN,EAAAA,EAAAA,OAE5C4e,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAMmpN,GAAuBjtN,EAAAA,EAAAA,IAAQ,KACnC,GAAKu4M,EACL,OAAOA,EACJ95H,KAAK,EAAG19C,gBACPA,GAAeA,GAAa9G,EAAAA,GAAAA,MAAkBizL,GAAAA,GAAsB,MAEvE,CAAC3U,IACEl2M,GAAcC,EAAAA,EAAAA,MACpBuxE,EAAAA,GAAAA,GAAYxxE,EAAa4qN,EAAuB,SAAOnyN,GAEvD,MAAMqyN,GAAmBntN,EAAAA,EAAAA,IAAQ,IAAMmH,IAAQu2J,EAAAA,EAAAA,IAAgBv2J,GAAO,CAACA,IACjEimN,EAAgB7U,GAAiB9qK,KAAK,EAAGg+K,iBAAkBA,GAC3D4B,EAAoBF,EAAmB,GAAGroJ,EAAAA,MAAkBqoJ,IAAqBC,GAAeliI,KAChGoiI,GAAkBttN,EAAAA,EAAAA,IAAQ,KAC9B,MAAMiqI,EAAU9iI,GAAMsqC,YAAc8mK,EAAkBA,GAAiB3iL,OAAO,EAAG61L,kBAAmBA,GACpG,OAAOxhF,GAASvqF,KAAK4rK,KACpB,CAACnkN,GAAMsqC,YAAa8mK,IAOjBgV,GAAe31N,EAAAA,EAAAA,IAAaq5G,IAChC,MAAM,KACJ/lB,EAAI,MAAE9lF,EAAK,gBAAEivG,EAAe,WAAEtzE,EAAU,WAAEgpL,GACxC94G,EACJi4G,EAAuB,CACrBzkN,SACAymF,OACA9lF,QACAivG,kBACAtzE,aACAgpL,aACAvQ,WAAW,KAEZ,CAAC/0M,EAAQykN,IAENsE,GAAc51N,EAAAA,EAAAA,IAAaq5G,IAC/B67G,EAAkB77G,GAClB07G,KACC,CAACA,IAEEl9E,GAAe73I,EAAAA,EAAAA,IAAY,KAC1Bi1N,IACLU,EAAaV,GACbC,OAAkBhyN,GAClB8xN,MACC,CAACA,EAAmBW,EAAcV,IAE/BY,GAAuB71N,EAAAA,EAAAA,IAAY,KACvC6gN,EAAeoB,EAAAA,GAAkB6T,aAChC,CAACjV,IAEEkV,GAAsB/1N,EAAAA,EAAAA,IAAY,KAClCw1N,GACFI,EAAYJ,IAEb,CAACI,EAAaJ,IAEXQ,GAAyBh2N,EAAAA,EAAAA,IAAY,KACzCy0N,EAAiC,CAAE5nN,WACnCgoN,KACC,CAAChoN,EAAQgoN,EAA4BJ,IAElCwB,GAAiBj2N,EAAAA,EAAAA,IAAaq5G,IAClCq7G,EAAoB,CAAE7nN,SAAQwsG,WAC9BwnG,EAAeoB,EAAAA,GAAkBiU,aAChC,CAACrpN,EAAQg0M,EAAgB6T,IAEtByB,GAAen2N,EAAAA,EAAAA,IAAaq5G,IAChCm7G,EAAyB,CAAE3nN,SAAQymF,KAAM+lB,EAAO/lB,QAC/C,CAACzmF,EAAQ2nN,IAEN4B,GAAcp2N,EAAAA,EAAAA,IAAaq5G,IAC/B+7G,EAAkB/7G,GAClBmoG,KACC,CAACA,IAEE1qF,GAAe92H,EAAAA,EAAAA,IAAY,KAC1Bm1N,IACLgB,EAAahB,GACbC,OAAkBlyN,GAClBu+M,MACC,CAACA,EAAmB0U,EAAchB,IAE/BkB,IAAWr2N,EAAAA,EAAAA,IAAaszF,KAC5B0sC,EAAAA,GAAAA,IAAoB1sC,GACpBtxD,EAAiB,CACf/gC,QAAS22C,EAAQ,iBAElB,CAACA,EAAS5V,IAEPs0L,GAAoBj9G,IACxB,MAAM,MACJ45G,EAAQ,EAAC,WAAEd,EAAU,WAAEhpL,EAAU,YAAE0qL,EAAW,UAAE0C,EAAS,UAAE3U,GACzDvoG,EACJ,IAAIlkG,EAAO,GASX,GAPEA,GADGysM,GAAauQ,GAAcc,EAAQd,EAC/Bv6K,EAAQ,UAAWu6K,EAAac,GAC9BA,EACFr7K,EAAQ,eAAgBq7K,GAExBr7K,EAAQ,eAGbgqK,EAEF,OADAzsM,GAAQ,IAAIs+M,MAAU77K,EAAQ,aACvBziC,EAOT,GAJIohN,IACFphN,GAAQ,IAAIs+M,MAAU77K,EAAQ,eAAgB2+K,WAG7BrzN,IAAfivN,GAA4Bc,IAAUd,EACxCh9M,GAAQ,IAAIs+M,MAAU77K,EAAQ,2BACzB,GAAIzO,EAAY,CACrB,MAAMsV,EAAOtV,GAAa9G,EAAAA,GAAAA,MAC1BltB,GAAQ,IAAIs+M,MAEVt+M,GADEspC,EAAO,EACD7G,EAAQ,wBAAwB4+K,EAAAA,GAAAA,IAAgBppN,EAAMqxC,IAEtD7G,EAAQ,qBAEpB,MAAWi8K,IACT1+M,GAAQ,IAAIs+M,MAAU77K,EAAQ,gBAGhC,OAAOziC,GAGHshN,GAAsBp9G,IAC1B,MAAM,MACJ45G,EAAQ,EAAC,WAAEd,EAAU,UAAEvQ,EAAS,WAAEz4K,GAChCkwE,EACJ,OAAIuoG,EACK,wBAELuQ,GAAcc,EAAQd,EACjB,yBAELhpL,GAC4C,KAAhCA,GAAa9G,EAAAA,GAAAA,QACf,EACH,uBAGJ,yBAGHq0L,GAAyBr9G,IAC7B,MAAM3yE,EAAmC,GA8BzC,OA7BAA,EAAQrzB,KAAK,CACX7F,MAAOoqC,EAAQ,QACftkC,KAAM,OACN8xC,QAASA,IAAMixK,GAASh9G,EAAO/lB,QAG5B+lB,EAAOw6G,aAAgBx6G,EAAOuoG,WACjCl7K,EAAQrzB,KAAK,CACX7F,MAAOoqC,EAAQ,QACftkC,KAAM,OACN8xC,QAASA,IAjJKi0D,KAClBk7G,EAAyB,CAAE1nN,SAAQwsG,WACnCwnG,EAAeoB,EAAAA,GAAkB6T,aA+Ida,CAAWt9G,KAIzBA,EAAOuoG,UAQVl7K,EAAQrzB,KAAK,CACX7F,MAAOoqC,EAAQ,cACftkC,KAAM,SACN8xC,QAASA,IAAMgxK,EAAY/8G,GAC3B3lG,aAAa,IAXfgzB,EAAQrzB,KAAK,CACX7F,MAAOoqC,EAAQ,gBACftkC,KAAM,SACN8xC,QAASA,IAAMwwK,EAAYv8G,GAC3B3lG,aAAa,IAUVgzB,GAGT,OACEzmC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2BAA0BC,SAAA,EACvCH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,EAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAC6nG,GAAAA,EAAuB,CACtBznG,OAAQC,GAAAA,EAAek2N,OACvBr2N,KAAMs2N,EAAAA,IACN12N,UAAU,kBAEZE,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAcC,SAAcw3C,EAAZ/jB,EAAoB,yBAAoC,wBAEtF4hM,IACCp1N,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAASC,UACtBC,EAAAA,GAAAA,GAACm3G,GAAAA,EAAS,CACRr3G,UAAU,iBACVmzF,KAAMmiI,EACNj9E,WAAS,EACTC,SAAWlpI,GAAMu4I,eAAkC5kJ,EAAtB6yN,EAC7BvoN,MAAyBoqC,EAAlBroC,GAAMu4I,UAAoB,aAAwB,wCAI/D7nJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAAU07K,eAAa,EAAAz7K,SAAA,EACpCC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAACtvB,KAAK,MAAMo2M,kBAAgB,EAAcvpN,UAAU,cAAciO,QAASynN,EAAqBz1N,SACtGw3C,EAAQ,kBAD+B,YAGvC89K,IAAoBA,EAAgB1zN,UAAW3B,EAAAA,GAAAA,GAACkhI,GAAAA,EAAY,CAACpsH,KAAK,kBAAqB,WACzFugN,GAAiB5hN,IAAKulG,IACrBp5G,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPG,aAAa1iC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,OAAOzN,UAAW,oBAAoBs2N,GAAmBp9G,OACjF2I,cAAc,OACdn/E,WAAS,EAETz0B,QAASA,IAAM6nN,EAAe58G,GAC9Bt0D,eAAgB2xK,GAAsBr9G,GAAQj5G,SAAA,EAG9CC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,qBAAoBC,SAAEi5G,EAAO7rG,OAAS6rG,EAAO/lB,QAC7DjzF,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWuW,IAAI,OAAMtW,SAClCk2N,GAAiBj9G,OAJfA,EAAO/lB,QAQhBjzF,EAAAA,GAAAA,GAAA,KAAGF,UAAU,oBAAmBC,SAAmBw3C,EAAQ,wBAAtB,iBAEtCy8K,GAA0BjpN,QAAQipN,EAAuBryN,UACxD/B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAAU07K,eAAa,EAAAz7K,SAAA,EACpCC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAcC,SAAcw3C,EAAQ,iBAAjB,UAChCv3C,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPtvB,KAAK,SACLI,aAAW,EAEXtF,QAASwmN,EAA0Bx0N,UAEnCC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEw3C,EAAQ,4BAH7B,UAKLy8K,GAAwBvgN,IAAKulG,IAC5Bp5G,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPG,aAAa1iC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,OAAOzN,UAAW,oBAAoBs2N,GAAmBp9G,OACjF2I,cAAc,OACdn/E,WAAS,EAETz0B,QAASA,IAAM6nN,EAAe58G,GAC9Bt0D,eAAgB2xK,GAAsBr9G,GAAQj5G,SAAA,EAG9CC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEi5G,EAAO7rG,OAAS6rG,EAAO/lB,QAChDjzF,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWuW,IAAI,OAAMtW,SAClCk2N,GAAiBj9G,OAJfA,EAAO/lB,cAWtBjzF,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQ2oN,EACRzoN,QAAS2oN,EACTrnN,MAAOoqC,EAAQ,yBACfziC,KAAMyiC,EAAQ,4BACd/T,sBAAoB,EACpBF,aAAciU,EAAQ,aACtBhU,eAAgBoyL,KAElB31N,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQ8oN,EACR5oN,QAAS8oN,EACTxnN,MAAOoqC,EAAQ,cACfziC,KAAMyiC,EAAQ,eACd/T,sBAAoB,EACpBF,aAAciU,EAAQ,gBACtBhU,eAAgBi0G,KAElBx3I,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQu1M,EACRr1M,QAASu1M,EACTj0M,MAAOoqC,EAAQ,cACfziC,KAAMyiC,EAAQ,kBACd/T,sBAAoB,EACpBF,aAAciU,EAAQ,UACtBhU,eAAgBkzF,UC3RxB,IAAe93H,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUw8B,aAGF,CACLsW,MAHWC,EAAAA,EAAAA,KAAW/yC,EAAQw8B,KAFhBlvB,CA3D2B8nN,EAC7C54L,SACArxB,SACAwvG,QACA/oF,OACAO,YACA2gB,WAEA,MAAM,SAAExF,EAAQ,oBAAE+nL,IAAwB1qN,EAAAA,EAAAA,MAEpCmK,GAAiBwgN,EAAAA,GAAAA,GAAuB,eACxC5pN,GAAOC,EAAAA,EAAAA,KAEP83C,GAAWjb,EAAAA,EAAAA,IAAgBsK,GAC3ByiL,EAAuC,KAA1B3jM,GAAO+O,EAAAA,GAAAA,OAA0B9V,KAAKC,MAEnD0qM,GAAaC,EAAAA,GAAAA,IAAQ,IAAI5qM,KAAK0qM,KAChC57J,EAAAA,GAAAA,IAAWjuD,EAAM6pN,IAAaG,EAAAA,GAAAA,IAAgBhqN,EAAM6pN,GAAW,GAAM,GAAO,GAM1EI,GAAsBr3N,EAAAA,EAAAA,IAAY,KACtC+2N,EAAoB,CAAElqN,SAAQqxB,SAAQo5L,YAAY,KACjD,CAACzqN,EAAQkqN,EAAqB74L,IAE3Bq5L,GAAsBv3N,EAAAA,EAAAA,IAAY,KACtC+2N,EAAoB,CAAElqN,SAAQqxB,SAAQo5L,YAAY,KACjD,CAACzqN,EAAQkqN,EAAqB74L,IAEjC,OACEj+B,EAAAA,GAAAA,IAAA,OAAKE,UAAWqW,EAAe,KAAKpW,SAAA,EAClCH,EAAAA,GAAAA,IAAA,OAAKE,UAAWqW,EAAe,OAAOpW,SAAA,EACpCH,EAAAA,GAAAA,IAAA,OAAKE,UAAWqW,EAAe,QAASpI,QAftBopN,KACtBxoL,EAAS,CAAE9uC,GAAIg+B,KAcsD99B,SAAA,EAC/DC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CAEL5zB,KAAK,SACL6zB,KAAMogB,GAFDtW,IAIPj+B,EAAAA,GAAAA,IAAA,OAAKE,UAAWqW,EAAe,aAAapW,SAAA,EAC1CC,EAAAA,GAAAA,GAAA,OAAKF,UAAWqW,EAAe,aAAapW,SAAE+kD,KAC9C9kD,EAAAA,GAAAA,GAAA,OAAKF,UAAWqW,EAAe,iBAAiBpW,SAAEi8G,WAGtDh8G,EAAAA,GAAAA,GAAA,OAAKF,UAAWqW,EAAe,QAAQpW,SAAE82N,QAE3Cj3N,EAAAA,GAAAA,IAAA,OAAKE,UAAWqW,EAAe,WAAWpW,SAAA,EACxCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC9N,UAAWqW,EAAe,UAAWpI,QAASipN,EAAoBj3N,SAC3DgN,EAAZymB,EAAiB,sBAA8B,wBAElDxzB,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC9N,UAAWqW,EAAe,UAAWrI,QAAM,EAACC,QAASmpN,EAAoBn3N,SAC9EgN,EAAK,6BC2ChB,IAAepO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM0C,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,GAEhC,MAAO,CACL0C,OACAskB,UAAWtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,KANnBP,CA7FkCyoN,EACpDloN,OACA1C,SACAgN,WACAga,YACA3nB,cAEA,MAAM,wBAAEwrN,EAAuB,qBAAEvW,IAAyB90M,EAAAA,EAAAA,OACnDsrN,EAAuBC,EAAqBC,IAAwBv4N,EAAAA,EAAAA,MACpEw4N,EAAuBC,EAAqBC,IAAwB14N,EAAAA,EAAAA,KAErE8N,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGVtB,EAAAA,EAAAA,IAAU,KACH2E,GAAMq0M,eAAiB70M,EAAAA,EAAAA,IAASlC,IACnCs0M,EAAqB,CAAEt0M,YAExB,CAAC0C,EAAM1C,EAAQs0M,IAElB,MAAM8W,GAA0Bj4N,EAAAA,EAAAA,IAAY,KAC1C03N,EAAwB,CAAE7qN,SAAQyqN,YAAY,IAC9CO,KACC,CAACH,EAAyB7qN,EAAQgrN,IAE/BK,GAA0Bl4N,EAAAA,EAAAA,IAAY,KAC1C03N,EAAwB,CAAE7qN,SAAQyqN,YAAY,IAC9CU,KACC,CAACN,EAAyB7qN,EAAQmrN,IAErC,OACE/3N,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gCAA+BC,SAAA,EAC5CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAC6nG,GAAAA,EAAuB,CACtBznG,OAAQC,GAAAA,EAAeo2N,YACvBv2N,KAAM43N,EAAAA,IACNh4N,UAAU,iBAEXiL,QAAQmE,GAAMq0M,cAAc5hN,UAC3B/B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC9N,UAAU,qBAAqBiO,QAASwpN,EAAoBx3N,SAAC,gBACrEC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC9N,UAAU,qBAAqBiO,QAAS2pN,EAAqB5pN,QAAM,EAAA/N,SAAC,uBAIlFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAAU07K,eAAa,EAAAz7K,SAAA,EACpCC,EAAAA,GAAAA,GAAA,KAAAD,SACImP,GAAMq0M,aAAiCr0M,EAAKq0M,aAAa5hN,OACvDoL,EAAK,eAAgBmC,EAAKq0M,aAAa5hN,QAAUoL,EAAK,oBADnCA,EAAK,YADvB,UAILmC,GAAMq0M,eACNvjN,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,GAAK,WAEiB,IAA/BtZ,GAAMq0M,cAAc5hN,SACnB3B,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAcC,SACZgN,EAAZymB,EAAiB,iCAAyC,gCAD7B,SAIjCtkB,GAAMq0M,cAAc9vM,IAAI,EAAGoqB,SAAQm+E,QAAO/oF,WACzCjzB,EAAAA,GAAAA,GAACy2N,GAAW,CACV54L,OAAQA,EACRm+E,MAAOA,EACP/oF,KAAMA,EACNO,UAAWA,EACXhnB,OAAQA,GACHqxB,WAKb79B,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQ2rN,EACRzrN,QAAS2rN,EACTrqN,MAAM,uBACN2H,KAAK,gDACLyuB,eAAgBq0L,KAElB53N,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQ8rN,EACR5rN,QAAS8rN,EACTxqN,MAAM,uBACN2H,KAAK,gDACLyuB,eAAgBs0L,UCmJxB,IAAel5N,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MAAM0C,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,IAC1B,mBAAE2iL,GAAuB9tL,EAAO6yC,UAEhC4c,GAAeC,EAAAA,EAAAA,KAAmB1vD,EAAQmL,GAC1C6iL,EAAiBv+H,GAAcu+H,gBAAkBF,EACjD37J,GAAYC,EAAAA,EAAAA,IAAcvkB,GAEhC,MAAO,CACLkgL,iBAAkBt+H,GAAcs+H,iBAChCnrI,mBAAoB5iD,EAAO6iD,UAAUD,mBACrC/0C,OACAigL,qBACAE,iBACA77J,cAGJ,CAACnyB,GAAUmL,YACFzB,SAAQspC,EAAAA,EAAAA,KAAWhzC,EAAQmL,IAnBlBmC,CAlO+BopN,EACjD9zK,qBACAmrI,mBACAlgL,OACAsK,WACA3N,UACAsjL,qBACAE,iBACA77J,gBAEA,MAAM,wBAAEwkM,IAA4BhsN,EAAAA,EAAAA,MAE9Be,GAAOC,EAAAA,EAAAA,MACNwjI,EAAWC,IAAgBtkI,EAAAA,EAAAA,KAAS,IACpCwoB,EAAWm3F,IAAgB3/G,EAAAA,EAAAA,KAAS,IACpC8rN,EAAuBC,IAA4B/rN,EAAAA,EAAAA,IAAuCijL,IAE1F+oC,EAAqBC,IAA0BjsN,EAAAA,EAAAA,IAASkjL,IAE/DtkK,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAMwsN,GAAmBtwN,EAAAA,EAAAA,IAAQ,IAAM,CAAC,CACtC4E,MAAO,MACPO,MAAOH,EAAK,iBACX,CACDJ,MAAO,OACPO,MAAOH,EAAK,kBACX,CACDJ,MAAO,OACPO,MAAOH,EAAK,iBACV,CAACA,IAECurN,GAAsB34N,EAAAA,EAAAA,IAAY,KACjCuP,IACL48G,GAAa,GAEbksG,EAAwB,CACtBxrN,OAAQ0C,EAAKrP,GACbuvL,iBAAkB6oC,EAClB5oC,eAAgB8oC,MAEjB,CAACjpN,EAAM+oN,EAAuBD,EAAyBG,KAE1D5tN,EAAAA,EAAAA,IAAU,KACRuhH,GAAa,GACb2kB,GAAa,GACbynF,EAAyB9oC,GACzBgpC,EAAuB/oC,IACtB,CAACD,EAAkBC,IAEtB,MAAMkpC,GAA2BxwN,EAAAA,EAAAA,IAC/B,IAAMk8C,GAAoBtmB,OAAO,EAAGqyE,iBAAkBA,GACtD,CAAC/rD,KAGH15C,EAAAA,EAAAA,IAAU,KACR,QAA4B1H,IAAxBs1N,GAAqCA,IAAwB9oC,EAAjE,CAKA,GAAoC,SAAhC4oC,GAAuB/2N,MAC8B,QAA3BkuL,GAAkBluL,MAA6C,SAA3BkuL,GAAkBluL,MAEd,IAAzC+2N,EAAsBpoC,QAAQluL,OAEvD,YADA8uI,GAAa,GAKjB,GAAIwnF,GAAuB/2N,OAASkuL,GAAkBluL,KAAtD,CAKA,GAAoC,SAAhC+2N,GAAuB/2N,MAA8C,SAA3BkuL,GAAkBluL,KAAiB,CAC/E,MAAMs3N,EAAwBP,EAAsBpoC,QAC9C4oC,EAA0BrpC,GAAkBS,QAElD,GAAI2oC,EAAsB72N,SAAW82N,EAAwB92N,QACxD62N,EAAsBrwI,UAAU3B,KAChCkyI,IAAmBD,EAAwBjjL,KACzCmjL,IAAoBlmL,EAAAA,EAAAA,IAAeimL,EAAeC,KAIvD,YADAloF,GAAa,EAGjB,CAEAA,GAAa,EAjBb,MAFEA,GAAa,EAZf,MAFEA,GAAa,IAkCd,CACD0nF,EACA9oC,EACA4oC,EACA7oC,IAGF,MAAMwpC,GAA8Bj5N,EAAAA,EAAAA,IAAagN,IACjC,QAAVA,GACFurN,EAAyB,CAAEh3N,KAAM,QACjCk3N,EAAuB/oC,IACJ,SAAV1iL,GACTurN,EAAyB,CACvBh3N,KAAM,OACN2uL,QAAoC,SAA3BT,GAAkBluL,KAAkBkuL,EAAiBS,QAAU,KAE1EuoC,EAAuB/oC,KAEvB6oC,OAAyBr1N,GACzBu1N,OAAuBv1N,KAExB,CAACusL,EAAkBC,IAEhBwpC,GAAuBl5N,EAAAA,EAAAA,IAAakN,IACxC,IAAKqC,IAASqpN,EAA0B,OAExC,MAAM,KAAEhrN,EAAI,QAAE27B,GAAYr8B,EAAE6X,cAC5B,GAAoC,SAAhCuzM,GAAuB/2N,KAAiB,CAC1C,MAAMkyC,EAAW,CAAEg4H,SAAU79J,GAE3B2qN,EADEhvL,EACuB,CACvBhoC,KAAM,OACN2uL,QAAS,IAAIooC,EAAsBpoC,QAASz8I,IAGrB,CACvBlyC,KAAM,OACN2uL,QAASooC,EAAsBpoC,QAAQlyJ,OAAQm7L,KAAWrmL,EAAAA,EAAAA,IAAeqmL,EAAO1lL,KAGtF,GACC,CAACmlL,EAA0BrpN,EAAM+oN,IAE9Bc,GAA6Bp5N,EAAAA,EAAAA,IAAagN,IAC9CyrN,EAAuBzrN,IACtB,IAEGqsN,GAA+Br5N,EAAAA,EAAAA,IAAagN,GACzCI,EAAK,0CAA2CJ,GACtD,CAACI,IAEEksN,EAA2BzlM,IACK,QAAhCykM,GAAuB/2N,MAAkD,SAAhC+2N,GAAuB/2N,MAEtE,OACEtB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAYC,SAAA,EACzBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,CACzCgL,QAAQotN,GAAuBc,KAC9Br5N,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAiBC,SAC5BgN,EAAK,6BAER/M,EAAAA,GAAAA,GAAC4f,GAAAA,EAAW,CACVkO,IAAK,EACLT,IAAK8hK,EACLxiL,MAAOwrN,EACP1qN,SAAUsrN,EACVxyE,YAAayyE,EACbE,kBAAgB,KAElBl5N,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAgCC,SAC1CgN,EAAK,wCAIZnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAiBC,SAC5BgN,EAAK,yBAER/M,EAAAA,GAAAA,GAACsN,GAAAA,EAAU,CACTI,SAAUuqN,GAAuB/2N,MAAQ,OACzCqM,KAAK,YACLC,QAAS6qN,EACT5qN,SAAUmrN,KAEZh5N,EAAAA,GAAAA,IAAA,KAAGE,UAAU,iCAAgCC,SAAA,CACV,QAAhCk4N,GAAuB/2N,MAAkB6L,EAAK,0BACd,SAAhCkrN,GAAuB/2N,MAAmB6L,EAAK,4BAC9CkrN,GAAyBlrN,EAAK,8BAGH,SAAhCkrN,GAAuB/2N,OACtBtB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAiBC,SAC5BgN,EAAK,4BAEPwrN,GAA0B9kN,IAAI,EAAG2/B,WAAUjmC,YAC1CnN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACPrpD,KAAM6lC,EAASg4H,SACfliI,QAAS+uL,GAAuBpoC,QAAQrpG,KAAMtJ,IAAMzqC,EAAAA,EAAAA,IAAeW,EAAU8pC,IAC7EhwE,OACEtN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,WAAUC,SAAA,EACvBC,EAAAA,GAAAA,GAACylD,GAAAA,EAAmB,CAACrS,SAAUA,EAAU6Q,mBAAoBA,IAC5D92C,KAGLkrG,UAAQ,EACR5qG,SAAUorN,cAQtB74N,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAASqqG,EACTziI,QAASuqN,EACT/lN,UAAWxF,EAAK,QAChBoT,SAAUwU,EAAU50B,SAEnB40B,GACC30B,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf7N,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,kBC/Mf48I,GAA2B,4BAwPjC,IAAexrJ,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUw8B,aACT,MAAMsW,GAAOC,EAAAA,EAAAA,KAAW/yC,EAAQw8B,GAC1B3uB,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQw8B,GAC1ByW,GAAeC,EAAAA,EAAAA,KAAmBlzC,EAAQw8B,IAC1C,SAAEjqB,IAAa7E,EAAAA,EAAAA,KAAe1N,GAAQk9M,WACtCngM,EAAUlP,IAAQ8yH,EAAAA,GAAAA,IAAe9yH,GAAM+yH,EAAAA,EAAAA,KAAqB5gI,IAAS6gI,EAAAA,EAAAA,KAAsB7gI,EAAQ6N,EAAKrP,KACxGmzB,EAAgBshB,GAActhB,cAGpC,MAAO,CACLmhB,OAAMvgC,WAAUwK,UAAS4U,gBAAemmM,iBAHjB7kL,GAAcuvH,cAAgBvvH,GAAcxhB,gBARrDnkB,CAtP0ByqN,EAC5Cv7L,SACAsW,OACAvgC,WACAwK,UACAvS,UACA2N,WACAwZ,gBACAmmM,uBAEA,MAAM,cACJ18J,EAAa,cACblY,EAAa,gBACbm8J,EAAe,0BACfhC,EAAyB,qBACzBl8E,IACEx2H,EAAAA,EAAAA,OAEGk1M,EAAoBC,EAAkBC,IAAqBniN,EAAAA,EAAAA,MAC3Do6N,EAAgCC,EAA8BC,IAAiCt6N,EAAAA,EAAAA,MAC/FmsJ,EAAwBouE,EAA0BC,IAA8Bx6N,EAAAA,EAAAA,MAChFssC,EAAO+/G,IAAYn/I,EAAAA,EAAAA,OACnButN,EAAwBC,EAA0BC,IAA8B36N,EAAAA,EAAAA,KACjF8N,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAM0+I,EAAmBp2G,GAAQA,EAAK4oB,WAAmB,GACnDytF,EAAkBr2G,GAAQA,EAAK8oB,UAAkB,IAEhDF,EAAWC,IAAgB7wD,EAAAA,EAAAA,IAASo+I,IACpCttF,EAAUC,IAAe/wD,EAAAA,EAAAA,IAASq+I,IAClCqvE,EAAwBC,IAA6B3tN,EAAAA,EAAAA,KAAUiS,IAEtE7T,EAAAA,EAAAA,IAAU,KACRuvN,GAA2B17M,IAC1B,CAACA,KAEJ7T,EAAAA,EAAAA,IAAU,KACRkvN,IACAG,IACAxY,KACC,CAACA,EAAmBvjL,KAEvBtzB,EAAAA,EAAAA,IAAU,KACRyyD,EAAautF,GACbrtF,EAAYstF,IACX,CAACD,EAAkBC,EAAiBr2G,KAEvC5pC,EAAAA,EAAAA,IAAU,KACJqJ,IAAawrM,EAAAA,GAAmBnzD,WAClCwtE,IACAnuE,OAASzoJ,GACTu+M,MAED,CAACA,EAAmBxtM,IAEvB,MAAM8pD,GAAwB/9D,EAAAA,EAAAA,IAAakN,IACzCmwD,EAAanwD,EAAEC,OAAOH,OACtB6sN,IAEIjuL,IAAU4+G,IACZmB,OAASzoJ,IAEV,CAAC0oC,IAEEsyB,GAAuBl+D,EAAAA,EAAAA,IAAakN,IACxCqwD,EAAYrwD,EAAEC,OAAOH,OACrB6sN,KACC,IAEGO,GAA2Bp6N,EAAAA,EAAAA,IAAakN,IAC5CitN,EAA0BjtN,EAAEC,OAAOo8B,SACnCywL,IACAH,KACC,IAEGntE,GAAoB1sJ,EAAAA,EAAAA,IAAY,KACpC,MAAM2sJ,EAAmBvvF,EAAUwQ,OAC7Bg/E,EAAkBtvF,EAASsQ,OAE5B++E,EAAiB3qJ,QAKtB86D,EAAc,CACZ5+B,SACAk/B,UAAWuvF,EACXrvF,SAAUsvF,IAGRmtE,GACFl3F,EAAqB,CACnBh2H,OAAQqxB,EAAQ4lG,WAAYo2F,EAAyBn2F,EAAAA,IAAmB01C,EAAAA,OAZ1E9tB,EAASnB,KAeV,CAACptF,EAAW88J,EAAwBH,EAAwBz8J,EAAUp/B,IAEnEm8L,GAAsBr6N,EAAAA,EAAAA,IAAY,KACtC4kD,EAAc,CAAE1mB,WAChBujL,IACAV,KACC,CAACU,EAAmBV,EAAiBn8J,EAAe1mB,IAEjDi/B,GAAWzzD,EAAAA,EAAAA,MACXq2M,GAAer2M,EAAAA,EAAAA,KAAO,GAEtB4wN,GAAqBt6N,EAAAA,EAAAA,IAAY,KACrCm9D,EAAStzD,SAASm+J,QAClB+3C,EAAal2M,SAAU,GACtB,IAEG0wN,GAAyBv6N,EAAAA,EAAAA,IAAY,KACzCm9D,EAAStzD,SAASm+J,QAClB+3C,EAAal2M,SAAU,GACtB,IAEG2wN,IAA4Bx6N,EAAAA,EAAAA,IAAY,KAC5C45N,IACAC,IACA9a,EAA0B,CAAE7gL,YAC3B,CAAC07L,EAA+B7a,EAA2B7gL,IAExD8hL,IAAqBhgN,EAAAA,EAAAA,IAAa+tJ,IACtC8rE,IACA9a,EAA0B,CAAE7gL,SAAQ6vH,OAAMkyD,UAAWF,EAAal2M,WACjE,CAACk1M,EAA2B7gL,IAE/B,IAAKsW,EACH,OAGF,MAAMimL,KAAuBnkI,EAAAA,EAAAA,IAAU9hD,IAASA,EAAKt0C,KAAO6qK,EAAAA,IACtD/1I,GAAY/gB,IAAawrM,EAAAA,GAAmBvzD,WAElD,OACEjsJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAYC,SAAA,EACzBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CACdloB,OAAQsW,EAAKt0C,GACb68H,WAAW,QACXz2E,kBAAgB,EAChBo0K,eAAa,EACbC,cAAY,KAEd16N,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACR9N,GAAG,kBACHqN,MAAOH,EAAK,iCACZU,SAAUiwD,EACV/wD,MAAOowD,EACPxxB,MAAOA,IAAU4+G,GAA2B5+G,OAAQ1oC,KAEtD7C,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACR9N,GAAG,iBACHqN,MAAOH,EAAK,gCACZU,SAAUowD,EACVlxD,MAAOswD,QAGXj9D,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1tB,QAAS2wL,EACT3sN,MAAOH,EAAK,iBACZ+tF,SAAU/tF,EAAK8sN,EACX,gCACA,kCACJpsN,SAAUssN,SAIfK,KACCx6N,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAACtvB,KAAK,aAAa0M,QAAM,EAAC5R,QAASksN,EAAmBl6N,UAC7DC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,qBAAoBC,SAAEgN,EAAK,wBAAyBonC,EAAK4oB,gBAE3E/8D,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAACtvB,KAAK,aAAa0M,QAAM,EAAC5R,QAASmsN,EAAuBn6N,UACjEC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,qBAAoBC,SAAEgN,EAAK,0BAA2BonC,EAAK4oB,eAE5E/pC,IACChzB,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CACPG,aACE1iC,EAAAA,GAAAA,GAAC8zB,GAAAA,EAAM,CACL9xB,MAAOm3N,EACPoB,iBAAe,EACfxmM,KAAMogB,EACNj0C,KAAK,OACLJ,UAAU,mBAGd6f,QAAM,EACN5R,QAASurN,EAA6Bv5N,SAErCgN,EAAK,gCAGV/M,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAeuW,IAAI,OAAMtW,SAAEgN,EAAK,2BAA4BonC,EAAK4oB,iBAGlF/8D,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAASC,UACtBC,EAAAA,GAAAA,GAACuiC,GAAAA,EAAQ,CAACtvB,KAAK,SAAS0M,QAAM,EAACtM,aAAW,EAACtF,QAASozM,EAAiBphN,SAClEgN,EAAK,yBAIZ/M,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAASilH,EACTr9I,QAASs+I,EACTlsI,SAAUwU,GACVpiB,UAAWxF,EAAK,QAAQhN,SAEvB40B,IACC30B,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf7N,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAGfvN,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQu1M,EACRr1M,QAASu1M,EACTtsM,KAAM/H,EAAK,2BACXu2B,aAAcv2B,EAAK,iBACnBw2B,eAAgBy2L,EAChBx2L,sBAAoB,KAEtBxjC,EAAAA,GAAAA,GAACqjC,GAAAA,EAAa,CACZ13B,OAAQ0tN,EACRxtN,QAAS0tN,EACTzkN,KAAM/H,EAAK,oCAAqConC,EAAK4oB,WACrDz5B,aAAcv2B,EAAK,SACnBw2B,eAAgB42L,GAChB32L,sBAAoB,KAEtBxjC,EAAAA,GAAAA,GAAC4nK,GAAAA,EAAY,CACXn6J,SAAUkyM,GACV7iJ,SAAUA,UCvKlB,IAAen+D,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,aACT,MACEoH,SAAU49J,EACVjmI,MAAOkmI,IACL1iK,EAAAA,EAAAA,KAAe1N,GAAQqwK,cAAgB,CAAC,EAG5C,MAAO,CACLxiK,MAHWmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,GAI9BglK,mBACAC,kBAXc9iK,CA7FkCu6M,EACpDh6M,OACArD,UACA2N,WACAg4J,mBACAC,oBAEA,MAAM,cAAEK,IAAkB9lK,EAAAA,EAAAA,MACpBe,GAAOyqC,EAAAA,GAAAA,MAEbzsB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAOsB,EAAO4kK,IAAY5lK,EAAAA,EAAAA,IAASY,EAAK,yBAA0B,CAAEQ,KAAM2B,GAAM/B,UACzEnL,EAAOupJ,IAAYp/I,EAAAA,EAAAA,OACnBo/B,EAAO+/G,IAAYn/I,EAAAA,EAAAA,MAEpBwoB,EAAY68I,IAAqBW,EAAAA,GAAqBtmB,WAEtDymB,GAAoB/lK,EAAAA,EAAAA,GAAiBM,IACzC,MAAM,MAAEF,GAAUE,EAAE6X,cACd83E,EAAW7vF,EAAM6tN,YAEvBzoD,EAASv1E,GAELA,IAAa7vF,IACfE,EAAE6X,cAAc/X,MAAQ6vF,KAItBi2E,EAAiBhB,GAAiB1kK,EAAK,4BAC3Cw+B,IAAUx+B,EAAK,2BAA6Bw+B,IAAUx+B,EAAK,6BACvDw+B,OACA1oC,GAGA0vK,GAAoBhmK,EAAAA,EAAAA,GAAgB,KACnCY,EAAMxL,OAINuN,GAEL4iK,EAAc,CACZ2oD,oBAAqBvrN,EAAKrP,GAC1BsN,QACAnL,QACAitH,cAAc,IATdq8B,EAASv+I,EAAK,6BAalB,OACE/M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,aAAYC,UACzBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,8BAA6BC,UAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,uBAAsBC,SAAA,EACnCC,EAAAA,GAAAA,GAACysJ,GAAAA,EAAc,CACbh/I,SAAU89I,EACVp+I,MAAOJ,EAAK,eAEd/M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRhB,MAAOQ,EACPM,SAAU6kK,EACVplK,MAAOH,EAAK,aACZw+B,MAAOA,IAAUx+B,EAAK,2BACjBw+B,IAAUx+B,EAAK,6BAA+Bw+B,OAAQ1oC,IAG5D4vK,IACCzyK,EAAAA,GAAAA,GAAA,KAAGF,UAAU,QAAOC,SAAE0yK,QAI1BzyK,EAAAA,GAAAA,GAACkmC,GAAAA,EAAoB,CACnBC,QAA0B,IAAjBh5B,EAAMxL,OACfoM,QAASwkK,EACTpyJ,SAAUwU,EACVpiB,UAAWxF,EAAK,yBAAyBhN,SAExC40B,GACC30B,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf7N,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,4BCkLzB,IAAe5O,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IAGQ,CACLq5N,gBAHqBC,EAAAA,EAAAA,KAA4Bt5N,KAFnCsN,CA7P0BisN,EAC5CpuN,SACA+rI,gBACA43E,uBACA7E,0BACA9K,iBACAiD,qBACA53M,UACA2N,WACAkhN,qBAEA,OAAQniF,GACN,KAAKqpE,EAAAA,GAAkBiH,QACrB,OAAQ6R,GACN,IAAK,MACH,OACE16N,EAAAA,GAAAA,GAACw+M,GAAS,CAER3gL,OAAQrxB,EACRX,QAASA,EACT2N,SAAUA,GAHLhN,GAMX,IAAK,OACH,OACExM,EAAAA,GAAAA,GAACo5N,GAAU,CAETv7L,OAAQrxB,EACRX,QAASA,EACT2N,SAAUA,GAHLhN,GAMX,IAAK,QACH,OACExM,EAAAA,GAAAA,GAACiqN,GAAW,CAEVz9M,OAAQA,EACRg0M,eAAgBA,EAChB30M,QAASA,EACT2N,SAAUA,GAAY,CACpBooM,EAAAA,GAAkBC,gBAClBD,EAAAA,GAAkBG,WAClBH,EAAAA,GAAkB8I,iBAClB9I,EAAAA,GAAkBO,mBAClBP,EAAAA,GAAkBmN,kBAClBnN,EAAAA,GAAkBqN,2BAClBrN,EAAAA,GAAkBuN,qBAClBvN,EAAAA,GAAkB0C,gBAClB1C,EAAAA,GAAkBsM,mBAClBtM,EAAAA,GAAkBiZ,oBAClB/qM,SAASyoH,IAfN/rI,GAkBX,IAAK,UACH,OACExM,EAAAA,GAAAA,GAACugN,GAAa,CAEZ/zM,OAAQA,EACRg0M,eAAgBA,EAChB30M,QAASA,EACT2N,SAAUA,GAAY,CACpBooM,EAAAA,GAAkBkB,mBAClBlB,EAAAA,GAAkBO,mBAClBP,EAAAA,GAAkBoB,oBAClBpB,EAAAA,GAAkBG,WAClBH,EAAAA,GAAkBC,gBAClBD,EAAAA,GAAkB0C,gBAClB1C,EAAAA,GAAkBsM,mBAClBtM,EAAAA,GAAkBiZ,oBAClB/qM,SAASyoH,IAbN/rI,GAkBb,MAGF,KAAKo1M,EAAAA,GAAkBC,gBACrB,OACE7hN,EAAAA,GAAAA,GAACilN,GAAqB,CACpBz4M,OAAQA,EACRgN,SAAUA,EACV3N,QAASA,IAIf,KAAK+1M,EAAAA,GAAkBG,WACrB,OACE/hN,EAAAA,GAAAA,GAAC0nN,GAAgB,CACfl7M,OAAQA,EACRg0M,eAAgBA,EAChBhnM,SAAUA,EACV3N,QAASA,IAIf,KAAK+1M,EAAAA,GAAkB8I,iBACrB,OACE1qN,EAAAA,GAAAA,GAAC4uN,GAAsB,CACrBpiN,OAAQA,EACRg0M,eAAgBA,EAChBiD,mBAAoBA,EACpBjqM,SAAUA,GAAY,CACpBooM,EAAAA,GAAkBmN,kBAClBnN,EAAAA,GAAkBqN,2BAClBrN,EAAAA,GAAkBuN,sBAClBr/L,SAASyoH,GACX1sI,QAASA,IAIf,KAAK+1M,EAAAA,GAAkBoB,oBACvB,KAAKpB,EAAAA,GAAkBmN,kBACrB,OACE/uN,EAAAA,GAAAA,GAACgnN,GAAsB,CACrBx6M,OAAQA,EACRgN,SAAUA,EACV3N,QAASA,IAIf,KAAK+1M,EAAAA,GAAkBqN,2BACrB,OACEjvN,EAAAA,GAAAA,GAACywN,GAAgC,CAC/BjkN,OAAQA,EACRi3M,mBAAoBA,EACpBjD,eAAgBA,EAChBhnM,SAAUA,GAAY,CACpBooM,EAAAA,GAAkBuN,sBAClBr/L,SAASyoH,GACX1sI,QAASA,IAIf,KAAK+1M,EAAAA,GAAkBuN,qBACrB,OACEnvN,EAAAA,GAAAA,GAACkwN,GAA0B,CACzB1jN,OAAQA,EACR2jN,qBAAsBA,EACtB7E,wBAAyBA,EACzB9K,eAAgBA,EAChBhnM,SAAUA,EACV3N,QAASA,IAIf,KAAK+1M,EAAAA,GAAkBO,mBACrB,OACEniN,EAAAA,GAAAA,GAACwjN,GAAwB,CACvBh3M,OAAQA,EACRg0M,eAAgBA,EAChBiD,mBAAoBA,EACpBjqM,SAAUA,GAAY,CACpBooM,EAAAA,GAAkB0C,gBAClB1C,EAAAA,GAAkBsM,mBAClBtM,EAAAA,GAAkBiZ,oBAClB/qM,SAASyoH,GACX1sI,QAASA,IAIf,KAAK+1M,EAAAA,GAAkBsH,mBACrB,OACElpN,EAAAA,GAAAA,GAACkpN,GAAkB,CACjB18M,OAAQA,EACRg0M,eAAgBA,EAChBhnM,SAAUA,EACV3N,QAASA,IAIf,KAAK+1M,EAAAA,GAAkBsM,mBACvB,KAAKtM,EAAAA,GAAkB0C,gBACrB,OACEtkN,EAAAA,GAAAA,GAAC2rN,GAAsB,CACrBn/M,OAAQA,EACRo/M,WAAYrzE,IAAkBqpE,EAAAA,GAAkBsM,mBAChDrC,eAAgBsE,EAChB7E,wBAAyBA,EACzB9K,eAAgBA,EAChBhnM,SAAUA,EACV3N,QAASA,IAIf,KAAK+1M,EAAAA,GAAkBkB,mBACvB,KAAKlB,EAAAA,GAAkBiJ,aACrB,OACE7qN,EAAAA,GAAAA,GAACwtN,GAAkB,CACjBhhN,OAAQA,EACRgN,SAAUA,EACV3N,QAASA,IAGf,KAAK+1M,EAAAA,GAAkBS,QACrB,OACEriN,EAAAA,GAAAA,GAACi0N,GAAa,CACZznN,OAAQA,EACRgN,SAAUA,EACV3N,QAASA,EACT20M,eAAgBA,IAGtB,KAAKoB,EAAAA,GAAkB6T,WACrB,OACEz1N,EAAAA,GAAAA,GAACgxN,GAAY,CACXxkN,OAAQA,EACRgN,SAAUA,EACV3N,QAASA,EACT20M,eAAgBA,IAGtB,KAAKoB,EAAAA,GAAkB8C,eACrB,OACE1kN,EAAAA,GAAAA,GAACwtN,GAAkB,CACjBhhN,OAAQA,EACRihN,UAAQ,EACRj0M,SAAUA,EACV3N,QAASA,EACT20M,eAAgBA,EAChBiD,mBAAoBA,IAI1B,KAAK7B,EAAAA,GAAkBK,UACrB,OACEjiN,EAAAA,GAAAA,GAAC+3N,GAAe,CACdvrN,OAAQA,EACRgN,SAAUA,EACV3N,QAASA,IAGf,KAAK+1M,EAAAA,GAAkBiU,WACrB,OACE71N,EAAAA,GAAAA,GAACyyN,GAAgB,CACfjmN,OAAQA,EACRgN,SAAUA,EACV3N,QAASA,IAGf,KAAK+1M,EAAAA,GAAkBW,aACrB,OACEviN,EAAAA,GAAAA,GAACo3N,GAAkB,CACjB5qN,OAAQA,EACRgN,SAAUA,EACV3N,QAASA,QCjSbivN,GAAO,OACPC,GAAc,UACdC,GAAc,eACdC,GAAM,YAEL,IAAKC,GAAQ,SAARA,GAAQ,OAARA,EAAAA,EAAQ,qBAARA,EAAAA,EAAQ,eAARA,EAAAA,EAAQ,2BAARA,EAAAA,EAAQ,aAARA,CAAQ,MAOpB,MAAMC,GAAgC,CACpC,CAACD,GAASE,SAAU,GACpB,CAACF,GAASG,MAAO,OACjB,CAACH,GAASI,YAAa,aACvB,CAACJ,GAASK,KAAM,OAGX,SAASC,GAAeC,GAE7B,OADAA,EAAaA,EAAWtgK,QAAQ,MAAO,IACnC2/J,GAAKhxE,KAAK2xE,GACLP,GAASG,KAEdJ,GAAInxE,KAAK2xE,GACJP,GAASK,IAEdR,GAAYjxE,KAAK2xE,IAAeT,GAAYlxE,KAAK2xE,GAC5CP,GAASI,WAEXJ,GAASE,OAClB,CCOA,MAAM9rF,GAA2B,CAC/BosF,YAAa,GACbC,YAAa,GACbC,KAAM,GACN97J,MAAO,GACP+7J,YAAa,GACbC,SAAU,GACVh3K,SAAU,GACVyqF,MAAO,GACPpyE,MAAO,GACP4+J,SAAU,GACVN,WAAY,GACZO,WAAY,GACZC,OAAQ,GACRC,IAAK,GACLC,eAAgB,GAChBC,WAAY,GACZC,UAAU,EACVC,iBAAiB,EACjBC,WAAY,CAAC,EACbC,UAAW,EACXC,kBAAmB,IAGfC,GAAgDA,CAAC58J,EAAOh+D,KAC5D,OAAQA,EAAOZ,MACb,IAAK,iBACH,MAAO,IACF4+D,EACH47J,YAAa55N,EAAO2tI,QACpB8sF,WAAY,IACPz8J,EAAMy8J,WACTb,iBAAa74N,IAGnB,IAAK,iBACH,MAAO,IACFi9D,EACH67J,YAAa75N,EAAO2tI,QACpB8sF,WAAY,IACPz8J,EAAMy8J,WACTZ,iBAAa94N,IAGnB,IAAK,aACH,MAAO,IACFi9D,EACH87J,KAAM95N,EAAO2tI,QACb8sF,WAAY,IACPz8J,EAAMy8J,WACTX,UAAM/4N,IAGZ,IAAK,cACH,MAAO,IACFi9D,EACHA,MAAOh+D,EAAO2tI,QACd8sF,WAAY,IACPz8J,EAAMy8J,WACTz8J,WAAOj9D,IAGb,IAAK,gBACH,MAAO,IACFi9D,EACH+7J,YAAa/5N,EAAO2tI,QAAQzU,KAC5BmhG,eAAgBr6N,EAAO2tI,QAAQxU,YAC/BshG,WAAY,IACPz8J,EAAMy8J,WACTV,iBAAah5N,IAGnB,IAAK,iBACH,MAAO,IACFi9D,EACHg8J,SAAUh6N,EAAO2tI,QACjB8sF,WAAY,IACPz8J,EAAMy8J,WACTT,cAAUj5N,IAGhB,IAAK,iBACH,MAAO,IACFi9D,EACHhb,SAAUhjD,EAAO2tI,QACjB8sF,WAAY,IACPz8J,EAAMy8J,WACTz3K,cAAUjiD,IAGhB,IAAK,cACH,MAAO,IACFi9D,EACHyvE,MAAOztI,EAAO2tI,QACd8sF,WAAY,IACPz8J,EAAMy8J,WACThtF,WAAO1sI,IAGb,IAAK,cACH,MAAO,IACFi9D,EACH3C,MAAOr7D,EAAO2tI,QACd8sF,WAAY,IACPz8J,EAAMy8J,WACTp/J,WAAOt6D,IAGb,IAAK,iBACH,MAAO,IAAKi9D,EAAOi8J,SAAUj6N,EAAO2tI,SACtC,IAAK,mBACH,MAAO,IACF3vE,EACH27J,WAAY35N,EAAO2tI,QACnB8sF,WAAY,IACPz8J,EAAMy8J,WACTd,gBAAY54N,IAGlB,IAAK,mBACH,MAAO,IACFi9D,EACHk8J,WAAYl6N,EAAO2tI,QACnB8sF,WAAY,IACPz8J,EAAMy8J,WACTP,gBAAYn5N,IAGlB,IAAK,mBACH,MAAO,IACFi9D,EACHm8J,OAAQn6N,EAAO2tI,QACf8sF,WAAY,IACPz8J,EAAMy8J,WACTN,YAAQp5N,IAGd,IAAK,gBACH,MAAO,IACFi9D,EACHo8J,IAAKp6N,EAAO2tI,QACZ8sF,WAAY,IACPz8J,EAAMy8J,WACTL,SAAKr5N,IAGX,IAAK,uBACH,MAAO,IACFi9D,EACHq8J,eAAgBr6N,EAAO2tI,QACvB8sF,WAAY,IACPz8J,EAAMy8J,WACTJ,oBAAgBt5N,IAGtB,IAAK,mBACH,MAAO,IACFi9D,EACHs8J,WAAYt6N,EAAO2tI,QACnB8sF,WAAY,IACPz8J,EAAMy8J,WACTH,gBAAYv5N,IAGlB,IAAK,iBACH,MAAO,IAAKi9D,EAAOu8J,SAAUv6N,EAAO2tI,SACtC,IAAK,wBACH,MAAO,IAAK3vE,EAAOw8J,gBAAiBx6N,EAAO2tI,SAC7C,IAAK,iBACH,OAAI3tI,EAAO2tI,QAAQ1U,QACV,IACFj7D,KACAh+D,EAAO2tI,QACV0sF,eAAgBr6N,EAAO2tI,QAAQ1U,SAG5B,IAAKj7D,KAAUh+D,EAAO2tI,SAC/B,IAAK,gBACH,MAAO,IACF3vE,EACHy8J,WAAY,IACPz8J,EAAMy8J,cACNz6N,EAAO2tI,UAGhB,IAAK,eACH,MAAO,IACF3vE,EACH08J,UAAW16N,EAAO2tI,SAEtB,IAAK,0BACH,MAAO,IACF3vE,EACH28J,kBAAmB36N,EAAO2tI,SAE9B,IAAK,aACH,MAAO,IACFH,IAEP,QACE,OAAOxvE,I,gBC7Ob,UAAgB,KAAO,WAAW,YAAc,WAAW,mBAAmB,WAAW,gBAAkB,WAAW,KAAO,WAAW,iBAAiB,WAAW,cAAgB,WAAW,uBAAuB,WAAW,oBAAsB,WAAW,aAAa,WAAW,UAAY,WAAW,kBAAkB,WAAW,cAAgB,WAAW,uBAAuB,WAAW,kBAAoB,WAAW,wBAAwB,WAAW,mBAAqB,WAAW,SAAW,WAAW,SAAW,WAAW,gBAAkB,WAAW,eAAiB,WAAW,eAAe,WAAW,YAAc,WAAW,SAAW,WAAW,OAAS,WAAW,YAAc,WAAW,gCAAgC,WAAW,0BAA4B,WAAW,+BAA+B,WAAW,yBAA2B,WAAW,eAAe,WAAW,YAAc,WAAW,KAAO,YC6Pp6B,IAAenhE,EAAAA,EAAAA,IApMgBg+N,EAC7BxvN,QACAf,cACApK,QACA46N,UACAC,iBACAC,eACAC,aACAn+I,gBACAkxD,WACAktF,cACAR,YACAS,cACAC,qBACAC,mBACAC,mBACAp9J,cAEA,MAAM,eAAEq9J,IAAmBrxN,EAAAA,EAAAA,MAErBurC,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,KACP8lL,EAAgBvyN,QAAQ+kI,IAExB,SACJytF,EAAQ,oBAAEC,EAAmB,aAAEC,GAC7Bb,GAAW,CAAC,GACV,cACJc,EAAa,gBACbC,EAAe,gBACfC,EAAe,KACfrwN,EAAI,MACJ4vD,EAAK,eACL0gK,GACGf,GAAgB,CAAC,EAEhBgB,GAAWz1N,EAAAA,EAAAA,IAASgrM,EAAAA,EAAAA,IAAmBrxM,KAEvC,IAAEiS,IAAQ8pN,EAAAA,GAAAA,GAAqC,CACnDC,aAAcjzN,QAAQ+yN,KAGlBG,GAAkBt+N,EAAAA,EAAAA,IAAau+N,IACnCpuF,EAAU,CAAE5uI,KAAM,eAAgBuuI,QAASguF,EAAevqN,KAAK4a,IAAIowM,EAAMT,GAAgBS,KACxF,CAACpuF,EAAU2tF,IAERU,GAA2Bx+N,EAAAA,EAAAA,IAAY,KAC3C09N,EAAe,CAAE//E,KAAM6/E,GAAkBx7N,OAASy8N,EAAAA,GAAYC,cAAgBD,EAAAA,GAAYE,eACzF,CAACnB,GAAkBx7N,OAAQ07N,IAExBkB,GAA6B5+N,EAAAA,EAAAA,IAAY,KAC7C09N,EAAe,CAAE//E,KAAM8gF,EAAAA,GAAYI,gBAClC,CAACnB,IAEEoB,GAA4B9+N,EAAAA,EAAAA,IAAY,KAC5C09N,EAAe,CAAE//E,KAAM8gF,EAAAA,GAAYM,YAClC,CAACrB,IAyDJ,OACEz9N,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAO6kD,KAAKtiE,SAAA,EAC1BH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOpR,YAAYrM,SAAA,CAChC+9N,IACC99N,EAAAA,GAAAA,GAAA,OACEiU,IAAKA,EACLnU,UAAW0d,GAAOmhN,gBAClB76N,IAAKg6N,EACLn6N,WAAW,EACX8F,MAAOzH,EAAOsJ,YAAY7B,MAC1BK,OAAQ9H,EAAOsJ,YAAYxB,OAC3Bye,IAAI,MAGNu1M,GAAY97N,IACZhC,EAAAA,GAAAA,GAACk/C,GAAAA,EAAQ,CACPz1C,MAAOzH,EAAMsJ,YAAY7B,MACzBK,OAAQ9H,EAAMsJ,YAAYxB,OAC1BhK,UAAW0d,GAAOmhN,gBAClBC,kBAAgB,KAGpBh/N,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAO1I,KAAK/U,SAAA,EAC1BC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAOqhN,cAAc9+N,SAAEoN,IACrCf,IACCpM,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOshN,oBAAoB/+N,UACxCi0B,EAAAA,GAAAA,GAAW5nB,EAAa,CAAC,KAAM,QAAS,mBAKjDxM,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOuhN,UAAUh/N,SAAA,CAC9B68N,EAAQoC,OAAOvrN,IAAK7E,GACnBqwN,GAAkBlyN,EAAM6B,EAAK1B,MAAO0B,EAAK2vC,OAAQq+K,EAAQ7wI,WAE1D8wI,GAAkBA,EAAeppN,IAAK7E,GACrCqwN,GAAkBlyN,EAAM6B,EAAK1B,MAAO0B,EAAK2vC,OAAQq+K,EAAQ7wI,WAE1DyxI,GAAuBA,EAAoB77N,OAAS,IA3FvD/B,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAO0hN,cAAcn/N,SAAA,EACnCC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAO2hN,mBAAmBp/N,SACvCoN,KAEHnN,EAAAA,GAAAA,GAAA,OAAAD,UACGmsF,EAAAA,GAAAA,IAAen/E,EAAMyvN,EAAYI,EAAQ7wI,gBAG9C/rF,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAO4hN,SAASr/N,SAC7By9N,EAAqB/pN,IAAK4rN,IACzBr/N,EAAAA,GAAAA,GAAA,OAEEF,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAO8hN,SAAUD,IAAQ7C,GAAah/M,GAAO+hN,iBACvExxN,QAAS+hI,EAAW,IAAMmuF,EAAgBoB,IAAQ7C,EAAY,EAAI6C,QAAOx8N,EAAU9C,UAElFmsF,EAAAA,GAAAA,IAAen/E,EAAMsyN,EAAKzC,EAAQ7wI,SAAU,CAAEyzI,qBAAqB,KAJ/DH,cAgFKx8N,IAAfk6N,GACCkC,GAAkBlyN,EAAMwqC,EAAQ,wBAAyBwlL,EAAYH,EAAQ7wI,UAAU,OAG3FnsF,EAAAA,GAAAA,IAAA,OAAKE,UAAW0d,GAAOiiN,YAAY1/N,SAAA,EAC/Bq9N,GAAoBsC,GAAmB,CACvCvyN,MAAOuwN,GAAiBP,IAAmB,GAAGhwN,MAC9CD,MAAOqqC,EAAQ,yBACftkC,KAAM,OACNlF,QAASuvN,EAAgBa,OAA2Bt7N,IAErD86N,GAAmB+B,GAAmB,CACrCvyN,MAAOwwN,EACPzwN,MAAOqqC,EAAQ,2BACf0yF,YAAY9zH,EAAAA,GAAAA,GAAeqH,GAAOmiN,SAAUniN,GAAOmgN,EAAgBrwK,mBAEnE2vK,IAAiBK,GAAiBM,IAAqB8B,GAAmB,CAC1EvyN,MAAOywN,EACP1wN,MAAOqqC,EAAQ,0BACftkC,KAAM,WACNlF,QAASuvN,EAAgBiB,OAA6B17N,IAEvD0K,GAAQmyN,GAAmB,CAC1BvyN,MAAOI,EACPL,MAAOqqC,EAAQ,uBACftkC,KAAM,SAEPkqD,GAASuiK,GAAmB,CAC3BvyN,MAAOgwD,EACPjwD,MAAOqqC,EAAQ,8BACftkC,KAAM,WAENiqN,IAAwBI,GAAiBO,IAAoB6B,GAAmB,CAChFvyN,MAAO0wN,EACP3wN,MAAOqqC,EAAQ,iCACftkC,KAAM,QACNlF,QAASuvN,EAAgBmB,OAA4B57N,IAEtD06N,IA1FYhmN,EA0FUgmN,GAxFzBv9N,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAnBN,SAAuBqK,EAAasa,GAClC,MACM+tM,EADaroL,EAAQ,iCAAkCyoB,GAC1B+e,MAAM,KACzC,OACEn/E,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,CACG6/N,EAAgB,IACjB5/N,EAAAA,GAAAA,GAACy9G,GAAAA,EAAQ,CACPlmG,IAAKA,EACLzC,KAAM8qN,EAAgB,GACtB/tM,MAAOA,IAER+tM,EAAgB7xL,MAAM,KAG7B,CAKa8xL,CAActoN,EAAKggC,EAAQ1lB,OAClCtkB,KAAK,eACL27B,QAASn+B,QAAQ6zE,GACjB9+E,UAAW0d,GAAOsiN,YAClBr2L,SAAU,EACVotB,QAASmmK,WARf,IAAmBzlN,IAkGrB,SAAS0nN,GACPlyN,EAAcI,EAAeR,EAAeo/E,EAAkBsvC,GAAO,GAErE,OACEz7H,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GAAeqH,GAAO0hN,cAAe7jG,GAAQ79G,GAAOuiN,mBAAmBhgO,SAAA,EACrFC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAO2hN,mBAAmBp/N,SACvCoN,KAEHnN,EAAAA,GAAAA,GAAA,OAAAD,UACGmsF,EAAAA,GAAAA,IAAen/E,EAAMJ,EAAOo/E,OAIrC,CAEA,SAAS2zI,IAAmB,MAC1BvyN,EAAK,MACLD,EAAK,KACL+F,EAAI,WACJg3H,EAAU,QACVl8H,IAQA,MAAMoH,EAAcpK,QAAQoC,GAASD,IAAUC,GAE/C,OACEvN,EAAAA,GAAAA,IAAC2iC,GAAAA,EAAQ,CACPziC,UAAW0d,GAAOwrB,KAClB04E,QAAM,EACNl/E,UAAWrtB,EACXlC,KAAMA,EACNwvB,UAAW10B,EACXA,QAASA,EACT20B,YAAaunG,IAAcjqI,EAAAA,GAAAA,GAAA,KAAGF,WAAWqW,EAAAA,GAAAA,GAAe,OAAQ8zH,KAAgBlqI,SAAA,EAEhFC,EAAAA,GAAAA,GAAA,OAAKF,UAAW0d,GAAOwiN,0BAA0BjgO,SAC9CoN,GAASD,IAEXC,GAASD,IAAUC,IAClBnN,EAAAA,GAAAA,GAAA,KAAGF,UAAW0d,GAAOyiN,yBAAyBlgO,SAC3CmN,MAKX,CC7QA,MAmDA,IAAevO,EAAAA,EAAAA,IAnDsBuhO,EACnC3oN,MAAK4oN,aAAYt0N,UAASu0N,0BAE1B,MAAM,iBAAEj7J,IAAqBn5D,EAAAA,EAAAA,MAEvBe,GAAOC,EAAAA,EAAAA,KAEPu+D,GAAgB5rE,EAAAA,EAAAA,IAAamvB,IACjC,IACE,MAAMpW,EAAOkyD,KAAKY,MAAM18C,EAAMpW,OACxB,UAAEoyD,EAAS,UAAEC,GAAcryD,EACjC,OAAQoyD,GACN,IAAK,uBACH,IAAKq1J,EAAY,CACf,MAAMr0J,EAAUe,EAAAA,IAAkB9B,EAAU+B,UAC5C3H,EAAiB,CAAE5tD,IAAKu0D,GAC1B,CACAjgE,IACA,MACF,IAAK,sBACCu0N,GACFA,EAAoBr1J,GAEtB,MACF,QACEl/D,IAGN,CAAE,MAAOnF,GACP,GAED,CAACmF,EAASs0N,EAAYh7J,EAAkBi7J,IAO3C,OALA71N,EAAAA,EAAAA,IAAU,KACRK,OAAOmL,iBAAiB,UAAWw1D,GAC5B,IAAM3gE,OAAOoL,oBAAoB,UAAWu1D,IAClD,CAACA,KAGFvrE,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iBAAgBC,UAC7BC,EAAAA,GAAAA,GAAA,UACE8D,IAAKyT,EACLpK,MAAOJ,EAAK,kCACZ+mE,MAAM,UACND,QAAQ,gFACR/zE,UAAU,gCCblB,IAAenB,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAsBtN,IACxC,MAAM,QAAE2iE,IAAYj1D,EAAAA,EAAAA,KAAe1N,GACnC,MAAO,CACL+9G,SAAUp7C,EAAQz4B,OAAO80L,WACzB7hH,aAAcn9G,EAAOi9G,cAAcC,KACnC4+G,iBAAyC,YAAvBn5J,EAAQolD,MAAMloH,KAAqB8iE,EAAQolD,KAAK+zG,sBAAmBt6N,IALrE8L,CAxC+B2xN,EACjD9mN,WACA4lG,WACAt/C,QACAq9J,mBACA3+G,eACA+hH,uBAEA,MAAM,kBAAEC,IAAsBx0N,EAAAA,EAAAA,MAExBurC,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,MAENqnE,EAAoBC,IAAyB3yG,EAAAA,EAAAA,KAAS,GACvDs0N,GAAW14N,EAAAA,EAAAA,IAAQ,IAChBo1N,GAAkBx7N,QAAUm+D,EAAM28J,kBACrCU,EAAiB3nL,KAAK,EAAG31C,QAASA,IAAOigE,EAAM28J,oBAAoBtvN,WACnEtK,EACH,CAACs6N,EAAkBr9J,EAAM28J,oBAE5B,OACE78N,EAAAA,GAAAA,IAAA,OAAKE,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,GAAAA,GAACpB,GAAAA,EAAc,CAACE,OAAK,EAACD,kBAAmBggH,KAEzC7+G,EAAAA,GAAAA,GAACk/G,GAAAA,EAAY,CACX3zE,MAAO6zE,GAAYryG,EAAKsyG,YAAYD,GACpCb,KAAMC,EACNpyG,YAAamrC,EAAQ,6BAA8BkpL,GACnDnxK,YAAa/X,EAAQ,YACrB+nE,aAAckhH,EACdrhH,kBAAkB,EAClBI,iBAAkB/lG,EAClB3a,kBAAmBggH,EACnBW,2BAA4BV,EAC5B4hH,cAAeH,U,gJCiBvB,IAAe5hO,EAAAA,EAAAA,IAjDiBgiO,EAAGh0N,QAAO4+B,QAAO99B,WAAU+L,eACzD,MAAMzM,GAAOC,EAAAA,EAAAA,KACP4zN,GAAgBv3N,EAAAA,EAAAA,OAEtBkB,EAAAA,EAAAA,IAAU,KACHiP,IAAYhE,EAAAA,KAIjBs7B,EAAAA,EAAAA,IAAe,MACbooF,EAAAA,GAAAA,GAAc0nG,EAAcp3N,YAE7B,CAACgQ,IAEJ,MAAOqnN,EAAUC,IAAe30N,EAAAA,EAAAA,IAAiB+uN,GAASE,UAC1D7wN,EAAAA,EAAAA,IAAU,KACR,MAAMw2N,EAAcvF,GAAe7uN,GACnCm0N,EAAYC,IAEX,IAEH,MAAMjzI,GAAenuF,EAAAA,EAAAA,IAAakN,IAChC,MAAM2vF,ECzCH,SAA0BrzD,GAE/B,MAAM5V,GADN4V,EAAQA,EAAMgyB,QAAQ,SAAU,KACZzwB,MAAM,WAC1B,OAAOnX,EAAQA,EAAM5M,KAAK,KAAO,EACnC,CDqCqBq6M,CAAiBn0N,EAAEC,OAAOH,OACrCo0N,EAAcvF,GAAe3uN,EAAEC,OAAOH,OAC5Cm0N,EAAYC,GACZtzN,EAAS+uF,IACR,CAAC/uF,IAEEwzN,EAuBR,SAAqBJ,GACnB,OAAQA,GACN,KAAK3F,GAASI,WACZ,OAAOt7N,EAAAA,GAAAA,GAAA,OAAK8D,IAAKo9N,GAAoBv9N,WAAW,EAAO4kB,IAAI,KAC7D,KAAK2yM,GAASG,KACZ,OAAOr7N,EAAAA,GAAAA,GAAA,OAAK8D,IAAKq9N,GAAcx9N,WAAW,EAAO4kB,IAAI,KACvD,KAAK2yM,GAASK,IACZ,OAAOv7N,EAAAA,GAAAA,GAAA,OAAK8D,IAAKs9N,GAAaz9N,WAAW,EAAO4kB,IAAI,KACtD,QACE,OAEN,CAlCmB84M,CAAYR,GAE7B,OACEjhO,EAAAA,GAAAA,IAAA,OAAKE,UAAU,YAAWC,SAAA,EACxBC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRsG,IAAK2sN,EACL1zN,MAAOH,EAAK,qBACZU,SAAUqgF,EACVnhF,MAAOA,EACPmvD,UAAU,UACVh8D,UAAW+gO,EAAW,kBAAoB,GAC1Ct1L,MAAOA,EACP9B,SAAU,EACV44C,UAlDuB,GAmDvB/4C,2BAAyB,KAE3BtpC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,cAAaC,SAAEkhO,SE/BrC,IAAetiO,EAAAA,EAAAA,IA3BmB2iO,EAAG30N,QAAO4+B,QAAO99B,eACjD,MAAMV,GAAOC,EAAAA,EAAAA,KAEP8gF,GAAenuF,EAAAA,EAAAA,IAAakN,IAChC,MAAM2vF,EAAW3vF,EAAEC,OAAOH,MAEtBA,EAAM40N,SAAS,MAAQ50N,EAAMhL,OAAS66F,EAAS76F,OACjD8L,EAAS+uF,GAET/uF,ED1BC,SAA0B07B,GAE/B,MAAM5V,GADN4V,EAAQA,EAAMgyB,QAAQ,SAAU,IAAIptB,MAAM,EAAG,IACzBrD,MAAM,WAO1B,OANInX,IAAQ,IAAMjO,OAAOiO,EAAM,IAAM,KACnCA,EAAM,GAAK,MAETA,IAAQ,IAA0B,IAApBA,EAAM,GAAG5xB,SAAiB4xB,EAAM,KAChDA,EAAM,GAAK,IAENA,EAAQA,EAAM5M,KAAK,KAAO,EACnC,CCgBe66M,CAAiB30N,EAAEC,OAAOH,SAEpC,CAACc,EAAUd,IAEd,OACE3M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRT,MAAOH,EAAK,yBACZU,SAAUqgF,EACVnhF,MAAOA,EACP4+B,MAAOA,EACPuwB,UAAU,UACVryB,SAAU,EACV44C,UA7BmB,EA8BnB/4C,2BAAyB,MCyI/B,IAAe3qC,EAAAA,EAAAA,IAjJmB2/N,EAChCx+J,QACA2hK,qBACAC,qBACAC,cACAC,UACAvlK,cACAyzE,WACAt2H,eAEA,MAAMqoN,GAAmBx4N,EAAAA,EAAAA,OAEzBkB,EAAAA,EAAAA,IAAU,KACJs3N,EAAiBr4N,SAChBq4N,EAAiBr4N,QAAQmD,QAAUmzD,EAAMq8J,iBAC5C0F,EAAiBr4N,QAAQmD,MAAQmzD,EAAMq8J,iBAExC,CAACr8J,EAAMq8J,iBAEV,MAAM2F,GAAyBniO,EAAAA,EAAAA,IAAagN,IAC1CmjI,EAAS,CAAE5uI,KAAM,mBAAoBuuI,QAAS9iI,KAC7C,CAACmjI,IAEEiyF,GAAyBpiO,EAAAA,EAAAA,IAAakN,IAC1CijI,EAAS,CAAE5uI,KAAM,mBAAoBuuI,QAAS5iI,EAAEC,OAAOH,MAAMq1N,iBAC5D,CAAClyF,IAEEmyF,GAAqBtiO,EAAAA,EAAAA,IAAagN,IACtCmjI,EAAS,CAAE5uI,KAAM,mBAAoBuuI,QAAS9iI,KAC7C,CAACmjI,IAEEoyF,GAAkBviO,EAAAA,EAAAA,IAAakN,IACnC,MAAM2vF,EAAW3vF,EAAEC,OAAOH,MAAMwuD,QAAQ,UAAW,IACnD20E,EAAS,CAAE5uI,KAAM,gBAAiBuuI,QAASjzC,KAC1C,CAACszC,IAEEqyF,GAAsBxiO,EAAAA,EAAAA,IAAakN,IACvCijI,EAAS,CAAE5uI,KAAM,uBAAwBuuI,QAAS5iI,EAAEC,OAAOH,SAC1D,CAACmjI,IAEEsyF,GAA8BziO,EAAAA,EAAAA,IAAakN,IAC/CijI,EAAS,CAAE5uI,KAAM,mBAAoBuuI,QAAS5iI,EAAEC,OAAOH,SACtD,CAACmjI,IAEEuyF,GAA8B1iO,EAAAA,EAAAA,IAAakN,IAC/CijI,EAAS,CAAE5uI,KAAM,wBAAyBuuI,QAAS5iI,EAAEC,OAAOH,SAC3D,CAACmjI,IAEEv4F,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,MAEP,WAAE+kL,EAAa,CAAC,GAAMz8J,EAE5B,OACE9/D,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,UAC1BH,EAAAA,GAAAA,IAAA,QAAAG,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,uBACbv3C,EAAAA,GAAAA,GAAC2gO,GAAS,CACRlzN,SAAUq0N,EACVn1N,MAAOmzD,EAAM27J,WACblwL,MAAOgxL,EAAWd,YAAc1uN,EAAKsyG,YAAYk9G,EAAWd,YAC5DjiN,SAAUA,IAEXkoN,IACC1hO,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRT,MAAOqqC,EAAQ,8CACf9pC,SAAUs0N,EACVp1N,MAAOmzD,EAAMk8J,WACblgK,UAAU,OACVryB,SAAU,EACV8B,MAAOgxL,EAAWP,YAAcjvN,EAAKsyG,YAAYk9G,EAAWP,eAGhEp8N,EAAAA,GAAAA,IAAA,WAASE,UAAU,gBAAeC,SAAA,EAChCC,EAAAA,GAAAA,GAACshO,GAAW,CACV30N,MAAOmzD,EAAMm8J,OACbxuN,SAAUw0N,EACV12L,MAAOgxL,EAAWN,QAAUlvN,EAAKsyG,YAAYk9G,EAAWN,WAE1Dj8N,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRT,MAAOqqC,EAAQ,yBACf9pC,SAAUy0N,EACVv1N,MAAOmzD,EAAMo8J,IACbpgK,UAAU,UACVumB,UAAW,EACX54C,SAAU,EACV8B,MAAOgxL,EAAWL,KAAOnvN,EAAKsyG,YAAYk9G,EAAWL,KACrD5yL,2BAAyB,OAG5Bq4L,GAAeC,GACd5hO,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,gCACX10C,GACJjD,EAAAA,GAAAA,IAAA,WAASE,UAAU,gBAAeC,SAAA,CAC/B4hO,IACC3hO,EAAAA,GAAAA,GAACsiO,GAAAA,EAAM,CACLp1N,MAAOqqC,EAAQ,0BACf9pC,SAAU00N,EACVx1N,MAAOmzD,EAAMq8J,eACboG,SAAUx3N,SAAQ,GAClBlL,GAAG,kBACH0rC,MAAOgxL,EAAWJ,gBAAkBpvN,EAAKsyG,YAAYk9G,EAAWJ,gBAChE1yL,SAAU,EACVx1B,IAAK4tN,EAAiB9hO,SAGpBs8D,EAAY5oD,IAAI,EAAGwnH,cAAa1tH,WAC9BvN,EAAAA,GAAAA,GAAA,UACE2M,MAAOsuH,EACPn7H,UAAU,cACV4N,SAAUutH,IAAgBn7D,EAAMq8J,eAAep8N,SAE9Ck7H,GAAe1tH,OAMzBq0N,IACC5hO,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRT,MAAOqqC,EAAQ,iCACf9pC,SAAU20N,EACVz1N,MAAOmzD,EAAMs8J,WACbtgK,UAAU,OACVryB,SAAU,EACV44C,UAAW,GACX92C,MAAOgxL,EAAWH,YAAcrvN,EAAKsyG,YAAYk9G,EAAWH,kBAIlEp8N,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOqqC,EAAQ,qCACfrO,UAASu4L,GAAqB3hK,EAAMw8J,gBACpC7yL,SAAU,EACVqxD,SAAUvjD,EAAQkqL,EAAqB,gCAAkC,qBACzEh0N,SAAU40N,EACVliN,UAAWshN,aC9GvB,IAAe9iO,EAAAA,EAAAA,IAtC+B6jO,EAC5C1iK,QACAq9J,mBACArtF,WACA2yF,qBAEA,MAAM11N,GAAOC,EAAAA,EAAAA,KAEPQ,GAAUzF,EAAAA,EAAAA,IAAQ,IACfo1N,GAAkBx7N,OACrBw7N,EAAiB1pN,IAAI,EAAG5T,KAAIsN,YAAY,CAAGD,MAAOC,EAAOR,MAAO9M,KAChE0kC,GAAAA,EACH,CAAC44L,IAEE1vN,GAAW9N,EAAAA,EAAAA,IAAagN,IAC5BmjI,EAAS,CAAE5uI,KAAM,0BAA2BuuI,QAAS9iI,KACpD,CAACmjI,IAEJ,OACE9vI,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,UAC1BH,EAAAA,GAAAA,IAAA,QAAAG,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAAD,SAAKgN,EAAK,uBAEV/M,EAAAA,GAAAA,GAACsN,GAAAA,EAAU,CACTC,KAAK,oBACLC,QAASA,EACTE,SAAUoyD,EAAM28J,kBAChBhvN,SAAUA,KAGZzN,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAACE,QAAM,EAACC,QAAS00N,EAAe1iO,SACpCgN,EAAK,yCCehB,IAAepO,EAAAA,EAAAA,IAzCgB+/N,EAC7B5+J,QACA4iK,kBACA32I,WACA+jD,eAEA,MAAMv4F,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,MAEbjtC,EAAAA,EAAAA,IAAU,KACHm4N,GAAoBA,EAAgB/gO,SAAUm+D,EAAMi8J,UAGzDjsF,EAAS,CAAE5uI,KAAM,iBAAkBuuI,QAASizF,EAAgB,GAAG7iO,MAC9D,CAAC6iO,EAAiB5iK,EAAMi8J,SAAUjsF,IAErC,MAAM6yF,GAAuBhjO,EAAAA,EAAAA,IAAagN,IACxCmjI,EAAS,CAAE5uI,KAAM,iBAAkBuuI,QAAS9iI,KAC3C,CAACmjI,IAEEtiI,GAAUzF,EAAAA,EAAAA,IAAQ,IAAO26N,EAAgBjvN,IAAI,EAAG5T,GAAI8M,EAAOQ,MAAOD,EAAOqxC,aAAa,CAC1FrxC,QACA4tF,UAAU5O,EAAAA,GAAAA,IAAen/E,EAAMwxC,EAAQwtC,GACvCp/E,WACI,CAAC+1N,EAAiB32I,EAAUh/E,IAElC,OACE/M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBH,EAAAA,GAAAA,IAAA,QAAAG,SAAA,EACEC,EAAAA,GAAAA,GAAA,KAAAD,SAAIw3C,EAAQ,4BACZv3C,EAAAA,GAAAA,GAACsN,GAAAA,EAAU,CACTC,KAAK,mBACLC,QAASA,EACTC,SAAUk1N,EACVj1N,SAAUoyD,EAAMi8J,kBCuK1B,IAAep9N,EAAAA,EAAAA,IAlMoB6/N,EACjC1+J,QACA8iK,YACAC,YACAC,WACA7F,cACA5gK,cACAyzE,eAEA,MAAMhzE,GAAWzzD,EAAAA,EAAAA,MACX05N,GAAW15N,EAAAA,EAAAA,MACXw4N,GAAmBx4N,EAAAA,EAAAA,OAEzBkB,EAAAA,EAAAA,IAAU,KACJs3N,EAAiBr4N,SAChBq4N,EAAiBr4N,QAAQmD,QAAUmzD,EAAM+7J,cAC5CgG,EAAiBr4N,QAAQmD,MAAQmzD,EAAM+7J,cAExC,CAAC/7J,EAAM+7J,cAEV,MAAMtkL,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,MAEbjtC,EAAAA,EAAAA,IAAU,KACJiL,EAAAA,KAIJs7B,EAAAA,EAAAA,IAAe,MACbooF,EAAAA,GAAAA,GAAcp8D,EAAStzD,YAExB,CAACszD,IAEJ,MAAMkmK,GAAuBrjO,EAAAA,EAAAA,IAAakN,IACxCijI,EAAS,CAAE5uI,KAAM,iBAAkBuuI,QAAS5iI,EAAEC,OAAOH,SACpD,CAACmjI,IAEEmzF,GAAuBtjO,EAAAA,EAAAA,IAAakN,IACxCijI,EAAS,CAAE5uI,KAAM,iBAAkBuuI,QAAS5iI,EAAEC,OAAOH,SACpD,CAACmjI,IAEEozF,GAAmBvjO,EAAAA,EAAAA,IAAakN,IACpCijI,EAAS,CAAE5uI,KAAM,aAAcuuI,QAAS5iI,EAAEC,OAAOH,SAChD,CAACmjI,IAEEqzF,GAAoBxjO,EAAAA,EAAAA,IAAakN,IACrCijI,EAAS,CAAE5uI,KAAM,cAAeuuI,QAAS5iI,EAAEC,OAAOH,SACjD,CAACmjI,IAEEqyF,GAAsBxiO,EAAAA,EAAAA,IAAakN,IACvCijI,EAAS,CAAE5uI,KAAM,gBAAiBuuI,QAASpzE,EAAY7mB,KAAMulF,GAAYA,EAAQC,OAASnuH,EAAEC,OAAOH,UAClG,CAAC0vD,EAAayzE,IAEXszF,GAAuBzjO,EAAAA,EAAAA,IAAakN,IACxCijI,EAAS,CAAE5uI,KAAM,iBAAkBuuI,QAAS5iI,EAAEC,OAAOH,SACpD,CAACmjI,IAEEuzF,GAAuB1jO,EAAAA,EAAAA,IAAakN,IACxCijI,EAAS,CAAE5uI,KAAM,iBAAkBuuI,QAAS5iI,EAAEC,OAAOH,SACpD,CAACmjI,IAEEwzF,GAAoB3jO,EAAAA,EAAAA,IAAakN,IACrCijI,EAAS,CAAE5uI,KAAM,cAAeuuI,QAAS5iI,EAAEC,OAAOH,SACjD,CAACmjI,IAEEnyE,GAAoBh+D,EAAAA,EAAAA,IAAakN,IACrC,IAAI,MAAEF,GAAUE,EAAEC,OAClBH,EAAQ,IAAIA,EAAMwuD,QAAQ,MAAO,MAC7B4nK,EAASv5N,UACXu5N,EAASv5N,QAAQmD,MAAQA,GAE3BmjI,EAAS,CAAE5uI,KAAM,cAAeuuI,QAAS9iI,KACxC,CAACmjI,IAEEyzF,GAAuB5jO,EAAAA,EAAAA,IAAakN,IACxCijI,EAAS,CAAE5uI,KAAM,iBAAkBuuI,QAAS5iI,EAAEC,OAAOH,SACpD,CAACmjI,KAEE,WAAEysF,GAAez8J,EACvB,OACE9/D,EAAAA,GAAAA,GAAA,OAAKF,UAAU,eAAcC,UAC3BH,EAAAA,GAAAA,IAAA,QAAAG,SAAA,CACGk9N,GACCr9N,EAAAA,GAAAA,IAAA,OAAAG,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,6BACbv3C,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRsG,IAAK6oD,EACL5vD,MAAOqqC,EAAQ,sCACf9pC,SAAUu1N,EACVr2N,MAAOmzD,EAAM47J,YACb5/J,UAAU,OACVryB,SAAU,EACV8B,MAAOgxL,EAAWb,aAAe3uN,EAAKsyG,YAAYk9G,EAAWb,gBAE/D17N,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRT,MAAOqqC,EAAQ,sCACf9pC,SAAUw1N,EACVt2N,MAAOmzD,EAAM67J,YACb7/J,UAAU,OACVryB,SAAU,EACV8B,MAAOgxL,EAAWZ,aAAe5uN,EAAKsyG,YAAYk9G,EAAWZ,gBAE/D37N,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRT,MAAOqqC,EAAQ,kCACf9pC,SAAUy1N,EACVv2N,MAAOmzD,EAAM87J,KACb9/J,UAAU,OACVryB,SAAU,EACV8B,MAAOgxL,EAAWX,MAAQ7uN,EAAKsyG,YAAYk9G,EAAWX,SAExD57N,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRT,MAAOqqC,EAAQ,mCACf9pC,SAAU01N,EACVx2N,MAAOmzD,EAAMA,MACbhE,UAAU,OACVvwB,MAAOgxL,EAAWz8J,OAAS/yD,EAAKsyG,YAAYk9G,EAAWz8J,UAEzD9/D,EAAAA,GAAAA,GAACsiO,GAAAA,EAAM,CACLp1N,MAAOqqC,EAAQ,0BACf9pC,SAAU00N,EACVx1N,MAAOmzD,EAAM+7J,YACb0G,SAAUx3N,SAAQ,GAClBlL,GAAG,mBACH0rC,MAAOgxL,EAAWV,aAAe9uN,EAAKsyG,YAAYk9G,EAAWV,aAC7D5nN,IAAK4tN,EACLp4L,SAAU,EAAE1pC,SAEXs8D,EAAY5oD,IAAI,EAAGwnH,cAAa1tH,OAAMytH,WACrCh7H,EAAAA,GAAAA,GAAA,UACE2M,MAAOquH,EACPl7H,UAAU,cACV4N,SAAUstH,IAASl7D,EAAM+7J,YAAY97N,SAEpCk7H,GAAe1tH,QAKtBvN,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRT,MAAOqqC,EAAQ,iCACf9pC,SAAU21N,EACVz2N,MAAOmzD,EAAMg8J,SACbhgK,UAAU,OACVryB,SAAU,EACV8B,MAAOgxL,EAAWT,UAAY/uN,EAAKsyG,YAAYk9G,EAAWT,oBAG5Dj5N,EACHigO,GAAYF,GAAaC,GACxB7iO,EAAAA,GAAAA,GAAA,MAAAD,SAAKw3C,EAAQ,kCACX10C,EACHigO,IACC9iO,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRT,MAAOqqC,EAAQ,uBACf9pC,SAAU41N,EACV12N,MAAOmzD,EAAMhb,SACbgX,UAAU,OACVryB,SAAU,EACV8B,MAAOgxL,EAAWz3K,UAAY/3C,EAAKsyG,YAAYk9G,EAAWz3K,YAG7D89K,IACC5iO,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRT,MAAOqqC,EAAQ,mCACf9pC,SAAU61N,EACV32N,MAAOmzD,EAAMyvE,MACbzzE,UAAU,QACVryB,SAAU,EACV8B,MAAOgxL,EAAWhtF,OAASxiI,EAAKsyG,YAAYk9G,EAAWhtF,SAG1DszF,IACC7iO,EAAAA,GAAAA,GAAC2N,EAAAA,EAAS,CACRT,MAAOqqC,EAAQ,8BACf9pC,SAAUkwD,EACVhxD,MAAOmzD,EAAM3C,MACbrB,UAAU,MACVryB,SAAU,EACV8B,MAAOgxL,EAAWp/J,OAASpwD,EAAKsyG,YAAYk9G,EAAWp/J,OACvDlpD,IAAK8uN,KAGT/iO,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP1pD,MAAOqqC,EAAQ,uBACfujD,SAAUvjD,EAAQ,2BAClBrO,QAASn+B,QAAQ+0D,EAAMu8J,UACvB5yL,SAAU,EACVh8B,SAAU81N,WC/KdC,GAAmB,SACnBC,GAAkB,cAElBC,GAAsB,IAAIt1L,IAAI,CAACo1L,GAAkBC,KAqjBvD,IAAe9kO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,KACJ+nH,EAAI,KACJk0B,EAAI,gBACJolF,EAAe,MACfn3L,EAAK,kBACLo4L,EAAiB,aACjBz/J,EAAY,UACZmK,EAAS,kBACTu1J,EAAiB,uBACjBC,EAAsB,kBACtBC,EAAiB,gBACjBC,EAAe,IACfxsN,IACExI,EAAAA,EAAAA,KAAe1N,GAAQ2iE,SAErB,QAAE44J,EAAO,aAAEoH,EAAY,eAAEC,GAAmB76G,GAAQ,CAAC,EACrD/sD,EAAch7D,EAAOg7D,YAAY86B,QAEvC,IAAI+sI,EAAe96G,GAAM66G,gBACpBC,GAAgB3sN,IACnB2sN,EAAe3sN,EAAIyxH,WA5kBG,oCA4kB+By6F,QAAkB5gO,GAGzE,MAAMqM,EAAOg1D,GAAgB,WAAYA,GAAe7vB,EAAAA,EAAAA,KAAWhzC,EAAQ6iE,EAAa13D,aAAU3J,EAC5FshO,EAAkBp5N,QAAQ6xN,KAAasH,IAAiBR,GAAoBx1L,IAAIg2L,MAChF,mBAAExC,EAAkB,YAAEC,EAAW,QAAEC,GAAaoC,GAAgB,CAAC,EACjEnxK,EAAMu2D,GAAM5yD,OAAQpiB,EAAAA,EAAAA,KAAW/yC,EAAQ+nH,EAAK5yD,YAAS3zD,EACrDm9D,GAAUn2B,EAAAA,EAAAA,IAAgBgpB,GAEhC,MAAO,CACLyqF,OACApuI,OACAwzN,kBACAuB,eAAgBC,EAChBC,kBACA/6G,OACAwzG,UACA8E,qBACAC,cACAC,UACAr2L,QACAo4L,kBAAmBA,GAAqBpsN,EACxC6lN,iBAAkBryN,SAASk5N,GAAkB1sN,GAC7C8kD,cACAgS,YACA6uJ,mBAAoBnyN,QAAQ23N,GAAiB/gO,QAC7CyiO,iBAAkBP,GAAwB9pB,MAC1CsqB,SAAUT,GAAmB/jO,GAC7BykO,mBAAoBR,GAAmBS,WACvCR,kBACA/jK,YApDcrxD,CAphB4B61N,EAC9C74N,SACAE,UACAyxI,OACAolF,kBACAt5G,OACA+6G,kBACAvH,UACAqH,iBACAvC,qBACAC,cACAC,UACA+B,oBACAp4L,QACA8wB,cACA6gK,qBACA7uJ,YACA+1J,mBACAC,WACAC,qBACAP,kBACA3G,mBACAp9J,cAEA,MAAM,iBACJykK,EAAgB,sBAChBC,EAAqB,gBACrBC,EAAe,eACftH,EAAc,oBACduH,EAAmB,kBACnBpE,EAAiB,wBACjBqE,EAAuB,uBACvBC,IACE94N,EAAAA,EAAAA,MAEEurC,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,MAEN+b,EAAaxsB,EAAWC,IAAc/nC,EAAAA,EAAAA,MACtC8lO,EAAcC,IZ4Hdx1D,EAAAA,GAAAA,GAAWktD,GAASptF,KY3HpB36G,EAAWm3F,IAAgB3/G,EAAAA,EAAAA,KAAS,IACpCyyE,EAAeC,IAAoB1yE,EAAAA,EAAAA,KAAS,IAC5C84N,EAAeC,IAAoB/4N,EAAAA,EAAAA,IAAS,IAC7Cg5N,GAAW5uM,EAAAA,EAAAA,GAAsB+mH,GAAM,GACvC8nF,IAAgB7uM,EAAAA,EAAAA,GAAsB83C,GACtCg3J,GAAkB/nF,IAAS8gF,EAAAA,GAAY8B,eAEvCoF,IAAU3lO,EAAAA,EAAAA,IAAa4lO,IAC3BlI,EAAe,CAAE//E,KAAMioF,KACtB,CAAClI,KAEJ9yN,EAAAA,EAAAA,IAAU,KACJoB,IACFu5N,EAAiB,IACjBT,IACA19L,MAED,CAACp7B,EAAQ84N,EAAkB19L,KAG9Bx8B,EAAAA,EAAAA,IAAU,MACHoB,GAAU4nD,GACbvsB,KAED,CAACA,EAAYusB,EAAa5nD,KAE7BpB,EAAAA,EAAAA,IAAU,WACK1H,IAATy6I,GAAsB/xG,IACxBugF,GAAa,IAEd,CAACwxB,EAAM/xG,EAAO8iC,KAGjB9jE,EAAAA,EAAAA,IAAU,KAEN+yI,IAAS8gF,EAAAA,GAAYzB,UAClBr/E,IAAS6nF,GACT92J,IAAc+2J,IACbL,EAAatI,mBACbsI,EAAatJ,YAEjB6J,GAAQlH,EAAAA,GAAYE,cAErB,CAACyG,EAAatJ,WAAYsJ,EAAatI,kBAAmB2I,GAAeD,EAAU92J,EAAWi3J,GAAShoF,KAE1G/yI,EAAAA,EAAAA,IAAU,KACJghC,GAAOi6L,OACTR,EAAgB,CACd9jO,KAAM,gBACNuuI,QAAS,CACP,CAAClkG,EAAMi6L,OAAQj6L,EAAM80L,eAI1B,CAAC90L,EAAOy5L,KAEXz6N,EAAAA,EAAAA,IAAU,KACR,GAAI6+G,GAAMq8G,UAAW,CACnB,MACEl4N,KAAMu3C,EAAQ,MAAEqY,EAAK,MAAEoyE,EAAK,gBAAEquF,GAC5Bx0G,EAAKq8G,WACH,YACJ5J,KAAgB6J,GACd9H,GAAmB,CAAC,EAClB+H,EAAkB9J,GAAex/J,EAAY7mB,KAAK,EAAGwlF,UAAWA,IAAS6gG,GAAc5gG,YAC7F+pG,EAAgB,CACd9jO,KAAM,iBACNuuI,QAAS,CACP3qF,WACAqY,MAAOA,GAA6B,MAApBA,EAAMyoK,OAAO,GACzB,IAAIzoK,IACJA,EACJoyE,WACIo2F,GAAmB,CACrB5qG,QAAS4qG,EACT9J,iBACG6J,KAIX,GACC,CAACt8G,EAAM47G,EAAiB3oK,KAE3B9xD,EAAAA,EAAAA,IAAU,KACJ6+G,GAAM+zG,kBAAkBx7N,QAC1BqjO,EAAgB,CACd9jO,KAAM,0BACNuuI,QAASrmB,EAAK+zG,iBAAiB,GAAGt9N,MAGrC,CAACmlO,EAAiB57G,GAAM+zG,mBAE3B,MAAM0I,IAAwBlmO,EAAAA,EAAAA,IAAY,KACxC6gO,KACC,CAACA,IAEEzD,IAAah1N,EAAAA,EAAAA,IAAQ,IACrBu1I,IAAS8gF,EAAAA,GAAYzB,SAChB,EA4cb,SACEqC,EAA4B,GAC5B0D,EACAoD,EACAtJ,GAEA,MAAMK,EAAiB6F,EACnBqD,GAAkBrD,EAAiBoD,GACnC,GACJ,IAAIx/I,EAAQk2I,EAKZ,OAHAl2I,EADoB04I,EAAO5qI,OAAOyoI,GAAkB,IAChCv6K,OAAO,CAACkL,EAAKw4K,IACxBx4K,EAAMw4K,EAAIznL,OAChB+nC,GACIA,CACT,CAxdW2/I,CAAcrJ,GAASoC,OAAQ0D,EAAiBqC,EAAahJ,SAAUgJ,EAAavI,WAC1F,CAACl/E,EAAMs/E,GAASoC,OAAQ0D,EAAiBqC,EAAahJ,SAAUgJ,EAAavI,YAE1EM,IAAe/0N,EAAAA,EAAAA,IAAQ,KAC3B,GAAIu1I,IAAS8gF,EAAAA,GAAYzB,SAGzB,OAmdJ,SAAyB78J,EAAkB4iK,EAA+C/E,GACxF,MAAMuI,EbvpBD,SAA4BzK,GACjC,MAAMoF,EAAWrF,GAAeC,GAChC,OAAON,GAAM0F,IAAa,EAC5B,CaopBuBsF,CAAmBrmK,EAAM27J,YACxCiC,EAAgBwI,GAAgBpmK,EAAM27J,WAAa,GAAGyK,MAAiBpmK,EAAM27J,WAAW1tL,OAAO,UAAOlrC,EACtG+6N,EAAkB99J,EAAM47J,YAC1B,GAAG57J,EAAM47J,gBAAgB57J,EAAM87J,SAAS97J,EAAM+7J,mBAC9Ch5N,GACE,MAAEs6D,EAAOrY,SAAUv3C,GAASuyD,EAC5BgmK,EAAiBpD,EAAkB0D,GAAmB1D,EAAiB5iK,EAAMi8J,eAAYl5N,EACzFg7N,EAAiBiI,GAAgB34N,MACvC,MAAO,CACLuwN,gBACAC,kBACAC,kBACArwN,OACA4vD,QACA0gK,iBAEJ,CApeWwI,CAAgBtB,EAAcrC,EAAiBuB,GAAkB,KACvE,CAAC3mF,EAAMynF,EAAcrC,EAAiBuB,IAEnCqC,IAAqB3mO,EAAAA,EAAAA,IAAY,KACrC2lO,GAAQlH,EAAAA,GAAYE,cACnB,CAACgH,KAEEiB,IAA0B5mO,EAAAA,EAAAA,IAAY,KAC1C6gO,KACC,CAACA,IAyBEgG,IAAW7mO,EAAAA,EAAAA,IAAY,KAC3BglO,EAAgB,CACd8B,iBAAkB1B,EAAahJ,SAC/BO,gBAAiByI,EAAazI,gBAC9BG,kBAAmBsI,EAAatI,kBAChCD,UAAWuI,EAAavI,aAEzB,CAACmI,EAAiBI,IAEf2B,IAA0B/mO,EAAAA,EAAAA,IAAaorE,IAC3C,MAAM,YAAE47J,GAAgB57J,EACxB+5J,EAAuB6B,GACvBH,MACC,CAACA,KAEJ,SAASI,GAAmBC,EAA0BrtN,GACpD,OAAQqtN,GACN,KAAKzI,EAAAA,GAAYzB,SACf,OACE38N,EAAAA,GAAAA,GAAC28N,GAAQ,CACPxvN,MAAOi8G,EAAMj8G,MACbf,YAAag9G,EAAMh9G,YACnBpK,MAAOonH,EAAMpnH,MACb8tI,SAAUk1F,EACVnI,eAAgBkI,EAAahJ,UAAY2G,EACrCqD,GAAkBrD,EAAiBqC,EAAahJ,eAChDl5N,EACJk6N,WAAYA,GACZH,QAASA,EACTE,aAAcA,GACdM,iBAAkBA,EAClBF,mBAAoBA,EACpBV,UAAWuI,EAAavI,UACxBS,YAAalyN,QAAQ6xN,GAASkK,4BAC9B3J,iBAAkB/zG,EAAM+zG,iBACxBv+I,cAAeA,EACfo+I,YAAan+I,EACb7e,QAASA,IAGf,KAAKo+J,EAAAA,GAAYC,cACf,OACEr+N,EAAAA,GAAAA,GAACwiO,GAAuB,CACtB1iK,MAAOilK,EACP5H,iBAAkB/zG,EAAM+zG,iBACxBrtF,SAAUk1F,EACVvC,eAAgB6D,KAGtB,KAAKlI,EAAAA,GAAY2I,gBACf,OACE/mO,EAAAA,GAAAA,GAACsgO,GAAe,CACdxgK,MAAOilK,EACP5H,iBAAkB/zG,EAAM+zG,iBACxBoD,iBAAkB2E,EAClB1rN,SAAUqtN,IAAgBvpF,IAGhC,KAAK8gF,EAAAA,GAAYE,YACf,OACEt+N,EAAAA,GAAAA,GAACs+N,GAAW,CACVx+J,MAAOilK,EACPj1F,SAAUk1F,EACVvD,mBAAoB12N,SAASq+G,EAAM49G,mBAAqB59G,EAAMq4G,oBAC9DC,mBAAoBA,EACpBC,YAAaA,EACbC,QAASA,EACTvlK,YAAaA,EACb7iD,SAAUA,IAGhB,KAAK4kN,EAAAA,GAAYI,aACf,OACEx+N,EAAAA,GAAAA,GAACw+N,GAAY,CACX1+J,MAAOilK,EACPj1F,SAAUk1F,EACV/H,YAAalyN,QAAQ6xN,GAASkK,4BAC9BlE,UAAW73N,QAAQ6xN,GAASqK,kBAAoBrK,GAASsK,uBACzDrE,UAAW93N,QAAQ6xN,GAASuK,kBAAoBvK,GAASwK,uBACzDtE,SAAU/3N,QAAQ6xN,GAASyK,iBAC3BhrK,YAAaA,IAGnB,KAAK+hK,EAAAA,GAAYM,SACf,OACE1+N,EAAAA,GAAAA,GAAC0+N,GAAQ,CACP5+J,MAAOilK,EACPj1F,SAAUk1F,EACVtC,gBAAiBA,GAAmB,GACpC32I,SAAU6wI,EAAS7wI,WAGzB,KAAKqyI,EAAAA,GAAY8B,eACf,OACElgO,EAAAA,GAAAA,GAACkgO,GAAc,CACb3oN,IAAKosN,EACLxD,WAAY4D,EACZ3D,oBAAqBsG,GACrB76N,QAASm7B,IAGf,QACE,OAEN,CAEA,MAAMsgM,IAAkB3nO,EAAAA,EAAAA,IAAY,KAClC,MAAM,SAAE08N,GAAa0I,EACfwC,EAwVV,SAAwBxC,GACtB,MAAM,YACJrJ,EAAW,YACXC,EAAW,KACXC,EAAI,MACJ97J,EAAK,YACL+7J,EAAW,SACXC,EACAh3K,SAAUv3C,EAAI,MACd4vD,EAAK,MACLoyE,GACEw1F,EAWJ,MAAO,CACLx3N,OACA4vD,QACAoyE,QACAquF,gBAbsB,CACtBlC,cACAC,cACAC,OACA97J,QACA+7J,cACAC,YASJ,CApXwB0L,CAAezC,GACnCL,EAAsB,CAAE6C,cAAalL,cACpC,CAACqI,EAAuBK,IAErB0C,IAAkB9nO,EAAAA,EAAAA,IAAY,KAClC,MAAMgnO,EA6XV,SAAwB5B,GACtB,MAAM,WACJtJ,EAAU,WAAEO,EAAU,OAAEC,EAAM,IAAEC,EAAG,eAAEC,EAAc,WAAEC,GACnD2I,GACG2C,EAAaC,GAAc1L,EAAOl9I,MAAM,KAW/C,MAAO,CACLrmE,KAXW,CACX+iN,aACAO,aACA0L,cACAC,aACAzL,MACAnhG,QAASohG,EACTyL,IAAKxL,GAMT,CA/YwByL,CAAe9C,GACnCH,EAAoB,CAClB+B,iBAED,CAAC/B,EAAqBG,IAEnB1uH,IAAoB9pG,EAAAA,EAAAA,GAAgB,KACxC,OAAQ+wI,GACN,KAAK8gF,EAAAA,GAAYI,aACf1yG,GAAa,GACbw7G,KACA,MAEF,KAAKlJ,EAAAA,GAAYM,SACf4G,GAAQlH,EAAAA,GAAYzB,UACpB,MAEF,KAAKyB,EAAAA,GAAYC,cACfiH,GAAQlH,EAAAA,GAAY2I,iBACpB,MAEF,KAAK3I,EAAAA,GAAY2I,gBACf,GAAsB,KAAlB9B,EACF,OAGFn5G,GAAa,GACb+4G,EAAwB,CAAE9lH,SAAUkmH,IACpC,MAEF,KAAK7G,EAAAA,GAAYE,YACfxyG,GAAa,GACb27G,KACAzC,EAAgB,CAAE9jO,KAAM,0BAA2BuuI,QAAS,KAC5D,MAEF,KAAK2uF,EAAAA,GAAYzB,SAAU,CACzB,GAAIS,EAGF,OAFAtxG,GAAa,QACbw5G,GAAQlH,EAAAA,GAAY8B,gBAItB,GAAI92G,GAAMq8G,YAAcp3J,IAAc02J,EAAahJ,SAGjD,OAFAjwG,GAAa,QACbw7G,KAIF,GACEvC,EAAatI,qBACR6H,GAAsBA,GAAuBp4M,KAAKC,MAAQ,IA5VvC,GA+VxB,YADAm5M,GAAQlH,EAAAA,GAAY2I,iBAItB,IACGhC,EAAatI,oBAEXwH,IAAmBT,KAAqBa,GACrCJ,IAAmBR,KAAoBW,GAI7C,YADAkB,GAAQlH,EAAAA,GAAYE,aAItB,MAAM,MAAEnhK,EAAK,MAAEoyE,EAAK,SAAEzqF,GAAaigL,EAC7B+C,EAA2BlL,GAASqK,mBAAqB13F,GACzDqtF,GAASuK,mBAAqBhqK,GAC9By/J,GAASyK,kBAAoBviL,EAEnC,GAAK83K,GAASkK,6BAA+Bz4J,GAAcy5J,EAEzD,YADAxC,GAAQlH,EAAAA,GAAYI,cAItB,GAAI5B,GAASkK,6BAA+B/B,EAAahJ,UAAY2G,GAAiB/gO,OAEpF,YADA2jO,GAAQlH,EAAAA,GAAYM,UAItB5yG,GAAa,GACb06G,KACA,KACF,MAIJj8N,EAAAA,EAAAA,IAAU,IACD+yI,IAAS8gF,EAAAA,GAAY2I,iBACxBzpL,EAAAA,GAAAA,GAAyB,CAAEjwC,QAASgpG,UACpCxzG,EAEN,CAACwzG,GAAmBinC,IAEpB,MAAMnhE,IAAmBx8E,EAAAA,EAAAA,IAAY,KACnCqlO,EAAgB,CACd9jO,KAAM,eAER29E,GAAiB,GACjBhzE,KACC,CAACA,EAASm5N,IAEP3xJ,IAAkB1zE,EAAAA,EAAAA,IAAY,KAClC2lO,GAAQhoF,IAAS8gF,EAAAA,GAAY2I,gBAAkB3I,EAAAA,GAAYC,cAAgBD,EAAAA,GAAYzB,WACtF,CAAC2I,GAAShoF,IAEPn0B,IAAcphH,EAAAA,EAAAA,IAAQ,KAC1B,OAAQu1I,GACN,KAAK8gF,EAAAA,GAAYzB,SACf,OAAOplL,EAAQ,mBACjB,KAAK6mL,EAAAA,GAAYI,aACf,OAAOjnL,EAAQ,uBACjB,KAAK6mL,EAAAA,GAAYM,SACf,OAAOnnL,EAAQ,yBACjB,KAAK6mL,EAAAA,GAAYC,cACf,OAAO9mL,EAAQ,yBACjB,KAAK6mL,EAAAA,GAAY2I,gBACf,OAAOxvL,EAAQ,gCACjB,KAAK6mL,EAAAA,GAAYE,YACf,OAAO/mL,EAAQ,mBACjB,KAAK6mL,EAAAA,GAAY8B,eACf,OAAO3oL,EAAQ,kCACjB,QACE,MAAO,KAEV,CAAC+lG,EAAM/lG,IAEJxiC,GAAauoI,IAAS8gF,EAAAA,GAAYzB,SACpCplL,EAAQ,qBAAqBw2C,EAAAA,GAAAA,IAAuBgvI,GAAYH,EAAS7wI,SAAUx0C,EAAQwjB,OAC3FhuD,EAAK,mBAwBT,GAAIo3N,EACF,OACEvkO,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJtN,UAAU,QACV6L,OAAQ4nD,EACR1nD,QAASm7B,EACTl7B,oBAAqBqwE,GAAiBp8E,SAAA,EAEtCC,EAAAA,GAAAA,GAAA,KAAAD,SACGgN,EAAK,oCAAgClK,EAAW,CAAE67C,WAAW,EAAMiV,kBAAmB,CAAC,WAE1F3zD,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAClCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLE,QAAM,EACNC,QAASi5B,EAAWjnC,SAEnBw3C,EAAQ,aAOnB,MAAMwwL,GA7CN,WACE,GAAIpzM,EACF,OAAO,EAGT,OAAQ2oH,GACN,KAAK8gF,EAAAA,GAAYzB,SACf,OAAO5xN,QAAQ6xN,GAASW,YAAc3+I,EAExC,KAAKw/I,EAAAA,GAAYE,YACf,OAAOvzN,QACuB,KAA5Bg6N,EAAatJ,YACTiG,GAAkD,KAA5BqD,EAAa/I,YACf,KAArB+I,EAAa7I,KACW,KAAxB6I,EAAa9I,QAGpB,QACE,OAAO,EAEb,CAyByB+L,GAEzB,OACEpoO,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJtN,WAAWqW,EAAAA,GAAAA,GAAe,eAAgBymN,GAASqL,aAAe,aAClEt8N,OAAQ4nD,EACR1nD,QAASm7B,EACTl7B,oBAAqBqwE,GAAiBp8E,SAAA,EAEtCH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,SAASuW,IAAKkhC,EAAQ1lB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAC7DC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,eACV+N,MAAM,cACNyE,OAAK,EACLpS,KAAK,UACL6N,QAASuvI,IAAS8gF,EAAAA,GAAYzB,SAAW31L,EAAaqsC,GACtD9gE,UAAWxF,EAAK,SAAShN,UAEzBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAM+vI,IAAS8gF,EAAAA,GAAYzB,SAAW,QAAU,kBAExD38N,EAAAA,GAAAA,GAAA,MAAAD,SAAKopH,aAEGtmH,IAATy6I,GACCt9I,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACT1vB,KAAK,QACL2vB,UAAWogH,EACXrsC,eAAa,EACbi3H,eAAgB9J,EAAAA,GAAY8B,eAAengO,SAEzCyZ,IACAxZ,EAAAA,GAAAA,GAAA,OAAKF,UAAU,wBAAuBC,SACnC6mO,GAAmBtpF,EAAM9jI,QAKhCxZ,EAAAA,GAAAA,GAAA,OAAKF,UAAU,gBAAeC,UAC5BC,EAAAA,GAAAA,GAACwoB,GAAAA,EAAO,CAAC3a,MAAM,WAGlBw3N,KACCrlO,EAAAA,GAAAA,GAAA,OAAKF,UAAU,SAAQC,UACrBC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,cACVoB,KAAK,SACL6M,QAASsoG,GACTl2F,SAAU4nN,GACVpzM,UAAWA,EAAU50B,SAEpBgV,OAINw2B,IAAUA,EAAMi6L,OAhXrB,WACE,GAAKj6L,EAGL,OACE3rC,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJtN,UAAU,QACV6L,OAAQZ,QAAQwgC,GAChB1/B,QAASg6N,GAAsB9lO,SAAA,EAE/BC,EAAAA,GAAAA,GAAA,MAAAD,SAAKwrC,EAAM48L,eAAiBp7N,EAAKsyG,YAAY9zE,EAAM48L,gBAAkBp7N,EAAK,uBAC1E/M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAClCC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLE,QAAM,EACNC,QAASw4N,GAAwBxmO,SAEhCgN,EAAK,YAKhB,CA2V8Bq7N,SA8DhC,SAAShC,GAAmB1D,EAAmC2F,GAC7D,OAAO3F,EAAgBltL,KAAK,EAAG31C,QAASA,IAAOwoO,EACjD,CAEA,SAAStC,GAAkBrD,EAAmCoD,GAC5D,MAAM78L,EAASm9L,GAAmB1D,EAAiBoD,GACnD,OAAO78L,GAAQ+1L,MACjB,CCxoBA,MAmEA,IAAergO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM,QAAEinO,IAAYv5N,EAAAA,EAAAA,KAAe1N,GAAQ2iE,QAE3C,MAAO,CACLskK,YALc35N,CAnE4B45N,EAC9C58N,SACAE,UACAy8N,cAEA,MAAMv7N,GAAOyqC,EAAAA,GAAAA,MAEN+b,EAAaxsB,EAAWC,IAAc/nC,EAAAA,EAAAA,MAE7CsL,EAAAA,EAAAA,IAAU,KACJoB,GACFo7B,KAED,CAACp7B,EAAQo7B,IAEZ,MAAMyhM,GAAc1sH,EAAAA,GAAAA,GAAYwsH,GAC1BG,EAAmBH,GAAWE,EAE9B1L,GAAe/0N,EAAAA,EAAAA,IAAQ,KAC3B,GAAK0gO,EACL,OAyDJ,SAAyB/K,EACvB7mM,EAKAgnM,GACA,IAAKhnM,EACH,MAAO,CAAE6mM,iBAEX,MAAM,gBAAEE,GAAoB/mM,EACtB6xM,EAAc9K,GAAiBlC,YACjC,GAAGkC,EAAgBlC,gBAAgBkC,EAAgBhC,SAASgC,EAAgB/B,mBAC5Eh5N,GACE,MAAEs6D,EAAK,KAAE5vD,GAASspB,EACxB,MAAO,CACL6mM,gBACAE,gBAAiB8K,EACjBn7N,OACA4vD,QACA0gK,iBAEJ,CA/EWwI,CAAgBoC,EAAiBE,iBAAkBF,EAAiB5xM,KAAM4xM,EAAiB5K,iBACjG,CAAC4K,IAEJ,OACEzoO,EAAAA,GAAAA,GAACoN,EAAAA,EAAK,CACJtN,UAAU,oCACV6L,OAAQ4nD,EACR1nD,QAASm7B,EACTl7B,oBAAqBD,EAAQ9L,SAE5B0oO,IACC7oO,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,SAASuW,IAAKtJ,EAAK8kB,MAAQ,WAAQhvB,EAAU9C,SAAA,EAC1DC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,eACV+N,MAAM,cACNyE,OAAK,EACLpS,KAAK,UACL6N,QAASi5B,EACTz0B,UAAU,QAAOxS,UAEjBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAEb3N,EAAAA,GAAAA,IAAA,MAAAG,SAAA,CACG,IACAgN,EAAK,kBACL,WAGL/M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,gCAA+BC,UAC5CC,EAAAA,GAAAA,GAAC28N,GAAQ,CACPE,eAAgB4L,EAAiB5L,eACjCE,WAAY0L,EAAiBG,YAC7BpM,UAAWiM,EAAiBjM,UAC5BI,QAAS6L,EAAiB7L,QAC1BE,aAAcA,EACd3vN,MAAOs7N,EAAiBt7N,MACxBf,YAAaq8N,EAAiBr8N,YAC9BpK,MAAOymO,EAAiBzmO,kBCrFtC,GAA4E,WAA5E,GAA+F,WCqM/F,IAAerD,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAU8mC,YAGF,CACLj5B,KAHWi5B,GAAO37B,QAAS6nC,EAAAA,EAAAA,KAAWhzC,EAAQ8mC,EAAM37B,aAAU3J,IAFhD8L,CAjKkCk6N,EACpD1gM,QACAj5B,WAEA,MAAM,mBAAE45N,EAAkB,wBAAEC,EAAuB,iBAAEnnM,IAAqB51B,EAAAA,EAAAA,OACpE,aAAEg9N,GAAiB7gM,GAAS,CAAC,EAE7Bp7B,GAAOC,EAAAA,EAAAA,MACNsoF,EAAmB2zI,IAAwB98N,EAAAA,EAAAA,IAAmB,IAE/D65B,GAAUj+B,EAAAA,EAAAA,IAAQ,IAAMihO,GAAcv1N,IAAK0gC,GAASA,EAAKt0C,KAAO0kC,GAAAA,EAAkB,CAACykM,KAClFE,EAAiBC,IAAiBphO,EAAAA,EAAAA,IAAQ,KAC/C,IAAKihO,GAAcrnO,OAAQ,MAAO,CAAC,GAAI,IACvC,MAAOynO,EAAmBC,IAAc1xF,EAAAA,GAAAA,IAAUqxF,EAAe70L,GAASA,EAAKm1L,6BAC/E,MAAO,CAACF,EAAkB31N,IAAK0gC,GAASA,EAAKt0C,IAAKwpO,EAAW51N,IAAK0gC,GAASA,EAAKt0C,MAC/E,CAACmpO,IAEEO,GAA0BxhO,EAAAA,EAAAA,IAAQ,IAC/BihO,GAAcrrM,OAAQwW,GAASA,EAAKq1L,4BAA8Br1L,EAAKm1L,6BAC3E71N,IAAK0gC,GAASA,EAAKt0C,IACrB,CAACmpO,IAEES,GAAyB1hO,EAAAA,EAAAA,IAAQ,KACrC,GAAKihO,EACL,OAAQA,EAAaxiJ,KAAMryC,GAASA,EAAKq1L,6BAA+Br1L,EAAKm1L,8BAC5E,CAACN,IAEEU,GAAe3hO,EAAAA,EAAAA,IAAQ,KAC3B,MAAM2+B,GAAQwF,EAAAA,EAAAA,MAAYxF,MAAMC,KAChC,OAAO4iM,GAAyB91N,IAAK5T,GAAO6mC,EAAM7mC,KACjD,CAAC0pO,KAEJh/N,EAAAA,EAAAA,IAAU,KACR0+N,EAAqBE,IACpB,CAACA,IAEJ,MAAMnuM,GAAczuB,EAAAA,EAAAA,GAAgB,IAAMw8N,KAEpCY,GAAuBhqO,EAAAA,EAAAA,IAAY,KACvCmpO,EAAmB,CAAEt8N,OAAQ0C,EAAMrP,GAAImmC,QAASsvD,IAChDyzI,KACC,CAACzzI,EAAmBpmF,IAEjBmvI,GAAyB1+I,EAAAA,EAAAA,IAAY,KACzCiiC,KACC,IAEGgoM,GAAoB7hO,EAAAA,EAAAA,IAAQ,KAChC,GAAKmH,EACL,OAAOnE,QAAQmE,GAAMsgH,WAAatgH,GAAMu8M,aAAa/8F,cACpD,CAACx/G,IAEE26N,GAAoB9hO,EAAAA,EAAAA,IAAQ,IACzB6hO,EACH78N,EAA8B,IAAzBi8N,GAAcrnO,OAAe,0BAA4B,4BAC9DoL,EAAK,yBAA0Bi8N,GAAcrnO,QAChD,CAACioO,EAAmB78N,EAAMi8N,GAAcrnO,SAErCmoO,GAAqB/hO,EAAAA,EAAAA,IAAQ,KACjC,IAAKwhO,GAAyB5nO,SAAW+nO,GAAc/nO,OAAQ,OAC/D,MAAM0tG,EAASo6H,EAAyB,8BAAgC,uBACxE,IAAI3mM,EAAU,GAAGusE,OACb9tG,EAAS,EAACsoC,EAAAA,EAAAA,IAAgB6/L,EAAa,KAgB3C,OAfuC,IAAnCH,EAAwB5nO,QAC1BmhC,EAAU,GAAGusE,OACb9tG,EAAS,EAACsoC,EAAAA,EAAAA,IAAgB6/L,EAAa,KAAK7/L,EAAAA,EAAAA,IAAgB6/L,EAAa,MAC7B,IAAnCH,EAAwB5nO,QACjCmhC,EAAU,GAAGusE,SACb9tG,EAAS,EAACsoC,EAAAA,EAAAA,IAAgB6/L,EAAa,KAAK7/L,EAAAA,EAAAA,IAAgB6/L,EAAa,KAAK7/L,EAAAA,EAAAA,IAAgB6/L,EAAa,MAClGH,EAAwB5nO,OAAS,IAC1CmhC,EAAU,GAAGusE,QACb9tG,EAAS,EACPsoC,EAAAA,EAAAA,IAAgB6/L,EAAa,KAC7B7/L,EAAAA,EAAAA,IAAgB6/L,EAAa,KAC5BH,EAAwB5nO,OAAS,GAAGmrF,aAIlC//E,EAAK+1B,EAASvhC,OAAQsB,EAAW6mO,EAAa/nO,SACpD,CAAC4nO,EAAyBE,EAAwB18N,EAAM28N,IAErDK,EAAoBh/N,QAAQ2+N,GAAc/nO,QAC1CqoO,EAAuBj/N,QAAQo+N,GAAexnO,QAEpD,OACE/B,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJzB,OAAQZ,QAAQi7B,GAAW92B,GAC3BmzB,iBD3HoB,WC4HpBx2B,QAASmvB,EACTsH,QAAM,EAAAviC,SAAA,EAENC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN3N,KAAK,UACLJ,UDnI2C,WCoI3CyS,UAAWxF,EAAK,SAChBgB,QAASitB,EAAYj7B,UAErBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,YAEZu8N,IACClqO,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAACqzC,GAAAA,EAAU,CACTvzC,UD5ImL,WC6InLwzC,MAAOo2L,EACPxpO,KAAK,WAEPF,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAazd,SACLgN,EAApB68N,EAAyB,4BAAoC,qCAEhE5pO,EAAAA,GAAAA,GAAA,KAAGF,UAAW0d,GAAmBzd,UAC9Bi0B,EAAAA,GAAAA,GAAW81M,EAAoB,CAAC,uBAEnC9pO,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLg1B,qBAAmB,EACnBD,SAAO,EACP50B,QAASswI,EAAuBt+I,SAE/BgN,EAAK,sCAIXg9N,GAAqBC,IACpBhqO,EAAAA,GAAAA,GAACw4H,GAAAA,EAAS,CAAC14H,UDhKmG,WCgKvEC,SACpCgN,EAAK,4BAGTi9N,IACCpqO,EAAAA,GAAAA,IAAAqmC,GAAAA,GAAA,CAAAlmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAIF,UAAW0d,GAAazd,SAAEgN,EAAK,yBACnC/M,EAAAA,GAAAA,GAAA,KAAGF,UAAW0d,GAAmBzd,SAC9B8pO,KAEH7pO,EAAAA,GAAAA,GAACqkC,GAAAA,EAAU,CACTvkC,UD3KkI,WC4KlIwkC,QAAS0B,EACTtC,YAAa4xD,EACb+iD,oBAAqB6wF,EACrBe,yBAA0Bl9N,EAAK,4BAC/Bg4B,oBAAqBkkM,EACrBrwG,YAAagxG,EACb3kM,eAAa,EACbC,YAAU,EACVC,cAAc,aAEfykM,IACC5pO,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UDxLyJ,WCyLzJiO,QAAS47N,EACTxpN,UAAWm1E,EAAkB3zF,OAAO5B,SAEnCgN,EAAK,0C,gBC5LpB,MCwGA,IAAepO,EAAAA,EAAAA,IAhFWurO,EACxB/hM,YAEA,MAAM,uBACJgiM,IACEn+N,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,KACPpM,GAAUuvC,EAAAA,GAAAA,GAAiBhI,GAAOvnC,SAAS,IAE3C,aACJkjB,EAAY,qBACZE,IACEE,EAAAA,GAAAA,GAA4BnZ,QAAQo9B,IAElCiiM,GAAkB79N,EAAAA,EAAAA,GAAgB,QAIlCyuB,GAAczuB,EAAAA,EAAAA,GAAgB,KAClC49N,MAGF,IAAKrmN,IAAiBljB,EACpB,OAGF,MAAMypO,GAAQC,EAAAA,EAAAA,IAAa1pO,GACrBy/D,GAAQwD,EAAAA,EAAAA,MAAY33B,EAAAA,EAAAA,OACpBq+L,EAAwBx9N,EAARs9N,EAAa,0BAAkC,oCAgCrE,OACEzqO,EAAAA,GAAAA,IAAA,OAAKE,WAAWqW,EAAAA,GAAAA,GDtFG,WCsFyB6N,GAAsBjkB,SAAA,CA/BpE,WACE,IAAKa,GAASmS,QACZ,OAEF,MAAM,MAAEy3N,EAAK,MAAEvoO,GAAUrB,EAAQmS,QACjC,OAAIy3N,GAEAxqO,EAAAA,GAAAA,GAACwhI,GAAAA,GAAK,CACJ1hI,UD/D8G,WCgE9GugE,MAAOA,EACPz/D,QAASA,EACTU,OAAQmgI,EAAAA,GAAYgpG,aACpBvkN,UAAQ,EACRK,OAAQ6jN,EACR3jN,QAASuU,IAGJ/4B,GAAOwF,SAEdzH,EAAAA,GAAAA,GAAC0qO,GAAAA,EAAU,CACT5qO,UD3EiI,WC4EjIc,QAASA,EACTU,OAAO,eACPqpO,OAAQ3vM,SANP,CAWT,CAIK4vM,IACD5qO,EAAAA,GAAAA,GAAA,OAAKF,UDxFoJ,WCwF3HC,UAC5BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL26C,OAAK,EACLx6C,QAASitB,EACTuxE,MAAI,EACJrsG,KAAK,UACL2N,MAAiB,SAAVwyD,EAAmB,OAAS,YACnCvgE,UD/F2K,WC+FhJC,SAE1BwqO,WCjBX,IAAe5rO,EAAAA,EAAAA,IA7DqCksO,EAClDl/N,aAEA,MAAM4rC,GAAUvqC,EAAAA,EAAAA,KACVD,GAAOyqC,EAAAA,GAAAA,MACP,mCAAEszL,EAAkC,iBAAEvrK,IAAqBvzD,EAAAA,EAAAA,OAE1D++N,EAAoBC,IAAyB7+N,EAAAA,EAAAA,KAAS,GAEvDmd,GAAejgB,EAAAA,EAAAA,MAEfwC,GAAUlM,EAAAA,EAAAA,IAAY,KAC1BmrO,EAAmC,CAAEC,wBACpC,CAACA,IAEExnM,GAAiB5jC,EAAAA,EAAAA,IAAY,KACjC4/D,EAAiB,CAAE0rK,wBAAwB,IAC3CH,EAAmC,CAAEC,wBACpC,CAACA,IAEEG,GAAwBvrO,EAAAA,EAAAA,IAAa6E,KAC1B,IAAXA,GAAc++B,KACjB,CAACA,IAEE/d,GAAgBuoC,EAAAA,GAAAA,GAA0BzkC,EAAc3d,EAAQu/N,EAAuB,WAE7F,OACEtrO,EAAAA,GAAAA,IAACwN,EAAAA,EAAK,CACJtN,WAAWqW,EAAAA,GAAAA,GAAe,WAC1BhJ,MAAOJ,EAAK,iBACZpB,OAAQA,EACRE,QAASA,EAAQ9L,SAAA,EAEjBC,EAAAA,GAAAA,GAAA,KAAAD,SAAIgN,EAAK,8BACT/M,EAAAA,GAAAA,GAAC42D,GAAAA,EAAQ,CACP92D,UAAU,kBACVoN,MAAOH,EAAK,iBACZm8B,QAAS6hM,EACTl0K,QAASm0K,KAEXprO,EAAAA,GAAAA,IAAA,OACEE,UAAU,sBACVmU,IAAKqV,EACL+lC,UAAW7pC,EAAczlB,SAAA,EAEzBC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UAAU,wBACVgO,QAAM,EACNC,QAASw1B,EACT11B,MAAM,SAAQ9N,SAEbw3C,EAAQ,cAEXv3C,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CAAC9N,UAAU,wBAAwBgO,QAAM,EAACC,QAASlC,EAAQ9L,SAC/Dw3C,EAAQ,oBCqDnB,IAAe54C,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IACjBtN,IACC,MAAM8pO,EAAkB9pO,EAAO6yC,UAAUi3L,gBACnCC,EAAkB/pO,EAAO6yC,UAAUk3L,gBACnCC,EAAkBhqO,EAAOiqO,mBAAoBl3L,EAAAA,EAAAA,KAAW/yC,EAAQA,EAAOiqO,wBAAqBzoO,EAGlG,MAAO,CACLsoO,kBACAC,kBACAG,wBAL8BF,IAAmB5lE,EAAAA,EAAAA,IAAgB4lE,KALnD18N,CAhGO68N,EACzBrjM,QACAgjM,kBACAC,kBACAG,8BAEA,MAAM,wBACJE,EAAuB,QACvBt1M,IACEnqB,EAAAA,EAAAA,MACEe,GAAOyqC,EAAAA,GAAAA,KAEP7rC,EAASZ,QAAQo9B,GAEjBnN,GAAczuB,EAAAA,EAAAA,GAAgB,KAClCk/N,MAGIC,GAAen/N,EAAAA,EAAAA,GAAgB,KACnCk/N,IACIL,GACFj1M,EAAQ,CAAE5e,IAAK6zN,MAIb/iM,GAAStgC,EAAAA,EAAAA,IAAQ,KAEnBnI,EAAAA,GAAAA,IAAA,OAAKE,UCzDc,WDyDWC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC6nG,GAAAA,EAAuB,CACtB3nG,KAAM,IACNE,OAAQC,GAAAA,EAAesrO,WACvBnrO,QAAM,KAERR,EAAAA,GAAAA,GAAA,OAAKF,UC/D+B,WD+DPC,SAC1BgN,EAAK,gCAIX,CAACA,IAEEg9B,GAAShiC,EAAAA,EAAAA,IAAQ,KACrB,GAAK4D,EACL,OACE/L,EAAAA,GAAAA,IAAA,OAAKE,UCzEqD,WDyE5BC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL9N,UC3EgF,WD4EhFiO,QAAS29N,EACT9+F,mBAAiB,EAAA7sI,SAEhBgN,EAAK,mBAER/M,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACLE,QAAM,EACNC,QAASitB,EACT4xG,mBAAiB,EAAA7sI,SAEhBgN,EAAK,0BAIX,CAACA,EAAMpB,IAEV,IAAKw/N,IAAoBI,EAAyB,OAElD,MAAMt4M,EAAO,IAAI/G,KAAuB,IAAlBi/M,GAEhBS,GACJ5rO,EAAAA,GAAAA,GAACi+F,GAAAA,EAAI,CAAClwF,QAAS29N,EAAcxtI,WAAS,EAAAn+F,UACnC0/H,EAAAA,GAAAA,GAAe8rG,KAId7tH,EAAe,CACnB,CAAC,YAAa3wG,EAAK,+BAAgCA,EAAK,mCACxD,CAAC,OAAQA,EAAK,8BAA+BA,EAAK,kCAClD,CAAC,cAAeA,EAAK,4BACnBA,EAAK,8BAA+B,CAClC6+N,UACA34M,MAAM6nC,EAAAA,GAAAA,GAAmB7nC,EAAMlmB,EAAKguD,OACnC,CACDrc,WAAW,MAIjB,OACE1+C,EAAAA,GAAAA,GAAC29G,GAAAA,EAAe,CACdhyG,OAAQA,EACR08B,OAAQA,EACRq1E,aAAcA,EACd3zE,OAAQA,EACR8hM,aAAW,EACXhgO,QAASmvB,OEzHf,GAA0Q,WCgP1Q,IAAer8B,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAU8mC,YACT,MAAM/T,EAAgB/yB,EAAO+yB,cACvB+f,EAAOhM,GAAOtK,QAASuW,EAAAA,EAAAA,KAAW/yC,EAAQ8mC,EAAMtK,aAAUh7B,EAC1DyxC,EAAenM,GAAOtK,QACxB0W,EAAAA,EAAAA,KAAmBlzC,EAAQ8mC,EAAMtK,aAAUh7B,EAEzCipO,EAAcx3L,GAAcw3L,YAC5BC,EAAgBz3L,GAAc03L,qBAC9BC,EAAoB33L,GAAc43L,yBAExC,MAAO,CACL/3L,OACA/f,gBACA03M,cACAC,gBACAE,sBAhBct9N,CA/MOw9N,EACzBhkM,QACAgM,OACA/f,gBACA03M,cACAC,gBACAE,wBAEA,MAAM,wBACJG,IACEpgO,EAAAA,EAAAA,MACEe,GAAOyqC,EAAAA,GAAAA,KACP7rC,EAASZ,QAAQo9B,IAChBkkM,EAAkBC,IAAuBngO,EAAAA,EAAAA,KAAS,GAEnD6uB,GAAczuB,EAAAA,EAAAA,GAAgB,KAClC6/N,OAGF7hO,EAAAA,EAAAA,IAAU,KACHoB,GACH2gO,GAAoB,IAErB,CAAC3gO,IAEJ,MAAM4gO,GAAmBhgO,EAAAA,EAAAA,GAAgB,KACvC+/N,GAAoB,KAGhBE,GAAoBjgO,EAAAA,EAAAA,GAAgB,KACxC+/N,GAAoB,KAGhBG,EAAevrO,IACnB,MAAMo5K,EAAmB,UAATp5K,EACVu/D,EAAsB1zD,EAAVutK,EAAe,mBAA2B,uBACtDoyD,EAAapyD,EDrE8U,WAA2B,WCuE5X,OACEt6K,EAAAA,GAAAA,GAAA,QAAMF,WAAWqW,EAAAA,GAAAA,GDxE0R,WCwE7Pu2N,GAAY3sO,SACvD0gE,KAKDp4B,GAAStgC,EAAAA,EAAAA,IAAQ,KACrB,KAAKogC,GAAUgM,GAAS23L,GAAgBngO,GAAQ,OAEhD,MAAMghO,EAASN,GAAoBN,EAAgBA,EAAgBD,EAC7Dc,EAAeD,EAAOvxI,MACtByxI,EAAoBF,EAAOE,kBAC3BC,EAAiBH,EAAOG,eACxB53H,EAAey3H,EAAOzsB,MACtB6sB,EAAY73H,EAAe,EAC3B83H,EAAa93H,EAAe,EAC5B+3H,GAAgBZ,GAAoBN,EAAgBA,EAAc7rB,MAAQ4rB,EAAY5rB,MAE5F,IAAI9qG,EAAgB,EAKlBA,EAHG03H,GAEMA,EAAiBD,EACV35N,KAAKma,IAAI,KAAOu/M,EAAeC,IAAsBC,EAAiBD,IAFtE,EAOlB,MAAMj5N,EAAWo5N,EAAa,GAAM95N,KAAKma,IAAI,EAAGna,KAAK4a,IAAI,EAAGsnF,IAEtD83H,EAAWjB,EAAoBA,EAAoB/4N,KAAKmI,MAAM6Q,KAAKC,MAAQ,KAAQ,EACnFghN,EAAgBpB,EAAgBA,EAAc3wI,MAAQ0wI,EAAY1wI,MAAQ,EAC1EgyI,EAAoBrB,GAAiBE,EAgD3C,IAAIoB,EAAyC,OACzCn4H,GAAgB,GAAK+3H,GAAgB,GAAK/3H,IAAiB+3H,IAC7DI,EAAqBn4H,EAAe+3H,EAAe,UAAY,YAG7D/3H,EAAe,GAAK+3H,EAAe,GAAK/3H,IAAiB+3H,IAC3DI,EAAqBn4H,EAAe+3H,EAAe,WAAa,WAGlE,MAAMK,EAAmBvgO,EAAK,sBAE9B,OACEnN,EAAAA,GAAAA,IAAA,OAAKE,UDpKmC,WCoKVC,SAAA,EAC5BC,EAAAA,GAAAA,GAACs2G,GAAAA,EAAe,CACd5B,SAAUs4H,OAAanqO,EAAYkK,EAAK,cAAe,CAAEmzM,MAAOhrG,IAChEP,UAAWq4H,EAAajgO,EAAK,uBAAyBA,EAAK,cAAe,CAAEmzM,MAAO6sB,IACnFprJ,kBAAmBqrJ,EAAa,UAAY,aAC5Cz2H,kBAAmBy2H,EAAa93H,EAAapoB,WACzC,GAAG//E,EAAKy7G,OAAOokH,QAAmB7/N,EAAKy7G,OAAOskH,GAAkBF,KACpEh5N,SAAUA,EACVsqF,UAAWgX,GAAgB,EAC3B83H,WAAY93H,EAAe,EAC3Bm4H,mBAAoBA,EACpBvtO,WAAWqW,EAAAA,GAAAA,GD/KsM,WC+KhKi3N,GD/KyL,cC0G/MG,MAC/B,GAAKH,EAEL,OACEptO,EAAAA,GAAAA,GAACi9B,GAAAA,GAAU,CACT1vB,KAAK,OACLzN,WAAWqW,EAAAA,GAAAA,GDhHkF,WCgHxC62N,GDhH8D,YCiHnH9vM,UAAWmvM,EAAmB,EAAI,EAClCp7H,eAAa,EACbu8H,qBAAmB,EAAAztO,SAElBssO,GACCrsO,EAAAA,GAAAA,GAAA,KAAAD,SACGgN,EAAK,0BAA2B,CAC/BgL,MAAM46F,EAAAA,GAAAA,IAAoB5lG,EAAMmgO,GAChCrwF,OAAQ3pI,KAAKya,IAAIw/M,GACjBl6I,MACEjzF,EAAAA,GAAAA,GAAA,QAAMF,UD3HoJ,WC2HxHiO,QAASy+N,EAAkBzsO,SAC1DgN,EAAK,gCAGT,CACDkzD,YAAa/sD,KAAKya,IAAIw/M,GACtBzuL,WAAW,OAIf1+C,EAAAA,GAAAA,GAAA,KAAAD,SACGgN,EAAK,2BAA4B,CAChCgL,MAAM46F,EAAAA,GAAAA,IAAoB5lG,EAAMmgO,GAChCrwF,OAAQ3pI,KAAKya,IAAIw/M,GACjBl6I,MACEjzF,EAAAA,GAAAA,GAAA,QAAMF,UD1I8H,WC0I/FiO,QAASw+N,EAAiBxsO,SAC5DgN,EAAK,mCAGT,CACDkzD,YAAa/sD,KAAKya,IAAIw/M,GACtBzuL,WAAW,SAiClB6uL,IACDvtO,EAAAA,GAAAA,GAAA,OAAKF,UDlLkL,WCkL1JC,SAC1BgN,EAAK,kBAER/M,EAAAA,GAAAA,GAAA,KAAGF,UDrL4D,WCqL9BC,SAC9Bo0C,GAAMt0C,KAAOu0B,EACVrnB,EAAK,8BACLA,EAAK,yBAA0B,CAAEQ,MAAMsmB,EAAAA,GAAAA,IAAa9mB,EAAMonC,IAASm5L,GACnE,CAAE55K,cAAc,EAAMhV,WAAW,UAI1C,CAACvW,EAAOgM,EAAM/f,EAAe03M,EAC9BC,EAAeE,EAAmBI,EAClCt/N,EAAMw/N,EAAkBC,EAAmB7gO,IAEvC+xG,EAAe,CACnB,CAAC,cAAe3wG,EAAK,4BACnBnN,EAAAA,GAAAA,IAAA,QAAME,UAAW0d,GAAgBzd,SAAA,CAC9B0sO,EAAY,SACZ1/N,EAAK,mCAGV,CAAC,aAAcA,EAAK,iCAClBnN,EAAAA,GAAAA,IAAA,QAAME,UAAW0d,GAAgBzd,SAAA,CAC9B0sO,EAAY,SACZ1/N,EAAK,wCAGV,CAAC,eAAgBA,EAAK,gCACpBnN,EAAAA,GAAAA,IAAA,QAAME,UAAW0d,GAAgBzd,SAAA,CAC9B0sO,EAAY,YACZ1/N,EAAK,wCAKNg9B,GAAShiC,EAAAA,EAAAA,IAAQ,KACrB,GAAK4D,EACL,OACE3L,EAAAA,GAAAA,GAAA,OAAKF,UDzNmR,WCyN1PC,UAC5BH,EAAAA,GAAAA,IAACgO,EAAAA,EAAM,CACLG,QAASitB,EAAYj7B,SAAA,EAErBC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAAazN,UD7N2S,aC8NlUiN,EAAK,0BAIX,CAACA,EAAMpB,EAAQqvB,IAElB,OACEh7B,EAAAA,GAAAA,GAAC29G,GAAAA,EAAe,CACdt7E,iBDtOoB,WCuOpB12B,OAAQA,EACR08B,OAAQA,EACRq1E,aAAcA,EACd3zE,OAAQA,EACRl+B,QAASmvB,O,4BC3Of,MCuIA,IAAer8B,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAClB,CAACtN,GAAUmL,SAAQ8C,eACjB,MAAMJ,GAAOmlC,EAAAA,EAAAA,KAAWhzC,EAAQmL,GAC1BihO,GAAeC,EAAAA,EAAAA,KAAkBrsO,EAAQmL,EAAQ8C,GAAYmwC,EAAAA,GAAgB,gBAC7EwjI,GAAgBjG,EAAAA,EAAAA,IAAiBxwK,EAAQ8C,GAAYmwC,EAAAA,GAAgBp+C,EAAO+yB,eAC5Eu5M,EAAcz+N,GAAM8+C,SAAW1+C,GACjCw2H,EAAAA,EAAAA,KAAYzkI,EAAQmL,EAAQ8C,IAAWq+N,YACvCz+N,GAAMy+N,YAEV,MAAO,CACLz+N,OACA0+N,gBAAiBvsO,EAAOusO,gBACxBC,UAAWxsO,EAAOwsO,UAClBC,qBAAsBzsO,EAAOysO,qBAC7BL,eACAxqD,gBACA0qD,cACAI,cAAe7+N,GAAM6+N,gBAjBPp/N,CA7FuCq/N,EACzDxhO,SACA8C,WACAJ,OACA0+N,kBACAC,YACAC,uBACAL,eACAxqD,gBACA0qD,cACAI,gBACAliO,cAEA,MAAMkB,GAAOyqC,EAAAA,GAAAA,KACPD,GAAUvqC,EAAAA,EAAAA,MACV,qBAAEihO,IAAyBjiO,EAAAA,EAAAA,OAC3B,qBACJkiO,IACEC,EAAAA,GAAAA,GAAoB52L,EAASq2L,EAAiBC,GAAaC,GAAsB,GAE/EM,GAAmB7hO,EAAAA,EAAAA,GAAgB,KACvC0hO,EAAqB,CAAEpuO,GAAI2M,MAGvB6hO,EAAsBprD,EAAgBl2K,EAAK,sBAAmBlK,EAC9DyrO,EAAarrD,EAAgBlgI,OAAOtD,EAAAA,IAAkBjzC,EACtD+hO,EAAgBr/N,GAAM8/C,YAAc9/C,EAAKmiH,kBAAqBi9G,EAEpE,OACE1uO,EAAAA,GAAAA,IAAA,OAAKE,UDvEc,WCuESC,SAAA,CACzBgL,QAAQ4iO,GAAeI,KACtB/tO,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN3N,KAAK,UACLqS,UAAWxF,EAAK,6BAChBgB,QAASqgO,EACTtuO,UD/EoE,WC+EjCC,UAEnCC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,iBAGfvN,EAAAA,GAAAA,GAAC4N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN3N,KAAK,UACLqS,UAAWxF,EAAK,SAChBgB,QAASlC,EACT/L,UD1FwC,WC0FVC,UAE9BC,EAAAA,GAAAA,GAACwS,EAAAA,EAAI,CAACjF,KAAK,aAEbvN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,UAC1BC,EAAAA,GAAAA,GAAA,OAAKF,UD/F+F,WC+F5DC,UACrC2O,EAAAA,EAAAA,IAAS6/N,IACRvuO,EAAAA,GAAAA,GAAC+lD,GAAAA,EAAe,CAEdloB,OAAQ0wM,EACRd,aAAcA,EACdtoL,OAAQ+oL,GAAwBG,EAChCG,SAAUzjO,QAAQmjO,GAClB5T,cAAc,EACdmU,iBAAiB,EACjBC,WAAW,EACXC,oBAAkB,EAClB1rD,cAAeA,EACf2rD,gBApEY,GAqEZC,OAAK,GAXAN,IAcPvuO,EAAAA,GAAAA,GAACkmD,GAAAA,EAAa,CAEZ15C,OAAQ+hO,EACRj/N,SAAW2zK,OAA2BpgL,EAAXyM,EAC3Bm+N,aAAcA,EACdqB,oBAAqB5/N,GAAM8/C,YAC3B7J,OAAQ+oL,GAAwBG,EAChCG,SAAUzjO,QAAQmjO,GAClBO,iBAAiB,EACjBnU,cAAc,EACdqU,oBAAkB,EAClBD,WAAW,EACXzrD,cAAeA,EACf2rD,gBArFY,GAsFZC,OAAK,GAbAN,a,gBCjHnB,MC0HA,IAAe5vO,EAAAA,EAAAA,KAAKgQ,EAAAA,EAAAA,IAAqB,CAACtN,GAAU8mC,MAAO37B,MACzD,MAAM6zD,GAAQwD,EAAAA,EAAAA,KAAYxiE,IAExBqhH,UAAWC,EAAqBE,WAAYC,EAAgB,gBAAEp7C,EAAe,aAAEk7C,IAC7EG,EAAAA,EAAAA,KAAkB1hH,EAAQg/D,IAAU,CAAC,EAEzC,MAAO,CACLA,QACAyiD,mBACAp7C,kBACAk7C,eACAD,wBAXgBh0G,CAtFiCogO,EACnD5mM,QACAk4B,QACAyiD,mBACAp7C,kBACAk7C,eACAD,0BAEA,MAAM,kBAAEqsH,EAAiB,SAAErgM,EAAQ,WAAEy3F,IAAep6H,EAAAA,EAAAA,MAE9CQ,EAAS27B,GAAO37B,OAChB8C,EAAW64B,GAAO74B,SAClB3D,EAASZ,QAAQyB,GACjB22G,GAAwBC,EAAAA,GAAAA,GAAoB/iD,EAAOyiD,GAEnD9nF,GAAczuB,EAAAA,EAAAA,GAAgB,KAClCyiO,MAGIC,GAAqB1iO,EAAAA,EAAAA,GAAgB,KACrCC,IACE8C,EACF82H,EAAW,CAAE55H,SAAQ8C,WAAUg1H,sBAAsB,IAErD31F,EAAS,CAAE9uC,GAAI2M,EAAQ83H,sBAAsB,IAE/C0qG,QAIJzkO,EAAAA,EAAAA,IAAU,IAAMoB,GAAS6vB,EAAAA,EAAAA,GAAsBR,QAAen4B,EAAW,CAAC8I,EAAQqvB,KAElFjQ,EAAAA,GAAAA,GAAe,CACbvR,SAAU7N,EACVqf,OAAQgQ,IAGV,MAAQxuB,OAAQ0iO,EAAiB5/N,SAAU6/N,IAAsBh/L,EAAAA,GAAAA,GAAiBhI,GAAO,IAAS,CAAC,EAE7Fq7E,GAAcrtG,EAAAA,GAAAA,GAClBi5N,GAAAA,EAAiBvsH,WACjBC,GAAoBssH,GAAAA,EAAiBC,cACrC3nK,GAAmB0nK,GAAAA,EAAiBE,cACpCxsH,GAAoBH,GAAuBysH,GAAAA,EAAiBG,SAG9D,GAAKL,EAIL,OACElvO,EAAAA,GAAAA,GAACoN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASmvB,EACTqN,QAAQroC,EAAAA,GAAAA,GAACguO,GAAuB,CAACxhO,OAAQ0iO,EAAiB5/N,SAAU6/N,EAAmBtjO,QAASmvB,IAChGl7B,UD3FiB,WC4FjBuiC,iBD5FsC,WC4FLtiC,UAEjCH,EAAAA,GAAAA,IAAA,OACEE,UD/FwD,WCgGxDgG,OAAOq9C,EAAAA,GAAAA,GACL,oBAAoBy/D,IACpBl7C,GAAmB,6BAA6BA,KAElD35D,QAASkhO,EAAmBlvO,SAAA,EAE5BC,EAAAA,GAAAA,GAAA,OACEF,UAAW0jH,EACX19G,MAAOq9G,EAAwB,wBAAwBA,SAA0BtgH,KAEnF7C,EAAAA,GAAAA,GAAA,OAAKF,UD1G+E,WC0G9CC,UACpCC,EAAAA,GAAAA,GAACwvO,GAAAA,EAAW,CACVhjO,OAAQ0iO,EACR5/N,SAAU6/N,GAAqB1vL,EAAAA,GAC/Bv+C,KAAK,SACLy0H,SAAS,EACTt8G,SAAO,EACPo2N,cAAe1kO,SAAS+3G,IAAqBp7C,GAC7CgoK,gBAAc,a","sources":["webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/mediaViewer/helpers/getViewableMedia.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/ReportAvatarModal.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/story/StoryRibbon.module.scss?8966","webpack://telegram-t/./src/components/story/StoryViewer.module.scss?5f32","webpack://telegram-t/./src/components/story/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/story/helpers/dimensions.ts","webpack://telegram-t/./src/components/story/hooks/useSlideSizes.ts","webpack://telegram-t/./src/components/story/hooks/useStoryProps.ts","webpack://telegram-t/./src/components/story/StealthModeModal.module.scss?40cf","webpack://telegram-t/./src/components/story/StealthModeModal.tsx","webpack://telegram-t/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://telegram-t/./src/components/story/privacy/AllowDenyList.tsx","webpack://telegram-t/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://telegram-t/./src/components/story/privacy/CloseFriends.tsx","webpack://telegram-t/./src/components/story/StorySettings.module.scss?b887","webpack://telegram-t/./src/components/story/StorySettings.tsx","webpack://telegram-t/./src/components/story/helpers/videoFormats.ts","webpack://telegram-t/./src/util/progressiveLoader.ts","webpack://telegram-t/./src/hooks/useStreaming.ts","webpack://telegram-t/./src/components/story/hooks/useStoryPreloader.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStoryForward.tsx","webpack://telegram-t/./src/components/story/StoryCaption.tsx","webpack://telegram-t/./src/components/story/StoryFooter.module.scss?19b1","webpack://telegram-t/./src/components/story/StoryFooter.tsx","webpack://telegram-t/./src/components/story/StoryProgress.tsx","webpack://telegram-t/./src/components/story/StoryProgress.module.scss?59b4","webpack://telegram-t/./src/components/story/Story.tsx","webpack://telegram-t/./src/components/story/StoryPreview.tsx","webpack://telegram-t/./src/components/story/StorySlides.tsx","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/story/StoryViewModal.module.scss?06b1","webpack://telegram-t/./src/components/story/StoryView.tsx","webpack://telegram-t/./src/components/story/StoryViewModal.tsx","webpack://telegram-t/./src/components/story/StoryViewer.tsx","webpack://telegram-t/./src/components/common/pickers/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.module.scss?0842","webpack://telegram-t/./src/components/modals/map/MapModal.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/hooks/useDraggable.ts","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.module.scss?a30f","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.module.scss?b350","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.tsx","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.module.scss?8058","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.module.scss?c843","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/usePopupLimit.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.module.scss?615e","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/common/AvatarStoryCircle.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.module.scss?e925","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.module.scss?b798","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/common/CountryPickerModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayChannelPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.module.scss?6d7c","webpack://telegram-t/./src/components/main/premium/GiveawayUserPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.module.scss?ac86","webpack://telegram-t/./src/components/main/premium/GiveawayModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerButton.tsx","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.module.scss?9dc8","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.module.scss?77cd","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.module.scss?aeb4","webpack://telegram-t/./src/components/modals/boost/BoostModal.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.module.scss?1c77","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.tsx","webpack://telegram-t/./src/util/getClosestEntry.ts","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.module.scss?3c02","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.tsx","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.module.scss?9c37","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.module.scss?5f0b","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.module.scss?b66d","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.module.scss?2ca6","webpack://telegram-t/./src/components/common/AboutMonetizationModal.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.module.scss?bb6b","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.module.scss?4803","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.module.scss?843e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.module.scss?b26e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.module.scss?3c2e","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.module.scss?94bc","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.module.scss?e7f0","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.tsx","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.module.scss?7108","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/main/PermissionCheckboxList.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.module.scss?fbca","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.module.scss?a8aa","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.tsx","webpack://telegram-t/./src/components/common/pickers/ItemPicker.tsx","webpack://telegram-t/./src/components/common/CountryPickerModal.module.scss?d5e6","webpack://telegram-t/./src/components/common/CountryPickerModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.module.scss?497f","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/BotAppResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultSponsored.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/PublicPostsSearchLauncher.module.scss?4ff7","webpack://telegram-t/./src/components/left/search/PublicPostsSearchLauncher.tsx","webpack://telegram-t/./src/components/left/search/PublicPostsResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessageSlider.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessagePrice.tsx","webpack://telegram-t/./src/components/left/settings/PremiumStatusItem.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.module.scss?16a3","webpack://telegram-t/./src/components/left/settings/PrivacyMessages.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsAcceptedGift.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyLastSeen.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/story/StoryToggler.module.scss?58fa","webpack://telegram-t/./src/components/story/helpers/ribbonAnimation.ts","webpack://telegram-t/./src/components/story/StoryRibbonButton.tsx","webpack://telegram-t/./src/components/story/StoryRibbon.tsx","webpack://telegram-t/./src/components/story/StoryToggler.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.module.scss?6993","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.module.scss?f0ab","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.module.scss?725f","webpack://telegram-t/./src/components/middle/search/MiddleSearch.tsx","webpack://telegram-t/./src/hooks/events/useOutsideClick.ts","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.module.scss?0536","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.module.scss?695a","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/util/visibility/isFullyVisible.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/ToDoListModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommand.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.module.scss?f347","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/TextFormatter.tsx","webpack://telegram-t/./src/util/getKeyFromEvent.ts","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPost.module.scss?fea0","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPostMeta.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentStory.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.module.scss?96a0","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.module.scss?bbd6","webpack://telegram-t/./src/components/right/statistics/StatisticsMessagePublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsStoryPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageBot.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/NewDiscussionGroup.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.module.scss?717b","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.module.scss?de6c","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.module.scss?86e3","webpack://telegram-t/./src/components/modals/profileRating/ProfileRatingModal.module.scss?d42b","webpack://telegram-t/./src/components/modals/profileRating/ProfileRatingModal.tsx","webpack://telegram-t/./src/components/modals/quickPreview/QuickPreviewModalHeader.module.scss?2307","webpack://telegram-t/./src/components/modals/quickPreview/QuickPreviewModalHeader.tsx","webpack://telegram-t/./src/components/modals/quickPreview/QuickPreviewModal.module.scss?525c","webpack://telegram-t/./src/components/modals/quickPreview/QuickPreviewModal.tsx"],"sourcesContent":["import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type {\n  ApiMessage, ApiPeer, ApiPeerPhotos, ApiSponsoredMessage,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport { type MediaViewerMedia, MediaViewerOrigin } from '../../../types';\n\nimport { getMessageContent, isDocumentPhoto, isDocumentVideo } from '../../../global/helpers';\nimport { selectWebPageFromMessage } from '../../../global/selectors';\n\nexport type MediaViewerItem = {\n  type: 'message';\n  message: ApiMessage;\n  mediaIndex?: number;\n} | {\n  type: 'avatar';\n  avatarOwner: ApiPeer;\n  profilePhotos: ApiPeerPhotos;\n  mediaIndex: number;\n} | {\n  type: 'standalone';\n  media: MediaViewerMedia[];\n  mediaIndex: number;\n} | {\n  type: 'sponsoredMessage';\n  message: ApiSponsoredMessage;\n  mediaIndex?: number;\n};\n\nexport type ViewableMedia = {\n  media: MediaViewerMedia;\n  isGif?: boolean;\n  isSingle?: boolean;\n};\n\nexport function getMediaViewerItem({\n  message, avatarOwner, profilePhotos, standaloneMedia, mediaIndex, sponsoredMessage,\n}: {\n  message?: ApiMessage;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  standaloneMedia?: MediaViewerMedia[];\n  sponsoredMessage?: ApiSponsoredMessage;\n  mediaIndex?: number;\n}): MediaViewerItem | undefined {\n  if (avatarOwner && profilePhotos) {\n    return {\n      type: 'avatar',\n      avatarOwner,\n      profilePhotos,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (standaloneMedia) {\n    return {\n      type: 'standalone',\n      media: standaloneMedia,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (message) {\n    return {\n      type: 'message',\n      message,\n      mediaIndex,\n    };\n  }\n\n  if (sponsoredMessage) {\n    return {\n      type: 'sponsoredMessage',\n      message: sponsoredMessage,\n      mediaIndex,\n    };\n  }\n\n  return undefined;\n}\n\nexport default function selectViewableMedia(\n  global: GlobalState, origin?: MediaViewerOrigin, params?: MediaViewerItem,\n): ViewableMedia | undefined {\n  if (!params) return undefined;\n\n  if (params.type === 'standalone') {\n    const media = params.media[params.mediaIndex];\n    return {\n      media,\n      isGif: media.mediaType === 'video' && media.isGif,\n      isSingle: params.media.length === 1,\n    };\n  }\n\n  if (params.type === 'avatar') {\n    const avatar = params.profilePhotos?.photos[params.mediaIndex];\n    if (avatar) {\n      return {\n        media: avatar,\n      };\n    }\n    return undefined;\n  }\n\n  const {\n    action, document, photo, video, paidMedia,\n  } = getMessageContent(params.message);\n\n  if (action?.type === 'chatEditPhoto' || action?.type === 'suggestProfilePhoto') {\n    return {\n      media: action.photo!,\n      isSingle: true,\n    };\n  }\n\n  if (document && (isDocumentPhoto(document) || isDocumentVideo(document))) {\n    return {\n      media: document,\n    };\n  }\n\n  const webPage = selectWebPageFromMessage(global, params.message);\n  if (webPage?.webpageType === 'full') {\n    const { photo: webPagePhoto, video: webPageVideo, document: webPageDocument } = webPage;\n    const isDocumentMedia = webPageDocument && (isDocumentPhoto(webPageDocument) || isDocumentVideo(webPageDocument));\n    const mediaDocument = isDocumentMedia ? webPageDocument : undefined;\n    const media = webPageVideo || mediaDocument || webPagePhoto;\n    if (media) {\n      return {\n        media,\n        isSingle: true,\n      };\n    }\n  }\n\n  if (paidMedia) {\n    const extendedMedia = paidMedia.extendedMedia[params.mediaIndex || 0];\n    if (!('mediaType' in extendedMedia)) {\n      const { photo: extendedPhoto, video: extendedVideo } = extendedMedia;\n      return {\n        media: (extendedPhoto || extendedVideo)!,\n        isGif: extendedVideo?.isGif,\n      };\n    }\n  }\n\n  const media = video || photo;\n\n  if (media) {\n    return {\n      media,\n      isGif: video?.isGif,\n      isSingle: video?.isGif && origin !== MediaViewerOrigin.SharedMedia,\n    };\n  }\n\n  return undefined;\n}\n","import type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport getOffsetToContainer from '../../../util/visibility/getOffsetToContainer';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport windowSize from '../../../util/windowSize';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n  mediaIndex?: number,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message, mediaIndex);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage, mediaIndex?: number,\n) {\n  const { container, mediaEl: toImage } = getNodes(origin, message, mediaIndex);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [\n      MediaViewerOrigin.Inline,\n      MediaViewerOrigin.ScheduledInline,\n      MediaViewerOrigin.Album,\n      MediaViewerOrigin.ScheduledAlbum,\n    ].includes(origin)\n    && !isMessageImageFullyVisible(toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n\n  const { top } = getOffsetToContainer(imageEl, messageListElement);\n\n  return top > messageListElement.scrollTop\n    && top + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage, index?: number) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      // eslint-disable-next-line @stylistic/max-len\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.PreviewMedia:\n      containerSelector = `#preview-media${index}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ChannelAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.StarsTransaction:\n      containerSelector = '.transaction-media-preview';\n      mediaSelector = index === 0 ? `.stars-transaction-media-${index} :is(img, video)` : undefined;\n      break;\n\n    case MediaViewerOrigin.SponsoredMessage:\n      containerSelector = '.Transition_slide-active > .MessageList .sponsored-media-preview';\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = mediaSelector\n    ? container?.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector) : undefined;\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.StarsTransaction:\n    case MediaViewerOrigin.PreviewMedia:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n    case MediaViewerOrigin.ChannelAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useCallback, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/browser/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: ElementRef<HTMLVideoElement>,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport type { MediaViewerMedia } from '../../../types';\nimport { ApiMediaFormat, type ApiMessageSearchType } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getMediaFileSize,\n  getMediaFormat,\n  getMediaHash,\n  getMediaThumbUri,\n  getPhotoFullDimensions,\n  getProfilePhotoMediaHash,\n  getVideoDimensions,\n  getVideoProfilePhotoMediaHash,\n  isDocumentPhoto,\n  isDocumentVideo,\n} from '../../../global/helpers';\nimport { AVATAR_FULL_DIMENSIONS, VIDEO_AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\n\nconst FALLBACK_DIMENSIONS = AVATAR_FULL_DIMENSIONS;\n\ntype UseMediaProps = {\n  media?: MediaViewerMedia;\n  isAvatar?: boolean;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  media,\n  isAvatar,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const isPhotoAvatar = isAvatar && media?.mediaType === 'photo' && !media.isVideo;\n  const isVideoAvatar = isAvatar && media?.mediaType === 'photo' && media.isVideo;\n  const isDocument = media?.mediaType === 'document';\n  const isVideo = (media?.mediaType === 'video' && !media.isRound) || (isDocument && isDocumentVideo(media));\n  const isPhoto = media?.mediaType === 'photo' || (isDocument && isDocumentPhoto(media));\n  const isGif = media?.mediaType === 'video' && media.isGif;\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const contentType: ApiMessageSearchType = isGif ? 'gif' : 'media';\n\n  const getMediaOrAvatarHash = useMemo(() => (isFull?: boolean) => {\n    if (!media) return undefined;\n\n    if ((isPhotoAvatar || isVideoAvatar) && !isFull) {\n      return getProfilePhotoMediaHash(media);\n    }\n\n    if (isVideoAvatar && isFull) {\n      return getVideoProfilePhotoMediaHash(media);\n    }\n\n    return getMediaHash(media, isFull ? 'full' : 'preview');\n  }, [isVideoAvatar, isPhotoAvatar, media]);\n\n  const pictogramBlobUrl = useMedia(\n    media\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocument)\n    && getMediaHash(media, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaOrAvatarHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaOrAvatarHash(true),\n    undefined,\n    media && getMediaFormat(media, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = media && 'blobUrl' in media ? media.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && media && getMediaThumbUri(media));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    (!isVideoAvatar && !isVideo) ? (previewBlobUrl || pictogramBlobUrl || bestImageData) : undefined\n  );\n\n  const mediaSize = media && getMediaFileSize(media);\n\n  const isLocal = Boolean(localBlobUrl);\n\n  const dimensions = useMemo(() => {\n    if (isAvatar) {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n\n    if (isDocument) {\n      return media.mediaSize || FALLBACK_DIMENSIONS;\n    }\n\n    if (isPhoto) {\n      return getPhotoFullDimensions(media);\n    }\n\n    if (isVideo) {\n      return getVideoDimensions(media);\n    }\n\n    return FALLBACK_DIMENSIONS;\n  }, [isAvatar, isDocument, isPhoto, isVideo, isVideoAvatar, media]);\n\n  return {\n    getMediaHash: getMediaOrAvatarHash,\n    media,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocument,\n    bestImageData,\n    bestData,\n    dimensions,\n    contentType,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    mediaSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useBlur from './useBlur';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto, ApiReportReason } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  peerId?: string;\n  photo?: ApiPhoto;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nconst ReportAvatarModal: FC<OwnProps> = ({\n  isOpen,\n  peerId,\n  photo,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { reportProfilePhoto } = getActions();\n\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = useLastCallback(() => {\n    reportProfilePhoto({\n      chatId: peerId, photo, reason: selectedReason, description,\n    });\n    onClose();\n  });\n\n  const handleSelectReason = useLastCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  });\n\n  const handleDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  });\n\n  const lang = useOldLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = useMemo(() => [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'illegalDrugs', label: 'Illegal Drugs' },\n    { value: 'personalDetails', label: 'Personal Details' },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ], [lang]);\n\n  if (!peerId || !photo) {\n    return undefined;\n  }\n\n  const title = lang('ReportPeer.Report');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      className=\"narrow\"\n      title={title}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n          {lang('lng_report_button')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAvatarModal);\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useUnmountCleanup(() => {\n    setZoomChange(1);\n  });\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\n\nimport { isUserId } from '../../util/entities/ids';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { ActiveDownloads, MediaViewerOrigin, MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { MenuItemProps } from '../ui/MenuItem';\nimport type { MediaViewerItem, ViewableMedia } from './helpers/getViewableMedia';\n\nimport {\n  getIsDownloading,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActionsSlow, selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n  selectIsMessageProtected,\n  selectTabState,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport selectViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useOldLang from '../../hooks/useOldLang';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  mediaData?: string;\n  isVideo: boolean;\n  canUpdateMedia?: boolean;\n  canReportAvatar?: boolean;\n  activeDownloads?: ActiveDownloads;\n  onReportAvatar: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  activeDownloads: ActiveDownloads;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  chat?: ApiChat;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  origin?: MediaViewerOrigin;\n  viewableMedia?: ViewableMedia;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  item,\n  mediaData,\n  isVideo,\n  chat,\n  isChatProtected,\n  isProtected,\n  canReportAvatar,\n  canDelete,\n  canUpdate,\n  messageListType,\n  activeDownloads,\n  origin,\n  viewableMedia,\n  onReportAvatar: onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMedia,\n    cancelMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n    openMediaViewer,\n    openDeleteMessageModal,\n  } = getActions();\n\n  const isMessage = item?.type === 'message';\n\n  const { media } = viewableMedia || {};\n  const fileName = media && getMediaFilename(media);\n  const isDownloading = media && getIsDownloading(activeDownloads, media);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    media && getMediaHash(media, 'download'),\n    !isDownloading,\n    media && getMediaFormat(media, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (!media) return;\n\n    if (isDownloading) {\n      cancelMediaDownload({ media });\n    } else {\n      const message = item?.type === 'message' ? item.message : undefined;\n      downloadMedia({ media, originMessage: message });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (item?.type !== 'avatar') return;\n    const { avatarOwner, profilePhotos, mediaIndex } = item;\n    const avatarPhoto = profilePhotos?.photos[mediaIndex];\n    if (isUserId(avatarOwner.id)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwner.id, photo: avatarPhoto });\n    }\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: avatarOwner.id,\n      mediaIndex: 0,\n      isAvatarView: true,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const lang = useOldLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModal() {\n    return (item?.type === 'avatar') ? (\n      <DeleteProfilePhotoModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        onConfirm={onBeforeDelete}\n        profileId={item.avatarOwner.id}\n        photo={item.profilePhotos.photos[item.mediaIndex]}\n      />\n    ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected || item?.type === 'standalone') {\n      return undefined;\n    }\n\n    return item?.type !== 'sponsoredMessage' && (isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <Icon name=\"download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <Icon name=\"download\" />\n      </Button>\n    ));\n  }\n\n  const openDeleteModalHandler = useLastCallback(() => {\n    if (item?.type === 'message' && chat) {\n      openDeleteMessageModal({\n        chatId: chat?.id,\n        messageIds: [item.message.id],\n        isSchedule: messageListType === 'scheduled',\n        onConfirm: onBeforeDelete,\n      });\n    } else {\n      openDeleteModal();\n    }\n  });\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (isMessage && item.message.isForwardingAllowed && !item.message.content.action && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'close' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReportAvatar) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModalHandler,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon as IconName}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModal()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {isMessage && item.message.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <Icon name=\"zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <Icon name=\"zoom-in\" />\n      </Button>\n      {canReportAvatar && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <Icon name=\"flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <Icon name=\"copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModalHandler}\n        >\n          <Icon name=\"delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {canDelete && renderDeleteModal()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    item, canUpdateMedia,\n  }): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { origin } = tabState.mediaViewer;\n\n    const message = item?.type === 'message' ? item.message : undefined;\n    const avatarOwner = item?.type === 'avatar' ? item.avatarOwner : undefined;\n    const avatarPhoto = item?.type === 'avatar' && item.profilePhotos.photos[item.mediaIndex];\n\n    const chat = selectCurrentChat(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isProtected = selectIsMessageProtected(global, message);\n    const activeDownloads = selectActiveDownloads(global);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActionsSlow(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarPhotoId);\n    const canDeleteAvatar = canUpdateMedia && Boolean(avatarPhoto);\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && Boolean(avatarPhoto) && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n    const viewableMedia = selectViewableMedia(global, origin, item);\n\n    return {\n      activeDownloads,\n      isProtected,\n      chat,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      origin,\n      viewableMedia,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import { useUnmountCleanup } from '../lib/teact/teact';\n\nimport { createSignal } from '../util/signals';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useUnmountCleanup(() => {\n    setCurrentTime(0);\n  });\n\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { throttle } from '../../util/schedulers';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  buttonText?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', buttonText, isForVideo, onClick, handleSponsoredClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text');\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const onButtonClick = useLastCallback(() => {\n    handleSponsoredClick();\n  });\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n      {Boolean(buttonText) && (\n        <Button\n          className={buildClassName('media-viewer-footer-content', 'media-viewer-button')}\n          size=\"default\"\n          color=\"primary\"\n          isRectangular\n          onClick={onButtonClick}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useUnmountCleanup(() => {\n    setIsVideoWaiting(false);\n  });\n\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID, IS_IOS } from '../../util/browser/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { callApi } from '../../api/gramjs';\nimport { requestMutation } from '../fasterdom/fasterdom';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames = new Map<number, ImageBitmap>();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => {\n    videoPreview?.destroy();\n    videoPreview = undefined;\n  };\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ingarEvU\",\"preview\":\"TqpEWfl3\",\"previewCanvas\":\"fKVz2lln\",\"previewTime\":\"bGiNvx5D\",\"previewTimeText\":\"mnkqvOMR\",\"track\":\"Od9ZSc1U\",\"buffered\":\"ANe2DKfp\",\"played\":\"igaGLblf\",\"seeking\":\"beUP6SqY\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { createVideoPreviews, getPreviewDimensions, renderVideoPreview } from '../../lib/video-preview/VideoPreview';\nimport { animateNumber } from '../../util/animation';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp, round } from '../../util/math';\n\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  const seekerRef = useRef<HTMLDivElement>();\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  const previewCanvasRef = useRef<HTMLCanvasElement>();\n  const previewRef = useRef<HTMLDivElement>();\n  const progressRef = useRef<HTMLDivElement>();\n  const previewTimeRef = useRef<HTMLDivElement>();\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = getPointerPosition(e).x;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef,\n  useSignal,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { IconName } from '../../types/icons';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport SeekLine from './SeekLine';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n  onSeekingChange: (isSeeking: boolean) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n  onSeekingChange,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const closeTimeoutRef = useRef<number | undefined>();\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n      return undefined;\n    }\n    closeTimeoutRef.current = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useOldLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n    onSeekingChange(false);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n    onSeekingChange(true);\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <Icon name={isPlaying ? 'pause' : 'play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <Icon name=\"pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <Icon name={isFullscreen ? 'smallscreen' : 'fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/browser/windowEnvironment';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp } from '../../util/math';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useFullscreen from '../../hooks/window/useFullscreen';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  isClickDisabled?: boolean;\n  isSponsoredMessage?: boolean;\n  timestamp?: number;\n  handleSponsoredClick?: (isFromMedia?: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n  isSponsoredMessage,\n  timestamp,\n  handleSponsoredClick,\n  onClose,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  const videoRef = useRef<HTMLVideoElement>();\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n  const lastMousePosition = useRef({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const updateMousePosition = (e: MouseEvent | TouchEvent) => {\n      lastMousePosition.current = getPointerPosition(e);\n    };\n\n    window.addEventListener('mousemove', updateMousePosition);\n    window.addEventListener('touchmove', updateMousePosition);\n\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n      window.removeEventListener('touchmove', updateMousePosition);\n    };\n  }, []);\n\n  const checkMousePositionAndToggleControls = useLastCallback((clientX: number, clientY: number) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (clientX <= bounds.left || clientX >= bounds.right\n      || clientY <= bounds.top || clientY >= bounds.bottom) {\n      if (!getIsSeeking()) {\n        toggleControls(false);\n      }\n    }\n  });\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    checkMousePositionAndToggleControls(e.clientX, e.clientY);\n  });\n\n  const handleSeekingChange = useLastCallback((isSeeking: boolean) => {\n    setIsSeeking(isSeeking);\n    if (!isSeeking) {\n      const { x, y } = lastMousePosition.current;\n      checkMousePositionAndToggleControls(x, y);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransitionDeprecated(\n    !isBuffered && !isUnsupported, undefined, undefined, 'slow',\n  );\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransitionDeprecated(\n    IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow',\n  );\n\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  useEffect(() => {\n    if (!timestamp) return;\n    videoRef.current!.currentTime = timestamp;\n    setCurrentTime(timestamp);\n  }, [setCurrentTime, timestamp]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isSponsoredMessage) {\n      handleSponsoredClick?.(true);\n      onClose(e);\n    }\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, bufferingHandlers);\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseLeave={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <Icon name=\"play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isSponsoredMessage && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n          onSeekingChange={handleSeekingChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiDimensions, ApiMessage, ApiSponsoredMessage,\n} from '../../api/types';\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { MediaViewerItem, ViewableMedia } from './helpers/getViewableMedia';\n\nimport { MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION } from '../../config';\nimport {\n  selectIsMessageProtected, selectTabState,\n} from '../../global/selectors';\nimport { selectMessageTimestampableDuration } from '../../global/selectors/media';\nimport { ARE_WEBCODECS_SUPPORTED } from '../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport selectViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport useThrottledCallback from '../../hooks/useThrottledCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  item: MediaViewerItem;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  isMoving?: boolean;\n  onClose: () => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: () => void;\n};\n\ntype StateProps = {\n  viewableMedia?: ViewableMedia;\n  textMessage?: ApiMessage | ApiSponsoredMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  threadId?: ThreadId;\n  timestamp?: number;\n  maxTimestamp?: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst PLAYBACK_SAVE_INTERVAL = 1000;\n\nconst MediaViewerContent = ({\n  item,\n  viewableMedia,\n  isActive,\n  textMessage,\n  origin,\n  withAnimation,\n  isProtected,\n  volume,\n  playbackRate,\n  isMuted,\n  isHidden,\n  isMoving,\n  threadId,\n  timestamp,\n  maxTimestamp,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}: OwnProps & StateProps) => {\n  const { updateLastPlaybackTimestamp } = getActions();\n\n  const lang = useOldLang();\n\n  const isAvatar = item.type === 'avatar';\n  const isSponsoredMessage = item.type === 'sponsoredMessage';\n  const { media } = viewableMedia || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    mediaSize,\n    loadProgress,\n  } = useMediaProps({\n    media, isAvatar, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n  const [getCurrentTime] = useCurrentTimeSignal();\n\n  const isOpen = Boolean(media);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const updatePlaybackTimestamp = useThrottledCallback(() => {\n    if (!isActive || !textMessage || media?.mediaType !== 'video') return;\n    if (media.duration < MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION) return;\n\n    const message = 'id' in textMessage ? textMessage : undefined;\n    const currentTime = getCurrentTime();\n    if (!currentTime || !message || message.isInAlbum) return;\n\n    // Reset timestamp if we are close to the end of the video\n    const newTimestamp = media.duration - currentTime > PLAYBACK_SAVE_INTERVAL / 1000 ? currentTime : undefined;\n    updateLastPlaybackTimestamp({ chatId: message.chatId, messageId: message.id, timestamp: newTimestamp });\n  }, [getCurrentTime, isActive, media, textMessage], PLAYBACK_SAVE_INTERVAL);\n\n  useSignalEffect(updatePlaybackTimestamp, [getCurrentTime]);\n\n  if (!media) return undefined;\n\n  if (item.type === 'avatar') {\n    if (!isVideoAvatar) {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={media.id}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={mediaSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n            isSponsoredMessage={isSponsoredMessage}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        </div>\n      );\n    }\n  }\n\n  const textParts = textMessage && (\n    textMessage.content.action\n      ? (textMessage.content.action.type === 'suggestProfilePhoto'\n        ? lang('Conversation.SuggestedPhotoTitle') : undefined)\n      : renderMessageText({\n        message: textMessage, maxTimestamp, threadId, forcePlayback: true, isForMediaViewer: true,\n      }));\n  const buttonText = textMessage && 'buttonText' in textMessage ? textMessage.buttonText : undefined;\n  const hasFooter = Boolean(textParts);\n  const posterSize = calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={media.id}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={mediaSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n          isSponsoredMessage={isSponsoredMessage}\n          handleSponsoredClick={handleSponsoredClick}\n          timestamp={timestamp}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          buttonText={buttonText}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { item }): Complete<StateProps> => {\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n      origin,\n      timestamp,\n      threadId,\n    } = selectTabState(global).mediaViewer;\n    const message = item.type === 'message' ? item.message : undefined;\n    const sponsoredMessage = item.type === 'sponsoredMessage' ? item.message : undefined;\n    const textMessage = message || sponsoredMessage;\n    const viewableMedia = selectViewableMedia(global, origin, item);\n\n    const maxTimestamp = message && selectMessageTimestampableDuration(global, message, true);\n\n    return {\n      origin,\n      textMessage,\n      isProtected: message && selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n      threadId,\n      timestamp,\n      maxTimestamp,\n      viewableMedia,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  getNextItem: (from: MediaViewerItem, direction: number) => MediaViewerItem | undefined;\n  selectItem: (item: MediaViewerItem) => void;\n  loadMoreItemsIfNeeded: (item: MediaViewerItem) => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  onClose: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\nlet cancelZoomAnimation: ReturnType<typeof animateNumber> | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  item,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  isLoadingMoreMedia,\n  isSynced,\n  loadMoreItemsIfNeeded,\n  getNextItem,\n  selectItem,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const activeSlideRef = useRef<HTMLDivElement>();\n  const leftSlideRef = useRef<HTMLDivElement>();\n  const rightSlideRef = useRef<HTMLDivElement>();\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveItem, setActiveItem] = useSignal<MediaViewerItem | undefined>(item);\n  const activeItemRef = useSignalRef(getActiveItem);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeItem = useDerivedState(getActiveItem);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectItemDebounced = useDebouncedCallback(selectItem, [selectItem], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveItem(item);\n    }\n  }, [item, setActiveItem, transformRef]);\n\n  useEffect(() => {\n    if (!isSynced || !activeItem || isLoadingMoreMedia) return;\n    loadMoreItemsIfNeeded(activeItem);\n  }, [activeItem, loadMoreItemsIfNeeded, isSynced, isLoadingMoreMedia]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeItemRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const cActiveItem = activeItemRef.current;\n      if (cActiveItem === undefined) return false;\n      const nextItem = getNextItem(cActiveItem, direction);\n      if (nextItem !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const cActiveItem = activeItemRef.current;\n      const nextItem = cActiveItem && getNextItem(cActiveItem, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (nextItem !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      withWheelDrag: true,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > SWIPE_DIRECTION_THRESHOLD || absOffsetX / absOffsetY > SWIPE_DIRECTION_TOLERANCE) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    activeItemRef,\n    clearSwipeDirectionDebounced,\n    clickXThreshold,\n    getNextItem,\n    isFullscreen,\n    isHidden,\n    onClose,\n    selectItemDebounced,\n    setActiveItem,\n    setIsActiveDebounced,\n    setTransform,\n    shouldCloseOnVideo,\n    transformRef,\n    windowHeight,\n    windowWidth,\n    withAnimation,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  const [prevItem, nextItem] = useMemo(() => {\n    if (activeItem === undefined) return [undefined, undefined];\n    return [getNextItem(activeItem, -1), getNextItem(activeItem, 1)];\n  }, [activeItem, getNextItem]);\n\n  if (activeItem === undefined) return undefined;\n\n  const hasPrev = prevItem !== undefined;\n  const hasNext = nextItem !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={prevItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          item={activeItem}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n          onClose={onClose}\n          onFooterClick={onFooterClick}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={nextItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiPeer } from '../../api/types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectSender,\n} from '../../global/selectors';\nimport { formatMediaDateTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n};\n\ntype StateProps = {\n  owner?: ApiPeer;\n};\n\nconst BULLET = '\\u2022';\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  owner,\n  item,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (item?.type !== 'message') return;\n\n    const message = item.message;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId: message.chatId, messageId: message.id });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId: message.chatId, messageId: message.id });\n    }\n  });\n\n  const lang = useOldLang();\n\n  const subtitle = useMemo(() => {\n    if (!item || item.type === 'standalone') return undefined;\n\n    const avatarOwner = item.type === 'avatar' ? item.avatarOwner : undefined;\n    const profilePhotos = item.type === 'avatar' ? item.profilePhotos : undefined;\n    const avatar = profilePhotos?.photos[item.mediaIndex!];\n    const isFallbackAvatar = avatar?.id === profilePhotos?.fallbackPhoto?.id;\n    const isPersonalAvatar = avatar?.id === profilePhotos?.personalPhoto?.id;\n    const date = item.type === 'message' ? item.message.date : avatar?.date;\n    if (!date) return undefined;\n\n    const formattedDate = formatMediaDateTime(lang, date * 1000, true);\n    const count = profilePhotos?.count\n      && (profilePhotos.count + (profilePhotos?.fallbackPhoto ? 1 : 0));\n    const currentIndex = item.mediaIndex! + 1 + (profilePhotos?.personalPhoto ? -1 : 0);\n    const countText = count && lang('Of', [currentIndex, count]);\n\n    const parts: string[] = [];\n    if (avatar) {\n      const chat = !isUserId(avatarOwner!.id) ? avatarOwner as ApiChat : undefined;\n      const isChannel = chat && isChatChannel(chat);\n      const isGroup = chat && isChatGroup(chat);\n      parts.push(lang(\n        isPersonalAvatar ? 'lng_mediaview_profile_photo_by_you'\n          : isFallbackAvatar ? 'lng_mediaview_profile_public_photo'\n            : isChannel ? 'lng_mediaview_channel_photo'\n              : isGroup ? 'lng_mediaview_group_photo' : 'lng_mediaview_profile_photo',\n      ));\n    }\n\n    if (countText && !isPersonalAvatar && !isFallbackAvatar) {\n      parts.push(countText);\n    }\n\n    parts.push(formattedDate);\n\n    return parts.join(` ${BULLET} `);\n  }, [item, lang]);\n\n  if (!owner) {\n    return undefined;\n  }\n\n  const senderTitle = getPeerTitle(lang, owner);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={owner.id} size=\"medium\" peer={owner} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {subtitle}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { item }): Complete<StateProps> => {\n    const message = item?.type === 'message' ? item.message : undefined;\n    const messageSender = message && selectSender(global, message);\n\n    const owner = item?.type === 'avatar' ? item.avatarOwner : messageSender;\n\n    return {\n      owner,\n    };\n  },\n)(SenderInfo);\n","import type React from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPeer,\n  ApiPeerPhotos,\n  ApiPhoto,\n  ApiSponsoredMessage,\n} from '../../api/types';\nimport { type MediaViewerMedia, MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getMessageContentIds,\n  getMessagePaidMedia, isChatAdmin,\n} from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChatMediaSearch,\n  selectCurrentSharedMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerPhotos,\n  selectPerformanceSettingsValue,\n  selectScheduledMessage, selectSponsoredMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_MAC_OS } from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { isUserId } from '../../util/entities/ids';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { getMediaViewerItem, type MediaViewerItem, type ViewableMedia } from './helpers/getViewableMedia';\nimport selectViewableMedia from './helpers/getViewableMedia';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Icon from '../common/icons/Icon';\nimport ReportAvatarModal from '../common/ReportAvatarModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  messageId?: number;\n  message?: ApiMessage;\n  collectedMessageIds?: number[];\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatar?: ApiPhoto;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  chatMessages?: Record<number, ApiMessage>;\n  sponsoredMessage?: ApiSponsoredMessage;\n  standaloneMedia?: MediaViewerMedia[];\n  mediaIndex?: number;\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  withDynamicLoading?: boolean;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  currentItem?: MediaViewerItem;\n  viewableMedia?: ViewableMedia;\n};\n\nconst ANIMATION_DURATION = 250;\nconst AVATAR_LOAD_TRIGGER = 4;\n\nconst MediaViewer = ({\n  chatId,\n  threadId,\n  messageId,\n  message,\n  collectedMessageIds,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatar,\n  avatarOwner,\n  profilePhotos,\n  chatMessages,\n  sponsoredMessage,\n  standaloneMedia,\n  mediaIndex,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n  withDynamicLoading,\n  isLoadingMoreMedia,\n  isSynced,\n  currentItem,\n  viewableMedia,\n}: StateProps) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n    searchChatMediaMessages,\n    loadMoreProfilePhotos,\n    clickSponsored,\n    openUrl,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || message || standaloneMedia || sponsoredMessage);\n  const { isMobile } = useAppLayout();\n\n  const { media, isSingle } = viewableMedia || {};\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const senderId = message?.senderId || avatarOwner?.id || message?.chatId;\n  const prevSenderId = usePreviousDeprecated<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportAvatarModalOpen, openReportAvatarModal, closeReportAvatarModal] = useFlag();\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    contentType,\n  } = useMediaProps({\n    media, isAvatar: Boolean(avatarOwner), origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReportAvatar = (() => {\n    if (isChatWithSelf) return false;\n    if (currentItem?.type !== 'avatar' || !avatarOwner) return false;\n    const info = currentItem.profilePhotos;\n    if (media === info.personalPhoto) return false;\n    return true;\n  })();\n  const isVisible = !isHidden && isOpen;\n\n  const messageMediaIds = useMemo(() => {\n    return withDynamicLoading\n      ? collectedMessageIds\n      : getMessageContentIds(chatMessages || {}, collectedMessageIds || [], contentType);\n  }, [chatMessages, collectedMessageIds, contentType, withDynamicLoading]);\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || animationKey.current === undefined)) {\n    animationKey.current = isSingle ? 0 : (messageId || mediaIndex);\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      requestMutation(() => {\n        document.body.classList.toggle('is-media-viewer-open', isOpen);\n      });\n    }\n  }, [isMobile, isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    mql.addEventListener('change', forceUpdate);\n\n    return () => {\n      mql.removeEventListener('change', forceUpdate);\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePreviousDeprecated<ApiMessage | undefined>(message);\n  const prevIsHidden = usePreviousDeprecated<boolean | undefined>(isHidden);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const prevItem = usePreviousDeprecated(currentItem);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const textParts = message ? renderMessageText({ message, forcePlayback: true, isForMediaViewer: true }) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevItem !== currentItem;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (shouldAnimateOpening || !prevItem)) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message, mediaIndex);\n    }\n\n    if (isGhostAnimation && !isOpen && prevItem) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage, prevItem?.mediaIndex);\n    }\n  }, [\n    bestImageData, dimensions, hasFooter, isGhostAnimation, isOpen, isVideo, message, origin,\n    prevBestImageData, prevItem, prevMessage, prevOrigin, shouldAnimateOpening, mediaIndex,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const handleFooterClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target instanceof HTMLElement && e.target.closest('a')) return; // Prevent closing on timestamp click\n\n    handleClose();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  });\n\n  const handleSponsoredClick = useLastCallback((isFromMedia?: boolean) => {\n    if (!sponsoredMessage || !chatId) return;\n\n    clickSponsored({ isMedia: isFromMedia, isFullscreen: true, randomId: sponsoredMessage.randomId });\n    openUrl({ url: sponsoredMessage.url });\n    closeMediaViewer();\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [messageId!],\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const loadMoreItemsIfNeeded = useLastCallback((item?: MediaViewerItem) => {\n    if (!item || isLoadingMoreMedia) return;\n\n    if (item.type === 'avatar') {\n      const isNearEnd = item.mediaIndex >= item.profilePhotos.photos.length - AVATAR_LOAD_TRIGGER;\n      if (!isNearEnd) return;\n      loadMoreProfilePhotos({ peerId: item.avatarOwner.id });\n    }\n\n    if (item.type === 'message' && withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: item.message.id });\n    }\n  });\n\n  const getNextItem = useLastCallback((from: MediaViewerItem, direction: number): MediaViewerItem | undefined => {\n    if (direction === 0 || isSingle) return undefined;\n\n    if (from.type === 'standalone') {\n      const { media: fromMedia, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && nextIndex < fromMedia.length) {\n        return { type: 'standalone', media: fromMedia, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'avatar') {\n      const { avatarOwner: fromAvatarOwner, profilePhotos: fromProfilePhotos, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && fromProfilePhotos && nextIndex < fromProfilePhotos.photos.length) {\n        return {\n          type: 'avatar',\n          avatarOwner: fromAvatarOwner,\n          profilePhotos: fromProfilePhotos,\n          mediaIndex: nextIndex,\n        };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'sponsoredMessage') {\n      const { message: fromSponsoredMessage, mediaIndex: fromSponsoredMessageIndex } = from;\n      const nextIndex = fromSponsoredMessageIndex! + direction;\n      if (nextIndex >= 0 && fromSponsoredMessage) {\n        return { type: 'sponsoredMessage', message: fromSponsoredMessage, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    const { message: fromMessage, mediaIndex: fromMediaIndex } = from;\n\n    const paidMedia = getMessagePaidMedia(fromMessage);\n    if (paidMedia) {\n      const nextIndex = fromMediaIndex! + direction;\n\n      if (nextIndex >= 0 && nextIndex < paidMedia.extendedMedia.length) {\n        return { type: 'message', message: fromMessage, mediaIndex: nextIndex };\n      }\n    }\n\n    const index = messageMediaIds?.indexOf(fromMessage.id);\n    if (index === undefined) return undefined;\n    const nextIndex = index + direction;\n    const nextMessageId = messageMediaIds![nextIndex];\n    const nextMessage = chatMessages?.[nextMessageId];\n    if (nextMessage) {\n      return { type: 'message', message: nextMessage };\n    }\n\n    return undefined;\n  });\n\n  const openMediaViewerItem = useLastCallback((item?: MediaViewerItem) => {\n    if (!item) {\n      handleClose();\n      return;\n    }\n\n    const itemChatId = item.type === 'avatar'\n      ? item.avatarOwner.id : item.type === 'message'\n        ? item.message.chatId : undefined;\n    const itemMessageId = item.type === 'message' ? item.message.id : undefined;\n    const itemStandaloneMedia = item.type === 'standalone' ? item.media : undefined;\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: itemChatId,\n      messageId: itemMessageId,\n      standaloneMedia: itemStandaloneMedia,\n      mediaIndex: item.mediaIndex,\n      isAvatarView: item.type === 'avatar',\n      withDynamicLoading,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    const mediaCount = profilePhotos?.photos.length\n      || standaloneMedia?.length || messageMediaIds?.length || 0;\n    if (mediaCount <= 1 || !currentItem) {\n      handleClose();\n      return;\n    }\n    // Before deleting, select previous media\n    const prevMedia = getNextItem(currentItem, -1);\n    if (prevMedia) {\n      openMediaViewerItem(prevMedia);\n      return;\n    }\n\n    if ((currentItem.type === 'avatar' && isUserId(currentItem.avatarOwner.id)) || currentItem.type === 'standalone') {\n      // Keep current item, it'll update when indexes shift\n      return;\n    }\n\n    handleClose();\n  });\n\n  const lang = useOldLang();\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div\n        className=\"media-viewer-head\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n        data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}\n      >\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          <SenderInfo\n            key={media?.id}\n            item={currentItem}\n          />\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          item={currentItem}\n          canUpdateMedia={canUpdateMedia}\n          canReportAvatar={canReportAvatar}\n          onBeforeDelete={handleBeforeDelete}\n          onReportAvatar={openReportAvatarModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportAvatarModal\n          isOpen={isReportAvatarModalOpen}\n          onClose={closeReportAvatarModal}\n          photo={avatar}\n          peerId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        item={currentItem}\n        loadMoreItemsIfNeeded={loadMoreItemsIfNeeded}\n        isLoadingMoreMedia={isLoadingMoreMedia}\n        isSynced={isSynced}\n        getNextItem={getNextItem}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectItem={openMediaViewerItem}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n        handleSponsoredClick={handleSponsoredClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      messageId,\n      origin,\n      isHidden,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isAvatarView,\n      isSponsoredMessage,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId, isSynced } = global;\n    const isChatWithSelf = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    if (isAvatarView) {\n      const avatarOwner = selectPeer(global, chatId!);\n      let canUpdateMedia = false;\n      if (avatarOwner) {\n        canUpdateMedia = isUserId(avatarOwner.id)\n          ? avatarOwner.id === currentUserId : isChatAdmin(avatarOwner as ApiChat);\n      }\n\n      const profilePhotos = selectPeerPhotos(global, chatId!);\n\n      const currentItem = getMediaViewerItem({\n        avatarOwner, standaloneMedia, profilePhotos, mediaIndex,\n      });\n      const viewableMedia = selectViewableMedia(global, origin, currentItem);\n\n      return {\n        profilePhotos,\n        avatar: profilePhotos?.photos[mediaIndex!],\n        avatarOwner,\n        isLoadingMoreMedia: profilePhotos?.isLoading,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n        standaloneMedia,\n        mediaIndex,\n        isSynced,\n        currentItem,\n        viewableMedia,\n        chatId,\n        threadId,\n        messageId,\n        message: undefined,\n        collectedMessageIds: undefined,\n        chatMessages: undefined,\n        sponsoredMessage: undefined,\n        withDynamicLoading,\n      };\n    }\n\n    let message: ApiMessage | undefined;\n    if (chatId && messageId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        message = selectScheduledMessage(global, chatId, messageId);\n      } else {\n        message = selectChatMessage(global, chatId, messageId);\n      }\n    }\n\n    let sponsoredMessage: ApiSponsoredMessage | undefined;\n    if (isSponsoredMessage && chatId) {\n      if (origin === MediaViewerOrigin.SponsoredMessage) {\n        sponsoredMessage = selectSponsoredMessage(global, chatId);\n      }\n    }\n\n    const currentItem = getMediaViewerItem({\n      message, standaloneMedia, mediaIndex, sponsoredMessage,\n    });\n    const viewableMedia = selectViewableMedia(global, origin, currentItem);\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (chatId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        chatMessages = selectChatScheduledMessages(global, chatId);\n      } else {\n        chatMessages = selectChatMessages(global, chatId);\n      }\n    }\n\n    let isLoadingMoreMedia = false;\n    const isOriginInline = origin === MediaViewerOrigin.Inline;\n    const isOriginAlbum = origin === MediaViewerOrigin.Album;\n    let collectedMessageIds: number[] | undefined;\n\n    if (chatId && threadId && messageId) {\n      if (withDynamicLoading && (isOriginInline || isOriginAlbum)) {\n        const currentSearch = selectCurrentChatMediaSearch(global);\n        isLoadingMoreMedia = Boolean(currentSearch?.isLoading);\n        const { foundIds } = (currentSearch?.currentSegment) || {};\n        collectedMessageIds = foundIds;\n      } else if (origin === MediaViewerOrigin.SharedMedia) {\n        const currentSearch = selectCurrentSharedMediaSearch(global);\n        const resultsByType = currentSearch?.resultsByType;\n        const { foundIds } = (viewableMedia?.isGif ? resultsByType?.gif : resultsByType?.media) || {};\n        collectedMessageIds = foundIds;\n      } else if (isOriginInline || isOriginAlbum) {\n        const outlyingList = selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n        collectedMessageIds = outlyingList || selectListedIds(global, chatId, threadId);\n      }\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      sponsoredMessage,\n      collectedMessageIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isLoadingMoreMedia,\n      isSynced,\n      currentItem,\n      viewableMedia,\n      canUpdateMedia: undefined,\n      avatar: undefined,\n      avatarOwner: undefined,\n      profilePhotos: undefined,\n    };\n  },\n)(MediaViewer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CdTfL4f7\",\"fadeIn\":\"MyeHARy0\",\"closing\":\"EZbKn_M3\",\"peer\":\"kW0xpExG\",\"name\":\"BDZrSTO_\",\"name_hasUnreadStory\":\"OoUm5AUZ\",\"nameHasUnreadStory\":\"OoUm5AUZ\",\"hidden\":\"lnVtxMZI\",\"contextMenu\":\"N1sagA0s\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"bu_hGbaa\",\"fullSize\":\"W9A8SEMl\",\"backdrop\":\"OFh6u50Q\",\"captionBackdrop\":\"Jd1DYS6Y\",\"backdropNonInteractive\":\"xe67dhtF\",\"close\":\"Mye8Dwxa\",\"wrapper\":\"gLHHo5k8\",\"slideAnimation\":\"GJVwqV9e\",\"slideAnimationToActive\":\"_Yn4SWUB\",\"content\":\"hGCH03qc\",\"slideAnimationFromActive\":\"ZecqXqKy\",\"storyHeader\":\"e7HHuS1g\",\"composer\":\"FXineBYO\",\"caption\":\"RKedwa0I\",\"captionGradient\":\"sHNAfxzf\",\"media\":\"PVZ8TOWS\",\"mediaPreview\":\"lQfkulvp\",\"contentInner\":\"Wi0DXPH2\",\"name\":\"Ka1CGfzq\",\"slide\":\"urTtSsk9\",\"mobileSlide\":\"AjXOHOgE\",\"slidePreview\":\"Sef28wEh\",\"activeSlide\":\"uAlXNXJN\",\"slideInner\":\"g8ypsnnC\",\"mediaWrapper\":\"YiuvOPgT\",\"forward\":\"pGKsAszF\",\"storyIndicators\":\"jGDd2sza\",\"sender\":\"eMYhXF_X\",\"senderInfoTransition\":\"PXnfXZur\",\"senderInfo\":\"WpyVfrsc\",\"senderMeta\":\"jmKI_lhC\",\"senderName\":\"H1uod43o\",\"storyMetaRow\":\"zimpR8Hz\",\"storyMeta\":\"hGTnZuar\",\"closeButton\":\"WlLsjJ2Z\",\"actions\":\"GrsJNw3y\",\"active\":\"q756IpZB\",\"visibilityButton\":\"prxptFFf\",\"visibilityButtonSelf\":\"_MVsZpgB\",\"button\":\"TkphaPyQ\",\"buttonMenu\":\"K0_xAdzf\",\"captionInner\":\"D_5mWNmi\",\"captionContent\":\"ilyTRZtw\",\"captionText\":\"hmFA5qb1\",\"hasOverflow\":\"e1gyTmKe\",\"expanded\":\"HIMnUViv\",\"animate\":\"CvnxnCxN\",\"withShowMore\":\"Vq8pl_kQ\",\"captionShowMore\":\"bM5rlQtM\",\"navigate\":\"nZ30pf4g\",\"prev\":\"SXpRZiax\",\"next\":\"twOBFwUE\",\"modal\":\"nLPOogqS\",\"thumbnail\":\"MnNC7VHS\",\"ghost\":\"fME2l_yv\",\"ghost2\":\"TYicp2_K\",\"ghostImage\":\"HjoURJRK\",\"forwardHeader\":\"JJFtefb9\",\"clickable\":\"BsqMBS2I\",\"headerTitle\":\"G8OgmMDJ\",\"forwardInfo\":\"_M8CgT7s\",\"fromPeer\":\"nJr8QgYX\"};","import type { IDimensions } from '../../../types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport fastBlur from '../../../lib/fastBlur';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getPeerStoryHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport storyRibbonStyles from '../StoryRibbon.module.scss';\nimport styles from '../StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 200;\nconst OFFSET_BOTTOM = 3.5 * REM;\nconst MOBILE_OFFSET = 0.5 * REM;\nconst MOBILE_WIDTH = 600;\n\nexport function animateOpening(\n  userId: string,\n  origin: StoryViewerOrigin,\n  thumb: string,\n  bestImageData: string | undefined,\n  dimensions: IDimensions,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, userId);\n  if (!fromImage) {\n    return;\n  }\n  const { width: windowWidth, height: windowHeight } = windowSize.get();\n  let { width: toWidth, height: toHeight } = dimensions;\n\n  const isMobile = windowWidth <= MOBILE_WIDTH;\n\n  if (isMobile) {\n    toWidth = windowWidth - 2 * MOBILE_OFFSET;\n    toHeight = windowHeight - OFFSET_BOTTOM - 2 * MOBILE_OFFSET;\n\n    const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-bottom');\n    if (safeAreaBottom) {\n      toHeight -= parseFloat(safeAreaBottom);\n    }\n  }\n\n  const toLeft = isMobile ? MOBILE_OFFSET : (windowWidth - toWidth) / 2;\n  const toTop = isMobile ? MOBILE_OFFSET : (windowHeight - (toHeight + OFFSET_BOTTOM)) / 2;\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || thumb, !bestImageData);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: '',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  userId: string,\n  origin: StoryViewerOrigin,\n  bestImageData: string,\n) {\n  const { mediaEl: toImage } = getNodes(origin, userId);\n\n  const fromImage = document.getElementById('StoryViewer')!.querySelector<HTMLImageElement>(\n    `.${styles.mobileSlide} .${styles.media}, .${styles.activeSlide} .${styles.media}`,\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: toTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  const toTranslateX = (toLeft + toWidth / 2) - (fromLeft + fromWidth / 2);\n  const toTranslateY = (toTop + toHeight / 2) - (fromTop + fromHeight / 2);\n  const toScaleX = toWidth / fromWidth;\n  const toScaleY = toHeight / fromHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData);\n    applyStyles(ghost, {\n      top: `${fromTop}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromHeight}px`,\n    });\n\n    const ghost2 = createGhost(toImage.src, undefined, true);\n    const ghost2Top = (fromTop + fromHeight / 2) - fromWidth / 2;\n    applyStyles(ghost2, {\n      top: `${ghost2Top}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromWidth}px`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.appendChild(ghost2);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX}, ${toScaleY})`,\n      });\n\n      applyStyles(ghost2, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX})`,\n        opacity: '1',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n\n          if (document.body.contains(ghost2)) {\n            document.body.removeChild(ghost2);\n          }\n\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nfunction createGhost(source: string, hasBlur = false, isGhost2 = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add(!isGhost2 ? styles.ghost : styles.ghost2);\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n  img.classList.add(styles.ghostImage);\n\n  if (hasBlur) {\n    const canvas = document.createElement('canvas');\n    canvas.classList.add(styles.thumbnail);\n    img.onload = () => {\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n      const {\n        width,\n        height,\n      } = img;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${RADIUS}px)`;\n        }\n\n        ctx.drawImage(img, -RADIUS * 2, -RADIUS * 2, width + RADIUS * 4, height + RADIUS * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, RADIUS, ITERATIONS);\n        }\n      });\n    };\n    img.src = source;\n    ghost.appendChild(canvas);\n  } else {\n    img.src = source;\n    ghost.appendChild(img);\n  }\n\n  return ghost;\n}\n\nfunction getNodes(origin: StoryViewerOrigin, userId: string) {\n  let containerSelector;\n  const mediaSelector = `#${getPeerStoryHtmlId(userId)}`;\n\n  switch (origin) {\n    case StoryViewerOrigin.StoryRibbon:\n      containerSelector = `#LeftColumn .${storyRibbonStyles.root}`;\n      break;\n    case StoryViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo';\n      break;\n    case StoryViewerOrigin.ChatList:\n      containerSelector = '#LeftColumn .chat-list';\n      break;\n    case StoryViewerOrigin.SearchResult:\n      containerSelector = '#LeftColumn .LeftSearch--container';\n      break;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement>(`${mediaSelector} img`);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n","import type { IDimensions } from '../../../types';\n\nimport { roundToNearestEven } from '../../../util/math';\n\nexport const BASE_STORY_WIDTH = 720;\nexport const BASE_STORY_HEIGHT = 1280;\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 405;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n  toActiveScale: number;\n  fromActiveScale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  const activeSlideWidth = roundToNearestEven(BASE_ACTIVE_SLIDE_WIDTH * scale);\n  const slideWidth = roundToNearestEven(BASE_SLIDE_WIDTH * scale);\n  // Avoid fractional values to prevent blurry text\n  return {\n    activeSlide: {\n      width: activeSlideWidth,\n      height: roundToNearestEven(BASE_ACTIVE_SLIDE_HEIGHT * scale),\n    },\n    slide: {\n      width: slideWidth,\n      height: roundToNearestEven(BASE_SLIDE_HEIGHT * scale),\n    },\n    scale,\n    toActiveScale: activeSlideWidth / slideWidth,\n    fromActiveScale: slideWidth / activeSlideWidth,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = roundToNearestEven((mainOffset + additionalOffset) * scale);\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport { calculateSlideSizes } from '../helpers/dimensions';\n\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nexport default function useSlideSizes() {\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  return useMemo(() => calculateSlideSizes(windowWidth, windowHeight), [windowWidth, windowHeight]);\n}\n","import type { ApiTypeStory } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash, hasMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nexport default function useStoryProps(\n  story?: ApiTypeStory, isCurrentUserPremium = false, isDropdownMenuOpen = false,\n) {\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n  const hasForwardInfo = isLoadedStory && Boolean(story.forwardInfo);\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const bestImageData = isVideo ? previewBlobUrl : fullMediaData || previewBlobUrl;\n  const hasThumb = !previewBlobUrl && !hasFullData;\n\n  const canDownload = isCurrentUserPremium && isLoadedStory && !story.noForwards;\n  const downloadHash = isLoadedStory ? getStoryMediaHash(story, 'download') : undefined;\n  const downloadMediaData = useMedia(downloadHash, !canDownload && !isDropdownMenuOpen);\n\n  return {\n    isLoadedStory,\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewHash,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaHash,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    bestImageData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GrE47IXS\",\"closeButton\":\"NlWSF1pA\",\"stealthIcon\":\"qKi5jsGM\",\"title\":\"BFctFGoT\",\"description\":\"fZIJH4IG\",\"listItem\":\"RGD70uBt\",\"icon\":\"HCYfPccW\",\"button\":\"AM_sxoXP\",\"subtitle\":\"L8oRQyKb\"};","import { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStealthMode } from '../../api/types';\n\nimport { selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport TextTimer from '../ui/TextTimer';\n\nimport styles from './StealthModeModal.module.scss';\n\ntype StateProps = {\n  isOpen?: boolean;\n  stealthMode?: ApiStealthMode;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StealthModeModal = ({ isOpen, stealthMode, isCurrentUserPremium }: StateProps) => {\n  const {\n    toggleStealthModal,\n    activateStealthMode,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n\n  useEffect(() => {\n    if (!stealthMode) return;\n    const serverTime = getServerTime();\n    if (stealthMode.cooldownUntil && stealthMode.cooldownUntil > serverTime) {\n      setIsOnCooldown(true);\n    }\n  }, [stealthMode, isOpen]);\n\n  const lang = useOldLang();\n\n  const handleTimerEnds = useLastCallback(() => {\n    setIsOnCooldown(false);\n  });\n\n  const handleClose = useLastCallback(() => {\n    toggleStealthModal({ isOpen: false });\n  });\n\n  const handleActivate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({ initialSection: 'stories' });\n      return;\n    }\n\n    activateStealthMode();\n    showNotification({\n      title: lang('StealthModeOn'),\n      message: lang('StealthModeOnHint'),\n    });\n    toggleStealthModal({ isOpen: false });\n  });\n\n  return (\n    <Modal\n      className=\"component-theme-dark\"\n      contentClassName={styles.root}\n      isOpen={isOpen}\n      isSlim\n      onClose={handleClose}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.stealthIcon}>\n        <Icon name=\"eye-crossed-outline\" />\n      </div>\n      <div className={styles.title}>{lang('StealthMode')}</div>\n      <div className={styles.description}>\n        {lang(isCurrentUserPremium ? 'StealthModeHint' : 'StealthModePremiumHint')}\n      </div>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-past\" className={styles.icon} />}\n      >\n        <span className=\"title\">{lang('HideRecentViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideRecentViewsDescription')}</span>\n      </ListItem>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-future\" className={styles.icon} aria-hidden />}\n      >\n        <span className=\"title\">{lang('HideNextViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideNextViewsDescription')}</span>\n      </ListItem>\n      <Button\n        className={styles.button}\n        disabled={isOnCooldown}\n        isShiny={!isCurrentUserPremium}\n        withPremiumGradient={!isCurrentUserPremium}\n        onClick={handleActivate}\n      >\n        {!isCurrentUserPremium ? lang('UnlockStealthMode')\n          : isOnCooldown\n            ? (<TextTimer langKey=\"AvailableIn\" endsAt={stealthMode!.cooldownUntil!} onEnd={handleTimerEnds} />)\n            : lang('EnableStealthMode')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const tabState = selectTabState(global);\n\n  return {\n    isOpen: tabState.storyViewer?.isStealthModalOpen,\n    stealthMode: global.stories.stealthMode,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StealthModeModal));\n","import { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  story?: ApiTypeStory;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({\n  isOpen, story, onClose,\n}: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useOldLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!story) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ peerId: story.peerId, storyId: story.id });\n    onClose();\n  }, [onClose, story]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import { memo, useMemo, useState } from '../../../lib/teact/teact';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...selectedIds || [], ...contactIds], query: searchQuery, type: 'user' }));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds]);\n\n  return (\n    <PeerPicker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedSelectedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      withDefaultPadding\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n      allowMultiple\n      withStatus\n      itemInputType=\"checkbox\"\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"BDK_pgpt\",\"active\":\"N8ujSwlC\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useOldLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...closeFriendIds, ...contactIds], query: searchQuery, type: 'user' }));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <PeerPicker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        withDefaultPadding\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        withStatus\n        itemInputType=\"checkbox\"\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"hz7SomkK\",\"header\":\"NV6Rt2g9\",\"closeButton\":\"SN1GFS6L\",\"headerTitle\":\"gi0Y6Ns6\",\"content\":\"sTaVDkiD\",\"section\":\"eUiuPoEC\",\"title\":\"iPPiw9DI\",\"list\":\"OUP1Ss0W\",\"option\":\"JL33Sa3b\",\"checked\":\"qVPo_cVL\",\"input\":\"zsDaUk0i\",\"icon\":\"AfYCVlys\",\"action\":\"njMeBBwY\",\"optionContent\":\"TUAAnG2w\",\"footer\":\"r24Qz2bf\",\"info\":\"ljeRVBOm\",\"submit\":\"RwNLN_rH\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPrivacySettings, ApiStory, ApiUser, PrivacyVisibility,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectPeerStory, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getHours } from '../../util/dates/units';\nimport stopEvent from '../../util/stopEvent';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Switcher from '../ui/Switcher';\nimport Transition from '../ui/Transition';\nimport AllowDenyList from './privacy/AllowDenyList';\nimport CloseFriends from './privacy/CloseFriends';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'blockContactUserIds' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: IconName;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockContactUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'nobody',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen,\n  story,\n  visibility,\n  contactListIds,\n  usersById,\n  currentUserId,\n  onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryInProfile } = getActions();\n\n  const lang = useOldLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isInProfile);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const [editingBlockingCategory, setEditingBlockingCategory] = useState<PrivacyVisibility>('everybody');\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const selectedBlockedIds = useMemo(() => {\n    if (editingBlockingCategory !== privacy?.visibility) return [];\n    return privacy?.blockUserIds || [];\n  }, [editingBlockingCategory, privacy?.blockUserIds, privacy?.visibility]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n      visibility: editingBlockingCategory,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('everybody');\n        break;\n      case 'blockContactUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('contacts');\n        break;\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isInProfile !== isPinned) {\n      toggleStoryInProfile({ peerId: story!.peerId, storyId: story!.id, isInProfile: isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getPeerTitle(lang, usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if ((action === 'blockUserIds' && privacy?.visibility === 'everybody')\n      || (action === 'blockContactUserIds' && privacy?.visibility === 'contacts')) {\n      if (!privacy?.blockUserIds?.length) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[privacy.blockUserIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            selectedIds={selectedBlockedIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? getHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <Icon name={option.icon} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Edit')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <Icon name=\"next\" />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    storyViewer: {\n      storyId, peerId,\n    },\n  } = selectTabState(global);\n  const story = (peerId && storyId)\n    ? selectPeerStory(global, peerId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n","export const PRIMARY_VIDEO_MIME = 'video/mp4; codecs=hvc1.1.6.L63.00';\nexport const SECONDARY_VIDEO_MIME = 'video/mp4; codecs=avc1.64001E';\n","import { ApiMediaFormat } from '../api/types';\n\nimport { callApi } from '../api/gramjs';\n\nconst MB = 1024 * 1024;\nconst DEFAULT_PART_SIZE = 0.25 * MB;\nconst MAX_END_TO_CACHE = 5 * MB - 1; // We only cache the first 2 MB of each file\n\nconst bufferCache = new Map<string, ArrayBuffer>();\nconst sizeCache = new Map<string, number>();\nconst pendingRequests = new Map<string, Promise<{ arrayBuffer?: ArrayBuffer; fullSize?: number } | undefined>>();\n\nexport async function* makeProgressiveLoader(\n  url: string,\n  start = 0,\n  chunkSize = DEFAULT_PART_SIZE,\n): AsyncGenerator<ArrayBuffer, void, undefined> {\n  const match = url.match(/fileSize=(\\d+)/);\n  let fileSize;\n  if (match) {\n    fileSize = match && Number(match[1]);\n  } else {\n    fileSize = sizeCache.get(url);\n  }\n\n  while (true) {\n    if (fileSize && start >= fileSize) return;\n\n    let end = start + chunkSize - 1;\n    if (fileSize && end > fileSize) {\n      end = fileSize - 1;\n    }\n\n    // Check if we have the chunk in memory\n    const cacheKey = `${url}:${start}-${end}`;\n    let arrayBuffer = bufferCache.get(cacheKey);\n\n    if (!arrayBuffer) {\n      let request = pendingRequests.get(cacheKey);\n      if (!request) {\n        request = callApi('downloadMedia', {\n          mediaFormat: ApiMediaFormat.Progressive,\n          url,\n          start,\n          end,\n        });\n\n        pendingRequests.set(cacheKey, request);\n      }\n\n      const result = await request.finally(() => {\n        pendingRequests.delete(cacheKey);\n      });\n\n      if (!result?.arrayBuffer) return;\n\n      // If fileSize is not yet defined, retrieve it from the first chunk's response\n      if (result.fullSize && !fileSize) {\n        fileSize = result.fullSize;\n        sizeCache.set(url, result.fullSize);\n      }\n\n      // Store the chunk in memory\n      arrayBuffer = result.arrayBuffer;\n\n      // Cache the first 2 MB of each file\n      if (end <= MAX_END_TO_CACHE) {\n        bufferCache.set(cacheKey, result.arrayBuffer);\n      }\n    }\n\n    // Yield the chunk data\n    yield arrayBuffer;\n\n    start = end + 1;\n  }\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport { applyStyles } from '../util/animation';\nimport unloadVideo from '../util/browser/unloadVideo';\nimport { IS_SAFARI } from '../util/browser/windowEnvironment';\nimport { makeProgressiveLoader } from '../util/progressiveLoader';\n\nconst VIDEO_REVEAL_DELAY = 100;\n\nexport function useStreaming(videoRef: ElementRef<HTMLVideoElement>, url?: string, mimeType?: string) {\n  useEffect(() => {\n    if (!url || !videoRef.current) return undefined;\n    const MediaSourceClass = getMediaSource();\n    const video = videoRef.current;\n\n    if (!IS_SAFARI || !mimeType || !MediaSourceClass?.isTypeSupported(mimeType)) {\n      return undefined;\n    }\n    const mediaSource = new MediaSourceClass();\n\n    function revealVideo() {\n      requestMutation(() => {\n        video.style.display = 'block';\n        setTimeout(() => {\n          requestMutation(() => {\n            applyStyles(video, { opacity: '1' });\n          });\n        }, VIDEO_REVEAL_DELAY);\n      });\n    }\n\n    function onSourceOpen() {\n      if (!url || !mimeType) return;\n\n      const sourceBuffer = mediaSource.addSourceBuffer(mimeType);\n      const loader = makeProgressiveLoader(url);\n\n      function onUpdateEnded() {\n        loader.next()\n          .then(({\n            value,\n            done,\n          }) => {\n            if (mediaSource.readyState !== 'open') return;\n            if (done) {\n              endOfStream(mediaSource);\n              return;\n            }\n            appendBuffer(sourceBuffer, value);\n          });\n      }\n\n      sourceBuffer.addEventListener('updateend', onUpdateEnded);\n\n      loader.next()\n        .then(({\n          value,\n          done,\n        }) => {\n          if (done || mediaSource.readyState !== 'open') return;\n          revealVideo();\n          appendBuffer(sourceBuffer, value);\n        });\n    }\n\n    mediaSource.addEventListener('sourceopen', onSourceOpen, { once: true });\n\n    requestMutation(() => {\n      applyStyles(video, {\n        display: 'none',\n        opacity: '0',\n      });\n      video.src = URL.createObjectURL(mediaSource);\n    });\n\n    return () => {\n      requestMutation(() => {\n        const src = video.src;\n        unloadVideo(video);\n        mediaSource.removeEventListener('sourceopen', onSourceOpen);\n        if (mediaSource.readyState === 'open') {\n          endOfStream(mediaSource);\n        }\n        URL.revokeObjectURL(src);\n      });\n    };\n  }, [mimeType, url, videoRef]);\n\n  return checkIfStreamingSupported(mimeType);\n}\n\nexport function checkIfStreamingSupported(mimeType?: string) {\n  if (!IS_SAFARI || !mimeType) return false;\n  return Boolean(getMediaSource()?.isTypeSupported(mimeType));\n}\n\nfunction appendBuffer(sourceBuffer: SourceBuffer, buffer: ArrayBuffer) {\n  try {\n    sourceBuffer.appendBuffer(buffer);\n  } catch (error) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn('[Stream] failed to append buffer', error);\n    }\n  }\n}\n\nfunction endOfStream(mediaSource: MediaSource) {\n  try {\n    mediaSource.endOfStream();\n  } catch (error) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn('[Stream] failed to end stream', error);\n    }\n  }\n}\n\nfunction getMediaSource(): typeof MediaSource | undefined {\n  if ('ManagedMediaSource' in window) {\n    // @ts-ignore\n    return ManagedMediaSource;\n  }\n  if ('MediaSource' in window) {\n    return MediaSource;\n  }\n  return undefined;\n}\n","import { useEffect } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport { selectPeerStories } from '../../../global/selectors';\nimport unloadVideo from '../../../util/browser/unloadVideo';\nimport { preloadImage } from '../../../util/files';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { getProgressiveUrl } from '../../../util/mediaLoader';\nimport { makeProgressiveLoader } from '../../../util/progressiveLoader';\nimport { pause } from '../../../util/schedulers';\nimport { PRIMARY_VIDEO_MIME } from '../helpers/videoFormats';\n\nimport { checkIfStreamingSupported } from '../../../hooks/useStreaming';\n\nconst preloadedStories: Record<string, Set<number>> = {};\nconst PEER_STORIES_FOR_PRELOAD = 5;\nconst PROGRESSIVE_PRELOAD_DURATION = 1000;\nconst STREAM_PRELOAD_SIZE = 1024 * 1024 * 2; // 2 MB\n\nconst FIRST_PRELOAD_DELAY = 1000;\nconst canPreload = pause(FIRST_PRELOAD_DELAY);\n\ntype MediaHash = { hash: string; format: ApiMediaFormat; isStream?: boolean };\n\nfunction useStoryPreloader(peerIds: string[]): void;\nfunction useStoryPreloader(peerId?: string, aroundStoryId?: number): void;\nfunction useStoryPreloader(peerId?: string | string[], aroundStoryId?: number) {\n  useEffect(() => {\n    if (peerId === undefined) return;\n\n    const preloadHashes = async (mediaHashes: Array<MediaHash>) => {\n      await canPreload;\n      mediaHashes.forEach(({ hash, format, isStream }) => {\n        if (isStream) {\n          preloadStream(hash);\n          return;\n        }\n        mediaLoader.fetch(\n          hash,\n          format,\n        )\n          .then((result) => {\n            if (!result) return;\n\n            if (format === ApiMediaFormat.Progressive) {\n              preloadProgressive(result);\n            }\n            if (format === ApiMediaFormat.BlobUrl) {\n              preloadImage(result);\n            }\n          });\n      });\n    };\n\n    const peerIds = Array.isArray(peerId) ? peerId : [peerId];\n\n    peerIds.forEach((id) => {\n      const storyId = aroundStoryId || getGlobal().stories.byPeerId[id]?.orderedIds?.[0];\n      if (!storyId) return;\n      preloadHashes(getPreloadMediaHashes(id, storyId));\n    });\n  }, [aroundStoryId, peerId]);\n}\n\nfunction findIdsAroundCurrentId<T>(ids: T[], currentId: T, aroundAmount: number): T[] {\n  const currentIndex = ids.indexOf(currentId);\n  const start = Math.max(currentIndex - aroundAmount, 0);\n  const end = Math.min(currentIndex + aroundAmount, ids.length);\n  return ids.slice(start, end);\n}\n\nfunction getPreloadMediaHashes(peerId: string, storyId: number) {\n  const peerStories = selectPeerStories(getGlobal(), peerId);\n  if (!peerStories || !peerStories.orderedIds?.length) {\n    return [];\n  }\n\n  const preloadIds = findIdsAroundCurrentId(peerStories.orderedIds, storyId, PEER_STORIES_FOR_PRELOAD);\n\n  const mediaHashes: Array<MediaHash> = [];\n  preloadIds.forEach((currentStoryId) => {\n    if (preloadedStories[peerId]?.has(currentStoryId)) {\n      return;\n    }\n\n    const story = peerStories.byId[currentStoryId];\n    if (!story || !('content' in story)) {\n      return;\n    }\n\n    const isVideo = Boolean(story.content.video);\n\n    // Media\n    mediaHashes.push({\n      hash: getStoryMediaHash(story, 'full'),\n      format: isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl,\n      isStream: isVideo && checkIfStreamingSupported(PRIMARY_VIDEO_MIME),\n    });\n    // Thumbnail\n    mediaHashes.push({ hash: getStoryMediaHash(story), format: ApiMediaFormat.BlobUrl });\n    if (story.content.altVideos) {\n      mediaHashes.push({\n        hash: getStoryMediaHash(story, 'full', true)!,\n        format: ApiMediaFormat.Progressive,\n      });\n    }\n\n    preloadedStories[peerId] = (preloadedStories[peerId] || new Set()).add(currentStoryId);\n  });\n\n  return mediaHashes;\n}\n\nfunction preloadProgressive(url: string) {\n  const head = document.head;\n  const video = document.createElement('video');\n  video.preload = 'auto';\n  video.src = url;\n  video.muted = true;\n  video.autoplay = true;\n  video.disableRemotePlayback = true;\n  video.style.display = 'none';\n  head.appendChild(video);\n  video.load();\n  setTimeout(() => {\n    unloadVideo(video);\n    head.removeChild(video);\n  }, PROGRESSIVE_PRELOAD_DURATION);\n}\n\nasync function preloadStream(hash: string) {\n  const loader = makeProgressiveLoader(getProgressiveUrl(hash));\n  let cachedSize = 0;\n  for await (const chunk of loader) {\n    cachedSize += chunk.byteLength;\n    if (cachedSize >= STREAM_PRELOAD_SIZE) {\n      break;\n    }\n  }\n}\n\nexport default useStoryPreloader;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStoryForwardInfo,\n  ApiTypeStory,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectPeer, selectPeerStory } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\nimport { renderTextWithEntities } from '../helpers/renderTextWithEntities';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\nimport PeerColorWrapper from '../PeerColorWrapper';\nimport EmojiIconBackground from './EmojiIconBackground';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  forwardInfo: ApiStoryForwardInfo;\n  className?: string;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  story?: ApiTypeStory;\n};\n\nconst EmbeddedStoryForward: FC<OwnProps & StateProps> = ({\n  className,\n  forwardInfo,\n  sender,\n  story,\n}) => {\n  const { openStoryViewer, loadPeerStoriesByIds, openChat } = getActions();\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!story && forwardInfo.fromPeerId && forwardInfo.storyId) {\n      loadPeerStoriesByIds({\n        peerId: forwardInfo.fromPeerId,\n        storyIds: [forwardInfo.storyId],\n      });\n    }\n  }, [forwardInfo, story]);\n\n  const senderTitle = sender ? getPeerTitle(lang, sender) : forwardInfo.fromName;\n\n  const openOriginalStory = useLastCallback(() => {\n    const { fromPeerId, storyId } = forwardInfo;\n    if (!fromPeerId) return;\n\n    const isStoryReady = story && !('isDeleted' in story && story.isDeleted);\n\n    if (isStoryReady) {\n      openStoryViewer({\n        peerId: fromPeerId,\n        storyId,\n        isSingleStory: true,\n      });\n    } else {\n      openChat({ id: fromPeerId });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(openOriginalStory);\n\n  function renderTextContent() {\n    if (story && 'content' in story && story.content.text) {\n      return (\n        <p className=\"embedded-text-wrapper\">\n          {renderTextWithEntities(story.content.text)}\n        </p>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSender() {\n    if (!sender || !senderTitle) {\n      return undefined;\n    }\n\n    const icon: IconName | undefined = !isUserId(sender.id) ? 'channel-filled' : 'user-filled';\n\n    return (\n      <>\n        {icon && <Icon name={icon} className=\"embedded-chat-icon\" />}\n        {senderTitle && renderText(senderTitle)}\n      </>\n    );\n  }\n\n  return (\n    <PeerColorWrapper\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        getPeerColorClass(sender, true, true),\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {sender?.color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          emojiDocumentId={sender.color.backgroundEmojiId}\n          className=\"EmbeddedMessage--background-icons\"\n        />\n      )}\n      <div className=\"message-text\">\n        {renderTextContent()}\n        <div className=\"message-title\">\n          {renderSender()}\n        </div>\n      </div>\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { forwardInfo }): Complete<StateProps> => {\n    const sender = forwardInfo.fromPeerId ? selectPeer(global, forwardInfo.fromPeerId) : undefined;\n    const story = forwardInfo.storyId && forwardInfo.fromPeerId\n      ? selectPeerStory(global, forwardInfo.fromPeerId, forwardInfo.storyId) : undefined;\n    return {\n      sender,\n      story,\n    };\n  },\n)(EmbeddedStoryForward));\n","import {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\nimport calcTextLineHeightAndCount from '../../util/element/calcTextLineHeightAndCount';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport EmbeddedStoryForward from '../common/embedded/EmbeddedStoryForward';\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  className?: string;\n  onExpand: NoneToVoidFunction;\n  onFold?: NoneToVoidFunction;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst LINES_TO_SHOW = 3;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand, onFold,\n}: OwnProps) {\n  const lang = useOldLang();\n  const ref = useRef<HTMLDivElement>();\n  const contentRef = useRef<HTMLDivElement>();\n  const textRef = useRef<HTMLDivElement>();\n  const showMoreButtonRef = useRef<HTMLDivElement>();\n  const renderingStory = useCurrentOrPrev(story, true);\n\n  const caption = renderingStory?.content.text;\n\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n  const isInExpandedState = isExpanded || prevIsExpanded;\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [isExpanded]);\n\n  const canExpand = hasOverflow && !isInExpandedState;\n  const { shouldRender: shouldRenderShowMore, transitionClassNames } = useShowTransitionDeprecated(\n    canExpand, undefined, true, 'slow', true,\n  );\n\n  // Setup gradient to clip caption before button\n  useLayoutEffect(() => {\n    requestMeasure(() => {\n      const container = contentRef.current;\n      const button = showMoreButtonRef.current;\n      if (!container || !button) {\n        return;\n      }\n\n      const { offsetWidth } = button;\n\n      requestMutation(() => {\n        container.style.setProperty('--expand-button-width', `${offsetWidth}px`);\n      });\n    });\n  }, [shouldRenderShowMore, lang]);\n\n  useLayoutEffect(() => {\n    requestForcedReflow(() => {\n      if (!contentRef.current || !textRef.current) {\n        return undefined;\n      }\n\n      const container = contentRef.current;\n      const textContainer = textRef.current;\n\n      const textOffsetTop = textContainer.offsetTop;\n      const { lineHeight, totalLines } = calcTextLineHeightAndCount(textContainer);\n      const isOverflowing = totalLines > LINES_TO_SHOW;\n      const overflowShift = textOffsetTop + lineHeight * LINES_TO_SHOW;\n\n      return () => {\n        if (isOverflowing) {\n          addExtraClass(container, styles.hasOverflow);\n          setHasOverflow(true);\n        }\n\n        container.style.setProperty('--_overflow-shift', `${overflowShift}px`);\n      };\n    });\n  }, [caption]);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      ref.current?.scrollTo({ top: 0 });\n    }\n  }, [isExpanded]);\n\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    isInExpandedState && styles.expanded,\n    shouldRenderShowMore && styles.withShowMore,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        onClick={canExpand ? onExpand : onFold}\n      >\n        <div\n          ref={ref}\n          className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}\n        >\n          {renderingStory?.forwardInfo && (\n            <EmbeddedStoryForward\n              forwardInfo={renderingStory.forwardInfo}\n              className={styles.forwardInfo}\n            />\n          )}\n          {renderingStory && caption && (\n            <div ref={textRef} className={styles.captionText}>\n              <MessageText\n                messageOrStory={renderingStory}\n                withTranslucentThumbs\n                forcePlayback\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      {shouldRenderShowMore && (\n        <div\n          ref={showMoreButtonRef}\n          className={buildClassName(styles.captionShowMore, transitionClassNames)}\n          onClick={onExpand}\n        >\n          {lang('Story.CaptionShowMore')}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YVD19vOP\",\"viewInfo\":\"cknL5COh\",\"interactive\":\"pJAyeGkG\",\"avatars\":\"Vz_VtJ16\",\"spacer\":\"kKoeDk3Z\",\"reactionCount\":\"sf3u_6Vh\",\"reactionCountHeart\":\"Er2XKRqi\",\"footerItem\":\"vJRk_UUk\",\"views\":\"nIv3YAnZ\",\"viewIcon\":\"WyBiNM6e\",\"reactionButton\":\"lpDXVIuf\",\"reactionHeart\":\"twgMDT1y\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { HEART_REACTION } from '../../config';\nimport {\n  getReactionKey, getStoryKey, isSameReaction,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport ReactionAnimatedEmoji from '../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../ui/Button';\n\nimport styles from './StoryFooter.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  className?: string;\n};\n\nconst StoryFooter = ({\n  story,\n  className,\n}: OwnProps) => {\n  const { openStoryViewModal, openForwardMenu, sendStoryReaction } = getActions();\n  const lang = useOldLang();\n\n  const {\n    views, isOut, peerId, id: storyId, sentReaction,\n  } = story;\n  const { viewsCount, forwardsCount, reactionsCount } = views || {};\n  const isChannel = !isUserId(peerId);\n\n  const isSentStoryReactionHeart = sentReaction && isSameReaction(sentReaction, HEART_REACTION);\n\n  const canForward = Boolean(\n    (isOut || isChannel)\n    && story.isPublic\n    && !story.noForwards,\n  );\n\n  const containerId = getStoryKey(peerId, storyId);\n\n  const recentViewers = useMemo(() => {\n    const { users: { byId: usersById } } = getGlobal();\n\n    const recentViewerIds = views && 'recentViewerIds' in views ? views.recentViewerIds : undefined;\n    if (!recentViewerIds) return undefined;\n\n    return recentViewerIds.map((id) => usersById[id]).filter(Boolean);\n  }, [views]);\n\n  const handleOpenStoryViewModal = useLastCallback(() => {\n    openStoryViewModal({ storyId });\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleLikeStory = useLastCallback(() => {\n    const reaction = sentReaction ? undefined : HEART_REACTION;\n    sendStoryReaction({\n      peerId,\n      storyId,\n      containerId,\n      reaction,\n    });\n  });\n\n  if (!viewsCount) {\n    return (\n      <div className={buildClassName(styles.root, className)}>\n        {lang('NobodyViewed')}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        className,\n      )}\n    >\n      <div\n        className={buildClassName(styles.viewInfo, !isChannel && styles.interactive)}\n        onClick={!isChannel ? handleOpenStoryViewModal : undefined}\n      >\n        {Boolean(recentViewers?.length) && (\n          <AvatarList\n            size=\"small\"\n            peers={recentViewers}\n            className={styles.avatars}\n          />\n        )}\n\n        {isChannel ? (\n          <span className={styles.views}>\n            <Icon name=\"channelviews\" className={styles.viewIcon} />\n            {viewsCount}\n          </span>\n        ) : (\n          <span className={styles.views}>{lang('Views', viewsCount, 'i')}</span>\n        )}\n        {Boolean(reactionsCount) && !isChannel && (\n          <span className={styles.reactionCount}>\n            <Icon name=\"heart\" className={styles.reactionCountHeart} />\n            {reactionsCount}\n          </span>\n        )}\n      </div>\n      <div className={styles.spacer} />\n      {canForward && (\n        <Button\n          color=\"translucent\"\n          size=\"smaller\"\n          round\n          onClick={handleForwardClick}\n          ariaLabel={lang('Forward')}\n          className={styles.footerItem}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {isChannel && (\n        <>\n          {Boolean(forwardsCount) && (\n            <div className={styles.footerItem}>\n              <Button\n                round\n                color=\"translucent\"\n                size=\"smaller\"\n                nonInteractive\n                ariaLabel={lang('PublicShares')}\n              >\n                <Icon name=\"loop\" />\n              </Button>\n              <span>{forwardsCount}</span>\n            </div>\n          )}\n          <div className={styles.footerItem}>\n            <Button\n              round\n              className={styles.reactionButton}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleLikeStory}\n              ariaLabel={lang('AccDescrLike')}\n            >\n              {sentReaction && (\n                <ReactionAnimatedEmoji\n                  key={getReactionKey(sentReaction)}\n                  containerId={containerId}\n                  reaction={sentReaction}\n                  withEffectOnly={isSentStoryReactionHeart}\n                />\n              )}\n              {(!sentReaction || isSentStoryReactionHeart) && (\n                <Icon\n                  name={isSentStoryReactionHeart ? 'heart' : 'heart-outline'}\n                  className={buildClassName(isSentStoryReactionHeart && styles.reactionHeart)}\n                />\n              )}\n            </Button>\n            {Boolean(reactionsCount) && (<span>{reactionsCount}</span>)}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StoryFooter);\n","import type React from '../../lib/teact/teact';\nimport {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c1fbGgcx\",\"viewed\":\"xwOKghO2\",\"active\":\"ZuByYcIx\",\"inner\":\"qyBCpJct\",\"progress\":\"XY98E7VM\",\"paused\":\"n9V6B7hP\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMediaAreaChannelPost,\n  ApiPeer, ApiStealthMode, ApiStory, ApiTypeStory,\n} from '../../api/types';\nimport type { IDimensions } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { EDITABLE_STORY_INPUT_CSS_SELECTOR, EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { isChatChannel } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectChat,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPaidMessagesStars,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { IS_SAFARI } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatMediaDuration, formatRelativePastTime } from '../../util/dates/dateFormat';\nimport download from '../../util/download';\nimport { isUserId } from '../../util/entities/ids';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { round } from '../../util/math';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\nimport { BASE_STORY_HEIGHT, BASE_STORY_WIDTH } from './helpers/dimensions';\nimport { PRIMARY_VIDEO_MIME, SECONDARY_VIDEO_MIME } from './helpers/videoFormats';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport { useStreaming } from '../../hooks/useStreaming';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Avatar from '../common/Avatar';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport Transition from '../ui/Transition';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\nimport StoryCaption from './StoryCaption';\nimport StoryFooter from './StoryFooter';\nimport StoryProgress from './StoryProgress';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peerId: string;\n  storyId: number;\n  dimensions: IDimensions;\n\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (story: ApiTypeStory) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peer: ApiPeer;\n  forwardSender?: ApiPeer;\n  fromPeer?: ApiPeer;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  isCurrentUserPremium?: boolean;\n  stealthMode: ApiStealthMode;\n  withHeaderAnimation?: boolean;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n}\n\nconst VIDEO_MIN_READY_STATE = IS_SAFARI ? 4 : 3;\nconst SPACEBAR_CODE = 32;\n\nconst STEALTH_MODE_NOTIFICATION_DURATION = 4000;\n\nfunction Story({\n  peerId,\n  storyId,\n  peer,\n  forwardSender,\n  fromPeer,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  arePeerSettingsLoaded,\n  getIsAnimating,\n  isCurrentUserPremium,\n  stealthMode,\n  withHeaderAnimation,\n  onDelete,\n  onClose,\n  onReport,\n  paidMessagesStars,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadPeerSkippedStories,\n    openForwardMenu,\n    copyStoryLink,\n    toggleStoryInProfile,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadPeerSettings,\n    fetchChat,\n    loadStoryViews,\n    toggleStealthModal,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  const [isDropdownMenuOpen, markDropdownMenuOpen, unmarkDropdownMenuOpen] = useFlag(false);\n  const videoRef = useRef<HTMLVideoElement>();\n  const {\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  } = useStoryProps(story, isCurrentUserPremium, isDropdownMenuOpen);\n\n  const isLoadedStory = story && 'content' in story;\n  const isChangelog = peerId === storyChangelogUserId;\n  const isUserStory = isUserId(peerId);\n  const isChatStory = !isUserStory;\n  const isChannelStory = isChatStory && isChatChannel(peer as ApiChat);\n  const isOut = isLoadedStory && story.isOut;\n\n  const canPinToProfile = useCurrentOrPrev(\n    isOut ? !story.isInProfile : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isOut ? story.isInProfile : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isOut && (story.date + viewersExpirePeriod) < getServerTime(),\n  );\n\n  const forwardSenderTitle = forwardSender ? getPeerTitle(oldLang, forwardSender)\n    : (isLoadedStory && story.forwardInfo?.fromName);\n\n  const canCopyLink = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !isChangelog\n    && peer?.hasUsername,\n  );\n\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && !isChangelog\n    && !isCaptionExpanded,\n  );\n\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n\n  const duration = isLoadedStory && story.content.video?.duration\n    ? story.content.video.duration\n    : undefined;\n\n  const shouldShowComposer = !(isOut && isUserStory) && !isChangelog && !isChannelStory && !isAccountFrozen;\n  const shouldShowFooter = isLoadedStory && !shouldShowComposer && (isOut || isChannelStory);\n  const headerAnimation = isMobile && withHeaderAnimation ? 'slideFade' : 'none';\n\n  const {\n    shouldRender: shouldRenderSkeleton,\n    transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransitionDeprecated(!hasFullData);\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(fullMediaData));\n\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransitionDeprecated(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(shouldShowComposer);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransitionDeprecated(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransitionDeprecated(true);\n  const {\n    shouldRender: shouldRenderCaption,\n    transitionClassNames: captionAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(hasText || hasForwardInfo);\n\n  const isStreamingSupported = useStreaming(videoRef, fullMediaData, PRIMARY_VIDEO_MIME);\n\n  useStoryPreloader(peerId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ peerId, storyId });\n    }\n  }, [storyId, peerId]);\n\n  useEffect(() => {\n    loadPeerSkippedStories({ peerId });\n  }, [peerId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    const canWrite = isUserId(peerId);\n    if (!isChatExist && canWrite) {\n      fetchChat({ chatId: peerId });\n    }\n  }, [isChatExist, peerId]);\n  useEffect(() => {\n    if (isChatExist && !arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId });\n    }\n  }, [arePeerSettingsLoaded, isChatExist, peerId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const handleDropdownMenuOpen = useLastCallback(() => {\n    markDropdownMenuOpen();\n    handlePauseStory();\n  });\n\n  const handleDropdownMenuClose = useLastCallback(() => {\n    unmarkDropdownMenuOpen();\n    handlePlayStory();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleLongPressStart,\n    onEnd: handleLongPressEnd,\n  });\n\n  const isUnsupported = useUnsupportedMedia(\n    videoRef,\n    undefined,\n    !isVideo || !fullMediaData || isStreamingSupported,\n  );\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => {\n    if (hasAllData && !isUnsupported) handlePlayStory();\n  }, [hasAllData, isUnsupported]);\n\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isLoadedStory || isDeletedStory || areViewsExpired) return;\n\n    if (!isOut && !isChannelStory) return;\n\n    // Refresh counters each time\n    loadStoryViews({ peerId, storyId });\n  }, [isDeletedStory, areViewsExpired, isLoadedStory, peerId, storyId, isOut, isChannelStory]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) {\n      return;\n    }\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: peerId });\n  });\n\n  const handleForwardPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: forwardSender!.id });\n  });\n\n  const handleFromPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: fromPeer!.id });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    openNextStory();\n  });\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      markStoryPlaying();\n    } else {\n      unmarkStoryPlaying();\n    }\n    if (duration && round(video.currentTime, 2) >= round(duration, 2)) {\n      handleOpenNextStory();\n    }\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ peerId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    onDelete(story!);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'nobody');\n\n    let message;\n    const myName = getPeerTitle(oldLang, peer);\n    switch (visibility) {\n      case 'nobody':\n        message = oldLang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = oldLang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = oldLang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: oldLang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handleOpenStealthModal = useLastCallback(() => {\n    if (stealthMode.activeUntil && getServerTime() < stealthMode.activeUntil) {\n      const diff = stealthMode.activeUntil - getServerTime();\n      showNotification({\n        title: oldLang('StealthModeOn'),\n        message: oldLang('Story.ToastStealthModeActiveText', formatMediaDuration(diff)),\n        duration: STEALTH_MODE_NOTIFICATION_DURATION,\n      });\n      return;\n    }\n\n    toggleStealthModal({ isOpen: true });\n  });\n\n  const handleDownload = useLastCallback(() => {\n    if (!downloadMediaData) return;\n    download(downloadMediaData, `story-${peerId}-${storyId}.${isVideo ? 'mp4' : 'jpg'}`);\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: oldLang('StoryNotFound'),\n    });\n  }, [oldLang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          onClick={onTrigger}\n          className={buildClassName(styles.button, isOpen && 'active')}\n          ariaLabel={oldLang('AccDescrOpenMenu2')}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      );\n    };\n  }, [isMobile, oldLang]);\n\n  function renderStoriesTabs() {\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    if (!isUserStory) return undefined;\n\n    let privacyIcon: IconName = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isOut) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'nobody':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isOut && styles.visibilityButtonSelf)}\n        onClick={isOut ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <Icon name={privacyIcon} />\n        {isOut && <Icon name=\"next\" />}\n      </div>\n    );\n  }\n\n  function renderSenderInfo() {\n    return (\n      <div className={styles.senderInfo}>\n        <Avatar\n          peer={peer}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderMeta}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getPeerTitle(oldLang, peer) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {forwardSenderTitle && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.forwardHeader, forwardSender && styles.clickable,\n                )}\n                onClick={forwardSender ? handleForwardPeerClick : undefined}\n              >\n                <Icon name=\"loop\" />\n                <span className={styles.headerTitle}>\n                  {renderText(forwardSenderTitle)}\n                </span>\n              </span>\n            )}\n            {fromPeer && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.fromPeer,\n                )}\n                onClick={handleFromPeerClick}\n              >\n                <Avatar peer={fromPeer} size=\"micro\" />\n                <span className={styles.headerTitle}>\n                  {renderText(getPeerTitle(oldLang, fromPeer) || '')}\n                </span>\n              </span>\n            )}\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativePastTime(oldLang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{oldLang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Transition activeKey={Number(peerId)} name={headerAnimation} className={styles.senderInfoTransition}>\n          {renderSenderInfo()}\n        </Transition>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={styles.button}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={oldLang('Volume')}\n            >\n              <Icon name={(isMuted || noSound) ? 'speaker-muted-story' : 'speaker-story'} />\n            </Button>\n          )}\n          <DropdownMenu\n            className={styles.buttonMenu}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handleDropdownMenuOpen}\n            onClose={handleDropdownMenuClose}\n          >\n            {canCopyLink && <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{oldLang('CopyLink')}</MenuItem>}\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>\n                {oldLang(isUserStory ? 'StorySave' : 'SaveToPosts')}\n              </MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>\n                {oldLang(isUserStory ? 'ArchiveStory' : 'RemoveFromPosts')}\n              </MenuItem>\n            )}\n            {canDownload && (\n              <MenuItem icon=\"download\" disabled={!downloadMediaData} onClick={handleDownload}>\n                {oldLang('lng_media_download')}\n              </MenuItem>\n            )}\n            {!isOut && isUserStory && (\n              <MenuItem icon=\"eye-crossed-outline\" onClick={handleOpenStealthModal}>\n                {oldLang('StealthMode')}\n              </MenuItem>\n            )}\n            {!isOut && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{oldLang('lng_report_story')}</MenuItem>}\n            {isOut && (\n              <MenuItem\n                icon=\"delete\"\n                destructive\n                onClick={handleDeleteStoryClick}\n              >\n                {oldLang('Delete')}\n              </MenuItem>\n            )}\n          </DropdownMenu>\n          <Button\n            className={buildClassName(styles.button, styles.closeButton)}\n            round\n            size=\"tiny\"\n            color=\"translucent-white\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const inputPlaceholder = paidMessagesStars\n    ? lang('ComposerPlaceholderPaidReply', {\n      amount: formatStarsAsIcon(lang, paidMessagesStars, { asFont: true, className: 'placeholder-star-icon' }),\n    }, {\n      withNodes: true,\n    })\n    : oldLang(isChatStory ? 'ReplyToGroupStory' : 'ReplyPrivately');\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img\n            key={`preview-${storyId}`}\n            src={previewBlobUrl}\n            draggable={false}\n            alt=\"\"\n            className={buildClassName(styles.media, styles.mediaPreview, previewTransitionClassNames)}\n          />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton className={buildClassName(skeletonTransitionClassNames, styles.fullSize)} />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            key={`video-${storyId}`}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            width={BASE_STORY_WIDTH}\n            height={BASE_STORY_HEIGHT}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            disableRemotePlayback\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={oldLang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={oldLang('Next')}\n            />\n          </>\n        )}\n        {isLoadedStory && fullMediaData && (\n          <MediaAreaOverlay\n            key={`area-overlay-${storyId}-${peerId}`}\n            story={story}\n            isActive\n            isStoryPlaying={isDropdownMenuOpen}\n          />\n        )}\n        {!isMobile && (\n          <div className={styles.content}>\n            <div className={styles.contentInner}>\n              <Avatar\n                peer={peer}\n              />\n              <div className={styles.name}>{renderText(getPeerTitle(oldLang, peer) || '')}</div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldShowFooter && (\n        <StoryFooter story={story} className={appearanceAnimationClassNames} />\n      )}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={oldLang('Close')}\n        />\n      )}\n      {hasText && <div className={buildClassName(styles.captionGradient, captionAppearanceAnimationClassNames)} />}\n      {shouldRenderCaption && (\n        <StoryCaption\n          key={`caption-${storyId}-${peerId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          onFold={foldCaption}\n          className={captionAppearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={peerId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isOut}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector={EDITABLE_STORY_INPUT_CSS_SELECTOR}\n          editableInputId={EDITABLE_STORY_INPUT_ID}\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={inputPlaceholder}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  peerId,\n  storyId,\n  isDeleteModalOpen,\n}): Complete<StateProps> => {\n  const { appConfig } = global;\n  const user = selectUser(global, peerId);\n  const chat = selectChat(global, peerId);\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: {\n      isMuted,\n      viewModal,\n      isPrivacyModalOpen,\n      isStealthModalOpen,\n      storyList,\n    },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n    safeLinkModalUrl,\n    mapModal,\n    reportModal,\n    giftInfoModal,\n    isPaymentMessageConfirmDialogOpen,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const story = selectPeerStory(global, peerId, storyId);\n  const isLoadedStory = story && 'content' in story;\n  const shouldForcePause = Boolean(\n    isPaymentMessageConfirmDialogOpen\n    || viewModal || forwardedStoryId || tabState.reactionPicker?.storyId || reportModal || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen || safeLinkModalUrl || isStealthModalOpen || mapModal || giftInfoModal,\n  );\n\n  const forwardInfo = isLoadedStory ? story.forwardInfo : undefined;\n  const mediaAreas = isLoadedStory ? story.mediaAreas : undefined;\n  const forwardSenderId = forwardInfo?.fromPeerId\n    || mediaAreas?.find((area): area is ApiMediaAreaChannelPost => area.type === 'channelPost')?.channelId;\n  const forwardSender = forwardSenderId ? selectPeer(global, forwardSenderId) : undefined;\n  const withHeaderAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  const fromPeer = isLoadedStory && story.fromId ? selectPeer(global, story.fromId) : undefined;\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    peer: (user || chat)!,\n    forwardSender,\n    fromPeer,\n    story,\n    orderedIds: storyList?.storyIdsByPeerId[peerId],\n    isMuted,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    shouldForcePause,\n    storyChangelogUserId: appConfig.storyChangelogUserId,\n    viewersExpirePeriod: appConfig.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n    stealthMode: global.stories.stealthMode,\n    withHeaderAnimation,\n    paidMessagesStars,\n    isAccountFrozen,\n  };\n})(Story));\n","import { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPeer, ApiPeerStories, ApiTypeStory,\n} from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peer?: ApiPeer;\n  peerStories?: ApiPeerStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n  origin?: StoryViewerOrigin;\n  storyIdsForViewer?: number[];\n}\n\nfunction StoryPreview({\n  peer, peerStories, lastViewedId, storyIdsForViewer, origin,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadPeerSkippedStories } = getActions();\n  const lang = useOldLang();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!peerStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = peerStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId && storyIdsForViewer?.includes(lastViewedId)\n      ? lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1)\n      : -1;\n    const resultId = byId[previewIndexId]?.id || storyIdsForViewer?.[0] || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, peerStories, storyIdsForViewer]);\n\n  const isLoaded = story && 'content' in story;\n\n  useEffect(() => {\n    if (story && !isLoaded) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [story, isLoaded]);\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!peer || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ peerId: story.peerId, storyId: story.id, origin }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n      {isLoaded && <MediaAreaOverlay story={story} />}\n\n      <div className={styles.content}>\n        <div className={styles.contentInner}>\n          <Avatar\n            peer={peer}\n          />\n          <div className={styles.name}>{renderText(getPeerTitle(lang, peer) || '')}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { peer }): Complete<StateProps> => {\n  const {\n    storyViewer: {\n      lastViewedByPeerId: lastViewedByPeerIds,\n      origin,\n      storyList,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: peer?.id ? lastViewedByPeerIds?.[peer.id] : undefined,\n    origin,\n    storyIdsForViewer: peer?.id ? storyList?.storyIdsByPeerId[peer.id] : undefined,\n  };\n})(StoryPreview));\n","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiPeerStories, ApiTypeStory } from '../../api/types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getStoryKey } from '../../global/helpers';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeer,\n  selectTabState,\n} from '../../global/selectors';\nimport { IS_IOS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport focusEditableElement from '../../util/focusEditableElement';\nimport { clamp } from '../../util/math';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { calculateOffsetX } from './helpers/dimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useSlideSizes from './hooks/useSlideSizes';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (story: ApiTypeStory) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peerIds: string[];\n  currentPeerId?: string;\n  currentStoryId?: number;\n  byPeerId?: Record<string, ApiPeerStories>;\n  isSinglePeer?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SCROLL_RELEASE_DELAY = 1500;\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nfunction StorySlides({\n  peerIds,\n  currentPeerId,\n  currentStoryId,\n  isOpen,\n  isSinglePeer,\n  isSingleStory,\n  isPrivate,\n  isArchive,\n  byPeerId,\n  isDeleteModalOpen,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const { stopActiveReaction } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n  const [renderingPeerId, setRenderingPeerId] = useState(currentPeerId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevPeerId = usePreviousDeprecated(currentPeerId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSinglePeer = useCurrentOrPrev(isSinglePeer, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const slideSizes = useSlideSizes();\n  const { height: windowHeight, width: windowWidth } = useWindowSize();\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const { isMobile } = useAppLayout();\n\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  function setRef(ref: HTMLDivElement | undefined, peerId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[peerId]) {\n      rendersRef.current[peerId] = { current: ref };\n    } else {\n      rendersRef.current[peerId].current = ref;\n    }\n  }\n\n  const renderingPeerIds = useMemo(() => {\n    if (renderingPeerId && (renderingIsSinglePeer || renderingIsSingleStory)) {\n      return [renderingPeerId];\n    }\n\n    const index = renderingPeerId ? peerIds.indexOf(renderingPeerId) : -1;\n    if (!renderingPeerId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, peerIds.length);\n\n    return peerIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSinglePeer, renderingPeerId, peerIds]);\n\n  const renderingPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !renderingPeerId) {\n      return -1;\n    }\n\n    return renderingPeerIds.indexOf(renderingPeerId);\n  }, [renderingPeerId, renderingPeerIds]);\n\n  const currentPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !currentPeerId) {\n      return -1;\n    }\n    return renderingPeerIds.indexOf(currentPeerId);\n  }, [currentPeerId, renderingPeerIds]);\n\n  useEffect(() => {\n    if (!isMobile) return;\n\n    // If animation disabled, set rendering peer id to current peer\n    setRenderingPeerId(currentPeerId);\n  }, [currentPeerId, isMobile]);\n\n  // Handling the flipping of stories from a current user\n  useEffect(() => {\n    if (renderingPeerId === currentPeerId && currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n  }, [currentPeerId, currentStoryId, renderingPeerId, renderingStoryId]);\n\n  useEffect(() => {\n    if (isMobile) return undefined;\n    if (prevPeerId && prevPeerId !== currentPeerId) {\n      setIsAnimating(true);\n    }\n\n    return () => {\n      setIsAnimating(false);\n    };\n  }, [prevPeerId, currentPeerId, setIsAnimating, isMobile]);\n\n  useEffect(() => {\n    return () => {\n      if (!currentStoryId || !currentPeerId) return;\n      stopActiveReaction({\n        containerId: getStoryKey(currentPeerId, currentStoryId),\n      });\n    };\n  }, [currentStoryId, currentPeerId]);\n\n  const slideAmount = currentPeerPosition - renderingPeerPosition;\n  const isBackward = renderingPeerPosition > currentPeerPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return peerIds.reduce<Record<string, number>>((transformX, peerId, index) => {\n      if (peerId === renderingPeerId) {\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && peerIds[index - 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < peerIds.length - 1 && peerIds[index + 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentPeerId === peerId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useEffect(() => {\n    if (!containerRef.current || !isOpen) {\n      return undefined;\n    }\n\n    let offsetY = 0;\n\n    const getCurrentStoryRef = () => {\n      return renderingPeerId ? rendersRef.current[renderingPeerId]?.current : undefined;\n    };\n\n    const onRelease = (event: MouseEvent | TouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      const current = getCurrentStoryRef();\n      if (!current) return;\n\n      if (offsetY < -SWIPE_Y_THRESHOLD) {\n        const composer = document.getElementById(EDITABLE_STORY_INPUT_ID);\n        if (composer) {\n          requestMutation(() => {\n            focusEditableElement(composer);\n          });\n        }\n        return;\n      }\n\n      if (offsetY > SWIPE_Y_THRESHOLD) {\n        onClose();\n        if (event.type === 'wheel') {\n          disableScrolling();\n          setTimeout(enableScrolling, SCROLL_RELEASE_DELAY);\n        }\n      } else {\n        requestMutation(() => {\n          current.style.setProperty('--slide-translate-y', '0px');\n        });\n      }\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      withWheelDrag: true,\n      excludedClosestSelector: '.Composer',\n      onDrag: (event, captureEvent, {\n        dragOffsetX, dragOffsetY,\n      }) => {\n        if (isReleasedRef.current) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (event.type === 'mousemove') return;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const current = getCurrentStoryRef();\n        if (!current) return;\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(absOffsetY) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          offsetY = clamp(dragOffsetY, -limit, limit);\n          if (offsetY > 0) {\n            requestMutation(() => {\n              current.style.setProperty('--slide-translate-y', `${offsetY * (isMobile ? 1 : -1)}px`);\n            });\n          }\n          if (event.type === 'wheel' && Math.abs(offsetY) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onRelease,\n    });\n  }, [isOpen, onClose, windowWidth, windowHeight, isMobile, renderingPeerId]);\n\n  useLayoutEffect(() => {\n    if (isMobile) return;\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([peerId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n        current.style.setProperty('--slide-content-scale', String(slideSizes.toActiveScale));\n\n        return;\n      }\n\n      const getScale = () => {\n        if (currentPeerId === peerId) {\n          return String(slideSizes.toActiveScale);\n        }\n        if (peerId === renderingPeerId) {\n          return String(slideSizes.fromActiveScale);\n        }\n        return '1';\n      };\n\n      let offsetY = 0;\n      if (peerId === renderingPeerId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * slideSizes.fromActiveScale;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (peerId === currentPeerId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[peerId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', getScale());\n    });\n  }, [currentPeerId, getIsAnimating, renderingPeerId, slideSizes, isMobile]);\n\n  const handleTransitionEnd = useLastCallback((event: React.TransitionEvent<HTMLDivElement>) => {\n    // It is `target` that is needed here, not `currentTarget`\n    const target = event.target as HTMLDivElement | null;\n\n    if (!target || !target.classList.contains(styles.activeSlide)) return;\n\n    if (renderingPeerId !== currentPeerId) {\n      setRenderingPeerId(currentPeerId);\n      setRenderingStoryId(currentStoryId);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n    setIsAnimating(false);\n  });\n\n  if (isMobile) {\n    return (\n      <div className={styles.wrapper} ref={containerRef}>\n        <div\n          className={styles.mobileSlide}\n          ref={(ref) => setRef(ref, renderingPeerId!)}\n        >\n          <Story\n            peerId={renderingPeerId!}\n            storyId={renderingStoryId!}\n            onDelete={onDelete}\n            dimensions={slideSizes.activeSlide}\n            isPrivateStories={renderingIsPrivate}\n            isArchivedStories={renderingIsArchive}\n            isDeleteModalOpen={isDeleteModalOpen}\n            isSingleStory={isSingleStory}\n            getIsAnimating={getIsAnimating}\n            onClose={onClose}\n            onReport={onReport}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  function renderStoryPreview(peerId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          peer={selectPeer(getGlobal(), peerId)}\n          peerStories={byPeerId?.[peerId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(peerId: string) {\n    const style = isMobile ? undefined : buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          peerId={peerId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.wrapper}\n      ref={containerRef}\n      style={`--story-viewer-scale: ${slideSizes.scale}`}\n      onTransitionEnd={handleTransitionEnd}\n    >\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingPeerIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingPeerIds.map((peerId, index) => {\n        if (peerId === renderingPeerId) {\n          return renderStory(renderingPeerId);\n        }\n\n        return renderStoryPreview(peerId, index, index - renderingPeerPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    storyViewer: {\n      peerId: currentPeerId, storyId: currentStoryId, isSinglePeer, isSingleStory, isPrivate, isArchive, storyList,\n    },\n  } = selectTabState(global);\n  const { byPeerId, orderedPeerIds: { active } } = global.stories;\n\n  return {\n    byPeerId,\n    peerIds: storyList?.peerIds ?? active,\n    currentPeerId,\n    currentStoryId,\n    isSinglePeer,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n}, (global) => selectIsStoryViewerOpen(global))(StorySlides));\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"views-list\":\"gpDY8bos\",\"viewsList\":\"gpDY8bos\",\"views-list-loading\":\"vuRAfQ5v\",\"viewsListLoading\":\"vuRAfQ5v\",\"info\":\"AOSUIChK\",\"centeredInfo\":\"oGLhkkS7\",\"view-reaction\":\"MLaabS6n\",\"viewReaction\":\"MLaabS6n\",\"header\":\"d3N2bktu\",\"content\":\"QmRA3HZK\",\"top-button\":\"Dkv8GAxf\",\"topButton\":\"Dkv8GAxf\",\"contact-filter\":\"YpB_9VxE\",\"contactFilter\":\"YpB_9VxE\",\"selected\":\"DoUlpdZJ\",\"sort\":\"axDpgq9G\",\"sort-button\":\"Bm5VA66f\",\"sortButton\":\"Bm5VA66f\",\"icon-sort\":\"YVQiH93R\",\"iconSort\":\"YVQiH93R\",\"icon-down\":\"NXP9aMD0\",\"iconDown\":\"NXP9aMD0\",\"search\":\"QQQqBLK6\",\"bottom-info\":\"_CSv6suH\",\"bottomInfo\":\"_CSv6suH\",\"scrolled\":\"RYQ0liYe\",\"footer\":\"dUK7rP37\",\"closeButton\":\"abPzLiCH\",\"opacity-fade-in\":\"cX8oY3zb\",\"opacityFadeIn\":\"cX8oY3zb\",\"fadeIn\":\"Sx_aeh1o\",\"blocked\":\"L82sciL8\",\"check\":\"UqGBKwjg\",\"menuBubble\":\"dRqemuTA\",\"with-colored-status\":\"GQ96fta9\",\"withColoredStatus\":\"GQ96fta9\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiPeer, ApiTypeStoryView, ApiUser,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectPeer } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\n\nimport styles from './StoryViewModal.module.scss';\n\ntype OwnProps = {\n  storyView: ApiTypeStoryView;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\nconst BULLET = '\\u2022';\n\nconst StoryView = ({\n  storyView,\n  peer,\n  availableReactions,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    closeStoryViewer,\n    unblockUser,\n    blockUser,\n    deleteContact,\n    updateStoryView,\n    focusMessage,\n    openStoryViewer,\n    closeStoryViewModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    const { type } = storyView;\n\n    if (type === 'repost') {\n      closeStoryViewModal();\n      openStoryViewer({\n        peerId: storyView.peerId,\n        storyId: storyView.storyId,\n      });\n      return;\n    }\n\n    closeStoryViewer();\n\n    setTimeout(() => {\n      if (type === 'user') {\n        openChat({ id: storyView.peerId });\n      } else if (type === 'forward') {\n        focusMessage({ chatId: storyView.peerId, messageId: storyView.messageId });\n      }\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const contextActions = useMemo(() => {\n    if (!isUserId(storyView.peerId)) return undefined;\n    const { peerId, areStoriesBlocked, isUserBlocked } = storyView;\n    const user = peer as ApiUser;\n    const { isContact } = user || {};\n    const fullName = getUserFullName(user);\n\n    const actions: MenuItemContextAction[] = [];\n\n    if (!isUserBlocked) {\n      if (!areStoriesBlocked) {\n        actions.push({\n          handler: () => {\n            blockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: true });\n          },\n          title: lang('StoryHideFrom', fullName),\n          icon: 'hand-stop',\n        });\n      } else {\n        actions.push({\n          handler: () => {\n            unblockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: false });\n          },\n          title: lang('StoryShowBackTo', fullName),\n          icon: 'play-story',\n        });\n      }\n    }\n\n    if (isContact) {\n      actions.push({\n        handler: () => {\n          deleteContact({ userId: peerId });\n        },\n        title: lang('DeleteContact'),\n        icon: 'delete-user',\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        handler: () => {\n          if (isUserBlocked) {\n            unblockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: false });\n          } else {\n            blockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: true });\n          }\n        },\n        title: lang(isUserBlocked ? 'Unblock' : 'BlockUser'),\n        icon: isUserBlocked ? 'user' : 'delete-user',\n        destructive: !isUserBlocked,\n      });\n    }\n\n    return actions;\n  }, [lang, storyView, peer]);\n\n  const statusIcon: IconName = storyView.type === 'user' ? 'message-read'\n    : storyView.type === 'forward' ? 'forward' : 'loop';\n  const shouldColorStatus = storyView.type === 'forward' || storyView.type === 'repost';\n\n  const status = useMemo(() => {\n    const isModified = storyView.type === 'repost' && storyView.story.forwardInfo?.isModified;\n    const parts = [formatDateAtTime(lang, storyView.date * 1000)];\n    if (isModified) {\n      parts.push(lang('lng_edited'));\n    }\n\n    return parts.join(` ${BULLET} `);\n  }, [lang, storyView]);\n\n  return (\n    <ListItem\n      key={storyView.peerId}\n      className={buildClassName(\n        'chat-item-clickable small-icon',\n        styles.opacityFadeIn,\n        (storyView.isUserBlocked || storyView.areStoriesBlocked) && styles.blocked,\n      )}\n      onClick={handleClick}\n      rightElement={storyView.type === 'user' && storyView.reaction ? (\n        <ReactionStaticEmoji\n          reaction={storyView.reaction}\n          className={styles.viewReaction}\n          size={DEFAULT_REACTION_SIZE}\n          availableReactions={availableReactions}\n          withIconHeart\n        />\n      ) : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      menuBubbleClassName={styles.menuBubble}\n    >\n      {isUserId(storyView.peerId) ? (\n        <PrivateChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          userId={storyView.peerId}\n          noStatusOrTyping\n          status={status}\n          statusIcon={statusIcon}\n          forceShowSelf\n        />\n      ) : (\n        <GroupChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          chatId={storyView.peerId}\n          status={status}\n          statusIcon={statusIcon}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { storyView }) => {\n  const peer = selectPeer(global, storyView.peerId);\n\n  return {\n    peer,\n    availableReactions: global.reactions.availableReactions,\n  };\n})(StoryView));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStoryView } from '../../api/types';\n\nimport {\n  STORY_MIN_REACTIONS_SORT,\n  STORY_VIEWS_MIN_CONTACTS_FILTER,\n  STORY_VIEWS_MIN_SEARCH,\n} from '../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport PlaceholderChatInfo from '../ui/placeholder/PlaceholderChatInfo';\nimport SearchInput from '../ui/SearchInput';\nimport StoryView from './StoryView';\n\nimport styles from './StoryViewModal.module.scss';\n\ninterface StateProps {\n  story?: ApiStory;\n  isLoading?: boolean;\n  views?: ApiTypeStoryView[];\n  nextOffset?: string;\n  viewersExpireDate?: number;\n  isCurrentUserPremium?: boolean;\n}\n\nconst REFETCH_DEBOUNCE = 250;\n\nfunction StoryViewModal({\n  story,\n  viewersExpireDate,\n  views,\n  nextOffset,\n  isLoading,\n  isCurrentUserPremium,\n}: StateProps) {\n  const {\n    loadStoryViewList, closeStoryViewModal, clearStoryViews,\n  } = getActions();\n\n  const [areJustContacts, markJustContacts, unmarkJustContacts] = useFlag(false);\n  const [areReactionsFirst, markReactionsFirst, unmarkReactionsFirst] = useFlag(true);\n  const [query, setQuery] = useState('');\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(story);\n  const isExpired = Boolean(viewersExpireDate) && viewersExpireDate < getServerTime();\n  const { viewsCount = 0, reactionsCount = 0 } = story?.views || {};\n\n  const shouldShowJustContacts = story?.isPublic && viewsCount > STORY_VIEWS_MIN_CONTACTS_FILTER;\n  const shouldShowSortByReactions = reactionsCount > STORY_MIN_REACTIONS_SORT;\n  const shouldShowSearch = viewsCount > STORY_VIEWS_MIN_SEARCH;\n  const hasHeader = shouldShowJustContacts || shouldShowSortByReactions || shouldShowSearch;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setQuery('');\n      unmarkJustContacts();\n      markReactionsFirst();\n    }\n  }, [isOpen]);\n\n  const refetchViews = useDebouncedCallback(() => {\n    clearStoryViews({ isLoading: true });\n  }, [], REFETCH_DEBOUNCE, true);\n\n  useEffect(() => {\n    refetchViews();\n  }, [areJustContacts, areReactionsFirst, query, refetchViews]);\n\n  const sortedViews = useMemo(() => {\n    return views?.sort(prepareComparator(areReactionsFirst));\n  }, [areReactionsFirst, views]);\n\n  const placeholderCount = !sortedViews?.length ? Math.min(viewsCount, 8) : 1;\n\n  const notAllAvailable = Boolean(sortedViews?.length) && sortedViews.length < viewsCount && isExpired;\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!story?.id || nextOffset === undefined) return;\n    loadStoryViewList({\n      peerId: story.peerId,\n      storyId: story.id,\n      offset: nextOffset,\n      areReactionsFirst: areReactionsFirst || undefined,\n      areJustContacts: areJustContacts || undefined,\n      query,\n    });\n  });\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const handleClose = useLastCallback(() => {\n    closeStoryViewModal();\n  });\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        fluid\n        size=\"tiny\"\n        color=\"translucent\"\n        className={buildClassName(!isMenuOpen && 'active', styles.sortButton, styles.topButton)}\n        faded={isMenuOpen}\n        onClick={onTrigger}\n        ariaLabel={lang('SortBy')}\n      >\n        <Icon name={areReactionsFirst ? 'heart-outline' : 'recent'} className={styles.iconSort} />\n        <Icon name=\"down\" className={styles.iconDown} />\n      </Button>\n    );\n  }, [areReactionsFirst, lang]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className=\"component-theme-dark\"\n      contentClassName={styles.viewsList}\n      isSlim\n    >\n      {hasHeader && (\n        <div className={styles.header}>\n          {shouldShowJustContacts && (\n            <div className={styles.contactFilter}>\n              <Button\n                className={buildClassName(!areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={unmarkJustContacts}\n              >\n                {lang('AllViewers')}\n              </Button>\n              <Button\n                className={buildClassName(areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={markJustContacts}\n              >\n                {lang('Contacts')}\n              </Button>\n            </div>\n          )}\n          {shouldShowSortByReactions && (\n            <DropdownMenu\n              className={styles.sort}\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"heart-outline\" onClick={markReactionsFirst}>\n                {lang('SortByReactions')}\n                {areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n              <MenuItem icon=\"recent\" onClick={unmarkReactionsFirst}>\n                {lang('SortByTime')}\n                {!areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n            </DropdownMenu>\n          )}\n          {shouldShowSearch && (\n            <SearchInput className={styles.search} value={query} onChange={setQuery} />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(styles.content, !isAtBeginning && styles.topScrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {isExpired && !isLoading && !query && Boolean(!sortedViews?.length) && (\n          <div className={buildClassName(styles.info, styles.centeredInfo)}>\n            {renderText(\n              lang(isCurrentUserPremium ? 'ServerErrorViewers' : 'ExpiredViewsStub'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n        )}\n        {!isLoading && Boolean(query.length) && !sortedViews?.length && (\n          <div className={styles.info}>\n            {lang('Story.ViewList.EmptyTextSearch')}\n          </div>\n        )}\n        <InfiniteScroll\n          items={sortedViews}\n          onLoadMore={handleLoadMore}\n        >\n          {sortedViews?.map((view) => {\n            const additionalKeyId = view.type === 'forward' ? view.messageId\n              : view.type === 'repost' ? view.storyId : 'user';\n            return (\n              <StoryView key={`${view.peerId}-${view.date}-${additionalKeyId}`} storyView={view} />\n            );\n          })}\n          {isLoading && Array.from({ length: placeholderCount }).map((_, i) => (\n            <ListItem\n\n              key={`placeholder-${i}`}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              disabled\n            >\n              <PlaceholderChatInfo />\n            </ListItem>\n          ))}\n          {notAllAvailable && (\n            <div key=\"not-all-available\" className={buildClassName(styles.info, styles.bottomInfo)}>\n              {lang('Story.ViewList.NotFullyRecorded')}\n            </div>\n          )}\n        </InfiniteScroll>\n      </div>\n      <div className={buildClassName(styles.footer, 'dialog-buttons')}>\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.close)}\n          isText\n          onClick={handleClose}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction prepareComparator(areReactionsFirst?: boolean) {\n  return (a: ApiTypeStoryView, b: ApiTypeStoryView) => {\n    if (areReactionsFirst) {\n      const reactionA = a.type === 'user' && a.reaction;\n      const reactionB = b.type === 'user' && b.reaction;\n      if (reactionA && !reactionB) {\n        return -1;\n      }\n      if (!reactionA && reactionB) {\n        return 1;\n      }\n    }\n\n    return b.date - a.date;\n  };\n}\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const { appConfig } = global;\n  const { storyViewer: { viewModal } } = selectTabState(global);\n  const {\n    storyId, views, nextOffset, isLoading,\n  } = viewModal || {};\n  const story = storyId ? selectPeerStory(global, global.currentUserId!, storyId) : undefined;\n  const storyExpireDate = story?.['@type'] === 'story' ? story.expireDate : undefined;\n\n  return {\n    views,\n    viewersExpireDate: storyExpireDate ? (storyExpireDate + appConfig.storyViewersExpirePeriod) : undefined,\n    story: story && 'content' in story ? story : undefined,\n    nextOffset,\n    isLoading,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StoryViewModal));\n","import {\n  beginHeavyAnimation,\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport useSlideSizes from './hooks/useSlideSizes';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport StealthModeModal from './StealthModeModal';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StorySettings from './StorySettings';\nimport StorySlides from './StorySlides';\nimport StoryViewModal from './StoryViewModal';\n\nimport styles from './StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 250;\n\ninterface StateProps {\n  isOpen: boolean;\n  peerId: string;\n  storyId?: number;\n  story?: ApiTypeStory;\n  origin?: StoryViewerOrigin;\n  shouldSkipHistoryAnimations?: boolean;\n  withAnimation?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  peerId,\n  storyId,\n  story,\n  origin,\n  shouldSkipHistoryAnimations,\n  withAnimation,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor, reportStory } = getActions();\n\n  const lang = useOldLang();\n  const [storyToDelete, setStoryToDelete] = useState<ApiTypeStory | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n\n  const { bestImageData, thumbnail } = useStoryProps(story);\n  const slideSizes = useSlideSizes();\n  const isPrevOpen = usePreviousDeprecated(isOpen);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const prevPeerId = usePreviousDeprecated(peerId);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setStoryToDelete(undefined);\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      enableDirectTextInput();\n      stopPriorityPlayback();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useLastCallback((s: ApiTypeStory) => {\n    setStoryToDelete(s);\n    openDeleteModal();\n  });\n\n  const handleCloseDeleteModal = useLastCallback(() => {\n    closeDeleteModal();\n    setStoryToDelete(undefined);\n  });\n\n  const openMessageReport = useLastCallback(() => {\n    if (!storyId) return;\n    reportStory({ storyId, peerId });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isGhostAnimation && !isPrevOpen && isOpen && peerId && thumbnail && origin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(peerId, origin, thumbnail, bestImageData, slideSizes.activeSlide);\n    }\n    if (isGhostAnimation && isPrevOpen && !isOpen && prevPeerId && prevBestImageData && prevOrigin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevPeerId, prevOrigin, prevBestImageData);\n    }\n  }, [\n    isGhostAnimation,\n    bestImageData,\n    prevBestImageData,\n    isOpen,\n    isPrevOpen,\n    slideSizes.activeSlide,\n    thumbnail,\n    peerId,\n    prevPeerId,\n    origin,\n    prevOrigin,\n  ]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n\n      <StorySlides\n        isOpen={isOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openMessageReport}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        story={storyToDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewModal />\n      <StealthModeModal />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const {\n    shouldSkipHistoryAnimations, storyViewer: {\n      storyId, peerId, isPrivacyModalOpen, origin,\n    },\n  } = selectTabState(global);\n  const story = peerId && storyId ? selectPeerStory(global, peerId, storyId) : undefined;\n  const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    peerId: peerId!,\n    storyId,\n    story,\n    origin,\n    withAnimation,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\n\nimport { PEER_PICKER_ITEM_HEIGHT_PX } from '../../../config';\nimport {\n  getCanPostInChat, getGroupStatus, getUserStatus, isUserOnline,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport { selectMonoforumChannel, selectPeer, selectTopics, selectUserStatus } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../helpers/mediaDimensions';\nimport renderText from '../helpers/renderText';\n\nimport useSelector from '../../../hooks/data/useSelector';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useInputFocusOnOpen from '../../../hooks/useInputFocusOnOpen';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport Avatar from '../Avatar';\nimport FullNameTitle from '../FullNameTitle';\nimport Icon from '../icons/Icon';\nimport TopicIcon from '../TopicIcon';\nimport PickerItem from './PickerItem';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  isLowStackPriority?: boolean;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\nconst ITEM_CLASS_NAME = 'ChatOrUserPicker-item';\nconst TOPIC_ITEM_HEIGHT_PX = 56;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n}) => {\n  const { loadTopics } = getActions();\n\n  const oldLang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const topicContainerRef = useRef<HTMLDivElement>();\n  const searchRef = useRef<HTMLInputElement>();\n  const topicSearchRef = useRef<HTMLInputElement>();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const selectTopicsById = useLastCallback((global: GlobalState) => {\n    if (!forumId) {\n      return undefined;\n    }\n\n    return selectTopics(global, forumId);\n  });\n\n  const forumTopicsById = useSelector(selectTopicsById);\n\n  const [topicIds, topics] = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const chat = chatsById[forumId!];\n\n    if (!chat || !forumTopicsById) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = forumTopicsById\n      ? Object.values(forumTopicsById).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chat, topic, undefined, chatFullInfoById[forumId!])\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : forumTopicsById;\n\n    return [Object.keys(result).map(Number), result];\n  }, [forumId, topicSearch, forumTopicsById]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatsById = getGlobal().chats.byId;\n\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById[chatId];\n      if (chat?.isForum) {\n        if (!forumTopicsById) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleClick = useLastCallback((chatId: string) => {\n    const chatsById = getGlobal().chats.byId;\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!forumTopicsById) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const renderChatItem = useCallback((id: string, index: number) => {\n    const global = getGlobal();\n    let peer = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const monoforumChannel = selectMonoforumChannel(global, id);\n    if (monoforumChannel) {\n      peer = monoforumChannel;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (peer.id === currentUserId) return [oldLang('SavedMessagesInfo')];\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(oldLang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return [\n        getUserStatus(oldLang, peer, userStatus),\n        buildClassName(isUserOnline(peer, userStatus, true) && 'online'),\n      ];\n    }\n\n    const [subtitle, subtitleClassName] = getSubtitle() || [];\n\n    return (\n      <PickerItem\n        key={id}\n        className={ITEM_CLASS_NAME}\n        title={(\n          <div className=\"title-wrapper\">\n            <FullNameTitle\n              className=\"item-title\"\n              peer={peer}\n              isMonoforum={Boolean(monoforumChannel)}\n              isSavedMessages={isSelf}\n            />\n          </div>\n        )}\n        avatarElement={(\n          <Avatar\n            peer={peer}\n            asMessageBubble={Boolean(monoforumChannel)}\n            isSavedMessages={isSelf}\n            size=\"medium\"\n          />\n        )}\n        subtitle={subtitle}\n        subtitleClassName={subtitleClassName}\n        ripple\n        style={`top: ${(viewportOffset + index) * PEER_PICKER_ITEM_HEIGHT_PX}px;`}\n\n        onClick={() => handleClick(id)}\n      />\n    );\n  }, [currentUserId, oldLang, viewportOffset]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={oldLang('Back')} onClick={handleHeaderBackClick}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={(topicIds?.length || 0) * TOPIC_ITEM_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {!topicIds && <Loading />}\n          {topicIds?.map((topicId, i) => (\n            <PickerItem\n              key={`${forumId}_${topicId}`}\n              className={ITEM_CLASS_NAME}\n\n              onClick={() => onSelectChatOrUser(forumId!, topicId)}\n              style={`top: ${(viewportOffset + i) * TOPIC_ITEM_HEIGHT_PX}px;`}\n              avatarElement={(\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n              )}\n              title={renderText(topics[topicId].title)}\n            />\n          ))}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            itemSelector={`.${ITEM_CLASS_NAME}`}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds.length * PEER_PICKER_ITEM_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map(renderChatItem)}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{oldLang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatType } from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport {\n  getCanPostInChat,\n  getHasAdminRight,\n  isChatChannel,\n  isDeletedUser,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectChat, selectChatFullInfo, selectIsMonoforumAdmin, selectUser,\n} from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from './helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ChatOrUserPicker from './pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  isLowStackPriority?: boolean;\n  isForwarding?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n  isForwarding,\n}) => {\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n\n    const peerIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = selectChat(global, id);\n      const user = selectUser(global, id);\n      const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n      const isChannel = chat && isChatChannel(chat);\n      if (isForwarding && isChannel && !hasAdminRights) return false;\n      if (user && !isDeletedUser(user)) return true;\n\n      if (!chat) return false;\n\n      if (chat.isMonoforum && selectIsMonoforumAdmin(global, id)) {\n        return false;\n      }\n\n      const chatFullInfo = selectChatFullInfo(global, id);\n      // TODO: Handle bulk check with API call\n      return !chatFullInfo || getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n    });\n\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: unique([\n          ...(currentUserId ? [currentUserId] : []),\n          ...peerIds,\n          ...(contactIds || []),\n        ]),\n        query: search,\n      }),\n      undefined,\n      priorityIds,\n      currentUserId,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [\n    isOpen,\n    pinnedIds,\n    currentUserId,\n    activeListIds,\n    search,\n    archivedListIds,\n    contactIds,\n    filter,\n    isForwarding,\n  ]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      currentUserId={currentUserId}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      chats: {\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ThreadId } from '../../types';\n\nimport { getChatTitle, getUserFirstOrLastName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n  isForwarding?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n  isForwarding,\n}) => {\n  const {\n    openChatOrTopicWithReplyInDraft,\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingIsStory = usePreviousDeprecated(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      const chatId = recipientId;\n      const topicId = threadId ? Number(threadId) : undefined;\n      if (isForwarding) {\n        setForwardChatOrTopic({ chatId, topicId });\n      } else {\n        openChatOrTopicWithReplyInDraft({ chatId, topicId });\n      }\n    }\n  }, [currentUserId, isManyMessages, isStory, lang, isForwarding]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang(isForwarding ? 'ForwardTo' : 'ReplyToDialog')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n      isForwarding={isForwarding}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  const isForwarding = (messageIds && messageIds.length > 0);\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n    isForwarding,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ThreadId } from '../../types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport renderText from '../common/helpers/renderText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    sendMessage,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: contactRequest,\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang(\n          'AreYouSureShareMyContactInfoBot',\n          undefined,\n          { withNodes: true, withMarkdown: true, renderTextFilters: ['br', 'emoji'],\n          })}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiContact) => {\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map((notification) => (\n        <Notification key={notification.localId} notification={notification} />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/browser/url';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (!url) {\n      return;\n    }\n\n    window.open(ensureProtocol(url), '_blank', 'noopener noreferrer');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlText', { url: renderingUrl }, { withNodes: true, withMarkdown: true }))}\n      confirmLabel={lang('OpenUrlConfirm')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VJDwJpsF\",\"buttons\":\"aYO2C2Hx\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { IS_IOS, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport { prepareMapUrl } from '../../../util/map';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './MapModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['mapModal'];\n};\n\nconst OpenMapModal = ({ modal }: OwnProps) => {\n  const { closeMapModal } = getActions();\n\n  const { point: geoPoint, zoom } = modal || {};\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(geoPoint);\n\n  const handleClose = useLastCallback(() => {\n    closeMapModal();\n  });\n\n  const [googleUrl, bingUrl, appleUrl, osmUrl] = useMemo(() => {\n    if (!geoPoint) {\n      return [];\n    }\n\n    const google = prepareMapUrl('google', geoPoint, zoom);\n    const bing = prepareMapUrl('bing', geoPoint, zoom);\n    const osm = prepareMapUrl('osm', geoPoint, zoom);\n    const apple = prepareMapUrl('apple', geoPoint, zoom);\n\n    return [google, bing, apple, osm];\n  }, [geoPoint, zoom]);\n\n  const openUrl = useLastCallback((url: string) => {\n    closeMapModal();\n    window.open(url, '_blank', 'noopener');\n  });\n\n  const handleGoogleClick = useLastCallback(() => {\n    openUrl(googleUrl!);\n  });\n\n  const handleBingClick = useLastCallback(() => {\n    openUrl(bingUrl!);\n  });\n\n  const handleAppleClick = useLastCallback(() => {\n    openUrl(appleUrl!);\n  });\n\n  const handleOsmClick = useLastCallback(() => {\n    openUrl(osmUrl!);\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.root}\n      title={lang('OpenMapWith')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isSlim\n    >\n      <div className={styles.buttons}>\n        {(IS_IOS || IS_MAC_OS) && (\n          <Button fluid size=\"smaller\" onClick={handleAppleClick}>\n            Apple Maps\n          </Button>\n        )}\n        <Button fluid size=\"smaller\" onClick={handleGoogleClick}>\n          Google Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleBingClick}>\n          Bing Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleOsmClick}>\n          OpenStreetMap\n        </Button>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(OpenMapModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport renderText from '../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal?: TabState['urlAuth'];\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps & StateProps> = ({\n  modal, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(modal, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useOldLang();\n\n  const handleOpen = useCallback(() => {\n    if (modal?.url && isLoginChecked) {\n      const acceptAction = modal.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else if (currentAuth?.url) {\n      window.open(ensureProtocol(currentAuth.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    modal, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    return {\n      currentUser,\n    };\n  },\n)(UrlAuthModal));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateToString, formatTime, getDayStart } from '../../util/dates/dateFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  isRemindMe?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  description?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onDateChange?: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  isRemindMe,\n  submitButtonLabel,\n  secondButtonLabel,\n  description,\n  onClose,\n  onSubmit,\n  onDateChange,\n  onSecondButtonClick,\n}) => {\n  const lang = useOldLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  const isDisabled = (isFutureMode && selectedDate.getTime() < minDate.getTime())\n    || (isPastMode && selectedDate.getTime() > maxDate.getTime());\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate, isRemindMe);\n  }, [lang, selectedDate, submitButtonLabel, isRemindMe]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      onDateChange?.(dateCopy);\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    if (isFutureMode && selectedDate < minDate) {\n      onSubmit(minDate);\n    } else if (isPastMode && selectedDate > maxDate) {\n      onSubmit(maxDate);\n    } else {\n      onSubmit(selectedDate);\n    }\n  }, [isFutureMode, isPastMode, minDate, maxDate, onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate, onDateChange]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate, onDateChange]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <Icon name=\"previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <Icon name=\"next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : gridDate ? 'clickable' : '',\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        {description && (\n          <div className=\"description\">\n            {description}\n          </div>\n        )}\n        <div className=\"footer\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isDisabled}\n          >\n            {submitLabel}\n          </Button>\n          {secondButtonLabel && (\n            <Button onClick={onSecondButtonClick} isText>\n              {secondButtonLabel}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: OldLangFn, date: Date, isRemindMe?: boolean) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang(isRemindMe ? 'RemindMeMessageSendToday' : 'Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang(isRemindMe ? 'RemindMeMessageSendOn' : 'Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.getTime() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useOldLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useOldLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  const inputRef = useRef<HTMLInputElement>();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => {\n        inputRef.current?.focus();\n      }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text NewContactModal__help-text__negative\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import type {\n  ElementRef } from '../lib/teact/teact';\nimport {\n  useEffect, useSignal, useState,\n} from '../lib/teact/teact';\n\nimport type { Point, Size } from '../types';\n\nimport { RESIZE_HANDLE_SELECTOR } from '../config';\nimport buildStyle from '../util/buildStyle';\nimport { captureEvents } from '../util/captureEvents';\nimport getPointerPosition from '../util/events/getPointerPosition';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport enum ResizeHandleType {\n  Top,\n  Bottom,\n  Left,\n  Right,\n  TopLeft,\n  TopRight,\n  BottomLeft,\n  BottomRight,\n}\n\ntype ResizeHandleSelectorType = 'top' | 'bottom' | 'left'\n  | 'right' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\nconst resizeHandleSelectorsMap: Record<ResizeHandleSelectorType, ResizeHandleType> = {\n  top: ResizeHandleType.Top,\n  bottom: ResizeHandleType.Bottom,\n  left: ResizeHandleType.Left,\n  right: ResizeHandleType.Right,\n  topLeft: ResizeHandleType.TopLeft,\n  topRight: ResizeHandleType.TopRight,\n  bottomLeft: ResizeHandleType.BottomLeft,\n  bottomRight: ResizeHandleType.BottomRight,\n};\n\nconst resizeHandleSelectors = Object.keys(resizeHandleSelectorsMap) as ResizeHandleSelectorType[];\n\nlet resizeTimeout: number | undefined;\nconst FULLSCREEN_POSITION = { x: 0, y: 0 };\n\nexport default function useDraggable(\n  ref: ElementRef<HTMLElement>,\n  dragHandleElementRef: ElementRef<HTMLElement>,\n  isDragEnabled: boolean = true,\n  originalSize: Size,\n  isFullscreen: boolean = false,\n  minimumSize: Size = { width: 0, height: 0 },\n  cachedPosition?: Point,\n) {\n  const [elementCurrentPosition, setElementCurrentPosition] = useState<Point | undefined>(cachedPosition);\n  const [elementCurrentSize, setElementCurrentSize] = useState<Size | undefined>(undefined);\n\n  const [getElementPositionOnStartTransform, setElementPositionOnStartTransform] = useSignal({ x: 0, y: 0 });\n  const [getElementSizeOnStartTransform, setElementSizeOnStartTransform] = useSignal({ width: 0, height: 0 });\n  const [getTransformStartPoint, setTransformStartPoint] = useSignal({ x: 0, y: 0 });\n\n  const elementPositionOnStartTransform = getElementPositionOnStartTransform();\n  const transformStartPoint = getTransformStartPoint();\n\n  const element = ref.current;\n  const dragHandleElement = dragHandleElementRef.current;\n\n  const [isInitiated, setIsInitiated] = useFlag(false);\n  const [wasElementShown, setWasElementShown] = useFlag(false);\n  const [isDragging, startDragging, stopDragging] = useFlag(false);\n  const [isResizing, startResizing, stopResizing] = useFlag(false);\n  const [isWindowsResizing, startWindowResizing, stopWindowResizing] = useFlag(false);\n\n  const [hitResizeHandle, setHitResizeHandle] = useState<ResizeHandleType | undefined>(undefined);\n\n  function getVisibleArea() {\n    return {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n  }\n\n  const updateCurrentPosition = useLastCallback((position: Point) => {\n    if (!isFullscreen) setElementCurrentPosition({ x: position.x, y: position.y });\n  });\n\n  const getActualPosition = useLastCallback(() => {\n    return isFullscreen ? FULLSCREEN_POSITION : elementCurrentPosition;\n  });\n\n  const getCenteredPosition = useLastCallback(() => {\n    if (!elementCurrentSize) return undefined;\n    const { width, height } = elementCurrentSize;\n\n    const visibleArea = getVisibleArea();\n    const viewportWidth = visibleArea.width;\n    const viewportHeight = visibleArea.height;\n\n    const centeredX = (viewportWidth - width) / 2;\n    const centeredY = (viewportHeight - height) / 2;\n\n    return { x: centeredX, y: centeredY };\n  });\n\n  useEffect(() => {\n    if (element) setWasElementShown();\n  }, [element]);\n\n  useEffect(() => {\n    if (!isInitiated && elementCurrentSize) {\n      const centeredPosition = getCenteredPosition();\n      if (!centeredPosition) return;\n\n      updateCurrentPosition(centeredPosition);\n      setIsInitiated();\n    }\n  }, [elementCurrentSize, isInitiated, element]);\n\n  const handleStartDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (targetElement.closest('.no-drag') || !element) {\n      return;\n    }\n    const { x, y } = getPointerPosition(event);\n\n    const { left, top } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setTransformStartPoint({ x, y });\n\n    startDragging();\n  });\n\n  function getResizeHandleFromTarget(targetElement: HTMLElement) {\n    const closest = (selector: string) => targetElement.closest(selector);\n\n    if (!closest(RESIZE_HANDLE_SELECTOR)) return undefined;\n    for (const selector of resizeHandleSelectors) {\n      if (closest(`.${selector}`)) {\n        return resizeHandleSelectorsMap[selector];\n      }\n    }\n    return undefined;\n  }\n\n  const handleStartResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (!element || !targetElement) {\n      return;\n    }\n    const resizeHandle = getResizeHandleFromTarget(targetElement);\n\n    if (resizeHandle === undefined) return;\n    setHitResizeHandle(resizeHandle);\n\n    const { x, y } = getPointerPosition(event);\n\n    const {\n      left, right, top, bottom,\n    } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setElementSizeOnStartTransform({ width: right - left, height: bottom - top });\n    setTransformStartPoint({ x, y });\n\n    startResizing();\n  });\n\n  const handleDragRelease = useLastCallback(() => {\n    stopDragging();\n  });\n\n  const handleResizeRelease = useLastCallback(() => {\n    stopResizing();\n  });\n\n  useEffect(() => {\n    if (!isDragEnabled) {\n      stopDragging();\n    }\n  }, [isDragEnabled]);\n\n  const ensurePositionInVisibleArea = (x: number, y: number) => {\n    const visibleArea = getVisibleArea();\n\n    const visibleAreaWidth = visibleArea.width;\n    const visibleAreaHeight = visibleArea.height;\n\n    const componentWidth = elementCurrentSize!.width;\n    const componentHeight = elementCurrentSize!.height;\n\n    let newX = x;\n    let newY = y;\n\n    if (newX < 0) newX = 0;\n    if (newY < 0) newY = 0;\n    if (newX + componentWidth > visibleAreaWidth) newX = visibleAreaWidth - componentWidth;\n    if (newY + componentHeight > visibleAreaHeight) newY = visibleAreaHeight - componentHeight;\n\n    return { x: newX, y: newY };\n  };\n\n  const adjustPositionWithinBounds = useLastCallback(() => {\n    if (isFullscreen) return;\n    const position = !wasElementShown && !cachedPosition ? getCenteredPosition() : elementCurrentPosition;\n    if (!elementCurrentSize || !position) return;\n    const newPosition = ensurePositionInVisibleArea(position.x, position.y);\n    updateCurrentPosition(newPosition);\n  });\n\n  const ensureSizeInVisibleArea = useLastCallback((sizeForCheck: Size) => {\n    const newSize = sizeForCheck;\n\n    const visibleArea = getVisibleArea();\n\n    const originalWidth = originalSize.width;\n    const originalHeight = originalSize.height;\n    newSize.width = Math.min(visibleArea.width, Math.max(originalWidth, newSize.width));\n    newSize.height = Math.min(visibleArea.height, Math.max(originalHeight, newSize.height));\n\n    return newSize;\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    const newSize = ensureSizeInVisibleArea({ width: originalSize.width, height: originalSize.height });\n    if (newSize) setElementCurrentSize(newSize);\n  }, [originalSize, isResizing]);\n\n  const adjustSizeWithinBounds = useLastCallback(() => {\n    if (!elementCurrentSize || isResizing) return;\n    const newSize = ensureSizeInVisibleArea(elementCurrentSize);\n    if (newSize) setElementCurrentSize(newSize);\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    adjustPositionWithinBounds();\n  }, [elementCurrentSize, isResizing]);\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      startWindowResizing();\n      adjustSizeWithinBounds();\n      adjustPositionWithinBounds();\n      if (resizeTimeout) {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = undefined;\n      }\n      resizeTimeout = window.setTimeout(() => {\n        resizeTimeout = undefined;\n        stopWindowResizing();\n      }, 250);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = undefined;\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [adjustPositionWithinBounds]);\n\n  const handleDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isDragging || !element) return;\n    const { x, y } = getPointerPosition(event);\n\n    const offsetX = x - transformStartPoint.x;\n    const offsetY = y - transformStartPoint.y;\n\n    const newX = elementPositionOnStartTransform.x + offsetX;\n    const newY = elementPositionOnStartTransform.y + offsetY;\n\n    if (elementCurrentSize) setElementCurrentPosition(ensurePositionInVisibleArea(newX, newY));\n  });\n\n  const handleResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isResizing || !element || hitResizeHandle === undefined) return;\n    const { x, y } = getPointerPosition(event);\n    const sizeOnStartTransform = getElementSizeOnStartTransform();\n\n    const pageVisibleX = Math.min(Math.max(0, x), getVisibleArea().width);\n    const pageVisibleY = Math.min(Math.max(0, y), getVisibleArea().height);\n\n    const offsetX = pageVisibleX - transformStartPoint.x;\n    const offsetY = pageVisibleY - transformStartPoint.y;\n\n    const maxX = elementPositionOnStartTransform.x + sizeOnStartTransform.width - minimumSize.width;\n    const maxY = elementPositionOnStartTransform.y + sizeOnStartTransform.height - minimumSize.height;\n\n    const originalBounds = {\n      x: elementPositionOnStartTransform.x,\n      y: elementPositionOnStartTransform.y,\n      width: sizeOnStartTransform.width,\n      height: sizeOnStartTransform.height,\n    };\n\n    const newBounds = { ...originalBounds };\n\n    if (hitResizeHandle === ResizeHandleType.Left\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width - offsetX, minimumSize.width);\n      newBounds.x = Math.min(newBounds.x + offsetX, maxX);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Right\n      || hitResizeHandle === ResizeHandleType.TopRight\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width + offsetX, minimumSize.width);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Top\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.TopRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height - offsetY, minimumSize.height);\n      newBounds.y = Math.min(newBounds.y + offsetY, maxY);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Bottom\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height + offsetY, minimumSize.height);\n    }\n\n    setElementCurrentSize({ width: newBounds.width, height: newBounds.height });\n    setElementCurrentPosition({ x: newBounds.x, y: newBounds.y });\n  });\n\n  useEffect(() => {\n    let cleanup: NoneToVoidFunction | undefined;\n    if (dragHandleElement && isDragEnabled) {\n      cleanup = captureEvents(dragHandleElement, {\n        onCapture: handleStartDrag,\n        onDrag: handleDrag,\n        onRelease: handleDragRelease,\n        onClick: handleDragRelease,\n        onDoubleClick: handleDragRelease,\n      });\n    }\n    return cleanup;\n  }, [isDragEnabled, dragHandleElement]);\n\n  useEffect(() => {\n    const cleanups: NoneToVoidFunction[] = [];\n    if (element && isDragEnabled) {\n      for (const selector of resizeHandleSelectors) {\n        const resizeHandler = element.querySelector(`.resizeHandle.${selector}`) as HTMLElement;\n\n        if (resizeHandler) {\n          const cleanup = captureEvents(resizeHandler, {\n            onCapture: handleStartResize,\n            onDrag: handleResize,\n            onRelease: handleResizeRelease,\n            onClick: handleResizeRelease,\n            onDoubleClick: handleResizeRelease,\n          });\n\n          if (cleanup) {\n            cleanups.push(cleanup);\n          }\n        }\n      }\n    }\n\n    return () => {\n      cleanups.forEach((cleanup) => cleanup());\n    };\n  }, [isDragEnabled, element]);\n\n  const cursorStyle = isDragging ? 'cursor: grabbing !important; ' : '';\n\n  const actualPosition = getActualPosition();\n\n  if (!isInitiated || !elementCurrentSize || !actualPosition) {\n    return {\n      isDragging: false,\n      style: cursorStyle,\n    };\n  }\n\n  const style = buildStyle(\n    `left: ${actualPosition.x}px;`,\n    `top: ${actualPosition.y}px;`,\n    !isFullscreen && `max-width: ${elementCurrentSize.width}px;`,\n    !isFullscreen && `max-height: ${elementCurrentSize.height}px;`,\n    'position: fixed;',\n    (isDragging || isResizing || isWindowsResizing) && 'transition: none !important;',\n    cursorStyle,\n  );\n\n  return {\n    position: elementCurrentPosition,\n    size: elementCurrentSize,\n    isDragging,\n    isResizing,\n    style,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kUZmBlnN\",\"window-state-button\":\"Rax9j_TK\",\"windowStateButton\":\"Rax9j_TK\",\"button\":\"SMRJmUuE\",\"avatars\":\"GP17QhNN\",\"state-icon\":\"sdbTXCxq\",\"stateIcon\":\"sdbTXCxq\",\"icon\":\"P0P4gW6a\",\"title\":\"TZFjRaG4\"};","import {\n  memo, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { WebApp } from '../../../types/webapp';\n\nimport { selectActiveWebApp, selectTabState, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './MinimizedWebAppModal.module.scss';\n\ntype StateProps = {\n  activeTabBot?: ApiUser;\n  isMinimizedState?: boolean;\n  openedWebApps?: Record<string, WebApp>;\n};\n\nconst MinimizedWebAppModal = ({\n  activeTabBot, isMinimizedState, openedWebApps,\n}: StateProps) => {\n  const {\n    changeWebAppModalState,\n    closeWebAppModal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const ref = useRef<HTMLDivElement>();\n\n  const openedWebAppsValues = useMemo(() => {\n    return openedWebApps && Object.values(openedWebApps);\n  }, [openedWebApps]);\n\n  const openedTabsCount = openedWebAppsValues?.length;\n\n  const peers = useMemo(() => {\n    if (!openedTabsCount) return [];\n\n    const global = getGlobal();\n    const activeTabBotId = activeTabBot?.id;\n    const openedApps = unique([activeTabBotId, ...openedWebAppsValues.map((app) => app.botId)]);\n    const bots = openedApps.map((id) => id && selectUser(global, id)).filter(Boolean).slice(0, 3);\n    return bots;\n  }, [openedTabsCount, activeTabBot, openedWebAppsValues]);\n\n  const handleCloseClick = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleExpandClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  });\n\n  if (!isMinimizedState) return undefined;\n\n  function renderTitle() {\n    const activeTabName = peers.length > 0 && peers[0]?.firstName;\n    const title = openedTabsCount && activeTabName && openedTabsCount > 1\n      ? lang('MiniAppsMoreTabs',\n        {\n          botName: activeTabName,\n          count: openedTabsCount - 1,\n        },\n        {\n          pluralValue: openedTabsCount - 1,\n        })\n      : activeTabName;\n\n    return (\n      <div className={styles.title}>\n        {title}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        styles.root,\n      )}\n    >\n      <Button\n        className={styles.button}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        ariaLabel={oldLang('Close')}\n        onClick={handleCloseClick}\n      >\n        <Icon className={styles.icon} name=\"close\" />\n      </Button>\n      <AvatarList className={styles.avatars} size=\"mini\" peers={peers} />\n      {renderTitle()}\n      <Button\n        className={buildClassName(\n          styles.windowStateButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleExpandClick}\n      >\n        <Icon className={styles.stateIcon} name=\"expand-modal\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const webApps = tabState.webApps;\n\n    const { botId } = selectActiveWebApp(global) || {};\n    const { modalState, openedWebApps } = webApps || {};\n    const isMinimizedState = modalState === 'minimized';\n    const activeTabBot = botId ? selectUser(global, botId) : undefined;\n\n    return {\n      activeTabBot,\n      isMinimizedState,\n      openedWebApps,\n    };\n  },\n)(MinimizedWebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RFg0Ey2I\",\"user-count-badge\":\"UZtJ6ZXb\",\"userCountBadge\":\"UZtJ6ZXb\",\"user-badge-icon\":\"pTiZFhsG\",\"userBadgeIcon\":\"pTiZFhsG\",\"name\":\"TzA5nqCC\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PeerBadge from '../../common/PeerBadge';\n\nimport styles from './WebAppGridItem.module.scss';\n\nexport type OwnProps = {\n\n  chatId: string;\n  isPopularApp?: boolean;\n};\n\nexport type StateProps = {\n  user?: ApiUser;\n};\n\nfunction WebAppGridItem({ user, isPopularApp }: OwnProps & StateProps) {\n  const {\n    requestMainWebView,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useLastCallback(() => {\n    if (!user) {\n      return;\n    }\n    const botId = user?.id;\n    if (!botId) {\n      return;\n    }\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId,\n      peerId: botId,\n      theme,\n    });\n  });\n\n  if (!user) return undefined;\n\n  const title = user?.firstName;\n  const activeUserCount = user?.botActiveUsers;\n  const badgeText = activeUserCount && isPopularApp ? formatIntegerCompact(lang, activeUserCount) : undefined;\n\n  return (\n    <div\n      className={styles.container}\n      onClick={handleClick}\n    >\n      <PeerBadge\n        className={buildClassName(styles.avatarContainer, isPopularApp && 'PopularAppGridItem')}\n        textClassName={styles.name}\n        badgeClassName={styles.userCountBadge}\n        badgeIconClassName={styles.userBadgeIcon}\n        peer={user}\n        text={title}\n        badgeText={badgeText}\n        badgeIcon=\"user-filled\"\n      />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const user = selectUser(global, chatId);\n\n    return {\n      user,\n    };\n  },\n)(WebAppGridItem));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"BJV09FsC\",\"search\":\"bdi8G7GR\",\"section-title\":\"ex3kxgWX\",\"sectionTitle\":\"ex3kxgWX\",\"section-content\":\"uIZzLhEh\",\"sectionContent\":\"uIZzLhEh\",\"showMoreLink\":\"h_Zs9ypA\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback,\n  useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport WebAppGridItem from './WebAppGridItem';\n\nimport styles from './MoreAppsTabContent.module.scss';\n\nconst POPULAR_APPS_SLICE = 30;\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\nconst LESS_GRID_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MoreAppsTabContent: FC<StateProps> = ({\n  foundIds,\n  recentBotIds,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n  const {\n    searchPopularBotApps,\n  } = getActions();\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n\n    return filterPeersByQuery({ ids: foundIds, query: searchQuery, type: 'user' });\n  }, [foundIds, searchQuery]);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleSearchInputReset = useCallback(() => {\n    setSearchQuery('');\n  }, []);\n\n  return (\n    <InfiniteScroll\n      className={buildClassName(styles.root, 'custom-scroll')}\n      items={filteredFoundIds}\n      onLoadMore={handleLoadMore}\n      itemSelector=\".PopularAppGridItem\"\n      noFastList\n      preloadBackwards={POPULAR_APPS_SLICE}\n    >\n      <SearchInput\n        className={styles.search}\n        value={searchQuery}\n        onChange={setSearchQuery}\n        onReset={handleSearchInputReset}\n        placeholder={lang('SearchApps')}\n      />\n      {recentBotIds && !searchQuery && (\n        <div className={styles.section}>\n          <div className={styles.sectionTitle}>\n            <span>{oldLang('SearchAppsMine')}</span>\n            <span className={styles.showMoreLink} onClick={handleToggleShowMoreMine}>\n              {oldLang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n            </span>\n          </div>\n          <div className={styles.sectionContent}>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_GRID_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <WebAppGridItem\n                  chatId={id}\n                />\n              );\n            })}\n          </div>\n        </div>\n      )}\n      <div className={styles.section}>\n        <div className={styles.sectionTitle}>\n          {searchQuery ? lang('Apps') : lang('PopularApps')}\n        </div>\n        <div className={styles.sectionContent}>\n          {filteredFoundIds && filteredFoundIds.map((id) => {\n            return (\n              <WebAppGridItem\n                chatId={id}\n                isPopularApp={!searchQuery}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(MoreAppsTabContent));\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useCallback, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type { WebApp, WebAppInboundEvent, WebAppOutboundEvent } from '../../../../types/webapp';\n\nimport { VERIFY_AGE_MIN_DEFAULT } from '../../../../config';\nimport { getWebAppKey } from '../../../../global/helpers';\nimport { extractCurrentThemeParams } from '../../../../util/themeStyle';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst RELOAD_TIMEOUT = 500;\nconst FULLSCREEN_BUTTONS_AREA_HEIGHT = 3.675 * REM;\n\nconst useWebAppFrame = (\n  ref: ElementRef<HTMLIFrameElement>,\n  isOpen: boolean,\n  isFullscreen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  webApp?: WebApp,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n    setWebAppPaymentSlug,\n    openInvoice,\n    closeWebApp,\n    openSuggestedStatusModal,\n    updateWebApp,\n    updateContentSettings,\n  } = getActions();\n\n  const isReloadSupported = useRef<boolean>(false);\n  const reloadTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendFullScreenChanged = useCallback((value: boolean) => {\n    sendEvent({\n      eventType: 'fullscreen_changed',\n      eventData: {\n        is_fullscreen: value,\n      },\n    });\n  }, [sendEvent]);\n\n  const forceReloadFrame = useLastCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  });\n\n  const reloadFrame = useCallback((url: string) => {\n    if (isReloadSupported.current) {\n      sendEvent({\n        eventType: 'reload_iframe',\n      });\n      reloadTimeout.current = setTimeout(() => {\n        forceReloadFrame(url);\n      }, RELOAD_TIMEOUT);\n      return;\n    }\n\n    forceReloadFrame(url);\n  }, [sendEvent]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendSafeArea = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    sendEvent({\n      eventType: 'safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n      },\n    });\n\n    sendEvent({\n      eventType: 'content_safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: isFullscreen ? FULLSCREEN_BUTTONS_AREA_HEIGHT : 0,\n        bottom: 0,\n      },\n    });\n  }, [sendEvent, isFullscreen, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n    const contentWindow = ref.current?.contentWindow;\n    const sourceWindow = event.source as Window;\n\n    if (contentWindow !== sourceWindow) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      const { eventType, eventData } = data;\n      // Handle some app requests here to simplify hook usage\n      if (eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (eventType === 'web_app_close') {\n        if (webApp) {\n          const key = getWebAppKey(webApp);\n          closeWebApp({ key, skipClosingConfirmation: true });\n        }\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (eventType === 'web_app_request_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_content_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n        isReloadSupported.current = Boolean(eventData.reload_supported);\n      }\n\n      if (eventType === 'iframe_will_reload') {\n        clearTimeout(reloadTimeout.current);\n      }\n\n      if (eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      // Clipboard access temporarily disabled to address security concerns\n      if (eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_open_scan_qr_popup') {\n        showNotification({\n          message: 'Scanning QR code is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_invoice') {\n        setWebAppPaymentSlug({\n          slug: eventData.slug,\n        });\n        openInvoice({\n          type: 'slug',\n          slug: eventData.slug,\n        });\n      }\n\n      if (eventType === 'web_app_open_link') {\n        const linkUrl = eventData.url;\n        window.open(linkUrl, '_blank', 'noreferrer');\n      }\n\n      if (eventType === 'web_app_biometry_get_info') {\n        sendEvent({\n          eventType: 'biometry_info_received',\n          eventData: {\n            available: false,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_device_storage_clear'\n        || eventType === 'web_app_device_storage_get_key'\n        || eventType === 'web_app_device_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'device_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_secure_storage_clear'\n        || eventType === 'web_app_secure_storage_get_key'\n        || eventType === 'web_app_secure_storage_restore_key'\n        || eventType === 'web_app_secure_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'secure_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_accelerometer') {\n        sendEvent({\n          eventType: 'accelerometer_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_gyroscope') {\n        sendEvent({\n          eventType: 'gyroscope_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_device_orientation') {\n        sendEvent({\n          eventType: 'device_orientation_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_add_to_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_check_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_checked',\n          eventData: {\n            status: 'unsupported',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_set_emoji_status') {\n        const { custom_emoji_id, duration } = eventData;\n\n        if (!custom_emoji_id || typeof custom_emoji_id !== 'string') {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'SUGGESTED_EMOJI_INVALID',\n            },\n          });\n          return;\n        }\n\n        if (duration) {\n          try {\n            BigInt(duration);\n          } catch (e) {\n            sendEvent({\n              eventType: 'emoji_status_failed',\n              eventData: {\n                error: 'DURATION_INVALID',\n              },\n            });\n            return;\n          }\n        }\n\n        if (!webApp) {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'UNKNOWN_ERROR',\n            },\n          });\n          return;\n        }\n\n        openSuggestedStatusModal({\n          webAppKey: getWebAppKey(webApp),\n          customEmojiId: custom_emoji_id,\n          duration: Number(duration),\n          botId: webApp.botId,\n        });\n      }\n\n      if (eventType === 'web_app_verify_age') {\n        const { passed } = eventData;\n        const minAge = getGlobal().appConfig.verifyAgeMin || VERIFY_AGE_MIN_DEFAULT;\n        const ageFromParam = eventData.age || 0;\n\n        if (passed && ageFromParam >= minAge) {\n          showNotification({\n            message: {\n              key: 'TitleAgeCheckSuccess',\n            },\n          });\n          updateContentSettings({ isSensitiveEnabled: true });\n        } else {\n          showNotification({\n            message: {\n              key: 'TitleAgeCheckFailed',\n            },\n          });\n        }\n      }\n\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [\n    isSimpleView, sendEvent, onEvent, sendCustomStyle, webApp,\n    sendTheme, sendViewport, sendSafeArea, onLoad, windowSize.isResizing,\n    ref,\n  ]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, sendSafeArea, windowSize]);\n\n  useEffect(() => {\n    if (!webApp?.plannedEvents?.length) return;\n    const events = webApp.plannedEvents;\n    events.forEach((event) => {\n      sendEvent(event);\n    });\n\n    updateWebApp({\n      key: getWebAppKey(webApp),\n      update: {\n        plannedEvents: [],\n      },\n    });\n  }, [sendEvent, webApp]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage, ref]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      sendSafeArea();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, isFullscreen, sendViewport, sendSafeArea, ref]);\n\n  return {\n    sendEvent, sendFullScreenChanged, reloadFrame, sendViewport, sendSafeArea, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LeeJZdwH\",\"multi-tab\":\"ESsGT5OD\",\"multiTab\":\"ESsGT5OD\",\"loadingPlaceholder\":\"jEAibDyh\",\"placeholderPath\":\"Gx1BIECZ\",\"fadeOpacityBreath\":\"N5Blieah\",\"defaultPlaceholderGrid\":\"Ig_t1R7i\",\"placeholderSquare\":\"ablUg8HU\",\"hide\":\"Wrl63uWL\",\"frame\":\"OmY14FFl\",\"with-button\":\"liDRl1xT\",\"withButton\":\"liDRl1xT\",\"hidden\":\"vOFiAq3l\",\"secondary-button\":\"ypxiUCFQ\",\"secondaryButton\":\"ypxiUCFQ\",\"main-button\":\"U_ggDKn1\",\"mainButton\":\"U_ggDKn1\",\"visible\":\"KwI4XdkC\",\"buttons-container\":\"mR_hsBdT\",\"buttonsContainer\":\"mR_hsBdT\",\"one-row\":\"YfQO314y\",\"oneRow\":\"YfQO314y\",\"two-rows\":\"gUldkEoy\",\"twoRows\":\"gUldkEoy\",\"left-to-right\":\"ntESqwQ_\",\"leftToRight\":\"ntESqwQ_\",\"right-to-left\":\"q6IUFEL0\",\"rightToLeft\":\"q6IUFEL0\",\"top-to-bottom\":\"gb4iHJ9H\",\"topToBottom\":\"gb4iHJ9H\",\"bottom-to-top\":\"R_bh3GF8\",\"bottomToTop\":\"R_bh3GF8\",\"hide-horizontal\":\"oYaRA7u4\",\"hideHorizontal\":\"oYaRA7u4\",\"secondary-button-spinner\":\"NYV0yA2J\",\"secondaryButtonSpinner\":\"NYV0yA2J\",\"main-button-spinner\":\"oq6HKJur\",\"mainButtonSpinner\":\"oq6HKJur\",\"web-app-popup\":\"YEOURXza\",\"webAppPopup\":\"YEOURXza\",\"without-title\":\"gvljUzY9\",\"withoutTitle\":\"gvljUzY9\",\"closeIcon\":\"BvNtfigU\",\"state-back\":\"rC2wkMIk\",\"stateBack\":\"rC2wkMIk\",\"backIconContainer\":\"JXsuZ01s\",\"moreIcon\":\"T58ozRyW\",\"headerPanel\":\"eYrhewMy\",\"icon\":\"a0AI_he5\",\"headerSplitButton\":\"Tl4_05AQ\",\"headerButton\":\"MvCwTbk_\",\"left\":\"emOpAMBm\",\"right\":\"z4C5VD5o\",\"buttonCaptionContainer\":\"dpZR3YT7\",\"backButtonCaption\":\"dWDprnWa\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiBotAppSettings, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { BotAppPermissions, ThemeKey } from '../../../types';\nimport type {\n  PopupOptions,\n  WebApp,\n  WebAppInboundEvent,\n  WebAppModalStateType,\n  WebAppOutboundEvent,\n} from '../../../types/webapp';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { convertToApiChatType } from '../../../global/helpers';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectBotAppPermissions,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { getGeolocationStatus, IS_GEOLOCATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle.ts';\nimport download from '../../../util/download';\nimport { extractCurrentThemeParams, validateHexColor } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useFullscreen, { checkIfFullscreen } from '../../../hooks/window/useFullscreen';\nimport usePopupLimit from './hooks/usePopupLimit';\nimport useWebAppFrame from './hooks/useWebAppFrame';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\n\nimport styles from './WebAppModalTabContent.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n  position?: 'left' | 'right' | 'top' | 'bottom';\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n  webApp?: WebApp;\n  registerSendEventCallback: (callback: (event: WebAppOutboundEvent) => void) => void;\n  registerReloadFrameCallback: (callback: (url: string) => void) => void;\n  onContextMenuButtonClick: (e: React.MouseEvent) => void;\n  isTransforming?: boolean;\n  isMultiTabSupported?: boolean;\n  modalHeight: number;\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n  botAppSettings?: ApiBotAppSettings;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n  modalState?: WebAppModalStateType;\n  botAppPermissions?: BotAppPermissions;\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst ANIMATION_WAIT = 400;\nconst COLLAPSING_WAIT = 350;\nconst POPUP_SEQUENTIAL_LIMIT = 3;\nconst POPUP_RESET_DELAY = 2000; // 2s\nconst APP_NAME_DISPLAY_DURATION = 3800;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModalTabContent: FC<OwnProps & StateProps> = ({\n  modal,\n  webApp,\n  bot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n  registerSendEventCallback,\n  registerReloadFrameCallback,\n  isTransforming,\n  modalState,\n  isMultiTabSupported,\n  onContextMenuButtonClick,\n  botAppPermissions,\n  botAppSettings,\n  modalHeight,\n}) => {\n  const {\n    closeActiveWebApp,\n    sendWebViewData,\n    toggleAttachBot,\n    openTelegramLink,\n    setWebAppPaymentSlug,\n    switchBotInline,\n    sharePhoneWithBot,\n    updateWebApp,\n    resetPaymentStatus,\n    openChatWithInfo,\n    showNotification,\n    openEmojiStatusAccessModal,\n    openLocationAccessModal,\n    changeWebAppModalState,\n    closeWebAppModal,\n    openPreparedInlineMessageModal,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [secondaryButton, setSecondaryButton] = useState<WebAppButton | undefined>();\n\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n\n  const [popupParameters, setPopupParameters] = useState<PopupOptions | undefined>();\n  const [isRequestingPhone, setIsRequestingPhone] = useState(false);\n  const [isRequestingWriteAccess, setIsRequestingWriteAccess] = useState(false);\n  const [requestedFileDownload, setRequestedFileDownload] = useState<{ url: string; fileName: string } | undefined>();\n  const [bottomBarColor, setBottomBarColor] = useState<string | undefined>();\n  const {\n    unlockPopupsAt, handlePopupOpened, handlePopupClosed,\n  } = usePopupLimit(POPUP_SEQUENTIAL_LIMIT, POPUP_RESET_DELAY);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const headerButtonRef = useRef<HTMLDivElement>();\n\n  const headerButtonCaptionRef = useRef<HTMLDivElement>();\n\n  const isFullscreen = modalState === 'fullScreen';\n  const isMinimizedState = modalState === 'minimized';\n\n  const exitFullScreenCallback = useLastCallback(() => {\n    setTimeout(() => {\n      changeWebAppModalState({ state: 'maximized' });\n    }, COLLAPSING_WAIT);\n  });\n\n  const fullscreenElementRef = useRef<HTMLElement>();\n\n  useEffect(() => {\n    fullscreenElementRef.current = document.querySelector('#portals') as HTMLElement;\n  }, []);\n\n  const [, setFullscreen, exitFullscreen] = useFullscreen(fullscreenElementRef, exitFullScreenCallback);\n\n  const activeWebApp = modal?.activeWebAppKey ? modal.openedWebApps[modal.activeWebAppKey] : undefined;\n  const { appName: activeWebAppName, backgroundColor } = activeWebApp || {};\n  const {\n    url, buttonText, isBackButtonVisible,\n  } = webApp || {};\n\n  const {\n    placeholderPath,\n  } = botAppSettings || {};\n\n  const isCloseModalOpen = Boolean(webApp?.isCloseModalOpen);\n  const isRemoveModalOpen = Boolean(webApp?.isRemoveModalOpen);\n\n  const webAppKey = webApp && getWebAppKey(webApp);\n  const activeWebAppKey = activeWebApp && getWebAppKey(activeWebApp);\n\n  const isActive = (activeWebApp && webApp) && activeWebAppKey === webAppKey;\n\n  const isAvailable = IS_GEOLOCATION_SUPPORTED;\n  const isAccessRequested = botAppPermissions?.geolocation !== undefined;\n  const isAccessGranted = Boolean(botAppPermissions?.geolocation);\n\n  const updateCurrentWebApp = useLastCallback((updatedPartialWebApp: Partial<WebApp>) => {\n    if (!webAppKey) return;\n    updateWebApp({ key: webAppKey, update: updatedPartialWebApp });\n  });\n\n  const themeParams = useMemo(() => {\n    return extractCurrentThemeParams();\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [theme]);\n\n  useEffect(() => {\n    setBottomBarColor(themeParams.secondary_bg_color);\n  }, [themeParams]);\n\n  const themeBackgroundColor = themeParams.bg_color;\n  const [backgroundColorFromEvent, setBackgroundColorFromEvent] = useState<string | undefined>();\n  const backgroundColorFromSettings = theme === 'light' ? botAppSettings?.backgroundColor\n    : botAppSettings?.backgroundDarkColor;\n\n  useEffect(() => {\n    const color = backgroundColorFromEvent || backgroundColorFromSettings || themeBackgroundColor;\n\n    updateCurrentWebApp({ backgroundColor: color });\n  }, [themeBackgroundColor, backgroundColorFromEvent, backgroundColorFromSettings]);\n\n  const themeHeaderColor = themeParams.bg_color;\n  const [headerColorFromEvent, setHeaderColorFromEvent] = useState<string | undefined>();\n  const headerColorFromSettings = theme === 'light' ? botAppSettings?.headerColor\n    : botAppSettings?.headerDarkColor;\n\n  useEffect(() => {\n    const color = headerColorFromEvent || headerColorFromSettings || themeHeaderColor;\n\n    updateCurrentWebApp({ headerColor: color });\n  }, [themeHeaderColor, headerColorFromEvent, headerColorFromSettings]);\n\n  const frameRef = useRef<HTMLIFrameElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isOpen = modal?.isModalOpen || false;\n  const isSimple = Boolean(buttonText);\n\n  const {\n    reloadFrame, sendEvent, sendFullScreenChanged, sendViewport, sendSafeArea, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isFullscreen, isSimple, handleEvent, webApp, markLoaded);\n\n  useEffect(() => {\n    if (isActive) registerSendEventCallback(sendEvent);\n  }, [sendEvent, registerSendEventCallback, isActive]);\n\n  useEffect(() => {\n    if (isActive) registerReloadFrameCallback(reloadFrame);\n  }, [reloadFrame, registerReloadFrameCallback, isActive]);\n\n  const isMainButtonVisible = isLoaded && mainButton?.isVisible && mainButton.text.trim().length > 0;\n  const isSecondaryButtonVisible = isLoaded && secondaryButton?.isVisible && secondaryButton.text.trim().length > 0;\n\n  const handleHideCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ isCloseModalOpen: false });\n  });\n  const handleConfirmCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ shouldConfirmClosing: false, isCloseModalOpen: false });\n    setTimeout(() => {\n      closeActiveWebApp();\n    }, ANIMATION_WAIT);\n  });\n\n  const handleHideRemoveModal = useLastCallback(() => {\n    updateCurrentWebApp({ isRemoveModalOpen: false });\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  });\n\n  const handleSecondaryButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'secondary_button_pressed',\n    });\n  });\n\n  const handleAppPopupClose = useLastCallback((buttonId?: string) => {\n    setPopupParameters(undefined);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  });\n\n  const handleAppPopupModalClose = useLastCallback(() => {\n    handleAppPopupClose();\n  });\n\n  const sendThemeCallback = useLastCallback(() => {\n    sendTheme();\n  });\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendThemeCallback();\n    }, ANIMATION_WAIT);\n  }, [theme]);\n\n  const setFullscreenCallback = useLastCallback(() => {\n    if (!checkIfFullscreen() && isActive) {\n      setFullscreen?.();\n    }\n  });\n\n  const exitIfFullscreenCallback = useLastCallback(() => {\n    if (checkIfFullscreen() && isActive) {\n      exitFullscreen?.();\n    }\n  });\n\n  const sendFullScreenChangedCallback = useLastCallback(\n    (value: boolean) => {\n      if (isActive) sendFullScreenChanged(value);\n    },\n  );\n\n  useEffect(() => {\n    if (isFullscreen) {\n      setFullscreenCallback();\n      sendFullScreenChangedCallback(true);\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChangedCallback(false);\n    }\n  }, [isFullscreen]);\n\n  const visibilityChangedCallBack = useLastCallback((visibility: boolean) => {\n    sendEvent({\n      eventType: 'visibility_changed',\n      eventData: {\n        is_visible: visibility,\n      },\n    });\n  });\n\n  useEffect(() => {\n    if (isLoaded) {\n      visibilityChangedCallBack(Boolean(isActive));\n    }\n  }, [isActive, isLoaded]);\n\n  useEffectWithPrevDeps(([prevModalState]) => {\n    if (modalState === 'minimized') {\n      visibilityChangedCallBack(false);\n    }\n    if (modalState && prevModalState === 'minimized') {\n      visibilityChangedCallBack(true);\n    }\n  }, [modalState]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n      resetPaymentStatus();\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, webApp?.slug]);\n\n  const handleRemoveAttachBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: false,\n    });\n    closeActiveWebApp();\n  });\n\n  const handleRejectPhone = useLastCallback(() => {\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleAcceptPhone = useLastCallback(() => {\n    sharePhoneWithBot({ botId: bot!.id });\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'sent',\n      },\n    });\n  });\n\n  const handleRejectFileDownload = useLastCallback((shouldCloseActive?: boolean) => {\n    if (shouldCloseActive) {\n      setRequestedFileDownload(undefined);\n      handlePopupClosed();\n    }\n\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleRejectWriteAccess = useLastCallback(() => {\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  const handleAcceptWriteAccess = useLastCallback(async () => {\n    if (!bot) return;\n    const result = await callApi('allowBotSendMessages', { bot });\n    if (!result) {\n      handleRejectWriteAccess();\n      return;\n    }\n\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'allowed',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  async function handleRequestWriteAccess() {\n    if (!bot) return;\n    const canWrite = await callApi('fetchBotCanSendMessage', {\n      bot,\n    });\n\n    if (canWrite) {\n      sendEvent({\n        eventType: 'write_access_requested',\n        eventData: {\n          status: 'allowed',\n        },\n      });\n    }\n    setIsRequestingWriteAccess(!canWrite);\n  }\n\n  async function handleCheckDownloadFile(fileUrl: string, fileName: string) {\n    const canDownload = await callApi('checkBotDownloadFileParams', {\n      bot: bot!,\n      url: fileUrl,\n      fileName,\n    });\n\n    if (!canDownload) {\n      sendEvent({\n        eventType: 'file_download_requested',\n        eventData: {\n          status: 'cancelled',\n        },\n      });\n      return;\n    }\n\n    setRequestedFileDownload({ url: fileUrl, fileName });\n    handlePopupOpened();\n  }\n\n  const handleDownloadFile = useLastCallback(() => {\n    if (!requestedFileDownload) return;\n    setRequestedFileDownload(undefined);\n    handlePopupClosed();\n\n    download(requestedFileDownload.url, requestedFileDownload.fileName);\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'downloading',\n      },\n    });\n  });\n\n  async function handleInvokeCustomMethod(requestId: string, method: string, parameters: string) {\n    const result = await callApi('invokeWebViewCustomMethod', {\n      bot: bot!,\n      customMethod: method,\n      parameters,\n    });\n\n    sendEvent({\n      eventType: 'custom_method_invoked',\n      eventData: {\n        req_id: requestId,\n        ...result,\n      },\n    });\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      setPopupParameters(undefined);\n      setIsRequestingPhone(false);\n      setIsRequestingWriteAccess(false);\n      setMainButton(undefined);\n      setSecondaryButton(undefined);\n      updateCurrentWebApp({\n        isSettingsButtonVisible: false,\n        shouldConfirmClosing: false,\n        isBackButtonVisible: false,\n        isCloseModalOpen: false,\n        isRemoveModalOpen: false,\n      });\n      markUnloaded();\n    }\n  }, [isOpen]);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChatWithInfo({ id: bot!.id });\n  });\n\n  function handleEvent(event: WebAppInboundEvent) {\n    const { eventType, eventData } = event;\n\n    if (eventType === 'web_app_request_fullscreen') {\n      if (getIsWebAppsFullscreenSupported()) {\n        changeWebAppModalState({ state: 'fullScreen' });\n      } else {\n        sendEvent({\n          eventType: 'fullscreen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n    }\n\n    if (eventType === 'web_app_exit_fullscreen') {\n      exitIfFullscreenCallback();\n    }\n\n    if (eventType === 'web_app_open_tg_link') {\n      changeWebAppModalState({ state: 'minimized' });\n\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl, shouldIgnoreCache: eventData.force_request });\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      updateCurrentWebApp({ isBackButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_setup_settings_button') {\n      updateCurrentWebApp({ isSettingsButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      setBackgroundColorFromEvent(validateHexColor(eventData.color) ? eventData.color : undefined);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const key = eventData.color_key;\n      setHeaderColorFromEvent(eventData.color || (key ? themeParams[key] : undefined));\n    }\n\n    if (eventType === 'web_app_set_bottom_bar_color') {\n      setBottomBarColor(eventData.color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeActiveWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_secondary_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setSecondaryButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n        position: eventData.position,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      updateCurrentWebApp({ shouldConfirmClosing: true });\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (popupParameters || !eventData.message.trim().length || !eventData.buttons?.length\n        || eventData.buttons.length > 3 || isRequestingPhone || isRequestingWriteAccess\n        || unlockPopupsAt > Date.now()) {\n        handleAppPopupClose(undefined);\n        return;\n      }\n\n      setPopupParameters(eventData);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_request_phone') {\n      if (popupParameters || isRequestingWriteAccess || unlockPopupsAt > Date.now()) {\n        handleRejectPhone();\n        return;\n      }\n\n      setIsRequestingPhone(true);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_request_write_access') {\n      if (popupParameters || isRequestingPhone || unlockPopupsAt > Date.now()) {\n        handleRejectWriteAccess();\n        return;\n      }\n\n      handleRequestWriteAccess();\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_invoke_custom_method') {\n      const { method, params, req_id: requestId } = eventData;\n      handleInvokeCustomMethod(requestId, method, JSON.stringify(params));\n    }\n\n    if (eventType === 'web_app_request_file_download') {\n      if (requestedFileDownload || unlockPopupsAt > Date.now()) {\n        handleRejectFileDownload();\n        return;\n      }\n      handleCheckDownloadFile(eventData.url, eventData.file_name);\n    }\n\n    if (eventType === 'web_app_send_prepared_message') {\n      if (!bot || !webAppKey) return;\n      const { id } = eventData;\n      openPreparedInlineMessageModal({ botId: bot.id, messageId: id, webAppKey });\n    }\n\n    if (eventType === 'web_app_request_emoji_status_access') {\n      if (!bot) return;\n      openEmojiStatusAccessModal({ bot, webAppKey });\n    }\n\n    if (eventType === 'web_app_check_location') {\n      const handleGeolocationCheck = () => {\n        sendEvent({\n          eventType: 'location_checked',\n          eventData: {\n            available: isAvailable,\n            access_requested: isAccessRequested,\n            access_granted: isAccessGranted,\n          },\n        });\n      };\n\n      handleGeolocationCheck();\n    }\n\n    if (eventType === 'web_app_request_location') {\n      const handleRequestLocation = async () => {\n        const geolocationData = await getGeolocationStatus();\n        const { accessRequested, accessGranted, geolocation } = geolocationData;\n\n        if (!accessGranted || !accessRequested) {\n          sendEvent({\n            eventType: 'location_requested',\n            eventData: {\n              available: false,\n            },\n          });\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n          return;\n        }\n\n        if (isAvailable) {\n          if (isAccessRequested) {\n            sendEvent({\n              eventType: 'location_requested',\n              eventData: {\n                available: Boolean(botAppPermissions?.geolocation),\n                latitude: geolocation?.latitude,\n                longitude: geolocation?.longitude,\n                altitude: geolocation?.altitude,\n                course: geolocation?.heading,\n                speed: geolocation?.speed,\n                horizontal_accuracy: geolocation?.accuracy,\n                vertical_accuracy: geolocation?.altitudeAccuracy,\n              },\n            });\n          } else {\n            openLocationAccessModal({ bot, webAppKey });\n          }\n        } else {\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n        }\n      };\n\n      handleRequestLocation();\n    }\n\n    if (eventType === 'web_app_open_location_settings') {\n      handleOpenChat();\n    }\n  }\n\n  const mainButtonCurrentColor = useCurrentOrPrev(mainButton?.color, true);\n  const mainButtonCurrentTextColor = useCurrentOrPrev(mainButton?.textColor, true);\n  const mainButtonCurrentIsActive = useCurrentOrPrev(mainButton && Boolean(mainButton.isActive), true);\n  const mainButtonCurrentText = useCurrentOrPrev(mainButton?.text, true);\n\n  const secondaryButtonCurrentPosition = useCurrentOrPrev(secondaryButton?.position, true);\n  const secondaryButtonCurrentColor = useCurrentOrPrev(secondaryButton?.color, true);\n  const secondaryButtonCurrentTextColor = useCurrentOrPrev(secondaryButton?.textColor, true);\n  const secondaryButtonCurrentIsActive = useCurrentOrPrev(secondaryButton && Boolean(secondaryButton.isActive), true);\n  const secondaryButtonCurrentText = useCurrentOrPrev(secondaryButton?.text, true);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideMainButton, setShouldHideMainButton] = useState(true);\n  const [shouldHideSecondaryButton, setShouldHideSecondaryButton] = useState(true);\n  const [shouldShowMainButton, setShouldShowMainButton] = useState(false);\n  const [shouldShowSecondaryButton, setShouldShowSecondaryButton] = useState(false);\n\n  const [shouldShowAppNameInFullscreen, setShouldShowAppNameInFullscreen] = useState(false);\n\n  const [backButtonTextWidth, setBackButtonTextWidth] = useState(0);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n      sendSafeArea();\n    }, isTransforming ? 0 : ANIMATION_WAIT);\n  }, [shouldShowSecondaryButton, shouldHideSecondaryButton,\n    shouldShowMainButton, shouldShowMainButton,\n    secondaryButton?.position, sendViewport, isTransforming, modalHeight,\n    sendSafeArea]);\n\n  const isVerticalLayout = secondaryButtonCurrentPosition === 'top' || secondaryButtonCurrentPosition === 'bottom';\n  const isHorizontalLayout = !isVerticalLayout;\n\n  const rowsCount = (isVerticalLayout && shouldShowMainButton && shouldShowSecondaryButton) ? 2\n    : shouldShowMainButton || shouldShowSecondaryButton ? 1 : 0;\n\n  const hideDirection = (isHorizontalLayout\n    && (!shouldHideMainButton && !shouldHideSecondaryButton)) ? 'horizontal' : 'vertical';\n\n  const mainButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const mainButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const appNameDisplayTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (isFullscreen && isOpen && Boolean(activeWebAppName)) {\n      setShouldShowAppNameInFullscreen(true);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n\n      appNameDisplayTimeout.current = setTimeout(() => {\n        setShouldShowAppNameInFullscreen(false);\n        appNameDisplayTimeout.current = undefined;\n      }, APP_NAME_DISPLAY_DURATION);\n    } else {\n      setShouldShowAppNameInFullscreen(false);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n        appNameDisplayTimeout.current = undefined;\n      }\n    }\n\n    return () => {\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n    };\n  }, [isFullscreen, isOpen, activeWebAppName]);\n\n  useEffect(() => {\n    if (mainButtonChangeTimeout.current) clearTimeout(mainButtonChangeTimeout.current);\n    if (mainButtonFastTimeout.current) clearTimeout(mainButtonFastTimeout.current);\n\n    if (isMainButtonVisible) {\n      mainButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowMainButton(true);\n      }, 35);\n      setShouldHideMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isMainButtonVisible) {\n      setShouldShowMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideMainButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isMainButtonVisible]);\n\n  useEffect(() => {\n    if (secondaryButtonChangeTimeout.current) clearTimeout(secondaryButtonChangeTimeout.current);\n    if (secondaryButtonFastTimeout.current) clearTimeout(secondaryButtonFastTimeout.current);\n\n    if (isSecondaryButtonVisible) {\n      secondaryButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowSecondaryButton(true);\n      }, 35);\n      setShouldHideSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isSecondaryButtonVisible) {\n      setShouldShowSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideSecondaryButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isSecondaryButtonVisible]);\n\n  useEffect(() => {\n    if (!shouldShowSecondaryButton && !shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowSecondaryButton, shouldShowMainButton]);\n\n  const frameStyle = buildStyle(\n    `background-color: ${backgroundColor || 'var(--color-background)'}`,\n    isTransforming && 'pointer-events: none;',\n  );\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChanged(false);\n      changeWebAppModalState({ state: 'maximized' });\n      closeWebAppModal();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    exitIfFullscreenCallback();\n  });\n\n  const handleShowContextMenu = useLastCallback((e: React.MouseEvent) => {\n    onContextMenuButtonClick(e);\n  });\n\n  const backIconClass = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n  const backButtonCaption = shouldShowAppNameInFullscreen ? activeWebAppName\n    : oldLang(isBackButtonVisible ? 'Back' : 'Close');\n\n  const hasHeaderElement = headerButtonCaptionRef?.current;\n\n  useEffect(() => {\n    const width = headerButtonCaptionRef?.current?.clientWidth || 0;\n    setBackButtonTextWidth(width);\n  }, [backButtonCaption, hasHeaderElement]);\n\n  function getBackButtonActiveKey() {\n    if (shouldShowAppNameInFullscreen) return 0;\n    return isBackButtonVisible ? 1 : 2;\n  }\n\n  function renderFullscreenBackButtonCaption() {\n    return (\n      <span\n        className={styles.buttonCaptionContainer}\n        style={\n          `width: ${backButtonTextWidth}px;`\n        }\n      >\n        <Transition\n          activeKey={getBackButtonActiveKey()}\n          name=\"slideFade\"\n        >\n          <div\n            ref={headerButtonCaptionRef}\n            className={styles.backButtonCaption}\n          >\n            {backButtonCaption}\n          </div>\n        </Transition>\n      </span>\n    );\n  }\n\n  function renderFullscreenHeaderPanel() {\n    return (\n      <div className={styles.headerPanel}>\n        <div ref={headerButtonRef} className={styles.headerButton} onClick={handleBackClick}>\n          <div className={styles.backIconContainer}>\n            <div className={backIconClass} />\n          </div>\n          {renderFullscreenBackButtonCaption()}\n        </div>\n        <div className={styles.headerSplitButton}>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.left,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-label={lang('WebAppCollapse')}\n            onClick={handleCollapseClick}\n          >\n            <Icon\n              name=\"down\"\n              className={styles.icon}\n            />\n          </div>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('AriaMoreButton')}\n            onClick={handleShowContextMenu}\n          >\n            <Icon\n              name=\"more\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderDefaultPlaceholder() {\n    const className = buildClassName(styles.loadingPlaceholder, styles.defaultPlaceholderGrid, isLoaded && styles.hide);\n    return (\n      <div className={className}>\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n      </div>\n    );\n  }\n\n  function renderPlaceholder() {\n    if (!placeholderPath) {\n      return renderDefaultPlaceholder();\n    }\n    return (\n      <svg\n        className={buildClassName(styles.loadingPlaceholder, isLoaded && styles.hide)}\n        viewBox=\"0 0 512 512\"\n      >\n        <path className={styles.placeholderPath} d={placeholderPath} />\n      </svg>\n    );\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(\n        styles.root,\n        !isActive && styles.hidden,\n        isMultiTabSupported && styles.multiTab,\n      )}\n    >\n      {isFullscreen && getIsWebAppsFullscreenSupported() && renderFullscreenHeaderPanel()}\n      {!isMinimizedState && renderPlaceholder()}\n      <iframe\n        className={buildClassName(\n          styles.frame,\n          shouldDecreaseWebFrameSize && styles.withButton,\n          !isLoaded && styles.hide,\n        )}\n        style={frameStyle}\n        src={url}\n        title={lang('AriaMiniApp', { bot: bot?.firstName })}\n        sandbox={SANDBOX_ATTRIBUTES}\n        allow=\"camera; microphone; geolocation; clipboard-write;\"\n        allowFullScreen\n        ref={frameRef}\n      />\n      {!isMinimizedState && (\n        <div\n          style={`background-color: ${bottomBarColor};`}\n          className={buildClassName(\n            styles.buttonsContainer,\n            secondaryButtonCurrentPosition === 'left' && styles.leftToRight,\n            secondaryButtonCurrentPosition === 'right' && styles.rightToLeft,\n            secondaryButtonCurrentPosition === 'top' && styles.topToBottom,\n            secondaryButtonCurrentPosition === 'bottom' && styles.bottomToTop,\n            hideDirection === 'horizontal' && styles.hideHorizontal,\n            rowsCount === 1 && styles.oneRow,\n            rowsCount === 2 && styles.twoRows,\n          )}\n        >\n          <Button\n            className={buildClassName(\n              styles.secondaryButton,\n              shouldShowSecondaryButton && !shouldHideSecondaryButton && styles.visible,\n              shouldHideSecondaryButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${secondaryButtonCurrentColor}; color: ${secondaryButtonCurrentTextColor}`}\n            disabled={!secondaryButtonCurrentIsActive && !secondaryButton?.isProgressVisible}\n            nonInteractive={secondaryButton?.isProgressVisible}\n            onClick={handleSecondaryButtonClick}\n          >\n            {!secondaryButton?.isProgressVisible && secondaryButtonCurrentText}\n            {secondaryButton?.isProgressVisible\n              && <Spinner className={styles.mainButtonSpinner} color=\"blue\" />}\n          </Button>\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && !shouldHideMainButton && styles.visible,\n              shouldHideMainButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive && !mainButton?.isProgressVisible}\n            nonInteractive={mainButton?.isProgressVisible}\n            onClick={handleMainButtonClick}\n          >\n            {!mainButton?.isProgressVisible && mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </div>\n      )}\n      {popupParameters && (\n        <Modal\n          isOpen={Boolean(popupParameters)}\n          title={popupParameters.title || NBSP}\n          onClose={handleAppPopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !popupParameters.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {popupParameters.message}\n          <div className=\"dialog-buttons mt-2\">\n            {popupParameters.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                onClick={() => handleAppPopupClose(button.id)}\n              >\n                {button.text || oldLang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n\n      <ConfirmDialog\n        isOpen={isRequestingPhone}\n        onClose={handleRejectPhone}\n        title={lang('ShareYouPhoneNumberTitle')}\n        textParts={lang(\n          'AreYouSureShareMyContactInfoBot',\n          undefined,\n          { withNodes: true, withMarkdown: true, renderTextFilters: ['br', 'emoji'],\n          })}\n        confirmHandler={handleAcceptPhone}\n        confirmLabel={lang('ContactShare')}\n      />\n      <ConfirmDialog\n        isOpen={isRequestingWriteAccess}\n        onClose={handleRejectWriteAccess}\n        title={oldLang('lng_bot_allow_write_title')}\n        text={oldLang('lng_bot_allow_write')}\n        confirmHandler={handleAcceptWriteAccess}\n        confirmLabel={oldLang('lng_bot_allow_write_confirm')}\n      />\n      <ConfirmDialog\n        isOpen={Boolean(requestedFileDownload)}\n        title={oldLang('BotDownloadFileTitle')}\n        textParts={lang('BotDownloadFileDescription', {\n          bot: bot?.firstName,\n          filename: requestedFileDownload?.fileName,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n        })}\n        confirmLabel={oldLang('BotDownloadFileButton')}\n        onClose={handleRejectFileDownload}\n        confirmHandler={handleDownloadFile}\n      />\n\n      <ConfirmDialog\n        isOpen={isCloseModalOpen}\n        onClose={handleHideCloseModal}\n        title={oldLang('lng_bot_close_warning_title')}\n        text={oldLang('lng_bot_close_warning')}\n        confirmHandler={handleConfirmCloseModal}\n        confirmIsDestructive\n        confirmLabel={oldLang('lng_bot_close_warning_sure')}\n      />\n      <ConfirmDialog\n        isOpen={isRemoveModalOpen}\n        onClose={handleHideRemoveModal}\n        title={oldLang('BotRemoveFromMenuTitle')}\n        textParts={renderText(oldLang('BotRemoveFromMenu', bot?.firstName), ['simple_markdown'])}\n        confirmHandler={handleRemoveAttachBot}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n    const modalState = modal?.modalState;\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const userFullInfo = activeBotId ? selectUserFullInfo(global, activeBotId) : undefined;\n    const botAppSettings = userFullInfo?.botInfo?.appSettings;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status: regularPaymentStatus } = selectTabState(global).payment;\n    const { status: starsPaymentStatus, inputInvoice: starsInputInvoice } = selectTabState(global).starsPayment;\n    const botAppPermissions = bot ? selectBotAppPermissions(global, bot.id) : undefined;\n\n    const paymentStatus = starsPaymentStatus || regularPaymentStatus;\n\n    return {\n      attachBot,\n      bot,\n      currentUser,\n      theme,\n      isPaymentModalOpen: isPaymentModalOpen || Boolean(starsInputInvoice),\n      paymentStatus,\n      modalState,\n      botAppPermissions,\n      botAppSettings,\n    };\n  },\n)(WebAppModalTabContent));\n","import { useRef, useState } from '../../../../lib/teact/teact';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePopupLimit(sequentialLimit: number, resetAfter: number) {\n  const [unlockPopupsAt, setUnlockPopupsAt] = useState(0);\n  const sequentialCalls = useRef(0);\n  const lastClosedDate = useRef(0);\n\n  const handlePopupOpened = useLastCallback(() => {\n    const now = Date.now();\n\n    if (now - lastClosedDate.current > resetAfter) {\n      sequentialCalls.current = 0;\n    }\n\n    sequentialCalls.current += 1;\n\n    if (sequentialCalls.current >= sequentialLimit) {\n      setUnlockPopupsAt(now + resetAfter);\n    }\n  });\n\n  const handlePopupClosed = useLastCallback(() => {\n    if (unlockPopupsAt < Date.now()) { // Prevent confused user from extending lock time\n      lastClosedDate.current = Date.now();\n    }\n  });\n\n  return {\n    unlockPopupsAt,\n    handlePopupOpened,\n    handlePopupClosed,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"XWfkIDLY\",\"multi-tab\":\"gBVR7Hec\",\"multiTab\":\"gBVR7Hec\",\"close-icon\":\"RuJ3d9N6\",\"closeIcon\":\"RuJ3d9N6\",\"minimized\":\"dJ1Ld_PX\",\"fullScreen\":\"ciSTWz16\",\"tabs\":\"X18WbDa5\",\"tool-bar\":\"qK4q0Sat\",\"toolBar\":\"qK4q0Sat\",\"tab-button-wrapper\":\"oHX2d8Or\",\"tabButtonWrapper\":\"oHX2d8Or\",\"tab-button\":\"O4NxErFX\",\"tabButton\":\"O4NxErFX\",\"tab-right-mask\":\"dgdyQDsZ\",\"tabRightMask\":\"dgdyQDsZ\",\"tab-close-button\":\"xGefqS93\",\"tabCloseButton\":\"xGefqS93\",\"tab-button-curve-path\":\"bOuMHiVw\",\"tabButtonCurvePath\":\"bOuMHiVw\",\"tab-button-left-curve\":\"f7EicoVH\",\"tabButtonLeftCurve\":\"f7EicoVH\",\"tab-button-right-curve\":\"s6pBIYMI\",\"tabButtonRightCurve\":\"s6pBIYMI\",\"more-apps-tab-icon\":\"Obu3ui67\",\"moreAppsTabIcon\":\"Obu3ui67\",\"avatar-container\":\"z39ojrWc\",\"avatarContainer\":\"z39ojrWc\",\"web-app-tab-more-menu\":\"txS0KiU0\",\"webAppTabMoreMenu\":\"txS0KiU0\",\"more-button\":\"kKPD09tc\",\"moreButton\":\"kKPD09tc\",\"tab-more-button\":\"gkji2_RB\",\"tabMoreButton\":\"gkji2_RB\",\"more-apps-button\":\"cEuW1_hJ\",\"moreAppsButton\":\"cEuW1_hJ\",\"window-state-button\":\"XpHR_yo0\",\"windowStateButton\":\"XpHR_yo0\",\"header-button\":\"GE5AkJOU\",\"headerButton\":\"GE5AkJOU\",\"fullscreenButton\":\"otlJULGy\",\"tab-close-icon\":\"DoeOewUR\",\"tabCloseIcon\":\"DoeOewUR\",\"state-icon\":\"YRMGpqUS\",\"stateIcon\":\"YRMGpqUS\",\"icon\":\"b13oE9uA\",\"tab-avatar\":\"tI6TE6HP\",\"tabAvatar\":\"tI6TE6HP\",\"state-back\":\"IWA50OWU\",\"stateBack\":\"IWA50OWU\",\"loading-spinner\":\"ZvO65ZK4\",\"loadingSpinner\":\"ZvO65ZK4\",\"hide\":\"_90e04Jo\",\"frame\":\"zA1w1IOq\",\"with-button\":\"XsPaFD9G\",\"withButton\":\"XsPaFD9G\",\"main-button\":\"Os96PEjQ\",\"mainButton\":\"Os96PEjQ\",\"visible\":\"C8aMayAw\",\"hidden\":\"GllU9an9\",\"main-button-spinner\":\"nYSFrf_X\",\"mainButtonSpinner\":\"nYSFrf_X\",\"web-app-popup\":\"cTVKrIjM\",\"webAppPopup\":\"cTVKrIjM\",\"without-title\":\"d0DG1SkF\",\"withoutTitle\":\"d0DG1SkF\"};","import { type MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef,\n  useSignal, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { Point, Size, ThemeKey } from '../../../types';\nimport type { WebApp, WebAppOutboundEvent } from '../../../types/webapp';\n\nimport { RESIZE_HANDLE_CLASS_NAME } from '../../../config';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectCurrentChat, selectTheme, selectUser,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getColorLuma } from '../../../util/colors';\nimport { hexToRgb } from '../../../util/switchTheme';\nimport windowSize from '../../../util/windowSize';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDraggable from '../../../hooks/useDraggable';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport MinimizedWebAppModal from './MinimizedWebAppModal';\nimport MoreAppsTabContent from './MoreAppsTabContent';\nimport WebAppModalTabContent from './WebAppModalTabContent';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppModalTab = {\n  bot?: ApiUser;\n  webApp: WebApp;\n  isOpen: boolean;\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  cachedSize?: Size;\n  cachedPosition?: Point;\n};\n\nconst PROLONG_INTERVAL = 45000; // 45s\nconst LUMA_THRESHOLD = 128;\n\nconst MINIMIZED_STATE_SIZE = { width: 300, height: 40 };\nconst DEFAULT_MAXIMIZED_STATE_SIZE = { width: 420, height: 730 };\nconst MAXIMIZED_STATE_MINIMUM_SIZE = { width: 300, height: 300 };\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  cachedSize,\n  cachedPosition,\n}) => {\n  const {\n    closeActiveWebApp,\n    closeWebAppModal,\n    prolongWebView,\n    toggleAttachBot,\n    openChat,\n    changeWebAppModalState,\n    openWebAppTab,\n    updateWebApp,\n    openMoreAppsTab,\n    closeMoreAppsTab,\n    updateMiniAppCachedPosition,\n    updateMiniAppCachedSize,\n  } = getActions();\n\n  const [getMaximizedStateSize, setMaximizedStateSize] = useSignal(cachedSize || DEFAULT_MAXIMIZED_STATE_SIZE);\n\n  function getSize() {\n    if (modal?.modalState === 'fullScreen') return windowSize.get();\n    if (modal?.modalState === 'maximized') return getMaximizedStateSize();\n    return MINIMIZED_STATE_SIZE;\n  }\n  function getMinimumSize() {\n    if (modal?.modalState === 'maximized') return MAXIMIZED_STATE_MINIMUM_SIZE;\n    return undefined;\n  }\n\n  const {\n    openedWebApps, activeWebAppKey, openedOrderedKeys, sessionKeys, isMoreAppsTabActive,\n  } = modal || {};\n  const activeWebApp = activeWebAppKey ? openedWebApps?.[activeWebAppKey] : undefined;\n  const {\n    isBackButtonVisible, headerColor, backgroundColor, isSettingsButtonVisible,\n  } = activeWebApp || {};\n\n  const tabs = useMemo(() => {\n    return openedOrderedKeys?.map((key) => {\n      const webApp = openedWebApps![key];\n      return {\n        bot: getGlobal().users.byId[webApp.botId],\n        webApp,\n        isOpen: Boolean(activeWebApp && (key === getWebAppKey(activeWebApp))),\n      };\n    });\n  }, [openedOrderedKeys, openedWebApps, activeWebApp]);\n\n  const { isMobile } = useAppLayout();\n  const isOpen = modal?.isModalOpen || false;\n  const isMaximizedState = modal?.modalState === 'maximized';\n  const isMinimizedState = modal?.modalState === 'minimized';\n  const isFullScreen = modal?.modalState === 'fullScreen';\n\n  const supportMultiTabMode = !isMobile;\n  const ref = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => ref.current!);\n\n  const getRootElement = useLastCallback(\n    () => ref.current!,\n  );\n\n  const getMenuElement = useLastCallback(\n    () => menuRef.current!,\n  );\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const [isDraggingEnabled, setIsDraggingEnabled] = useState(false);\n\n  const headerElement = headerRef.current;\n  const containerElement = ref.current;\n\n  useEffect(() => {\n    setIsDraggingEnabled(Boolean(supportMultiTabMode && headerElement && containerElement && !isFullScreen));\n  }, [supportMultiTabMode, headerElement, containerElement, isFullScreen]);\n\n  useEffect(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  }, [supportMultiTabMode]);\n\n  const {\n    isDragging,\n    isResizing,\n    style: draggableStyle,\n    size,\n    position,\n  } = useDraggable(\n    ref,\n    headerRef,\n    isDraggingEnabled,\n    getSize(),\n    isFullScreen,\n    getMinimumSize(),\n    cachedPosition,\n  );\n\n  const x = position?.x;\n  const y = position?.y;\n  useEffect(() => {\n    if (!isDragging && x !== undefined && y !== undefined) {\n      updateMiniAppCachedPosition({ position: { x, y } });\n    }\n  }, [isDragging, x, y]);\n\n  useEffect(() => {\n    if (!isDragging && size && isMaximizedState) {\n      updateMiniAppCachedSize({ size });\n    }\n  }, [isDragging, isMaximizedState, size]);\n\n  const currentSize = size || getSize();\n\n  const currentWidth = currentSize.width;\n  const currentHeight = currentSize.height;\n\n  useEffect(() => {\n    if (isResizing) {\n      setMaximizedStateSize({ width: currentWidth, height: currentHeight });\n    }\n  }, [currentHeight, currentWidth, isResizing, setMaximizedStateSize]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const {\n    queryId,\n  } = activeWebApp || {};\n\n  const openTabsCount = openedWebApps ? Object.values(openedWebApps).length : 0;\n\n  useInterval(() => {\n    if (!openedWebApps) return;\n    Object.keys(openedWebApps).forEach((key) => {\n      const webApp = openedWebApps[key];\n      if (webApp.queryId) {\n        prolongWebView({\n          botId: webApp.botId,\n          queryId: webApp.queryId,\n          peerId: webApp.peerId || chat!.id,\n          replyInfo: webApp.replyInfo,\n        });\n      }\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const sendEventCallback = useRef<((event: WebAppOutboundEvent) => void) | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const reloadFrameCallback = useRef<((url: string) => void) | null>(null);\n\n  const registerSendEventCallback = useLastCallback((callback: (event: WebAppOutboundEvent) => void) => {\n    sendEventCallback.current = callback;\n  });\n\n  const sendEvent = useLastCallback((event: WebAppOutboundEvent) => {\n    if (sendEventCallback.current) {\n      sendEventCallback.current(event);\n    }\n  });\n\n  const registerReloadFrameCallback = useLastCallback((callback: (url: string) => void) => {\n    reloadFrameCallback.current = callback;\n  });\n\n  const reloadFrame = useLastCallback((url: string) => {\n    if (reloadFrameCallback.current) {\n      reloadFrameCallback.current(url);\n    }\n  });\n\n  const handleSettingsButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  });\n\n  const handleRefreshClick = useLastCallback(() => {\n    reloadFrame(activeWebApp!.url);\n  });\n\n  const handleModalClose = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleCloseMoreAppsTab = useLastCallback(() => {\n    closeMoreAppsTab();\n  });\n\n  const handleTabClose = useLastCallback(() => {\n    if (openTabsCount > 1) {\n      closeActiveWebApp();\n    } else {\n      closeWebAppModal();\n    }\n  });\n\n  const handleToggleClick = useLastCallback(() => {\n    if (attachBot) {\n      const key = getWebAppKey(activeWebApp!);\n      updateWebApp({\n        key,\n        update: {\n          isRemoveModalOpen: true,\n        },\n      });\n      return;\n    }\n\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: true,\n    });\n  });\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleModalClose();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'minimized' });\n  });\n\n  const handleFullscreenClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'fullScreen' });\n  });\n\n  const handleOpenMoreAppsTabClick = useLastCallback(() => {\n    openMoreAppsTab();\n  });\n\n  const handleTabClick = useLastCallback((tab: WebAppModalTab) => {\n    openWebAppTab({ webApp: tab.webApp });\n  });\n\n  const openBotChat = useLastCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n  });\n\n  const MoreMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        className={\n          buildClassName(\n            supportMultiTabMode ? styles.tabMoreButton : styles.moreButton,\n            isMenuOpen && 'active',\n          )\n        }\n        round\n        ripple={!isMobile}\n        size={supportMultiTabMode ? 'tiny' : 'smaller'}\n        color=\"translucent\"\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, supportMultiTabMode]);\n\n  function renderMenuItems() {\n    return (\n      <>\n        {chat && bot && chat.id !== bot.id && (\n          <MenuItem icon=\"bots\" onClick={openBotChat}>{oldLang('BotWebViewOpenBot')}</MenuItem>\n        )}\n        <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{oldLang('WebApp.ReloadPage')}</MenuItem>\n        {isSettingsButtonVisible && (\n          <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n            {oldLang('Settings')}\n          </MenuItem>\n        )}\n        {bot?.isAttachBot && (\n          <MenuItem\n            icon={attachBot ? 'stop' : 'install'}\n            onClick={handleToggleClick}\n            destructive={Boolean(attachBot)}\n          >\n            {oldLang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n          </MenuItem>\n        )}\n      </>\n    );\n  }\n\n  function renderMoreMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        ref={menuRef}\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        autoClose\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n      >\n        {renderMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderDropdownMoreMenu() {\n    return (\n      <DropdownMenu\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        trigger={MoreMenuButton}\n        positionX={supportMultiTabMode ? 'left' : 'right'}\n      >\n        {renderMenuItems()}\n      </DropdownMenu>\n    );\n  }\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  const headerTextVar = useMemo(() => {\n    if (isMoreAppsTabActive) return 'color-text';\n    if (!headerColor) return undefined;\n    const { r, g, b } = hexToRgb(headerColor);\n    const luma = getColorLuma([r, g, b]);\n    const adaptedLuma = theme === 'dark' ? 255 - luma : luma;\n    return adaptedLuma > LUMA_THRESHOLD ? 'color-text' : 'color-background';\n  }, [headerColor, theme, isMoreAppsTabActive]);\n\n  function renderTabCurveBorder(className: string) {\n    return (\n      <svg\n        className={className}\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n      >\n        <path\n          className={styles.tabButtonCurvePath}\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M16 16V0C16 12 12 16 0 16H16Z\"\n        />\n      </svg>\n    );\n  }\n\n  function renderActiveTab() {\n    const style = buildStyle(\n      headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n      headerColor && `--active-tab-background: ${headerColor}`,\n    );\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n        style={style}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.avatarContainer}>\n            <Avatar\n              size=\"mini\"\n              peer={bot}\n            />\n            <MoreMenuButton onTrigger={handleContextMenu} isOpen={isContextMenuOpen} />\n          </div>\n          {attachBot?.shortName ?? bot?.firstName}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleTabClose}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsTab() {\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.moreAppsTabIcon}>\n            <Icon className={styles.icon} name=\"add\" />\n          </div>\n          {lang('OpenApp')}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleCloseMoreAppsTab}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsButton() {\n    return (\n      <Button\n        className={buildClassName(\n          styles.moreAppsButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleOpenMoreAppsTabClick}\n      >\n        <Icon className={styles.icon} name=\"add\" />\n      </Button>\n    );\n  }\n\n  const containerRef = useRef<HTMLDivElement>();\n  useHorizontalScroll(containerRef, !isOpen || isMinimizedState || !(containerRef.current));\n\n  function renderTabs() {\n    return (\n      <div\n        className={styles.tabs}\n        ref={containerRef}\n      >\n        {tabs?.map((tab) => (\n          tab.isOpen ? (\n            renderActiveTab()\n          ) : (\n            <Avatar\n              className={styles.tabAvatar}\n              size=\"mini\"\n              peer={tab.bot}\n\n              onClick={() => handleTabClick(tab)}\n            />\n          )\n        ))}\n        {isMoreAppsTabActive && renderMoreAppsTab()}\n      </div>\n    );\n  }\n\n  function renderHeader() {\n    return (\n      <div\n        ref={headerRef}\n      >\n        {!supportMultiTabMode\n          ? renderSinglePageModeHeader()\n          : (isMaximizedState ? renderMultiTabHeader() : <MinimizedWebAppModal />)}\n      </div>\n    );\n  }\n\n  function renderMultiTabHeader() {\n    return (\n      <div\n        className={buildClassName(\n          'modal-header',\n          'multiTab',\n        )}\n        style={buildStyle(\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          className={styles.headerButton}\n          round\n          color=\"translucent\"\n          size=\"tiny\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        {renderTabs()}\n        {renderMoreMenu()}\n\n        <div className={styles.toolBar}>\n          {!isMoreAppsTabActive && renderMoreAppsButton()}\n\n          {!isMoreAppsTabActive && (\n            <Button\n              className={buildClassName(\n                styles.windowStateButton,\n                styles.fullscreenButton,\n                'no-drag',\n              )}\n              round\n              color=\"translucent\"\n              size=\"tiny\"\n              onClick={handleFullscreenClick}\n            >\n              <Icon className={styles.stateIcon} name=\"expand-modal\" />\n            </Button>\n          )}\n\n          <Button\n            className={buildClassName(\n              styles.windowStateButton,\n              'no-drag',\n            )}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            onClick={handleCollapseClick}\n          >\n            <Icon className={styles.stateIcon} name=\"collapse-modal\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSinglePageModeHeader() {\n    return (\n      <div\n        className=\"modal-header\"\n        style={buildStyle(\n          headerColor && `background-color: ${headerColor}`,\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{attachBot?.shortName ?? bot?.firstName}</div>\n        {!isMoreAppsTabActive && renderDropdownMoreMenu()}\n      </div>\n    );\n  }\n\n  function buildResizeHandleClass(handleClassName: string) {\n    return buildClassName(RESIZE_HANDLE_CLASS_NAME, handleClassName);\n  }\n\n  function renderResizeHandles() {\n    return (\n      <>\n        <div className={buildResizeHandleClass('top')} />\n        <div className={buildResizeHandleClass('bottom')} />\n        <div className={buildResizeHandleClass('left')} />\n        <div className={buildResizeHandleClass('right')} />\n        <div className={buildResizeHandleClass('topLeft')} />\n        <div className={buildResizeHandleClass('topRight')} />\n        <div className={buildResizeHandleClass('bottomLeft')} />\n        <div className={buildResizeHandleClass('bottomRight')} />\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={ref}\n      className={buildClassName(\n        styles.root,\n        supportMultiTabMode && styles.multiTab,\n        isMinimizedState && styles.minimized,\n        isFullScreen && styles.fullScreen,\n      )}\n      dialogStyle={supportMultiTabMode ? draggableStyle : undefined}\n      dialogContent={isDraggingEnabled && !isMinimizedState ? renderResizeHandles() : undefined}\n      isOpen={isOpen}\n      isLowStackPriority\n      onClose={handleModalClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor || 'var(--color-background)'}`}\n      noBackdrop\n      noBackdropClose\n    >\n      {isFullScreen && renderMoreMenu()}\n      {openedWebApps && sessionKeys?.map((key) => (\n        <WebAppModalTabContent\n          key={key}\n          modal={modal}\n          registerSendEventCallback={registerSendEventCallback}\n          registerReloadFrameCallback={registerReloadFrameCallback}\n          webApp={openedWebApps[key]}\n          isTransforming={isDragging || isResizing}\n          onContextMenuButtonClick={handleContextMenu}\n          isMultiTabSupported={supportMultiTabMode}\n          modalHeight={currentHeight}\n        />\n      ))}\n      {isMoreAppsTabActive && (<MoreAppsTabContent />)}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { miniAppsCachedPosition, miniAppsCachedSize } = selectSharedSettings(global);\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      cachedPosition: miniAppsCachedPosition,\n      cachedSize: miniAppsCachedSize,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useOldLang();\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = type === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (type) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(bot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(bot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [bot, type, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', bot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { MINI_APP_TOS_URL } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['requestedAttachBotInstall'];\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  modal,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const bot = modal?.bot;\n\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n\n  const lang = useOldLang();\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed: Boolean(bot?.shouldRequestWriteAccess),\n    });\n  }, [confirmAttachBotInstall, bot]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsTosAccepted(false);\n    }\n  }, [bot]);\n\n  const tosLabel = useMemo(() => {\n    const base = lang('lng_mini_apps_disclaimer_button');\n    const split = base.split('{link}');\n    const linkText = lang('lng_mini_apps_disclaimer_link');\n    return [\n      split[0],\n      <a href={MINI_APP_TOS_URL} target=\"_blank\" rel=\"noopener noreferrer\">{linkText}</a>,\n      split[1],\n    ];\n  }, [lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={lang('lng_mini_apps_disclaimer_title')}\n      confirmHandler={handleConfirm}\n      isConfirmDisabled={!isTosAccepted}\n    >\n      {renderText(lang('lng_mini_apps_disclaimer_text', bot?.shortName), ['simple_markdown'])}\n      <Checkbox\n        className=\"dialog-checkbox\"\n        checked={isTosAccepted}\n        label={tosLabel}\n        onCheck={setIsTosAccepted}\n      />\n      {renderText(lang('WebBot.Account.Desclaimer.Desc', bot?.shortName), ['simple_markdown'])}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wn7D2H1e\",\"text\":\"IQ1U2TrZ\",\"header\":\"F6qqXRvD\",\"description\":\"ILLaH6qQ\",\"icon\":\"DzGwbpu5\",\"font-icon\":\"Pa9h5mh3\",\"fontIcon\":\"Pa9h5mh3\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps<T> = {\n  title: string;\n  text: string;\n  index: number;\n  count: number;\n  section: T;\n  onClick?: (section: T) => void;\n} & ({\n  icon: IconName;\n  isFontIcon: true;\n} | {\n  icon: string;\n  isFontIcon?: false;\n});\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\nconst PremiumFeatureItem = <T,>({\n  icon,\n  isFontIcon,\n  title,\n  text,\n  index,\n  count,\n  section,\n  onClick,\n}: OwnProps<T>) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 0.5);\n\n  const handleClick = useLastCallback(() => {\n    onClick?.(section);\n  });\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={handleClick} inactive={!onClick}>\n      {isFontIcon ? (\n        <Icon name={icon} className={styles.fontIcon} style={`--item-color: rgb(${r},${g},${b})`} />\n      ) : (\n        <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} draggable={false} />\n      )}\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HmY1pYD9\",\"arrow\":\"cqNhvdib\",\"right\":\"hIgQCprt\",\"arrow-hidden\":\"wDzTWXzO\",\"arrowHidden\":\"wDzTWXzO\",\"dot\":\"Ac0pMX9w\",\"medium\":\"yDo_8Y7X\",\"small\":\"bhODNwmU\",\"invisible\":\"O9pyrgj0\",\"active\":\"NYDxCNdz\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport Button from '../ui/Button';\nimport Icon from './icons/Icon';\n\nimport styles from './SliderDots.module.scss';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <Icon name=\"previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst || isInvisible) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <Icon name=\"next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"u84X0r2z\",\"floating-badge\":\"hPi4fICJ\",\"floatingBadge\":\"hPi4fICJ\",\"floating-badge-triangle\":\"jufjjcX9\",\"floatingBadgeTriangle\":\"jufjjcX9\",\"floating-badge-icon\":\"XkiOXdMP\",\"floatingBadgeIcon\":\"XkiOXdMP\",\"text\":\"YaiSoFKE\",\"floating-badge-value\":\"iC3LJrvy\",\"floatingBadgeValue\":\"iC3LJrvy\",\"left-text\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"leftText\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"right-text\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"rightText\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"right-value\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"rightValue\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"left-value\":\"RJosx238 YaiSoFKE\",\"leftValue\":\"RJosx238 YaiSoFKE\",\"line\":\"Hy5kWx0p\",\"left\":\"scGr4JS9\",\"right\":\"nPaUalQf\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { IconName } from '../../../../types/icons';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: IconName;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <Icon name={floatingBadgeIcon} className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXp65Wgy\",\"title\":\"W1xG3pjS\",\"description\":\"b_CBXIkT\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O1fqNCy0\",\"sticker\":\"ogaoEAcn\",\"effect-sticker\":\"Stdz4UIW ogaoEAcn\",\"effectSticker\":\"Stdz4UIW ogaoEAcn\"};","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: (index: number) => void;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useLastCallback(() => {\n    onClick(realIndex);\n  });\n\n  const handleEnded = useLastCallback(() => {\n    inanimate();\n    onEnded(realIndex);\n  });\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useLastCallback((i: number) => {\n    setOffset(-i);\n  });\n\n  const handleEnded = useLastCallback((i: number) => {\n    const displayIndex = cycleRestrict(renderedStickers.length, i + offset);\n    if (displayIndex !== 0) return;\n\n    setTimeout(() => {\n      setOffset((current) => {\n        return cycleRestrict(renderedStickers.length, current + 1);\n      });\n    }, ENDED_DELAY);\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((sticker, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={sticker}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","import {\n  memo, useLayoutEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { ThemeKey } from '../../types';\n\nimport { selectPeerStories, selectTheme } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from './helpers/mediaDimensions';\n\nimport useDevicePixelRatio from '../../hooks/window/useDevicePixelRatio';\n\ninterface OwnProps {\n  peerId: string;\n  className?: string;\n  size: number;\n  withExtraGap?: boolean;\n  colors?: string[];\n}\n\ninterface StateProps {\n  peerStories?: Record<number, ApiTypeStory>;\n  storyIds?: number[];\n  lastReadId?: number;\n  appTheme: ThemeKey;\n}\n\nconst BLUE = ['#34C578', '#3CA3F3'];\nconst GREEN = ['#C9EB38', '#09C167'];\nconst GRAY = '#C4C9CC';\nconst DARK_GRAY = '#737373';\nconst STROKE_WIDTH = 0.125 * REM;\nconst STROKE_WIDTH_LARGE = 0.25 * REM;\nconst GAP_PERCENT = 2;\nconst SEGMENTS_MAX = 45; // More than this breaks rendering in Safari and Chrome\nconst LARGE_SIZE = 4 * REM;\n\nconst GAP_PERCENT_EXTRA = 10;\nconst EXTRA_GAP_ANGLE = Math.PI / 4;\nconst EXTRA_GAP_SIZE = (GAP_PERCENT_EXTRA / 100) * (2 * Math.PI);\nconst EXTRA_GAP_START = EXTRA_GAP_ANGLE - EXTRA_GAP_SIZE / 2;\nconst EXTRA_GAP_END = EXTRA_GAP_ANGLE + EXTRA_GAP_SIZE / 2;\n\nfunction AvatarStoryCircle({\n  size,\n  className,\n  peerStories,\n  storyIds,\n  lastReadId,\n  withExtraGap,\n  appTheme,\n  colors,\n}: OwnProps & StateProps) {\n  const ref = useRef<HTMLCanvasElement>();\n\n  const dpr = useDevicePixelRatio();\n\n  const isLarge = size > LARGE_SIZE;\n  const strokeWidth = isLarge ? STROKE_WIDTH_LARGE : STROKE_WIDTH;\n  const adaptedSize = size + strokeWidth + (isLarge ? 0.25 * REM : 0); // Add extra gap space for large avatars\n\n  const values = useMemo(() => {\n    return (storyIds || []).reduce((acc, id) => {\n      acc.total += 1;\n      if (lastReadId && id <= lastReadId) {\n        acc.read += 1;\n      }\n\n      return acc;\n    }, { total: 0, read: 0 });\n  }, [lastReadId, storyIds]);\n\n  const isCloseFriend = useMemo(() => {\n    if (!peerStories || !storyIds?.length) {\n      return false;\n    }\n\n    return storyIds.some((id) => {\n      const story = peerStories[id];\n      if (!story || !('isForCloseFriends' in story)) {\n        return false;\n      }\n      const isRead = lastReadId && story.id <= lastReadId;\n      return story.isForCloseFriends && !isRead;\n    });\n  }, [lastReadId, peerStories, storyIds]);\n\n  useLayoutEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: ref.current,\n      size: adaptedSize,\n      strokeWidth,\n      segmentsCount: values.total,\n      colorStops: colors || (isCloseFriend ? GREEN : BLUE),\n      readSegmentsCount: values.read,\n      withExtraGap,\n      readSegmentColor: appTheme === 'dark' ? DARK_GRAY : GRAY,\n      dpr,\n    });\n  }, [appTheme, isCloseFriend, adaptedSize, values.read, values.total, withExtraGap, dpr, colors, size, strokeWidth]);\n\n  if (!values.total) {\n    return undefined;\n  }\n\n  return (\n    <canvas\n      ref={ref}\n      className={buildClassName('story-circle', className)}\n      style={`max-width: ${adaptedSize}px; max-height: ${adaptedSize}px;`}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { peerId }): Complete<StateProps> => {\n  const peerStories = selectPeerStories(global, peerId);\n  const appTheme = selectTheme(global);\n\n  return {\n    peerStories: peerStories?.byId,\n    storyIds: peerStories?.orderedIds,\n    lastReadId: peerStories?.lastReadId,\n    appTheme,\n  };\n})(AvatarStoryCircle));\n\nexport function drawGradientCircle({\n  canvas,\n  size,\n  strokeWidth: strokeWidthPx = STROKE_WIDTH,\n  colorStops,\n  segmentsCount,\n  readSegmentsCount = 0,\n  withExtraGap = false,\n  readSegmentColor,\n  dpr,\n}: {\n  canvas: HTMLCanvasElement;\n  strokeWidth?: number;\n  size: number;\n  colorStops: string[];\n  segmentsCount: number;\n  readSegmentsCount?: number;\n  withExtraGap?: boolean;\n  readSegmentColor: string;\n  dpr: number;\n}) {\n  if (segmentsCount > SEGMENTS_MAX) {\n    readSegmentsCount = Math.round(readSegmentsCount * (SEGMENTS_MAX / segmentsCount));\n\n    segmentsCount = SEGMENTS_MAX;\n  }\n\n  const sizeModifier = dpr;\n  const strokeModifier = dpr;\n\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return;\n  }\n\n  const canvasSize = size * sizeModifier;\n  const strokeWidth = strokeWidthPx * strokeModifier;\n\n  canvas.width = canvasSize;\n  canvas.height = canvasSize;\n  const centerCoordinate = canvasSize / 2;\n  const radius = (canvasSize - strokeWidth) / 2;\n  const segmentAngle = (2 * Math.PI) / segmentsCount;\n  const gapSize = (GAP_PERCENT / 100) * (2 * Math.PI);\n  const gradient = ctx.createLinearGradient(\n    0,\n    0,\n    Math.ceil(canvasSize * Math.cos(Math.PI / 2)),\n    Math.ceil(canvasSize * Math.sin(Math.PI / 2)),\n  );\n\n  if (colorStops.length === 1) {\n    gradient.addColorStop(0, colorStops[0]);\n    gradient.addColorStop(1, colorStops[0]);\n  } else {\n    colorStops.forEach((colorStop, index) => {\n      gradient.addColorStop(index / (colorStops.length - 1), colorStop);\n    });\n  }\n\n  ctx.lineCap = 'round';\n  ctx.clearRect(0, 0, canvasSize, canvasSize);\n\n  Array.from({ length: segmentsCount }).forEach((_, i) => {\n    const isRead = i < readSegmentsCount;\n    let startAngle = i * segmentAngle - Math.PI / 2 + gapSize / 2;\n    let endAngle = startAngle + segmentAngle - (segmentsCount > 1 ? gapSize : 0);\n\n    ctx.strokeStyle = isRead ? readSegmentColor : gradient;\n    ctx.lineWidth = strokeWidth * (isRead ? 0.5 : 1);\n\n    if (withExtraGap) {\n      if (startAngle >= EXTRA_GAP_START && endAngle <= EXTRA_GAP_END) { // Segment is inside extra gap\n        return;\n      } else if (startAngle < EXTRA_GAP_START && endAngle > EXTRA_GAP_END) { // Extra gap is inside segment\n        ctx.beginPath();\n        ctx.arc(centerCoordinate, centerCoordinate, radius, EXTRA_GAP_END, endAngle);\n        ctx.stroke();\n\n        endAngle = EXTRA_GAP_START;\n      } else if (startAngle < EXTRA_GAP_START && endAngle > EXTRA_GAP_START) { // Segment ends in extra gap\n        endAngle = EXTRA_GAP_START;\n      } else if (startAngle < EXTRA_GAP_END && endAngle > EXTRA_GAP_END) { // Segment starts in extra gap\n        startAngle = EXTRA_GAP_END;\n      }\n    }\n\n    ctx.beginPath();\n    ctx.arc(centerCoordinate, centerCoordinate, radius, startAngle, endAngle);\n    ctx.stroke();\n  });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mFElmm7a\",\"header\":\"Jjbochk6\",\"circle\":\"ChteQ9C3\",\"title\":\"d2ayix6L\",\"features\":\"ensyCeMe\",\"mobile\":\"DFbZJafh\",\"scrolled\":\"iN1T0a2Y\"};","import { memo, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\n\nimport { selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useOldLang from '../../../../hooks/useOldLang';\nimport useScrolledState from '../../../../hooks/useScrolledState';\nimport useDevicePixelRatio from '../../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar, { AVATAR_SIZES } from '../../../common/Avatar';\nimport { drawGradientCircle } from '../../../common/AvatarStoryCircle';\nimport PremiumFeatureItem from '../PremiumFeatureItem';\n\nimport styles from './PremiumFeaturePreviewStories.module.scss';\n\ntype StateProps = {\n  currentUser: ApiUser;\n};\n\nconst STORY_COLORS = ['#A667FF', '#55A5FF'];\n\nconst STORY_FEATURE_TITLES = {\n  stories_order: 'PremiumStoriesPriority',\n  stories_stealth: 'PremiumStoriesStealth',\n  stories_views: 'PremiumStoriesViews',\n  stories_timer: 'lng_premium_stories_subtitle_expiration',\n  stories_save: 'PremiumStoriesSaveToGallery',\n  stories_caption: 'lng_premium_stories_subtitle_caption',\n  stories_link: 'lng_premium_stories_subtitle_links',\n};\n\nconst STORY_FEATURE_DESCRIPTIONS = {\n  stories_order: 'PremiumStoriesPriorityDescription',\n  stories_stealth: 'PremiumStoriesStealthDescription',\n  stories_views: 'PremiumStoriesViewsDescription',\n  stories_timer: 'PremiumStoriesExpirationDescription',\n  stories_save: 'PremiumStoriesSaveToGalleryDescription',\n  stories_caption: 'PremiumStoriesCaptionDescription',\n  stories_link: 'PremiumStoriesFormattingDescription',\n};\n\nconst STORY_FEATURE_ICONS: Record<string, IconName> = {\n  stories_order: 'story-priority',\n  stories_stealth: 'eye-crossed-outline',\n  stories_views: 'eye-outline',\n  stories_timer: 'timer',\n  stories_save: 'arrow-down-circle',\n  stories_caption: 'story-caption',\n  stories_link: 'link-badge',\n};\n\nconst STORY_FEATURE_ORDER = Object.keys(STORY_FEATURE_TITLES) as (keyof typeof STORY_FEATURE_TITLES)[];\n\nconst CIRCLE_STROKE_WIDTH = 0.25 * REM;\nconst CIRCLE_SIZE = AVATAR_SIZES.giant + CIRCLE_STROKE_WIDTH;\nconst CIRCLE_SEGMENTS = 8;\nconst CIRCLE_READ_SEGMENTS = 0;\n\nconst PremiumFeaturePreviewVideo = ({\n  currentUser,\n}: StateProps) => {\n  const circleRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const dpr = useDevicePixelRatio();\n\n  useLayoutEffect(() => {\n    if (!circleRef.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: circleRef.current,\n      size: CIRCLE_SIZE,\n      strokeWidth: CIRCLE_STROKE_WIDTH,\n      segmentsCount: CIRCLE_SEGMENTS,\n      colorStops: STORY_COLORS,\n      readSegmentsCount: CIRCLE_READ_SEGMENTS,\n      readSegmentColor: 'transparent',\n      dpr,\n    });\n  }, [dpr]);\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const maxSize = CIRCLE_SIZE;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <Avatar forPremiumPromo peer={currentUser} size=\"giant\" />\n        <canvas className={styles.circle} ref={circleRef} style={`max-width: ${maxSize}px; max-height: ${maxSize}px`} />\n      </div>\n      <div className={styles.title}>{lang('UpgradedStories')}</div>\n      <div\n        className={buildClassName(styles.features, !isAtBeginning && styles.scrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {STORY_FEATURE_ORDER.map((section, index) => {\n          return (\n            <PremiumFeatureItem\n              key={section}\n              title={lang(STORY_FEATURE_TITLES[section])}\n              text={lang(STORY_FEATURE_DESCRIPTIONS[section])}\n              icon={STORY_FEATURE_ICONS[section]}\n              isFontIcon\n              index={index}\n              count={STORY_FEATURE_ORDER.length}\n              section={section}\n            />\n          );\n        })}\n        <div className={styles.mobile}>{lang('lng_premium_stories_about_mobile')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    return {\n      currentUser: selectUser(global, global.currentUserId!)!,\n    };\n  },\n)(PremiumFeaturePreviewVideo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ot0dA1yZ\",\"wrapper\":\"yxSAGAc1\",\"down\":\"Jcy6cDoc\",\"frame\":\"Vn81yTTJ\",\"video\":\"rrVJClLL\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} draggable={false} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oyUTEj8I\",\"button\":\"EPfM7AgT\",\"button-content\":\"GysZk2mF\",\"buttonContent\":\"GysZk2mF\",\"back-button\":\"njYoMrKM\",\"backButton\":\"njYoMrKM\",\"white-back-button\":\"SB4pczOo\",\"whiteBackButton\":\"SB4pczOo\",\"content\":\"sJubG84j\",\"frame\":\"a7IoUtQG\",\"slide\":\"gubS9KP1\",\"limits\":\"U7ePgVBR\",\"stories\":\"J1M6fEdo\",\"limits-content\":\"n_rowVPI\",\"limitsContent\":\"n_rowVPI\",\"header\":\"mz2Hmd83\",\"no-header-border\":\"AgmNOqi7\",\"noHeaderBorder\":\"AgmNOqi7\",\"preview\":\"dIVBSdWi\",\"title\":\"iZLwcL8v\",\"description\":\"A7YHY8qF\",\"footer\":\"yN2611rA\",\"no-footer-border\":\"rCHMABcD\",\"noFooterBorder\":\"rCHMABcD\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { toggleExtraClass } from '../../../lib/teact/teact-dom';\n\nimport type {\n  ApiLimitTypeForPromo,\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_BOTTOM_VIDEOS, PREMIUM_FEATURE_SECTIONS, PREMIUM_LIMITS_ORDER } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport SliderDots from '../../common/SliderDots';\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\nimport PremiumFeaturePreviewStories from './previews/PremiumFeaturePreviewStories';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n  stories: 'PremiumPreviewStories',\n  saved_tags: 'PremiumPreviewTags2',\n  last_seen: 'PremiumPreviewLastSeen',\n  message_privacy: 'PremiumPreviewMessagePrivacy',\n  effects: 'Premium.MessageEffects',\n  todo: 'PremiumPreviewTodo',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n  stories: 'PremiumPreviewStoriesDescription',\n  saved_tags: 'PremiumPreviewTagsDescription2',\n  last_seen: 'PremiumPreviewLastSeenDescription',\n  message_privacy: 'PremiumPreviewMessagePrivacyDescription',\n  effects: 'Premium.MessageEffectsInfo',\n  todo: 'PremiumPreviewTodoDescription',\n};\n\nconst LIMITS_TITLES: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n  recommendedChannels: 'SimilarChannelsLimitTitle',\n  moreAccounts: 'ConnectedAccountsLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n  recommendedChannels: 'SimilarChannelsLimitSubtitle',\n  moreAccounts: 'ConnectedAccountsLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  initialSection: ApiPremiumSection;\n  promo: ApiPremiumPromo;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumPromoOrder?: ApiPremiumSection[];\n  subscriptionOption?: ApiPremiumSubscriptionOption;\n  onBack: VoidFunction;\n  onClickSubscribe: (startParam?: string) => void;\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  isPremium,\n  limits,\n  premiumPromoOrder,\n  subscriptionOption,\n  onBack,\n  onClickSubscribe,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const scrollContainerRef = useRef<HTMLDivElement>();\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePreviousDeprecated(initialSection);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  const subscriptionButtonText = useMemo(() => {\n    if (!subscriptionOption) return undefined;\n\n    const { amount, months, currency } = subscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n\n    return isPremium\n      ? lang('OK')\n      : lang('SubscribeToPremium', { price: formatCurrency(lang, perMonthPrice, currency) }, { withNodes: true });\n  }, [isPremium, lang, subscriptionOption]);\n\n  const handleClick = useLastCallback(() => {\n    onClickSubscribe(initialSection);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const target = e.currentTarget;\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = target;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex}`);\n\n    requestMutation(() => {\n      target.style.setProperty('--scroll-progress', progress.toString());\n      target.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n\n      if (prevElement) toggleExtraClass(prevElement, 'reverse', false);\n      if (reverseElement) toggleExtraClass(reverseElement, 'reverse', true);\n    });\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = filteredSections.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, filteredSections, initialSection, prevInitialSection]);\n\n  const handleSelectSlide = useLastCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  });\n\n  const currentSection = filteredSections[currentSlideIndex];\n  const hasHeaderBackdrop = currentSection !== 'double_limits' && currentSection !== 'stories';\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, hasHeaderBackdrop && styles.whiteBackButton)}\n        color={hasHeaderBackdrop ? 'translucent-white' : 'translucent'}\n        onClick={onBack}\n        ariaLabel={oldLang('Back')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {filteredSections.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {PREMIUM_LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={oldLang(LIMITS_TITLES[limit])}\n                        description={oldLang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (PREMIUM_LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(oldLang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stories') {\n            return (\n              <div className={buildClassName(styles.slide, styles.stories)}>\n                <PremiumFeaturePreviewStories />\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          const shouldUseNewLang = promo.videoSections[i] === 'todo';\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_TITLES[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]]), ['br'],\n                )}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        {Boolean(subscriptionButtonText) && (\n          <Button\n            className={buildClassName(styles.button)}\n            isShiny={!isPremium}\n            withPremiumGradient={!isPremium}\n            onClick={isPremium ? onBack : handleClick}\n          >\n            {subscriptionButtonText}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiPremiumGiftCodeOption, ApiPremiumSubscriptionOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport styles from './PremiumSubscriptionOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumSubscriptionOption | ApiPremiumGiftCodeOption;\n  isGiveaway?: boolean;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  className?: string;\n  onChange: (month: number) => void;\n};\n\nconst PremiumSubscriptionOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount,\n  onChange, className, isGiveaway,\n}) => {\n  const oldLang = useOldLang();\n\n  const {\n    months, amount, currency,\n  } = option;\n  const users = 'users' in option ? option.users : undefined;\n  const perMonth = Math.floor(amount / months);\n  const isUserCountPlural = users ? users > 1 : undefined;\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label\n      className={buildClassName(\n        isGiveaway ? styles.giveawayWrapper : styles.wrapper,\n        (checked && !isGiveaway) && styles.active,\n        className,\n      )}\n      dir={oldLang.isRtl ? 'rtl' : undefined}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"subscription_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>\n          {Boolean(discount) && (\n            <span\n              className={buildClassName(styles.giveawayDiscount, styles.discount)}\n              title={oldLang('GiftDiscount')}\n            >\n              {' '}\n              &minus;\n              {discount}\n              %\n            </span>\n          )}\n          {oldLang('Months', months)}\n        </div>\n        <div className={styles.perMonth}>\n          {(isGiveaway || isUserCountPlural) ? `${formatCurrencyAsString(amount, currency, oldLang.code)} x ${users!}`\n            : oldLang('PricePerMonth', formatCurrencyAsString(perMonth, currency, oldLang.code))}\n        </div>\n        <div className={styles.amount}>\n          {formatCurrencyAsString(amount, currency, oldLang.code)}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(PremiumSubscriptionOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"qZA6S2kc\",\"giveawayWrapper\":\"PkseWxFK\",\"active\":\"EJOQwnRj\",\"input\":\"WOEkhx6R\",\"content\":\"BHUCScsU\",\"month\":\"DfYCMUkL\",\"perMonth\":\"poxOXJ2o\",\"amount\":\"IGMrERf_\",\"discount\":\"uqDlP3Zt\",\"giveawayDiscount\":\"ublijP0j\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sfbpMFHM\",\"transition\":\"ELNkgPve\",\"button\":\"c1tMxuFH\",\"main\":\"ZpOIPrhp\",\"status-emoji\":\"mQwvY9LA\",\"statusEmoji\":\"mQwvY9LA\",\"sticker-wrapper\":\"sNJHQkwe\",\"stickerWrapper\":\"sNJHQkwe\",\"header-text\":\"y71v6ECL\",\"headerText\":\"y71v6ECL\",\"description\":\"cUcKXV3j\",\"list\":\"c3Ee2oSo\",\"no-button\":\"yWEHoJOL\",\"noButton\":\"yWEHoJOL\",\"header\":\"Bc_F0RKb\",\"hidden-header\":\"ltXo0Xi7\",\"hiddenHeader\":\"ltXo0Xi7\",\"close-button\":\"XyN3eWog\",\"closeButton\":\"XyN3eWog\",\"premium-header-text\":\"xysPdANX\",\"premiumHeaderText\":\"xysPdANX\",\"footer-text\":\"yKm9hKQP\",\"footerText\":\"yKm9hKQP\",\"primary-footer-text\":\"l1WlNpmu\",\"primaryFooterText\":\"l1WlNpmu\",\"footer\":\"nCnlO9UZ\",\"stickerSetText\":\"xw_GbDj7\",\"stickerSetLink\":\"FLzl2ng5\",\"stickerSetLinkIcon\":\"Y0jTcadE\",\"subscriptionOptions\":\"xZC_Oajr\",\"subscriptionOption\":\"gygsbDbE\",\"starParticlesHeader\":\"z0zfJObh\",\"giftParticlesHeader\":\"lzalivui\"};","import type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n  ApiStarGift,\n  ApiSticker,\n  ApiStickerSet,\n  ApiUser,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_FEATURE_SECTIONS, TME_LINK_PREFIX } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectCustomEmoji,\n  selectIsCurrentUserPremium,\n  selectStickerSet,\n  selectTabState,\n  selectUser,\n} from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { getStickerFromGift } from '../../common/helpers/gifts';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Icon from '../../common/icons/Icon';\nimport ParticlesHeader from '../../modals/common/ParticlesHeader.tsx';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport PremiumFeatureModal, { PREMIUM_FEATURE_DESCRIPTIONS, PREMIUM_FEATURE_TITLES } from './PremiumFeatureModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './PremiumMainModal.module.scss';\n\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumEffects from '../../../assets/premium/PremiumEffects.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumLastSeen from '../../../assets/premium/PremiumLastSeen.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumMessagePrivacy from '../../../assets/premium/PremiumMessagePrivacy.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumTags from '../../../assets/premium/PremiumTags.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\n\nconst LIMIT_ACCOUNTS = 4;\nconst STATUS_EMOJI_SIZE = 8 * REM;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<ApiPremiumSection, string> = {\n  stories: PremiumStatus,\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n  saved_tags: PremiumTags,\n  last_seen: PremiumLastSeen,\n  message_privacy: PremiumMessagePrivacy,\n  effects: PremiumEffects,\n  todo: PremiumBadge,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  fromUser?: ApiUser;\n  fromUserStatusEmoji?: ApiSticker;\n  fromUserStatusSet?: ApiStickerSet;\n  toUser?: ApiUser;\n  initialSection?: ApiPremiumSection;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  gift?: ApiStarGift;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: ApiPremiumSection[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  fromUserStatusEmoji,\n  fromUserStatusSet,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n  gift,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink, loadStickers, openStickerSet,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<ApiPremiumSection | undefined>(initialSection);\n  const [selectedSubscriptionOption, setSubscriptionOption] = useState<ApiPremiumSubscriptionOption>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setCurrentSection(undefined);\n    } else if (initialSection) {\n      setCurrentSection(initialSection);\n    }\n  }, [isOpen, initialSection]);\n\n  const handleOpenSection = useLastCallback((section: ApiPremiumSection) => {\n    setCurrentSection(section);\n  });\n\n  const handleResetSection = useLastCallback(() => {\n    setCurrentSection(undefined);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClickWithStartParam = useLastCallback((startParam?: string) => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        type: 'slug',\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedSubscriptionOption) {\n      handleClickWithStartParam(String(selectedSubscriptionOption.months));\n    } else {\n      handleClickWithStartParam();\n    }\n  });\n\n  const handleChangeSubscriptionOption = useLastCallback((months: number) => {\n    const foundOption = promo?.options.find((option) => option.months === months);\n    setSubscriptionOption(foundOption);\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  useEffect(() => {\n    if (!fromUserStatusEmoji || fromUserStatusSet) return;\n    loadStickers({\n      stickerSetInfo: fromUserStatusEmoji.stickerSetInfo,\n    });\n  }, [loadStickers, fromUserStatusEmoji, fromUserStatusSet]);\n\n  useEffect(() => {\n    const [defaultOption] = promo?.options ?? [];\n    setSubscriptionOption(defaultOption);\n  }, [promo]);\n\n  const handleOpenStatusSet = useLastCallback(() => {\n    if (!fromUserStatusSet) return;\n\n    openStickerSet({\n      stickerSetInfo: fromUserStatusSet,\n    });\n  });\n\n  const fullMonthlyAmount = useMemo(() => {\n    const monthOption = promo?.options.find((option) => option.months === 1);\n    if (!monthOption) {\n      return undefined;\n    }\n    return Number(monthOption.amount);\n  }, [promo]);\n\n  const subscribeButtonText = useMemo(() => {\n    if (!selectedSubscriptionOption) {\n      return undefined;\n    }\n    const { amount, months, currency } = selectedSubscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n    return formatCurrency(\n      lang,\n      perMonthPrice,\n      currency,\n    );\n  }, [selectedSubscriptionOption, lang]);\n\n  if (!promo || (fromUserStatusEmoji && !fromUserStatusSet)) return undefined;\n\n  function getHeaderText() {\n    if (gift) {\n      return lang('PremiumGiftHeader');\n    }\n\n    if (isGift) {\n      return renderText(\n        fromUser?.id === currentUserId\n          ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n          : oldLang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]),\n        ['simple_markdown', 'emoji'],\n      );\n    }\n\n    if (fromUserStatusSet && fromUser) {\n      const template = oldLang('lng_premium_emoji_status_title').replace('{user}', getUserFullName(fromUser)!);\n      const [first, second] = template.split('{link}');\n\n      const emoji = fromUserStatusSet.thumbCustomEmojiId ? (\n        <CustomEmoji className={styles.stickerSetLinkIcon} documentId={fromUserStatusSet.thumbCustomEmojiId} />\n      ) : undefined;\n      const link = (\n        <span className={styles.stickerSetLink} onClick={handleOpenStatusSet}>\n          {emoji}\n          {renderText(fromUserStatusSet.title)}\n        </span>\n      );\n      return [renderText(first), link, renderText(second)];\n    }\n\n    return renderText(\n      fromUser\n        ? oldLang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n        : oldLang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium'),\n      ['simple_markdown', 'emoji'],\n    );\n  }\n\n  function getHeaderDescription() {\n    if (gift && gift.type !== 'starGiftUnique' && gift.perUserTotal) {\n      return lang('DescriptionGiftPremiumRequired2', { count: gift.perUserTotal }, {\n        pluralValue: gift.perUserTotal,\n      });\n    }\n\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : oldLang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    if (fromUserStatusSet) {\n      return oldLang('TelegramPremiumUserStatusDialogSubtitle');\n    }\n\n    return fromUser\n      ? oldLang('TelegramPremiumUserDialogSubtitle')\n      : oldLang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderHeader() {\n    if (gift) {\n      const giftSticker = getStickerFromGift(gift);\n      return (\n        <ParticlesHeader\n          model=\"sticker\"\n          sticker={giftSticker}\n          color=\"purple\"\n          title={getHeaderText()}\n          description={renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n          className={styles.giftParticlesHeader}\n        />\n      );\n    }\n\n    if (!fromUserStatusEmoji) {\n      return (\n        <ParticlesHeader\n          model=\"swaying-star\"\n          color=\"purple\"\n          title={getHeaderText()}\n          description={renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n          className={styles.starParticlesHeader}\n        />\n      );\n    }\n\n    return (\n      <>\n        <CustomEmoji\n          className={styles.statusEmoji}\n          onClick={handleOpenStatusSet}\n          documentId={fromUserStatusEmoji.id}\n          isBig\n          size={STATUS_EMOJI_SIZE}\n        />\n        <h2 className={buildClassName(styles.headerText, fromUserStatusSet && styles.stickerSetText)}>\n          {getHeaderText()}\n        </h2>\n        <div className={styles.description}>\n          {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n        </div>\n      </>\n    );\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={oldLang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {promo?.options\n          .map((option) => (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={option.amount}\n              option={option}\n              onChange={handleChangeSubscriptionOption}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={selectedSubscriptionOption?.months === option.months}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={closePremiumModal}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              onClick={() => closePremiumModal()}\n              ariaLabel={oldLang('Close')}\n            >\n              <Icon name=\"close\" />\n            </Button>\n            {renderHeader()}\n            {!isPremium && !isGift && renderSubscriptionOptions()}\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {oldLang('TelegramPremium')}\n              </h2>\n            </div>\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                const shouldUseNewLang = section === 'todo';\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={shouldUseNewLang\n                      ? lang(PREMIUM_FEATURE_TITLES[section] as keyof LangPair)\n                      : oldLang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : shouldUseNewLang\n                        ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section] as keyof LangPair)\n                        : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    section={section}\n                    onClick={handleOpenSection}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={oldLang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && selectedSubscriptionOption && (\n              <div className={styles.footer}>\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {oldLang('SubscribeToPremium', subscribeButtonText)}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleResetSection}\n            promo={promo}\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n            premiumPromoOrder={premiumPromoOrder}\n            subscriptionOption={selectedSubscriptionOption}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n\n  const fromUser = premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined;\n  const fromUserStatusEmoji = fromUser?.emojiStatus ? selectCustomEmoji(global, fromUser.emojiStatus.documentId)\n    : undefined;\n  const fromUserStatusSet = fromUserStatusEmoji ? selectStickerSet(global, fromUserStatusEmoji.stickerSetInfo)\n    : undefined;\n\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    gift: premiumModal?.gift,\n    fromUser,\n    fromUserStatusEmoji,\n    fromUserStatusSet,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig.limits,\n    premiumSlug: global.appConfig.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig.premiumBotUsername,\n    premiumPromoOrder: global.appConfig.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CountryPickerModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CountryPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CountryPickerModal = useModuleLoader(Bundles.Extra, 'CountryPickerModal', !isOpen);\n\n  return CountryPickerModal ? <CountryPickerModal {...props} /> : undefined;\n};\n\nexport default CountryPickerModalAsync;\n","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  isChatChannel, isChatPublic, isChatSuperGroup,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\nconst GiveawayChannelPickerModal = ({\n  isOpen,\n  giveawayChatId,\n  selectionLimit,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [pendingChannelId, setPendingChannelId] = useState<string | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const channelIds = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const { active, archived } = global.chats.listIds;\n    const ids = (active || []).concat(archived || []);\n\n    return unique(ids).map((id) => chatsById[id])\n      .filter((chat) => (\n        chat && (\n          isChatChannel(chat) || isChatSuperGroup(chat)\n        ) && chat.id !== giveawayChatId\n      )).map((chat) => chat.id);\n  }, [giveawayChatId]);\n\n  const displayedChannelIds = useMemo(() => {\n    const foundChannelIds = channelIds ? filterPeersByQuery({ ids: channelIds, query: searchQuery, type: 'chat' }) : [];\n\n    return sortChatIds(foundChannelIds,\n      false,\n      selectedIds);\n  }, [channelIds, searchQuery, selectedIds]);\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    const chatsById = getGlobal().chats.byId;\n    const newlyAddedIds = newSelectedIds.filter((id) => !selectedIds.includes(id));\n    const privateLinkChannelId = newlyAddedIds.find((id) => {\n      const chat = chatsById[id];\n      return chat && !isChatPublic(chat);\n    });\n\n    if (selectedIds?.length >= selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningChannelsPlural', selectionLimit),\n      });\n      return;\n    }\n\n    if (privateLinkChannelId) {\n      setPendingChannelId(privateLinkChannelId);\n      openConfirmModal();\n    } else {\n      setSelectedIds(newSelectedIds);\n    }\n  });\n\n  const confirmPrivateLinkChannelSelection = useLastCallback(() => {\n    if (pendingChannelId) {\n      setSelectedIds(unique([...selectedIds, pendingChannelId]));\n    }\n    closeConfirmModal();\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('RequestPeer.ChooseChannelTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedChannelIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedChannelIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n      <ConfirmDialog\n        title={lang('BoostingGiveawayPrivateChannel')}\n        text={lang('BoostingGiveawayPrivateChannelWarning')}\n        confirmLabel={lang('Add')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmPrivateLinkChannelSelection}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(GiveawayChannelPickerModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './GiveawayTypeOption.module.scss';\n\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\n\ntype OwnProps = {\n  option: ApiGiveawayType;\n  name: string;\n  text: string;\n  img: string;\n  checked?: boolean;\n  isLink: boolean;\n  className?: string;\n  onChange: (value: ApiGiveawayType) => void;\n  onClickAction?: () => void;\n  userNames?: string;\n  selectedMemberIds?: string[];\n};\n\nconst GiveawayTypeOption: FC<OwnProps> = ({\n  option, checked,\n  name, text, img,\n  isLink, onChange, onClickAction, className,\n  userNames, selectedMemberIds,\n}) => {\n  const lang = useOldLang();\n\n  let displayText: string | undefined = lang(text);\n  if (isLink && selectedMemberIds?.length) {\n    displayText = selectedMemberIds.length > 2 ? selectedMemberIds.length.toString() : userNames;\n  }\n\n  const handleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(option);\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    onClickAction?.();\n  });\n\n  return (\n    <label\n      className={buildClassName(styles.wrapper, className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"giveaway_option\"\n        value={option}\n        checked={checked}\n        onChange={handleChange}\n        onClick={(e) => e.stopPropagation()}\n      />\n      <div className={styles.content}>\n        <img className={styles.optionImg} src={img} alt=\"\" draggable={false} />\n        <div className={styles.giveaway}>\n          <h3 className={styles.title}>\n            {lang(name)}\n          </h3>\n          {isLink ? (\n            <div className={styles.link} onClick={handleClick}>\n              <span>{displayText}</span>\n              <Icon name=\"next\" />\n            </div>\n          ) : (\n            <span className={styles.contentText}>{displayText}</span>\n          )}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiveawayTypeOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"w3OGYFKn\",\"input\":\"xy4AclZa\",\"content\":\"TTgSI7Xh\",\"notChecked\":\"JDcXsByU\",\"giveaway\":\"sEt7TF59\",\"title\":\"u4NzVBBi\",\"link\":\"y7XfPOoG\",\"optionImg\":\"lGhZJbMF\",\"contentText\":\"kt2ZKZ6j\"};","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember } from '../../../api/types';\n\nimport {\n  isUserBot,\n  sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\ntype OwnProps = {\n  isOpen?: boolean;\n\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst GiveawayUserPickerModal = ({\n  isOpen,\n  selectionLimit,\n  members,\n  adminMembersById,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const memberIds = useMemo(() => {\n    const global = getGlobal();\n    const { byId, statusesById } = global.users;\n    if (!members?.length) {\n      return [];\n    }\n\n    const adminIdsSet = adminMembersById && new Set(Object.keys(adminMembersById));\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      byId,\n      statusesById,\n    );\n\n    return adminIdsSet ? userIds.filter((userId) => !adminIdsSet.has(userId)) : userIds;\n  }, [adminMembersById, members]);\n\n  const displayedMemberIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredUserIds = memberIds\n      ? filterPeersByQuery({ ids: memberIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(unique(filteredUserIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user);\n    }));\n  }, [memberIds, searchQuery]);\n\n  const handleSelectedMemberIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', selectionLimit),\n      });\n      return;\n    }\n    setSelectedIds(newSelectedIds);\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('BoostingAwardSpecificUsers')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedMemberIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedMemberIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { giveawayChatId }): Complete<StateProps> => {\n  const chatFullInfo = giveawayChatId ? selectChatFullInfo(global, giveawayChatId) : undefined;\n  if (!chatFullInfo) {\n    return {\n      members: undefined,\n      adminMembersById: undefined,\n    };\n  }\n\n  return {\n    members: chatFullInfo.members,\n    adminMembersById: chatFullInfo.adminMembersById,\n  };\n})(GiveawayUserPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"P0kLOw15\",\"button\":\"ILuhBsJG\",\"main\":\"SqiN63Ef\",\"logo\":\"Me2hCsMs\",\"header-text\":\"UVDnB0Wq\",\"headerText\":\"UVDnB0Wq\",\"description\":\"v5yGzV6v\",\"header\":\"U6XNIToQ\",\"hidden-header\":\"tDZc21ZC\",\"hiddenHeader\":\"tDZc21ZC\",\"close-button\":\"OX6_HqAd\",\"closeButton\":\"OX6_HqAd\",\"premium-header-text\":\"v6hiGpEn\",\"premiumHeaderText\":\"v6hiGpEn\",\"primary-footer-text\":\"YGbiSd3e\",\"primaryFooterText\":\"YGbiSd3e\",\"section\":\"rZRDMqUL\",\"types\":\"sQ5PkKEs\",\"footer\":\"hD_AEzjd\",\"options\":\"JjDLNrKG\",\"giveawayTitle\":\"p5Hn4Q6E\",\"subscription\":\"rniPcuiP\",\"starSubscription\":\"bzRAETfR\",\"subscriptionOption\":\"ggZrgZnv\",\"status\":\"q1y2qUTn\",\"info\":\"IsT38nlq\",\"titleInfo\":\"nmsfBLut\",\"month\":\"TsGuei3B\",\"quantity\":\"G9H3tm6D\",\"floatingBadge\":\"xKl2UeV8\",\"floatingBadgeColor\":\"HLx3wTBD\",\"floatingBadgeButtonColor\":\"JLH0MExt\",\"floatingBadgeIcon\":\"Ftr7zf2v\",\"floatingBadgeValue\":\"Ce0Ob2tg\",\"subscriptionFooter\":\"rDFQAfTt\",\"premiumFeatures\":\"eNQ_nrKr\",\"dateButton\":\"GeKqKRgP\",\"title\":\"LZ3vPzak\",\"checkboxSection\":\"Z9QJQ6IS\",\"prizesSection\":\"eQVP0Nx8\",\"prizesInput\":\"qMYNwiUZ\",\"subLabelClassName\":\"txXJxVFu\",\"prepaidImg\":\"ldn4mh2T\",\"addButton\":\"sOXvh85b\",\"addChannel\":\"aGbyR60s\",\"removeChannel\":\"UZdErfVI\",\"starOptions\":\"cLhNkYPB\",\"transition\":\"vEI2Wewt\"};","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiCountry,\n  ApiPremiumGiftCodeOption,\n  ApiPrepaidGiveaway,\n  ApiPrepaidStarsGiveaway,\n  ApiStarGiveawayOption,\n  ApiTypePrepaidGiveaway,\n} from '../../../api/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n  GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  GIVEAWAY_MAX_ADDITIONAL_USERS,\n  STARS_CURRENCY_CODE,\n} from '../../../config';\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { unique } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport CountryPickerModal from '../../common/CountryPickerModal.async';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport StarTopupOptionList from '../../modals/stars/StarTopupOptionList';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSliderWithMarks from '../../ui/RangeSliderWithMarks';\nimport Switcher from '../../ui/Switcher';\nimport GiveawayChannelPickerModal from './GiveawayChannelPickerModal';\nimport GiveawayTypeOption from './GiveawayTypeOption';\nimport GiveawayUserPickerModal from './GiveawayUserPickerModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiveawayModal.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumStar.svg';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  userIds?: string[];\n};\n\ntype StateProps = {\n  chatId?: string;\n  gifts?: ApiPremiumGiftCodeOption[];\n  selectedMemberList?: string[] | undefined;\n  selectedChannelList?: string[] | undefined;\n  giveawayBoostPerPremiumLimit?: number;\n  userSelectionLimit?: number;\n  countryList: ApiCountry[];\n  prepaidGiveaway?: ApiTypePrepaidGiveaway;\n  countrySelectionLimit: number | undefined;\n  isChannel?: boolean;\n  isStarsGiftEnabled?: boolean;\n  starsGiftOptions?: ApiStarGiveawayOption[] | undefined;\n};\n\ntype GiveawayAction = 'createPremiumGiveaway' | 'createStarsGiveaway';\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\ntype SubscribersType = 'all' | 'new';\n\ninterface TypeOption {\n  name: string;\n  text: string;\n  value: ApiGiveawayType;\n  img: string;\n  actions?: GiveawayAction;\n  isLink: boolean;\n  onClickAction?: () => void;\n}\n\nconst DEFAULT_CUSTOM_EXPIRE_DATE = 86400 * 3 * 1000; // 3 days\nconst MAX_ADDITIONAL_CHANNELS = 9;\nconst DEFAULT_BOOST_COUNT = 5;\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst GiveawayModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  gifts,\n  isOpen,\n  isChannel,\n  selectedMemberList,\n  selectedChannelList,\n  giveawayBoostPerPremiumLimit = GIVEAWAY_BOOST_PER_PREMIUM,\n  countryList,\n  prepaidGiveaway,\n  countrySelectionLimit = GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_USERS,\n  isStarsGiftEnabled,\n  starsGiftOptions,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closeGiveawayModal, openInvoice, openPremiumModal,\n    launchPrepaidGiveaway, launchPrepaidStarsGiveaway,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isCountryPickerModalOpen, openCountryPickerModal, closeCountryPickerModal] = useFlag();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isUserPickerModalOpen, openUserPickerModal, closeUserPickerModal] = useFlag();\n  const [isChannelPickerModalOpen, openChannelPickerModal, closeChannelPickerModal] = useFlag();\n\n  const TYPE_OPTIONS: TypeOption[] = [{\n    name: 'Premium.Title',\n    text: 'BoostingWinnersRandomly',\n    value: 'premium_giveaway',\n    img: GiftBlueRound,\n    actions: 'createPremiumGiveaway',\n    isLink: true,\n    onClickAction: () => {\n      openUserPickerModal();\n    },\n  }];\n\n  if (isStarsGiftEnabled) {\n    TYPE_OPTIONS.push({\n      name: 'TelegramStars',\n      text: 'BoostingWinnersRandomly',\n      value: 'stars_giveaway',\n      img: GiftStar,\n      actions: 'createStarsGiveaway',\n      isLink: false,\n    });\n  }\n\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedRandomUserCount, setSelectedRandomUserCount] = useState<number>(DEFAULT_BOOST_COUNT);\n  const [selectedGiveawayOption, setGiveawayOption] = useState<ApiGiveawayType>(TYPE_OPTIONS[0].value);\n  const [selectedStarOption, setSelectedStarOption] = useState<ApiStarGiveawayOption | undefined>();\n  const [selectedSubscriberOption, setSelectedSubscriberOption] = useState<SubscribersType>('all');\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [selectedChannelIds, setSelectedChannelIds] = useState<string[]>([]);\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[] | undefined>([]);\n  const [shouldShowWinners, setShouldShowWinners] = useState<boolean>(false);\n  const [shouldShowPrizes, setShouldShowPrizes] = useState<boolean>(false);\n  const [prizeDescription, setPrizeDescription] = useState<string | undefined>(undefined);\n  const [dataPrepaidGiveaway, setDataPrepaidGiveaway] = useState<ApiPrepaidGiveaway | undefined>(undefined);\n  const [\n    dataStarsPrepaidGiveaway, setDataStarsPrepaidGiveaway,\n  ] = useState<ApiPrepaidStarsGiveaway | undefined>(undefined);\n\n  const isPremiumGiveaway = selectedGiveawayOption === 'premium_giveaway';\n  const isStarsGiveaway = selectedGiveawayOption === 'stars_giveaway';\n  const selectedUserCount = isPremiumGiveaway\n    && !selectedUserIds.length ? selectedRandomUserCount : selectedUserIds.length;\n  const boostQuantity = selectedUserCount * giveawayBoostPerPremiumLimit;\n  const boostStarsQuantity = selectedStarOption?.yearlyBoosts;\n\n  const SUBSCRIBER_OPTIONS = useMemo(() => [\n    {\n      value: 'all',\n      label: lang(isChannel ? 'BoostingAllSubscribers' : 'BoostingAllMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n    {\n      value: 'new',\n      label: lang(isChannel ? 'BoostingNewSubscribers' : 'BoostingNewMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n  ], [isChannel, lang, selectedCountryIds]);\n\n  const monthQuantity = lang('Months', selectedMonthOption);\n  const isStarsPrepaidGiveaway = prepaidGiveaway?.type === 'starsGiveaway';\n  const isPremiumPrepaidGiveaway = prepaidGiveaway?.type === 'giveaway';\n\n  const selectedGift = useMemo(() => {\n    return gifts?.find((gift) => gift.months === selectedMonthOption && gift.users === selectedUserCount);\n  }, [gifts, selectedMonthOption, selectedUserCount]);\n\n  const selectedStarsGift = useMemo(() => {\n    return starsGiftOptions?.find((gift) => {\n      return isStarsPrepaidGiveaway && gift.stars === (dataStarsPrepaidGiveaway?.stars);\n    });\n  }, [dataStarsPrepaidGiveaway, starsGiftOptions, isStarsPrepaidGiveaway]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users === selectedUserCount && gift.currency !== STARS_CURRENCY_CODE);\n  }, [gifts, selectedUserCount]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    const basicGift = filteredGifts?.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    }, filteredGifts[0]);\n\n    return basicGift && Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const userCountOptions = useMemo(() => {\n    return unique((gifts?.filter((gift) => gift.currency !== STARS_CURRENCY_CODE)\n      ?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [gifts]);\n\n  const winnerCountOptions = useMemo(() => {\n    return unique((selectedStarOption?.winners?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [selectedStarOption]);\n\n  useEffect(() => {\n    if (isOpen && gifts?.length && !isStarsPrepaidGiveaway) {\n      setSelectedMonthOption(gifts?.[0].months);\n    }\n  }, [isOpen, gifts, isStarsPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && starsGiftOptions?.length && !isPremiumPrepaidGiveaway) {\n      setSelectedStarOption(starsGiftOptions?.[0]);\n    }\n  }, [isOpen, starsGiftOptions, isPremiumPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isStarsPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataStarsPrepaidGiveaway(prepaidGiveaway);\n    }\n  }, [isOpen, isStarsPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isPremiumPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataPrepaidGiveaway(prepaidGiveaway);\n      setSelectedMonthOption(prepaidGiveaway.months);\n    }\n  }, [isOpen, isPremiumPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (selectedMemberList) {\n      setSelectedUserIds(selectedMemberList);\n    }\n  }, [selectedMemberList]);\n\n  useEffect(() => {\n    if (selectedChannelList) {\n      setSelectedChannelIds(selectedChannelList);\n    }\n  }, [selectedChannelList]);\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    setDataStarsPrepaidGiveaway(undefined);\n    setDataPrepaidGiveaway(undefined);\n    setSelectedStarOption(undefined);\n    setSelectedMonthOption(undefined);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n    closeGiveawayModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isPremiumGiveaway) {\n      if (selectedUserIds?.length) {\n        openInvoice({\n          type: 'giftcode',\n          boostChannelId: chatId!,\n          userIds: selectedUserIds,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      } else {\n        openInvoice({\n          type: 'giveaway',\n          chatId: chatId!,\n          additionalChannelIds: selectedChannelIds,\n          isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n          countries: selectedCountryIds,\n          areWinnersVisible: shouldShowWinners,\n          prizeDescription,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      }\n    } else {\n      openInvoice({\n        type: 'starsgiveaway',\n        chatId: chatId!,\n        additionalChannelIds: selectedChannelIds,\n        isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n        countries: selectedCountryIds,\n        areWinnersVisible: shouldShowWinners,\n        prizeDescription,\n        untilDate: customExpireDate / 1000,\n        currency: selectedStarOption!.currency,\n        amount: selectedStarOption!.amount,\n        stars: selectedStarOption!.stars,\n        users: selectedRandomUserCount,\n      });\n    }\n\n    handleClose();\n  });\n\n  const confirmLaunchPrepaidGiveaway = useLastCallback(() => {\n    if (isStarsPrepaidGiveaway) {\n      launchPrepaidStarsGiveaway({\n        chatId: chatId!,\n        giveawayId: dataStarsPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          stars: dataStarsPrepaidGiveaway!.stars,\n          currency: selectedStarsGift!.currency,\n          amount: selectedStarsGift!.amount,\n          users: dataStarsPrepaidGiveaway!.quantity,\n        },\n      });\n    } else {\n      launchPrepaidGiveaway({\n        chatId: chatId!,\n        giveawayId: dataPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n        },\n      });\n    }\n\n    closeConfirmModal();\n    handleClose();\n  });\n\n  const handleRandomUserCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handleWinnerCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handlePrizeDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setPrizeDescription(e.target.value);\n  });\n\n  const userNames = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return selectedUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [selectedUserIds]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleChangeSubscriberOption = useLastCallback((value) => {\n    setSelectedSubscriberOption(value);\n  });\n\n  const handleChangeTypeOption = useLastCallback((value: ApiGiveawayType) => {\n    setGiveawayOption(value);\n    setSelectedUserIds([]);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleSetCountriesListChange = useLastCallback((value: string[]) => {\n    setSelectedCountryIds(value);\n  });\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedUserIds(newSelectedIds);\n    if (!newSelectedIds.length) {\n      setGiveawayOption('premium_giveaway');\n    }\n  });\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedChannelIds(newSelectedIds);\n  });\n\n  const handleShouldShowWinnersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowWinners(e.target.checked);\n  });\n\n  const handleShouldShowPrizesChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowPrizes(e.target.checked);\n  });\n\n  const onClickActionHandler = useLastCallback(() => {\n    openCountryPickerModal();\n  });\n\n  const handleStarClick = useLastCallback((option) => {\n    setSelectedStarOption(option);\n  });\n\n  function renderTypeOptions() {\n    return (\n      <div className={styles.options}>\n        {TYPE_OPTIONS.map((option) => {\n          return (\n            <GiveawayTypeOption\n              key={option.name}\n              name={option.name}\n              text={option.text}\n              option={option.value}\n              img={option.img}\n              onChange={handleChangeTypeOption}\n              checked={selectedGiveawayOption === option.value}\n              isLink={option.isLink}\n              userNames={userNames}\n              selectedMemberIds={selectedUserIds}\n              onClickAction={option.onClickAction}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscribersOptions() {\n    return (\n      <div className={styles.options}>\n        <RadioGroup\n          name=\"subscribers\"\n          options={SUBSCRIBER_OPTIONS}\n          selected={selectedSubscriberOption}\n          onChange={handleChangeSubscriberOption}\n          onClickAction={onClickActionHandler}\n          subLabelClassName={styles.subLabelClassName}\n          isLink\n        />\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.options}>\n        {filteredGifts?.map((gift) => (\n          <PremiumSubscriptionOption\n            isGiveaway\n            key={gift.months}\n            option={gift}\n            fullMonthlyAmount={fullMonthlyAmount}\n            checked={gift.months === selectedMonthOption}\n            onChange={setSelectedMonthOption}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function deleteParticipantsHandler(id: string) {\n    const filteredChannelIds = selectedChannelIds.filter((channelId) => channelId !== id);\n    setSelectedChannelIds(filteredChannelIds);\n  }\n\n  function renderStarOptionList() {\n    return (\n      <StarTopupOptionList\n        className={styles.starOptions}\n        options={starsGiftOptions}\n        selectedStarCount={selectedRandomUserCount}\n        selectedStarOption={selectedStarOption}\n        onClick={handleStarClick}\n      />\n    );\n  }\n\n  function renderGiveawayOptionList() {\n    return (\n      <>\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingChannelsGroupsIncludedGiveaway')}\n          </h2>\n\n          <ListItem\n            inactive\n            className=\"chat-item-clickable contact-list-item\"\n          >\n            <GroupChatInfo\n              chatId={chatId!}\n              status={lang(isChannel ? 'BoostingChannelWillReceiveBoost'\n                : 'BoostingGroupWillReceiveBoost', boostQuantity || boostStarsQuantity, 'i')}\n            />\n          </ListItem>\n\n          {selectedChannelIds?.map((channelId) => {\n            return (\n              <ListItem\n                ripple\n                key={channelId}\n                className=\"chat-item-clickable contact-list-item\"\n\n                onClick={() => deleteParticipantsHandler(channelId)}\n                rightElement={(<Icon name=\"close\" className={styles.removeChannel} />)}\n              >\n                <GroupChatInfo\n                  chatId={channelId.toString()}\n                />\n              </ListItem>\n            );\n          })}\n\n          {selectedChannelIds.length < MAX_ADDITIONAL_CHANNELS && (\n            <ListItem\n              icon=\"add\"\n              ripple\n              onClick={openChannelPickerModal}\n              className={styles.addButton}\n              iconClassName={styles.addChannel}\n            >\n              {lang('BoostingAddChannelOrGroup')}\n            </ListItem>\n          )}\n        </div>\n\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingEligibleUsers')}\n          </h2>\n\n          {renderSubscribersOptions()}\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang(isChannel ? 'BoostGift.LimitSubscribersInfo' : 'lng_giveaway_users_about_group'))}\n        </div>\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayAdditionalPrizes')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowPrizes}\n              onChange={handleShouldShowPrizesChange}\n            />\n          </div>\n\n          {shouldShowPrizes && (\n            <div className={styles.prizesSection}>\n              <h2 className={styles.title}>\n                {selectedRandomUserCount}\n              </h2>\n              <InputText\n                className={styles.prizesInput}\n                value={prizeDescription}\n                onChange={handlePrizeDescriptionChange}\n                label={lang('BoostingGiveawayEnterYourPrize')}\n              />\n            </div>\n          )}\n        </div>\n\n        {shouldShowPrizes ? (\n          !isStarsGiveaway && !isStarsPrepaidGiveaway ? (\n            <div className={styles.subscription}>\n              {prizeDescription?.length ? renderText(lang('BoostingGiveawayAdditionPrizeCountNameHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, prizeDescription, monthQuantity]\n                  : [selectedUserCount, prizeDescription, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown']) : renderText(lang('BoostingGiveawayAdditionPrizeCountHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, monthQuantity]\n                  : [selectedUserCount, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown'])}\n            </div>\n          ) : undefined\n        ) : (\n          <div className={styles.subscription}>\n            {renderText(lang('BoostingGiveawayAdditionPrizeHint'))}\n          </div>\n        )}\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayShowWinners')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowWinners}\n              onChange={handleShouldShowWinnersChange}\n            />\n          </div>\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang('BoostingGiveawayShowWinnersHint'))}\n        </div>\n\n        <div className={buildClassName(styles.section,\n          (dataPrepaidGiveaway || dataStarsPrepaidGiveaway || isStarsGiveaway) && styles.subscriptionFooter)}\n        >\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingDateWhenGiveawayEnds')}\n          </h2>\n\n          <Button\n            ariaLabel={lang('BoostGift.DateEnds')}\n            className={buildClassName(styles.dateButton, 'expire-limit')}\n            isText\n            onClick={openCalendar}\n          >\n            <h3 className={styles.title}>\n              {lang('BoostGift.DateEnds')}\n            </h3>\n            {formatDateTimeToString(customExpireDate, lang.code)}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={handleClose}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n      onEnter={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={handleClose}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <h2 className={styles.headerText}>\n          {renderText(lang('BoostingBoostsViaGifts'))}\n        </h2>\n        <div className={styles.description}>\n          {renderText(lang(isChannel ? 'BoostingGetMoreBoost' : 'BoostingGetMoreBoostsGroup'))}\n        </div>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.premiumHeaderText}>\n            {lang('BoostingBoostsViaGifts')}\n          </h2>\n        </div>\n        {(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? (\n          <div className={styles.status}>\n            <div>\n              {dataStarsPrepaidGiveaway ? (\n                <img className={styles.prepaidImg} src={GiftStar} alt=\"\" />\n              ) : (\n                <img\n                  className={styles.prepaidImg}\n                  src={GIVEAWAY_IMG_LIST[dataPrepaidGiveaway!.months] || GIVEAWAY_IMG_LIST[3]}\n                  alt=\"\"\n                />\n              )}\n            </div>\n            <div className={styles.info}>\n              <h3 className={styles.title}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Title', dataStarsPrepaidGiveaway?.stars)\n                  : lang('BoostingTelegramPremiumCountPlural', dataPrepaidGiveaway!.quantity)}\n              </h3>\n              <p className={styles.month}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', dataStarsPrepaidGiveaway?.quantity)\n                  : lang('PrepaidGiveawayMonths', dataPrepaidGiveaway?.months)}\n              </p>\n            </div>\n            <div className={styles.quantity}>\n              <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {dataStarsPrepaidGiveaway ? dataStarsPrepaidGiveaway?.boosts\n                    : dataPrepaidGiveaway!.quantity * (giveawayBoostPerPremiumLimit ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className={buildClassName(styles.section, styles.types)}>\n            {renderTypeOptions()}\n          </div>\n        )}\n\n        {isPremiumGiveaway && !selectedUserIds?.length && (\n          <>\n            {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingQuantityPrizes')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedUserCount}\n                    marks={userCountOptions}\n                    onChange={handleRandomUserCountChange}\n                  />\n                </div>\n\n                <div className={styles.subscription}>\n                  {renderText(lang('BoostingChooseHowMany'))}\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {isStarsGiveaway && (\n          <>\n            {!dataStarsPrepaidGiveaway && !dataPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingStarsOptions')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostStarsQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  {renderStarOptionList()}\n                </div>\n\n                <div className={buildClassName(styles.subscription, styles.starSubscription)}>\n                  {renderText(lang('BoostGift.Stars.Info'))}\n                </div>\n\n                <div className={styles.section}>\n                  <h2 className={styles.giveawayTitle}>\n                    {lang('BoostingStarsQuantityPrizes')}\n                  </h2>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedRandomUserCount}\n                    marks={winnerCountOptions}\n                    onChange={handleWinnerCountChange}\n                  />\n\n                  <div className={styles.subscription}>\n                    {renderText(lang('BoostingStarsQuantityPrizesInfo'))}\n                  </div>\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && isPremiumGiveaway && (\n          <>\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDurationOfPremium')}\n              </h2>\n\n              {renderSubscriptionOptions()}\n            </div>\n\n            <div className={buildClassName(styles.subscription, styles.subscriptionFooter)}>\n              {renderPremiumFeaturesLink()}\n            </div>\n          </>\n        )}\n\n        {selectedGiveawayOption && (\n          <div className={styles.footer}>\n            <Button\n              className={styles.button}\n              onClick={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n            >\n              {lang('BoostingStartGiveaway')}\n            </Button>\n          </div>\n        )}\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n      <CountryPickerModal\n        isOpen={isCountryPickerModalOpen}\n        onClose={closeCountryPickerModal}\n        countryList={countryList}\n        onSubmit={handleSetCountriesListChange}\n        selectionLimit={countrySelectionLimit}\n      />\n      <GiveawayUserPickerModal\n        isOpen={isUserPickerModalOpen}\n        onClose={closeUserPickerModal}\n        onSelectedIdsConfirmed={handleSelectedUserIdsChange}\n        initialSelectedIds={selectedUserIds}\n        selectionLimit={userSelectionLimit}\n        giveawayChatId={chatId}\n      />\n      <GiveawayChannelPickerModal\n        isOpen={isChannelPickerModalOpen}\n        onClose={closeChannelPickerModal}\n        initialSelectedIds={selectedChannelIds}\n        onSelectedIdsConfirmed={handleSelectedChannelIdsChange}\n        selectionLimit={GIVEAWAY_MAX_ADDITIONAL_CHANNELS}\n        giveawayChatId={chatId}\n      />\n      <ConfirmDialog\n        title={lang('BoostingStartGiveawayConfirmTitle')}\n        text={lang('BoostingStartGiveawayConfirmText')}\n        confirmLabel={lang('Start')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmLaunchPrepaidGiveaway}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    giveawayModal,\n  } = selectTabState(global);\n  const chatId = giveawayModal?.chatId;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const isChannel = chat && isChatChannel(chat);\n\n  return {\n    chatId,\n    gifts: giveawayModal?.gifts,\n    selectedMemberList: giveawayModal?.selectedMemberIds,\n    selectedChannelList: giveawayModal?.selectedChannelIds,\n    giveawayBoostPerPremiumLimit: global.appConfig.giveawayBoostsPerPremium,\n    isStarsGiftEnabled: global.appConfig.isStarsGiftEnabled,\n    userSelectionLimit: global.appConfig.giveawayAddPeersMax,\n    countrySelectionLimit: global.appConfig.giveawayCountriesMax,\n    countryList: global.countryList.general,\n    prepaidGiveaway: giveawayModal?.prepaidGiveaway,\n    isChannel,\n    starsGiftOptions: giveawayModal?.starOptions,\n  };\n})(GiveawayModal));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiLimitTypeWithModal } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IconName } from '../../../../types/icons';\n\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogs',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, IconName> = {\n  dialogFiltersChats: 'chat-badge',\n  uploadMaxFileparts: 'file-badge',\n  dialogFilters: 'folder-badge',\n  dialogFolderPinned: 'pin-badge',\n  channelsPublic: 'link-badge',\n  channels: 'chats-badge',\n  chatlistInvites: 'link-badge',\n  chatlistJoined: 'folder-badge',\n  savedDialogsPinned: 'pin-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: OldLangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: OldLangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useOldLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>\n            {valueFormatter?.(\n              lang, isPremium ? premiumValue : defaultValue,\n            ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n          && (\n            <Button\n              className=\"confirm-dialog-button\"\n              isText\n              onClick={handleClick}\n              color=\"primary\"\n            >\n              {lang('IncreaseLimit')}\n              <Icon name=\"double-badge\" className={styles.x2} />\n            </Button>\n          )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): Complete<StateProps> => {\n    const { limits } = global.appConfig;\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QAs_iFxO\",\"limit-compare\":\"k0O6Rnjh\",\"limitCompare\":\"k0O6Rnjh\",\"limit-badge\":\"Q5d_7bB4\",\"limitBadge\":\"Q5d_7bB4\",\"limit-value\":\"ArEy3hhB\",\"limitValue\":\"ArEy3hhB\",\"limit-icon\":\"rbnU7JVX\",\"limitIcon\":\"rbnU7JVX\",\"dialog-buttons\":\"RVM_RSap\",\"dialogButtons\":\"RVM_RSap\",\"x2\":\"esB1OhAF\",\"button-icon\":\"ydpxmYS3\",\"buttonIcon\":\"ydpxmYS3\"};","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: ElementRef<HTMLDivElement>,\n  headerRef: ElementRef<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll({\n        container: containerRef.current!,\n        element: stickerSetEl,\n        position: 'start',\n        margin: FOCUS_MARGIN,\n        maxDistance: isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      });\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"m6XpTzQX\",\"video\":\"OZHqKbDL\",\"image\":\"enA6c8gc\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  forcePlayback,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    hasThumbnail, hasVideoThumb, hasAnimatedThumb, hasStaticThumb, thumbCustomEmojiId,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, undefined, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToSticker = !hasThumbnail\n    || (hasVideoThumb && !IS_WEBM_SUPPORTED && !hasAnimatedThumb && !hasStaticThumb);\n  const firstStickerHash = shouldFallbackToSticker && stickerSet.stickers?.[0]\n    && getStickerMediaHash(stickerSet.stickers[0], 'preview');\n  const firstStickerMediaData = useMedia(firstStickerHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !firstStickerHash) || hasAnimatedThumb) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = thumbCustomEmojiId || mediaData || firstStickerMediaData;\n  const transitionClassNames = useMediaTransitionDeprecated(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: stickerSet,\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'sticker-set-cover')}\n      style={`--_size: ${size}px`}\n    >\n      {isReady ? (\n        thumbCustomEmojiId ? (\n          <CustomEmoji\n            documentId={thumbCustomEmojiId}\n            size={size}\n            observeIntersectionForPlaying={observeIntersection}\n            noPlay={noPlay}\n          />\n        ) : hasAnimatedThumb ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n            forceAlways={forcePlayback}\n          />\n        ) : (hasVideoThumb && !shouldFallbackToSticker) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            isPriority={forcePlayback}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || firstStickerMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n            draggable={false}\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { MouseEvent as ReactMouseEvent, ReactNode } from 'react';\nimport type {\n  ElementRef } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiBotInlineMediaResult, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport Icon from './icons/Icon';\nimport StickerView from './StickerView';\n\nimport './StickerButton.scss';\n\ntype OwnProps<T> = {\n  sticker: ApiSticker;\n  size: number;\n  noPlay?: boolean;\n  title?: string;\n  className?: string;\n  noContextMenu?: boolean;\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  canViewSet?: boolean;\n  isSelected?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldIgnorePremium?: boolean;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  withTranslucentThumb?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForShowing?: ObserveFn;\n  noShowPremium?: boolean;\n  onClick?: (arg: OwnProps<T>['clickArg'], isSilent?: boolean, shouldSchedule?: boolean) => void;\n  clickArg: T;\n  onFaveClick?: (sticker: ApiSticker) => void;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n  onRemoveRecentClick?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n  isEffectEmoji?: boolean;\n};\n\nconst contentForStatusMenuContext = [\n  { title: 'SetTimeoutFor.Hours', value: 1, arg: 3600 },\n  { title: 'SetTimeoutFor.Hours', value: 2, arg: 7200 },\n  { title: 'SetTimeoutFor.Hours', value: 8, arg: 28800 },\n  { title: 'SetTimeoutFor.Days', value: 1, arg: 86400 },\n  { title: 'SetTimeoutFor.Days', value: 2, arg: 172800 },\n];\n\nconst StickerButton = <T extends number | ApiSticker | ApiBotInlineMediaResult | undefined = undefined>({\n  sticker,\n  size,\n  noPlay,\n  title,\n  className,\n  noContextMenu,\n  isSavedMessages,\n  isStatusPicker,\n  canViewSet,\n  observeIntersection,\n  observeIntersectionForShowing,\n  isSelected,\n  isCurrentUserPremium,\n  shouldIgnorePremium,\n  noShowPremium,\n  sharedCanvasRef,\n  withTranslucentThumb,\n  forcePlayback,\n  onClick,\n  clickArg,\n  onFaveClick,\n  onUnfaveClick,\n  onRemoveRecentClick,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  isEffectEmoji,\n}: OwnProps<T>) => {\n  const { openStickerSet, openPremiumModal, setEmojiStatus } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n  const hasCustomColor = sticker.shouldUseTextColor;\n  const customColor = useDynamicColorListener(ref, undefined, !hasCustomColor);\n\n  const {\n    id, stickerSetInfo,\n  } = sticker;\n\n  const isPremium = (!sticker.isFree && isEffectEmoji) || sticker.hasEffect;\n  const isCustomEmoji = sticker.isCustomEmoji || isEffectEmoji;\n  const isLocked = !isCurrentUserPremium && isPremium && !shouldIgnorePremium;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const shouldLoad = isIntersecting;\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const isIntesectingForShowing = useIsIntersecting(ref, observeIntersectionForShowing);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const shouldRenderContextMenu = Boolean(!noContextMenu && contextMenuAnchor);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => {\n    return isStatusPicker ? menuRef.current : ref.current!.querySelector('.sticker-context-menu .bubble');\n  });\n  const getLayout = useLastCallback(() => ({ withPortal: isStatusPicker, shouldAvoidNegativePosition: true }));\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenuOpen?.();\n    } else {\n      onContextMenuClose?.();\n    }\n  }, [isContextMenuOpen, onContextMenuClose, onContextMenuOpen]);\n\n  useEffect(() => {\n    if (!isIntersecting) handleContextMenuClose();\n  }, [handleContextMenuClose, isIntersecting]);\n\n  const handleClick = () => {\n    if (isContextMenuOpen) return;\n    if (isLocked) {\n      if (isEffectEmoji) {\n        openPremiumModal({ initialSection: 'effects' });\n      } else {\n        openPremiumModal({ initialSection: 'premium_stickers' });\n      }\n      return;\n    }\n    onClick?.(clickArg);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleRemoveClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextRemoveRecent = useLastCallback(() => {\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextUnfave = useLastCallback(() => {\n    onUnfaveClick!(sticker);\n  });\n\n  const handleContextFave = useLastCallback(() => {\n    onFaveClick!(sticker);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick?.(clickArg, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick?.(clickArg, undefined, true);\n  });\n\n  const handleOpenSet = useLastCallback(() => {\n    openStickerSet({ stickerSetInfo });\n  });\n\n  const handleEmojiStatusExpiresClick = useLastCallback((e: React.SyntheticEvent, duration = 0) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    handleContextMenuClose();\n    onContextMenuClick?.();\n    setEmojiStatus({\n      emojiStatus: { type: 'regular', documentId: sticker.id, until: getServerTime() + duration },\n    });\n  });\n\n  const shouldShowCloseButton = !IS_TOUCH_ENV && onRemoveRecentClick;\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    onClick && 'interactive',\n    isSelected && 'selected',\n    isCustomEmoji && 'custom-emoji',\n    isEffectEmoji && 'effect-emoji',\n    className,\n  );\n\n  const contextMenuItems = useMemo(() => {\n    if (!shouldRenderContextMenu || noContextMenu || (isCustomEmoji && !isStatusPicker)) return [];\n\n    const items: ReactNode[] = [];\n\n    if (isCustomEmoji) {\n      contentForStatusMenuContext.forEach((item) => {\n        items.push(\n          <MenuItem onClick={handleEmojiStatusExpiresClick} clickArg={item.arg}>\n            {lang(item.title, item.value, 'i')}\n          </MenuItem>,\n        );\n      });\n\n      return items;\n    }\n\n    if (onUnfaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextUnfave}>\n          {lang('Stickers.RemoveFromFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (onFaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextFave}>\n          {lang('Stickers.AddToFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (!isLocked && onClick) {\n      if (!isSavedMessages) {\n        items.push(<MenuItem onClick={handleSendQuiet} icon=\"muted\">{lang('SendWithoutSound')}</MenuItem>);\n      }\n      items.push(\n        <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>,\n      );\n    }\n\n    if (canViewSet) {\n      items.push(\n        <MenuItem onClick={handleOpenSet} icon=\"stickers\">\n          {lang('ViewPackPreview')}\n        </MenuItem>,\n      );\n    }\n    if (onRemoveRecentClick) {\n      items.push(\n        <MenuItem icon=\"delete\" onClick={handleContextRemoveRecent}>\n          {lang('DeleteFromRecent')}\n        </MenuItem>,\n      );\n    }\n    return items;\n  }, [\n    shouldRenderContextMenu, noContextMenu, isCustomEmoji, isStatusPicker, onUnfaveClick, onFaveClick, isLocked,\n    onClick, canViewSet, onRemoveRecentClick, handleEmojiStatusExpiresClick, lang, handleContextUnfave,\n    handleContextFave, isSavedMessages, handleSendScheduled, handleSendQuiet, handleOpenSet, handleContextRemoveRecent,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker?.emoji)}\n      data-sticker-id={id}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isIntesectingForShowing && (\n        <StickerView\n          containerRef={ref}\n          sticker={sticker}\n          isSmall\n          size={size}\n          shouldLoop\n          shouldPreloadPreview\n          noLoad={!shouldLoad}\n          noPlay={!shouldPlay}\n          noVideoOnMobile\n          withSharedAnimation\n          sharedCanvasRef={sharedCanvasRef}\n          withTranslucentThumb={withTranslucentThumb}\n          customColor={customColor}\n          forceAlways={forcePlayback}\n        />\n      )}\n      {!noShowPremium && isLocked && (\n        <div\n          className=\"sticker-locked\"\n        >\n          <Icon name=\"lock-badge\" />\n        </div>\n      )}\n      {!noShowPremium && isPremium && !isLocked && (\n        <div className=\"sticker-premium\">\n          <Icon name=\"star\" />\n        </div>\n      )}\n      {shouldShowCloseButton && (\n        <Button\n          className=\"sticker-remove-button\"\n          color=\"dark\"\n          round\n          noFastClick\n          onClick={handleRemoveClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      {Boolean(contextMenuItems.length) && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className=\"sticker-context-menu\"\n          autoClose\n          withPortal={isStatusPicker}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {contextMenuItems}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AVrrYEbM\",\"selected\":\"QkdO_lz1\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReactionWithPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../../config';\nimport { getDocumentMediaHash, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../AnimatedIconWithPreview';\nimport CustomEmoji from '../CustomEmoji';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionWithPaid;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  sharedCanvasHqRef?: ElementRef<HTMLCanvasElement>;\n  forcePlayback?: boolean;\n  onClick: (reaction: ApiReactionWithPaid) => void;\n  onContextMenu?: (reaction: ApiReactionWithPaid) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  forcePlayback,\n  onClick,\n  onContextMenu,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const isCustom = reaction.type === 'custom';\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation, 'full') : undefined,\n    !animationId,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenu?.(reaction);\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, onContextMenu, handleContextMenuHide, isContextMenuOpen, reaction]);\n\n  const tgsUrl = reaction.type === 'paid' ? LOCAL_TGS_URLS.StarReaction : mediaData;\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n          forceAlways={forcePlayback}\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={tgsUrl}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n          forceAlways={forcePlayback}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiEmojiStatusType, ApiReactionWithPaid, ApiSticker,\n} from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport { getReactionKey } from '../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport GiftEffectWrapper from './gift/GiftEffectWrapper';\nimport Icon from './icons/Icon';\nimport ReactionEmoji from './reactions/ReactionEmoji';\nimport StickerButton from './StickerButton';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isChatEmojiSet?: boolean;\n  isChatStickerSet?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  collectibleStatuses?: ApiEmojiStatusType[];\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps & StateProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isChatEmojiSet,\n  isChatStickerSet,\n  isTranslucent,\n  noContextMenus,\n  forcePlayback,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onReactionContext,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  collectibleStatuses,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransitionDeprecated(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isStatusCollectible = stickerSet.id === COLLECTIBLE_STATUS_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isCurrentUserPremium && isPremiumSet && !isChatEmojiSet;\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID\n    && stickerSet.id !== POPULAR_SYMBOL_SET_ID && stickerSet.id !== EFFECT_EMOJIS_SET_ID\n    && stickerSet.id !== EFFECT_STICKERS_SET_ID && !isChatEmojiSet && !isChatStickerSet;\n\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = (withDefaultTopicIcon || withDefaultStatusIcon) ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const collectibleEmojiIdsSet = useMemo(() => (\n    collectibleStatuses ? new Set(collectibleStatuses.map(({ documentId }) => documentId)) : undefined\n  ), [collectibleStatuses]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && !isStatusCollectible\n    && isEmoji && !isPopular && !isChatEmojiSet\n    && (!isInstalled || (!isCurrentUserPremium && !isSavedMessages));\n  const addSetButtonText = useMemo(() => {\n    if (isLocked) {\n      if (isInstalled) return lang('lng_emoji_premium_restore');\n      return lang('Unlock');\n    }\n\n    return lang('Add');\n  }, [isLocked, lang, isInstalled]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-title', withAddSetButton && 'symbol-set-title-external')}>\n            {isLocked && <Icon name=\"lock-badge\" className=\"symbol-set-locked-icon\" />}\n            <span className=\"symbol-set-name\">{stickerSet.title}</span>\n            {(isChatEmojiSet || isChatStickerSet) && (\n              <span className=\"symbol-set-chat\">{lang(isChatEmojiSet ? 'GroupEmoji' : 'GroupStickers')}</span>\n            )}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">\n                {lang(isEmoji ? 'EmojiCount' : 'Stickers', stickerSet.stickers.length, 'i')}\n              </span>\n            )}\n          </p>\n          {isRecent && (\n            <Icon className=\"symbol-set-remove\" name=\"close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {addSetButtonText}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'symbol-set-container shared-canvas-container',\n          transitionClassNames,\n          stickerSet.id === EFFECT_EMOJIS_SET_ID && 'effect-emojis',\n        )}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" draggable={false} />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <Icon name=\"star\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              onContextMenu={onReactionContext}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n              forcePlayback={forcePlayback}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            const withSparkles = stickerSet.id === COLLECTIBLE_STATUS_SET_ID\n              || collectibleEmojiIdsSet?.has(sticker.id);\n\n            const component = (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                shouldIgnorePremium={isChatEmojiSet}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n                forcePlayback={forcePlayback}\n                isEffectEmoji={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n                noShowPremium={isCurrentUserPremium\n                  && (stickerSet.id === EFFECT_STICKERS_SET_ID || stickerSet.id === EFFECT_EMOJIS_SET_ID)}\n              />\n            );\n\n            if (withSparkles) {\n              return (\n                <GiftEffectWrapper className=\"gift-effect-wrapper\" withSparkles>\n                  {component}\n                </GiftEffectWrapper>\n              );\n            }\n\n            return component;\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +\n            {totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return { collectibleStatuses };\n  },\n)(StickerSet));\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lq8BD6Hc\",\"main\":\"p7c8y0LH\",\"hasHeader\":\"zTGriBHY\",\"main_customEmoji\":\"U0BL1VvK\",\"mainCustomEmoji\":\"U0BL1VvK\",\"header\":\"Qn3lBUNs\",\"headerWithBorder\":\"HMspKpNp\",\"stickerCover\":\"YKO0Obwy\",\"activated\":\"y02WwQk6\",\"pickerDisabled\":\"BZfaP1GD\"};","import type { FC } from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '@teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiEmojiStatusType,\n  ApiReaction, ApiReactionWithPaid, ApiSticker, ApiStickerSet,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChatFullInfo,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { pickTruthy, unique, uniqueByField } from '../../util/iteratees';\nimport { REM } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useScrolledState from '../../hooks/useScrolledState';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport Transition from '../ui/Transition.tsx';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  collectibleStatuses?: ApiEmojiStatusType[];\n  chatEmojiSetId?: string;\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isWithPaidReaction?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst RECENT_DEFAULT_STATUS_COUNT = 7;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  collectibleStatuses,\n  stickerSetsById,\n  chatEmojiSetId,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  defaultTagReactions,\n  isWithPaidReaction,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onReactionContext,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const collectibleStatusEmojis = useMemo(() => {\n    const collectibleStatusEmojiIds = collectibleStatuses?.map((status) => status.documentId);\n    return customEmojisById && collectibleStatusEmojiIds?.map((id) => customEmojisById[id]).filter(Boolean);\n  }, [customEmojisById, collectibleStatuses]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const canLoadAndPlay = usePrevDuringAnimation(loadAndPlay || undefined, SLIDE_TRANSITION_DURATION);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker && isSavedMessages) {\n      if (defaultTagReactions?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('PremiumPreviewTags'),\n          reactions: defaultTagReactions,\n          count: defaultTagReactions.length,\n          isEmoji: true,\n        });\n      }\n    }\n\n    if (isReactionPicker && !isSavedMessages) {\n      const topReactionsSlice: ApiReactionWithPaid[] = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (isWithPaidReaction) {\n        topReactionsSlice.unshift({ type: 'paid' });\n      }\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .filter(({ isInactive }) => !isInactive)\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = uniqueByField(defaultStatusIconsPack.stickers\n          .slice(0, RECENT_DEFAULT_STATUS_COUNT)\n          .concat(recentCustomEmojis || []), 'id');\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n          isEmoji: true,\n        });\n      }\n      if (collectibleStatusEmojis?.length) {\n        defaultSets.push({\n          id: COLLECTIBLE_STATUS_SET_ID,\n          accessHash: '',\n          count: collectibleStatusEmojis.length,\n          stickers: collectibleStatusEmojis,\n          title: lang('CollectibleStatusesCategory'),\n          isEmoji: true,\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: oldLang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const userSetIds = [...(addedCustomEmojiIds || [])];\n    if (chatEmojiSetId) {\n      userSetIds.unshift(chatEmojiSetId);\n    }\n\n    const setIdsToDisplay = unique(userSetIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, oldLang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId, isSavedMessages, defaultTagReactions, chatEmojiSetId,\n    isWithPaidReaction, collectibleStatusEmojis, lang,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <Icon name=\"recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !canLoadAndPlay}\n              forcePlayback\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !canLoadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n        forcePlayback\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n    pickerStyles.hasHeader,\n  );\n\n  const isLoading = !shouldRenderContent && !noPopulatedSets;\n\n  return (\n    <Transition className={fullClassName} name=\"fade\" activeKey={isLoading ? 0 : 1} shouldCleanup>\n      {!shouldRenderContent && !noPopulatedSets ? (\n        <Loading />\n      ) : !shouldRenderContent && noPopulatedSets ? (\n        <div className={pickerStyles.pickerDisabled}>{oldLang('NoStickers')}</div>\n      ) : (\n        <>\n          <div\n            ref={headerRef}\n            className={headerClassName}\n          >\n            <div className=\"shared-canvas-container\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n              {allSets.map(renderCover)}\n            </div>\n          </div>\n          <div\n            ref={containerRef}\n            onScroll={handleContentScroll}\n            className={listClassName}\n          >\n            {allSets.map((stickerSet, i) => {\n              const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n                || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n              const isChatEmojiSet = stickerSet.id === chatEmojiSetId;\n\n              return (\n                <StickerSet\n                  key={stickerSet.id}\n                  stickerSet={stickerSet}\n                  loadAndPlay={Boolean(canAnimate && canLoadAndPlay)}\n                  index={i}\n                  idPrefix={prefix}\n                  observeIntersection={observeIntersectionForSet}\n                  observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n                  observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n                  isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n                  isSavedMessages={isSavedMessages}\n                  isStatusPicker={isStatusPicker}\n                  isReactionPicker={isReactionPicker}\n                  shouldHideHeader={shouldHideHeader}\n                  withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n                  withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n                  isChatEmojiSet={isChatEmojiSet}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  selectedReactionIds={selectedReactionIds}\n                  availableReactions={availableReactions}\n                  isTranslucent={isTranslucent}\n                  onReactionSelect={onReactionSelect}\n                  onReactionContext={onReactionContext}\n                  onStickerSelect={handleEmojiSelect}\n                  onContextMenuOpen={onContextMenuOpen}\n                  onContextMenuClose={onContextMenuClose}\n                  onContextMenuClick={onContextMenuClick}\n                  forcePlayback\n                />\n              );\n            })}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): Complete<StateProps> => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      reactions: {\n        availableReactions,\n        recentReactions,\n        topReactions,\n        defaultTags,\n      },\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      customEmojisById,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      collectibleStatuses: isStatusPicker ? collectibleStatuses : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      chatEmojiSetId: chatFullInfo?.emojiSet?.id,\n      isWithPaidReaction: isReactionPicker && chatFullInfo?.isPaidReactionAvailable,\n      availableReactions: isReactionPicker ? availableReactions : undefined,\n      defaultTagReactions: isReactionPicker ? defaultTags : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qk9PEGRE\",\"activated\":\"WYeuJNQx\"};","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"hRzvfaRb\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: ElementRef<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"C9sWDINB\",\"topEmoji\":\"gdG3oY21\",\"description\":\"p7S4AH8A\",\"title\":\"KVpsce1g\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestedStatusModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedStatusModal'];\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n};\n\nconst CUSTOM_EMOJI_SIZE = 6 * REM;\n\nconst SuggestedStatusModal = ({ modal, currentUser, bot }: OwnProps & StateProps) => {\n  const { setEmojiStatus, closeSuggestedStatusModal, sendWebAppEvent } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !renderingModal) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: renderingModal.customEmojiId,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, renderingModal]);\n\n  const description = useMemo(() => {\n    if (!renderingModal || !bot) return undefined;\n\n    const botName = getUserFullName(bot);\n\n    if (renderingModal.duration) {\n      return lang('BotSuggestedStatusFor', {\n        bot: botName,\n        duration: formatShortDuration(lang, renderingModal.duration),\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    return lang('BotSuggestedStatus', { bot: botName }, { withNodes: true, withMarkdown: true });\n  }, [bot, lang, renderingModal]);\n\n  const handleClose = useLastCallback(() => {\n    const webAppKey = renderingModal?.webAppKey;\n\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n      });\n    }\n\n    closeSuggestedStatusModal();\n  });\n\n  const handleSetStatus = useLastCallback(() => {\n    if (!renderingModal) return;\n\n    const expires = renderingModal.duration ? getServerTime() + renderingModal.duration : undefined;\n\n    setEmojiStatus({\n      referrerWebAppKey: renderingModal.webAppKey,\n      emojiStatus: { type: 'regular', documentId: renderingModal.customEmojiId, until: expires },\n    });\n    closeSuggestedStatusModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {renderingModal && (\n        <CustomEmoji\n          className={styles.topEmoji}\n          documentId={renderingModal.customEmojiId}\n          size={CUSTOM_EMOJI_SIZE}\n          loopLimit={1}\n          forceAlways\n        />\n      )}\n      <div>\n        <h3 className={styles.title}>{lang('BotSuggestedStatusTitle')}</h3>\n        <p className={styles.description}>{description}</p>\n      </div>\n      {mockPeerWithStatus && (\n        <PeerChip\n          mockPeer={mockPeerWithStatus}\n          withEmojiStatus\n        />\n      )}\n      <Button onClick={handleSetStatus}>\n        {lang('GeneralConfirm')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const bot = modal?.botId ? selectUser(global, modal.botId) : undefined;\n\n    return {\n      currentUser,\n      bot,\n    };\n  },\n)(SuggestedStatusModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"pUyNTysT\",\"modal\":\"IK2mBqbm\",\"loading\":\"zjXCH3pT\",\"description\":\"j6xEoljc\",\"bold\":\"hAA6B1lc\",\"chip\":\"smWR78pO\",\"replaceModal\":\"GIFAjZPY\",\"replaceModalContent\":\"Jxyz9TaL\",\"avatarContainer\":\"OKp6HS1U\",\"arrow\":\"WSJdWV7L\",\"boostedWrapper\":\"NU9itcIm\",\"boostedMark\":\"upXvhNRY\"};","import { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiMyBoost } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getChatTitle, isChatAdmin, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\n\nimport styles from './BoostModal.module.scss';\n\ntype LoadedParams = {\n  boost?: ApiMyBoost;\n  leftText: string;\n  rightText?: string;\n  value: string;\n  progress: number;\n  descriptionText: string;\n  isBoosted?: boolean;\n  canBoostMore?: boolean;\n};\n\ntype BoostInfo = ({\n  isStatusLoaded: false;\n  title: string;\n} & Undefined<LoadedParams>) | ({\n  isStatusLoaded: true;\n  title: string;\n} & LoadedParams);\n\nexport type OwnProps = {\n  modal: TabState['boostModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  prevBoostedChat?: ApiChat;\n  isCurrentUserPremium?: boolean;\n};\n\nconst BoostModal = ({\n  modal,\n  chat,\n  chatFullInfo,\n  prevBoostedChat,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    applyBoost,\n    closeBoostModal,\n    requestConfetti,\n    openPremiumModal,\n    loadFullChat,\n  } = getActions();\n\n  const [isReplaceModalOpen, openReplaceModal, closeReplaceModal] = useFlag();\n  const [isWaitDialogOpen, openWaitDialog, closeWaitDialog] = useFlag();\n  const [isPremiumDialogOpen, openPremiumDialog, closePremiumDialog] = useFlag();\n\n  const isChannel = chat && isChatChannel(chat);\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (chat && !chatFullInfo) {\n      loadFullChat({ chatId: chat.id });\n    }\n  }, [chat, chatFullInfo]);\n\n  const chatTitle = useMemo(() => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, chat);\n  }, [chat, oldLang]);\n\n  const boostedChatTitle = useMemo(() => {\n    if (!prevBoostedChat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, prevBoostedChat);\n  }, [prevBoostedChat, oldLang]);\n\n  const {\n    isStatusLoaded,\n    isBoosted,\n    boost,\n    title,\n    leftText,\n    rightText,\n    value,\n    progress,\n    descriptionText,\n    canBoostMore,\n  }: BoostInfo = useMemo(() => {\n    if (!modal?.boostStatus || !chat) {\n      return {\n        isStatusLoaded: false,\n        title: oldLang('Loading'),\n      };\n    }\n\n    const {\n      hasMyBoost,\n    } = modal.boostStatus;\n\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, chat.id);\n    const areBoostsInDifferentChannels = modal?.myBoosts && !areAllBoostsInChannel(modal.myBoosts, chat.id);\n\n    const {\n      boosts,\n      currentLevel,\n      hasNextLevel,\n      levelProgress,\n      remainingBoosts,\n      isMaxLevel,\n    } = getBoostProgressInfo(modal.boostStatus, true);\n\n    const hasBoost = hasMyBoost;\n\n    const left = oldLang('BoostsLevel', currentLevel);\n    const right = hasNextLevel ? oldLang('BoostsLevel', currentLevel + 1) : undefined;\n\n    const moreBoosts = oldLang('ChannelBoost.MoreBoosts', remainingBoosts);\n\n    const modalTitle = isChannel ? oldLang('BoostChannel') : oldLang('BoostGroup');\n\n    const boostsLeftToUnrestrict = (chatFullInfo?.boostsToUnrestrict || 0) - (chatFullInfo?.boostsApplied || 0);\n\n    let description: string | undefined;\n    if (isMaxLevel) {\n      description = oldLang('BoostsMaxLevelReached');\n    } else if (boostsLeftToUnrestrict > 0 && !isChatAdmin(chat)) {\n      const boostTimes = oldLang('GroupBoost.BoostToUnrestrict.Times', boostsLeftToUnrestrict);\n      description = oldLang('GroupBoost.BoostToUnrestrict', [boostTimes, chatTitle]);\n    } else {\n      description = oldLang('ChannelBoost.MoreBoostsNeeded.Text', [chatTitle, moreBoosts]);\n    }\n\n    return {\n      isStatusLoaded: true,\n      title: modalTitle,\n      leftText: left,\n      rightText: right,\n      value: boosts.toString(),\n      progress: levelProgress,\n      remainingBoosts,\n      descriptionText: description,\n      boost: firstBoost,\n      isBoosted: hasBoost,\n      canBoostMore: areBoostsInDifferentChannels && !isMaxLevel,\n    };\n  }, [chat, chatTitle, modal, oldLang, chatFullInfo, isChannel]);\n\n  const isBoostDisabled = !modal?.myBoosts?.length && isCurrentUserPremium;\n  const isReplacingBoost = boost?.chatId && boost.chatId !== modal?.chatId;\n\n  const handleApplyBoost = useLastCallback(() => {\n    closeReplaceModal();\n    applyBoost({ chatId: chat!.id, slots: [boost!.slot] });\n    requestConfetti({});\n  });\n\n  const handleProceedPremium = useLastCallback(() => {\n    openPremiumModal();\n    closePremiumDialog();\n    closeBoostModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!boost) {\n      if (!isCurrentUserPremium) {\n        openPremiumDialog();\n        return;\n      }\n\n      closeBoostModal();\n      return;\n    }\n\n    if (!canBoostMore) {\n      closeBoostModal();\n      return;\n    }\n\n    if (boost.cooldownUntil) {\n      openWaitDialog();\n      return;\n    }\n\n    if (isReplacingBoost) {\n      openReplaceModal();\n      return;\n    }\n\n    handleApplyBoost();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeBoostModal();\n  });\n\n  function renderContent() {\n    if (!isStatusLoaded) {\n      return <Loading className={styles.loading} />;\n    }\n\n    return (\n      <>\n        <PremiumProgress\n          leftText={leftText}\n          rightText={rightText}\n          progress={progress}\n          floatingBadgeText={value}\n          floatingBadgeIcon=\"boost\"\n        />\n        {isBoosted && (\n          <div className={buildClassName(styles.description, styles.bold)}>\n            {oldLang('ChannelBoost.YouBoostedChannelText', chatTitle)}\n          </div>\n        )}\n        <div className={styles.description}>\n          {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n        </div>\n        <div className=\"dialog-buttons\">\n          <Button isText className=\"confirm-dialog-button\" disabled={isBoostDisabled} onClick={handleButtonClick}>\n            {canBoostMore ? (\n              <>\n                <Icon name=\"boost\" />\n                {oldLang(isChannel ? 'ChannelBoost.BoostChannel' : 'GroupBoost.BoostGroup')}\n              </>\n            ) : oldLang('OK')}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={handleCloseClick}>\n            {oldLang('Cancel')}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      className={styles.modal}\n      contentClassName={styles.content}\n      onClose={closeBoostModal}\n    >\n      {renderContent()}\n      {isReplacingBoost && boostedChatTitle && (\n        <Modal\n          isOpen={isReplaceModalOpen}\n          className={styles.replaceModal}\n          contentClassName={styles.replaceModalContent}\n          onClose={closeReplaceModal}\n        >\n          <div className={styles.avatarContainer}>\n            <div className={styles.boostedWrapper}>\n              <Avatar peer={prevBoostedChat} size=\"large\" />\n              <Icon name=\"boostcircle\" className={styles.boostedMark} />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar peer={chat} size=\"large\" />\n          </div>\n          <div>\n            {renderText(\n              oldLang('ChannelBoost.ReplaceBoost', [boostedChatTitle, chatTitle]), ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          <div className=\"dialog-buttons\">\n            <Button isText className=\"confirm-dialog-button\" onClick={handleApplyBoost}>\n              {oldLang('Replace')}\n            </Button>\n            <Button isText className=\"confirm-dialog-button\" onClick={closeReplaceModal}>\n              {oldLang('Cancel')}\n            </Button>\n          </div>\n        </Modal>\n      )}\n      {Boolean(boost?.cooldownUntil) && (\n        <ConfirmDialog\n          isOpen={isWaitDialogOpen}\n          isOnlyConfirm\n          confirmLabel={oldLang('OK')}\n          title={oldLang('ChannelBoost.Error.BoostTooOftenTitle')}\n          onClose={closeWaitDialog}\n          confirmHandler={closeWaitDialog}\n        >\n          {renderText(\n            oldLang(\n              'ChannelBoost.Error.BoostTooOftenText',\n              formatShortDuration(lang, boost.cooldownUntil - getServerTime()),\n            ),\n            ['simple_markdown', 'emoji'],\n          )}\n        </ConfirmDialog>\n      )}\n      {!isCurrentUserPremium && (\n        <ConfirmDialog\n          isOpen={isPremiumDialogOpen}\n          confirmLabel={oldLang('Common.Yes')}\n          title={oldLang('PremiumNeeded')}\n          onClose={closePremiumDialog}\n          confirmHandler={handleProceedPremium}\n        >\n          {renderText(oldLang('PremiumNeededForBoosting'), ['simple_markdown', 'emoji'])}\n        </ConfirmDialog>\n      )}\n    </Modal>\n  );\n};\n\nfunction getFirstAvailableBoost(myBoosts: ApiMyBoost[], chatId?: string) {\n  return myBoosts.find((boost) => !boost.chatId)\n    || myBoosts.filter((b) => chatId && b.chatId !== chatId)\n      .sort((a, b) => a.date - b.date)[0];\n}\n\nfunction areAllBoostsInChannel(myBoosts: ApiMyBoost[], chatId: string) {\n  return myBoosts.every((boost) => boost.chatId === chatId);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const chat = modal && selectChat(global, modal?.chatId);\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, modal.chatId);\n    const boostedChat = firstBoost?.chatId ? selectChat(global, firstBoost?.chatId) : undefined;\n\n    return {\n      chat,\n      chatFullInfo,\n      prevBoostedChat: boostedChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(BoostModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"clickable\":\"IzcASdzD\",\"centered\":\"xVLGjLub\",\"logo\":\"Mtx4SWww\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { selectChatMessage, selectSender } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport TableInfoModal, { type TableData } from '../common/TableInfoModal';\n\nimport styles from './GiftCodeModal.module.scss';\n\nimport PremiumLogo from '../../../assets/premium/PremiumStar.svg';\n\nexport type OwnProps = {\n  modal: TabState['giftCodeModal'];\n};\n\nexport type StateProps = {\n  currentUserId?: string;\n  messageSender?: ApiPeer;\n};\n\nconst GIFTCODE_PATH = 'giftcode';\n\nconst GiftCodeModal = ({\n  currentUserId,\n  modal,\n  messageSender,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, applyGiftCode, focusMessage,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const canUse = (!modal?.info.toId || modal?.info.toId === currentUserId) && !modal?.info.usedAt;\n\n  const handleOpenGiveaway = useLastCallback(() => {\n    if (!modal || !modal.info.giveawayMessageId) return;\n    focusMessage({\n      chatId: modal.info.fromId!,\n      messageId: modal.info.giveawayMessageId,\n    });\n    closeGiftCodeModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (canUse) {\n      applyGiftCode({ slug: modal!.slug });\n      return;\n    }\n    closeGiftCodeModal();\n  });\n\n  const modalData = useMemo(() => {\n    if (!modal) return undefined;\n    const { slug, info } = modal;\n\n    const fromId = info.fromId || messageSender?.id;\n\n    const header = (\n      <>\n        <img src={PremiumLogo} alt=\"\" className={styles.logo} />\n        <p className={styles.centered}>{renderText(lang('lng_gift_link_about'), ['simple_markdown'])}</p>\n        <LinkField title=\"BoostingGiftLink\" link={`${TME_LINK_PREFIX}/${GIFTCODE_PATH}/${slug}`} />\n      </>\n    );\n\n    const tableData: TableData = [\n      [lang('BoostingFrom'), fromId ? { chatId: fromId } : lang('BoostingNoRecipient')],\n      [lang('BoostingTo'), info.toId ? { chatId: info.toId } : lang('BoostingNoRecipient')],\n      [lang('BoostingGift'), lang('BoostingTelegramPremiumFor', lang('Months', info.months, 'i'))],\n    ];\n    if (info.isFromGiveaway) {\n      tableData.push([\n        lang('BoostingReason'),\n        (\n          <span\n            className={buildClassName(info.giveawayMessageId && styles.clickable)}\n            onClick={handleOpenGiveaway}\n          >\n            {info.isFromGiveaway && !info.toId\n              ? lang('BoostingIncompleteGiveaway')\n              : lang('BoostingGiveaway')}\n          </span>\n        ),\n      ]);\n    }\n    tableData.push([\n      lang('BoostingDate'),\n      formatDateTimeToString(info.date * 1000, lang.code, true),\n    ]);\n\n    const footer = (\n      <span className={styles.centered}>\n        {renderText(\n          info.usedAt ? lang('BoostingUsedLinkDate', formatDateTimeToString(info.usedAt * 1000, lang.code, true))\n            : lang('BoostingSendLinkToAnyone'),\n          ['simple_markdown'],\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [lang, messageSender?.id, modal]);\n\n  if (!modalData) return undefined;\n\n  return (\n    <TableInfoModal\n      isOpen={isOpen}\n      title={lang('lng_gift_link_title')}\n      tableData={modalData.tableData}\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={canUse ? lang('BoostingUseLink') : lang('Close')}\n      onButtonClick={handleButtonClick}\n      onClose={closeGiftCodeModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { message } = modal || {};\n    const chatMessage = message && selectChatMessage(global, message.chatId, message.messageId);\n    const sender = chatMessage && selectSender(global, chatMessage);\n\n    return {\n      currentUserId: global.currentUserId,\n      messageSender: sender,\n    };\n  },\n)(GiftCodeModal));\n","export function getClosestEntry(arr: number[], value: number): number {\n  return arr.reduce((prev, curr) => {\n    return Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev;\n  });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"X6K5oA8U\"};","import { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup.tsx';\n\nimport styles from './DeleteAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['deleteAccountModal'];\n};\n\nexport type StateProps = {\n  selfDestructAccountDays?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst DeleteAccountModal = ({\n  modal,\n  selfDestructAccountDays,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, closeDeleteAccountModal, setAccountTTL,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const [selectedOption, setSelectedOption] = useState<string>();\n\n  const optionToDays = useLastCallback((value: string): number => {\n    return Number(value) * DAYS_PER_MONTH;\n  });\n\n  const initialSelectedOption = useMemo(() => {\n    if (!selfDestructAccountDays) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, selfDestructAccountDays / DAYS_PER_MONTH).toString();\n  }, [selfDestructAccountDays]);\n\n  useEffect(() => {\n    if (initialSelectedOption) {\n      setSelectedOption(initialSelectedOption);\n    }\n  }, [initialSelectedOption]);\n\n  const options: { value: string; label: string }[] = useMemo(() => {\n    return ACCOUNT_TTL_OPTIONS.map((months) => ({\n      value: String(months),\n      label: lang('Months', { count: months }, { pluralValue: 1 }),\n    }));\n  }, [lang]);\n\n  const handleChange = useLastCallback((value: string) => {\n    setSelectedOption(value);\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!selectedOption) return;\n    setAccountTTL({ days: optionToDays(selectedOption) });\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteAccountModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('SelfDestructTitle')}\n      onClose={closeGiftCodeModal}\n      className={styles.root}\n    >\n      <p>{lang('SelfDestructSessionsDescription')}</p>\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedOption}\n        onChange={handleChange}\n        withIcon\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n        >\n          {lang('Save')}\n        </Button>\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { selfDestructAccountDays } = modal || {};\n\n    return {\n      selfDestructAccountDays,\n    };\n  },\n)(DeleteAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OviJR58x\",\"content\":\"BlpqzGYt\",\"header\":\"b9RUzfpF\",\"iconWrapper\":\"l1X5kBUM\",\"icon\":\"qOoRnv_Y\",\"mainText\":\"s2SOQSml\",\"description\":\"wiKBjcl2\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { VERIFY_AGE_MIN_DEFAULT } from '../../../config';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './AgeVerificationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isAgeVerificationModalOpen'];\n};\n\ntype StateProps = {\n  verifyAgeBotUsername?: string;\n  verifyAgeMin: number;\n};\n\nconst AgeVerificationModal: FC<OwnProps & StateProps> = ({\n  modal,\n  verifyAgeBotUsername,\n  verifyAgeMin,\n}) => {\n  const { closeAgeVerificationModal, openChatByUsername } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const handleVerifyAge = useLastCallback(() => {\n    if (verifyAgeBotUsername) {\n      openChatByUsername({\n        shouldStartMainApp: true,\n        username: verifyAgeBotUsername,\n      });\n    }\n    closeAgeVerificationModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeAgeVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className={styles.root}\n    >\n      <div className={styles.content}>\n        <div className={styles.header}>\n          <div className={styles.iconWrapper}>\n            <Icon name=\"user\" className={styles.icon} />\n          </div>\n        </div>\n        <h2 className={styles.title}>\n          {lang('TitleAgeVerificationModal')}\n        </h2>\n        <p className={styles.mainText}>\n          {lang('TextAgeVerificationModal', { count: verifyAgeMin }, {\n            withMarkdown: true,\n            withNodes: true,\n            pluralValue: verifyAgeMin,\n          })}\n        </p>\n        <p className={styles.description}>\n          {lang('DescriptionAgeVerificationModal')}\n        </p>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          onClick={handleVerifyAge}\n        >\n          {lang('ButtonAgeVerification')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const appConfig = global.appConfig;\n  const verifyAgeBotUsername = appConfig.verifyAgeBotUsername;\n  const verifyAgeMin = appConfig.verifyAgeMin || VERIFY_AGE_MIN_DEFAULT;\n\n  return {\n    verifyAgeBotUsername,\n    verifyAgeMin,\n  };\n})(AgeVerificationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"dl10exNi\",\"picker-wrapper\":\"gxWY5c6x\",\"pickerWrapper\":\"gxWY5c6x\",\"picker-header\":\"h8N7eyob\",\"pickerHeader\":\"h8N7eyob\",\"picker-header-info\":\"Rth2Qu07\",\"pickerHeaderInfo\":\"Rth2Qu07\",\"selection-toggle\":\"B6eAugx8\",\"selectionToggle\":\"B6eAugx8\",\"foldersWrapper\":\"mwcvgD2S\",\"folders\":\"LKavx8ww\",\"folder\":\"qglLx5Dn\",\"button-text\":\"bgaRuEMs\",\"buttonText\":\"bgaRuEMs\",\"button-badge\":\"rTe14Z22\",\"buttonBadge\":\"rTe14Z22\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const isNew = invite.alreadyPeerIds.length === 0;\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = isNew ? lang('FolderLinkSubtitleNew')\n    : newChatsCount ? lang('FolderLinkSubtitleAdd', {\n      chats: lang('FolderLinkSubtitleAddCount', { count: newChatsCount }, { pluralValue: newChatsCount }),\n      title: renderTextWithEntities({\n        text: folder.title.text,\n        entities: folder.title.entities,\n        noCustomEmojiPlayback: folder.noTitleAnimations,\n      }),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    }) : lang('FolderLinkSubtitleAlready');\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {oldLang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length\n                  ? oldLang('DeselectAll') : oldLang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.alreadyPeerIds}\n          lockedSelectedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && oldLang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {oldLang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>([]);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </div>\n        </>\n      )}\n      <Button\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {lang('FolderLinkSubtitleNew')}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? oldLang('DeselectAll') : oldLang('SelectAll')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.peerIds}\n          lockedSelectedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkAddFolder')}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport ChatlistNew from './ChatlistNew';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  modal?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  modal,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingInfo = usePreviousDeprecated(modal) || modal;\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) {\n      return renderTextWithEntities({\n        text: renderingFolder.title.text,\n        entities: renderingFolder.title.entities,\n        noCustomEmojiPlayback: renderingFolder.noTitleAnimations,\n      });\n    }\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) {\n      return renderTextWithEntities({\n        text: renderingInfo.invite.title.text,\n        entities: renderingInfo.invite.title.entities,\n        noCustomEmojiPlayback: renderingInfo.invite.noTitleAnimations,\n      });\n    }\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: TeactNode) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab\n            className={styles.folder}\n            isActive\n            badgeCount={folderTabNumber}\n            isBadgeActive\n            title={folderTitle}\n          />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { invite, removal } = modal || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MZ0RCecx\",\"title\":\"ar8XeydN\",\"participantCount\":\"un00TXYY\",\"participants\":\"YvkZ6c2D\",\"participant\":\"DHJSBDeE\",\"buttons\":\"KFtrPtNr\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport PeerBadge from '../../common/PeerBadge';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './ChatInviteModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['chatInviteModal'];\n};\n\nconst ChatInviteModal = ({ modal }: OwnProps) => {\n  const { acceptChatInvite, closeChatInviteModal, showNotification } = getActions();\n  const participantsRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const prevModal = usePrevious(modal);\n  const { hash, inviteInfo } = modal || prevModal || {};\n  const {\n    about, isBroadcast, participantIds, participantsCount, photo, isRequestNeeded,\n  } = inviteInfo || {};\n\n  const handleClose = useLastCallback(() => {\n    closeChatInviteModal();\n  });\n\n  const handleAccept = useLastCallback(() => {\n    acceptChatInvite({ hash: hash! });\n\n    if (isRequestNeeded) {\n      showNotification({\n        message: isBroadcast ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n\n    handleClose();\n  });\n\n  const acceptLangKey = isBroadcast ? 'ProfileJoinChannel' : 'JoinGroup';\n  const requestToJoinLangKey = isBroadcast ? 'MemberRequests.RequestToJoinChannel'\n    : 'MemberRequests.RequestToJoinGroup';\n\n  const customPeer = useMemo(() => {\n    if (!inviteInfo) return undefined;\n\n    return getCustomPeerFromInvite(inviteInfo);\n  }, [inviteInfo]);\n\n  const participants = useMemo(() => {\n    if (!participantIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return participantIds.map((id) => selectUser(global, id)).filter(Boolean);\n  }, [participantIds]);\n\n  useHorizontalScroll(participantsRef, !modal || !participants);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      contentClassName={styles.content}\n      isSlim\n      onClose={handleClose}\n      onEnter={handleAccept}\n    >\n      {customPeer && <Avatar size=\"jumbo\" photo={photo} peer={customPeer} withVideo />}\n      {customPeer && <FullNameTitle className={styles.title} peer={customPeer} />}\n      {about && <p className={styles.about}>{about}</p>}\n      <p className={styles.participantCount}>\n        {lang(isBroadcast ? 'Subscribers' : 'Members', participantsCount, 'i')}\n      </p>\n      {participants && (\n        <div ref={participantsRef} className={buildClassName(styles.participants, 'no-scrollbar')}>\n          {participants.map((participant) => (\n            <PeerBadge className={styles.participant} peer={participant} text={getUserFullName(participant)} />\n          ))}\n        </div>\n      )}\n      <div className={buildClassName('dialog-buttons', styles.buttons)}>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleAccept}>\n          {lang(isRequestNeeded ? requestToJoinLangKey : acceptLangKey)}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ChatInviteModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LFkgLoAk\",\"title\":\"La4sUYaq\",\"description\":\"Bn5kz5br\",\"moreButton\":\"JdN5pGTw\",\"secondary\":\"hbsLlXSH\",\"content\":\"TZE15Pt_\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { TableAboutData } from '../common/TableAboutModal';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport TableAboutModal from '../common/TableAboutModal';\n\nimport styles from './AboutAdsModal.module.scss';\n\nexport type OwnProps = {\n\n  modal: TabState['aboutAdsModal'];\n};\n\ntype StateProps = {\n  minLevelToRestrictAds?: number;\n};\n\nconst AboutAdsModal = ({ modal, minLevelToRestrictAds }: OwnProps & StateProps) => {\n  const { closeAboutAdsModal } = getActions();\n\n  const moreMenuRef = useRef<HTMLButtonElement>();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const {\n    canReport, randomId, additionalInfo, sponsorInfo,\n  } = renderingModal || {};\n  const isMonetizationSharing = canReport;\n\n  const renderingIsNewDesign = useCurrentOrPrev(isMonetizationSharing);\n\n  const oldLang = useOldLang();\n\n  const regularAdContent = useMemo(() => {\n    return (\n      <>\n        <h3>{oldLang('SponsoredMessageInfoScreen.Title')}</h3>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n        <p>\n          <SafeLink\n            url={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n            text={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n          />\n        </p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      </>\n    );\n  }, [oldLang]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(moreMenuRef, !renderingIsNewDesign);\n\n  const handleClose = useLastCallback(() => {\n    closeAboutAdsModal();\n    handleContextMenuClose();\n    handleContextMenuHide();\n  });\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <>\n        <h3 className={styles.title}>{oldLang('AboutRevenueSharingAds')}</h3>\n        <p className={buildClassName(styles.description, styles.secondary)}>\n          {oldLang('RevenueSharingAdsAlertSubtitle')}\n        </p>\n        <Button\n          ref={moreMenuRef}\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className={styles.moreButton}\n          onClick={handleContextMenu}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      </>\n    );\n\n    const listItemData = [\n      ['lock', oldLang('RevenueSharingAdsInfo1Title'),\n        renderText(oldLang('RevenueSharingAdsInfo1Subtitle'), ['simple_markdown'])],\n      ['revenue-split', oldLang('RevenueSharingAdsInfo2Title'),\n        renderText(oldLang('RevenueSharingAdsInfo2Subtitle'), ['simple_markdown'])],\n      ['nochannel', oldLang('RevenueSharingAdsInfo3Title'),\n        renderText(oldLang('RevenueSharingAdsInfo3Subtitle', minLevelToRestrictAds), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{renderText(oldLang('RevenueSharingAdsInfo4Title'), ['simple_markdown'])}</h3>\n        <p className={styles.description}>\n          {renderText(oldLang('RevenueSharingAdsInfo4Subtitle2', ''), ['simple_markdown'])}\n          <SafeLink\n            url={oldLang('PromoteUrl')}\n            text={oldLang('LearnMoreArrow')}\n          />\n        </p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, handleContextMenu, minLevelToRestrictAds]);\n\n  if (renderingIsNewDesign) {\n    return (\n      <>\n        <TableAboutModal\n          isOpen={isOpen}\n          listItemData={modalData?.listItemData}\n          headerIconName=\"channel\"\n          withSeparator\n          header={modalData?.header}\n          footer={modalData?.footer}\n          buttonText={oldLang('RevenueSharingAdsUnderstood')}\n          onClose={handleClose}\n        />\n        {contextMenuAnchor && randomId && (\n          <SponsoredMessageContextMenuContainer\n            isOpen={isContextMenuOpen}\n            anchor={contextMenuAnchor}\n            triggerRef={moreMenuRef}\n            randomId={randomId}\n            additionalInfo={additionalInfo}\n            canReport={canReport}\n            sponsorInfo={sponsorInfo}\n            shouldSkipAbout\n            onItemClick={handleClose}\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      {regularAdContent}\n      <Button\n        onClick={handleClose}\n      >\n        {oldLang('RevenueSharingAdsUnderstood')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const minLevelToRestrictAds = global.appConfig.channelRestrictAdsLevelMin;\n\n    return {\n      minLevelToRestrictAds,\n    };\n  },\n)(AboutAdsModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"t9iZUzOj\",\"description\":\"mjveZmdr\",\"toncoin\":\"ATkOSqJ7\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\n\nimport type { TableAboutData } from '../modals/common/TableAboutModal';\n\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TableAboutModal from '../modals/common/TableAboutModal';\nimport Icon from './icons/Icon';\nimport SafeLink from './SafeLink';\n\nimport styles from './AboutMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\nconst AboutMonetizationModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const blockchainText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnLearnCoinAbout',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationInfoTONLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const monetizationTitle = useMemo(() => {\n    return lang(\n      'MonetizationInfoTONTitle',\n      undefined,\n      {\n        withNodes: true,\n        specialReplacement: { '💎': <Icon className={styles.toncoin} name=\"toncoin\" /> },\n      },\n    );\n  }, [lang]);\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <h3 className={styles.title}>{oldLang('lng_channel_earn_learn_title')}</h3>\n    );\n\n    const listItemData = [\n      ['channel', oldLang('lng_channel_earn_learn_in_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_in_about'), ['simple_markdown'])],\n      ['revenue-split', oldLang('lng_channel_earn_learn_split_subtitle'),\n        renderText(oldLang('Monetization.Intro.Split.Text'), ['simple_markdown'])],\n      ['cash-circle', oldLang('lng_channel_earn_learn_out_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_out_about'), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{monetizationTitle}</h3>\n        <p className={styles.description}>{blockchainText}</p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, monetizationTitle, blockchainText]);\n\n  if (!modalData) {\n    return undefined;\n  }\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      listItemData={modalData.listItemData}\n      headerIconName=\"cash-circle\"\n      withSeparator\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={oldLang('RevenueSharingAdsUnderstood')}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(AboutMonetizationModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WqeWhMAS\",\"content\":\"oofoCYlu\"};","import {\n  memo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Modal from '../ui/Modal';\nimport PasswordForm from './PasswordForm';\n\nimport styles from './VerificationMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['monetizationVerificationModal'];\n};\n\ntype StateProps = {\n  passwordHint?: string;\n};\n\nconst VerificationMonetizationModal = ({\n  modal,\n  passwordHint,\n}: OwnProps & StateProps) => {\n  const {\n    closeMonetizationVerificationModal, clearMonetizationVerificationError, processMonetizationRevenueWithdrawalUrl,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useLastCallback((password: string) => {\n    if (!renderingModal) return;\n    processMonetizationRevenueWithdrawalUrl({\n      peerId: renderingModal.chatId,\n      currentPassword: password,\n    });\n  });\n\n  const handleClearError = useLastCallback(() => {\n    clearMonetizationVerificationError();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeMonetizationVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('CheckPasswordTitle')}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      <div className={buildClassName(styles.content, 'settings-content password-form custom-scroll')}>\n        <div className=\"settings-item pt-0\">\n          <PasswordForm\n            shouldShowSubmit\n            placeholder={lang('CheckPasswordPlaceholder')}\n            error={renderingModal?.errorKey && lang.withRegular(renderingModal.errorKey)}\n            description={lang('CheckPasswordDescription')}\n            onClearError={handleClearError}\n            isLoading={renderingModal?.isLoading}\n            hint={passwordHint}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={isOpen}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      passwordHint,\n    };\n  },\n)(VerificationMonetizationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MKdSUg2P\",\"chatItem\":\"qEIwBtp0\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './EmojiStatusAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['emojiStatusAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n  stickerSet?: ApiStickerSet;\n  isPremium?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nconst INTERVAL = 3200;\n\nconst EmojiStatusAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n  stickerSet,\n  isPremium,\n  isAccountFrozen,\n}) => {\n  const {\n    closeEmojiStatusAccessModal,\n    toggleUserEmojiStatusPermission,\n    sendWebAppEvent,\n    openPremiumModal,\n    loadDefaultStatusIcons,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [currentStatusIndex, setCurrentStatusIndex] = useState<number>(0);\n\n  useEffect(() => {\n    if (isOpen && !stickerSet?.stickers && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n    }\n  }, [isOpen, stickerSet, isAccountFrozen]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !stickerSet?.stickers) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: stickerSet.stickers[currentStatusIndex].id,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, stickerSet, currentStatusIndex]);\n\n  const totalCount = stickerSet?.stickers?.length;\n  useInterval(\n    () => {\n      if (!totalCount) return;\n      setCurrentStatusIndex((prevIndex) => (prevIndex + 1) % totalCount);\n    },\n    totalCount ? INTERVAL : undefined,\n  );\n\n  const renderPickerItem = useLastCallback(() => {\n    return (\n      <PeerChip\n        withEmojiStatus\n        className={styles.chatItem}\n        itemClassName={styles.itemName}\n        mockPeer={mockPeerWithStatus}\n      />\n    );\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      if (isPremium) {\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'allowed',\n            },\n          },\n        });\n        toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: true, isBotAccessEmojiGranted: true });\n      } else {\n        openPremiumModal();\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'cancelled',\n            },\n          },\n        });\n      }\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'emoji_status_access_requested',\n          eventData: {\n            status: 'cancelled',\n          },\n        },\n      });\n    }\n    if (isPremium) {\n      toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: false });\n    }\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('EmojiStatusAccessText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      contentClassName={styles.content}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderPickerItem()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const isPremium = selectIsCurrentUserPremium(global);\n    const stickerSet = global.defaultStatusIconsId ? selectStickerSet(global, global.defaultStatusIconsId) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUser,\n      stickerSet,\n      isPremium,\n      isAccountFrozen,\n    };\n  },\n)(EmojiStatusAccessModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { getGeolocationStatus } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './LocationAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['locationAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst LocationAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n}) => {\n  const {\n    closeLocationAccessModal, toggleUserLocationPermission, sendWebAppEvent,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const confirmHandler = useLastCallback(async () => {\n    const geolocationData = await getGeolocationStatus();\n    const { geolocation } = geolocationData;\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: true,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: true,\n            latitude: geolocation?.latitude,\n            longitude: geolocation?.longitude,\n            altitude: geolocation?.altitude,\n            course: geolocation?.heading,\n            speed: geolocation?.speed,\n            horizontal_accuracy: geolocation?.accuracy,\n            vertical_accuracy: geolocation?.accuracy,\n          },\n        },\n      });\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: false,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: false,\n          },\n        },\n      });\n    }\n  });\n\n  const renderInfo = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return (\n      <div className={styles.avatars}>\n        <Avatar\n          size=\"large\"\n          peer={currentUser}\n        />\n        <Icon name=\"next\" className={styles.arrow} />\n        <Avatar\n          size=\"large\"\n          peer={modal.bot}\n        />\n      </div>\n    );\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('LocationPermissionText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderInfo()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n\n    return {\n      currentUser,\n    };\n  },\n)(LocationAccessModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatars\":\"CGPoDaLo\",\"arrow\":\"pzERgD5x\"};","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"qJDgUtjV\",\"root\":\"njPBcVYr\",\"modalTitle\":\"ZAdG13Ah\",\"optionText\":\"oWujoaSC\",\"option\":\"aFbjDzNo\",\"optionButton\":\"VbE0HzDs\",\"sectionTitle\":\"jrA2dOiw\",\"description\":\"k71Zrc_P\",\"title\":\"mMmY6YR4\",\"titleMultiline\":\"lVVyV0py\",\"subtitle\":\"gSkAFc4u\",\"transition\":\"HjsGIG6e\"};","import {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportAdModal.module.scss';\n\nconst ADDED_PADDING = 56;\n\nexport type OwnProps = {\n  modal: TabState['reportAdModal'];\n};\n\nconst ReportAdModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportSponsored, closeReportAdModal, openPreviousReportAdModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const { chatId, randomId } = modal!;\n    reportSponsored({ peerId: chatId, randomId, option });\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    if (!renderingDepth) {\n      closeReportAdModal();\n      return;\n    }\n\n    openPreviousReportAdModal();\n  });\n\n  const bottomText = useMemo(() => {\n    if (!modal) return undefined;\n    const template = lang('lng_report_sponsored_reported_learn');\n    const parts = template.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        text={lang('lng_report_sponsored_reported_link')}\n        url={lang('ReportAd.Help_URL')}\n      />,\n      parts[1],\n    ];\n  }, [lang, modal]);\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(renderingDepth ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <Icon name={renderingDepth ? 'arrow-left' : 'close'} />\n        </Button>\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={styles.title}>{lang('ReportAd')}</h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.subtitle]);\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      className={styles.root}\n      header={header}\n      onClose={closeReportAdModal}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3>\n          {renderingSection?.options.map((option) => (\n            <ListItem\n              narrow\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n        </div>\n        <p className={styles.description}>{bottomText}</p>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAdModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"kq9LwNTZ\",\"root\":\"E1bGWeON\",\"content\":\"tNysQgHL\",\"modalTitle\":\"Lj_ezEWU\",\"header\":\"AlMDkK7c\",\"optionText\":\"FU8m6NUU\",\"option\":\"RoxwMzvA\",\"optionButton\":\"Z6skYdvb\",\"sectionTitle\":\"GSfUuTet\",\"description\":\"zwfjNhF9\",\"title\":\"QawchdxB\",\"hasDepth\":\"CV7kzv9H\",\"titleMultiline\":\"OYFbu8fQ\",\"subtitle\":\"OUFckTb7\",\"transition\":\"n2VxPirU\",\"block\":\"KpptZ3Mk\",\"optionInfo\":\"yc3szGcx\",\"reportIcon\":\"kO8JC4gK\"};","import type { ChangeEvent } from 'react';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport TextArea from '../../ui/TextArea';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportModal.module.scss';\n\nconst MAX_DESCRIPTION = 512;\nconst ADDED_PADDING = 20;\n\nexport type OwnProps = {\n  modal: TabState['reportModal'];\n};\n\nconst ReportModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportMessages, reportStory, closeReportModal, openPreviousReportModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const [text, setText] = useState('');\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    if (!messageIds) return;\n    switch (subject) {\n      case 'message':\n        reportMessages({ chatId: chatId!, messageIds, option });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds[0], peerId: peerId!, option,\n        });\n        break;\n    }\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal?.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    openPreviousReportModal();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeReportModal();\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        {renderingDepth ? (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Back')}\n            onClick={handleBackClick}\n          >\n            <Icon name=\"arrow-left\" />\n          </Button>\n        ) : (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={handleCloseClick}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={buildClassName(styles.title, renderingDepth && styles.hasDepth)}>\n            {renderingSection?.options\n              ? lang(modal?.subject === 'story' ? 'ReportStory' : 'Report') : renderingSection?.title}\n          </h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.options, renderingSection?.subtitle, renderingSection?.title]);\n\n  const handleTextChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  });\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  const closeReportMessageModalHandler = useLastCallback(() => {\n    setText('');\n    closeReportModal();\n  });\n\n  const sendMessageReportHandler = useLastCallback(() => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    switch (subject) {\n      case 'message':\n        reportMessages({\n          chatId: chatId!, messageIds, option: renderingSection?.option, description: text,\n        });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds?.[0], peerId: peerId!, option: renderingSection?.option, description: text,\n        });\n        break;\n    }\n    closeReportMessageModalHandler();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      header={header}\n      onClose={closeReportMessageModalHandler}\n      contentClassName={styles.content}\n      className={buildClassName(styles.root, modal?.subject === 'story' && 'component-theme-dark')}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          {renderingSection?.options\n            ? <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3> : undefined}\n          {renderingSection?.options?.map((option) => (\n            <ListItem\n              narrow\n              nonInteractive\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n          {renderingSection?.option ? (\n            <div className={styles.block}>\n              <AnimatedIconWithPreview\n                tgsUrl={LOCAL_TGS_URLS.Report}\n                size={100}\n                className={styles.reportIcon}\n                nonInteractive\n                forceAlways\n                noLoop={false}\n              />\n              <TextArea\n                id=\"option\"\n                className={styles.optionInfo}\n                label={renderingSection.isOptional ? lang('Report2CommentOptional') : lang('Report2Comment')}\n                onChange={handleTextChange}\n                value={text}\n                maxLength={MAX_DESCRIPTION}\n                maxLengthIndicator={(MAX_DESCRIPTION - text.length).toString()}\n                noReplaceNewlines\n              />\n              <Button\n                onClick={sendMessageReportHandler}\n                disabled={!renderingSection.isOptional ? !text.length : undefined}\n              >\n                {lang('ReportSend')}\n              </Button>\n            </div>\n          ) : undefined}\n        </div>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Rzj2LMLf\",\"content\":\"Ve4u2KVI\",\"modalTitle\":\"E42tgAwD\",\"container\":\"pNSCKAVN\",\"header\":\"P1fPh6h8\",\"actionMessageView\":\"McJgXCtB\",\"info\":\"xWnXsG7q\",\"background\":\"_6w75ldP\",\"customBgImage\":\"CZkpv8n0\",\"customBgColor\":\"VJAYrDF_\",\"withTransition\":\"lElCwweL\",\"blurred\":\"m8xzfVvU\",\"withRightColumn\":\"rJCyBVMB\"};","import {\n  type FC,\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getMockPreparedMessageFromResult, getUserFullName } from '../../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Message from '../../middle/message/Message';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PreparedMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['preparedMessageModal'];\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  bot?: ApiUser;\n};\n\nconst PreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  customBackground,\n  backgroundColor,\n  bot,\n}) => {\n  const {\n    closePreparedInlineMessageModal, sendWebAppEvent, openSharePreparedMessageModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const { webAppKey, message, botId } = modal || {};\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const handleOpenClick = useLastCallback(() => {\n    if (webAppKey && botId && message) {\n      openSharePreparedMessageModal({\n        webAppKey,\n        message,\n      });\n      closePreparedInlineMessageModal();\n    }\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closePreparedInlineMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.header}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={buildClassName('modal-title', styles.modalTitle)}>\n          {lang('BotShareMessage')}\n        </h3>\n      </div>\n    );\n  }, [lang, modal]);\n\n  const localMessage = useMemo(() => {\n    if (!botId || !message || !webAppKey) return undefined;\n    return getMockPreparedMessageFromResult(botId, message);\n  }, [botId, message, webAppKey]);\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  return (\n    <Modal\n      dialogRef={containerRef}\n      isOpen={isOpen}\n      header={header}\n      onClose={handleCloseClick}\n      className={styles.root}\n      contentClassName={styles.content}\n    >\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        {localMessage && (\n          <Message\n            key={botId}\n            message={localMessage}\n            threadId={MAIN_THREAD_ID}\n            messageListType=\"thread\"\n            noComments\n            noReplies\n            appearanceOrder={0}\n            isJustAdded={false}\n            isFirstInGroup\n            isLastInGroup\n            isLastInList={false}\n            isFirstInDocumentGroup={false}\n            isLastInDocumentGroup={false}\n          />\n        )}\n      </div>\n      <div className={styles.container}>\n        <p className={styles.info}>\n          {lang('WebAppShareMessageInfo', { user: getUserFullName(bot) })}\n        </p>\n        <Button\n          onClick={handleOpenClick}\n        >\n          {lang('BotShareMessageShare')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }) => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const bot = modal ? selectUser(global, modal?.botId) : undefined;\n\n    return {\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      bot,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(PreparedMessageModal));\n","import {\n  type FC,\n  memo, useEffect,\n} from '../../../lib/teact/teact';\nimport {\n  getActions, getGlobal, withGlobal,\n} from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectTabState,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePaidMessageConfirmation from '../../middle/composer/hooks/usePaidMessageConfirmation';\n\nimport PaymentMessageConfirmDialog from '../../common/PaymentMessageConfirmDialog';\nimport RecipientPicker from '../../common/RecipientPicker';\n\nexport type OwnProps = {\n  modal: TabState['sharePreparedMessageModal'];\n};\n\ntype StateProps = {\n  isPaymentMessageConfirmDialogOpen: boolean;\n  starsBalance: number;\n  isStarsBalanceModalOpen: boolean;\n};\n\nexport type SendParams = {\n  peerName?: string;\n  starsForSendMessage: number;\n};\n\nconst SharePreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal, isPaymentMessageConfirmDialogOpen, isStarsBalanceModalOpen, starsBalance,\n}) => {\n  const {\n    closeSharePreparedMessageModal,\n    sendInlineBotResult,\n    sendWebAppEvent,\n    showNotification,\n    updateSharePreparedMessageModalSendArgs,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const {\n    message, filter, webAppKey, pendingSendArgs,\n  } = modal || {};\n\n  const {\n    starsForSendMessage,\n  } = pendingSendArgs || {};\n\n  const {\n    closeConfirmDialog: closeConfirmModalPayForMessage,\n    dialogHandler: paymentMessageConfirmDialogHandler,\n    shouldAutoApprove: shouldPaidMessageAutoApprove,\n    setAutoApprove: setShouldPaidMessageAutoApprove,\n    handleWithConfirmation: handleActionWithPaymentConfirmation,\n  } = usePaidMessageConfirmation(starsForSendMessage || 0, isStarsBalanceModalOpen, starsBalance);\n\n  const handleClose = useLastCallback(() => {\n    closeSharePreparedMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const handleSend = useLastCallback((id: string, threadId?: ThreadId) => {\n    if (message && webAppKey) {\n      const global = getGlobal();\n      const peer = selectPeer(global, id);\n      sendInlineBotResult({\n        chatId: id,\n        threadId: threadId || MAIN_THREAD_ID,\n        id: message.result.id,\n        queryId: message.result.queryId,\n      });\n      if (!starsForSendMessage) {\n        showNotification({\n          message: lang('BotSharedToOne', getPeerTitle(lang, peer!)),\n        });\n      }\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_sent',\n        },\n      });\n      closeSharePreparedMessageModal();\n      updateSharePreparedMessageModalSendArgs({ args: undefined });\n    }\n  });\n\n  const handleSelectRecipient = useLastCallback((id: string, threadId?: ThreadId) => {\n    updateSharePreparedMessageModalSendArgs({ args: { peerId: id, threadId } });\n  });\n\n  const handleSendWithPaymentConfirmation = useLastCallback(() => {\n    if (pendingSendArgs) {\n      handleActionWithPaymentConfirmation(handleSend, pendingSendArgs.peerId, pendingSendArgs.threadId);\n    }\n  });\n\n  const handleClosePaymentMessageConfirmDialog = useLastCallback(() => {\n    closeConfirmModalPayForMessage();\n    updateSharePreparedMessageModalSendArgs({ args: undefined });\n  });\n\n  useEffect(() => {\n    if (pendingSendArgs) {\n      handleSendWithPaymentConfirmation();\n    }\n  }, [pendingSendArgs]);\n\n  const global = getGlobal();\n  const peer = pendingSendArgs ? selectPeer(global, pendingSendArgs.peerId) : undefined;\n  const peerName = peer ? getPeerTitle(lang, peer) : undefined;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <>\n      <RecipientPicker\n        isOpen={isOpen}\n        searchPlaceholder={lang('Search')}\n        filter={filter}\n        onSelectRecipient={handleSelectRecipient}\n        onClose={handleClose}\n        onCloseAnimationEnd={unmarkIsShown}\n        isLowStackPriority\n      />\n      <PaymentMessageConfirmDialog\n        isOpen={isPaymentMessageConfirmDialogOpen}\n        onClose={handleClosePaymentMessageConfirmDialog}\n        userName={peerName}\n        messagePriceInStars={starsForSendMessage || 0}\n        messagesCount={1}\n        shouldAutoApprove={shouldPaidMessageAutoApprove}\n        setAutoApprove={setShouldPaidMessageAutoApprove}\n        confirmHandler={paymentMessageConfirmDialogHandler}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { isPaymentMessageConfirmDialogOpen } = tabState;\n    const starsBalance = global.stars?.balance.amount || 0;\n    const isStarsBalanceModalOpen = Boolean(tabState.starsBalanceModal);\n    return {\n      isPaymentMessageConfirmDialogOpen,\n      starsBalance,\n      isStarsBalanceModalOpen,\n    };\n  },\n)(SharePreparedMessageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"iGABsB4C\",\"modalHeader\":\"Ofq4u4pq\",\"section\":\"k44LZ99u\",\"form\":\"VhNBPaMY\",\"label\":\"anDcU5bi\",\"input\":\"kYxuUcwe\",\"description\":\"A_JjwhXv\",\"timeInputIcon\":\"pHne2E6K\",\"offerButton\":\"d_PCM2tC\",\"currencySelector\":\"genSNudF\",\"currencyIcon\":\"fT5aRs0H\"};","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDraft, ApiStarsAmount, ApiTypeCurrencyAmount } from '../../../api/types';\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { selectIsMonoforumAdmin, selectPeer } from '../../../global/selectors';\nimport { selectDraft } from '../../../global/selectors/messages';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos, convertTonToNanos } from '../../../util/formatCurrency';\nimport {\n  formatStarsAsIcon,\n  formatStarsAsText,\n  formatTonAsIcon,\n  formatTonAsText } from '../../../util/localization/format';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestMessageModal'];\n};\n\ntype StateProps = {\n  starBalance?: ApiStarsAmount;\n  tonBalance?: number;\n  peer?: ApiPeer;\n  currentDraft?: ApiDraft;\n  maxStarsAmount: number;\n  minStarsAmount: number;\n  tonMaxAmount: number;\n  tonMinAmount: number;\n  ageMinSeconds: number;\n  futureMin: number;\n  futureMax: number;\n  isMonoforumAdmin?: boolean;\n};\n\n// Add 1 minute if time is less than server min, to allow user to send the message\nconst FUTURE_TIME_ADJUSTMENT = 1 * 60;\n\nconst SuggestMessageModal = ({\n  modal,\n  starBalance,\n  tonBalance,\n  peer,\n  currentDraft,\n  maxStarsAmount,\n  minStarsAmount,\n  tonMaxAmount,\n  tonMinAmount,\n  ageMinSeconds,\n  futureMin,\n  futureMax,\n  isMonoforumAdmin,\n}: OwnProps & StateProps) => {\n  const { closeSuggestMessageModal, updateDraftSuggestedPostInfo, openStarsBalanceModal } = getActions();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const currentSuggestedPostInfo = currentDraft?.suggestedPostInfo;\n  const currentReplyInfo = currentDraft?.replyInfo;\n  const isInSuggestChangesMode = Boolean(currentReplyInfo);\n\n  const [currencyAmount, setCurrencyAmount] = useState<number | undefined>(\n    currentSuggestedPostInfo?.price?.amount || undefined,\n  );\n  const [selectedCurrency, setSelectedCurrency] = useState<ApiTypeCurrencyAmount['currency']>(\n    currentSuggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE,\n  );\n  const [scheduleDate, setScheduleDate] = useState<number | undefined>(\n    currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined,\n  );\n\n  useEffect(() => {\n    const price = currentSuggestedPostInfo?.price;\n    const amount = price?.currency === TON_CURRENCY_CODE ? convertTonFromNanos(price.amount) : price?.amount;\n    setCurrencyAmount(amount);\n    setSelectedCurrency(currentSuggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE);\n    setScheduleDate(currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined);\n  }, [currentSuggestedPostInfo]);\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isCurrencyStars = selectedCurrency === STARS_CURRENCY_CODE;\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = (now + futureMin * 2) * 1000;\n\n  const handleAmountChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    const number = parseFloat(value);\n\n    const result = value === '' || Number.isNaN(number) ? undefined\n      : Math.min(Math.max(number, 0), currentMaxAmount);\n\n    setCurrencyAmount(result);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setScheduleDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleAnytimeClick = useLastCallback(() => {\n    setScheduleDate(undefined);\n    closeCalendar();\n  });\n\n  const currentMinAmount = isCurrencyStars ? minStarsAmount : convertTonFromNanos(tonMinAmount);\n  const currentMaxAmount = isCurrencyStars ? maxStarsAmount : convertTonFromNanos(tonMaxAmount);\n  const isDisabled = Boolean(currencyAmount) && currencyAmount < currentMinAmount;\n\n  const handleOffer = useLastCallback(() => {\n    const neededAmount = currencyAmount\n      ? (isCurrencyStars ? currencyAmount : convertTonToNanos(currencyAmount))\n      : 0;\n\n    if (isDisabled) {\n      return;\n    }\n\n    if (!isMonoforumAdmin) {\n      if (isCurrencyStars) {\n        const currentBalance = starBalance?.amount || 0;\n\n        if (neededAmount > currentBalance) {\n          openStarsBalanceModal({\n            topup: {\n              balanceNeeded: neededAmount,\n            },\n          });\n          return;\n        }\n      } else {\n        const currentTonBalance = tonBalance || 0;\n        if (neededAmount > currentTonBalance) {\n          openStarsBalanceModal({\n            currency: TON_CURRENCY_CODE,\n          });\n          return;\n        }\n      }\n    }\n\n    updateDraftSuggestedPostInfo({\n      price: { currency: selectedCurrency, amount: neededAmount, nanos: 0 },\n      scheduleDate: scheduleDate\n        ? Math.max(scheduleDate / 1000, getServerTime() + futureMin + FUTURE_TIME_ADJUSTMENT)\n        : undefined,\n    });\n\n    closeSuggestMessageModal();\n  });\n\n  return (\n    <Modal\n      headerClassName={styles.modalHeader}\n      isOpen={Boolean(modal)}\n      onClose={closeSuggestMessageModal}\n      isSlim\n      isLowStackPriority\n      hasCloseButton\n      contentClassName={styles.content}\n      title={isInSuggestChangesMode ? lang('TitleSuggestedChanges') : lang('TitleSuggestMessage')}\n    >\n      <div className={styles.form}>\n        <div className={styles.section}>\n          <div className={styles.currencySelector}>\n            <Button\n              className={styles.currencyButton}\n              color={isCurrencyStars ? 'primary' : 'translucent'}\n              pill\n              fluid\n              size=\"tiny\"\n              noFastClick\n              onClick={() => setSelectedCurrency(STARS_CURRENCY_CODE)}\n            >\n              <Icon name=\"star\" className={styles.currencyIcon} />\n              {lang('CurrencyStars')}\n            </Button>\n            <Button\n              className={styles.currencyButton}\n              fluid\n              color={!isCurrencyStars ? 'primary' : 'translucent'}\n              pill\n              size=\"tiny\"\n              noFastClick\n              onClick={() => setSelectedCurrency(TON_CURRENCY_CODE)}\n            >\n              <Icon name=\"toncoin\" className={styles.currencyIcon} />\n              {lang('CurrencyTon')}\n            </Button>\n          </div>\n          <InputText\n            label={lang('InputPlaceholderPrice')}\n            className={buildClassName(styles.input)}\n            value={currencyAmount?.toString()}\n            onChange={handleAmountChange}\n            inputMode=\"numeric\"\n            tabIndex={0}\n            teactExperimentControlled={isCurrencyStars}\n          />\n          <div className={styles.description}>\n            {currencyAmount !== undefined && currencyAmount > 0 && currencyAmount < currentMinAmount\n              ? lang('DescriptionSuggestedPostMinimumOffer', {\n                amount: isCurrencyStars\n                  ? formatStarsAsText(lang, currentMinAmount)\n                  : formatTonAsText(lang, currentMinAmount) },\n              { withNodes: true, withMarkdown: true })\n              : isCurrencyStars\n                ? lang('SuggestMessagePriceDescriptionStars')\n                : lang('SuggestMessagePriceDescriptionTon')}\n          </div>\n        </div>\n\n        <div className={styles.section}>\n          <div className={buildClassName(styles.input, 'input-group', 'touched')}>\n            <input\n              type=\"text\"\n              className={buildClassName('form-control', isCalendarOpened && 'focus')}\n              value={scheduleDate\n                ? formatScheduledDateTime(scheduleDate / 1000, lang, oldLang)\n                : lang('SuggestMessageAnytime')}\n              autoComplete=\"off\"\n              onClick={openCalendar}\n              onFocus={openCalendar}\n              readOnly\n            />\n            <label>{lang('InputTitleSuggestMessageTime')}</label>\n            <Icon name=\"down\" className={styles.timeInputIcon} />\n          </div>\n          <div className={styles.description}>\n            {lang('SuggestMessageTimeDescription', {\n              hint: lang('SuggestMessageDateTimeHint'),\n              duration: formatShortDuration(lang, ageMinSeconds, true),\n            })}\n          </div>\n        </div>\n\n        <CalendarModal\n          isOpen={isCalendarOpened}\n          isFutureMode\n          withTimePicker\n          minAt={minAt}\n          maxAt={maxAt}\n          onClose={closeCalendar}\n          onSubmit={handleExpireDateChange}\n          selectedAt={scheduleDate || defaultSelectedTime}\n          submitButtonLabel={lang('Save')}\n          secondButtonLabel={lang('SuggestMessageAnytime')}\n          onSecondButtonClick={handleAnytimeClick}\n          description={lang('SuggestMessageDateTimeHint')}\n        />\n\n        <Button\n          className={styles.offerButton}\n          onClick={handleOffer}\n          disabled={isDisabled}\n        >\n          {isInSuggestChangesMode ? lang('ButtonUpdateTerms')\n            : currencyAmount ? lang('ButtonOfferAmount', {\n              amount: isCurrencyStars\n                ? formatStarsAsIcon(lang, currencyAmount, { asFont: true })\n                : formatTonAsIcon(lang, currencyAmount),\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            }) : lang('ButtonOfferFree')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const starBalance = global.stars?.balance;\n    const peer = modal ? selectPeer(global, modal.chatId) : undefined;\n    const currentDraft = modal ? selectDraft(global, modal.chatId, MAIN_THREAD_ID) : undefined;\n\n    const { appConfig } = global;\n    const maxStarsAmount = appConfig.starsSuggestedPostAmountMax;\n    const minStarsAmount = appConfig.starsSuggestedPostAmountMin;\n    const ageMinSeconds = appConfig.starsSuggestedPostAgeMin;\n    const futureMin = appConfig.starsSuggestedPostFutureMin;\n    const futureMax = appConfig.starsSuggestedPostFutureMax;\n\n    const tonMaxAmount = appConfig.tonSuggestedPostAmountMax;\n    const tonMinAmount = appConfig.tonSuggestedPostAmountMin;\n\n    const isMonoforumAdmin = modal ? selectIsMonoforumAdmin(global, modal.chatId) : false;\n\n    return {\n      peer,\n      starBalance,\n      tonBalance: global.ton?.balance?.amount,\n      currentDraft,\n      maxStarsAmount,\n      minStarsAmount,\n      tonMaxAmount,\n      tonMinAmount,\n      ageMinSeconds,\n      futureMin,\n      futureMax,\n      isMonoforumAdmin,\n    };\n  },\n)(SuggestMessageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"details\":\"xqyFGV8R\"};","import { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport {\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { getPeerFullTitle } from '../../../global/helpers/peers';\nimport { selectChatMessage, selectIsMonoforumAdmin, selectSender } from '../../../global/selectors';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../../util/formatCurrency';\nimport { formatStarsAsText, formatTonAsText } from '../../../util/localization/format';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SuggestedPostApprovalModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedPostApprovalModal'];\n};\n\ntype StateProps = {\n  commissionPermille: number;\n  tonCommissionPermille: number;\n  minAge: number;\n  futureMin: number;\n  futureMax: number;\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  isAdmin?: boolean;\n  scheduleDate?: number;\n};\n\nconst SuggestedPostApprovalModal = ({\n  modal,\n  message,\n  sender,\n  isAdmin,\n  commissionPermille,\n  tonCommissionPermille,\n  minAge,\n  futureMin,\n  futureMax,\n  scheduleDate,\n}: OwnProps & StateProps) => {\n  const {\n    closeSuggestedPostApprovalModal,\n    approveSuggestedPost,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = now + futureMin * 2;\n\n  const [selectedScheduleDate, setSelectedScheduleDate] = useState<number>(defaultSelectedTime);\n\n  const handleClose = useLastCallback(() => {\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleApprove = useLastCallback((date?: number) => {\n    if (!modal) return;\n\n    approveSuggestedPost({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      scheduleDate: date,\n    });\n\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleCalendarDateChange = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    setSelectedScheduleDate(time);\n  });\n\n  const handleCalendarSubmit = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    closeCalendar();\n    handleApprove(time);\n  });\n\n  const handlePublishNow = useLastCallback(() => {\n    closeCalendar();\n    handleApprove();\n  });\n\n  const handleNext = useLastCallback(() => {\n    if (scheduleDate) {\n      handleApprove(scheduleDate);\n    } else {\n      openCalendar();\n    }\n  });\n\n  if (!modal || !message) {\n    return undefined;\n  }\n\n  const senderName = sender ? getPeerFullTitle(oldLang, sender) : '';\n\n  const renderContent = () => {\n    const price = message?.suggestedPostInfo?.price;\n    const amount = price?.amount;\n    const currency = price?.currency || STARS_CURRENCY_CODE;\n\n    const question = lang(\n      'SuggestedPostConfirmMessage',\n      { peer: senderName },\n      { withNodes: true, withMarkdown: true });\n\n    const questionText = renderText(question);\n    if (!amount) {\n      return questionText;\n    }\n\n    const currentCommissionPermille = currency === TON_CURRENCY_CODE ? tonCommissionPermille : commissionPermille;\n    const commission = (currentCommissionPermille / 10);\n    const amountWithCommission = amount / 100 * commission;\n\n    const formattedAmount = currency === TON_CURRENCY_CODE\n      ? formatTonAsText(lang, convertTonFromNanos(amountWithCommission))\n      : formatStarsAsText(lang, amountWithCommission);\n\n    const ageMinSeconds = minAge;\n    const duration = formatShortDuration(lang, ageMinSeconds, true);\n\n    if (scheduleDate) {\n      const time = formatScheduledDateTime(scheduleDate, lang, oldLang);\n\n      const key\n      = isAdmin ? 'SuggestedPostConfirmDetailsWithTimeAdmin' : 'SuggestedPostConfirmDetailsWithTimeUser';\n\n      return (\n        <>\n          <div>\n            {questionText}\n          </div>\n          <div className={styles.details}>\n            {renderText(lang(key, {\n              amount: formattedAmount,\n              commission,\n              duration,\n              time,\n            }, { withNodes: true, withMarkdown: true }))}\n          </div>\n        </>\n      );\n    }\n\n    const key = isAdmin ? 'SuggestedPostConfirmDetailsAdmin' : 'SuggestedPostConfirmDetailsUser';\n\n    return (\n      <>\n        <div>\n          {questionText}\n        </div>\n        <div className={styles.details}>\n          {renderText(lang(key, {\n            amount: formattedAmount,\n            commission,\n            duration,\n          }, { withNodes: true, withMarkdown: true }))}\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <ConfirmDialog\n        isOpen={Boolean(modal) && !isCalendarOpened}\n        onClose={handleClose}\n        title={lang('SuggestedPostConfirmTitle')}\n        confirmHandler={handleNext}\n        confirmLabel={scheduleDate ? lang('ButtonPublish') : lang('Next')}\n      >\n        {renderContent()}\n      </ConfirmDialog>\n\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        minAt={minAt}\n        maxAt={maxAt}\n        onClose={closeCalendar}\n        onSubmit={handleCalendarSubmit}\n        onDateChange={handleCalendarDateChange}\n        selectedAt={selectedScheduleDate * 1000}\n        submitButtonLabel={lang('ButtonPublishAtTime', {\n          time: formatScheduledDateTime(selectedScheduleDate, lang, oldLang),\n        })}\n        secondButtonLabel={lang('PublishNow')}\n        onSecondButtonClick={handlePublishNow}\n        description={lang('SuggestMessageDateTimeHint')}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const sender = message ? selectSender(global, message) : undefined;\n    const isAdmin = modal && selectIsMonoforumAdmin(global, modal.chatId);\n    const { appConfig } = global;\n    const commissionPermille = appConfig.starsSuggestedPostCommissionPermille;\n    const tonCommissionPermille = appConfig.tonSuggestedPostCommissionPermille;\n    const minAge = appConfig.starsSuggestedPostAgeMin;\n    const futureMin = appConfig.starsSuggestedPostFutureMin;\n    const futureMax = appConfig.starsSuggestedPostFutureMax;\n    const scheduleDate = message?.suggestedPostInfo?.scheduleDate;\n\n    return {\n      minAge,\n      futureMin,\n      futureMax,\n      message,\n      sender,\n      isAdmin,\n      commissionPermille,\n      tonCommissionPermille,\n      scheduleDate,\n    };\n  },\n)(SuggestedPostApprovalModal));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  const resetPermissions = useCallback(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n  }, [defaultPermissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n    resetPermissions,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\n\nimport { isChatPublic } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  chatId?: string;\n  handlePermissionChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  permissions: ApiChatBannedRights;\n  isMediaDropdownOpen: boolean;\n  setIsMediaDropdownOpen: (open: boolean) => void;\n  className?: string;\n  shiftedClassName?: string;\n  dropdownClassName?: string;\n  withCheckbox?: boolean;\n  permissionGroup?: boolean;\n  getControlIsDisabled?: (key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => boolean | undefined;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasLinkedChat?: boolean;\n};\n\nconst permissionKeyList: (keyof ApiChatBannedRights)[] = [\n  'sendPhotos', 'sendVideos', 'sendStickers',\n  'sendAudios', 'sendDocs', 'sendVoices', 'sendRoundvideos', 'embedLinks', 'sendPolls',\n];\n\nconst PermissionCheckboxList: FC<OwnProps & StateProps> = ({\n  chat,\n  isMediaDropdownOpen,\n  setIsMediaDropdownOpen,\n  hasLinkedChat,\n  permissions,\n  handlePermissionChange,\n  className,\n  shiftedClassName,\n  dropdownClassName,\n  withCheckbox,\n  getControlIsDisabled,\n  permissionGroup,\n}) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const { isForum } = chat || {};\n\n  const lang = useLang();\n\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  const countCheckedPermissions = useMemo(() => {\n    return permissionKeyList.reduce((count, key) => {\n      if (!permissions[key]) {\n        count += 1;\n      }\n      return count;\n    }, 0);\n  }, [permissions]);\n\n  const handleOpenMediaDropdown = useLastCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  });\n\n  const handleDisabledClick = useLastCallback(() => {\n    showNotification({ message: lang('ChatPermissionNotAvailable') });\n  });\n\n  return (\n    <>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendPlain\"\n          checked={!permissions.sendPlain}\n          label={lang('UserRestrictionsSend')}\n          blocking\n          permissionGroup={permissionGroup}\n          onChange={handlePermissionChange}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendPlain')}\n        />\n      </div>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendMedia\"\n          checked={!permissions.sendMedia}\n          label={lang('UserRestrictionsSendMedia')}\n          labelText={`${countCheckedPermissions}/${permissionKeyList.length}`}\n          blocking\n          permissionGroup={permissionGroup}\n          rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n          onChange={handlePermissionChange}\n          onClickLabel={handleOpenMediaDropdown}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendMedia')}\n        />\n      </div>\n      <div className={dropdownClassName}>\n        <div\n          className={className}\n        >\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPhotos\"\n              checked={!permissions.sendPhotos}\n              label={lang('SendMediaPermissionPhotos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPhotos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVideos\"\n              checked={!permissions.sendVideos}\n              label={lang('SendMediaPermissionVideos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('SendMediaPermissionStickersGifs')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendStickers')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendAudios\"\n              checked={!permissions.sendAudios}\n              label={lang('SendMediaPermissionAudios')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendAudios')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendDocs\"\n              checked={!permissions.sendDocs}\n              label={lang('SendMediaPermissionFiles')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendDocs')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVoices\"\n              checked={!permissions.sendVoices}\n              label={lang('SendMediaPermissionVoices')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVoices')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendRoundvideos\"\n              checked={!permissions.sendRoundvideos}\n              label={lang('SendMediaPermissionRoundVideos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendRoundvideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('SendMediaPermissionWebPages')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('embedLinks')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('SendMediaPermissionPolls')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPolls')}\n            />\n          </div>\n        </div>\n      </div>\n      <div className={shiftedClassName}>\n        <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n          <Checkbox\n            name=\"inviteUsers\"\n            checked={!permissions.inviteUsers}\n            label={lang('UserRestrictionsInviteUsers')}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n            disabled={getControlIsDisabled && getControlIsDisabled('inviteUsers')}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"pinMessages\"\n            checked={!permissions.pinMessages}\n            label={lang('UserRestrictionsPinMessages')}\n            disabled={getControlIsDisabled ? getControlIsDisabled('pinMessages')\n              : shouldDisablePermissionForPublicGroup}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"changeInfo\"\n            checked={!permissions.changeInfo}\n            label={lang('UserRestrictionsChangeInfo')}\n            blocking\n            permissionGroup={permissionGroup}\n            disabled={getControlIsDisabled ? getControlIsDisabled('changeInfo')\n              : shouldDisablePermissionForPublicGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        {isForum && (\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"manageTopics\"\n              checked={!permissions.manageTopics}\n              label={lang('UserRestrictionsCreateTopics')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('manageTopics')}\n            />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const fullInfo = chat && selectChatFullInfo(global, chat.id);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      hasLinkedChat,\n    };\n  },\n)(PermissionCheckboxList));\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"_YNfwDqt\",\"root\":\"SeaF_shb\",\"container\":\"axa67kqo\",\"title\":\"U4IFhV0a\",\"singleTitle\":\"qd6OFHiG\",\"actionTitle\":\"yGhFKTl5\",\"restrictionTitle\":\"t3KOsBfm\",\"button\":\"goI3MITH\",\"options\":\"b6847Kh3\",\"dropdownList\":\"czTjjKim\",\"dialogButtons\":\"JTT_DIRv\",\"proceedButtons\":\"L4YzeG91\",\"restrictionContainer\":\"iv0u9Zw6\",\"restrictionContainerOpen\":\"qCQftA04\",\"dropdownListOpen\":\"Ifpyv7Jp\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../api/types';\nimport type { IRadioOption } from '../ui/CheckboxGroup';\n\nimport {\n  getHasAdminRight,\n  getPrivateChatUserId,\n  getUserFirstOrLastName, isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isSystemBot,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  getSendersFromSelectedMessages,\n  selectBot,\n  selectCanDeleteSelectedMessages,\n  selectChat,\n  selectChatFullInfo, selectIsChatWithBot,\n  selectSenderFromMessage,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { buildCollectionByCallback, unique } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useManagePermissions from '../right/hooks/useManagePermissions';\n\nimport PermissionCheckboxList from '../main/PermissionCheckboxList';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Avatar from './Avatar';\nimport AvatarList from './AvatarList';\nimport Icon from './icons/Icon';\n\nimport styles from './DeleteMessageModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  isSuperGroup?: boolean;\n  messageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  currentUserId?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  chatBot?: boolean;\n  isSchedule?: boolean;\n  onConfirm?: NoneToVoidFunction;\n  canBanUsers?: boolean;\n  isCreator?: boolean;\n  linkedChatId?: string;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  isChannel,\n  isSuperGroup,\n  isSchedule,\n  currentUserId,\n  messageIds,\n  isCreator,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  chatBot,\n  adminMembersById,\n  canBanUsers,\n  linkedChatId,\n  onConfirm,\n}) => {\n  const {\n    closeDeleteMessageModal,\n    deleteMessages,\n    reportChannelSpam,\n    deleteChatMember,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n    updateChatMemberBannedRights,\n    deleteParticipantHistory,\n  } = getActions();\n\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    permissions, havePermissionChanged, handlePermissionChange, resetPermissions,\n  } = useManagePermissions(chat?.defaultBannedRights);\n\n  const [peerIdsToDeleteAll, setPeerIdsToDeleteAll] = useState<string[]>([]);\n  const [peerIdsToBan, setPeerIdsToBan] = useState<string[]>([]);\n  const [peerIdsToReportSpam, setPeerIdsToReportSpam] = useState<string[]>([]);\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const [isAdditionalOptionsVisible, setIsAdditionalOptionsVisible] = useState(false);\n  const [shouldDeleteForAll, setShouldDeleteForAll] = useState(true);\n\n  const peerList = useMemo(() => {\n    if (isChannel || !messageIds || !chat) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n    const senderArray = getSendersFromSelectedMessages(global, chat.id, messageIds);\n    return senderArray ? unique(senderArray)\n      .filter((peer) => (\n        peer?.id !== chat?.id\n        && peer?.id !== linkedChatId\n        && peer?.id !== chat?.linkedMonoforumId\n      )) : MEMO_EMPTY_ARRAY;\n  }, [chat, isChannel, linkedChatId, messageIds]);\n\n  const buildNestedOptionListWithAvatars = useLastCallback(() => {\n    return peerList.map((member) => {\n      return {\n        value: member.id,\n        label: getPeerTitle(lang, member) || '',\n        leftElement: <Avatar size=\"small\" peer={member} />,\n      };\n    });\n  });\n\n  const peerListToDeleteAll = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n      && peer.id !== currentUserId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToReportSpam = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== currentUserId\n      && peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToBan = useMemo(() => {\n    const isCurrentUserInList = peerList.some((peer) => peer.id === currentUserId);\n    const shouldReturnEmpty = !canBanUsers || isCurrentUserInList || chat?.isMonoforum;\n\n    if (shouldReturnEmpty) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return peerList.filter((peer) => {\n      const isAdmin = adminMembersById?.[peer.id];\n      return isCreator || !isAdmin;\n    });\n  }, [peerList, isCreator, currentUserId, canBanUsers, adminMembersById, chat?.isMonoforum]);\n\n  const shouldShowAdditionalOptions = useMemo(() => {\n    return Boolean(peerListToDeleteAll.length || peerListToReportSpam.length || peerListToBan.length);\n  }, [peerListToDeleteAll, peerListToReportSpam, peerListToBan]);\n\n  const shouldShowOption = shouldShowAdditionalOptions\n    && !canDeleteForAll && !isSchedule && isSuperGroup;\n\n  const peerNames = useMemo(() => {\n    if (!peerList || isSchedule) return {};\n    return buildCollectionByCallback(peerList, (peer) => [peer.id, getPeerTitle(lang, peer)]);\n  }, [isSchedule, lang, peerList]);\n\n  const ACTION_SPAM_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'spam' : peerList?.[0]?.id,\n        label: oldLang('ReportSpamTitle'),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_DELETE_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'delete_all' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? oldLang('DeleteAllFromUsers')\n          : oldLang('DeleteAllFrom', Object.values(peerNames)[0]),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, peerNames, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_BAN_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'ban' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? (isAdditionalOptionsVisible ? oldLang('DeleteRestrictUsers') : oldLang('DeleteBanUsers'))\n          : (isAdditionalOptionsVisible ? oldLang('KickFromSupergroup')\n            : oldLang('DeleteBan', Object.values(peerNames)[0])),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars(),\n        ] : undefined,\n      },\n    ];\n  }, [isAdditionalOptionsVisible, oldLang, messageIds, peerList, peerNames]);\n\n  const toggleAdditionalOptions = useLastCallback(() => {\n    setIsAdditionalOptionsVisible((prev) => !prev);\n  });\n\n  const filterMessageIdByPeerId = useLastCallback((peerIds: string[], selectedMessageIdList: number[]) => {\n    if (!chat) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n    return selectedMessageIdList.filter((msgId) => {\n      const sender = selectSenderFromMessage(global, chat.id, msgId);\n      return sender && peerIds.includes(sender.id);\n    });\n  });\n\n  const handleReportSpam = useLastCallback((userMessagesMap: Record<string, number[]>) => {\n    Object.entries(userMessagesMap).forEach(([userId, messageIdList]) => {\n      if (messageIdList.length) {\n        reportChannelSpam({\n          participantId: userId,\n          chatId: chat!.id,\n          messageIds: messageIdList,\n        });\n      }\n    });\n  });\n\n  const handleDeleteMessages = useLastCallback((filteredMessageIdList: number[]) => {\n    deleteMessages({ messageIds: filteredMessageIdList, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteAllPeerMessages = useLastCallback((peerIdList: string[]) => {\n    if (!chat) return;\n    peerIdList.forEach((peerId) => {\n      deleteParticipantHistory({ peerId, chatId: chat.id });\n    });\n  });\n\n  const handleDeleteMember = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      deleteChatMember({ chatId: chat!.id, userId });\n    });\n  });\n\n  const handleUpdateChatMemberBannedRights = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      updateChatMemberBannedRights({\n        chatId: chat!.id,\n        userId,\n        bannedRights: permissions,\n      });\n    });\n  });\n\n  const handleDeleteMessageList = useLastCallback(() => {\n    if (!chat || !messageIds) return;\n\n    onConfirm?.();\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else if (shouldShowOption) {\n      if (peerIdsToReportSpam?.length) {\n        const global = getGlobal();\n        const peerIdList = peerIdsToReportSpam.filter((option) => !Number.isNaN(Number(option)));\n        const messageList = messageIds.reduce<Record<string, number[]>>((acc, msgId) => {\n          const peer = selectSenderFromMessage(global, chat.id, msgId);\n          if (peer && peerIdList.includes(peer.id)) {\n            if (!acc[peer.id]) {\n              acc[peer.id] = [];\n            }\n            acc[peer.id].push(Number(msgId));\n          }\n          return acc;\n        }, {});\n\n        handleReportSpam(messageList);\n      }\n\n      if (peerIdsToDeleteAll?.length) {\n        const peerIdList = peerIdsToDeleteAll.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteAllPeerMessages(peerIdList);\n      }\n\n      if (peerIdsToBan?.length && !havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteMember(peerIdList);\n        const filteredMessageIdList = filterMessageIdByPeerId(peerIdList, messageIds);\n        handleDeleteMessages(filteredMessageIdList);\n      }\n\n      if (peerIdsToBan?.length && havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleUpdateChatMemberBannedRights(peerIdList);\n      }\n\n      if (!peerIdsToReportSpam?.length || !peerIdsToDeleteAll?.length || !peerIdsToBan?.length) {\n        deleteMessages({ messageIds, shouldDeleteForAll });\n      }\n    } else {\n      deleteMessages({ messageIds, shouldDeleteForAll });\n    }\n\n    closeDeleteMessageModal();\n    exitMessageSelectMode();\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteMessageModal();\n  });\n\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      setPeerIdsToReportSpam([]);\n      setPeerIdsToDeleteAll([]);\n      setPeerIdsToBan([]);\n      setShouldDeleteForAll(true);\n      setIsMediaDropdownOpen(false);\n      setIsAdditionalOptionsVisible(false);\n      resetPermissions();\n    }\n  }, [isOpen, prevIsOpen, resetPermissions]);\n\n  function renderHeader() {\n    return (\n      <div\n        className={shouldShowOption && styles.container}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldShowOption && (\n          <AvatarList\n            size=\"small\"\n            peers={peerList}\n          />\n        )}\n        <h3 className={buildClassName(shouldShowOption ? styles.title : styles.singleTitle)}>\n          {oldLang('Chat.DeleteMessagesConfirmation', messageIds?.length)}\n        </h3>\n      </div>\n    );\n  }\n\n  function renderAdditionalActionOptions() {\n    return (\n      <div className={styles.options}>\n        <CheckboxGroup\n          options={ACTION_SPAM_OPTION}\n          onChange={setPeerIdsToReportSpam}\n          selected={peerIdsToReportSpam}\n          nestedCheckbox={messageIds && peerList.length >= 2}\n        />\n        {peerListToDeleteAll?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_DELETE_OPTION}\n            onChange={setPeerIdsToDeleteAll}\n            selected={peerIdsToDeleteAll}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n        {peerListToBan?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_BAN_OPTION}\n            onChange={setPeerIdsToBan}\n            selected={peerIdsToBan}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderPartiallyRestrictedUser() {\n    return (\n      <div className={buildClassName(styles.restrictionContainer,\n        isAdditionalOptionsVisible && styles.restrictionContainerOpen)}\n      >\n        <h3 className={buildClassName(styles.actionTitle, styles.restrictionTitle)}>\n          {oldLang('UserRestrictionsCanDoUsers', peerList.length)}\n        </h3>\n        <PermissionCheckboxList\n          withCheckbox\n          chatId={chat?.id}\n          isMediaDropdownOpen={isMediaDropdownOpen}\n          setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n          handlePermissionChange={handlePermissionChange}\n          permissions={permissions}\n          className={buildClassName(\n            styles.dropdownList,\n            isMediaDropdownOpen && styles.dropdownListOpen,\n          )}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n      onEnter={handleDeleteMessageList}\n      className={styles.root}\n    >\n      <div className={styles.main}>\n        {renderHeader()}\n        {shouldShowOption && (\n          <>\n            <p className={styles.actionTitle}>{oldLang('DeleteAdditionalActions')}</p>\n            {renderAdditionalActionOptions()}\n            {renderPartiallyRestrictedUser()}\n            {peerIdsToBan?.length && canBanUsers ? (\n              <ListItem\n                narrow\n                buttonClassName={styles.button}\n                onClick={toggleAdditionalOptions}\n              >\n                {oldLang(isAdditionalOptionsVisible ? 'DeleteToggleBanUsers' : 'DeleteToggleRestrictUsers')}\n                <Icon\n                  name={isAdditionalOptionsVisible ? 'up' : 'down'}\n                  className={buildClassName(styles.button, 'ml-2')}\n                />\n              </ListItem>\n            ) : setIsAdditionalOptionsVisible(false)}\n          </>\n        )}\n        {(canDeleteForAll || chatBot || !shouldShowOption) && (\n          <>\n            <p>\n              {messageIds && messageIds.length > 1\n                ? lang('AreYouSureDeleteFewMessages') : lang('AreYouSureDeleteSingleMessage')}\n            </p>\n            {willDeleteForCurrentUserOnly && (\n              <p>{oldLang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n            )}\n            {willDeleteForAll && (\n              <p>{oldLang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n            )}\n          </>\n        )}\n        {canDeleteForAll && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={contactName ? renderText(oldLang('DeleteMessagesOptionAlso', contactName))\n              : oldLang('Conversation.DeleteMessagesForEveryone')}\n            checked={shouldDeleteForAll}\n            onCheck={setShouldDeleteForAll}\n          />\n        )}\n        <div className={buildClassName('dialog-buttons',\n          isMediaDropdownOpen ? styles.dialogButtons : styles.proceedButtons)}\n        >\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageList}>\n            {shouldShowOption ? oldLang('DeleteProceedBtn') : lang('Delete')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>{oldLang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      deleteMessageModal,\n    } = selectTabState(global);\n    const messageIds = deleteMessageModal?.messageIds;\n    const chatId = deleteMessageModal?.chatId;\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global, messageIds);\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const linkedChatId = chatFullInfo?.linkedChatId;\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const isSchedule = deleteMessageModal?.isSchedule;\n    const onConfirm = deleteMessageModal?.onConfirm;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const chatBot = Boolean(chat && !isSystemBot(chat.id) && selectBot(global, chat.id));\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const canBanUsers = chat && getHasAdminRight(chat, 'banUsers');\n    const isCreator = chat?.isCreator;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && (isChatSuperGroup(chat) || isChannel);\n\n    return {\n      chat,\n      isChannel,\n      isSuperGroup,\n      messageIds,\n      currentUserId: global.currentUserId,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n      adminMembersById,\n      chatBot,\n      canBanUsers,\n      linkedChatId,\n      isSchedule,\n      isCreator,\n      onConfirm,\n    };\n  },\n)(DeleteMessageModal));\n","import { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal = ({\n  isOpen,\n  chatId,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { pinMessage } = getActions();\n\n  const [shouldPinForAll, setShouldPinForAll] = useState(true);\n\n  const handlePinMessage = useLastCallback(() => {\n    pinMessage({\n      chatId,\n      messageId,\n      isUnpin: false,\n      isOneSide: !shouldPinForAll,\n      isSilent: !shouldPinForAll,\n    });\n    onClose();\n  });\n\n  const lang = useOldLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      {canPinForAll && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          label={contactName ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          checked={shouldPinForAll}\n          onCheck={setShouldPinForAll}\n        />\n      )}\n      <div className=\"dialog-buttons\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(useMemo(() => (isActive ? {\n    'Mod+C': handleCopy,\n  } : undefined), [isActive]));\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages, selectCurrentChat,\n  selectCurrentMessageList, selectHasIpRevealingMedia,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n  shouldWarnAboutFiles?: boolean;\n  hasIpRevealingMedia?: boolean;\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  chat,\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n  shouldWarnAboutFiles,\n  hasIpRevealingMedia,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n    reportMessages,\n    openDeleteMessageModal,\n    setSharedSettingOption,\n  } = getActions();\n  const lang = useOldLang();\n\n  useCopySelectedMessages(isActive);\n\n  const [isFileIpDialogOpen, openFileIpDialog, closeFileIpDialog] = useFlag();\n  const [shouldNotWarnAboutFiles, setShouldNotWarnAboutFiles] = useState(false);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    openDeleteMessageModal({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n      isSchedule,\n    });\n  });\n\n  useEffect(() => {\n    return isActive && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? handleDelete : undefined,\n        onDelete: canDeleteMessages ? handleDelete : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, handleDelete, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const handleMessageDownload = useLastCallback(() => {\n    if (shouldWarnAboutFiles && hasIpRevealingMedia) {\n      openFileIpDialog();\n      return;\n    }\n\n    handleDownload();\n  });\n\n  const handleFileIpConfirm = useLastCallback(() => {\n    setSharedSettingOption({ shouldWarnAboutFiles: !shouldNotWarnAboutFiles });\n    closeFileIpDialog();\n    handleDownload();\n  });\n\n  const prevSelectedMessagesCount = usePreviousDeprecated(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const openMessageReport = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    reportMessages({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n    });\n    exitMessageSelectMode();\n  });\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: IconName, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n        aria-label={label}\n      >\n        <Icon name={icon} />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className={className}>\n        <div className=\"MessageSelectToolbar-inner\">\n          <Button\n            color=\"translucent\"\n            round\n            onClick={handleExitMessageSelectMode}\n            ariaLabel=\"Exit select mode\"\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n            {formattedMessagesCount}\n          </span>\n\n          {Boolean(selectedMessagesCount) && (\n            <div className=\"MessageSelectToolbar-actions\">\n              {messageListType !== 'scheduled' && canForwardMessages && (\n                renderButton(\n                  'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n                )\n              )}\n              {canReportMessages && (\n                renderButton('flag', lang('Conversation.ReportMessages'), openMessageReport)\n              )}\n              {canDownloadMessages && !hasProtectedMessage && (\n                renderButton('download', lang('lng_media_download'), handleMessageDownload)\n              )}\n              {!hasProtectedMessage && (\n                renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n              )}\n              {canDeleteMessages && (\n                renderButton('delete', lang('EditAdminGroupDeleteMessages'), handleDelete, true)\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isFileIpDialogOpen}\n        onClose={closeFileIpDialog}\n        confirmHandler={handleFileIpConfirm}\n      >\n        {lang('lng_launch_svg_warning')}\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldNotWarnAboutFiles}\n          label={lang('lng_launch_exe_dont_ask')}\n          onCheck={setShouldNotWarnAboutFiles}\n        />\n      </ConfirmDialog>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { shouldWarnAboutFiles } = selectSharedSettings(global);\n    const chat = selectCurrentChat(global);\n\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const hasIpRevealingMedia = selectedMessageIds && chatId\n      ? selectHasIpRevealingMedia(global, chatId, selectedMessageIds) : false;\n    const isShareMessageModalOpen = tabState.isShareMessageModalShown;\n    const isAnyModalOpen = Boolean(isShareMessageModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall || tabState.reportModal\n      || tabState.deleteMessageModal || tabState.isRemindMeCalendarShown);\n\n    return {\n      chat,\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n      shouldWarnAboutFiles,\n      hasIpRevealingMedia,\n    };\n  },\n)(MessageSelectToolbar));\n","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {\n        seenByDates: undefined,\n      };\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"slqA9gR2\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tauadiDm\",\"icon\":\"i4wZg_0J\",\"header\":\"MQxuEIRA\",\"desc\":\"AEAN1Au4\",\"separator\":\"sXXb5yOS\",\"button\":\"F7owtTHj\",\"closeButton\":\"i6iFv9YE\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTabState, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal, { ANIMATION_DURATION } from '../ui/Modal';\nimport Separator from '../ui/Separator';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport Icon from './icons/Icon';\n\nimport styles from './PrivacySettingsNoticeModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isReadDate?: boolean;\n};\n\nconst CLOSE_ANIMATION_DURATION = ANIMATION_DURATION + ANIMATION_END_DELAY;\n\nconst PrivacySettingsNoticeModal = ({ isOpen, isReadDate, user }: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const {\n    updateGlobalPrivacySettings,\n    openPremiumModal,\n    closePrivacySettingsNoticeModal,\n    showNotification,\n    setPrivacyVisibility,\n    loadUser,\n  } = getActions();\n  const userName = getUserFirstOrLastName(user);\n\n  const handleShowReadTime = useLastCallback(() => {\n    updateGlobalPrivacySettings({ shouldHideReadMarks: false });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumReadSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleShowLastSeen = useLastCallback(() => {\n    setPrivacyVisibility({\n      privacyKey: 'lastSeen',\n      visibility: 'everybody',\n      onSuccess: () => loadUser({ userId: user!.id }),\n    });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumLastSeenSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleOpenPremium = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      openPremiumModal({ initialSection: 'last_seen' });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n  });\n\n  return (\n    <Modal isSlim isOpen={isOpen} onClose={handleClose}>\n      <div className={styles.container} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className={styles.closeButton}\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={handleClose}\n          ariaLabel=\"Close\"\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <AnimatedIconWithPreview\n          tgsUrl={isReadDate ? LOCAL_TGS_URLS.ReadTime : LOCAL_TGS_URLS.LastSeen}\n          size={84}\n          className={styles.icon}\n          nonInteractive\n          noLoop\n        />\n        <h2 className={styles.header}>\n          {lang(isReadDate ? 'PremiumReadHeader1' : 'PremiumLastSeenHeader1')}\n        </h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(\n              isReadDate ? 'PremiumReadText1' : 'PremiumLastSeenText1Locked',\n              userName,\n            ),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          onClick={isReadDate ? handleShowReadTime : handleShowLastSeen}\n          className={styles.button}\n        >\n          {lang(isReadDate ? 'PremiumReadButton1' : 'PremiumLastSeenButton1')}\n        </Button>\n        <Separator className={styles.separator}>{lang('PremiumOr')}</Separator>\n        <h2 className={styles.header}>{lang('PremiumReadHeader2')}</h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(isReadDate ? 'PremiumReadText2' : 'PremiumLastSeenText2', userName),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          withPremiumGradient\n          onClick={handleOpenPremium}\n          className={styles.button}\n        >\n          {lang('PremiumLastSeenButton2')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global): Complete<StateProps> => {\n    const { chatId, isReadDate } = selectTabState(global).privacySettingsNoticeModal || {};\n    const user = chatId ? selectUser(global, chatId) : undefined;\n\n    return { user, isReadDate };\n  })(PrivacySettingsNoticeModal),\n);\n","import type { TeactNode } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport focusNoScroll from '../../../util/focusNoScroll';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Radio from '../../ui/Radio';\nimport Icon from '../icons/Icon';\nimport PickerItem from './PickerItem';\n\nimport styles from './PickerStyles.module.scss';\n\nexport type ItemPickerOption = {\n  label: TeactNode;\n  subLabel?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n  value: string;\n};\n\ntype SingleModeProps = {\n  allowMultiple?: false;\n  itemInputType?: 'radio';\n  selectedValue?: string;\n  selectedValues?: never; // Help TS to throw an error if this is passed\n  onSelectedValueChange?: (value: string) => void;\n};\n\ntype MultipleModeProps = {\n  allowMultiple: true;\n  itemInputType: 'checkbox';\n  selectedValue?: never;\n  selectedValues: string[];\n  lockedSelectedValues?: string[];\n  lockedUnselectedValues?: string[];\n  onSelectedValuesChange?: (values: string[]) => void;\n};\n\ntype OwnProps = {\n  className?: string;\n  isSearchable?: boolean;\n  searchInputId?: string;\n  items: ItemPickerOption[];\n  itemClassName?: string;\n  filterValue?: string;\n  filterPlaceholder?: string;\n  notFoundText?: string;\n  isLoading?: boolean;\n  noScrollRestore?: boolean;\n  isViewOnly?: boolean;\n  withDefaultPadding?: boolean;\n  forceRenderAllItems?: boolean;\n  onFilterChange?: (value: string) => void;\n  onDisabledClick?: (value: string, isSelected: boolean) => void;\n  onLoadMore?: () => void;\n} & (SingleModeProps | MultipleModeProps);\n\nconst ITEM_CLASS_NAME = 'ItemPickerItem';\n\nconst ItemPicker = ({\n  className,\n  isSearchable,\n  searchInputId,\n  items,\n  filterValue,\n  notFoundText,\n  isLoading,\n  noScrollRestore,\n  filterPlaceholder,\n  isViewOnly,\n  itemInputType,\n  itemClassName,\n  withDefaultPadding,\n  forceRenderAllItems,\n  onFilterChange,\n  onDisabledClick,\n  onLoadMore,\n  ...optionalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n\n  const allowMultiple = optionalProps.allowMultiple;\n  const lockedSelectedValues = allowMultiple ? optionalProps.lockedSelectedValues : undefined;\n  const lockedUnselectedValues = allowMultiple ? optionalProps.lockedUnselectedValues : undefined;\n\n  useEffect(() => {\n    if (!isSearchable) return undefined;\n    requestMeasure(() => {\n      focusNoScroll(inputRef.current);\n    });\n  }, [isSearchable]);\n\n  const selectedValues = useMemo(() => {\n    if (allowMultiple) {\n      return optionalProps.selectedValues;\n    }\n\n    return optionalProps.selectedValue ? [optionalProps.selectedValue] : MEMO_EMPTY_ARRAY;\n  }, [allowMultiple, optionalProps.selectedValue, optionalProps.selectedValues]);\n\n  const lockedSelectedValuesSet = useMemo(() => new Set(lockedSelectedValues), [lockedSelectedValues]);\n  const lockedUnselectedValuesSet = useMemo(() => new Set(lockedUnselectedValues), [lockedUnselectedValues]);\n\n  const sortedItemValuesList = useMemo(() => {\n    if (filterValue) {\n      return items.map((item) => item.value);\n    }\n\n    const lockedSelectedBucket: ItemPickerOption[] = [];\n    const unlockedBucket: ItemPickerOption[] = [];\n    const lockedUnselectableBucket: ItemPickerOption[] = [];\n\n    items.forEach((item) => {\n      if (lockedSelectedValuesSet.has(item.value)) {\n        lockedSelectedBucket.push(item);\n      } else if (lockedUnselectedValuesSet.has(item.value)) {\n        lockedUnselectableBucket.push(item);\n      } else {\n        unlockedBucket.push(item);\n      }\n    });\n\n    return lockedSelectedBucket.concat(unlockedBucket, lockedUnselectableBucket).map((item) => item.value);\n  }, [filterValue, items, lockedSelectedValuesSet, lockedUnselectedValuesSet]);\n\n  const handleItemClick = useLastCallback((value: string) => {\n    if (allowMultiple) {\n      const newSelectedValues = selectedValues.slice();\n      const index = newSelectedValues.indexOf(value);\n      if (index >= 0) {\n        newSelectedValues.splice(index, 1);\n      } else {\n        newSelectedValues.push(value);\n      }\n\n      optionalProps.onSelectedValuesChange?.(newSelectedValues);\n      return;\n    }\n\n    optionalProps.onSelectedValueChange?.(value);\n  });\n\n  const [viewportValuesList, getMore] = useInfiniteScroll(\n    onLoadMore, sortedItemValuesList, Boolean(forceRenderAllItems || filterValue),\n  );\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange?.(value);\n  });\n\n  const renderItem = useCallback((value: string) => {\n    const item = items.find((itemOption) => itemOption.value === value);\n    if (!item) return undefined;\n\n    const { label, subLabel, isLoading: isItemLoading } = item;\n    const isAlwaysUnselected = lockedUnselectedValuesSet.has(value);\n    const isAlwaysSelected = lockedSelectedValuesSet.has(value);\n    const isLocked = isAlwaysUnselected || isAlwaysSelected;\n    const isChecked = selectedValues.includes(value);\n\n    function getInputElement() {\n      if (isLocked) return <Icon name=\"lock-badge\" />;\n      if (itemInputType === 'radio') {\n        return <Radio checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      if (itemInputType === 'checkbox') {\n        return <Checkbox checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      return undefined;\n    }\n\n    return (\n      <PickerItem\n        key={value}\n        className={buildClassName(ITEM_CLASS_NAME, itemClassName)}\n        title={label}\n        subtitle={subLabel}\n        disabled={isLocked}\n        inactive={isViewOnly}\n        ripple\n        inputElement={getInputElement()}\n\n        onClick={() => handleItemClick(value)}\n\n        onDisabledClick={onDisabledClick && (() => onDisabledClick(value, isAlwaysSelected))}\n      />\n    );\n  }, [\n    items, lockedUnselectedValuesSet, lockedSelectedValuesSet, selectedValues, isViewOnly, onDisabledClick,\n    itemInputType, itemClassName,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.container, className)}>\n      {isSearchable && (\n        <div className={buildClassName(styles.header, 'custom-scroll')} dir={lang.isRtl ? 'rtl' : undefined}>\n          <InputText\n            id={searchInputId}\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={filterPlaceholder || lang('Search')}\n          />\n        </div>\n      )}\n\n      {viewportValuesList?.length ? (\n        <InfiniteScroll\n          className={buildClassName(styles.pickerList, withDefaultPadding && styles.padded, 'custom-scroll')}\n          items={viewportValuesList}\n          itemSelector={`.${ITEM_CLASS_NAME}`}\n          onLoadMore={getMore}\n          noScrollRestore={noScrollRestore}\n        >\n          {viewportValuesList.map((value) => renderItem(value))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportValuesList && !viewportValuesList.length ? (\n        <p className={styles.noResults}>{notFoundText || lang('SearchEmptyViewTitle')}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ItemPicker);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wzzA3MFh\",\"pickerSelector\":\"xhujrq9i\",\"pickerTitle\":\"YuRK4e7S\",\"picker\":\"YF9nLkCK\",\"footer\":\"ATCZ2Q5G\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport ItemPicker from './pickers/ItemPicker';\n\nimport styles from './CountryPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (value: string[]) => void;\n  countryList: ApiCountry[];\n  selectionLimit?: number | undefined;\n};\n\nconst CountryPickerModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  countryList,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[]>([]);\n  const prevSelectedCountryIds = usePreviousDeprecated(selectedCountryIds);\n  const noPickerScrollRestore = prevSelectedCountryIds === selectedCountryIds;\n\n  const displayedIds = useMemo(() => {\n    if (!countryList) {\n      return [];\n    }\n\n    return countryList.filter((country) => !country.isHidden && country.iso2 !== 'FT')\n      .map(({\n        iso2, defaultName,\n      }) => ({\n        value: iso2,\n        label: defaultName,\n      }));\n  }, [countryList]);\n\n  const handleSelectedIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (selectionLimit && newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningCountries', selectionLimit),\n      });\n      return;\n    }\n    setSelectedCountryIds(newSelectedIds);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    onSubmit(selectedCountryIds);\n    onClose();\n  });\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleSubmit}\n    >\n      <div className={styles.container}>\n        <div className={styles.pickerSelector}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4 className={styles.pickerTitle}>\n            {lang('BoostingSelectCountry')}\n          </h4>\n        </div>\n      </div>\n\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedIds}\n          selectedValues={selectedCountryIds}\n          onSelectedValuesChange={handleSelectedIdsChange}\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <div className={styles.footer}>\n        <Button\n          onClick={handleSubmit}\n        >\n          {lang('SelectCountries.OK')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(CountryPickerModal);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { unique } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport Icon from '../common/icons/Icon';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={oldLang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n\n            onClick={() => setChosenTab(undefined)}\n          >\n            <Icon name=\"heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(lang, reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(lang, count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={oldLang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <Icon name=\"heart-outline\" className=\"status-icon\" />\n                          {formatDateAtTime(oldLang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(oldLang, seenByUser * 1000) : undefined}\n                        statusIcon=\"message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {oldLang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../types';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { IS_ANDROID } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      endHeavyAnimation();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceAlways\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): Complete<StateProps> => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useOldLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aMjNU9gm\",\"list-item\":\"T3An6Hoz\",\"listItem\":\"T3An6Hoz\",\"title\":\"dQ9wwFu1\",\"subtitle\":\"m_J41YYl\",\"languages\":\"r3YNWDQr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"WEJIbFQj\",\"closeButton\":\"_vwPuDEM\",\"icon\":\"BUiGM8qZ\",\"title\":\"Q3NhXpNI\",\"description\":\"frZbGQ0G\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiCountryCode } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './CollectibleInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['collectibleInfoModal'];\n};\n\ntype StateProps = {\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst TOP_ICON_SIZE = 60;\n\nconst CollectibleInfoModal: FC<OwnProps & StateProps> = ({\n  modal,\n  phoneCodeList,\n}) => {\n  const {\n    closeCollectibleInfoModal,\n    openChat,\n    openUrl,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const isUsername = modal?.type === 'username';\n\n  const handleClose = useLastCallback(() => {\n    closeCollectibleInfoModal();\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: modal!.peerId });\n    handleClose();\n  });\n\n  const handleOpenUrl = useLastCallback(() => {\n    openUrl({\n      url: modal!.url,\n    });\n    handleClose();\n  });\n\n  const handleCopy = useLastCallback(() => {\n    const text = isUsername ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal!.collectible);\n    copyTextToClipboard(text);\n    showNotification({\n      message: lang(isUsername ? 'UsernameCopied' : 'PhoneCopied'),\n    });\n    handleClose();\n  });\n\n  const title = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameTitle' : 'FragmentPhoneTitle';\n    const formattedCollectible = isUsername\n      ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal.collectible);\n    return lang(key, formattedCollectible);\n  }, [modal, isUsername, phoneCodeList, lang]);\n\n  const description = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameMessage' : 'FragmentPhoneMessage';\n    const date = formatDateAtTime(lang, modal.purchaseDate * 1000);\n    const currency = formatCurrencyAsString(modal.amount, modal.currency, lang.code);\n    const cryptoCurrency = formatCurrencyAsString(modal.cryptoAmount, modal.cryptoCurrency, lang.code);\n    const paid = `${cryptoCurrency} (${currency})`;\n    return lang(key, [date, paid]);\n  }, [modal, isUsername, lang]);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      isSlim\n      contentClassName={styles.content}\n      onClose={closeCollectibleInfoModal}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.icon}>\n        <AnimatedIconWithPreview\n          tgsUrl={isUsername ? LOCAL_TGS_URLS.Mention : LOCAL_TGS_URLS.Fragment}\n          size={TOP_ICON_SIZE}\n        />\n      </div>\n      <h3 className={styles.title}>\n        {title && renderText(title, ['simple_markdown'])}\n      </h3>\n      <PeerChip\n        className={styles.chip}\n        peerId={modal?.peerId}\n        forceShowSelf\n        clickArg={modal?.peerId}\n        onClick={handleOpenChat}\n      />\n      <p className={styles.description}>\n        {description && renderText(description, ['simple_markdown'])}\n      </p>\n      <div className=\"dialog-buttons dialog-buttons-centered\">\n        <Button className=\"confirm-dialog-button\" onClick={handleOpenUrl}>\n          {lang('FragmentUsernameOpen')}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleCopy}>\n          {lang(isUsername ? 'FragmentUsernameCopy' : 'FragmentPhoneCopy')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { countryList } = global;\n\n    return {\n      phoneCodeList: countryList.phoneCodes,\n    };\n  },\n)(CollectibleInfoModal));\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { GlobalState, TabState } from '../../../../global/types';\nimport type { ThemeKey } from '../../../../types';\nimport type { SearchResultKey } from '../../../../util/keys/searchResultKey';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\nimport { selectSharedSettings } from '../../../../global/selectors/sharedState';\n\nexport type StateProps = {\n  theme: ThemeKey;\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: SearchResultKey[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  shouldWarnAboutFiles?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    const { shouldWarnAboutFiles } = selectSharedSettings(global);\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      shouldWarnAboutFiles,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading } from '../../../global/helpers';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const global = getGlobal();\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n\n      const media = selectMessageDownloadableMedia(global, message)!;\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Audio\n              key={message.id}\n              theme={theme}\n              message={message}\n              origin={AudioOrigin.Search}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              date={message.date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n              isDownloading={getIsDownloading(activeDownloads, media)}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback.ts';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  const buttonRef = useRef<HTMLDivElement>();\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  });\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, []);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport { UNMUTE_TIMESTAMP } from '../../../config';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat, selectIsChatPinned, selectNotifyDefaults, selectNotifyException, selectUser,\n} from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  withOpenAppButton?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n  withOpenAppButton,\n  onClick,\n}) => {\n  const { requestMainWebView, updateChatMutedState, openQuickPreview } = getActions();\n  const oldLang = useOldLang();\n\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const handleUnmute = useLastCallback(() => {\n    updateChatMutedState({ chatId, mutedUntil: UNMUTE_TIMESTAMP });\n  });\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleUnmute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    if (e.altKey && chat && !chat.isForum) {\n      e.preventDefault();\n      openQuickPreview({ id: chatId });\n      return;\n    }\n    onClick(chatId);\n  });\n\n  const handleOpenApp = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId: chatId,\n      peerId: chatId,\n      theme,\n    });\n  });\n\n  const buttonRef = useSelectWithEnter(() => {\n    onClick(chatId);\n  });\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo\n          userId={chatId}\n          withUsername={withUsername}\n          avatarSize=\"medium\"\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={chatId}\n          withUsername={withUsername}\n          avatarSize=\"medium\"\n        />\n      )}\n      {withOpenAppButton && user?.hasMainMiniApp && (\n        <Button\n          className=\"ChatBadge miniapp\"\n          pill\n          fluid\n          size=\"tiny\"\n          onClick={handleOpenApp}\n        >\n          {oldLang('BotOpen')}\n        </Button>\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, chatId);\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\n\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst BotAppResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  foundIds,\n  recentBotIds,\n}) => {\n  const {\n    searchPopularBotApps,\n    openChatWithInfo,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n    const recentSet = new Set(recentBotIds);\n    const withoutRecent = foundIds.filter((id) => !recentSet.has(id));\n\n    return filterPeersByQuery({ ids: withoutRecent, query: searchQuery, type: 'user' });\n  }, [foundIds, recentBotIds, searchQuery]);\n\n  const handleChatClick = useLastCallback((id: string) => {\n    openChatWithInfo({ id, shouldReplaceHistory: true });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content custom-scroll\"\n        items={canRenderContents ? filteredFoundIds : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && !filteredFoundIds?.length && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && !searchQuery && Boolean(recentBotIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">\n              {recentBotIds.length > LESS_LIST_ITEMS_AMOUNT && (\n                <Link className=\"Link\" onClick={handleToggleShowMoreMine}>\n                  {lang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n                </Link>\n              )}\n              {lang('SearchAppsMine')}\n            </h3>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_LIST_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n        {canRenderContents && Boolean(filteredFoundIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">{lang('SearchAppsPopular')}</h3>\n            {filteredFoundIds.map((id) => {\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(BotAppResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage,\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n  getPrivateChatUserId,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport { type LangFn } from '../../../util/localization';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const thumbDataUri = useThumbnail(message);\n  const mediaThumbnail = !getMessageSticker(message) ? thumbDataUri : undefined;\n  const mediaHash = useMessageMediaHash(message, 'micro');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(oldLang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n        draggable={false}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {} as Complete<StateProps>;\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      privateChatUser,\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <Icon name=\"calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { selectTopic } from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport TopicIcon from '../../common/TopicIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const { openQuickPreview } = getActions();\n\n  const handleClick = useCallback((e: React.MouseEvent) => {\n    if (e.altKey) {\n      e.preventDefault();\n      openQuickPreview({ id: chatId, threadId: topicId });\n      return;\n    }\n    onClick(topicId);\n  }, [chatId, topicId, onClick, openQuickPreview]);\n\n  const buttonRef = useSelectWithEnter(() => onClick(topicId));\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): Complete<StateProps> => {\n    const topic = selectTopic(global, chatId, topicId);\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openThread } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      if (!searchChatId) return;\n      openThread({ chatId: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            withSticker\n            text={lang('ChatListSearchNoResults')}\n            description={lang('ChatListSearchNoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchResultTopics')}\n            </h3>\n            {foundTopicIds.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSponsoredPeer } from '../../../api/types';\n\nimport { isUserId } from '../../../util/entities/ids';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  sponsoredPeer: ApiSponsoredPeer;\n  observeIntersection?: ObserveFn;\n};\n\nconst LeftSearchResultSponsored: FC<OwnProps> = ({\n  sponsoredPeer,\n  observeIntersection,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const { clickSponsored, viewSponsored, openChat } = getActions();\n  const lang = useLang();\n\n  const {\n    peerId, randomId, additionalInfo, sponsorInfo,\n  } = sponsoredPeer;\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.intersectionRatio === 1) {\n      viewSponsored({ randomId });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    clickSponsored({ randomId });\n    openChat({ id: peerId });\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const {\n    handleClick: handleBadgeClick,\n    handleMouseDown: handleBadgeMouseDown,\n  } = useFastClick((e: React.MouseEvent) => {\n    e.stopPropagation();\n    handleContextMenu(e);\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      ref={ref}\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      buttonRef={buttonRef}\n    >\n      {isUserId(peerId) ? (\n        <PrivateChatInfo\n          userId={peerId}\n          withUsername\n          avatarSize=\"medium\"\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={peerId}\n          withUsername\n          avatarSize=\"medium\"\n        />\n      )}\n      <BadgeButton className=\"search-sponsored-badge\" onMouseDown={handleBadgeMouseDown} onClick={handleBadgeClick}>\n        {lang('SponsoredPeerBadge')}\n        <Icon name=\"more\" />\n      </BadgeButton>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(LeftSearchResultSponsored);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  const topUsersRef = useRef<HTMLDivElement>();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useOldLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              className=\"clear-recent-chats\"\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel={lang('Clear')}\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              withOpenAppButton\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageSearchContext, ApiSponsoredPeer } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { ALL_FOLDER_ID, GLOBAL_SUGGESTED_CHANNELS_ID } from '../../../config';\nimport {\n  isChatChannel,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectSimilarChannelIds, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { unique } from '../../../util/iteratees';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PeerChip from '../../common/PeerChip';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport LeftSearchResultSponsored from './LeftSearchResultSponsored';\nimport RecentContacts from './RecentContacts';\n\nimport './ChatResults.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  isChannelList?: boolean;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  contactIds?: string[];\n  accountPeerIds?: string[];\n  globalPeerIds?: string[];\n  foundIds?: SearchResultKey[];\n  sponsoredPeer?: ApiSponsoredPeer;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  suggestedChannelIds?: string[];\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  isChannelList,\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  contactIds,\n  accountPeerIds,\n  globalPeerIds,\n  foundIds,\n  globalMessagesByChatId,\n  fetchingStatus,\n  suggestedChannelIds,\n  sponsoredPeer,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal,\n    setGlobalSearchChatId, loadChannelRecommendations,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const chatSelectionRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n  const [searchContext, setSearchContext] = useState<ApiMessageSearchContext>('all');\n  const ref = useRef<HTMLDivElement>();\n\n  useEffectOnce(() => {\n    if (isChannelList) loadChannelRecommendations({});\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: isChannelList ? 'channels' : 'text',\n          context: searchContext,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery, searchContext]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  function getSearchContextCaption(context: ApiMessageSearchContext) {\n    if (context === 'users') return lang('PrivateChatsSearchContext');\n    if (context === 'groups') return lang('GroupChatsSearchContext');\n    if (context === 'channels') return lang('ChannelsSearchContext');\n    return lang('AllChatsSearchContext');\n  }\n\n  const {\n    isContextMenuOpen, contextMenuAnchor, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.chatResultsContextMenu .bubble'));\n  const getTriggerElement = useLastCallback(() => ref.current!.querySelector('.menuTrigger'));\n\n  const handleClickContext = useLastCallback((e: React.MouseEvent): void => {\n    handleContextMenu(e);\n  });\n\n  const itemPlaceholderClass = buildClassName('icon', 'iconPlaceholder');\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getMenuElement={getMenuElement}\n        className=\"chatResultsContextMenu\"\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        autoClose\n      >\n        <>\n          <MenuItem\n            icon={searchContext === 'all' ? 'check' : undefined}\n            customIcon={searchContext !== 'all' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('all')}\n          >\n            {getSearchContextCaption('all')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'users' ? 'check' : undefined}\n            customIcon={searchContext !== 'users' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('users')}\n          >\n            {getSearchContextCaption('users')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'groups' ? 'check' : undefined}\n            customIcon={searchContext !== 'groups' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('groups')}\n          >\n            {getSearchContextCaption('groups')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'channels' ? 'check' : undefined}\n            customIcon={searchContext !== 'channels' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('channels')}\n          >\n            {getSearchContextCaption('channels')}\n          </MenuItem>\n        </>\n      </Menu>\n    );\n  }\n\n  const localResults = useMemo(() => {\n    if (!isChannelList && (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2))) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const orderedChatIds = getOrderedIds(ALL_FOLDER_ID) ?? [];\n    const filteredChatIds = orderedChatIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n    const localChatIds = filterPeersByQuery({ ids: filteredChatIds, query: searchQuery, type: 'chat' });\n\n    if (isChannelList) return localChatIds;\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(contactIds || []),\n    ];\n\n    const localContactIds = filterPeersByQuery({\n      ids: contactIdsWithMe, query: searchQuery, type: 'user',\n    });\n\n    const localPeerIds = [\n      ...localContactIds,\n      ...localChatIds,\n    ];\n\n    return unique([\n      ...sortChatIds(localPeerIds, undefined, currentUserId ? [currentUserId] : undefined),\n      ...sortChatIds(accountPeerIds || []),\n    ]);\n  }, [searchQuery, currentUserId, contactIds, accountPeerIds, isChannelList]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length || isChannelList, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalPeerIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const filteredIds = globalPeerIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n\n    return sortChatIds(filteredIds, true);\n  }, [globalPeerIds, isChannelList, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        const chat = chatsById[chatId];\n        if (!chat) return undefined;\n        if (isChannelList && !isChatChannel(chat)) return undefined;\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [searchQuery, searchDate, foundIds, isChannelList, globalMessagesByChatId]);\n\n  useEffect(() => {\n    if (!searchQuery) return;\n    searchMessagesGlobal({\n      type: isChannelList ? 'channels' : 'text',\n      context: searchContext,\n      shouldResetResultsByType: true,\n      shouldCheckFetchingMessagesStatus: true,\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [searchContext]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const actualFoundIds = foundMessages;\n\n  const nothingFound = searchContext === 'all' && fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !actualFoundIds.length;\n  const isMessagesFetching = fetchingStatus?.messages;\n\n  const shouldRenderTopPeers = !searchQuery && !searchDate && !isChannelList;\n\n  const { observe } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n    isDisabled: !shouldRenderTopPeers,\n  });\n\n  if (shouldRenderTopPeers) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  const shouldRenderMessagesSection = searchContext === 'all' ? Boolean(actualFoundIds.length) : true;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"LeftSearch--content custom-scroll\"\n      items={actualFoundIds}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          withSticker\n          text={lang('ChatListSearchNoResults')}\n          description={lang('ChatListSearchNoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && !isChannelList && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PeerChip\n              peerId={id}\n              className=\"left-search-local-suggestion\"\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatListSearchShowLess' : 'ChatListSearchShowMore')}\n              </Link>\n            )}\n            {lang(isChannelList ? 'SearchResultMyChannels' : 'DialogListSearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                withOpenAppButton\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatListSearchShowLess' : 'ChatListSearchShowMore')}\n              </Link>\n            )}\n            {lang('DialogListSearchSectionGlobal')}\n          </h3>\n          {sponsoredPeer && (\n            <LeftSearchResultSponsored sponsoredPeer={sponsoredPeer} observeIntersection={observe} />\n          )}\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(suggestedChannelIds?.length) && !searchQuery && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {lang('SearchResultRecommendedChannels')}\n          </h3>\n          {suggestedChannelIds.map((id) => {\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      <div className=\"menuOwner\" ref={ref}>\n        {renderContextMenu()}\n        {shouldRenderMessagesSection && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {!isChannelList && (\n                <Link className=\"Link menuTrigger dropDownLink\" onClick={handleClickContext}>\n                  {lang('SearchContextCaption', {\n                    type: getSearchContextCaption(searchContext),\n                  }, {\n                    withNodes: true,\n                  })}\n\n                  <Transition\n                    name=\"fade\"\n                    shouldCleanup\n                    activeKey={Number(isMessagesFetching)}\n                    className=\"iconContainer\"\n                    slideClassName=\"iconContainerSlide\"\n                  >\n                    {isMessagesFetching && (<Loading />)}\n                    {!isMessagesFetching && <Icon name=\"down\" />}\n                  </Transition>\n                </Link>\n              )}\n              {lang('SearchMessages')}\n            </h3>\n            {actualFoundIds.map(renderFoundMessage)}\n          </div>\n        )}\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isChannelList }): Complete<StateProps> => {\n    const { userIds: contactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!contactIds) {\n      return {} as Complete<StateProps>;\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType, sponsoredPeer,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: accountPeerIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.[isChannelList ? 'channels' : 'text']?.foundIds;\n    const { similarChannelIds } = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID) || {};\n\n    return {\n      currentUserId,\n      contactIds,\n      accountPeerIds,\n      globalPeerIds,\n      foundIds,\n      globalMessagesByChatId,\n      fetchingStatus,\n      sponsoredPeer,\n      suggestedChannelIds: similarChannelIds,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDocument } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Document from '../../common/Document';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  shouldWarnAboutFiles,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n      const message = globalMessagesByChatId[chatId]?.byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              dir={lang.isRtl ? 'rtl' : undefined}\n              key={message.date}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Document\n              document={getMessageDocument(message)!}\n              message={message}\n              datetime={message.date}\n              smaller\n              sender={getSenderName(lang, message, chatsById, usersById)}\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, message.content.document!)}\n              shouldWarnAboutFiles={shouldWarnAboutFiles}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            dir={lang.isRtl ? 'rtl' : undefined}\n            key={message.id}\n          >\n            <WebLink\n              key={message.id}\n              message={message}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              isProtected={isChatProtected || message.isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport ChatMessage from './ChatMessage';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content LeftSearch--media\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className={classNames}\n        items={canRenderContents ? foundMessages : undefined}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"fHc6WtIe\",\"content\":\"N8GlyYo0\",\"loadingScreen\":\"l7JTscdP\",\"searchButtonContent\":\"dqfofU9e\",\"sticker\":\"bhaEA7Az\",\"title\":\"HkiOz0kI\",\"description\":\"B5FR0TSV\",\"searchButton\":\"Ii0w2ObZ\",\"remainingSearches\":\"fYxU7PVl\",\"searchIcon\":\"NMdA935k\",\"searchIconWithNext\":\"NqAG2PXY\",\"searchQuery\":\"eRsI0lkH\",\"limitTitle\":\"uAggPEqN\",\"limitDescription\":\"oirV9yqd\",\"paidSearchButton\":\"LMu5PMXS\",\"freeSearchUnlock\":\"IdgXsecy\",\"premiumTitle\":\"SBmNHjsL\",\"premiumDescription\":\"KoW3G8Sv\",\"subscribePremiumButton\":\"tGWjYFeK\",\"premiumSubtitle\":\"o2V6uF3Y\"};","import { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSearchPostsFlood } from '../../../api/types';\n\nimport {\n  PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT,\n  PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY,\n} from '../../../config';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_PREVIEW_URLS, LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport { useTransitionActiveKey } from '../../../hooks/animations/useTransitionActiveKey';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport TextTimer from '../../ui/TextTimer';\nimport Transition from '../../ui/Transition';\n\nimport styles from './PublicPostsSearchLauncher.module.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  searchFlood?: ApiSearchPostsFlood;\n  onSearch: () => void;\n  isLoading?: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  starsBalance: number;\n};\n\nconst WAIT_DELAY = 2;\n\nconst PublicPostsSearchLauncher = ({\n  searchQuery,\n  searchFlood,\n  onSearch,\n  isLoading,\n  isCurrentUserPremium,\n  starsBalance,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n  const queryIsFree = searchFlood?.queryIsFree;\n  const queryFromFlood = searchFlood?.query;\n\n  const searchButtonActiveKey = useTransitionActiveKey([searchQuery?.slice(0, 18).trimEnd()]);\n\n  const handleSearchClick = useLastCallback(() => {\n    onSearch();\n  });\n\n  useEffect(() => {\n    if (queryIsFree && searchQuery && queryFromFlood === searchQuery) {\n      onSearch();\n    }\n  }, [queryIsFree, searchQuery, queryFromFlood, onSearch]);\n\n  const handlePaidSearchClick = useLastCallback(() => {\n    const starsAmount = searchFlood?.starsAmount || 0;\n    const currentBalance = starsBalance;\n\n    if (currentBalance < starsAmount) {\n      openStarsBalanceModal({\n        topup: {\n          balanceNeeded: starsAmount,\n        },\n      });\n    } else {\n      onSearch();\n    }\n  });\n\n  const {\n    checkSearchPostsFlood,\n    openPremiumModal,\n    openStarsBalanceModal,\n  } = getActions();\n\n  const onCheckFlood = useLastCallback(() => {\n    checkSearchPostsFlood({});\n  });\n\n  const handleSubscribePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const renderLimitReached = () => {\n    const waitTill = searchFlood?.waitTill;\n    const starsAmount = searchFlood?.starsAmount || PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT;\n    const totalDaily = searchFlood?.totalDaily || PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY;\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <AnimatedIconWithPreview\n            className={styles.sticker}\n            size={120}\n            tgsUrl={LOCAL_TGS_URLS.Search}\n            previewUrl={LOCAL_TGS_PREVIEW_URLS.Search}\n            nonInteractive\n            noLoop={false}\n          />\n          <div className={styles.limitTitle}>\n            {lang('PublicPostsLimitReached')}\n          </div>\n          <div className={styles.limitDescription}>\n            {lang('HintPublicPostsSearchQuota', { count: totalDaily }, { pluralValue: totalDaily })}\n          </div>\n          <Button\n            className={styles.paidSearchButton}\n            color=\"primary\"\n            disabled={!searchQuery}\n            noForcedUpperCase\n            onClick={handlePaidSearchClick}\n          >\n            {lang('PublicPostsSearchForStars', {\n              stars: formatStarsAsIcon(lang, starsAmount, { asFont: true }),\n            }, { withNodes: true })}\n          </Button>\n          {Boolean(waitTill) && (\n            <div className={styles.freeSearchUnlock}>\n              <TextTimer\n                langKey=\"UnlockTimerPublicPostsSearch\"\n                endsAt={waitTill + WAIT_DELAY}\n                onEnd={onCheckFlood}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderSearchButton = () => {\n    const remainingSearches = searchFlood?.remains || 0;\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <AnimatedIconWithPreview\n            className={styles.sticker}\n            size={120}\n            tgsUrl={LOCAL_TGS_URLS.Search}\n            previewUrl={LOCAL_TGS_PREVIEW_URLS.Search}\n            nonInteractive\n            noLoop={false}\n          />\n          <div className={styles.title}>\n            {lang('GlobalSearch')}\n          </div>\n          <div className={styles.description}>\n            {lang('DescriptionPublicPostsSearch')}\n          </div>\n          <Button\n            className={styles.searchButton}\n            color=\"primary\"\n            noForcedUpperCase\n            disabled={!searchQuery}\n            onClick={handleSearchClick}\n          >\n            <Transition\n              name=\"fade\"\n              activeKey={searchButtonActiveKey}\n            >\n              <div className={styles.searchButtonContent}>\n                <Icon\n                  name=\"search\"\n                  className={\n                    buildClassName(styles.searchIcon,\n                      searchQuery && styles.searchIconWithNext)\n                  }\n                />\n                {lang('ButtonSearchPublicPosts', {\n                  query: searchQuery ? <span className={styles.searchQuery}>{searchQuery}</span> : '',\n                }, { withNodes: true })}\n                {searchQuery && <Icon name=\"next\" className={styles.nextIcon} />}\n              </div>\n            </Transition>\n          </Button>\n          <div className={styles.remainingSearches}>\n            {lang('RemainingPublicPostsSearch', { count: remainingSearches }, { pluralValue: remainingSearches })}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderPremiumRequired = () => {\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <div className={styles.premiumTitle}>\n            {lang('GlobalSearch')}\n          </div>\n          <div className={styles.premiumDescription}>\n            {lang('PublicPostsPremiumFeatureDescription')}\n          </div>\n          <Button\n            className={styles.subscribePremiumButton}\n            color=\"primary\"\n            noForcedUpperCase\n            onClick={handleSubscribePremiumClick}\n          >\n            {lang('PublicPostsSubscribeToPremium')}\n          </Button>\n          <div className={styles.premiumSubtitle}>\n            {lang('PublicPostsPremiumFeatureSubtitle')}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const serverTime = getServerTime();\n  const shouldRenderPaidScreen = searchFlood?.remains === 0\n    || (searchFlood?.waitTill && searchFlood.waitTill > serverTime);\n\n  const renderLoading = () => {\n    return (\n      <div className={styles.container}>\n        <div className={buildClassName(styles.content, styles.loadingScreen)}>\n          <Loading />\n        </div>\n      </div>\n    );\n  };\n\n  const getActiveKey = () => {\n    if (!isCurrentUserPremium) {\n      return 3;\n    }\n    if (isLoading) {\n      return 2;\n    }\n    if (shouldRenderPaidScreen) {\n      return 0;\n    }\n    return 1;\n  };\n\n  const renderContent = () => {\n    if (!isCurrentUserPremium) {\n      return renderPremiumRequired();\n    }\n    if (isLoading) {\n      return renderLoading();\n    }\n    if (shouldRenderPaidScreen) {\n      return renderLimitReached();\n    }\n    return renderSearchButton();\n  };\n\n  return (\n    <Transition\n      name=\"fade\"\n      activeKey={getActiveKey()}\n    >\n      {renderContent()}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => ({\n  isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  starsBalance: global.stars?.balance?.amount || 0,\n}))(PublicPostsSearchLauncher));\n","import { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiSearchPostsFlood } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport PublicPostsSearchLauncher from './PublicPostsSearchLauncher.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  searchFlood?: ApiSearchPostsFlood;\n  shouldShowSearchLauncher?: boolean;\n  isNothingFound?: boolean;\n  isLoading?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst PublicPostsResults = ({\n  searchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  searchFlood,\n  shouldShowSearchLauncher,\n  isNothingFound,\n  isLoading,\n  animationLevel,\n}: OwnProps & StateProps) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n\n  const handleSearch = useLastCallback(() => {\n    if (!searchQuery) return;\n\n    searchMessagesGlobal({\n      type: 'publicPosts',\n      shouldResetResultsByType: true,\n    });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'publicPosts',\n        });\n      });\n    }\n  }, []);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        key={`${message.chatId}-${message.id}`}\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  return (\n    <Transition\n      name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n      activeKey={shouldShowSearchLauncher || isLoading ? 0 : 1}\n    >\n      {shouldShowSearchLauncher || isLoading ? (\n        <PublicPostsSearchLauncher\n          searchQuery={searchQuery}\n          searchFlood={searchFlood}\n          onSearch={handleSearch}\n          isLoading={isLoading}\n        />\n      ) : (\n        <div className=\"LeftSearch--content\">\n          <InfiniteScroll\n            key={searchQuery}\n            className=\"search-content custom-scroll chat-list\"\n            items={foundMessages}\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {isNothingFound && (\n              <NothingFound\n                text={lang('ChatListSearchNoResults')}\n                description={lang('ChatListSearchNoResultsDescription')}\n                withSticker\n              />\n            )}\n            {Boolean(foundMessages.length) && (\n              <div className=\"pb-2\">\n                <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n                  {lang('PublicPosts')}\n                </h3>\n                {foundMessages.map(renderFoundMessage)}\n              </div>\n            )}\n          </InfiniteScroll>\n        </div>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { messages: { byChatId: globalMessagesByChatId } } = global;\n    const { resultsByType, searchFlood, fetchingStatus } = selectTabState(global).globalSearch;\n    const publicPostsResult = resultsByType?.publicPosts;\n    const { foundIds } = publicPostsResult || {};\n    const isLoading = Boolean(fetchingStatus?.publicPosts && !publicPostsResult);\n    const shouldShowSearchLauncher = !publicPostsResult && !isLoading;\n    const isNothingFound = publicPostsResult && !foundIds?.length;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      foundIds,\n      globalMessagesByChatId,\n      searchFlood,\n      shouldShowSearchLauncher,\n      isNothingFound,\n      isLoading,\n      animationLevel,\n    };\n  },\n)(PublicPostsResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { RegularLangKey } from '../../../types/language';\nimport { type AnimationLevel, GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { parseDateString } from '../../../util/dates/dateFormat';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport AudioResults from './AudioResults';\nimport BotAppResults from './BotAppResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport ChatResults from './ChatResults';\nimport FileResults from './FileResults';\nimport LinkResults from './LinkResults';\nimport MediaResults from './MediaResults';\nimport PublicPostsResults from './PublicPostsResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n  animationLevel: AnimationLevel;\n};\n\ntype TabInfo = {\n  type: GlobalSearchContent;\n  key: RegularLangKey;\n};\n\nconst TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabChats' },\n  { type: GlobalSearchContent.ChannelList, key: 'SearchTabChannels' },\n  { type: GlobalSearchContent.BotApps, key: 'SearchTabApps' },\n  { type: GlobalSearchContent.PublicPosts, key: 'SearchTabPublicPosts' },\n  { type: GlobalSearchContent.Media, key: 'SearchTabMedia' },\n  { type: GlobalSearchContent.Links, key: 'SearchTabLinks' },\n  { type: GlobalSearchContent.Files, key: 'SearchTabFiles' },\n  { type: GlobalSearchContent.Music, key: 'SearchTabMusic' },\n  { type: GlobalSearchContent.Voice, key: 'SearchTabVoice' },\n];\n\nconst CHAT_TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabMessages' },\n  ...TABS.slice(3), // Skip ChatList, ChannelList and BotApps, replaced with All Messages\n];\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n    checkSearchPostsFlood,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  useEffect(() => {\n    if (isActive) {\n      checkSearchPostsFlood({});\n    }\n  }, [isActive]);\n\n  const tabs = useMemo(() => {\n    const arr = chatId ? CHAT_TABS : TABS;\n    return arr.map((tab) => ({\n      ...tab,\n      title: lang(tab.key),\n    }));\n  }, [chatId, lang]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    const tab = tabs[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  });\n\n  const handleSearchDateSelect = useLastCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const containerRef = useRef<HTMLDivElement>();\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n        renderCount={tabs.length}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n            case GlobalSearchContent.ChannelList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  isChannelList={currentContent === GlobalSearchContent.ChannelList}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.BotApps:\n              return (\n                <BotAppResults\n                  key=\"botApps\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.PublicPosts:\n              return (\n                <PublicPostsResults\n                  key=\"publicPosts\"\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return { currentContent, chatId, animationLevel };\n  },\n)(LeftSearch));\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { unique } from '../../../../util/iteratees';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Loading from '../../../ui/Loading';\n\ntype StateProps = {\n  maxChats: number;\n};\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n  maxChats,\n}) => {\n  const lang = useOldLang();\n\n  const { openLimitReachedModal } = getActions();\n\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = useMemo(() => selectChatFilters(state, mode, true), [mode, state]);\n  const chatTypes = mode === 'included' ? CUSTOM_PEER_INCLUDED_CHAT_TYPES : CUSTOM_PEER_EXCLUDED_CHAT_TYPES;\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  const displayedIds = useMemo(() => {\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...filterPeersByQuery({ ids: chatIds, query: chatFilter, type: 'chat' }),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, chatFilter]);\n\n  const handleFilterChange = useLastCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n    setIsTouched(true);\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    if (mode === 'included') {\n      if (ids.length >= maxChats) {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  const handleSelectedChatTypesChange = useLastCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"Picker settings-folders-chat-list\">\n      <PeerPicker\n        categories={shouldHideChatTypes ? undefined : chatTypes}\n        itemIds={displayedIds}\n        selectedIds={selectedChatIds}\n        selectedCategories={selectedChatTypes}\n        filterValue={chatFilter}\n        filterPlaceholder={lang('Search')}\n        categoryPlaceholderKey=\"FilterChatTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        withDefaultPadding\n        withPeerTypes\n        allowMultiple\n        itemInputType=\"checkbox\"\n        onSelectedIdsChange={handleSelectedIdsChange}\n        onSelectedCategoriesChange={handleSelectedChatTypesChange}\n        onFilterChange={handleFilterChange}\n      />\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatFilters));\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { FOLDER_TITLE_MAX_LENGTH, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isUserId } from '../../../../util/entities/ids';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { getApiPeerColorClass } from '../../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport Icon from '../../../common/icons/Icon';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n  isCurrentUserPremium: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst FOLDER_COLORS = [0, 1, 2, 3, 4, 5, 6];\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n  isCurrentUserPremium,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'included'), [state]);\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'excluded'), [state]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? CUSTOM_PEER_INCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key)\n      : CUSTOM_PEER_EXCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.type}\n        className=\"settings-folders-list-item mb-1\"\n        narrow\n        inactive\n      >\n        <PrivateChatInfo\n          avatarSize=\"small\"\n          customPeer={chatType}\n        />\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ListItem\n            key=\"load-more\"\n            className=\"settings-folders-list-item\"\n            narrow\n\n            onClick={clickHandler}\n            icon=\"down\"\n          >\n            {lang('FilterShowMoreChats', leftChatsCount, 'i')}\n          </ListItem>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIconWithPreview\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title.text}\n            maxLength={FOLDER_TITLE_MAX_LENGTH}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3 color-picker-title\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterColorTitle')}\n            <div className={buildClassName(\n              'color-picker-selected-color',\n              isCurrentUserPremium && state.folder.color !== undefined && state.folder.color !== -1\n                ? getApiPeerColorClass({ color: state.folder.color })\n                : 'color-picker-item-disabled',\n            )}\n            >\n              {renderTextWithEntities({\n                text: state.folder.title.text,\n                entities: state.folder.title.entities,\n                noCustomEmojiPlayback: state.folder.noTitleAnimations,\n              })}\n            </div>\n          </h4>\n          <div className=\"color-picker\">\n            {FOLDER_COLORS.map((color) => (\n              <button\n                key={color}\n                type=\"button\"\n                onClick={() => {\n                  if (!isCurrentUserPremium) {\n                    openPremiumModal();\n                    return;\n                  }\n\n                  dispatch({ type: 'setColor', payload: color });\n                }}\n                className={buildClassName(\n                  'color-picker-item',\n                  getApiPeerColorClass({ color }),\n                  !isCurrentUserPremium && 'color-picker-item-hover-disabled',\n                  color === state.folder.color && isCurrentUserPremium && 'color-picker-item-active',\n                )}\n              />\n            ))}\n            <button\n              type=\"button\"\n              onClick={() => {\n                if (!isCurrentUserPremium) {\n                  openPremiumModal();\n                  return;\n                }\n\n                dispatch({ type: 'setColor', payload: undefined });\n              }}\n              className={buildClassName(\n                'color-picker-item',\n                'color-picker-item-none',\n                (state.folder.color === undefined || state.folder.color === -1 || !isCurrentUserPremium)\n                && 'color-picker-item-active',\n              )}\n            >\n              {isCurrentUserPremium ? (\n                <Icon name=\"close\" className=\"color-picker-item-none-icon\" />\n              ) : (\n                <Icon name=\"lock-badge\" className=\"color-picker-item-none-icon\" />\n              )}\n            </button>\n          </div>\n          <p className=\"settings-item-description mb-0\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterColorHint')}\n          </p>\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary\"\n            icon=\"add\"\n            narrow\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item\"\n              icon=\"link\"\n              narrow\n              multiline\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): Complete<StateProps> => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n      isCurrentUserPremium,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isBetween } from '../../../../util/math';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { getApiPeerColorClass } from '../../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport usePreviousDeprecated from '../../../../hooks/usePreviousDeprecated';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport Draggable from '../../../ui/Draggable';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n  areTagsEnabled?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 56;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n  areTagsEnabled,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n    toggleDialogFilterTags,\n    openPremiumModal,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePreviousDeprecated(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: lang('FilterAllChats'),\n            entities: [],\n          },\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n        color: folder.color,\n        noTitleAnimations: folder.noTitleAnimations,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleToggleTags = useCallback(() => {\n    if (!isPremium) {\n      return;\n    }\n\n    toggleDialogFilterTags({ isEnabled: !areTagsEnabled });\n  }, [areTagsEnabled, isPremium, toggleDialogFilterTags]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIconWithPreview\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Move icon into button prop\n            className=\"settings-button with-icon\"\n            color=\"primary\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <Icon name=\"add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            const shouldRenderColor = folder?.color !== undefined && folder.color !== -1 && isPremium;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                    allowSelection\n                  >\n                    <span className=\"title\">\n                      {renderTextWithEntities({\n                        text: folder.title.text,\n                        entities: folder.title.entities,\n                        noCustomEmojiPlayback: folder.noTitleAnimations,\n                      })}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: ${shouldRenderColor ? '3.5rem' : '3rem'};`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                    {isBlocked && <Icon name=\"lock-badge\" className=\"settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <Icon name=\"link\" className=\"mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n\n                  {\n                    shouldRenderColor && (\n                      <div className={buildClassName(\n                        'settings-folders-color-circle',\n                        getApiPeerColorClass({ color: folder.color }),\n                      )}\n                      />\n                    )\n                  }\n\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              {lang('SettingsFoldersEmpty')}\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              narrow\n\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                  </span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n      <div className=\"settings-item pt-3\">\n        <div className=\"settings-item-relative\">\n          <Checkbox\n            label={lang('ShowFolderTags')}\n            subLabel={lang('ShowFolderTagsHint')}\n            checked={isPremium && areTagsEnabled}\n            onChange={handleToggleTags}\n            onClickLabel={(event) => {\n              if (!isPremium) {\n                event.preventDefault();\n                openPremiumModal();\n              }\n            }}\n          />\n          {!isPremium && <Icon name=\"lock-badge\" className=\"settings-folders-lock-icon\" />}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n      areTagsEnabled,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      areTagsEnabled,\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { partition } from '../../../../util/iteratees';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Icon from '../../../common/icons/Icon';\nimport LinkField from '../../../common/LinkField';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  folder?: ApiChatFolder;\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  folder,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (folder?.includedChatIds || []).concat(folder?.pinnedChatIds || []);\n  }, [folder?.includedChatIds, folder?.pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        {folder && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('FolderLinkTitleDescription', {\n              folder: renderTextWithEntities({\n                text: folder.title.text,\n                entities: folder.title.entities,\n                noCustomEmojiPlayback: folder.noTitleAnimations,\n              }),\n              chats: lang('FolderLinkTitleDescriptionChats', { count: chatsCount }, { pluralValue: chatsCount }),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n          </p>\n        )}\n      </div>\n\n      <LinkField\n        className=\"settings-item\"\n        link={!url ? oldLang('Loading') : url}\n        withShare\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-picker\">\n        <PeerPicker\n          itemIds={itemIds}\n          lockedUnselectedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      folder,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n    openSettingsScreen,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  }, [state.mode, dispatch, currentScreen, onReset]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title: { text: title } } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    dispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [dispatch, handleReset]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n  }, [dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n  }, [dispatch]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersIncludedChatsFromChatList\n        : SettingsScreens.FoldersIncludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersExcludedChatsFromChatList\n        : SettingsScreens.FoldersExcludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [dispatch, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PasswordForm from '../../common/PasswordForm';\nimport PasswordMonkey from '../../common/PasswordMonkey';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  isActive?: boolean;\n  onSubmit: (password: string) => void;\n  onClearError?: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder,\n  hint,\n  submitLabel,\n  onSubmit,\n  onClearError,\n  onReset,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const lang = useLang();\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(lang('SettingsPasswordEqual'));\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword, lang]);\n\n  const handleClearError = useCallback(() => {\n    if (onClearError) {\n      onClearError();\n    }\n    setValidationError('');\n  }, [onClearError]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder || lang('CurrentPasswordPlaceholder')}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel}\n          onClearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useOldLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent })}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeTurnOff })}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onStart: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          {lang('SettingsPasscodeStart1', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SettingsPasscodeStart2', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { decryptSession } from '../../../../util/passcode';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n  }, [onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeCongratulations });\n  }, [onSetPasscode, passcode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onSetPasscode]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      openSettingsScreen({ screen: SettingsScreens.Privacy });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          onClearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          onClearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => ({ ...global.passcode } as Complete<StateProps>),\n)(SettingsPasscode));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../icons/Icon';\n\ntype OwnProps = {\n  min?: number;\n  max: number;\n  value: number;\n  disabled?: boolean;\n  readOnly?: boolean;\n  bold?: boolean;\n  className?: string;\n  defaultValue: number;\n  onChange: (value: number) => void;\n  canChangeChargeForMessages?: boolean;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst PaidMessageSlider: FC<OwnProps> = ({\n  min = 0,\n  max,\n  value,\n  disabled,\n  readOnly,\n  bold,\n  className,\n  defaultValue,\n  onChange,\n  canChangeChargeForMessages,\n}) => {\n  const lang = useLang();\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < max) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= max) {\n        result.push(max);\n        break;\n      }\n    }\n\n    return result;\n  }, [max]);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    onChange(getValue(points, newValue));\n  });\n\n  const mainClassName = buildClassName(\n    className,\n    'RangeSlider',\n    disabled && 'disabled',\n    readOnly && 'readOnly',\n    bold && 'bold',\n  );\n\n  function renderTopRow() {\n    return (\n      <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"value-min\" dir=\"auto\">{lang.number(min)}</span>\n        <span className=\"settings-range-value\">\n          {!canChangeChargeForMessages && (<Icon name=\"lock-badge\" />)}\n          {formatStarsAsText(lang, getValue(points, getProgress(points, value)))}\n        </span>\n        <span className=\"value-max\" dir=\"auto\">{lang.number(max)}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={mainClassName}>\n      {renderTopRow()}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          style={`width: ${(getProgress(points, value) / points.length) * 100}%`}\n        />\n        <input\n          min={0}\n          max={points.length}\n          defaultValue={getProgress(points, defaultValue)}\n          step=\"any\"\n          type=\"range\"\n          className=\"RangeSlider__input\"\n          onChange={handleChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const pointValue = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return pointValue < 100 ? Math.round(pointValue) : Math.round(pointValue / 10) * 10;\n}\n\nexport default memo(PaidMessageSlider);\n","import {\n  memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n  MINIMUM_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPercent } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Icon from '../icons/Icon';\nimport PaidMessageSlider from './PaidMessageSlider';\n\ntype OwnProps = {\n  chargeForMessages: number;\n  canChangeChargeForMessages?: boolean;\n  isGroupChat?: boolean;\n  onChange: (value: number) => void;\n};\n\ntype StateProps = {\n  starsUsdWithdrawRate: number;\n  starsPaidMessageAmountMax: number;\n  starsPaidMessageCommissionPermille: number;\n};\n\nfunction PaidMessagePrice({\n  starsUsdWithdrawRate,\n  starsPaidMessageAmountMax,\n  starsPaidMessageCommissionPermille,\n  canChangeChargeForMessages,\n  isGroupChat,\n  chargeForMessages,\n  onChange,\n}: OwnProps & StateProps) {\n  const { openPremiumModal } = getActions();\n\n  const lang = useLang();\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    onChange?.(value);\n  });\n\n  const handleUnlockWithPremium = useLastCallback(() => {\n    openPremiumModal({ initialSection: 'message_privacy' });\n  });\n\n  return (\n    <>\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('SectionTitleStarsForForMessages')}\n      </h4>\n      <PaidMessageSlider\n        defaultValue={chargeForMessages}\n        min={MINIMUM_CHARGE_FOR_MESSAGES}\n        max={starsPaidMessageAmountMax}\n        value={chargeForMessages}\n        onChange={handleChargeForMessagesChange}\n        canChangeChargeForMessages={canChangeChargeForMessages}\n        readOnly={!canChangeChargeForMessages}\n      />\n      {!canChangeChargeForMessages && (\n        <Button\n          color=\"primary\"\n          fluid\n          noForcedUpperCase\n          className=\"settings-unlock-button\"\n          onClick={handleUnlockWithPremium}\n        >\n          <span className=\"settings-unlock-button-title\">\n            {lang('UnlockButtonTitle')}\n            <Icon name=\"lock-badge\" className=\"settings-unlock-button-icon\" />\n          </span>\n        </Button>\n      )}\n      {canChangeChargeForMessages && (\n        <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang(isGroupChat ? 'SetPriceGroupDescription' : 'SectionDescriptionStarsForForMessages', {\n            percent: formatPercent(starsPaidMessageCommissionPermille * 100),\n            amount: formatCurrencyAsString(\n              chargeForMessages * starsUsdWithdrawRate * starsPaidMessageCommissionPermille,\n              'USD',\n              lang.code,\n            ),\n          }, {\n            withNodes: true,\n          })}\n        </p>\n      )}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const starsUsdWithdrawRateX1000 = global.appConfig.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n    const configStarsPaidMessageCommissionPermille = global.appConfig.starsPaidMessageCommissionPermille;\n    const starsPaidMessageCommissionPermille = configStarsPaidMessageCommissionPermille\n      ? configStarsPaidMessageCommissionPermille / 1000 : 100;\n\n    return {\n      starsPaidMessageCommissionPermille,\n      starsUsdWithdrawRate,\n      starsPaidMessageAmountMax: global.appConfig.starsPaidMessageAmountMax || DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(PaidMessagePrice));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPremiumSection } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  premiumSection?: ApiPremiumSection;\n};\n\nfunction PremiumStatusItem({ premiumSection }: OwnProps) {\n  const { openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal({ initialSection: premiumSection }));\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n        onClick={handleOpenPremiumModal}\n      >\n        {lang('PrivacyLastSeenPremium')}\n      </ListItem>\n      <p\n        className=\"settings-item-description-larger premium-info\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {lang('lng_messages_privacy_premium_about')}\n      </p>\n    </div>\n  );\n}\n\nexport default memo(PremiumStatusItem);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './PrivacyLockedOption.module.scss';\n\ntype OwnProps = {\n  label: string;\n  isChecked?: boolean;\n};\n\nfunction PrivacyLockedOption({ label, isChecked }: OwnProps) {\n  const lang = useOldLang();\n  const { showNotification } = getActions();\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        isChecked && styles.checked,\n      )}\n      onClick={() => showNotification({ message: lang('OptionPremiumRequiredMessage') })}\n    >\n      <span>{label}</span>\n      <Icon name=\"lock-badge\" className={styles.lockIcon} />\n    </div>\n  );\n}\n\nexport default memo(PrivacyLockedOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sBptmiga\",\"lock-icon\":\"jWxrRbkh\",\"lockIcon\":\"jWxrRbkh\",\"checked\":\"U_6O1ebL\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectNewNoncontactPeersRequirePremium,\n  selectNonContactPeersPaidStars,\n} from '../../../global/selectors';\n\nimport useDebouncedCallback from '../../../hooks/useDebouncedCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages?: boolean;\n  canLimitNewMessagesWithoutPremium?: boolean;\n  canChargeForMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  nonContactPeersPaidStars: number;\n  noPaidReactionsForUsersCount: number;\n  privacy: GlobalState['settings']['privacy'];\n};\n\nfunction PrivacyMessages({\n  isActive,\n  canLimitNewMessagesWithoutPremium,\n  canChargeForMessages,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  nonContactPeersPaidStars,\n  isCurrentUserPremium,\n  noPaidReactionsForUsersCount,\n  onReset,\n  privacy,\n}: OwnProps & StateProps) {\n  const { updateGlobalPrivacySettings, openSettingsScreen, showNotification } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const canChangeForContactsAndPremium = isCurrentUserPremium || canLimitNewMessagesWithoutPremium;\n  const canChangeChargeForMessages = isCurrentUserPremium && canChargeForMessages;\n  const [chargeForMessages, setChargeForMessages] = useState<number>(nonContactPeersPaidStars);\n  const [hasShownNotification, setHasShownNotification] = useState(false);\n\n  const selectedValue = useMemo(() => {\n    if (shouldChargeForMessages) return 'charge_for_messages';\n    if (shouldNewNonContactPeersRequirePremium) return 'contacts_and_premium';\n    return 'everybody';\n  }, [shouldChargeForMessages, shouldNewNonContactPeersRequirePremium]);\n\n  useEffectWithPrevDeps(([prevSelectedValue]) => {\n    if (\n      !hasShownNotification && prevSelectedValue !== undefined\n      && selectedValue !== 'everybody'\n      && selectedValue !== prevSelectedValue\n    ) {\n      if (privacy.chatInvite?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyInviteText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyGroupChats },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      if (privacy.phoneCall?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyCallsText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyPhoneCall },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      setHasShownNotification(true);\n    }\n  }, [selectedValue, shouldChargeForMessages, privacy, lang, hasShownNotification]);\n\n  const options = useMemo(() => {\n    return [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts_and_premium',\n        label: canChangeForContactsAndPremium ? (\n          oldLang('PrivacyMessagesContactsAndPremium')\n        ) : (\n          <PrivacyLockedOption\n            label={oldLang('PrivacyMessagesContactsAndPremium')}\n            isChecked={selectedValue === 'contacts_and_premium'}\n          />\n        ),\n        hidden: !canChangeForContactsAndPremium,\n        isCanCheckedInDisabled: true,\n      },\n      {\n        value: 'charge_for_messages',\n        label: canChangeChargeForMessages ? (\n          lang('PrivacyChargeForMessages')\n        ) : (\n          <PrivacyLockedOption\n            label={lang('PrivacyChargeForMessages')}\n            isChecked={selectedValue === 'charge_for_messages'}\n          />\n        ),\n        hidden: !canChangeChargeForMessages,\n        isCanCheckedInDisabled: true,\n      },\n    ];\n  }, [oldLang, lang, canChangeForContactsAndPremium, canChangeChargeForMessages, selectedValue]);\n\n  const handleChange = useLastCallback((privacyValue: string) => {\n    updateGlobalPrivacySettings({\n      shouldNewNonContactPeersRequirePremium: privacyValue === 'contacts_and_premium',\n      // eslint-disable-next-line no-null/no-null\n      nonContactPeersPaidStars: privacyValue === 'charge_for_messages' ? chargeForMessages : null,\n    });\n  });\n\n  const updateGlobalPrivacySettingsWithDebounced = useDebouncedCallback((value: number) => {\n    updateGlobalPrivacySettings({\n      nonContactPeersPaidStars: value,\n    });\n  }, [updateGlobalPrivacySettings], 300, true);\n\n  const handleChargeForMessagesChange = useCallback((value: number) => {\n    setChargeForMessages(value);\n    updateGlobalPrivacySettingsWithDebounced(value);\n  }, [setChargeForMessages, updateGlobalPrivacySettingsWithDebounced]);\n\n  function renderSectionNoPaidMessagesForUsers() {\n    const itemSubtitle = !noPaidReactionsForUsersCount ? lang('SubtitlePrivacyAddUsers')\n      : oldLang('Users', noPaidReactionsForUsersCount, 'i');\n\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('RemoveFeeTitle')}\n        </h4>\n        <ListItem\n          narrow\n          icon=\"delete-user\"\n\n          onClick={() => {\n            openSettingsScreen({ screen: SettingsScreens.PrivacyNoPaidMessages });\n          }}\n        >\n          <div className=\"multiline-item full-size\">\n            <span className=\"title\">{lang('ExceptionTitlePrivacyChargeForMessages')}</span>\n            <span className=\"subtitle\">\n              {\n                itemSubtitle\n              }\n            </span>\n          </div>\n        </ListItem>\n      </div>\n    );\n  }\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const privacyDescription = useMemo(() => {\n    if (shouldChargeForMessages) return lang('PrivacyDescriptionChargeForMessages');\n    return lang('PrivacyDescriptionMessagesContactsAndPremium');\n  }, [shouldChargeForMessages, lang]);\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('PrivacyMessagesTitle')}\n        </h4>\n        <RadioGroup\n          name=\"privacy-messages\"\n          options={options}\n          onChange={handleChange}\n          selected={selectedValue}\n        />\n        <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {privacyDescription}\n        </p>\n      </div>\n      {selectedValue === 'charge_for_messages' && (\n        <div className=\"settings-item fluid-container\">\n          <PaidMessagePrice\n            canChangeChargeForMessages={canChangeChargeForMessages}\n            chargeForMessages={chargeForMessages}\n            onChange={handleChargeForMessagesChange}\n          />\n        </div>\n      )}\n      {canChangeChargeForMessages && selectedValue === 'charge_for_messages' && renderSectionNoPaidMessagesForUsers()}\n      {!isCurrentUserPremium && selectedValue !== 'charge_for_messages'\n        && <PremiumStatusItem premiumSection=\"message_privacy\" />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    settings: {\n      privacy,\n    },\n  } = global;\n  const nonContactPeersPaidStars = selectNonContactPeersPaidStars(global);\n\n  const noPaidReactionsForUsersCount = global.settings.privacy.noPaidMessages?.allowUserIds.length || 0;\n\n  return {\n    shouldNewNonContactPeersRequirePremium: selectNewNoncontactPeersRequirePremium(global),\n    shouldChargeForMessages: Boolean(nonContactPeersPaidStars),\n    nonContactPeersPaidStars: nonContactPeersPaidStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    canLimitNewMessagesWithoutPremium: global.appConfig.canLimitNewMessagesWithoutPremium,\n    canChargeForMessages: global.appConfig.starsPaidMessagesAvailable,\n    noPaidReactionsForUsersCount,\n    privacy,\n  };\n})(PrivacyMessages));\n","import type { ApiSession } from '../../../../api/types';\nimport type { DeviceType } from '../../../../types/icons/device';\n\nexport default function getSessionIcon(session: ApiSession): DeviceType {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"M84mrPgu\",\"settingsActiveSession\":\"M84mrPgu\",\"iconDevice\":\"Add8P_K4\",\"iconDevice__android\":\"onkXVGY4\",\"iconDeviceAndroid\":\"onkXVGY4\",\"iconDevice__apple\":\"xw13aT8u\",\"iconDeviceApple\":\"xw13aT8u\",\"iconDevice__brave\":\"HESrGUdv\",\"iconDeviceBrave\":\"HESrGUdv\",\"iconDevice__chrome\":\"Vpej7wm7\",\"iconDeviceChrome\":\"Vpej7wm7\",\"iconDevice__edge\":\"ueWE77x9\",\"iconDeviceEdge\":\"ueWE77x9\",\"iconDevice__firefox\":\"_lMTmvya\",\"iconDeviceFirefox\":\"_lMTmvya\",\"iconDevice__linux\":\"cDVfvyG_\",\"iconDeviceLinux\":\"cDVfvyG_\",\"iconDevice__opera\":\"nWqlTxZt\",\"iconDeviceOpera\":\"nWqlTxZt\",\"iconDevice__safari\":\"ldFLp1Gf\",\"iconDeviceSafari\":\"ldFLp1Gf\",\"iconDevice__samsung\":\"VHNORBGL\",\"iconDeviceSamsung\":\"VHNORBGL\",\"iconDevice__ubuntu\":\"QBVivtdu\",\"iconDeviceUbuntu\":\"QBVivtdu\",\"iconDevice__unknown\":\"GbjIgrwU\",\"iconDeviceUnknown\":\"GbjIgrwU\",\"iconDevice__vivaldi\":\"yieVnjoI\",\"iconDeviceVivaldi\":\"yieVnjoI\",\"iconDevice__windows\":\"_0dnTFOE\",\"iconDeviceWindows\":\"_0dnTFOE\",\"iconDevice__xbox\":\"fbCjjDpU\",\"iconDeviceXbox\":\"fbCjjDpU\",\"title\":\"c6edjhlh\",\"note\":\"lRqTZAYn\",\"date\":\"oLnN6crs\",\"box\":\"wVEXuPlZ\",\"actionHeader\":\"olQS2T1n\",\"actionName\":\"KuX1APpO\",\"headerButton\":\"VT8pZfMu\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreviewTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreviewTerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettingsLastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreviewApp')}</dt>\n        <dd>\n          {renderingSession?.appName}\n          {' '}\n          {renderingSession?.appVersion}\n          ,\n          {' '}\n          {renderingSession?.platform}\n          {' '}\n          {renderingSession?.systemVersion}\n        </dd>\n        {renderingSession?.ip && (\n          <>\n            <dt>{lang('SessionPreviewIp')}</dt>\n            <dd>{renderingSession.ip}</dd>\n          </>\n        )}\n\n        <dt>{lang('SessionPreviewLocation')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreviewIpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessionsViewAcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreviewAcceptSecret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreviewAcceptCalls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['activeSessions'];\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', { count: 1 }, { pluralValue: 1 }),\n      value: '7',\n    }, {\n      label: lang('Months', { count: 1 }, { pluralValue: 1 }),\n      value: '30',\n    }, {\n      label: lang('Months', { count: 3 }, { pluralValue: 3 }),\n      value: '90',\n    }, {\n      label: lang('Months', { count: 6 }, { pluralValue: 6 }),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', { count: 1 }, { pluralValue: 1 }),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessionsCurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)}`} iconClassName=\"icon-device\">\n          <div className=\"multiline-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName}\n              {' '}\n              {session.appVersion}\n              ,\n              {' '}\n              {session.platform}\n              {' '}\n              {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">\n              {session.ip}\n              {' '}\n              -\n              {' '}\n              {getLocation(session)}\n            </span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p className=\"settings-item-description-larger\">{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: lang('SessionTerminate'),\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)}`}\n        iconClassName=\"icon-device\"\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(oldLang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName}\n            {' '}\n            {session.appVersion}\n            ,\n            {' '}\n            {session.platform}\n            {' '}\n            {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">\n            {session.ip}\n            {' '}\n            {getLocation(session)}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => global.activeSessions as Complete<StateProps>,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wd0fmiSY\",\"avatar\":\"OhZHdRsP\",\"title\":\"EQ7__xGn\",\"note\":\"YRYk96ki\",\"box\":\"kmCTIfvf\",\"action-header\":\"qkq5Fa0V\",\"actionHeader\":\"qkq5Fa0V\",\"action-name\":\"zFYUiy13\",\"actionName\":\"zFYUiy13\",\"header-button\":\"lUf0RJ2h\",\"headerButton\":\"lUf0RJ2h\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): Complete<StateProps> => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"v0wP46TR\",\"clear-help\":\"WnnxcARX\",\"clearHelp\":\"WnnxcARX\",\"subtitle\":\"uEUfjByC\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}\n            ,\n            {session.browser}\n            ,\n            {session.platform}\n          </span>\n          <span className={buildClassName('subtitle', styles.subtitle)}>\n            {session.ip}\n            {' '}\n            {session.region}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\nconst STICKER_SET_CARD_HEIGHT = 56;\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useLastCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  });\n\n  if (!stickerSet?.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      className={buildClassName('StickerSetCard', 'small-icon', className)}\n      style={`height: ${STICKER_SET_CARD_HEIGHT}px;`}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', {\n      limit: lang('FileSizeMB', { count: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] }),\n    });\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettingsContacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsPrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsGroupChats')}\n          checked={canAutoLoadInGroups}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsChannels')}\n          checked={canAutoLoadInChannels}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadFilesTitle'),\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ys1i4ssl\",\"item\":\"skaVPMTF\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { partition } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useOldLang();\n  const language = lang.code || 'en';\n  const [displayedOptions, setDisplayedOptions] = useState<string[]>([]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedOptionList: ItemPickerOption[] = useMemo(() => {\n    const options = SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).filter(Boolean).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n\n    if (!searchQuery.trim()) {\n      const currentLanguageOption = options.find((option) => option.value === language);\n      const otherOptionList = options.filter((option) => option.value !== language);\n      return currentLanguageOption ? [currentLanguageOption, ...otherOptionList] : options;\n    }\n\n    return options?.filter((option) => option.label.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [language, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive, prevLanguage]) => {\n    if (prevIsActive === isActive && prevLanguage?.find((option) => option === language)) return;\n    const [selected] = partition(displayedOptionList, (option) => doNotTranslate.includes(option.value));\n    setDisplayedOptions([...selected.map((option) => option.value)]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, displayedOptionList]);\n\n  const handleChange = useLastCallback((newSelectedIds: string[]) => {\n    setDisplayedOptions(newSelectedIds);\n    setSettingOption({\n      doNotTranslate: newSelectedIds,\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content infinite-scroll')}>\n      <div className={buildClassName(styles.item)}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedOptionList}\n          selectedValues={displayedOptions}\n          onSelectedValuesChange={handleChange}\n          filterValue={searchQuery}\n          onFilterChange={setSearchQuery}\n          isSearchable\n          allowMultiple\n          withDefaultPadding\n          itemInputType=\"checkbox\"\n          searchInputId=\"lang-picker-search\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUsername } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { isBetween } from '../../util/math';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 56;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useOldLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePreviousDeprecated(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">\n                    @\n                    {usernameData.username}\n                  </span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PaO1MMi5\",\"header\":\"wSswdVkR\",\"description\":\"oiJc22Aj\",\"sortableContainer\":\"lAeeBh9K\",\"item\":\"l04OwRBg\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  isUsernameValid, MAX_USERNAME_LENGTH, MIN_UPDATE_USERNAME_LENGTH, USERNAME_REGEX,\n} from '../../util/entities/username';\nimport { debounce } from '../../util/schedulers';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useOldLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_UPDATE_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = newUsername === '' ? true : isUsernameValid(newUsername, true);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-item\">\n          <div className=\"settings-input\">\n            <AvatarEditable\n              currentAvatarBlobUrl={currentAvatarBlobUrl}\n              onChange={handlePhotoChange}\n              title=\"Edit your profile photo\"\n              disabled={isLoading}\n            />\n            <InputText\n              value={firstName}\n              onChange={handleFirstNameChange}\n              label={lang('FirstName')}\n              disabled={isLoading}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              value={lastName}\n              onChange={handleLastNameChange}\n              label={lang('LastName')}\n              disabled={isLoading}\n            />\n            <TextArea\n              value={bio}\n              onChange={handleBioChange}\n              label={lang('UserBio')}\n              disabled={isLoading}\n              maxLength={maxBioLength}\n              maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n            />\n          </div>\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <div className=\"settings-input\">\n            <UsernameInput\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n          </div>\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}\n              <br />\n              <span className=\"username-link\">\n                {TME_LINK_PREFIX}\n                {editableUsername}\n              </span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser || {};\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = currentUser && getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_SNAP_EFFECT_SUPPORTED,\n  IS_WAVE_TRANSFORM_SUPPORTED,\n} from '../../../util/browser/windowEnvironment';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental = ({\n  isActive,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n  onReset,\n}: OwnProps & StateProps) => {\n  const { requestConfetti, setSharedSettingOption, requestWave } = getActions();\n\n  const snapButtonRef = useRef<HTMLDivElement>();\n  const [isSnapButtonAnimating, setIsSnapButtonAnimating] = useState(false);\n\n  const lang = useOldLang();\n\n  const accounts = useMultiaccountInfo();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  const handleRequestWave = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    requestWave({ startX: e.clientX, startY: e.clientY });\n  });\n\n  const handleRequestConfetti = useLastCallback(() => {\n    requestConfetti({ withStars: true });\n  });\n\n  const handleSnap = useLastCallback(() => {\n    const button = snapButtonRef.current;\n    if (!button) return;\n\n    if (animateSnap(button)) {\n      setIsSnapButtonAnimating(true);\n      // Manual reset for debug\n      setTimeout(() => {\n        setIsSnapButtonAnimating(false);\n      }, 1500);\n    }\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true, true);\n  }, [accounts]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          href={newAccountUrl}\n          icon=\"add-user\"\n        >\n          <div className=\"title\">Login on Test Server</div>\n        </ListItem>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          onClick={handleRequestConfetti}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n        <ListItem\n          onClick={handleRequestWave}\n          icon=\"story-expired\"\n          disabled={!IS_WAVE_TRANSFORM_SUPPORTED}\n        >\n          <div className=\"title\">Start wave</div>\n        </ListItem>\n        <ListItem\n          ref={snapButtonRef}\n          onClick={handleSnap}\n          icon=\"spoiler\"\n          disabled={!IS_SNAP_EFFECT_SUPPORTED}\n          style={isSnapButtonAnimating ? 'visibility: hidden' : ''}\n        >\n          <div className=\"title\">Vaporize this button</div>\n        </ListItem>\n      </div>\n      <div className=\"settings-item\">\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n      </div>\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n\n          onCheck={() => setSharedSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n\n          onCheck={() => setSharedSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        <ListItem\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    } = selectSharedSettings(global);\n\n    return {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings } from '../../../global/types';\nimport type { ThemeKey, TimeFormat } from '../../../types';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ANDROID, IS_IOS, IS_MAC_OS,\n} from '../../../util/browser/windowEnvironment';\nimport { setTimeFormat } from '../../../util/oldLangProvider';\nimport { getSystemTheme } from '../../../util/systemTheme';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<SharedSettings, (\n    'messageTextSize' |\n    'messageSendKeyCombo' |\n    'timeFormat' |\n    'theme' |\n    'shouldUseSystemTheme'\n  )>;\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n  onReset,\n}) => {\n  const {\n    setSharedSettingOption, openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const timeFormatOptions: IRadioOption[] = [{\n    label: lang('SettingsTimeFormat12'),\n    value: '12h',\n  }, {\n    label: lang('SettingsTimeFormat24'),\n    value: '24h',\n  }];\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChatAppearanceLight'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChatAppearanceDark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChatAppearanceSystem'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('SettingsSendEnter'), subLabel: lang('SettingsSendEnterDescription') },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'SettingsSendCmdenter' : 'SettingsSendCtrlenter'),\n      subLabel: lang('SettingsSendPlusEnterDescription'),\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSharedSettingOption({ messageTextSize: newSize });\n  }, []);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ThemeKey;\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, []);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSharedSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSharedSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, []);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSharedSettingOption({ messageSendKeyCombo: newCombo as SharedSettings['messageSendKeyCombo'] });\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Settings')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground })}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsTimeFormat')}\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={timeFormatOptions}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SettingsKeyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      theme,\n      shouldUseSystemTheme,\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n    } = selectSharedSettings(global);\n\n    return {\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\n\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransitionDeprecated(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransitionDeprecated(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { validateFiles } from '../../../util/files';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n    openSettingsScreen,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.GeneralChatBackgroundColor });\n  }, []);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = selectThemeValues(global, theme) || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\n\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents } from '../../../util/captureEvents';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { pick } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  const containerRef = useRef<HTMLDivElement>();\n  const colorPickerRef = useRef<HTMLDivElement>();\n  const huePickerRef = useRef<HTMLDivElement>();\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: React.RefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: React.RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = selectThemeValues(global, theme) || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    openSettingsScreen({ screen: SettingsScreens.Experimental });\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{oldLang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{oldLang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{oldLang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{oldLang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{oldLang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{oldLang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{oldLang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{oldLang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{oldLang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{oldLang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{oldLang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{oldLang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{oldLang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{oldLang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{oldLang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{oldLang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyBio:\n        return <h3>{oldLang('PrivacyBio')}</h3>;\n      case SettingsScreens.PrivacyBirthday:\n        return <h3>{oldLang('PrivacyBirthday')}</h3>;\n      case SettingsScreens.PrivacyGifts:\n        return <h3>{lang('PrivacyGifts')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{oldLang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{oldLang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyMessages:\n        return <h3>{oldLang('PrivacyMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{oldLang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{oldLang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{oldLang('AlwaysShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{oldLang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{oldLang('AlwaysAllow')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{oldLang('NeverAllow')}</h3>;\n\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return <h3>{lang('RemoveFeeTitle')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('MenuAnimations')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{oldLang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{oldLang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{oldLang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{oldLang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{oldLang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{oldLang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{oldLang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{oldLang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{oldLang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{oldLang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{oldLang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{oldLang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{oldLang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{oldLang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{oldLang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{oldLang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {oldLang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {oldLang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {oldLang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openSettingsScreen({ screen: SettingsScreens.EditProfile })}\n              ariaLabel={oldLang('lng_settings_information')}\n            >\n              <Icon name=\"edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{oldLang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={oldLang('AccDescrGoBack')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={oldLang('lng_sure_logout')}\n        confirmLabel={oldLang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings } from '../../../global/types';\nimport type { AccountSettings, LangCode } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { oldSetLanguage } from '../../../util/oldLangProvider';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<AccountSettings, 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>\n& Pick<SharedSettings, 'language' | 'languages'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n    setSharedSettingOption,\n    openPremiumModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void oldSetLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSharedSettingOption({ language: langCode as LangCode });\n    });\n  });\n\n  const options = useMemo(() => {\n    if (!languages) return undefined;\n    const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n    const shortLangCode = currentLangCode.substr(0, 2);\n\n    return languages.map(({ langCode, nativeName, name }) => ({\n      value: langCode,\n      label: nativeName,\n      subLabel: name,\n      isLoading: langCode === selectedLanguage && isLoading,\n    } satisfies ItemPickerOption)).sort((a) => {\n      return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n    });\n  }, [isLoading, languages, selectedLanguage]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.DoNotTranslate });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              narrow\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item settings-item-picker\">\n        <h4 className=\"settings-item-header\">\n          {lang('Localization.InterfaceLanguage')}\n        </h4>\n        {options ? (\n          <ItemPicker\n            items={options}\n            selectedValue={selectedLanguage}\n            forceRenderAllItems\n            onSelectedValueChange={handleChange}\n            itemInputType=\"radio\"\n            className=\"settings-picker\"\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n    const { language, languages } = selectSharedSettings(global);\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsAmount, ApiTonAmount } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { FAQ_URL, PRIVACY_URL, TON_CURRENCY_CODE } from '../../../config';\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport {\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectIsPremiumPurchaseBlocked,\n} from '../../../global/selectors';\nimport { convertCurrencyFromBaseUnit } from '../../../util/formatCurrency';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport ChatExtra from '../../common/profile/ChatExtra';\nimport ProfileInfo from '../../common/profile/ProfileInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n  isGiveawayAvailable?: boolean;\n  starsBalance?: ApiStarsAmount;\n  tonBalance?: ApiTonAmount;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n  isGiveawayAvailable,\n  starsBalance,\n  tonBalance,\n  onReset,\n}) => {\n  const {\n    loadMoreProfilePhotos,\n    openPremiumModal,\n    openSupportChat,\n    openUrl,\n    openGiftRecipientPicker,\n    openStarsBalanceModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [isSupportDialogOpen, openSupportDialog, closeSupportDialog] = useFlag(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadMoreProfilePhotos({ peerId: currentUserId, isPreload: true });\n    }\n  }, [currentUserId]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleOpenSupport = useLastCallback(() => {\n    openSupportChat();\n    closeSupportDialog();\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu self-profile\">\n        {currentUserId && (\n          <ProfileInfo\n            peerId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            isForSettings\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            isInSettings\n          />\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"settings\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.General })}\n        >\n          {lang('TelegramGeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Performance })}\n        >\n          {lang('MenuAnimations')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Notifications })}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.DataStorage })}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Privacy })}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Folders })}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveSessions })}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Language })}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.languageInfo.nativeName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Stickers })}\n        >\n          {lang('MenuStickers')}\n        </ListItem>\n      </div>\n      <div className=\"settings-main-menu\">\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n            narrow\n\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"gold\" size=\"big\" />}\n          narrow\n\n          onClick={() => openStarsBalanceModal({})}\n        >\n          {lang('MenuStars')}\n          {Boolean(starsBalance) && (\n            <span className=\"settings-item__current-value\">\n              {formatStarsAmount(lang, starsBalance)}\n            </span>\n          )}\n        </ListItem>\n        <ListItem\n          leftElement={<Icon className=\"icon ListItem-main-icon\" name=\"toncoin\" />}\n          narrow\n          onClick={() => openStarsBalanceModal({ currency: TON_CURRENCY_CODE })}\n        >\n          {lang('MenuTon')}\n          {Boolean(tonBalance) && (\n            <span className=\"settings-item__current-value\">\n              {convertCurrencyFromBaseUnit(tonBalance.amount, tonBalance.currency)}\n            </span>\n          )}\n        </ListItem>\n        {isGiveawayAvailable && (\n          <ListItem\n            icon=\"gift\"\n            narrow\n\n            onClick={() => openGiftRecipientPicker()}\n          >\n            {lang('MenuSendGift')}\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"ask-support\"\n          narrow\n          onClick={openSupportDialog}\n        >\n          {lang('AskAQuestion')}\n        </ListItem>\n        <ListItem\n          icon=\"help\"\n          narrow\n\n          onClick={() => openUrl({ url: FAQ_URL })}\n        >\n          {lang('MenuTelegramFaq')}\n        </ListItem>\n        <ListItem\n          icon=\"privacy-policy\"\n          narrow\n\n          onClick={() => openUrl({ url: PRIVACY_URL })}\n        >\n          {lang('MenuPrivacyPolicy')}\n        </ListItem>\n      </div>\n      <ConfirmDialog\n        isOpen={isSupportDialogOpen}\n        confirmLabel={lang('OK')}\n        title={lang('AskAQuestion')}\n        textParts={lang('MenuAskText', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        confirmHandler={handleOpenSupport}\n        onClose={closeSupportDialog}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { currentUserId } = global;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const starsBalance = global.stars?.balance;\n    const tonBalance = global.ton?.balance;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isGiveawayAvailable,\n      starsBalance,\n      tonBalance,\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNotifyPeerType, ApiPeerNotifySettings } from '../../../api/types';\n\nimport {\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n  playNotifySound,\n} from '../../../util/notifications';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  notifyDefaults?: Record<ApiNotifyPeerType, ApiPeerNotifySettings>;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  notifyDefaults,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const areChannelsMuted = Boolean(notifyDefaults?.channels?.mutedUntil);\n  const areGroupsMuted = Boolean(notifyDefaults?.groups?.mutedUntil);\n  const areUsersMuted = Boolean(notifyDefaults?.users?.mutedUntil);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: ApiNotifyPeerType,\n    setting: 'mute' | 'showPreviews',\n  ) => {\n    const currentIsMuted = Boolean(notifyDefaults?.[peerType]?.mutedUntil);\n    const currentShouldShowPreviews = Boolean(notifyDefaults?.[peerType]?.shouldShowPreviews);\n\n    updateNotificationSettings({\n      peerType,\n      isMuted: setting === 'mute' ? !e.target.checked : currentIsMuted,\n      shouldShowPreviews: setting === 'showPreviews' ? e.target.checked : currentShouldShowPreviews,\n    });\n  }, [notifyDefaults]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'mute');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NotificationsWeb')}\n        </h4>\n        <Checkbox\n          label={lang('NotificationsWeb')}\n          subLabel={lang(hasWebNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label={lang('NotificationsOffline')}\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          subLabel={areOfflineNotificationsSupported\n            ? lang(hasPushNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')\n            : lang('SettingsOfflineNotificationUnsupported')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label={lang('NotificationsSound')}\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          subLabel={lang(!areUsersMuted ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={!areUsersMuted}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={areUsersMuted}\n          subLabel={lang(notifyDefaults?.users?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.shouldShowPreviews)}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(!areGroupsMuted ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={!areGroupsMuted}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={areGroupsMuted}\n          subLabel={lang(notifyDefaults?.groups?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.shouldShowPreviews)}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          subLabel={lang(!areChannelsMuted ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={!areChannelsMuted}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={areChannelsMuted}\n          subLabel={lang(notifyDefaults?.channels?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.shouldShowPreviews)}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n      notifyDefaults: global.settings.notifyDefaults,\n    };\n  },\n)(SettingsNotifications));\n","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MED,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { IS_BACKDROP_BLUR_SUPPORTED, IS_SNAP_EFFECT_SUPPORTED } from '../../../util/browser/windowEnvironment';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype PerformanceSection = [RegularLangKey, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: RegularLangKey;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderMedium',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderCustom',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['SettingsPerformanceInterfaceAnimations', [\n    { key: 'pageTransitions', label: 'SettingsPerformancePageTransitions' },\n    { key: 'messageSendingAnimations', label: 'SettingsPerformanceSending' },\n    { key: 'mediaViewerAnimations', label: 'SettingsPerformanceMediaViewer' },\n    { key: 'messageComposerAnimations', label: 'SettingsPerformanceComposer' },\n    { key: 'contextMenuAnimations', label: 'SettingsPerformanceContextAnimation' },\n    { key: 'contextMenuBlur', label: 'SettingsPerformanceContextBlur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'SettingsPerformanceRightColumn' },\n    { key: 'snapEffect', label: 'SettingsPerformanceThanos' },\n  ]],\n  ['SettingsPerformanceStickers', [\n    { key: 'animatedEmoji', label: 'SettingsPerformanceAnimatedEmoji' },\n    { key: 'loopAnimatedStickers', label: 'SettingsPerformanceLoopStickers' },\n    { key: 'reactionEffects', label: 'SettingsPerformanceReactionEffects' },\n    { key: 'stickerEffects', label: 'SettingsPerformanceStickerEffects' },\n  ]],\n  ['SettingsPerformanceMediaAutoplay', [\n    { key: 'autoplayGifs', label: 'SettingsPerformanceAutoplayGif' },\n    { key: 'autoplayVideos', label: 'SettingsPerformanceAutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSharedSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MED)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n\n  const animationLevelOptions = useMemo(() => {\n    const options = animationLevelState === ANIMATION_LEVEL_CUSTOM\n      ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n      : ANIMATION_LEVEL_OPTIONS;\n\n    return options.map((option) => lang(option));\n  }, [animationLevelState, lang]);\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MED : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel, wasAnimationLevelSetManually: true });\n    updatePerformanceSettings(performance);\n  }, []);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderTitle')}\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderSubtitle')}\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">{lang('SettingsPerformanceGranularTitle')}</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => {\n                    if (key === 'snapEffect' && !IS_SNAP_EFFECT_SUPPORTED) return undefined;\n                    return (\n                      <Checkbox\n                        key={key}\n                        name={key}\n                        checked={performanceSettings[key]}\n                        label={lang(label)}\n                        disabled={disabled}\n                        onChange={handlePropertyChange}\n                      />\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config';\nimport {\n  selectCanSetPasscode, selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { getClosestEntry } from '../../../util/getClosestEntry';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages: boolean;\n  canDisplayChatInTitle?: boolean;\n  isCurrentUserFrozen?: boolean;\n  needAgeVideoVerification?: boolean;\n  privacy: GlobalState['settings']['privacy'];\n  accountDaysTtl?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  canDisplayChatInTitle,\n  canSetPasscode,\n  needAgeVideoVerification,\n  privacy,\n  onReset,\n  isCurrentUserFrozen,\n  accountDaysTtl,\n}) => {\n  const {\n    openDeleteAccountModal,\n    loadPrivacySettings,\n    loadBlockedUsers,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    setSharedSettingOption,\n    openSettingsScreen,\n    loadAccountDaysTtl,\n    openAgeVerificationModal,\n  } = getActions();\n\n  useEffect(() => {\n    if (!isCurrentUserFrozen) {\n      loadBlockedUsers();\n      loadPrivacySettings();\n      loadWebAuthorizations();\n    }\n  }, [isCurrentUserFrozen]);\n\n  useEffect(() => {\n    if (isActive && !isCurrentUserFrozen) {\n      loadGlobalPrivacySettings();\n      loadAccountDaysTtl();\n    }\n  }, [isActive, isCurrentUserFrozen, loadGlobalPrivacySettings]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSharedSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings({ isSensitiveEnabled: isChecked });\n  }, [updateContentSettings]);\n\n  const handleAgeVerification = useCallback(() => {\n    openAgeVerificationModal();\n  }, [openAgeVerificationModal]);\n\n  const handleOpenDeleteAccountModal = useLastCallback(() => {\n    if (!accountDaysTtl) return;\n    openDeleteAccountModal({ days: accountDaysTtl });\n  });\n\n  const dayOption = useMemo(() => {\n    if (!accountDaysTtl) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, accountDaysTtl / DAYS_PER_MONTH).toString();\n  }, [accountDaysTtl]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    if (!setting) return oldLang('Loading');\n\n    const { visibility, shouldAllowPremium, botsPrivacy } = setting;\n\n    const isAllowBots = botsPrivacy === 'allow';\n    const isVisibilityEverybody = visibility === 'everybody';\n    const shouldShowBotsString = isAllowBots && !isVisibilityEverybody;\n\n    const blockCount = setting.blockChatIds.length + setting.blockUserIds.length;\n    const allowCount = setting.allowChatIds.length + setting.allowUserIds.length;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount && !isVisibilityEverybody) total.push(`+${allowCount}`);\n\n    const botPrivacyString = shouldShowBotsString ? lang('PrivacyValueBots') : '';\n    const totalString = lang.conjunction(total);\n\n    const exceptionString = [botPrivacyString, totalString].filter(Boolean).join(' ');\n    if (shouldShowBotsString && !isVisibilityEverybody) return exceptionString;\n\n    if (shouldAllowPremium) {\n      return oldLang(exceptionString ? 'ContactsAndPremium' : 'PrivacyPremium');\n    }\n\n    switch (visibility) {\n      case 'everybody':\n        return `${oldLang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${oldLang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${oldLang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBlockedUsers })}\n        >\n          {oldLang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n\n            onClick={() => openSettingsScreen({\n              screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            })}\n          >\n            <div className=\"multiline-item\">\n              <span className=\"title\">{oldLang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {oldLang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({\n            screen: hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {oldLang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveWebsites })}\n          >\n            {oldLang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{oldLang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.lastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.profilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBio })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBio')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.bio)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBirthday')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.birthday)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGifts })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{lang('PrivacyGifts')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.gifts)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.forwards)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          allowDisabledClick\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.voiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {shouldChargeForMessages ? lang('PrivacyPaidMessagesValue')\n                : shouldNewNonContactPeersRequirePremium\n                  ? oldLang('PrivacyMessagesContactsAndPremium')\n                  : oldLang('P2PEverybody')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.chatInvite)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item fluid-container\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={oldLang('lng_settings_sensitive_disable_filtering')}\n            subLabel={oldLang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive || (!isSensitiveEnabled && needAgeVideoVerification)}\n            onCheck={handleUpdateContentSettings}\n          />\n          {!isSensitiveEnabled && needAgeVideoVerification && (\n            <Button\n              color=\"primary\"\n              fluid\n              noForcedUpperCase\n              className=\"settings-unlock-button\"\n              onClick={handleAgeVerification}\n            >\n              <span className=\"settings-unlock-button-title\">\n                {lang('ButtonAgeVerification')}\n              </span>\n            </Button>\n          )}\n        </div>\n      )}\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={oldLang('ArchiveAndMute')}\n            subLabel={oldLang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={oldLang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('DeleteMyAccount')}\n        </h4>\n        <ListItem\n          narrow\n          onClick={handleOpenDeleteAccountModal}\n        >\n          {lang('DeleteAccountIfAwayFor')}\n          <span className=\"settings-item__current-value\">\n            {lang('Months', { count: dayOption }, { pluralValue: 1 })}\n          </span>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          shouldNewNonContactPeersRequirePremium, nonContactPeersPaidStars,\n        },\n        privacy,\n        accountDaysTtl,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    const { canDisplayChatInTitle } = selectSharedSettings(global);\n    const shouldChargeForMessages = Boolean(nonContactPeersPaidStars);\n    const isCurrentUserFrozen = selectIsCurrentUserFrozen(global);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: appConfig.canDisplayAutoarchiveSetting || isCurrentUserPremium,\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      shouldNewNonContactPeersRequirePremium,\n      shouldChargeForMessages,\n      needAgeVideoVerification: Boolean(appConfig.needAgeVideoVerification),\n      privacy,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n      isCurrentUserFrozen,\n      accountDaysTtl,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockUser,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterPeersByQuery({ ids: availableContactIds, query: search, type: 'user' })\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    blockUser({ userId });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockUser } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((userId: string) => {\n    unblockUser({ userId });\n  }, [unblockUser]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, userId) => {\n      const isPrivate = isUserId(userId);\n      const user = isPrivate ? usersByIds[userId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[userId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (\n            <div className=\"contact-username\" dir=\"auto\">\n              @\n              {userMainUsername}\n            </div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        className=\"block-user-button\"\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <Icon name=\"add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { ApiPrivacyKey } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyBio:\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return 'bio';\n    case SettingsScreens.PrivacyBirthday:\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return 'birthday';\n    case SettingsScreens.PrivacyGifts:\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return 'gifts';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n    case SettingsScreens.PrivacyAddByPhone:\n      return 'addByPhone';\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return 'noPaidMessages';\n  }\n\n  return undefined;\n}\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDisallowedGiftsSettings } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\n\ntype StateProps = {\n  disallowedGifts?: ApiDisallowedGiftsSettings;\n  isCurrentUserPremium: boolean;\n};\n\nconst SettingsAcceptedGift = ({\n  disallowedGifts, isCurrentUserPremium,\n}: StateProps) => {\n  const { showNotification, updateGlobalPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const handleOpenTelegramPremiumModal = useLastCallback(() => {\n    showNotification({\n      message: lang('PrivacySubscribeToTelegramPremium'),\n      action: {\n        action: 'openPremiumModal',\n        payload: {},\n      },\n      actionText: { key: 'Open' },\n      icon: 'star',\n    });\n  });\n\n  const handleLimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowLimitedStarGifts: !disallowedGifts?.shouldDisallowLimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUnlimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUnlimitedStarGifts: !disallowedGifts?.shouldDisallowUnlimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUniqueChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUniqueStarGifts: !disallowedGifts?.shouldDisallowUniqueStarGifts || undefined,\n      },\n    });\n  });\n\n  const handlePremiumSubscriptionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowPremiumGifts: !disallowedGifts?.shouldDisallowPremiumGifts || undefined,\n      },\n    });\n  });\n\n  return (\n    <div className=\"settings-item\">\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftTitle')}\n      </h4>\n      <ListItem onClick={handleLimitedEditionChange}>\n        <span>{lang('PrivacyGiftLimitedEdition')}</span>\n        <Switcher\n          id=\"limited_edition\"\n          label={disallowedGifts?.shouldDisallowLimitedStarGifts ? lang('PrivacyDisableLimitedEditionStarGifts')\n            : lang('PrivacyEnableLimitedEditionStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowLimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUnlimitedEditionChange}>\n        <span>{lang('PrivacyGiftUnlimited')}</span>\n        <Switcher\n          id=\"unlimited\"\n          label={disallowedGifts?.shouldDisallowUnlimitedStarGifts ? lang('PrivacyDisableUnlimitedStarGifts')\n            : lang('PrivacyEnableUnlimitedStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUnlimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUniqueChange}>\n        <span>{lang('PrivacyGiftUnique')}</span>\n        <Switcher\n          id=\"unique\"\n          label={disallowedGifts?.shouldDisallowUniqueStarGifts ? lang('PrivacyDisableUniqueStarGifts')\n            : lang('PrivacyEnableUniqueStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUniqueStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handlePremiumSubscriptionChange}>\n        <span>{lang('PrivacyGiftPremiumSubscription')}</span>\n        <Switcher\n          id=\"premium_subscription\"\n          label={disallowedGifts?.shouldDisallowPremiumGifts ? lang('PrivacyDisablePremiumGifts')\n            : lang('PrivacyEnablePremiumGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowPremiumGifts}\n        />\n      </ListItem>\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      settings: {\n        byKey: {\n          disallowedGifts,\n        },\n      },\n    } = global;\n\n    return {\n      disallowedGifts,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsAcceptedGift));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { PrivacyVisibility } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium, selectShouldHideReadMarks } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  visibility?: PrivacyVisibility;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n  shouldHideReadMarks: boolean;\n};\n\nconst SettingsPrivacyLastSeen = ({\n  isCurrentUserPremium, shouldHideReadMarks, visibility,\n}: OwnProps & StateProps) => {\n  const { updateGlobalPrivacySettings, openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const canShowHideReadTime = visibility === 'nobody' || visibility === 'contacts';\n\n  const handleChangeShouldHideReadMarks = useLastCallback(\n    (isEnabled) => updateGlobalPrivacySettings({ shouldHideReadMarks: isEnabled }),\n  );\n\n  const handleOpenPremiumModal = useLastCallback(() => {\n    openPremiumModal({\n      initialSection: 'last_seen',\n    });\n  });\n\n  return (\n    <>\n      {canShowHideReadTime && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('HideReadTime')}\n            checked={shouldHideReadMarks}\n            onCheck={handleChangeShouldHideReadMarks}\n          />\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('HideReadTimeInfo'), ['br'])}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n          onClick={handleOpenPremiumModal}\n        >\n          {isCurrentUserPremium ? lang('PrivacyLastSeenPremiumForPremium') : lang('PrivacyLastSeenPremium')}\n        </ListItem>\n        <p\n          className=\"settings-item-description-larger premium-info\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          {isCurrentUserPremium\n            ? lang('PrivacyLastSeenPremiumInfoForPremium')\n            : lang('PrivacyLastSeenPremiumInfo')}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldHideReadMarks: Boolean(selectShouldHideReadMarks(global)),\n    };\n  },\n)(SettingsPrivacyLastSeen));\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"Qvhl9Jjv\",\"fallbackPhoto\":\"Qvhl9Jjv\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  const inputRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        narrow\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          narrow\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiPrivacySettings, BotsPrivacyType } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../../global/selectors';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Switcher from '../../ui/Switcher';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\nimport SettingsAcceptedGift from './SettingsAcceptedGift';\nimport SettingsPrivacyLastSeen from './SettingsPrivacyLastSeen';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n  primaryPrivacy?: ApiPrivacySettings;\n  secondaryPrivacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n  shouldDisplayGiftsButton?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  primaryPrivacy,\n  secondaryPrivacy,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n  isPremiumRequired,\n  onReset,\n  shouldDisplayGiftsButton,\n  isCurrentUserPremium,\n}) => {\n  const { updateGlobalPrivacySettings, showNotification } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleShowGiftIconInChats = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('PrivacySubscribeToTelegramPremium'),\n        action: {\n          action: 'openPremiumModal',\n          payload: {},\n        },\n        actionText: { key: 'Open' },\n        icon: 'star',\n      });\n      return;\n    }\n    updateGlobalPrivacySettings({\n      shouldDisplayGiftsButton: !shouldDisplayGiftsButton,\n    });\n  });\n\n  const secondaryScreen = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneP2P;\n      case SettingsScreens.PrivacyPhoneNumber: {\n        return primaryPrivacy?.visibility === 'nobody' ? SettingsScreens.PrivacyAddByPhone : undefined;\n      }\n      default:\n        return undefined;\n    }\n  }, [primaryPrivacy, screen]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {screen === SettingsScreens.PrivacyGifts && (\n        <div className=\"settings-item\">\n          <ListItem onClick={handleShowGiftIconInChats}>\n            <span>{lang('PrivacyDisplayGiftsButton')}</span>\n            <Switcher\n              id=\"gift\"\n              disabled={!isCurrentUserPremium}\n              label={shouldDisplayGiftsButton ? lang('HideGiftsButton') : lang('DisplayGiftsButton')}\n              checked={shouldDisplayGiftsButton}\n            />\n          </ListItem>\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('PrivacyDisplayGiftIconInChats', {\n              icon: <Icon name=\"gift\" className=\"gift-icon\" />,\n              gift: lang('PrivacyDisplayGift'),\n            }, {\n              withNodes: true,\n            })}\n          </p>\n        </div>\n      )}\n      <PrivacySubsection\n        screen={screen}\n        privacy={primaryPrivacy}\n        isPremiumRequired={isPremiumRequired}\n      />\n      {screen === SettingsScreens.PrivacyProfilePhoto && primaryPrivacy?.visibility !== 'everybody' && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n      {screen === SettingsScreens.PrivacyLastSeen && (\n        <SettingsPrivacyLastSeen visibility={primaryPrivacy?.visibility} />\n      )}\n      {screen === SettingsScreens.PrivacyGifts && (\n        <SettingsAcceptedGift />\n      )}\n      {Boolean(secondaryScreen) && (\n        <PrivacySubsection\n          screen={secondaryScreen}\n          privacy={secondaryPrivacy}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction PrivacySubsection({\n  screen,\n  privacy,\n  isPremiumRequired,\n}: {\n  screen: SettingsScreens;\n  privacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n}) {\n  const { setPrivacyVisibility, openSettingsScreen } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    const hasNobody = screen !== SettingsScreens.PrivacyAddByPhone;\n    const options = [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PContacts')} />\n        ) : (\n          oldLang('P2PContacts')\n        ),\n        hidden: isPremiumRequired,\n      },\n    ];\n\n    if (hasNobody) {\n      options.push({\n        value: 'nobody',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PNobody')} />\n        ) : (\n          oldLang('P2PNobody')\n        ),\n        hidden: isPremiumRequired,\n      });\n    }\n    return options;\n  }, [oldLang, screen, isPremiumRequired]);\n\n  const primaryExceptionLists = useMemo(() => {\n    if (screen === SettingsScreens.PrivacyAddByPhone) {\n      return {\n        shouldShowDenied: false,\n        shouldShowAllowed: false,\n      };\n    }\n\n    return {\n      shouldShowDenied: privacy?.visibility !== 'nobody',\n      shouldShowAllowed: privacy?.visibility !== 'everybody',\n    };\n  }, [privacy, screen]);\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsInfo');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('CustomHelp');\n      case SettingsScreens.PrivacyAddByPhone: {\n        return privacy?.visibility === 'everybody' ? oldLang('PrivacyPhoneInfo') : oldLang('PrivacyPhoneInfo3');\n      }\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesInfo');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen, privacy]);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return oldLang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyAddByPhone:\n        return oldLang('PrivacyPhoneTitle2');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return oldLang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyBio:\n        return oldLang('PrivacyBioTitle');\n      case SettingsScreens.PrivacyBirthday:\n        return oldLang('PrivacyBirthdayTitle');\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return oldLang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return oldLang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return oldLang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return oldLang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen]);\n\n  const prepareSubtitle = useLastCallback(\n    (userIds?: string[], chatIds?: string[], shouldAllowPremium?: boolean, botsPrivacy?: BotsPrivacyType) => {\n      const userIdsCount = userIds?.length || 0;\n      const chatIdsCount = chatIds?.length || 0;\n      const isAllowBots = botsPrivacy === 'allow';\n      const hasPeers = userIdsCount || chatIdsCount;\n\n      if (!hasPeers && !isAllowBots) {\n        return shouldAllowPremium ? oldLang('PrivacyPremium') : oldLang('EditAdminAddUsers');\n      } else if (shouldAllowPremium) {\n        return oldLang('ContactsAndPremium');\n      }\n\n      const userCountString = userIdsCount > 0 ? oldLang('Users', userIdsCount) : undefined;\n      const chatCountString = chatIdsCount > 0 ? oldLang('Chats', chatIdsCount) : undefined;\n\n      const botPrivacyString = isAllowBots ? lang('PrivacyValueBots') : '';\n      const peersString = lang.conjunction([userCountString, chatCountString].filter(Boolean));\n\n      return [botPrivacyString, peersString].filter(Boolean).join(' ');\n    },\n  );\n\n  const allowedString = useMemo(() => {\n    return prepareSubtitle(\n      privacy?.allowUserIds,\n      privacy?.allowChatIds,\n      privacy?.shouldAllowPremium,\n      privacy?.botsPrivacy,\n    );\n  }, [privacy]);\n\n  const blockString = useMemo(() => {\n    return prepareSubtitle(privacy?.blockUserIds, privacy?.blockChatIds);\n  }, [privacy]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioAllowedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayAllowedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioDeniedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayDeniedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={privacy?.visibility}\n        />\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n      {!isPremiumRequired && (primaryExceptionLists.shouldShowAllowed || primaryExceptionLists.shouldShowDenied) && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('PrivacyExceptions')}\n          </h4>\n          {primaryExceptionLists.shouldShowAllowed && (\n            <ListItem\n              narrow\n              icon=\"add-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: allowedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('AlwaysAllow')}</span>\n                <span className=\"subtitle\">{allowedString}</span>\n              </div>\n            </ListItem>\n          )}\n          {primaryExceptionLists.shouldShowDenied && (\n            <ListItem\n              narrow\n              icon=\"delete-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: deniedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('NeverAllow')}</span>\n                <span className=\"subtitle\">{blockString}</span>\n              </div>\n            </ListItem>\n          )}\n        </div>\n      )}\n      {isPremiumRequired && <PremiumStatusItem />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): Complete<StateProps> => {\n    let primaryPrivacy: ApiPrivacySettings | undefined;\n    let secondaryPrivacy: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      settings: {\n        privacy,\n        byKey: {\n          shouldDisplayGiftsButton,\n        },\n      },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        primaryPrivacy = privacy.phoneNumber;\n        secondaryPrivacy = privacy.addByPhone;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        primaryPrivacy = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        primaryPrivacy = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyBio:\n        primaryPrivacy = privacy.bio;\n        break;\n\n      case SettingsScreens.PrivacyBirthday:\n        primaryPrivacy = privacy.birthday;\n        break;\n\n      case SettingsScreens.PrivacyGifts:\n        primaryPrivacy = privacy.gifts;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyPhoneCall:\n        primaryPrivacy = privacy.phoneCall;\n        secondaryPrivacy = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        primaryPrivacy = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        primaryPrivacy = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        primaryPrivacy = privacy.chatInvite;\n        break;\n    }\n\n    if (!primaryPrivacy) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      } as Complete<StateProps>;\n    }\n\n    return {\n      primaryPrivacy,\n      secondaryPrivacy,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      isPremiumRequired: screen === SettingsScreens.PrivacyVoiceMessages && !selectIsCurrentUserPremium(global),\n      shouldDisplayGiftsButton,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { CustomPeerType, UniqueCustomPeer } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isChatChannel, isDeletedUser,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { CUSTOM_PEER_PREMIUM } from '../../../util/objects/customPeer';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  withPremiumCategory?: boolean;\n  withMiniAppsCategory?: boolean;\n  usersOnly?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst PREMIUM_CATEGORY = [CUSTOM_PEER_PREMIUM];\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  withPremiumCategory,\n  withMiniAppsCategory,\n  screen,\n  isActive,\n  currentUserId,\n  settings,\n  usersOnly = false,\n  onReset,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const customPeerBots: UniqueCustomPeer = useMemo(() => {\n    return {\n      isCustomPeer: true,\n      type: 'bots',\n      title: lang('PrivacyValueBots'),\n      avatarIcon: 'bots',\n      isAvatarSquare: true,\n      peerColorId: 6,\n    };\n  }, [lang]);\n\n  const miniAppsCategory = useMemo(() => {\n    return [customPeerBots];\n  }, [customPeerBots]);\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const selectedCategoryTypes = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n    if (settings.shouldAllowPremium) {\n      return [CUSTOM_PEER_PREMIUM.type];\n    }\n    if (settings.botsPrivacy === 'allow' && isAllowList) {\n      return [customPeerBots.type];\n    }\n    return [];\n  }, [settings, isAllowList, customPeerBots]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n  const [newSelectedCategoryTypes, setNewSelectedCategoryTypes] = useState<CustomPeerType[]>(selectedCategoryTypes);\n\n  // Reset selected contact ids on change from other client when screen is not active\n  useEffect(() => {\n    if (!isActive) {\n      setNewSelectedContactIds(selectedContactIds);\n      setNewSelectedCategoryTypes(selectedCategoryTypes);\n    }\n  }, [isActive, selectedCategoryTypes, selectedContactIds]);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n        const user = usersById[chatId];\n        const isDeleted = user && isDeletedUser(user);\n        const isChannel = chat && isChatChannel(chat);\n        return (!usersOnly || user)\n          && chatId !== currentUserId\n          && chatId !== SERVICE_NOTIFICATIONS_USER_ID\n          && !isChannel && !isDeleted;\n      });\n\n    const filteredChats = filterPeersByQuery({ ids: chatIds, query: searchQuery });\n\n    // Show only relevant items\n    if (searchQuery) return filteredChats;\n\n    return unique([\n      ...selectedContactIds,\n      ...chatIds,\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, searchQuery, currentUserId, usersOnly]);\n\n  const handleSelectedCategoriesChange = useCallback((value: CustomPeerType[]) => {\n    setNewSelectedCategoryTypes(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      updatedIds: newSelectedContactIds,\n      isPremiumAllowed: newSelectedCategoryTypes.includes(CUSTOM_PEER_PREMIUM.type) || undefined,\n      botsPrivacy: (!withMiniAppsCategory) ? 'none'\n        : (newSelectedCategoryTypes.includes(customPeerBots.type) ? 'allow' : 'disallow'),\n    });\n\n    onReset();\n  }, [\n    isAllowList,\n    withMiniAppsCategory,\n    newSelectedCategoryTypes,\n    newSelectedContactIds,\n    onReset,\n    screen,\n    customPeerBots,\n  ]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function getCustomCategory() {\n    if (withPremiumCategory) return PREMIUM_CATEGORY;\n    if (withMiniAppsCategory && isAllowList) return miniAppsCategory;\n    return undefined;\n  }\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <PeerPicker\n        categories={getCustomCategory()}\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        selectedCategories={newSelectedCategoryTypes}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? oldLang('AlwaysAllowPlaceholder') : oldLang('NeverAllowPlaceholder')}\n        categoryPlaceholderKey=\"PrivacyUserTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onSelectedCategoriesChange={handleSelectedCategoriesChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        itemInputType=\"checkbox\"\n        withDefaultPadding\n        withStatus\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? oldLang('AlwaysAllow') : oldLang('NeverAllow')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return privacy.bio;\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return privacy.birthday;\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return privacy.gifts;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return privacy.noPaidMessages;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): Complete<StateProps> => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: ApiReaction;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { type: 'emoji', emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction?.type === 'emoji' ? selectedReaction.emoticon : undefined}\n        onChange={handleChange}\n        withIcon\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { config, reactions } = global;\n\n    return {\n      availableReactions: reactions.availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<AccountSettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n    openSettingsScreen,\n  } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.CustomEmoji })}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.QuickReaction })}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.reactions.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.Privacy });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji, selectTabState } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji?: ApiSticker;\n  codeLength?: number;\n  recoveryEmail?: string;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n  recoveryEmail,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {recoveryEmail && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('TwoStepAuth.ConfirmEmailDescription', recoveryEmail)}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const tabState = selectTabState(global);\n  const recoveryEmail = tabState.recoveryEmail;\n\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n    recoveryEmail,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent })}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaTurnOff })}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword })}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useFlag from '../../../../hooks/useFlag';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {type === 'email' && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('RecoveryEmailSubtitle')}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  errorKey,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmailCode });\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCode });\n      }\n    }\n  }, [currentScreen, waitingEmailCodeLength, openSettingsScreen]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.Privacy });\n      },\n    });\n  }, [clearPassword, openSettingsScreen]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updateRecoveryEmail, openSettingsScreen]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          placeholder={oldLang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          onClearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          onClearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          onClearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={oldLang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => ({ ...global.twoFaSettings } as Complete<StateProps>),\n)(SettingsTwoFa));\n","import type { FC } from '@teact';\nimport { memo, useRef, useState } from '@teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\nimport type { AnimationLevel } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\n\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useScrollNotch from '../../../hooks/useScrollNotch';\n\nimport Transition from '../../ui/Transition';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport PrivacyMessages from './PrivacyMessages';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsMain from './SettingsMain';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPerformance from './SettingsPerformance';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_BIO_SCREENS = [\n  SettingsScreens.PrivacyBioAllowedContacts,\n  SettingsScreens.PrivacyBioDeniedContacts,\n];\n\nconst PRIVACY_BIRTHDAY_SCREENS = [\n  SettingsScreens.PrivacyBirthdayAllowedContacts,\n  SettingsScreens.PrivacyBirthdayDeniedContacts,\n];\n\nconst PRIVACY_GIFTS_SCREENS = [\n  SettingsScreens.PrivacyGiftsAllowedContacts,\n  SettingsScreens.PrivacyGiftsDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nconst PRIVACY_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyNoPaidMessages,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  animationLevel: AnimationLevel;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onReset,\n  animationLevel,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal, openSettingsScreen } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  useScrollNotch({\n    containerRef,\n    selector: '.settings-content',\n  }, [currentScreen]);\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, activeScreen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBio]: PRIVACY_BIO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBirthday]: PRIVACY_BIRTHDAY_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGifts]: PRIVACY_GIFTS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyMessages]: PRIVACY_MESSAGES_SCREENS.includes(activeScreen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(activeScreen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(activeScreen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(activeScreen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(activeScreen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).map(Number).includes(activeScreen)\n      || Object.values(privacyAllowScreens).includes(true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            isActive={isScreenActive\n              || activeScreen === SettingsScreens.GeneralChatBackgroundColor\n              || activeScreen === SettingsScreens.GeneralChatBackground\n              || activeScreen === SettingsScreens.QuickReaction\n              || activeScreen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || activeScreen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            isActive={isScreenActive || activeScreen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyBio:\n      case SettingsScreens.PrivacyBirthday:\n      case SettingsScreens.PrivacyGifts:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            usersOnly={currentScreen === SettingsScreens.PrivacyNoPaidMessages}\n            withPremiumCategory={currentScreen === SettingsScreens.PrivacyGroupChatsAllowedContacts}\n            withMiniAppsCategory={currentScreen === SettingsScreens.PrivacyGiftsAllowedContacts}\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyMessages:\n        return (\n          <PrivacyMessages\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={activeScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(\n    isScreenActive: boolean,\n    _isFrom: boolean,\n    _currentKey: SettingsScreens,\n    activeKey: SettingsScreens,\n  ) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, activeKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      id=\"Settings\"\n      name={resolveTransitionName('layers', animationLevel, shouldSkipTransition)}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { sortUserIds } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterPeersByQuery({ ids: contactIds, query: filter, type: 'user' });\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo\n              userId={id}\n              forceShowSelf\n              avatarSize=\"large\"\n              ripple={!isMobile}\n            />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <Icon name=\"add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { isUserBot } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localPeerIds?: string[];\n  globalPeerIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localPeerIds,\n  globalPeerIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds\n      ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localPeerIds || []),\n        ...(globalPeerIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return user && !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, searchQuery, localPeerIds, globalPeerIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n          withDefaultPadding\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <Icon name=\"arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: localPeerIds } = localResults || {};\n\n    return {\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalPeerIds,\n      localPeerIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst MAX_MEMBERS_FOR_GENERATE_CHAT_NAME = 4;\n\nconst NewChatStep2: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  useEffect(() => {\n    if (isChannel) {\n      return;\n    }\n    if (!memberIds.length || memberIds.length > MAX_MEMBERS_FOR_GENERATE_CHAT_NAME) {\n      setTitle('');\n      return;\n    }\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const memberFirstNames = [global.currentUserId!, ...memberIds]\n      .map((userId) => getUserFirstOrLastName(usersById[userId]))\n      .filter(Boolean);\n    const generatedChatName = memberFirstNames.slice(0, -1).join(', ')\n      + lang('CreateGroup.PeersTitleLastDelimeter')\n      + memberFirstNames[memberFirstNames.length - 1];\n    setTitle(generatedChatName);\n  }, [isChannel, memberIds, lang]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n      isChannel: true,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '@teact';\nimport { memo, useCallback, useState } from '@teact';\nimport { getActions } from '../../../global';\n\nimport { type AnimationLevel, LeftColumnContent } from '../../../types';\n\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  animationLevel: AnimationLevel;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  animationLevel,\n  onReset,\n}) => {\n  const { openLeftColumnContent, setGlobalSearchQuery } = getActions();\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    openLeftColumnContent({\n      contentKey: isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2,\n    });\n  }, [isChannel]);\n\n  const changeSelectedMemberIdsHandler = useLastCallback((ids: string[]) => {\n    const isSelection = ids.length > newChatMemberIds.length;\n\n    setNewChatMemberIds(ids);\n    if (isSelection) {\n      setGlobalSearchQuery({ query: '' });\n    }\n  });\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={resolveTransitionName('layers', animationLevel)}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={changeSelectedMemberIdsHandler}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","// extracted by mini-css-extract-plugin\nexport default {\"name\":\"BDZrSTO_\",\"root\":\"QOz6fQFU\",\"avatar\":\"dXSy0i2c\",\"avatarHidden\":\"n0vJEdNW\",\"ghost\":\"E1IeDpeb\",\"ghostAnimateName\":\"HMp3KTKQ\",\"ghostRevealName\":\"unYkDic1\",\"ghostLast\":\"dZJGfaXC\"};","import { ANIMATION_END_DELAY } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { applyStyles } from '../../../util/animation';\nimport stopEvent from '../../../util/stopEvent';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport ribbonStyles from '../StoryRibbon.module.scss';\nimport togglerStyles from '../StoryToggler.module.scss';\n\nexport const ANIMATION_DURATION = 250;\nconst RIBBON_OFFSET = 0.25 * REM;\nconst RIBBON_Z_INDEX = 11;\nconst STROKE_OFFSET = 0.1875 * REM;\nconst CANVAS_OFFSET = 0.125 * REM;\n\nconst callbacks = new Set<NoneToVoidFunction>();\n\nexport function animateOpening(isArchived?: boolean) {\n  cancelDelayedCallbacks();\n\n  const {\n    container, toggler, leftMainHeader, ribbonPeers, toggleAvatars,\n  } = getHTMLElements(isArchived);\n\n  if (!toggler || !toggleAvatars || !ribbonPeers || !container || !leftMainHeader) {\n    return;\n  }\n\n  const { bottom: headerBottom, right: headerRight } = leftMainHeader.getBoundingClientRect();\n  const toTop = headerBottom + RIBBON_OFFSET;\n\n  // Toggle avatars are in the reverse order\n  const lastToggleAvatar = toggleAvatars[0];\n  const firstToggleAvatar = toggleAvatars[toggleAvatars.length - 1];\n  const lastId = getPeerId(lastToggleAvatar);\n\n  Array.from(ribbonPeers).reverse().forEach((peer, index, { length }) => {\n    const id = getPeerId(peer);\n    if (!id) return;\n    const isLast = id === lastId;\n    let toggleAvatar = selectByPeerId(toggler, id);\n    let zIndex = RIBBON_Z_INDEX + index + 1;\n    if (!toggleAvatar) {\n      const isSelf = index === length - 1;\n\n      // Self story should appear from the first toggle avatar\n      toggleAvatar = isSelf ? firstToggleAvatar : lastToggleAvatar;\n      zIndex = RIBBON_Z_INDEX;\n    }\n\n    if (!toggleAvatar) return;\n\n    let {\n\n      top: fromTop,\n      left: fromLeft,\n      width: fromWidth,\n    } = toggleAvatar.getBoundingClientRect();\n\n    const {\n      left: toLeft,\n      width: toWidth,\n    } = peer.getBoundingClientRect();\n\n    if (toLeft > headerRight) {\n      return;\n    }\n\n    fromLeft -= STROKE_OFFSET;\n    fromWidth += 2 * STROKE_OFFSET;\n\n    const fromTranslateX = fromLeft - toLeft;\n    const fromTranslateY = fromTop - toTop;\n    const fromScale = fromWidth / toWidth;\n\n    fromTop -= STROKE_OFFSET;\n\n    const toTranslateX = toLeft - fromLeft + 2 * STROKE_OFFSET;\n    const toTranslateY = toTop - fromTop + STROKE_OFFSET;\n    const toScale = toWidth / (fromWidth + 2 * STROKE_OFFSET);\n\n    requestMutation(() => {\n      if (!toggleAvatar) return;\n      const ghost = createGhost(peer);\n\n      let ghost2: HTMLElement | undefined;\n\n      // If this is a toogle avatar we create a second ghost and do crossfade animation\n      if (zIndex > RIBBON_Z_INDEX) {\n        ghost2 = createGhost(toggleAvatar);\n        if (isLast) {\n          ghost2.classList.add(togglerStyles.ghostLast);\n        }\n      } else {\n        // Else we animate only name\n        ghost.classList.add(togglerStyles.ghostAnimateName);\n      }\n\n      applyStyles(ghost, {\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        zIndex: String(zIndex),\n        opacity: ghost2 ? '0' : '',\n        transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScale})`,\n      });\n\n      if (ghost2) {\n        applyStyles(ghost2, {\n          top: `${fromTop}px`,\n          left: `${fromLeft}px`,\n          zIndex: String(zIndex),\n        });\n      }\n\n      container.appendChild(ghost);\n      if (ghost2) {\n        container.appendChild(ghost2);\n      }\n      toggleAvatar.classList.add('animating');\n      peer.classList.add('animating');\n\n      requestMutation(() => {\n        applyStyles(ghost, {\n          opacity: '',\n          transform: '',\n        });\n\n        if (ghost2) {\n          applyStyles(ghost2, {\n            opacity: '0',\n            transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScale})`,\n          });\n        } else {\n          ghost.classList.add(togglerStyles.ghostRevealName);\n        }\n\n        const cb = createDelayedCallback(() => {\n          requestMutation(() => {\n            if (container.contains(ghost)) {\n              container.removeChild(ghost);\n            }\n            if (ghost2 && container.contains(ghost2)) {\n              container.removeChild(ghost2);\n            }\n            toggleAvatar?.classList.remove('animating');\n            peer.classList.remove('animating');\n\n            callbacks.delete(cb);\n          });\n        }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n\n        callbacks.add(cb);\n      });\n    });\n  });\n}\n\nexport function animateClosing(isArchived?: boolean) {\n  cancelDelayedCallbacks();\n\n  const {\n    container,\n    toggler,\n    toggleAvatars,\n    ribbonPeers,\n    leftMainHeader,\n  } = getHTMLElements(isArchived);\n\n  if (!toggler || !toggleAvatars || !ribbonPeers || !container || !leftMainHeader) {\n    return;\n  }\n  const { right: headerRight } = leftMainHeader.getBoundingClientRect();\n\n  // Toggle avatars are in the reverse order\n  const lastToggleAvatar = toggleAvatars[0];\n  const firstToggleAvatar = toggleAvatars[toggleAvatars.length - 1];\n  const lastId = getPeerId(lastToggleAvatar);\n\n  Array.from(ribbonPeers).reverse().forEach((peer, index, { length }) => {\n    const id = getPeerId(peer);\n    if (!id) return;\n    const isLast = id === lastId;\n    let toggleAvatar = selectByPeerId(toggler, id);\n    let zIndex = RIBBON_Z_INDEX + index + 1;\n    if (!toggleAvatar) {\n      const isSelf = index === length - 1;\n\n      // Self story should appear from the first toggle avatar\n      toggleAvatar = isSelf ? firstToggleAvatar : lastToggleAvatar;\n      zIndex = RIBBON_Z_INDEX;\n    }\n\n    if (!toggleAvatar) return;\n\n    const {\n      top: fromTop,\n      left: fromLeft,\n      width: fromWidth,\n    } = peer.getBoundingClientRect();\n\n    let {\n      left: toLeft,\n      width: toWidth,\n      top: toTop,\n    } = toggleAvatar.getBoundingClientRect();\n\n    if (fromLeft > headerRight) {\n      return;\n    }\n\n    toLeft -= STROKE_OFFSET;\n    toWidth += 2 * STROKE_OFFSET;\n\n    const toTranslateX = toLeft - fromLeft;\n    const toTranslateY = toTop - fromTop - CANVAS_OFFSET;\n    const toScale = toWidth / fromWidth;\n\n    toTop -= STROKE_OFFSET;\n\n    const fromTranslateX = fromLeft - toLeft + 2 * STROKE_OFFSET;\n    const fromTranslateY = fromTop - toTop + STROKE_OFFSET;\n    const fromScale = fromWidth / (toWidth + 2 * STROKE_OFFSET);\n\n    requestMutation(() => {\n      const ghost = createGhost(peer);\n      let ghost2: HTMLElement | undefined;\n\n      if (zIndex > RIBBON_Z_INDEX) {\n        ghost2 = createGhost(toggleAvatar);\n        if (isLast) {\n          ghost2.classList.add(togglerStyles.ghostLast);\n        }\n      } else {\n        ghost.classList.add(togglerStyles.ghostAnimateName, togglerStyles.ghostRevealName);\n      }\n\n      applyStyles(ghost, {\n        top: `${fromTop}px`,\n        left: `${fromLeft}px`,\n        width: `${fromWidth}px`,\n        zIndex: String(zIndex),\n      });\n\n      if (ghost2) {\n        applyStyles(ghost2, {\n          top: `${toTop}px`,\n          left: `${toLeft}px`,\n          zIndex: String(zIndex),\n          opacity: '0',\n          transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScale})`,\n        });\n      }\n\n      peer.classList.add('animating');\n      toggleAvatar.classList.add('animating');\n\n      container.appendChild(ghost);\n      if (ghost2) {\n        container.appendChild(ghost2);\n      }\n\n      requestMutation(() => {\n        applyStyles(ghost, {\n          opacity: ghost2 ? '0' : '',\n          transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScale})`,\n        });\n\n        if (ghost2) {\n          applyStyles(ghost2, {\n            opacity: '',\n            transform: '',\n          });\n        } else {\n          ghost.classList.remove(togglerStyles.ghostRevealName);\n        }\n\n        const cb = createDelayedCallback(() => {\n          requestMutation(() => {\n            if (container.contains(ghost)) {\n              container.removeChild(ghost);\n            }\n            if (ghost2 && container.contains(ghost2)) {\n              container.removeChild(ghost2);\n            }\n            peer.classList.remove('animating');\n            toggleAvatar.classList.remove('animating');\n          });\n\n          callbacks.delete(cb);\n        }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n\n        callbacks.add(cb);\n      });\n    });\n  });\n}\n\nfunction getHTMLElements(isArchived?: boolean) {\n  let container = document.getElementById('LeftColumn');\n  if (container && isArchived) {\n    container = container.querySelector<HTMLElement>('.ArchivedChats');\n  }\n  if (!container) return {};\n  const toggler = container.querySelector<HTMLElement>('#StoryToggler');\n  const ribbon = container.querySelector<HTMLElement>('#StoryRibbon');\n  const leftMainHeader = container.querySelector<HTMLElement>('.left-header');\n  const ribbonPeers = ribbon?.querySelectorAll<HTMLElement>(`.${ribbonStyles.peer}`);\n  const toggleAvatars = toggler?.querySelectorAll<HTMLElement>('.Avatar');\n\n  return {\n    container,\n    toggler,\n    leftMainHeader,\n    ribbonPeers,\n    toggleAvatars,\n  };\n}\n\nfunction createGhost(sourceEl: HTMLElement) {\n  const ghost = sourceEl.cloneNode(true) as HTMLElement;\n  ghost.classList.add(togglerStyles.ghost);\n\n  // Avoid source animating class being copied to the ghost\n  ghost.classList.remove('animating');\n\n  ghost.draggable = false;\n  ghost.oncontextmenu = stopEvent;\n\n  const sourceCanvas = sourceEl.querySelector('canvas');\n  if (sourceCanvas) {\n    const canvas = ghost.querySelector('canvas');\n    canvas?.getContext('2d')?.drawImage(sourceCanvas, 0, 0);\n  }\n\n  return ghost;\n}\n\nfunction getPeerId(el: HTMLElement) {\n  return el?.getAttribute('data-peer-id');\n}\n\nfunction selectByPeerId(el: HTMLElement, id: string) {\n  return el?.querySelector<HTMLElement>(`[data-peer-id=\"${id}\"]`);\n}\n\nfunction createDelayedCallback(callback: NoneToVoidFunction, ms: number) {\n  const timeout = setTimeout(callback, ms);\n\n  return () => {\n    clearTimeout(timeout);\n    callback();\n  };\n}\n\nfunction cancelDelayedCallbacks() {\n  callbacks.forEach((cb) => cb());\n  callbacks.clear();\n}\n","import type React from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPeer } from '../../api/types';\nimport { StoryViewerOrigin } from '../../types';\n\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useStoryPreloader from './hooks/useStoryPreloader';\n\nimport Avatar from '../common/Avatar';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './StoryRibbon.module.scss';\n\ninterface OwnProps {\n  peer: ApiPeer;\n  isArchived?: boolean;\n}\n\nfunction StoryRibbonButton({ peer, isArchived }: OwnProps) {\n  const {\n    openChat,\n    openChatWithInfo,\n    openStoryViewer,\n    toggleStoriesHidden,\n  } = getActions();\n\n  const lang = useOldLang();\n  const ref = useRef<HTMLDivElement>();\n\n  const isSelf = 'isSelf' in peer && peer.isSelf;\n  const isChannel = !isUserId(peer.id);\n\n  useStoryPreloader(peer.id);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.story-peer-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen) return;\n\n    openStoryViewer({ peerId: peer.id, origin: StoryViewerOrigin.StoryRibbon });\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleSavedStories = useLastCallback(() => {\n    openChatWithInfo({ id: peer.id, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  const handleArchivedStories = useLastCallback(() => {\n    openChatWithInfo({ id: peer.id, shouldReplaceHistory: true, profileTab: 'storiesArchive' });\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: peer.id, shouldReplaceHistory: true });\n  });\n\n  const handleOpenProfile = useLastCallback(() => {\n    openChatWithInfo({ id: peer.id, shouldReplaceHistory: true });\n  });\n\n  const handleArchivePeer = useLastCallback(() => {\n    toggleStoriesHidden({ peerId: peer.id, isHidden: !isArchived });\n  });\n\n  return (\n    <div\n      ref={ref}\n      role=\"button\"\n      data-peer-id={peer.id}\n      tabIndex={0}\n      className={styles.peer}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      <Avatar\n        peer={peer}\n      />\n      <div className={buildClassName(styles.name, peer.hasUnreadStories && styles.name_hasUnreadStory)}>\n        {isSelf ? lang('MyStory') : getPeerTitle(lang, peer)}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName('story-peer-context-menu', styles.contextMenu)}\n          autoClose\n          withPortal\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {isSelf ? (\n            <>\n              <MenuItem onClick={handleSavedStories} icon=\"play-story\">\n                {lang('StoryList.Context.SavedStories')}\n              </MenuItem>\n              <MenuItem onClick={handleArchivedStories} icon=\"archive\">\n                {lang('StoryList.Context.ArchivedStories')}\n              </MenuItem>\n            </>\n          ) : (\n            <>\n              {!isChannel && (\n                <MenuItem onClick={handleOpenChat} icon=\"message\">\n                  {lang('SendMessageTitle')}\n                </MenuItem>\n              )}\n              {isChannel ? (\n                <MenuItem onClick={handleOpenProfile} icon=\"channel\">\n                  {lang('ChatList.ContextOpenChannel')}\n                </MenuItem>\n              ) : (\n                <MenuItem onClick={handleOpenProfile} icon=\"user\">\n                  {lang('StoryList.Context.ViewProfile')}\n                </MenuItem>\n              )}\n              <MenuItem\n                onClick={handleArchivePeer}\n                icon={isArchived ? 'unarchive' : 'archive'}\n              >\n                {lang(isArchived ? 'StoryList.Context.Unarchive' : 'StoryList.Context.Archive')}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryRibbonButton);\n","import { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUser } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StoryRibbonButton from './StoryRibbonButton';\n\nimport styles from './StoryRibbon.module.scss';\n\ninterface OwnProps {\n  isArchived?: boolean;\n  className?: string;\n  isClosing?: boolean;\n}\n\ninterface StateProps {\n  orderedPeerIds: string[];\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n}\n\nfunction StoryRibbon({\n  isArchived,\n  className,\n  orderedPeerIds,\n  usersById,\n  chatsById,\n  isClosing,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const fullClassName = buildClassName(\n    styles.root,\n    !orderedPeerIds.length && styles.hidden,\n    isClosing && styles.closing,\n    className,\n    'no-scrollbar',\n  );\n\n  const ref = useRef<HTMLDivElement>();\n\n  useHorizontalScroll(ref, getIsMobile());\n\n  return (\n    <div\n      ref={ref}\n      id=\"StoryRibbon\"\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {orderedPeerIds.map((peerId) => {\n        const peer = usersById[peerId] || chatsById[peerId];\n\n        if (!peer) {\n          return undefined;\n        }\n\n        return (\n          <StoryRibbonButton\n            key={peerId}\n            peer={peer}\n            isArchived={isArchived}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isArchived }): Complete<StateProps> => {\n    const { orderedPeerIds: { active, archived } } = global.stories;\n    const usersById = global.users.byId;\n    const chatsById = global.chats.byId;\n\n    return {\n      orderedPeerIds: isArchived ? archived : active,\n      usersById,\n      chatsById,\n    };\n  },\n)(StoryRibbon));\n","import {\n  beginHeavyAnimation, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport { ANIMATION_END_DELAY, PREVIEW_AVATAR_COUNT } from '../../config';\nimport { selectIsForumPanelOpen, selectPerformanceSettingsValue, selectTabState } from '../../global/selectors';\nimport { animateClosing, animateOpening, ANIMATION_DURATION } from './helpers/ribbonAnimation';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useStoryPreloader from './hooks/useStoryPreloader';\n\nimport Avatar from '../common/Avatar';\n\nimport styles from './StoryToggler.module.scss';\n\ninterface OwnProps {\n  isArchived?: boolean;\n  canShow?: boolean;\n}\n\ninterface StateProps {\n  currentUserId: string;\n  orderedPeerIds: string[];\n  isShown: boolean;\n  isForumPanelOpen?: boolean;\n  withAnimation?: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n  peerStories: GlobalState['stories']['byPeerId'];\n}\n\nconst PRELOAD_PEERS = 5;\n\nfunction StoryToggler({\n  currentUserId,\n  orderedPeerIds,\n  usersById,\n  chatsById,\n  canShow,\n  isShown,\n  isForumPanelOpen,\n  isArchived,\n  withAnimation,\n  peerStories,\n}: OwnProps & StateProps) {\n  const { toggleStoryRibbon } = getActions();\n\n  const lang = useOldLang();\n\n  const peers = useMemo(() => {\n    if (orderedPeerIds.length === 1) {\n      return [usersById[orderedPeerIds[0]] || chatsById[orderedPeerIds[0]]];\n    }\n\n    return orderedPeerIds\n      .map((id) => usersById[id] || chatsById[id])\n      .filter((peer) => peer && peer.id !== currentUserId)\n      .slice(0, PREVIEW_AVATAR_COUNT)\n      .reverse();\n  }, [currentUserId, orderedPeerIds, usersById, chatsById]);\n\n  const closeFriends = useMemo(() => {\n    if (!peers?.length) return {};\n    return peers.reduce((acc, peer) => {\n      const stories = peerStories[peer.id];\n      if (!stories) return acc;\n\n      const isCloseFriend = stories.orderedIds.some((id) => {\n        const story = stories.byId[id];\n        if (!story || !('isForCloseFriends' in story)) return false;\n        const isRead = stories.lastReadId && story.id <= stories.lastReadId;\n        return story.isForCloseFriends && !isRead;\n      });\n\n      acc[peer.id] = isCloseFriend;\n      return acc;\n    }, {} as Record<string, boolean>);\n  }, [peerStories, peers]);\n\n  const preloadPeerIds = useMemo(() => {\n    return orderedPeerIds.slice(0, PRELOAD_PEERS);\n  }, [orderedPeerIds]);\n\n  useStoryPreloader(preloadPeerIds);\n\n  const isVisible = canShow && isShown;\n  // For some reason, setting 'slow' here also fixes scroll freezes on iOS when collapsing Story Ribbon\n  const { ref, shouldRender } = useShowTransition<HTMLButtonElement>({\n    isOpen: isVisible,\n    className: 'slow',\n    withShouldRender: true,\n  });\n\n  useEffect(() => {\n    if (!withAnimation || isForumPanelOpen) return;\n    if (isVisible) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(isArchived);\n    } else {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(isArchived);\n    }\n  }, [isArchived, isVisible, withAnimation, isForumPanelOpen]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <button\n      ref={ref}\n      type=\"button\"\n      id=\"StoryToggler\"\n      className={styles.root}\n      aria-label={lang('Chat.Context.Peer.OpenStory')}\n      onClick={() => toggleStoryRibbon({ isShown: true, isArchived })}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {peers.map((peer) => (\n        <Avatar\n          key={peer.id}\n          peer={peer}\n          size=\"tiny\"\n          className={styles.avatar}\n        />\n      ))}\n    </button>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { isArchived }): Complete<StateProps> => {\n  const { orderedPeerIds: { archived, active }, byPeerId } = global.stories;\n  const { storyViewer: { isRibbonShown, isArchivedRibbonShown } } = selectTabState(global);\n  const isForumPanelOpen = selectIsForumPanelOpen(global);\n  const withAnimation = selectPerformanceSettingsValue(global, 'storyRibbonAnimations');\n\n  return {\n    currentUserId: global.currentUserId!,\n    orderedPeerIds: isArchived ? archived : active,\n    isShown: isArchived ? !isArchivedRibbonShown : !isRibbonShown,\n    isForumPanelOpen,\n    withAnimation,\n    usersById: global.users.byId,\n    chatsById: global.chats.byId,\n    peerStories: byPeerId,\n  };\n})(StoryToggler));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { ANIMATION_DURATION } from '../story/helpers/ribbonAnimation';\n\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../common/icons/Icon';\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  foldersDispatch: FolderEditDispatch;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransitionDeprecated(!isForumPanelOpen, undefined, undefined, false);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransitionDeprecated(\n    isStoryRibbonShown, undefined, undefined, '', false, ANIMATION_DURATION + ANIMATION_END_DELAY,\n  );\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'chat-list-wrapper',\n          shouldRenderStoryRibbon && 'with-story-ribbon',\n          storyRibbonClassNames,\n        )}\n      >\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          isMainList\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatFolderModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useOldLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID)\n      .map((folderId) => {\n        const folder = foldersById ? foldersById[folderId] : undefined;\n        const label = folder ? renderTextWithEntities({\n          text: folder.title.text,\n          entities: folder.title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }) : '';\n        return {\n          label,\n          value: String(folderId),\n        };\n      }) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className={buildClassName(styles.root, 'delete')}\n      contentClassName={styles.modalContent}\n      title={lang('FilterAddTo')}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <CheckboxGroup\n          options={folders}\n          selected={selectedFolderIds}\n          onChange={setSelectedFolderIds}\n        />\n      </div>\n      <div className={styles.footer}>\n        <div className=\"dialog-buttons\">\n          <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n            {lang('FilterAddTo')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalContent\":\"EG5lPWY1\",\"root\":\"_fJBBCCE\",\"main\":\"heYMHiUt\",\"footer\":\"_jtqAaUU\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MUTE_INDEFINITE_TIMESTAMP } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useOldLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let mutedUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      mutedUntil = MUTE_INDEFINITE_TIMESTAMP;\n    } else {\n      mutedUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, mutedUntil });\n    } else {\n      updateChatMutedState({ chatId, mutedUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectPeerPaidMessagesStars,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useSchedule from '../../hooks/useSchedule';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Loading from '../ui/Loading';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePreviousDeprecated(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): Complete<StateProps> => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const chatBot = chatId && selectBot(global, chatId);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n\n    const sendOptions = chat\n      ? getAllowedAttachmentOptions(chat, chatFullInfo, Boolean(chatBot), isSavedMessages)\n      : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo)\n      && sendOptions?.canSendStickers,\n    );\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const paidMessagesStars = chatId ? selectPeerPaidMessagesStars(global, chatId) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: !paidMessagesStars && selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nZYT4vJ3\",\"sets\":\"JzkmXjFF\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiSticker } from '../../api/types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSetIds,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useOldLang();\n\n  const customEmojiSets = useMemo(() => {\n    return customEmojiSetIds?.map((id) => getGlobal().stickers.setsById[id]);\n  }, [customEmojiSetIds]);\n\n  const customEmojiModalRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePreviousDeprecated(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useLastCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => {\n          return (\n            <StickerSetCard\n              key={customEmojiSet.id}\n              className={styles.setCard}\n              stickerSet={customEmojiSet}\n              onClick={handleSetClick}\n              observeIntersection={observeIntersectionForCovers}\n              noPlay={!canPlayAnimatedEmojis}\n            />\n          );\n        })}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotCommand, ApiChat, ApiDisallowedGifts,\n} from '../../api/types';\nimport type { IAnchorPosition, ThreadId } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { UNMUTE_TIMESTAMP } from '../../config';\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  getIsSavedDialog,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getIsChatMuted } from '../../global/helpers/notifications';\nimport {\n  selectBot,\n  selectCanGift,\n  selectCanManage,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsRightColumnShown,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectTopic,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { disableScrolling } from '../../util/scrollLock';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport Portal from '../ui/Portal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: IconName; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canViewBoosts?: boolean;\n  canViewMonetization?: boolean;\n  canShowBoostModal?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  channelMonoforumId?: string;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  botPrivacyPolicyUrl?: string;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  isForumAsMessages?: true;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  canReportChat?: boolean;\n  canGift?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n  isBlocked?: boolean;\n  isBot?: boolean;\n  isChatWithSelf?: boolean;\n  savedDialog?: ApiChat;\n  disallowedGifts?: ApiDisallowedGifts;\n  isAccountFrozen?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  botPrivacyPolicyUrl,\n  withForumActions,\n  isTopic,\n  isForum,\n  isForumAsMessages,\n  isChatInfoShown,\n  canStartBot,\n  canSubscribe,\n  canReportChat,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canViewMonetization,\n  canViewBoosts,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  canGift,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  isBlocked,\n  isBot,\n  isChatWithSelf,\n  savedDialog,\n  canShowBoostModal,\n  disallowedGifts,\n  isAccountFrozen,\n  channelMonoforumId,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    openFrozenAccountModal,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openMonetizationStatistics,\n    openBoostStatistics,\n    openGiftModal,\n    openThreadWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    openUrl,\n    toggleManagement,\n    togglePeerTranslations,\n    blockUser,\n    unblockUser,\n    setViewForumAsMessages,\n    openBoostModal,\n    reportMessages,\n    showNotification,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransitionDeprecated(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    return Object.values(disallowedGifts).every(Boolean);\n  }, [disallowedGifts]);\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleReport = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      setIsMenuOpen(false);\n      reportMessages({ chatId, messageIds: [] });\n    }\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      onClose();\n    } else {\n      setIsDeleteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openThreadWithInfo({ chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      sendBotCommand({ command: '/start' });\n    }\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      restartBot({ chatId });\n    }\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      updateChatMutedState({ chatId, mutedUntil: UNMUTE_TIMESTAMP });\n    }\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      closeMenu();\n    } else {\n      markRenderMuteModal();\n      setIsMuteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openCreateTopicPanel({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      toggleManagement({ force: true });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openEditTopicPanel({ chatId, topicId: Number(threadId) });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    setViewForumAsMessages({ chatId, isEnabled: false });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftClick = useLastCallback(() => {\n    if (areAllGiftsDisallowed && chat) {\n      showNotification({ message: lang('SendDisallowError') });\n      return;\n    }\n    openGiftModal({ forUserId: chatId });\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openGiftModal({ forUserId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openAddContactDialog({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      onSubscribeChannel();\n    }\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    }\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleMonetizationClick = useLastCallback(() => {\n    openMonetizationStatistics({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleBoostClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canViewBoosts) {\n      openBoostStatistics({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    } else {\n      openBoostModal({ chatId });\n    }\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      enterMessageSelectMode();\n    }\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  const handleBlock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      blockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      unblockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSendChannelMessage = useLastCallback(() => {\n    openChat({ id: channelMonoforumId });\n    closeMenu();\n  });\n\n  useEffect(disableScrolling, []);\n\n  const botButtons = useMemo(() => {\n    const commandButtons = botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n\n          onClick={handleClick}\n        >\n          {oldLang(cmd.label)}\n        </MenuItem>\n      );\n    });\n\n    const hasPrivacyCommand = botCommands?.some(({ command }) => command === 'privacy');\n\n    const privacyButton = isBot && (\n      <MenuItem\n        icon=\"privacy-policy\"\n\n        onClick={() => {\n          if (hasPrivacyCommand && !botPrivacyPolicyUrl) {\n            sendBotCommand({ command: '/privacy' });\n          } else {\n            openUrl({ url: botPrivacyPolicyUrl || oldLang('BotDefaultPrivacyPolicy') });\n          }\n          closeMenu();\n        }}\n      >\n        {oldLang('BotPrivacyPolicy')}\n      </MenuItem>\n    );\n\n    return [...commandButtons || [], privacyButton].filter(Boolean);\n  }, [botCommands, oldLang, botPrivacyPolicyUrl, isBot]);\n\n  const deleteTitle = useMemo(() => {\n    if (!chat) return undefined;\n\n    if (savedDialog) {\n      return oldLang('Delete');\n    }\n\n    if (isPrivate) {\n      return oldLang('DeleteChatUser');\n    }\n\n    if (canDeleteChat) {\n      return oldLang('GroupInfo.DeleteAndExit');\n    }\n\n    if (isChannel) {\n      return oldLang('LeaveChannel');\n    }\n\n    return oldLang('Group.LeaveGroup');\n  }, [canDeleteChat, chat, isChannel, isPrivate, savedDialog, oldLang]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {oldLang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {oldLang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {channelMonoforumId && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleSendChannelMessage}\n            >\n              {lang('ChannelSendMessage')}\n            </MenuItem>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? oldLang('lng_context_view_topic') : oldLang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {oldLang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {oldLang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {oldLang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && !isForumAsMessages && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {oldLang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {oldLang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {oldLang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canShowBoostModal && !canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang(isChannel ? 'BoostingBoostChannelMenu' : 'BoostingBoostGroupMenu')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {oldLang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {oldLang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {oldLang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {oldLang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {oldLang('ChatsMute')}\n                ...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {oldLang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {oldLang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {oldLang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang('Boosts')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {oldLang('Statistics')}\n            </MenuItem>\n          )}\n          {isChannel && canViewMonetization && (\n            <MenuItem\n              icon=\"cash-circle\"\n              onClick={handleMonetizationClick}\n            >\n              {oldLang('lng_channel_earn_title')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {oldLang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {oldLang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGift && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftClick}\n            >\n              {oldLang('ProfileSendAGift')}\n            </MenuItem>\n          )}\n          {isBot && (\n            <MenuItem\n              icon={isBlocked ? 'bots' : 'hand-stop'}\n              onClick={isBlocked ? handleRestartBot : handleBlock}\n            >\n              {isBlocked ? oldLang('BotRestart') : oldLang('Bot.Stop')}\n            </MenuItem>\n          )}\n          {isPrivate && !isChatWithSelf && !isBot && (\n            <MenuItem\n              icon={isBlocked ? 'user' : 'hand-stop'}\n              onClick={isBlocked ? handleUnblock : handleBlock}\n            >\n              {isBlocked ? oldLang('Unblock') : oldLang('BlockUser')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {deleteTitle}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={savedDialog || chat}\n            isSavedDialog={Boolean(savedDialog)}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    if (!chat || isRestricted) {\n      return {} as Complete<StateProps>;\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n    const canReportChat = isMainThread && !user && (isChatChannel(chat) || isChatGroup(chat)) && !isChatAdmin(chat);\n\n    const chatBot = !isSystemBot(chatId) ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGift = selectCanGift(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const savedDialog = isSavedDialog ? selectChat(global, String(threadId)) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const chatInfo = selectTabState(global).chatInfo;\n\n    return {\n      chat,\n      isMuted: getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      isForumAsMessages: chat?.isForumAsMessages,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      canReportChat,\n      canGift,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      botPrivacyPolicyUrl: chatBot ? userFullInfo?.botInfo?.privacyPolicyUrl : undefined,\n      isChatInfoShown: chatInfo.isOpen && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n      isBlocked: userFullInfo?.isBlocked,\n      isBot: Boolean(chatBot),\n      isChatWithSelf,\n      savedDialog,\n      disallowedGifts: userFullInfo?.disallowedGifts,\n      isAccountFrozen,\n    };\n  },\n)(HeaderMenuContainer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vv5ppXel\",\"active\":\"FVgqrSSK\",\"info\":\"DboxqiZd\",\"topRow\":\"Ymu2m1PR\",\"meta\":\"A2rsvUBm\",\"subtitle\":\"qUzmwaIn\",\"webPageInfo\":\"oJc5we4P\",\"webPageSite\":\"s3_9Vro3\",\"webPageTitle\":\"yHiXuUNs\",\"mediaPreview\":\"i0nNHWse\",\"clickable\":\"zZTQ0N6S\",\"mediaImage\":\"q7pECane\",\"round\":\"POIISsPN\",\"spoiler\":\"hTsgqcW9\",\"playIcon\":\"nQXtQwpa\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer, ApiWebPage } from '../../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getMessageSenderName } from '../../../global/helpers/peers';\nimport { selectWebPageFromMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport LastMessageMeta from '../../common/LastMessageMeta';\nimport MessageSummary from '../../common/MessageSummary';\n\nimport styles from './MiddleSearchResult.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  message: ApiMessage;\n  senderPeer?: ApiPeer;\n  messageChat?: ApiChat;\n  shouldShowChat?: boolean;\n  query?: string;\n  className?: string;\n  onClick: (message: ApiMessage) => void;\n};\n\ntype StateProps = {\n  webPage?: ApiWebPage;\n};\n\nconst TRUNCATE_LENGTH = 200;\n\nconst MiddleSearchResult = ({\n  isActive,\n  message,\n  senderPeer,\n  messageChat,\n  shouldShowChat,\n  query,\n  className,\n  onClick,\n  webPage,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n  const hiddenForwardTitle = message.forwardInfo?.hiddenUserName;\n\n  const peer = shouldShowChat ? messageChat : senderPeer;\n\n  const senderName = shouldShowChat && senderPeer ? getMessageSenderName(lang, message.chatId, senderPeer) : undefined;\n\n  const thumbDataUri = useThumbnail(message);\n  const mediaThumbnail = !getMessageSticker(message) ? thumbDataUri : undefined;\n  const mediaHash = useMessageMediaHash(message, 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n  const hasVideo = Boolean(getMessageVideo(message));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const hasMediaPreview = Boolean(mediaBlobUrl || mediaThumbnail);\n\n  const webPageInfo = webPage?.webpageType === 'full' ? {\n    siteName: webPage.siteName || webPage.displayUrl,\n    title: webPage.title,\n    url: webPage.url,\n    isSafe: message.content.webPage?.isSafe,\n  } : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(message);\n  });\n\n  const handleWebPageClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (!webPageInfo?.url) return;\n\n    const { openUrl } = getActions();\n    openUrl({ url: webPageInfo.url, shouldSkipModal: webPageInfo.isSafe });\n  });\n\n  const handleMediaClick = useLastCallback((e: React.MouseEvent) => {\n    if (webPageInfo?.url) {\n      e.stopPropagation();\n      const { openUrl } = getActions();\n      openUrl({ url: webPageInfo.url, shouldSkipModal: webPageInfo.isSafe });\n    }\n  });\n\n  return (\n    <div\n      role=\"button\"\n      tabIndex={0}\n      className={buildClassName(styles.root, isActive && styles.active, className)}\n      onClick={handleClick}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={peer}\n        text={hiddenForwardTitle}\n        size=\"medium\"\n      />\n      <div className={styles.info}>\n        <div className={styles.topRow}>\n          {(peer && <FullNameTitle peer={peer} withEmojiStatus />) || hiddenForwardTitle}\n          <LastMessageMeta className={styles.meta} message={message} />\n        </div>\n        <div className={styles.subtitle} dir=\"auto\">\n          {senderName && (\n            <>\n              <span className=\"sender-name\">{renderText(senderName)}</span>\n              <span className=\"colon\">:</span>\n            </>\n          )}\n          <MessageSummary message={message} highlight={query} truncateLength={TRUNCATE_LENGTH} />\n        </div>\n        {webPageInfo && (\n          <div\n            className={styles.webPageInfo}\n            onClick={handleWebPageClick}\n            role=\"button\"\n            tabIndex={0}\n            title={webPageInfo.url}\n          >\n            <div className={styles.webPageSite}>{renderText(webPageInfo.siteName)}</div>\n            {webPageInfo.title && (\n              <div className={styles.webPageTitle}>{renderText(webPageInfo.title)}</div>\n            )}\n          </div>\n        )}\n      </div>\n      {hasMediaPreview && (\n        <div\n          className={buildClassName(\n            styles.mediaPreview,\n            webPageInfo && styles.clickable,\n          )}\n          onClick={handleMediaClick}\n          role={webPageInfo ? 'button' : undefined}\n          tabIndex={webPageInfo ? 0 : undefined}\n          title={webPageInfo?.url}\n        >\n          <img\n            src={mediaBlobUrl || mediaThumbnail}\n            alt=\"\"\n            className={buildClassName(\n              styles.mediaImage,\n              isRoundVideo && styles.round,\n              isSpoiler && styles.spoiler,\n            )}\n            draggable={false}\n          />\n          {hasVideo && <i className={buildClassName(styles.playIcon, 'icon icon-play')} />}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): Complete<StateProps> => {\n    return {\n      webPage: selectWebPageFromMessage(global, message),\n    };\n  },\n)(MiddleSearchResult));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FTMljUuX\",\"header\":\"OvmjSMwA\",\"active\":\"DEIUzXQd\",\"avatar\":\"mp1PmoMq\",\"input\":\"z2K8Q7ib\",\"mobile\":\"u0fb78AA\",\"focused\":\"dqF8dYNx\",\"withDropdown\":\"AqhBggrp\",\"adaptSearchBorders\":\"Q9RZQaTu\",\"dropdown\":\"MFGvbICO\",\"dropdownHidden\":\"Alee0CKy\",\"results\":\"RtfTOE72\",\"placeholder\":\"O1HoZFge\",\"separator\":\"_Yy43QLl\",\"savedTags\":\"BcvAfv1E\",\"domainButtons\":\"KamajtjH\",\"domainButtonWrapper\":\"bNdv38ki\",\"domainButton\":\"wTJ6uBy1\",\"removeDomainButton\":\"YLtqVQ3h\",\"addDomainButton\":\"VPrUqLUm\",\"newDomainInput\":\"cDiKK557\",\"wrap\":\"JkESCST6\",\"searchTags\":\"rO3pH3LI\",\"savedSearchTag\":\"qA4gov4D\",\"hash\":\"q5NOmUAM\",\"searchTypes\":\"rVYZG__K\",\"searchType\":\"nE1Xwoo7\",\"selectedType\":\"i29dP8iT\",\"footer\":\"jyS1l9yn\",\"keyboard-visible\":\"ao05jKHW\",\"keyboardVisible\":\"ao05jKHW\",\"counter\":\"NmmL_cO3\",\"mobileNavigation\":\"dLO1hlHU\",\"navigationButton\":\"Z4vLAlsu\",\"navigationDisabled\":\"IqA7R2xO\",\"jumpIn\":\"n9kXbTu6\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../../api/types';\nimport type {\n  CustomPeer, MiddleSearchParams, MiddleSearchType, ThreadId,\n} from '../../../types';\n\nimport { ANONYMOUS_USER_ID } from '../../../config';\nimport { requestMeasure, requestMutation, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog, getReactionKey, isSameReaction, isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectMonoforumChannel,\n  selectSender,\n  selectTabState,\n} from '../../../global/selectors';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport focusNoScroll from '../../../util/focusNoScroll';\nimport { getSearchResultKey, parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { debounce, fastRaf } from '../../../util/schedulers';\n\nimport { useClickOutside } from '../../../hooks/events/useOutsideClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useLocalStorage } from '../../../hooks/useStorage';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport SavedTagButton from '../message/reactions/SavedTagButton';\nimport MiddleSearchResult from './MiddleSearchResult';\n\nimport reactionStyles from '../message/reactions/ReactionButton.module.scss';\nimport styles from './MiddleSearch.module.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  monoforumChat?: ApiChat;\n  threadId?: ThreadId;\n  requestedQuery?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  savedTag?: ApiReaction;\n  totalCount?: number;\n  lastSearchQuery?: string;\n  foundIds?: SearchResultKey[];\n  isHistoryCalendarOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  isSavedMessages?: boolean;\n  fetchingQuery?: string;\n  isHashtagQuery?: boolean;\n  searchType?: MiddleSearchType;\n  currentUserId?: string;\n};\n\nconst CHANNELS_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'channel-filled',\n  titleKey: 'SearchPublicPosts',\n};\nconst FOCUSED_SEARCH_TRIGGER_OFFSET = 5;\nconst HIDE_TIMEOUT = 200;\nconst RESULT_ITEM_CLASS_NAME = 'MiddleSearchResult';\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MiddleSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  monoforumChat,\n  threadId,\n  requestedQuery,\n  savedTags,\n  savedTag,\n  totalCount,\n  lastSearchQuery,\n  foundIds,\n  isHistoryCalendarOpen,\n  isCurrentUserPremium,\n  isSavedMessages,\n  fetchingQuery,\n  isHashtagQuery,\n  searchType = 'chat',\n  currentUserId,\n}) => {\n  const {\n    updateMiddleSearch,\n    resetMiddleSearch,\n    performMiddleSearch,\n    focusMessage,\n    closeMiddleSearch,\n    openHistoryCalendar,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n  const shouldCancelSearchRef = useRef(false);\n\n  const { isMobile } = useAppLayout();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [query, setQuery] = useState(requestedQuery || '');\n  const [focusedIndex, setFocusedIndex] = useState(0);\n  const canFocusNewer = foundIds && focusedIndex > 0;\n  const canFocusOlder = foundIds && focusedIndex < foundIds.length - 1;\n\n  const [isFullyHidden, setIsFullyHidden] = useState(!isActive);\n  const hiddenTimerRef = useRef<number>();\n  const maybeLongPressActiveRef = useRef(true);\n\n  const [isFocused, markFocused, markBlurred] = useFlag();\n  const [isViewAsList, setIsViewAsList] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [customTerms, setCustomTerms] = useLocalStorage<string[]>({\n    key: 'search_custom_terms',\n    initValue: [],\n  });\n  const [isAddingDomain, setIsAddingDomain] = useState(false);\n  const [newDomainValue, setNewDomainValue] = useState('');\n  const newDomainInputRef = useRef<HTMLInputElement>();\n\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    if (maybeLongPressActiveRef.current) return;\n    // Ignore clicks inside modals\n    if ((event.target as HTMLElement).closest('.Modal')) return;\n    markBlurred();\n  });\n  useClickOutside([ref], handleClickOutside);\n\n  const hasResultsContainer = Boolean(((query || savedTag) && foundIds) || isHashtagQuery);\n  const isOnlyHash = isHashtagQuery && !query;\n  const areResultsEmpty = Boolean((query || savedTag) && foundIds && !foundIds.length && !isLoading && !isOnlyHash);\n  const hasResultsPlaceholder = areResultsEmpty || isOnlyHash;\n  const isNonFocusedDropdownForced = searchType === 'myChats' || searchType === 'channels';\n  const hasResultsDropdown = isActive && (isViewAsList || !isMobile) && (isFocused || isNonFocusedDropdownForced)\n    && Boolean(\n      hasResultsContainer || hasResultsPlaceholder || savedTags,\n    );\n\n  const hasQueryData = Boolean((query && !isOnlyHash) || savedTag);\n  const hasNavigationButtons = searchType === 'chat' && Boolean(foundIds?.length);\n\n  const handleClose = useLastCallback(() => {\n    closeMiddleSearch();\n  });\n\n  const focusInput = useLastCallback(() => {\n    requestMeasure(() => {\n      focusNoScroll(inputRef.current);\n    });\n  });\n\n  const blurInput = useLastCallback(() => {\n    inputRef.current?.blur();\n  });\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Reset focus on query result\n  useEffect(() => {\n    setFocusedIndex(-1);\n  }, [lastSearchQuery]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n      setIsViewAsList(true);\n      setFocusedIndex(0);\n      setQuery('');\n      hiddenTimerRef.current = window.setTimeout(() => setIsFullyHidden(true), HIDE_TIMEOUT);\n    } else {\n      setIsFullyHidden(false);\n      clearTimeout(hiddenTimerRef.current);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!requestedQuery || !chat?.id) return;\n    setQuery(requestedQuery);\n    updateMiddleSearch({ chatId: chat.id, threadId, update: { requestedQuery: undefined } });\n    setIsLoading(true);\n\n    requestNextMutation(() => {\n      const input = inputRef.current;\n      if (!input) return;\n      focusEditableElement(input, true, true);\n      markFocused();\n    });\n  }, [chat?.id, requestedQuery, threadId]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (isActive !== prevIsActive && !query && lastSearchQuery) {\n      setQuery(lastSearchQuery); // Restore query when returning back\n    }\n  }, [isActive, lastSearchQuery, query]);\n\n  useEffectWithPrevDeps(([prevIsCalendarOpen]) => {\n    if (!isActive || prevIsCalendarOpen === isHistoryCalendarOpen) return;\n    if (isHistoryCalendarOpen) {\n      blurInput();\n      markBlurred();\n    } else {\n      focusInput();\n    }\n  }, [isHistoryCalendarOpen, isActive]);\n\n  const handleReset = useLastCallback(() => {\n    if (!query?.length && !savedTag) {\n      handleClose();\n      return;\n    }\n\n    setQuery('');\n    setIsLoading(false);\n    resetMiddleSearch();\n    focusInput();\n  });\n\n  useEffect(() => (isActive ? captureEscKeyListener(handleReset) : undefined), [isActive, handleClose]);\n\n  const savedTagsArray = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasSavedTags = Boolean(savedTagsArray?.length);\n  const areSavedTagsDisabled = hasSavedTags && !isCurrentUserPremium;\n\n  useEffect(() => {\n    if (isSavedMessages && isActive) loadSavedReactionTags();\n  }, [isSavedMessages, isActive]);\n\n  const handleSearch = useLastCallback(() => {\n    const chatId = chat?.id;\n    if (!chatId) {\n      return;\n    }\n\n    runDebouncedForSearch(() => {\n      if (shouldCancelSearchRef.current) return;\n      performMiddleSearch({ chatId, threadId, query });\n    });\n  });\n\n  const handleQueryChange = useLastCallback((newQuery: string) => {\n    shouldCancelSearchRef.current = false;\n\n    if (newQuery.startsWith('#') && !isHashtagQuery) {\n      updateMiddleSearch({ chatId: chat!.id, threadId, update: { isHashtag: true } });\n      setQuery(newQuery.slice(1));\n      handleSearch();\n      return;\n    }\n\n    setQuery(newQuery);\n\n    if (!newQuery) {\n      setIsLoading(false);\n\n      if (!savedTag) {\n        resetMiddleSearch();\n        shouldCancelSearchRef.current = true;\n      }\n    }\n  });\n\n  useEffect(() => {\n    if (query || savedTag) {\n      handleSearch();\n    }\n  }, [query, savedTag]);\n\n  useEffect(() => {\n    setIsLoading(Boolean(fetchingQuery));\n  }, [fetchingQuery]);\n\n  useEffect(() => {\n    if (isAddingDomain && newDomainInputRef.current) {\n      newDomainInputRef.current.focus();\n    }\n  }, [isAddingDomain]);\n\n  useEffect(() => {\n    if (!foundIds?.length) return;\n    const isClose = foundIds.length - focusedIndex < FOCUSED_SEARCH_TRIGGER_OFFSET;\n    if (isClose) {\n      handleSearch();\n    }\n  }, [focusedIndex, foundIds?.length]);\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    maybeLongPressActiveRef.current = true;\n\n    function focus() {\n      inputRef.current?.focus();\n      markFocused();\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    function removeListeners() {\n      window.removeEventListener('touchend', focus);\n      window.removeEventListener('mouseup', focus);\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    window.addEventListener('touchend', focus);\n    window.addEventListener('mouseup', focus);\n\n    window.addEventListener('touchstart', removeListeners);\n    window.addEventListener('mousedown', removeListeners);\n\n    return () => {\n      removeListeners();\n      window.removeEventListener('touchstart', removeListeners);\n      window.removeEventListener('mousedown', removeListeners);\n    };\n  }, [isActive]);\n\n  useHistoryBack({\n    isActive,\n    onBack: handleClose,\n  });\n\n  const [viewportIds, getMore, viewportOffset = 0] = useInfiniteScroll(handleSearch, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if ((!query && !savedTag) || !viewportIds?.length) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n\n    return viewportIds.map((searchResultKey) => {\n      const [chatId, id] = parseSearchResultKey(searchResultKey);\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return undefined;\n      }\n\n      const originalSender = (isSavedMessages || isSystemBot(chatId) || chatId === ANONYMOUS_USER_ID)\n        ? selectForwardedSender(global, message) : undefined;\n      const messageSender = selectSender(global, message);\n      const messageChat = selectChat(global, message.chatId);\n\n      const senderPeer = originalSender || messageSender;\n\n      return {\n        searchResultKey,\n        message,\n        messageChat,\n        senderPeer,\n      };\n    }).filter(Boolean);\n  }, [query, savedTag, viewportIds, isSavedMessages]);\n\n  const handleMessageClick = useLastCallback((message: ApiMessage) => {\n    const searchResultKey = getSearchResultKey(message);\n    const index = foundIds?.indexOf(searchResultKey) || 0;\n    const realIndex = index + viewportOffset;\n    setFocusedIndex(realIndex);\n\n    if (searchType === 'chat') {\n      setIsViewAsList(false);\n    }\n\n    focusMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      threadId: !isHashtagQuery ? threadId : undefined,\n    });\n\n    markBlurred();\n  });\n\n  const handleTriggerViewStyle = useLastCallback(() => {\n    setIsViewAsList((prev) => !prev);\n    markFocused();\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, hasResultsContainer, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      handleMessageClick(foundResult.message);\n      setFocusedIndex(index + viewportOffset);\n    }\n  }, `.${RESULT_ITEM_CLASS_NAME}`, true);\n\n  const updateSearchParams = useLastCallback((update: Partial<MiddleSearchParams>) => {\n    updateMiddleSearch({ chatId: chat!.id, threadId, update });\n\n    handleSearch();\n  });\n\n  const activateSearchTag = useLastCallback((tag: ApiReaction) => {\n    if (areSavedTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    shouldCancelSearchRef.current = false;\n    updateSearchParams({ savedTag: tag });\n  });\n\n  const removeSearchSavedTag = useLastCallback(() => {\n    updateSearchParams({ savedTag: undefined });\n  });\n\n  const handleDeleteTag = useLastCallback(() => {\n    if (isHashtagQuery) {\n      updateSearchParams({ isHashtag: false });\n      return;\n    }\n\n    if (savedTag) {\n      removeSearchSavedTag();\n    }\n  });\n\n  const handleChangeSearchType = useLastCallback((type: MiddleSearchType) => {\n    updateSearchParams({ type });\n    setIsViewAsList(true);\n  });\n\n  const handleFocusOlder = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleFocusNewer = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  function renderTypeTag(type: MiddleSearchType, isForTag?: boolean) {\n    const isSelected = !isForTag && searchType === type;\n    switch (type) {\n      case 'chat':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={chat?.id}\n            title={oldLang('SearchThisChat')}\n            clickArg=\"chat\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'myChats':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={currentUserId}\n            forceShowSelf\n            title={oldLang('SearchMyMessages')}\n            clickArg=\"myChats\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'channels':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            customPeer={CHANNELS_PEER}\n            title={oldLang('SearchPublicPosts')}\n            clickArg=\"channels\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n    }\n    return undefined;\n  }\n\n  const presavedDomains = useMemo(() => [\n    'youtube.com',\n    'youtu.be',\n  ], []);\n\n  const allDomains = useMemo(() => [\n    ...presavedDomains,\n    ...customTerms,\n  ], [presavedDomains, customTerms]);\n\n  const handleDomainClick = useLastCallback((domain: string) => {\n    if (query === domain) {\n      handleQueryChange('');\n    } else {\n      handleQueryChange(domain);\n    }\n    focusInput();\n  });\n\n  const handleAddDomainClick = useLastCallback(() => {\n    setIsAddingDomain(true);\n  });\n\n  const handleSaveDomain = useLastCallback(() => {\n    const trimmedValue = newDomainValue.trim();\n    if (trimmedValue && !allDomains.includes(trimmedValue)) {\n      setCustomTerms([...customTerms, trimmedValue]);\n    }\n    setNewDomainValue('');\n    setIsAddingDomain(false);\n  });\n\n  const handleCancelAddDomain = useLastCallback(() => {\n    setNewDomainValue('');\n    setIsAddingDomain(false);\n  });\n\n  const handleRemoveDomain = useLastCallback((domain: string) => {\n    setCustomTerms(customTerms.filter((d: string) => d !== domain));\n    if (query === domain) {\n      setQuery('');\n    }\n  });\n\n  const handleNewDomainKeyDown = useLastCallback((e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleSaveDomain();\n    } else if (e.key === 'Escape') {\n      e.preventDefault();\n      handleCancelAddDomain();\n    }\n  });\n\n  function renderDropdown() {\n    return (\n      <div className={buildClassName(styles.dropdown, !hasResultsDropdown && styles.dropdownHidden)}>\n        {!isMobile && <div className={styles.separator} />}\n        \n        {!isHashtagQuery && (\n          <div\n            className={buildClassName(\n              styles.domainButtons,\n              !isMobile && styles.wrap,\n              'no-scrollbar',\n            )}\n          >\n            {allDomains.map((domain) => {\n              const isChosen = query === domain;\n              const isCustom = customTerms.includes(domain);\n              return (\n                <div key={domain} className={styles.domainButtonWrapper}>\n                  <Button\n                    className={buildClassName(\n                      reactionStyles.root,\n                      styles.domainButton,\n                      isChosen && reactionStyles.chosen,\n                    )}\n                    size=\"tiny\"\n                    onClick={() => handleDomainClick(domain)}\n                  >\n                    {domain}\n                  </Button>\n                  {isCustom && (\n                    <button\n                      className={styles.removeDomainButton}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleRemoveDomain(domain);\n                      }}\n                      aria-label=\"Remove\"\n                    >\n                      <Icon name=\"close\" />\n                    </button>\n                  )}\n                </div>\n              );\n            })}\n            {isAddingDomain ? (\n              <input\n                ref={newDomainInputRef}\n                type=\"text\"\n                className={styles.newDomainInput}\n                value={newDomainValue}\n                placeholder=\"Enter search term...\"\n                onChange={(e) => setNewDomainValue(e.target.value)}\n                onKeyDown={handleNewDomainKeyDown}\n                onBlur={() => {\n                  setTimeout(handleCancelAddDomain, 100);\n                }}\n              />\n            ) : (\n              <Button\n                className={buildClassName(reactionStyles.root, styles.addDomainButton)}\n                size=\"tiny\"\n                onClick={handleAddDomainClick}\n              >\n                <Icon name=\"add\" />\n              </Button>\n            )}\n          </div>\n        )}\n        \n        <div className={styles.separator} />\n        {hasSavedTags && !isHashtagQuery && (\n          <div\n            className={buildClassName(\n              styles.savedTags,\n              !isMobile && styles.wrap,\n              'no-scrollbar',\n            )}\n          >\n            {savedTagsArray.map((tag) => {\n              const isChosen = isSameReaction(tag.reaction, savedTag);\n              return (\n                <SavedTagButton\n                  containerId=\"local-search\"\n                  key={getReactionKey(tag.reaction)}\n                  reaction={tag.reaction}\n                  tag={tag}\n                  withCount\n                  isDisabled={areSavedTagsDisabled}\n                  isChosen={isChosen}\n                  onClick={isChosen ? removeSearchSavedTag : activateSearchTag}\n                />\n              );\n            })}\n          </div>\n        )}\n        {isHashtagQuery && (\n          <div\n            className={buildClassName(styles.searchTypes, 'no-scrollbar')}\n          >\n            {renderTypeTag('chat')}\n            {renderTypeTag('myChats')}\n            {renderTypeTag('channels')}\n          </div>\n        )}\n        {hasResultsContainer && (\n          <InfiniteScroll\n            ref={containerRef}\n            className={buildClassName(styles.results, 'custom-scroll')}\n            items={viewportResults}\n            itemSelector={`.${RESULT_ITEM_CLASS_NAME}`}\n            preloadBackwards={0}\n            onLoadMore={getMore}\n            onKeyDown={handleKeyDown}\n          >\n            {areResultsEmpty && (\n              <span key=\"nothing\" className={styles.placeholder}>\n                {query ? oldLang('NoResultFoundFor', query) : oldLang('NoResult')}\n              </span>\n            )}\n            {isOnlyHash && (\n              <span key=\"enterhash\" className={styles.placeholder}>\n                {oldLang('HashtagSearchPlaceholder')}\n              </span>\n            )}\n            {viewportResults?.map(({\n              message, senderPeer, messageChat, searchResultKey,\n            }, i) => (\n              <MiddleSearchResult\n                key={searchResultKey}\n                teactOrderKey={-message.date}\n                className={RESULT_ITEM_CLASS_NAME}\n                query={query}\n                message={message}\n                senderPeer={senderPeer}\n                messageChat={messageChat}\n                shouldShowChat={isHashtagQuery}\n                isActive={focusedIndex - viewportOffset === i}\n                onClick={handleMessageClick}\n              />\n            ))}\n          </InfiniteScroll>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      id=\"MiddleSearch\"\n      className={buildClassName(\n        styles.root,\n        isActive && styles.active,\n        !isActive && isFullyHidden && 'visually-hidden', // `display: none` would prevent focus on iOS\n        isFocused && styles.focused,\n        isMobile && styles.mobile,\n      )}\n      ref={ref}\n    >\n      <div className={styles.header}>\n        {!isMobile && (\n          <Avatar\n            className={styles.avatar}\n            peer={monoforumChat || chat}\n            size=\"medium\"\n            isSavedMessages={isSavedMessages}\n          />\n        )}\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          className={buildClassName(\n            styles.input,\n            hasResultsDropdown && styles.withDropdown,\n            hasResultsDropdown && !isMobile && styles.adaptSearchBorders,\n          )}\n          canClose={!isMobile}\n          isLoading={isLoading}\n          resultsItemSelector={`.${styles.results} .${RESULT_ITEM_CLASS_NAME}`}\n          hasUpButton={hasNavigationButtons && !isMobile}\n          hasDownButton={hasNavigationButtons && !isMobile}\n          placeholder={isHashtagQuery ? oldLang('SearchHashtagsHint') : oldLang('Search')}\n          teactExperimentControlled\n          onChange={handleQueryChange}\n          onStartBackspace={handleDeleteTag}\n          onReset={handleReset}\n          withBackIcon={isMobile}\n          onFocus={markFocused}\n          focused={isFocused}\n          onUpClick={canFocusOlder ? handleFocusOlder : undefined}\n          onDownClick={canFocusNewer ? handleFocusNewer : undefined}\n        >\n          <div className={styles.searchTags}>\n            {savedTag && (\n              <SavedTagButton\n                containerId=\"local-search-tags\"\n                className={styles.savedSearchTag}\n                reaction={savedTag}\n                tag={savedTags![getReactionKey(savedTag)]}\n                onClick={removeSearchSavedTag}\n              />\n            )}\n            {isHashtagQuery && <div className={styles.hash}>#</div>}\n          </div>\n          {!isMobile && renderDropdown()}\n        </SearchInput>\n        {!isMobile && (\n          <div className={styles.icons}>\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel={oldLang('JumpToDate')}\n            >\n              <Icon name=\"calendar\" />\n            </Button>\n          </div>\n        )}\n      </div>\n      {isMobile && renderDropdown()}\n      {isMobile && (\n        <div className={styles.footer}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n\n            onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n            ariaLabel={oldLang('JumpToDate')}\n          >\n            <Icon name=\"calendar\" />\n          </Button>\n          <div className={styles.counter}>\n            {hasQueryData && (\n              foundIds?.length ? (\n                oldLang('Of', [Math.max(focusedIndex + 1, 1), totalCount])\n              ) : foundIds && !foundIds.length && (\n                oldLang('NoResult')\n              )\n            )}\n          </div>\n          {searchType === 'chat' && Boolean(foundIds?.length) && (\n            <Button\n              className={styles.viewStyle}\n              size=\"smaller\"\n              isText\n              fluid\n              noForcedUpperCase\n              onClick={handleTriggerViewStyle}\n            >\n              {isViewAsList ? oldLang('SearchAsChat') : oldLang('SearchAsList')}\n            </Button>\n          )}\n          {hasNavigationButtons && !hasResultsDropdown && (\n            <div className={styles.mobileNavigation}>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusOlder && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusOlder}\n                nonInteractive={!canFocusOlder}\n                ariaLabel={lang('AriaSearchOlderResult')}\n              >\n                <Icon name=\"up\" />\n              </Button>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusNewer && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusNewer}\n                nonInteractive={!canFocusNewer}\n                ariaLabel={lang('AriaSearchNewerResult')}\n              >\n                <Icon name=\"down\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {} as Complete<StateProps>;\n    }\n    const { chatId, threadId } = currentMessageList;\n\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {} as Complete<StateProps>;\n    }\n\n    const {\n      requestedQuery, savedTag, results, fetchingQuery, isHashtag, type,\n    } = selectCurrentMiddleSearch(global) || {};\n    const { totalCount, foundIds, query: lastSearchQuery } = results || {};\n\n    const currentUserId = global.currentUserId;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    const monoforumChat = selectMonoforumChannel(global, chatId);\n\n    return {\n      chat,\n      monoforumChat,\n      requestedQuery,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n      savedTags,\n      savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSavedMessages,\n      fetchingQuery,\n      isHashtagQuery: isHashtag,\n      currentUserId,\n      searchType: type,\n      lastSearchQuery,\n    };\n  },\n)(MiddleSearch));\n","import type { ElementRef } from '../../lib/teact/teact';\nimport { useEffect } from '../../lib/teact/teact';\n\nimport useLastCallback from '../useLastCallback';\n\n// Fragile\nexport function useClickOutside(\n  refs: ElementRef<HTMLElement>[], callback: (event: MouseEvent) => void,\n) {\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    const clickedOutside = refs.every((ref) => {\n      return ref.current && !ref.current.contains(event.target as Node);\n    });\n\n    if (clickedOutside) callback(event);\n  });\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent, ThreadId } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectShouldLoopStickers,\n} from '../../../global/selectors';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport StickerSetCover from './StickerSetCover';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  isForEffects?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  effectStickers?: ApiSticker[];\n  effectEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  effectStickers,\n  effectEmojis,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n  isForEffects,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat?.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useOldLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (isForEffects && effectStickers) {\n      const effectSets: StickerSetOrReactionsSetOrRecent[] = [];\n      if (effectEmojis?.length) {\n        effectSets.push({\n          id: EFFECT_EMOJIS_SET_ID,\n          accessHash: '0',\n          title: '',\n          stickers: effectEmojis,\n          count: effectEmojis.length,\n          isEmoji: true,\n        });\n      }\n      if (effectStickers?.length) {\n        effectSets.push({\n          id: EFFECT_STICKERS_SET_ID,\n          accessHash: '0',\n          title: lang('StickerEffects'),\n          stickers: effectStickers,\n          count: effectStickers.length,\n        });\n      }\n      return effectSets;\n    }\n\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    const userSetIds = [...(addedSetIds || [])];\n    if (chatStickerSetId) {\n      userSetIds.unshift(chatStickerSetId);\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, userSetIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds,\n    stickerSetsById,\n    favoriteStickers,\n    recentStickers,\n    chatStickerSetId,\n    lang,\n    effectStickers,\n    isForEffects,\n    effectEmojis,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents\n    && !noPopulatedSets && (canSendStickers || isForEffects);\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  if (!chat) return undefined;\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <Icon name=\"recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <Icon name=\"favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n              forcePlayback\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n          forcePlayback\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  const isLoading = !shouldRenderContents && (canSendStickers || isForEffects) && !noPopulatedSets;\n\n  return (\n    <Transition className={fullClassName} activeKey={isLoading ? 0 : 1} name=\"fade\" shouldCleanup>\n      {!shouldRenderContents ? (\n        !canSendStickers && !isForEffects ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )\n      ) : (\n        <>\n          {!isForEffects && (\n            <div ref={headerRef} className={headerClassName}>\n              <div className=\"shared-canvas-container\">\n                <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n                {allSets.map(renderCover)}\n              </div>\n            </div>\n          )}\n          <div\n            ref={containerRef}\n            onMouseMove={handleMouseMove}\n            onScroll={handleContentScroll}\n            className={\n              buildClassName(\n                styles.main,\n                IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n                !isForEffects && styles.hasHeader,\n              )\n            }\n          >\n            {allSets.map((stickerSet, i) => (\n              <StickerSet\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n                noContextMenus={noContextMenus}\n                index={i}\n                idPrefix={prefix}\n                observeIntersection={observeIntersectionForSet}\n                observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n                observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n                isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n                favoriteStickers={favoriteStickers}\n                isSavedMessages={isSavedMessages}\n                isCurrentUserPremium={isCurrentUserPremium}\n                isTranslucent={isTranslucent}\n                isChatStickerSet={stickerSet.id === chatStickerSetId}\n                onStickerSelect={handleStickerSelect}\n                onStickerUnfave={handleStickerUnfave}\n                onStickerFave={handleStickerFave}\n                onStickerRemoveRecent={handleRemoveRecentSticker}\n                forcePlayback\n                shouldHideHeader={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      effect,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      effectStickers: effect?.stickers,\n      effectEmojis: effect?.emojis,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo, useRef,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiMessage,\n  ApiReaction,\n  ApiReactionWithPaid,\n} from '../../../../api/types';\n\nimport {\n  getReactionKey, sortReactions,\n} from '../../../../global/helpers';\nimport { selectChatFullInfo } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nimport ReactionEmoji from '../../../common/reactions/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  selectedReactionIds?: string[];\n  message?: ApiMessage;\n  onReactionSelect: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  isWithPaidReaction?: boolean;\n  reactionsLimit?: number;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  isWithPaidReaction,\n  message,\n  reactionsLimit,\n  onReactionSelect,\n  onReactionContext,\n}) => {\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const currentReactions = message?.reactions?.results;\n\n  const shouldUseCurrentReactions = reactionsLimit && currentReactions\n    && currentReactions.length >= reactionsLimit;\n\n  const allAvailableReactions = useMemo(() => {\n    if (shouldUseCurrentReactions) {\n      const reactions = currentReactions.map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactions.unshift({ type: 'paid' });\n      }\n      return reactions;\n    }\n\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      const reactionsToSort: ApiReactionWithPaid[] = (availableReactions || []).map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactionsToSort.unshift({ type: 'paid' });\n      }\n      return sortReactions(reactionsToSort, topReactions);\n    }\n\n    const reactionsToSort: ApiReactionWithPaid[] = enabledReactions.allowed.slice();\n    if (isWithPaidReaction) {\n      reactionsToSort.unshift({ type: 'paid' });\n    }\n\n    return sortReactions(reactionsToSort, topReactions);\n  }, [\n    availableReactions, enabledReactions, topReactions, shouldUseCurrentReactions, currentReactions, isWithPaidReaction,\n  ]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect}\n                onContextMenu={onReactionContext}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { availableReactions, topReactions } = global.reactions;\n\n    const { maxUniqueReactions } = global.appConfig;\n    const { enabledReactions, isPaidReactionAvailable } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n      reactionsLimit: maxUniqueReactions,\n      isWithPaidReaction: isPaidReactionAvailable,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"MhpiTAwi\",\"wrapper\":\"NIaqmosK\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiReaction,\n  ApiReactionWithPaid,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n} from '../../../../api/types';\nimport type { IAnchorPosition } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\n\nimport { getReactionKey, getStoryKey } from '../../../../global/helpers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectIsContextMenuTranslucent,\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isUserId } from '../../../../util/entities/ids';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { buildCustomEmojiHtml } from '../../composer/helpers/customEmoji';\n\nimport { getIsMobile } from '../../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../../../common/CustomEmojiPicker';\nimport Menu from '../../../ui/Menu';\nimport StickerPicker from '../../composer/StickerPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  shouldUseFullPicker?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n  sendAsMessage?: boolean;\n  chatId?: string;\n  isForEffects?: boolean;\n  availableEffectById: Record<string, ApiAvailableEffect>;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  shouldUseFullPicker,\n  sendAsMessage,\n  chatId,\n  isForEffects,\n  availableEffectById,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification, sendStoryReaction, saveEffectInDraft,\n    requestEffectInComposer, addLocalPaidReaction, openPaidReactionModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryPeerId = useCurrentOrPrev(story?.peerId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  const menuRef = useRef<HTMLDivElement>();\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, shouldUseFullPicker]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryPeerId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction: ApiReaction = sticker.isCustomEmoji\n      ? { type: 'custom', documentId: sticker.id }\n      : { type: 'emoji', emoticon: sticker.emoji! };\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    if (reaction.type === 'paid') {\n      addLocalPaidReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, count: 1,\n      });\n    } else {\n      toggleReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n      });\n    }\n    closeReactionPicker();\n  });\n\n  const handleReactionContextMenu = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (reaction.type !== 'paid') return;\n\n    openPaidReactionModal({\n      chatId: renderedChatId!,\n      messageId: renderedMessageId!,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((item: ApiReactionWithPaid | ApiSticker) => {\n    if ('type' in item && item.type === 'paid') return; // Not supported for stories\n\n    const reaction = 'id' in item ? { type: 'custom', documentId: item.id } as const : item;\n\n    const sticker = 'type' in item && item.type === 'custom' ? getGlobal().customEmojis.byId[item.documentId]\n      : 'id' in item ? item : undefined;\n\n    if (sticker && !sticker.isFree && !isCurrentUserPremium) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n\n      closeReactionPicker();\n\n      return;\n    }\n\n    if (!sendAsMessage) {\n      sendStoryReaction({\n        peerId: renderedStoryPeerId!,\n        storyId: renderedStoryId!,\n        containerId: getStoryKey(renderedStoryPeerId!, renderedStoryId!),\n        reaction,\n        shouldAddToRecent: true,\n      });\n      closeReactionPicker();\n      return;\n    }\n\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('type' in item && item.type === 'emoji') {\n      text = item.emoticon;\n    } else {\n      const customEmojiMessage = parseHtmlAsFormattedText(buildCustomEmojiHtml(sticker!));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker) => {\n    const availableEffects = Object.values(availableEffectById);\n    const effectId = availableEffects.find((effect) => effect.effectStickerId === sticker.id)?.id;\n\n    if (chatId) saveEffectInDraft({ chatId, threadId: MAIN_THREAD_ID, effectId });\n\n    if (effectId) requestEffectInComposer({});\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push(getReactionKey(reaction));\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !shouldUseFullPicker && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      anchor={renderingPosition}\n      positionY={story && 'bottom'}\n      getTriggerElement={getTriggerElement}\n      getRootElement={getRootElement}\n      getMenuElement={getMenuElement}\n      getLayout={getLayout}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      {isForEffects && chatId ? (\n        <StickerPicker\n          className=\"\"\n          isHidden={!isOpen}\n          loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n          idPrefix=\"message-effect\"\n          canSendStickers={false}\n          noContextMenus={false}\n          chatId={chatId}\n          isTranslucent={isTranslucent}\n          onStickerSelect={handleStickerSelect}\n          isForEffects={isForEffects}\n        />\n      ) : (\n        <>\n          <CustomEmojiPicker\n            chatId={renderedChatId}\n            idPrefix=\"message-emoji-set-\"\n            isHidden={!isOpen || !(shouldUseFullPicker || renderedStoryId)}\n            loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n            isReactionPicker\n            className={!shouldUseFullPicker && !renderedStoryId ? styles.hidden : undefined}\n            selectedReactionIds={selectedReactionIds}\n            isTranslucent={isTranslucent}\n            onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n            onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n            onReactionContext={handleReactionContextMenu}\n          />\n          {!shouldUseFullPicker && Boolean(renderedChatId) && (\n            <ReactionPickerLimited\n              chatId={renderedChatId}\n              loadAndPlay={isOpen}\n              onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n              onReactionContext={handleReactionContextMenu}\n              selectedReactionIds={selectedReactionIds}\n              message={message}\n            />\n          )}\n        </>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const state = selectTabState(global);\n  const availableEffectById = global.availableEffectById;\n  const {\n    chatId, messageId, storyPeerId, storyId, position, sendAsMessage, isForEffects,\n  } = state.reactionPicker || {};\n  const story = storyPeerId && storyId\n    ? selectPeerStory(global, storyPeerId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = isUserId(chatId || storyPeerId || '');\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const { maxUniqueReactions } = global.appConfig;\n  const areAllReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  const currentReactions = message?.reactions?.results;\n  const shouldUseCurrentReactions = Boolean(maxUniqueReactions && currentReactions\n    && currentReactions.length >= maxUniqueReactions);\n\n  return {\n    message,\n    story,\n    position,\n    shouldUseFullPicker: (chat?.isForbidden || areSomeReactionsAllowed || shouldUseCurrentReactions) ? false\n      : (areAllReactionsAllowed || isPrivateChat),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    sendAsMessage,\n    isForEffects,\n    chatId,\n    availableEffectById,\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"gBh4WvBC\",\"menuContent\":\"qSfKwMzX\",\"storyMenu\":\"srpBMrqr\",\"onlyReactions\":\"dRNSqkOC\",\"hidden\":\"KVwgF6DG\"};","import { fixImageContent } from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QucaiGVU\",\"preview\":\"SHoF85Vw\",\"duration\":\"nI2M1SBH\",\"single\":\"FjrnqGba\",\"no-grouping\":\"g0cTsM9d\",\"noGrouping\":\"g0cTsM9d\",\"file\":\"B6f6GcvN\",\"overlay\":\"bX7LdgxW\",\"action-item\":\"Zo7u5epf\",\"actionItem\":\"Zo7u5epf\",\"delete-file\":\"CYJwy9T_\",\"deleteFile\":\"CYJwy9T_\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_PHOTO_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'photo':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <Icon\n                name=\"delete\"\n                className={buildClassName(styles.actionItem, styles.deleteFile)}\n\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <Icon\n            name={attachment.shouldSendAsSpoiler ? 'spoiler-disable' : 'spoiler'}\n            className={styles.actionItem}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n\n            <Icon name=\"delete\" className={styles.actionItem} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport function getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_PHOTO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'photo';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","export default function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","import { type ElementRef } from '../lib/teact/teact';\n\nimport isFullyVisible from './visibility/isFullyVisible';\nimport animateScroll from './animateScroll';\nimport findInViewport from './findInViewport';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: ElementRef<HTMLElement>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll({\n      container,\n      element: allElements[index],\n      position,\n      margin: SCROLL_MARGIN,\n    });\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  useEffect(() => {\n    if (!isActive) setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [isActive, shouldRemoveSelectionOnReset]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePreviousDeprecated(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"a27O2Qlr\",\"mobile\":\"khvUZbGZ\",\"symbolMenuOpen\":\"ir5kkMy1\",\"header-border\":\"Pc1k8G8s\",\"headerBorder\":\"Pc1k8G8s\",\"sendButtonStar\":\"C1OOt81o\",\"attachments\":\"_bxSIFgj\",\"attachments-bottom-padding\":\"RPVunBe2\",\"attachmentsBottomPadding\":\"RPVunBe2\",\"caption-wrapper\":\"EtmiUn2k\",\"captionWrapper\":\"EtmiUn2k\",\"caption-top-border\":\"FjjSKMYe\",\"captionTopBorder\":\"FjjSKMYe\",\"caption\":\"Te7lIfpB\",\"dropTarget\":\"AT_d9l0W\",\"dropOutlineContainer\":\"d9O65j_I\",\"dropOutline\":\"jzCBDWMw\",\"outline\":\"xjNY3Z8u\",\"hovered\":\"AnO3BgVv\",\"send-wrapper\":\"wDqWK9MD\",\"sendWrapper\":\"wDqWK9MD\",\"send\":\"kNlWmBJI\",\"is-pointer-env\":\"rYZmraWo\",\"isPointerEnv\":\"rYZmraWo\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAttachment, ApiChatMember, ApiMessage, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getAttachmentMediaType } from '../../../global/helpers';\nimport { selectChatFullInfo, selectIsChatWithSelf, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { validateFiles } from '../../../util/files';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { removeAllSelections } from '../../../util/selection';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useFlag from '../../../hooks/useFlag';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport MentionTooltip from './MentionTooltip';\nimport MessageInput from './MessageInput';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  attachments: ApiAttachment[];\n  editingMessage?: ApiMessage;\n  messageListType?: MessageListType;\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n  canScheduleUntilOnline?: boolean;\n  canSchedule?: boolean;\n  onSendWhenOnline?: NoneToVoidFunction;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n  shouldSaveAttachmentsCompression?: boolean;\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  editingMessage,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSaveAttachmentsCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n  canScheduleUntilOnline,\n  canSchedule,\n  onSendWhenOnline,\n  paidMessagesStars,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const svgRef = useRef<SVGSVGElement>();\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const mainButtonRef = useRef<HTMLButtonElement>();\n  const inputRef = useRef<HTMLDivElement>();\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePreviousDeprecated(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const isEditing = editingMessage && Boolean(editingMessage);\n  const isInAlbum = editingMessage && editingMessage?.groupedId;\n  const isEditingMessageFile = isEditing && attachments?.length && getAttachmentMediaType(attachments[0]);\n  const notEditingFile = isEditingMessageFile !== 'file';\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const shouldSendCompressed = attachmentSettings.shouldCompress;\n  const isSendingCompressed = Boolean(\n    (shouldSendCompressed || shouldForceCompression || isInAlbum) && !shouldForceAsFile,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n  const isInvertedMedia = attachmentSettings.isInvertedMedia;\n  const [shouldSendInHighQuality, setShouldSendInHighQuality] = useState(\n    attachmentSettings.shouldSendInHighQuality,\n  );\n  const [renderingShouldSendInHighQuality, setRenderingShouldSendInHighQuality] = useState(shouldSendInHighQuality);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  const timerRef = useRef<number | undefined>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n      setShouldSendInHighQuality(attachmentSettings.shouldSendInHighQuality);\n    }\n  }, [attachmentSettings, isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [updateAttachmentSettings, isOpen]);\n\n  function setIsInvertedMedia(value?: true) {\n    updateAttachmentSettings({ isInvertedMedia: value });\n  }\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage && !editingMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped, isInvertedMedia);\n      updateAttachmentSettings({\n        ...(shouldSaveAttachmentsCompression && {\n          defaultAttachmentCompression: attachmentSettings.shouldCompress ? 'compress' : 'original',\n        }),\n        shouldSendGrouped,\n        isInvertedMedia,\n        shouldSendInHighQuality,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: true,\n    })));\n  });\n\n  const handleToggleShouldCompress = useLastCallback(() => {\n    const newValue = !shouldSendCompressed;\n    updateAttachmentSettings({ shouldCompress: newValue });\n  });\n\n  const handleToggleQuality = useLastCallback(() => {\n    const newValue = !shouldSendInHighQuality;\n    setShouldSendInHighQuality(newValue);\n    updateAttachmentSettings({ shouldSendInHighQuality: newValue });\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  const handleResize = useLastCallback(() => {\n    const svg = svgRef.current;\n    if (!svg) {\n      return;\n    }\n\n    const { width, height } = svg.getBoundingClientRect();\n    svg.viewBox.baseVal.width = width;\n    svg.viewBox.baseVal.height = height;\n  });\n\n  // Can't listen for SVG resize\n  useResizeObserver(ref, handleResize);\n\n  useEffectOnce(handleResize);\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [oldLang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios, hasAnyPhoto] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    const anyPhoto = renderingAttachments.some((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio, anyPhoto];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  useEffect(() => {\n    if (shouldSendInHighQuality === renderingShouldSendInHighQuality) return;\n    if (timerRef.current) clearTimeout(timerRef.current);\n    timerRef.current = window.setTimeout(() => {\n      setRenderingShouldSendInHighQuality(shouldSendInHighQuality);\n    }, CLOSE_MENU_ANIMATION_DURATION);\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n        timerRef.current = undefined;\n      }\n    };\n  }, [shouldSendInHighQuality, renderingShouldSendInHighQuality]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  const canInvertMedia = (() => {\n    if (isEditing) return false;\n    if (!hasMedia) return false;\n    if (!shouldForceAsFile && !shouldForceCompression && !isSendingCompressed) return false;\n    if (isMultiple && shouldSendGrouped) return false;\n    return true;\n  })();\n\n  let title = '';\n  const attachmentsLength = renderingAttachments.length;\n  if (areAllPhotos) {\n    title = oldLang(isEditing ? 'EditMessageReplacePhoto' : 'PreviewSender.SendPhoto', attachmentsLength, 'i');\n  } else if (areAllVideos) {\n    title = oldLang(isEditing ? 'EditMessageReplaceVideo' : 'PreviewSender.SendVideo', attachmentsLength, 'i');\n  } else if (areAllAudios) {\n    title = oldLang(isEditing ? 'EditMessageReplaceAudio' : 'PreviewSender.SendAudio', attachmentsLength, 'i');\n  } else {\n    title = oldLang(isEditing ? 'EditMessageReplaceFile' : 'PreviewSender.SendFile', attachmentsLength, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        {notEditingFile && !isInAlbum\n          && (\n            <DropdownMenu\n              className=\"attachmeneditingMessaget-modal-more-menu with-menu-transitions\"\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              {Boolean(!editingMessage) && (\n                <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{oldLang('Add')}</MenuItem>\n              )}\n              {hasMedia && (\n                <>\n                  {\n                    canInvertMedia && (!isInvertedMedia ? (\n\n                      <MenuItem icon=\"move-caption-up\" onClick={() => setIsInvertedMedia(true)}>\n                        {lang('ContextMoveTextUp')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"move-caption-down\" onClick={() => setIsInvertedMedia(undefined)}>\n                        {lang('ContextMoveTextDown')}\n                      </MenuItem>\n                    ))\n                  }\n                  {\n                    !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n\n                      <MenuItem icon=\"document\" onClick={handleToggleShouldCompress}>\n                        {oldLang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"photo\" onClick={handleToggleShouldCompress}>\n                        {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                      </MenuItem>\n                    ))\n                  }\n                  {isSendingCompressed && !editingMessage && hasAnyPhoto && (\n                    <MenuItem\n                      icon={renderingShouldSendInHighQuality ? 'sd-photo' : 'hd-photo'}\n                      onClick={handleToggleQuality}\n                    >\n                      {lang(renderingShouldSendInHighQuality ? 'SendInStandardQuality' : 'SendInHighQuality')}\n                    </MenuItem>\n                  )}\n                  {isSendingCompressed && hasAnySpoilerable && Boolean(!editingMessage) && (\n                    hasSpoiler ? (\n                      <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                        {oldLang('Attachment.DisableSpoiler')}\n                      </MenuItem>\n                    ) : (\n                      <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                        {oldLang('Attachment.EnableSpoiler')}\n                      </MenuItem>\n                    )\n                  )}\n                </>\n              )}\n              {isMultiple && (\n                shouldSendGrouped ? (\n                  <MenuItem\n                    icon=\"grouped-disable\"\n\n                    onClick={() => setShouldSendGrouped(false)}\n                  >\n                    Ungroup All Media\n                  </MenuItem>\n                ) : (\n\n                  <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                    Group All Media\n                  </MenuItem>\n                )\n              )}\n            </DropdownMenu>\n          )}\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n  const buttonSendCaption = paidMessagesStars ? formatStarsAsIcon(lang,\n    attachmentsLength * paidMessagesStars,\n    {\n      className: styles.sendButtonStar,\n      asFont: true,\n    }) : oldLang('Send');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      noBackdropClose\n      isLowStackPriority\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={oldLang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <svg className={styles.dropOutlineContainer}>\n          <rect className={styles.dropOutline} x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" rx=\"8\" />\n        </svg>\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n              forceDarkTheme={forceDarkTheme}\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={oldLang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                size=\"smaller\"\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule && !editingMessage ? oldLang('Next')\n                  : editingMessage ? oldLang('Save') : buttonSendCaption}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={canSchedule && isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                  onSendWhenOnline={onSendWhenOnline}\n                  canScheduleUntilOnline={canScheduleUntilOnline}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const { shouldSaveAttachmentsCompression } = selectTabState(global);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { shouldSuggestCustomEmoji } = global.settings.byKey;\n    const { language } = selectSharedSettings(global);\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n      shouldSaveAttachmentsCompression,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  maxOptionsCount?: number;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst FALLBACK_MAX_OPTIONS_COUNT = 12;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal = ({\n  isOpen,\n  isQuiz,\n  shouldBeAnonymous,\n  maxOptionsCount = FALLBACK_MAX_OPTIONS_COUNT,\n  onSend,\n  onClear,\n}: OwnProps) => {\n  const questionInputRef = useRef<HTMLInputElement>();\n  const optionsListRef = useRef<HTMLDivElement>();\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useOldLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const isNoCorrectOptionError = isQuizMode && (correctOption === undefined || !options[correctOption].trim());\n\n    const answers = options\n      .map((text, index) => {\n        text = text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          text: {\n            text,\n          },\n          option: String(index),\n          ...(index === correctOption && { correct: true }),\n        };\n      }).filter(Boolean);\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    if (!questionTrimmed || answers.length < 2) {\n      setQuestion(questionTrimmed);\n      if (answers.length) {\n        const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter(Boolean);\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isNoCorrectOptionError) {\n      setHasErrors(true);\n      return;\n    }\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: {\n          text: questionTrimmed,\n        },\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseHtmlAsFormattedText(solution.substring(0, MAX_SOLUTION_LENGTH)))\n        || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < maxOptionsCount) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          maxLength={MAX_OPTION_LENGTH}\n          label={index !== options.length - 1 || options.length === maxOptionsCount\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n\n            onClick={() => removeOption(index)}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: !options[index].trim() }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <div className=\"dialog-checkbox-group\">\n          {!shouldBeAnonymous && (\n            <Checkbox\n              label={lang('PollAnonymous')}\n              checked={isAnonymous}\n              onChange={handleIsAnonymousChange}\n            />\n          )}\n          <Checkbox\n            label={lang('PollMultiple')}\n            checked={isMultipleAnswers}\n            disabled={isQuizMode}\n            onChange={handleMultipleAnswersChange}\n          />\n          <Checkbox\n            label={lang('PollQuiz')}\n            checked={isQuizMode}\n            disabled={isMultipleAnswers || isQuiz !== undefined}\n            onChange={handleQuizModeChange}\n          />\n        </div>\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNewMediaTodo } from '../../../api/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { TabState } from '../../../global/types/tabState';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectChatMessage } from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { generateUniqueNumberId } from '../../../util/generateUniqueId';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport './ToDoListModal.scss';\n\nexport type OwnProps = {\n  modal: TabState['todoListModal'];\n  onSend: (todoList: ApiNewMediaTodo) => void;\n  onClear: () => void;\n};\n\nexport type StateProps = {\n  editingMessage?: ApiMessage;\n  maxItemsCount: number;\n  maxTitleLength: number;\n  maxItemLength: number;\n};\n\ntype Item = {\n  id: number;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTION_LENGTH = 100;\n\nconst ToDoListModal = ({\n  modal,\n  maxItemsCount,\n  maxTitleLength,\n  maxItemLength,\n  editingMessage,\n  onSend,\n  onClear,\n}: OwnProps & StateProps) => {\n  const { editTodo, closeTodoListModal, appendTodoList } = getActions();\n\n  const titleInputRef = useRef<HTMLInputElement>();\n  const itemsListRef = useRef<HTMLDivElement>();\n\n  const [title, setTitle] = useState<string>('');\n  const [items, setItems] = useState<Item[]>([{ id: generateUniqueNumberId(), text: '' }]);\n  const [isOthersCanAppend, setIsOthersCanAppend] = useState(true);\n  const [isOthersCanComplete, setIsOthersCanComplete] = useState(true);\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  // Treat \"Add task\" as edit mode for own checklists\n  const isAddTaskMode = renderingModal?.forNewTask && !editingMessage?.isOutgoing;\n\n  const editingTodo = editingMessage?.content.todo?.todo;\n\n  const frozenTasks = useMemo(() => {\n    if (!isAddTaskMode || !editingTodo) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return editingTodo.items.map((item) => ({\n      id: item.id,\n      text: item.title.text,\n      isDisabled: true,\n    }));\n  }, [isAddTaskMode, editingTodo]);\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (editingTodo) {\n      setTitle(editingTodo.title.text);\n      setIsOthersCanAppend(editingTodo.othersCanAppend ?? false);\n      setIsOthersCanComplete(editingTodo.othersCanComplete ?? false);\n      if (!isAddTaskMode) {\n        const editingItems = editingTodo.items.map((item) => ({\n          id: item.id,\n          text: item.title.text,\n        }));\n        if (editingItems.length < maxItemsCount) {\n          editingItems.push({ id: generateUniqueNumberId(), text: '' });\n        }\n        setItems(editingItems);\n      }\n    }\n  }, [editingTodo, isAddTaskMode, maxItemsCount]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setTitle('');\n      setItems([{ id: generateUniqueNumberId(), text: '' }]);\n      setIsOthersCanAppend(true);\n      setIsOthersCanComplete(true);\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isOpen) {\n      // Wait for the DOM to be updated\n      requestMeasure(() => {\n        if (renderingModal?.forNewTask) {\n          const inputs = itemsListRef.current?.querySelectorAll('input');\n          const lastInput = inputs?.[inputs.length - 1];\n          lastInput?.focus();\n        } else {\n          focusInput(titleInputRef);\n        }\n      });\n    }\n  }, [focusInput, isOpen, renderingModal?.forNewTask]);\n\n  const addNewItem = useLastCallback((newItems: Item[]) => {\n    const id = generateUniqueNumberId();\n    setItems([...newItems, { id, text: '' }]);\n\n    requestNextMutation(() => {\n      const list = itemsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const todoItems = items\n      .map((item) => {\n        const text = item.text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          id: item.id,\n          title: {\n            text: text.substring(0, maxItemLength),\n          },\n        };\n      }).filter(Boolean);\n\n    const titleTrimmed = title.trim().substring(0, maxTitleLength);\n    if (!titleTrimmed || todoItems.length === 0) {\n      setTitle(titleTrimmed);\n      if (todoItems.length) {\n        const itemsTrimmed = items.map((o) => (\n          { ...o, text: o.text.trim().substring(0, maxItemLength) }))\n          .filter((o) => o.text.length);\n        if (itemsTrimmed.length === 0) {\n          addNewItem([]);\n        } else {\n          setItems([...itemsTrimmed, { id: generateUniqueNumberId(), text: '' }]);\n        }\n      } else {\n        addNewItem([]);\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isAddTaskMode && editingMessage) {\n      appendTodoList({\n        chatId: editingMessage.chatId,\n        messageId: editingMessage.id,\n        items: todoItems,\n      });\n      closeTodoListModal();\n      return;\n    }\n\n    const payload: ApiNewMediaTodo = {\n      todo: {\n        title: {\n          text: titleTrimmed,\n        },\n        items: todoItems,\n        othersCanAppend: isOthersCanAppend,\n        othersCanComplete: isOthersCanComplete,\n      },\n    };\n\n    if (editingMessage) {\n      editTodo({\n        chatId: editingMessage.chatId,\n        todo: payload,\n        messageId: editingMessage.id,\n      });\n    } else {\n      onSend(payload);\n    }\n\n    closeTodoListModal();\n  });\n\n  const updateItem = useLastCallback((index: number, text: string) => {\n    const newItems = [...items];\n    newItems[index] = { ...newItems[index], text };\n    if (newItems[newItems.length - 1].text.trim().length && newItems.length < maxItemsCount) {\n      addNewItem(newItems);\n    } else {\n      setItems(newItems);\n    }\n  });\n\n  const removeItem = useLastCallback((index: number) => {\n    const newItems = [...items];\n    newItems.splice(index, 1);\n    setItems(newItems);\n\n    requestNextMutation(() => {\n      if (!itemsListRef.current) {\n        return;\n      }\n\n      itemsListRef.current.classList.toggle('overflown', itemsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleIsOthersCanAppendChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanAppend(e.target.checked);\n  });\n  const handleIsOthersCanCompleteChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanComplete(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleCreate();\n    }\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  });\n\n  const getTitleError = useLastCallback(() => {\n    if (hasErrors && !title.trim().length) {\n      return lang('ToDoListErrorChooseTitle');\n    }\n\n    return undefined;\n  });\n\n  const getItemsError = useLastCallback((index: number) => {\n    const itemsTrimmed = items.map((o) => o.text.trim()).filter((o) => o.length);\n    if (hasErrors && itemsTrimmed.length < 1 && !items[index].text.trim().length) {\n      return lang('ToDoListErrorChooseTasks');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    const modalTitle = isAddTaskMode ? 'TitleAppendToDoList'\n      : editingMessage ? 'TitleEditToDoList' : 'TitleNewToDoList';\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('AriaToDoCancel')} onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang(modalTitle)}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang(isAddTaskMode ? 'Add' : editingMessage ? 'Save' : 'Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderItems() {\n    const tasksToRender = [...frozenTasks, ...items];\n    return tasksToRender.map((item, index) => {\n      const stateIndex = index - frozenTasks.length;\n      return (\n        <div className=\"item-wrapper\">\n          <InputText\n            maxLength={MAX_OPTION_LENGTH}\n            label={index !== tasksToRender.length - 1 || tasksToRender.length === maxItemsCount\n              ? lang('TitleTask')\n              : lang('TitleAddTask')}\n            error={getItemsError(stateIndex)}\n            value={item.text}\n            disabled={item.isDisabled}\n            onChange={(e) => updateItem(stateIndex, e.currentTarget.value)}\n            onKeyPress={handleKeyPress}\n          />\n          {index !== tasksToRender.length - 1 && !item.isDisabled && (\n            <Button\n              className=\"item-remove-button\"\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              ariaLabel={lang('Delete')}\n              onClick={() => removeItem(stateIndex)}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          )}\n        </div>\n      );\n    });\n  }\n\n  const moreTasksCount = maxItemsCount - items.length - (isAddTaskMode && editingTodo ? editingTodo.items.length : 0);\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"ToDoListModal\">\n      {!isAddTaskMode && (\n        <InputText\n          ref={titleInputRef}\n          label={lang('InputTitle')}\n          value={title}\n          error={getTitleError()}\n          onChange={handleTitleChange}\n          onKeyPress={handleKeyPress}\n        />\n      )}\n      {isAddTaskMode && (\n        <div className=\"readonly-title\">\n          {title}\n        </div>\n      )}\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={itemsListRef}>\n        <h3 className=\"items-header\">\n          {lang('TitleToDoList')}\n        </h3>\n\n        {renderItems()}\n\n      </div>\n\n      <div className=\"items-count-hint\">\n        {lang('HintTodoListTasksCount2', {\n          count: moreTasksCount,\n        }, {\n          pluralValue: moreTasksCount,\n        })}\n      </div>\n\n      <div className=\"options-divider\" />\n\n      {!isAddTaskMode && (\n        <div className=\"options-footer\">\n          <div className=\"dialog-checkbox-group\">\n            <Checkbox\n              label={lang('AllowOthersAddTasks')}\n              checked={isOthersCanAppend}\n              onChange={handleIsOthersCanAppendChange}\n            />\n            <Checkbox\n              label={lang('AllowOthersMarkAsDone')}\n              checked={isOthersCanComplete}\n              onChange={handleIsOthersCanCompleteChange}\n            />\n          </div>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { appConfig } = global;\n    const editingMessage = modal?.messageId ? selectChatMessage(global, modal.chatId, modal.messageId) : undefined;\n    return {\n      editingMessage,\n      maxItemsCount: appConfig.todoItemsMax,\n      maxTitleLength: appConfig.todoTitleLengthMax,\n      maxItemLength: appConfig.todoItemLengthMax,\n    };\n  },\n)(ToDoListModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji/emoji';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n          draggable={false}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransitionDeprecated(shouldRender);\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { IconName } from '../../../types/icons';\nimport type { EmojiData, EmojiModule, EmojiRawData } from '../../../util/emoji/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport animateScroll from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { uncompressEmoji } from '../../../util/emoji/emoji';\nimport { pick } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, IconName> = {\n  recent: 'recent',\n  people: 'smile',\n  nature: 'animals',\n  foods: 'eats',\n  activity: 'sport',\n  places: 'car',\n  objects: 'lamp',\n  symbols: 'language',\n  flags: 'flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule> | undefined;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useOldLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector<HTMLElement>(`#emoji-category-${index}`)!;\n    animateScroll({\n      container: containerRef.current!,\n      element: categoryEl,\n      position: 'start',\n      margin: FOCUS_MARGIN,\n      maxDistance: SMOOTH_SCROLL_DISTANCE,\n    });\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <Icon name={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <Transition className={containerClassName} activeKey={shouldRenderContent ? 1 : 0} name=\"fade\" shouldCleanup>\n      {!shouldRenderContent ? (\n        <Loading />\n      ) : (\n        <>\n          <div\n            ref={headerRef}\n            className={headerClassName}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {allCategories.map(renderCategoryButton)}\n          </div>\n          <div\n            ref={containerRef}\n            onScroll={handleContentScroll}\n            className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n          >\n            {allCategories.map((category, i) => (\n              <EmojiCategory\n                category={category}\n                index={i}\n                allEmojis={emojis}\n                observeIntersection={observeIntersection}\n                shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n                onEmojiSelect={handleEmojiSelect}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { getVideoMediaHash, getVideoPreviewMediaHash } from '../../global/helpers';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Spinner from '../ui/Spinner';\nimport Icon from './icons/Icon';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewHash = !gif.hasVideoPreview && gif.thumbnail && getVideoMediaHash(gif, 'pictogram');\n  const previewBlobUrl = useMedia(previewHash, !loadAndPlay);\n\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n\n  const videoHash = getVideoPreviewMediaHash(gif) || getVideoMediaHash(gif, 'full');\n  const videoData = useMedia(videoHash, !loadAndPlay);\n\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <Icon name=\"close\" className=\"gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n          draggable={false}\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport GifButton from '../../common/GifButton';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const isLoading = canSendGifs && (!canRenderContents || !savedGifs);\n\n  return (\n    <Transition\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      slideClassName=\"GifPickerGrid\"\n      activeKey={isLoading ? 0 : 1}\n      name=\"fade\"\n      shouldCleanup\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading color=\"yellow\" />\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  Emoji,\n  CustomEmoji,\n  Stickers,\n  GIFs,\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useOldLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <Icon name=\"search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <Icon name=\"delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import type { FC } from '@teact';\nimport {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '@teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\nimport type { AnimationLevel, ThreadId } from '../../../types';\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectIsContextMenuTranslucent, selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport GifPicker from './GifPicker';\nimport StickerPicker from './StickerPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n}\n& MenuPositionOptions;\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isBackgroundTranslucent?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  isLeftColumnShown,\n  isBackgroundTranslucent,\n  animationLevel,\n  ...menuPositionOptions\n}) => {\n  const [activeTab, setActiveTab] = useState<SymbolMenuTabs>(SymbolMenuTabs.Emoji);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, onClose, false, false);\n\n  const lang = useOldLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(SymbolMenuTabs.Stickers);\n  }, [canSendPlainText]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentCustomEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name={resolveTransitionName('slide', animationLevel)}\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      {...(isAttachmentModal ? menuPositionOptions : {\n        positionX: 'left',\n        positionY: 'bottom',\n      })}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(SymbolMenu));\n","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatCommand.scss';\n\ntype OwnProps<T = undefined> = {\n  command: string;\n  description: string;\n  peer?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  clickArg: T;\n  onClick: (arg: T) => void;\n};\n\nconst ChatCommand = <T,>({\n  withAvatar,\n  focus,\n  command,\n  description,\n  peer,\n  clickArg,\n  onClick,\n}: OwnProps<T>) => {\n  const handleClick = useLastCallback(() => {\n    onClick(clickArg);\n  });\n\n  return (\n    <ListItem\n      key={command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={handleClick}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={peer} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">\n          /\n          {command}\n        </span>\n        <span className=\"subtitle\">{renderText(description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(ChatCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiBotCommand, ApiMessage, ApiQuickReply, ApiUser,\n} from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport freezeWhenClosed from '../../../util/hoc/freezeWhenClosed';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ChatCommand from './ChatCommand';\n\nimport styles from './ChatCommandTooltip.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  quickReplies?: ApiQuickReply[];\n  quickReplyMessages?: Record<number, ApiMessage>;\n  self: ApiUser;\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype QuickReplyWithDescription = {\n  id: number;\n  command: string;\n  description: string;\n};\n\nconst ChatCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  withUsername,\n  botCommands,\n  quickReplies,\n  quickReplyMessages,\n  self,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand, sendQuickReply } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${getMainUsername(bot)}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSendQuickReply = useLastCallback((id: number) => {\n    sendQuickReply({ chatId, quickReplyId: id });\n    onClick();\n  });\n\n  const quickRepliesWithDescription = useMemo(() => {\n    if (!quickReplies?.length || !quickReplyMessages) return undefined;\n    return quickReplies.map((reply) => {\n      const message = quickReplyMessages[reply.topMessageId];\n      return {\n        id: reply.id,\n        command: reply.shortcut,\n        description: message?.content.text?.text || '',\n      } satisfies QuickReplyWithDescription;\n    });\n  }, [quickReplies, quickReplyMessages]);\n\n  const handleKeyboardSelect = useLastCallback((item: ApiBotCommand | QuickReplyWithDescription) => {\n    if (!item.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    if ('id' in item) {\n      handleSendQuickReply(item.id);\n    } else {\n      handleSendCommand(item);\n    }\n\n    return true;\n  });\n\n  const keyboardNavigationItems = useMemo(() => {\n    if (!botCommands && !quickRepliesWithDescription) return undefined;\n    return ([] as (ApiBotCommand | QuickReplyWithDescription)[])\n      .concat(quickRepliesWithDescription || [], botCommands || []);\n  }, [botCommands, quickRepliesWithDescription]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: keyboardNavigationItems,\n    onSelect: handleKeyboardSelect,\n    onClose,\n  });\n\n  const isEmpty = (botCommands && !botCommands.length) || (quickReplies && !quickReplies.length);\n\n  useEffect(() => {\n    if (isEmpty) {\n      onClose();\n    }\n  }, [isEmpty, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  if (!shouldRender || isEmpty) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {quickRepliesWithDescription?.map((reply, index) => (\n        <ChatCommand\n          key={`quickReply_${reply.id}`}\n          command={reply.command}\n          description={reply.description}\n          peer={self}\n          withAvatar\n          clickArg={reply.id}\n          onClick={handleSendQuickReply}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n      {botCommands?.map((command, index) => (\n        <ChatCommand\n          key={`${command.botId}_${command.command}`}\n          command={command.command}\n          description={command.description}\n          // No need for expensive global updates on users and chats, so we avoid them\n          peer={getGlobal().users.byId[command.botId]}\n          withAvatar\n          clickArg={command}\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex + (quickRepliesWithDescription?.length || 0) === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(freezeWhenClosed(ChatCommandTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iaTB59vy\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport ChatCommand from './ChatCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((command: string) => {\n    sendBotCommand({\n      command: `/${command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <ChatCommand\n          key={botCommand.command}\n          command={botCommand.command}\n          description={botCommand.description}\n          clickArg={botCommand.command}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_8sFuAomM\",\"emojiButton\":\"crWzZ2jr\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip no-scrollbar',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport ReactionSelector from '../message/reactions/ReactionSelector';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onRemoveEffect?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  chatId?: string;\n  withEffects?: boolean;\n  hasCurrentEffect?: boolean;\n  effectReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  isInSavedMessages?: boolean;\n  isInStoryViewer?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst ANIMATION_DURATION = 200;\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onRemoveEffect,\n  onClose,\n  onCloseAnimationEnd,\n  chatId,\n  withEffects,\n  hasCurrentEffect,\n  effectReactions,\n  allAvailableReactions,\n  onToggleReaction,\n  canBuyPremium,\n  isCurrentUserPremium,\n  isInSavedMessages,\n  isInStoryViewer,\n  canPlayAnimatedEmojis,\n}) => {\n  const {\n    openEffectPicker,\n  } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [areItemsHidden, hideItems, showItems] = useFlag();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      showItems();\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleOpenMessageEffectsPicker = useLastCallback((position: IAnchorPosition) => {\n    hideItems();\n    if (chatId) openEffectPicker({ chatId, position });\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className={buildClassName(\n        'CustomSendMenu', 'fluid', 'with-menu-transitions', withEffects && 'with-effects',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n\n      {withEffects && !isInStoryViewer && (\n        <ReactionSelector\n          allAvailableReactions={allAvailableReactions}\n          effectReactions={effectReactions}\n          currentReactions={undefined}\n          onToggleReaction={onToggleReaction!}\n          isPrivate\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isInSavedMessages}\n          isForEffects\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageEffectsPicker}\n          onClose={onClose}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'CustomSendMenu_items',\n          areItemsHidden && 'CustomSendMenu_items-hidden',\n        )}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{oldLang('SendWithoutSound')}</MenuItem>}\n        {canSchedule && onSendSchedule && (\n          <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n            {oldLang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n        )}\n        {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n          <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n            {oldLang('SendWhenOnline')}\n          </MenuItem>\n        )}\n        {withEffects && hasCurrentEffect && (\n          <MenuItem icon=\"delete\" onClick={onRemoveEffect}>\n            {lang('RemoveEffect')}\n          </MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { IAnchorPosition } from '../../../types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\nimport stopEvent from '../../../util/stopEvent';\nimport { INPUT_CUSTOM_EMOJI_SELECTOR } from './helpers/customEmoji';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport useVirtualBackdrop from '../../../hooks/useVirtualBackdrop';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './TextFormatter.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  anchorPosition?: IAnchorPosition;\n  selectedRange?: Range;\n  setSelectedRange: (range: Range) => void;\n  onClose: () => void;\n};\n\ninterface ISelectedTextFormats {\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  strikethrough?: boolean;\n  monospace?: boolean;\n  spoiler?: boolean;\n}\n\nconst TEXT_FORMAT_BY_TAG_NAME: Record<string, keyof ISelectedTextFormats> = {\n  B: 'bold',\n  STRONG: 'bold',\n  I: 'italic',\n  EM: 'italic',\n  U: 'underline',\n  DEL: 'strikethrough',\n  CODE: 'monospace',\n  SPAN: 'spoiler',\n};\nconst fragmentEl = document.createElement('div');\n\nconst TextFormatter: FC<OwnProps> = ({\n  isOpen,\n  anchorPosition,\n  selectedRange,\n  setSelectedRange,\n  onClose,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const linkUrlInputRef = useRef<HTMLInputElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen);\n  const [isLinkControlOpen, openLinkControl, closeLinkControl] = useFlag();\n  const [linkUrl, setLinkUrl] = useState('');\n  const [isEditingLink, setIsEditingLink] = useState(false);\n  const [inputClassName, setInputClassName] = useState<string | undefined>();\n  const [selectedTextFormats, setSelectedTextFormats] = useState<ISelectedTextFormats>({});\n\n  const lang = useLang();\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n  useVirtualBackdrop(\n    isOpen,\n    containerRef,\n    onClose,\n    true,\n  );\n\n  useEffect(() => {\n    if (isLinkControlOpen) {\n      linkUrlInputRef.current!.focus();\n    } else {\n      setLinkUrl('');\n      setIsEditingLink(false);\n    }\n  }, [isLinkControlOpen]);\n\n  useEffect(() => {\n    if (!shouldRender) {\n      closeLinkControl();\n      setSelectedTextFormats({});\n      setInputClassName(undefined);\n    }\n  }, [closeLinkControl, shouldRender]);\n\n  useEffect(() => {\n    if (!isOpen || !selectedRange) {\n      return;\n    }\n\n    const selectedFormats: ISelectedTextFormats = {};\n    let { parentElement } = selectedRange.commonAncestorContainer;\n    while (parentElement && parentElement.id !== EDITABLE_INPUT_ID) {\n      const textFormat = TEXT_FORMAT_BY_TAG_NAME[parentElement.tagName];\n      if (textFormat) {\n        selectedFormats[textFormat] = true;\n      }\n\n      parentElement = parentElement.parentElement;\n    }\n\n    setSelectedTextFormats(selectedFormats);\n  }, [isOpen, selectedRange, openLinkControl]);\n\n  const restoreSelection = useLastCallback(() => {\n    if (!selectedRange) {\n      return;\n    }\n\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(selectedRange);\n    }\n  });\n\n  const updateSelectedRange = useLastCallback(() => {\n    const selection = window.getSelection();\n    if (selection) {\n      setSelectedRange(selection.getRangeAt(0));\n    }\n  });\n\n  const getSelectedText = useLastCallback((shouldDropCustomEmoji?: boolean) => {\n    if (!selectedRange) {\n      return undefined;\n    }\n    fragmentEl.replaceChildren(selectedRange.cloneContents());\n    if (shouldDropCustomEmoji) {\n      fragmentEl.querySelectorAll(INPUT_CUSTOM_EMOJI_SELECTOR).forEach((el) => {\n        el.replaceWith(el.getAttribute('alt')!);\n      });\n    }\n    return fragmentEl.innerHTML;\n  });\n\n  const getSelectedElement = useLastCallback(() => {\n    if (!selectedRange) {\n      return undefined;\n    }\n\n    return selectedRange.commonAncestorContainer.parentElement;\n  });\n\n  function updateInputStyles() {\n    const input = linkUrlInputRef.current;\n    if (!input) {\n      return;\n    }\n\n    const { offsetWidth, scrollWidth, scrollLeft } = input;\n    if (scrollWidth <= offsetWidth) {\n      setInputClassName(undefined);\n      return;\n    }\n\n    let className = '';\n    if (scrollLeft < scrollWidth - offsetWidth) {\n      className = 'mask-right';\n    }\n    if (scrollLeft > 0) {\n      className += ' mask-left';\n    }\n\n    setInputClassName(className);\n  }\n\n  function handleLinkUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setLinkUrl(e.target.value);\n    updateInputStyles();\n  }\n\n  function getFormatButtonClassName(key: keyof ISelectedTextFormats) {\n    if (selectedTextFormats[key]) {\n      return 'active';\n    }\n\n    if (key === 'monospace' || key === 'strikethrough') {\n      if (Object.keys(selectedTextFormats).some(\n        (fKey) => fKey !== key && Boolean(selectedTextFormats[fKey as keyof ISelectedTextFormats]),\n      )) {\n        return 'disabled';\n      }\n    } else if (selectedTextFormats.monospace || selectedTextFormats.strikethrough) {\n      return 'disabled';\n    }\n\n    return undefined;\n  }\n\n  const handleSpoilerText = useLastCallback(() => {\n    if (selectedTextFormats.spoiler) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.dataset.entityType !== ApiMessageEntityTypes.Spoiler\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        spoiler: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand(\n      'insertHTML', false, `<span class=\"spoiler\" data-entity-type=\"${ApiMessageEntityTypes.Spoiler}\">${text}</span>`,\n    );\n    onClose();\n  });\n\n  const handleBoldText = useLastCallback(() => {\n    setSelectedTextFormats((selectedFormats) => {\n      // Somehow re-applying 'bold' command to already bold text doesn't work\n      document.execCommand(selectedFormats.bold ? 'removeFormat' : 'bold');\n      Object.keys(selectedFormats).forEach((key) => {\n        if ((key === 'italic' || key === 'underline') && Boolean(selectedFormats[key])) {\n          document.execCommand(key);\n        }\n      });\n\n      updateSelectedRange();\n      return {\n        ...selectedFormats,\n        bold: !selectedFormats.bold,\n      };\n    });\n  });\n\n  const handleItalicText = useLastCallback(() => {\n    document.execCommand('italic');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      italic: !selectedFormats.italic,\n    }));\n  });\n\n  const handleUnderlineText = useLastCallback(() => {\n    document.execCommand('underline');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      underline: !selectedFormats.underline,\n    }));\n  });\n\n  const handleStrikethroughText = useLastCallback(() => {\n    if (selectedTextFormats.strikethrough) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'DEL'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        strikethrough: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand('insertHTML', false, `<del>${text}</del>`);\n    onClose();\n  });\n\n  const handleMonospaceText = useLastCallback(() => {\n    if (selectedTextFormats.monospace) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'CODE'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        monospace: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    document.execCommand('insertHTML', false, `<code class=\"text-entity-code\" dir=\"auto\">${text}</code>`);\n    onClose();\n  });\n\n  const handleLinkUrlConfirm = useLastCallback(() => {\n    const formattedLinkUrl = (ensureProtocol(linkUrl) || '').split('%').map(encodeURI).join('%');\n\n    if (isEditingLink) {\n      const element = getSelectedElement();\n      if (!element || element.tagName !== 'A') {\n        return;\n      }\n\n      (element as HTMLAnchorElement).href = formattedLinkUrl;\n\n      onClose();\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    restoreSelection();\n    document.execCommand(\n      'insertHTML',\n      false,\n      `<a href=\"${formattedLinkUrl}\" class=\"text-entity-link\" dir=\"auto\">${text}</a>`,\n    );\n    onClose();\n  });\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    const HANDLERS_BY_KEY: Record<string, AnyToVoidFunction> = {\n      k: openLinkControl,\n      b: handleBoldText,\n      u: handleUnderlineText,\n      i: handleItalicText,\n      m: handleMonospaceText,\n      s: handleStrikethroughText,\n      p: handleSpoilerText,\n    };\n\n    const handler = HANDLERS_BY_KEY[getKeyFromEvent(e)];\n\n    if (\n      e.altKey\n      || !(e.ctrlKey || e.metaKey)\n      || !handler\n    ) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    handler();\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, handleKeyDown]);\n\n  function handleContainerKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    if (e.key === 'Enter' && isLinkControlOpen) {\n      if (!linkUrl.trim()) return;\n      handleLinkUrlConfirm();\n      e.preventDefault();\n    }\n  }\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'TextFormatter',\n    transitionClassNames,\n    isLinkControlOpen && 'link-control-shown',\n  );\n\n  const linkUrlConfirmClassName = buildClassName(\n    'TextFormatter-link-url-confirm',\n    Boolean(linkUrl.length) && 'shown',\n  );\n\n  const style = anchorPosition\n    ? `left: ${anchorPosition.x}px; top: ${anchorPosition.y}px;--text-formatter-left: ${anchorPosition.x}px;`\n    : '';\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      style={style}\n      onKeyDown={handleContainerKeyDown}\n      // Prevents focus loss when clicking on the toolbar\n      onMouseDown={stopEvent}\n    >\n      <div className=\"TextFormatter-buttons\">\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingSpoilerAria')}\n          className={getFormatButtonClassName('spoiler')}\n          onClick={handleSpoilerText}\n        >\n          <Icon name=\"eye-crossed\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingBoldAria')}\n          className={getFormatButtonClassName('bold')}\n          onClick={handleBoldText}\n        >\n          <Icon name=\"bold\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingItalicAria')}\n          className={getFormatButtonClassName('italic')}\n          onClick={handleItalicText}\n        >\n          <Icon name=\"italic\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingUnderlineAria')}\n          className={getFormatButtonClassName('underline')}\n          onClick={handleUnderlineText}\n        >\n          <Icon name=\"underlined\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingStrikethroughAria')}\n          className={getFormatButtonClassName('strikethrough')}\n          onClick={handleStrikethroughText}\n        >\n          <Icon name=\"strikethrough\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingMonospaceAria')}\n          className={getFormatButtonClassName('monospace')}\n          onClick={handleMonospaceText}\n        >\n          <Icon name=\"monospace\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button color=\"translucent\" ariaLabel={lang('FormattingAddLinkAria')} onClick={openLinkControl}>\n          <Icon name=\"link\" />\n        </Button>\n      </div>\n\n      <div className=\"TextFormatter-link-control\">\n        <div className=\"TextFormatter-buttons\">\n          <Button color=\"translucent\" ariaLabel={lang('Cancel')} onClick={closeLinkControl}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <div className=\"TextFormatter-divider\" />\n\n          <div\n            className={buildClassName('TextFormatter-link-url-input-wrapper', inputClassName)}\n          >\n            <input\n              ref={linkUrlInputRef}\n              className=\"TextFormatter-link-url-input\"\n              type=\"text\"\n              value={linkUrl}\n              placeholder={lang('FormattingEnterUrl')}\n              autoComplete=\"off\"\n              spellCheck={IS_TAURI ? false : undefined}\n              inputMode=\"url\"\n              dir=\"auto\"\n              onChange={handleLinkUrlChange}\n              onScroll={updateInputStyles}\n            />\n          </div>\n\n          <div className={linkUrlConfirmClassName}>\n            <div className=\"TextFormatter-divider\" />\n            <Button\n              color=\"translucent\"\n              ariaLabel={lang('Save')}\n              className=\"color-primary\"\n              onClick={handleLinkUrlConfirm}\n            >\n              <Icon name=\"check\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TextFormatter);\n","export default function getKeyFromEvent(e: KeyboardEvent) {\n  const key = e.key || e.code;\n\n  return key.startsWith('Key') ? key.slice(3).toLowerCase() : key;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/visibility/isFullyVisible';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport CustomEmojiButton from './CustomEmojiButton';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...emojis, ...customEmojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip no-scrollbar',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '@teact';\nimport { memo } from '@teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName.ts';\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? getWebDocumentHash(thumbnail) : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className={buildClassName('BaseResult chat-item-clickable', typeof content === 'string' && 'with-text')}\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult;\n  onClick: (result: ApiBotInlineResult | ApiBotInlineMediaResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, description,\n  } = inlineResult;\n\n  const url = 'url' in inlineResult ? inlineResult.url : undefined;\n  const webThumbnail = 'webThumbnail' in inlineResult ? inlineResult.webThumbnail : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiVideo } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport { getPhotoMediaHash, getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailBlobUrl = useMedia(getWebDocumentHash(webThumbnail));\n  const mediaBlobUrl = useMedia(photo && getPhotoMediaHash(photo, 'pictogram'));\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl || thumbnailBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailBlobUrl} alt=\"\" draggable={false} />\n        <img\n          src={mediaBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      thumbUrl={mediaBlobUrl || thumbnail?.dataUri}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport MediaResult from './inlineResults/MediaResult';\nimport StickerResult from './inlineResults/StickerResult';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n      isFromSwitchWebView: true,\n    });\n  });\n\n  const prevInlineBotResults = usePreviousDeprecated(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm || switchWebview)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <Icon name=\"lock-badge\" className=\"send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">\n                {user\n                  ? lang('VoipGroupPersonalAccount')\n                  : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerButton from '../common/StickerButton';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): Complete<StateProps> => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { throttle } from '../../util/schedulers';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf, selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport GifButton from '../common/GifButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  chatFullInfo,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat\n    && getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canPostInChat = Boolean(chat) && Boolean(threadId)\n      && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n\n    return {\n      query,\n      results,\n      chat,\n      chatFullInfo,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OAKzmAva\",\"withImage\":\"BQ6HUOqN\",\"imageContainer\":\"TmJvv2A6\",\"image\":\"U96CW2I7\",\"round\":\"yxjDeIct\",\"circle\":\"cdfiLmXo\",\"withStoryCircle\":\"BOfHPv20\",\"summary\":\"vXi2JQlj\",\"title\":\"bi3fL59p\",\"info\":\"GUK4ajPK\",\"meta\":\"YH6jeZIh\",\"metaWithIcon\":\"q1LnuIUn\",\"metaIcon\":\"PJZzyVLK\",\"date\":\"C7NpG5Y9\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { StatisticsMessageInteractionCounter, StatisticsStoryInteractionCounter } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\ninterface OwnProps {\n  postStatistic: StatisticsStoryInteractionCounter | StatisticsMessageInteractionCounter;\n}\n\nfunction StatisticsRecentPostMeta({ postStatistic }: OwnProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  return (\n    <div className={styles.meta}>\n      {postStatistic.reactionsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"heart-outline\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.reactionsCount)}\n        </span>\n      )}\n\n      {postStatistic.forwardsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"forward\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.forwardsCount)}\n        </span>\n      )}\n\n      {!postStatistic.forwardsCount && !postStatistic.reactionsCount\n        && oldLang('ChannelStats.SharesCount_ZeroValueHolder')}\n    </div>\n  );\n}\n\nexport default memo(StatisticsRecentPostMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsMessageInteractionCounter } from '../../../api/types';\n\nimport {\n  getMessageRoundVideo,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { type LangFn } from '../../../util/localization';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../../common/icons/Icon';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  postStatistic: StatisticsMessageInteractionCounter;\n  message: ApiMessage;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ postStatistic, message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const thumbDataUri = useThumbnail(message);\n  const mediaHash = useMessageMediaHash(message, 'micro');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        Boolean(mediaBlobUrl || thumbDataUri) && styles.withImage,\n      )}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, message, mediaBlobUrl || thumbDataUri, isRoundVideo)}\n        </div>\n        <div className={styles.meta}>\n          {lang(\n            'ChannelStatsViewsCount',\n            { count: postStatistic.viewsCount },\n            { pluralValue: postStatistic.viewsCount },\n          )}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span>\n      <img\n        src={blobUrl}\n        alt=\"\"\n        draggable={false}\n        className={buildClassName(styles.image, isRoundVideo && styles.round)}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiTypeStory,\n  StatisticsStoryInteractionCounter,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  story?: ApiTypeStory;\n  postStatistic: StatisticsStoryInteractionCounter;\n};\n\nfunction StatisticsRecentStory({ chat, story, postStatistic }: OwnProps) {\n  const lang = useOldLang();\n  const { toggleStoryStatistics } = getActions();\n  const isLoaded = story && 'content' in story;\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const mediaThumbnail = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  const handleClick = useLastCallback(() => {\n    toggleStoryStatistics({ storyId: postStatistic.storyId });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, styles.withImage)}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, chat, imgBlobUrl || mediaThumbnail)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {isLoaded && Boolean(story.date) && formatDateTimeToString(story.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n}\n\nfunction renderSummary(lang: OldLangFn, chat: ApiChat, blobUrl?: string) {\n  return (\n    <span>\n      {blobUrl ? (\n        <span className={styles.imageContainer}>\n          <img\n            src={blobUrl}\n            alt=\"\"\n            draggable={false}\n            className={buildClassName(styles.image, styles.circle, styles.withStoryCircle)}\n          />\n        </span>\n      ) : (\n        <Avatar\n          peer={chat}\n          size=\"small\"\n          className={styles.image}\n        />\n      )}\n\n      {lang('Story')}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentStory);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"T1l_4J8z\",\"pie-slim-in\":\"EgyLOizu\",\"pieSlimIn\":\"EgyLOizu\",\"pie-slim-out\":\"TBiNdFb4\",\"pieSlimOut\":\"TBiNdFb4\",\"messages\":\"suY9dEIz\",\"publicForwards\":\"S1x1ovkC\",\"messages-title\":\"evQIkAqx\",\"messagesTitle\":\"evQIkAqx\",\"publicForwards-title\":\"WxL3i5PM\",\"publicForwardsTitle\":\"WxL3i5PM\",\"ready\":\"aUrozL5_\",\"graph\":\"QQHwjG88\",\"hidden\":\"QGctP1Nk\"};","import {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChannelStatistics,\n  ApiChat,\n  ApiGroupStatistics,\n  ApiMessage,\n  ApiTypeStory,\n} from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStories,\n  selectStatistics,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\nimport StatisticsRecentStory from './StatisticsRecentStory';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n  reactionsByEmotionGraph: 'ChannelStats.Graph.Reactions',\n  storyInteractionsGraph: 'ChannelStats.Graph.Stories',\n  storyReactionsByEmotionGraph: 'ChannelStats.Graph.StoriesReactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  chat?: ApiChat;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n  messagesById: Record<string, ApiMessage>;\n  storiesById?: Record<string, ApiTypeStory>;\n};\n\nconst Statistics = ({\n  chatId,\n  chat,\n  statistics,\n  dcId,\n  isGroup,\n  messagesById,\n  storiesById,\n}: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph.token,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        if (!isGraph(graph)) {\n          return;\n        }\n\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll', isReady && styles.ready)}>\n      {statistics && (\n        <StatisticsOverview\n          statistics={statistics}\n          type={isGroup ? 'group' : 'channel'}\n          title={lang('StatisticOverview')}\n        />\n      )}\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => {\n          const isGraphReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isGraphReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics)?.recentPosts?.length) && (\n        <div className={styles.messages}>\n          <h2 className={styles.messagesTitle}>{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentPosts.map((postStatistic) => {\n            if ('msgId' in postStatistic) {\n              const message = messagesById[postStatistic.msgId];\n              if (!message || !('content' in message)) return undefined;\n\n              return (\n                <StatisticsRecentMessage\n                  key={`statistic_message_${postStatistic.msgId}`}\n                  message={message}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            if ('storyId' in postStatistic && chat) {\n              const story = storiesById?.[postStatistic.storyId];\n\n              return (\n                <StatisticsRecentStory\n                  key={`statistic_story_${postStatistic.storyId}`}\n                  chat={chat}\n                  story={story}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            return undefined;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n    const messagesById = selectChatMessages(global, chatId);\n    const storiesById = selectPeerStories(global, chatId)?.byId;\n\n    return {\n      statistics, dcId, isGroup, chat, messagesById, storiesById,\n    };\n  },\n)(Statistics));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oXLpD4Y4\",\"title\":\"paQ2VBe_\",\"views\":\"WvFuOAIf\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsMessagePublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useOldLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => (data.chat ? getMainUsername(data.chat) : undefined), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div>\n        <div className={styles.title}>\n          {data.title}\n        </div>\n\n        <div className={styles.views}>\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessagePublicForward,\n  ApiPostStatistics,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nfunction MessageStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadMessageStatistics, loadMessagePublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph.token });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards && messageId) {\n      loadMessagePublicForwards({ chatId, messageId });\n    }\n  });\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div\n      key={`${chatId}-${messageId}`}\n      className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}\n    >\n      <StatisticsOverview statistics={statistics} type=\"message\" title={lang('StatisticOverview')} />\n\n      {(!loadedCharts.current.size || !statistics.publicForwardsData) && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => {\n          const isGraphReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isGraphReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {(statistics.publicForwardsData as ApiMessagePublicForward[]).map((item) => (\n              <StatisticsMessagePublicForward key={item.messageId} data={item} />\n            ))}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(MessageStatistics));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiStoryPublicForward, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiStoryPublicForward;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nfunction StatisticsMessagePublicForward({ data, chatsById, usersById }: OwnProps) {\n  const lang = useOldLang();\n  const { openChat } = getActions();\n  const user = usersById[data.peerId];\n  const chat = chatsById[data.peerId];\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: user.id });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={user || chat} />\n\n      <div>\n        <div className={styles.title}>\n          {user ? getUserFullName(user) : getChatTitle(lang, chat)}\n        </div>\n\n        <div className={styles.views}>\n          {data.viewsCount ? lang('ChannelStats.ViewsCount', data.viewsCount, 'i') : lang('NoViews')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiPostStatistics,\n  ApiUser,\n} from '../../../api/types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsStoryPublicForward from './StatisticsStoryPublicForward';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.StoryInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  storyId?: number;\n  dcId?: number;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n};\n\nfunction StoryStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  storyId,\n  chatsById,\n  usersById,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadStoryStatistics, loadStoryPublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (storyId) {\n      loadStoryStatistics({ chatId, storyId });\n    }\n  }, [chatId, storyId]);\n\n  useEffect(() => {\n    if (!isActive || storyId) {\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n      setIsReady(false);\n    }\n  }, [isActive, storyId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph.token });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, storyId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!storyId) return;\n\n    loadStoryPublicForwards({ chatId, storyId });\n  });\n\n  if (!isReady || !statistics || !storyId) {\n    return <Loading />;\n  }\n\n  return (\n    <div\n      key={`${chatId}-${storyId}`}\n      className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}\n    >\n      <StatisticsOverview statistics={statistics} type=\"story\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => {\n          const isGraphReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isGraphReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {statistics.publicForwardsData!.map((item) => {\n              if ('messageId' in item) {\n                return (\n                  <StatisticsMessagePublicForward key={`message_${item.messageId}`} data={item} />\n                );\n              }\n\n              return (\n                <StatisticsStoryPublicForward\n                  key={`story_${item.storyId}`}\n                  data={item}\n                  chatsById={chatsById}\n                  usersById={usersById}\n                />\n              );\n            })}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentStory;\n    const storyId = tabState.statistics.currentStoryId;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      statistics, dcId, storyId, usersById, chatsById,\n    };\n  },\n)(StoryStatistics));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport ShowMoreButton from '../ui/ShowMoreButton';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePreviousDeprecated<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useOldLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: text.text,\n            entities: text.entities,\n          })}\n        </span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}\n          %\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): Complete<StateProps> => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiPoll } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectPollFromMessage, selectTabState,\n} from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport PollAnswerResults from './PollAnswerResults';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  poll?: ApiPoll;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  message,\n  poll,\n  onClose,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !poll || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = poll;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n        })}\n      </h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${poll.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n    const poll = message && selectPollFromMessage(global, message);\n\n    return {\n      chat,\n      message,\n      poll,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xrnUE4e6\",\"content\":\"z7kF7tij\",\"section\":\"T6wFpdQO\",\"general\":\"YftUWqqw\",\"top\":\"CWsWIKQ1\",\"bottom\":\"KBl0ycLl\",\"iconWrapper\":\"iJ1U9kDD\",\"icon\":\"Rk6PT_yc\",\"clickable\":\"K1CTKtBS\",\"heading\":\"qlo3vSEw\",\"icon-picker\":\"r06zwL42\",\"iconPicker\":\"r06zwL42\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getTopicColors } from '../../util/forumColors';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport {\n  selectChat, selectIsCurrentUserPremium, selectTabState, selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.chatId && editTopicPanel?.topicId\n      ? selectTopic(global, editTopicPanel.chatId, editTopicPanel.topicId) : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  getChatAvatarHash, getMainUsername, getUserFirstOrLastName,\n} from '../../../global/helpers';\nimport {\n  selectBot,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  userId?: string;\n  user?: ApiUser;\n  currentBio?: string;\n  progress?: ManagementProgress;\n  maxBioLength: number;\n};\n\nconst ERROR_NAME_MISSING = 'Please provide name';\n\nconst ManageBot: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  currentBio,\n  isActive,\n  maxBioLength,\n  onClose,\n}) => {\n  const {\n    setBotInfo,\n    uploadProfilePhoto,\n    uploadContactProfilePhoto,\n    startBotFatherConversation,\n  } = getActions();\n\n  const [isFieldTouched, markFieldTouched, unmarkProfileTouched] = useFlag(false);\n  const [isAvatarTouched, markAvatarTouched, unmarkAvatarTouched] = useFlag(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  const username = useMemo(() => (user ? getMainUsername(user) : undefined), [user]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentName = user ? getUserFirstOrLastName(user) : '';\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [name, setName] = useState(currentName || '');\n  const [bio, setBio] = useState(currentBio || '');\n\n  const currentAvatarHash = user && getChatAvatarHash(user);\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    unmarkProfileTouched();\n    unmarkAvatarTouched();\n  }, [userId]);\n\n  useEffect(() => {\n    setName(currentName || '');\n    setBio(currentBio || '');\n  }, [currentName, currentBio, user]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileTouched();\n      unmarkAvatarTouched();\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleNameChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    markFieldTouched();\n\n    if (error === ERROR_NAME_MISSING) {\n      setError(undefined);\n    }\n  });\n\n  const handleBioChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    markFieldTouched();\n  });\n\n  const handlePhotoChange = useLastCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n    markAvatarTouched();\n  });\n\n  const handleProfileSave = useLastCallback(() => {\n    const trimmedName = name.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedName.length) {\n      setError(ERROR_NAME_MISSING);\n      return;\n    }\n\n    setBotInfo({\n      ...(isFieldTouched && {\n        bot: user,\n        name: trimmedName,\n        description: trimmedBio,\n      }),\n    });\n\n    if (photo) {\n      uploadProfilePhoto({\n        file: photo,\n        ...(isAvatarTouched && { bot: user }),\n      });\n    }\n  });\n\n  const handleChangeEditIntro = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-intro` });\n  });\n\n  const handleChangeEditCommands = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-commands` });\n  });\n\n  const handleChangeSettings = useLastCallback(() => {\n    startBotFatherConversation({ param: username! });\n  });\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSelectAvatar = useLastCallback((file: File) => {\n    markAvatarTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  });\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title={lang('ChatSetPhotoOrVideo')}\n            disabled={isLoading}\n          />\n          <InputText\n            id=\"user-name\"\n            label={lang('PaymentCheckoutName')}\n            onChange={handleNameChange}\n            value={name}\n            error={error === ERROR_NAME_MISSING ? error : undefined}\n            teactExperimentControlled\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('DescriptionPlaceholder')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n        </div>\n        <div className=\"section\">\n          <div className=\"dialog-buttons\">\n            <ListItem icon=\"bot-commands-filled\" ripple onClick={handleChangeEditIntro}>\n              <span>{lang('BotEditIntro')}</span>\n            </ListItem>\n            <ListItem icon=\"bot-command\" ripple onClick={handleChangeEditCommands}>\n              <span>{lang('BotEditCommands')}</span>\n            </ListItem>\n            <ListItem icon=\"bots\" ripple onClick={handleChangeSettings}>\n              <span>{lang('BotChangeSettings')}</span>\n            </ListItem>\n            <div className=\"section-info section-info_push\">\n              {renderText(lang('BotManageInfo'), ['links'])}\n            </div>\n          </div>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isFieldTouched || isAvatarTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectBot(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    return {\n      userId,\n      user,\n      progress,\n      currentBio: userFullInfo?.bio,\n      maxBioLength,\n    };\n  },\n)(ManageBot));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsChatRestricted, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n  hasAutoTranslation?: boolean;\n  canToggleAutoTranslation?: boolean;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n  hasAutoTranslation,\n  canToggleAutoTranslation,\n}) => {\n  const {\n    updateChat,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleAutoTranslation,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useOldLang();\n\n  const hasAutoTranslationAvailable = chat && isChatChannel(chat);\n\n  const handleAutoTranslationChange = useLastCallback(() => {\n    toggleAutoTranslation({ chatId, isEnabled: !hasAutoTranslation });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!canInvite) return;\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId, canInvite]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateChannel = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickSubscribers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  });\n\n  const handleRemovedUsersClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  });\n\n  const handleDeleteChannel = useLastCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId);\n  if (isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"channel-title\"\n              label={lang('EnterChannelName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"channel-about\"\n              label={lang('DescriptionPlaceholder')}\n              onChange={handleAboutChange}\n              value={about}\n              maxLength={CHANNEL_MAX_DESCRIPTION}\n              maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          {hasAutoTranslationAvailable && (\n            <ListItem\n              icon=\"language\"\n              narrow\n              ripple\n              disabled={!canToggleAutoTranslation}\n              onClick={handleAutoTranslationChange}\n            >\n              <span>{lang('AutomaticTranslation')}</span>\n              <Switcher\n                id=\"auto-translation\"\n                label={lang('AutomaticTranslation')}\n                checked={hasAutoTranslation}\n              />\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const { invites } = management.byChatId[chatId] || {};\n    const minLevelToToggleAutoTranslation = global.appConfig.channelAutoTranslationLevelMin;\n    const hasAutoTranslation = chat?.hasAutoTranslation;\n    const chatBoostLevel = chat?.level;\n    const canToggleAutoTranslation = chatBoostLevel && minLevelToToggleAutoTranslation\n      ? chatBoostLevel >= minLevelToToggleAutoTranslation : false;\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.reactions.availableReactions,\n      hasAutoTranslation,\n      canToggleAutoTranslation,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageChannel));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  isChannel?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n}) => {\n  const { toggleSignatures } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const areSignaturesEnabled = Boolean(chat?.areSignaturesShown);\n  const areProfilesEnabled = Boolean(chat?.areProfilesShown);\n\n  const canAddNewAdmins = Boolean(chat?.isCreator || (chat && getHasAdminRight(chat, 'addAdmins')));\n  const canToggleSignatures = isChannel && getHasAdminRight(chat!, 'postMessages');\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    const [owner, admins] = partition(Object.values(adminMembersById), (member) => member.isOwner);\n\n    return [...owner, ...admins];\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useLastCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  });\n\n  const handleToggleSignatures = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled,\n      areSignaturesEnabled: !areSignaturesEnabled,\n    });\n  });\n\n  const handleToggleProfiles = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled: !areProfilesEnabled,\n      areSignaturesEnabled,\n    });\n  });\n\n  const handleAddAdminClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  });\n\n  const getMemberStatus = useLastCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\" dir=\"auto\">\n            {lang(isChannel\n              ? 'Channel.Management.AddModeratorHelp'\n              : 'Group.Management.AddModeratorHelp')}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <Icon name=\"add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n\n        {canToggleSignatures && (\n          <div className=\"section\">\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={areSignaturesEnabled}\n                label={lang('ChannelSignMessages')}\n                onChange={handleToggleSignatures}\n              />\n            </div>\n            {areSignaturesEnabled && (\n              <>\n                <div className=\"ListItem narrow\">\n                  <Checkbox\n                    checked={areProfilesEnabled}\n                    label={lang('ChannelSignMessagesWithProfile')}\n                    onChange={handleToggleProfiles}\n                  />\n                </div>\n                <p className=\"section-info section-info_push\">\n                  {lang('ChannelSignProfilesInfo')}\n                </p>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: chat && isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo,\n  selectManagement, selectTabState,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useOldLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <LinkField link={privateInviteLink} className=\"invite-link\" />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <div className=\"settings-input\">\n              <UsernameInput\n                asLink\n                currentUsername={currentUsername}\n                isLoading={isLoading}\n                isUsernameAvailable={isUsernameAvailable}\n                checkedUsername={checkedUsername}\n                onChange={handleUsernameChange}\n              />\n            </div>\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId);\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId) && selectManagement(global, chatId));\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    return filterPeersByQuery({ ids: availableMemberIds, query: search, type: 'user' });\n  }, [chatMembers, currentUserId, search]);\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreMembers({ chatId: chat.id });\n  });\n\n  const handleRemoveUser = useLastCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  });\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={handleLoadMore}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): Complete<StateProps> => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useOldLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember): MenuItemContextAction[] | undefined => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <Icon name=\"add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Avatar from '../../common/Avatar';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useOldLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (isChatPublic(linkedGroup)) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line @stylistic/max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        {linkedChat && (\n          <ListItem\n            className=\"chat-item-clickable\"\n            inactive\n          >\n            <GroupChatInfo chatId={linkedChat.id} />\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat?.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  const handleNewGroupClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.NewDiscussionGroup);\n  });\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            className=\"create-item\"\n            withPrimaryColor\n            teactOrderKey={0}\n            onClick={handleNewGroupClick}\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={isJoinToSend}\n                onCheck={handleJoinToSendCheck}\n                label={lang('ChannelSettingsJoinToSend')}\n              />\n            </div>\n            {isJoinToSend && (\n              <div className=\"ListItem narrow\">\n                <Checkbox\n                  checked={isJoinRequest}\n                  onCheck={handleJoinRequestCheck}\n                  label={lang('ChannelSettingsJoinRequest')}\n                />\n              </div>\n            )}\n            <p className=\"section-info section-info_push\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId ? selectChat(global, linkedChatId) : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsChatRestricted, selectTabState } from '../../../global/selectors';\nimport { debounce } from '../../../util/schedulers';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useOldLang();\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickPermissions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateGroup = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickMembers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  });\n\n  const handleTogglePreHistory = useLastCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  });\n\n  const handleForumToggle = useLastCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  });\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useLastCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId);\n  if (isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"group-title\"\n              label={lang('GroupName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === GROUP_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"group-about\"\n              label={lang('DescriptionPlaceholder')}\n              maxLength={GROUP_MAX_DESCRIPTION}\n              maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n              onChange={handleAboutChange}\n              value={about}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}\n              /\n              {TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                className=\"align-checkbox-with-list-buttons\"\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                subLabel={\n                  chatFullInfo.isPreHistoryHidden ? lang('ChatHistoryHiddenInfo2') : lang('ChatHistoryVisibleInfo')\n                }\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n    const canChangeInfo = chat.isCreator || getHasAdminRight(chat, 'changeInfo');\n    const canBanUsers = chat.isCreator || getHasAdminRight(chat, 'banUsers');\n    const canInvite = chat.isCreator || getHasAdminRight(chat, 'inviteUsers');\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo,\n      canBanUsers,\n      canInvite,\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.reactions.availableReactions,\n      canEditForum,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isActive,\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"postStories\"\n              checked={Boolean(permissions.postStories)}\n              label={lang('EditAdminPostStories')}\n              blocking\n              disabled={getControlIsDisabled('postStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"editStories\"\n              checked={Boolean(permissions.editStories)}\n              label={lang('EditAdminEditStories')}\n              blocking\n              disabled={getControlIsDisabled('editStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteStories\"\n              checked={Boolean(permissions.deleteStories)}\n              label={lang('EditAdminDeleteStories')}\n              blocking\n              disabled={getControlIsDisabled('deleteStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens, NewChatMembersProgress } from '../../../types';\n\nimport {\n  getHasAdminRight, isChatBasicGroup,\n  isChatChannel, isUserBot, isUserRightBanned, sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport usePeerStoriesPolling from '../../../hooks/polling/usePeerStoriesPolling';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Switcher from '../../ui/Switcher';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  canAddMembers?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  canAddMembers,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement,\n    toggleParticipantsHidden, setNewChatMembersDialogState, toggleManagement,\n  } = getActions();\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  usePeerStoriesPolling(memberIds);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  });\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  const handleToggleParticipantsHidden = useLastCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    toggleManagement();\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"panel-content custom-scroll\">\n        {canHideParticipants && !isChannel && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                  withPortalForMenu\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n      && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const canAddMembers = chat && ((getHasAdminRight(chat, 'inviteUsers')\n      || (!isChannel && !isUserRightBanned(chat, 'inviteUsers')))\n    || chat.isCreator\n    );\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      canAddMembers,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  progress?: ManagementProgress;\n  currentUserId?: string;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n  arePaidMessagesAvailable?: boolean;\n  groupPeersPaidStars: number;\n  canChargeForMessages?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  progress,\n  currentUserId,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n  arePaidMessagesAvailable,\n  canChargeForMessages,\n  groupPeersPaidStars,\n}) => {\n  const { updateChatDefaultBannedRights, updatePaidMessagesPrice } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  const [isPriceForMessagesChanged, markPriceForMessagesChanged, unmarkPriceForMessagesChanged] = useFlag();\n  const [isPriceForMessagesOpen, setIsPriceForMessagesOpen] = useState(canChargeForMessages);\n  const [chargeForMessages, setChargeForMessages] = useState<number>(groupPeersPaidStars);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkPriceForMessagesChanged();\n    }\n  }, [progress]);\n\n  const handleSavePermissions = useLastCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  });\n\n  const handleUpdatePaidMessagesPrice = useLastCallback(() => {\n    if (!chat) return;\n    updatePaidMessagesPrice({\n      chatId: chat?.id,\n      paidMessagesStars: isPriceForMessagesOpen ? chargeForMessages : 0,\n    });\n  });\n\n  const handleUpdatePermissions = useLastCallback(() => {\n    if (isPriceForMessagesChanged) {\n      handleUpdatePaidMessagesPrice();\n    }\n    if (havePermissionChanged) {\n      handleSavePermissions();\n    }\n  });\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = oldLang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, oldLang]);\n\n  const handleChargeStarsForMessages = useLastCallback(() => {\n    setIsPriceForMessagesOpen(!isPriceForMessagesOpen);\n    markPriceForMessagesChanged();\n  });\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    setChargeForMessages(value);\n    markPriceForMessagesChanged();\n  });\n\n  const arePermissionsChanged = isPriceForMessagesChanged || havePermissionChanged;\n  const arePermissionsLoading = progress === ManagementProgress.InProgress || isLoading;\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            dropdownClassName=\"DropdownListTrap\"\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n          />\n        </div>\n\n        {arePaidMessagesAvailable && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem onClick={handleChargeStarsForMessages}>\n              <span>{lang('GroupMessagesChargePrice')}</span>\n              <Switcher\n                id=\"charge_for_messages\"\n                label={lang('GroupMessagesChargePrice')}\n                checked={isPriceForMessagesOpen}\n              />\n            </ListItem>\n            <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('RightsChargeStarsAbout')}\n            </p>\n          </div>\n        )}\n\n        {isPriceForMessagesOpen && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <PaidMessagePrice\n              canChangeChargeForMessages\n              isGroupChat\n              chargeForMessages={chargeForMessages}\n              onChange={handleChargeForMessagesChange}\n            />\n          </div>\n        )}\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={arePermissionsChanged}\n        onClick={handleUpdatePermissions}\n        ariaLabel={lang('Save')}\n        disabled={arePermissionsLoading}\n      >\n        {arePermissionsLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { progress } = selectTabState(global).management;\n\n    const paidMessagesStars = chat?.paidMessagesStars;\n    const configStarsPaidMessageCommissionPermille = global.appConfig.starsPaidMessageCommissionPermille;\n\n    return {\n      chat,\n      progress,\n      currentUserId: global.currentUserId,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n      arePaidMessagesAvailable: Boolean(fullInfo?.arePaidMessagesAvailable && configStarsPaidMessageCommissionPermille),\n      canChargeForMessages: Boolean(paidMessagesStars && configStarsPaidMessageCommissionPermille),\n      groupPeersPaidStars: paidMessagesStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{oldLang('UserRestrictionsCanDo')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            dropdownClassName=\"DropdownListTrap\"\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n            getControlIsDisabled={getControlIsDisabled}\n          />\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {oldLang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={oldLang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text={lang('GroupManagementBanUserConfirm')}\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatChannel, sortUserIds } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"section-help hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-heading\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)}\n              {' '}\n              {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"section-help hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-heading\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"section-help hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId] || {};\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite } from '../../../api/types';\n\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useOldLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"section-help\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"section-help\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"panel-content custom-scroll\">\n        {!invite && (\n          <p className=\"section-help\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <LinkField title={invite.title} link={invite.link} className=\"invite-link\" />\n              {Boolean(expireDate) && (\n                <p className=\"section-help\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p className=\"section-heading\">{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId] || {};\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport NothingFound from '../../common/NothingFound';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(forceUpdate, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.hasUsername ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.hasUsername, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: oldLang('LinkCopied'),\n    });\n  }, [oldLang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = oldLang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = oldLang('PeopleJoined', usage);\n    } else {\n      text = oldLang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${oldLang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${oldLang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${oldLang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = expireDate - getServerTime();\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += oldLang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += oldLang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${oldLang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions: MenuItemContextAction[] = [];\n    actions.push({\n      title: oldLang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: oldLang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: oldLang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: oldLang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"section-help\">{isChannel ? oldLang('PrimaryLinkHelpChannel') : oldLang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <LinkField\n              className=\"settings-input\"\n              link={primaryInviteLink}\n              withShare\n              onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n              title={chat?.usernames ? oldLang('PublicLink') : oldLang('lng_create_permanent_link_title')}\n            />\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <ListItem icon=\"add\" withPrimaryColor key=\"create\" className=\"create-item\" onClick={handleCreateNewClick}>\n            {oldLang('CreateNewLink')}\n          </ListItem>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"section-help hint\" key=\"links-hint\">{oldLang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"section-help\" key=\"title\">{oldLang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{oldLang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={oldLang('DeleteAllRevokedLinks')}\n        text={oldLang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={oldLang('RevokeLink')}\n        text={oldLang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={oldLang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={oldLang('DeleteLink')}\n        text={oldLang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId] || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useOldLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport JoinRequest from './JoinRequest';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"section-help\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isChatChannel, isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions: number;\n  reactionsLimit?: number;\n  isChannel?: boolean;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n  maxUniqueReactions,\n  reactionsLimit,\n  isChannel,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useOldLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  const [localReactionsLimit, setLocalReactionsLimit] = useState(reactionsLimit);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n      reactionsLimit: localReactionsLimit,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions, localReactionsLimit]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n    setLocalReactionsLimit(reactionsLimit);\n  }, [enabledReactions, reactionsLimit]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  useEffect(() => {\n    if (localReactionsLimit !== undefined && localReactionsLimit !== reactionsLimit) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some') {\n      const isReactionsDisabled = enabledReactions?.type !== 'all' && enabledReactions?.type !== 'some';\n\n      if (isReactionsDisabled && localEnabledReactions.allowed.length === 0) {\n        setIsTouched(false);\n        return;\n      }\n    }\n\n    if (localEnabledReactions?.type !== enabledReactions?.type) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some' && enabledReactions?.type === 'some') {\n      const localAllowedReactions = localEnabledReactions.allowed;\n      const enabledAllowedReactions = enabledReactions?.allowed;\n\n      if (localAllowedReactions.length !== enabledAllowedReactions.length\n        || localAllowedReactions.reverse().some(\n          (localReaction) => !enabledAllowedReactions.find(\n            (enabledReaction) => isSameReaction(localReaction, enabledReaction),\n          ),\n        )) {\n        setIsTouched(true);\n        return;\n      }\n    }\n\n    setIsTouched(false);\n  }, [\n    localReactionsLimit,\n    reactionsLimit,\n    localEnabledReactions,\n    enabledReactions,\n  ]);\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n      setLocalReactionsLimit(reactionsLimit);\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n      setLocalReactionsLimit(reactionsLimit);\n    } else {\n      setLocalEnabledReactions(undefined);\n      setLocalReactionsLimit(undefined);\n    }\n  }, [enabledReactions, reactionsLimit]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  const handleReactionsLimitChange = useCallback((value: number) => {\n    setLocalReactionsLimit(value);\n  }, []);\n\n  const renderReactionsMaxCountValue = useCallback((value: number) => {\n    return lang('PeerInfo.AllowedReactions.MaxCountValue', value);\n  }, [lang]);\n\n  const shouldShowReactionsLimit = isChannel\n    && (localEnabledReactions?.type === 'all' || localEnabledReactions?.type === 'some');\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        {Boolean(localReactionsLimit && shouldShowReactionsLimit) && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('MaximumReactionsHeader')}\n            </h3>\n            <RangeSlider\n              min={1}\n              max={maxUniqueReactions}\n              value={localReactionsLimit!}\n              onChange={handleReactionsLimitChange}\n              renderValue={renderReactionsMaxCountValue}\n              isCenteredLayout\n            />\n            <p className=\"section-info section-info_push\">\n              {lang('ChannelReactions.MaxCount.Info')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section section-with-fab\">\n            <h3 className=\"section-heading\">\n              {lang('OnlyAllowThisReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  withIcon\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const { maxUniqueReactions } = global.appConfig;\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const reactionsLimit = chatFullInfo?.reactionsLimit || maxUniqueReactions;\n    const isChannel = isChatChannel(chat);\n\n    return {\n      enabledReactions: chatFullInfo?.enabledReactions,\n      availableReactions: global.reactions.availableReactions,\n      chat,\n      maxUniqueReactions,\n      reactionsLimit,\n      isChannel,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageReactions));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { MUTE_INDEFINITE_TIMESTAMP, SERVICE_NOTIFICATIONS_USER_ID, UNMUTE_TIMESTAMP } from '../../../config';\nimport { isUserBot } from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n    updateChatMutedState,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, markProfileFieldsTouched, unmarkProfileFieldsTouched] = useFlag();\n  const [error, setError] = useState<string | undefined>();\n  const [isNotificationsTouched, markNotificationsTouched, unmarkNotificationsTouched] = useFlag();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    unmarkProfileFieldsTouched();\n    unmarkNotificationsTouched();\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileFieldsTouched();\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    markProfileFieldsTouched();\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    markProfileFieldsTouched();\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    markNotificationsTouched();\n    markProfileFieldsTouched();\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n\n    if (isNotificationsTouched) {\n      updateChatMutedState({\n        chatId: userId, mutedUntil: isNotificationsEnabled ? UNMUTE_TIMESTAMP : MUTE_INDEFINITE_TIMESTAMP,\n      });\n    }\n  }, [firstName, isNotificationsEnabled, isNotificationsTouched, lastName, userId]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    markProfileFieldsTouched();\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    markProfileFieldsTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"user-first-name\"\n              label={lang('UserInfo.FirstNamePlaceholder')}\n              onChange={handleFirstNameChange}\n              value={firstName}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              id=\"user-last-name\"\n              label={lang('UserInfo.LastNamePlaceholder')}\n              onChange={handleLastNameChange}\n              value={lastName}\n            />\n          </div>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"section-help\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { FC } from '../../../lib/teact/teact.ts';\nimport type React from '../../../lib/teact/teact.ts';\nimport { useState } from '../../../lib/teact/teact.ts';\nimport { memo } from '../../../lib/teact/teact.ts';\n\nimport type { ApiChat } from '../../../api/types/index';\nimport type { ManagementScreens } from '../../../types/index';\nimport { ChatCreationProgress } from '../../../types/index';\n\nimport { getActions, withGlobal } from '../../../global/index';\nimport { selectChat, selectTabState } from '../../../global/selectors/index';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack.ts';\nimport useLang from '../../../hooks/useLang.ts';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Icon from '../../common/icons/Icon.tsx';\nimport AvatarEditable from '../../ui/AvatarEditable.tsx';\nimport FloatingActionButton from '../../ui/FloatingActionButton.tsx';\nimport InputText from '../../ui/InputText.tsx';\nimport Spinner from '../../ui/Spinner.tsx';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\nconst NewDiscussionGroup: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  creationProgress,\n  creationError,\n}) => {\n  const { createChannel } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [title, setTitle] = useState(lang('NewDiscussionChatTitle', { name: chat?.title }));\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.trimStart();\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  });\n\n  const renderedError = (creationError && lang('NewChatTitleEmptyError')) || (\n    error !== lang('NewChatTitleEmptyError') && error !== lang('NewChannelTitleEmptyError')\n      ? error\n      : undefined\n  );\n\n  const handleCreateGroup = useLastCallback(() => {\n    if (!title.length) {\n      setError(lang('NewChatTitleEmptyError'));\n      return;\n    }\n    if (!chat) return;\n\n    createChannel({\n      discussionChannelId: chat.id,\n      title,\n      photo,\n      isSuperGroup: true,\n    });\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"NewChat\">\n          <div className=\"NewChat-inner step-2\">\n            <AvatarEditable\n              onChange={setPhoto}\n              title={lang('AddPhoto')}\n            />\n            <InputText\n              value={title}\n              onChange={handleTitleChange}\n              label={lang('GroupName')}\n              error={error === lang('NewChatTitleEmptyError')\n                || error === lang('NewChannelTitleEmptyError') ? error : undefined}\n            />\n\n            {renderedError && (\n              <p className=\"error\">{renderedError}</p>\n            )}\n          </div>\n\n          <FloatingActionButton\n            isShown={title.length !== 0}\n            onClick={handleCreateGroup}\n            disabled={isLoading}\n            ariaLabel={lang('DiscussionCreateGroup')}\n          >\n            {isLoading ? (\n              <Spinner color=\"white\" />\n            ) : (\n              <Icon name=\"arrow-right\" />\n            )}\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewDiscussionGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageBot from './ManageBot';\nimport ManageChannel from './ManageChannel';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvite from './ManageInvite';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageInvites from './ManageInvites';\nimport ManageJoinRequests from './ManageJoinRequests';\nimport ManageReactions from './ManageReactions';\nimport ManageUser from './ManageUser';\nimport NewDiscussionGroup from './NewDiscussionGroup.tsx';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'bot':\n          return (\n            <ManageBot\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.NewDiscussionGroup:\n      return (\n        <NewDiscussionGroup\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType] || '';\n}\n","import type { RegularLangFnParameters } from '../../util/localization';\nimport type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Partial<Record<string, RegularLangFnParameters>>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"maC_9u6e\",\"description\":\"zQ6lEVJ2\",\"checkout-picture\":\"JgWvLdK2\",\"checkoutPicture\":\"JgWvLdK2\",\"text\":\"T2pYH395\",\"checkout-title\":\"HadolzeF\",\"checkoutTitle\":\"HadolzeF\",\"checkout-description\":\"oZW7mUNP\",\"checkoutDescription\":\"oZW7mUNP\",\"price-info\":\"P618Q3yr\",\"priceInfo\":\"P618Q3yr\",\"price-info-item\":\"XNNG_ajy\",\"priceInfoItem\":\"XNNG_ajy\",\"price-info-item-main\":\"D9gYNLVk\",\"priceInfoItemMain\":\"D9gYNLVk\",\"price-info-item-title\":\"NtY5Aah7\",\"priceInfoItemTitle\":\"NtY5Aah7\",\"tipsList\":\"WHO341eB\",\"tipsItem\":\"ksLlzBxw\",\"tipsItem_active\":\"J4yem62L\",\"tipsItemActive\":\"J4yem62L\",\"invoice-info\":\"U2IBOLP1\",\"invoiceInfo\":\"U2IBOLP1\",\"provider\":\"kqWcdro1\",\"stripe\":\"xKztZrna\",\"smartglocal\":\"X_Ge1o4u\",\"checkout-info-item-info-title\":\"ysWuPklS\",\"checkoutInfoItemInfoTitle\":\"ysWuPklS\",\"checkout-info-item-info-data\":\"MpC_P8_c\",\"checkoutInfoItemInfoData\":\"MpC_P8_c\",\"tos-checkbox\":\"OrRb0xG7\",\"tosCheckbox\":\"OrRb0xG7\",\"list\":\"l_wfiFG0\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type {\n  ApiInvoice,\n  ApiLabeledPrice,\n  ApiPaymentCredentials,\n  ApiWebDocument,\n} from '../../api/types';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { IconName } from '../../types/icons';\nimport type { LangFn } from '../../util/localization';\nimport { PaymentStep } from '../../types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport SafeLink from '../common/SafeLink';\nimport Checkbox from '../ui/Checkbox';\nimport ListItem from '../ui/ListItem';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  title: string;\n  description: string;\n  photo?: ApiWebDocument;\n  invoice: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: ApiLabeledPrice[];\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  title,\n  description,\n  photo,\n  invoice,\n  shippingPrices,\n  checkoutInfo,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    termsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const { ref } = useMediaTransition<HTMLImageElement>({\n    hasMediaData: Boolean(photoUrl),\n  });\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(lang, tipAmount!, invoice.currency)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(lang, tip, invoice.currency, { shouldOmitFractions: true })}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = oldLang('PaymentCheckoutAcceptRecurrent', botName);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, oldLang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && (\n          <img\n            ref={ref}\n            className={styles.checkoutPicture}\n            src={photoUrl}\n            draggable={false}\n            width={photo!.dimensions?.width}\n            height={photo!.dimensions?.height}\n            alt=\"\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {description && (\n            <div className={styles.checkoutDescription}>\n              {renderText(description, ['br', 'links', 'emoji'])}\n            </div>\n          )}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {invoice.prices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang, oldLang('Checkout.TotalAmount'), totalPrice, invoice.currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {!isPaymentFormUrl && renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: oldLang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: oldLang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || (!isInteractive && shippingAddress)) && renderCheckoutItem({\n          title: shippingAddress,\n          label: oldLang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: oldLang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: oldLang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || (!isInteractive && shippingMethod)) && renderCheckoutItem({\n          title: shippingMethod,\n          label: oldLang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {termsUrl && renderTos(termsUrl)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  lang: LangFn, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(lang, value, currency)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title: string | undefined;\n  label: string | undefined;\n  icon?: IconName;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  const isMultiline = Boolean(title && label !== title);\n\n  return (\n    <ListItem\n      className={styles.list}\n      narrow\n      multiline={isMultiline}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n      leftElement={customIcon && <i className={buildClassName('icon', customIcon)} />}\n    >\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n  onPaymentFormSubmit?: (eventData: PaymentFormSubmitEvent['eventData']) => void;\n};\n\nexport interface PaymentFormSubmitEvent {\n  eventType: 'payment_form_submit';\n  eventData: {\n    credentials: {\n      token: string;\n      type: string;\n    };\n    title: string;\n  };\n}\n\ninterface WebAppOpenTgLinkEvent {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full?: string;\n  };\n}\n\ntype IframeCallbackEvent = PaymentFormSubmitEvent | WebAppOpenTgLinkEvent;\n\nconst ConfirmPayment: FC<OwnProps> = ({\n  url, noRedirect, onClose, onPaymentFormSubmit,\n}) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useOldLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n      switch (eventType) {\n        case 'web_app_open_tg_link':\n          if (!noRedirect) {\n            const linkUrl = TME_LINK_PREFIX + eventData.path_full!;\n            openTelegramLink({ url: linkUrl });\n          }\n          onClose();\n          break;\n        case 'payment_form_submit':\n          if (onPaymentFormSubmit) {\n            onPaymentFormSubmit(eventData);\n          }\n          break;\n        default:\n          onClose();\n          break;\n      }\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink, onPaymentFormSubmit]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { RegularLangFnParameters } from '../../util/localization';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport PasswordMonkey from '../common/PasswordMonkey';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  errorKey?: RegularLangFnParameters;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  errorKey,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={errorKey && lang.withRegular(errorKey)}\n        hint={passwordHint}\n        description={oldLang('PaymentConfirmationMessage', cardName)}\n        placeholder={oldLang('Password')}\n        onClearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const { payment } = selectTabState(global);\n  return {\n    errorKey: payment.error?.messageKey,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.form?.type === 'regular' ? payment.form.savedCredentials : undefined,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport focusNoScroll from '../../util/focusNoScroll';\nimport { CardType, detectCardType } from '../common/helpers/detectCardType';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport mirIconPath from '../../assets/mir.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 19;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n  isActive?: boolean;\n};\n\nconst CardInput: FC<OwnProps> = ({ value, error, onChange, isActive }) => {\n  const lang = useOldLang();\n  const cardNumberRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    if (!isActive || IS_TOUCH_ENV) {\n      return;\n    }\n\n    requestMeasure(() => {\n      focusNoScroll(cardNumberRef.current);\n    });\n  }, [isActive]);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} draggable={false} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} draggable={false} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} draggable={false} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport CardInput from './CardInput';\nimport ExpiryInput from './ExpiryInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n  isActive?: boolean;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n  isActive,\n}) => {\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{oldLang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber && lang.withRegular(formErrors.cardNumber)}\n          isActive={isActive}\n        />\n        {needCardholderName && (\n          <InputText\n            label={oldLang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder && lang.withRegular(formErrors.cardholder)}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry && lang.withRegular(formErrors.expiry)}\n          />\n          <InputText\n            label={oldLang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv && lang.withRegular(formErrors.cvv)}\n            teactExperimentControlled\n          />\n        </section>\n        {needCountry || needZip ? (\n          <h5>{oldLang('PaymentBillingAddress')}</h5>\n        ) : undefined}\n        <section className=\"inline-inputs\">\n          {needCountry && (\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.billingCountry}\n              hasArrow={Boolean(true)}\n              id=\"billing-country\"\n              error={formErrors.billingCountry && lang.withRegular(formErrors.billingCountry)}\n              tabIndex={0}\n              ref={selectCountryRef}\n            >\n              {\n                countryList.map(({ defaultName, name }) => (\n                  <option\n                    value={defaultName}\n                    className=\"county-item\"\n                    selected={defaultName === state.billingCountry}\n                  >\n                    {defaultName || name}\n                  </option>\n                ))\n              }\n            </Select>\n          )}\n          {needZip && (\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handleBillingPostCodeChange}\n              value={state.billingZip}\n              inputMode=\"text\"\n              tabIndex={0}\n              maxLength={12}\n              error={formErrors.billingZip && lang.withRegular(formErrors.billingZip)}\n            />\n          )}\n        </section>\n        <div className=\"checkbox\">\n          <Checkbox\n            label={oldLang('PaymentCardSavePaymentInformation')}\n            checked={canSaveCredentials ? state.saveCredentials : false}\n            tabIndex={0}\n            subLabel={oldLang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n            onChange={handleChangeSaveCredentials}\n            disabled={!canSaveCredentials}\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useOldLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(lang, amount, currency),\n    value,\n  }))), [shippingOptions, currency, lang]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{oldLang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport focusNoScroll from '../../util/focusNoScroll';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const phoneRef = useRef<HTMLInputElement>();\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    requestMeasure(() => {\n      focusNoScroll(inputRef.current);\n    });\n  }, [inputRef]);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{oldLang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={oldLang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1 && lang.withRegular(formErrors.streetLine1)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2 && lang.withRegular(formErrors.streetLine2)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city && lang.withRegular(formErrors.city)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state && lang.withRegular(formErrors.state)}\n            />\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2 && lang.withRegular(formErrors.countryIso2)}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode && lang.withRegular(formErrors.postCode)}\n            />\n          </div>\n        ) : undefined}\n        {needName || needEmail || needPhone ? (\n          <h5>{oldLang('PaymentShippingReceiver')}</h5>\n        ) : undefined}\n        {needName && (\n          <InputText\n            label={oldLang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName && lang.withRegular(formErrors.fullName)}\n          />\n        )}\n        {needEmail && (\n          <InputText\n            label={oldLang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email && lang.withRegular(formErrors.email)}\n          />\n        )}\n        {needPhone && (\n          <InputText\n            label={oldLang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone && lang.withRegular(formErrors.phone)}\n            ref={phoneRef}\n          />\n        )}\n        <Checkbox\n          label={oldLang('PaymentShippingSave')}\n          subLabel={oldLang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiCountry, ApiInvoice, ApiLabeledPrice, ApiPaymentFormRegular,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\nimport type { PaymentFormSubmitEvent } from './ConfirmPayment';\nimport { PaymentStep } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatCurrencyAsString } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\n\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport Checkout from './Checkout';\nimport ConfirmPayment from './ConfirmPayment';\nimport PasswordConfirm from './PasswordConfirm';\nimport PaymentInfo from './PaymentInfo';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport Shipping from './Shipping';\nimport ShippingInfo from './ShippingInfo';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst DONATE_PROVIDER_URL = 'https://payment.smart-glocal.com';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  step?: PaymentStep;\n  chat?: ApiChat;\n  nativeProvider?: string;\n  invoice?: ApiInvoice;\n  form?: ApiPaymentFormRegular;\n  error?: TabState['payment']['error'];\n  isProviderError?: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions?: boolean;\n  shippingOptions?: ShippingOption[];\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  form,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  passwordValidUntil,\n  isExtendedMedia,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n    setSmartGlocalCardInfo,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePreviousDeprecated(step, true);\n  const prevRequestId = usePreviousDeprecated(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.messageKey,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (form?.savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = form.savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [form, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (form?.savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: form.savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, form?.savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.descriptionKey ? lang.withRegular(error.descriptionKey) : lang('ErrorUnspecified')}</h4>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handlePaymentFormSubmit = useCallback((eventData: PaymentFormSubmitEvent['eventData']) => {\n    const { credentials } = eventData;\n    setSmartGlocalCardInfo(credentials);\n    sendForm();\n  }, [sendForm]);\n\n  function renderModalContent(currentStep: PaymentStep, isActive?: boolean) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            title={form!.title}\n            description={form!.description}\n            photo={form!.photo}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice!}\n            checkoutInfo={checkoutInfo}\n            isPaymentFormUrl={isPaymentFormUrl}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            savedCredentials={form!.savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n            botName={botName}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={form!.savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={form!.savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!form!.isPasswordMissing && form!.canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n            isActive={isActive}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            needEmail={Boolean(invoice?.isEmailRequested || invoice?.isEmailSentToProvider)}\n            needPhone={Boolean(invoice?.isPhoneRequested || invoice?.isPhoneSentToProvider)}\n            needName={Boolean(invoice?.isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={invoice!.currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onPaymentFormSubmit={handlePaymentFormSubmit}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const handleButtonClick = useLastCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (isPaymentFormUrl) {\n          setIsLoading(true);\n          setStep(PaymentStep.ConfirmPayment);\n          return;\n        }\n\n        if (form?.savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (invoice?.isEmailRequested && !email)\n          || (invoice?.isPhoneRequested && !phone)\n          || (invoice?.isNameRequested && !fullName);\n\n        if ((invoice?.isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (invoice?.isShippingAddressRequested && !paymentState.shipping && shippingOptions?.length) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  });\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return oldLang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return oldLang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return oldLang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return oldLang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return oldLang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return oldLang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return oldLang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, oldLang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? oldLang('Checkout.PayPrice', formatCurrencyAsString(totalPrice, invoice!.currency, oldLang.code))\n    : lang('PaymentInfoDone');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.termsUrl) && !isTosAccepted;\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          {lang('PaymentsProvidesNotSupported', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name={step === PaymentStep.Checkout ? 'close' : 'arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition\n          name=\"slide\"\n          activeKey={step}\n          shouldCleanup\n          cleanupOnlyKey={PaymentStep.ConfirmPayment}\n        >\n          {(isActive) => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step, isActive)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            className=\"button-text\"\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      form,\n      step,\n      shippingOptions,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n      url,\n    } = selectTabState(global).payment;\n\n    const { invoice, nativeParams, nativeProvider } = form || {};\n    const countryList = global.countryList.general;\n\n    let providerName = form?.nativeProvider;\n    if (!providerName && url) {\n      providerName = url.startsWith(DONATE_PROVIDER_URL) ? DONATE_PROVIDER : undefined;\n    }\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!providerName || !SUPPORTED_PROVIDERS.has(providerName)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const bot = form?.botId ? selectUser(global, form.botId) : undefined;\n    const botName = getUserFullName(bot);\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      nativeProvider: providerName,\n      isProviderError,\n      form,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl: confirmPaymentUrl ?? url,\n      isPaymentFormUrl: Boolean(!nativeProvider && url),\n      countryList,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n      botName,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: ApiLabeledPrice[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiReceiptRegular, ApiShippingAddress } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Checkout from './Checkout';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  receipt?: ApiReceiptRegular;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  receipt,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const prevReceipt = usePrevious(receipt);\n  const renderingReceipt = receipt || prevReceipt;\n\n  const checkoutInfo = useMemo(() => {\n    if (!renderingReceipt) return undefined;\n    return getCheckoutInfo(renderingReceipt.credentialsTitle, renderingReceipt.info, renderingReceipt.shippingMethod);\n  }, [renderingReceipt]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      {renderingReceipt && (\n        <>\n          <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            <Button\n              className=\"close-button\"\n              color=\"translucent\"\n              round\n              size=\"smaller\"\n              onClick={closeModal}\n              ariaLabel=\"Close\"\n            >\n              <Icon name=\"close\" />\n            </Button>\n            <h3>\n              {' '}\n              {lang('PaymentReceipt')}\n              {' '}\n            </h3>\n          </div>\n          <div className=\"receipt-content custom-scroll\">\n            <Checkout\n              shippingPrices={renderingReceipt.shippingPrices}\n              totalPrice={renderingReceipt.totalAmount}\n              tipAmount={renderingReceipt.tipAmount}\n              invoice={renderingReceipt.invoice}\n              checkoutInfo={checkoutInfo}\n              title={renderingReceipt.title}\n              description={renderingReceipt.description}\n              photo={renderingReceipt.photo}\n            />\n          </div>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { receipt } = selectTabState(global).payment;\n\n    return {\n      receipt,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?: {\n    phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"n8eENbaR\",\"closeButton\":\"smosGkw9\",\"contentText\":\"Qo4PtFZI\",\"title\":\"wtfpombl\",\"separator\":\"UoMeVIyC\",\"userPicker\":\"nEYyTS_m\",\"sendInvites\":\"Ttkq3nqt\",\"avatarList\":\"Nc3SOtKd\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './InviteViaLinkModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['inviteViaLinkModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst InviteViaLinkModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n}) => {\n  const { sendInviteMessages, closeInviteViaLinkModal, openPremiumModal } = getActions();\n  const { missingUsers } = modal || {};\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n\n  const userIds = useMemo(() => missingUsers?.map((user) => user.id) || MEMO_EMPTY_ARRAY, [missingUsers]);\n  const [unselectableIds, selectableIds] = useMemo(() => {\n    if (!missingUsers?.length) return [[], []];\n    const [requirePremiumIds, regularIds] = partition(missingUsers, (user) => user.isRequiringPremiumToMessage);\n    return [requirePremiumIds.map((user) => user.id), regularIds.map((user) => user.id)];\n  }, [missingUsers]);\n\n  const invitableWithPremiumIds = useMemo(() => {\n    return missingUsers?.filter((user) => user.isRequiringPremiumToInvite || user.isRequiringPremiumToMessage)\n      .map((user) => user.id);\n  }, [missingUsers]);\n\n  const isEveryPremiumBlocksPm = useMemo(() => {\n    if (!missingUsers) return undefined;\n    return !missingUsers.some((user) => user.isRequiringPremiumToInvite && !user.isRequiringPremiumToMessage);\n  }, [missingUsers]);\n\n  const topListPeers = useMemo(() => {\n    const users = getGlobal().users.byId;\n    return invitableWithPremiumIds?.map((id) => users[id]);\n  }, [invitableWithPremiumIds]);\n\n  useEffect(() => {\n    setSelectedMemberIds(selectableIds);\n  }, [selectableIds]);\n\n  const handleClose = useLastCallback(() => closeInviteViaLinkModal());\n\n  const handleSendInviteLink = useCallback(() => {\n    sendInviteMessages({ chatId: chat!.id, userIds: selectedMemberIds });\n    closeInviteViaLinkModal();\n  }, [selectedMemberIds, chat]);\n\n  const handleOpenPremiumModal = useCallback(() => {\n    openPremiumModal();\n  }, []);\n\n  const canSendInviteLink = useMemo(() => {\n    if (!chat) return undefined;\n    return Boolean(chat?.isCreator || chat?.adminRights?.inviteUsers);\n  }, [chat]);\n\n  const inviteSectionText = useMemo(() => {\n    return canSendInviteLink\n      ? lang(missingUsers?.length === 1 ? 'InviteBlockedOneMessage' : 'InviteBlockedManyMessage')\n      : lang('InviteRestrictedUsers2', missingUsers?.length);\n  }, [canSendInviteLink, lang, missingUsers?.length]);\n\n  const premiumSectionText = useMemo(() => {\n    if (!invitableWithPremiumIds?.length || !topListPeers?.length) return undefined;\n    const prefix = isEveryPremiumBlocksPm ? 'InviteMessagePremiumBlocked' : 'InvitePremiumBlocked';\n    let langKey = `${prefix}One`;\n    let params = [getUserFullName(topListPeers[0])];\n    if (invitableWithPremiumIds.length === 2) {\n      langKey = `${prefix}Two`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1])];\n    } else if (invitableWithPremiumIds.length === 3) {\n      langKey = `${prefix}Three`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1]), getUserFullName(topListPeers[2])];\n    } else if (invitableWithPremiumIds.length > 3) {\n      langKey = `${prefix}Many`;\n      params = [\n        getUserFullName(topListPeers[0]),\n        getUserFullName(topListPeers[1]),\n        (invitableWithPremiumIds.length - 2).toString(),\n      ];\n    }\n\n    return lang(langKey, params, undefined, topListPeers.length);\n  }, [invitableWithPremiumIds, isEveryPremiumBlocksPm, lang, topListPeers]);\n\n  const hasPremiumSection = Boolean(topListPeers?.length);\n  const hasSelectableSection = Boolean(selectableIds?.length);\n\n  return (\n    <Modal\n      isOpen={Boolean(userIds && chat)}\n      contentClassName={styles.content}\n      onClose={handleClose}\n      isSlim\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {premiumSectionText && (\n        <>\n          <AvatarList\n            className={styles.avatarList}\n            peers={topListPeers}\n            size=\"large\"\n          />\n          <h3 className={styles.title}>\n            {canSendInviteLink ? lang('InvitePremiumBlockedTitle') : lang('ChannelInviteViaLinkRestricted')}\n          </h3>\n          <p className={styles.contentText}>\n            {renderText(premiumSectionText, ['simple_markdown'])}\n          </p>\n          <Button\n            withPremiumGradient\n            isShiny\n            onClick={handleOpenPremiumModal}\n          >\n            {lang('InvitePremiumBlockedSubscribe')}\n          </Button>\n        </>\n      )}\n      {hasPremiumSection && hasSelectableSection && (\n        <Separator className={styles.separator}>\n          {lang('InvitePremiumBlockedOr')}\n        </Separator>\n      )}\n      {hasSelectableSection && (\n        <>\n          <h3 className={styles.title}>{lang('InviteBlockedTitle')}</h3>\n          <p className={styles.contentText}>\n            {inviteSectionText}\n          </p>\n          <PeerPicker\n            className={styles.userPicker}\n            itemIds={userIds}\n            selectedIds={selectedMemberIds}\n            lockedUnselectedIds={unselectableIds}\n            lockedUnselectedSubtitle={lang('InvitePremiumBlockedUser')}\n            onSelectedIdsChange={setSelectedMemberIds}\n            isViewOnly={!canSendInviteLink}\n            allowMultiple\n            withStatus\n            itemInputType=\"checkbox\"\n          />\n          {canSendInviteLink && (\n            <Button\n              className={styles.sendInvites}\n              onClick={handleSendInviteLink}\n              disabled={!selectedMemberIds.length}\n            >\n              {lang('SendInviteLink.ActionInvite')}\n            </Button>\n          )}\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const chat = modal?.chatId ? selectChat(global, modal.chatId) : undefined;\n\n    return {\n      chat,\n    };\n  },\n)(InviteViaLinkModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c3xMWwzW\",\"fade-in-opacity\":\"cHb04cFv\",\"fadeInOpacity\":\"cHb04cFv\",\"closing\":\"_0HkZ8ITm\",\"voice\":\"VLiJWMs0\",\"video\":\"ML2YEpGq\",\"footer\":\"VWy1qXJL\",\"closeBtn\":\"FfMrCmD9\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { isOwnMessage } from '../../../global/helpers';\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Audio from '../../common/Audio';\nimport RoundVideo from '../../middle/message/RoundVideo';\nimport Button from '../../ui/Button';\n\nimport styles from './OneTimeMediaModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['oneTimeMediaModal'];\n};\n\nconst OneTimeMediaModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    closeOneTimeMediaModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const message = useCurrentOrPrev(modal?.message, true);\n\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(modal));\n\n  const handlePlayVoice = useLastCallback(() => {\n    return undefined;\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeOneTimeMediaModal();\n  });\n\n  if (!shouldRender || !message) {\n    return undefined;\n  }\n\n  const isOwn = isOwnMessage(message);\n  const theme = selectTheme(getGlobal());\n  const closeBtnTitle = isOwn ? lang('Chat.Voice.Single.Close') : lang('Chat.Voice.Single.DeleteAndClose');\n\n  function renderMedia() {\n    if (!message?.content) {\n      return undefined;\n    }\n    const { voice, video } = message.content;\n    if (voice) {\n      return (\n        <Audio\n          className={styles.voice}\n          theme={theme}\n          message={message}\n          origin={AudioOrigin.OneTimeModal}\n          autoPlay\n          onPlay={handlePlayVoice}\n          onPause={handleClose}\n        />\n      );\n    } else if (video?.isRound) {\n      return (\n        <RoundVideo\n          className={styles.video}\n          message={message}\n          origin=\"oneTimeModal\"\n          onStop={handleClose}\n        />\n      );\n    }\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, transitionClassNames)}>\n      {renderMedia()}\n      <div className={styles.footer}>\n        <Button\n          faded\n          onClick={handleClose}\n          pill\n          size=\"smaller\"\n          color={theme === 'dark' ? 'dark' : 'secondary'}\n          className={styles.closeBtn}\n        >\n          {closeBtnTitle}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(OneTimeMediaModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst WebAppsCloseConfirmationModal: FC<OwnProps> = ({\n  isOpen,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { closeWebAppsCloseConfirmationModal, closeWebAppModal } = getActions();\n\n  const [shouldSkipInFuture, setShouldSkipInFuture] = useState(false);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const onClose = useCallback(() => {\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const confirmHandler = useCallback(() => {\n    closeWebAppModal({ shouldSkipConfirmation: true });\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const handleSelectWithEnter = useCallback((index: number) => {\n    if (index === -1) confirmHandler();\n  }, [confirmHandler]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, handleSelectWithEnter, '.Button');\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      title={lang('CloseMiniApps')}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <p>{lang('AreYouSureCloseMiniApps')}</p>\n      <Checkbox\n        className=\"dialog-checkbox\"\n        label={lang('DoNotAskAgain')}\n        checked={shouldSkipInFuture}\n        onCheck={setShouldSkipInFuture}\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n        ref={containerRef}\n        onKeyDown={handleKeyDown}\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n          color=\"danger\"\n        >\n          {oldLang('Confirm')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>\n          {oldLang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(WebAppsCloseConfirmationModal);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport TableAboutModal, { type TableAboutData } from '../common/TableAboutModal';\n\nimport styles from './FrozenAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isFrozenAccountModalOpen'];\n};\n\ntype StateProps = {\n  freezeAppealUrl?: string;\n  botFreezeAppealUsername?: string;\n  freezeUntilDate?: number;\n};\n\nconst FrozenAccountModal = ({\n  modal,\n  freezeUntilDate,\n  freezeAppealUrl,\n  botFreezeAppealUsername,\n}: OwnProps & StateProps) => {\n  const {\n    closeFrozenAccountModal,\n    openUrl,\n  } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleClose = useLastCallback(() => {\n    closeFrozenAccountModal();\n  });\n\n  const handleAppeal = useLastCallback(() => {\n    closeFrozenAccountModal();\n    if (freezeAppealUrl) {\n      openUrl({ url: freezeAppealUrl });\n    }\n  });\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.BannedDuck}\n          noLoop\n        />\n        <div className={styles.title}>\n          {lang('FrozenAccountModalTitle')}\n        </div>\n      </div>\n    );\n  }, [lang]);\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          className={styles.buttonAppeal}\n          onClick={handleAppeal}\n          noForcedUpperCase\n        >\n          {lang('ButtonAppeal')}\n        </Button>\n        <Button\n          isText\n          onClick={handleClose}\n          noForcedUpperCase\n        >\n          {lang('ButtonUnderstood')}\n        </Button>\n      </div>\n    );\n  }, [lang, isOpen]);\n\n  if (!freezeUntilDate || !botFreezeAppealUsername) return undefined;\n\n  const date = new Date(freezeUntilDate * 1000);\n\n  const botLink = (\n    <Link onClick={handleAppeal} isPrimary>\n      {formatUsername(botFreezeAppealUsername)}\n    </Link>\n  );\n\n  const listItemData = [\n    ['hand-stop', lang('FrozenAccountViolationTitle'), lang('FrozenAccountViolationSubtitle')],\n    ['lock', lang('FrozenAccountReadOnlyTitle'), lang('FrozenAccountReadOnlySubtitle')],\n    ['frozen-time', lang('FrozenAccountAppealTitle'),\n      lang('FrozenAccountAppealSubtitle', {\n        botLink,\n        date: formatDateToString(date, lang.code),\n      }, {\n        withNodes: true,\n      })],\n  ] satisfies TableAboutData;\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const freezeUntilDate = global.appConfig.freezeUntilDate;\n    const freezeAppealUrl = global.appConfig.freezeAppealUrl;\n    const botFreezeAppeal = global.botFreezeAppealId ? selectUser(global, global.botFreezeAppealId) : undefined;\n    const botFreezeAppealUsername = botFreezeAppeal && getMainUsername(botFreezeAppeal);\n\n    return {\n      freezeUntilDate,\n      freezeAppealUrl,\n      botFreezeAppealUsername,\n    };\n  },\n)(FrozenAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"cW2rtp6M\",\"title\":\"qLSm0uyC\",\"footer\":\"Vj3QQ_JQ\",\"buttonAppeal\":\"anvg3JaY\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ndqkeHwR\",\"header\":\"ChJT6ggP\",\"description\":\"ravQhVQQ\",\"descriptionPreview\":\"_K5HhOM0\",\"negative\":\"X6iX4F56\",\"previewLink\":\"yY4hj8r_\",\"backLink\":\"dcNVNCXo\",\"title\":\"IvsV0tkW\",\"ratingProgress\":\"XYpzs7CQ\",\"withPreview\":\"UgviXkNW\",\"subtitle\":\"OvdHupR0\",\"footer\":\"XtZPIDLP\",\"badge\":\"JdeFDQBI\",\"understoodIcon\":\"Lwz8rpdL\",\"badgeAdded\":\"Lr6JUU14\",\"badgeDeducted\":\"OxZxdqcn\"};","import { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsRating, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport PremiumProgress, { type AnimationDirection } from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport TableAboutModal, { type TableAboutData } from '../common/TableAboutModal';\n\nimport styles from './ProfileRatingModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['profileRatingModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  currentUserId?: string;\n  starsRating?: ApiStarsRating;\n  pendingRating?: ApiStarsRating;\n  pendingRatingDate?: number;\n};\n\nconst ProfileRatingModal = ({\n  modal,\n  user,\n  currentUserId,\n  starsRating,\n  pendingRating,\n  pendingRatingDate,\n}: OwnProps & StateProps) => {\n  const {\n    closeProfileRatingModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n  const [showFutureRating, setShowFutureRating] = useState(false);\n\n  const handleClose = useLastCallback(() => {\n    closeProfileRatingModal();\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      setShowFutureRating(false);\n    }\n  }, [isOpen]);\n\n  const handleShowFuture = useLastCallback(() => {\n    setShowFutureRating(true);\n  });\n\n  const handleShowCurrent = useLastCallback(() => {\n    setShowFutureRating(false);\n  });\n\n  const renderBadge = (type: 'added' | 'deducted') => {\n    const isAdded = type === 'added';\n    const badgeText = isAdded ? lang('RatingBadgeAdded') : lang('RatingBadgeDeducted');\n    const badgeClass = isAdded ? styles.badgeAdded : styles.badgeDeducted;\n\n    return (\n      <span className={buildClassName(styles.badge, badgeClass)}>\n        {badgeText}\n      </span>\n    );\n  };\n\n  const header = useMemo(() => {\n    if (!modal || !user || !starsRating || !isOpen) return undefined;\n\n    const rating = showFutureRating && pendingRating ? pendingRating : starsRating;\n    const currentStars = rating.stars;\n    const currentLevelStars = rating.currentLevelStars;\n    const nextLevelStars = rating.nextLevelStars;\n    const currentLevel = rating.level;\n    const nextLevel = currentLevel + 1;\n    const isNegative = currentLevel < 0;\n    const pendingLevel = !showFutureRating && pendingRating ? pendingRating.level : starsRating.level;\n\n    let levelProgress = 0;\n\n    if (!nextLevelStars) {\n      levelProgress = 1;\n    } else if (nextLevelStars > currentLevelStars) {\n      levelProgress = Math.max(0.03, (currentStars - currentLevelStars) / (nextLevelStars - currentLevelStars));\n    } else {\n      levelProgress = 1;\n    }\n\n    const progress = isNegative ? 0.5 : Math.max(0, Math.min(1, levelProgress));\n\n    const waitTime = pendingRatingDate ? pendingRatingDate - Math.floor(Date.now() / 1000) : 0;\n    const pendingPoints = pendingRating ? pendingRating.stars - starsRating.stars : 0;\n    const shouldShowPreview = pendingRating && pendingRatingDate;\n\n    const renderPreviewDescription = () => {\n      if (!shouldShowPreview) return undefined;\n\n      return (\n        <Transition\n          name=\"fade\"\n          className={buildClassName(styles.descriptionPreview, isNegative && styles.negative)}\n          activeKey={showFutureRating ? 1 : 0}\n          shouldCleanup\n          shouldRestoreHeight\n        >\n          {showFutureRating ? (\n            <p>\n              {lang('DescriptionFutureRating', {\n                time: formatShortDuration(lang, waitTime),\n                points: Math.abs(pendingPoints),\n                link: (\n                  <span className={styles.backLink} onClick={handleShowCurrent}>\n                    {lang('LinkDescriptionRatingBack')}\n                  </span>\n                ),\n              }, {\n                pluralValue: Math.abs(pendingPoints),\n                withNodes: true,\n              })}\n            </p>\n          ) : (\n            <p>\n              {lang('DescriptionPendingRating', {\n                time: formatShortDuration(lang, waitTime),\n                points: Math.abs(pendingPoints),\n                link: (\n                  <span className={styles.previewLink} onClick={handleShowFuture}>\n                    {lang('LinkDescriptionRatingPreview')}\n                  </span>\n                ),\n              }, {\n                pluralValue: Math.abs(pendingPoints),\n                withNodes: true,\n              })}\n            </p>\n          )}\n        </Transition>\n      );\n    };\n\n    let animationDirection: AnimationDirection = 'none';\n    if (currentLevel >= 0 && pendingLevel >= 0 && currentLevel !== pendingLevel) {\n      animationDirection = currentLevel > pendingLevel ? 'forward' : 'backward';\n    }\n\n    if (currentLevel < 0 && pendingLevel < 0 && currentLevel !== pendingLevel) {\n      animationDirection = currentLevel < pendingLevel ? 'backward' : 'forward';\n    }\n\n    const userFallbackText = lang('ActionFallbackUser');\n\n    return (\n      <div className={styles.header}>\n        <PremiumProgress\n          leftText={isNegative ? undefined : lang('RatingLevel', { level: currentLevel })}\n          rightText={isNegative ? lang('RatingNegativeLevel') : lang('RatingLevel', { level: nextLevel })}\n          floatingBadgeIcon={isNegative ? 'warning' : 'crown-wear'}\n          floatingBadgeText={isNegative ? currentLevel.toString()\n            : `${lang.number(currentStars)} / ${lang.number(nextLevelStars || currentStars)}`}\n          progress={progress}\n          isPrimary={currentLevel >= 0}\n          isNegative={currentLevel < 0}\n          animationDirection={animationDirection}\n          className={buildClassName(styles.ratingProgress, shouldShowPreview && styles.withPreview)}\n        />\n        {renderPreviewDescription()}\n        <div className={styles.title}>\n          {lang('TitleRating')}\n        </div>\n        <p className={styles.description}>\n          {user?.id === currentUserId\n            ? lang('RatingYourReflectsActivity')\n            : lang('RatingReflectsActivity', { name: getPeerTitle(lang, user) || userFallbackText },\n              { withMarkdown: true, withNodes: true })}\n        </p>\n      </div>\n    );\n  }, [modal, user, currentUserId, starsRating,\n    pendingRating, pendingRatingDate, showFutureRating,\n    lang, handleShowFuture, handleShowCurrent, isOpen]);\n\n  const listItemData = [\n    ['closed-gift', lang('RatingGiftsFromTelegram'), (\n      <span className={styles.subtitle}>\n        {renderBadge('added')}\n        {lang('RatingGiftsFromTelegramDesc')}\n      </span>\n    )],\n    ['user-stars', lang('RatingGiftsAndPostsFromUsers'), (\n      <span className={styles.subtitle}>\n        {renderBadge('added')}\n        {lang('RatingGiftsAndPostsFromUsersDesc')}\n      </span>\n    )],\n    ['stars-refund', lang('RatingRefundsAndConversions'), (\n      <span className={styles.subtitle}>\n        {renderBadge('deducted')}\n        {lang('RatingRefundsAndConversionsDesc')}\n      </span>\n    )],\n  ] satisfies TableAboutData;\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          onClick={handleClose}\n        >\n          <Icon name=\"understood\" className={styles.understoodIcon} />\n          {lang('ButtonUnderstood')}\n        </Button>\n      </div>\n    );\n  }, [lang, isOpen, handleClose]);\n\n  return (\n    <TableAboutModal\n      contentClassName={styles.content}\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const currentUserId = global.currentUserId;\n    const user = modal?.userId ? selectUser(global, modal.userId) : undefined;\n    const userFullInfo = modal?.userId\n      ? selectUserFullInfo(global, modal.userId) : undefined;\n\n    const starsRating = userFullInfo?.starsRating;\n    const pendingRating = userFullInfo?.starsMyPendingRating;\n    const pendingRatingDate = userFullInfo?.starsMyPendingRatingDate;\n\n    return {\n      user,\n      currentUserId,\n      starsRating,\n      pendingRating,\n      pendingRatingDate,\n    };\n  },\n)(ProfileRatingModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LyrhszzE\",\"closeButton\":\"jHVcj192\",\"markAsReadButton\":\"Bp8eDIso\",\"chatInfoOverride\":\"FsTceiGs\"};","import type { FC } from '@teact';\nimport { memo } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiTypingStatus, ApiUpdateConnectionStateType } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getIsSavedDialog } from '../../../global/helpers';\nimport { selectChat, selectThreadParam, selectTopic } from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\n\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\n\nimport styles from './QuickPreviewModalHeader.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  onClose: VoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  connectionState?: ApiUpdateConnectionStateType;\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSavedDialog?: boolean;\n  unreadCount?: number;\n  hasUnreadMark?: boolean;\n};\n\nconst EMOJI_STATUS_SIZE = 20;\n\nconst QuickPreviewModalHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  chat,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  typingStatus,\n  isSavedDialog,\n  unreadCount,\n  hasUnreadMark,\n  onClose,\n}) => {\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const { markChatMessagesRead } = getActions();\n  const {\n    connectionStatusText,\n  } = useConnectionStatus(oldLang, connectionState, isSyncing || isFetchingDifference, true);\n\n  const handleMarkAsRead = useLastCallback(() => {\n    markChatMessagesRead({ id: chatId });\n  });\n\n  const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n  const realChatId = isSavedDialog ? String(MAIN_THREAD_ID) : chatId;\n  const displayChatId = chat?.isMonoforum ? chat.linkedMonoforumId! : realChatId;\n\n  return (\n    <div className={styles.root}>\n      {Boolean(unreadCount || hasUnreadMark) && (\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('ChatListContextMaskAsRead')}\n          onClick={handleMarkAsRead}\n          className={styles.markAsReadButton}\n        >\n          <Icon name=\"readchats\" />\n        </Button>\n      )}\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n        className={styles.closeButton}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className=\"modal-title\">\n        <div className={styles.chatInfoOverride}>\n          {isUserId(displayChatId) ? (\n            <PrivateChatInfo\n              key={displayChatId}\n              userId={displayChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo={false}\n              withMediaViewer={false}\n              withStory={false}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={displayChatId}\n              chatId={displayChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              withMonoforumStatus={chat?.isMonoforum}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={false}\n              withFullInfo={false}\n              withUpdatingStatus\n              withStory={false}\n              isSavedDialog={isSavedDialog}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const typingStatus = selectThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'typingStatus');\n    const isSavedDialog = getIsSavedDialog(chatId, threadId || MAIN_THREAD_ID, global.currentUserId);\n    const unreadCount = chat?.isForum && threadId\n      ? selectTopic(global, chatId, threadId)?.unreadCount\n      : chat?.unreadCount;\n\n    return {\n      chat,\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      typingStatus,\n      isSavedDialog,\n      unreadCount,\n      hasUnreadMark: chat?.hasUnreadMark,\n    };\n  },\n)(QuickPreviewModalHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hJTLQd8O\",\"content\":\"zUonvDbp\",\"column\":\"NYlix6SL\",\"messagesLayout\":\"IJ0EBwJk\"};","import type { FC } from '@teact';\nimport { memo, useEffect } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MessageList from '../../middle/MessageList';\nimport Modal from '../../ui/Modal';\nimport QuickPreviewModalHeader from './QuickPreviewModalHeader';\n\nimport backgroundStyles from '../../../styles/_patternBackground.module.scss';\nimport styles from './QuickPreviewModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['quickPreview'];\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isBackgroundBlurred?: boolean;\n};\n\nconst QuickPreviewModal: FC<OwnProps & StateProps> = ({\n  modal,\n  theme,\n  customBackground,\n  backgroundColor,\n  patternColor,\n  isBackgroundBlurred,\n}) => {\n  const { closeQuickPreview, openChat, openThread } = getActions();\n\n  const chatId = modal?.chatId;\n  const threadId = modal?.threadId;\n  const isOpen = Boolean(chatId);\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const handleClose = useLastCallback(() => {\n    closeQuickPreview();\n  });\n\n  const handleContentClick = useLastCallback(() => {\n    if (chatId) {\n      if (threadId) {\n        openThread({ chatId, threadId, shouldReplaceHistory: true });\n      } else {\n        openChat({ id: chatId, shouldReplaceHistory: true });\n      }\n      closeQuickPreview();\n    }\n  });\n\n  useEffect(() => isOpen ? captureEscKeyListener(handleClose) : undefined, [isOpen, handleClose]);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: handleClose,\n  });\n\n  const { chatId: renderingChatId, threadId: renderingThreadId } = useCurrentOrPrev(modal, true) || {};\n\n  const bgClassName = buildClassName(\n    backgroundStyles.background,\n    customBackground && backgroundStyles.customBgImage,\n    backgroundColor && backgroundStyles.customBgColor,\n    customBackground && isBackgroundBlurred && backgroundStyles.blurred,\n  );\n\n  if (!renderingChatId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={<QuickPreviewModalHeader chatId={renderingChatId} threadId={renderingThreadId} onClose={handleClose} />}\n      className={styles.root}\n      contentClassName={styles.content}\n    >\n      <div\n        className={styles.column}\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n        onClick={handleContentClick}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        <div className={styles.messagesLayout}>\n          <MessageList\n            chatId={renderingChatId}\n            threadId={renderingThreadId || MAIN_THREAD_ID}\n            type=\"thread\"\n            canPost={false}\n            isReady\n            withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n            isQuickPreview\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal: chatId }): Complete<StateProps> => {\n  const theme = selectTheme(global);\n  const {\n    isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n  } = selectThemeValues(global, theme) || {};\n\n  return {\n    theme,\n    customBackground,\n    backgroundColor,\n    patternColor,\n    isBackgroundBlurred,\n  };\n})(QuickPreviewModal));\n"],"names":["SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","memo","PasswordMonkey","isPasswordVisible","isBig","isFirstMonkeyLoaded","markFirstMonkeyLoaded","useFlag","isPeekShown","markPeekShown","isMobile","useAppLayout","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","useTimeout","handleFirstMonkeyLoad","useCallback","_jsxs","id","className","children","_jsx","AnimatedSticker","size","STICKER_SIZE_TWO_FA","tgsUrl","LOCAL_TGS_URLS","MonkeyClose","playSegment","noLoop","onLoad","MonkeyPeek","getMediaViewerItem","message","avatarOwner","profilePhotos","standaloneMedia","mediaIndex","sponsoredMessage","type","media","selectViewableMedia","global","origin","params","isGif","mediaType","isSingle","length","avatar","photos","action","document","photo","video","paidMedia","getMessageContent","isDocumentPhoto","isDocumentVideo","webPage","selectWebPageFromMessage","webpageType","webPagePhoto","webPageVideo","webPageDocument","isDocumentMedia","undefined","extendedMedia","extendedPhoto","extendedVideo","MediaViewerOrigin","SharedMedia","createGhost","source","ghost","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","ProfileAvatar","SettingsAvatar","profileInfo","querySelector","cloneNode","getNodes","index","containerSelector","mediaSelector","Album","ScheduledAlbum","getMessageHtmlId","PreviewMedia","SearchResult","MiddleHeaderAvatar","ChannelAvatar","SuggestedAvatar","StarsTransaction","SponsoredMessage","MESSAGE_CONTENT_SELECTOR","ScheduledInline","Inline","container","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","style","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","FALLBACK_DIMENSIONS","AVATAR_FULL_DIMENSIONS","useMediaProps","isAvatar","delay","isPhotoAvatar","isVideo","isVideoAvatar","isDocument","isRound","isPhoto","isFromSharedMedia","isFromSearch","contentType","getMediaOrAvatarHash","useMemo","isFull","getVideoProfilePhotoMediaHash","getMediaHash","getProfilePhotoMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","clear","set","window","setTimeout","useBlur","Boolean","useBlurSync","getMediaThumbUri","bestData","mediaSize","getMediaFileSize","isLocal","dimensions","VIDEO_AVATAR_FULL_DIMENSIONS","getPhotoFullDimensions","getVideoDimensions","ReportAvatarModal","isOpen","peerId","onClose","onCloseAnimationEnd","reportProfilePhoto","getActions","selectedReason","setSelectedReason","useState","description","setDescription","handleReport","useLastCallback","chatId","reason","handleSelectReason","value","handleDescriptionChange","e","target","lang","useOldLang","REPORT_OPTIONS","label","title","Modal","onEnter","RadioGroup","name","options","onChange","selected","InputText","Button","color","isText","onClick","getZoomChange","setZoomChange","useZoomChange","useUnmountCleanup","DeleteProfilePhotoModal","profileId","onConfirm","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","isUserId","withGlobal","item","canUpdateMedia","tabState","selectTabState","mediaViewer","avatarPhoto","chat","selectCurrentChat","currentMessageList","selectCurrentMessageList","threadId","isProtected","selectIsMessageProtected","activeDownloads","selectActiveDownloads","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","selectAllowedMessageActionsSlow","isCurrentAvatar","avatarPhotoId","canDeleteAvatar","canUpdate","messageListType","viewableMedia","MediaViewerActions","canReportAvatar","onReportAvatar","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","downloadMedia","cancelMediaDownload","updateProfilePhoto","updateChatPhoto","openMediaViewer","openDeleteMessageModal","isMessage","fileName","getMediaFilename","isDownloading","getIsDownloading","downloadProgress","handleDownloadClick","originMessage","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","isAvatarView","forceOnHeavyAnimation","MenuButton","onTrigger","round","ariaLabel","Icon","renderDeleteModal","openDeleteModalHandler","messageIds","isSchedule","menuItems","isForwardingAllowed","content","push","icon","Math","href","download","destructive","DropdownMenu","trigger","positionX","map","MenuItem","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","getCurrentTime","setCurrentTime","useCurrentTimeSignal","MediaViewerFooter","text","buttonText","isForVideo","handleSponsoredClick","isForceMobileVersion","isMultiline","setIsMultiline","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","onButtonClick","classNames","buildClassName","stopPropagation","dir","isRectangular","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","frames","currentTime","constructor","url","this","forEach","connector","request","args","MAX_WORKERS","onFrame","time","frame","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","data","result","callApi","mediaFormat","Progressive","arrayBuffer","postMessage","cancelAnimation","SeekLine","duration","bufferedRanges","isReady","posterSize","playbackRate","isActive","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","from","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","getPointerPosition","x","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","styles","start","end","PLAYBACK_RATES","renderTime","VideoPlayerControls","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","onSeekingChange","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","closeTimeoutRef","setVisibility","isVisible","body","remove","handleSeek","position","handleSeekStart","volumeIcon","ripple","RangeSlider","bold","formatFileSize","Menu","positionY","autoClose","rate","disabled","VideoPlayer","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","isSponsoredMessage","timestamp","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","lastMousePosition","y","updateMousePosition","checkMousePositionAndToggleControls","clientX","clientY","bounds","right","top","bottom","handleVideoMove","handleVideoLeave","handleSeekingChange","bufferingHandlers","useBuffering","isUnsupported","useUnsupportedMedia","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransitionDeprecated","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","key","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseLeave","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","textMessage","maxTimestamp","selectMessageTimestampableDuration","MediaViewerContent","withAnimation","isMoving","onFooterClick","updateLastPlaybackTimestamp","toggleControlsOnMove","updatePlaybackTimestamp","useThrottledCallback","MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION","isInAlbum","newTimestamp","PLAYBACK_SAVE_INTERVAL","useSignalEffect","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","renderMessageText","forcePlayback","isForMediaViewer","hasFooter","shouldForceMobileVersion","imageSize","canDrag","alt","Spinner","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","MediaViewerSlides","isLoadingMoreMedia","isSynced","loadMoreItemsIfNeeded","getNextItem","selectItem","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveItem","setActiveItem","activeItemRef","isScaled","activeItem","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectItemDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","cActiveItem","nextItem","timing","changeSlideOnClick","closest","calculateOffsetBoundaries","offsetTop","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","withWheelDrag","checkIfControlTarget","event","captureEvent","dragOffsetX","dragOffsetY","cancelDrag","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","SWIPE_DIRECTION_THRESHOLD","SWIPE_DIRECTION_TOLERANCE","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","includes","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","prevItem","hasPrev","hasNext","isRtl","toFixed","element","selector","matches","messageSender","selectSender","owner","SenderInfo","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","subtitle","isFallbackAvatar","fallbackPhoto","isPersonalAvatar","personalPhoto","date","formattedDate","formatMediaDateTime","count","currentIndex","countText","parts","isChannel","isChatChannel","isGroup","isChatGroup","senderTitle","getPeerTitle","Avatar","peer","renderText","shouldSkipHistoryAnimations","withDynamicLoading","selectPerformanceSettingsValue","currentUserId","isChatWithSelf","selectIsChatWithSelf","selectPeer","isChatAdmin","selectPeerPhotos","currentItem","isLoading","collectedMessageIds","chatMessages","selectScheduledMessage","selectChatMessage","selectSponsoredMessage","selectChatScheduledMessages","selectChatMessages","isOriginInline","isOriginAlbum","currentSearch","selectCurrentChatMediaSearch","foundIds","currentSegment","selectCurrentSharedMediaSearch","resultsByType","gif","selectOutlyingListByMessageId","selectListedIds","MediaViewer","openForwardMenu","searchChatMediaMessages","loadMoreProfilePhotos","clickSponsored","openUrl","animationKey","senderId","prevSenderId","usePreviousDeprecated","headerAnimation","isGhostAnimation","isReportAvatarModalOpen","openReportAvatarModal","closeReportAvatarModal","info","messageMediaIds","getMessageContentIds","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","prevMessage","prevIsHidden","prevOrigin","prevBestImageData","shouldAnimateOpening","beginHeavyAnimation","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","applyStyles","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","imageEl","messageListElement","getOffsetToContainer","scrollTop","offsetHeight","isMessageImageFullyVisible","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","HTMLElement","isFromMedia","isMedia","randomId","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","currentMediaMessageId","fromMedia","fromMediaIndex","nextIndex","fromAvatarOwner","fromProfilePhotos","fromSponsoredMessage","fromSponsoredMessageIndex","fromMessage","getMessagePaidMedia","indexOf","nextMessageId","nextMessage","openMediaViewerItem","itemChatId","itemMessageId","itemStandaloneMedia","handleBeforeDelete","prevMedia","shouldAnimateFirstRender","noCloseTransition","IS_TAURI","IS_MAC_OS","Transition","activeKey","avatarOwnerId","OFFSET_BOTTOM","MOBILE_OFFSET","hasBlur","isGhost2","ctx","alpha","IS_CANVAS_FILTER_SUPPORTED","filter","RADIUS","userId","getPeerStoryHtmlId","StoryViewerOrigin","StoryRibbon","storyRibbonStyles","ChatList","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","mainOffset","additionalOffset","totalOffset","roundToNearestEven","useSlideSizes","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlideWidth","slideWidth","activeSlide","slide","toActiveScale","fromActiveScale","calculateSlideSizes","useStoryProps","story","isCurrentUserPremium","isDropdownMenuOpen","isLoadedStory","isDeletedStory","hasText","hasMessageText","hasForwardInfo","forwardInfo","thumbnail","previewHash","getStoryMediaHash","noSound","fullMediaHash","fullMediaData","altMediaHash","altMediaData","hasFullData","hasThumb","canDownload","noForwards","downloadHash","downloadMediaData","storyViewer","isStealthModalOpen","stealthMode","stories","selectIsCurrentUserPremium","StealthModeModal","toggleStealthModal","activateStealthMode","showNotification","openPremiumModal","isOnCooldown","setIsOnCooldown","serverTime","getServerTime","cooldownUntil","handleTimerEnds","handleActivate","initialSection","contentClassName","isSlim","ListItem","multiline","inactive","leftElement","isShiny","withPremiumGradient","TextTimer","langKey","endsAt","onEnd","deleteStory","openNextStory","handleDeleteStoryClick","storyId","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","contactListIds","selectedIds","lockedIds","onSelect","searchQuery","setSearchQuery","displayedIds","contactIds","unique","filterPeersByQuery","ids","query","PeerPicker","itemIds","MEMO_EMPTY_ARRAY","lockedSelectedIds","filterValue","filterPlaceholder","searchInputId","isSearchable","withDefaultPadding","forceShowSelf","onSelectedIdsChange","onFilterChange","allowMultiple","withStatus","itemInputType","usersById","saveCloseFriends","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","isCloseFriend","useEffectWithPrevDeps","prevIsActive","handleSelectedContactIdsChange","handleSubmit","userIds","_Fragment","FloatingActionButton","isShown","OPTIONS","actions","Screens","selectPeerStory","visibility","contactList","users","byId","editStoryPrivacy","toggleStoryInProfile","isOpenModal","openModal","closeModal","privacy","setPrivacy","isPinned","setIsPinned","isInProfile","setActiveKey","editingBlockingCategory","setEditingBlockingCategory","isBackButton","allowList","allowUserIds","selectedBlockedIds","blockUserIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","handleCloseButtonClick","handleIsPinnedToggle","modal","noBackdrop","header","closeButton","headerTitle","closeFriends","denyList","renderHeaderContent","slideClassName","storyLifeTime","getHours","expireDate","section","list","option","checked","input","handleVisibilityChange","newVisibility","teactExperimentControlled","optionContent","option_name","tabIndex","role","handleActionClick","actionInner","getUserFullName","Switcher","footer","submit","renderPrivacyList","CloseFriends","AllowDenyList","PRIMARY_VIDEO_MIME","bufferCache","sizeCache","pendingRequests","makeProgressiveLoader","chunkSize","match","cacheKey","finally","delete","fullSize","checkIfStreamingSupported","mimeType","IS_SAFARI","getMediaSource","isTypeSupported","appendBuffer","sourceBuffer","buffer","error","warn","endOfStream","mediaSource","ManagedMediaSource","MediaSource","preloadedStories","canPreload","aroundStoryId","Array","isArray","getGlobal","byPeerId","orderedIds","mediaHashes","hash","format","isStream","loader","getProgressiveUrl","cachedSize","chunk","byteLength","preloadStream","mediaLoader","then","head","preload","autoplay","disableRemotePlayback","display","load","unloadVideo","preloadProgressive","preloadImage","preloadHashes","peerStories","selectPeerStories","preloadIds","currentId","slice","findIdsAroundCurrentId","currentStoryId","has","altVideos","Set","getPreloadMediaHashes","sender","fromPeerId","EmbeddedStoryForward","openStoryViewer","loadPeerStoriesByIds","openChat","storyIds","fromName","openOriginalStory","isDeleted","isSingleStory","handleMouseDown","useFastClick","PeerColorWrapper","getPeerColorClass","onMouseDown","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","renderTextWithEntities","renderTextContent","renderSender","isExpanded","onExpand","onFold","contentRef","textRef","showMoreButtonRef","renderingStory","useCurrentOrPrev","caption","hasOverflow","setHasOverflow","prevIsExpanded","usePrevDuringAnimation","isInExpandedState","addExtraClass","removeExtraClass","canExpand","shouldRenderShowMore","requestMeasure","button","offsetWidth","setProperty","requestForcedReflow","textContainer","textOffsetTop","lineHeight","totalLines","calcTextLineHeightAndCount","isOverflowing","overflowShift","scrollTo","fullClassName","MessageText","messageOrStory","withTranslucentThumbs","StoryFooter","openStoryViewModal","sendStoryReaction","views","isOut","sentReaction","viewsCount","forwardsCount","reactionsCount","isSentStoryReactionHeart","isSameReaction","HEART_REACTION","canForward","isPublic","containerId","getStoryKey","recentViewers","recentViewerIds","handleOpenStoryViewModal","handleForwardClick","handleLikeStory","reaction","AvatarList","peers","nonInteractive","ReactionAnimatedEmoji","withEffectOnly","getReactionKey","isViewed","isPaused","onImageComplete","handleAnimationEnd","animationName","onAnimationEnd","VIDEO_MIN_READY_STATE","appConfig","user","selectUser","selectChat","userFullInfo","selectUserFullInfo","viewModal","isPrivacyModalOpen","storyList","forwardMessages","forwardedStoryId","premiumModal","safeLinkModalUrl","mapModal","reportModal","giftInfoModal","isPaymentMessageConfirmDialogOpen","isPremiumModalOpen","shouldForcePause","reactionPicker","mediaAreas","forwardSenderId","find","area","channelId","forwardSender","withHeaderAnimation","fromPeer","fromId","paidMessagesStars","selectPeerPaidMessagesStars","isAccountFrozen","selectIsCurrentUserFrozen","storyIdsByPeerId","storyChangelogUserId","viewersExpirePeriod","storyViewersExpirePeriod","isChatExist","arePeerSettingsLoaded","settings","isArchivedStories","isPrivateStories","getIsAnimating","onDelete","viewStory","setStoryViewerMuted","openPreviousStory","loadPeerSkippedStories","copyStoryLink","openStoryPrivacyEditor","loadPeerSettings","fetchChat","loadStoryViews","oldLang","useLang","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","markDropdownMenuOpen","unmarkDropdownMenuOpen","isChangelog","isUserStory","isChatStory","isChannelStory","canPinToProfile","canUnpinFromProfile","areViewsExpired","forwardSenderTitle","canCopyLink","hasUsername","canShare","canPlayStory","shouldShowComposer","shouldShowFooter","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","thumbRef","useCanvasBlur","previewTransitionClassNames","useMediaTransitionDeprecated","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","shouldRenderCaption","captionAppearanceAnimationClassNames","isStreamingSupported","MediaSourceClass","onSourceOpen","addSourceBuffer","next","done","once","URL","createObjectURL","revokeObjectURL","useStreaming","useStoryPreloader","canWrite","handlePauseStory","handlePlayStory","handleLongPressStart","handleLongPressEnd","handleDropdownMenuOpen","handleDropdownMenuClose","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","hasAllData","useBackgroundMode","keyCode","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleOpenChat","handleForwardPeerClick","handleFromPeerClick","handleOpenPrevStory","handleOpenNextStory","handleVideoStoryTimeUpdate","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleReportStoryClick","handleInfoPrivacyEdit","handleInfoPrivacyClick","isForContacts","isForCloseFriends","myName","handleOpenStealthModal","activeUntil","diff","handleDownload","inputPlaceholder","amount","formatStarsAsIcon","asFont","withNodes","StoryProgress","formatRelativePastTime","isEdited","privacyIcon","gradient","renderStoryPrivacyButton","onOpen","Skeleton","OptimizedVideo","canPlay","isPriority","MediaAreaOverlay","StoryCaption","Composer","MAIN_THREAD_ID","getIsMobile","editableInputCssSelector","EDITABLE_STORY_INPUT_CSS_SELECTOR","editableInputId","EDITABLE_STORY_INPUT_ID","inputId","onFocus","onBlur","lastViewedByPeerId","lastViewedByPeerIds","lastViewedId","storyIdsForViewer","lastReadId","hasUnreadStories","previewIndexId","isLoaded","imageHash","thumbUrl","currentPeerId","isSinglePeer","isPrivate","isArchive","orderedPeerIds","active","peerIds","selectIsStoryViewerOpen","stopActiveReaction","renderingPeerId","setRenderingPeerId","renderingStoryId","setRenderingStoryId","prevPeerId","renderingIsArchive","renderingIsPrivate","renderingIsSinglePeer","renderingIsSingleStory","slideSizes","rendersRef","setIsAnimating","setRef","renderingPeerIds","renderingPeerPosition","currentPeerPosition","calculateTransformX","reduce","transformX","getCurrentStoryRef","composer","focusEditableElement","disableScrolling","enableScrolling","Object","entries","String","handleTransitionEnd","Story","onTransitionEnd","buildStyle","renderStory","StoryPreview","renderStoryPreview","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","scrollHeight","DEFAULT_REACTION_SIZE","storyView","availableReactions","reactions","StoryView","closeStoryViewer","unblockUser","blockUser","deleteContact","updateStoryView","closeStoryViewModal","contextActions","areStoriesBlocked","isUserBlocked","isContact","fullName","handler","isOnlyStories","statusIcon","shouldColorStatus","status","isModified","formatDateAtTime","opacityFadeIn","blocked","rightElement","ReactionStaticEmoji","viewReaction","withIconHeart","withPortalForMenu","menuBubbleClassName","menuBubble","PrivateChatInfo","withColoredStatus","noStatusOrTyping","GroupChatInfo","nextOffset","storyExpireDate","viewersExpireDate","loadStoryViewList","clearStoryViews","areJustContacts","markJustContacts","unmarkJustContacts","areReactionsFirst","markReactionsFirst","unmarkReactionsFirst","setQuery","isExpired","shouldShowJustContacts","STORY_VIEWS_MIN_CONTACTS_FILTER","shouldShowSortByReactions","STORY_MIN_REACTIONS_SORT","shouldShowSearch","STORY_VIEWS_MIN_SEARCH","hasHeader","refetchViews","sortedViews","sort","a","b","reactionA","reactionB","prepareComparator","placeholderCount","notAllAvailable","handleLoadMore","MoreMenuButton","isMenuOpen","fluid","sortButton","topButton","faded","iconSort","iconDown","viewsList","contactFilter","check","SearchInput","search","topScrolled","onScroll","centeredInfo","InfiniteScroll","items","onLoadMore","view","additionalKeyId","_","i","PlaceholderChatInfo","bottomInfo","closeStoryPrivacyEditor","reportStory","storyToDelete","setStoryToDelete","isPrevOpen","handleOpenDeleteModal","s","handleCloseDeleteModal","openMessageReport","thumb","safeAreaBottom","getComputedStyle","documentElement","getPropertyValue","parseFloat","toTranslateX","toTranslateY","toScaleX","toScaleY","ghost2","ghost2Top","StorySlides","StoryDeleteConfirmModal","StoryViewModal","StorySettings","TOPIC_ICON_SIZE","ITEM_CLASS_NAME","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","isLowStackPriority","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","selectTopicsById","selectTopics","forumTopicsById","useSelector","topicIds","topics","chatsById","chats","chatFullInfoById","fullInfoById","searchTitle","toLowerCase","values","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","renderChatItem","monoforumChannel","selectMonoforumChannel","isSelf","isApiPeerChat","subtitleClassName","getGroupStatus","userStatus","selectUserStatus","getUserStatus","isUserOnline","getSubtitle","PickerItem","FullNameTitle","isMonoforum","isSavedMessages","avatarElement","asMessageBubble","PEER_PICKER_ITEM_HEIGHT_PX","onKeyDown","placeholder","withAbsolutePositioning","maxHeight","Loading","topicId","TopicIcon","letterClassName","itemSelector","listIds","orderedPinnedIds","activeListIds","archivedListIds","archived","pinnedIds","RecipientPicker","API_CHAT_TYPES","onSelectRecipient","isForwarding","setSearch","priorityIds","hasAdminRights","getHasAdminRight","isDeletedUser","selectIsMonoforumAdmin","chatFullInfo","selectChatFullInfo","sorted","sortChatIds","filterChatIdsByType","renderingIds","isManyMessages","isStory","ForwardRecipientPicker","openChatOrTopicWithReplyInDraft","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","toChatId","getUserFirstOrLastName","getChatTitle","DraftRecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","AttachBotRecipientPicker","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","isSlowMode","hasErrorKey","dialogs","Dialogs","dismissDialog","sendMessage","isModalOpen","dialog","contactRequest","withMarkdown","renderTextFilters","handleConfirm","contact","messageList","getReadableErrorText","pick","Notifications","notifications","notification","Notification","localId","SafeLinkModal","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","OpenMapModal","closeMapModal","point","geoPoint","googleUrl","bingUrl","appleUrl","osmUrl","google","prepareMapUrl","bing","osm","handleGoogleClick","handleBingClick","handleAppleClick","handleOsmClick","currentUser","UrlAuthModal","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","isWriteAllowed","handleLoginChecked","Checkbox","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","padStart","formatDay","CalendarModal","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","isRemindMe","submitButtonLabel","secondButtonLabel","onSubmit","onDateChange","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","handleDateSelect","inputMode","historyCalendarSelectedAt","HistoryCalendar","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","phoneCodeList","countryList","phoneCodes","NewContactModal","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","ResizeHandleType","resizeHandleSelectorsMap","Top","Bottom","Left","Right","topLeft","TopLeft","topRight","TopRight","bottomLeft","BottomLeft","bottomRight","BottomRight","resizeHandleSelectors","resizeTimeout","FULLSCREEN_POSITION","webApps","selectActiveWebApp","modalState","openedWebApps","isMinimizedState","activeTabBot","MinimizedWebAppModal","changeWebAppModalState","closeWebAppModal","openedWebAppsValues","openedTabsCount","activeTabBotId","app","handleCloseClick","handleExpandClick","state","activeTabName","botName","pluralValue","renderTitle","isPopularApp","requestMainWebView","theme","extractCurrentThemeParams","activeUserCount","botActiveUsers","badgeText","formatIntegerCompact","PeerBadge","avatarContainer","textClassName","badgeClassName","userCountBadge","badgeIconClassName","userBadgeIcon","badgeIcon","runThrottled","cb","globalSearch","popularBotApps","fetchingStatus","botApps","recentBotIds","topBotApps","MoreAppsTabContent","shouldShowMoreMine","setShouldShowMoreMine","searchPopularBotApps","handleToggleShowMoreMine","prev","filteredFoundIds","LoadMoreDirection","Backwards","handleSearchInputReset","root","noFastList","preloadBackwards","onReset","sectionTitle","showMoreLink","sectionContent","WebAppGridItem","FULLSCREEN_BUTTONS_AREA_HEIGHT","MAIN_BUTTON_ANIMATION_TIME","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","activeWebApp","activeWebAppKey","selectWebApp","activeBotId","attachBot","attachMenu","bots","botAppSettings","botInfo","appSettings","selectTheme","isPaymentModalOpen","regularPaymentStatus","payment","starsPaymentStatus","inputInvoice","starsInputInvoice","starsPayment","botAppPermissions","selectBotAppPermissions","paymentStatus","WebAppModalTabContent","webApp","registerSendEventCallback","registerReloadFrameCallback","isTransforming","isMultiTabSupported","onContextMenuButtonClick","modalHeight","closeActiveWebApp","sendWebViewData","toggleAttachBot","openTelegramLink","setWebAppPaymentSlug","switchBotInline","sharePhoneWithBot","updateWebApp","resetPaymentStatus","openChatWithInfo","openEmojiStatusAccessModal","openLocationAccessModal","openPreparedInlineMessageModal","mainButton","setMainButton","secondaryButton","setSecondaryButton","markLoaded","markUnloaded","popupParameters","setPopupParameters","isRequestingPhone","setIsRequestingPhone","isRequestingWriteAccess","setIsRequestingWriteAccess","requestedFileDownload","setRequestedFileDownload","bottomBarColor","setBottomBarColor","unlockPopupsAt","handlePopupOpened","handlePopupClosed","setUnlockPopupsAt","sequentialCalls","lastClosedDate","usePopupLimit","headerButtonRef","headerButtonCaptionRef","exitFullScreenCallback","fullscreenElementRef","appName","activeWebAppName","backgroundColor","isBackButtonVisible","placeholderPath","isCloseModalOpen","isRemoveModalOpen","webAppKey","getWebAppKey","isAvailable","IS_GEOLOCATION_SUPPORTED","isAccessRequested","geolocation","isAccessGranted","updateCurrentWebApp","updatedPartialWebApp","update","themeParams","secondary_bg_color","themeBackgroundColor","bg_color","backgroundColorFromEvent","setBackgroundColorFromEvent","backgroundColorFromSettings","backgroundDarkColor","themeHeaderColor","headerColorFromEvent","setHeaderColorFromEvent","headerColorFromSettings","headerColor","headerDarkColor","frameRef","isSimple","reloadFrame","sendEvent","sendFullScreenChanged","sendViewport","sendSafeArea","sendTheme","useWebAppFrame","isSimpleView","onEvent","openInvoice","closeWebApp","openSuggestedStatusModal","updateContentSettings","isReloadSupported","reloadTimeout","ignoreEventsRef","lastFrameSizeRef","handleLoad","contentWindow","JSON","stringify","eventType","eventData","is_fullscreen","forceReloadFrame","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","skipClosingConfirmation","scrollbarColor","reload_supported","req_id","slug","linkUrl","available","custom_emoji_id","BigInt","customEmojiId","passed","minAge","verifyAgeMin","VERIFY_AGE_MIN_DEFAULT","ageFromParam","age","isSensitiveEnabled","plannedEvents","getIsWebAppsFullscreenSupported","exitIfFullscreenCallback","TME_LINK_PREFIX","path_full","shouldIgnoreCache","force_request","is_visible","isSettingsButtonVisible","validateHexColor","color_key","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","shouldConfirmClosing","buttons","handleAppPopupClose","chat_types","convertToApiChatType","isSamePeer","handleRejectPhone","handleRejectWriteAccess","handleRequestWriteAccess","method","requestId","parameters","customMethod","handleInvokeCustomMethod","handleRejectFileDownload","fileUrl","handleCheckDownloadFile","file_name","access_requested","access_granted","geolocationData","getGeolocationStatus","accessRequested","accessGranted","latitude","longitude","altitude","course","heading","speed","horizontal_accuracy","accuracy","vertical_accuracy","altitudeAccuracy","handleRequestLocation","isMainButtonVisible","isSecondaryButtonVisible","handleHideCloseModal","handleConfirmCloseModal","handleHideRemoveModal","handleMainButtonClick","handleSecondaryButtonClick","buttonId","button_id","handleAppPopupModalClose","sendThemeCallback","setFullscreenCallback","checkIfFullscreen","sendFullScreenChangedCallback","visibilityChangedCallBack","prevModalState","prevIsPaymentModalOpen","handleRemoveAttachBot","isEnabled","handleAcceptPhone","shouldCloseActive","handleAcceptWriteAccess","handleDownloadFile","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","secondaryButtonCurrentPosition","secondaryButtonCurrentColor","secondaryButtonCurrentTextColor","secondaryButtonCurrentIsActive","secondaryButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideMainButton","setShouldHideMainButton","shouldHideSecondaryButton","setShouldHideSecondaryButton","shouldShowMainButton","setShouldShowMainButton","shouldShowSecondaryButton","setShouldShowSecondaryButton","shouldShowAppNameInFullscreen","setShouldShowAppNameInFullscreen","backButtonTextWidth","setBackButtonTextWidth","isVerticalLayout","rowsCount","hideDirection","mainButtonChangeTimeout","mainButtonFastTimeout","secondaryButtonChangeTimeout","secondaryButtonFastTimeout","appNameDisplayTimeout","frameStyle","handleBackClick","handleCollapseClick","handleShowContextMenu","backIconClass","backButtonCaption","hasHeaderElement","viewBox","renderDefaultPlaceholder","sandbox","allow","allowFullScreen","hasCloseButton","filename","MINIMIZED_STATE_SIZE","DEFAULT_MAXIMIZED_STATE_SIZE","MAXIMIZED_STATE_MINIMUM_SIZE","miniAppsCachedPosition","miniAppsCachedSize","selectSharedSettings","cachedPosition","WebAppModal","prolongWebView","openWebAppTab","openMoreAppsTab","closeMoreAppsTab","updateMiniAppCachedPosition","updateMiniAppCachedSize","getMaximizedStateSize","setMaximizedStateSize","getSize","openedOrderedKeys","sessionKeys","isMoreAppsTabActive","tabs","isMaximizedState","isFullScreen","supportMultiTabMode","headerRef","menuRef","getTriggerElement","getRootElement","getMenuElement","isContextMenuOpen","contextMenuAnchor","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isDraggingEnabled","setIsDraggingEnabled","headerElement","containerElement","isDragging","draggableStyle","dragHandleElementRef","isDragEnabled","originalSize","minimumSize","elementCurrentPosition","setElementCurrentPosition","elementCurrentSize","setElementCurrentSize","getElementPositionOnStartTransform","setElementPositionOnStartTransform","getElementSizeOnStartTransform","setElementSizeOnStartTransform","getTransformStartPoint","setTransformStartPoint","elementPositionOnStartTransform","transformStartPoint","dragHandleElement","isInitiated","setIsInitiated","wasElementShown","setWasElementShown","startDragging","stopDragging","startResizing","stopResizing","isWindowsResizing","startWindowResizing","stopWindowResizing","hitResizeHandle","setHitResizeHandle","getVisibleArea","innerWidth","innerHeight","updateCurrentPosition","getActualPosition","getCenteredPosition","visibleArea","centeredPosition","handleStartDrag","MouseEvent","handleStartResize","targetElement","resizeHandle","RESIZE_HANDLE_SELECTOR","getResizeHandleFromTarget","handleDragRelease","handleResizeRelease","ensurePositionInVisibleArea","visibleAreaWidth","visibleAreaHeight","componentWidth","componentHeight","newX","newY","adjustPositionWithinBounds","newPosition","ensureSizeInVisibleArea","sizeForCheck","newSize","originalWidth","originalHeight","adjustSizeWithinBounds","handleWindowResize","handleDrag","sizeOnStartTransform","pageVisibleX","pageVisibleY","maxX","maxY","newBounds","cleanups","resizeHandler","cursorStyle","actualPosition","useDraggable","getMinimumSize","currentSize","currentWidth","currentHeight","queryId","openTabsCount","useInterval","replyInfo","sendEventCallback","reloadFrameCallback","callback","handleSettingsButtonClick","handleRefreshClick","handleModalClose","handleCloseMoreAppsTab","handleTabClose","handleToggleClick","handleFullscreenClick","handleOpenMoreAppsTabClick","handleTabClick","tab","openBotChat","renderMenuItems","isAttachBot","renderMoreMenu","anchor","backButtonClassName","headerTextVar","r","g","hexToRgb","luma","getColorLuma","renderTabCurveBorder","fill","buildResizeHandleClass","handleClassName","RESIZE_HANDLE_CLASS_NAME","useHorizontalScroll","dialogRef","dialogStyle","dialogContent","shortName","renderActiveTab","noBackdropClose","BotTrustModal","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","handleBotTrustAccept","handleBotTrustDecline","AttachBotInstallModal","confirmAttachBotInstall","cancelAttachBotInstall","isTosAccepted","setIsTosAccepted","tosLabel","split","linkText","MINI_APP_TOS_URL","rel","isConfirmDisabled","DeleteFolderDialog","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","COLORS","PremiumFeatureItem","isFontIcon","newIndex","colorA","colorB","ceil","lerpRgb","buttonClassName","fontIcon","SliderDots","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","isLast","isPreLast","isFirst","isPreFirst","isInvisible","PremiumLimitsCompare","leftValue","rightValue","floatingBadgeIcon","rightStyle","COLOR_START","COLOR_END","PremiumLimitPreview","colorStepProgress","lerp","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","play","isLowPriority","stickers","premium","PremiumFeaturePreviewStickers","setOffset","setSize","renderedStickers","cycleRestrict","BLUE","GREEN","STROKE_WIDTH","STROKE_WIDTH_LARGE","LARGE_SIZE","EXTRA_GAP_ANGLE","EXTRA_GAP_SIZE","GAP_PERCENT_EXTRA","EXTRA_GAP_START","EXTRA_GAP_END","drawGradientCircle","strokeWidth","strokeWidthPx","colorStops","segmentsCount","readSegmentsCount","withExtraGap","readSegmentColor","dpr","sizeModifier","strokeModifier","canvasSize","centerCoordinate","radius","segmentAngle","gapSize","GAP_PERCENT","createLinearGradient","addColorStop","colorStop","lineCap","clearRect","isRead","startAngle","endAngle","strokeStyle","lineWidth","beginPath","arc","stroke","appTheme","colors","useDevicePixelRatio","isLarge","adaptedSize","total","read","some","STORY_COLORS","STORY_FEATURE_TITLES","stories_order","stories_stealth","stories_views","stories_timer","stories_save","stories_caption","stories_link","STORY_FEATURE_DESCRIPTIONS","STORY_FEATURE_ICONS","STORY_FEATURE_ORDER","CIRCLE_STROKE_WIDTH","CIRCLE_SIZE","AVATAR_SIZES","giant","PremiumFeaturePreviewVideo","circleRef","maxSize","forPremiumPromo","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","wrapper","reverse","down","DeviceFrame","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","saved_tags","last_seen","message_privacy","effects","todo","PREMIUM_FEATURE_DESCRIPTIONS","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","recommendedChannels","moreAccounts","LIMITS_DESCRIPTIONS","PremiumFeatureModal","promo","isPremium","limits","premiumPromoOrder","subscriptionOption","onClickSubscribe","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","PREMIUM_FEATURE_SECTIONS","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","filteredSections","subscriptionButtonText","months","currency","perMonthPrice","price","formatCurrency","handleLimitsScroll","scrollContainer","animateHorizontalScroll","handleSelectSlide","currentSection","hasHeaderBackdrop","scrollLeft","scrollLeftOriginal","reverseIndex","prevElement","reverseElement","toString","toggleExtraClass","PREMIUM_LIMITS_ORDER","defaultLimit","premiumLimit","PremiumFeaturePreviewStories","videoSections","shouldUseNewLang","videos","PREMIUM_BOTTOM_VIDEOS","PremiumSubscriptionOption","fullMonthlyAmount","isGiveaway","perMonth","isUserCountPlural","discount","handleChange","formatCurrencyAsString","STATUS_EMOJI_SIZE","PREMIUM_FEATURE_COLOR_ICONS","PremiumStatus","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumTranslate","PremiumTags","PremiumLastSeen","PremiumMessagePrivacy","PremiumEffects","fromUser","fromUserId","fromUserStatusEmoji","emojiStatus","selectCustomEmoji","documentId","fromUserStatusSet","selectStickerSet","stickerSetInfo","isSuccess","isGift","monthsAmount","gift","toUser","toUserId","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","premiumSlug","premiumInvoiceSlug","premiumBotUsername","PremiumMainModal","closePremiumModal","requestConfetti","loadStickers","openStickerSet","isHeaderHidden","setHeaderHidden","setCurrentSection","selectedSubscriptionOption","setSubscriptionOption","handleOpenSection","handleResetSection","handleClickWithStartParam","handleChangeSubscriptionOption","foundOption","showConfetti","withStars","prevIsPremium","defaultOption","handleOpenStatusSet","monthOption","subscribeButtonText","giftSticker","getStickerFromGift","ParticlesHeader","model","getHeaderText","getHeaderDescription","CustomEmoji","renderHeader","statusText","entities","statusEntities","renderFooterText","template","first","second","emoji","thumbCustomEmojiId","link","perUserTotal","props","CountryPickerModal","useModuleLoader","Bundles","Extra","GiveawayChannelPickerModal","giveawayChatId","selectionLimit","initialSelectedIds","onSelectedIdsConfirmed","pendingChannelId","setPendingChannelId","isConfirmModalOpen","openConfirmModal","closeConfirmModal","setSelectedIds","channelIds","concat","isChatSuperGroup","displayedChannelIds","foundChannelIds","handleSelectedChannelIdsChange","newSelectedIds","privateLinkChannelId","isChatPublic","confirmPrivateLinkChannelSelection","handleModalConfirm","PickerModal","shouldAdaptToSearch","withFixedHeight","confirmButtonText","GiveawayTypeOption","isLink","onClickAction","userNames","selectedMemberIds","displayText","members","adminMembersById","GiveawayUserPickerModal","memberIds","statusesById","adminIdsSet","sortUserIds","displayedMemberIds","filteredUserIds","isUserBot","handleSelectedMemberIdsChange","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","giveawayModal","gifts","selectedMemberList","selectedChannelList","selectedChannelIds","giveawayBoostPerPremiumLimit","giveawayBoostsPerPremium","isStarsGiftEnabled","userSelectionLimit","giveawayAddPeersMax","countrySelectionLimit","giveawayCountriesMax","general","prepaidGiveaway","starsGiftOptions","starOptions","GiveawayModal","GIVEAWAY_BOOST_PER_PREMIUM","GIVEAWAY_MAX_ADDITIONAL_COUNTRIES","GIVEAWAY_MAX_ADDITIONAL_USERS","closeGiveawayModal","launchPrepaidGiveaway","launchPrepaidStarsGiveaway","isCalendarOpened","openCalendar","closeCalendar","isCountryPickerModalOpen","openCountryPickerModal","closeCountryPickerModal","isUserPickerModalOpen","openUserPickerModal","closeUserPickerModal","isChannelPickerModalOpen","openChannelPickerModal","closeChannelPickerModal","TYPE_OPTIONS","GiftStar","customExpireDate","setCustomExpireDate","selectedRandomUserCount","setSelectedRandomUserCount","selectedGiveawayOption","setGiveawayOption","selectedStarOption","setSelectedStarOption","selectedSubscriberOption","setSelectedSubscriberOption","selectedMonthOption","setSelectedMonthOption","selectedUserIds","setSelectedUserIds","setSelectedChannelIds","selectedCountryIds","setSelectedCountryIds","shouldShowWinners","setShouldShowWinners","shouldShowPrizes","setShouldShowPrizes","prizeDescription","setPrizeDescription","dataPrepaidGiveaway","setDataPrepaidGiveaway","dataStarsPrepaidGiveaway","setDataStarsPrepaidGiveaway","isPremiumGiveaway","isStarsGiveaway","selectedUserCount","boostQuantity","boostStarsQuantity","yearlyBoosts","SUBSCRIBER_OPTIONS","subLabel","monthQuantity","isStarsPrepaidGiveaway","isPremiumPrepaidGiveaway","selectedGift","selectedStarsGift","stars","filteredGifts","STARS_CURRENCY_CODE","basicGift","userCountOptions","winner","winnerCountOptions","winners","quantity","handlePremiumClick","boostChannelId","additionalChannelIds","isOnlyForNewSubscribers","countries","areWinnersVisible","untilDate","confirmLaunchPrepaidGiveaway","giveawayId","paymentPurpose","handleRandomUserCountChange","newValue","handleWinnerCountChange","handlePrizeDescriptionChange","handleChangeSubscriberOption","handleChangeTypeOption","handleExpireDateChange","handleSetCountriesListChange","handleSelectedUserIdsChange","handleShouldShowWinnersChange","handleShouldShowPrizesChange","onClickActionHandler","handleStarClick","renderGiveawayOptionList","filteredChannelIds","deleteParticipantsHandler","iconClassName","subLabelClassName","formatDateTimeToString","PremiumLogo","boosts","RangeSliderWithMarks","rangeCount","marks","StarTopupOptionList","selectedStarCount","Link","isPrimary","renderPremiumFeaturesLink","GIVEAWAY_MAX_ADDITIONAL_CHANNELS","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","savedDialogsPinned","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","PremiumLimitReachedModal","closeLimitReachedModal","isClosing","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","stickerSetEl","isClose","animateScroll","maxDistance","StickerSetCover","stickerSet","STICKER_SIZE_PICKER_HEADER","observeIntersection","sharedCanvasRef","hasThumbnail","hasVideoThumb","hasAnimatedThumb","hasStaticThumb","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","useIsIntersecting","shouldPlay","shouldFallbackToSticker","IS_WEBM_SUPPORTED","firstStickerHash","getStickerMediaHash","firstStickerMediaData","mediaHash","coords","useCoordsInSharedCanvas","observeIntersectionForPlaying","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","forceAlways","getFirstLetters","contentForStatusMenuContext","arg","StickerButton","noContextMenu","isStatusPicker","canViewSet","observeIntersectionForShowing","isSelected","shouldIgnorePremium","noShowPremium","withTranslucentThumb","clickArg","onFaveClick","onUnfaveClick","onRemoveRecentClick","onContextMenuOpen","onContextMenuClose","onContextMenuClick","isEffectEmoji","setEmojiStatus","isFree","hasEffect","isCustomEmoji","isLocked","shouldLoad","isIntesectingForShowing","handleBeforeContextMenu","shouldRenderContextMenu","getLayout","withPortal","shouldAvoidNegativePosition","handleRemoveClick","handleContextRemoveRecent","handleContextUnfave","handleContextFave","handleSendQuiet","handleSendScheduled","handleOpenSet","handleEmojiStatusExpiresClick","until","shouldShowCloseButton","contextMenuItems","preventMessageInputBlurWithBubbling","StickerView","isSmall","shouldLoop","shouldPreloadPreview","noLoad","noVideoOnMobile","withSharedAnimation","noFastClick","ReactionEmoji","loadAndPlay","sharedCanvasHqRef","isCustom","availableReaction","staticIcon","animationId","selectAnimation","getDocumentMediaHash","StarReaction","EMOJI_SIZE_PICKER","AnimatedIconWithPreview","collectibleStatuses","collectibleEmojiStatuses","statuses","StickerSet","isNearActive","favoriteStickers","isReactionPicker","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isChatEmojiSet","isChatStickerSet","isTranslucent","noContextMenus","onReactionSelect","onReactionContext","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isStatusCollectible","COLLECTIBLE_STATUS_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","accessHash","isInstalled","installedDate","isArchived","canCut","EFFECT_EMOJIS_SET_ID","EFFECT_STICKERS_SET_ID","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","collectibleEmojiIdsSet","withAddSetButton","addSetButtonText","pill","grey","reactionId","isHqEmoji","canvasRef","withSparkles","component","GiftEffectWrapper","HEADER_BUTTON_WIDTH","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","defaultTags","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","chatEmojiSetId","emojiSet","isWithPaidReaction","isPaidReactionAvailable","defaultTagReactions","CustomEmojiPicker","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","collectibleStatusEmojis","collectibleStatusEmojiIds","prefix","canLoadAndPlay","areAddedLoaded","allSets","defaultSets","TOP_SYMBOL_SET_ID","topReactionsSlice","unshift","cleanRecentReactions","topReaction","cleanAvailableReactions","isInactive","allRecentReactions","defaultStatusIconsPack","uniqueByField","defaultTopicIconsPack","userSetIds","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","newLeft","handleEmojiSelect","headerClassName","pickerStyles","listClassName","shouldCleanup","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","StatusPickerMenu","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CUSTOM_EMOJI_SIZE","SuggestedStatusModal","closeSuggestedStatusModal","sendWebAppEvent","renderingModal","mockPeerWithStatus","formatShortDuration","handleSetStatus","expires","referrerWebAppKey","hasAbsoluteCloseButton","loopLimit","PeerChip","mockPeer","withEmojiStatus","getFirstAvailableBoost","myBoosts","boost","firstBoost","prevBoostedChat","BoostModal","applyBoost","closeBoostModal","loadFullChat","isReplaceModalOpen","openReplaceModal","closeReplaceModal","isWaitDialogOpen","openWaitDialog","closeWaitDialog","isPremiumDialogOpen","openPremiumDialog","closePremiumDialog","chatTitle","boostedChatTitle","isStatusLoaded","isBoosted","leftText","rightText","descriptionText","canBoostMore","boostStatus","hasMyBoost","areBoostsInDifferentChannels","every","currentLevel","hasNextLevel","levelProgress","remainingBoosts","isMaxLevel","getBoostProgressInfo","hasBoost","moreBoosts","modalTitle","boostsLeftToUnrestrict","boostsToUnrestrict","boostsApplied","boostTimes","isBoostDisabled","isReplacingBoost","handleApplyBoost","slots","slot","handleProceedPremium","handleButtonClick","PremiumProgress","floatingBadgeText","isOnlyConfirm","chatMessage","GiftCodeModal","closeGiftCodeModal","applyGiftCode","canUse","toId","usedAt","handleOpenGiveaway","giveawayMessageId","modalData","LinkField","tableData","isFromGiveaway","TableInfoModal","getClosestEntry","arr","curr","selfDestructAccountDays","DeleteAccountModal","closeDeleteAccountModal","setAccountTTL","selectedOption","setSelectedOption","optionToDays","initialSelectedOption","ACCOUNT_TTL_OPTIONS","days","onCloseHandler","withIcon","verifyAgeBotUsername","AgeVerificationModal","closeAgeVerificationModal","openChatByUsername","handleVerifyAge","shouldStartMainApp","username","iconWrapper","mainText","ChatlistAlready","invite","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","missingPeerIds","hasChatsToAdd","isNew","alreadyPeerIds","newChatsCount","noCustomEmojiPlayback","noTitleAnimations","handleSelectionToggle","areAllSelected","pickerWrapper","pickerHeader","pickerHeaderInfo","selectionToggle","Badge","buttonBadge","isAlternateColor","ChatlistDelete","suggestedPeerIds","leaveChatlist","ChatlistNew","joinedIds","isNotJoined","selectedCount","removal","selectChatFolder","ChatlistInviteModal","renderingInfo","renderingFolderTitle","folderTabNumber","renderContent","folderTitle","foldersWrapper","folders","Tab","badgeCount","isBadgeActive","ChatInviteModal","acceptChatInvite","closeChatInviteModal","participantsRef","prevModal","usePrevious","inviteInfo","about","isBroadcast","participantIds","participantsCount","isRequestNeeded","handleAccept","acceptLangKey","requestToJoinLangKey","customPeer","getCustomPeerFromInvite","participants","withVideo","participantCount","participant","minLevelToRestrictAds","channelRestrictAdsLevelMin","AboutAdsModal","closeAboutAdsModal","moreMenuRef","canReport","additionalInfo","sponsorInfo","isMonetizationSharing","renderingIsNewDesign","regularAdContent","SafeLink","listItemData","TableAboutModal","headerIconName","withSeparator","SponsoredMessageContextMenuContainer","triggerRef","shouldSkipAbout","onItemClick","AboutMonetizationModal","blockchainText","monetizationTitle","specialReplacement","twoFaSettings","hint","passwordHint","VerificationMonetizationModal","closeMonetizationVerificationModal","clearMonetizationVerificationError","processMonetizationRevenueWithdrawalUrl","shouldShowPassword","setShouldShowPassword","password","currentPassword","handleClearError","PasswordForm","shouldShowSubmit","errorKey","withRegular","onClearError","shouldResetValue","onChangePasswordVisibility","EmojiStatusAccessModal","closeEmojiStatusAccessModal","toggleUserEmojiStatusPermission","loadDefaultStatusIcons","currentStatusIndex","setCurrentStatusIndex","totalCount","prevIndex","renderPickerItem","chatItem","itemClassName","itemName","isBotAccessEmojiGranted","renderStatusText","LocationAccessModal","closeLocationAccessModal","toggleUserLocationPermission","renderInfo","ReportAdModal","reportSponsored","closeReportAdModal","openPreviousReportAdModal","transitionRef","handleOptionClick","renderingSection","renderingDepth","sectionDepth","sections","bottomText","hasSubtitle","ACTIVE_SLIDE_CLASS_NAME","handleAnimationStart","TO_SLIDE_CLASS_NAME","narrow","secondaryIcon","ReportModal","reportMessages","closeReportModal","openPreviousReportModal","setText","subject","handleTextChange","closeReportMessageModalHandler","sendMessageReportHandler","Report","TextArea","isOptional","maxLengthIndicator","noReplaceNewlines","isBlurred","isBackgroundBlurred","patternColor","background","customBackground","selectThemeValues","PreparedMessageModal","closePreparedInlineMessageModal","openSharePreparedMessageModal","customBackgroundValue","useCustomBackground","handleOpenClick","localMessage","getMockPreparedMessageFromResult","bgClassName","inert","Message","noComments","noReplies","appearanceOrder","isJustAdded","isFirstInGroup","isLastInGroup","isLastInList","isFirstInDocumentGroup","isLastInDocumentGroup","starsBalance","balance","isStarsBalanceModalOpen","starsBalanceModal","SharePreparedMessageModal","closeSharePreparedMessageModal","sendInlineBotResult","updateSharePreparedMessageModalSendArgs","pendingSendArgs","starsForSendMessage","closeConfirmDialog","closeConfirmModalPayForMessage","dialogHandler","paymentMessageConfirmDialogHandler","shouldAutoApprove","shouldPaidMessageAutoApprove","setAutoApprove","setShouldPaidMessageAutoApprove","handleWithConfirmation","handleActionWithPaymentConfirmation","usePaidMessageConfirmation","handleSend","handleSendWithPaymentConfirmation","handleClosePaymentMessageConfirmDialog","peerName","PaymentMessageConfirmDialog","userName","messagePriceInStars","messagesCount","starBalance","currentDraft","selectDraft","maxStarsAmount","starsSuggestedPostAmountMax","minStarsAmount","starsSuggestedPostAmountMin","ageMinSeconds","starsSuggestedPostAgeMin","futureMin","starsSuggestedPostFutureMin","futureMax","starsSuggestedPostFutureMax","tonMaxAmount","tonSuggestedPostAmountMax","tonMinAmount","tonSuggestedPostAmountMin","isMonoforumAdmin","tonBalance","ton","SuggestMessageModal","closeSuggestMessageModal","updateDraftSuggestedPostInfo","openStarsBalanceModal","currentSuggestedPostInfo","suggestedPostInfo","currentReplyInfo","isInSuggestChangesMode","currencyAmount","setCurrencyAmount","selectedCurrency","setSelectedCurrency","scheduleDate","setScheduleDate","TON_CURRENCY_CODE","convertTonFromNanos","isCurrencyStars","defaultSelectedTime","handleAmountChange","number","isNaN","currentMaxAmount","handleAnytimeClick","currentMinAmount","handleOffer","neededAmount","convertTonToNanos","topup","balanceNeeded","nanos","modalHeader","form","currencySelector","currencyButton","currencyIcon","formatStarsAsText","formatTonAsText","formatScheduledDateTime","autoComplete","readOnly","timeInputIcon","offerButton","formatTonAsIcon","isAdmin","commissionPermille","starsSuggestedPostCommissionPermille","tonCommissionPermille","tonSuggestedPostCommissionPermille","SuggestedPostApprovalModal","closeSuggestedPostApprovalModal","approveSuggestedPost","selectedScheduleDate","setSelectedScheduleDate","handleApprove","handleCalendarDateChange","handleCalendarSubmit","handlePublishNow","handleNext","senderName","getPeerFullTitle","question","questionText","commission","amountWithCommission","formattedAmount","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","setIsLoading","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","sendGifs","checkMedia","mediaPermissions","v","sendMedia","assign","embedLinks","sendPlain","sendMessages","resetPermissions","permissionKeyList","fullInfo","hasLinkedChat","linkedChatId","PermissionCheckboxList","isMediaDropdownOpen","setIsMediaDropdownOpen","shiftedClassName","dropdownClassName","withCheckbox","getControlIsDisabled","permissionGroup","shouldDisablePermissionForPublicGroup","countCheckedPermissions","handleOpenMediaDropdown","handleDisabledClick","blocking","labelText","rightIcon","onClickLabel","sendPhotos","sendVideos","sendStickers","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","deleteMessageModal","canDeleteForAll","selectCanDeleteSelectedMessages","isSuperGroup","contactName","getPrivateChatUserId","chatBot","isSystemBot","selectBot","canBanUsers","isCreator","isChatWithBot","selectIsChatWithBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","DeleteMessageModal","closeDeleteMessageModal","deleteMessages","reportChannelSpam","deleteChatMember","deleteScheduledMessages","exitMessageSelectMode","updateChatMemberBannedRights","deleteParticipantHistory","defaultBannedRights","peerIdsToDeleteAll","setPeerIdsToDeleteAll","peerIdsToBan","setPeerIdsToBan","peerIdsToReportSpam","setPeerIdsToReportSpam","isAdditionalOptionsVisible","setIsAdditionalOptionsVisible","shouldDeleteForAll","setShouldDeleteForAll","peerList","senderArray","getSendersFromSelectedMessages","linkedMonoforumId","buildNestedOptionListWithAvatars","member","peerListToDeleteAll","peerListToReportSpam","peerListToBan","isCurrentUserInList","shouldShowOption","peerNames","buildCollectionByCallback","ACTION_SPAM_OPTION","nestedOptions","opt","ACTION_DELETE_OPTION","ACTION_BAN_OPTION","toggleAdditionalOptions","filterMessageIdByPeerId","selectedMessageIdList","msgId","selectSenderFromMessage","handleReportSpam","userMessagesMap","messageIdList","participantId","handleDeleteMessages","filteredMessageIdList","handleDeleteAllPeerMessages","peerIdList","handleDeleteMember","filteredUserIdList","handleUpdateChatMemberBannedRights","bannedRights","handleDeleteMessageList","CheckboxGroup","nestedCheckbox","isPrivateChat","canPinForAll","PinMessageModal","pinMessage","shouldPinForAll","setShouldPinForAll","handlePinMessage","isUnpin","isOneSide","isSilent","UnpinAllMessagesModal","pinnedMessagesCount","onUnpin","shouldWarnAboutFiles","selectCanReportSelectedMessages","selectCanDownloadSelectedMessages","selectedMessageIds","selectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectCanForwardMessages","hasIpRevealingMedia","selectHasIpRevealingMedia","isShareMessageModalOpen","isShareMessageModalShown","isAnyModalOpen","requestedAttachBotInstall","isRemindMeCalendarShown","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","MessageSelectToolbar","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","setSharedSettingOption","handleCopy","useHotkeys","useCopySelectedMessages","isFileIpDialogOpen","openFileIpDialog","closeFileIpDialog","shouldNotWarnAboutFiles","setShouldNotWarnAboutFiles","handleExitMessageSelectMode","handleDelete","onBackspace","onEsc","handleMessageDownload","handleFileIpConfirm","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","leftId","rightId","handleCloseSeenByModal","CLOSE_ANIMATION_DURATION","isReadDate","privacySettingsNoticeModal","PrivacySettingsNoticeModal","updateGlobalPrivacySettings","closePrivacySettingsNoticeModal","setPrivacyVisibility","loadUser","handleShowReadTime","shouldHideReadMarks","handleShowLastSeen","privacyKey","onSuccess","handleOpenPremium","ReadTime","LastSeen","Separator","ItemPicker","notFoundText","noScrollRestore","isViewOnly","forceRenderAllItems","onDisabledClick","optionalProps","lockedSelectedValues","lockedUnselectedValues","focusNoScroll","selectedValues","selectedValue","lockedSelectedValuesSet","lockedUnselectedValuesSet","sortedItemValuesList","lockedSelectedBucket","unlockedBucket","lockedUnselectableBucket","handleItemClick","newSelectedValues","splice","onSelectedValuesChange","onSelectedValueChange","viewportValuesList","handleFilterChange","renderItem","itemOption","isItemLoading","isAlwaysUnselected","isAlwaysSelected","isChecked","inputElement","Radio","onlyInput","pickerList","padded","noResults","noPickerScrollRestore","country","iso2","defaultName","handleSelectedIdsChange","pickerSelector","pickerTitle","main","picker","reactorModal","reactors","ReactorListModal","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","allReactions","uniqueReactions","seenByUserIds","flatMap","peerReactions","reactor","seenByUser","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","EmojiInteractionAnimation","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","endHeavyAnimation","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","ChatLanguageModal","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","highlight","CollectibleInfoModal","closeCollectibleInfoModal","isUsername","handleOpenUrl","formatUsername","collectible","copyTextToClipboard","formattedCollectible","purchaseDate","cryptoCurrency","cryptoAmount","Mention","Fragment","chip","createMapStateToProps","currentType","isVoice","byChatId","globalMessagesByChatId","messages","searchChatId","AudioResults","searchMessagesGlobal","openAudioPlayer","foundMessages","parseSearchResultKey","handleMessageFocus","handlePlayAudio","canRenderContents","NothingFound","withSticker","shouldDrawDateDivider","toYearMonth","selectMessageDownloadableMedia","formatMonthAndYear","Audio","AudioOrigin","Search","getSenderName","onDateClick","buttonRef","activeElement","selectIsChatPinned","getIsChatMuted","selectNotifyDefaults","selectNotifyException","canChangeFolder","chatFolders","LeftSearchResultChat","withUsername","withOpenAppButton","updateChatMutedState","openQuickPreview","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","handleUnmute","mutedUntil","UNMUTE_TIMESTAMP","useChatContextActions","altKey","handleOpenApp","useSelectWithEnter","hasMainMiniApp","MuteChatModal","ChatFolderModal","BotAppResults","recentSet","withoutRecent","handleChatClick","shouldReplaceHistory","renderSummary","isRoundVideo","renderMessageSummary","isSpoiler","getMessageIsSpoiler","getMessageVideo","privateChatUserId","privateChatUser","ChatMessage","useThumbnail","mediaThumbnail","getMessageSticker","useMessageMediaHash","mediaBlobUrl","getMessageRoundVideo","formatPastTimeShort","DateSuggest","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","selectTopic","LeftSearchResultTopic","foundTopicIds","ChatMessageResults","dateSearchQuery","onSearchDateSelect","openThread","handleTopicClick","nothingFound","LeftSearchResultSponsored","sponsoredPeer","viewSponsored","useOnIntersect","intersectionRatio","handleBadgeClick","handleBadgeMouseDown","BadgeButton","topUserIds","topPeers","recentlyFoundChatIds","RecentContacts","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","handleClearRecentlyFoundChats","isChannelList","globalResults","localResults","globalPeerIds","accountPeerIds","similarChannelIds","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","suggestedChannelIds","ChatResults","setGlobalSearchChatId","loadChannelRecommendations","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","searchContext","setSearchContext","context","handlePickerItemClick","getSearchContextCaption","handleClickContext","itemPlaceholderClass","startsWith","filteredChatIds","getOrderedIds","ALL_FOLDER_ID","localChatIds","contactIdsWithMe","localPeerIds","filteredIds","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","handleClickShowMoreLocal","handleClickShowMoreGlobal","actualFoundIds","isMessagesFetching","shouldRenderTopPeers","shouldRenderMessagesSection","noScrollRestoreOnTop","customIcon","CURRENT_TYPE","FileResults","observeIntersectionForMedia","getMessageDocument","Document","datetime","smaller","LinkResults","WebLink","onMessageClick","MediaResults","handleSelectMedia","isMediaGrid","isMessageList","Media","PublicPostsSearchLauncher","searchFlood","onSearch","queryIsFree","queryFromFlood","searchButtonActiveKey","useTransitionActiveKey","trimEnd","handleSearchClick","handlePaidSearchClick","starsAmount","checkSearchPostsFlood","onCheckFlood","handleSubscribePremiumClick","shouldRenderPaidScreen","remains","waitTill","loadingScreen","renderLimitReached","PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT","totalDaily","PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY","previewUrl","LOCAL_TGS_PREVIEW_URLS","limitTitle","limitDescription","paidSearchButton","noForcedUpperCase","freeSearchUnlock","renderSearchButton","remainingSearches","searchButton","searchButtonContent","searchIcon","searchIconWithNext","nextIcon","premiumTitle","premiumDescription","subscribePremiumButton","premiumSubtitle","publicPostsResult","publicPosts","shouldShowSearchLauncher","isNothingFound","animationLevel","PublicPostsResults","resolveTransitionName","TABS","GlobalSearchContent","ChannelList","BotApps","PublicPosts","Links","Files","Music","Voice","CHAT_TABS","currentContent","LeftSearch","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","handleSearchDateSelect","TabList","onSwitchTab","renderCount","INITIAL_STATE","email","twoFaReducer","payload","maxChats","selectCurrentLimit","SettingsFoldersChatFilters","mode","dispatch","onSaveFilter","openLimitReachedModal","chatFilter","selectedChatIds","selectedChatTypes","selectChatFilters","chatTypes","CUSTOM_PEER_INCLUDED_CHAT_TYPES","CUSTOM_PEER_EXCLUDED_CHAT_TYPES","isTouched","setIsTouched","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","shouldHideChatTypes","isChatList","chatIds","newFilter","includeFilters","includedChatIds","excludeFilters","excludedChatIds","handleSelectedChatTypesChange","newFilters","categories","selectedCategories","categoryPlaceholderKey","withPeerTypes","onSelectedCategoriesChange","FOLDER_COLORS","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","el","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","SettingsFoldersEdit","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","chatType","typeKey","renderChatType","STICKER_SIZE_FOLDER_SETTINGS","FoldersNew","FOLDER_TITLE_MAX_LENGTH","getApiPeerColorClass","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","areTagsEnabled","maxFolders","SettingsFoldersMain","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","sortChatFolders","toggleDialogFilterTags","setState","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","getFolderDescriptionText","handleCreateFolderFromRecommended","handleToggleTags","translation","handleDragEnd","canCreateNewFolder","FoldersAll","isBlocked","isDragged","draggedTop","shouldRenderColor","Draggable","onDragEnd","knobStyle","isStatic","allowSelection","shareFolderScreen","SettingsShareChatlist","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","pinnedChatIds","unlockedIds","partition","selectCanInviteToChat","isFirstRenderRef","prevUrl","handleClickDisabled","chatsCount","AnimatedIcon","FoldersShare","withShare","onRevoke","lockedUnselectedIds","SettingsFolders","currentScreen","shownScreen","openShareChatFolderModal","editChatFolder","openSettingsScreen","handleReset","SettingsScreens","FoldersCreateFolder","FoldersEditFolder","FoldersEditFolderFromChatList","FoldersEditFolderInvites","FoldersIncludedChats","FoldersExcludedChats","screen","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","FoldersIncludedChatsFromChatList","handleAddExcludedChats","FoldersExcludedChatsFromChatList","handleShareFolder","noRequestNextScreen","handleOpenInvite","Folders","SettingsPasswordForm","shouldDisablePasswordManager","expectedPassword","validationError","setValidationError","newPassword","SettingsPasscodeCongratulations","fullReset","STICKER_SIZE_PASSCODE","Congratulations","SettingsPasscodeEnabled","Lock","lockPreviewUrl","PasscodeChangePasscodeCurrent","PasscodeTurnOff","SettingsPasscodeStart","passcode","SettingsPasscode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","handleStartWizard","PasscodeNewPasscode","handleNewPassword","PasscodeNewPasscodeConfirm","handleNewPasswordConfirm","PasscodeCongratulations","handleChangePasswordCurrent","currentPasscode","decryptSession","PasscodeChangePasscodeNew","handleChangePasswordNew","PasscodeChangePasscodeConfirm","handleTurnOff","Privacy","PasscodeDisabled","SettingsPasscodeForm","PasscodeEnabled","DEFAULT_POINTS","getProgress","points","pointIndex","findIndex","prevPoint","nextPoint","pointValue","PaidMessageSlider","canChangeChargeForMessages","mainClassName","step","starsUsdWithdrawRateX1000","starsUsdWithdrawRate","configStarsPaidMessageCommissionPermille","starsPaidMessageCommissionPermille","starsPaidMessageAmountMax","DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES","isGroupChat","chargeForMessages","handleChargeForMessagesChange","handleUnlockWithPremium","MINIMUM_CHARGE_FOR_MESSAGES","percent","formatPercent","premiumSection","handleOpenPremiumModal","StarIcon","nonContactPeersPaidStars","selectNonContactPeersPaidStars","noPaidReactionsForUsersCount","noPaidMessages","shouldNewNonContactPeersRequirePremium","selectNewNoncontactPeersRequirePremium","shouldChargeForMessages","DEFAULT_CHARGE_FOR_MESSAGES","canLimitNewMessagesWithoutPremium","canChargeForMessages","starsPaidMessagesAvailable","canChangeForContactsAndPremium","setChargeForMessages","hasShownNotification","setHasShownNotification","prevSelectedValue","chatInvite","PrivacyGroupChats","actionText","phoneCall","PrivacyPhoneCall","PrivacyLockedOption","hidden","isCanCheckedInDisabled","privacyValue","updateGlobalPrivacySettingsWithDebounced","privacyDescription","PaidMessagePrice","itemSubtitle","PrivacyNoPaidMessages","renderSectionNoPaidMessagesForUsers","PremiumStatusItem","getSessionIcon","session","platform","device","deviceModel","systemVersion","getLocation","region","activeSessions","byHash","SettingsActiveSession","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","headerButton","iconDevice","dateActive","box","appVersion","ip","note","actionHeader","actionName","SettingsActiveSessions","orderedHashes","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","activeWebSessions","SettingsActiveWebsite","terminateWebAuthorization","renderingBot","browser","SettingsActiveWebsites","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","clearHelp","StickerSetCard","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","byKey","customEmojiSetIds","canPlayAnimatedEmojis","SettingsCustomEmoji","shouldSuggestCustomEmoji","stickerSettingsRef","handleStickerSetClick","handleSuggestCustomEmojiChange","customEmojiSets","SettingsDataStorage","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderContentSizeSlider","renderValue","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","doNotTranslate","SettingsDoNotTranslate","language","displayedOptions","setDisplayedOptions","displayedOptionList","currentLanguageOption","otherOptionList","prevLanguage","ManageUsernames","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","handleCopyUsername","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","usernameData","LINK_PREFIX_REGEX","runDebouncedForCheckUsername","UsernameInput","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","MIN_UPDATE_USERNAME_LENGTH","MAX_USERNAME_LENGTH","USERNAME_REGEX","test","handleUsernameChange","newUsername","isUsernameValid","success","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","getChatAvatarHash","currentBio","bio","SettingsEditProfile","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","renderPurchaseLink","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","SettingsExperimental","requestWave","snapButtonRef","isSnapButtonAnimating","setIsSnapButtonAnimating","accounts","useMultiaccountInfo","handleDownloadLog","file","File","getDebugLogs","DEBUG_LOG_FILENAME","handleRequestWave","startX","startY","handleRequestConfetti","handleSnap","animateSnap","newAccountUrl","freeIndex","getAccountSlotUrl","Experimental","IS_WAVE_TRANSFORM_SUPPORTED","IS_SNAP_EFFECT_SUPPORTED","shouldUseSystemTheme","messageSendKeyCombo","messageTextSize","timeFormat","SettingsGeneral","isMobileDevice","timeFormatOptions","appearanceThemeOptions","keyboardSendOptions","handleMessageTextSizeChange","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","GeneralChatBackground","WallpaperTile","wallpaper","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","loadedWallpapers","SettingsGeneralBackground","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","GeneralChatBackgroundColor","handleResetToDefault","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","SettingsHeader","editedFolderId","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","currentAmountRef","useMultiClick","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","EditProfile","General","QuickReaction","DataStorage","Language","DoNotTranslate","Stickers","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyForwarding","PrivacyVoiceMessages","PrivacyMessages","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyBioAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyPhoneNumberAllowedContacts","PrivacyBirthdayAllowedContacts","PrivacyGiftsAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PDeniedContacts","Performance","ActiveSessions","ActiveWebsites","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","canTranslate","canTranslateChats","languages","SettingsLanguage","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","oldSetLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","handleShouldTranslateChange","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","sessionCount","SettingsMain","openSupportChat","openGiftRecipientPicker","isSupportDialogOpen","openSupportDialog","closeSupportDialog","isPreload","handleOpenSupport","ProfileInfo","canPlayVideo","isForSettings","ChatExtra","chatOrUserId","isInSettings","languageInfo","formatStarsAmount","convertCurrencyFromBaseUnit","FAQ_URL","PRIVACY_URL","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","notifyDefaults","SettingsNotifications","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","areChannelsMuted","areGroupsMuted","groups","areUsersMuted","handleSettingsChange","peerType","setting","currentIsMuted","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MED","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","handleAnimationLevelChange","newLevel","performance","wasAnimationLevelSetManually","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","hasPassword","canChangeSensitive","shouldArchiveAndMuteNewNonContact","accountDaysTtl","hasPasscode","canDisplayChatInTitle","isCurrentUserFrozen","blockedCount","webAuthCount","canDisplayAutoarchiveSetting","needAgeVideoVerification","canSetPasscode","selectCanSetPasscode","SettingsPrivacy","openDeleteAccountModal","loadPrivacySettings","loadBlockedUsers","loadGlobalPrivacySettings","loadWebAuthorizations","loadAccountDaysTtl","openAgeVerificationModal","handleArchiveAndMuteChange","handleChatInTitleChange","handleUpdateContentSettings","handleAgeVerification","handleOpenDeleteAccountModal","dayOption","getVisibilityValue","shouldAllowPremium","botsPrivacy","isVisibilityEverybody","shouldShowBotsString","blockCount","blockChatIds","allowCount","allowChatIds","exceptionString","conjunction","lastSeen","profilePhoto","birthday","forwards","allowDisabledClick","voiceMessages","blockedIds","localContactIds","userSearch","localUserIds","BlockUserModal","setUserSearchQuery","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","SettingsPrivacyBlockedUsers","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","userMainUsername","CHAT_HEIGHT_PX","renderContact","getPrivacyKey","PrivacyPhoneP2P","PrivacyAddByPhone","disallowedGifts","SettingsAcceptedGift","handleOpenTelegramPremiumModal","handleLimitedEditionChange","shouldDisallowLimitedStarGifts","handleUnlimitedEditionChange","shouldDisallowUnlimitedStarGifts","handleUniqueChange","shouldDisallowUniqueStarGifts","handlePremiumSubscriptionChange","shouldDisallowPremiumGifts","selectShouldHideReadMarks","SettingsPrivacyLastSeen","canShowHideReadTime","handleChangeShouldHideReadMarks","SettingsPrivacyPublicProfilePhoto","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","PrivacySubsection","isPremiumRequired","visibilityOptions","hasNobody","primaryExceptionLists","shouldShowDenied","shouldShowAllowed","headerText","prepareSubtitle","userIdsCount","chatIdsCount","isAllowBots","userCountString","chatCountString","allowedString","blockString","allowedContactsScreen","deniedContactsScreen","primaryPrivacy","secondaryPrivacy","shouldDisplayGiftsButton","addByPhone","phoneP2P","SettingsPrivacyVisibility","handleShowGiftIconInChats","secondaryScreen","PREMIUM_CATEGORY","CUSTOM_PEER_PREMIUM","getCurrentPrivacySettings","SettingsPrivacyVisibilityExceptionList","isAllowList","withPremiumCategory","withMiniAppsCategory","usersOnly","setPrivacySettings","customPeerBots","isCustomPeer","avatarIcon","isAvatarSquare","peerColorId","miniAppsCategory","selectedContactIds","selectedCategoryTypes","newSelectedCategoryTypes","setNewSelectedCategoryTypes","SERVICE_NOTIFICATIONS_USER_ID","filteredChats","handleSelectedCategoriesChange","updatedIds","isPremiumAllowed","config","selectedReaction","defaultReaction","SettingsQuickReaction","setDefaultReaction","emoticon","addedSetIds","SettingsStickers","shouldSuggestStickers","shouldUpdateStickerSetOrder","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","SettingsTwoFaCongratulations","recoveryEmail","animatedEmoji","selectAnimatedEmoji","codeLength","waitingEmailCodeLength","SettingsTwoFaEmailCode","clearError","focusDelayTimeoutMs","setValue","handleInputChange","AnimatedIconFromSticker","SettingsTwoFaEnabled","SettingsTwoFaSkippableForm","shouldConfirm","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleSkip","handleSkipConfirm","SettingsTwoFaStart","SettingsTwoFa","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleNewPasswordHint","handleNewPasswordEmail","handleChangePasswordConfirm","handleChangePasswordHint","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaPassword","TRANSITION_RENDER_COUNT","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_BIO_SCREENS","PRIVACY_BIRTHDAY_SCREENS","PRIVACY_GIFTS_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","PRIVACY_MESSAGES_SCREENS","Settings","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","useScrollNotch","forceReturnToChatList","isFromSettings","renderCurrentSectionContent","isScreenActive","activeScreen","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","Main","SettingsGeneralBackgroundColor","SettingsPerformance","shouldWrap","withSwipeControl","_isFrom","_currentKey","userStatusesById","ContactList","openNewContactDialog","isSearching","NewChatStep1","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","foundContactIds","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","NewChatStep2","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","memberFirstNames","generatedChatName","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","NewChat","openLeftColumnContent","newChatMemberIds","setNewChatMemberIds","contentKey","NewChannelStep2","NewGroupStep2","changeSelectedMemberIdsHandler","isSelection","isStepActive","NewChannelStep1","NewGroupStep1","RIBBON_OFFSET","RIBBON_Z_INDEX","STROKE_OFFSET","CANVAS_OFFSET","callbacks","getHTMLElements","toggler","ribbon","leftMainHeader","ribbonPeers","ribbonStyles","toggleAvatars","sourceEl","sourceCanvas","getPeerId","getAttribute","selectByPeerId","createDelayedCallback","ms","timeout","cancelDelayedCallbacks","toggleStoriesHidden","isDense","handleSavedStories","profileTab","handleArchivedStories","handleOpenProfile","handleArchivePeer","StoryRibbonButton","isRibbonShown","isArchivedRibbonShown","isForumPanelOpen","selectIsForumPanelOpen","canShow","toggleStoryRibbon","PREVIEW_AVATAR_COUNT","preloadPeerIds","useShowTransition","withShouldRender","headerRight","lastToggleAvatar","firstToggleAvatar","lastId","toggleAvatar","zIndex","toScale","fromScale","togglerStyles","headerBottom","ArchivedChats","archiveSettings","isStoryRibbonShown","onTopicSearch","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","StoryToggler","folderType","isMainList","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","idsToRemove","idsToAdd","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","MUTE_INDEFINITE_TIMESTAMP","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isMessageThread","isCommentsInfo","fromChannelId","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","StickerSetModal","prevStickerSet","renderingStickerSet","isAdded","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","scheduledAt","handleCopyLink","suffix","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","CustomEmojiSetsModal","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","sets","teactFastList","customEmojiSet","setCard","BOT_BUTTONS","help","isRestricted","selectIsChatRestricted","canAddContact","getCanAddContact","isMainThread","currentChatId","currentThreadId","canReportChat","canGift","selectCanGift","canCreateTopic","isUserRightBanned","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","savedDialog","getIsSavedDialog","chatInfo","isTopic","isForumAsMessages","canDeleteChat","getCanDeleteChat","botCommands","commands","botPrivacyPolicyUrl","privacyPolicyUrl","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","isBot","HeaderMenuContainer","withExtraActions","withForumActions","canStartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canViewMonetization","canViewBoosts","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","canShowBoostModal","channelMonoforumId","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","openFrozenAccountModal","requestMasterAndRequestCall","toggleStatistics","openMonetizationStatistics","openBoostStatistics","openGiftModal","openThreadWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","setViewForumAsMessages","openBoostModal","setIsMenuOpen","shouldCloseFast","setShouldCloseFast","setIsDeleteModalOpen","setIsMuteModalOpen","isViewGroupInfoShown","areAllGiftsDisallowed","closeMenu","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftClick","forUserId","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleMonetizationClick","handleBoostClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","handleBlock","handleUnblock","handleSendChannelMessage","botButtons","commandButtons","cmd","hasPrivacyCommand","deleteTitle","MenuSeparator","DeleteChatModal","isSavedDialog","MiddleSearchResult","senderPeer","messageChat","shouldShowChat","hiddenForwardTitle","hiddenUserName","getMessageSenderName","hasVideo","hasMediaPreview","webPageInfo","siteName","displayUrl","isSafe","handleWebPageClick","shouldSkipModal","handleMediaClick","topRow","LastMessageMeta","meta","MessageSummary","truncateLength","webPageSite","webPageTitle","mediaPreview","clickable","mediaImage","spoiler","playIcon","CHANNELS_PEER","titleKey","RESULT_ITEM_CLASS_NAME","runDebouncedForSearch","requestedQuery","savedTag","fetchingQuery","isHashtag","selectCurrentMiddleSearch","lastSearchQuery","savedTags","savedReactionTags","monoforumChat","isHistoryCalendarOpen","isHashtagQuery","searchType","MiddleSearch","updateMiddleSearch","resetMiddleSearch","performMiddleSearch","closeMiddleSearch","openHistoryCalendar","loadSavedReactionTags","shouldCancelSearchRef","focusedIndex","setFocusedIndex","canFocusNewer","canFocusOlder","isFullyHidden","setIsFullyHidden","hiddenTimerRef","maybeLongPressActiveRef","isFocused","markFocused","markBlurred","isViewAsList","setIsViewAsList","customTerms","setCustomTerms","useLocalStorage","initValue","isAddingDomain","setIsAddingDomain","newDomainValue","setNewDomainValue","newDomainInputRef","refs","handleClickOutside","useClickOutside","hasResultsContainer","isOnlyHash","areResultsEmpty","hasResultsDropdown","hasQueryData","hasNavigationButtons","focusInput","blurInput","blur","visualViewport","mainEl","pageTop","requestNextMutation","prevIsCalendarOpen","savedTagsArray","hasSavedTags","areSavedTagsDisabled","handleQueryChange","newQuery","removeListeners","fastRaf","viewportResults","searchResultKey","originalSender","ANONYMOUS_USER_ID","selectForwardedSender","handleMessageClick","getSearchResultKey","handleTriggerViewStyle","foundResult","updateSearchParams","activateSearchTag","tag","removeSearchSavedTag","handleDeleteTag","handleChangeSearchType","handleFocusOlder","newFocusIndex","handleFocusNewer","renderTypeTag","isForTag","selectedType","presavedDomains","allDomains","handleDomainClick","handleAddDomainClick","handleSaveDomain","trimmedValue","handleCancelAddDomain","handleRemoveDomain","handleNewDomainKeyDown","renderDropdown","dropdown","dropdownHidden","separator","domainButtons","wrap","isChosen","domainButtonWrapper","reactionStyles","domainButton","chosen","removeDomainButton","newDomainInput","addDomainButton","SavedTagButton","withCount","searchTypes","teactOrderKey","focused","mobile","withDropdown","adaptSearchBorders","canClose","resultsItemSelector","hasUpButton","hasDownButton","onStartBackspace","withBackIcon","onUpClick","onDownClick","searchTags","savedSearchTag","icons","getDayStartAt","counter","viewStyle","mobileNavigation","navigationButton","navigationDisabled","recent","favorite","effect","chatStickerSetId","effectStickers","effectEmojis","recentStickers","selectShouldLoopStickers","StickerPicker","isForEffects","loadRecentStickers","addRecentSticker","unfaveSticker","faveSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","effectSets","existingAddedSetIds","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","CHAT_STICKER_SET_ID","maxUniqueReactions","enabledReactions","reactionsLimit","ReactionPickerLimited","isTouchScreen","currentReactions","shouldUseCurrentReactions","allAvailableReactions","reactionsToSort","sortReactions","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","pickerMaxHeight","REACTION_SELECTOR_WIDTH","availableEffectById","storyPeerId","sendAsMessage","areSomeReactionsAllowed","areAllReactionsAllowed","areCustomAllowed","shouldUseFullPicker","isForbidden","ReactionPicker","toggleReaction","closeReactionPicker","saveEffectInDraft","requestEffectInComposer","addLocalPaidReaction","openPaidReactionModal","renderedMessageId","renderedChatId","renderedStoryPeerId","renderedStoryId","storedPosition","renderingPosition","deltaX","FULL_PICKER_SHIFT_DELTA","handleToggleCustomReaction","shouldAddToRecent","handleToggleReaction","handleReactionContextMenu","handleStoryReactionSelect","customEmojiMessage","parseHtmlAsFormattedText","buildCustomEmojiHtml","isReaction","availableEffects","effectId","effectStickerId","chosenOrder","backdropExcludedSelector","div","BLUR_CANVAS_SIZE","AttachmentModalItem","attachment","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","isFullyVisible","isHorizontal","viewportY1","viewportY2","y2","findInViewport","selectorOrElements","shouldContainBottom","allElements","visibleIndexes","isFound","setTooltipItemVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","metaKey","shiftKey","isSelectionOutOfRange","onUp","onDown","onTab","MentionTooltip","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","selectedMentionIndex","prevChatMembers","renderedChatMembers","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","shouldSaveAttachmentsCompression","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","keywords","customEmojiForEmoji","forEmoji","captionLimit","AttachmentModal","attachments","getHtml","editingMessage","canShowCustomSendMenu","isForMessage","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onSend","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","canSchedule","onSendWhenOnline","svgRef","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isEditing","groupedId","notEditingFile","getAttachmentMediaType","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","isInvertedMedia","shouldSendInHighQuality","setShouldSendInHighQuality","renderingShouldSendInHighQuality","setRenderingShouldSendInHighQuality","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","timerRef","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","setIsInvertedMedia","removeAllSelections","isCustomSendMenuOpen","sendAttachments","shouldSendScheduled","defaultAttachmentCompression","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleToggleShouldCompress","handleToggleQuality","handleDisableSpoilers","handleToggleSpoiler","svg","baseVal","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","hasAnyPhoto","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","canInvertMedia","attachmentsLength","isBottomDividerShown","buttonSendCaption","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","rx","uniqueId","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","PollModal","isQuiz","shouldBeAnonymous","maxOptionsCount","questionInputRef","optionsListRef","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","addNewOption","newOptions","behavior","handleCreate","isNoCorrectOptionError","answers","correct","questionTrimmed","substring","optionsTrimmed","o","summary","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","maxItemsCount","todoItemsMax","maxTitleLength","todoTitleLengthMax","maxItemLength","todoItemLengthMax","ToDoListModal","editTodo","closeTodoListModal","appendTodoList","titleInputRef","itemsListRef","setItems","generateUniqueNumberId","isOthersCanAppend","setIsOthersCanAppend","isOthersCanComplete","setIsOthersCanComplete","isAddTaskMode","forNewTask","isOutgoing","editingTodo","frozenTasks","othersCanAppend","othersCanComplete","editingItems","inputs","lastInput","addNewItem","newItems","todoItems","titleTrimmed","itemsTrimmed","updateItem","removeItem","handleIsOthersCanAppendChange","handleIsOthersCanCompleteChange","getTitleError","getItemsError","moreTasksCount","tasksToRender","stateIndex","renderItems","EmojiButton","native","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","EmojiCategory","category","allEmojis","emojisPerRow","displayedEmoji","ICONS_BY_CATEGORY","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","EmojiPicker","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","GifButton","onUnsaveClick","hasVideoPreview","getVideoMediaHash","withThumb","videoHash","getVideoPreviewMediaHash","videoData","shouldRenderVideo","isVideoReady","handleUnsaveClick","handleContextDelete","gifs","saved","GifPicker","canSendGifs","onGifSelect","loadSavedGifs","saveGif","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","GIFs","SYMBOL_MENU_TAB_ICONS","SymbolMenuFooter","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","SymbolMenu","isMessageComposer","menuPositionOptions","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","isFrom","mobileClassName","onMouseEnter","ChatCommand","withAvatar","freezeWhenClosed","ChatCommandTooltip","quickReplies","quickReplyMessages","self","sendQuickReply","handleSendCommand","handleSendQuickReply","quickReplyId","quickRepliesWithDescription","reply","topMessageId","shortcut","handleKeyboardSelect","selectedCommandIndex","isEmpty","BotCommandMenu","botCommand","StickerTooltip","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","emojiButton","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onRemoveEffect","withEffects","hasCurrentEffect","effectReactions","onToggleReaction","isInSavedMessages","isInStoryViewer","openEffectPicker","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","areItemsHidden","hideItems","showItems","markIsReady","unmarkIsReady","handleOpenMessageEffectsPicker","ReactionSelector","onShowMore","TEXT_FORMAT_BY_TAG_NAME","B","STRONG","I","EM","U","DEL","CODE","SPAN","fragmentEl","TextFormatter","anchorPosition","selectedRange","setSelectedRange","linkUrlInputRef","isLinkControlOpen","openLinkControl","closeLinkControl","setLinkUrl","isEditingLink","setIsEditingLink","inputClassName","setInputClassName","selectedTextFormats","setSelectedTextFormats","useVirtualBackdrop","selectedFormats","parentElement","commonAncestorContainer","EDITABLE_INPUT_ID","textFormat","tagName","restoreSelection","selection","getSelection","removeAllRanges","addRange","updateSelectedRange","getRangeAt","getSelectedText","shouldDropCustomEmoji","replaceChildren","cloneContents","INPUT_CUSTOM_EMOJI_SELECTOR","getSelectedElement","updateInputStyles","scrollWidth","getFormatButtonClassName","fKey","monospace","strikethrough","handleSpoilerText","entityType","ApiMessageEntityTypes","Spoiler","execCommand","handleBoldText","handleItalicText","italic","handleUnderlineText","underline","handleStrikethroughText","handleMonospaceText","handleLinkUrlConfirm","formattedLinkUrl","encodeURI","u","m","p","getKeyFromEvent","linkUrlConfirmClassName","spellCheck","CustomEmojiButton","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","BaseResult","thumbnailDataUrl","getWebDocumentHash","decoding","ArticleResult","inlineResult","webThumbnail","GifResult","_gif","MediaResult","isForGallery","thumbnailBlobUrl","getPhotoMediaHash","StickerResult","STICKER_SIZE_INLINE_BOT_RESULT","InlineBotTooltip","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","isFromSwitchWebView","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","SendAsMenu","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","membersCount","StickerSetResult","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","StickerSearch","loadFeaturedStickers","selectCurrentGifSearch","canPostInChat","GifSearch","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","postStatistic","StatisticsRecentMessage","toggleMessageStatistics","StatisticsRecentPostMeta","toggleStoryStatistics","imgBlobUrl","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","reactionsByEmotionGraph","storyInteractionsGraph","storyReactionsByEmotionGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","statistics","selectStatistics","dcId","statisticsDcId","messagesById","storiesById","Statistics","setIsReady","loadedCharts","errorCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","isGraph","graphType","token","isPercentage","ensureLovelyChart","isAsync","isError","zoomToken","create","zoomOutLabel","StatisticsOverview","isGraphReady","recentPosts","StatisticsRecentStory","StatisticsMessagePublicForward","GRAPH_TITLES","viewsGraph","reactionsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","loadMessagePublicForwards","publicForwardsData","publicForwards","currentStory","loadStoryStatistics","loadStoryPublicForwards","StatisticsStoryPublicForward","answer","voters","offsets","pollResults","PollAnswerResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","ShowMoreButton","renderViewMoreButton","poll","selectPollFromMessage","PollResults","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","CreateTopic","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","noLoopLimit","editTopicPanel","EditTopic","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","ERROR_NAME_MISSING","management","ManageBot","setBotInfo","uploadContactProfilePhoto","startBotFatherConversation","isFieldTouched","markFieldTouched","unmarkProfileTouched","isAvatarTouched","markAvatarTouched","unmarkAvatarTouched","currentName","setName","ManagementProgress","handleNameChange","trimmedName","handleChangeEditIntro","handleChangeEditCommands","handleChangeSettings","isSuggestRef","handleSelectAvatar","isSuggest","CHANNEL_TITLE_EMPTY","minLevelToToggleAutoTranslation","channelAutoTranslationLevelMin","hasAutoTranslation","chatBoostLevel","level","canToggleAutoTranslation","canChangeInfo","canInvite","exportedInvites","ManageChannel","onScreenSelect","updateChat","closeManagement","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleAutoTranslation","currentTitle","currentAbout","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","hasAutoTranslationAvailable","handleAutoTranslationChange","isRevoked","adminsCount","removedUsersCount","kickedMembers","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickReactions","Reactions","handleClickAdministrators","ChatAdministrators","handleClickInvites","Invites","handleClickRequests","JoinRequests","handleSetPhoto","handleAboutChange","handleUpdateChannel","trimmedTitle","trimmedAbout","handleClickSubscribers","ChannelSubscribers","handleRemovedUsersClick","ChannelRemovedUsers","handleDeleteChannel","chatReactionsDescription","enabledLength","totalLength","isChannelPublic","formatInteger","joinRequests","ManageChatAdministrators","onChatMemberSelect","toggleSignatures","areSignaturesEnabled","areSignaturesShown","areProfilesEnabled","areProfilesShown","canAddNewAdmins","canToggleSignatures","adminMembers","admins","isOwner","handleAdminMemberClick","promotedByUserId","ChatAdminRights","handleToggleSignatures","handleToggleProfiles","handleAddAdminClick","GroupAddAdmins","getMemberStatus","promotedByUser","selectManagement","maxPublicLinks","privateInviteLink","inviteLink","ManageChatPrivacyType","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","chatMembers","RemoveGroupUserModal","loadMoreMembers","usersId","availableMemberIds","canDeleteMembers","removedMembers","ManageChatRemovedUsers","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","forDiscussionIds","linkedChat","ManageDiscussion","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","Initial","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","handleNewGroupClick","NewDiscussionGroup","DiscussionGroups","STICKER_SIZE_DISCUSSION_GROUPS","withPrimaryColor","linkedGroup","renderLinkGroupHeader","renderLinkGroupConfirmText","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","isChannelsPremiumLimitReached","ManageGroup","togglePreHistoryHidden","deleteChat","toggleForum","isForumEnabled","setIsForumEnabled","isPublicGroup","isPreHistoryHiddenCheckboxRef","handleClickPermissions","GroupPermissions","handleUpdateGroup","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","enabledPermissionsCount","handleDeleteGroup","isForForum","isPromotedByCurrentUser","isFormFullyDisabled","defaultRights","adminRights","hasFullInfo","ManageGroupAdminRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedChatMember","selectedAdminMember","handleSavePermissions","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","postStories","editStories","deleteStories","banUsers","addAdmins","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","canAddMembers","globalUserIds","ManageGroupMembers","noAdmins","toggleParticipantsHidden","setNewChatMembersDialogState","deletingUserId","setDeletingUserId","adminIds","usePeerStoriesPolling","shouldUseSearchResults","listedIds","ChatNewAdminRights","handleDeleteMembersModalClose","handleToggleParticipantsHidden","handleNewMemberDialogOpen","newChatMembersProgress","NewChatMembersProgress","memberId","DeleteMemberModal","arePaidMessagesAvailable","groupPeersPaidStars","ManageGroupPermissions","updateChatDefaultBannedRights","updatePaidMessagesPrice","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","GroupUserPermissions","isPriceForMessagesChanged","markPriceForMessagesChanged","unmarkPriceForMessagesChanged","isPriceForMessagesOpen","setIsPriceForMessagesOpen","handleUpdatePaidMessagesPrice","handleUpdatePermissions","exceptionMembers","getMemberExceptions","getLangKeyForBannedRightKey","translatedString","handleChargeStarsForMessages","arePermissionsChanged","arePermissionsLoading","ManageGroupUserPermissions","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","ManageGroupUserPermissionsCreate","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","ManageInvite","editExportedChatInvite","exportChatInvite","setIsRequestNeeded","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","usageLimit","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleSaveClick","formatFullDate","n","importers","requesters","ManageInviteInfo","loadChatInviteImporters","loadChatInviteRequesters","usage","adminId","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","ManageInvites","setEditingExportedInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","askToRevoke","handleCreateNewClick","EditInvite","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","InviteInfo","deleteInvite","askToDelete","copyLink","prepareUsageText","requested","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","Invite","STICKER_SIZE_INVITES","JoinRequest","hideChatJoinRequest","createClassNameBuilder","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","ManageJoinRequests","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","ManageReactions","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","localReactionsLimit","setLocalReactionsLimit","reactionsOptions","handleSaveReactions","availableActiveReactions","localAllowedReactions","enabledAllowedReactions","localReaction","enabledReaction","handleReactionsOptionChange","handleReactionChange","local","handleReactionsLimitChange","renderReactionsMaxCountValue","shouldShowReactionsLimit","isCenteredLayout","notPersonalPhoto","ManageUser","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","markProfileFieldsTouched","unmarkProfileFieldsTouched","isNotificationsTouched","markNotificationsTouched","unmarkNotificationsTouched","isNotificationsEnabled","setIsNotificationsEnabled","handleNotificationChange","handleDeleteContact","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","trimStart","discussionChannelId","managementType","selectCurrentManagementType","Management","GroupRecentActions","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","Checkout","invoice","shippingPrices","checkoutInfo","totalPrice","onAcceptTos","needAddress","hasShippingOptions","savedCredentials","isPaymentFormUrl","setPaymentStep","isInteractive","termsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","useMediaTransition","hasMediaData","handleTipsClick","tips","handlePaymentMethodClick","PaymentStep","SavedPayments","PaymentInfo","handleShippingAddressClick","ShippingInfo","handleShippingMethodClick","Shipping","checkoutPicture","forceAspectRatio","checkoutTitle","checkoutDescription","priceInfo","prices","renderPaymentItem","priceInfoItem","priceInfoItemTitle","tipsList","tip","tipsItem","tipsItem_active","shouldOmitFractions","invoiceInfo","renderCheckoutItem","provider","langStringSplit","renderTosLink","tosCheckbox","priceInfoItemMain","checkoutInfoItemInfoTitle","checkoutInfoItemInfoData","ConfirmPayment","noRedirect","onPaymentFormSubmit","messageKey","PasswordConfirm","onPasswordChange","clearPaymentError","cardName","onInputChange","CardInput","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","ExpiryInput","endsWith","formatCardExpiry","canSaveCredentials","needCardholderName","needCountry","needZip","selectCountryRef","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleCountryChange","handleBillingPostCodeChange","handleChangeSaveCredentials","Select","hasArrow","SavedPaymentCredentials","onNewCardClick","shippingOptions","handleShippingSelect","needEmail","needPhone","needName","phoneRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","confirmPaymentUrl","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","nativeParams","nativeProvider","providerName","isProviderError","smartGlocalToken","stripeId","passwordValidUntil","validUntil","PaymentModal","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","setSmartGlocalCardInfo","paymentState","paymentDispatch","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","setStep","nextStep","field","savedInfo","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","sendForm","shippingOptionId","handlePaymentFormSubmit","credentials","renderModalContent","currentStep","isShippingAddressRequested","ConfirmPassword","isPasswordMissing","isEmailRequested","isEmailSentToProvider","isPhoneRequested","isPhoneSentToProvider","isNameRequested","validateRequest","requestInfo","getRequestInfo","sendCredentials","expiryMonth","expiryYear","zip","getCredentials","shouldFillRequestedData","isSubmitDisabled","getIsSubmitDisabled","isRecurring","cleanupOnlyKey","descriptionKey","renderError","optionId","receipt","ReceiptModal","prevReceipt","renderingReceipt","fullAddress","credentialsTitle","totalAmount","InviteViaLinkModal","sendInviteMessages","closeInviteViaLinkModal","missingUsers","setSelectedMemberIds","unselectableIds","selectableIds","requirePremiumIds","regularIds","isRequiringPremiumToMessage","invitableWithPremiumIds","isRequiringPremiumToInvite","isEveryPremiumBlocksPm","topListPeers","handleSendInviteLink","canSendInviteLink","inviteSectionText","premiumSectionText","hasPremiumSection","hasSelectableSection","lockedUnselectedSubtitle","OneTimeMediaModal","closeOneTimeMediaModal","handlePlayVoice","isOwn","isOwnMessage","closeBtnTitle","voice","OneTimeModal","RoundVideo","onStop","renderMedia","WebAppsCloseConfirmationModal","closeWebAppsCloseConfirmationModal","shouldSkipInFuture","setShouldSkipInFuture","shouldSkipConfirmation","handleSelectWithEnter","freezeUntilDate","freezeAppealUrl","botFreezeAppeal","botFreezeAppealId","botFreezeAppealUsername","FrozenAccountModal","closeFrozenAccountModal","handleAppeal","BannedDuck","botLink","hasBackdrop","starsRating","pendingRating","starsMyPendingRating","pendingRatingDate","starsMyPendingRatingDate","ProfileRatingModal","closeProfileRatingModal","showFutureRating","setShowFutureRating","handleShowFuture","handleShowCurrent","renderBadge","badgeClass","rating","currentStars","currentLevelStars","nextLevelStars","nextLevel","isNegative","pendingLevel","waitTime","pendingPoints","shouldShowPreview","animationDirection","userFallbackText","renderPreviewDescription","shouldRestoreHeight","typingStatus","selectThreadParam","unreadCount","connectionState","isSyncing","isFetchingDifference","hasUnreadMark","QuickPreviewModalHeader","markChatMessagesRead","connectionStatusText","useConnectionStatus","handleMarkAsRead","savedMessagesStatus","realChatId","displayChatId","withDots","withMediaViewer","withStory","withUpdatingStatus","emojiStatusSize","noRtl","withMonoforumStatus","QuickPreviewModal","closeQuickPreview","handleContentClick","renderingChatId","renderingThreadId","backgroundStyles","customBgImage","customBgColor","blurred","MessageList","withDefaultBg","isQuickPreview"],"sourceRoot":""}